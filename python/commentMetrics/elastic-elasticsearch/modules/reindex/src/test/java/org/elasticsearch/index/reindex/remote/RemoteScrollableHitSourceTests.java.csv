# id;timestamp;commentText;codeText;commentWords;codeWords
RemoteScrollableHitSourceTests -> public void testParseScrollFullyLoadedFrom1_7() throws Exception;1524684173;Test for parsing _ttl, _routing, and _parent. _timestamp isn't available.;public void testParseScrollFullyLoadedFrom1_7() throws Exception {_        AtomicBoolean called = new AtomicBoolean()__        sourceWithMockedRemoteCall("scroll_fully_loaded_1_7.json").doStartNextScroll("", timeValueMillis(0), r -> {_            assertEquals("AVToMiDL50DjIiBO3yKA", r.getHits().get(0).getId())__            assertEquals("{\"test\":\"test3\"}", r.getHits().get(0).getSource().utf8ToString())__            assertEquals("testrouting", r.getHits().get(0).getRouting())__            called.set(true)__        })__        assertTrue(called.get())__    };test,for,parsing,and,isn,t,available;public,void,throws,exception,atomic,boolean,called,new,atomic,boolean,source,with,mocked,remote,call,json,do,start,next,scroll,time,value,millis,0,r,assert,equals,avto,mi,dl50dj,ii,bo3y,ka,r,get,hits,get,0,get,id,assert,equals,test,test3,r,get,hits,get,0,get,source,utf8to,string,assert,equals,testrouting,r,get,hits,get,0,get,routing,called,set,true,assert,true,called,get
RemoteScrollableHitSourceTests -> public void testParseScrollFullyLoadedFrom1_7() throws Exception;1535139672;Test for parsing _ttl, _routing, and _parent. _timestamp isn't available.;public void testParseScrollFullyLoadedFrom1_7() throws Exception {_        AtomicBoolean called = new AtomicBoolean()__        sourceWithMockedRemoteCall("scroll_fully_loaded_1_7.json").doStartNextScroll("", timeValueMillis(0), r -> {_            assertEquals("AVToMiDL50DjIiBO3yKA", r.getHits().get(0).getId())__            assertEquals("{\"test\":\"test3\"}", r.getHits().get(0).getSource().utf8ToString())__            assertEquals("testrouting", r.getHits().get(0).getRouting())__            called.set(true)__        })__        assertTrue(called.get())__    };test,for,parsing,and,isn,t,available;public,void,throws,exception,atomic,boolean,called,new,atomic,boolean,source,with,mocked,remote,call,json,do,start,next,scroll,time,value,millis,0,r,assert,equals,avto,mi,dl50dj,ii,bo3y,ka,r,get,hits,get,0,get,id,assert,equals,test,test3,r,get,hits,get,0,get,source,utf8to,string,assert,equals,testrouting,r,get,hits,get,0,get,routing,called,set,true,assert,true,called,get
RemoteScrollableHitSourceTests -> public void testParseScrollFullyLoadedFrom1_7() throws Exception;1543473699;Test for parsing _ttl, _routing, and _parent. _timestamp isn't available.;public void testParseScrollFullyLoadedFrom1_7() throws Exception {_        AtomicBoolean called = new AtomicBoolean()__        sourceWithMockedRemoteCall("scroll_fully_loaded_1_7.json").doStartNextScroll("", timeValueMillis(0), r -> {_            assertEquals("AVToMiDL50DjIiBO3yKA", r.getHits().get(0).getId())__            assertEquals("{\"test\":\"test3\"}", r.getHits().get(0).getSource().utf8ToString())__            assertEquals("testrouting", r.getHits().get(0).getRouting())__            called.set(true)__        })__        assertTrue(called.get())__    };test,for,parsing,and,isn,t,available;public,void,throws,exception,atomic,boolean,called,new,atomic,boolean,source,with,mocked,remote,call,json,do,start,next,scroll,time,value,millis,0,r,assert,equals,avto,mi,dl50dj,ii,bo3y,ka,r,get,hits,get,0,get,id,assert,equals,test,test3,r,get,hits,get,0,get,source,utf8to,string,assert,equals,testrouting,r,get,hits,get,0,get,routing,called,set,true,assert,true,called,get
RemoteScrollableHitSourceTests -> public void testParseScrollFullyLoadedFrom1_7() throws Exception;1548953505;Test for parsing _ttl, _routing, and _parent. _timestamp isn't available.;public void testParseScrollFullyLoadedFrom1_7() throws Exception {_        AtomicBoolean called = new AtomicBoolean()__        sourceWithMockedRemoteCall("scroll_fully_loaded_1_7.json").doStartNextScroll("", timeValueMillis(0), r -> {_            assertEquals("AVToMiDL50DjIiBO3yKA", r.getHits().get(0).getId())__            assertEquals("{\"test\":\"test3\"}", r.getHits().get(0).getSource().utf8ToString())__            assertEquals("testrouting", r.getHits().get(0).getRouting())__            called.set(true)__        })__        assertTrue(called.get())__    };test,for,parsing,and,isn,t,available;public,void,throws,exception,atomic,boolean,called,new,atomic,boolean,source,with,mocked,remote,call,json,do,start,next,scroll,time,value,millis,0,r,assert,equals,avto,mi,dl50dj,ii,bo3y,ka,r,get,hits,get,0,get,id,assert,equals,test,test3,r,get,hits,get,0,get,source,utf8to,string,assert,equals,testrouting,r,get,hits,get,0,get,routing,called,set,true,assert,true,called,get
RemoteScrollableHitSourceTests -> public void testScanJumpStart() throws Exception;1524684173;Versions of Elasticsearch before 2.1.0 don't support sort:_doc and instead need to use search_type=scan. Scan doesn't return_documents the first iteration but reindex doesn't like that. So we jump start strait to the next iteration.;public void testScanJumpStart() throws Exception {_        AtomicBoolean called = new AtomicBoolean()__        sourceWithMockedRemoteCall("start_scan.json", "scroll_ok.json").doStart(r -> {_            assertFalse(r.isTimedOut())__            assertEquals(FAKE_SCROLL_ID, r.getScrollId())__            assertEquals(4, r.getTotalHits())__            assertThat(r.getFailures(), empty())__            assertThat(r.getHits(), hasSize(1))__            assertEquals("test", r.getHits().get(0).getIndex())__            assertEquals("test", r.getHits().get(0).getType())__            assertEquals("AVToMiDL50DjIiBO3yKA", r.getHits().get(0).getId())__            assertEquals("{\"test\":\"test3\"}", r.getHits().get(0).getSource().utf8ToString())__            assertNull(r.getHits().get(0).getRouting())__            called.set(true)__        })__        assertTrue(called.get())__    };versions,of,elasticsearch,before,2,1,0,don,t,support,sort,and,instead,need,to,use,scan,scan,doesn,t,return,documents,the,first,iteration,but,reindex,doesn,t,like,that,so,we,jump,start,strait,to,the,next,iteration;public,void,test,scan,jump,start,throws,exception,atomic,boolean,called,new,atomic,boolean,source,with,mocked,remote,call,json,json,do,start,r,assert,false,r,is,timed,out,assert,equals,r,get,scroll,id,assert,equals,4,r,get,total,hits,assert,that,r,get,failures,empty,assert,that,r,get,hits,has,size,1,assert,equals,test,r,get,hits,get,0,get,index,assert,equals,test,r,get,hits,get,0,get,type,assert,equals,avto,mi,dl50dj,ii,bo3y,ka,r,get,hits,get,0,get,id,assert,equals,test,test3,r,get,hits,get,0,get,source,utf8to,string,assert,null,r,get,hits,get,0,get,routing,called,set,true,assert,true,called,get
RemoteScrollableHitSourceTests -> public void testScanJumpStart() throws Exception;1535139672;Versions of Elasticsearch before 2.1.0 don't support sort:_doc and instead need to use search_type=scan. Scan doesn't return_documents the first iteration but reindex doesn't like that. So we jump start strait to the next iteration.;public void testScanJumpStart() throws Exception {_        AtomicBoolean called = new AtomicBoolean()__        sourceWithMockedRemoteCall("start_scan.json", "scroll_ok.json").doStart(r -> {_            assertFalse(r.isTimedOut())__            assertEquals(FAKE_SCROLL_ID, r.getScrollId())__            assertEquals(4, r.getTotalHits())__            assertThat(r.getFailures(), empty())__            assertThat(r.getHits(), hasSize(1))__            assertEquals("test", r.getHits().get(0).getIndex())__            assertEquals("test", r.getHits().get(0).getType())__            assertEquals("AVToMiDL50DjIiBO3yKA", r.getHits().get(0).getId())__            assertEquals("{\"test\":\"test3\"}", r.getHits().get(0).getSource().utf8ToString())__            assertNull(r.getHits().get(0).getRouting())__            called.set(true)__        })__        assertTrue(called.get())__    };versions,of,elasticsearch,before,2,1,0,don,t,support,sort,and,instead,need,to,use,scan,scan,doesn,t,return,documents,the,first,iteration,but,reindex,doesn,t,like,that,so,we,jump,start,strait,to,the,next,iteration;public,void,test,scan,jump,start,throws,exception,atomic,boolean,called,new,atomic,boolean,source,with,mocked,remote,call,json,json,do,start,r,assert,false,r,is,timed,out,assert,equals,r,get,scroll,id,assert,equals,4,r,get,total,hits,assert,that,r,get,failures,empty,assert,that,r,get,hits,has,size,1,assert,equals,test,r,get,hits,get,0,get,index,assert,equals,test,r,get,hits,get,0,get,type,assert,equals,avto,mi,dl50dj,ii,bo3y,ka,r,get,hits,get,0,get,id,assert,equals,test,test3,r,get,hits,get,0,get,source,utf8to,string,assert,null,r,get,hits,get,0,get,routing,called,set,true,assert,true,called,get
RemoteScrollableHitSourceTests -> public void testScanJumpStart() throws Exception;1543473699;Versions of Elasticsearch before 2.1.0 don't support sort:_doc and instead need to use search_type=scan. Scan doesn't return_documents the first iteration but reindex doesn't like that. So we jump start strait to the next iteration.;public void testScanJumpStart() throws Exception {_        AtomicBoolean called = new AtomicBoolean()__        sourceWithMockedRemoteCall("start_scan.json", "scroll_ok.json").doStart(r -> {_            assertFalse(r.isTimedOut())__            assertEquals(FAKE_SCROLL_ID, r.getScrollId())__            assertEquals(4, r.getTotalHits())__            assertThat(r.getFailures(), empty())__            assertThat(r.getHits(), hasSize(1))__            assertEquals("test", r.getHits().get(0).getIndex())__            assertEquals("test", r.getHits().get(0).getType())__            assertEquals("AVToMiDL50DjIiBO3yKA", r.getHits().get(0).getId())__            assertEquals("{\"test\":\"test3\"}", r.getHits().get(0).getSource().utf8ToString())__            assertNull(r.getHits().get(0).getRouting())__            called.set(true)__        })__        assertTrue(called.get())__    };versions,of,elasticsearch,before,2,1,0,don,t,support,sort,and,instead,need,to,use,scan,scan,doesn,t,return,documents,the,first,iteration,but,reindex,doesn,t,like,that,so,we,jump,start,strait,to,the,next,iteration;public,void,test,scan,jump,start,throws,exception,atomic,boolean,called,new,atomic,boolean,source,with,mocked,remote,call,json,json,do,start,r,assert,false,r,is,timed,out,assert,equals,r,get,scroll,id,assert,equals,4,r,get,total,hits,assert,that,r,get,failures,empty,assert,that,r,get,hits,has,size,1,assert,equals,test,r,get,hits,get,0,get,index,assert,equals,test,r,get,hits,get,0,get,type,assert,equals,avto,mi,dl50dj,ii,bo3y,ka,r,get,hits,get,0,get,id,assert,equals,test,test3,r,get,hits,get,0,get,source,utf8to,string,assert,null,r,get,hits,get,0,get,routing,called,set,true,assert,true,called,get
RemoteScrollableHitSourceTests -> public void testScanJumpStart() throws Exception;1548953505;Versions of Elasticsearch before 2.1.0 don't support sort:_doc and instead need to use search_type=scan. Scan doesn't return_documents the first iteration but reindex doesn't like that. So we jump start strait to the next iteration.;public void testScanJumpStart() throws Exception {_        AtomicBoolean called = new AtomicBoolean()__        sourceWithMockedRemoteCall("start_scan.json", "scroll_ok.json").doStart(r -> {_            assertFalse(r.isTimedOut())__            assertEquals(FAKE_SCROLL_ID, r.getScrollId())__            assertEquals(4, r.getTotalHits())__            assertThat(r.getFailures(), empty())__            assertThat(r.getHits(), hasSize(1))__            assertEquals("test", r.getHits().get(0).getIndex())__            assertEquals("test", r.getHits().get(0).getType())__            assertEquals("AVToMiDL50DjIiBO3yKA", r.getHits().get(0).getId())__            assertEquals("{\"test\":\"test3\"}", r.getHits().get(0).getSource().utf8ToString())__            assertNull(r.getHits().get(0).getRouting())__            called.set(true)__        })__        assertTrue(called.get())__    };versions,of,elasticsearch,before,2,1,0,don,t,support,sort,and,instead,need,to,use,scan,scan,doesn,t,return,documents,the,first,iteration,but,reindex,doesn,t,like,that,so,we,jump,start,strait,to,the,next,iteration;public,void,test,scan,jump,start,throws,exception,atomic,boolean,called,new,atomic,boolean,source,with,mocked,remote,call,json,json,do,start,r,assert,false,r,is,timed,out,assert,equals,r,get,scroll,id,assert,equals,4,r,get,total,hits,assert,that,r,get,failures,empty,assert,that,r,get,hits,has,size,1,assert,equals,test,r,get,hits,get,0,get,index,assert,equals,test,r,get,hits,get,0,get,type,assert,equals,avto,mi,dl50dj,ii,bo3y,ka,r,get,hits,get,0,get,id,assert,equals,test,test3,r,get,hits,get,0,get,source,utf8to,string,assert,null,r,get,hits,get,0,get,routing,called,set,true,assert,true,called,get
RemoteScrollableHitSourceTests -> public void testParseScrollFullyLoaded() throws Exception;1524684173;Test for parsing _ttl, _timestamp, _routing, and _parent.;public void testParseScrollFullyLoaded() throws Exception {_        AtomicBoolean called = new AtomicBoolean()__        sourceWithMockedRemoteCall("scroll_fully_loaded.json").doStartNextScroll("", timeValueMillis(0), r -> {_            assertEquals("AVToMiDL50DjIiBO3yKA", r.getHits().get(0).getId())__            assertEquals("{\"test\":\"test3\"}", r.getHits().get(0).getSource().utf8ToString())__            assertEquals("testrouting", r.getHits().get(0).getRouting())__            called.set(true)__        })__        assertTrue(called.get())__    };test,for,parsing,and;public,void,test,parse,scroll,fully,loaded,throws,exception,atomic,boolean,called,new,atomic,boolean,source,with,mocked,remote,call,json,do,start,next,scroll,time,value,millis,0,r,assert,equals,avto,mi,dl50dj,ii,bo3y,ka,r,get,hits,get,0,get,id,assert,equals,test,test3,r,get,hits,get,0,get,source,utf8to,string,assert,equals,testrouting,r,get,hits,get,0,get,routing,called,set,true,assert,true,called,get
RemoteScrollableHitSourceTests -> public void testParseScrollFullyLoaded() throws Exception;1535139672;Test for parsing _ttl, _timestamp, _routing, and _parent.;public void testParseScrollFullyLoaded() throws Exception {_        AtomicBoolean called = new AtomicBoolean()__        sourceWithMockedRemoteCall("scroll_fully_loaded.json").doStartNextScroll("", timeValueMillis(0), r -> {_            assertEquals("AVToMiDL50DjIiBO3yKA", r.getHits().get(0).getId())__            assertEquals("{\"test\":\"test3\"}", r.getHits().get(0).getSource().utf8ToString())__            assertEquals("testrouting", r.getHits().get(0).getRouting())__            called.set(true)__        })__        assertTrue(called.get())__    };test,for,parsing,and;public,void,test,parse,scroll,fully,loaded,throws,exception,atomic,boolean,called,new,atomic,boolean,source,with,mocked,remote,call,json,do,start,next,scroll,time,value,millis,0,r,assert,equals,avto,mi,dl50dj,ii,bo3y,ka,r,get,hits,get,0,get,id,assert,equals,test,test3,r,get,hits,get,0,get,source,utf8to,string,assert,equals,testrouting,r,get,hits,get,0,get,routing,called,set,true,assert,true,called,get
RemoteScrollableHitSourceTests -> public void testParseScrollFullyLoaded() throws Exception;1543473699;Test for parsing _ttl, _timestamp, _routing, and _parent.;public void testParseScrollFullyLoaded() throws Exception {_        AtomicBoolean called = new AtomicBoolean()__        sourceWithMockedRemoteCall("scroll_fully_loaded.json").doStartNextScroll("", timeValueMillis(0), r -> {_            assertEquals("AVToMiDL50DjIiBO3yKA", r.getHits().get(0).getId())__            assertEquals("{\"test\":\"test3\"}", r.getHits().get(0).getSource().utf8ToString())__            assertEquals("testrouting", r.getHits().get(0).getRouting())__            called.set(true)__        })__        assertTrue(called.get())__    };test,for,parsing,and;public,void,test,parse,scroll,fully,loaded,throws,exception,atomic,boolean,called,new,atomic,boolean,source,with,mocked,remote,call,json,do,start,next,scroll,time,value,millis,0,r,assert,equals,avto,mi,dl50dj,ii,bo3y,ka,r,get,hits,get,0,get,id,assert,equals,test,test3,r,get,hits,get,0,get,source,utf8to,string,assert,equals,testrouting,r,get,hits,get,0,get,routing,called,set,true,assert,true,called,get
RemoteScrollableHitSourceTests -> public void testParseScrollFullyLoaded() throws Exception;1548953505;Test for parsing _ttl, _timestamp, _routing, and _parent.;public void testParseScrollFullyLoaded() throws Exception {_        AtomicBoolean called = new AtomicBoolean()__        sourceWithMockedRemoteCall("scroll_fully_loaded.json").doStartNextScroll("", timeValueMillis(0), r -> {_            assertEquals("AVToMiDL50DjIiBO3yKA", r.getHits().get(0).getId())__            assertEquals("{\"test\":\"test3\"}", r.getHits().get(0).getSource().utf8ToString())__            assertEquals("testrouting", r.getHits().get(0).getRouting())__            called.set(true)__        })__        assertTrue(called.get())__    };test,for,parsing,and;public,void,test,parse,scroll,fully,loaded,throws,exception,atomic,boolean,called,new,atomic,boolean,source,with,mocked,remote,call,json,do,start,next,scroll,time,value,millis,0,r,assert,equals,avto,mi,dl50dj,ii,bo3y,ka,r,get,hits,get,0,get,id,assert,equals,test,test3,r,get,hits,get,0,get,source,utf8to,string,assert,equals,testrouting,r,get,hits,get,0,get,routing,called,set,true,assert,true,called,get
RemoteScrollableHitSourceTests -> @SuppressWarnings("unchecked")     private RemoteScrollableHitSource sourceWithMockedRemoteCall(boolean mockRemoteVersion, ContentType contentType, String... paths)             throws Exception;1524684173;Creates a hit source that doesn't make the remote request and instead returns data from some files. Also requests are always returned_synchronously rather than asynchronously.;@SuppressWarnings("unchecked")_    private RemoteScrollableHitSource sourceWithMockedRemoteCall(boolean mockRemoteVersion, ContentType contentType, String... paths)_            throws Exception {_        URL[] resources = new URL[paths.length]__        for (int i = 0_ i < paths.length_ i++) {_            resources[i] = Thread.currentThread().getContextClassLoader().getResource("responses/" + paths[i].replace("fail:", ""))__            if (resources[i] == null) {_                throw new IllegalArgumentException("Couldn't find [" + paths[i] + "]")__            }_        }__        CloseableHttpAsyncClient httpClient = mock(CloseableHttpAsyncClient.class)__        when(httpClient.<HttpResponse>execute(any(HttpAsyncRequestProducer.class), any(HttpAsyncResponseConsumer.class),_                any(HttpClientContext.class), any(FutureCallback.class))).thenAnswer(new Answer<Future<HttpResponse>>() {__            int responseCount = 0___            @Override_            public Future<HttpResponse> answer(InvocationOnMock invocationOnMock) throws Throwable {_                _                threadPool.getThreadContext().stashContext()__                HttpAsyncRequestProducer requestProducer = (HttpAsyncRequestProducer) invocationOnMock.getArguments()[0]__                FutureCallback<HttpResponse> futureCallback = (FutureCallback<HttpResponse>) invocationOnMock.getArguments()[3]__                HttpEntityEnclosingRequest request = (HttpEntityEnclosingRequest)requestProducer.generateRequest()__                URL resource = resources[responseCount]__                String path = paths[responseCount++]__                ProtocolVersion protocolVersion = new ProtocolVersion("http", 1, 1)__                if (path.startsWith("fail:")) {_                    String body = Streams.copyToString(new InputStreamReader(request.getEntity().getContent(), StandardCharsets.UTF_8))__                    if (path.equals("fail:rejection.json")) {_                        StatusLine statusLine = new BasicStatusLine(protocolVersion, RestStatus.TOO_MANY_REQUESTS.getStatus(), "")__                        BasicHttpResponse httpResponse = new BasicHttpResponse(statusLine)__                        futureCallback.completed(httpResponse)__                    } else {_                        futureCallback.failed(new RuntimeException(body))__                    }_                } else {_                    StatusLine statusLine = new BasicStatusLine(protocolVersion, 200, "")__                    HttpResponse httpResponse = new BasicHttpResponse(statusLine)__                    httpResponse.setEntity(new InputStreamEntity(FileSystemUtils.openFileURLStream(resource), contentType))__                    futureCallback.completed(httpResponse)__                }_                return null__            }_        })__        return sourceWithMockedClient(mockRemoteVersion, httpClient)__    };creates,a,hit,source,that,doesn,t,make,the,remote,request,and,instead,returns,data,from,some,files,also,requests,are,always,returned,synchronously,rather,than,asynchronously;suppress,warnings,unchecked,private,remote,scrollable,hit,source,source,with,mocked,remote,call,boolean,mock,remote,version,content,type,content,type,string,paths,throws,exception,url,resources,new,url,paths,length,for,int,i,0,i,paths,length,i,resources,i,thread,current,thread,get,context,class,loader,get,resource,responses,paths,i,replace,fail,if,resources,i,null,throw,new,illegal,argument,exception,couldn,t,find,paths,i,closeable,http,async,client,http,client,mock,closeable,http,async,client,class,when,http,client,http,response,execute,any,http,async,request,producer,class,any,http,async,response,consumer,class,any,http,client,context,class,any,future,callback,class,then,answer,new,answer,future,http,response,int,response,count,0,override,public,future,http,response,answer,invocation,on,mock,invocation,on,mock,throws,throwable,thread,pool,get,thread,context,stash,context,http,async,request,producer,request,producer,http,async,request,producer,invocation,on,mock,get,arguments,0,future,callback,http,response,future,callback,future,callback,http,response,invocation,on,mock,get,arguments,3,http,entity,enclosing,request,request,http,entity,enclosing,request,request,producer,generate,request,url,resource,resources,response,count,string,path,paths,response,count,protocol,version,protocol,version,new,protocol,version,http,1,1,if,path,starts,with,fail,string,body,streams,copy,to,string,new,input,stream,reader,request,get,entity,get,content,standard,charsets,if,path,equals,fail,rejection,json,status,line,status,line,new,basic,status,line,protocol,version,rest,status,get,status,basic,http,response,http,response,new,basic,http,response,status,line,future,callback,completed,http,response,else,future,callback,failed,new,runtime,exception,body,else,status,line,status,line,new,basic,status,line,protocol,version,200,http,response,http,response,new,basic,http,response,status,line,http,response,set,entity,new,input,stream,entity,file,system,utils,open,file,urlstream,resource,content,type,future,callback,completed,http,response,return,null,return,source,with,mocked,client,mock,remote,version,http,client
RemoteScrollableHitSourceTests -> @SuppressWarnings("unchecked")     private RemoteScrollableHitSource sourceWithMockedRemoteCall(boolean mockRemoteVersion, ContentType contentType, String... paths)             throws Exception;1535139672;Creates a hit source that doesn't make the remote request and instead returns data from some files. Also requests are always returned_synchronously rather than asynchronously.;@SuppressWarnings("unchecked")_    private RemoteScrollableHitSource sourceWithMockedRemoteCall(boolean mockRemoteVersion, ContentType contentType, String... paths)_            throws Exception {_        URL[] resources = new URL[paths.length]__        for (int i = 0_ i < paths.length_ i++) {_            resources[i] = Thread.currentThread().getContextClassLoader().getResource("responses/" + paths[i].replace("fail:", ""))__            if (resources[i] == null) {_                throw new IllegalArgumentException("Couldn't find [" + paths[i] + "]")__            }_        }__        CloseableHttpAsyncClient httpClient = mock(CloseableHttpAsyncClient.class)__        when(httpClient.<HttpResponse>execute(any(HttpAsyncRequestProducer.class), any(HttpAsyncResponseConsumer.class),_                any(HttpClientContext.class), any(FutureCallback.class))).thenAnswer(new Answer<Future<HttpResponse>>() {__            int responseCount = 0___            @Override_            public Future<HttpResponse> answer(InvocationOnMock invocationOnMock) throws Throwable {_                _                threadPool.getThreadContext().stashContext()__                HttpAsyncRequestProducer requestProducer = (HttpAsyncRequestProducer) invocationOnMock.getArguments()[0]__                FutureCallback<HttpResponse> futureCallback = (FutureCallback<HttpResponse>) invocationOnMock.getArguments()[3]__                HttpEntityEnclosingRequest request = (HttpEntityEnclosingRequest)requestProducer.generateRequest()__                URL resource = resources[responseCount]__                String path = paths[responseCount++]__                ProtocolVersion protocolVersion = new ProtocolVersion("http", 1, 1)__                if (path.startsWith("fail:")) {_                    String body = Streams.copyToString(new InputStreamReader(request.getEntity().getContent(), StandardCharsets.UTF_8))__                    if (path.equals("fail:rejection.json")) {_                        StatusLine statusLine = new BasicStatusLine(protocolVersion, RestStatus.TOO_MANY_REQUESTS.getStatus(), "")__                        BasicHttpResponse httpResponse = new BasicHttpResponse(statusLine)__                        futureCallback.completed(httpResponse)__                    } else {_                        futureCallback.failed(new RuntimeException(body))__                    }_                } else {_                    StatusLine statusLine = new BasicStatusLine(protocolVersion, 200, "")__                    HttpResponse httpResponse = new BasicHttpResponse(statusLine)__                    httpResponse.setEntity(new InputStreamEntity(FileSystemUtils.openFileURLStream(resource), contentType))__                    futureCallback.completed(httpResponse)__                }_                return null__            }_        })__        return sourceWithMockedClient(mockRemoteVersion, httpClient)__    };creates,a,hit,source,that,doesn,t,make,the,remote,request,and,instead,returns,data,from,some,files,also,requests,are,always,returned,synchronously,rather,than,asynchronously;suppress,warnings,unchecked,private,remote,scrollable,hit,source,source,with,mocked,remote,call,boolean,mock,remote,version,content,type,content,type,string,paths,throws,exception,url,resources,new,url,paths,length,for,int,i,0,i,paths,length,i,resources,i,thread,current,thread,get,context,class,loader,get,resource,responses,paths,i,replace,fail,if,resources,i,null,throw,new,illegal,argument,exception,couldn,t,find,paths,i,closeable,http,async,client,http,client,mock,closeable,http,async,client,class,when,http,client,http,response,execute,any,http,async,request,producer,class,any,http,async,response,consumer,class,any,http,client,context,class,any,future,callback,class,then,answer,new,answer,future,http,response,int,response,count,0,override,public,future,http,response,answer,invocation,on,mock,invocation,on,mock,throws,throwable,thread,pool,get,thread,context,stash,context,http,async,request,producer,request,producer,http,async,request,producer,invocation,on,mock,get,arguments,0,future,callback,http,response,future,callback,future,callback,http,response,invocation,on,mock,get,arguments,3,http,entity,enclosing,request,request,http,entity,enclosing,request,request,producer,generate,request,url,resource,resources,response,count,string,path,paths,response,count,protocol,version,protocol,version,new,protocol,version,http,1,1,if,path,starts,with,fail,string,body,streams,copy,to,string,new,input,stream,reader,request,get,entity,get,content,standard,charsets,if,path,equals,fail,rejection,json,status,line,status,line,new,basic,status,line,protocol,version,rest,status,get,status,basic,http,response,http,response,new,basic,http,response,status,line,future,callback,completed,http,response,else,future,callback,failed,new,runtime,exception,body,else,status,line,status,line,new,basic,status,line,protocol,version,200,http,response,http,response,new,basic,http,response,status,line,http,response,set,entity,new,input,stream,entity,file,system,utils,open,file,urlstream,resource,content,type,future,callback,completed,http,response,return,null,return,source,with,mocked,client,mock,remote,version,http,client
RemoteScrollableHitSourceTests -> @SuppressWarnings("unchecked")     private RemoteScrollableHitSource sourceWithMockedRemoteCall(boolean mockRemoteVersion, ContentType contentType, String... paths)             throws Exception;1543473699;Creates a hit source that doesn't make the remote request and instead returns data from some files. Also requests are always returned_synchronously rather than asynchronously.;@SuppressWarnings("unchecked")_    private RemoteScrollableHitSource sourceWithMockedRemoteCall(boolean mockRemoteVersion, ContentType contentType, String... paths)_            throws Exception {_        URL[] resources = new URL[paths.length]__        for (int i = 0_ i < paths.length_ i++) {_            resources[i] = Thread.currentThread().getContextClassLoader().getResource("responses/" + paths[i].replace("fail:", ""))__            if (resources[i] == null) {_                throw new IllegalArgumentException("Couldn't find [" + paths[i] + "]")__            }_        }__        CloseableHttpAsyncClient httpClient = mock(CloseableHttpAsyncClient.class)__        when(httpClient.<HttpResponse>execute(any(HttpAsyncRequestProducer.class), any(HttpAsyncResponseConsumer.class),_                any(HttpClientContext.class), any(FutureCallback.class))).thenAnswer(new Answer<Future<HttpResponse>>() {__            int responseCount = 0___            @Override_            public Future<HttpResponse> answer(InvocationOnMock invocationOnMock) throws Throwable {_                _                threadPool.getThreadContext().stashContext()__                HttpAsyncRequestProducer requestProducer = (HttpAsyncRequestProducer) invocationOnMock.getArguments()[0]__                FutureCallback<HttpResponse> futureCallback = (FutureCallback<HttpResponse>) invocationOnMock.getArguments()[3]__                HttpEntityEnclosingRequest request = (HttpEntityEnclosingRequest)requestProducer.generateRequest()__                URL resource = resources[responseCount]__                String path = paths[responseCount++]__                ProtocolVersion protocolVersion = new ProtocolVersion("http", 1, 1)__                if (path.startsWith("fail:")) {_                    String body = Streams.copyToString(new InputStreamReader(request.getEntity().getContent(), StandardCharsets.UTF_8))__                    if (path.equals("fail:rejection.json")) {_                        StatusLine statusLine = new BasicStatusLine(protocolVersion, RestStatus.TOO_MANY_REQUESTS.getStatus(), "")__                        BasicHttpResponse httpResponse = new BasicHttpResponse(statusLine)__                        futureCallback.completed(httpResponse)__                    } else {_                        futureCallback.failed(new RuntimeException(body))__                    }_                } else {_                    StatusLine statusLine = new BasicStatusLine(protocolVersion, 200, "")__                    HttpResponse httpResponse = new BasicHttpResponse(statusLine)__                    httpResponse.setEntity(new InputStreamEntity(FileSystemUtils.openFileURLStream(resource), contentType))__                    futureCallback.completed(httpResponse)__                }_                return null__            }_        })__        return sourceWithMockedClient(mockRemoteVersion, httpClient)__    };creates,a,hit,source,that,doesn,t,make,the,remote,request,and,instead,returns,data,from,some,files,also,requests,are,always,returned,synchronously,rather,than,asynchronously;suppress,warnings,unchecked,private,remote,scrollable,hit,source,source,with,mocked,remote,call,boolean,mock,remote,version,content,type,content,type,string,paths,throws,exception,url,resources,new,url,paths,length,for,int,i,0,i,paths,length,i,resources,i,thread,current,thread,get,context,class,loader,get,resource,responses,paths,i,replace,fail,if,resources,i,null,throw,new,illegal,argument,exception,couldn,t,find,paths,i,closeable,http,async,client,http,client,mock,closeable,http,async,client,class,when,http,client,http,response,execute,any,http,async,request,producer,class,any,http,async,response,consumer,class,any,http,client,context,class,any,future,callback,class,then,answer,new,answer,future,http,response,int,response,count,0,override,public,future,http,response,answer,invocation,on,mock,invocation,on,mock,throws,throwable,thread,pool,get,thread,context,stash,context,http,async,request,producer,request,producer,http,async,request,producer,invocation,on,mock,get,arguments,0,future,callback,http,response,future,callback,future,callback,http,response,invocation,on,mock,get,arguments,3,http,entity,enclosing,request,request,http,entity,enclosing,request,request,producer,generate,request,url,resource,resources,response,count,string,path,paths,response,count,protocol,version,protocol,version,new,protocol,version,http,1,1,if,path,starts,with,fail,string,body,streams,copy,to,string,new,input,stream,reader,request,get,entity,get,content,standard,charsets,if,path,equals,fail,rejection,json,status,line,status,line,new,basic,status,line,protocol,version,rest,status,get,status,basic,http,response,http,response,new,basic,http,response,status,line,future,callback,completed,http,response,else,future,callback,failed,new,runtime,exception,body,else,status,line,status,line,new,basic,status,line,protocol,version,200,http,response,http,response,new,basic,http,response,status,line,http,response,set,entity,new,input,stream,entity,file,system,utils,open,file,urlstream,resource,content,type,future,callback,completed,http,response,return,null,return,source,with,mocked,client,mock,remote,version,http,client
RemoteScrollableHitSourceTests -> @SuppressWarnings("unchecked")     private RemoteScrollableHitSource sourceWithMockedRemoteCall(boolean mockRemoteVersion, ContentType contentType, String... paths)             throws Exception;1548953505;Creates a hit source that doesn't make the remote request and instead returns data from some files. Also requests are always returned_synchronously rather than asynchronously.;@SuppressWarnings("unchecked")_    private RemoteScrollableHitSource sourceWithMockedRemoteCall(boolean mockRemoteVersion, ContentType contentType, String... paths)_            throws Exception {_        URL[] resources = new URL[paths.length]__        for (int i = 0_ i < paths.length_ i++) {_            resources[i] = Thread.currentThread().getContextClassLoader().getResource("responses/" + paths[i].replace("fail:", ""))__            if (resources[i] == null) {_                throw new IllegalArgumentException("Couldn't find [" + paths[i] + "]")__            }_        }__        CloseableHttpAsyncClient httpClient = mock(CloseableHttpAsyncClient.class)__        when(httpClient.<HttpResponse>execute(any(HttpAsyncRequestProducer.class), any(HttpAsyncResponseConsumer.class),_                any(HttpClientContext.class), any(FutureCallback.class))).thenAnswer(new Answer<Future<HttpResponse>>() {__            int responseCount = 0___            @Override_            public Future<HttpResponse> answer(InvocationOnMock invocationOnMock) throws Throwable {_                _                threadPool.getThreadContext().stashContext()__                HttpAsyncRequestProducer requestProducer = (HttpAsyncRequestProducer) invocationOnMock.getArguments()[0]__                FutureCallback<HttpResponse> futureCallback = (FutureCallback<HttpResponse>) invocationOnMock.getArguments()[3]__                HttpEntityEnclosingRequest request = (HttpEntityEnclosingRequest)requestProducer.generateRequest()__                URL resource = resources[responseCount]__                String path = paths[responseCount++]__                ProtocolVersion protocolVersion = new ProtocolVersion("http", 1, 1)__                if (path.startsWith("fail:")) {_                    String body = Streams.copyToString(new InputStreamReader(request.getEntity().getContent(), StandardCharsets.UTF_8))__                    if (path.equals("fail:rejection.json")) {_                        StatusLine statusLine = new BasicStatusLine(protocolVersion, RestStatus.TOO_MANY_REQUESTS.getStatus(), "")__                        BasicHttpResponse httpResponse = new BasicHttpResponse(statusLine)__                        futureCallback.completed(httpResponse)__                    } else {_                        futureCallback.failed(new RuntimeException(body))__                    }_                } else {_                    StatusLine statusLine = new BasicStatusLine(protocolVersion, 200, "")__                    HttpResponse httpResponse = new BasicHttpResponse(statusLine)__                    httpResponse.setEntity(new InputStreamEntity(FileSystemUtils.openFileURLStream(resource), contentType))__                    futureCallback.completed(httpResponse)__                }_                return null__            }_        })__        return sourceWithMockedClient(mockRemoteVersion, httpClient)__    };creates,a,hit,source,that,doesn,t,make,the,remote,request,and,instead,returns,data,from,some,files,also,requests,are,always,returned,synchronously,rather,than,asynchronously;suppress,warnings,unchecked,private,remote,scrollable,hit,source,source,with,mocked,remote,call,boolean,mock,remote,version,content,type,content,type,string,paths,throws,exception,url,resources,new,url,paths,length,for,int,i,0,i,paths,length,i,resources,i,thread,current,thread,get,context,class,loader,get,resource,responses,paths,i,replace,fail,if,resources,i,null,throw,new,illegal,argument,exception,couldn,t,find,paths,i,closeable,http,async,client,http,client,mock,closeable,http,async,client,class,when,http,client,http,response,execute,any,http,async,request,producer,class,any,http,async,response,consumer,class,any,http,client,context,class,any,future,callback,class,then,answer,new,answer,future,http,response,int,response,count,0,override,public,future,http,response,answer,invocation,on,mock,invocation,on,mock,throws,throwable,thread,pool,get,thread,context,stash,context,http,async,request,producer,request,producer,http,async,request,producer,invocation,on,mock,get,arguments,0,future,callback,http,response,future,callback,future,callback,http,response,invocation,on,mock,get,arguments,3,http,entity,enclosing,request,request,http,entity,enclosing,request,request,producer,generate,request,url,resource,resources,response,count,string,path,paths,response,count,protocol,version,protocol,version,new,protocol,version,http,1,1,if,path,starts,with,fail,string,body,streams,copy,to,string,new,input,stream,reader,request,get,entity,get,content,standard,charsets,if,path,equals,fail,rejection,json,status,line,status,line,new,basic,status,line,protocol,version,rest,status,get,status,basic,http,response,http,response,new,basic,http,response,status,line,future,callback,completed,http,response,else,future,callback,failed,new,runtime,exception,body,else,status,line,status,line,new,basic,status,line,protocol,version,200,http,response,http,response,new,basic,http,response,status,line,http,response,set,entity,new,input,stream,entity,file,system,utils,open,file,urlstream,resource,content,type,future,callback,completed,http,response,return,null,return,source,with,mocked,client,mock,remote,version,http,client
