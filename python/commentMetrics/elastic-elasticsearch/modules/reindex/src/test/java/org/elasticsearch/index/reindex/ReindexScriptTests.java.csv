commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;public void testSetIndex() throws Exception {     Object dest = randomFrom(new Object[] { 234, 234L, "pancake" }).     IndexRequest index = applyScript((Map<String, Object> ctx) -> ctx.put("_index", dest)).     assertEquals(dest.toString(), index.index()). }
false;public;0;7;;public void testSettingIndexToNullIsError() throws Exception {     try {         applyScript((Map<String, Object> ctx) -> ctx.put("_index", null)).     } catch (NullPointerException e) {         assertThat(e.getMessage(), containsString("Can't reindex without a destination index!")).     } }
false;public;0;5;;public void testSetType() throws Exception {     Object type = randomFrom(new Object[] { 234, 234L, "pancake" }).     IndexRequest index = applyScript((Map<String, Object> ctx) -> ctx.put("_type", type)).     assertEquals(type.toString(), index.type()). }
false;public;0;7;;public void testSettingTypeToNullIsError() throws Exception {     try {         applyScript((Map<String, Object> ctx) -> ctx.put("_type", null)).     } catch (NullPointerException e) {         assertThat(e.getMessage(), containsString("Can't reindex without a destination type!")).     } }
false;public;0;9;;public void testSetId() throws Exception {     Object id = randomFrom(new Object[] { null, 234, 234L, "pancake" }).     IndexRequest index = applyScript((Map<String, Object> ctx) -> ctx.put("_id", id)).     if (id == null) {         assertNull(index.id()).     } else {         assertEquals(id.toString(), index.id()).     } }
false;public;0;9;;public void testSetVersion() throws Exception {     Number version = randomFrom(new Number[] { null, 234, 234L }).     IndexRequest index = applyScript((Map<String, Object> ctx) -> ctx.put("_version", version)).     if (version == null) {         assertEquals(Versions.MATCH_ANY, index.version()).     } else {         assertEquals(version.longValue(), index.version()).     } }
false;public;0;9;;public void testSettingVersionToJunkIsAnError() throws Exception {     Object junkVersion = randomFrom(new Object[] { "junk", Math.PI }).     try {         applyScript((Map<String, Object> ctx) -> ctx.put("_version", junkVersion)).     } catch (IllegalArgumentException e) {         assertThat(e.getMessage(), containsString("_version may only be set to an int or a long but was [")).         assertThat(e.getMessage(), containsString(junkVersion.toString())).     } }
false;public;0;5;;public void testSetRouting() throws Exception {     String routing = randomRealisticUnicodeOfLengthBetween(5, 20).     IndexRequest index = applyScript((Map<String, Object> ctx) -> ctx.put("_routing", routing)).     assertEquals(routing, index.routing()). }
false;protected;0;4;;@Override protected ReindexRequest request() {     return new ReindexRequest(). }
false;protected;2;9;;@Override protected TransportReindexAction.AsyncIndexBySearchAction action(ScriptService scriptService, ReindexRequest request) {     TransportService transportService = Mockito.mock(TransportService.class).     ReindexSslConfig sslConfig = Mockito.mock(ReindexSslConfig.class).     TransportReindexAction transportAction = new TransportReindexAction(Settings.EMPTY, threadPool, new ActionFilters(Collections.emptySet()), null, null, scriptService, null, null, transportService, sslConfig).     return new TransportReindexAction.AsyncIndexBySearchAction(task, logger, null, threadPool, transportAction, request, null, listener()). }
