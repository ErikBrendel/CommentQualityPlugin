# id;timestamp;commentText;codeText;commentWords;codeWords
CancelTests -> private void testCancel(String action, AbstractBulkByScrollRequestBuilder<?, ?> builder, CancelAssertion assertion,                             Matcher<String> taskDescriptionMatcher) throws Exception;1524684173;Executes the cancellation test;private void testCancel(String action, AbstractBulkByScrollRequestBuilder<?, ?> builder, CancelAssertion assertion,_                            Matcher<String> taskDescriptionMatcher) throws Exception {_        createIndex(INDEX)___        _        int numDocs = getNumShards(INDEX).numPrimaries * 10 * builder.request().getSlices()__        ALLOWED_OPERATIONS.release(numDocs)___        logger.debug("setting up [{}] docs", numDocs)__        indexRandom(true, false, true, IntStream.range(0, numDocs)_                .mapToObj(i -> client().prepareIndex(INDEX, TYPE, String.valueOf(i)).setSource("n", i))_                .collect(Collectors.toList()))___        _        assertHitCount(client().prepareSearch(INDEX).setSize(0).get(), numDocs)__        assertThat(ALLOWED_OPERATIONS.drainPermits(), equalTo(0))___        _        builder.source().setSize(1)___        _        int numModifiedDocs = randomIntBetween(builder.request().getSlices() * 2, numDocs)__        logger.debug("chose to modify [{}] out of [{}] docs", numModifiedDocs, numDocs)__        ALLOWED_OPERATIONS.release(numModifiedDocs - builder.request().getSlices())___        _        ActionFuture<? extends BulkByScrollResponse> future = builder.execute()___        _        logger.debug("waiting for updates to be blocked")__        boolean blocked = awaitBusy(_            () -> ALLOWED_OPERATIONS.hasQueuedThreads() && ALLOWED_OPERATIONS.availablePermits() == 0,_            1, TimeUnit.MINUTES)_ _        assertTrue("updates blocked", blocked)___        _        TaskInfo mainTask = findTaskToCancel(action, builder.request().getSlices())__        BulkByScrollTask.Status status = (BulkByScrollTask.Status) mainTask.getStatus()__        assertNull(status.getReasonCancelled())___        _        assertThat(mainTask.getDescription(), taskDescriptionMatcher)___        _        _        ListTasksResponse cancelTasksResponse = client().admin().cluster().prepareCancelTasks().setTaskId(mainTask.getTaskId()).get()__        cancelTasksResponse.rethrowFailures("Cancel")__        assertThat(cancelTasksResponse.getTasks(), hasSize(1))___        _        mainTask = client().admin().cluster().prepareGetTask(mainTask.getTaskId()).get().getTask().getTask()__        status = (BulkByScrollTask.Status) mainTask.getStatus()__        logger.debug("asserting that parent is marked canceled {}", status)__        assertEquals(CancelTasksRequest.DEFAULT_REASON, status.getReasonCancelled())___        if (builder.request().getSlices() > 1) {_            boolean foundCancelled = false__            ListTasksResponse sliceList = client().admin().cluster().prepareListTasks().setParentTaskId(mainTask.getTaskId())_                    .setDetailed(true).get()__            sliceList.rethrowFailures("Fetch slice tasks")__            logger.debug("finding at least one canceled child among {}", sliceList.getTasks())__            for (TaskInfo slice: sliceList.getTasks()) {_                BulkByScrollTask.Status sliceStatus = (BulkByScrollTask.Status) slice.getStatus()__                if (sliceStatus.getReasonCancelled() == null) continue__                assertEquals(CancelTasksRequest.DEFAULT_REASON, sliceStatus.getReasonCancelled())__                foundCancelled = true__            }_            assertTrue("Didn't find at least one sub task that was cancelled", foundCancelled)__        }__        logger.debug("unblocking the blocked update")__        ALLOWED_OPERATIONS.release(builder.request().getSlices())___        _        assertBusy(() -> {_            if (builder.request().getSlices() == 1) {_                _                assertEquals(0, ALLOWED_OPERATIONS.availablePermits())__            }_            assertEquals(0, ALLOWED_OPERATIONS.getQueueLength())__        })___        _        BulkByScrollResponse response__        try {_            response = future.get(30, TimeUnit.SECONDS)__        } catch (Exception e) {_            String tasks = client().admin().cluster().prepareListTasks().setParentTaskId(mainTask.getTaskId())_                        .setDetailed(true).get().toString()__            throw new RuntimeException("Exception while waiting for the response. Running tasks: " + tasks, e)__        }_        assertThat(response.getReasonCancelled(), equalTo("by user request"))__        assertThat(response.getBulkFailures(), emptyIterable())__        assertThat(response.getSearchFailures(), emptyIterable())___        if (builder.request().getSlices() >= 1) {_            _            numModifiedDocs -= ALLOWED_OPERATIONS.availablePermits()__        }_        flushAndRefresh(INDEX)__        assertion.assertThat(response, numDocs, numModifiedDocs)__    };executes,the,cancellation,test;private,void,test,cancel,string,action,abstract,bulk,by,scroll,request,builder,builder,cancel,assertion,assertion,matcher,string,task,description,matcher,throws,exception,create,index,index,int,num,docs,get,num,shards,index,num,primaries,10,builder,request,get,slices,release,num,docs,logger,debug,setting,up,docs,num,docs,index,random,true,false,true,int,stream,range,0,num,docs,map,to,obj,i,client,prepare,index,index,type,string,value,of,i,set,source,n,i,collect,collectors,to,list,assert,hit,count,client,prepare,search,index,set,size,0,get,num,docs,assert,that,drain,permits,equal,to,0,builder,source,set,size,1,int,num,modified,docs,random,int,between,builder,request,get,slices,2,num,docs,logger,debug,chose,to,modify,out,of,docs,num,modified,docs,num,docs,release,num,modified,docs,builder,request,get,slices,action,future,extends,bulk,by,scroll,response,future,builder,execute,logger,debug,waiting,for,updates,to,be,blocked,boolean,blocked,await,busy,has,queued,threads,available,permits,0,1,time,unit,minutes,assert,true,updates,blocked,blocked,task,info,main,task,find,task,to,cancel,action,builder,request,get,slices,bulk,by,scroll,task,status,status,bulk,by,scroll,task,status,main,task,get,status,assert,null,status,get,reason,cancelled,assert,that,main,task,get,description,task,description,matcher,list,tasks,response,cancel,tasks,response,client,admin,cluster,prepare,cancel,tasks,set,task,id,main,task,get,task,id,get,cancel,tasks,response,rethrow,failures,cancel,assert,that,cancel,tasks,response,get,tasks,has,size,1,main,task,client,admin,cluster,prepare,get,task,main,task,get,task,id,get,get,task,get,task,status,bulk,by,scroll,task,status,main,task,get,status,logger,debug,asserting,that,parent,is,marked,canceled,status,assert,equals,cancel,tasks,request,status,get,reason,cancelled,if,builder,request,get,slices,1,boolean,found,cancelled,false,list,tasks,response,slice,list,client,admin,cluster,prepare,list,tasks,set,parent,task,id,main,task,get,task,id,set,detailed,true,get,slice,list,rethrow,failures,fetch,slice,tasks,logger,debug,finding,at,least,one,canceled,child,among,slice,list,get,tasks,for,task,info,slice,slice,list,get,tasks,bulk,by,scroll,task,status,slice,status,bulk,by,scroll,task,status,slice,get,status,if,slice,status,get,reason,cancelled,null,continue,assert,equals,cancel,tasks,request,slice,status,get,reason,cancelled,found,cancelled,true,assert,true,didn,t,find,at,least,one,sub,task,that,was,cancelled,found,cancelled,logger,debug,unblocking,the,blocked,update,release,builder,request,get,slices,assert,busy,if,builder,request,get,slices,1,assert,equals,0,available,permits,assert,equals,0,get,queue,length,bulk,by,scroll,response,response,try,response,future,get,30,time,unit,seconds,catch,exception,e,string,tasks,client,admin,cluster,prepare,list,tasks,set,parent,task,id,main,task,get,task,id,set,detailed,true,get,to,string,throw,new,runtime,exception,exception,while,waiting,for,the,response,running,tasks,tasks,e,assert,that,response,get,reason,cancelled,equal,to,by,user,request,assert,that,response,get,bulk,failures,empty,iterable,assert,that,response,get,search,failures,empty,iterable,if,builder,request,get,slices,1,num,modified,docs,available,permits,flush,and,refresh,index,assertion,assert,that,response,num,docs,num,modified,docs
CancelTests -> private void testCancel(String action, AbstractBulkByScrollRequestBuilder<?, ?> builder, CancelAssertion assertion,                             Matcher<String> taskDescriptionMatcher) throws Exception;1539615817;Executes the cancellation test;private void testCancel(String action, AbstractBulkByScrollRequestBuilder<?, ?> builder, CancelAssertion assertion,_                            Matcher<String> taskDescriptionMatcher) throws Exception {_        createIndex(INDEX)___        _        int numDocs = getNumShards(INDEX).numPrimaries * 10 * builder.request().getSlices()__        ALLOWED_OPERATIONS.release(numDocs)___        logger.debug("setting up [{}] docs", numDocs)__        indexRandom(true, false, true, IntStream.range(0, numDocs)_                .mapToObj(i -> client().prepareIndex(INDEX, TYPE, String.valueOf(i)).setSource("n", i))_                .collect(Collectors.toList()))___        _        assertHitCount(client().prepareSearch(INDEX).setSize(0).get(), numDocs)__        assertThat(ALLOWED_OPERATIONS.drainPermits(), equalTo(0))___        _        builder.source().setSize(1)___        _        int numModifiedDocs = randomIntBetween(builder.request().getSlices() * 2, numDocs)__        logger.debug("chose to modify [{}] out of [{}] docs", numModifiedDocs, numDocs)__        ALLOWED_OPERATIONS.release(numModifiedDocs - builder.request().getSlices())___        _        ActionFuture<? extends BulkByScrollResponse> future = builder.execute()___        _        logger.debug("waiting for updates to be blocked")__        boolean blocked = awaitBusy(_            () -> ALLOWED_OPERATIONS.hasQueuedThreads() && ALLOWED_OPERATIONS.availablePermits() == 0,_            1, TimeUnit.MINUTES)_ _        assertTrue("updates blocked", blocked)___        _        TaskInfo mainTask = findTaskToCancel(action, builder.request().getSlices())__        BulkByScrollTask.Status status = (BulkByScrollTask.Status) mainTask.getStatus()__        assertNull(status.getReasonCancelled())___        _        assertThat(mainTask.getDescription(), taskDescriptionMatcher)___        _        _        ListTasksResponse cancelTasksResponse = client().admin().cluster().prepareCancelTasks().setTaskId(mainTask.getTaskId()).get()__        cancelTasksResponse.rethrowFailures("Cancel")__        assertThat(cancelTasksResponse.getTasks(), hasSize(1))___        _        mainTask = client().admin().cluster().prepareGetTask(mainTask.getTaskId()).get().getTask().getTask()__        status = (BulkByScrollTask.Status) mainTask.getStatus()__        logger.debug("asserting that parent is marked canceled {}", status)__        assertEquals(CancelTasksRequest.DEFAULT_REASON, status.getReasonCancelled())___        if (builder.request().getSlices() > 1) {_            boolean foundCancelled = false__            ListTasksResponse sliceList = client().admin().cluster().prepareListTasks().setParentTaskId(mainTask.getTaskId())_                    .setDetailed(true).get()__            sliceList.rethrowFailures("Fetch slice tasks")__            logger.debug("finding at least one canceled child among {}", sliceList.getTasks())__            for (TaskInfo slice: sliceList.getTasks()) {_                BulkByScrollTask.Status sliceStatus = (BulkByScrollTask.Status) slice.getStatus()__                if (sliceStatus.getReasonCancelled() == null) continue__                assertEquals(CancelTasksRequest.DEFAULT_REASON, sliceStatus.getReasonCancelled())__                foundCancelled = true__            }_            assertTrue("Didn't find at least one sub task that was cancelled", foundCancelled)__        }__        logger.debug("unblocking the blocked update")__        ALLOWED_OPERATIONS.release(builder.request().getSlices())___        _        assertBusy(() -> {_            if (builder.request().getSlices() == 1) {_                _                assertEquals(0, ALLOWED_OPERATIONS.availablePermits())__            }_            assertEquals(0, ALLOWED_OPERATIONS.getQueueLength())__        })___        _        BulkByScrollResponse response__        try {_            response = future.get(30, TimeUnit.SECONDS)__        } catch (Exception e) {_            String tasks = client().admin().cluster().prepareListTasks().setParentTaskId(mainTask.getTaskId())_                        .setDetailed(true).get().toString()__            throw new RuntimeException("Exception while waiting for the response. Running tasks: " + tasks, e)__        }_        assertThat(response.getReasonCancelled(), equalTo("by user request"))__        assertThat(response.getBulkFailures(), emptyIterable())__        assertThat(response.getSearchFailures(), emptyIterable())___        if (builder.request().getSlices() >= 1) {_            _            numModifiedDocs -= ALLOWED_OPERATIONS.availablePermits()__        }_        flushAndRefresh(INDEX)__        assertion.assertThat(response, numDocs, numModifiedDocs)__    };executes,the,cancellation,test;private,void,test,cancel,string,action,abstract,bulk,by,scroll,request,builder,builder,cancel,assertion,assertion,matcher,string,task,description,matcher,throws,exception,create,index,index,int,num,docs,get,num,shards,index,num,primaries,10,builder,request,get,slices,release,num,docs,logger,debug,setting,up,docs,num,docs,index,random,true,false,true,int,stream,range,0,num,docs,map,to,obj,i,client,prepare,index,index,type,string,value,of,i,set,source,n,i,collect,collectors,to,list,assert,hit,count,client,prepare,search,index,set,size,0,get,num,docs,assert,that,drain,permits,equal,to,0,builder,source,set,size,1,int,num,modified,docs,random,int,between,builder,request,get,slices,2,num,docs,logger,debug,chose,to,modify,out,of,docs,num,modified,docs,num,docs,release,num,modified,docs,builder,request,get,slices,action,future,extends,bulk,by,scroll,response,future,builder,execute,logger,debug,waiting,for,updates,to,be,blocked,boolean,blocked,await,busy,has,queued,threads,available,permits,0,1,time,unit,minutes,assert,true,updates,blocked,blocked,task,info,main,task,find,task,to,cancel,action,builder,request,get,slices,bulk,by,scroll,task,status,status,bulk,by,scroll,task,status,main,task,get,status,assert,null,status,get,reason,cancelled,assert,that,main,task,get,description,task,description,matcher,list,tasks,response,cancel,tasks,response,client,admin,cluster,prepare,cancel,tasks,set,task,id,main,task,get,task,id,get,cancel,tasks,response,rethrow,failures,cancel,assert,that,cancel,tasks,response,get,tasks,has,size,1,main,task,client,admin,cluster,prepare,get,task,main,task,get,task,id,get,get,task,get,task,status,bulk,by,scroll,task,status,main,task,get,status,logger,debug,asserting,that,parent,is,marked,canceled,status,assert,equals,cancel,tasks,request,status,get,reason,cancelled,if,builder,request,get,slices,1,boolean,found,cancelled,false,list,tasks,response,slice,list,client,admin,cluster,prepare,list,tasks,set,parent,task,id,main,task,get,task,id,set,detailed,true,get,slice,list,rethrow,failures,fetch,slice,tasks,logger,debug,finding,at,least,one,canceled,child,among,slice,list,get,tasks,for,task,info,slice,slice,list,get,tasks,bulk,by,scroll,task,status,slice,status,bulk,by,scroll,task,status,slice,get,status,if,slice,status,get,reason,cancelled,null,continue,assert,equals,cancel,tasks,request,slice,status,get,reason,cancelled,found,cancelled,true,assert,true,didn,t,find,at,least,one,sub,task,that,was,cancelled,found,cancelled,logger,debug,unblocking,the,blocked,update,release,builder,request,get,slices,assert,busy,if,builder,request,get,slices,1,assert,equals,0,available,permits,assert,equals,0,get,queue,length,bulk,by,scroll,response,response,try,response,future,get,30,time,unit,seconds,catch,exception,e,string,tasks,client,admin,cluster,prepare,list,tasks,set,parent,task,id,main,task,get,task,id,set,detailed,true,get,to,string,throw,new,runtime,exception,exception,while,waiting,for,the,response,running,tasks,tasks,e,assert,that,response,get,reason,cancelled,equal,to,by,user,request,assert,that,response,get,bulk,failures,empty,iterable,assert,that,response,get,search,failures,empty,iterable,if,builder,request,get,slices,1,num,modified,docs,available,permits,flush,and,refresh,index,assertion,assert,that,response,num,docs,num,modified,docs
CancelTests -> private void testCancel(String action, AbstractBulkByScrollRequestBuilder<?, ?> builder, CancelAssertion assertion,                             Matcher<String> taskDescriptionMatcher) throws Exception;1540847035;Executes the cancellation test;private void testCancel(String action, AbstractBulkByScrollRequestBuilder<?, ?> builder, CancelAssertion assertion,_                            Matcher<String> taskDescriptionMatcher) throws Exception {_        createIndex(INDEX)___        _        int numDocs = getNumShards(INDEX).numPrimaries * 10 * builder.request().getSlices()__        ALLOWED_OPERATIONS.release(numDocs)___        logger.debug("setting up [{}] docs", numDocs)__        indexRandom(true, false, true, IntStream.range(0, numDocs)_                .mapToObj(i -> client().prepareIndex(INDEX, TYPE, String.valueOf(i)).setSource("n", i))_                .collect(Collectors.toList()))___        _        assertHitCount(client().prepareSearch(INDEX).setSize(0).get(), numDocs)__        assertThat(ALLOWED_OPERATIONS.drainPermits(), equalTo(0))___        _        builder.source().setSize(1)___        _        int numModifiedDocs = randomIntBetween(builder.request().getSlices() * 2, numDocs)__        logger.debug("chose to modify [{}] out of [{}] docs", numModifiedDocs, numDocs)__        ALLOWED_OPERATIONS.release(numModifiedDocs - builder.request().getSlices())___        _        ActionFuture<? extends BulkByScrollResponse> future = builder.execute()___        _        logger.debug("waiting for updates to be blocked")__        boolean blocked = awaitBusy(_            () -> ALLOWED_OPERATIONS.hasQueuedThreads() && ALLOWED_OPERATIONS.availablePermits() == 0,_            1, TimeUnit.MINUTES)_ _        assertTrue("updates blocked", blocked)___        _        TaskInfo mainTask = findTaskToCancel(action, builder.request().getSlices())__        BulkByScrollTask.Status status = (BulkByScrollTask.Status) mainTask.getStatus()__        assertNull(status.getReasonCancelled())___        _        assertThat(mainTask.getDescription(), taskDescriptionMatcher)___        _        _        ListTasksResponse cancelTasksResponse = client().admin().cluster().prepareCancelTasks().setTaskId(mainTask.getTaskId()).get()__        cancelTasksResponse.rethrowFailures("Cancel")__        assertThat(cancelTasksResponse.getTasks(), hasSize(1))___        _        mainTask = client().admin().cluster().prepareGetTask(mainTask.getTaskId()).get().getTask().getTask()__        status = (BulkByScrollTask.Status) mainTask.getStatus()__        logger.debug("asserting that parent is marked canceled {}", status)__        assertEquals(CancelTasksRequest.DEFAULT_REASON, status.getReasonCancelled())___        if (builder.request().getSlices() > 1) {_            boolean foundCancelled = false__            ListTasksResponse sliceList = client().admin().cluster().prepareListTasks().setParentTaskId(mainTask.getTaskId())_                    .setDetailed(true).get()__            sliceList.rethrowFailures("Fetch slice tasks")__            logger.debug("finding at least one canceled child among {}", sliceList.getTasks())__            for (TaskInfo slice: sliceList.getTasks()) {_                BulkByScrollTask.Status sliceStatus = (BulkByScrollTask.Status) slice.getStatus()__                if (sliceStatus.getReasonCancelled() == null) continue__                assertEquals(CancelTasksRequest.DEFAULT_REASON, sliceStatus.getReasonCancelled())__                foundCancelled = true__            }_            assertTrue("Didn't find at least one sub task that was cancelled", foundCancelled)__        }__        logger.debug("unblocking the blocked update")__        ALLOWED_OPERATIONS.release(builder.request().getSlices())___        _        assertBusy(() -> {_            if (builder.request().getSlices() == 1) {_                _                assertEquals(0, ALLOWED_OPERATIONS.availablePermits())__            }_            assertEquals(0, ALLOWED_OPERATIONS.getQueueLength())__        })___        _        BulkByScrollResponse response__        try {_            response = future.get(30, TimeUnit.SECONDS)__        } catch (Exception e) {_            String tasks = client().admin().cluster().prepareListTasks().setParentTaskId(mainTask.getTaskId())_                        .setDetailed(true).get().toString()__            throw new RuntimeException("Exception while waiting for the response. Running tasks: " + tasks, e)__        }_        assertThat(response.getReasonCancelled(), equalTo("by user request"))__        assertThat(response.getBulkFailures(), emptyIterable())__        assertThat(response.getSearchFailures(), emptyIterable())___        if (builder.request().getSlices() >= 1) {_            _            numModifiedDocs -= ALLOWED_OPERATIONS.availablePermits()__        }_        flushAndRefresh(INDEX)__        assertion.assertThat(response, numDocs, numModifiedDocs)__    };executes,the,cancellation,test;private,void,test,cancel,string,action,abstract,bulk,by,scroll,request,builder,builder,cancel,assertion,assertion,matcher,string,task,description,matcher,throws,exception,create,index,index,int,num,docs,get,num,shards,index,num,primaries,10,builder,request,get,slices,release,num,docs,logger,debug,setting,up,docs,num,docs,index,random,true,false,true,int,stream,range,0,num,docs,map,to,obj,i,client,prepare,index,index,type,string,value,of,i,set,source,n,i,collect,collectors,to,list,assert,hit,count,client,prepare,search,index,set,size,0,get,num,docs,assert,that,drain,permits,equal,to,0,builder,source,set,size,1,int,num,modified,docs,random,int,between,builder,request,get,slices,2,num,docs,logger,debug,chose,to,modify,out,of,docs,num,modified,docs,num,docs,release,num,modified,docs,builder,request,get,slices,action,future,extends,bulk,by,scroll,response,future,builder,execute,logger,debug,waiting,for,updates,to,be,blocked,boolean,blocked,await,busy,has,queued,threads,available,permits,0,1,time,unit,minutes,assert,true,updates,blocked,blocked,task,info,main,task,find,task,to,cancel,action,builder,request,get,slices,bulk,by,scroll,task,status,status,bulk,by,scroll,task,status,main,task,get,status,assert,null,status,get,reason,cancelled,assert,that,main,task,get,description,task,description,matcher,list,tasks,response,cancel,tasks,response,client,admin,cluster,prepare,cancel,tasks,set,task,id,main,task,get,task,id,get,cancel,tasks,response,rethrow,failures,cancel,assert,that,cancel,tasks,response,get,tasks,has,size,1,main,task,client,admin,cluster,prepare,get,task,main,task,get,task,id,get,get,task,get,task,status,bulk,by,scroll,task,status,main,task,get,status,logger,debug,asserting,that,parent,is,marked,canceled,status,assert,equals,cancel,tasks,request,status,get,reason,cancelled,if,builder,request,get,slices,1,boolean,found,cancelled,false,list,tasks,response,slice,list,client,admin,cluster,prepare,list,tasks,set,parent,task,id,main,task,get,task,id,set,detailed,true,get,slice,list,rethrow,failures,fetch,slice,tasks,logger,debug,finding,at,least,one,canceled,child,among,slice,list,get,tasks,for,task,info,slice,slice,list,get,tasks,bulk,by,scroll,task,status,slice,status,bulk,by,scroll,task,status,slice,get,status,if,slice,status,get,reason,cancelled,null,continue,assert,equals,cancel,tasks,request,slice,status,get,reason,cancelled,found,cancelled,true,assert,true,didn,t,find,at,least,one,sub,task,that,was,cancelled,found,cancelled,logger,debug,unblocking,the,blocked,update,release,builder,request,get,slices,assert,busy,if,builder,request,get,slices,1,assert,equals,0,available,permits,assert,equals,0,get,queue,length,bulk,by,scroll,response,response,try,response,future,get,30,time,unit,seconds,catch,exception,e,string,tasks,client,admin,cluster,prepare,list,tasks,set,parent,task,id,main,task,get,task,id,set,detailed,true,get,to,string,throw,new,runtime,exception,exception,while,waiting,for,the,response,running,tasks,tasks,e,assert,that,response,get,reason,cancelled,equal,to,by,user,request,assert,that,response,get,bulk,failures,empty,iterable,assert,that,response,get,search,failures,empty,iterable,if,builder,request,get,slices,1,num,modified,docs,available,permits,flush,and,refresh,index,assertion,assert,that,response,num,docs,num,modified,docs
CancelTests -> private void testCancel(String action, AbstractBulkByScrollRequestBuilder<?, ?> builder, CancelAssertion assertion,                             Matcher<String> taskDescriptionMatcher) throws Exception;1541163135;Executes the cancellation test;private void testCancel(String action, AbstractBulkByScrollRequestBuilder<?, ?> builder, CancelAssertion assertion,_                            Matcher<String> taskDescriptionMatcher) throws Exception {_        createIndex(INDEX)___        _        int numDocs = getNumShards(INDEX).numPrimaries * 10 * builder.request().getSlices()__        ALLOWED_OPERATIONS.release(numDocs)___        logger.debug("setting up [{}] docs", numDocs)__        indexRandom(true, false, true, IntStream.range(0, numDocs)_                .mapToObj(i -> client().prepareIndex(INDEX, TYPE, String.valueOf(i)).setSource("n", i))_                .collect(Collectors.toList()))___        _        assertHitCount(client().prepareSearch(INDEX).setSize(0).get(), numDocs)__        assertThat(ALLOWED_OPERATIONS.drainPermits(), equalTo(0))___        _        builder.source().setSize(1)___        _        int numModifiedDocs = randomIntBetween(builder.request().getSlices() * 2, numDocs)__        logger.debug("chose to modify [{}] out of [{}] docs", numModifiedDocs, numDocs)__        ALLOWED_OPERATIONS.release(numModifiedDocs - builder.request().getSlices())___        _        ActionFuture<? extends BulkByScrollResponse> future = builder.execute()___        _        logger.debug("waiting for updates to be blocked")__        boolean blocked = awaitBusy(_            () -> ALLOWED_OPERATIONS.hasQueuedThreads() && ALLOWED_OPERATIONS.availablePermits() == 0,_            1, TimeUnit.MINUTES)_ _        assertTrue("updates blocked", blocked)___        _        TaskInfo mainTask = findTaskToCancel(action, builder.request().getSlices())__        BulkByScrollTask.Status status = (BulkByScrollTask.Status) mainTask.getStatus()__        assertNull(status.getReasonCancelled())___        _        assertThat(mainTask.getDescription(), taskDescriptionMatcher)___        _        _        ListTasksResponse cancelTasksResponse = client().admin().cluster().prepareCancelTasks().setTaskId(mainTask.getTaskId()).get()__        cancelTasksResponse.rethrowFailures("Cancel")__        assertThat(cancelTasksResponse.getTasks(), hasSize(1))___        _        mainTask = client().admin().cluster().prepareGetTask(mainTask.getTaskId()).get().getTask().getTask()__        status = (BulkByScrollTask.Status) mainTask.getStatus()__        logger.debug("asserting that parent is marked canceled {}", status)__        assertEquals(CancelTasksRequest.DEFAULT_REASON, status.getReasonCancelled())___        if (builder.request().getSlices() > 1) {_            boolean foundCancelled = false__            ListTasksResponse sliceList = client().admin().cluster().prepareListTasks().setParentTaskId(mainTask.getTaskId())_                    .setDetailed(true).get()__            sliceList.rethrowFailures("Fetch slice tasks")__            logger.debug("finding at least one canceled child among {}", sliceList.getTasks())__            for (TaskInfo slice: sliceList.getTasks()) {_                BulkByScrollTask.Status sliceStatus = (BulkByScrollTask.Status) slice.getStatus()__                if (sliceStatus.getReasonCancelled() == null) continue__                assertEquals(CancelTasksRequest.DEFAULT_REASON, sliceStatus.getReasonCancelled())__                foundCancelled = true__            }_            assertTrue("Didn't find at least one sub task that was cancelled", foundCancelled)__        }__        logger.debug("unblocking the blocked update")__        ALLOWED_OPERATIONS.release(builder.request().getSlices())___        _        assertBusy(() -> {_            if (builder.request().getSlices() == 1) {_                _                assertEquals(0, ALLOWED_OPERATIONS.availablePermits())__            }_            assertEquals(0, ALLOWED_OPERATIONS.getQueueLength())__        })___        _        BulkByScrollResponse response__        try {_            response = future.get(30, TimeUnit.SECONDS)__        } catch (Exception e) {_            String tasks = client().admin().cluster().prepareListTasks().setParentTaskId(mainTask.getTaskId())_                        .setDetailed(true).get().toString()__            throw new RuntimeException("Exception while waiting for the response. Running tasks: " + tasks, e)__        }_        assertThat(response.getReasonCancelled(), equalTo("by user request"))__        assertThat(response.getBulkFailures(), emptyIterable())__        assertThat(response.getSearchFailures(), emptyIterable())___        if (builder.request().getSlices() >= 1) {_            _            numModifiedDocs -= ALLOWED_OPERATIONS.availablePermits()__        }_        flushAndRefresh(INDEX)__        assertion.assertThat(response, numDocs, numModifiedDocs)__    };executes,the,cancellation,test;private,void,test,cancel,string,action,abstract,bulk,by,scroll,request,builder,builder,cancel,assertion,assertion,matcher,string,task,description,matcher,throws,exception,create,index,index,int,num,docs,get,num,shards,index,num,primaries,10,builder,request,get,slices,release,num,docs,logger,debug,setting,up,docs,num,docs,index,random,true,false,true,int,stream,range,0,num,docs,map,to,obj,i,client,prepare,index,index,type,string,value,of,i,set,source,n,i,collect,collectors,to,list,assert,hit,count,client,prepare,search,index,set,size,0,get,num,docs,assert,that,drain,permits,equal,to,0,builder,source,set,size,1,int,num,modified,docs,random,int,between,builder,request,get,slices,2,num,docs,logger,debug,chose,to,modify,out,of,docs,num,modified,docs,num,docs,release,num,modified,docs,builder,request,get,slices,action,future,extends,bulk,by,scroll,response,future,builder,execute,logger,debug,waiting,for,updates,to,be,blocked,boolean,blocked,await,busy,has,queued,threads,available,permits,0,1,time,unit,minutes,assert,true,updates,blocked,blocked,task,info,main,task,find,task,to,cancel,action,builder,request,get,slices,bulk,by,scroll,task,status,status,bulk,by,scroll,task,status,main,task,get,status,assert,null,status,get,reason,cancelled,assert,that,main,task,get,description,task,description,matcher,list,tasks,response,cancel,tasks,response,client,admin,cluster,prepare,cancel,tasks,set,task,id,main,task,get,task,id,get,cancel,tasks,response,rethrow,failures,cancel,assert,that,cancel,tasks,response,get,tasks,has,size,1,main,task,client,admin,cluster,prepare,get,task,main,task,get,task,id,get,get,task,get,task,status,bulk,by,scroll,task,status,main,task,get,status,logger,debug,asserting,that,parent,is,marked,canceled,status,assert,equals,cancel,tasks,request,status,get,reason,cancelled,if,builder,request,get,slices,1,boolean,found,cancelled,false,list,tasks,response,slice,list,client,admin,cluster,prepare,list,tasks,set,parent,task,id,main,task,get,task,id,set,detailed,true,get,slice,list,rethrow,failures,fetch,slice,tasks,logger,debug,finding,at,least,one,canceled,child,among,slice,list,get,tasks,for,task,info,slice,slice,list,get,tasks,bulk,by,scroll,task,status,slice,status,bulk,by,scroll,task,status,slice,get,status,if,slice,status,get,reason,cancelled,null,continue,assert,equals,cancel,tasks,request,slice,status,get,reason,cancelled,found,cancelled,true,assert,true,didn,t,find,at,least,one,sub,task,that,was,cancelled,found,cancelled,logger,debug,unblocking,the,blocked,update,release,builder,request,get,slices,assert,busy,if,builder,request,get,slices,1,assert,equals,0,available,permits,assert,equals,0,get,queue,length,bulk,by,scroll,response,response,try,response,future,get,30,time,unit,seconds,catch,exception,e,string,tasks,client,admin,cluster,prepare,list,tasks,set,parent,task,id,main,task,get,task,id,set,detailed,true,get,to,string,throw,new,runtime,exception,exception,while,waiting,for,the,response,running,tasks,tasks,e,assert,that,response,get,reason,cancelled,equal,to,by,user,request,assert,that,response,get,bulk,failures,empty,iterable,assert,that,response,get,search,failures,empty,iterable,if,builder,request,get,slices,1,num,modified,docs,available,permits,flush,and,refresh,index,assertion,assert,that,response,num,docs,num,modified,docs
