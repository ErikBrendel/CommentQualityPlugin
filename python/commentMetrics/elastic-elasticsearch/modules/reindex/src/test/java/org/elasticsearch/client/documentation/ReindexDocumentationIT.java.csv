commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean ignoreExternalCluster() {     return true. }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Arrays.asList(ReindexPlugin.class, ReindexCancellationPlugin.class). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> transportClientPlugins() {     return Collections.singletonList(ReindexPlugin.class). }
false;public;0;4;;@Before public void setup() {     client().admin().indices().prepareCreate(INDEX_NAME).get(). }
false;public;0;12;;@SuppressWarnings("unused") public void testReindex() {     Client client = client().     // tag::reindex1     BulkByScrollResponse response = new ReindexRequestBuilder(client, ReindexAction.INSTANCE).source("source_index").destination("target_index").filter(// <1>     QueryBuilders.matchQuery("category", "xzy")).get(). // end::reindex1 }
false;public;0;92;;@SuppressWarnings("unused") public void testUpdateByQuery() {     Client client = client().     client.admin().indices().prepareCreate("foo").get().     client.admin().indices().prepareCreate("bar").get().     client.admin().indices().preparePutMapping(INDEX_NAME).setType("_doc").setSource("cat", "type=keyword").get().     {         // tag::update-by-query         UpdateByQueryRequestBuilder updateByQuery = new UpdateByQueryRequestBuilder(client, UpdateByQueryAction.INSTANCE).         updateByQuery.source("source_index").abortOnVersionConflict(false).         BulkByScrollResponse response = updateByQuery.get().     // end::update-by-query     }     {         // tag::update-by-query-filter         UpdateByQueryRequestBuilder updateByQuery = new UpdateByQueryRequestBuilder(client, UpdateByQueryAction.INSTANCE).         updateByQuery.source("source_index").filter(QueryBuilders.termQuery("level", "awesome")).size(1000).script(new Script(ScriptType.INLINE, "ctx._source.awesome = 'absolutely'", "painless", Collections.emptyMap())).         BulkByScrollResponse response = updateByQuery.get().     // end::update-by-query-filter     }     {         // tag::update-by-query-size         UpdateByQueryRequestBuilder updateByQuery = new UpdateByQueryRequestBuilder(client, UpdateByQueryAction.INSTANCE).         updateByQuery.source("source_index").source().setSize(500).         BulkByScrollResponse response = updateByQuery.get().     // end::update-by-query-size     }     {         // tag::update-by-query-sort         UpdateByQueryRequestBuilder updateByQuery = new UpdateByQueryRequestBuilder(client, UpdateByQueryAction.INSTANCE).         updateByQuery.source("source_index").size(100).source().addSort("cat", SortOrder.DESC).         BulkByScrollResponse response = updateByQuery.get().     // end::update-by-query-sort     }     {         // tag::update-by-query-script         UpdateByQueryRequestBuilder updateByQuery = new UpdateByQueryRequestBuilder(client, UpdateByQueryAction.INSTANCE).         updateByQuery.source("source_index").script(new Script(ScriptType.INLINE, "if (ctx._source.awesome == 'absolutely') {" + "  ctx.op='noop'" + "} else if (ctx._source.awesome == 'lame') {" + "  ctx.op='delete'" + "} else {" + "ctx._source.awesome = 'absolutely'}", "painless", Collections.emptyMap())).         BulkByScrollResponse response = updateByQuery.get().     // end::update-by-query-script     }     {         // tag::update-by-query-multi-index         UpdateByQueryRequestBuilder updateByQuery = new UpdateByQueryRequestBuilder(client, UpdateByQueryAction.INSTANCE).         updateByQuery.source("foo", "bar").         BulkByScrollResponse response = updateByQuery.get().     // end::update-by-query-multi-index     }     {         // tag::update-by-query-routing         UpdateByQueryRequestBuilder updateByQuery = new UpdateByQueryRequestBuilder(client, UpdateByQueryAction.INSTANCE).         updateByQuery.source().setRouting("cat").         BulkByScrollResponse response = updateByQuery.get().     // end::update-by-query-routing     }     {         // tag::update-by-query-pipeline         UpdateByQueryRequestBuilder updateByQuery = new UpdateByQueryRequestBuilder(client, UpdateByQueryAction.INSTANCE).         updateByQuery.setPipeline("hurray").         BulkByScrollResponse response = updateByQuery.get().     // end::update-by-query-pipeline     } }
false;public;0;48;;public void testTasks() throws InterruptedException {     final Client client = client().     final ReindexRequestBuilder builder = reindexAndPartiallyBlock().     {         // tag::update-by-query-list-tasks         ListTasksResponse tasksList = client.admin().cluster().prepareListTasks().setActions(UpdateByQueryAction.NAME).setDetailed(true).get().         for (TaskInfo info : tasksList.getTasks()) {             TaskId taskId = info.getTaskId().             BulkByScrollTask.Status status = (BulkByScrollTask.Status) info.getStatus().         // do stuff         }     // end::update-by-query-list-tasks     }     TaskInfo mainTask = CancelTests.findTaskToCancel(ReindexAction.NAME, builder.request().getSlices()).     BulkByScrollTask.Status status = (BulkByScrollTask.Status) mainTask.getStatus().     assertNull(status.getReasonCancelled()).     TaskId taskId = mainTask.getTaskId().     {         // tag::update-by-query-get-task         GetTaskResponse get = client.admin().cluster().prepareGetTask(taskId).get().     // end::update-by-query-get-task     }     {         // tag::update-by-query-cancel-task         // Cancel all update-by-query requests         client.admin().cluster().prepareCancelTasks().setActions(UpdateByQueryAction.NAME).get().getTasks().         // Cancel a specific update-by-query request         client.admin().cluster().prepareCancelTasks().setTaskId(taskId).get().getTasks().     // end::update-by-query-cancel-task     }     {         // tag::update-by-query-rethrottle         new RethrottleRequestBuilder(client, RethrottleAction.INSTANCE).setTaskId(taskId).setRequestsPerSecond(2.0f).get().     // end::update-by-query-rethrottle     }     // unblocking the blocked update     ALLOWED_OPERATIONS.release(builder.request().getSlices()). }
false;public;1;4;;@Override public void onResponse(BulkByScrollResponse response) {     // <4>     long deleted = response.getDeleted(). }
false;public;1;4;;@Override public void onFailure(Exception e) { // Handle the exception }
false;public;0;30;;@SuppressWarnings("unused") public void testDeleteByQuery() {     Client client = client().     client.admin().indices().prepareCreate("persons").get().     // tag::delete-by-query-sync     BulkByScrollResponse response = new DeleteByQueryRequestBuilder(client, DeleteByQueryAction.INSTANCE).filter(// <1>     QueryBuilders.matchQuery("gender", "male")).source(// <2>     "persons").get().     // <4>     long deleted = response.getDeleted().     // end::delete-by-query-sync     // tag::delete-by-query-async     new DeleteByQueryRequestBuilder(client, DeleteByQueryAction.INSTANCE).filter(// <1>     QueryBuilders.matchQuery("gender", "male")).source(// <2>     "persons").execute(new // <3>     ActionListener<BulkByScrollResponse>() {          @Override         public void onResponse(BulkByScrollResponse response) {             // <4>             long deleted = response.getDeleted().         }          @Override         public void onFailure(Exception e) {         // Handle the exception         }     }). // end::delete-by-query-async }
true;private;0;31;/**  * Similar to what CancelTests does: blocks some operations to be able to catch some tasks in running state  * @see CancelTests#testCancel(String, AbstractBulkByScrollRequestBuilder, CancelTests.CancelAssertion, Matcher)  */ ;/**  * Similar to what CancelTests does: blocks some operations to be able to catch some tasks in running state  * @see CancelTests#testCancel(String, AbstractBulkByScrollRequestBuilder, CancelTests.CancelAssertion, Matcher)  */ private ReindexRequestBuilder reindexAndPartiallyBlock() throws InterruptedException {     final Client client = client().     final int numDocs = randomIntBetween(10, 100).     ALLOWED_OPERATIONS.release(numDocs).     indexRandom(true, false, true, IntStream.range(0, numDocs).mapToObj(i -> client().prepareIndex(INDEX_NAME, "_doc", Integer.toString(i)).setSource("n", Integer.toString(i))).collect(Collectors.toList())).     // Checks that the all documents have been indexed and correctly counted     assertHitCount(client().prepareSearch(INDEX_NAME).setSize(0).get(), numDocs).     assertThat(ALLOWED_OPERATIONS.drainPermits(), equalTo(0)).     ReindexRequestBuilder builder = new ReindexRequestBuilder(client, ReindexAction.INSTANCE).source(INDEX_NAME).destination("target_index", "_doc").     // Scroll by 1 so that cancellation is easier to control     builder.source().setSize(1).     int numModifiedDocs = randomIntBetween(builder.request().getSlices() * 2, numDocs).     // chose to modify some of docs - rest is still blocked     ALLOWED_OPERATIONS.release(numModifiedDocs - builder.request().getSlices()).     // Now execute the reindex action...     builder.execute().     // 10 seconds is usually fine but on heavily loaded machines this can take a while     assertTrue("updates blocked", awaitBusy(() -> ALLOWED_OPERATIONS.hasQueuedThreads() && ALLOWED_OPERATIONS.availablePermits() == 0, 1, TimeUnit.MINUTES)).     return builder. }
false;public;1;4;;@Override public void onIndexModule(IndexModule indexModule) {     indexModule.addIndexOperationListener(new BlockingOperationListener()). }
false;public;2;4;;@Override public Engine.Index preIndex(ShardId shardId, Engine.Index index) {     return preCheck(index, index.type()). }
false;public;2;4;;@Override public Engine.Delete preDelete(ShardId shardId, Engine.Delete delete) {     return preCheck(delete, delete.type()). }
false;private;2;14;;private <T extends Engine.Operation> T preCheck(T operation, String type) {     if (("_doc".equals(type) == false) || (operation.origin() != Engine.Operation.Origin.PRIMARY)) {         return operation.     }     try {         if (ALLOWED_OPERATIONS.tryAcquire(30, TimeUnit.SECONDS)) {             return operation.         }     } catch (InterruptedException e) {         throw new RuntimeException(e).     }     throw new IllegalStateException("Something went wrong"). }
