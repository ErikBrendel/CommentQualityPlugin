# id;timestamp;commentText;codeText;commentWords;codeWords
ReindexDocumentationIT -> private ReindexRequestBuilder reindexAndPartiallyBlock() throws InterruptedException;1541163135;Similar to what CancelTests does: blocks some operations to be able to catch some tasks in running state_@see CancelTests#testCancel(String, AbstractBulkByScrollRequestBuilder, CancelTests.CancelAssertion, Matcher);private ReindexRequestBuilder reindexAndPartiallyBlock() throws InterruptedException {_        final Client client = client()__        final int numDocs = randomIntBetween(10, 100)__        ALLOWED_OPERATIONS.release(numDocs)___        indexRandom(true, false, true, IntStream.range(0, numDocs)_            .mapToObj(i -> client().prepareIndex(INDEX_NAME, "_doc", Integer.toString(i)).setSource("n", Integer.toString(i)))_            .collect(Collectors.toList()))___        _        assertHitCount(client().prepareSearch(INDEX_NAME).setSize(0).get(), numDocs)__        assertThat(ALLOWED_OPERATIONS.drainPermits(), equalTo(0))___        ReindexRequestBuilder builder = new ReindexRequestBuilder(client, ReindexAction.INSTANCE).source(INDEX_NAME)_            .destination("target_index", "_doc")__        _        builder.source().setSize(1)___        int numModifiedDocs = randomIntBetween(builder.request().getSlices() * 2, numDocs)__        _        ALLOWED_OPERATIONS.release(numModifiedDocs - builder.request().getSlices())___        _        builder.execute()___        _        assertTrue("updates blocked", awaitBusy(_            () -> ALLOWED_OPERATIONS.hasQueuedThreads() && ALLOWED_OPERATIONS.availablePermits() == 0,_            1, TimeUnit.MINUTES))__        return builder__    };similar,to,what,cancel,tests,does,blocks,some,operations,to,be,able,to,catch,some,tasks,in,running,state,see,cancel,tests,test,cancel,string,abstract,bulk,by,scroll,request,builder,cancel,tests,cancel,assertion,matcher;private,reindex,request,builder,reindex,and,partially,block,throws,interrupted,exception,final,client,client,client,final,int,num,docs,random,int,between,10,100,release,num,docs,index,random,true,false,true,int,stream,range,0,num,docs,map,to,obj,i,client,prepare,index,integer,to,string,i,set,source,n,integer,to,string,i,collect,collectors,to,list,assert,hit,count,client,prepare,search,set,size,0,get,num,docs,assert,that,drain,permits,equal,to,0,reindex,request,builder,builder,new,reindex,request,builder,client,reindex,action,instance,source,destination,builder,source,set,size,1,int,num,modified,docs,random,int,between,builder,request,get,slices,2,num,docs,release,num,modified,docs,builder,request,get,slices,builder,execute,assert,true,updates,blocked,await,busy,has,queued,threads,available,permits,0,1,time,unit,minutes,return,builder
ReindexDocumentationIT -> private ReindexRequestBuilder reindexAndPartiallyBlock() throws InterruptedException;1544566199;Similar to what CancelTests does: blocks some operations to be able to catch some tasks in running state_@see CancelTests#testCancel(String, AbstractBulkByScrollRequestBuilder, CancelTests.CancelAssertion, Matcher);private ReindexRequestBuilder reindexAndPartiallyBlock() throws InterruptedException {_        final Client client = client()__        final int numDocs = randomIntBetween(10, 100)__        ALLOWED_OPERATIONS.release(numDocs)___        indexRandom(true, false, true, IntStream.range(0, numDocs)_            .mapToObj(i -> client().prepareIndex(INDEX_NAME, "_doc", Integer.toString(i)).setSource("n", Integer.toString(i)))_            .collect(Collectors.toList()))___        _        assertHitCount(client().prepareSearch(INDEX_NAME).setSize(0).get(), numDocs)__        assertThat(ALLOWED_OPERATIONS.drainPermits(), equalTo(0))___        ReindexRequestBuilder builder = new ReindexRequestBuilder(client, ReindexAction.INSTANCE).source(INDEX_NAME)_            .destination("target_index", "_doc")__        _        builder.source().setSize(1)___        int numModifiedDocs = randomIntBetween(builder.request().getSlices() * 2, numDocs)__        _        ALLOWED_OPERATIONS.release(numModifiedDocs - builder.request().getSlices())___        _        builder.execute()___        _        assertTrue("updates blocked", awaitBusy(_            () -> ALLOWED_OPERATIONS.hasQueuedThreads() && ALLOWED_OPERATIONS.availablePermits() == 0,_            1, TimeUnit.MINUTES))__        return builder__    };similar,to,what,cancel,tests,does,blocks,some,operations,to,be,able,to,catch,some,tasks,in,running,state,see,cancel,tests,test,cancel,string,abstract,bulk,by,scroll,request,builder,cancel,tests,cancel,assertion,matcher;private,reindex,request,builder,reindex,and,partially,block,throws,interrupted,exception,final,client,client,client,final,int,num,docs,random,int,between,10,100,release,num,docs,index,random,true,false,true,int,stream,range,0,num,docs,map,to,obj,i,client,prepare,index,integer,to,string,i,set,source,n,integer,to,string,i,collect,collectors,to,list,assert,hit,count,client,prepare,search,set,size,0,get,num,docs,assert,that,drain,permits,equal,to,0,reindex,request,builder,builder,new,reindex,request,builder,client,reindex,action,instance,source,destination,builder,source,set,size,1,int,num,modified,docs,random,int,between,builder,request,get,slices,2,num,docs,release,num,modified,docs,builder,request,get,slices,builder,execute,assert,true,updates,blocked,await,busy,has,queued,threads,available,permits,0,1,time,unit,minutes,return,builder
