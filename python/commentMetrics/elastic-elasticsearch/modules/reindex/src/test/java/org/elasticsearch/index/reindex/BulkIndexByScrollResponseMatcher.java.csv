commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public BulkIndexByScrollResponseMatcher created(Matcher<Long> createdMatcher) {     this.createdMatcher = createdMatcher.     return this. }
false;public;1;3;;public BulkIndexByScrollResponseMatcher created(long created) {     return created(equalTo(created)). }
false;public;1;4;;public BulkIndexByScrollResponseMatcher updated(Matcher<Long> updatedMatcher) {     this.updatedMatcher = updatedMatcher.     return this. }
false;public;1;3;;public BulkIndexByScrollResponseMatcher updated(long updated) {     return updated(equalTo(updated)). }
false;public;1;4;;public BulkIndexByScrollResponseMatcher deleted(Matcher<Long> deletedMatcher) {     this.deletedMatcher = deletedMatcher.     return this. }
false;public;1;3;;public BulkIndexByScrollResponseMatcher deleted(long deleted) {     return deleted(equalTo(deleted)). }
true;public;1;4;/**  * Set the matches for the number of batches. Defaults to matching any  * integer because we usually don't care about how many batches the job  * takes.  */ ;/**  * Set the matches for the number of batches. Defaults to matching any  * integer because we usually don't care about how many batches the job  * takes.  */ public BulkIndexByScrollResponseMatcher batches(Matcher<Integer> batchesMatcher) {     this.batchesMatcher = batchesMatcher.     return this. }
false;public;1;3;;public BulkIndexByScrollResponseMatcher batches(int batches) {     return batches(equalTo(batches)). }
false;public;2;4;;public BulkIndexByScrollResponseMatcher batches(int total, int batchSize) {     // Round up     return batches((total + batchSize - 1) / batchSize). }
false;public;1;4;;public BulkIndexByScrollResponseMatcher versionConflicts(Matcher<Long> versionConflictsMatcher) {     this.versionConflictsMatcher = versionConflictsMatcher.     return this. }
false;public;1;3;;public BulkIndexByScrollResponseMatcher versionConflicts(long versionConflicts) {     return versionConflicts(equalTo(versionConflicts)). }
true;public;1;4;/**  * Set the matcher for the size of the failures list. For more in depth  * matching do it by hand. The type signatures required to match the  * actual failures list here just don't work.  */ ;/**  * Set the matcher for the size of the failures list. For more in depth  * matching do it by hand. The type signatures required to match the  * actual failures list here just don't work.  */ public BulkIndexByScrollResponseMatcher failures(Matcher<Integer> failuresMatcher) {     this.failuresMatcher = failuresMatcher.     return this. }
true;public;1;3;/**  * Set the expected size of the failures list.  */ ;/**  * Set the expected size of the failures list.  */ public BulkIndexByScrollResponseMatcher failures(int failures) {     return failures(equalTo(failures)). }
false;public;1;4;;public BulkIndexByScrollResponseMatcher reasonCancelled(Matcher<String> reasonCancelledMatcher) {     this.reasonCancelledMatcher = reasonCancelledMatcher.     return this. }
true;public;1;4;/**  * Set the matcher for the workers portion of the response.  */ ;/**  * Set the matcher for the workers portion of the response.  */ public BulkIndexByScrollResponseMatcher slices(Matcher<Collection<? extends BulkIndexByScrollResponseMatcher>> slicesMatcher) {     this.slicesMatcher = slicesMatcher.     return this. }
false;protected;1;11;;@Override protected boolean matchesSafely(BulkByScrollResponse item) {     return updatedMatcher.matches(item.getUpdated()) && createdMatcher.matches(item.getCreated()) && deletedMatcher.matches(item.getDeleted()) && (batchesMatcher == null || batchesMatcher.matches(item.getBatches())) && versionConflictsMatcher.matches(item.getVersionConflicts()) && failuresMatcher.matches(item.getBulkFailures().size()) && reasonCancelledMatcher.matches(item.getReasonCancelled()) && slicesMatcher.matches(item.getStatus().getSliceStatuses()). }
false;public;1;13;;@Override public void describeTo(Description description) {     description.appendText("updated matches ").appendDescriptionOf(updatedMatcher).     description.appendText(" and created matches ").appendDescriptionOf(createdMatcher).     description.appendText(" and deleted matches ").appendDescriptionOf(deletedMatcher).     if (batchesMatcher != null) {         description.appendText(" and batches matches ").appendDescriptionOf(batchesMatcher).     }     description.appendText(" and versionConflicts matches ").appendDescriptionOf(versionConflictsMatcher).     description.appendText(" and failures size matches ").appendDescriptionOf(failuresMatcher).     description.appendText(" and reason cancelled matches ").appendDescriptionOf(reasonCancelledMatcher).     description.appendText(" and slices matches ").appendDescriptionOf(slicesMatcher). }
