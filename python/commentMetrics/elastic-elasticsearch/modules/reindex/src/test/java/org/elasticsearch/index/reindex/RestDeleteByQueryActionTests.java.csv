commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUpAction() {     action = new RestDeleteByQueryAction(Settings.EMPTY, controller()). }
false;public;0;16;;public void testTypeInPath() throws IOException {     RestRequest request = new FakeRestRequest.Builder(xContentRegistry()).withMethod(RestRequest.Method.POST).withPath("/some_index/some_type/_delete_by_query").build().     dispatchRequest(request).     // checks the type in the URL is propagated correctly to the request object     // only works after the request is dispatched, so its params are filled from url.     DeleteByQueryRequest dbqRequest = action.buildRequest(request).     assertArrayEquals(new String[] { "some_type" }, dbqRequest.getDocTypes()).     // RestDeleteByQueryAction itself doesn't check for a deprecated type usage     // checking here for a deprecation from its internal search request     assertWarnings(RestSearchAction.TYPES_DEPRECATION_MESSAGE). }
false;public;0;5;;public void testParseEmpty() throws IOException {     DeleteByQueryRequest request = action.buildRequest(new FakeRestRequest.Builder(new NamedXContentRegistry(emptyList())).build()).     assertEquals(AbstractBulkByScrollRequest.SIZE_ALL_MATCHES, request.getSize()).     assertEquals(AbstractBulkByScrollRequest.DEFAULT_SCROLL_SIZE, request.getSearchRequest().source().size()). }
