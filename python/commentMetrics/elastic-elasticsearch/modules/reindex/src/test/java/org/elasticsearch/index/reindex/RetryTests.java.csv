# id;timestamp;commentText;codeText;commentWords;codeWords
RetryTests -> private CyclicBarrier blockExecutor(String name, String node) throws Exception;1524684173;Blocks the named executor by getting its only thread running a task blocked on a CyclicBarrier and fills the queue with a noop task._So requests to use this queue should get {@link EsRejectedExecutionException}s.;private CyclicBarrier blockExecutor(String name, String node) throws Exception {_        ThreadPool threadPool = internalCluster().getInstance(ThreadPool.class, node)__        CyclicBarrier barrier = new CyclicBarrier(2)__        logger.info("Blocking the [{}] executor", name)__        threadPool.executor(name).execute(() -> {_            try {_                threadPool.executor(name).execute(() -> {})__                barrier.await()__                logger.info("Blocked the [{}] executor", name)__                barrier.await()__                logger.info("Unblocking the [{}] executor", name)__            } catch (Exception e) {_                throw new RuntimeException(e)__            }_        })__        barrier.await()__        blockedExecutors.add(barrier)__        return barrier__    };blocks,the,named,executor,by,getting,its,only,thread,running,a,task,blocked,on,a,cyclic,barrier,and,fills,the,queue,with,a,noop,task,so,requests,to,use,this,queue,should,get,link,es,rejected,execution,exception,s;private,cyclic,barrier,block,executor,string,name,string,node,throws,exception,thread,pool,thread,pool,internal,cluster,get,instance,thread,pool,class,node,cyclic,barrier,barrier,new,cyclic,barrier,2,logger,info,blocking,the,executor,name,thread,pool,executor,name,execute,try,thread,pool,executor,name,execute,barrier,await,logger,info,blocked,the,executor,name,barrier,await,logger,info,unblocking,the,executor,name,catch,exception,e,throw,new,runtime,exception,e,barrier,await,blocked,executors,add,barrier,return,barrier
RetryTests -> private CyclicBarrier blockExecutor(String name, String node) throws Exception;1525334055;Blocks the named executor by getting its only thread running a task blocked on a CyclicBarrier and fills the queue with a noop task._So requests to use this queue should get {@link EsRejectedExecutionException}s.;private CyclicBarrier blockExecutor(String name, String node) throws Exception {_        ThreadPool threadPool = internalCluster().getInstance(ThreadPool.class, node)__        CyclicBarrier barrier = new CyclicBarrier(2)__        logger.info("Blocking the [{}] executor", name)__        threadPool.executor(name).execute(() -> {_            try {_                threadPool.executor(name).execute(() -> {})__                barrier.await()__                logger.info("Blocked the [{}] executor", name)__                barrier.await()__                logger.info("Unblocking the [{}] executor", name)__            } catch (Exception e) {_                throw new RuntimeException(e)__            }_        })__        barrier.await()__        blockedExecutors.add(barrier)__        return barrier__    };blocks,the,named,executor,by,getting,its,only,thread,running,a,task,blocked,on,a,cyclic,barrier,and,fills,the,queue,with,a,noop,task,so,requests,to,use,this,queue,should,get,link,es,rejected,execution,exception,s;private,cyclic,barrier,block,executor,string,name,string,node,throws,exception,thread,pool,thread,pool,internal,cluster,get,instance,thread,pool,class,node,cyclic,barrier,barrier,new,cyclic,barrier,2,logger,info,blocking,the,executor,name,thread,pool,executor,name,execute,try,thread,pool,executor,name,execute,barrier,await,logger,info,blocked,the,executor,name,barrier,await,logger,info,unblocking,the,executor,name,catch,exception,e,throw,new,runtime,exception,e,barrier,await,blocked,executors,add,barrier,return,barrier
RetryTests -> private CyclicBarrier blockExecutor(String name, String node) throws Exception;1526029249;Blocks the named executor by getting its only thread running a task blocked on a CyclicBarrier and fills the queue with a noop task._So requests to use this queue should get {@link EsRejectedExecutionException}s.;private CyclicBarrier blockExecutor(String name, String node) throws Exception {_        ThreadPool threadPool = internalCluster().getInstance(ThreadPool.class, node)__        CyclicBarrier barrier = new CyclicBarrier(2)__        logger.info("Blocking the [{}] executor", name)__        threadPool.executor(name).execute(() -> {_            try {_                threadPool.executor(name).execute(() -> {})__                barrier.await()__                logger.info("Blocked the [{}] executor", name)__                barrier.await()__                logger.info("Unblocking the [{}] executor", name)__            } catch (Exception e) {_                throw new RuntimeException(e)__            }_        })__        barrier.await()__        blockedExecutors.add(barrier)__        return barrier__    };blocks,the,named,executor,by,getting,its,only,thread,running,a,task,blocked,on,a,cyclic,barrier,and,fills,the,queue,with,a,noop,task,so,requests,to,use,this,queue,should,get,link,es,rejected,execution,exception,s;private,cyclic,barrier,block,executor,string,name,string,node,throws,exception,thread,pool,thread,pool,internal,cluster,get,instance,thread,pool,class,node,cyclic,barrier,barrier,new,cyclic,barrier,2,logger,info,blocking,the,executor,name,thread,pool,executor,name,execute,try,thread,pool,executor,name,execute,barrier,await,logger,info,blocked,the,executor,name,barrier,await,logger,info,unblocking,the,executor,name,catch,exception,e,throw,new,runtime,exception,e,barrier,await,blocked,executors,add,barrier,return,barrier
RetryTests -> private CyclicBarrier blockExecutor(String name, String node) throws Exception;1527840262;Blocks the named executor by getting its only thread running a task blocked on a CyclicBarrier and fills the queue with a noop task._So requests to use this queue should get {@link EsRejectedExecutionException}s.;private CyclicBarrier blockExecutor(String name, String node) throws Exception {_        ThreadPool threadPool = internalCluster().getInstance(ThreadPool.class, node)__        CyclicBarrier barrier = new CyclicBarrier(2)__        logger.info("Blocking the [{}] executor", name)__        threadPool.executor(name).execute(() -> {_            try {_                threadPool.executor(name).execute(() -> {})__                barrier.await()__                logger.info("Blocked the [{}] executor", name)__                barrier.await()__                logger.info("Unblocking the [{}] executor", name)__            } catch (Exception e) {_                throw new RuntimeException(e)__            }_        })__        barrier.await()__        blockedExecutors.add(barrier)__        return barrier__    };blocks,the,named,executor,by,getting,its,only,thread,running,a,task,blocked,on,a,cyclic,barrier,and,fills,the,queue,with,a,noop,task,so,requests,to,use,this,queue,should,get,link,es,rejected,execution,exception,s;private,cyclic,barrier,block,executor,string,name,string,node,throws,exception,thread,pool,thread,pool,internal,cluster,get,instance,thread,pool,class,node,cyclic,barrier,barrier,new,cyclic,barrier,2,logger,info,blocking,the,executor,name,thread,pool,executor,name,execute,try,thread,pool,executor,name,execute,barrier,await,logger,info,blocked,the,executor,name,barrier,await,logger,info,unblocking,the,executor,name,catch,exception,e,throw,new,runtime,exception,e,barrier,await,blocked,executors,add,barrier,return,barrier
RetryTests -> private CyclicBarrier blockExecutor(String name, String node) throws Exception;1528762805;Blocks the named executor by getting its only thread running a task blocked on a CyclicBarrier and fills the queue with a noop task._So requests to use this queue should get {@link EsRejectedExecutionException}s.;private CyclicBarrier blockExecutor(String name, String node) throws Exception {_        ThreadPool threadPool = internalCluster().getInstance(ThreadPool.class, node)__        CyclicBarrier barrier = new CyclicBarrier(2)__        logger.info("Blocking the [{}] executor", name)__        threadPool.executor(name).execute(() -> {_            try {_                threadPool.executor(name).execute(() -> {})__                barrier.await()__                logger.info("Blocked the [{}] executor", name)__                barrier.await()__                logger.info("Unblocking the [{}] executor", name)__            } catch (Exception e) {_                throw new RuntimeException(e)__            }_        })__        barrier.await()__        blockedExecutors.add(barrier)__        return barrier__    };blocks,the,named,executor,by,getting,its,only,thread,running,a,task,blocked,on,a,cyclic,barrier,and,fills,the,queue,with,a,noop,task,so,requests,to,use,this,queue,should,get,link,es,rejected,execution,exception,s;private,cyclic,barrier,block,executor,string,name,string,node,throws,exception,thread,pool,thread,pool,internal,cluster,get,instance,thread,pool,class,node,cyclic,barrier,barrier,new,cyclic,barrier,2,logger,info,blocking,the,executor,name,thread,pool,executor,name,execute,try,thread,pool,executor,name,execute,barrier,await,logger,info,blocked,the,executor,name,barrier,await,logger,info,unblocking,the,executor,name,catch,exception,e,throw,new,runtime,exception,e,barrier,await,blocked,executors,add,barrier,return,barrier
RetryTests -> private CyclicBarrier blockExecutor(String name, String node) throws Exception;1528893677;Blocks the named executor by getting its only thread running a task blocked on a CyclicBarrier and fills the queue with a noop task._So requests to use this queue should get {@link EsRejectedExecutionException}s.;private CyclicBarrier blockExecutor(String name, String node) throws Exception {_        ThreadPool threadPool = internalCluster().getInstance(ThreadPool.class, node)__        CyclicBarrier barrier = new CyclicBarrier(2)__        logger.info("Blocking the [{}] executor", name)__        threadPool.executor(name).execute(() -> {_            try {_                threadPool.executor(name).execute(() -> {})__                barrier.await()__                logger.info("Blocked the [{}] executor", name)__                barrier.await()__                logger.info("Unblocking the [{}] executor", name)__            } catch (Exception e) {_                throw new RuntimeException(e)__            }_        })__        barrier.await()__        blockedExecutors.add(barrier)__        return barrier__    };blocks,the,named,executor,by,getting,its,only,thread,running,a,task,blocked,on,a,cyclic,barrier,and,fills,the,queue,with,a,noop,task,so,requests,to,use,this,queue,should,get,link,es,rejected,execution,exception,s;private,cyclic,barrier,block,executor,string,name,string,node,throws,exception,thread,pool,thread,pool,internal,cluster,get,instance,thread,pool,class,node,cyclic,barrier,barrier,new,cyclic,barrier,2,logger,info,blocking,the,executor,name,thread,pool,executor,name,execute,try,thread,pool,executor,name,execute,barrier,await,logger,info,blocked,the,executor,name,barrier,await,logger,info,unblocking,the,executor,name,catch,exception,e,throw,new,runtime,exception,e,barrier,await,blocked,executors,add,barrier,return,barrier
RetryTests -> private CyclicBarrier blockExecutor(String name, String node) throws Exception;1529341607;Blocks the named executor by getting its only thread running a task blocked on a CyclicBarrier and fills the queue with a noop task._So requests to use this queue should get {@link EsRejectedExecutionException}s.;private CyclicBarrier blockExecutor(String name, String node) throws Exception {_        ThreadPool threadPool = internalCluster().getInstance(ThreadPool.class, node)__        CyclicBarrier barrier = new CyclicBarrier(2)__        logger.info("Blocking the [{}] executor", name)__        threadPool.executor(name).execute(() -> {_            try {_                threadPool.executor(name).execute(() -> {})__                barrier.await()__                logger.info("Blocked the [{}] executor", name)__                barrier.await()__                logger.info("Unblocking the [{}] executor", name)__            } catch (Exception e) {_                throw new RuntimeException(e)__            }_        })__        barrier.await()__        blockedExecutors.add(barrier)__        return barrier__    };blocks,the,named,executor,by,getting,its,only,thread,running,a,task,blocked,on,a,cyclic,barrier,and,fills,the,queue,with,a,noop,task,so,requests,to,use,this,queue,should,get,link,es,rejected,execution,exception,s;private,cyclic,barrier,block,executor,string,name,string,node,throws,exception,thread,pool,thread,pool,internal,cluster,get,instance,thread,pool,class,node,cyclic,barrier,barrier,new,cyclic,barrier,2,logger,info,blocking,the,executor,name,thread,pool,executor,name,execute,try,thread,pool,executor,name,execute,barrier,await,logger,info,blocked,the,executor,name,barrier,await,logger,info,unblocking,the,executor,name,catch,exception,e,throw,new,runtime,exception,e,barrier,await,blocked,executors,add,barrier,return,barrier
RetryTests -> private CyclicBarrier blockExecutor(String name, String node) throws Exception;1537806831;Blocks the named executor by getting its only thread running a task blocked on a CyclicBarrier and fills the queue with a noop task._So requests to use this queue should get {@link EsRejectedExecutionException}s.;private CyclicBarrier blockExecutor(String name, String node) throws Exception {_        ThreadPool threadPool = internalCluster().getInstance(ThreadPool.class, node)__        CyclicBarrier barrier = new CyclicBarrier(2)__        logger.info("Blocking the [{}] executor", name)__        threadPool.executor(name).execute(() -> {_            try {_                threadPool.executor(name).execute(() -> {})__                barrier.await()__                logger.info("Blocked the [{}] executor", name)__                barrier.await()__                logger.info("Unblocking the [{}] executor", name)__            } catch (Exception e) {_                throw new RuntimeException(e)__            }_        })__        barrier.await()__        blockedExecutors.add(barrier)__        return barrier__    };blocks,the,named,executor,by,getting,its,only,thread,running,a,task,blocked,on,a,cyclic,barrier,and,fills,the,queue,with,a,noop,task,so,requests,to,use,this,queue,should,get,link,es,rejected,execution,exception,s;private,cyclic,barrier,block,executor,string,name,string,node,throws,exception,thread,pool,thread,pool,internal,cluster,get,instance,thread,pool,class,node,cyclic,barrier,barrier,new,cyclic,barrier,2,logger,info,blocking,the,executor,name,thread,pool,executor,name,execute,try,thread,pool,executor,name,execute,barrier,await,logger,info,blocked,the,executor,name,barrier,await,logger,info,unblocking,the,executor,name,catch,exception,e,throw,new,runtime,exception,e,barrier,await,blocked,executors,add,barrier,return,barrier
RetryTests -> @Override     protected Settings nodeSettings(int nodeOrdinal);1524684173;Lower the queue sizes to be small enough that both bulk and searches will time out and have to be retried.;@Override_    protected Settings nodeSettings(int nodeOrdinal) {_        return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put(nodeSettings()).build()__    };lower,the,queue,sizes,to,be,small,enough,that,both,bulk,and,searches,will,time,out,and,have,to,be,retried;override,protected,settings,node,settings,int,node,ordinal,return,settings,builder,put,super,node,settings,node,ordinal,put,node,settings,build
RetryTests -> @Override     protected Settings nodeSettings(int nodeOrdinal);1525334055;Lower the queue sizes to be small enough that both bulk and searches will time out and have to be retried.;@Override_    protected Settings nodeSettings(int nodeOrdinal) {_        return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put(nodeSettings()).build()__    };lower,the,queue,sizes,to,be,small,enough,that,both,bulk,and,searches,will,time,out,and,have,to,be,retried;override,protected,settings,node,settings,int,node,ordinal,return,settings,builder,put,super,node,settings,node,ordinal,put,node,settings,build
RetryTests -> @Override     protected Settings nodeSettings(int nodeOrdinal);1526029249;Lower the queue sizes to be small enough that both bulk and searches will time out and have to be retried.;@Override_    protected Settings nodeSettings(int nodeOrdinal) {_        return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put(nodeSettings()).build()__    };lower,the,queue,sizes,to,be,small,enough,that,both,bulk,and,searches,will,time,out,and,have,to,be,retried;override,protected,settings,node,settings,int,node,ordinal,return,settings,builder,put,super,node,settings,node,ordinal,put,node,settings,build
RetryTests -> @Override     protected Settings nodeSettings(int nodeOrdinal);1527840262;Lower the queue sizes to be small enough that both bulk and searches will time out and have to be retried.;@Override_    protected Settings nodeSettings(int nodeOrdinal) {_        return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put(nodeSettings()).build()__    };lower,the,queue,sizes,to,be,small,enough,that,both,bulk,and,searches,will,time,out,and,have,to,be,retried;override,protected,settings,node,settings,int,node,ordinal,return,settings,builder,put,super,node,settings,node,ordinal,put,node,settings,build
RetryTests -> @Override     protected Settings nodeSettings(int nodeOrdinal);1528762805;Lower the queue sizes to be small enough that both bulk and searches will time out and have to be retried.;@Override_    protected Settings nodeSettings(int nodeOrdinal) {_        return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put(nodeSettings()).build()__    };lower,the,queue,sizes,to,be,small,enough,that,both,bulk,and,searches,will,time,out,and,have,to,be,retried;override,protected,settings,node,settings,int,node,ordinal,return,settings,builder,put,super,node,settings,node,ordinal,put,node,settings,build
RetryTests -> @Override     protected Settings nodeSettings(int nodeOrdinal);1528893677;Lower the queue sizes to be small enough that both bulk and searches will time out and have to be retried.;@Override_    protected Settings nodeSettings(int nodeOrdinal) {_        return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put(nodeSettings()).build()__    };lower,the,queue,sizes,to,be,small,enough,that,both,bulk,and,searches,will,time,out,and,have,to,be,retried;override,protected,settings,node,settings,int,node,ordinal,return,settings,builder,put,super,node,settings,node,ordinal,put,node,settings,build
RetryTests -> @Override     protected Settings nodeSettings(int nodeOrdinal);1529341607;Lower the queue sizes to be small enough that both bulk and searches will time out and have to be retried.;@Override_    protected Settings nodeSettings(int nodeOrdinal) {_        return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put(nodeSettings()).build()__    };lower,the,queue,sizes,to,be,small,enough,that,both,bulk,and,searches,will,time,out,and,have,to,be,retried;override,protected,settings,node,settings,int,node,ordinal,return,settings,builder,put,super,node,settings,node,ordinal,put,node,settings,build
RetryTests -> @Override     protected Settings nodeSettings(int nodeOrdinal);1537806831;Lower the queue sizes to be small enough that both bulk and searches will time out and have to be retried.;@Override_    protected Settings nodeSettings(int nodeOrdinal) {_        return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put(nodeSettings()).build()__    };lower,the,queue,sizes,to,be,small,enough,that,both,bulk,and,searches,will,time,out,and,have,to,be,retried;override,protected,settings,node,settings,int,node,ordinal,return,settings,builder,put,super,node,settings,node,ordinal,put,node,settings,build
RetryTests -> private BulkByScrollTask.Status taskStatus(String action);1524684173;Fetch the status for a task of type "action". Fails if there aren't exactly one of that type of task running.;private BulkByScrollTask.Status taskStatus(String action) {_        _        ListTasksResponse response = client().admin().cluster().prepareListTasks().setActions(action).setDetailed(true).get()__        assertThat(response.getTasks(), hasSize(1))__        return (BulkByScrollTask.Status) response.getTasks().get(0).getStatus()__    };fetch,the,status,for,a,task,of,type,action,fails,if,there,aren,t,exactly,one,of,that,type,of,task,running;private,bulk,by,scroll,task,status,task,status,string,action,list,tasks,response,response,client,admin,cluster,prepare,list,tasks,set,actions,action,set,detailed,true,get,assert,that,response,get,tasks,has,size,1,return,bulk,by,scroll,task,status,response,get,tasks,get,0,get,status
RetryTests -> private BulkByScrollTask.Status taskStatus(String action);1525334055;Fetch the status for a task of type "action". Fails if there aren't exactly one of that type of task running.;private BulkByScrollTask.Status taskStatus(String action) {_        _        ListTasksResponse response = client().admin().cluster().prepareListTasks().setActions(action).setDetailed(true).get()__        assertThat(response.getTasks(), hasSize(1))__        return (BulkByScrollTask.Status) response.getTasks().get(0).getStatus()__    };fetch,the,status,for,a,task,of,type,action,fails,if,there,aren,t,exactly,one,of,that,type,of,task,running;private,bulk,by,scroll,task,status,task,status,string,action,list,tasks,response,response,client,admin,cluster,prepare,list,tasks,set,actions,action,set,detailed,true,get,assert,that,response,get,tasks,has,size,1,return,bulk,by,scroll,task,status,response,get,tasks,get,0,get,status
RetryTests -> private BulkByScrollTask.Status taskStatus(String action);1526029249;Fetch the status for a task of type "action". Fails if there aren't exactly one of that type of task running.;private BulkByScrollTask.Status taskStatus(String action) {_        _        ListTasksResponse response = client().admin().cluster().prepareListTasks().setActions(action).setDetailed(true).get()__        assertThat(response.getTasks(), hasSize(1))__        return (BulkByScrollTask.Status) response.getTasks().get(0).getStatus()__    };fetch,the,status,for,a,task,of,type,action,fails,if,there,aren,t,exactly,one,of,that,type,of,task,running;private,bulk,by,scroll,task,status,task,status,string,action,list,tasks,response,response,client,admin,cluster,prepare,list,tasks,set,actions,action,set,detailed,true,get,assert,that,response,get,tasks,has,size,1,return,bulk,by,scroll,task,status,response,get,tasks,get,0,get,status
RetryTests -> private BulkByScrollTask.Status taskStatus(String action);1527840262;Fetch the status for a task of type "action". Fails if there aren't exactly one of that type of task running.;private BulkByScrollTask.Status taskStatus(String action) {_        _        ListTasksResponse response = client().admin().cluster().prepareListTasks().setActions(action).setDetailed(true).get()__        assertThat(response.getTasks(), hasSize(1))__        return (BulkByScrollTask.Status) response.getTasks().get(0).getStatus()__    };fetch,the,status,for,a,task,of,type,action,fails,if,there,aren,t,exactly,one,of,that,type,of,task,running;private,bulk,by,scroll,task,status,task,status,string,action,list,tasks,response,response,client,admin,cluster,prepare,list,tasks,set,actions,action,set,detailed,true,get,assert,that,response,get,tasks,has,size,1,return,bulk,by,scroll,task,status,response,get,tasks,get,0,get,status
RetryTests -> private BulkByScrollTask.Status taskStatus(String action);1528762805;Fetch the status for a task of type "action". Fails if there aren't exactly one of that type of task running.;private BulkByScrollTask.Status taskStatus(String action) {_        _        ListTasksResponse response = client().admin().cluster().prepareListTasks().setActions(action).setDetailed(true).get()__        assertThat(response.getTasks(), hasSize(1))__        return (BulkByScrollTask.Status) response.getTasks().get(0).getStatus()__    };fetch,the,status,for,a,task,of,type,action,fails,if,there,aren,t,exactly,one,of,that,type,of,task,running;private,bulk,by,scroll,task,status,task,status,string,action,list,tasks,response,response,client,admin,cluster,prepare,list,tasks,set,actions,action,set,detailed,true,get,assert,that,response,get,tasks,has,size,1,return,bulk,by,scroll,task,status,response,get,tasks,get,0,get,status
RetryTests -> private BulkByScrollTask.Status taskStatus(String action);1528893677;Fetch the status for a task of type "action". Fails if there aren't exactly one of that type of task running.;private BulkByScrollTask.Status taskStatus(String action) {_        _        ListTasksResponse response = client().admin().cluster().prepareListTasks().setActions(action).setDetailed(true).get()__        assertThat(response.getTasks(), hasSize(1))__        return (BulkByScrollTask.Status) response.getTasks().get(0).getStatus()__    };fetch,the,status,for,a,task,of,type,action,fails,if,there,aren,t,exactly,one,of,that,type,of,task,running;private,bulk,by,scroll,task,status,task,status,string,action,list,tasks,response,response,client,admin,cluster,prepare,list,tasks,set,actions,action,set,detailed,true,get,assert,that,response,get,tasks,has,size,1,return,bulk,by,scroll,task,status,response,get,tasks,get,0,get,status
RetryTests -> private BulkByScrollTask.Status taskStatus(String action);1529341607;Fetch the status for a task of type "action". Fails if there aren't exactly one of that type of task running.;private BulkByScrollTask.Status taskStatus(String action) {_        _        ListTasksResponse response = client().admin().cluster().prepareListTasks().setActions(action).setDetailed(true).get()__        assertThat(response.getTasks(), hasSize(1))__        return (BulkByScrollTask.Status) response.getTasks().get(0).getStatus()__    };fetch,the,status,for,a,task,of,type,action,fails,if,there,aren,t,exactly,one,of,that,type,of,task,running;private,bulk,by,scroll,task,status,task,status,string,action,list,tasks,response,response,client,admin,cluster,prepare,list,tasks,set,actions,action,set,detailed,true,get,assert,that,response,get,tasks,has,size,1,return,bulk,by,scroll,task,status,response,get,tasks,get,0,get,status
RetryTests -> private BulkByScrollTask.Status taskStatus(String action);1537806831;Fetch the status for a task of type "action". Fails if there aren't exactly one of that type of task running.;private BulkByScrollTask.Status taskStatus(String action) {_        _        ListTasksResponse response = client().admin().cluster().prepareListTasks().setActions(action).setDetailed(true).get()__        assertThat(response.getTasks(), hasSize(1))__        return (BulkByScrollTask.Status) response.getTasks().get(0).getStatus()__    };fetch,the,status,for,a,task,of,type,action,fails,if,there,aren,t,exactly,one,of,that,type,of,task,running;private,bulk,by,scroll,task,status,task,status,string,action,list,tasks,response,response,client,admin,cluster,prepare,list,tasks,set,actions,action,set,detailed,true,get,assert,that,response,get,tasks,has,size,1,return,bulk,by,scroll,task,status,response,get,tasks,get,0,get,status
