commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;public void testModifyingCtxNotAllowed() {     /*          * Its important that none of these actually match any of the fields.          * They don't now, but make sure they still don't match if you add any          * more. The point of have many is that they should all present the same          * error message to the user, not some ClassCastException.          */     Object[] options = new Object[] { "cat", new Object(), 123, new Date(), Math.PI }.     for (String ctxVar : new String[] { "_index", "_type", "_id", "_version", "_routing" }) {         try {             applyScript((Map<String, Object> ctx) -> ctx.put(ctxVar, randomFrom(options))).         } catch (IllegalArgumentException e) {             assertThat(e.getMessage(), containsString("Modifying [" + ctxVar + "] not allowed")).         }     } }
false;protected;0;4;;@Override protected UpdateByQueryRequest request() {     return new UpdateByQueryRequest(). }
false;protected;2;8;;@Override protected TransportUpdateByQueryAction.AsyncIndexBySearchAction action(ScriptService scriptService, UpdateByQueryRequest request) {     TransportService transportService = mock(TransportService.class).     TransportUpdateByQueryAction transportAction = new TransportUpdateByQueryAction(threadPool, new ActionFilters(Collections.emptySet()), null, transportService, scriptService, null).     return new TransportUpdateByQueryAction.AsyncIndexBySearchAction(task, logger, null, threadPool, transportAction, request, ClusterState.EMPTY_STATE, listener()). }
