commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public void testLocalRequestWithoutWhitelist() {     checkRemoteWhitelist(buildRemoteWhitelist(emptyList()), null). }
false;public;0;3;;public void testLocalRequestWithWhitelist() {     checkRemoteWhitelist(buildRemoteWhitelist(randomWhitelist()), null). }
true;private;2;4;/**  * Build a {@link RemoteInfo}, defaulting values that we don't care about in this test to values that don't hurt anything.  */ ;/**  * Build a {@link RemoteInfo}, defaulting values that we don't care about in this test to values that don't hurt anything.  */ private RemoteInfo newRemoteInfo(String host, int port) {     return new RemoteInfo(randomAlphaOfLength(5), host, port, null, new BytesArray("test"), null, null, emptyMap(), RemoteInfo.DEFAULT_SOCKET_TIMEOUT, RemoteInfo.DEFAULT_CONNECT_TIMEOUT). }
false;public;0;7;;public void testWhitelistedRemote() {     List<String> whitelist = randomWhitelist().     String[] inList = whitelist.iterator().next().split(":").     String host = inList[0].     int port = Integer.valueOf(inList[1]).     checkRemoteWhitelist(buildRemoteWhitelist(whitelist), newRemoteInfo(host, port)). }
false;public;0;7;;public void testWhitelistedByPrefix() {     checkRemoteWhitelist(buildRemoteWhitelist(singletonList("*.example.com:9200")), new RemoteInfo(randomAlphaOfLength(5), "es.example.com", 9200, null, new BytesArray("test"), null, null, emptyMap(), RemoteInfo.DEFAULT_SOCKET_TIMEOUT, RemoteInfo.DEFAULT_CONNECT_TIMEOUT)).     checkRemoteWhitelist(buildRemoteWhitelist(singletonList("*.example.com:9200")), newRemoteInfo("6e134134a1.us-east-1.aws.example.com", 9200)). }
false;public;0;3;;public void testWhitelistedBySuffix() {     checkRemoteWhitelist(buildRemoteWhitelist(singletonList("es.example.com:*")), newRemoteInfo("es.example.com", 9200)). }
false;public;0;3;;public void testWhitelistedByInfix() {     checkRemoteWhitelist(buildRemoteWhitelist(singletonList("es*.example.com:9200")), newRemoteInfo("es1.example.com", 9200)). }
false;public;0;5;;public void testLoopbackInWhitelistRemote() throws UnknownHostException {     List<String> whitelist = randomWhitelist().     whitelist.add("127.0.0.1:*").     checkRemoteWhitelist(buildRemoteWhitelist(whitelist), newRemoteInfo("127.0.0.1", 9200)). }
false;public;0;7;;public void testUnwhitelistedRemote() {     int port = between(1, Integer.MAX_VALUE).     List<String> whitelist = randomBoolean() ? randomWhitelist() : emptyList().     Exception e = expectThrows(IllegalArgumentException.class, () -> checkRemoteWhitelist(buildRemoteWhitelist(whitelist), newRemoteInfo("not in list", port))).     assertEquals("[not in list:" + port + "] not whitelisted in reindex.remote.whitelist", e.getMessage()). }
false;public;0;10;;public void testRejectMatchAll() {     assertMatchesTooMuch(singletonList("*")).     assertMatchesTooMuch(singletonList("**")).     assertMatchesTooMuch(singletonList("***")).     assertMatchesTooMuch(Arrays.asList("realstuff", "*")).     assertMatchesTooMuch(Arrays.asList("*", "realstuff")).     List<String> random = randomWhitelist().     random.add("*").     assertMatchesTooMuch(random). }
false;public;0;5;;public void testIPv6Address() {     List<String> whitelist = randomWhitelist().     whitelist.add("[::1]:*").     checkRemoteWhitelist(buildRemoteWhitelist(whitelist), newRemoteInfo("[::1]", 9200)). }
false;private;1;6;;private void assertMatchesTooMuch(List<String> whitelist) {     Exception e = expectThrows(IllegalArgumentException.class, () -> buildRemoteWhitelist(whitelist)).     assertEquals("Refusing to start because whitelist " + whitelist + " accepts all addresses. " + "This would allow users to reindex-from-remote any URL they like effectively having Elasticsearch make HTTP GETs " + "for them.", e.getMessage()). }
false;private;0;8;;private List<String> randomWhitelist() {     int size = between(1, 100).     List<String> whitelist = new ArrayList<>(size).     for (int i = 0. i < size. i++) {         whitelist.add(randomAlphaOfLength(5) + ':' + between(1, Integer.MAX_VALUE)).     }     return whitelist. }
