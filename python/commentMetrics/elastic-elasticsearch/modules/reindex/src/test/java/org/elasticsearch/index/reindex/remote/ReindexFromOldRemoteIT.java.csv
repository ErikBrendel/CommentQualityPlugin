commented;modifiers;parameterAmount;loc;comment;code
false;private;2;51;;private void oldEsTestCase(String portPropertyName, String requestsPerSecond) throws IOException {     boolean enabled = Booleans.parseBoolean(System.getProperty("tests.fromOld")).     assumeTrue("test is disabled, probably because this is windows", enabled).     int oldEsPort = Integer.parseInt(System.getProperty(portPropertyName)).     try (RestClient oldEs = RestClient.builder(new HttpHost("127.0.0.1", oldEsPort)).build()) {         try {             Request createIndex = new Request("PUT", "/test").             createIndex.setJsonEntity("{\"settings\":{\"number_of_shards\": 1}}").             oldEs.performRequest(createIndex).             for (int i = 0. i < DOCS. i++) {                 Request doc = new Request("PUT", "/test/doc/testdoc" + i).                 doc.addParameter("refresh", "true").                 doc.setJsonEntity("{\"test\":\"test\"}").                 oldEs.performRequest(doc).             }             Request reindex = new Request("POST", "/_reindex").             reindex.setJsonEntity("{\n" + "  \"source\":{\n" + "    \"index\": \"test\",\n" + "    \"size\": 1,\n" + "    \"remote\": {\n" + "      \"host\": \"http://127.0.0.1:" + oldEsPort + "\"\n" + "    }\n" + "  },\n" + "  \"dest\": {\n" + "    \"index\": \"test\"\n" + "  }\n" + "}").             reindex.addParameter("refresh", "true").             reindex.addParameter("pretty", "true").             if (requestsPerSecond != null) {                 reindex.addParameter("requests_per_second", requestsPerSecond).             }             client().performRequest(reindex).             Request search = new Request("POST", "/test/_search").             search.addParameter("pretty", "true").             Response response = client().performRequest(search).             String result = EntityUtils.toString(response.getEntity()).             for (int i = 0. i < DOCS. i++) {                 assertThat(result, containsString("\"_id\" : \"testdoc" + i + "\"")).             }         } finally {             oldEs.performRequest(new Request("DELETE", "/test")).         }     } }
false;public;0;3;;public void testEs2() throws IOException {     oldEsTestCase("es2.port", null). }
false;public;0;3;;public void testEs1() throws IOException {     oldEsTestCase("es1.port", null). }
false;public;0;3;;public void testEs090() throws IOException {     oldEsTestCase("es090.port", null). }
false;public;0;3;;public void testEs2WithFunnyThrottle() throws IOException {     // 11 requests per second should give us a nice "funny" number on the scroll timeout     oldEsTestCase("es2.port", "11"). }
false;public;0;3;;public void testEs1WithFunnyThrottle() throws IOException {     // 11 requests per second should give us a nice "funny" number on the scroll timeout     oldEsTestCase("es1.port", "11"). }
false;public;0;3;;public void testEs090WithFunnyThrottle() throws IOException {     // 11 requests per second should give us a nice "funny" number on the scroll timeout     oldEsTestCase("es090.port", "11"). }
