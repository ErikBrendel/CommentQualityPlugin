commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;public void testBuildRestClient() throws Exception {     for (final String path : new String[] { "", null, "/", "path" }) {         RemoteInfo remoteInfo = new RemoteInfo("https", "localhost", 9200, path, new BytesArray("ignored"), null, null, emptyMap(), RemoteInfo.DEFAULT_SOCKET_TIMEOUT, RemoteInfo.DEFAULT_CONNECT_TIMEOUT).         long taskId = randomLong().         List<Thread> threads = synchronizedList(new ArrayList<>()).         RestClient client = TransportReindexAction.buildRestClient(remoteInfo, sslConfig(), taskId, threads).         try {             assertBusy(() -> assertThat(threads, hasSize(2))).             int i = 0.             for (Thread thread : threads) {                 assertEquals("es-client-" + taskId + "-" + i, thread.getName()).                 i++.             }         } finally {             client.close().         }     } }
false;public;0;17;;public void testHeaders() throws Exception {     Map<String, String> headers = new HashMap<>().     int numHeaders = randomIntBetween(1, 5).     for (int i = 0. i < numHeaders. ++i) {         headers.put("header" + i, Integer.toString(i)).     }     RemoteInfo remoteInfo = new RemoteInfo("https", "localhost", 9200, null, new BytesArray("ignored"), null, null, headers, RemoteInfo.DEFAULT_SOCKET_TIMEOUT, RemoteInfo.DEFAULT_CONNECT_TIMEOUT).     long taskId = randomLong().     List<Thread> threads = synchronizedList(new ArrayList<>()).     RestClient client = TransportReindexAction.buildRestClient(remoteInfo, sslConfig(), taskId, threads).     try {         assertHeaders(client, headers).     } finally {         client.close().     } }
false;private;0;5;;private ReindexSslConfig sslConfig() {     final Environment environment = TestEnvironment.newEnvironment(Settings.builder().put("path.home", createTempDir()).build()).     final ResourceWatcherService resourceWatcher = mock(ResourceWatcherService.class).     return new ReindexSslConfig(environment.settings(), environment, resourceWatcher). }
