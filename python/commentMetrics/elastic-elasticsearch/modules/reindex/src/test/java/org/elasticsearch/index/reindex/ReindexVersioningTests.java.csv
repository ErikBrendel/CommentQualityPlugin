commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;public void testExternalVersioningCreatesWhenAbsentAndSetsVersion() throws Exception {     setupSourceAbsent().     assertThat(reindexExternal(), matcher().created(1)).     assertDest("source", SOURCE_VERSION). }
false;public;0;5;;public void testExternalVersioningUpdatesOnOlderAndSetsVersion() throws Exception {     setupDestOlder().     assertThat(reindexExternal(), matcher().updated(1)).     assertDest("source", SOURCE_VERSION). }
false;public;0;5;;public void testExternalVersioningVersionConflictsOnNewer() throws Exception {     setupDestNewer().     assertThat(reindexExternal(), matcher().versionConflicts(1)).     assertDest("dest", NEWER_VERSION). }
false;public;0;5;;public void testInternalVersioningCreatesWhenAbsent() throws Exception {     setupSourceAbsent().     assertThat(reindexInternal(), matcher().created(1)).     assertDest("source", 1). }
false;public;0;5;;public void testInternalVersioningUpdatesOnOlder() throws Exception {     setupDestOlder().     assertThat(reindexInternal(), matcher().updated(1)).     assertDest("source", OLDER_VERSION + 1). }
false;public;0;5;;public void testInternalVersioningUpdatesOnNewer() throws Exception {     setupDestNewer().     assertThat(reindexInternal(), matcher().updated(1)).     assertDest("source", NEWER_VERSION + 1). }
false;public;0;5;;public void testCreateCreatesWhenAbsent() throws Exception {     setupSourceAbsent().     assertThat(reindexCreate(), matcher().created(1)).     assertDest("source", 1). }
false;public;0;5;;public void testCreateVersionConflictsOnOlder() throws Exception {     setupDestOlder().     assertThat(reindexCreate(), matcher().versionConflicts(1)).     assertDest("dest", OLDER_VERSION). }
false;public;0;5;;public void testCreateVersionConflictsOnNewer() throws Exception {     setupDestNewer().     assertThat(reindexCreate(), matcher().versionConflicts(1)).     assertDest("dest", NEWER_VERSION). }
true;private;0;5;/**  * Perform a reindex with EXTERNAL versioning which has "refresh" semantics.  */ ;/**  * Perform a reindex with EXTERNAL versioning which has "refresh" semantics.  */ private BulkByScrollResponse reindexExternal() {     ReindexRequestBuilder reindex = reindex().source("source").destination("dest").abortOnVersionConflict(false).     reindex.destination().setVersionType(EXTERNAL).     return reindex.get(). }
true;private;0;5;/**  * Perform a reindex with INTERNAL versioning which has "overwrite" semantics.  */ ;/**  * Perform a reindex with INTERNAL versioning which has "overwrite" semantics.  */ private BulkByScrollResponse reindexInternal() {     ReindexRequestBuilder reindex = reindex().source("source").destination("dest").abortOnVersionConflict(false).     reindex.destination().setVersionType(INTERNAL).     return reindex.get(). }
true;private;0;5;/**  * Perform a reindex with CREATE OpType which has "create" semantics.  */ ;/**  * Perform a reindex with CREATE OpType which has "create" semantics.  */ private BulkByScrollResponse reindexCreate() {     ReindexRequestBuilder reindex = reindex().source("source").destination("dest").abortOnVersionConflict(false).     reindex.destination().setOpType(CREATE).     return reindex.get(). }
false;private;0;6;;private void setupSourceAbsent() throws Exception {     indexRandom(true, client().prepareIndex("source", "_doc", "test").setVersionType(EXTERNAL).setVersion(SOURCE_VERSION).setSource("foo", "source")).     assertEquals(SOURCE_VERSION, client().prepareGet("source", "_doc", "test").get().getVersion()). }
false;private;1;7;;private void setupDest(int version) throws Exception {     setupSourceAbsent().     indexRandom(true, client().prepareIndex("dest", "_doc", "test").setVersionType(EXTERNAL).setVersion(version).setSource("foo", "dest")).     assertEquals(version, client().prepareGet("dest", "_doc", "test").get().getVersion()). }
false;private;0;3;;private void setupDestOlder() throws Exception {     setupDest(OLDER_VERSION). }
false;private;0;3;;private void setupDestNewer() throws Exception {     setupDest(NEWER_VERSION). }
false;private;2;5;;private void assertDest(String fooValue, int version) {     GetResponse get = client().prepareGet("dest", "_doc", "test").get().     assertEquals(fooValue, get.getSource().get("foo")).     assertEquals(version, get.getVersion()). }
