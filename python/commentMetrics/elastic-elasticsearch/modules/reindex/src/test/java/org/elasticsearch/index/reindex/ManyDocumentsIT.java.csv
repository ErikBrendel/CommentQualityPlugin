commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Before public void setupTestIndex() throws IOException {     StringBuilder bulk = new StringBuilder().     for (int i = 0. i < count. i++) {         bulk.append("{\"index\":{}}\n").         bulk.append("{\"test\":\"test\"}\n").     }     Request request = new Request("POST", "/test/_bulk").     request.addParameter("refresh", "true").     request.setJsonEntity(bulk.toString()).     client().performRequest(request). }
false;public;0;15;;public void testReindex() throws IOException {     Request request = new Request("POST", "/_reindex").     request.setJsonEntity("{\n" + "  \"source\":{\n" + "    \"index\":\"test\"\n" + "  },\n" + "  \"dest\":{\n" + "    \"index\":\"des\"\n" + "  }\n" + "}").     Map<String, Object> response = entityAsMap(client().performRequest(request)).     assertThat(response, hasEntry("total", count)).     assertThat(response, hasEntry("created", count)). }
false;public;0;23;;public void testReindexFromRemote() throws IOException {     Map<?, ?> nodesInfo = entityAsMap(client().performRequest(new Request("GET", "/_nodes/http"))).     nodesInfo = (Map<?, ?>) nodesInfo.get("nodes").     Map<?, ?> nodeInfo = (Map<?, ?>) nodesInfo.values().iterator().next().     Map<?, ?> http = (Map<?, ?>) nodeInfo.get("http").     String remote = "http://" + http.get("publish_address").     Request request = new Request("POST", "/_reindex").     request.setJsonEntity("{\n" + "  \"source\":{\n" + "    \"index\":\"test\",\n" + "    \"remote\":{\n" + "      \"host\":\"" + remote + "\"\n" + "    }\n" + "  }\n," + "  \"dest\":{\n" + "    \"index\":\"des\"\n" + "  }\n" + "}").     Map<String, Object> response = entityAsMap(client().performRequest(request)).     assertThat(response, hasEntry("total", count)).     assertThat(response, hasEntry("created", count)). }
false;public;0;5;;public void testUpdateByQuery() throws IOException {     Map<String, Object> response = entityAsMap(client().performRequest(new Request("POST", "/test/_update_by_query"))).     assertThat(response, hasEntry("total", count)).     assertThat(response, hasEntry("updated", count)). }
false;public;0;12;;public void testDeleteByQuery() throws IOException {     Request request = new Request("POST", "/test/_delete_by_query").     request.setJsonEntity("{\n" + "  \"query\":{\n" + "    \"match_all\": {}\n" + "  }\n" + "}").     Map<String, Object> response = entityAsMap(client().performRequest(request)).     assertThat(response, hasEntry("total", count)).     assertThat(response, hasEntry("deleted", count)). }
