# id;timestamp;commentText;codeText;commentWords;codeWords
RestReindexAction -> private static String[] extractStringArray(Map<String, Object> source, String name);1524684173;Yank a string array from a map. Emulates XContent's permissive String to_String array conversions.;private static String[] extractStringArray(Map<String, Object> source, String name) {_        Object value = source.remove(name)__        if (value == null) {_            return null__        }_        if (value instanceof List) {_            @SuppressWarnings("unchecked")_            List<String> list = (List<String>) value__            return list.toArray(new String[list.size()])__        } else if (value instanceof String) {_            return new String[] {(String) value}__        } else {_            throw new IllegalArgumentException("Expected [" + name + "] to be a list of a string but was [" + value + ']')__        }_    };yank,a,string,array,from,a,map,emulates,xcontent,s,permissive,string,to,string,array,conversions;private,static,string,extract,string,array,map,string,object,source,string,name,object,value,source,remove,name,if,value,null,return,null,if,value,instanceof,list,suppress,warnings,unchecked,list,string,list,list,string,value,return,list,to,array,new,string,list,size,else,if,value,instanceof,string,return,new,string,string,value,else,throw,new,illegal,argument,exception,expected,name,to,be,a,list,of,a,string,but,was,value
RestReindexAction -> private static String[] extractStringArray(Map<String, Object> source, String name);1526510804;Yank a string array from a map. Emulates XContent's permissive String to_String array conversions.;private static String[] extractStringArray(Map<String, Object> source, String name) {_        Object value = source.remove(name)__        if (value == null) {_            return null__        }_        if (value instanceof List) {_            @SuppressWarnings("unchecked")_            List<String> list = (List<String>) value__            return list.toArray(new String[list.size()])__        } else if (value instanceof String) {_            return new String[] {(String) value}__        } else {_            throw new IllegalArgumentException("Expected [" + name + "] to be a list of a string but was [" + value + ']')__        }_    };yank,a,string,array,from,a,map,emulates,xcontent,s,permissive,string,to,string,array,conversions;private,static,string,extract,string,array,map,string,object,source,string,name,object,value,source,remove,name,if,value,null,return,null,if,value,instanceof,list,suppress,warnings,unchecked,list,string,list,list,string,value,return,list,to,array,new,string,list,size,else,if,value,instanceof,string,return,new,string,string,value,else,throw,new,illegal,argument,exception,expected,name,to,be,a,list,of,a,string,but,was,value
RestReindexAction -> private static String[] extractStringArray(Map<String, Object> source, String name);1529341607;Yank a string array from a map. Emulates XContent's permissive String to_String array conversions.;private static String[] extractStringArray(Map<String, Object> source, String name) {_        Object value = source.remove(name)__        if (value == null) {_            return null__        }_        if (value instanceof List) {_            @SuppressWarnings("unchecked")_            List<String> list = (List<String>) value__            return list.toArray(new String[list.size()])__        } else if (value instanceof String) {_            return new String[] {(String) value}__        } else {_            throw new IllegalArgumentException("Expected [" + name + "] to be a list of a string but was [" + value + ']')__        }_    };yank,a,string,array,from,a,map,emulates,xcontent,s,permissive,string,to,string,array,conversions;private,static,string,extract,string,array,map,string,object,source,string,name,object,value,source,remove,name,if,value,null,return,null,if,value,instanceof,list,suppress,warnings,unchecked,list,string,list,list,string,value,return,list,to,array,new,string,list,size,else,if,value,instanceof,string,return,new,string,string,value,else,throw,new,illegal,argument,exception,expected,name,to,be,a,list,of,a,string,but,was,value
RestReindexAction -> private static String[] extractStringArray(Map<String, Object> source, String name);1535552903;Yank a string array from a map. Emulates XContent's permissive String to_String array conversions.;private static String[] extractStringArray(Map<String, Object> source, String name) {_        Object value = source.remove(name)__        if (value == null) {_            return null__        }_        if (value instanceof List) {_            @SuppressWarnings("unchecked")_            List<String> list = (List<String>) value__            return list.toArray(new String[list.size()])__        } else if (value instanceof String) {_            return new String[] {(String) value}__        } else {_            throw new IllegalArgumentException("Expected [" + name + "] to be a list of a string but was [" + value + ']')__        }_    };yank,a,string,array,from,a,map,emulates,xcontent,s,permissive,string,to,string,array,conversions;private,static,string,extract,string,array,map,string,object,source,string,name,object,value,source,remove,name,if,value,null,return,null,if,value,instanceof,list,suppress,warnings,unchecked,list,string,list,list,string,value,return,list,to,array,new,string,list,size,else,if,value,instanceof,string,return,new,string,string,value,else,throw,new,illegal,argument,exception,expected,name,to,be,a,list,of,a,string,but,was,value
RestReindexAction -> private static String[] extractStringArray(Map<String, Object> source, String name);1545335315;Yank a string array from a map. Emulates XContent's permissive String to_String array conversions.;private static String[] extractStringArray(Map<String, Object> source, String name) {_        Object value = source.remove(name)__        if (value == null) {_            return null__        }_        if (value instanceof List) {_            @SuppressWarnings("unchecked")_            List<String> list = (List<String>) value__            return list.toArray(new String[list.size()])__        } else if (value instanceof String) {_            return new String[] {(String) value}__        } else {_            throw new IllegalArgumentException("Expected [" + name + "] to be a list of a string but was [" + value + ']')__        }_    };yank,a,string,array,from,a,map,emulates,xcontent,s,permissive,string,to,string,array,conversions;private,static,string,extract,string,array,map,string,object,source,string,name,object,value,source,remove,name,if,value,null,return,null,if,value,instanceof,list,suppress,warnings,unchecked,list,string,list,list,string,value,return,list,to,array,new,string,list,size,else,if,value,instanceof,string,return,new,string,string,value,else,throw,new,illegal,argument,exception,expected,name,to,be,a,list,of,a,string,but,was,value
RestReindexAction -> private static String[] extractStringArray(Map<String, Object> source, String name);1546507754;Yank a string array from a map. Emulates XContent's permissive String to_String array conversions.;private static String[] extractStringArray(Map<String, Object> source, String name) {_        Object value = source.remove(name)__        if (value == null) {_            return null__        }_        if (value instanceof List) {_            @SuppressWarnings("unchecked")_            List<String> list = (List<String>) value__            return list.toArray(new String[list.size()])__        } else if (value instanceof String) {_            return new String[] {(String) value}__        } else {_            throw new IllegalArgumentException("Expected [" + name + "] to be a list of a string but was [" + value + ']')__        }_    };yank,a,string,array,from,a,map,emulates,xcontent,s,permissive,string,to,string,array,conversions;private,static,string,extract,string,array,map,string,object,source,string,name,object,value,source,remove,name,if,value,null,return,null,if,value,instanceof,list,suppress,warnings,unchecked,list,string,list,list,string,value,return,list,to,array,new,string,list,size,else,if,value,instanceof,string,return,new,string,string,value,else,throw,new,illegal,argument,exception,expected,name,to,be,a,list,of,a,string,but,was,value
