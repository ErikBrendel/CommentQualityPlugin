commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;4;;@Override protected void taskOperation(RethrottleRequest request, BulkByScrollTask task, ActionListener<TaskInfo> listener) {     rethrottle(logger, clusterService.localNode().getId(), client, task, request.getRequestsPerSecond(), listener). }
false;static;6;16;;static void rethrottle(Logger logger, String localNodeId, Client client, BulkByScrollTask task, float newRequestsPerSecond, ActionListener<TaskInfo> listener) {     if (task.isWorker()) {         rethrottleChildTask(logger, localNodeId, task, newRequestsPerSecond, listener).         return.     }     if (task.isLeader()) {         rethrottleParentTask(logger, localNodeId, client, task, newRequestsPerSecond, listener).         return.     }     throw new IllegalArgumentException("task [" + task.getId() + "] has not yet been initialized to the point where it knows how to " + "rethrottle itself"). }
false;private,static;6;22;;private static void rethrottleParentTask(Logger logger, String localNodeId, Client client, BulkByScrollTask task, float newRequestsPerSecond, ActionListener<TaskInfo> listener) {     final LeaderBulkByScrollTaskState leaderState = task.getLeaderState().     final int runningSubtasks = leaderState.runningSliceSubTasks().     if (runningSubtasks > 0) {         RethrottleRequest subRequest = new RethrottleRequest().         subRequest.setRequestsPerSecond(newRequestsPerSecond / runningSubtasks).         subRequest.setParentTaskId(new TaskId(localNodeId, task.getId())).         logger.debug("rethrottling children of task [{}] to [{}] requests per second", task.getId(), subRequest.getRequestsPerSecond()).         client.execute(RethrottleAction.INSTANCE, subRequest, ActionListener.wrap(r -> {             r.rethrowFailures("Rethrottle").             listener.onResponse(task.taskInfoGivenSubtaskInfo(localNodeId, r.getTasks())).         }, listener::onFailure)).     } else {         logger.debug("children of task [{}] are already finished, nothing to rethrottle", task.getId()).         listener.onResponse(task.taskInfo(localNodeId, true)).     } }
false;private,static;5;6;;private static void rethrottleChildTask(Logger logger, String localNodeId, BulkByScrollTask task, float newRequestsPerSecond, ActionListener<TaskInfo> listener) {     logger.debug("rethrottling local task [{}] to [{}] requests per second", task.getId(), newRequestsPerSecond).     task.getWorkerState().rethrottle(newRequestsPerSecond).     listener.onResponse(task.taskInfo(localNodeId, true)). }
false;protected;4;5;;@Override protected ListTasksResponse newResponse(RethrottleRequest request, List<TaskInfo> tasks, List<TaskOperationFailure> taskOperationFailures, List<FailedNodeException> failedNodeExceptions) {     return new ListTasksResponse(tasks, taskOperationFailures, failedNodeExceptions). }
