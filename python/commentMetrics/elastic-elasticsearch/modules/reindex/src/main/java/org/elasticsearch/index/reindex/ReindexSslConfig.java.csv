commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;6;;public static List<Setting<?>> getSettings() {     List<Setting<?>> settings = new ArrayList<>().     settings.addAll(SETTINGS.values()).     settings.addAll(SECURE_SETTINGS.values()).     return settings. }
false;protected;1;4;;@Override protected String getSettingAsString(String key) {     return settings.get(key). }
false;protected;1;8;;@Override protected char[] getSecureSetting(String key) {     final Setting<SecureString> setting = SECURE_SETTINGS.get(key).     if (setting == null) {         throw new IllegalArgumentException("The secure setting [" + key + "] is not registered").     }     return setting.get(settings).getChars(). }
false;protected;1;4;;@Override protected List<String> getSettingAsList(String key) throws Exception {     return settings.getAsList(key). }
false;public;1;4;;@Override public void onFileCreated(Path file) {     onFileChanged(file). }
false;public;1;4;;@Override public void onFileDeleted(Path file) {     onFileChanged(file). }
false;public;1;4;;@Override public void onFileChanged(Path file) {     ReindexSslConfig.this.reload(). }
false;private;0;3;;private void reload() {     this.context = configuration.createSslContext(). }
true;;0;8;/**  * Encapsulate the loaded SSL configuration as a HTTP-client {@link SSLIOSessionStrategy}.  * The returned strategy is immutable, but successive calls will return different objects that may have different  * configurations if the underlying key/certificate files are modified.  */ ;/**  * Encapsulate the loaded SSL configuration as a HTTP-client {@link SSLIOSessionStrategy}.  * The returned strategy is immutable, but successive calls will return different objects that may have different  * configurations if the underlying key/certificate files are modified.  */ SSLIOSessionStrategy getStrategy() {     final HostnameVerifier hostnameVerifier = configuration.getVerificationMode().isHostnameVerificationEnabled() ? new DefaultHostnameVerifier() : new NoopHostnameVerifier().     final String[] protocols = configuration.getSupportedProtocols().toArray(Strings.EMPTY_ARRAY).     final String[] cipherSuites = configuration.getCipherSuites().toArray(Strings.EMPTY_ARRAY).     return new SSLIOSessionStrategy(context, protocols, cipherSuites, hostnameVerifier). }
