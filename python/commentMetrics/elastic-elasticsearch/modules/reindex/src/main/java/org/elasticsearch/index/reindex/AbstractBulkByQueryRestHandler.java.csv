commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;23;;protected void parseInternalRequest(Request internal, RestRequest restRequest, Map<String, Consumer<Object>> bodyConsumers) throws IOException {     assert internal != null : "Request should not be null".     assert restRequest != null : "RestRequest should not be null".     SearchRequest searchRequest = internal.getSearchRequest().     try (XContentParser parser = extractRequestSpecificFields(restRequest, bodyConsumers)) {         RestSearchAction.parseSearchRequest(searchRequest, restRequest, parser, internal::setSize).     }     searchRequest.source().size(restRequest.paramAsInt("scroll_size", searchRequest.source().size())).     String conflicts = restRequest.param("conflicts").     if (conflicts != null) {         internal.setConflicts(conflicts).     }     // Let the requester set search timeout. It is probably only going to be useful for testing but who knows.     if (restRequest.hasParam("search_timeout")) {         searchRequest.source().timeout(restRequest.paramAsTime("search_timeout", null)).     } }
true;private;2;19;/**  * We can't send parseSearchRequest REST content that it doesn't support  * so we will have to remove the content that is valid in addition to  * what it supports from the content first. This is a temporary hack and  * should get better when SearchRequest has full ObjectParser support  * then we can delegate and stuff.  */ ;/**  * We can't send parseSearchRequest REST content that it doesn't support  * so we will have to remove the content that is valid in addition to  * what it supports from the content first. This is a temporary hack and  * should get better when SearchRequest has full ObjectParser support  * then we can delegate and stuff.  */ private XContentParser extractRequestSpecificFields(RestRequest restRequest, Map<String, Consumer<Object>> bodyConsumers) throws IOException {     if (restRequest.hasContentOrSourceParam() == false) {         // body is optional         return null.     }     try (XContentParser parser = restRequest.contentOrSourceParamParser().         XContentBuilder builder = XContentFactory.contentBuilder(parser.contentType())) {         Map<String, Object> body = parser.map().         for (Map.Entry<String, Consumer<Object>> consumer : bodyConsumers.entrySet()) {             Object value = body.remove(consumer.getKey()).             if (value != null) {                 consumer.getValue().accept(value).             }         }         return parser.contentType().xContent().createParser(parser.getXContentRegistry(), parser.getDeprecationHandler(), BytesReference.bytes(builder.map(body)).streamInput()).     } }
