commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     indexService = createIndex("test").     parser = indexService.mapperService().documentMapperParser(). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> getPlugins() {     return pluginList(InternalSettingsPlugin.class, MapperExtrasPlugin.class). }
false;public;0;28;;public void testDefaults() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "scaled_float").field("scaling_factor", 10.0).endObject().endObject().endObject().endObject()).     DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     ParsedDocument doc = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", 123).endObject()), XContentType.JSON)).     IndexableField[] fields = doc.rootDoc().getFields("field").     assertEquals(2, fields.length).     IndexableField pointField = fields[0].     assertEquals(1, pointField.fieldType().pointDataDimensionCount()).     assertFalse(pointField.fieldType().stored()).     assertEquals(1230, pointField.numericValue().longValue()).     IndexableField dvField = fields[1].     assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType()).     assertEquals(1230, dvField.numericValue().longValue()).     assertFalse(dvField.fieldType().stored()). }
false;public;0;9;;public void testMissingScalingFactor() throws IOException {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "scaled_float").endObject().endObject().endObject().endObject()).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> parser.parse("type", new CompressedXContent(mapping))).     assertEquals("Field [field] misses required parameter [scaling_factor]", e.getMessage()). }
false;public;0;10;;public void testIllegalScalingFactor() throws IOException {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "scaled_float").field("scaling_factor", -1).endObject().endObject().endObject().endObject()).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> parser.parse("type", new CompressedXContent(mapping))).     assertEquals("[scaling_factor] must be a positive number, got [-1.0]", e.getMessage()). }
false;public;0;23;;public void testNotIndexed() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "scaled_float").field("index", false).field("scaling_factor", 10.0).endObject().endObject().endObject().endObject()).     DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     ParsedDocument doc = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", 123).endObject()), XContentType.JSON)).     IndexableField[] fields = doc.rootDoc().getFields("field").     assertEquals(1, fields.length).     IndexableField dvField = fields[0].     assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType()).     assertEquals(1230, dvField.numericValue().longValue()). }
false;public;0;23;;public void testNoDocValues() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "scaled_float").field("doc_values", false).field("scaling_factor", 10.0).endObject().endObject().endObject().endObject()).     DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     ParsedDocument doc = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", 123).endObject()), XContentType.JSON)).     IndexableField[] fields = doc.rootDoc().getFields("field").     assertEquals(1, fields.length).     IndexableField pointField = fields[0].     assertEquals(1, pointField.fieldType().pointDataDimensionCount()).     assertEquals(1230, pointField.numericValue().longValue()). }
false;public;0;28;;public void testStore() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "scaled_float").field("store", true).field("scaling_factor", 10.0).endObject().endObject().endObject().endObject()).     DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     ParsedDocument doc = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", 123).endObject()), XContentType.JSON)).     IndexableField[] fields = doc.rootDoc().getFields("field").     assertEquals(3, fields.length).     IndexableField pointField = fields[0].     assertEquals(1, pointField.fieldType().pointDataDimensionCount()).     assertEquals(1230, pointField.numericValue().doubleValue(), 0d).     IndexableField dvField = fields[1].     assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType()).     IndexableField storedField = fields[2].     assertTrue(storedField.fieldType().stored()).     assertEquals(1230, storedField.numericValue().longValue()). }
false;public;0;43;;public void testCoerce() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "scaled_float").field("scaling_factor", 10.0).endObject().endObject().endObject().endObject()).     DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     ParsedDocument doc = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", "123").endObject()), XContentType.JSON)).     IndexableField[] fields = doc.rootDoc().getFields("field").     assertEquals(2, fields.length).     IndexableField pointField = fields[0].     assertEquals(1, pointField.fieldType().pointDataDimensionCount()).     assertEquals(1230, pointField.numericValue().longValue()).     IndexableField dvField = fields[1].     assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType()).     mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "scaled_float").field("scaling_factor", 10.0).field("coerce", false).endObject().endObject().endObject().endObject()).     DocumentMapper mapper2 = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper2.mappingSource().toString()).     ThrowingRunnable runnable = () -> mapper2.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", "123").endObject()), XContentType.JSON)).     MapperParsingException e = expectThrows(MapperParsingException.class, runnable).     assertThat(e.getCause().getMessage(), containsString("passed as String")). }
false;public;0;8;;public void testIgnoreMalformed() throws Exception {     doTestIgnoreMalformed("a", "For input string: \"a\"").     List<String> values = Arrays.asList("NaN", "Infinity", "-Infinity").     for (String value : values) {         doTestIgnoreMalformed(value, "[scaled_float] only supports finite values, but got [" + value + "]").     } }
false;private;2;36;;private void doTestIgnoreMalformed(String value, String exceptionMessageContains) throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "scaled_float").field("scaling_factor", 10.0).endObject().endObject().endObject().endObject()).     DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     ThrowingRunnable runnable = () -> mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", value).endObject()), XContentType.JSON)).     MapperParsingException e = expectThrows(MapperParsingException.class, runnable).     assertThat(e.getCause().getMessage(), containsString(exceptionMessageContains)).     mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "scaled_float").field("scaling_factor", 10.0).field("ignore_malformed", true).endObject().endObject().endObject().endObject()).     DocumentMapper mapper2 = parser.parse("type", new CompressedXContent(mapping)).     ParsedDocument doc = mapper2.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", value).endObject()), XContentType.JSON)).     IndexableField[] fields = doc.rootDoc().getFields("field").     assertEquals(0, fields.length). }
false;public;0;52;;public void testNullValue() throws IOException {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "scaled_float").field("scaling_factor", 10.0).endObject().endObject().endObject().endObject()).     DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     ParsedDocument doc = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().nullField("field").endObject()), XContentType.JSON)).     assertArrayEquals(new IndexableField[0], doc.rootDoc().getFields("field")).     mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "scaled_float").field("scaling_factor", 10.0).field("null_value", 2.5).endObject().endObject().endObject().endObject()).     mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     doc = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().nullField("field").endObject()), XContentType.JSON)).     IndexableField[] fields = doc.rootDoc().getFields("field").     assertEquals(2, fields.length).     IndexableField pointField = fields[0].     assertEquals(1, pointField.fieldType().pointDataDimensionCount()).     assertFalse(pointField.fieldType().stored()).     assertEquals(25, pointField.numericValue().longValue()).     IndexableField dvField = fields[1].     assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType()).     assertFalse(dvField.fieldType().stored()). }
false;public;0;13;;public void testEmptyName() throws IOException {     // after 5.x     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("").field("type", "scaled_float").field("scaling_factor", 10.0).endObject().endObject().endObject().endObject()).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> parser.parse("type", new CompressedXContent(mapping))).     assertThat(e.getMessage(), containsString("name cannot be empty string")). }
true;public;0;11;/**  * `index_options` was deprecated and is rejected as of 7.0  */ ;/**  * `index_options` was deprecated and is rejected as of 7.0  */ public void testRejectIndexOptions() throws IOException {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("foo").field("type", "scaled_float").field("index_options", randomFrom(new String[] { "docs", "freqs", "positions", "offsets" })).endObject().endObject().endObject().endObject()).     MapperParsingException e = expectThrows(MapperParsingException.class, () -> parser.parse("type", new CompressedXContent(mapping))).     assertThat(e.getMessage(), containsString("index_options not allowed in field [foo] of type [scaled_float]")). }
