commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     indexService = createIndex("test").     parser = indexService.mapperService().documentMapperParser(). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> getPlugins() {     return pluginList(MapperExtrasPlugin.class). }
false;static;1;8;;static int getFrequency(TokenStream tk) throws IOException {     TermFrequencyAttribute freqAttribute = tk.addAttribute(TermFrequencyAttribute.class).     tk.reset().     assertTrue(tk.incrementToken()).     int freq = freqAttribute.getTermFrequency().     assertFalse(tk.incrementToken()).     return freq. }
false;public;0;34;;public void testDefaults() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "rank_feature").endObject().endObject().endObject().endObject()).     DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     ParsedDocument doc1 = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", 10).endObject()), XContentType.JSON)).     IndexableField[] fields = doc1.rootDoc().getFields("_feature").     assertEquals(1, fields.length).     assertThat(fields[0], Matchers.instanceOf(FeatureField.class)).     FeatureField featureField1 = (FeatureField) fields[0].     ParsedDocument doc2 = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", 12).endObject()), XContentType.JSON)).     FeatureField featureField2 = (FeatureField) doc2.rootDoc().getFields("_feature")[0].     int freq1 = getFrequency(featureField1.tokenStream(null, null)).     int freq2 = getFrequency(featureField2.tokenStream(null, null)).     assertTrue(freq1 < freq2). }
false;public;0;35;;public void testNegativeScoreImpact() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "rank_feature").field("positive_score_impact", false).endObject().endObject().endObject().endObject()).     DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     ParsedDocument doc1 = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", 10).endObject()), XContentType.JSON)).     IndexableField[] fields = doc1.rootDoc().getFields("_feature").     assertEquals(1, fields.length).     assertThat(fields[0], Matchers.instanceOf(FeatureField.class)).     FeatureField featureField1 = (FeatureField) fields[0].     ParsedDocument doc2 = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", 12).endObject()), XContentType.JSON)).     FeatureField featureField2 = (FeatureField) doc2.rootDoc().getFields("_feature")[0].     int freq1 = getFrequency(featureField1.tokenStream(null, null)).     int freq2 = getFrequency(featureField2.tokenStream(null, null)).     assertTrue(freq1 > freq2). }
false;public;0;37;;public void testRejectMultiValuedFields() throws MapperParsingException, IOException {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "rank_feature").endObject().startObject("foo").startObject("properties").startObject("field").field("type", "rank_feature").endObject().endObject().endObject().endObject().endObject().endObject()).     DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     MapperParsingException e = expectThrows(MapperParsingException.class, () -> mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", Arrays.asList(10, 20)).endObject()), XContentType.JSON))).     assertEquals("[rank_feature] fields do not support indexing multiple values for the same field [field] in the same document", e.getCause().getMessage()).     e = expectThrows(MapperParsingException.class, () -> mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().startArray("foo").startObject().field("field", 10).endObject().startObject().field("field", 20).endObject().endArray().endObject()), XContentType.JSON))).     assertEquals("[rank_feature] fields do not support indexing multiple values for the same field [foo.field] in the same document", e.getCause().getMessage()). }
