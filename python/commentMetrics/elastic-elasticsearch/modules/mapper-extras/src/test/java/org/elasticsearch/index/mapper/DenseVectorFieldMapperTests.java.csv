commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> getPlugins() {     return pluginList(MapperExtrasPlugin.class). }
false;public;0;37;;public void testDefaults() throws Exception {     IndexService indexService = createIndex("test-index").     DocumentMapperParser parser = indexService.mapperService().documentMapperParser().     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("_doc").startObject("properties").startObject("my-dense-vector").field("type", "dense_vector").endObject().endObject().endObject().endObject()).     DocumentMapper mapper = parser.parse("_doc", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     float[] expectedArray = { -12.1f, 100.7f, -4 }.     ParsedDocument doc1 = mapper.parse(new SourceToParse("test-index", "_doc", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().startArray("my-dense-vector").value(expectedArray[0]).value(expectedArray[1]).value(expectedArray[2]).endArray().endObject()), XContentType.JSON)).     IndexableField[] fields = doc1.rootDoc().getFields("my-dense-vector").     assertEquals(1, fields.length).     assertThat(fields[0], Matchers.instanceOf(BinaryDocValuesField.class)).     // assert that after decoding the indexed value is equal to expected     BytesRef vectorBR = ((BinaryDocValuesField) fields[0]).binaryValue().     float[] decodedValues = VectorEncoderDecoder.decodeDenseVector(vectorBR).     assertArrayEquals("Decoded dense vector values is not equal to the indexed one.", expectedArray, decodedValues, 0.001f). }
