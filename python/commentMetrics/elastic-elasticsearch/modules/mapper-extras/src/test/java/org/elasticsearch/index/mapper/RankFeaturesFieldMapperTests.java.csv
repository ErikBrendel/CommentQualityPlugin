commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     indexService = createIndex("test").     parser = indexService.mapperService().documentMapperParser(). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> getPlugins() {     return pluginList(MapperExtrasPlugin.class). }
false;public;0;31;;public void testDefaults() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "rank_features").endObject().endObject().endObject().endObject()).     DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     ParsedDocument doc1 = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().startObject("field").field("foo", 10).field("bar", 20).endObject().endObject()), XContentType.JSON)).     IndexableField[] fields = doc1.rootDoc().getFields("field").     assertEquals(2, fields.length).     assertThat(fields[0], Matchers.instanceOf(FeatureField.class)).     FeatureField featureField1 = (FeatureField) fields[0].     assertThat(featureField1.stringValue(), Matchers.equalTo("foo")).     FeatureField featureField2 = (FeatureField) fields[1].     assertThat(featureField2.stringValue(), Matchers.equalTo("bar")).     int freq1 = RankFeatureFieldMapperTests.getFrequency(featureField1.tokenStream(null, null)).     int freq2 = RankFeatureFieldMapperTests.getFrequency(featureField2.tokenStream(null, null)).     assertTrue(freq1 < freq2). }
false;public;0;43;;public void testRejectMultiValuedFields() throws MapperParsingException, IOException {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "rank_features").endObject().startObject("foo").startObject("properties").startObject("field").field("type", "rank_features").endObject().endObject().endObject().endObject().endObject().endObject()).     DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping)).     assertEquals(mapping, mapper.mappingSource().toString()).     MapperParsingException e = expectThrows(MapperParsingException.class, () -> mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().startObject("field").field("foo", Arrays.asList(10, 20)).endObject().endObject()), XContentType.JSON))).     assertEquals("[rank_features] fields take hashes that map a feature to a strictly positive float, but got unexpected token " + "START_ARRAY", e.getCause().getMessage()).     e = expectThrows(MapperParsingException.class, () -> mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().startArray("foo").startObject().startObject("field").field("bar", 10).endObject().endObject().startObject().startObject("field").field("bar", 20).endObject().endObject().endArray().endObject()), XContentType.JSON))).     assertEquals("[rank_features] fields do not support indexing multiple values for the same rank feature [foo.field.bar] in " + "the same document", e.getCause().getMessage()). }
