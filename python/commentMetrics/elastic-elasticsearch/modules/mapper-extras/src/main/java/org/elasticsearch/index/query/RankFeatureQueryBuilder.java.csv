commented;modifiers;parameterAmount;loc;comment;code
false;abstract;1;1;;abstract void writeTo(StreamOutput out) throws IOException.
false;abstract;3;1;;abstract Query toQuery(String field, String feature, boolean positiveScoreImpact) throws IOException.
false;abstract;1;1;;abstract void doXContent(XContentBuilder builder) throws IOException.
false;public;1;8;;@Override public boolean equals(Object obj) {     if (obj == null || obj.getClass() != getClass()) {         return false.     }     Log that = (Log) obj.     return scalingFactor == that.scalingFactor. }
false;public;0;4;;@Override public int hashCode() {     return Float.hashCode(scalingFactor). }
false;;1;5;;@Override void writeTo(StreamOutput out) throws IOException {     out.writeByte((byte) 0).     out.writeFloat(scalingFactor). }
false;;1;6;;@Override void doXContent(XContentBuilder builder) throws IOException {     builder.startObject("log").     builder.field("scaling_factor", scalingFactor).     builder.endObject(). }
false;;3;8;;@Override Query toQuery(String field, String feature, boolean positiveScoreImpact) throws IOException {     if (positiveScoreImpact == false) {         throw new IllegalArgumentException("Cannot use the [log] function with a field that has a negative score impact as " + "it would trigger negative scores").     }     return FeatureField.newLogQuery(field, feature, DEFAULT_BOOST, scalingFactor). }
false;public;1;8;;@Override public boolean equals(Object obj) {     if (obj == null || obj.getClass() != getClass()) {         return false.     }     Saturation that = (Saturation) obj.     return Objects.equals(pivot, that.pivot). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hashCode(pivot). }
false;;1;5;;@Override void writeTo(StreamOutput out) throws IOException {     out.writeByte((byte) 1).     out.writeOptionalFloat(pivot). }
false;;1;8;;@Override void doXContent(XContentBuilder builder) throws IOException {     builder.startObject("saturation").     if (pivot != null) {         builder.field("pivot", pivot).     }     builder.endObject(). }
false;;3;8;;@Override Query toQuery(String field, String feature, boolean positiveScoreImpact) throws IOException {     if (pivot == null) {         return FeatureField.newSaturationQuery(field, feature).     } else {         return FeatureField.newSaturationQuery(field, feature, DEFAULT_BOOST, pivot).     } }
false;public;1;9;;@Override public boolean equals(Object obj) {     if (obj == null || obj.getClass() != getClass()) {         return false.     }     Sigmoid that = (Sigmoid) obj.     return pivot == that.pivot && exp == that.exp. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(pivot, exp). }
false;;1;6;;@Override void writeTo(StreamOutput out) throws IOException {     out.writeByte((byte) 2).     out.writeFloat(pivot).     out.writeFloat(exp). }
false;;1;7;;@Override void doXContent(XContentBuilder builder) throws IOException {     builder.startObject("sigmoid").     builder.field("pivot", pivot).     builder.field("exponent", exp).     builder.endObject(). }
false;;3;4;;@Override Query toQuery(String field, String feature, boolean positiveScoreImpact) throws IOException {     return FeatureField.newSigmoidQuery(field, feature, DEFAULT_BOOST, pivot, exp). }
false;private,static;1;13;;private static ScoreFunction readScoreFunction(StreamInput in) throws IOException {     byte b = in.readByte().     switch(b) {         case 0:             return new ScoreFunction.Log(in).         case 1:             return new ScoreFunction.Saturation(in).         case 2:             return new ScoreFunction.Sigmoid(in).         default:             throw new IOException("Illegal score function id: " + b).     } }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;protected;1;5;;@Override protected void doWriteTo(StreamOutput out) throws IOException {     out.writeString(field).     scoreFunction.writeTo(out). }
false;protected;2;8;;@Override protected void doXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(getName()).     builder.field("field", field).     scoreFunction.doXContent(builder).     printBoostAndQueryName(builder).     builder.endObject(). }
false;protected;1;22;;@Override protected Query doToQuery(QueryShardContext context) throws IOException {     final MappedFieldType ft = context.fieldMapper(field).     if (ft instanceof RankFeatureFieldType) {         final RankFeatureFieldType fft = (RankFeatureFieldType) ft.         return scoreFunction.toQuery(RankFeatureMetaFieldMapper.NAME, field, fft.positiveScoreImpact()).     } else if (ft == null) {         final int lastDotIndex = field.lastIndexOf('.').         if (lastDotIndex != -1) {             final String parentField = field.substring(0, lastDotIndex).             final MappedFieldType parentFt = context.fieldMapper(parentField).             if (parentFt instanceof RankFeaturesFieldType) {                 return scoreFunction.toQuery(parentField, field.substring(lastDotIndex + 1), true).             }         }         // unmapped field         return new MatchNoDocsQuery().     } else {         throw new IllegalArgumentException("[rank_feature] query only works on [rank_feature] fields and " + "features of [rank_features] fields, not [" + ft.typeName() + "]").     } }
false;protected;1;4;;@Override protected boolean doEquals(RankFeatureQueryBuilder other) {     return Objects.equals(field, other.field) && Objects.equals(scoreFunction, other.scoreFunction). }
false;protected;0;4;;@Override protected int doHashCode() {     return Objects.hash(field, scoreFunction). }
