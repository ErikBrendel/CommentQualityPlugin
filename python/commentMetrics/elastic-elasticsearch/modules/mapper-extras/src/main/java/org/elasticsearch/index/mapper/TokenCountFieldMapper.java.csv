commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public Builder analyzer(NamedAnalyzer analyzer) {     this.analyzer = analyzer.     return this. }
false;public;0;3;;public NamedAnalyzer analyzer() {     return analyzer. }
false;public;1;4;;public Builder enablePositionIncrements(boolean enablePositionIncrements) {     this.enablePositionIncrements = enablePositionIncrements.     return this. }
false;public;0;3;;public boolean enablePositionIncrements() {     return enablePositionIncrements. }
false;public;1;6;;@Override public TokenCountFieldMapper build(BuilderContext context) {     setupFieldType(context).     return new TokenCountFieldMapper(name, fieldType, defaultFieldType, context.indexSettings(), analyzer, enablePositionIncrements, multiFieldsBuilder.build(this, context), copyTo). }
false;public;3;28;;@Override public Mapper.Builder<?, ?> parse(String name, Map<String, Object> node, ParserContext parserContext) throws MapperParsingException {     TokenCountFieldMapper.Builder builder = new TokenCountFieldMapper.Builder(name).     for (Iterator<Map.Entry<String, Object>> iterator = node.entrySet().iterator(). iterator.hasNext(). ) {         Map.Entry<String, Object> entry = iterator.next().         String propName = entry.getKey().         Object propNode = entry.getValue().         if (propName.equals("null_value")) {             builder.nullValue(nodeIntegerValue(propNode)).             iterator.remove().         } else if (propName.equals("analyzer")) {             NamedAnalyzer analyzer = parserContext.getIndexAnalyzers().get(propNode.toString()).             if (analyzer == null) {                 throw new MapperParsingException("Analyzer [" + propNode.toString() + "] not found for field [" + name + "]").             }             builder.analyzer(analyzer).             iterator.remove().         } else if (propName.equals("enable_position_increments")) {             builder.enablePositionIncrements(nodeBooleanValue(propNode)).             iterator.remove().         }     }     parseField(builder, name, node, parserContext).     if (builder.analyzer() == null) {         throw new MapperParsingException("Analyzer must be set for field [" + name + "] but wasn't.").     }     return builder. }
false;protected;2;25;;@Override protected void parseCreateField(ParseContext context, List<IndexableField> fields) throws IOException {     final String value.     if (context.externalValueSet()) {         value = context.externalValue().toString().     } else {         value = context.parser().textOrNull().     }     if (value == null && fieldType().nullValue() == null) {         return.     }     final int tokenCount.     if (value == null) {         tokenCount = (Integer) fieldType().nullValue().     } else {         tokenCount = countPositions(analyzer, name(), value, enablePositionIncrements).     }     boolean indexed = fieldType().indexOptions() != IndexOptions.NONE.     boolean docValued = fieldType().hasDocValues().     boolean stored = fieldType().stored().     fields.addAll(NumberFieldMapper.NumberType.INTEGER.createFields(fieldType().name(), tokenCount, indexed, docValued, stored)). }
true;static;4;19;/**  * Count position increments in a token stream.  Package private for testing.  * @param analyzer analyzer to create token stream  * @param fieldName field name to pass to analyzer  * @param fieldValue field value to pass to analyzer  * @param enablePositionIncrements should we count position increments ?  * @return number of position increments in a token stream  * @throws IOException if tokenStream throws it  */ ;/**  * Count position increments in a token stream.  Package private for testing.  * @param analyzer analyzer to create token stream  * @param fieldName field name to pass to analyzer  * @param fieldValue field value to pass to analyzer  * @param enablePositionIncrements should we count position increments ?  * @return number of position increments in a token stream  * @throws IOException if tokenStream throws it  */ static int countPositions(Analyzer analyzer, String fieldName, String fieldValue, boolean enablePositionIncrements) throws IOException {     try (TokenStream tokenStream = analyzer.tokenStream(fieldName, fieldValue)) {         int count = 0.         PositionIncrementAttribute position = tokenStream.addAttribute(PositionIncrementAttribute.class).         tokenStream.reset().         while (tokenStream.incrementToken()) {             if (enablePositionIncrements) {                 count += position.getPositionIncrement().             } else {                 count += Math.min(1, position.getPositionIncrement()).             }         }         tokenStream.end().         if (enablePositionIncrements) {             count += position.getPositionIncrement().         }         return count.     } }
true;public;0;3;/**  * Name of analyzer.  * @return name of analyzer  */ ;/**  * Name of analyzer.  * @return name of analyzer  */ public String analyzer() {     return analyzer.name(). }
true;public;0;3;/**  * Indicates if position increments are counted.  * @return <code>true</code> if position increments are counted  */ ;/**  * Indicates if position increments are counted.  * @return <code>true</code> if position increments are counted  */ public boolean enablePositionIncrements() {     return enablePositionIncrements. }
false;protected;0;4;;@Override protected String contentType() {     return CONTENT_TYPE. }
false;protected;1;6;;@Override protected void doMerge(Mapper mergeWith) {     super.doMerge(mergeWith).     this.analyzer = ((TokenCountFieldMapper) mergeWith).analyzer.     this.enablePositionIncrements = ((TokenCountFieldMapper) mergeWith).enablePositionIncrements. }
false;protected;3;8;;@Override protected void doXContentBody(XContentBuilder builder, boolean includeDefaults, Params params) throws IOException {     super.doXContentBody(builder, includeDefaults, params).     builder.field("analyzer", analyzer()).     if (includeDefaults || enablePositionIncrements() != Defaults.DEFAULT_POSITION_INCREMENTS) {         builder.field("enable_position_increments", enablePositionIncrements()).     } }
