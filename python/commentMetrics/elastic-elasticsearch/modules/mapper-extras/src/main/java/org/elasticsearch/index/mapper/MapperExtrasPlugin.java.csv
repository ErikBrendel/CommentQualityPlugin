commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Override public Map<String, Mapper.TypeParser> getMappers() {     Map<String, Mapper.TypeParser> mappers = new LinkedHashMap<>().     mappers.put(ScaledFloatFieldMapper.CONTENT_TYPE, new ScaledFloatFieldMapper.TypeParser()).     mappers.put(TokenCountFieldMapper.CONTENT_TYPE, new TokenCountFieldMapper.TypeParser()).     mappers.put(RankFeatureFieldMapper.CONTENT_TYPE, new RankFeatureFieldMapper.TypeParser()).     mappers.put(RankFeaturesFieldMapper.CONTENT_TYPE, new RankFeaturesFieldMapper.TypeParser()).     mappers.put(DenseVectorFieldMapper.CONTENT_TYPE, new DenseVectorFieldMapper.TypeParser()).     mappers.put(SparseVectorFieldMapper.CONTENT_TYPE, new SparseVectorFieldMapper.TypeParser()).     return Collections.unmodifiableMap(mappers). }
false;public;0;4;;@Override public Map<String, TypeParser> getMetadataMappers() {     return Collections.singletonMap(RankFeatureMetaFieldMapper.CONTENT_TYPE, new RankFeatureMetaFieldMapper.TypeParser()). }
false;public;0;6;;@Override public List<QuerySpec<?>> getQueries() {     return Collections.singletonList(new QuerySpec<>(RankFeatureQueryBuilder.NAME, RankFeatureQueryBuilder::new, p -> RankFeatureQueryBuilder.PARSER.parse(p, null))). }
