commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public RankFeatureFieldType fieldType() {     return (RankFeatureFieldType) super.fieldType(). }
false;public;1;4;;public Builder positiveScoreImpact(boolean v) {     fieldType().setPositiveScoreImpact(v).     return builder. }
false;public;1;7;;@Override public RankFeatureFieldMapper build(BuilderContext context) {     setupFieldType(context).     return new RankFeatureFieldMapper(name, fieldType, defaultFieldType, context.indexSettings(), multiFieldsBuilder.build(this, context), copyTo). }
false;public;3;14;;@Override public Mapper.Builder<?, ?> parse(String name, Map<String, Object> node, ParserContext parserContext) throws MapperParsingException {     RankFeatureFieldMapper.Builder builder = new RankFeatureFieldMapper.Builder(name).     for (Iterator<Map.Entry<String, Object>> iterator = node.entrySet().iterator(). iterator.hasNext(). ) {         Map.Entry<String, Object> entry = iterator.next().         String propName = entry.getKey().         Object propNode = entry.getValue().         if (propName.equals("positive_score_impact")) {             builder.positiveScoreImpact(XContentMapValues.nodeBooleanValue(propNode)).             iterator.remove().         }     }     return builder. }
false;public;0;3;;public RankFeatureFieldType clone() {     return new RankFeatureFieldType(this). }
false;public;1;8;;@Override public boolean equals(Object o) {     if (super.equals(o) == false) {         return false.     }     RankFeatureFieldType other = (RankFeatureFieldType) o.     return Objects.equals(positiveScoreImpact, other.positiveScoreImpact). }
false;public;0;6;;@Override public int hashCode() {     int h = super.hashCode().     h = 31 * h + Objects.hashCode(positiveScoreImpact).     return h. }
false;public;2;7;;@Override public void checkCompatibility(MappedFieldType other, List<String> conflicts) {     super.checkCompatibility(other, conflicts).     if (positiveScoreImpact != ((RankFeatureFieldType) other).positiveScoreImpact()) {         conflicts.add("mapper [" + name() + "] has different [positive_score_impact] values").     } }
false;public;0;4;;@Override public String typeName() {     return CONTENT_TYPE. }
false;public;0;3;;public boolean positiveScoreImpact() {     return positiveScoreImpact. }
false;public;1;4;;public void setPositiveScoreImpact(boolean positiveScoreImpact) {     checkIfFrozen().     this.positiveScoreImpact = positiveScoreImpact. }
false;public;1;4;;@Override public Query existsQuery(QueryShardContext context) {     return new TermQuery(new Term("_feature", name())). }
false;public;1;4;;@Override public IndexFieldData.Builder fielddataBuilder(String fullyQualifiedIndexName) {     throw new UnsupportedOperationException("[rank_feature] fields do not support sorting, scripting or aggregating"). }
false;public;2;4;;@Override public Query termQuery(Object value, QueryShardContext context) {     throw new UnsupportedOperationException("Queries on [rank_feature] fields are not supported"). }
false;protected;0;4;;@Override protected RankFeatureFieldMapper clone() {     return (RankFeatureFieldMapper) super.clone(). }
false;public;0;4;;@Override public RankFeatureFieldType fieldType() {     return (RankFeatureFieldType) super.fieldType(). }
false;protected;2;28;;@Override protected void parseCreateField(ParseContext context, List<IndexableField> fields) throws IOException {     float value.     if (context.externalValueSet()) {         Object v = context.externalValue().         if (v instanceof Number) {             value = ((Number) v).floatValue().         } else {             value = Float.parseFloat(v.toString()).         }     } else if (context.parser().currentToken() == Token.VALUE_NULL) {         // skip         return.     } else {         value = context.parser().floatValue().     }     if (context.doc().getByKey(name()) != null) {         throw new IllegalArgumentException("[rank_feature] fields do not support indexing multiple values for the same field [" + name() + "] in the same document").     }     if (fieldType().positiveScoreImpact() == false) {         value = 1 / value.     }     context.doc().addWithKey(name(), new FeatureField("_feature", name(), value)). }
false;protected;0;4;;@Override protected String contentType() {     return CONTENT_TYPE. }
false;protected;3;8;;@Override protected void doXContentBody(XContentBuilder builder, boolean includeDefaults, Params params) throws IOException {     super.doXContentBody(builder, includeDefaults, params).     if (includeDefaults || fieldType().positiveScoreImpact() == false) {         builder.field("positive_score_impact", fieldType().positiveScoreImpact()).     } }
