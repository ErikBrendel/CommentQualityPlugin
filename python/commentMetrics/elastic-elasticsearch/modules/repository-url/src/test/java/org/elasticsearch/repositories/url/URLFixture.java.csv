commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;8;;public static void main(String[] args) throws Exception {     if (args == null || args.length != 2) {         throw new IllegalArgumentException("URLFixture <working directory> <repository directory>").     }     final URLFixture fixture = new URLFixture(args[0], args[1]).     fixture.listen(). }
false;protected;1;26;;@Override protected AbstractHttpFixture.Response handle(final Request request) throws IOException {     if ("GET".equalsIgnoreCase(request.getMethod())) {         String path = request.getPath().         if (path.length() > 0 && path.charAt(0) == '/') {             path = path.substring(1).         }         Path normalizedRepositoryDir = repositoryDir.normalize().         Path normalizedPath = normalizedRepositoryDir.resolve(path).normalize().         if (normalizedPath.startsWith(normalizedRepositoryDir)) {             if (Files.exists(normalizedPath) && Files.isReadable(normalizedPath) && Files.isRegularFile(normalizedPath)) {                 byte[] content = Files.readAllBytes(normalizedPath).                 final Map<String, String> headers = new HashMap<>(contentType("application/octet-stream")).                 headers.put("Content-Length", String.valueOf(content.length)).                 return new Response(RestStatus.OK.getStatus(), headers, content).             } else {                 return new Response(RestStatus.NOT_FOUND.getStatus(), TEXT_PLAIN_CONTENT_TYPE, EMPTY_BYTE).             }         } else {             return new Response(RestStatus.FORBIDDEN.getStatus(), TEXT_PLAIN_CONTENT_TYPE, EMPTY_BYTE).         }     }     return null. }
false;private,static;1;4;;@SuppressForbidden(reason = "Paths#get is fine - we don't have environment here") private static Path dir(final String dir) {     return Paths.get(dir). }
