commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected void assertSnapshotOrGenericThread() { // eliminate thread name check as we create repo manually on test/main threads }
false;private;2;9;;private URLRepository createRepository(Settings baseSettings, RepositoryMetaData repositoryMetaData) {     return new URLRepository(repositoryMetaData, TestEnvironment.newEnvironment(baseSettings), new NamedXContentRegistry(Collections.emptyList())) {          @Override         protected void assertSnapshotOrGenericThread() {         // eliminate thread name check as we create repo manually on test/main threads         }     }. }
false;public;0;15;;public void testWhiteListingRepoURL() throws IOException {     String repoPath = createTempDir().resolve("repository").toUri().toURL().toString().     Settings baseSettings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).put(URLRepository.ALLOWED_URLS_SETTING.getKey(), repoPath).put(URLRepository.REPOSITORIES_URL_SETTING.getKey(), repoPath).build().     RepositoryMetaData repositoryMetaData = new RepositoryMetaData("url", URLRepository.TYPE, baseSettings).     final URLRepository repository = createRepository(baseSettings, repositoryMetaData).     repository.start().     assertThat("blob store has to be lazy initialized", repository.getBlobStore(), is(nullValue())).     repository.blobContainer().     assertThat("blobContainer has to initialize blob store", repository.getBlobStore(), not(nullValue())). }
false;public;0;18;;public void testIfNotWhiteListedMustSetRepoURL() throws IOException {     String repoPath = createTempDir().resolve("repository").toUri().toURL().toString().     Settings baseSettings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).put(URLRepository.REPOSITORIES_URL_SETTING.getKey(), repoPath).build().     RepositoryMetaData repositoryMetaData = new RepositoryMetaData("url", URLRepository.TYPE, baseSettings).     final URLRepository repository = createRepository(baseSettings, repositoryMetaData).     repository.start().     try {         repository.blobContainer().         fail("RepositoryException should have been thrown.").     } catch (RepositoryException e) {         String msg = "[url] file url [" + repoPath + "] doesn't match any of the locations specified by path.repo or repositories.url.allowed_urls".         assertEquals(msg, e.getMessage()).     } }
false;public;0;19;;public void testMustBeSupportedProtocol() throws IOException {     Path directory = createTempDir().     String repoPath = directory.resolve("repository").toUri().toURL().toString().     Settings baseSettings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).put(Environment.PATH_REPO_SETTING.getKey(), directory.toString()).put(URLRepository.REPOSITORIES_URL_SETTING.getKey(), repoPath).put(URLRepository.SUPPORTED_PROTOCOLS_SETTING.getKey(), "http,https").build().     RepositoryMetaData repositoryMetaData = new RepositoryMetaData("url", URLRepository.TYPE, baseSettings).     final URLRepository repository = createRepository(baseSettings, repositoryMetaData).     repository.start().     try {         repository.blobContainer().         fail("RepositoryException should have been thrown.").     } catch (RepositoryException e) {         assertEquals("[url] unsupported url protocol [file] from URL [" + repoPath + "]", e.getMessage()).     } }
false;public;0;18;;public void testNonNormalizedUrl() throws IOException {     Settings baseSettings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).put(URLRepository.ALLOWED_URLS_SETTING.getKey(), "file:/tmp/").put(URLRepository.REPOSITORIES_URL_SETTING.getKey(), "file:/var/").build().     RepositoryMetaData repositoryMetaData = new RepositoryMetaData("url", URLRepository.TYPE, baseSettings).     final URLRepository repository = createRepository(baseSettings, repositoryMetaData).     repository.start().     try {         repository.blobContainer().         fail("RepositoryException should have been thrown.").     } catch (RepositoryException e) {         assertEquals("[url] file url [file:/var/] doesn't match any of the locations " + "specified by path.repo or repositories.url.allowed_urls", e.getMessage()).     } }
