commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@ParametersFactory public static Iterable<Object[]> parameters() throws Exception {     return ESClientYamlSuiteTestCase.createParameters(). }
true;public;0;49;/**  * This method registers 3 snapshot/restore repositories:  * - repository-fs: this FS repository is used to create snapshots.  * - repository-url: this URL repository is used to restore snapshots created using the previous repository. It uses  * the URLFixture to restore snapshots over HTTP.  * - repository-file: similar as the previous repository but using a file:// prefix instead of http://.  */ ;/**  * This method registers 3 snapshot/restore repositories:  * - repository-fs: this FS repository is used to create snapshots.  * - repository-url: this URL repository is used to restore snapshots created using the previous repository. It uses  * the URLFixture to restore snapshots over HTTP.  * - repository-file: similar as the previous repository but using a file:// prefix instead of http://.  */ @Before public void registerRepositories() throws IOException {     Request clusterSettingsRequest = new Request("GET", "/_cluster/settings").     clusterSettingsRequest.addParameter("include_defaults", "true").     clusterSettingsRequest.addParameter("filter_path", "defaults.path.repo,defaults.repositories.url.allowed_urls").     Response clusterSettingsResponse = client().performRequest(clusterSettingsRequest).     Map<String, Object> clusterSettings = entityAsMap(clusterSettingsResponse).     @SuppressWarnings("unchecked")     List<String> pathRepos = (List<String>) XContentMapValues.extractValue("defaults.path.repo", clusterSettings).     assertThat(pathRepos, notNullValue()).     assertThat(pathRepos, hasSize(1)).     final String pathRepo = pathRepos.get(0).     final URI pathRepoUri = PathUtils.get(pathRepo).toUri().normalize().     // Create a FS repository using the path.repo location     Request createFsRepositoryRequest = new Request("PUT", "/_snapshot/repository-fs").     createFsRepositoryRequest.setEntity(buildRepositorySettings(FsRepository.TYPE, Settings.builder().put("location", pathRepo).build())).     Response createFsRepositoryResponse = client().performRequest(createFsRepositoryRequest).     assertThat(createFsRepositoryResponse.getStatusLine().getStatusCode(), equalTo(RestStatus.OK.getStatus())).     // Create a URL repository using the file://{path.repo} URL     Request createFileRepositoryRequest = new Request("PUT", "/_snapshot/repository-file").     createFileRepositoryRequest.setEntity(buildRepositorySettings(URLRepository.TYPE, Settings.builder().put("url", pathRepoUri.toString()).build())).     Response createFileRepositoryResponse = client().performRequest(createFileRepositoryRequest).     assertThat(createFileRepositoryResponse.getStatusLine().getStatusCode(), equalTo(RestStatus.OK.getStatus())).     // Create a URL repository using the http://{fixture} URL     @SuppressWarnings("unchecked")     List<String> allowedUrls = (List<String>) XContentMapValues.extractValue("defaults.repositories.url.allowed_urls", clusterSettings).     for (String allowedUrl : allowedUrls) {         try {             InetAddress inetAddress = InetAddress.getByName(new URL(allowedUrl).getHost()).             if (inetAddress.isAnyLocalAddress() || inetAddress.isLoopbackAddress()) {                 Request createUrlRepositoryRequest = new Request("PUT", "/_snapshot/repository-url").                 createUrlRepositoryRequest.setEntity(buildRepositorySettings(URLRepository.TYPE, Settings.builder().put("url", allowedUrl).build())).                 Response createUrlRepositoryResponse = client().performRequest(createUrlRepositoryRequest).                 assertThat(createUrlRepositoryResponse.getStatusLine().getStatusCode(), equalTo(RestStatus.OK.getStatus())).                 break.             }         } catch (Exception e) {             logger.debug("Failed to resolve inet address for allowed URL [{}], skipping", allowedUrl).         }     } }
false;private,static;2;15;;private static HttpEntity buildRepositorySettings(final String type, final Settings settings) throws IOException {     try (XContentBuilder builder = jsonBuilder()) {         builder.startObject().         {             builder.field("type", type).             builder.startObject("settings").             {                 settings.toXContent(builder, ToXContent.EMPTY_PARAMS).             }             builder.endObject().         }         builder.endObject().         return new NStringEntity(Strings.toString(builder), ContentType.APPLICATION_JSON).     } }
