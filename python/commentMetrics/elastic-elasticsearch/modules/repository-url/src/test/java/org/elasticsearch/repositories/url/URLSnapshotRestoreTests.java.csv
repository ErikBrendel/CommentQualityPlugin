commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Collections.singletonList(URLRepositoryPlugin.class). }
false;public;0;79;;public void testUrlRepository() throws Exception {     Client client = client().     logger.info("-->  creating repository").     Path repositoryLocation = randomRepoPath().     assertAcked(client.admin().cluster().preparePutRepository("test-repo").setType(FsRepository.TYPE).setSettings(Settings.builder().put(FsRepository.LOCATION_SETTING.getKey(), repositoryLocation).put(FsRepository.COMPRESS_SETTING.getKey(), randomBoolean()).put(FsRepository.CHUNK_SIZE_SETTING.getKey(), randomIntBetween(100, 1000), ByteSizeUnit.BYTES))).     createIndex("test-idx").     ensureGreen().     logger.info("--> indexing some data").     for (int i = 0. i < 100. i++) {         index("test-idx", "doc", Integer.toString(i), "foo", "bar" + i).     }     refresh().     assertThat(client.prepareSearch("test-idx").setSize(0).get().getHits().getTotalHits().value, equalTo(100L)).     logger.info("--> snapshot").     CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap").setWaitForCompletion(true).setIndices("test-idx").get().     assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0)).     int actualTotalShards = createSnapshotResponse.getSnapshotInfo().totalShards().     assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), equalTo(actualTotalShards)).     SnapshotState state = client.admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap").get().getSnapshots().get(0).state().     assertThat(state, equalTo(SnapshotState.SUCCESS)).     logger.info("--> delete index").     cluster().wipeIndices("test-idx").     logger.info("--> create read-only URL repository").     assertAcked(client.admin().cluster().preparePutRepository("url-repo").setType(URLRepository.TYPE).setSettings(Settings.builder().put(URLRepository.URL_SETTING.getKey(), repositoryLocation.toUri().toURL().toString()).put("list_directories", randomBoolean()))).     logger.info("--> restore index after deletion").     RestoreSnapshotResponse restoreSnapshotResponse = client.admin().cluster().prepareRestoreSnapshot("url-repo", "test-snap").setWaitForCompletion(true).setIndices("test-idx").execute().actionGet().     assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0)).     assertThat(client.prepareSearch("test-idx").setSize(0).get().getHits().getTotalHits().value, equalTo(100L)).     logger.info("--> list available shapshots").     GetSnapshotsResponse getSnapshotsResponse = client.admin().cluster().prepareGetSnapshots("url-repo").get().     assertThat(getSnapshotsResponse.getSnapshots(), notNullValue()).     assertThat(getSnapshotsResponse.getSnapshots().size(), equalTo(1)).     logger.info("--> delete snapshot").     AcknowledgedResponse deleteSnapshotResponse = client.admin().cluster().prepareDeleteSnapshot("test-repo", "test-snap").get().     assertAcked(deleteSnapshotResponse).     logger.info("--> list available shapshot again, no snapshots should be returned").     getSnapshotsResponse = client.admin().cluster().prepareGetSnapshots("url-repo").get().     assertThat(getSnapshotsResponse.getSnapshots(), notNullValue()).     assertThat(getSnapshotsResponse.getSnapshots().size(), equalTo(0)). }
