commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;18;;@BeforeClass public static void startHttp() throws Exception {     for (int i = 0. i < message.length. ++i) {         message[i] = randomByte().     }     blobName = randomAlphaOfLength(8).     httpServer = MockHttpServer.createHttp(new InetSocketAddress(InetAddress.getLoopbackAddress().getHostAddress(), 6001), 0).     httpServer.createContext("/indices/" + blobName, (s) -> {         s.sendResponseHeaders(200, message.length).         OutputStream responseBody = s.getResponseBody().         responseBody.write(message).         responseBody.close().     }).     httpServer.start(). }
false;public,static;0;5;;@AfterClass public static void stopHttp() throws IOException {     httpServer.stop(0).     httpServer = null. }
false;public;0;6;;@Before public void storeSetup() throws MalformedURLException {     Settings settings = Settings.EMPTY.     String spec = "http://localhost:6001/".     urlBlobStore = new URLBlobStore(settings, new URL(spec)). }
false;public;0;9;;public void testURLBlobStoreCanReadBlob() throws IOException {     BlobContainer container = urlBlobStore.blobContainer(BlobPath.cleanPath().add("indices")).     try (InputStream stream = container.readBlob(blobName)) {         byte[] bytes = new byte[message.length].         int read = stream.read(bytes).         assertEquals(message.length, read).         assertArrayEquals(message, bytes).     } }
false;public;0;10;;public void testNoBlobFound() throws IOException {     BlobContainer container = urlBlobStore.blobContainer(BlobPath.cleanPath().add("indices")).     String incorrectBlobName = "incorrect_" + blobName.     try (InputStream ignored = container.readBlob(incorrectBlobName)) {         fail("Should have thrown NoSuchFileException exception").         ignored.read().     } catch (NoSuchFileException e) {         assertEquals(String.format("[%s] blob not found", incorrectBlobName), e.getMessage()).     } }
