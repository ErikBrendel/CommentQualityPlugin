commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * {@inheritDoc}  */ ;/**  * {@inheritDoc}  */ @Override public String toString() {     return path.toString(). }
true;public;0;3;/**  * Returns base URL  *  * @return base URL  */ ;/**  * Returns base URL  *  * @return base URL  */ public URL path() {     return path. }
true;public;0;3;/**  * Returns read buffer size  *  * @return read buffer size  */ ;/**  * Returns read buffer size  *  * @return read buffer size  */ public int bufferSizeInBytes() {     return this.bufferSizeInBytes. }
true;public;1;8;/**  * {@inheritDoc}  */ ;/**  * {@inheritDoc}  */ @Override public BlobContainer blobContainer(BlobPath path) {     try {         return new URLBlobContainer(this, path, buildPath(path)).     } catch (MalformedURLException ex) {         throw new BlobStoreException("malformed URL " + path, ex).     } }
true;public;1;4;/**  * This operation is not supported by URL Blob Store  */ ;/**  * This operation is not supported by URL Blob Store  */ @Override public void delete(BlobPath path) {     throw new UnsupportedOperationException("URL repository is read only"). }
true;public;0;4;/**  * {@inheritDoc}  */ ;/**  * {@inheritDoc}  */ @Override public void close() { // nothing to do here... }
true;private;1;13;/**  * Builds URL using base URL and specified path  *  * @param path relative path  * @return Base URL + path  */ ;/**  * Builds URL using base URL and specified path  *  * @param path relative path  * @return Base URL + path  */ private URL buildPath(BlobPath path) throws MalformedURLException {     String[] paths = path.toArray().     if (paths.length == 0) {         return path().     }     URL blobPath = new URL(this.path, paths[0] + "/").     if (paths.length > 1) {         for (int i = 1. i < paths.length. i++) {             blobPath = new URL(blobPath, paths[i] + "/").         }     }     return blobPath. }
