commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns URL for this container  *  * @return URL for this container  */ ;/**  * Returns URL for this container  *  * @return URL for this container  */ public URL url() {     return this.path. }
true;public;0;4;/**  * This operation is not supported by URLBlobContainer  */ ;/**  * This operation is not supported by URLBlobContainer  */ @Override public Map<String, BlobMetaData> listBlobs() throws IOException {     throw new UnsupportedOperationException("URL repository doesn't support this operation"). }
true;public;1;4;/**  * This operation is not supported by URLBlobContainer  */ ;/**  * This operation is not supported by URLBlobContainer  */ @Override public Map<String, BlobMetaData> listBlobsByPrefix(String blobNamePrefix) throws IOException {     throw new UnsupportedOperationException("URL repository doesn't support this operation"). }
true;public;1;4;/**  * This operation is not supported by URLBlobContainer  */ ;/**  * This operation is not supported by URLBlobContainer  */ @Override public void deleteBlob(String blobName) throws IOException {     throw new UnsupportedOperationException("URL repository is read only"). }
true;public;1;4;/**  * This operation is not supported by URLBlobContainer  */ ;/**  * This operation is not supported by URLBlobContainer  */ @Override public boolean blobExists(String blobName) {     throw new UnsupportedOperationException("URL repository doesn't support this operation"). }
false;public;1;8;;@Override public InputStream readBlob(String name) throws IOException {     try {         return new BufferedInputStream(getInputStream(new URL(path, name)), blobStore.bufferSizeInBytes()).     } catch (FileNotFoundException fnfe) {         throw new NoSuchFileException("[" + name + "] blob not found").     } }
false;public;4;4;;@Override public void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException {     throw new UnsupportedOperationException("URL repository doesn't support this operation"). }
false;public;4;4;;@Override public void writeBlobAtomic(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException {     throw new UnsupportedOperationException("URL repository doesn't support this operation"). }
false;private,static;1;8;;@SuppressForbidden(reason = "We call connect in doPrivileged and provide SocketPermission") private static InputStream getInputStream(URL url) throws IOException {     try {         return AccessController.doPrivileged((PrivilegedExceptionAction<InputStream>) url::openStream).     } catch (PrivilegedActionException e) {         throw (IOException) e.getCause().     } }
