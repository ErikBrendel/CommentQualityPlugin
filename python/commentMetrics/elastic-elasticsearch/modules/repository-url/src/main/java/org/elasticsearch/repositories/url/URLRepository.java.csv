# id;timestamp;commentText;codeText;commentWords;codeWords
URLRepository -> private URL checkURL(URL url);1524684173;Makes sure that the url is white listed or if it points to the local file system it matches one on of the root path in path.repo;private URL checkURL(URL url) {_        String protocol = url.getProtocol()__        if (protocol == null) {_            throw new RepositoryException(getMetadata().name(), "unknown url protocol from URL [" + url + "]")__        }_        for (String supportedProtocol : supportedProtocols) {_            if (supportedProtocol.equals(protocol)) {_                try {_                    if (URIPattern.match(urlWhiteList, url.toURI())) {_                        _                        return url__                    }_                } catch (URISyntaxException ex) {_                    logger.warn("cannot parse the specified url [{}]", url)__                    throw new RepositoryException(getMetadata().name(), "cannot parse the specified url [" + url + "]")__                }_                _                URL normalizedUrl = environment.resolveRepoURL(url)__                if (normalizedUrl == null) {_                    String logMessage = "The specified url [{}] doesn't start with any repository paths specified by the " +_                        "path.repo setting or by {} setting: [{}] "__                    logger.warn(logMessage, url, ALLOWED_URLS_SETTING.getKey(), environment.repoFiles())__                    String exceptionMessage = "file url [" + url + "] doesn't match any of the locations specified by path.repo or "_                        + ALLOWED_URLS_SETTING.getKey()__                    throw new RepositoryException(getMetadata().name(), exceptionMessage)__                }_                return normalizedUrl__            }_        }_        throw new RepositoryException(getMetadata().name(), "unsupported url protocol [" + protocol + "] from URL [" + url + "]")__    };makes,sure,that,the,url,is,white,listed,or,if,it,points,to,the,local,file,system,it,matches,one,on,of,the,root,path,in,path,repo;private,url,check,url,url,url,string,protocol,url,get,protocol,if,protocol,null,throw,new,repository,exception,get,metadata,name,unknown,url,protocol,from,url,url,for,string,supported,protocol,supported,protocols,if,supported,protocol,equals,protocol,try,if,uripattern,match,url,white,list,url,to,uri,return,url,catch,urisyntax,exception,ex,logger,warn,cannot,parse,the,specified,url,url,throw,new,repository,exception,get,metadata,name,cannot,parse,the,specified,url,url,url,normalized,url,environment,resolve,repo,url,url,if,normalized,url,null,string,log,message,the,specified,url,doesn,t,start,with,any,repository,paths,specified,by,the,path,repo,setting,or,by,setting,logger,warn,log,message,url,get,key,environment,repo,files,string,exception,message,file,url,url,doesn,t,match,any,of,the,locations,specified,by,path,repo,or,get,key,throw,new,repository,exception,get,metadata,name,exception,message,return,normalized,url,throw,new,repository,exception,get,metadata,name,unsupported,url,protocol,protocol,from,url,url
URLRepository -> private URL checkURL(URL url);1531729807;Makes sure that the url is white listed or if it points to the local file system it matches one on of the root path in path.repo;private URL checkURL(URL url) {_        String protocol = url.getProtocol()__        if (protocol == null) {_            throw new RepositoryException(getMetadata().name(), "unknown url protocol from URL [" + url + "]")__        }_        for (String supportedProtocol : supportedProtocols) {_            if (supportedProtocol.equals(protocol)) {_                try {_                    if (URIPattern.match(urlWhiteList, url.toURI())) {_                        _                        return url__                    }_                } catch (URISyntaxException ex) {_                    logger.warn("cannot parse the specified url [{}]", url)__                    throw new RepositoryException(getMetadata().name(), "cannot parse the specified url [" + url + "]")__                }_                _                URL normalizedUrl = environment.resolveRepoURL(url)__                if (normalizedUrl == null) {_                    String logMessage = "The specified url [{}] doesn't start with any repository paths specified by the " +_                        "path.repo setting or by {} setting: [{}] "__                    logger.warn(logMessage, url, ALLOWED_URLS_SETTING.getKey(), environment.repoFiles())__                    String exceptionMessage = "file url [" + url + "] doesn't match any of the locations specified by path.repo or "_                        + ALLOWED_URLS_SETTING.getKey()__                    throw new RepositoryException(getMetadata().name(), exceptionMessage)__                }_                return normalizedUrl__            }_        }_        throw new RepositoryException(getMetadata().name(), "unsupported url protocol [" + protocol + "] from URL [" + url + "]")__    };makes,sure,that,the,url,is,white,listed,or,if,it,points,to,the,local,file,system,it,matches,one,on,of,the,root,path,in,path,repo;private,url,check,url,url,url,string,protocol,url,get,protocol,if,protocol,null,throw,new,repository,exception,get,metadata,name,unknown,url,protocol,from,url,url,for,string,supported,protocol,supported,protocols,if,supported,protocol,equals,protocol,try,if,uripattern,match,url,white,list,url,to,uri,return,url,catch,urisyntax,exception,ex,logger,warn,cannot,parse,the,specified,url,url,throw,new,repository,exception,get,metadata,name,cannot,parse,the,specified,url,url,url,normalized,url,environment,resolve,repo,url,url,if,normalized,url,null,string,log,message,the,specified,url,doesn,t,start,with,any,repository,paths,specified,by,the,path,repo,setting,or,by,setting,logger,warn,log,message,url,get,key,environment,repo,files,string,exception,message,file,url,url,doesn,t,match,any,of,the,locations,specified,by,path,repo,or,get,key,throw,new,repository,exception,get,metadata,name,exception,message,return,normalized,url,throw,new,repository,exception,get,metadata,name,unsupported,url,protocol,protocol,from,url,url
URLRepository -> private URL checkURL(URL url);1541008027;Makes sure that the url is white listed or if it points to the local file system it matches one on of the root path in path.repo;private URL checkURL(URL url) {_        String protocol = url.getProtocol()__        if (protocol == null) {_            throw new RepositoryException(getMetadata().name(), "unknown url protocol from URL [" + url + "]")__        }_        for (String supportedProtocol : supportedProtocols) {_            if (supportedProtocol.equals(protocol)) {_                try {_                    if (URIPattern.match(urlWhiteList, url.toURI())) {_                        _                        return url__                    }_                } catch (URISyntaxException ex) {_                    logger.warn("cannot parse the specified url [{}]", url)__                    throw new RepositoryException(getMetadata().name(), "cannot parse the specified url [" + url + "]")__                }_                _                URL normalizedUrl = environment.resolveRepoURL(url)__                if (normalizedUrl == null) {_                    String logMessage = "The specified url [{}] doesn't start with any repository paths specified by the " +_                        "path.repo setting or by {} setting: [{}] "__                    logger.warn(logMessage, url, ALLOWED_URLS_SETTING.getKey(), environment.repoFiles())__                    String exceptionMessage = "file url [" + url + "] doesn't match any of the locations specified by path.repo or "_                        + ALLOWED_URLS_SETTING.getKey()__                    throw new RepositoryException(getMetadata().name(), exceptionMessage)__                }_                return normalizedUrl__            }_        }_        throw new RepositoryException(getMetadata().name(), "unsupported url protocol [" + protocol + "] from URL [" + url + "]")__    };makes,sure,that,the,url,is,white,listed,or,if,it,points,to,the,local,file,system,it,matches,one,on,of,the,root,path,in,path,repo;private,url,check,url,url,url,string,protocol,url,get,protocol,if,protocol,null,throw,new,repository,exception,get,metadata,name,unknown,url,protocol,from,url,url,for,string,supported,protocol,supported,protocols,if,supported,protocol,equals,protocol,try,if,uripattern,match,url,white,list,url,to,uri,return,url,catch,urisyntax,exception,ex,logger,warn,cannot,parse,the,specified,url,url,throw,new,repository,exception,get,metadata,name,cannot,parse,the,specified,url,url,url,normalized,url,environment,resolve,repo,url,url,if,normalized,url,null,string,log,message,the,specified,url,doesn,t,start,with,any,repository,paths,specified,by,the,path,repo,setting,or,by,setting,logger,warn,log,message,url,get,key,environment,repo,files,string,exception,message,file,url,url,doesn,t,match,any,of,the,locations,specified,by,path,repo,or,get,key,throw,new,repository,exception,get,metadata,name,exception,message,return,normalized,url,throw,new,repository,exception,get,metadata,name,unsupported,url,protocol,protocol,from,url,url
URLRepository -> private URL checkURL(URL url);1542646292;Makes sure that the url is white listed or if it points to the local file system it matches one on of the root path in path.repo;private URL checkURL(URL url) {_        String protocol = url.getProtocol()__        if (protocol == null) {_            throw new RepositoryException(getMetadata().name(), "unknown url protocol from URL [" + url + "]")__        }_        for (String supportedProtocol : supportedProtocols) {_            if (supportedProtocol.equals(protocol)) {_                try {_                    if (URIPattern.match(urlWhiteList, url.toURI())) {_                        _                        return url__                    }_                } catch (URISyntaxException ex) {_                    logger.warn("cannot parse the specified url [{}]", url)__                    throw new RepositoryException(getMetadata().name(), "cannot parse the specified url [" + url + "]")__                }_                _                URL normalizedUrl = environment.resolveRepoURL(url)__                if (normalizedUrl == null) {_                    String logMessage = "The specified url [{}] doesn't start with any repository paths specified by the " +_                        "path.repo setting or by {} setting: [{}] "__                    logger.warn(logMessage, url, ALLOWED_URLS_SETTING.getKey(), environment.repoFiles())__                    String exceptionMessage = "file url [" + url + "] doesn't match any of the locations specified by path.repo or "_                        + ALLOWED_URLS_SETTING.getKey()__                    throw new RepositoryException(getMetadata().name(), exceptionMessage)__                }_                return normalizedUrl__            }_        }_        throw new RepositoryException(getMetadata().name(), "unsupported url protocol [" + protocol + "] from URL [" + url + "]")__    };makes,sure,that,the,url,is,white,listed,or,if,it,points,to,the,local,file,system,it,matches,one,on,of,the,root,path,in,path,repo;private,url,check,url,url,url,string,protocol,url,get,protocol,if,protocol,null,throw,new,repository,exception,get,metadata,name,unknown,url,protocol,from,url,url,for,string,supported,protocol,supported,protocols,if,supported,protocol,equals,protocol,try,if,uripattern,match,url,white,list,url,to,uri,return,url,catch,urisyntax,exception,ex,logger,warn,cannot,parse,the,specified,url,url,throw,new,repository,exception,get,metadata,name,cannot,parse,the,specified,url,url,url,normalized,url,environment,resolve,repo,url,url,if,normalized,url,null,string,log,message,the,specified,url,doesn,t,start,with,any,repository,paths,specified,by,the,path,repo,setting,or,by,setting,logger,warn,log,message,url,get,key,environment,repo,files,string,exception,message,file,url,url,doesn,t,match,any,of,the,locations,specified,by,path,repo,or,get,key,throw,new,repository,exception,get,metadata,name,exception,message,return,normalized,url,throw,new,repository,exception,get,metadata,name,unsupported,url,protocol,protocol,from,url,url
URLRepository -> private URL checkURL(URL url);1550647627;Makes sure that the url is white listed or if it points to the local file system it matches one on of the root path in path.repo;private URL checkURL(URL url) {_        String protocol = url.getProtocol()__        if (protocol == null) {_            throw new RepositoryException(getMetadata().name(), "unknown url protocol from URL [" + url + "]")__        }_        for (String supportedProtocol : supportedProtocols) {_            if (supportedProtocol.equals(protocol)) {_                try {_                    if (URIPattern.match(urlWhiteList, url.toURI())) {_                        _                        return url__                    }_                } catch (URISyntaxException ex) {_                    logger.warn("cannot parse the specified url [{}]", url)__                    throw new RepositoryException(getMetadata().name(), "cannot parse the specified url [" + url + "]")__                }_                _                URL normalizedUrl = environment.resolveRepoURL(url)__                if (normalizedUrl == null) {_                    String logMessage = "The specified url [{}] doesn't start with any repository paths specified by the " +_                        "path.repo setting or by {} setting: [{}] "__                    logger.warn(logMessage, url, ALLOWED_URLS_SETTING.getKey(), environment.repoFiles())__                    String exceptionMessage = "file url [" + url + "] doesn't match any of the locations specified by path.repo or "_                        + ALLOWED_URLS_SETTING.getKey()__                    throw new RepositoryException(getMetadata().name(), exceptionMessage)__                }_                return normalizedUrl__            }_        }_        throw new RepositoryException(getMetadata().name(), "unsupported url protocol [" + protocol + "] from URL [" + url + "]")__    };makes,sure,that,the,url,is,white,listed,or,if,it,points,to,the,local,file,system,it,matches,one,on,of,the,root,path,in,path,repo;private,url,check,url,url,url,string,protocol,url,get,protocol,if,protocol,null,throw,new,repository,exception,get,metadata,name,unknown,url,protocol,from,url,url,for,string,supported,protocol,supported,protocols,if,supported,protocol,equals,protocol,try,if,uripattern,match,url,white,list,url,to,uri,return,url,catch,urisyntax,exception,ex,logger,warn,cannot,parse,the,specified,url,url,throw,new,repository,exception,get,metadata,name,cannot,parse,the,specified,url,url,url,normalized,url,environment,resolve,repo,url,url,if,normalized,url,null,string,log,message,the,specified,url,doesn,t,start,with,any,repository,paths,specified,by,the,path,repo,setting,or,by,setting,logger,warn,log,message,url,get,key,environment,repo,files,string,exception,message,file,url,url,doesn,t,match,any,of,the,locations,specified,by,path,repo,or,get,key,throw,new,repository,exception,get,metadata,name,exception,message,return,normalized,url,throw,new,repository,exception,get,metadata,name,unsupported,url,protocol,protocol,from,url,url
URLRepository -> public URLRepository(RepositoryMetaData metadata, Environment environment,                          NamedXContentRegistry namedXContentRegistry);1531729807;Constructs a read-only URL-based repository;public URLRepository(RepositoryMetaData metadata, Environment environment,_                         NamedXContentRegistry namedXContentRegistry) {_        super(metadata, environment.settings(), namedXContentRegistry)___        if (URL_SETTING.exists(metadata.settings()) == false && REPOSITORIES_URL_SETTING.exists(settings) ==  false) {_            throw new RepositoryException(metadata.name(), "missing url")__        }_        this.environment = environment__        supportedProtocols = SUPPORTED_PROTOCOLS_SETTING.get(settings)__        urlWhiteList = ALLOWED_URLS_SETTING.get(settings).toArray(new URIPattern[]{})__        basePath = BlobPath.cleanPath()__        url = URL_SETTING.exists(metadata.settings())_            ? URL_SETTING.get(metadata.settings()) : REPOSITORIES_URL_SETTING.get(settings)__    };constructs,a,read,only,url,based,repository;public,urlrepository,repository,meta,data,metadata,environment,environment,named,xcontent,registry,named,xcontent,registry,super,metadata,environment,settings,named,xcontent,registry,if,exists,metadata,settings,false,exists,settings,false,throw,new,repository,exception,metadata,name,missing,url,this,environment,environment,supported,protocols,get,settings,url,white,list,get,settings,to,array,new,uripattern,base,path,blob,path,clean,path,url,exists,metadata,settings,get,metadata,settings,get,settings
URLRepository -> public URLRepository(RepositoryMetaData metadata, Environment environment,                          NamedXContentRegistry namedXContentRegistry);1541008027;Constructs a read-only URL-based repository;public URLRepository(RepositoryMetaData metadata, Environment environment,_                         NamedXContentRegistry namedXContentRegistry) {_        super(metadata, environment.settings(), namedXContentRegistry)___        if (URL_SETTING.exists(metadata.settings()) == false && REPOSITORIES_URL_SETTING.exists(environment.settings()) ==  false) {_            throw new RepositoryException(metadata.name(), "missing url")__        }_        this.environment = environment__        supportedProtocols = SUPPORTED_PROTOCOLS_SETTING.get(environment.settings())__        urlWhiteList = ALLOWED_URLS_SETTING.get(environment.settings()).toArray(new URIPattern[]{})__        basePath = BlobPath.cleanPath()__        url = URL_SETTING.exists(metadata.settings())_            ? URL_SETTING.get(metadata.settings()) : REPOSITORIES_URL_SETTING.get(environment.settings())__    };constructs,a,read,only,url,based,repository;public,urlrepository,repository,meta,data,metadata,environment,environment,named,xcontent,registry,named,xcontent,registry,super,metadata,environment,settings,named,xcontent,registry,if,exists,metadata,settings,false,exists,environment,settings,false,throw,new,repository,exception,metadata,name,missing,url,this,environment,environment,supported,protocols,get,environment,settings,url,white,list,get,environment,settings,to,array,new,uripattern,base,path,blob,path,clean,path,url,exists,metadata,settings,get,metadata,settings,get,environment,settings
URLRepository -> public URLRepository(RepositoryMetaData metadata, Environment environment,                          NamedXContentRegistry namedXContentRegistry);1542646292;Constructs a read-only URL-based repository;public URLRepository(RepositoryMetaData metadata, Environment environment,_                         NamedXContentRegistry namedXContentRegistry) {_        super(metadata, environment.settings(), namedXContentRegistry)___        if (URL_SETTING.exists(metadata.settings()) == false && REPOSITORIES_URL_SETTING.exists(environment.settings()) ==  false) {_            throw new RepositoryException(metadata.name(), "missing url")__        }_        this.environment = environment__        supportedProtocols = SUPPORTED_PROTOCOLS_SETTING.get(environment.settings())__        urlWhiteList = ALLOWED_URLS_SETTING.get(environment.settings()).toArray(new URIPattern[]{})__        basePath = BlobPath.cleanPath()__        url = URL_SETTING.exists(metadata.settings())_            ? URL_SETTING.get(metadata.settings()) : REPOSITORIES_URL_SETTING.get(environment.settings())__    };constructs,a,read,only,url,based,repository;public,urlrepository,repository,meta,data,metadata,environment,environment,named,xcontent,registry,named,xcontent,registry,super,metadata,environment,settings,named,xcontent,registry,if,exists,metadata,settings,false,exists,environment,settings,false,throw,new,repository,exception,metadata,name,missing,url,this,environment,environment,supported,protocols,get,environment,settings,url,white,list,get,environment,settings,to,array,new,uripattern,base,path,blob,path,clean,path,url,exists,metadata,settings,get,metadata,settings,get,environment,settings
URLRepository -> public URLRepository(RepositoryMetaData metadata, Environment environment,                          NamedXContentRegistry namedXContentRegistry);1550647627;Constructs a read-only URL-based repository;public URLRepository(RepositoryMetaData metadata, Environment environment,_                         NamedXContentRegistry namedXContentRegistry) {_        super(metadata, environment.settings(), false, namedXContentRegistry)___        if (URL_SETTING.exists(metadata.settings()) == false && REPOSITORIES_URL_SETTING.exists(environment.settings()) ==  false) {_            throw new RepositoryException(metadata.name(), "missing url")__        }_        this.environment = environment__        supportedProtocols = SUPPORTED_PROTOCOLS_SETTING.get(environment.settings())__        urlWhiteList = ALLOWED_URLS_SETTING.get(environment.settings()).toArray(new URIPattern[]{})__        basePath = BlobPath.cleanPath()__        url = URL_SETTING.exists(metadata.settings())_            ? URL_SETTING.get(metadata.settings()) : REPOSITORIES_URL_SETTING.get(environment.settings())__    };constructs,a,read,only,url,based,repository;public,urlrepository,repository,meta,data,metadata,environment,environment,named,xcontent,registry,named,xcontent,registry,super,metadata,environment,settings,false,named,xcontent,registry,if,exists,metadata,settings,false,exists,environment,settings,false,throw,new,repository,exception,metadata,name,missing,url,this,environment,environment,supported,protocols,get,environment,settings,url,white,list,get,environment,settings,to,array,new,uripattern,base,path,blob,path,clean,path,url,exists,metadata,settings,get,metadata,settings,get,environment,settings
