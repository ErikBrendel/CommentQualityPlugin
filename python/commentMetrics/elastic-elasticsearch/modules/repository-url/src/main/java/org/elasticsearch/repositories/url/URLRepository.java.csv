commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;@Override protected BlobStore createBlobStore() {     URL normalizedURL = checkURL(url).     return new URLBlobStore(environment.settings(), normalizedURL). }
true;protected;0;4;// only use for testing ;// only use for testing @Override protected BlobContainer blobContainer() {     return super.blobContainer(). }
true;protected;0;4;// only use for testing ;// only use for testing @Override protected BlobStore getBlobStore() {     return super.getBlobStore(). }
false;protected;0;4;;@Override protected BlobPath basePath() {     return basePath. }
true;private;1;31;/**  * Makes sure that the url is white listed or if it points to the local file system it matches one on of the root path in path.repo  */ ;/**  * Makes sure that the url is white listed or if it points to the local file system it matches one on of the root path in path.repo  */ private URL checkURL(URL url) {     String protocol = url.getProtocol().     if (protocol == null) {         throw new RepositoryException(getMetadata().name(), "unknown url protocol from URL [" + url + "]").     }     for (String supportedProtocol : supportedProtocols) {         if (supportedProtocol.equals(protocol)) {             try {                 if (URIPattern.match(urlWhiteList, url.toURI())) {                     // URL matches white list - no additional processing is needed                     return url.                 }             } catch (URISyntaxException ex) {                 logger.warn("cannot parse the specified url [{}]", url).                 throw new RepositoryException(getMetadata().name(), "cannot parse the specified url [" + url + "]").             }             // We didn't match white list - try to resolve against path.repo             URL normalizedUrl = environment.resolveRepoURL(url).             if (normalizedUrl == null) {                 String logMessage = "The specified url [{}] doesn't start with any repository paths specified by the " + "path.repo setting or by {} setting: [{}] ".                 logger.warn(logMessage, url, ALLOWED_URLS_SETTING.getKey(), environment.repoFiles()).                 String exceptionMessage = "file url [" + url + "] doesn't match any of the locations specified by path.repo or " + ALLOWED_URLS_SETTING.getKey().                 throw new RepositoryException(getMetadata().name(), exceptionMessage).             }             return normalizedUrl.         }     }     throw new RepositoryException(getMetadata().name(), "unsupported url protocol [" + protocol + "] from URL [" + url + "]"). }
false;public;0;4;;@Override public boolean isReadOnly() {     return true. }
false;private,static;1;7;;private static URL parseURL(String s) {     try {         return new URL(s).     } catch (MalformedURLException e) {         throw new IllegalArgumentException("Unable to parse URL repository setting", e).     } }
