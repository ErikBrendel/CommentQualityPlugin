commented;modifiers;parameterAmount;loc;comment;code
false;;1;3;;boolean hitsExecutionNeeded(SearchContext context) {     // for testing     return context.highlight() != null && locatePercolatorQuery(context.query()).isEmpty() == false. }
false;public;2;72;;@Override public void hitsExecute(SearchContext context, SearchHit[] hits) throws IOException {     if (hitsExecutionNeeded(context) == false) {         return.     }     List<PercolateQuery> percolateQueries = locatePercolatorQuery(context.query()).     if (percolateQueries.isEmpty()) {         // shouldn't happen as we checked for the existence of a percolator query in hitsExecutionNeeded(...)         throw new IllegalStateException("couldn't locate percolator query").     }     boolean singlePercolateQuery = percolateQueries.size() == 1.     for (PercolateQuery percolateQuery : percolateQueries) {         String fieldName = singlePercolateQuery ? PercolatorMatchedSlotSubFetchPhase.FIELD_NAME_PREFIX : PercolatorMatchedSlotSubFetchPhase.FIELD_NAME_PREFIX + "_" + percolateQuery.getName().         List<LeafReaderContext> ctxs = context.searcher().getIndexReader().leaves().         IndexSearcher percolatorIndexSearcher = percolateQuery.getPercolatorIndexSearcher().         PercolateQuery.QueryStore queryStore = percolateQuery.getQueryStore().         LeafReaderContext percolatorLeafReaderContext = percolatorIndexSearcher.getIndexReader().leaves().get(0).         FetchSubPhase.HitContext hitContext = new FetchSubPhase.HitContext().         for (SearchHit hit : hits) {             LeafReaderContext ctx = ctxs.get(ReaderUtil.subIndex(hit.docId(), ctxs)).             int segmentDocId = hit.docId() - ctx.docBase.             final Query query = queryStore.getQueries(ctx).apply(segmentDocId).             if (query != null) {                 DocumentField field = hit.field(fieldName).                 if (field == null) {                     // so then continue highlighting with the next hit.                     continue.                 }                 for (Object matchedSlot : field.getValues()) {                     int slot = (int) matchedSlot.                     BytesReference document = percolateQuery.getDocuments().get(slot).                     SubSearchContext subSearchContext = createSubSearchContext(context, percolatorLeafReaderContext, document, slot).                     subSearchContext.parsedQuery(new ParsedQuery(query)).                     hitContext.reset(new SearchHit(slot, "unknown", new Text(hit.getType()), Collections.emptyMap()), percolatorLeafReaderContext, slot, percolatorIndexSearcher).                     hitContext.cache().clear().                     highlightPhase.hitExecute(subSearchContext, hitContext).                     for (Map.Entry<String, HighlightField> entry : hitContext.hit().getHighlightFields().entrySet()) {                         if (percolateQuery.getDocuments().size() == 1) {                             String hlFieldName.                             if (singlePercolateQuery) {                                 hlFieldName = entry.getKey().                             } else {                                 hlFieldName = percolateQuery.getName() + "_" + entry.getKey().                             }                             hit.getHighlightFields().put(hlFieldName, new HighlightField(hlFieldName, entry.getValue().fragments())).                         } else {                             // In case multiple documents are being percolated we need to identify to which document                             // a highlight belongs to.                             String hlFieldName.                             if (singlePercolateQuery) {                                 hlFieldName = slot + "_" + entry.getKey().                             } else {                                 hlFieldName = percolateQuery.getName() + "_" + slot + "_" + entry.getKey().                             }                             hit.getHighlightFields().put(hlFieldName, new HighlightField(hlFieldName, entry.getValue().fragments())).                         }                     }                 }             }         }     } }
false;static;1;30;;static List<PercolateQuery> locatePercolatorQuery(Query query) {     if (query instanceof PercolateQuery) {         return Collections.singletonList((PercolateQuery) query).     } else if (query instanceof BooleanQuery) {         List<PercolateQuery> percolateQueries = new ArrayList<>().         for (BooleanClause clause : ((BooleanQuery) query).clauses()) {             List<PercolateQuery> result = locatePercolatorQuery(clause.getQuery()).             if (result.isEmpty() == false) {                 percolateQueries.addAll(result).             }         }         return percolateQueries.     } else if (query instanceof DisjunctionMaxQuery) {         List<PercolateQuery> percolateQueries = new ArrayList<>().         for (Query disjunct : ((DisjunctionMaxQuery) query).getDisjuncts()) {             List<PercolateQuery> result = locatePercolatorQuery(disjunct).             if (result.isEmpty() == false) {                 percolateQueries.addAll(result).             }         }         return percolateQueries.     } else if (query instanceof ConstantScoreQuery) {         return locatePercolatorQuery(((ConstantScoreQuery) query).getQuery()).     } else if (query instanceof BoostQuery) {         return locatePercolatorQuery(((BoostQuery) query).getQuery()).     } else if (query instanceof FunctionScoreQuery) {         return locatePercolatorQuery(((FunctionScoreQuery) query).getSubQuery()).     }     return Collections.emptyList(). }
false;private;4;10;;private SubSearchContext createSubSearchContext(SearchContext context, LeafReaderContext leafReaderContext, BytesReference source, int docId) {     SubSearchContext subSearchContext = new SubSearchContext(context).     subSearchContext.highlight(new SearchContextHighlight(context.highlight().fields())).     // Enforce highlighting by source, because MemoryIndex doesn't support stored fields.     subSearchContext.highlight().globalForceSource(true).     subSearchContext.lookup().source().setSegmentAndDocument(leafReaderContext, docId).     subSearchContext.lookup().source().setSource(source).     return subSearchContext. }
