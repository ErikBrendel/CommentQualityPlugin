commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void init() throws Exception {     directory = newDirectory().     IndexWriterConfig config = new IndexWriterConfig(new WhitespaceAnalyzer()).     config.setMergePolicy(NoMergePolicy.INSTANCE).     indexWriter = new IndexWriter(directory, config). }
false;public;0;5;;@After public void destroy() throws Exception {     directoryReader.close().     directory.close(). }
false;public;0;98;;public void testPercolateQuery() throws Exception {     List<Iterable<? extends IndexableField>> docs = new ArrayList<>().     List<Query> queries = new ArrayList<>().     PercolateQuery.QueryStore queryStore = ctx -> queries::get.     queries.add(new TermQuery(new Term("field", "fox"))).     docs.add(Collections.singleton(new StringField("select", "a", Field.Store.NO))).     SpanNearQuery.Builder snp = new SpanNearQuery.Builder("field", true).     snp.addClause(new SpanTermQuery(new Term("field", "jumps"))).     snp.addClause(new SpanTermQuery(new Term("field", "lazy"))).     snp.addClause(new SpanTermQuery(new Term("field", "dog"))).     snp.setSlop(2).     queries.add(snp.build()).     docs.add(Collections.singleton(new StringField("select", "b", Field.Store.NO))).     PhraseQuery.Builder pq1 = new PhraseQuery.Builder().     pq1.add(new Term("field", "quick")).     pq1.add(new Term("field", "brown")).     pq1.add(new Term("field", "jumps")).     pq1.setSlop(1).     queries.add(pq1.build()).     docs.add(Collections.singleton(new StringField("select", "b", Field.Store.NO))).     BooleanQuery.Builder bq1 = new BooleanQuery.Builder().     bq1.add(new TermQuery(new Term("field", "quick")), BooleanClause.Occur.MUST).     bq1.add(new TermQuery(new Term("field", "brown")), BooleanClause.Occur.MUST).     bq1.add(new TermQuery(new Term("field", "fox")), BooleanClause.Occur.MUST).     queries.add(bq1.build()).     docs.add(Collections.singleton(new StringField("select", "b", Field.Store.NO))).     indexWriter.addDocuments(docs).     indexWriter.close().     directoryReader = DirectoryReader.open(directory).     IndexSearcher shardSearcher = newSearcher(directoryReader).     MemoryIndex memoryIndex = new MemoryIndex().     memoryIndex.addField("field", "the quick brown fox jumps over the lazy dog", new WhitespaceAnalyzer()).     IndexSearcher percolateSearcher = memoryIndex.createSearcher().     // no scoring, wrapping it in a constant score query:     Query query = new ConstantScoreQuery(new PercolateQuery("_name", queryStore, Collections.singletonList(new BytesArray("a")), new TermQuery(new Term("select", "a")), percolateSearcher, null, new MatchNoDocsQuery(""))).     TopDocs topDocs = shardSearcher.search(query, 10).     assertThat(topDocs.totalHits.value, equalTo(1L)).     assertThat(topDocs.scoreDocs.length, equalTo(1)).     assertThat(topDocs.scoreDocs[0].doc, equalTo(0)).     Explanation explanation = shardSearcher.explain(query, 0).     assertThat(explanation.isMatch(), is(true)).     assertThat(explanation.getValue(), equalTo(topDocs.scoreDocs[0].score)).     query = new ConstantScoreQuery(new PercolateQuery("_name", queryStore, Collections.singletonList(new BytesArray("b")), new TermQuery(new Term("select", "b")), percolateSearcher, null, new MatchNoDocsQuery(""))).     topDocs = shardSearcher.search(query, 10).     assertThat(topDocs.totalHits.value, equalTo(3L)).     assertThat(topDocs.scoreDocs.length, equalTo(3)).     assertThat(topDocs.scoreDocs[0].doc, equalTo(1)).     explanation = shardSearcher.explain(query, 1).     assertThat(explanation.isMatch(), is(true)).     assertThat(explanation.getValue(), equalTo(topDocs.scoreDocs[0].score)).     assertThat(topDocs.scoreDocs[1].doc, equalTo(2)).     explanation = shardSearcher.explain(query, 2).     assertThat(explanation.isMatch(), is(true)).     assertThat(explanation.getValue(), equalTo(topDocs.scoreDocs[1].score)).     assertThat(topDocs.scoreDocs[2].doc, equalTo(3)).     explanation = shardSearcher.explain(query, 2).     assertThat(explanation.isMatch(), is(true)).     assertThat(explanation.getValue(), equalTo(topDocs.scoreDocs[2].score)).     query = new ConstantScoreQuery(new PercolateQuery("_name", queryStore, Collections.singletonList(new BytesArray("c")), new MatchAllDocsQuery(), percolateSearcher, null, new MatchAllDocsQuery())).     topDocs = shardSearcher.search(query, 10).     assertThat(topDocs.totalHits.value, equalTo(4L)).     query = new PercolateQuery("_name", queryStore, Collections.singletonList(new BytesArray("{}")), new TermQuery(new Term("select", "b")), percolateSearcher, null, new MatchNoDocsQuery("")).     topDocs = shardSearcher.search(query, 10).     assertThat(topDocs.totalHits.value, equalTo(3L)).     assertThat(topDocs.scoreDocs.length, equalTo(3)).     assertThat(topDocs.scoreDocs[0].doc, equalTo(3)).     explanation = shardSearcher.explain(query, 3).     assertThat(explanation.isMatch(), is(true)).     assertThat(explanation.getValue(), equalTo(topDocs.scoreDocs[0].score)).     assertThat(explanation.getDetails(), arrayWithSize(1)).     assertThat(topDocs.scoreDocs[1].doc, equalTo(2)).     explanation = shardSearcher.explain(query, 2).     assertThat(explanation.isMatch(), is(true)).     assertThat(explanation.getValue(), equalTo(topDocs.scoreDocs[1].score)).     assertThat(explanation.getDetails(), arrayWithSize(1)).     assertThat(topDocs.scoreDocs[2].doc, equalTo(1)).     explanation = shardSearcher.explain(query, 1).     assertThat(explanation.isMatch(), is(true)).     assertThat(explanation.getValue(), equalTo(topDocs.scoreDocs[2].score)).     assertThat(explanation.getDetails(), arrayWithSize(1)). }
