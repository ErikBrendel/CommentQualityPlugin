commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public TokenStream create(TokenStream tokenStream) {     throw new UnsupportedOperationException("getChainAwareTokenFilterFactory should be called first"). }
false;public;0;4;;@Override public String name() {     return ScriptedConditionTokenFilterFactory.this.name(). }
false;public;1;10;;@Override public TokenStream create(TokenStream tokenStream) {     Function<TokenStream, TokenStream> filter = in -> {         for (TokenFilterFactory tff : filters) {             in = tff.create(in).         }         return in.     }.     return new ScriptedConditionTokenFilter(tokenStream, filter, factory.newInstance()). }
false;public;4;35;;@Override public TokenFilterFactory getChainAwareTokenFilterFactory(TokenizerFactory tokenizer, List<CharFilterFactory> charFilters, List<TokenFilterFactory> previousTokenFilters, Function<String, TokenFilterFactory> allFilters) {     List<TokenFilterFactory> filters = new ArrayList<>().     List<TokenFilterFactory> existingChain = new ArrayList<>(previousTokenFilters).     for (String filter : filterNames) {         TokenFilterFactory tff = allFilters.apply(filter).         if (tff == null) {             throw new IllegalArgumentException("ScriptedConditionTokenFilter [" + name() + "] refers to undefined token filter [" + filter + "]").         }         tff = tff.getChainAwareTokenFilterFactory(tokenizer, charFilters, existingChain, allFilters).         filters.add(tff).         existingChain.add(tff).     }     return new TokenFilterFactory() {          @Override         public String name() {             return ScriptedConditionTokenFilterFactory.this.name().         }          @Override         public TokenStream create(TokenStream tokenStream) {             Function<TokenStream, TokenStream> filter = in -> {                 for (TokenFilterFactory tff : filters) {                     in = tff.create(in).                 }                 return in.             }.             return new ScriptedConditionTokenFilter(tokenStream, filter, factory.newInstance()).         }     }. }
false;protected;0;5;;@Override protected boolean shouldFilter() {     token.updatePosition().     return script.execute(token). }
