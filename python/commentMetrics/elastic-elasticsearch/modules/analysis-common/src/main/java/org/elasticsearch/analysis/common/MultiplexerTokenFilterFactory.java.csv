commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public TokenStream create(TokenStream tokenStream) {     throw new UnsupportedOperationException("TokenFilterFactory.getChainAwareTokenFilterFactory() must be called first"). }
false;public;0;15;;@Override public TokenFilterFactory getSynonymFilter() {     if (indexSettings.getIndexVersionCreated().onOrAfter(Version.V_7_0_0)) {         throw new IllegalArgumentException("Token filter [" + name() + "] cannot be used to parse synonyms").     } else {         if (preserveOriginal) {             DEPRECATION_LOGGER.deprecatedAndMaybeLog("synonym_tokenfilters", "Token filter [" + name() + "] will not be usable to parse synonyms after v7.0").             return IDENTITY_FILTER.         }         throw new IllegalArgumentException("Token filter [" + name() + "] cannot be used to parse synonyms unless [preserve_original] is [true]").     } }
false;public;0;4;;@Override public String name() {     return MultiplexerTokenFilterFactory.this.name(). }
false;public;1;8;;@Override public TokenStream create(TokenStream tokenStream) {     List<Function<TokenStream, TokenStream>> functions = new ArrayList<>().     for (TokenFilterFactory tff : filters) {         functions.add(tff::create).     }     return new RemoveDuplicatesTokenFilter(new MultiplexTokenFilter(tokenStream, functions)). }
false;public;0;15;;@Override public TokenFilterFactory getSynonymFilter() {     if (indexSettings.getIndexVersionCreated().onOrAfter(Version.V_7_0_0)) {         throw new IllegalArgumentException("Token filter [" + name() + "] cannot be used to parse synonyms").     } else {         if (preserveOriginal) {             DEPRECATION_LOGGER.deprecatedAndMaybeLog("synonym_tokenfilters", "Token filter [" + name() + "] will not be usable to parse synonyms after v7.0").             return IDENTITY_FILTER.         }         throw new IllegalArgumentException("Token filter [" + name() + "] cannot be used to parse synonyms unless [preserve_original] is [true]").     } }
false;public;4;59;;@Override public TokenFilterFactory getChainAwareTokenFilterFactory(TokenizerFactory tokenizer, List<CharFilterFactory> charFilters, List<TokenFilterFactory> previousTokenFilters, Function<String, TokenFilterFactory> allFilters) {     List<TokenFilterFactory> filters = new ArrayList<>().     if (preserveOriginal) {         filters.add(IDENTITY_FILTER).     }     for (String filter : filterNames) {         String[] parts = Strings.tokenizeToStringArray(filter, ",").         if (parts.length == 1) {             TokenFilterFactory factory = resolveFilterFactory(allFilters, parts[0]).             factory = factory.getChainAwareTokenFilterFactory(tokenizer, charFilters, previousTokenFilters, allFilters).             filters.add(factory).         } else {             List<TokenFilterFactory> existingChain = new ArrayList<>(previousTokenFilters).             List<TokenFilterFactory> chain = new ArrayList<>().             for (String subfilter : parts) {                 TokenFilterFactory factory = resolveFilterFactory(allFilters, subfilter).                 factory = factory.getChainAwareTokenFilterFactory(tokenizer, charFilters, existingChain, allFilters).                 chain.add(factory).                 existingChain.add(factory).             }             filters.add(chainFilters(filter, chain)).         }     }     return new TokenFilterFactory() {          @Override         public String name() {             return MultiplexerTokenFilterFactory.this.name().         }          @Override         public TokenStream create(TokenStream tokenStream) {             List<Function<TokenStream, TokenStream>> functions = new ArrayList<>().             for (TokenFilterFactory tff : filters) {                 functions.add(tff::create).             }             return new RemoveDuplicatesTokenFilter(new MultiplexTokenFilter(tokenStream, functions)).         }          @Override         public TokenFilterFactory getSynonymFilter() {             if (indexSettings.getIndexVersionCreated().onOrAfter(Version.V_7_0_0)) {                 throw new IllegalArgumentException("Token filter [" + name() + "] cannot be used to parse synonyms").             } else {                 if (preserveOriginal) {                     DEPRECATION_LOGGER.deprecatedAndMaybeLog("synonym_tokenfilters", "Token filter [" + name() + "] will not be usable to parse synonyms after v7.0").                     return IDENTITY_FILTER.                 }                 throw new IllegalArgumentException("Token filter [" + name() + "] cannot be used to parse synonyms unless [preserve_original] is [true]").             }         }     }. }
false;public;0;4;;@Override public String name() {     return name. }
false;public;1;7;;@Override public TokenStream create(TokenStream tokenStream) {     for (TokenFilterFactory tff : filters) {         tokenStream = tff.create(tokenStream).     }     return tokenStream. }
false;private;2;16;;private TokenFilterFactory chainFilters(String name, List<TokenFilterFactory> filters) {     return new TokenFilterFactory() {          @Override         public String name() {             return name.         }          @Override         public TokenStream create(TokenStream tokenStream) {             for (TokenFilterFactory tff : filters) {                 tokenStream = tff.create(tokenStream).             }             return tokenStream.         }     }. }
false;private;2;8;;private TokenFilterFactory resolveFilterFactory(Function<String, TokenFilterFactory> factories, String name) {     TokenFilterFactory factory = factories.apply(name).     if (factory == null) {         throw new IllegalArgumentException("Multiplexing filter [" + name() + "] refers to undefined tokenfilter [" + name + "]").     } else {         return factory.     } }
false;protected;0;4;;@Override protected boolean shouldFilter() {     return slot == selector. }
false;public;0;4;;@Override public boolean incrementToken() throws IOException {     return source.incrementToken(). }
false;public;0;4;;@Override public void end() throws IOException {     source.end(). }
false;public;0;4;;@Override public void reset() throws IOException {     source.reset(). }
false;public;0;15;;@Override public boolean incrementToken() throws IOException {     if (selector >= filterCount - 1) {         selector = 0.         if (input.incrementToken() == false) {             return false.         }         state = captureState().         return true.     }     restoreState(state).     posIncAtt.setPositionIncrement(0).     selector++.     return true. }
false;public;0;6;;@Override public void reset() throws IOException {     super.reset().     selector = filterCount - 1.     this.state = null. }
