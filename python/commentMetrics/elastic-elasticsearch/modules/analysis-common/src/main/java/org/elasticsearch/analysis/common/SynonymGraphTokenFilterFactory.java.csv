commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public TokenStream create(TokenStream tokenStream) {     throw new IllegalStateException("Call createPerAnalyzerSynonymGraphFactory to specialize this factory for an analysis chain first"). }
false;public;0;4;;@Override public String name() {     return name. }
false;public;1;4;;@Override public TokenStream create(TokenStream tokenStream) {     return synonyms.fst == null ? tokenStream : new SynonymGraphFilter(tokenStream, synonyms, false). }
false;public;4;19;;@Override public TokenFilterFactory getChainAwareTokenFilterFactory(TokenizerFactory tokenizer, List<CharFilterFactory> charFilters, List<TokenFilterFactory> previousTokenFilters, Function<String, TokenFilterFactory> allFilters) {     final Analyzer analyzer = buildSynonymAnalyzer(tokenizer, charFilters, previousTokenFilters, allFilters).     final SynonymMap synonyms = buildSynonyms(analyzer, getRulesFromSettings(environment)).     final String name = name().     return new TokenFilterFactory() {          @Override         public String name() {             return name.         }          @Override         public TokenStream create(TokenStream tokenStream) {             return synonyms.fst == null ? tokenStream : new SynonymGraphFilter(tokenStream, synonyms, false).         }     }. }
