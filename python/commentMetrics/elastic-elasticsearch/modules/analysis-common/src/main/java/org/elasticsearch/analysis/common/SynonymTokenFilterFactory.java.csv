commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public TokenStream create(TokenStream tokenStream) {     throw new IllegalStateException("Call createPerAnalyzerSynonymFactory to specialize this factory for an analysis chain first"). }
false;public;0;4;;@Override public String name() {     return name. }
false;public;1;4;;@Override public TokenStream create(TokenStream tokenStream) {     return synonyms.fst == null ? tokenStream : new SynonymFilter(tokenStream, synonyms, false). }
false;public;0;7;;@Override public TokenFilterFactory getSynonymFilter() {     // which doesn't support stacked input tokens     return IDENTITY_FILTER. }
false;public;4;27;;@Override public TokenFilterFactory getChainAwareTokenFilterFactory(TokenizerFactory tokenizer, List<CharFilterFactory> charFilters, List<TokenFilterFactory> previousTokenFilters, Function<String, TokenFilterFactory> allFilters) {     final Analyzer analyzer = buildSynonymAnalyzer(tokenizer, charFilters, previousTokenFilters, allFilters).     final SynonymMap synonyms = buildSynonyms(analyzer, getRulesFromSettings(environment)).     final String name = name().     return new TokenFilterFactory() {          @Override         public String name() {             return name.         }          @Override         public TokenStream create(TokenStream tokenStream) {             return synonyms.fst == null ? tokenStream : new SynonymFilter(tokenStream, synonyms, false).         }          @Override         public TokenFilterFactory getSynonymFilter() {             // which doesn't support stacked input tokens             return IDENTITY_FILTER.         }     }. }
false;;4;7;;Analyzer buildSynonymAnalyzer(TokenizerFactory tokenizer, List<CharFilterFactory> charFilters, List<TokenFilterFactory> tokenFilters, Function<String, TokenFilterFactory> allFilters) {     return new CustomAnalyzer("synonyms", tokenizer, charFilters.toArray(new CharFilterFactory[0]), tokenFilters.stream().map(TokenFilterFactory::getSynonymFilter).toArray(TokenFilterFactory[]::new)). }
false;;2;15;;SynonymMap buildSynonyms(Analyzer analyzer, Reader rules) {     try {         SynonymMap.Builder parser.         if ("wordnet".equalsIgnoreCase(format)) {             parser = new ESWordnetSynonymParser(true, expand, lenient, analyzer).             ((ESWordnetSynonymParser) parser).parse(rules).         } else {             parser = new ESSolrSynonymParser(true, expand, lenient, analyzer).             ((ESSolrSynonymParser) parser).parse(rules).         }         return parser.build().     } catch (Exception e) {         throw new IllegalArgumentException("failed to build synonyms", e).     } }
false;;1;16;;Reader getRulesFromSettings(Environment env) {     Reader rulesReader.     if (settings.getAsList("synonyms", null) != null) {         List<String> rulesList = Analysis.getWordList(env, settings, "synonyms").         StringBuilder sb = new StringBuilder().         for (String line : rulesList) {             sb.append(line).append(System.lineSeparator()).         }         rulesReader = new StringReader(sb.toString()).     } else if (settings.get("synonyms_path") != null) {         rulesReader = Analysis.getReaderFromFile(env, settings, "synonyms_path").     } else {         throw new IllegalArgumentException("synonym requires either `synonyms` or `synonyms_path` to be configured").     }     return rulesReader. }
