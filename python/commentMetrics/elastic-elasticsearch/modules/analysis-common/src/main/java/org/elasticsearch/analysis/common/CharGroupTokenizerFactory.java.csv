commented;modifiers;parameterAmount;loc;comment;code
false;private;1;32;;private char parseEscapedChar(final String s) {     int len = s.length().     char c = s.charAt(0).     if (c == '\\') {         if (1 >= len)             throw new RuntimeException("Invalid escaped char in [" + s + "]").         c = s.charAt(1).         switch(c) {             case '\\':                 return '\\'.             case 'n':                 return '\n'.             case 't':                 return '\t'.             case 'r':                 return '\r'.             case 'b':                 return '\b'.             case 'f':                 return '\f'.             case 'u':                 if (len > 6) {                     throw new RuntimeException("Invalid escaped char in [" + s + "]").                 }                 return (char) Integer.parseInt(s.substring(2), 16).             default:                 throw new RuntimeException("Invalid escaped char " + c + " in [" + s + "]").         }     } else {         throw new RuntimeException("Invalid escaped char [" + s + "]").     } }
false;protected;1;19;;@Override protected boolean isTokenChar(int c) {     if (tokenizeOnSpace && Character.isWhitespace(c)) {         return false.     }     if (tokenizeOnLetter && Character.isLetter(c)) {         return false.     }     if (tokenizeOnDigit && Character.isDigit(c)) {         return false.     }     if (tokenizeOnPunctuation && CharMatcher.Basic.PUNCTUATION.isTokenChar(c)) {         return false.     }     if (tokenizeOnSymbol && CharMatcher.Basic.SYMBOL.isTokenChar(c)) {         return false.     }     return !tokenizeOnChars.contains(c). }
false;public;0;24;;@Override public Tokenizer create() {     return new CharTokenizer() {          @Override         protected boolean isTokenChar(int c) {             if (tokenizeOnSpace && Character.isWhitespace(c)) {                 return false.             }             if (tokenizeOnLetter && Character.isLetter(c)) {                 return false.             }             if (tokenizeOnDigit && Character.isDigit(c)) {                 return false.             }             if (tokenizeOnPunctuation && CharMatcher.Basic.PUNCTUATION.isTokenChar(c)) {                 return false.             }             if (tokenizeOnSymbol && CharMatcher.Basic.SYMBOL.isTokenChar(c)) {                 return false.             }             return !tokenizeOnChars.contains(c).         }     }. }
