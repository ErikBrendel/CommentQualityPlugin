commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public void testDefaultsCompoundAnalysis() throws Exception {     Settings settings = getJsonSettings().     IndexSettings idxSettings = IndexSettingsModule.newIndexSettings("test", settings).     AnalysisModule analysisModule = createAnalysisModule(settings).     TokenFilterFactory filterFactory = analysisModule.getAnalysisRegistry().buildTokenFilterFactories(idxSettings).get("dict_dec").     MatcherAssert.assertThat(filterFactory, instanceOf(DictionaryCompoundWordTokenFilterFactory.class)). }
false;public;0;9;;public void testDictionaryDecompounder() throws Exception {     Settings[] settingsArr = new Settings[] { getJsonSettings(), getYamlSettings() }.     for (Settings settings : settingsArr) {         List<String> terms = analyze(settings, "decompoundingAnalyzer", "donaudampfschiff spargelcremesuppe").         MatcherAssert.assertThat(terms.size(), equalTo(8)).         MatcherAssert.assertThat(terms, hasItems("donau", "dampf", "schiff", "donaudampfschiff", "spargel", "creme", "suppe", "spargelcremesuppe")).     } }
false;private;3;17;;private List<String> analyze(Settings settings, String analyzerName, String text) throws IOException {     IndexSettings idxSettings = IndexSettingsModule.newIndexSettings("test", settings).     AnalysisModule analysisModule = createAnalysisModule(settings).     IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings).     Analyzer analyzer = indexAnalyzers.get(analyzerName).analyzer().     TokenStream stream = analyzer.tokenStream("", text).     stream.reset().     CharTermAttribute termAtt = stream.addAttribute(CharTermAttribute.class).     List<String> terms = new ArrayList<>().     while (stream.incrementToken()) {         String tokText = termAtt.toString().         terms.add(tokText).     }     return terms. }
false;public;0;4;;@Override public Map<String, AnalysisProvider<TokenFilterFactory>> getTokenFilters() {     return singletonMap("myfilter", MyFilterTokenFilterFactory::new). }
false;private;1;9;;private AnalysisModule createAnalysisModule(Settings settings) throws IOException {     CommonAnalysisPlugin commonAnalysisPlugin = new CommonAnalysisPlugin().     return new AnalysisModule(TestEnvironment.newEnvironment(settings), Arrays.asList(commonAnalysisPlugin, new AnalysisPlugin() {          @Override         public Map<String, AnalysisProvider<TokenFilterFactory>> getTokenFilters() {             return singletonMap("myfilter", MyFilterTokenFilterFactory::new).         }     })). }
false;private;0;8;;private Settings getJsonSettings() throws IOException {     String json = "/org/elasticsearch/analysis/common/test1.json".     return Settings.builder().loadFromStream(json, getClass().getResourceAsStream(json), false).put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build(). }
false;private;0;8;;private Settings getYamlSettings() throws IOException {     String yaml = "/org/elasticsearch/analysis/common/test1.yml".     return Settings.builder().loadFromStream(yaml, getClass().getResourceAsStream(yaml), false).put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build(). }
