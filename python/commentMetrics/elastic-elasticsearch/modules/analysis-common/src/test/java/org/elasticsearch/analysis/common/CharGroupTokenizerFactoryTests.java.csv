commented;modifiers;parameterAmount;loc;comment;code
false;public;0;28;;public void testParseTokenChars() {     final Index index = new Index("test", "_na_").     final Settings indexSettings = newAnalysisSettingsBuilder().build().     IndexSettings indexProperties = IndexSettingsModule.newIndexSettings(index, indexSettings).     final String name = "cg".     for (String[] conf : Arrays.asList(new String[] { "\\v" }, new String[] { "\\u00245" }, new String[] { "commas" }, new String[] { "a", "b", "c", "\\$" })) {         final Settings settings = newAnalysisSettingsBuilder().putList("tokenize_on_chars", conf).build().         expectThrows(RuntimeException.class, () -> new CharGroupTokenizerFactory(indexProperties, null, name, settings).create()).     }     for (String[] conf : Arrays.asList(new String[0], new String[] { "\\n" }, new String[] { "\\u0024" }, new String[] { "whitespace" }, new String[] { "a", "b", "c" }, new String[] { "a", "b", "c", "\\r" }, new String[] { "\\r" }, new String[] { "f", "o", "o", "symbol" })) {         final Settings settings = newAnalysisSettingsBuilder().putList("tokenize_on_chars", Arrays.asList(conf)).build().         new CharGroupTokenizerFactory(indexProperties, null, name, settings).create().     // no exception     } }
false;public;0;10;;public void testTokenization() throws IOException {     final Index index = new Index("test", "_na_").     final String name = "cg".     final Settings indexSettings = newAnalysisSettingsBuilder().build().     final Settings settings = newAnalysisSettingsBuilder().putList("tokenize_on_chars", "whitespace", ":", "\\u0024").build().     Tokenizer tokenizer = new CharGroupTokenizerFactory(IndexSettingsModule.newIndexSettings(index, indexSettings), null, name, settings).create().     tokenizer.setReader(new StringReader("foo bar $34 test:test2")).     assertTokenStreamContents(tokenizer, new String[] { "foo", "bar", "34", "test", "test2" }). }
