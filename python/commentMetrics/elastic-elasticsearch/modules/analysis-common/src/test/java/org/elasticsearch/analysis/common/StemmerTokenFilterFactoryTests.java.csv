commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;public void testEnglishFilterFactory() throws IOException {     int iters = scaledRandomIntBetween(20, 100).     for (int i = 0. i < iters. i++) {         Version v = VersionUtils.randomVersion(random()).         Settings settings = Settings.builder().put("index.analysis.filter.my_english.type", "stemmer").put("index.analysis.filter.my_english.language", "english").put("index.analysis.analyzer.my_english.tokenizer", "whitespace").put("index.analysis.analyzer.my_english.filter", "my_english").put(SETTING_VERSION_CREATED, v).put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build().         ESTestCase.TestAnalysis analysis = AnalysisTestsHelper.createTestAnalysisFromSettings(settings, PLUGIN).         TokenFilterFactory tokenFilter = analysis.tokenFilter.get("my_english").         assertThat(tokenFilter, instanceOf(StemmerTokenFilterFactory.class)).         Tokenizer tokenizer = new WhitespaceTokenizer().         tokenizer.setReader(new StringReader("foo bar")).         TokenStream create = tokenFilter.create(tokenizer).         IndexAnalyzers indexAnalyzers = analysis.indexAnalyzers.         NamedAnalyzer analyzer = indexAnalyzers.get("my_english").         assertThat(create, instanceOf(PorterStemFilter.class)).         assertAnalyzesTo(analyzer, "consolingly", new String[] { "consolingli" }).     } }
false;public;0;26;;public void testPorter2FilterFactory() throws IOException {     int iters = scaledRandomIntBetween(20, 100).     for (int i = 0. i < iters. i++) {         Version v = VersionUtils.randomVersion(random()).         Settings settings = Settings.builder().put("index.analysis.filter.my_porter2.type", "stemmer").put("index.analysis.filter.my_porter2.language", "porter2").put("index.analysis.analyzer.my_porter2.tokenizer", "whitespace").put("index.analysis.analyzer.my_porter2.filter", "my_porter2").put(SETTING_VERSION_CREATED, v).put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build().         ESTestCase.TestAnalysis analysis = AnalysisTestsHelper.createTestAnalysisFromSettings(settings, PLUGIN).         TokenFilterFactory tokenFilter = analysis.tokenFilter.get("my_porter2").         assertThat(tokenFilter, instanceOf(StemmerTokenFilterFactory.class)).         Tokenizer tokenizer = new WhitespaceTokenizer().         tokenizer.setReader(new StringReader("foo bar")).         TokenStream create = tokenFilter.create(tokenizer).         IndexAnalyzers indexAnalyzers = analysis.indexAnalyzers.         NamedAnalyzer analyzer = indexAnalyzers.get("my_porter2").         assertThat(create, instanceOf(SnowballFilter.class)).         assertAnalyzesTo(analyzer, "possibly", new String[] { "possibl" }).     } }
false;public;0;10;;public void testMultipleLanguagesThrowsException() throws IOException {     Version v = VersionUtils.randomVersion(random()).     Settings settings = Settings.builder().put("index.analysis.filter.my_english.type", "stemmer").putList("index.analysis.filter.my_english.language", "english", "light_english").put(SETTING_VERSION_CREATED, v).put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build().     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> AnalysisTestsHelper.createTestAnalysisFromSettings(settings, PLUGIN)).     assertEquals("Invalid stemmer class specified: [english, light_english]", e.getMessage()). }
