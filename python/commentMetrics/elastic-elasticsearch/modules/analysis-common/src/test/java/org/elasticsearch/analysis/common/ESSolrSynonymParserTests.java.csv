commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;public void testLenientParser() throws IOException, ParseException {     ESSolrSynonymParser parser = new ESSolrSynonymParser(true, false, true, new StandardAnalyzer()).     String rules = "&,and\n" + "come,advance,approach\n".     StringReader rulesReader = new StringReader(rules).     parser.parse(rulesReader).     SynonymMap synonymMap = parser.build().     Tokenizer tokenizer = new StandardTokenizer().     tokenizer.setReader(new StringReader("approach quietly then advance & destroy")).     TokenStream ts = new SynonymFilter(tokenizer, synonymMap, false).     assertTokenStreamContents(ts, new String[] { "come", "quietly", "then", "come", "destroy" }). }
false;public;0;14;;public void testLenientParserWithSomeIncorrectLines() throws IOException, ParseException {     CharArraySet stopSet = new CharArraySet(1, true).     stopSet.add("bar").     ESSolrSynonymParser parser = new ESSolrSynonymParser(true, false, true, new StandardAnalyzer(stopSet)).     String rules = "foo,bar,baz".     StringReader rulesReader = new StringReader(rules).     parser.parse(rulesReader).     SynonymMap synonymMap = parser.build().     Tokenizer tokenizer = new StandardTokenizer().     tokenizer.setReader(new StringReader("first word is foo, then bar and lastly baz")).     TokenStream ts = new SynonymFilter(new StopFilter(tokenizer, stopSet), synonymMap, false).     assertTokenStreamContents(ts, new String[] { "first", "word", "is", "foo", "then", "and", "lastly", "foo" }). }
false;public;0;9;;public void testNonLenientParser() {     ESSolrSynonymParser parser = new ESSolrSynonymParser(true, false, false, new StandardAnalyzer()).     String rules = "&,and=>and\n" + "come,advance,approach\n".     StringReader rulesReader = new StringReader(rules).     ParseException ex = expectThrows(ParseException.class, () -> parser.parse(rulesReader)).     assertThat(ex.getMessage(), containsString("Invalid synonym rule at line 1")). }
