commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;public void testPatternCaptureTokenFilter() throws Exception {     String json = "/org/elasticsearch/analysis/common/pattern_capture.json".     Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()).loadFromStream(json, getClass().getResourceAsStream(json), false).put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build().     IndexSettings idxSettings = IndexSettingsModule.newIndexSettings("index", settings).     IndexAnalyzers indexAnalyzers = createTestAnalysis(idxSettings, settings, new CommonAnalysisPlugin()).indexAnalyzers.     NamedAnalyzer analyzer1 = indexAnalyzers.get("single").     assertTokenStreamContents(analyzer1.tokenStream("test", "foobarbaz"), new String[] { "foobarbaz", "foobar", "foo" }).     NamedAnalyzer analyzer2 = indexAnalyzers.get("multi").     assertTokenStreamContents(analyzer2.tokenStream("test", "abc123def"), new String[] { "abc123def", "abc", "123", "def" }).     NamedAnalyzer analyzer3 = indexAnalyzers.get("preserve").     assertTokenStreamContents(analyzer3.tokenStream("test", "foobarbaz"), new String[] { "foobar", "foo" }). }
false;public;0;9;;public void testNoPatterns() {     try {         new PatternCaptureGroupTokenFilterFactory(IndexSettingsModule.newIndexSettings("test", Settings.EMPTY), null, "pattern_capture", Settings.builder().put("pattern", "foobar").build()).         fail("Expected IllegalArgumentException").     } catch (IllegalArgumentException e) {         assertThat(e.getMessage(), containsString("required setting 'patterns' is missing")).     } }
