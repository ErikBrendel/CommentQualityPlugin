commented;modifiers;parameterAmount;loc;comment;code
true;public;0;19;/**  * Tests using a keyword set for the keyword marker filter.  */ ;/**  * Tests using a keyword set for the keyword marker filter.  */ public void testKeywordSet() throws IOException {     Settings settings = Settings.builder().put("index.analysis.filter.my_keyword.type", "keyword_marker").put("index.analysis.filter.my_keyword.keywords", "running, sleeping").put("index.analysis.analyzer.my_keyword.type", "custom").put("index.analysis.analyzer.my_keyword.tokenizer", "standard").put("index.analysis.analyzer.my_keyword.filter", "my_keyword, porter_stem").put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build().     TestAnalysis analysis = AnalysisTestsHelper.createTestAnalysisFromSettings(settings, new CommonAnalysisPlugin()).     TokenFilterFactory tokenFilter = analysis.tokenFilter.get("my_keyword").     assertThat(tokenFilter, instanceOf(KeywordMarkerTokenFilterFactory.class)).     TokenStream filter = tokenFilter.create(new WhitespaceTokenizer()).     assertThat(filter, instanceOf(SetKeywordMarkerFilter.class)).     NamedAnalyzer analyzer = analysis.indexAnalyzers.get("my_keyword").     // jogging is not part of the keywords set, so verify that its the only stemmed word     assertAnalyzesTo(analyzer, "running jogging sleeping", new String[] { "running", "jog", "sleeping" }). }
true;public;0;18;/**  * Tests using a regular expression pattern for the keyword marker filter.  */ ;/**  * Tests using a regular expression pattern for the keyword marker filter.  */ public void testKeywordPattern() throws IOException {     Settings settings = Settings.builder().put("index.analysis.filter.my_keyword.type", "keyword_marker").put("index.analysis.filter.my_keyword.keywords_pattern", "run[a-z]ing").put("index.analysis.analyzer.my_keyword.type", "custom").put("index.analysis.analyzer.my_keyword.tokenizer", "standard").put("index.analysis.analyzer.my_keyword.filter", "my_keyword, porter_stem").put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build().     TestAnalysis analysis = AnalysisTestsHelper.createTestAnalysisFromSettings(settings, new CommonAnalysisPlugin()).     TokenFilterFactory tokenFilter = analysis.tokenFilter.get("my_keyword").     assertThat(tokenFilter, instanceOf(KeywordMarkerTokenFilterFactory.class)).     TokenStream filter = tokenFilter.create(new WhitespaceTokenizer()).     assertThat(filter, instanceOf(PatternKeywordMarkerFilter.class)).     NamedAnalyzer analyzer = analysis.indexAnalyzers.get("my_keyword").     // running should match the pattern, so it should not be stemmed but sleeping should     assertAnalyzesTo(analyzer, "running sleeping", new String[] { "running", "sleep" }). }
true;public;0;15;/**  * Verifies that both keywords and patterns cannot be specified together.  */ ;/**  * Verifies that both keywords and patterns cannot be specified together.  */ public void testCannotSpecifyBothKeywordsAndPattern() throws IOException {     Settings settings = Settings.builder().put("index.analysis.filter.my_keyword.type", "keyword_marker").put("index.analysis.filter.my_keyword.keywords", "running").put("index.analysis.filter.my_keyword.keywords_pattern", "run[a-z]ing").put("index.analysis.analyzer.my_keyword.type", "custom").put("index.analysis.analyzer.my_keyword.tokenizer", "standard").put("index.analysis.analyzer.my_keyword.filter", "my_keyword, porter_stem").put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build().     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> AnalysisTestsHelper.createTestAnalysisFromSettings(settings, new CommonAnalysisPlugin())).     assertEquals("cannot specify both `keywords_pattern` and `keywords` or `keywords_path`", e.getMessage()). }
