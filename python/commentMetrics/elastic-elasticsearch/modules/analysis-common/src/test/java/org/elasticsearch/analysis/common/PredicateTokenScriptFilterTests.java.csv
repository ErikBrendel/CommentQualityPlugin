commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean execute(Token token) {     return token.getTerm().length() > 5. }
false;public;2;6;;@Override public <FactoryType> FactoryType compile(Script script, ScriptContext<FactoryType> context) {     assertEquals(context, AnalysisPredicateScript.CONTEXT).     assertEquals(new Script("token.getTerm().length() > 5"), script).     return (FactoryType) factory. }
false;public;0;46;;public void testSimpleFilter() throws IOException {     Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build().     Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).put("index.analysis.filter.f.type", "predicate_token_filter").put("index.analysis.filter.f.script.source", "token.getTerm().length() > 5").put("index.analysis.analyzer.myAnalyzer.type", "custom").put("index.analysis.analyzer.myAnalyzer.tokenizer", "standard").putList("index.analysis.analyzer.myAnalyzer.filter", "f").build().     IndexSettings idxSettings = IndexSettingsModule.newIndexSettings("index", indexSettings).     AnalysisPredicateScript.Factory factory = () -> new AnalysisPredicateScript() {          @Override         public boolean execute(Token token) {             return token.getTerm().length() > 5.         }     }.     @SuppressWarnings("unchecked")     ScriptService scriptService = new ScriptService(indexSettings, Collections.emptyMap(), Collections.emptyMap()) {          @Override         public <FactoryType> FactoryType compile(Script script, ScriptContext<FactoryType> context) {             assertEquals(context, AnalysisPredicateScript.CONTEXT).             assertEquals(new Script("token.getTerm().length() > 5"), script).             return (FactoryType) factory.         }     }.     CommonAnalysisPlugin plugin = new CommonAnalysisPlugin().     plugin.createComponents(null, null, null, null, scriptService, null, null, null, null).     AnalysisModule module = new AnalysisModule(TestEnvironment.newEnvironment(settings), Collections.singletonList(plugin)).     IndexAnalyzers analyzers = module.getAnalysisRegistry().build(idxSettings).     try (NamedAnalyzer analyzer = analyzers.get("myAnalyzer")) {         assertNotNull(analyzer).         assertAnalyzesTo(analyzer, "Vorsprung Durch Technik", new String[] { "Vorsprung", "Technik" }).     } }
