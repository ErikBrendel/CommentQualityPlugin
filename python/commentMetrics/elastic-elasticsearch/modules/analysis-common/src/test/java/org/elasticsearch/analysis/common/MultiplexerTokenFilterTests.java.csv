commented;modifiers;parameterAmount;loc;comment;code
false;public;0;34;;public void testMultiplexingFilter() throws IOException {     Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build().     Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).put("index.analysis.filter.t.type", "truncate").put("index.analysis.filter.t.length", "2").put("index.analysis.filter.multiplexFilter.type", "multiplexer").putList("index.analysis.filter.multiplexFilter.filters", "lowercase, t", "uppercase").put("index.analysis.analyzer.myAnalyzer.type", "custom").put("index.analysis.analyzer.myAnalyzer.tokenizer", "standard").putList("index.analysis.analyzer.myAnalyzer.filter", "multiplexFilter").build().     IndexSettings idxSettings = IndexSettingsModule.newIndexSettings("index", indexSettings).     IndexAnalyzers indexAnalyzers = new AnalysisModule(TestEnvironment.newEnvironment(settings), Collections.singletonList(new CommonAnalysisPlugin())).getAnalysisRegistry().build(idxSettings).     try (NamedAnalyzer analyzer = indexAnalyzers.get("myAnalyzer")) {         assertNotNull(analyzer).         assertAnalyzesTo(analyzer, "ONe tHree", new String[] { "ONe", "on", "ONE", "tHree", "th", "THREE" }, new int[] { 1, 0, 0, 1, 0, 0 }).         // Duplicates are removed         assertAnalyzesTo(analyzer, "ONe THREE", new String[] { "ONe", "on", "ONE", "THREE", "th" }, new int[] { 1, 0, 0, 1, 0, 0 }).     } }
false;public;0;31;;public void testMultiplexingNoOriginal() throws IOException {     Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build().     Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).put("index.analysis.filter.t.type", "truncate").put("index.analysis.filter.t.length", "2").put("index.analysis.filter.multiplexFilter.type", "multiplexer").put("index.analysis.filter.multiplexFilter.preserve_original", "false").putList("index.analysis.filter.multiplexFilter.filters", "lowercase, t", "uppercase").put("index.analysis.analyzer.myAnalyzer.type", "custom").put("index.analysis.analyzer.myAnalyzer.tokenizer", "standard").putList("index.analysis.analyzer.myAnalyzer.filter", "multiplexFilter").build().     IndexSettings idxSettings = IndexSettingsModule.newIndexSettings("index", indexSettings).     IndexAnalyzers indexAnalyzers = new AnalysisModule(TestEnvironment.newEnvironment(settings), Collections.singletonList(new CommonAnalysisPlugin())).getAnalysisRegistry().build(idxSettings).     try (NamedAnalyzer analyzer = indexAnalyzers.get("myAnalyzer")) {         assertNotNull(analyzer).         assertAnalyzesTo(analyzer, "ONe tHree", new String[] { "on", "ONE", "th", "THREE" }, new int[] { 1, 0, 1, 0 }).     } }
