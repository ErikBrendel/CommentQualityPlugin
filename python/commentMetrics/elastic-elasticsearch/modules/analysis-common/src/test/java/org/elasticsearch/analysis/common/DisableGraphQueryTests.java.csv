commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> getPlugins() {     return Collections.singleton(CommonAnalysisPlugin.class). }
false;public;0;89;;@Before public void setup() {     Settings settings = Settings.builder().put("index.analysis.filter.shingle.type", "shingle").put("index.analysis.filter.shingle.output_unigrams", false).put("index.analysis.filter.shingle.min_size", 2).put("index.analysis.filter.shingle.max_size", 2).put("index.analysis.filter.shingle_unigram.type", "shingle").put("index.analysis.filter.shingle_unigram.output_unigrams", true).put("index.analysis.filter.shingle_unigram.min_size", 2).put("index.analysis.filter.shingle_unigram.max_size", 2).put("index.analysis.analyzer.text_shingle.tokenizer", "whitespace").put("index.analysis.analyzer.text_shingle.filter", "lowercase, shingle").put("index.analysis.analyzer.text_shingle_unigram.tokenizer", "whitespace").put("index.analysis.analyzer.text_shingle_unigram.filter", "lowercase, shingle_unigram").build().     indexService = createIndex("test", settings, "t", "text_shingle", "type=text,analyzer=text_shingle", "text_shingle_unigram", "type=text,analyzer=text_shingle_unigram").     shardContext = indexService.newQueryShardContext(0, null, () -> 0L, null).     // parsed queries for "text_shingle_unigram:(foo bar baz)" with query parsers     // that ignores position length attribute     expectedQueryWithUnigram = new BooleanQuery.Builder().add(new SynonymQuery(new Term("text_shingle_unigram", "foo"), new Term("text_shingle_unigram", "foo bar")), BooleanClause.Occur.SHOULD).add(new SynonymQuery(new Term("text_shingle_unigram", "bar"), new Term("text_shingle_unigram", "bar baz")), BooleanClause.Occur.SHOULD).add(new TermQuery(new Term("text_shingle_unigram", "baz")), BooleanClause.Occur.SHOULD).build().     // parsed query for "text_shingle_unigram:\"foo bar baz\" with query parsers     // that ignores position length attribute     expectedPhraseQueryWithUnigram = new MultiPhraseQuery.Builder().add(new Term[] { new Term("text_shingle_unigram", "foo"), new Term("text_shingle_unigram", "foo bar") }, 0).add(new Term[] { new Term("text_shingle_unigram", "bar"), new Term("text_shingle_unigram", "bar baz") }, 1).add(new Term[] { new Term("text_shingle_unigram", "baz") }, 2).build().     // parsed query for "text_shingle:(foo bar baz)     expectedQuery = new BooleanQuery.Builder().add(new TermQuery(new Term("text_shingle", "foo bar")), BooleanClause.Occur.SHOULD).add(new TermQuery(new Term("text_shingle", "bar baz")), BooleanClause.Occur.SHOULD).add(new TermQuery(new Term("text_shingle", "baz biz")), BooleanClause.Occur.SHOULD).build().     // parsed query for "text_shingle:"foo bar baz"     expectedPhraseQuery = new PhraseQuery.Builder().add(new Term("text_shingle", "foo bar")).add(new Term("text_shingle", "bar baz")).add(new Term("text_shingle", "baz biz")).build(). }
false;public;0;7;;@After public void cleanup() {     indexService = null.     shardContext = null.     expectedQuery = null.     expectedPhraseQuery = null. }
false;public;0;11;;public void testMatchPhraseQuery() throws IOException {     MatchPhraseQueryBuilder builder = new MatchPhraseQueryBuilder("text_shingle_unigram", "foo bar baz").     Query query = builder.toQuery(shardContext).     assertThat(expectedPhraseQueryWithUnigram, equalTo(query)).     builder = new MatchPhraseQueryBuilder("text_shingle", "foo bar baz biz").     query = builder.toQuery(shardContext).     assertThat(expectedPhraseQuery, equalTo(query)). }
false;public;0;10;;public void testMatchQuery() throws IOException {     MatchQueryBuilder builder = new MatchQueryBuilder("text_shingle_unigram", "foo bar baz").     Query query = builder.toQuery(shardContext).     assertThat(expectedQueryWithUnigram, equalTo(query)).     builder = new MatchQueryBuilder("text_shingle", "foo bar baz biz").     query = builder.toQuery(shardContext).     assertThat(expectedQuery, equalTo(query)). }
false;public;0;18;;public void testMultiMatchQuery() throws IOException {     MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder("foo bar baz", "text_shingle_unigram").     Query query = builder.toQuery(shardContext).     assertThat(expectedQueryWithUnigram, equalTo(query)).     builder.type(MatchQuery.Type.PHRASE).     query = builder.toQuery(shardContext).     assertThat(expectedPhraseQueryWithUnigram, equalTo(query)).     builder = new MultiMatchQueryBuilder("foo bar baz biz", "text_shingle").     query = builder.toQuery(shardContext).     assertThat(expectedQuery, equalTo(query)).     builder.type(MatchQuery.Type.PHRASE).     query = builder.toQuery(shardContext).     assertThat(expectedPhraseQuery, equalTo(query)). }
false;public;0;25;;public void testSimpleQueryString() throws IOException {     SimpleQueryStringBuilder builder = new SimpleQueryStringBuilder("foo bar baz").     builder.field("text_shingle_unigram").     builder.flags(SimpleQueryStringFlag.NONE).     Query query = builder.toQuery(shardContext).     assertThat(expectedQueryWithUnigram, equalTo(query)).     builder = new SimpleQueryStringBuilder("\"foo bar baz\"").     builder.field("text_shingle_unigram").     builder.flags(SimpleQueryStringFlag.PHRASE).     query = builder.toQuery(shardContext).     assertThat(expectedPhraseQueryWithUnigram, equalTo(query)).     builder = new SimpleQueryStringBuilder("foo bar baz biz").     builder.field("text_shingle").     builder.flags(SimpleQueryStringFlag.NONE).     query = builder.toQuery(shardContext).     assertThat(expectedQuery, equalTo(query)).     builder = new SimpleQueryStringBuilder("\"foo bar baz biz\"").     builder.field("text_shingle").     builder.flags(SimpleQueryStringFlag.PHRASE).     query = builder.toQuery(shardContext).     assertThat(expectedPhraseQuery, equalTo(query)). }
false;public;0;21;;public void testQueryString() throws IOException {     QueryStringQueryBuilder builder = new QueryStringQueryBuilder("foo bar baz").     builder.field("text_shingle_unigram").     Query query = builder.toQuery(shardContext).     assertThat(expectedQueryWithUnigram, equalTo(query)).     builder = new QueryStringQueryBuilder("\"foo bar baz\"").     builder.field("text_shingle_unigram").     query = builder.toQuery(shardContext).     assertThat(expectedPhraseQueryWithUnigram, equalTo(query)).     builder = new QueryStringQueryBuilder("foo bar baz biz").     builder.field("text_shingle").     query = builder.toQuery(shardContext).     assertThat(expectedQuery, equalTo(query)).     builder = new QueryStringQueryBuilder("\"foo bar baz biz\"").     builder.field("text_shingle").     query = builder.toQuery(shardContext).     assertThat(expectedPhraseQuery, equalTo(query)). }
