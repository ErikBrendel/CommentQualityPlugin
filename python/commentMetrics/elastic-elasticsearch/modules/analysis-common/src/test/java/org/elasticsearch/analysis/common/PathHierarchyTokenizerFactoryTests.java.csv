commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public void testDefaults() throws IOException {     final Index index = new Index("test", "_na_").     final Settings indexSettings = newAnalysisSettingsBuilder().build().     Tokenizer tokenizer = new PathHierarchyTokenizerFactory(IndexSettingsModule.newIndexSettings(index, indexSettings), null, "path-hierarchy-tokenizer", Settings.EMPTY).create().     tokenizer.setReader(new StringReader("/one/two/three")).     assertTokenStreamContents(tokenizer, new String[] { "/one", "/one/two", "/one/two/three" }). }
false;public;0;9;;public void testReverse() throws IOException {     final Index index = new Index("test", "_na_").     final Settings indexSettings = newAnalysisSettingsBuilder().build().     Settings settings = newAnalysisSettingsBuilder().put("reverse", true).build().     Tokenizer tokenizer = new PathHierarchyTokenizerFactory(IndexSettingsModule.newIndexSettings(index, indexSettings), null, "path-hierarchy-tokenizer", settings).create().     tokenizer.setReader(new StringReader("/one/two/three")).     assertTokenStreamContents(tokenizer, new String[] { "/one/two/three", "one/two/three", "two/three", "three" }). }
false;public;0;11;;public void testDelimiter() throws IOException {     final Index index = new Index("test", "_na_").     final Settings indexSettings = newAnalysisSettingsBuilder().build().     Settings settings = newAnalysisSettingsBuilder().put("delimiter", "-").build().     Tokenizer tokenizer = new PathHierarchyTokenizerFactory(IndexSettingsModule.newIndexSettings(index, indexSettings), null, "path-hierarchy-tokenizer", settings).create().     tokenizer.setReader(new StringReader("/one/two/three")).     assertTokenStreamContents(tokenizer, new String[] { "/one/two/three" }).     tokenizer.setReader(new StringReader("one-two-three")).     assertTokenStreamContents(tokenizer, new String[] { "one", "one-two", "one-two-three" }). }
false;public;0;11;;public void testReplace() throws IOException {     final Index index = new Index("test", "_na_").     final Settings indexSettings = newAnalysisSettingsBuilder().build().     Settings settings = newAnalysisSettingsBuilder().put("replacement", "-").build().     Tokenizer tokenizer = new PathHierarchyTokenizerFactory(IndexSettingsModule.newIndexSettings(index, indexSettings), null, "path-hierarchy-tokenizer", settings).create().     tokenizer.setReader(new StringReader("/one/two/three")).     assertTokenStreamContents(tokenizer, new String[] { "-one", "-one-two", "-one-two-three" }).     tokenizer.setReader(new StringReader("one-two-three")).     assertTokenStreamContents(tokenizer, new String[] { "one-two-three" }). }
false;public;0;9;;public void testSkip() throws IOException {     final Index index = new Index("test", "_na_").     final Settings indexSettings = newAnalysisSettingsBuilder().build().     Settings settings = newAnalysisSettingsBuilder().put("skip", 2).build().     Tokenizer tokenizer = new PathHierarchyTokenizerFactory(IndexSettingsModule.newIndexSettings(index, indexSettings), null, "path-hierarchy-tokenizer", settings).create().     tokenizer.setReader(new StringReader("/one/two/three/four/five")).     assertTokenStreamContents(tokenizer, new String[] { "/three", "/three/four", "/three/four/five" }). }
false;public;0;20;;public void testDelimiterExceptions() {     final Index index = new Index("test", "_na_").     final Settings indexSettings = newAnalysisSettingsBuilder().build().     {         String delimiter = RandomPicks.randomFrom(random(), new String[] { "--", "" }).         Settings settings = newAnalysisSettingsBuilder().put("delimiter", delimiter).build().         IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new PathHierarchyTokenizerFactory(IndexSettingsModule.newIndexSettings(index, indexSettings), null, "path-hierarchy-tokenizer", settings).create()).         assertEquals("delimiter must be a one char value", e.getMessage()).     }     {         String replacement = RandomPicks.randomFrom(random(), new String[] { "--", "" }).         Settings settings = newAnalysisSettingsBuilder().put("replacement", replacement).build().         IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new PathHierarchyTokenizerFactory(IndexSettingsModule.newIndexSettings(index, indexSettings), null, "path-hierarchy-tokenizer", settings).create()).         assertEquals("replacement must be a one char value", e.getMessage()).     } }
