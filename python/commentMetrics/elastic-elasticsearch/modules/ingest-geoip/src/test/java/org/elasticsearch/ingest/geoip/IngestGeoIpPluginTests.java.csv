commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;public void testCachesAndEvictsResults() {     GeoIpCache cache = new GeoIpCache(1).     AbstractResponse response1 = mock(AbstractResponse.class).     AbstractResponse response2 = mock(AbstractResponse.class).     // add a key     AbstractResponse cachedResponse = cache.putIfAbsent(InetAddresses.forString("127.0.0.1"), AbstractResponse.class, ip -> response1).     assertSame(cachedResponse, response1).     assertSame(cachedResponse, cache.putIfAbsent(InetAddresses.forString("127.0.0.1"), AbstractResponse.class, ip -> response1)).     assertSame(cachedResponse, cache.get(InetAddresses.forString("127.0.0.1"), AbstractResponse.class)).     // evict old key by adding another value     cachedResponse = cache.putIfAbsent(InetAddresses.forString("127.0.0.2"), AbstractResponse.class, ip -> response2).     assertSame(cachedResponse, response2).     assertSame(cachedResponse, cache.putIfAbsent(InetAddresses.forString("127.0.0.2"), AbstractResponse.class, ip -> response2)).     assertSame(cachedResponse, cache.get(InetAddresses.forString("127.0.0.2"), AbstractResponse.class)).     assertNotSame(response1, cache.get(InetAddresses.forString("127.0.0.1"), AbstractResponse.class)). }
false;public;0;7;;public void testThrowsFunctionsException() {     GeoIpCache cache = new GeoIpCache(1).     IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> cache.putIfAbsent(InetAddresses.forString("127.0.0.1"), AbstractResponse.class, ip -> {         throw new IllegalArgumentException("bad").     })).     assertEquals("bad", ex.getMessage()). }
false;public;0;4;;public void testInvalidInit() {     IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> new GeoIpCache(-1)).     assertEquals("geoip max cache size must be 0 or greater", ex.getMessage()). }
