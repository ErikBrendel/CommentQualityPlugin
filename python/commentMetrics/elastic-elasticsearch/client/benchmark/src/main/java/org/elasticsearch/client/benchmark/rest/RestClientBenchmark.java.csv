commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;4;;public static void main(String[] args) throws Exception {     RestClientBenchmark b = new RestClientBenchmark().     b.run(args). }
false;protected;1;9;;@Override protected RestClient client(String benchmarkTargetHost) {     return RestClient.builder(new HttpHost(benchmarkTargetHost, 9200)).setHttpClientConfigCallback(b -> b.setDefaultHeaders(Collections.singleton(new BasicHeader(HttpHeaders.ACCEPT_ENCODING, "gzip")))).setRequestConfigCallback(b -> b.setContentCompressionEnabled(true)).build(). }
false;protected;3;4;;@Override protected BulkRequestExecutor bulkRequestExecutor(RestClient client, String indexName, String typeName) {     return new RestBulkRequestExecutor(client, indexName, typeName). }
false;protected;2;4;;@Override protected SearchRequestExecutor searchRequestExecutor(RestClient client, String indexName) {     return new RestSearchRequestExecutor(client, indexName). }
false;public;1;17;;@Override public boolean bulkIndex(List<String> bulkData) {     StringBuilder bulkRequestBody = new StringBuilder().     for (String bulkItem : bulkData) {         bulkRequestBody.append(actionMetaData).         bulkRequestBody.append(bulkItem).         bulkRequestBody.append("\n").     }     Request request = new Request("POST", "/geonames/type/_noop_bulk").     request.setJsonEntity(bulkRequestBody.toString()).     try {         Response response = client.performRequest(request).         return response.getStatusLine().getStatusCode() == HttpStatus.SC_OK.     } catch (Exception e) {         throw new ElasticsearchException(e).     } }
false;public;1;11;;@Override public boolean search(String source) {     Request request = new Request("GET", endpoint).     request.setJsonEntity(source).     try {         Response response = client.performRequest(request).         return response.getStatusLine().getStatusCode() == HttpStatus.SC_OK.     } catch (IOException e) {         throw new ElasticsearchException(e).     } }
