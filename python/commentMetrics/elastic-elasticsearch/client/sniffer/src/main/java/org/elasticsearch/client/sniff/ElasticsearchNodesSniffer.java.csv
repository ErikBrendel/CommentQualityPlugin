# id;timestamp;commentText;codeText;commentWords;codeWords
ElasticsearchNodesSniffer -> public ElasticsearchNodesSniffer(RestClient restClient);1528762805;Creates a new instance of the Elasticsearch sniffer. It will use the provided {@link RestClient} to fetch the hosts,_through the nodes info api, the default sniff request timeout value {@link #DEFAULT_SNIFF_REQUEST_TIMEOUT} and http_as the scheme for all the hosts._@param restClient client used to fetch the hosts from elasticsearch through nodes info api. Usually the same instance_that is also provided to {@link Sniffer#builder(RestClient)}, so that the hosts are set to the same_client that was used to fetch them.;public ElasticsearchNodesSniffer(RestClient restClient) {_        this(restClient, DEFAULT_SNIFF_REQUEST_TIMEOUT, ElasticsearchNodesSniffer.Scheme.HTTP)__    };creates,a,new,instance,of,the,elasticsearch,sniffer,it,will,use,the,provided,link,rest,client,to,fetch,the,hosts,through,the,nodes,info,api,the,default,sniff,request,timeout,value,link,and,http,as,the,scheme,for,all,the,hosts,param,rest,client,client,used,to,fetch,the,hosts,from,elasticsearch,through,nodes,info,api,usually,the,same,instance,that,is,also,provided,to,link,sniffer,builder,rest,client,so,that,the,hosts,are,set,to,the,same,client,that,was,used,to,fetch,them;public,elasticsearch,nodes,sniffer,rest,client,rest,client,this,rest,client,elasticsearch,nodes,sniffer,scheme,http
ElasticsearchNodesSniffer -> public ElasticsearchNodesSniffer(RestClient restClient);1528977744;Creates a new instance of the Elasticsearch sniffer. It will use the provided {@link RestClient} to fetch the hosts,_through the nodes info api, the default sniff request timeout value {@link #DEFAULT_SNIFF_REQUEST_TIMEOUT} and http_as the scheme for all the hosts._@param restClient client used to fetch the hosts from elasticsearch through nodes info api. Usually the same instance_that is also provided to {@link Sniffer#builder(RestClient)}, so that the hosts are set to the same_client that was used to fetch them.;public ElasticsearchNodesSniffer(RestClient restClient) {_        this(restClient, DEFAULT_SNIFF_REQUEST_TIMEOUT, ElasticsearchNodesSniffer.Scheme.HTTP)__    };creates,a,new,instance,of,the,elasticsearch,sniffer,it,will,use,the,provided,link,rest,client,to,fetch,the,hosts,through,the,nodes,info,api,the,default,sniff,request,timeout,value,link,and,http,as,the,scheme,for,all,the,hosts,param,rest,client,client,used,to,fetch,the,hosts,from,elasticsearch,through,nodes,info,api,usually,the,same,instance,that,is,also,provided,to,link,sniffer,builder,rest,client,so,that,the,hosts,are,set,to,the,same,client,that,was,used,to,fetch,them;public,elasticsearch,nodes,sniffer,rest,client,rest,client,this,rest,client,elasticsearch,nodes,sniffer,scheme,http
ElasticsearchNodesSniffer -> public ElasticsearchNodesSniffer(RestClient restClient);1529076503;Creates a new instance of the Elasticsearch sniffer. It will use the provided {@link RestClient} to fetch the hosts,_through the nodes info api, the default sniff request timeout value {@link #DEFAULT_SNIFF_REQUEST_TIMEOUT} and http_as the scheme for all the hosts._@param restClient client used to fetch the hosts from elasticsearch through nodes info api. Usually the same instance_that is also provided to {@link Sniffer#builder(RestClient)}, so that the hosts are set to the same_client that was used to fetch them.;public ElasticsearchNodesSniffer(RestClient restClient) {_        this(restClient, DEFAULT_SNIFF_REQUEST_TIMEOUT, ElasticsearchNodesSniffer.Scheme.HTTP)__    };creates,a,new,instance,of,the,elasticsearch,sniffer,it,will,use,the,provided,link,rest,client,to,fetch,the,hosts,through,the,nodes,info,api,the,default,sniff,request,timeout,value,link,and,http,as,the,scheme,for,all,the,hosts,param,rest,client,client,used,to,fetch,the,hosts,from,elasticsearch,through,nodes,info,api,usually,the,same,instance,that,is,also,provided,to,link,sniffer,builder,rest,client,so,that,the,hosts,are,set,to,the,same,client,that,was,used,to,fetch,them;public,elasticsearch,nodes,sniffer,rest,client,rest,client,this,rest,client,elasticsearch,nodes,sniffer,scheme,http
ElasticsearchNodesSniffer -> public ElasticsearchNodesSniffer(RestClient restClient, long sniffRequestTimeoutMillis, Scheme scheme);1528762805;Creates a new instance of the Elasticsearch sniffer. It will use the provided {@link RestClient} to fetch the hosts_through the nodes info api, the provided sniff request timeout value and scheme._@param restClient client used to fetch the hosts from elasticsearch through nodes info api. Usually the same instance_that is also provided to {@link Sniffer#builder(RestClient)}, so that the hosts are set to the same_client that was used to sniff them._@param sniffRequestTimeoutMillis the sniff request timeout (in milliseconds) to be passed in as a query string parameter_to elasticsearch. Allows to halt the request without any failure, as only the nodes_that have responded within this timeout will be returned._@param scheme the scheme to associate sniffed nodes with (as it is not returned by elasticsearch);public ElasticsearchNodesSniffer(RestClient restClient, long sniffRequestTimeoutMillis, Scheme scheme) {_        this.restClient = Objects.requireNonNull(restClient, "restClient cannot be null")__        if (sniffRequestTimeoutMillis < 0) {_            throw new IllegalArgumentException("sniffRequestTimeoutMillis must be greater than 0")__        }_        this.request = new Request("GET", "/_nodes/http")__        request.addParameter("timeout", sniffRequestTimeoutMillis + "ms")__        this.scheme = Objects.requireNonNull(scheme, "scheme cannot be null")__    };creates,a,new,instance,of,the,elasticsearch,sniffer,it,will,use,the,provided,link,rest,client,to,fetch,the,hosts,through,the,nodes,info,api,the,provided,sniff,request,timeout,value,and,scheme,param,rest,client,client,used,to,fetch,the,hosts,from,elasticsearch,through,nodes,info,api,usually,the,same,instance,that,is,also,provided,to,link,sniffer,builder,rest,client,so,that,the,hosts,are,set,to,the,same,client,that,was,used,to,sniff,them,param,sniff,request,timeout,millis,the,sniff,request,timeout,in,milliseconds,to,be,passed,in,as,a,query,string,parameter,to,elasticsearch,allows,to,halt,the,request,without,any,failure,as,only,the,nodes,that,have,responded,within,this,timeout,will,be,returned,param,scheme,the,scheme,to,associate,sniffed,nodes,with,as,it,is,not,returned,by,elasticsearch;public,elasticsearch,nodes,sniffer,rest,client,rest,client,long,sniff,request,timeout,millis,scheme,scheme,this,rest,client,objects,require,non,null,rest,client,rest,client,cannot,be,null,if,sniff,request,timeout,millis,0,throw,new,illegal,argument,exception,sniff,request,timeout,millis,must,be,greater,than,0,this,request,new,request,get,http,request,add,parameter,timeout,sniff,request,timeout,millis,ms,this,scheme,objects,require,non,null,scheme,scheme,cannot,be,null
ElasticsearchNodesSniffer -> public ElasticsearchNodesSniffer(RestClient restClient, long sniffRequestTimeoutMillis, Scheme scheme);1528977744;Creates a new instance of the Elasticsearch sniffer. It will use the provided {@link RestClient} to fetch the hosts_through the nodes info api, the provided sniff request timeout value and scheme._@param restClient client used to fetch the hosts from elasticsearch through nodes info api. Usually the same instance_that is also provided to {@link Sniffer#builder(RestClient)}, so that the hosts are set to the same_client that was used to sniff them._@param sniffRequestTimeoutMillis the sniff request timeout (in milliseconds) to be passed in as a query string parameter_to elasticsearch. Allows to halt the request without any failure, as only the nodes_that have responded within this timeout will be returned._@param scheme the scheme to associate sniffed nodes with (as it is not returned by elasticsearch);public ElasticsearchNodesSniffer(RestClient restClient, long sniffRequestTimeoutMillis, Scheme scheme) {_        this.restClient = Objects.requireNonNull(restClient, "restClient cannot be null")__        if (sniffRequestTimeoutMillis < 0) {_            throw new IllegalArgumentException("sniffRequestTimeoutMillis must be greater than 0")__        }_        this.request = new Request("GET", "/_nodes/http")__        request.addParameter("timeout", sniffRequestTimeoutMillis + "ms")__        this.scheme = Objects.requireNonNull(scheme, "scheme cannot be null")__    };creates,a,new,instance,of,the,elasticsearch,sniffer,it,will,use,the,provided,link,rest,client,to,fetch,the,hosts,through,the,nodes,info,api,the,provided,sniff,request,timeout,value,and,scheme,param,rest,client,client,used,to,fetch,the,hosts,from,elasticsearch,through,nodes,info,api,usually,the,same,instance,that,is,also,provided,to,link,sniffer,builder,rest,client,so,that,the,hosts,are,set,to,the,same,client,that,was,used,to,sniff,them,param,sniff,request,timeout,millis,the,sniff,request,timeout,in,milliseconds,to,be,passed,in,as,a,query,string,parameter,to,elasticsearch,allows,to,halt,the,request,without,any,failure,as,only,the,nodes,that,have,responded,within,this,timeout,will,be,returned,param,scheme,the,scheme,to,associate,sniffed,nodes,with,as,it,is,not,returned,by,elasticsearch;public,elasticsearch,nodes,sniffer,rest,client,rest,client,long,sniff,request,timeout,millis,scheme,scheme,this,rest,client,objects,require,non,null,rest,client,rest,client,cannot,be,null,if,sniff,request,timeout,millis,0,throw,new,illegal,argument,exception,sniff,request,timeout,millis,must,be,greater,than,0,this,request,new,request,get,http,request,add,parameter,timeout,sniff,request,timeout,millis,ms,this,scheme,objects,require,non,null,scheme,scheme,cannot,be,null
ElasticsearchNodesSniffer -> public ElasticsearchNodesSniffer(RestClient restClient, long sniffRequestTimeoutMillis, Scheme scheme);1529076503;Creates a new instance of the Elasticsearch sniffer. It will use the provided {@link RestClient} to fetch the hosts_through the nodes info api, the provided sniff request timeout value and scheme._@param restClient client used to fetch the hosts from elasticsearch through nodes info api. Usually the same instance_that is also provided to {@link Sniffer#builder(RestClient)}, so that the hosts are set to the same_client that was used to sniff them._@param sniffRequestTimeoutMillis the sniff request timeout (in milliseconds) to be passed in as a query string parameter_to elasticsearch. Allows to halt the request without any failure, as only the nodes_that have responded within this timeout will be returned._@param scheme the scheme to associate sniffed nodes with (as it is not returned by elasticsearch);public ElasticsearchNodesSniffer(RestClient restClient, long sniffRequestTimeoutMillis, Scheme scheme) {_        this.restClient = Objects.requireNonNull(restClient, "restClient cannot be null")__        if (sniffRequestTimeoutMillis < 0) {_            throw new IllegalArgumentException("sniffRequestTimeoutMillis must be greater than 0")__        }_        this.request = new Request("GET", "/_nodes/http")__        request.addParameter("timeout", sniffRequestTimeoutMillis + "ms")__        this.scheme = Objects.requireNonNull(scheme, "scheme cannot be null")__    };creates,a,new,instance,of,the,elasticsearch,sniffer,it,will,use,the,provided,link,rest,client,to,fetch,the,hosts,through,the,nodes,info,api,the,provided,sniff,request,timeout,value,and,scheme,param,rest,client,client,used,to,fetch,the,hosts,from,elasticsearch,through,nodes,info,api,usually,the,same,instance,that,is,also,provided,to,link,sniffer,builder,rest,client,so,that,the,hosts,are,set,to,the,same,client,that,was,used,to,sniff,them,param,sniff,request,timeout,millis,the,sniff,request,timeout,in,milliseconds,to,be,passed,in,as,a,query,string,parameter,to,elasticsearch,allows,to,halt,the,request,without,any,failure,as,only,the,nodes,that,have,responded,within,this,timeout,will,be,returned,param,scheme,the,scheme,to,associate,sniffed,nodes,with,as,it,is,not,returned,by,elasticsearch;public,elasticsearch,nodes,sniffer,rest,client,rest,client,long,sniff,request,timeout,millis,scheme,scheme,this,rest,client,objects,require,non,null,rest,client,rest,client,cannot,be,null,if,sniff,request,timeout,millis,0,throw,new,illegal,argument,exception,sniff,request,timeout,millis,must,be,greater,than,0,this,request,new,request,get,http,request,add,parameter,timeout,sniff,request,timeout,millis,ms,this,scheme,objects,require,non,null,scheme,scheme,cannot,be,null
ElasticsearchNodesSniffer -> @Override     public List<Node> sniff() throws IOException;1528762805;Calls the elasticsearch nodes info api, parses the response and returns all the found http hosts;@Override_    public List<Node> sniff() throws IOException {_        Response response = restClient.performRequest(request)__        return readHosts(response.getEntity(), scheme, jsonFactory)__    };calls,the,elasticsearch,nodes,info,api,parses,the,response,and,returns,all,the,found,http,hosts;override,public,list,node,sniff,throws,ioexception,response,response,rest,client,perform,request,request,return,read,hosts,response,get,entity,scheme,json,factory
ElasticsearchNodesSniffer -> @Override     public List<Node> sniff() throws IOException;1528977744;Calls the elasticsearch nodes info api, parses the response and returns all the found http hosts;@Override_    public List<Node> sniff() throws IOException {_        Response response = restClient.performRequest(request)__        return readHosts(response.getEntity(), scheme, jsonFactory)__    };calls,the,elasticsearch,nodes,info,api,parses,the,response,and,returns,all,the,found,http,hosts;override,public,list,node,sniff,throws,ioexception,response,response,rest,client,perform,request,request,return,read,hosts,response,get,entity,scheme,json,factory
ElasticsearchNodesSniffer -> @Override     public List<Node> sniff() throws IOException;1529076503;Calls the elasticsearch nodes info api, parses the response and returns all the found http hosts;@Override_    public List<Node> sniff() throws IOException {_        Response response = restClient.performRequest(request)__        return readHosts(response.getEntity(), scheme, jsonFactory)__    };calls,the,elasticsearch,nodes,info,api,parses,the,response,and,returns,all,the,found,http,hosts;override,public,list,node,sniff,throws,ioexception,response,response,rest,client,perform,request,request,return,read,hosts,response,get,entity,scheme,json,factory
