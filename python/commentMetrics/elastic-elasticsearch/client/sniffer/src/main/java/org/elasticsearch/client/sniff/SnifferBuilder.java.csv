commented;modifiers;parameterAmount;loc;comment;code
true;public;1;7;/**  * Sets the interval between consecutive ordinary sniff executions in milliseconds. Will be honoured when  * sniffOnFailure is disabled or when there are no failures between consecutive sniff executions.  * @throws IllegalArgumentException if sniffIntervalMillis is not greater than 0  */ ;/**  * Sets the interval between consecutive ordinary sniff executions in milliseconds. Will be honoured when  * sniffOnFailure is disabled or when there are no failures between consecutive sniff executions.  * @throws IllegalArgumentException if sniffIntervalMillis is not greater than 0  */ public SnifferBuilder setSniffIntervalMillis(int sniffIntervalMillis) {     if (sniffIntervalMillis <= 0) {         throw new IllegalArgumentException("sniffIntervalMillis must be greater than 0").     }     this.sniffIntervalMillis = sniffIntervalMillis.     return this. }
true;public;1;7;/**  * Sets the delay of a sniff execution scheduled after a failure (in milliseconds)  */ ;/**  * Sets the delay of a sniff execution scheduled after a failure (in milliseconds)  */ public SnifferBuilder setSniffAfterFailureDelayMillis(int sniffAfterFailureDelayMillis) {     if (sniffAfterFailureDelayMillis <= 0) {         throw new IllegalArgumentException("sniffAfterFailureDelayMillis must be greater than 0").     }     this.sniffAfterFailureDelayMillis = sniffAfterFailureDelayMillis.     return this. }
true;public;1;5;/**  * Sets the {@link NodesSniffer} to be used to read hosts. A default instance of {@link ElasticsearchNodesSniffer}  * is created when not provided. This method can be used to change the configuration of the {@link ElasticsearchNodesSniffer},  * or to provide a different implementation (e.g. in case hosts need to taken from a different source).  */ ;/**  * Sets the {@link NodesSniffer} to be used to read hosts. A default instance of {@link ElasticsearchNodesSniffer}  * is created when not provided. This method can be used to change the configuration of the {@link ElasticsearchNodesSniffer},  * or to provide a different implementation (e.g. in case hosts need to taken from a different source).  */ public SnifferBuilder setNodesSniffer(NodesSniffer nodesSniffer) {     Objects.requireNonNull(nodesSniffer, "nodesSniffer cannot be null").     this.nodesSniffer = nodesSniffer.     return this. }
true;public;0;6;/**  * Creates the {@link Sniffer} based on the provided configuration.  */ ;/**  * Creates the {@link Sniffer} based on the provided configuration.  */ public Sniffer build() {     if (nodesSniffer == null) {         this.nodesSniffer = new ElasticsearchNodesSniffer(restClient).     }     return new Sniffer(restClient, nodesSniffer, sniffIntervalMillis, sniffAfterFailureDelayMillis). }
