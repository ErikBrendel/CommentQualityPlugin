# id;timestamp;commentText;codeText;commentWords;codeWords
Sniffer -> public void sniffOnFailure();1527840262;Schedule sniffing to run as soon as possible if it isn't already running. Once such sniffing round runs_it will also schedule a new round after sniffAfterFailureDelay ms.;public void sniffOnFailure() {_        _        if (initialized.get()) {_            _            if (this.nextScheduledTask.skip()) {_                _                scheduler.schedule(new Task(sniffAfterFailureDelayMillis), 0L)__            }_        }_    };schedule,sniffing,to,run,as,soon,as,possible,if,it,isn,t,already,running,once,such,sniffing,round,runs,it,will,also,schedule,a,new,round,after,sniff,after,failure,delay,ms;public,void,sniff,on,failure,if,initialized,get,if,this,next,scheduled,task,skip,scheduler,schedule,new,task,sniff,after,failure,delay,millis,0l
Sniffer -> public void sniffOnFailure();1528762805;Schedule sniffing to run as soon as possible if it isn't already running. Once such sniffing round runs_it will also schedule a new round after sniffAfterFailureDelay ms.;public void sniffOnFailure() {_        _        if (initialized.get()) {_            _            if (this.nextScheduledTask.skip()) {_                _                scheduler.schedule(new Task(sniffAfterFailureDelayMillis), 0L)__            }_        }_    };schedule,sniffing,to,run,as,soon,as,possible,if,it,isn,t,already,running,once,such,sniffing,round,runs,it,will,also,schedule,a,new,round,after,sniff,after,failure,delay,ms;public,void,sniff,on,failure,if,initialized,get,if,this,next,scheduled,task,skip,scheduler,schedule,new,task,sniff,after,failure,delay,millis,0l
Sniffer -> public static SnifferBuilder builder(RestClient restClient);1524684173;Returns a new {@link SnifferBuilder} to help with {@link Sniffer} creation.__@param restClient the client that gets its hosts set (via {@link RestClient#setHosts(HttpHost...)}) once they are fetched_@return a new instance of {@link SnifferBuilder};public static SnifferBuilder builder(RestClient restClient) {_        return new SnifferBuilder(restClient)__    };returns,a,new,link,sniffer,builder,to,help,with,link,sniffer,creation,param,rest,client,the,client,that,gets,its,hosts,set,via,link,rest,client,set,hosts,http,host,once,they,are,fetched,return,a,new,instance,of,link,sniffer,builder;public,static,sniffer,builder,builder,rest,client,rest,client,return,new,sniffer,builder,rest,client
Sniffer -> public static SnifferBuilder builder(RestClient restClient);1527840262;Returns a new {@link SnifferBuilder} to help with {@link Sniffer} creation.__@param restClient the client that gets its hosts set (via {@link RestClient#setHosts(HttpHost...)}) once they are fetched_@return a new instance of {@link SnifferBuilder};public static SnifferBuilder builder(RestClient restClient) {_        return new SnifferBuilder(restClient)__    };returns,a,new,link,sniffer,builder,to,help,with,link,sniffer,creation,param,rest,client,the,client,that,gets,its,hosts,set,via,link,rest,client,set,hosts,http,host,once,they,are,fetched,return,a,new,instance,of,link,sniffer,builder;public,static,sniffer,builder,builder,rest,client,rest,client,return,new,sniffer,builder,rest,client
Sniffer -> public static SnifferBuilder builder(RestClient restClient);1528762805;Returns a new {@link SnifferBuilder} to help with {@link Sniffer} creation.__@param restClient the client that gets its hosts set (via_{@link RestClient#setNodes(Collection)}) once they are fetched_@return a new instance of {@link SnifferBuilder};public static SnifferBuilder builder(RestClient restClient) {_        return new SnifferBuilder(restClient)__    };returns,a,new,link,sniffer,builder,to,help,with,link,sniffer,creation,param,rest,client,the,client,that,gets,its,hosts,set,via,link,rest,client,set,nodes,collection,once,they,are,fetched,return,a,new,instance,of,link,sniffer,builder;public,static,sniffer,builder,builder,rest,client,rest,client,return,new,sniffer,builder,rest,client
Sniffer -> Scheduler -> Future<?> schedule(Task task, long delayMillis)_;1527840262;Schedules the provided {@link Runnable} to be executed in <code>delayMillis</code> milliseconds;Future<?> schedule(Task task, long delayMillis)_;schedules,the,provided,link,runnable,to,be,executed,in,code,delay,millis,code,milliseconds;future,schedule,task,task,long,delay,millis
Sniffer -> Scheduler -> Future<?> schedule(Task task, long delayMillis)_;1528762805;Schedules the provided {@link Runnable} to be executed in <code>delayMillis</code> milliseconds;Future<?> schedule(Task task, long delayMillis)_;schedules,the,provided,link,runnable,to,be,executed,in,code,delay,millis,code,milliseconds;future,schedule,task,task,long,delay,millis
Sniffer -> Scheduler -> void shutdown()_;1527840262;Shuts this scheduler down;void shutdown()_;shuts,this,scheduler,down;void,shutdown
Sniffer -> Scheduler -> void shutdown()_;1528762805;Shuts this scheduler down;void shutdown()_;shuts,this,scheduler,down;void,shutdown
Sniffer -> ScheduledTask -> boolean skip();1527840262;Cancels this task. Returns true if the task has been successfully cancelled, meaning it won't be executed_or if it is its execution won't have any effect. Returns false if the task cannot be cancelled (possibly it was_already cancelled or already completed).;boolean skip() {_            _            future.cancel(false)__            return task.skip()__        };cancels,this,task,returns,true,if,the,task,has,been,successfully,cancelled,meaning,it,won,t,be,executed,or,if,it,is,its,execution,won,t,have,any,effect,returns,false,if,the,task,cannot,be,cancelled,possibly,it,was,already,cancelled,or,already,completed;boolean,skip,future,cancel,false,return,task,skip
Sniffer -> ScheduledTask -> boolean skip();1528762805;Cancels this task. Returns true if the task has been successfully cancelled, meaning it won't be executed_or if it is its execution won't have any effect. Returns false if the task cannot be cancelled (possibly it was_already cancelled or already completed).;boolean skip() {_            _            future.cancel(false)__            return task.skip()__        };cancels,this,task,returns,true,if,the,task,has,been,successfully,cancelled,meaning,it,won,t,be,executed,or,if,it,is,its,execution,won,t,have,any,effect,returns,false,if,the,task,cannot,be,cancelled,possibly,it,was,already,cancelled,or,already,completed;boolean,skip,future,cancel,false,return,task,skip
Sniffer -> Task -> boolean hasStarted();1527840262;Returns true if the task has started, false in case it didn't start (yet?) or it was skipped;boolean hasStarted() {_            return taskState.get() == TaskState.STARTED__        };returns,true,if,the,task,has,started,false,in,case,it,didn,t,start,yet,or,it,was,skipped;boolean,has,started,return,task,state,get,task,state,started
Sniffer -> Task -> boolean hasStarted();1528762805;Returns true if the task has started, false in case it didn't start (yet?) or it was skipped;boolean hasStarted() {_            return taskState.get() == TaskState.STARTED__        };returns,true,if,the,task,has,started,false,in,case,it,didn,t,start,yet,or,it,was,skipped;boolean,has,started,return,task,state,get,task,state,started
Sniffer -> Task -> boolean skip();1527840262;Sets this task to be skipped. Returns true if the task will be skipped, false if the task has already started.;boolean skip() {_            _            return taskState.compareAndSet(TaskState.WAITING, TaskState.SKIPPED)__        };sets,this,task,to,be,skipped,returns,true,if,the,task,will,be,skipped,false,if,the,task,has,already,started;boolean,skip,return,task,state,compare,and,set,task,state,waiting,task,state,skipped
Sniffer -> Task -> boolean skip();1528762805;Sets this task to be skipped. Returns true if the task will be skipped, false if the task has already started.;boolean skip() {_            _            return taskState.compareAndSet(TaskState.WAITING, TaskState.SKIPPED)__        };sets,this,task,to,be,skipped,returns,true,if,the,task,will,be,skipped,false,if,the,task,has,already,started;boolean,skip,return,task,state,compare,and,set,task,state,waiting,task,state,skipped
Sniffer -> Task -> boolean isSkipped();1527840262;Returns true if the task was set to be skipped before it was started;boolean isSkipped() {_            return taskState.get() == TaskState.SKIPPED__        };returns,true,if,the,task,was,set,to,be,skipped,before,it,was,started;boolean,is,skipped,return,task,state,get,task,state,skipped
Sniffer -> Task -> boolean isSkipped();1528762805;Returns true if the task was set to be skipped before it was started;boolean isSkipped() {_            return taskState.get() == TaskState.SKIPPED__        };returns,true,if,the,task,was,set,to,be,skipped,before,it,was,started;boolean,is,skipped,return,task,state,get,task,state,skipped
