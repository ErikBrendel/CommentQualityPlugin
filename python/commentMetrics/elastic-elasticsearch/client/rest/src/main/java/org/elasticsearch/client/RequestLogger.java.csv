commented;modifiers;parameterAmount;loc;comment;code
true;static;4;29;/**  * Logs a request that yielded a response  */ ;/**  * Logs a request that yielded a response  */ static void logResponse(Log logger, HttpUriRequest request, HttpHost host, HttpResponse httpResponse) {     if (logger.isDebugEnabled()) {         logger.debug("request [" + request.getMethod() + " " + host + getUri(request.getRequestLine()) + "] returned [" + httpResponse.getStatusLine() + "]").     }     if (logger.isWarnEnabled()) {         Header[] warnings = httpResponse.getHeaders("Warning").         if (warnings != null && warnings.length > 0) {             logger.warn(buildWarningMessage(request, host, warnings)).         }     }     if (tracer.isTraceEnabled()) {         String requestLine.         try {             requestLine = buildTraceRequest(request, host).         } catch (IOException e) {             requestLine = "".             tracer.trace("error while reading request for trace purposes", e).         }         String responseLine.         try {             responseLine = buildTraceResponse(httpResponse).         } catch (IOException e) {             responseLine = "".             tracer.trace("error while reading response for trace purposes", e).         }         tracer.trace(requestLine + '\n' + responseLine).     } }
true;static;4;15;/**  * Logs a request that failed  */ ;/**  * Logs a request that failed  */ static void logFailedRequest(Log logger, HttpUriRequest request, Node node, Exception e) {     if (logger.isDebugEnabled()) {         logger.debug("request [" + request.getMethod() + " " + node.getHost() + getUri(request.getRequestLine()) + "] failed", e).     }     if (tracer.isTraceEnabled()) {         String traceRequest.         try {             traceRequest = buildTraceRequest(request, node.getHost()).         } catch (IOException e1) {             tracer.trace("error while reading request for trace purposes", e).             traceRequest = "".         }         tracer.trace(traceRequest).     } }
false;static;3;11;;static String buildWarningMessage(HttpUriRequest request, HttpHost host, Header[] warnings) {     StringBuilder message = new StringBuilder("request [").append(request.getMethod()).append(" ").append(host).append(getUri(request.getRequestLine())).append("] returned ").append(warnings.length).append(" warnings: ").     for (int i = 0. i < warnings.length. i++) {         if (i > 0) {             message.append(",").         }         message.append("[").append(warnings[i].getValue()).append("]").     }     return message.toString(). }
true;static;2;16;/**  * Creates curl output for given request  */ ;/**  * Creates curl output for given request  */ static String buildTraceRequest(HttpUriRequest request, HttpHost host) throws IOException {     String requestLine = "curl -iX " + request.getMethod() + " '" + host + getUri(request.getRequestLine()) + "'".     if (request instanceof HttpEntityEnclosingRequest) {         HttpEntityEnclosingRequest enclosingRequest = (HttpEntityEnclosingRequest) request.         if (enclosingRequest.getEntity() != null) {             requestLine += " -d '".             HttpEntity entity = enclosingRequest.getEntity().             if (entity.isRepeatable() == false) {                 entity = new BufferedHttpEntity(enclosingRequest.getEntity()).                 enclosingRequest.setEntity(entity).             }             requestLine += EntityUtils.toString(entity, StandardCharsets.UTF_8) + "'".         }     }     return requestLine. }
true;static;1;27;/**  * Creates curl output for given response  */ ;/**  * Creates curl output for given response  */ static String buildTraceResponse(HttpResponse httpResponse) throws IOException {     StringBuilder responseLine = new StringBuilder().     responseLine.append("# ").append(httpResponse.getStatusLine()).     for (Header header : httpResponse.getAllHeaders()) {         responseLine.append("\n# ").append(header.getName()).append(": ").append(header.getValue()).     }     responseLine.append("\n#").     HttpEntity entity = httpResponse.getEntity().     if (entity != null) {         if (entity.isRepeatable() == false) {             entity = new BufferedHttpEntity(entity).         }         httpResponse.setEntity(entity).         ContentType contentType = ContentType.get(entity).         Charset charset = StandardCharsets.UTF_8.         if (contentType != null && contentType.getCharset() != null) {             charset = contentType.getCharset().         }         try (BufferedReader reader = new BufferedReader(new InputStreamReader(entity.getContent(), charset))) {             String line.             while ((line = reader.readLine()) != null) {                 responseLine.append("\n# ").append(line).             }         }     }     return responseLine.toString(). }
false;private,static;1;6;;private static String getUri(RequestLine requestLine) {     if (requestLine.getUri().charAt(0) != '/') {         return "/" + requestLine.getUri().     }     return requestLine.getUri(). }
