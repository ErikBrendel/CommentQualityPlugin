commented;modifiers;parameterAmount;loc;comment;code
false;public;1;40;;@Override public void select(Iterable<Node> nodes) {     boolean foundAtLeastOne = false.     for (Node node : nodes) {         Map<String, List<String>> attributes = node.getAttributes().         if (attributes == null) {             continue.         }         List<String> values = attributes.get(key).         if (values == null) {             continue.         }         if (values.contains(value)) {             foundAtLeastOne = true.             break.         }     }     if (foundAtLeastOne) {         Iterator<Node> nodeIterator = nodes.iterator().         while (nodeIterator.hasNext()) {             Map<String, List<String>> attributes = nodeIterator.next().getAttributes().             if (attributes == null) {                 continue.             }             List<String> values = attributes.get(key).             if (values == null || !values.contains(value)) {                 nodeIterator.remove().             }         }     } }
false;public;1;12;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     PreferHasAttributeNodeSelector that = (PreferHasAttributeNodeSelector) o.     return Objects.equals(key, that.key) && Objects.equals(value, that.value). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(key, value). }
false;public;0;4;;@Override public String toString() {     return key + "=" + value. }
