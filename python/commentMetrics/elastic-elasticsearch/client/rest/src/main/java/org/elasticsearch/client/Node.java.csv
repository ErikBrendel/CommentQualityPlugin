commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Contact information for the host.  */ ;/**  * Contact information for the host.  */ public HttpHost getHost() {     return host. }
true;public;0;3;/**  * Addresses on which the host is listening. These are useful to have  * around because they allow you to find a host based on any address it  * is listening on.  */ ;/**  * Addresses on which the host is listening. These are useful to have  * around because they allow you to find a host based on any address it  * is listening on.  */ public Set<HttpHost> getBoundHosts() {     return boundHosts. }
true;public;0;3;/**  * The {@code node.name} of the node.  */ ;/**  * The {@code node.name} of the node.  */ public String getName() {     return name. }
true;public;0;3;/**  * Version of Elasticsearch that the node is running or {@code null}  * if we don't know the version.  */ ;/**  * Version of Elasticsearch that the node is running or {@code null}  * if we don't know the version.  */ public String getVersion() {     return version. }
true;public;0;3;/**  * Roles that the Elasticsearch process on the host has or {@code null}  * if we don't know what roles the node has.  */ ;/**  * Roles that the Elasticsearch process on the host has or {@code null}  * if we don't know what roles the node has.  */ public Roles getRoles() {     return roles. }
true;public;0;3;/**  * Attributes declared on the node.  */ ;/**  * Attributes declared on the node.  */ public Map<String, List<String>> getAttributes() {     return attributes. }
false;public;0;21;;@Override public String toString() {     StringBuilder b = new StringBuilder().     b.append("[host=").append(host).     if (boundHosts != null) {         b.append(", bound=").append(boundHosts).     }     if (name != null) {         b.append(", name=").append(name).     }     if (version != null) {         b.append(", version=").append(version).     }     if (roles != null) {         b.append(", roles=").append(roles).     }     if (attributes != null) {         b.append(", attributes=").append(attributes).     }     return b.append(']').toString(). }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (obj == null || obj.getClass() != getClass()) {         return false.     }     Node other = (Node) obj.     return host.equals(other.host) && Objects.equals(boundHosts, other.boundHosts) && Objects.equals(name, other.name) && Objects.equals(version, other.version) && Objects.equals(roles, other.roles) && Objects.equals(attributes, other.attributes). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(host, boundHosts, name, version, roles, attributes). }
true;public;0;3;/**  * Teturns whether or not the node <strong>could</strong> be elected master.  */ ;/**  * Teturns whether or not the node <strong>could</strong> be elected master.  */ public boolean isMasterEligible() {     return masterEligible. }
true;public;0;3;/**  * Teturns whether or not the node stores data.  */ ;/**  * Teturns whether or not the node stores data.  */ public boolean isData() {     return data. }
true;public;0;3;/**  * Teturns whether or not the node runs ingest pipelines.  */ ;/**  * Teturns whether or not the node runs ingest pipelines.  */ public boolean isIngest() {     return ingest. }
false;public;0;8;;@Override public String toString() {     StringBuilder result = new StringBuilder(3).     if (masterEligible)         result.append('m').     if (data)         result.append('d').     if (ingest)         result.append('i').     return result.toString(). }
false;public;1;10;;@Override public boolean equals(Object obj) {     if (obj == null || obj.getClass() != getClass()) {         return false.     }     Roles other = (Roles) obj.     return masterEligible == other.masterEligible && data == other.data && ingest == other.ingest. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(masterEligible, data, ingest). }
