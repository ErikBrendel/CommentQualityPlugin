commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Create a builder that contains these options but can be modified.  */ ;/**  * Create a builder that contains these options but can be modified.  */ public Builder toBuilder() {     return new Builder(headers, httpAsyncResponseConsumerFactory, warningsHandler). }
true;public;0;3;/**  * Headers to attach to the request.  */ ;/**  * Headers to attach to the request.  */ public List<Header> getHeaders() {     return headers. }
true;public;0;3;/**  * The {@link HttpAsyncResponseConsumerFactory} used to create one  * {@link HttpAsyncResponseConsumer} callback per retry. Controls how the  * response body gets streamed from a non-blocking HTTP connection on the  * client side.  */ ;/**  * The {@link HttpAsyncResponseConsumerFactory} used to create one  * {@link HttpAsyncResponseConsumer} callback per retry. Controls how the  * response body gets streamed from a non-blocking HTTP connection on the  * client side.  */ public HttpAsyncResponseConsumerFactory getHttpAsyncResponseConsumerFactory() {     return httpAsyncResponseConsumerFactory. }
true;public;0;3;/**  * How this request should handle warnings. If null (the default) then  * this request will default to the behavior dictacted by  * {@link RestClientBuilder#setStrictDeprecationMode}.  * <p>  * This can be set to {@link WarningsHandler#PERMISSIVE} if the client  * should ignore all warnings which is the same behavior as setting  * strictDeprecationMode to true. It can be set to  * {@link WarningsHandler#STRICT} if the client should fail if there are  * any warnings which is the same behavior as settings  * strictDeprecationMode to false.  * <p>  * It can also be set to a custom implementation of  * {@linkplain WarningsHandler} to permit only certain warnings or to  * fail the request if the warnings returned don't  * <strong>exactly</strong> match some set.  */ ;/**  * How this request should handle warnings. If null (the default) then  * this request will default to the behavior dictacted by  * {@link RestClientBuilder#setStrictDeprecationMode}.  * <p>  * This can be set to {@link WarningsHandler#PERMISSIVE} if the client  * should ignore all warnings which is the same behavior as setting  * strictDeprecationMode to true. It can be set to  * {@link WarningsHandler#STRICT} if the client should fail if there are  * any warnings which is the same behavior as settings  * strictDeprecationMode to false.  * <p>  * It can also be set to a custom implementation of  * {@linkplain WarningsHandler} to permit only certain warnings or to  * fail the request if the warnings returned don't  * <strong>exactly</strong> match some set.  */ public WarningsHandler getWarningsHandler() {     return warningsHandler. }
false;public;0;27;;@Override public String toString() {     StringBuilder b = new StringBuilder().     b.append("RequestOptions{").     boolean comma = false.     if (headers.size() > 0) {         b.append("headers=").         comma = true.         for (int h = 0. h < headers.size(). h++) {             if (h != 0) {                 b.append(',').             }             b.append(headers.get(h).toString()).         }     }     if (httpAsyncResponseConsumerFactory != HttpAsyncResponseConsumerFactory.DEFAULT) {         if (comma)             b.append(", ").         comma = true.         b.append("consumerFactory=").append(httpAsyncResponseConsumerFactory).     }     if (warningsHandler != null) {         if (comma)             b.append(", ").         comma = true.         b.append("warningsHandler=").append(warningsHandler).     }     return b.append('}').toString(). }
false;public;1;14;;@Override public boolean equals(Object obj) {     if (obj == null || (obj.getClass() != getClass())) {         return false.     }     if (obj == this) {         return true.     }     RequestOptions other = (RequestOptions) obj.     return headers.equals(other.headers) && httpAsyncResponseConsumerFactory.equals(other.httpAsyncResponseConsumerFactory) && Objects.equals(warningsHandler, other.warningsHandler). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(headers, httpAsyncResponseConsumerFactory, warningsHandler). }
true;public;0;3;/**  * Build the {@linkplain RequestOptions}.  */ ;/**  * Build the {@linkplain RequestOptions}.  */ public RequestOptions build() {     return new RequestOptions(this). }
true;public;2;5;/**  * Add the provided header to the request.  */ ;/**  * Add the provided header to the request.  */ public void addHeader(String name, String value) {     Objects.requireNonNull(name, "header name cannot be null").     Objects.requireNonNull(value, "header value cannot be null").     this.headers.add(new ReqHeader(name, value)). }
true;public;1;4;/**  * Set the {@link HttpAsyncResponseConsumerFactory} used to create one  * {@link HttpAsyncResponseConsumer} callback per retry. Controls how the  * response body gets streamed from a non-blocking HTTP connection on the  * client side.  */ ;/**  * Set the {@link HttpAsyncResponseConsumerFactory} used to create one  * {@link HttpAsyncResponseConsumer} callback per retry. Controls how the  * response body gets streamed from a non-blocking HTTP connection on the  * client side.  */ public void setHttpAsyncResponseConsumerFactory(HttpAsyncResponseConsumerFactory httpAsyncResponseConsumerFactory) {     this.httpAsyncResponseConsumerFactory = Objects.requireNonNull(httpAsyncResponseConsumerFactory, "httpAsyncResponseConsumerFactory cannot be null"). }
true;public;1;3;/**  * How this request should handle warnings. If null (the default) then  * this request will default to the behavior dictacted by  * {@link RestClientBuilder#setStrictDeprecationMode}.  * <p>  * This can be set to {@link WarningsHandler#PERMISSIVE} if the client  * should ignore all warnings which is the same behavior as setting  * strictDeprecationMode to true. It can be set to  * {@link WarningsHandler#STRICT} if the client should fail if there are  * any warnings which is the same behavior as settings  * strictDeprecationMode to false.  * <p>  * It can also be set to a custom implementation of  * {@linkplain WarningsHandler} to permit only certain warnings or to  * fail the request if the warnings returned don't  * <strong>exactly</strong> match some set.  */ ;/**  * How this request should handle warnings. If null (the default) then  * this request will default to the behavior dictacted by  * {@link RestClientBuilder#setStrictDeprecationMode}.  * <p>  * This can be set to {@link WarningsHandler#PERMISSIVE} if the client  * should ignore all warnings which is the same behavior as setting  * strictDeprecationMode to true. It can be set to  * {@link WarningsHandler#STRICT} if the client should fail if there are  * any warnings which is the same behavior as settings  * strictDeprecationMode to false.  * <p>  * It can also be set to a custom implementation of  * {@linkplain WarningsHandler} to permit only certain warnings or to  * fail the request if the warnings returned don't  * <strong>exactly</strong> match some set.  */ public void setWarningsHandler(WarningsHandler warningsHandler) {     this.warningsHandler = warningsHandler. }
false;public;1;12;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other instanceof ReqHeader) {         Header otherHeader = (Header) other.         return Objects.equals(getName(), otherHeader.getName()) && Objects.equals(getValue(), otherHeader.getValue()).     }     return false. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(getName(), getValue()). }
