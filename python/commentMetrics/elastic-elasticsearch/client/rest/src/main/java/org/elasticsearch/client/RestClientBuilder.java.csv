# id;timestamp;commentText;codeText;commentWords;codeWords
RestClientBuilder -> HttpClientConfigCallback -> HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder)_;1524684173;Allows to customize the {@link CloseableHttpAsyncClient} being created and used by the {@link RestClient}._Commonly used to customize the default {@link org.apache.http.client.CredentialsProvider} for authentication_or the {@link SchemeIOSessionStrategy} for communication through ssl without losing any other useful default_value that the {@link RestClientBuilder} internally sets, like connection pooling.;HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder)_;allows,to,customize,the,link,closeable,http,async,client,being,created,and,used,by,the,link,rest,client,commonly,used,to,customize,the,default,link,org,apache,http,client,credentials,provider,for,authentication,or,the,link,scheme,iosession,strategy,for,communication,through,ssl,without,losing,any,other,useful,default,value,that,the,link,rest,client,builder,internally,sets,like,connection,pooling;http,async,client,builder,customize,http,client,http,async,client,builder,http,client,builder
RestClientBuilder -> HttpClientConfigCallback -> HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder)_;1525859433;Allows to customize the {@link CloseableHttpAsyncClient} being created and used by the {@link RestClient}._Commonly used to customize the default {@link org.apache.http.client.CredentialsProvider} for authentication_or the {@link SchemeIOSessionStrategy} for communication through ssl without losing any other useful default_value that the {@link RestClientBuilder} internally sets, like connection pooling.;HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder)_;allows,to,customize,the,link,closeable,http,async,client,being,created,and,used,by,the,link,rest,client,commonly,used,to,customize,the,default,link,org,apache,http,client,credentials,provider,for,authentication,or,the,link,scheme,iosession,strategy,for,communication,through,ssl,without,losing,any,other,useful,default,value,that,the,link,rest,client,builder,internally,sets,like,connection,pooling;http,async,client,builder,customize,http,client,http,async,client,builder,http,client,builder
RestClientBuilder -> HttpClientConfigCallback -> HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder)_;1526574077;Allows to customize the {@link CloseableHttpAsyncClient} being created and used by the {@link RestClient}._Commonly used to customize the default {@link org.apache.http.client.CredentialsProvider} for authentication_or the {@link SchemeIOSessionStrategy} for communication through ssl without losing any other useful default_value that the {@link RestClientBuilder} internally sets, like connection pooling.;HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder)_;allows,to,customize,the,link,closeable,http,async,client,being,created,and,used,by,the,link,rest,client,commonly,used,to,customize,the,default,link,org,apache,http,client,credentials,provider,for,authentication,or,the,link,scheme,iosession,strategy,for,communication,through,ssl,without,losing,any,other,useful,default,value,that,the,link,rest,client,builder,internally,sets,like,connection,pooling;http,async,client,builder,customize,http,client,http,async,client,builder,http,client,builder
RestClientBuilder -> HttpClientConfigCallback -> HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder)_;1528762805;Allows to customize the {@link CloseableHttpAsyncClient} being created and used by the {@link RestClient}._Commonly used to customize the default {@link org.apache.http.client.CredentialsProvider} for authentication_or the {@link SchemeIOSessionStrategy} for communication through ssl without losing any other useful default_value that the {@link RestClientBuilder} internally sets, like connection pooling.;HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder)_;allows,to,customize,the,link,closeable,http,async,client,being,created,and,used,by,the,link,rest,client,commonly,used,to,customize,the,default,link,org,apache,http,client,credentials,provider,for,authentication,or,the,link,scheme,iosession,strategy,for,communication,through,ssl,without,losing,any,other,useful,default,value,that,the,link,rest,client,builder,internally,sets,like,connection,pooling;http,async,client,builder,customize,http,client,http,async,client,builder,http,client,builder
RestClientBuilder -> HttpClientConfigCallback -> HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder)_;1529687475;Allows to customize the {@link CloseableHttpAsyncClient} being created and used by the {@link RestClient}._Commonly used to customize the default {@link org.apache.http.client.CredentialsProvider} for authentication_or the {@link SchemeIOSessionStrategy} for communication through ssl without losing any other useful default_value that the {@link RestClientBuilder} internally sets, like connection pooling.;HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder)_;allows,to,customize,the,link,closeable,http,async,client,being,created,and,used,by,the,link,rest,client,commonly,used,to,customize,the,default,link,org,apache,http,client,credentials,provider,for,authentication,or,the,link,scheme,iosession,strategy,for,communication,through,ssl,without,losing,any,other,useful,default,value,that,the,link,rest,client,builder,internally,sets,like,connection,pooling;http,async,client,builder,customize,http,client,http,async,client,builder,http,client,builder
RestClientBuilder -> HttpClientConfigCallback -> HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder)_;1531179852;Allows to customize the {@link CloseableHttpAsyncClient} being created and used by the {@link RestClient}._Commonly used to customize the default {@link org.apache.http.client.CredentialsProvider} for authentication_or the {@link SchemeIOSessionStrategy} for communication through ssl without losing any other useful default_value that the {@link RestClientBuilder} internally sets, like connection pooling.;HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder)_;allows,to,customize,the,link,closeable,http,async,client,being,created,and,used,by,the,link,rest,client,commonly,used,to,customize,the,default,link,org,apache,http,client,credentials,provider,for,authentication,or,the,link,scheme,iosession,strategy,for,communication,through,ssl,without,losing,any,other,useful,default,value,that,the,link,rest,client,builder,internally,sets,like,connection,pooling;http,async,client,builder,customize,http,client,http,async,client,builder,http,client,builder
RestClientBuilder -> HttpClientConfigCallback -> HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder)_;1538170812;Allows to customize the {@link CloseableHttpAsyncClient} being created and used by the {@link RestClient}._Commonly used to customize the default {@link org.apache.http.client.CredentialsProvider} for authentication_or the {@link SchemeIOSessionStrategy} for communication through ssl without losing any other useful default_value that the {@link RestClientBuilder} internally sets, like connection pooling.;HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder)_;allows,to,customize,the,link,closeable,http,async,client,being,created,and,used,by,the,link,rest,client,commonly,used,to,customize,the,default,link,org,apache,http,client,credentials,provider,for,authentication,or,the,link,scheme,iosession,strategy,for,communication,through,ssl,without,losing,any,other,useful,default,value,that,the,link,rest,client,builder,internally,sets,like,connection,pooling;http,async,client,builder,customize,http,client,http,async,client,builder,http,client,builder
RestClientBuilder -> HttpClientConfigCallback -> HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder)_;1549439027;Allows to customize the {@link CloseableHttpAsyncClient} being created and used by the {@link RestClient}._Commonly used to customize the default {@link org.apache.http.client.CredentialsProvider} for authentication_or the {@link SchemeIOSessionStrategy} for communication through ssl without losing any other useful default_value that the {@link RestClientBuilder} internally sets, like connection pooling.;HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder)_;allows,to,customize,the,link,closeable,http,async,client,being,created,and,used,by,the,link,rest,client,commonly,used,to,customize,the,default,link,org,apache,http,client,credentials,provider,for,authentication,or,the,link,scheme,iosession,strategy,for,communication,through,ssl,without,losing,any,other,useful,default,value,that,the,link,rest,client,builder,internally,sets,like,connection,pooling;http,async,client,builder,customize,http,client,http,async,client,builder,http,client,builder
RestClientBuilder -> RestClientBuilder(HttpHost... hosts);1524684173;Creates a new builder instance and sets the hosts that the client will send requests to.__@throws NullPointerException if {@code hosts} or any host is {@code null}._@throws IllegalArgumentException if {@code hosts} is empty.;RestClientBuilder(HttpHost... hosts) {_        Objects.requireNonNull(hosts, "hosts must not be null")__        if (hosts.length == 0) {_            throw new IllegalArgumentException("no hosts provided")__        }_        for (HttpHost host : hosts) {_            Objects.requireNonNull(host, "host cannot be null")__        }_        this.hosts = hosts__    };creates,a,new,builder,instance,and,sets,the,hosts,that,the,client,will,send,requests,to,throws,null,pointer,exception,if,code,hosts,or,any,host,is,code,null,throws,illegal,argument,exception,if,code,hosts,is,empty;rest,client,builder,http,host,hosts,objects,require,non,null,hosts,hosts,must,not,be,null,if,hosts,length,0,throw,new,illegal,argument,exception,no,hosts,provided,for,http,host,host,hosts,objects,require,non,null,host,host,cannot,be,null,this,hosts,hosts
RestClientBuilder -> RestClientBuilder(HttpHost... hosts);1525859433;Creates a new builder instance and sets the hosts that the client will send requests to.__@throws NullPointerException if {@code hosts} or any host is {@code null}._@throws IllegalArgumentException if {@code hosts} is empty.;RestClientBuilder(HttpHost... hosts) {_        Objects.requireNonNull(hosts, "hosts must not be null")__        if (hosts.length == 0) {_            throw new IllegalArgumentException("no hosts provided")__        }_        for (HttpHost host : hosts) {_            Objects.requireNonNull(host, "host cannot be null")__        }_        this.hosts = hosts__    };creates,a,new,builder,instance,and,sets,the,hosts,that,the,client,will,send,requests,to,throws,null,pointer,exception,if,code,hosts,or,any,host,is,code,null,throws,illegal,argument,exception,if,code,hosts,is,empty;rest,client,builder,http,host,hosts,objects,require,non,null,hosts,hosts,must,not,be,null,if,hosts,length,0,throw,new,illegal,argument,exception,no,hosts,provided,for,http,host,host,hosts,objects,require,non,null,host,host,cannot,be,null,this,hosts,hosts
RestClientBuilder -> RestClientBuilder(HttpHost... hosts);1526574077;Creates a new builder instance and sets the hosts that the client will send requests to.__@throws NullPointerException if {@code hosts} or any host is {@code null}._@throws IllegalArgumentException if {@code hosts} is empty.;RestClientBuilder(HttpHost... hosts) {_        Objects.requireNonNull(hosts, "hosts must not be null")__        if (hosts.length == 0) {_            throw new IllegalArgumentException("no hosts provided")__        }_        for (HttpHost host : hosts) {_            Objects.requireNonNull(host, "host cannot be null")__        }_        this.hosts = hosts__    };creates,a,new,builder,instance,and,sets,the,hosts,that,the,client,will,send,requests,to,throws,null,pointer,exception,if,code,hosts,or,any,host,is,code,null,throws,illegal,argument,exception,if,code,hosts,is,empty;rest,client,builder,http,host,hosts,objects,require,non,null,hosts,hosts,must,not,be,null,if,hosts,length,0,throw,new,illegal,argument,exception,no,hosts,provided,for,http,host,host,hosts,objects,require,non,null,host,host,cannot,be,null,this,hosts,hosts
RestClientBuilder -> public RestClientBuilder setPathPrefix(String pathPrefix);1524684173;Sets the path's prefix for every request used by the http client._<p>_For example, if this is set to "/my/path", then any client request will become <code>"/my/path/" + endpoint</code>._<p>_In essence, every request's {@code endpoint} is prefixed by this {@code pathPrefix}. The path prefix is useful for when_Elasticsearch is behind a proxy that provides a base path_ it is not intended for other purposes and it should not be supplied in_other scenarios.__@throws NullPointerException if {@code pathPrefix} is {@code null}._@throws IllegalArgumentException if {@code pathPrefix} is empty, only '/', or ends with more than one '/'.;public RestClientBuilder setPathPrefix(String pathPrefix) {_        Objects.requireNonNull(pathPrefix, "pathPrefix must not be null")__        String cleanPathPrefix = pathPrefix___        if (cleanPathPrefix.startsWith("/") == false) {_            cleanPathPrefix = "/" + cleanPathPrefix__        }__        _        if (cleanPathPrefix.endsWith("/")) {_            cleanPathPrefix = cleanPathPrefix.substring(0, cleanPathPrefix.length() - 1)___            if (cleanPathPrefix.endsWith("/")) {_                throw new IllegalArgumentException("pathPrefix is malformed. too many trailing slashes: [" + pathPrefix + "]")__            }_        }__        if (cleanPathPrefix.isEmpty() || "/".equals(cleanPathPrefix)) {_            throw new IllegalArgumentException("pathPrefix must not be empty or '/': [" + pathPrefix + "]")__        }__        this.pathPrefix = cleanPathPrefix__        return this__    };sets,the,path,s,prefix,for,every,request,used,by,the,http,client,p,for,example,if,this,is,set,to,my,path,then,any,client,request,will,become,code,my,path,endpoint,code,p,in,essence,every,request,s,code,endpoint,is,prefixed,by,this,code,path,prefix,the,path,prefix,is,useful,for,when,elasticsearch,is,behind,a,proxy,that,provides,a,base,path,it,is,not,intended,for,other,purposes,and,it,should,not,be,supplied,in,other,scenarios,throws,null,pointer,exception,if,code,path,prefix,is,code,null,throws,illegal,argument,exception,if,code,path,prefix,is,empty,only,or,ends,with,more,than,one;public,rest,client,builder,set,path,prefix,string,path,prefix,objects,require,non,null,path,prefix,path,prefix,must,not,be,null,string,clean,path,prefix,path,prefix,if,clean,path,prefix,starts,with,false,clean,path,prefix,clean,path,prefix,if,clean,path,prefix,ends,with,clean,path,prefix,clean,path,prefix,substring,0,clean,path,prefix,length,1,if,clean,path,prefix,ends,with,throw,new,illegal,argument,exception,path,prefix,is,malformed,too,many,trailing,slashes,path,prefix,if,clean,path,prefix,is,empty,equals,clean,path,prefix,throw,new,illegal,argument,exception,path,prefix,must,not,be,empty,or,path,prefix,this,path,prefix,clean,path,prefix,return,this
RestClientBuilder -> public RestClientBuilder setPathPrefix(String pathPrefix);1525859433;Sets the path's prefix for every request used by the http client._<p>_For example, if this is set to "/my/path", then any client request will become <code>"/my/path/" + endpoint</code>._<p>_In essence, every request's {@code endpoint} is prefixed by this {@code pathPrefix}. The path prefix is useful for when_Elasticsearch is behind a proxy that provides a base path_ it is not intended for other purposes and it should not be supplied in_other scenarios.__@throws NullPointerException if {@code pathPrefix} is {@code null}._@throws IllegalArgumentException if {@code pathPrefix} is empty, only '/', or ends with more than one '/'.;public RestClientBuilder setPathPrefix(String pathPrefix) {_        Objects.requireNonNull(pathPrefix, "pathPrefix must not be null")__        String cleanPathPrefix = pathPrefix___        if (cleanPathPrefix.startsWith("/") == false) {_            cleanPathPrefix = "/" + cleanPathPrefix__        }__        _        if (cleanPathPrefix.endsWith("/")) {_            cleanPathPrefix = cleanPathPrefix.substring(0, cleanPathPrefix.length() - 1)___            if (cleanPathPrefix.endsWith("/")) {_                throw new IllegalArgumentException("pathPrefix is malformed. too many trailing slashes: [" + pathPrefix + "]")__            }_        }__        if (cleanPathPrefix.isEmpty() || "/".equals(cleanPathPrefix)) {_            throw new IllegalArgumentException("pathPrefix must not be empty or '/': [" + pathPrefix + "]")__        }__        this.pathPrefix = cleanPathPrefix__        return this__    };sets,the,path,s,prefix,for,every,request,used,by,the,http,client,p,for,example,if,this,is,set,to,my,path,then,any,client,request,will,become,code,my,path,endpoint,code,p,in,essence,every,request,s,code,endpoint,is,prefixed,by,this,code,path,prefix,the,path,prefix,is,useful,for,when,elasticsearch,is,behind,a,proxy,that,provides,a,base,path,it,is,not,intended,for,other,purposes,and,it,should,not,be,supplied,in,other,scenarios,throws,null,pointer,exception,if,code,path,prefix,is,code,null,throws,illegal,argument,exception,if,code,path,prefix,is,empty,only,or,ends,with,more,than,one;public,rest,client,builder,set,path,prefix,string,path,prefix,objects,require,non,null,path,prefix,path,prefix,must,not,be,null,string,clean,path,prefix,path,prefix,if,clean,path,prefix,starts,with,false,clean,path,prefix,clean,path,prefix,if,clean,path,prefix,ends,with,clean,path,prefix,clean,path,prefix,substring,0,clean,path,prefix,length,1,if,clean,path,prefix,ends,with,throw,new,illegal,argument,exception,path,prefix,is,malformed,too,many,trailing,slashes,path,prefix,if,clean,path,prefix,is,empty,equals,clean,path,prefix,throw,new,illegal,argument,exception,path,prefix,must,not,be,empty,or,path,prefix,this,path,prefix,clean,path,prefix,return,this
RestClientBuilder -> public RestClientBuilder setPathPrefix(String pathPrefix);1526574077;Sets the path's prefix for every request used by the http client._<p>_For example, if this is set to "/my/path", then any client request will become <code>"/my/path/" + endpoint</code>._<p>_In essence, every request's {@code endpoint} is prefixed by this {@code pathPrefix}. The path prefix is useful for when_Elasticsearch is behind a proxy that provides a base path_ it is not intended for other purposes and it should not be supplied in_other scenarios.__@throws NullPointerException if {@code pathPrefix} is {@code null}._@throws IllegalArgumentException if {@code pathPrefix} is empty, only '/', or ends with more than one '/'.;public RestClientBuilder setPathPrefix(String pathPrefix) {_        Objects.requireNonNull(pathPrefix, "pathPrefix must not be null")__        String cleanPathPrefix = pathPrefix___        if (cleanPathPrefix.startsWith("/") == false) {_            cleanPathPrefix = "/" + cleanPathPrefix__        }__        _        if (cleanPathPrefix.endsWith("/")) {_            cleanPathPrefix = cleanPathPrefix.substring(0, cleanPathPrefix.length() - 1)___            if (cleanPathPrefix.endsWith("/")) {_                throw new IllegalArgumentException("pathPrefix is malformed. too many trailing slashes: [" + pathPrefix + "]")__            }_        }__        if (cleanPathPrefix.isEmpty() || "/".equals(cleanPathPrefix)) {_            throw new IllegalArgumentException("pathPrefix must not be empty or '/': [" + pathPrefix + "]")__        }__        this.pathPrefix = cleanPathPrefix__        return this__    };sets,the,path,s,prefix,for,every,request,used,by,the,http,client,p,for,example,if,this,is,set,to,my,path,then,any,client,request,will,become,code,my,path,endpoint,code,p,in,essence,every,request,s,code,endpoint,is,prefixed,by,this,code,path,prefix,the,path,prefix,is,useful,for,when,elasticsearch,is,behind,a,proxy,that,provides,a,base,path,it,is,not,intended,for,other,purposes,and,it,should,not,be,supplied,in,other,scenarios,throws,null,pointer,exception,if,code,path,prefix,is,code,null,throws,illegal,argument,exception,if,code,path,prefix,is,empty,only,or,ends,with,more,than,one;public,rest,client,builder,set,path,prefix,string,path,prefix,objects,require,non,null,path,prefix,path,prefix,must,not,be,null,string,clean,path,prefix,path,prefix,if,clean,path,prefix,starts,with,false,clean,path,prefix,clean,path,prefix,if,clean,path,prefix,ends,with,clean,path,prefix,clean,path,prefix,substring,0,clean,path,prefix,length,1,if,clean,path,prefix,ends,with,throw,new,illegal,argument,exception,path,prefix,is,malformed,too,many,trailing,slashes,path,prefix,if,clean,path,prefix,is,empty,equals,clean,path,prefix,throw,new,illegal,argument,exception,path,prefix,must,not,be,empty,or,path,prefix,this,path,prefix,clean,path,prefix,return,this
RestClientBuilder -> public RestClientBuilder setPathPrefix(String pathPrefix);1528762805;Sets the path's prefix for every request used by the http client._<p>_For example, if this is set to "/my/path", then any client request will become <code>"/my/path/" + endpoint</code>._<p>_In essence, every request's {@code endpoint} is prefixed by this {@code pathPrefix}. The path prefix is useful for when_Elasticsearch is behind a proxy that provides a base path_ it is not intended for other purposes and it should not be supplied in_other scenarios.__@throws NullPointerException if {@code pathPrefix} is {@code null}._@throws IllegalArgumentException if {@code pathPrefix} is empty, only '/', or ends with more than one '/'.;public RestClientBuilder setPathPrefix(String pathPrefix) {_        Objects.requireNonNull(pathPrefix, "pathPrefix must not be null")__        String cleanPathPrefix = pathPrefix___        if (cleanPathPrefix.startsWith("/") == false) {_            cleanPathPrefix = "/" + cleanPathPrefix__        }__        _        if (cleanPathPrefix.endsWith("/")) {_            cleanPathPrefix = cleanPathPrefix.substring(0, cleanPathPrefix.length() - 1)___            if (cleanPathPrefix.endsWith("/")) {_                throw new IllegalArgumentException("pathPrefix is malformed. too many trailing slashes: [" + pathPrefix + "]")__            }_        }__        if (cleanPathPrefix.isEmpty() || "/".equals(cleanPathPrefix)) {_            throw new IllegalArgumentException("pathPrefix must not be empty or '/': [" + pathPrefix + "]")__        }__        this.pathPrefix = cleanPathPrefix__        return this__    };sets,the,path,s,prefix,for,every,request,used,by,the,http,client,p,for,example,if,this,is,set,to,my,path,then,any,client,request,will,become,code,my,path,endpoint,code,p,in,essence,every,request,s,code,endpoint,is,prefixed,by,this,code,path,prefix,the,path,prefix,is,useful,for,when,elasticsearch,is,behind,a,proxy,that,provides,a,base,path,it,is,not,intended,for,other,purposes,and,it,should,not,be,supplied,in,other,scenarios,throws,null,pointer,exception,if,code,path,prefix,is,code,null,throws,illegal,argument,exception,if,code,path,prefix,is,empty,only,or,ends,with,more,than,one;public,rest,client,builder,set,path,prefix,string,path,prefix,objects,require,non,null,path,prefix,path,prefix,must,not,be,null,string,clean,path,prefix,path,prefix,if,clean,path,prefix,starts,with,false,clean,path,prefix,clean,path,prefix,if,clean,path,prefix,ends,with,clean,path,prefix,clean,path,prefix,substring,0,clean,path,prefix,length,1,if,clean,path,prefix,ends,with,throw,new,illegal,argument,exception,path,prefix,is,malformed,too,many,trailing,slashes,path,prefix,if,clean,path,prefix,is,empty,equals,clean,path,prefix,throw,new,illegal,argument,exception,path,prefix,must,not,be,empty,or,path,prefix,this,path,prefix,clean,path,prefix,return,this
RestClientBuilder -> public RestClientBuilder setPathPrefix(String pathPrefix);1529687475;Sets the path's prefix for every request used by the http client._<p>_For example, if this is set to "/my/path", then any client request will become <code>"/my/path/" + endpoint</code>._<p>_In essence, every request's {@code endpoint} is prefixed by this {@code pathPrefix}. The path prefix is useful for when_Elasticsearch is behind a proxy that provides a base path_ it is not intended for other purposes and it should not be supplied in_other scenarios.__@throws NullPointerException if {@code pathPrefix} is {@code null}._@throws IllegalArgumentException if {@code pathPrefix} is empty, only '/', or ends with more than one '/'.;public RestClientBuilder setPathPrefix(String pathPrefix) {_        Objects.requireNonNull(pathPrefix, "pathPrefix must not be null")__        String cleanPathPrefix = pathPrefix___        if (cleanPathPrefix.startsWith("/") == false) {_            cleanPathPrefix = "/" + cleanPathPrefix__        }__        _        if (cleanPathPrefix.endsWith("/")) {_            cleanPathPrefix = cleanPathPrefix.substring(0, cleanPathPrefix.length() - 1)___            if (cleanPathPrefix.endsWith("/")) {_                throw new IllegalArgumentException("pathPrefix is malformed. too many trailing slashes: [" + pathPrefix + "]")__            }_        }__        if (cleanPathPrefix.isEmpty() || "/".equals(cleanPathPrefix)) {_            throw new IllegalArgumentException("pathPrefix must not be empty or '/': [" + pathPrefix + "]")__        }__        this.pathPrefix = cleanPathPrefix__        return this__    };sets,the,path,s,prefix,for,every,request,used,by,the,http,client,p,for,example,if,this,is,set,to,my,path,then,any,client,request,will,become,code,my,path,endpoint,code,p,in,essence,every,request,s,code,endpoint,is,prefixed,by,this,code,path,prefix,the,path,prefix,is,useful,for,when,elasticsearch,is,behind,a,proxy,that,provides,a,base,path,it,is,not,intended,for,other,purposes,and,it,should,not,be,supplied,in,other,scenarios,throws,null,pointer,exception,if,code,path,prefix,is,code,null,throws,illegal,argument,exception,if,code,path,prefix,is,empty,only,or,ends,with,more,than,one;public,rest,client,builder,set,path,prefix,string,path,prefix,objects,require,non,null,path,prefix,path,prefix,must,not,be,null,string,clean,path,prefix,path,prefix,if,clean,path,prefix,starts,with,false,clean,path,prefix,clean,path,prefix,if,clean,path,prefix,ends,with,clean,path,prefix,clean,path,prefix,substring,0,clean,path,prefix,length,1,if,clean,path,prefix,ends,with,throw,new,illegal,argument,exception,path,prefix,is,malformed,too,many,trailing,slashes,path,prefix,if,clean,path,prefix,is,empty,equals,clean,path,prefix,throw,new,illegal,argument,exception,path,prefix,must,not,be,empty,or,path,prefix,this,path,prefix,clean,path,prefix,return,this
RestClientBuilder -> public RestClientBuilder setPathPrefix(String pathPrefix);1531179852;Sets the path's prefix for every request used by the http client._<p>_For example, if this is set to "/my/path", then any client request will become <code>"/my/path/" + endpoint</code>._<p>_In essence, every request's {@code endpoint} is prefixed by this {@code pathPrefix}. The path prefix is useful for when_Elasticsearch is behind a proxy that provides a base path or a proxy that requires all paths to start with '/'__it is not intended for other purposes and it should not be supplied in other scenarios.__@throws NullPointerException if {@code pathPrefix} is {@code null}._@throws IllegalArgumentException if {@code pathPrefix} is empty, or ends with more than one '/'.;public RestClientBuilder setPathPrefix(String pathPrefix) {_        Objects.requireNonNull(pathPrefix, "pathPrefix must not be null")___        if (pathPrefix.isEmpty()) {_            throw new IllegalArgumentException("pathPrefix must not be empty")__        }__        String cleanPathPrefix = pathPrefix__        if (cleanPathPrefix.startsWith("/") == false) {_            cleanPathPrefix = "/" + cleanPathPrefix__        }__        _        if (cleanPathPrefix.endsWith("/") && cleanPathPrefix.length() > 1) {_            cleanPathPrefix = cleanPathPrefix.substring(0, cleanPathPrefix.length() - 1)___            if (cleanPathPrefix.endsWith("/")) {_                throw new IllegalArgumentException("pathPrefix is malformed. too many trailing slashes: [" + pathPrefix + "]")__            }_        }___        this.pathPrefix = cleanPathPrefix__        return this__    };sets,the,path,s,prefix,for,every,request,used,by,the,http,client,p,for,example,if,this,is,set,to,my,path,then,any,client,request,will,become,code,my,path,endpoint,code,p,in,essence,every,request,s,code,endpoint,is,prefixed,by,this,code,path,prefix,the,path,prefix,is,useful,for,when,elasticsearch,is,behind,a,proxy,that,provides,a,base,path,or,a,proxy,that,requires,all,paths,to,start,with,it,is,not,intended,for,other,purposes,and,it,should,not,be,supplied,in,other,scenarios,throws,null,pointer,exception,if,code,path,prefix,is,code,null,throws,illegal,argument,exception,if,code,path,prefix,is,empty,or,ends,with,more,than,one;public,rest,client,builder,set,path,prefix,string,path,prefix,objects,require,non,null,path,prefix,path,prefix,must,not,be,null,if,path,prefix,is,empty,throw,new,illegal,argument,exception,path,prefix,must,not,be,empty,string,clean,path,prefix,path,prefix,if,clean,path,prefix,starts,with,false,clean,path,prefix,clean,path,prefix,if,clean,path,prefix,ends,with,clean,path,prefix,length,1,clean,path,prefix,clean,path,prefix,substring,0,clean,path,prefix,length,1,if,clean,path,prefix,ends,with,throw,new,illegal,argument,exception,path,prefix,is,malformed,too,many,trailing,slashes,path,prefix,this,path,prefix,clean,path,prefix,return,this
RestClientBuilder -> public RestClientBuilder setPathPrefix(String pathPrefix);1538170812;Sets the path's prefix for every request used by the http client._<p>_For example, if this is set to "/my/path", then any client request will become <code>"/my/path/" + endpoint</code>._<p>_In essence, every request's {@code endpoint} is prefixed by this {@code pathPrefix}. The path prefix is useful for when_Elasticsearch is behind a proxy that provides a base path or a proxy that requires all paths to start with '/'__it is not intended for other purposes and it should not be supplied in other scenarios.__@throws NullPointerException if {@code pathPrefix} is {@code null}._@throws IllegalArgumentException if {@code pathPrefix} is empty, or ends with more than one '/'.;public RestClientBuilder setPathPrefix(String pathPrefix) {_        Objects.requireNonNull(pathPrefix, "pathPrefix must not be null")___        if (pathPrefix.isEmpty()) {_            throw new IllegalArgumentException("pathPrefix must not be empty")__        }__        String cleanPathPrefix = pathPrefix__        if (cleanPathPrefix.startsWith("/") == false) {_            cleanPathPrefix = "/" + cleanPathPrefix__        }__        _        if (cleanPathPrefix.endsWith("/") && cleanPathPrefix.length() > 1) {_            cleanPathPrefix = cleanPathPrefix.substring(0, cleanPathPrefix.length() - 1)___            if (cleanPathPrefix.endsWith("/")) {_                throw new IllegalArgumentException("pathPrefix is malformed. too many trailing slashes: [" + pathPrefix + "]")__            }_        }___        this.pathPrefix = cleanPathPrefix__        return this__    };sets,the,path,s,prefix,for,every,request,used,by,the,http,client,p,for,example,if,this,is,set,to,my,path,then,any,client,request,will,become,code,my,path,endpoint,code,p,in,essence,every,request,s,code,endpoint,is,prefixed,by,this,code,path,prefix,the,path,prefix,is,useful,for,when,elasticsearch,is,behind,a,proxy,that,provides,a,base,path,or,a,proxy,that,requires,all,paths,to,start,with,it,is,not,intended,for,other,purposes,and,it,should,not,be,supplied,in,other,scenarios,throws,null,pointer,exception,if,code,path,prefix,is,code,null,throws,illegal,argument,exception,if,code,path,prefix,is,empty,or,ends,with,more,than,one;public,rest,client,builder,set,path,prefix,string,path,prefix,objects,require,non,null,path,prefix,path,prefix,must,not,be,null,if,path,prefix,is,empty,throw,new,illegal,argument,exception,path,prefix,must,not,be,empty,string,clean,path,prefix,path,prefix,if,clean,path,prefix,starts,with,false,clean,path,prefix,clean,path,prefix,if,clean,path,prefix,ends,with,clean,path,prefix,length,1,clean,path,prefix,clean,path,prefix,substring,0,clean,path,prefix,length,1,if,clean,path,prefix,ends,with,throw,new,illegal,argument,exception,path,prefix,is,malformed,too,many,trailing,slashes,path,prefix,this,path,prefix,clean,path,prefix,return,this
RestClientBuilder -> public RestClientBuilder setPathPrefix(String pathPrefix);1549439027;Sets the path's prefix for every request used by the http client._<p>_For example, if this is set to "/my/path", then any client request will become <code>"/my/path/" + endpoint</code>._<p>_In essence, every request's {@code endpoint} is prefixed by this {@code pathPrefix}. The path prefix is useful for when_Elasticsearch is behind a proxy that provides a base path or a proxy that requires all paths to start with '/'__it is not intended for other purposes and it should not be supplied in other scenarios.__@throws NullPointerException if {@code pathPrefix} is {@code null}._@throws IllegalArgumentException if {@code pathPrefix} is empty, or ends with more than one '/'.;public RestClientBuilder setPathPrefix(String pathPrefix) {_        Objects.requireNonNull(pathPrefix, "pathPrefix must not be null")___        if (pathPrefix.isEmpty()) {_            throw new IllegalArgumentException("pathPrefix must not be empty")__        }__        String cleanPathPrefix = pathPrefix__        if (cleanPathPrefix.startsWith("/") == false) {_            cleanPathPrefix = "/" + cleanPathPrefix__        }__        _        if (cleanPathPrefix.endsWith("/") && cleanPathPrefix.length() > 1) {_            cleanPathPrefix = cleanPathPrefix.substring(0, cleanPathPrefix.length() - 1)___            if (cleanPathPrefix.endsWith("/")) {_                throw new IllegalArgumentException("pathPrefix is malformed. too many trailing slashes: [" + pathPrefix + "]")__            }_        }___        this.pathPrefix = cleanPathPrefix__        return this__    };sets,the,path,s,prefix,for,every,request,used,by,the,http,client,p,for,example,if,this,is,set,to,my,path,then,any,client,request,will,become,code,my,path,endpoint,code,p,in,essence,every,request,s,code,endpoint,is,prefixed,by,this,code,path,prefix,the,path,prefix,is,useful,for,when,elasticsearch,is,behind,a,proxy,that,provides,a,base,path,or,a,proxy,that,requires,all,paths,to,start,with,it,is,not,intended,for,other,purposes,and,it,should,not,be,supplied,in,other,scenarios,throws,null,pointer,exception,if,code,path,prefix,is,code,null,throws,illegal,argument,exception,if,code,path,prefix,is,empty,or,ends,with,more,than,one;public,rest,client,builder,set,path,prefix,string,path,prefix,objects,require,non,null,path,prefix,path,prefix,must,not,be,null,if,path,prefix,is,empty,throw,new,illegal,argument,exception,path,prefix,must,not,be,empty,string,clean,path,prefix,path,prefix,if,clean,path,prefix,starts,with,false,clean,path,prefix,clean,path,prefix,if,clean,path,prefix,ends,with,clean,path,prefix,length,1,clean,path,prefix,clean,path,prefix,substring,0,clean,path,prefix,length,1,if,clean,path,prefix,ends,with,throw,new,illegal,argument,exception,path,prefix,is,malformed,too,many,trailing,slashes,path,prefix,this,path,prefix,clean,path,prefix,return,this
RestClientBuilder -> public RestClientBuilder setMaxRetryTimeoutMillis(int maxRetryTimeoutMillis);1524684173;Sets the maximum timeout (in milliseconds) to honour in case of multiple retries of the same request._{@link #DEFAULT_MAX_RETRY_TIMEOUT_MILLIS} if not specified.__@throws IllegalArgumentException if {@code maxRetryTimeoutMillis} is not greater than 0;public RestClientBuilder setMaxRetryTimeoutMillis(int maxRetryTimeoutMillis) {_        if (maxRetryTimeoutMillis <= 0) {_            throw new IllegalArgumentException("maxRetryTimeoutMillis must be greater than 0")__        }_        this.maxRetryTimeout = maxRetryTimeoutMillis__        return this__    };sets,the,maximum,timeout,in,milliseconds,to,honour,in,case,of,multiple,retries,of,the,same,request,link,if,not,specified,throws,illegal,argument,exception,if,code,max,retry,timeout,millis,is,not,greater,than,0;public,rest,client,builder,set,max,retry,timeout,millis,int,max,retry,timeout,millis,if,max,retry,timeout,millis,0,throw,new,illegal,argument,exception,max,retry,timeout,millis,must,be,greater,than,0,this,max,retry,timeout,max,retry,timeout,millis,return,this
RestClientBuilder -> public RestClientBuilder setMaxRetryTimeoutMillis(int maxRetryTimeoutMillis);1525859433;Sets the maximum timeout (in milliseconds) to honour in case of multiple retries of the same request._{@link #DEFAULT_MAX_RETRY_TIMEOUT_MILLIS} if not specified.__@throws IllegalArgumentException if {@code maxRetryTimeoutMillis} is not greater than 0;public RestClientBuilder setMaxRetryTimeoutMillis(int maxRetryTimeoutMillis) {_        if (maxRetryTimeoutMillis <= 0) {_            throw new IllegalArgumentException("maxRetryTimeoutMillis must be greater than 0")__        }_        this.maxRetryTimeout = maxRetryTimeoutMillis__        return this__    };sets,the,maximum,timeout,in,milliseconds,to,honour,in,case,of,multiple,retries,of,the,same,request,link,if,not,specified,throws,illegal,argument,exception,if,code,max,retry,timeout,millis,is,not,greater,than,0;public,rest,client,builder,set,max,retry,timeout,millis,int,max,retry,timeout,millis,if,max,retry,timeout,millis,0,throw,new,illegal,argument,exception,max,retry,timeout,millis,must,be,greater,than,0,this,max,retry,timeout,max,retry,timeout,millis,return,this
RestClientBuilder -> public RestClientBuilder setMaxRetryTimeoutMillis(int maxRetryTimeoutMillis);1526574077;Sets the maximum timeout (in milliseconds) to honour in case of multiple retries of the same request._{@link #DEFAULT_MAX_RETRY_TIMEOUT_MILLIS} if not specified.__@throws IllegalArgumentException if {@code maxRetryTimeoutMillis} is not greater than 0;public RestClientBuilder setMaxRetryTimeoutMillis(int maxRetryTimeoutMillis) {_        if (maxRetryTimeoutMillis <= 0) {_            throw new IllegalArgumentException("maxRetryTimeoutMillis must be greater than 0")__        }_        this.maxRetryTimeout = maxRetryTimeoutMillis__        return this__    };sets,the,maximum,timeout,in,milliseconds,to,honour,in,case,of,multiple,retries,of,the,same,request,link,if,not,specified,throws,illegal,argument,exception,if,code,max,retry,timeout,millis,is,not,greater,than,0;public,rest,client,builder,set,max,retry,timeout,millis,int,max,retry,timeout,millis,if,max,retry,timeout,millis,0,throw,new,illegal,argument,exception,max,retry,timeout,millis,must,be,greater,than,0,this,max,retry,timeout,max,retry,timeout,millis,return,this
RestClientBuilder -> public RestClientBuilder setMaxRetryTimeoutMillis(int maxRetryTimeoutMillis);1528762805;Sets the maximum timeout (in milliseconds) to honour in case of multiple retries of the same request._{@link #DEFAULT_MAX_RETRY_TIMEOUT_MILLIS} if not specified.__@throws IllegalArgumentException if {@code maxRetryTimeoutMillis} is not greater than 0;public RestClientBuilder setMaxRetryTimeoutMillis(int maxRetryTimeoutMillis) {_        if (maxRetryTimeoutMillis <= 0) {_            throw new IllegalArgumentException("maxRetryTimeoutMillis must be greater than 0")__        }_        this.maxRetryTimeout = maxRetryTimeoutMillis__        return this__    };sets,the,maximum,timeout,in,milliseconds,to,honour,in,case,of,multiple,retries,of,the,same,request,link,if,not,specified,throws,illegal,argument,exception,if,code,max,retry,timeout,millis,is,not,greater,than,0;public,rest,client,builder,set,max,retry,timeout,millis,int,max,retry,timeout,millis,if,max,retry,timeout,millis,0,throw,new,illegal,argument,exception,max,retry,timeout,millis,must,be,greater,than,0,this,max,retry,timeout,max,retry,timeout,millis,return,this
RestClientBuilder -> public RestClientBuilder setMaxRetryTimeoutMillis(int maxRetryTimeoutMillis);1529687475;Sets the maximum timeout (in milliseconds) to honour in case of multiple retries of the same request._{@link #DEFAULT_MAX_RETRY_TIMEOUT_MILLIS} if not specified.__@throws IllegalArgumentException if {@code maxRetryTimeoutMillis} is not greater than 0;public RestClientBuilder setMaxRetryTimeoutMillis(int maxRetryTimeoutMillis) {_        if (maxRetryTimeoutMillis <= 0) {_            throw new IllegalArgumentException("maxRetryTimeoutMillis must be greater than 0")__        }_        this.maxRetryTimeout = maxRetryTimeoutMillis__        return this__    };sets,the,maximum,timeout,in,milliseconds,to,honour,in,case,of,multiple,retries,of,the,same,request,link,if,not,specified,throws,illegal,argument,exception,if,code,max,retry,timeout,millis,is,not,greater,than,0;public,rest,client,builder,set,max,retry,timeout,millis,int,max,retry,timeout,millis,if,max,retry,timeout,millis,0,throw,new,illegal,argument,exception,max,retry,timeout,millis,must,be,greater,than,0,this,max,retry,timeout,max,retry,timeout,millis,return,this
RestClientBuilder -> public RestClientBuilder setMaxRetryTimeoutMillis(int maxRetryTimeoutMillis);1531179852;Sets the maximum timeout (in milliseconds) to honour in case of multiple retries of the same request._{@link #DEFAULT_MAX_RETRY_TIMEOUT_MILLIS} if not specified.__@throws IllegalArgumentException if {@code maxRetryTimeoutMillis} is not greater than 0;public RestClientBuilder setMaxRetryTimeoutMillis(int maxRetryTimeoutMillis) {_        if (maxRetryTimeoutMillis <= 0) {_            throw new IllegalArgumentException("maxRetryTimeoutMillis must be greater than 0")__        }_        this.maxRetryTimeout = maxRetryTimeoutMillis__        return this__    };sets,the,maximum,timeout,in,milliseconds,to,honour,in,case,of,multiple,retries,of,the,same,request,link,if,not,specified,throws,illegal,argument,exception,if,code,max,retry,timeout,millis,is,not,greater,than,0;public,rest,client,builder,set,max,retry,timeout,millis,int,max,retry,timeout,millis,if,max,retry,timeout,millis,0,throw,new,illegal,argument,exception,max,retry,timeout,millis,must,be,greater,than,0,this,max,retry,timeout,max,retry,timeout,millis,return,this
RestClientBuilder -> public RestClientBuilder setMaxRetryTimeoutMillis(int maxRetryTimeoutMillis);1538170812;Sets the maximum timeout (in milliseconds) to honour in case of multiple retries of the same request._{@link #DEFAULT_MAX_RETRY_TIMEOUT_MILLIS} if not specified.__@throws IllegalArgumentException if {@code maxRetryTimeoutMillis} is not greater than 0;public RestClientBuilder setMaxRetryTimeoutMillis(int maxRetryTimeoutMillis) {_        if (maxRetryTimeoutMillis <= 0) {_            throw new IllegalArgumentException("maxRetryTimeoutMillis must be greater than 0")__        }_        this.maxRetryTimeout = maxRetryTimeoutMillis__        return this__    };sets,the,maximum,timeout,in,milliseconds,to,honour,in,case,of,multiple,retries,of,the,same,request,link,if,not,specified,throws,illegal,argument,exception,if,code,max,retry,timeout,millis,is,not,greater,than,0;public,rest,client,builder,set,max,retry,timeout,millis,int,max,retry,timeout,millis,if,max,retry,timeout,millis,0,throw,new,illegal,argument,exception,max,retry,timeout,millis,must,be,greater,than,0,this,max,retry,timeout,max,retry,timeout,millis,return,this
RestClientBuilder -> public RestClientBuilder setNodeSelector(NodeSelector nodeSelector);1529687475;Sets the {@link NodeSelector} to be used for all requests._@throws NullPointerException if the provided nodeSelector is null;public RestClientBuilder setNodeSelector(NodeSelector nodeSelector) {_        Objects.requireNonNull(nodeSelector, "nodeSelector must not be null")__        this.nodeSelector = nodeSelector__        return this__    };sets,the,link,node,selector,to,be,used,for,all,requests,throws,null,pointer,exception,if,the,provided,node,selector,is,null;public,rest,client,builder,set,node,selector,node,selector,node,selector,objects,require,non,null,node,selector,node,selector,must,not,be,null,this,node,selector,node,selector,return,this
RestClientBuilder -> public RestClientBuilder setNodeSelector(NodeSelector nodeSelector);1531179852;Sets the {@link NodeSelector} to be used for all requests._@throws NullPointerException if the provided nodeSelector is null;public RestClientBuilder setNodeSelector(NodeSelector nodeSelector) {_        Objects.requireNonNull(nodeSelector, "nodeSelector must not be null")__        this.nodeSelector = nodeSelector__        return this__    };sets,the,link,node,selector,to,be,used,for,all,requests,throws,null,pointer,exception,if,the,provided,node,selector,is,null;public,rest,client,builder,set,node,selector,node,selector,node,selector,objects,require,non,null,node,selector,node,selector,must,not,be,null,this,node,selector,node,selector,return,this
RestClientBuilder -> public RestClientBuilder setNodeSelector(NodeSelector nodeSelector);1538170812;Sets the {@link NodeSelector} to be used for all requests._@throws NullPointerException if the provided nodeSelector is null;public RestClientBuilder setNodeSelector(NodeSelector nodeSelector) {_        Objects.requireNonNull(nodeSelector, "nodeSelector must not be null")__        this.nodeSelector = nodeSelector__        return this__    };sets,the,link,node,selector,to,be,used,for,all,requests,throws,null,pointer,exception,if,the,provided,node,selector,is,null;public,rest,client,builder,set,node,selector,node,selector,node,selector,objects,require,non,null,node,selector,node,selector,must,not,be,null,this,node,selector,node,selector,return,this
RestClientBuilder -> public RestClientBuilder setNodeSelector(NodeSelector nodeSelector);1549439027;Sets the {@link NodeSelector} to be used for all requests._@throws NullPointerException if the provided nodeSelector is null;public RestClientBuilder setNodeSelector(NodeSelector nodeSelector) {_        Objects.requireNonNull(nodeSelector, "nodeSelector must not be null")__        this.nodeSelector = nodeSelector__        return this__    };sets,the,link,node,selector,to,be,used,for,all,requests,throws,null,pointer,exception,if,the,provided,node,selector,is,null;public,rest,client,builder,set,node,selector,node,selector,node,selector,objects,require,non,null,node,selector,node,selector,must,not,be,null,this,node,selector,node,selector,return,this
RestClientBuilder -> public RestClientBuilder setDefaultHeaders(Header[] defaultHeaders);1524684173;Sets the default request headers, which will be sent along with each request._<p>_Request-time headers will always overwrite any default headers.__@throws NullPointerException if {@code defaultHeaders} or any header is {@code null}.;public RestClientBuilder setDefaultHeaders(Header[] defaultHeaders) {_        Objects.requireNonNull(defaultHeaders, "defaultHeaders must not be null")__        for (Header defaultHeader : defaultHeaders) {_            Objects.requireNonNull(defaultHeader, "default header must not be null")__        }_        this.defaultHeaders = defaultHeaders__        return this__    };sets,the,default,request,headers,which,will,be,sent,along,with,each,request,p,request,time,headers,will,always,overwrite,any,default,headers,throws,null,pointer,exception,if,code,default,headers,or,any,header,is,code,null;public,rest,client,builder,set,default,headers,header,default,headers,objects,require,non,null,default,headers,default,headers,must,not,be,null,for,header,default,header,default,headers,objects,require,non,null,default,header,default,header,must,not,be,null,this,default,headers,default,headers,return,this
RestClientBuilder -> public RestClientBuilder setDefaultHeaders(Header[] defaultHeaders);1525859433;Sets the default request headers, which will be sent along with each request._<p>_Request-time headers will always overwrite any default headers.__@throws NullPointerException if {@code defaultHeaders} or any header is {@code null}.;public RestClientBuilder setDefaultHeaders(Header[] defaultHeaders) {_        Objects.requireNonNull(defaultHeaders, "defaultHeaders must not be null")__        for (Header defaultHeader : defaultHeaders) {_            Objects.requireNonNull(defaultHeader, "default header must not be null")__        }_        this.defaultHeaders = defaultHeaders__        return this__    };sets,the,default,request,headers,which,will,be,sent,along,with,each,request,p,request,time,headers,will,always,overwrite,any,default,headers,throws,null,pointer,exception,if,code,default,headers,or,any,header,is,code,null;public,rest,client,builder,set,default,headers,header,default,headers,objects,require,non,null,default,headers,default,headers,must,not,be,null,for,header,default,header,default,headers,objects,require,non,null,default,header,default,header,must,not,be,null,this,default,headers,default,headers,return,this
RestClientBuilder -> public RestClientBuilder setDefaultHeaders(Header[] defaultHeaders);1526574077;Sets the default request headers, which will be sent along with each request._<p>_Request-time headers will always overwrite any default headers.__@throws NullPointerException if {@code defaultHeaders} or any header is {@code null}.;public RestClientBuilder setDefaultHeaders(Header[] defaultHeaders) {_        Objects.requireNonNull(defaultHeaders, "defaultHeaders must not be null")__        for (Header defaultHeader : defaultHeaders) {_            Objects.requireNonNull(defaultHeader, "default header must not be null")__        }_        this.defaultHeaders = defaultHeaders__        return this__    };sets,the,default,request,headers,which,will,be,sent,along,with,each,request,p,request,time,headers,will,always,overwrite,any,default,headers,throws,null,pointer,exception,if,code,default,headers,or,any,header,is,code,null;public,rest,client,builder,set,default,headers,header,default,headers,objects,require,non,null,default,headers,default,headers,must,not,be,null,for,header,default,header,default,headers,objects,require,non,null,default,header,default,header,must,not,be,null,this,default,headers,default,headers,return,this
RestClientBuilder -> public RestClientBuilder setDefaultHeaders(Header[] defaultHeaders);1528762805;Sets the default request headers, which will be sent along with each request._<p>_Request-time headers will always overwrite any default headers.__@throws NullPointerException if {@code defaultHeaders} or any header is {@code null}.;public RestClientBuilder setDefaultHeaders(Header[] defaultHeaders) {_        Objects.requireNonNull(defaultHeaders, "defaultHeaders must not be null")__        for (Header defaultHeader : defaultHeaders) {_            Objects.requireNonNull(defaultHeader, "default header must not be null")__        }_        this.defaultHeaders = defaultHeaders__        return this__    };sets,the,default,request,headers,which,will,be,sent,along,with,each,request,p,request,time,headers,will,always,overwrite,any,default,headers,throws,null,pointer,exception,if,code,default,headers,or,any,header,is,code,null;public,rest,client,builder,set,default,headers,header,default,headers,objects,require,non,null,default,headers,default,headers,must,not,be,null,for,header,default,header,default,headers,objects,require,non,null,default,header,default,header,must,not,be,null,this,default,headers,default,headers,return,this
RestClientBuilder -> public RestClientBuilder setDefaultHeaders(Header[] defaultHeaders);1529687475;Sets the default request headers, which will be sent along with each request._<p>_Request-time headers will always overwrite any default headers.__@throws NullPointerException if {@code defaultHeaders} or any header is {@code null}.;public RestClientBuilder setDefaultHeaders(Header[] defaultHeaders) {_        Objects.requireNonNull(defaultHeaders, "defaultHeaders must not be null")__        for (Header defaultHeader : defaultHeaders) {_            Objects.requireNonNull(defaultHeader, "default header must not be null")__        }_        this.defaultHeaders = defaultHeaders__        return this__    };sets,the,default,request,headers,which,will,be,sent,along,with,each,request,p,request,time,headers,will,always,overwrite,any,default,headers,throws,null,pointer,exception,if,code,default,headers,or,any,header,is,code,null;public,rest,client,builder,set,default,headers,header,default,headers,objects,require,non,null,default,headers,default,headers,must,not,be,null,for,header,default,header,default,headers,objects,require,non,null,default,header,default,header,must,not,be,null,this,default,headers,default,headers,return,this
RestClientBuilder -> public RestClientBuilder setDefaultHeaders(Header[] defaultHeaders);1531179852;Sets the default request headers, which will be sent along with each request._<p>_Request-time headers will always overwrite any default headers.__@throws NullPointerException if {@code defaultHeaders} or any header is {@code null}.;public RestClientBuilder setDefaultHeaders(Header[] defaultHeaders) {_        Objects.requireNonNull(defaultHeaders, "defaultHeaders must not be null")__        for (Header defaultHeader : defaultHeaders) {_            Objects.requireNonNull(defaultHeader, "default header must not be null")__        }_        this.defaultHeaders = defaultHeaders__        return this__    };sets,the,default,request,headers,which,will,be,sent,along,with,each,request,p,request,time,headers,will,always,overwrite,any,default,headers,throws,null,pointer,exception,if,code,default,headers,or,any,header,is,code,null;public,rest,client,builder,set,default,headers,header,default,headers,objects,require,non,null,default,headers,default,headers,must,not,be,null,for,header,default,header,default,headers,objects,require,non,null,default,header,default,header,must,not,be,null,this,default,headers,default,headers,return,this
RestClientBuilder -> public RestClientBuilder setDefaultHeaders(Header[] defaultHeaders);1538170812;Sets the default request headers, which will be sent along with each request._<p>_Request-time headers will always overwrite any default headers.__@throws NullPointerException if {@code defaultHeaders} or any header is {@code null}.;public RestClientBuilder setDefaultHeaders(Header[] defaultHeaders) {_        Objects.requireNonNull(defaultHeaders, "defaultHeaders must not be null")__        for (Header defaultHeader : defaultHeaders) {_            Objects.requireNonNull(defaultHeader, "default header must not be null")__        }_        this.defaultHeaders = defaultHeaders__        return this__    };sets,the,default,request,headers,which,will,be,sent,along,with,each,request,p,request,time,headers,will,always,overwrite,any,default,headers,throws,null,pointer,exception,if,code,default,headers,or,any,header,is,code,null;public,rest,client,builder,set,default,headers,header,default,headers,objects,require,non,null,default,headers,default,headers,must,not,be,null,for,header,default,header,default,headers,objects,require,non,null,default,header,default,header,must,not,be,null,this,default,headers,default,headers,return,this
RestClientBuilder -> public RestClientBuilder setDefaultHeaders(Header[] defaultHeaders);1549439027;Sets the default request headers, which will be sent along with each request._<p>_Request-time headers will always overwrite any default headers.__@throws NullPointerException if {@code defaultHeaders} or any header is {@code null}.;public RestClientBuilder setDefaultHeaders(Header[] defaultHeaders) {_        Objects.requireNonNull(defaultHeaders, "defaultHeaders must not be null")__        for (Header defaultHeader : defaultHeaders) {_            Objects.requireNonNull(defaultHeader, "default header must not be null")__        }_        this.defaultHeaders = defaultHeaders__        return this__    };sets,the,default,request,headers,which,will,be,sent,along,with,each,request,p,request,time,headers,will,always,overwrite,any,default,headers,throws,null,pointer,exception,if,code,default,headers,or,any,header,is,code,null;public,rest,client,builder,set,default,headers,header,default,headers,objects,require,non,null,default,headers,default,headers,must,not,be,null,for,header,default,header,default,headers,objects,require,non,null,default,header,default,header,must,not,be,null,this,default,headers,default,headers,return,this
RestClientBuilder -> public RestClientBuilder setFailureListener(RestClient.FailureListener failureListener);1524684173;Sets the {@link RestClient.FailureListener} to be notified for each request failure__@throws NullPointerException if {@code failureListener} is {@code null}.;public RestClientBuilder setFailureListener(RestClient.FailureListener failureListener) {_        Objects.requireNonNull(failureListener, "failureListener must not be null")__        this.failureListener = failureListener__        return this__    };sets,the,link,rest,client,failure,listener,to,be,notified,for,each,request,failure,throws,null,pointer,exception,if,code,failure,listener,is,code,null;public,rest,client,builder,set,failure,listener,rest,client,failure,listener,failure,listener,objects,require,non,null,failure,listener,failure,listener,must,not,be,null,this,failure,listener,failure,listener,return,this
RestClientBuilder -> public RestClientBuilder setFailureListener(RestClient.FailureListener failureListener);1525859433;Sets the {@link RestClient.FailureListener} to be notified for each request failure__@throws NullPointerException if {@code failureListener} is {@code null}.;public RestClientBuilder setFailureListener(RestClient.FailureListener failureListener) {_        Objects.requireNonNull(failureListener, "failureListener must not be null")__        this.failureListener = failureListener__        return this__    };sets,the,link,rest,client,failure,listener,to,be,notified,for,each,request,failure,throws,null,pointer,exception,if,code,failure,listener,is,code,null;public,rest,client,builder,set,failure,listener,rest,client,failure,listener,failure,listener,objects,require,non,null,failure,listener,failure,listener,must,not,be,null,this,failure,listener,failure,listener,return,this
RestClientBuilder -> public RestClientBuilder setFailureListener(RestClient.FailureListener failureListener);1526574077;Sets the {@link RestClient.FailureListener} to be notified for each request failure__@throws NullPointerException if {@code failureListener} is {@code null}.;public RestClientBuilder setFailureListener(RestClient.FailureListener failureListener) {_        Objects.requireNonNull(failureListener, "failureListener must not be null")__        this.failureListener = failureListener__        return this__    };sets,the,link,rest,client,failure,listener,to,be,notified,for,each,request,failure,throws,null,pointer,exception,if,code,failure,listener,is,code,null;public,rest,client,builder,set,failure,listener,rest,client,failure,listener,failure,listener,objects,require,non,null,failure,listener,failure,listener,must,not,be,null,this,failure,listener,failure,listener,return,this
RestClientBuilder -> public RestClientBuilder setFailureListener(RestClient.FailureListener failureListener);1528762805;Sets the {@link RestClient.FailureListener} to be notified for each request failure__@throws NullPointerException if {@code failureListener} is {@code null}.;public RestClientBuilder setFailureListener(RestClient.FailureListener failureListener) {_        Objects.requireNonNull(failureListener, "failureListener must not be null")__        this.failureListener = failureListener__        return this__    };sets,the,link,rest,client,failure,listener,to,be,notified,for,each,request,failure,throws,null,pointer,exception,if,code,failure,listener,is,code,null;public,rest,client,builder,set,failure,listener,rest,client,failure,listener,failure,listener,objects,require,non,null,failure,listener,failure,listener,must,not,be,null,this,failure,listener,failure,listener,return,this
RestClientBuilder -> public RestClientBuilder setFailureListener(RestClient.FailureListener failureListener);1529687475;Sets the {@link RestClient.FailureListener} to be notified for each request failure__@throws NullPointerException if {@code failureListener} is {@code null}.;public RestClientBuilder setFailureListener(RestClient.FailureListener failureListener) {_        Objects.requireNonNull(failureListener, "failureListener must not be null")__        this.failureListener = failureListener__        return this__    };sets,the,link,rest,client,failure,listener,to,be,notified,for,each,request,failure,throws,null,pointer,exception,if,code,failure,listener,is,code,null;public,rest,client,builder,set,failure,listener,rest,client,failure,listener,failure,listener,objects,require,non,null,failure,listener,failure,listener,must,not,be,null,this,failure,listener,failure,listener,return,this
RestClientBuilder -> public RestClientBuilder setFailureListener(RestClient.FailureListener failureListener);1531179852;Sets the {@link RestClient.FailureListener} to be notified for each request failure__@throws NullPointerException if {@code failureListener} is {@code null}.;public RestClientBuilder setFailureListener(RestClient.FailureListener failureListener) {_        Objects.requireNonNull(failureListener, "failureListener must not be null")__        this.failureListener = failureListener__        return this__    };sets,the,link,rest,client,failure,listener,to,be,notified,for,each,request,failure,throws,null,pointer,exception,if,code,failure,listener,is,code,null;public,rest,client,builder,set,failure,listener,rest,client,failure,listener,failure,listener,objects,require,non,null,failure,listener,failure,listener,must,not,be,null,this,failure,listener,failure,listener,return,this
RestClientBuilder -> public RestClientBuilder setFailureListener(RestClient.FailureListener failureListener);1538170812;Sets the {@link RestClient.FailureListener} to be notified for each request failure__@throws NullPointerException if {@code failureListener} is {@code null}.;public RestClientBuilder setFailureListener(RestClient.FailureListener failureListener) {_        Objects.requireNonNull(failureListener, "failureListener must not be null")__        this.failureListener = failureListener__        return this__    };sets,the,link,rest,client,failure,listener,to,be,notified,for,each,request,failure,throws,null,pointer,exception,if,code,failure,listener,is,code,null;public,rest,client,builder,set,failure,listener,rest,client,failure,listener,failure,listener,objects,require,non,null,failure,listener,failure,listener,must,not,be,null,this,failure,listener,failure,listener,return,this
RestClientBuilder -> public RestClientBuilder setFailureListener(RestClient.FailureListener failureListener);1549439027;Sets the {@link RestClient.FailureListener} to be notified for each request failure__@throws NullPointerException if {@code failureListener} is {@code null}.;public RestClientBuilder setFailureListener(RestClient.FailureListener failureListener) {_        Objects.requireNonNull(failureListener, "failureListener must not be null")__        this.failureListener = failureListener__        return this__    };sets,the,link,rest,client,failure,listener,to,be,notified,for,each,request,failure,throws,null,pointer,exception,if,code,failure,listener,is,code,null;public,rest,client,builder,set,failure,listener,rest,client,failure,listener,failure,listener,objects,require,non,null,failure,listener,failure,listener,must,not,be,null,this,failure,listener,failure,listener,return,this
RestClientBuilder -> public RestClientBuilder setStrictDeprecationMode(boolean strictDeprecationMode);1538170812;Whether the REST client should return any response containing at least_one warning header as a failure.;public RestClientBuilder setStrictDeprecationMode(boolean strictDeprecationMode) {_        this.strictDeprecationMode = strictDeprecationMode__        return this__    };whether,the,rest,client,should,return,any,response,containing,at,least,one,warning,header,as,a,failure;public,rest,client,builder,set,strict,deprecation,mode,boolean,strict,deprecation,mode,this,strict,deprecation,mode,strict,deprecation,mode,return,this
RestClientBuilder -> public RestClientBuilder setStrictDeprecationMode(boolean strictDeprecationMode);1549439027;Whether the REST client should return any response containing at least_one warning header as a failure.;public RestClientBuilder setStrictDeprecationMode(boolean strictDeprecationMode) {_        this.strictDeprecationMode = strictDeprecationMode__        return this__    };whether,the,rest,client,should,return,any,response,containing,at,least,one,warning,header,as,a,failure;public,rest,client,builder,set,strict,deprecation,mode,boolean,strict,deprecation,mode,this,strict,deprecation,mode,strict,deprecation,mode,return,this
RestClientBuilder -> public RestClient build();1524684173;Creates a new {@link RestClient} based on the provided configuration.;public RestClient build() {_        if (failureListener == null) {_            failureListener = new RestClient.FailureListener()__        }_        CloseableHttpAsyncClient httpClient = AccessController.doPrivileged(new PrivilegedAction<CloseableHttpAsyncClient>() {_            @Override_            public CloseableHttpAsyncClient run() {_                return createHttpClient()__            }_        })__        RestClient restClient = new RestClient(httpClient, maxRetryTimeout, defaultHeaders, hosts, pathPrefix, failureListener)__        httpClient.start()__        return restClient__    };creates,a,new,link,rest,client,based,on,the,provided,configuration;public,rest,client,build,if,failure,listener,null,failure,listener,new,rest,client,failure,listener,closeable,http,async,client,http,client,access,controller,do,privileged,new,privileged,action,closeable,http,async,client,override,public,closeable,http,async,client,run,return,create,http,client,rest,client,rest,client,new,rest,client,http,client,max,retry,timeout,default,headers,hosts,path,prefix,failure,listener,http,client,start,return,rest,client
RestClientBuilder -> public RestClient build();1525859433;Creates a new {@link RestClient} based on the provided configuration.;public RestClient build() {_        if (failureListener == null) {_            failureListener = new RestClient.FailureListener()__        }_        CloseableHttpAsyncClient httpClient = AccessController.doPrivileged(new PrivilegedAction<CloseableHttpAsyncClient>() {_            @Override_            public CloseableHttpAsyncClient run() {_                return createHttpClient()__            }_        })__        RestClient restClient = new RestClient(httpClient, maxRetryTimeout, defaultHeaders, hosts, pathPrefix, failureListener)__        httpClient.start()__        return restClient__    };creates,a,new,link,rest,client,based,on,the,provided,configuration;public,rest,client,build,if,failure,listener,null,failure,listener,new,rest,client,failure,listener,closeable,http,async,client,http,client,access,controller,do,privileged,new,privileged,action,closeable,http,async,client,override,public,closeable,http,async,client,run,return,create,http,client,rest,client,rest,client,new,rest,client,http,client,max,retry,timeout,default,headers,hosts,path,prefix,failure,listener,http,client,start,return,rest,client
RestClientBuilder -> public RestClient build();1526574077;Creates a new {@link RestClient} based on the provided configuration.;public RestClient build() {_        if (failureListener == null) {_            failureListener = new RestClient.FailureListener()__        }_        CloseableHttpAsyncClient httpClient = AccessController.doPrivileged(new PrivilegedAction<CloseableHttpAsyncClient>() {_            @Override_            public CloseableHttpAsyncClient run() {_                return createHttpClient()__            }_        })__        RestClient restClient = new RestClient(httpClient, maxRetryTimeout, defaultHeaders, hosts, pathPrefix, failureListener)__        httpClient.start()__        return restClient__    };creates,a,new,link,rest,client,based,on,the,provided,configuration;public,rest,client,build,if,failure,listener,null,failure,listener,new,rest,client,failure,listener,closeable,http,async,client,http,client,access,controller,do,privileged,new,privileged,action,closeable,http,async,client,override,public,closeable,http,async,client,run,return,create,http,client,rest,client,rest,client,new,rest,client,http,client,max,retry,timeout,default,headers,hosts,path,prefix,failure,listener,http,client,start,return,rest,client
RestClientBuilder -> public RestClient build();1528762805;Creates a new {@link RestClient} based on the provided configuration.;public RestClient build() {_        if (failureListener == null) {_            failureListener = new RestClient.FailureListener()__        }_        CloseableHttpAsyncClient httpClient = AccessController.doPrivileged(new PrivilegedAction<CloseableHttpAsyncClient>() {_            @Override_            public CloseableHttpAsyncClient run() {_                return createHttpClient()__            }_        })__        RestClient restClient = new RestClient(httpClient, maxRetryTimeout, defaultHeaders, nodes, pathPrefix, failureListener)__        httpClient.start()__        return restClient__    };creates,a,new,link,rest,client,based,on,the,provided,configuration;public,rest,client,build,if,failure,listener,null,failure,listener,new,rest,client,failure,listener,closeable,http,async,client,http,client,access,controller,do,privileged,new,privileged,action,closeable,http,async,client,override,public,closeable,http,async,client,run,return,create,http,client,rest,client,rest,client,new,rest,client,http,client,max,retry,timeout,default,headers,nodes,path,prefix,failure,listener,http,client,start,return,rest,client
RestClientBuilder -> public RestClient build();1529687475;Creates a new {@link RestClient} based on the provided configuration.;public RestClient build() {_        if (failureListener == null) {_            failureListener = new RestClient.FailureListener()__        }_        CloseableHttpAsyncClient httpClient = AccessController.doPrivileged(new PrivilegedAction<CloseableHttpAsyncClient>() {_            @Override_            public CloseableHttpAsyncClient run() {_                return createHttpClient()__            }_        })__        RestClient restClient = new RestClient(httpClient, maxRetryTimeout, defaultHeaders, nodes,_                pathPrefix, failureListener, nodeSelector)__        httpClient.start()__        return restClient__    };creates,a,new,link,rest,client,based,on,the,provided,configuration;public,rest,client,build,if,failure,listener,null,failure,listener,new,rest,client,failure,listener,closeable,http,async,client,http,client,access,controller,do,privileged,new,privileged,action,closeable,http,async,client,override,public,closeable,http,async,client,run,return,create,http,client,rest,client,rest,client,new,rest,client,http,client,max,retry,timeout,default,headers,nodes,path,prefix,failure,listener,node,selector,http,client,start,return,rest,client
RestClientBuilder -> public RestClient build();1531179852;Creates a new {@link RestClient} based on the provided configuration.;public RestClient build() {_        if (failureListener == null) {_            failureListener = new RestClient.FailureListener()__        }_        CloseableHttpAsyncClient httpClient = AccessController.doPrivileged(new PrivilegedAction<CloseableHttpAsyncClient>() {_            @Override_            public CloseableHttpAsyncClient run() {_                return createHttpClient()__            }_        })__        RestClient restClient = new RestClient(httpClient, maxRetryTimeout, defaultHeaders, nodes,_                pathPrefix, failureListener, nodeSelector)__        httpClient.start()__        return restClient__    };creates,a,new,link,rest,client,based,on,the,provided,configuration;public,rest,client,build,if,failure,listener,null,failure,listener,new,rest,client,failure,listener,closeable,http,async,client,http,client,access,controller,do,privileged,new,privileged,action,closeable,http,async,client,override,public,closeable,http,async,client,run,return,create,http,client,rest,client,rest,client,new,rest,client,http,client,max,retry,timeout,default,headers,nodes,path,prefix,failure,listener,node,selector,http,client,start,return,rest,client
RestClientBuilder -> public RestClient build();1538170812;Creates a new {@link RestClient} based on the provided configuration.;public RestClient build() {_        if (failureListener == null) {_            failureListener = new RestClient.FailureListener()__        }_        CloseableHttpAsyncClient httpClient = AccessController.doPrivileged(new PrivilegedAction<CloseableHttpAsyncClient>() {_            @Override_            public CloseableHttpAsyncClient run() {_                return createHttpClient()__            }_        })__        RestClient restClient = new RestClient(httpClient, maxRetryTimeout, defaultHeaders, nodes,_                pathPrefix, failureListener, nodeSelector, strictDeprecationMode)__        httpClient.start()__        return restClient__    };creates,a,new,link,rest,client,based,on,the,provided,configuration;public,rest,client,build,if,failure,listener,null,failure,listener,new,rest,client,failure,listener,closeable,http,async,client,http,client,access,controller,do,privileged,new,privileged,action,closeable,http,async,client,override,public,closeable,http,async,client,run,return,create,http,client,rest,client,rest,client,new,rest,client,http,client,max,retry,timeout,default,headers,nodes,path,prefix,failure,listener,node,selector,strict,deprecation,mode,http,client,start,return,rest,client
RestClientBuilder -> public RestClient build();1549439027;Creates a new {@link RestClient} based on the provided configuration.;public RestClient build() {_        if (failureListener == null) {_            failureListener = new RestClient.FailureListener()__        }_        CloseableHttpAsyncClient httpClient = AccessController.doPrivileged(new PrivilegedAction<CloseableHttpAsyncClient>() {_            @Override_            public CloseableHttpAsyncClient run() {_                return createHttpClient()__            }_        })__        RestClient restClient = new RestClient(httpClient, defaultHeaders, nodes,_                pathPrefix, failureListener, nodeSelector, strictDeprecationMode)__        httpClient.start()__        return restClient__    };creates,a,new,link,rest,client,based,on,the,provided,configuration;public,rest,client,build,if,failure,listener,null,failure,listener,new,rest,client,failure,listener,closeable,http,async,client,http,client,access,controller,do,privileged,new,privileged,action,closeable,http,async,client,override,public,closeable,http,async,client,run,return,create,http,client,rest,client,rest,client,new,rest,client,http,client,default,headers,nodes,path,prefix,failure,listener,node,selector,strict,deprecation,mode,http,client,start,return,rest,client
RestClientBuilder -> RestClientBuilder(List<Node> nodes);1528762805;Creates a new builder instance and sets the hosts that the client will send requests to.__@throws IllegalArgumentException if {@code nodes} is {@code null} or empty.;RestClientBuilder(List<Node> nodes) {_        if (nodes == null || nodes.isEmpty()) {_            throw new IllegalArgumentException("nodes must not be null or empty")__        }_        for (Node node : nodes) {_            if (node == null) {_                throw new IllegalArgumentException("node cannot be null")__            }_        }_        this.nodes = nodes__    };creates,a,new,builder,instance,and,sets,the,hosts,that,the,client,will,send,requests,to,throws,illegal,argument,exception,if,code,nodes,is,code,null,or,empty;rest,client,builder,list,node,nodes,if,nodes,null,nodes,is,empty,throw,new,illegal,argument,exception,nodes,must,not,be,null,or,empty,for,node,node,nodes,if,node,null,throw,new,illegal,argument,exception,node,cannot,be,null,this,nodes,nodes
RestClientBuilder -> RestClientBuilder(List<Node> nodes);1529687475;Creates a new builder instance and sets the hosts that the client will send requests to.__@throws IllegalArgumentException if {@code nodes} is {@code null} or empty.;RestClientBuilder(List<Node> nodes) {_        if (nodes == null || nodes.isEmpty()) {_            throw new IllegalArgumentException("nodes must not be null or empty")__        }_        for (Node node : nodes) {_            if (node == null) {_                throw new IllegalArgumentException("node cannot be null")__            }_        }_        this.nodes = nodes__    };creates,a,new,builder,instance,and,sets,the,hosts,that,the,client,will,send,requests,to,throws,illegal,argument,exception,if,code,nodes,is,code,null,or,empty;rest,client,builder,list,node,nodes,if,nodes,null,nodes,is,empty,throw,new,illegal,argument,exception,nodes,must,not,be,null,or,empty,for,node,node,nodes,if,node,null,throw,new,illegal,argument,exception,node,cannot,be,null,this,nodes,nodes
RestClientBuilder -> RestClientBuilder(List<Node> nodes);1531179852;Creates a new builder instance and sets the hosts that the client will send requests to.__@throws IllegalArgumentException if {@code nodes} is {@code null} or empty.;RestClientBuilder(List<Node> nodes) {_        if (nodes == null || nodes.isEmpty()) {_            throw new IllegalArgumentException("nodes must not be null or empty")__        }_        for (Node node : nodes) {_            if (node == null) {_                throw new IllegalArgumentException("node cannot be null")__            }_        }_        this.nodes = nodes__    };creates,a,new,builder,instance,and,sets,the,hosts,that,the,client,will,send,requests,to,throws,illegal,argument,exception,if,code,nodes,is,code,null,or,empty;rest,client,builder,list,node,nodes,if,nodes,null,nodes,is,empty,throw,new,illegal,argument,exception,nodes,must,not,be,null,or,empty,for,node,node,nodes,if,node,null,throw,new,illegal,argument,exception,node,cannot,be,null,this,nodes,nodes
RestClientBuilder -> RestClientBuilder(List<Node> nodes);1538170812;Creates a new builder instance and sets the hosts that the client will send requests to.__@throws IllegalArgumentException if {@code nodes} is {@code null} or empty.;RestClientBuilder(List<Node> nodes) {_        if (nodes == null || nodes.isEmpty()) {_            throw new IllegalArgumentException("nodes must not be null or empty")__        }_        for (Node node : nodes) {_            if (node == null) {_                throw new IllegalArgumentException("node cannot be null")__            }_        }_        this.nodes = nodes__    };creates,a,new,builder,instance,and,sets,the,hosts,that,the,client,will,send,requests,to,throws,illegal,argument,exception,if,code,nodes,is,code,null,or,empty;rest,client,builder,list,node,nodes,if,nodes,null,nodes,is,empty,throw,new,illegal,argument,exception,nodes,must,not,be,null,or,empty,for,node,node,nodes,if,node,null,throw,new,illegal,argument,exception,node,cannot,be,null,this,nodes,nodes
RestClientBuilder -> RestClientBuilder(List<Node> nodes);1549439027;Creates a new builder instance and sets the hosts that the client will send requests to.__@throws IllegalArgumentException if {@code nodes} is {@code null} or empty.;RestClientBuilder(List<Node> nodes) {_        if (nodes == null || nodes.isEmpty()) {_            throw new IllegalArgumentException("nodes must not be null or empty")__        }_        for (Node node : nodes) {_            if (node == null) {_                throw new IllegalArgumentException("node cannot be null")__            }_        }_        this.nodes = nodes__    };creates,a,new,builder,instance,and,sets,the,hosts,that,the,client,will,send,requests,to,throws,illegal,argument,exception,if,code,nodes,is,code,null,or,empty;rest,client,builder,list,node,nodes,if,nodes,null,nodes,is,empty,throw,new,illegal,argument,exception,nodes,must,not,be,null,or,empty,for,node,node,nodes,if,node,null,throw,new,illegal,argument,exception,node,cannot,be,null,this,nodes,nodes
RestClientBuilder -> public RestClientBuilder setRequestConfigCallback(RequestConfigCallback requestConfigCallback);1524684173;Sets the {@link RequestConfigCallback} to be used to customize http client configuration__@throws NullPointerException if {@code requestConfigCallback} is {@code null}.;public RestClientBuilder setRequestConfigCallback(RequestConfigCallback requestConfigCallback) {_        Objects.requireNonNull(requestConfigCallback, "requestConfigCallback must not be null")__        this.requestConfigCallback = requestConfigCallback__        return this__    };sets,the,link,request,config,callback,to,be,used,to,customize,http,client,configuration,throws,null,pointer,exception,if,code,request,config,callback,is,code,null;public,rest,client,builder,set,request,config,callback,request,config,callback,request,config,callback,objects,require,non,null,request,config,callback,request,config,callback,must,not,be,null,this,request,config,callback,request,config,callback,return,this
RestClientBuilder -> public RestClientBuilder setRequestConfigCallback(RequestConfigCallback requestConfigCallback);1525859433;Sets the {@link RequestConfigCallback} to be used to customize http client configuration__@throws NullPointerException if {@code requestConfigCallback} is {@code null}.;public RestClientBuilder setRequestConfigCallback(RequestConfigCallback requestConfigCallback) {_        Objects.requireNonNull(requestConfigCallback, "requestConfigCallback must not be null")__        this.requestConfigCallback = requestConfigCallback__        return this__    };sets,the,link,request,config,callback,to,be,used,to,customize,http,client,configuration,throws,null,pointer,exception,if,code,request,config,callback,is,code,null;public,rest,client,builder,set,request,config,callback,request,config,callback,request,config,callback,objects,require,non,null,request,config,callback,request,config,callback,must,not,be,null,this,request,config,callback,request,config,callback,return,this
RestClientBuilder -> public RestClientBuilder setRequestConfigCallback(RequestConfigCallback requestConfigCallback);1526574077;Sets the {@link RequestConfigCallback} to be used to customize http client configuration__@throws NullPointerException if {@code requestConfigCallback} is {@code null}.;public RestClientBuilder setRequestConfigCallback(RequestConfigCallback requestConfigCallback) {_        Objects.requireNonNull(requestConfigCallback, "requestConfigCallback must not be null")__        this.requestConfigCallback = requestConfigCallback__        return this__    };sets,the,link,request,config,callback,to,be,used,to,customize,http,client,configuration,throws,null,pointer,exception,if,code,request,config,callback,is,code,null;public,rest,client,builder,set,request,config,callback,request,config,callback,request,config,callback,objects,require,non,null,request,config,callback,request,config,callback,must,not,be,null,this,request,config,callback,request,config,callback,return,this
RestClientBuilder -> public RestClientBuilder setRequestConfigCallback(RequestConfigCallback requestConfigCallback);1528762805;Sets the {@link RequestConfigCallback} to be used to customize http client configuration__@throws NullPointerException if {@code requestConfigCallback} is {@code null}.;public RestClientBuilder setRequestConfigCallback(RequestConfigCallback requestConfigCallback) {_        Objects.requireNonNull(requestConfigCallback, "requestConfigCallback must not be null")__        this.requestConfigCallback = requestConfigCallback__        return this__    };sets,the,link,request,config,callback,to,be,used,to,customize,http,client,configuration,throws,null,pointer,exception,if,code,request,config,callback,is,code,null;public,rest,client,builder,set,request,config,callback,request,config,callback,request,config,callback,objects,require,non,null,request,config,callback,request,config,callback,must,not,be,null,this,request,config,callback,request,config,callback,return,this
RestClientBuilder -> public RestClientBuilder setRequestConfigCallback(RequestConfigCallback requestConfigCallback);1529687475;Sets the {@link RequestConfigCallback} to be used to customize http client configuration__@throws NullPointerException if {@code requestConfigCallback} is {@code null}.;public RestClientBuilder setRequestConfigCallback(RequestConfigCallback requestConfigCallback) {_        Objects.requireNonNull(requestConfigCallback, "requestConfigCallback must not be null")__        this.requestConfigCallback = requestConfigCallback__        return this__    };sets,the,link,request,config,callback,to,be,used,to,customize,http,client,configuration,throws,null,pointer,exception,if,code,request,config,callback,is,code,null;public,rest,client,builder,set,request,config,callback,request,config,callback,request,config,callback,objects,require,non,null,request,config,callback,request,config,callback,must,not,be,null,this,request,config,callback,request,config,callback,return,this
RestClientBuilder -> public RestClientBuilder setRequestConfigCallback(RequestConfigCallback requestConfigCallback);1531179852;Sets the {@link RequestConfigCallback} to be used to customize http client configuration__@throws NullPointerException if {@code requestConfigCallback} is {@code null}.;public RestClientBuilder setRequestConfigCallback(RequestConfigCallback requestConfigCallback) {_        Objects.requireNonNull(requestConfigCallback, "requestConfigCallback must not be null")__        this.requestConfigCallback = requestConfigCallback__        return this__    };sets,the,link,request,config,callback,to,be,used,to,customize,http,client,configuration,throws,null,pointer,exception,if,code,request,config,callback,is,code,null;public,rest,client,builder,set,request,config,callback,request,config,callback,request,config,callback,objects,require,non,null,request,config,callback,request,config,callback,must,not,be,null,this,request,config,callback,request,config,callback,return,this
RestClientBuilder -> public RestClientBuilder setRequestConfigCallback(RequestConfigCallback requestConfigCallback);1538170812;Sets the {@link RequestConfigCallback} to be used to customize http client configuration__@throws NullPointerException if {@code requestConfigCallback} is {@code null}.;public RestClientBuilder setRequestConfigCallback(RequestConfigCallback requestConfigCallback) {_        Objects.requireNonNull(requestConfigCallback, "requestConfigCallback must not be null")__        this.requestConfigCallback = requestConfigCallback__        return this__    };sets,the,link,request,config,callback,to,be,used,to,customize,http,client,configuration,throws,null,pointer,exception,if,code,request,config,callback,is,code,null;public,rest,client,builder,set,request,config,callback,request,config,callback,request,config,callback,objects,require,non,null,request,config,callback,request,config,callback,must,not,be,null,this,request,config,callback,request,config,callback,return,this
RestClientBuilder -> public RestClientBuilder setRequestConfigCallback(RequestConfigCallback requestConfigCallback);1549439027;Sets the {@link RequestConfigCallback} to be used to customize http client configuration__@throws NullPointerException if {@code requestConfigCallback} is {@code null}.;public RestClientBuilder setRequestConfigCallback(RequestConfigCallback requestConfigCallback) {_        Objects.requireNonNull(requestConfigCallback, "requestConfigCallback must not be null")__        this.requestConfigCallback = requestConfigCallback__        return this__    };sets,the,link,request,config,callback,to,be,used,to,customize,http,client,configuration,throws,null,pointer,exception,if,code,request,config,callback,is,code,null;public,rest,client,builder,set,request,config,callback,request,config,callback,request,config,callback,objects,require,non,null,request,config,callback,request,config,callback,must,not,be,null,this,request,config,callback,request,config,callback,return,this
RestClientBuilder -> RequestConfigCallback -> RequestConfig.Builder customizeRequestConfig(RequestConfig.Builder requestConfigBuilder)_;1524684173;Allows to customize the {@link RequestConfig} that will be used with each request._It is common to customize the different timeout values through this method without losing any other useful default_value that the {@link RestClientBuilder} internally sets.;RequestConfig.Builder customizeRequestConfig(RequestConfig.Builder requestConfigBuilder)_;allows,to,customize,the,link,request,config,that,will,be,used,with,each,request,it,is,common,to,customize,the,different,timeout,values,through,this,method,without,losing,any,other,useful,default,value,that,the,link,rest,client,builder,internally,sets;request,config,builder,customize,request,config,request,config,builder,request,config,builder
RestClientBuilder -> RequestConfigCallback -> RequestConfig.Builder customizeRequestConfig(RequestConfig.Builder requestConfigBuilder)_;1525859433;Allows to customize the {@link RequestConfig} that will be used with each request._It is common to customize the different timeout values through this method without losing any other useful default_value that the {@link RestClientBuilder} internally sets.;RequestConfig.Builder customizeRequestConfig(RequestConfig.Builder requestConfigBuilder)_;allows,to,customize,the,link,request,config,that,will,be,used,with,each,request,it,is,common,to,customize,the,different,timeout,values,through,this,method,without,losing,any,other,useful,default,value,that,the,link,rest,client,builder,internally,sets;request,config,builder,customize,request,config,request,config,builder,request,config,builder
RestClientBuilder -> RequestConfigCallback -> RequestConfig.Builder customizeRequestConfig(RequestConfig.Builder requestConfigBuilder)_;1526574077;Allows to customize the {@link RequestConfig} that will be used with each request._It is common to customize the different timeout values through this method without losing any other useful default_value that the {@link RestClientBuilder} internally sets.;RequestConfig.Builder customizeRequestConfig(RequestConfig.Builder requestConfigBuilder)_;allows,to,customize,the,link,request,config,that,will,be,used,with,each,request,it,is,common,to,customize,the,different,timeout,values,through,this,method,without,losing,any,other,useful,default,value,that,the,link,rest,client,builder,internally,sets;request,config,builder,customize,request,config,request,config,builder,request,config,builder
RestClientBuilder -> RequestConfigCallback -> RequestConfig.Builder customizeRequestConfig(RequestConfig.Builder requestConfigBuilder)_;1528762805;Allows to customize the {@link RequestConfig} that will be used with each request._It is common to customize the different timeout values through this method without losing any other useful default_value that the {@link RestClientBuilder} internally sets.;RequestConfig.Builder customizeRequestConfig(RequestConfig.Builder requestConfigBuilder)_;allows,to,customize,the,link,request,config,that,will,be,used,with,each,request,it,is,common,to,customize,the,different,timeout,values,through,this,method,without,losing,any,other,useful,default,value,that,the,link,rest,client,builder,internally,sets;request,config,builder,customize,request,config,request,config,builder,request,config,builder
RestClientBuilder -> RequestConfigCallback -> RequestConfig.Builder customizeRequestConfig(RequestConfig.Builder requestConfigBuilder)_;1529687475;Allows to customize the {@link RequestConfig} that will be used with each request._It is common to customize the different timeout values through this method without losing any other useful default_value that the {@link RestClientBuilder} internally sets.;RequestConfig.Builder customizeRequestConfig(RequestConfig.Builder requestConfigBuilder)_;allows,to,customize,the,link,request,config,that,will,be,used,with,each,request,it,is,common,to,customize,the,different,timeout,values,through,this,method,without,losing,any,other,useful,default,value,that,the,link,rest,client,builder,internally,sets;request,config,builder,customize,request,config,request,config,builder,request,config,builder
RestClientBuilder -> RequestConfigCallback -> RequestConfig.Builder customizeRequestConfig(RequestConfig.Builder requestConfigBuilder)_;1531179852;Allows to customize the {@link RequestConfig} that will be used with each request._It is common to customize the different timeout values through this method without losing any other useful default_value that the {@link RestClientBuilder} internally sets.;RequestConfig.Builder customizeRequestConfig(RequestConfig.Builder requestConfigBuilder)_;allows,to,customize,the,link,request,config,that,will,be,used,with,each,request,it,is,common,to,customize,the,different,timeout,values,through,this,method,without,losing,any,other,useful,default,value,that,the,link,rest,client,builder,internally,sets;request,config,builder,customize,request,config,request,config,builder,request,config,builder
RestClientBuilder -> RequestConfigCallback -> RequestConfig.Builder customizeRequestConfig(RequestConfig.Builder requestConfigBuilder)_;1538170812;Allows to customize the {@link RequestConfig} that will be used with each request._It is common to customize the different timeout values through this method without losing any other useful default_value that the {@link RestClientBuilder} internally sets.;RequestConfig.Builder customizeRequestConfig(RequestConfig.Builder requestConfigBuilder)_;allows,to,customize,the,link,request,config,that,will,be,used,with,each,request,it,is,common,to,customize,the,different,timeout,values,through,this,method,without,losing,any,other,useful,default,value,that,the,link,rest,client,builder,internally,sets;request,config,builder,customize,request,config,request,config,builder,request,config,builder
RestClientBuilder -> RequestConfigCallback -> RequestConfig.Builder customizeRequestConfig(RequestConfig.Builder requestConfigBuilder)_;1549439027;Allows to customize the {@link RequestConfig} that will be used with each request._It is common to customize the different timeout values through this method without losing any other useful default_value that the {@link RestClientBuilder} internally sets.;RequestConfig.Builder customizeRequestConfig(RequestConfig.Builder requestConfigBuilder)_;allows,to,customize,the,link,request,config,that,will,be,used,with,each,request,it,is,common,to,customize,the,different,timeout,values,through,this,method,without,losing,any,other,useful,default,value,that,the,link,rest,client,builder,internally,sets;request,config,builder,customize,request,config,request,config,builder,request,config,builder
RestClientBuilder -> public RestClientBuilder setHttpClientConfigCallback(HttpClientConfigCallback httpClientConfigCallback);1524684173;Sets the {@link HttpClientConfigCallback} to be used to customize http client configuration__@throws NullPointerException if {@code httpClientConfigCallback} is {@code null}.;public RestClientBuilder setHttpClientConfigCallback(HttpClientConfigCallback httpClientConfigCallback) {_        Objects.requireNonNull(httpClientConfigCallback, "httpClientConfigCallback must not be null")__        this.httpClientConfigCallback = httpClientConfigCallback__        return this__    };sets,the,link,http,client,config,callback,to,be,used,to,customize,http,client,configuration,throws,null,pointer,exception,if,code,http,client,config,callback,is,code,null;public,rest,client,builder,set,http,client,config,callback,http,client,config,callback,http,client,config,callback,objects,require,non,null,http,client,config,callback,http,client,config,callback,must,not,be,null,this,http,client,config,callback,http,client,config,callback,return,this
RestClientBuilder -> public RestClientBuilder setHttpClientConfigCallback(HttpClientConfigCallback httpClientConfigCallback);1525859433;Sets the {@link HttpClientConfigCallback} to be used to customize http client configuration__@throws NullPointerException if {@code httpClientConfigCallback} is {@code null}.;public RestClientBuilder setHttpClientConfigCallback(HttpClientConfigCallback httpClientConfigCallback) {_        Objects.requireNonNull(httpClientConfigCallback, "httpClientConfigCallback must not be null")__        this.httpClientConfigCallback = httpClientConfigCallback__        return this__    };sets,the,link,http,client,config,callback,to,be,used,to,customize,http,client,configuration,throws,null,pointer,exception,if,code,http,client,config,callback,is,code,null;public,rest,client,builder,set,http,client,config,callback,http,client,config,callback,http,client,config,callback,objects,require,non,null,http,client,config,callback,http,client,config,callback,must,not,be,null,this,http,client,config,callback,http,client,config,callback,return,this
RestClientBuilder -> public RestClientBuilder setHttpClientConfigCallback(HttpClientConfigCallback httpClientConfigCallback);1526574077;Sets the {@link HttpClientConfigCallback} to be used to customize http client configuration__@throws NullPointerException if {@code httpClientConfigCallback} is {@code null}.;public RestClientBuilder setHttpClientConfigCallback(HttpClientConfigCallback httpClientConfigCallback) {_        Objects.requireNonNull(httpClientConfigCallback, "httpClientConfigCallback must not be null")__        this.httpClientConfigCallback = httpClientConfigCallback__        return this__    };sets,the,link,http,client,config,callback,to,be,used,to,customize,http,client,configuration,throws,null,pointer,exception,if,code,http,client,config,callback,is,code,null;public,rest,client,builder,set,http,client,config,callback,http,client,config,callback,http,client,config,callback,objects,require,non,null,http,client,config,callback,http,client,config,callback,must,not,be,null,this,http,client,config,callback,http,client,config,callback,return,this
RestClientBuilder -> public RestClientBuilder setHttpClientConfigCallback(HttpClientConfigCallback httpClientConfigCallback);1528762805;Sets the {@link HttpClientConfigCallback} to be used to customize http client configuration__@throws NullPointerException if {@code httpClientConfigCallback} is {@code null}.;public RestClientBuilder setHttpClientConfigCallback(HttpClientConfigCallback httpClientConfigCallback) {_        Objects.requireNonNull(httpClientConfigCallback, "httpClientConfigCallback must not be null")__        this.httpClientConfigCallback = httpClientConfigCallback__        return this__    };sets,the,link,http,client,config,callback,to,be,used,to,customize,http,client,configuration,throws,null,pointer,exception,if,code,http,client,config,callback,is,code,null;public,rest,client,builder,set,http,client,config,callback,http,client,config,callback,http,client,config,callback,objects,require,non,null,http,client,config,callback,http,client,config,callback,must,not,be,null,this,http,client,config,callback,http,client,config,callback,return,this
RestClientBuilder -> public RestClientBuilder setHttpClientConfigCallback(HttpClientConfigCallback httpClientConfigCallback);1529687475;Sets the {@link HttpClientConfigCallback} to be used to customize http client configuration__@throws NullPointerException if {@code httpClientConfigCallback} is {@code null}.;public RestClientBuilder setHttpClientConfigCallback(HttpClientConfigCallback httpClientConfigCallback) {_        Objects.requireNonNull(httpClientConfigCallback, "httpClientConfigCallback must not be null")__        this.httpClientConfigCallback = httpClientConfigCallback__        return this__    };sets,the,link,http,client,config,callback,to,be,used,to,customize,http,client,configuration,throws,null,pointer,exception,if,code,http,client,config,callback,is,code,null;public,rest,client,builder,set,http,client,config,callback,http,client,config,callback,http,client,config,callback,objects,require,non,null,http,client,config,callback,http,client,config,callback,must,not,be,null,this,http,client,config,callback,http,client,config,callback,return,this
RestClientBuilder -> public RestClientBuilder setHttpClientConfigCallback(HttpClientConfigCallback httpClientConfigCallback);1531179852;Sets the {@link HttpClientConfigCallback} to be used to customize http client configuration__@throws NullPointerException if {@code httpClientConfigCallback} is {@code null}.;public RestClientBuilder setHttpClientConfigCallback(HttpClientConfigCallback httpClientConfigCallback) {_        Objects.requireNonNull(httpClientConfigCallback, "httpClientConfigCallback must not be null")__        this.httpClientConfigCallback = httpClientConfigCallback__        return this__    };sets,the,link,http,client,config,callback,to,be,used,to,customize,http,client,configuration,throws,null,pointer,exception,if,code,http,client,config,callback,is,code,null;public,rest,client,builder,set,http,client,config,callback,http,client,config,callback,http,client,config,callback,objects,require,non,null,http,client,config,callback,http,client,config,callback,must,not,be,null,this,http,client,config,callback,http,client,config,callback,return,this
RestClientBuilder -> public RestClientBuilder setHttpClientConfigCallback(HttpClientConfigCallback httpClientConfigCallback);1538170812;Sets the {@link HttpClientConfigCallback} to be used to customize http client configuration__@throws NullPointerException if {@code httpClientConfigCallback} is {@code null}.;public RestClientBuilder setHttpClientConfigCallback(HttpClientConfigCallback httpClientConfigCallback) {_        Objects.requireNonNull(httpClientConfigCallback, "httpClientConfigCallback must not be null")__        this.httpClientConfigCallback = httpClientConfigCallback__        return this__    };sets,the,link,http,client,config,callback,to,be,used,to,customize,http,client,configuration,throws,null,pointer,exception,if,code,http,client,config,callback,is,code,null;public,rest,client,builder,set,http,client,config,callback,http,client,config,callback,http,client,config,callback,objects,require,non,null,http,client,config,callback,http,client,config,callback,must,not,be,null,this,http,client,config,callback,http,client,config,callback,return,this
RestClientBuilder -> public RestClientBuilder setHttpClientConfigCallback(HttpClientConfigCallback httpClientConfigCallback);1549439027;Sets the {@link HttpClientConfigCallback} to be used to customize http client configuration__@throws NullPointerException if {@code httpClientConfigCallback} is {@code null}.;public RestClientBuilder setHttpClientConfigCallback(HttpClientConfigCallback httpClientConfigCallback) {_        Objects.requireNonNull(httpClientConfigCallback, "httpClientConfigCallback must not be null")__        this.httpClientConfigCallback = httpClientConfigCallback__        return this__    };sets,the,link,http,client,config,callback,to,be,used,to,customize,http,client,configuration,throws,null,pointer,exception,if,code,http,client,config,callback,is,code,null;public,rest,client,builder,set,http,client,config,callback,http,client,config,callback,http,client,config,callback,objects,require,non,null,http,client,config,callback,http,client,config,callback,must,not,be,null,this,http,client,config,callback,http,client,config,callback,return,this
