commented;modifiers;parameterAmount;loc;comment;code
true;;0;3;/**  * Indicates whether it's time to retry to failed host or not.  *  * @return true if the host should be retried, false otherwise  */ ;/**  * Indicates whether it's time to retry to failed host or not.  *  * @return true if the host should be retried, false otherwise  */ boolean shallBeRetried() {     return timeSupplier.nanoTime() - deadUntilNanos > 0. }
true;;0;3;/**  * Returns the timestamp (nanos) till the host is supposed to stay dead without being retried.  * After that the host should be retried.  */ ;/**  * Returns the timestamp (nanos) till the host is supposed to stay dead without being retried.  * After that the host should be retried.  */ long getDeadUntilNanos() {     return deadUntilNanos. }
false;;0;3;;int getFailedAttempts() {     return failedAttempts. }
false;public;1;8;;@Override public int compareTo(DeadHostState other) {     if (timeSupplier != other.timeSupplier) {         throw new IllegalArgumentException("can't compare DeadHostStates with different clocks [" + timeSupplier + " != " + other.timeSupplier + "]").     }     return Long.compare(deadUntilNanos, other.deadUntilNanos). }
false;public;0;8;;@Override public String toString() {     return "DeadHostState{" + "failedAttempts=" + failedAttempts + ", deadUntilNanos=" + deadUntilNanos + ", timeSupplier=" + timeSupplier + '}'. }
false;public;0;4;;@Override public long nanoTime() {     return System.nanoTime(). }
false;public;0;4;;@Override public String toString() {     return "nanoTime". }
false;;0;1;;long nanoTime().
