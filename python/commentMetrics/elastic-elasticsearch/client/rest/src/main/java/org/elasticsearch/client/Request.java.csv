commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * The HTTP method.  */ ;/**  * The HTTP method.  */ public String getMethod() {     return method. }
true;public;0;3;/**  * The path of the request (without scheme, host, port, or prefix).  */ ;/**  * The path of the request (without scheme, host, port, or prefix).  */ public String getEndpoint() {     return endpoint. }
true;public;2;9;/**  * Add a query string parameter.  * @param name the name of the url parameter. Must not be null.  * @param value the value of the url url parameter. If {@code null} then  *      the parameter is sent as {@code name} rather than {@code name=value}  * @throws IllegalArgumentException if a parameter with that name has  *      already been set  */ ;/**  * Add a query string parameter.  * @param name the name of the url parameter. Must not be null.  * @param value the value of the url url parameter. If {@code null} then  *      the parameter is sent as {@code name} rather than {@code name=value}  * @throws IllegalArgumentException if a parameter with that name has  *      already been set  */ public void addParameter(String name, String value) {     Objects.requireNonNull(name, "url parameter name cannot be null").     // .putIfAbsent(name, value) except we are in Java 7 which doesn't have that.     if (parameters.containsKey(name)) {         throw new IllegalArgumentException("url parameter [" + name + "] has already been set to [" + parameters.get(name) + "]").     } else {         parameters.put(name, value).     } }
true;public;0;3;/**  * Query string parameters. The returned map is an unmodifiable view of the  * map in the request so calls to {@link #addParameter(String, String)}  * will change it.  */ ;/**  * Query string parameters. The returned map is an unmodifiable view of the  * map in the request so calls to {@link #addParameter(String, String)}  * will change it.  */ public Map<String, String> getParameters() {     return unmodifiableMap(parameters). }
true;public;1;3;/**  * Set the body of the request. If not set or set to {@code null} then no  * body is sent with the request.  */ ;/**  * Set the body of the request. If not set or set to {@code null} then no  * body is sent with the request.  */ public void setEntity(HttpEntity entity) {     this.entity = entity. }
true;public;1;3;/**  * Set the body of the request to a string. If not set or set to  * {@code null} then no body is sent with the request. The  * {@code Content-Type} will be sent as {@code application/json}.  * If you need a different content type then use  * {@link #setEntity(HttpEntity)}.  */ ;/**  * Set the body of the request to a string. If not set or set to  * {@code null} then no body is sent with the request. The  * {@code Content-Type} will be sent as {@code application/json}.  * If you need a different content type then use  * {@link #setEntity(HttpEntity)}.  */ public void setJsonEntity(String entity) {     setEntity(entity == null ? null : new NStringEntity(entity, ContentType.APPLICATION_JSON)). }
true;public;0;3;/**  * The body of the request. If {@code null} then no body  * is sent with the request.  */ ;/**  * The body of the request. If {@code null} then no body  * is sent with the request.  */ public HttpEntity getEntity() {     return entity. }
true;public;1;4;/**  * Set the portion of an HTTP request to Elasticsearch that can be  * manipulated without changing Elasticsearch's behavior.  */ ;/**  * Set the portion of an HTTP request to Elasticsearch that can be  * manipulated without changing Elasticsearch's behavior.  */ public void setOptions(RequestOptions options) {     Objects.requireNonNull(options, "options cannot be null").     this.options = options. }
true;public;1;4;/**  * Set the portion of an HTTP request to Elasticsearch that can be  * manipulated without changing Elasticsearch's behavior.  */ ;/**  * Set the portion of an HTTP request to Elasticsearch that can be  * manipulated without changing Elasticsearch's behavior.  */ public void setOptions(RequestOptions.Builder options) {     Objects.requireNonNull(options, "options cannot be null").     this.options = options.build(). }
true;public;0;3;/**  * Get the portion of an HTTP request to Elasticsearch that can be  * manipulated without changing Elasticsearch's behavior.  */ ;/**  * Get the portion of an HTTP request to Elasticsearch that can be  * manipulated without changing Elasticsearch's behavior.  */ public RequestOptions getOptions() {     return options. }
false;public;0;15;;@Override public String toString() {     StringBuilder b = new StringBuilder().     b.append("Request{").     b.append("method='").append(method).append('\'').     b.append(", endpoint='").append(endpoint).append('\'').     if (false == parameters.isEmpty()) {         b.append(", params=").append(parameters).     }     if (entity != null) {         b.append(", entity=").append(entity).     }     b.append(", options=").append(options).     return b.append('}').toString(). }
false;public;1;16;;@Override public boolean equals(Object obj) {     if (obj == null || (obj.getClass() != getClass())) {         return false.     }     if (obj == this) {         return true.     }     Request other = (Request) obj.     return method.equals(other.method) && endpoint.equals(other.endpoint) && parameters.equals(other.parameters) && Objects.equals(entity, other.entity) && options.equals(other.options). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(method, endpoint, parameters, entity, options). }
