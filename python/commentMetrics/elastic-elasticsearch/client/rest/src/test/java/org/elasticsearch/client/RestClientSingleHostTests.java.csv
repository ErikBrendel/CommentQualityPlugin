# id;timestamp;commentText;codeText;commentWords;codeWords
RestClientSingleHostTests -> public void testErrorStatusCodes() throws IOException;1524684173;End to end test for error status codes: they should cause an exception to be thrown, apart from 404 with HEAD requests;public void testErrorStatusCodes() throws IOException {_        for (String method : getHttpMethods()) {_            Set<Integer> expectedIgnores = new HashSet<>()__            String ignoreParam = ""__            if (HttpHead.METHOD_NAME.equals(method)) {_                expectedIgnores.add(404)__            }_            if (randomBoolean()) {_                int numIgnores = randomIntBetween(1, 3)__                for (int i = 0_ i < numIgnores_ i++) {_                    Integer code = randomFrom(getAllErrorStatusCodes())__                    expectedIgnores.add(code)__                    ignoreParam += code__                    if (i < numIgnores - 1) {_                        ignoreParam += ","__                    }_                }_            }_            _            for (int errorStatusCode : getAllErrorStatusCodes()) {_                try {_                    Map<String, String> params__                    if (ignoreParam.isEmpty()) {_                        params = Collections.emptyMap()__                    } else {_                        params = Collections.singletonMap("ignore", ignoreParam)__                    }_                    Response response = performRequest(method, "/" + errorStatusCode, params)__                    if (expectedIgnores.contains(errorStatusCode)) {_                        _                        assertEquals(errorStatusCode, response.getStatusLine().getStatusCode())__                    } else {_                        fail("request should have failed")__                    }_                } catch(ResponseException e) {_                    if (expectedIgnores.contains(errorStatusCode)) {_                        throw e__                    }_                    assertEquals(errorStatusCode, e.getResponse().getStatusLine().getStatusCode())__                    assertExceptionStackContainsCallingMethod(e)__                }_                if (errorStatusCode <= 500 || expectedIgnores.contains(errorStatusCode)) {_                    failureListener.assertNotCalled()__                } else {_                    failureListener.assertCalled(httpHost)__                }_            }_        }_    };end,to,end,test,for,error,status,codes,they,should,cause,an,exception,to,be,thrown,apart,from,404,with,head,requests;public,void,test,error,status,codes,throws,ioexception,for,string,method,get,http,methods,set,integer,expected,ignores,new,hash,set,string,ignore,param,if,http,head,equals,method,expected,ignores,add,404,if,random,boolean,int,num,ignores,random,int,between,1,3,for,int,i,0,i,num,ignores,i,integer,code,random,from,get,all,error,status,codes,expected,ignores,add,code,ignore,param,code,if,i,num,ignores,1,ignore,param,for,int,error,status,code,get,all,error,status,codes,try,map,string,string,params,if,ignore,param,is,empty,params,collections,empty,map,else,params,collections,singleton,map,ignore,ignore,param,response,response,perform,request,method,error,status,code,params,if,expected,ignores,contains,error,status,code,assert,equals,error,status,code,response,get,status,line,get,status,code,else,fail,request,should,have,failed,catch,response,exception,e,if,expected,ignores,contains,error,status,code,throw,e,assert,equals,error,status,code,e,get,response,get,status,line,get,status,code,assert,exception,stack,contains,calling,method,e,if,error,status,code,500,expected,ignores,contains,error,status,code,failure,listener,assert,not,called,else,failure,listener,assert,called,http,host
RestClientSingleHostTests -> public void testErrorStatusCodes() throws IOException;1525248068;End to end test for error status codes: they should cause an exception to be thrown, apart from 404 with HEAD requests;public void testErrorStatusCodes() throws IOException {_        for (String method : getHttpMethods()) {_            Set<Integer> expectedIgnores = new HashSet<>()__            String ignoreParam = ""__            if (HttpHead.METHOD_NAME.equals(method)) {_                expectedIgnores.add(404)__            }_            if (randomBoolean()) {_                int numIgnores = randomIntBetween(1, 3)__                for (int i = 0_ i < numIgnores_ i++) {_                    Integer code = randomFrom(getAllErrorStatusCodes())__                    expectedIgnores.add(code)__                    ignoreParam += code__                    if (i < numIgnores - 1) {_                        ignoreParam += ","__                    }_                }_            }_            _            for (int errorStatusCode : getAllErrorStatusCodes()) {_                try {_                    Map<String, String> params__                    if (ignoreParam.isEmpty()) {_                        params = Collections.emptyMap()__                    } else {_                        params = Collections.singletonMap("ignore", ignoreParam)__                    }_                    Response response = performRequest(method, "/" + errorStatusCode, params)__                    if (expectedIgnores.contains(errorStatusCode)) {_                        _                        assertEquals(errorStatusCode, response.getStatusLine().getStatusCode())__                    } else {_                        fail("request should have failed")__                    }_                } catch(ResponseException e) {_                    if (expectedIgnores.contains(errorStatusCode)) {_                        throw e__                    }_                    assertEquals(errorStatusCode, e.getResponse().getStatusLine().getStatusCode())__                    assertExceptionStackContainsCallingMethod(e)__                }_                if (errorStatusCode <= 500 || expectedIgnores.contains(errorStatusCode)) {_                    failureListener.assertNotCalled()__                } else {_                    failureListener.assertCalled(httpHost)__                }_            }_        }_    };end,to,end,test,for,error,status,codes,they,should,cause,an,exception,to,be,thrown,apart,from,404,with,head,requests;public,void,test,error,status,codes,throws,ioexception,for,string,method,get,http,methods,set,integer,expected,ignores,new,hash,set,string,ignore,param,if,http,head,equals,method,expected,ignores,add,404,if,random,boolean,int,num,ignores,random,int,between,1,3,for,int,i,0,i,num,ignores,i,integer,code,random,from,get,all,error,status,codes,expected,ignores,add,code,ignore,param,code,if,i,num,ignores,1,ignore,param,for,int,error,status,code,get,all,error,status,codes,try,map,string,string,params,if,ignore,param,is,empty,params,collections,empty,map,else,params,collections,singleton,map,ignore,ignore,param,response,response,perform,request,method,error,status,code,params,if,expected,ignores,contains,error,status,code,assert,equals,error,status,code,response,get,status,line,get,status,code,else,fail,request,should,have,failed,catch,response,exception,e,if,expected,ignores,contains,error,status,code,throw,e,assert,equals,error,status,code,e,get,response,get,status,line,get,status,code,assert,exception,stack,contains,calling,method,e,if,error,status,code,500,expected,ignores,contains,error,status,code,failure,listener,assert,not,called,else,failure,listener,assert,called,http,host
RestClientSingleHostTests -> public void testErrorStatusCodes() throws IOException;1526374795;End to end test for error status codes: they should cause an exception to be thrown, apart from 404 with HEAD requests;public void testErrorStatusCodes() throws IOException {_        for (String method : getHttpMethods()) {_            Set<Integer> expectedIgnores = new HashSet<>()__            String ignoreParam = ""__            if (HttpHead.METHOD_NAME.equals(method)) {_                expectedIgnores.add(404)__            }_            if (randomBoolean()) {_                int numIgnores = randomIntBetween(1, 3)__                for (int i = 0_ i < numIgnores_ i++) {_                    Integer code = randomFrom(getAllErrorStatusCodes())__                    expectedIgnores.add(code)__                    ignoreParam += code__                    if (i < numIgnores - 1) {_                        ignoreParam += ","__                    }_                }_            }_            _            for (int errorStatusCode : getAllErrorStatusCodes()) {_                try {_                    Map<String, String> params__                    if (ignoreParam.isEmpty()) {_                        params = Collections.emptyMap()__                    } else {_                        params = Collections.singletonMap("ignore", ignoreParam)__                    }_                    Response response = performRequest(method, "/" + errorStatusCode, params)__                    if (expectedIgnores.contains(errorStatusCode)) {_                        _                        assertEquals(errorStatusCode, response.getStatusLine().getStatusCode())__                    } else {_                        fail("request should have failed")__                    }_                } catch(ResponseException e) {_                    if (expectedIgnores.contains(errorStatusCode)) {_                        throw e__                    }_                    assertEquals(errorStatusCode, e.getResponse().getStatusLine().getStatusCode())__                    assertExceptionStackContainsCallingMethod(e)__                }_                if (errorStatusCode <= 500 || expectedIgnores.contains(errorStatusCode)) {_                    failureListener.assertNotCalled()__                } else {_                    failureListener.assertCalled(httpHost)__                }_            }_        }_    };end,to,end,test,for,error,status,codes,they,should,cause,an,exception,to,be,thrown,apart,from,404,with,head,requests;public,void,test,error,status,codes,throws,ioexception,for,string,method,get,http,methods,set,integer,expected,ignores,new,hash,set,string,ignore,param,if,http,head,equals,method,expected,ignores,add,404,if,random,boolean,int,num,ignores,random,int,between,1,3,for,int,i,0,i,num,ignores,i,integer,code,random,from,get,all,error,status,codes,expected,ignores,add,code,ignore,param,code,if,i,num,ignores,1,ignore,param,for,int,error,status,code,get,all,error,status,codes,try,map,string,string,params,if,ignore,param,is,empty,params,collections,empty,map,else,params,collections,singleton,map,ignore,ignore,param,response,response,perform,request,method,error,status,code,params,if,expected,ignores,contains,error,status,code,assert,equals,error,status,code,response,get,status,line,get,status,code,else,fail,request,should,have,failed,catch,response,exception,e,if,expected,ignores,contains,error,status,code,throw,e,assert,equals,error,status,code,e,get,response,get,status,line,get,status,code,assert,exception,stack,contains,calling,method,e,if,error,status,code,500,expected,ignores,contains,error,status,code,failure,listener,assert,not,called,else,failure,listener,assert,called,http,host
RestClientSingleHostTests -> public void testErrorStatusCodes() throws IOException;1527096592;End to end test for error status codes: they should cause an exception to be thrown, apart from 404 with HEAD requests;public void testErrorStatusCodes() throws IOException {_        for (String method : getHttpMethods()) {_            Set<Integer> expectedIgnores = new HashSet<>()__            String ignoreParam = ""__            if (HttpHead.METHOD_NAME.equals(method)) {_                expectedIgnores.add(404)__            }_            if (randomBoolean()) {_                int numIgnores = randomIntBetween(1, 3)__                for (int i = 0_ i < numIgnores_ i++) {_                    Integer code = randomFrom(getAllErrorStatusCodes())__                    expectedIgnores.add(code)__                    ignoreParam += code__                    if (i < numIgnores - 1) {_                        ignoreParam += ","__                    }_                }_            }_            _            for (int errorStatusCode : getAllErrorStatusCodes()) {_                try {_                    Map<String, String> params__                    if (ignoreParam.isEmpty()) {_                        params = Collections.emptyMap()__                    } else {_                        params = Collections.singletonMap("ignore", ignoreParam)__                    }_                    Response response = performRequest(method, "/" + errorStatusCode, params)__                    if (expectedIgnores.contains(errorStatusCode)) {_                        _                        assertEquals(errorStatusCode, response.getStatusLine().getStatusCode())__                    } else {_                        fail("request should have failed")__                    }_                } catch(ResponseException e) {_                    if (expectedIgnores.contains(errorStatusCode)) {_                        throw e__                    }_                    assertEquals(errorStatusCode, e.getResponse().getStatusLine().getStatusCode())__                    assertExceptionStackContainsCallingMethod(e)__                }_                if (errorStatusCode <= 500 || expectedIgnores.contains(errorStatusCode)) {_                    failureListener.assertNotCalled()__                } else {_                    failureListener.assertCalled(httpHost)__                }_            }_        }_    };end,to,end,test,for,error,status,codes,they,should,cause,an,exception,to,be,thrown,apart,from,404,with,head,requests;public,void,test,error,status,codes,throws,ioexception,for,string,method,get,http,methods,set,integer,expected,ignores,new,hash,set,string,ignore,param,if,http,head,equals,method,expected,ignores,add,404,if,random,boolean,int,num,ignores,random,int,between,1,3,for,int,i,0,i,num,ignores,i,integer,code,random,from,get,all,error,status,codes,expected,ignores,add,code,ignore,param,code,if,i,num,ignores,1,ignore,param,for,int,error,status,code,get,all,error,status,codes,try,map,string,string,params,if,ignore,param,is,empty,params,collections,empty,map,else,params,collections,singleton,map,ignore,ignore,param,response,response,perform,request,method,error,status,code,params,if,expected,ignores,contains,error,status,code,assert,equals,error,status,code,response,get,status,line,get,status,code,else,fail,request,should,have,failed,catch,response,exception,e,if,expected,ignores,contains,error,status,code,throw,e,assert,equals,error,status,code,e,get,response,get,status,line,get,status,code,assert,exception,stack,contains,calling,method,e,if,error,status,code,500,expected,ignores,contains,error,status,code,failure,listener,assert,not,called,else,failure,listener,assert,called,http,host
RestClientSingleHostTests -> public void testErrorStatusCodes() throws IOException;1527840262;End to end test for error status codes: they should cause an exception to be thrown, apart from 404 with HEAD requests;public void testErrorStatusCodes() throws IOException {_        for (String method : getHttpMethods()) {_            Set<Integer> expectedIgnores = new HashSet<>()__            String ignoreParam = ""__            if (HttpHead.METHOD_NAME.equals(method)) {_                expectedIgnores.add(404)__            }_            if (randomBoolean()) {_                int numIgnores = randomIntBetween(1, 3)__                for (int i = 0_ i < numIgnores_ i++) {_                    Integer code = randomFrom(getAllErrorStatusCodes())__                    expectedIgnores.add(code)__                    ignoreParam += code__                    if (i < numIgnores - 1) {_                        ignoreParam += ","__                    }_                }_            }_            _            for (int errorStatusCode : getAllErrorStatusCodes()) {_                try {_                    Map<String, String> params__                    if (ignoreParam.isEmpty()) {_                        params = Collections.emptyMap()__                    } else {_                        params = Collections.singletonMap("ignore", ignoreParam)__                    }_                    Response response = performRequest(method, "/" + errorStatusCode, params)__                    if (expectedIgnores.contains(errorStatusCode)) {_                        _                        assertEquals(errorStatusCode, response.getStatusLine().getStatusCode())__                    } else {_                        fail("request should have failed")__                    }_                } catch(ResponseException e) {_                    if (expectedIgnores.contains(errorStatusCode)) {_                        throw e__                    }_                    assertEquals(errorStatusCode, e.getResponse().getStatusLine().getStatusCode())__                    assertExceptionStackContainsCallingMethod(e)__                }_                if (errorStatusCode <= 500 || expectedIgnores.contains(errorStatusCode)) {_                    failureListener.assertNotCalled()__                } else {_                    failureListener.assertCalled(httpHost)__                }_            }_        }_    };end,to,end,test,for,error,status,codes,they,should,cause,an,exception,to,be,thrown,apart,from,404,with,head,requests;public,void,test,error,status,codes,throws,ioexception,for,string,method,get,http,methods,set,integer,expected,ignores,new,hash,set,string,ignore,param,if,http,head,equals,method,expected,ignores,add,404,if,random,boolean,int,num,ignores,random,int,between,1,3,for,int,i,0,i,num,ignores,i,integer,code,random,from,get,all,error,status,codes,expected,ignores,add,code,ignore,param,code,if,i,num,ignores,1,ignore,param,for,int,error,status,code,get,all,error,status,codes,try,map,string,string,params,if,ignore,param,is,empty,params,collections,empty,map,else,params,collections,singleton,map,ignore,ignore,param,response,response,perform,request,method,error,status,code,params,if,expected,ignores,contains,error,status,code,assert,equals,error,status,code,response,get,status,line,get,status,code,else,fail,request,should,have,failed,catch,response,exception,e,if,expected,ignores,contains,error,status,code,throw,e,assert,equals,error,status,code,e,get,response,get,status,line,get,status,code,assert,exception,stack,contains,calling,method,e,if,error,status,code,500,expected,ignores,contains,error,status,code,failure,listener,assert,not,called,else,failure,listener,assert,called,http,host
RestClientSingleHostTests -> public void testErrorStatusCodes() throws IOException;1528762805;End to end test for error status codes: they should cause an exception to be thrown, apart from 404 with HEAD requests;public void testErrorStatusCodes() throws IOException {_        for (String method : getHttpMethods()) {_            Set<Integer> expectedIgnores = new HashSet<>()__            String ignoreParam = ""__            if (HttpHead.METHOD_NAME.equals(method)) {_                expectedIgnores.add(404)__            }_            if (randomBoolean()) {_                int numIgnores = randomIntBetween(1, 3)__                for (int i = 0_ i < numIgnores_ i++) {_                    Integer code = randomFrom(getAllErrorStatusCodes())__                    expectedIgnores.add(code)__                    ignoreParam += code__                    if (i < numIgnores - 1) {_                        ignoreParam += ","__                    }_                }_            }_            _            for (int errorStatusCode : getAllErrorStatusCodes()) {_                try {_                    Map<String, String> params__                    if (ignoreParam.isEmpty()) {_                        params = Collections.emptyMap()__                    } else {_                        params = Collections.singletonMap("ignore", ignoreParam)__                    }_                    Response response = performRequest(method, "/" + errorStatusCode, params)__                    if (expectedIgnores.contains(errorStatusCode)) {_                        _                        assertEquals(errorStatusCode, response.getStatusLine().getStatusCode())__                    } else {_                        fail("request should have failed")__                    }_                } catch(ResponseException e) {_                    if (expectedIgnores.contains(errorStatusCode)) {_                        throw e__                    }_                    assertEquals(errorStatusCode, e.getResponse().getStatusLine().getStatusCode())__                    assertExceptionStackContainsCallingMethod(e)__                }_                if (errorStatusCode <= 500 || expectedIgnores.contains(errorStatusCode)) {_                    failureListener.assertNotCalled()__                } else {_                    failureListener.assertCalled(singletonList(node))__                }_            }_        }_    };end,to,end,test,for,error,status,codes,they,should,cause,an,exception,to,be,thrown,apart,from,404,with,head,requests;public,void,test,error,status,codes,throws,ioexception,for,string,method,get,http,methods,set,integer,expected,ignores,new,hash,set,string,ignore,param,if,http,head,equals,method,expected,ignores,add,404,if,random,boolean,int,num,ignores,random,int,between,1,3,for,int,i,0,i,num,ignores,i,integer,code,random,from,get,all,error,status,codes,expected,ignores,add,code,ignore,param,code,if,i,num,ignores,1,ignore,param,for,int,error,status,code,get,all,error,status,codes,try,map,string,string,params,if,ignore,param,is,empty,params,collections,empty,map,else,params,collections,singleton,map,ignore,ignore,param,response,response,perform,request,method,error,status,code,params,if,expected,ignores,contains,error,status,code,assert,equals,error,status,code,response,get,status,line,get,status,code,else,fail,request,should,have,failed,catch,response,exception,e,if,expected,ignores,contains,error,status,code,throw,e,assert,equals,error,status,code,e,get,response,get,status,line,get,status,code,assert,exception,stack,contains,calling,method,e,if,error,status,code,500,expected,ignores,contains,error,status,code,failure,listener,assert,not,called,else,failure,listener,assert,called,singleton,list,node
RestClientSingleHostTests -> public void testErrorStatusCodes() throws IOException;1529687475;End to end test for error status codes: they should cause an exception to be thrown, apart from 404 with HEAD requests;public void testErrorStatusCodes() throws IOException {_        for (String method : getHttpMethods()) {_            Set<Integer> expectedIgnores = new HashSet<>()__            String ignoreParam = ""__            if (HttpHead.METHOD_NAME.equals(method)) {_                expectedIgnores.add(404)__            }_            if (randomBoolean()) {_                int numIgnores = randomIntBetween(1, 3)__                for (int i = 0_ i < numIgnores_ i++) {_                    Integer code = randomFrom(getAllErrorStatusCodes())__                    expectedIgnores.add(code)__                    ignoreParam += code__                    if (i < numIgnores - 1) {_                        ignoreParam += ","__                    }_                }_            }_            _            for (int errorStatusCode : getAllErrorStatusCodes()) {_                try {_                    Map<String, String> params__                    if (ignoreParam.isEmpty()) {_                        params = Collections.emptyMap()__                    } else {_                        params = Collections.singletonMap("ignore", ignoreParam)__                    }_                    Response response = performRequest(method, "/" + errorStatusCode, params)__                    if (expectedIgnores.contains(errorStatusCode)) {_                        _                        assertEquals(errorStatusCode, response.getStatusLine().getStatusCode())__                    } else {_                        fail("request should have failed")__                    }_                } catch(ResponseException e) {_                    if (expectedIgnores.contains(errorStatusCode)) {_                        throw e__                    }_                    assertEquals(errorStatusCode, e.getResponse().getStatusLine().getStatusCode())__                    assertExceptionStackContainsCallingMethod(e)__                }_                if (errorStatusCode <= 500 || expectedIgnores.contains(errorStatusCode)) {_                    failureListener.assertNotCalled()__                } else {_                    failureListener.assertCalled(singletonList(node))__                }_            }_        }_    };end,to,end,test,for,error,status,codes,they,should,cause,an,exception,to,be,thrown,apart,from,404,with,head,requests;public,void,test,error,status,codes,throws,ioexception,for,string,method,get,http,methods,set,integer,expected,ignores,new,hash,set,string,ignore,param,if,http,head,equals,method,expected,ignores,add,404,if,random,boolean,int,num,ignores,random,int,between,1,3,for,int,i,0,i,num,ignores,i,integer,code,random,from,get,all,error,status,codes,expected,ignores,add,code,ignore,param,code,if,i,num,ignores,1,ignore,param,for,int,error,status,code,get,all,error,status,codes,try,map,string,string,params,if,ignore,param,is,empty,params,collections,empty,map,else,params,collections,singleton,map,ignore,ignore,param,response,response,perform,request,method,error,status,code,params,if,expected,ignores,contains,error,status,code,assert,equals,error,status,code,response,get,status,line,get,status,code,else,fail,request,should,have,failed,catch,response,exception,e,if,expected,ignores,contains,error,status,code,throw,e,assert,equals,error,status,code,e,get,response,get,status,line,get,status,code,assert,exception,stack,contains,calling,method,e,if,error,status,code,500,expected,ignores,contains,error,status,code,failure,listener,assert,not,called,else,failure,listener,assert,called,singleton,list,node
RestClientSingleHostTests -> public void testErrorStatusCodes() throws IOException;1531179852;End to end test for error status codes: they should cause an exception to be thrown, apart from 404 with HEAD requests;public void testErrorStatusCodes() throws IOException {_        for (String method : getHttpMethods()) {_            Set<Integer> expectedIgnores = new HashSet<>()__            String ignoreParam = ""__            if (HttpHead.METHOD_NAME.equals(method)) {_                expectedIgnores.add(404)__            }_            if (randomBoolean()) {_                int numIgnores = randomIntBetween(1, 3)__                for (int i = 0_ i < numIgnores_ i++) {_                    Integer code = randomFrom(getAllErrorStatusCodes())__                    expectedIgnores.add(code)__                    ignoreParam += code__                    if (i < numIgnores - 1) {_                        ignoreParam += ","__                    }_                }_            }_            _            for (int errorStatusCode : getAllErrorStatusCodes()) {_                try {_                    Map<String, String> params__                    if (ignoreParam.isEmpty()) {_                        params = Collections.emptyMap()__                    } else {_                        params = Collections.singletonMap("ignore", ignoreParam)__                    }_                    Response response = performRequest(method, "/" + errorStatusCode, params)__                    if (expectedIgnores.contains(errorStatusCode)) {_                        _                        assertEquals(errorStatusCode, response.getStatusLine().getStatusCode())__                    } else {_                        fail("request should have failed")__                    }_                } catch(ResponseException e) {_                    if (expectedIgnores.contains(errorStatusCode)) {_                        throw e__                    }_                    assertEquals(errorStatusCode, e.getResponse().getStatusLine().getStatusCode())__                    assertExceptionStackContainsCallingMethod(e)__                }_                if (errorStatusCode <= 500 || expectedIgnores.contains(errorStatusCode)) {_                    failureListener.assertNotCalled()__                } else {_                    failureListener.assertCalled(singletonList(node))__                }_            }_        }_    };end,to,end,test,for,error,status,codes,they,should,cause,an,exception,to,be,thrown,apart,from,404,with,head,requests;public,void,test,error,status,codes,throws,ioexception,for,string,method,get,http,methods,set,integer,expected,ignores,new,hash,set,string,ignore,param,if,http,head,equals,method,expected,ignores,add,404,if,random,boolean,int,num,ignores,random,int,between,1,3,for,int,i,0,i,num,ignores,i,integer,code,random,from,get,all,error,status,codes,expected,ignores,add,code,ignore,param,code,if,i,num,ignores,1,ignore,param,for,int,error,status,code,get,all,error,status,codes,try,map,string,string,params,if,ignore,param,is,empty,params,collections,empty,map,else,params,collections,singleton,map,ignore,ignore,param,response,response,perform,request,method,error,status,code,params,if,expected,ignores,contains,error,status,code,assert,equals,error,status,code,response,get,status,line,get,status,code,else,fail,request,should,have,failed,catch,response,exception,e,if,expected,ignores,contains,error,status,code,throw,e,assert,equals,error,status,code,e,get,response,get,status,line,get,status,code,assert,exception,stack,contains,calling,method,e,if,error,status,code,500,expected,ignores,contains,error,status,code,failure,listener,assert,not,called,else,failure,listener,assert,called,singleton,list,node
RestClientSingleHostTests -> public void testErrorStatusCodes() throws IOException;1535965276;End to end test for error status codes: they should cause an exception to be thrown, apart from 404 with HEAD requests;public void testErrorStatusCodes() throws IOException {_        for (String method : getHttpMethods()) {_            Set<Integer> expectedIgnores = new HashSet<>()__            String ignoreParam = ""__            if (HttpHead.METHOD_NAME.equals(method)) {_                expectedIgnores.add(404)__            }_            if (randomBoolean()) {_                int numIgnores = randomIntBetween(1, 3)__                for (int i = 0_ i < numIgnores_ i++) {_                    Integer code = randomFrom(getAllErrorStatusCodes())__                    expectedIgnores.add(code)__                    ignoreParam += code__                    if (i < numIgnores - 1) {_                        ignoreParam += ","__                    }_                }_            }_            _            for (int errorStatusCode : getAllErrorStatusCodes()) {_                try {_                    Request request = new Request(method, "/" + errorStatusCode)__                    if (false == ignoreParam.isEmpty()) {_                        request.addParameter("ignore", ignoreParam)__                    }_                    Response response = restClient.performRequest(request)__                    if (expectedIgnores.contains(errorStatusCode)) {_                        _                        assertEquals(errorStatusCode, response.getStatusLine().getStatusCode())__                    } else {_                        fail("request should have failed")__                    }_                } catch(ResponseException e) {_                    if (expectedIgnores.contains(errorStatusCode)) {_                        throw e__                    }_                    assertEquals(errorStatusCode, e.getResponse().getStatusLine().getStatusCode())__                    assertExceptionStackContainsCallingMethod(e)__                }_                if (errorStatusCode <= 500 || expectedIgnores.contains(errorStatusCode)) {_                    failureListener.assertNotCalled()__                } else {_                    failureListener.assertCalled(singletonList(node))__                }_            }_        }_    };end,to,end,test,for,error,status,codes,they,should,cause,an,exception,to,be,thrown,apart,from,404,with,head,requests;public,void,test,error,status,codes,throws,ioexception,for,string,method,get,http,methods,set,integer,expected,ignores,new,hash,set,string,ignore,param,if,http,head,equals,method,expected,ignores,add,404,if,random,boolean,int,num,ignores,random,int,between,1,3,for,int,i,0,i,num,ignores,i,integer,code,random,from,get,all,error,status,codes,expected,ignores,add,code,ignore,param,code,if,i,num,ignores,1,ignore,param,for,int,error,status,code,get,all,error,status,codes,try,request,request,new,request,method,error,status,code,if,false,ignore,param,is,empty,request,add,parameter,ignore,ignore,param,response,response,rest,client,perform,request,request,if,expected,ignores,contains,error,status,code,assert,equals,error,status,code,response,get,status,line,get,status,code,else,fail,request,should,have,failed,catch,response,exception,e,if,expected,ignores,contains,error,status,code,throw,e,assert,equals,error,status,code,e,get,response,get,status,line,get,status,code,assert,exception,stack,contains,calling,method,e,if,error,status,code,500,expected,ignores,contains,error,status,code,failure,listener,assert,not,called,else,failure,listener,assert,called,singleton,list,node
RestClientSingleHostTests -> public void testErrorStatusCodes() throws IOException;1538170812;End to end test for error status codes: they should cause an exception to be thrown, apart from 404 with HEAD requests;public void testErrorStatusCodes() throws IOException {_        for (String method : getHttpMethods()) {_            Set<Integer> expectedIgnores = new HashSet<>()__            String ignoreParam = ""__            if (HttpHead.METHOD_NAME.equals(method)) {_                expectedIgnores.add(404)__            }_            if (randomBoolean()) {_                int numIgnores = randomIntBetween(1, 3)__                for (int i = 0_ i < numIgnores_ i++) {_                    Integer code = randomFrom(getAllErrorStatusCodes())__                    expectedIgnores.add(code)__                    ignoreParam += code__                    if (i < numIgnores - 1) {_                        ignoreParam += ","__                    }_                }_            }_            _            for (int errorStatusCode : getAllErrorStatusCodes()) {_                try {_                    Request request = new Request(method, "/" + errorStatusCode)__                    if (false == ignoreParam.isEmpty()) {_                        request.addParameter("ignore", ignoreParam)__                    }_                    Response response = restClient.performRequest(request)__                    if (expectedIgnores.contains(errorStatusCode)) {_                        _                        assertEquals(errorStatusCode, response.getStatusLine().getStatusCode())__                    } else {_                        fail("request should have failed")__                    }_                } catch(ResponseException e) {_                    if (expectedIgnores.contains(errorStatusCode)) {_                        throw e__                    }_                    assertEquals(errorStatusCode, e.getResponse().getStatusLine().getStatusCode())__                    assertExceptionStackContainsCallingMethod(e)__                }_                if (errorStatusCode <= 500 || expectedIgnores.contains(errorStatusCode)) {_                    failureListener.assertNotCalled()__                } else {_                    failureListener.assertCalled(singletonList(node))__                }_            }_        }_    };end,to,end,test,for,error,status,codes,they,should,cause,an,exception,to,be,thrown,apart,from,404,with,head,requests;public,void,test,error,status,codes,throws,ioexception,for,string,method,get,http,methods,set,integer,expected,ignores,new,hash,set,string,ignore,param,if,http,head,equals,method,expected,ignores,add,404,if,random,boolean,int,num,ignores,random,int,between,1,3,for,int,i,0,i,num,ignores,i,integer,code,random,from,get,all,error,status,codes,expected,ignores,add,code,ignore,param,code,if,i,num,ignores,1,ignore,param,for,int,error,status,code,get,all,error,status,codes,try,request,request,new,request,method,error,status,code,if,false,ignore,param,is,empty,request,add,parameter,ignore,ignore,param,response,response,rest,client,perform,request,request,if,expected,ignores,contains,error,status,code,assert,equals,error,status,code,response,get,status,line,get,status,code,else,fail,request,should,have,failed,catch,response,exception,e,if,expected,ignores,contains,error,status,code,throw,e,assert,equals,error,status,code,e,get,response,get,status,line,get,status,code,assert,exception,stack,contains,calling,method,e,if,error,status,code,500,expected,ignores,contains,error,status,code,failure,listener,assert,not,called,else,failure,listener,assert,called,singleton,list,node
RestClientSingleHostTests -> public void testErrorStatusCodes() throws IOException;1539615817;End to end test for error status codes: they should cause an exception to be thrown, apart from 404 with HEAD requests;public void testErrorStatusCodes() throws IOException {_        for (String method : getHttpMethods()) {_            Set<Integer> expectedIgnores = new HashSet<>()__            String ignoreParam = ""__            if (HttpHead.METHOD_NAME.equals(method)) {_                expectedIgnores.add(404)__            }_            if (randomBoolean()) {_                int numIgnores = randomIntBetween(1, 3)__                for (int i = 0_ i < numIgnores_ i++) {_                    Integer code = randomFrom(getAllErrorStatusCodes())__                    expectedIgnores.add(code)__                    ignoreParam += code__                    if (i < numIgnores - 1) {_                        ignoreParam += ","__                    }_                }_            }_            _            for (int errorStatusCode : getAllErrorStatusCodes()) {_                try {_                    Request request = new Request(method, "/" + errorStatusCode)__                    if (false == ignoreParam.isEmpty()) {_                        request.addParameter("ignore", ignoreParam)__                    }_                    Response response = restClient.performRequest(request)__                    if (expectedIgnores.contains(errorStatusCode)) {_                        _                        assertEquals(errorStatusCode, response.getStatusLine().getStatusCode())__                    } else {_                        fail("request should have failed")__                    }_                } catch(ResponseException e) {_                    if (expectedIgnores.contains(errorStatusCode)) {_                        throw e__                    }_                    assertEquals(errorStatusCode, e.getResponse().getStatusLine().getStatusCode())__                    assertExceptionStackContainsCallingMethod(e)__                }_                if (errorStatusCode <= 500 || expectedIgnores.contains(errorStatusCode)) {_                    failureListener.assertNotCalled()__                } else {_                    failureListener.assertCalled(singletonList(node))__                }_            }_        }_    };end,to,end,test,for,error,status,codes,they,should,cause,an,exception,to,be,thrown,apart,from,404,with,head,requests;public,void,test,error,status,codes,throws,ioexception,for,string,method,get,http,methods,set,integer,expected,ignores,new,hash,set,string,ignore,param,if,http,head,equals,method,expected,ignores,add,404,if,random,boolean,int,num,ignores,random,int,between,1,3,for,int,i,0,i,num,ignores,i,integer,code,random,from,get,all,error,status,codes,expected,ignores,add,code,ignore,param,code,if,i,num,ignores,1,ignore,param,for,int,error,status,code,get,all,error,status,codes,try,request,request,new,request,method,error,status,code,if,false,ignore,param,is,empty,request,add,parameter,ignore,ignore,param,response,response,rest,client,perform,request,request,if,expected,ignores,contains,error,status,code,assert,equals,error,status,code,response,get,status,line,get,status,code,else,fail,request,should,have,failed,catch,response,exception,e,if,expected,ignores,contains,error,status,code,throw,e,assert,equals,error,status,code,e,get,response,get,status,line,get,status,code,assert,exception,stack,contains,calling,method,e,if,error,status,code,500,expected,ignores,contains,error,status,code,failure,listener,assert,not,called,else,failure,listener,assert,called,singleton,list,node
RestClientSingleHostTests -> public void testErrorStatusCodes() throws IOException;1544448720;End to end test for error status codes: they should cause an exception to be thrown, apart from 404 with HEAD requests;public void testErrorStatusCodes() throws IOException {_        for (String method : getHttpMethods()) {_            Set<Integer> expectedIgnores = new HashSet<>()__            String ignoreParam = ""__            if (HttpHead.METHOD_NAME.equals(method)) {_                expectedIgnores.add(404)__            }_            if (randomBoolean()) {_                int numIgnores = randomIntBetween(1, 3)__                for (int i = 0_ i < numIgnores_ i++) {_                    Integer code = randomFrom(getAllErrorStatusCodes())__                    expectedIgnores.add(code)__                    ignoreParam += code__                    if (i < numIgnores - 1) {_                        ignoreParam += ","__                    }_                }_            }_            _            for (int errorStatusCode : getAllErrorStatusCodes()) {_                try {_                    Request request = new Request(method, "/" + errorStatusCode)__                    if (false == ignoreParam.isEmpty()) {_                        request.addParameter("ignore", ignoreParam)__                    }_                    Response response = restClient.performRequest(request)__                    if (expectedIgnores.contains(errorStatusCode)) {_                        _                        assertEquals(errorStatusCode, response.getStatusLine().getStatusCode())__                    } else {_                        fail("request should have failed")__                    }_                } catch(ResponseException e) {_                    if (expectedIgnores.contains(errorStatusCode)) {_                        throw e__                    }_                    assertEquals(errorStatusCode, e.getResponse().getStatusLine().getStatusCode())__                    assertExceptionStackContainsCallingMethod(e)__                }_                if (errorStatusCode <= 500 || expectedIgnores.contains(errorStatusCode)) {_                    failureListener.assertNotCalled()__                } else {_                    failureListener.assertCalled(singletonList(node))__                }_            }_        }_    };end,to,end,test,for,error,status,codes,they,should,cause,an,exception,to,be,thrown,apart,from,404,with,head,requests;public,void,test,error,status,codes,throws,ioexception,for,string,method,get,http,methods,set,integer,expected,ignores,new,hash,set,string,ignore,param,if,http,head,equals,method,expected,ignores,add,404,if,random,boolean,int,num,ignores,random,int,between,1,3,for,int,i,0,i,num,ignores,i,integer,code,random,from,get,all,error,status,codes,expected,ignores,add,code,ignore,param,code,if,i,num,ignores,1,ignore,param,for,int,error,status,code,get,all,error,status,codes,try,request,request,new,request,method,error,status,code,if,false,ignore,param,is,empty,request,add,parameter,ignore,ignore,param,response,response,rest,client,perform,request,request,if,expected,ignores,contains,error,status,code,assert,equals,error,status,code,response,get,status,line,get,status,code,else,fail,request,should,have,failed,catch,response,exception,e,if,expected,ignores,contains,error,status,code,throw,e,assert,equals,error,status,code,e,get,response,get,status,line,get,status,code,assert,exception,stack,contains,calling,method,e,if,error,status,code,500,expected,ignores,contains,error,status,code,failure,listener,assert,not,called,else,failure,listener,assert,called,singleton,list,node
RestClientSingleHostTests -> public void testErrorStatusCodes() throws IOException;1548869519;End to end test for error status codes: they should cause an exception to be thrown, apart from 404 with HEAD requests;public void testErrorStatusCodes() throws IOException {_        for (String method : getHttpMethods()) {_            Set<Integer> expectedIgnores = new HashSet<>()__            String ignoreParam = ""__            if (HttpHead.METHOD_NAME.equals(method)) {_                expectedIgnores.add(404)__            }_            if (randomBoolean()) {_                int numIgnores = randomIntBetween(1, 3)__                for (int i = 0_ i < numIgnores_ i++) {_                    Integer code = randomFrom(getAllErrorStatusCodes())__                    expectedIgnores.add(code)__                    ignoreParam += code__                    if (i < numIgnores - 1) {_                        ignoreParam += ","__                    }_                }_            }_            _            for (int errorStatusCode : getAllErrorStatusCodes()) {_                try {_                    Request request = new Request(method, "/" + errorStatusCode)__                    if (false == ignoreParam.isEmpty()) {_                        request.addParameter("ignore", ignoreParam)__                    }_                    Response response = restClient.performRequest(request)__                    if (expectedIgnores.contains(errorStatusCode)) {_                        _                        assertEquals(errorStatusCode, response.getStatusLine().getStatusCode())__                    } else {_                        fail("request should have failed")__                    }_                } catch(ResponseException e) {_                    if (expectedIgnores.contains(errorStatusCode)) {_                        throw e__                    }_                    assertEquals(errorStatusCode, e.getResponse().getStatusLine().getStatusCode())__                    assertExceptionStackContainsCallingMethod(e)__                }_                if (errorStatusCode <= 500 || expectedIgnores.contains(errorStatusCode)) {_                    failureListener.assertNotCalled()__                } else {_                    failureListener.assertCalled(singletonList(node))__                }_            }_        }_    };end,to,end,test,for,error,status,codes,they,should,cause,an,exception,to,be,thrown,apart,from,404,with,head,requests;public,void,test,error,status,codes,throws,ioexception,for,string,method,get,http,methods,set,integer,expected,ignores,new,hash,set,string,ignore,param,if,http,head,equals,method,expected,ignores,add,404,if,random,boolean,int,num,ignores,random,int,between,1,3,for,int,i,0,i,num,ignores,i,integer,code,random,from,get,all,error,status,codes,expected,ignores,add,code,ignore,param,code,if,i,num,ignores,1,ignore,param,for,int,error,status,code,get,all,error,status,codes,try,request,request,new,request,method,error,status,code,if,false,ignore,param,is,empty,request,add,parameter,ignore,ignore,param,response,response,rest,client,perform,request,request,if,expected,ignores,contains,error,status,code,assert,equals,error,status,code,response,get,status,line,get,status,code,else,fail,request,should,have,failed,catch,response,exception,e,if,expected,ignores,contains,error,status,code,throw,e,assert,equals,error,status,code,e,get,response,get,status,line,get,status,code,assert,exception,stack,contains,calling,method,e,if,error,status,code,500,expected,ignores,contains,error,status,code,failure,listener,assert,not,called,else,failure,listener,assert,called,singleton,list,node
RestClientSingleHostTests -> @Deprecated     private Response performRequest(String method, String endpoint, Header... headers) throws IOException;1525248068;@deprecated prefer {@link RestClient#performRequest(Request)}.;@Deprecated_    private Response performRequest(String method, String endpoint, Header... headers) throws IOException {_        return performRequest(method, endpoint, Collections.<String, String>emptyMap(), headers)__    };deprecated,prefer,link,rest,client,perform,request,request;deprecated,private,response,perform,request,string,method,string,endpoint,header,headers,throws,ioexception,return,perform,request,method,endpoint,collections,string,string,empty,map,headers
RestClientSingleHostTests -> @Deprecated     private Response performRequest(String method, String endpoint, Header... headers) throws IOException;1526374795;@deprecated prefer {@link RestClient#performRequest(Request)}.;@Deprecated_    private Response performRequest(String method, String endpoint, Header... headers) throws IOException {_        return performRequest(method, endpoint, Collections.<String, String>emptyMap(), headers)__    };deprecated,prefer,link,rest,client,perform,request,request;deprecated,private,response,perform,request,string,method,string,endpoint,header,headers,throws,ioexception,return,perform,request,method,endpoint,collections,string,string,empty,map,headers
RestClientSingleHostTests -> @Deprecated     private Response performRequest(String method, String endpoint, Header... headers) throws IOException;1527096592;@deprecated prefer {@link RestClient#performRequest(Request)}.;@Deprecated_    private Response performRequest(String method, String endpoint, Header... headers) throws IOException {_        return performRequest(method, endpoint, Collections.<String, String>emptyMap(), headers)__    };deprecated,prefer,link,rest,client,perform,request,request;deprecated,private,response,perform,request,string,method,string,endpoint,header,headers,throws,ioexception,return,perform,request,method,endpoint,collections,string,string,empty,map,headers
RestClientSingleHostTests -> @Deprecated     private Response performRequest(String method, String endpoint, Header... headers) throws IOException;1527840262;@deprecated prefer {@link RestClient#performRequest(Request)}.;@Deprecated_    private Response performRequest(String method, String endpoint, Header... headers) throws IOException {_        return performRequest(method, endpoint, Collections.<String, String>emptyMap(), headers)__    };deprecated,prefer,link,rest,client,perform,request,request;deprecated,private,response,perform,request,string,method,string,endpoint,header,headers,throws,ioexception,return,perform,request,method,endpoint,collections,string,string,empty,map,headers
RestClientSingleHostTests -> @Deprecated     private Response performRequest(String method, String endpoint, Header... headers) throws IOException;1528762805;@deprecated prefer {@link RestClient#performRequest(Request)}.;@Deprecated_    private Response performRequest(String method, String endpoint, Header... headers) throws IOException {_        return performRequest(method, endpoint, Collections.<String, String>emptyMap(), headers)__    };deprecated,prefer,link,rest,client,perform,request,request;deprecated,private,response,perform,request,string,method,string,endpoint,header,headers,throws,ioexception,return,perform,request,method,endpoint,collections,string,string,empty,map,headers
RestClientSingleHostTests -> @Deprecated     private Response performRequest(String method, String endpoint, Header... headers) throws IOException;1529687475;@deprecated prefer {@link RestClient#performRequest(Request)}.;@Deprecated_    private Response performRequest(String method, String endpoint, Header... headers) throws IOException {_        return performRequest(method, endpoint, Collections.<String, String>emptyMap(), headers)__    };deprecated,prefer,link,rest,client,perform,request,request;deprecated,private,response,perform,request,string,method,string,endpoint,header,headers,throws,ioexception,return,perform,request,method,endpoint,collections,string,string,empty,map,headers
RestClientSingleHostTests -> @Deprecated     private Response performRequest(String method, String endpoint, Header... headers) throws IOException;1531179852;@deprecated prefer {@link RestClient#performRequest(Request)}.;@Deprecated_    private Response performRequest(String method, String endpoint, Header... headers) throws IOException {_        return performRequest(method, endpoint, Collections.<String, String>emptyMap(), headers)__    };deprecated,prefer,link,rest,client,perform,request,request;deprecated,private,response,perform,request,string,method,string,endpoint,header,headers,throws,ioexception,return,perform,request,method,endpoint,collections,string,string,empty,map,headers
RestClientSingleHostTests -> @After     public void shutdownExec();1524684173;Shutdown the executor so we don't leak threads into other test runs.;@After_    public void shutdownExec() {_        exec.shutdown()__    };shutdown,the,executor,so,we,don,t,leak,threads,into,other,test,runs;after,public,void,shutdown,exec,exec,shutdown
RestClientSingleHostTests -> @After     public void shutdownExec();1525248068;Shutdown the executor so we don't leak threads into other test runs.;@After_    public void shutdownExec() {_        exec.shutdown()__    };shutdown,the,executor,so,we,don,t,leak,threads,into,other,test,runs;after,public,void,shutdown,exec,exec,shutdown
RestClientSingleHostTests -> @After     public void shutdownExec();1526374795;Shutdown the executor so we don't leak threads into other test runs.;@After_    public void shutdownExec() {_        exec.shutdown()__    };shutdown,the,executor,so,we,don,t,leak,threads,into,other,test,runs;after,public,void,shutdown,exec,exec,shutdown
RestClientSingleHostTests -> @After     public void shutdownExec();1527096592;Shutdown the executor so we don't leak threads into other test runs.;@After_    public void shutdownExec() {_        exec.shutdown()__    };shutdown,the,executor,so,we,don,t,leak,threads,into,other,test,runs;after,public,void,shutdown,exec,exec,shutdown
RestClientSingleHostTests -> @After     public void shutdownExec();1527840262;Shutdown the executor so we don't leak threads into other test runs.;@After_    public void shutdownExec() {_        exec.shutdown()__    };shutdown,the,executor,so,we,don,t,leak,threads,into,other,test,runs;after,public,void,shutdown,exec,exec,shutdown
RestClientSingleHostTests -> @After     public void shutdownExec();1528762805;Shutdown the executor so we don't leak threads into other test runs.;@After_    public void shutdownExec() {_        exec.shutdown()__    };shutdown,the,executor,so,we,don,t,leak,threads,into,other,test,runs;after,public,void,shutdown,exec,exec,shutdown
RestClientSingleHostTests -> @After     public void shutdownExec();1529687475;Shutdown the executor so we don't leak threads into other test runs.;@After_    public void shutdownExec() {_        exec.shutdown()__    };shutdown,the,executor,so,we,don,t,leak,threads,into,other,test,runs;after,public,void,shutdown,exec,exec,shutdown
RestClientSingleHostTests -> @After     public void shutdownExec();1531179852;Shutdown the executor so we don't leak threads into other test runs.;@After_    public void shutdownExec() {_        exec.shutdown()__    };shutdown,the,executor,so,we,don,t,leak,threads,into,other,test,runs;after,public,void,shutdown,exec,exec,shutdown
RestClientSingleHostTests -> @After     public void shutdownExec();1535965276;Shutdown the executor so we don't leak threads into other test runs.;@After_    public void shutdownExec() {_        exec.shutdown()__    };shutdown,the,executor,so,we,don,t,leak,threads,into,other,test,runs;after,public,void,shutdown,exec,exec,shutdown
RestClientSingleHostTests -> @After     public void shutdownExec();1538170812;Shutdown the executor so we don't leak threads into other test runs.;@After_    public void shutdownExec() {_        exec.shutdown()__    };shutdown,the,executor,so,we,don,t,leak,threads,into,other,test,runs;after,public,void,shutdown,exec,exec,shutdown
RestClientSingleHostTests -> @After     public void shutdownExec();1539615817;Shutdown the executor so we don't leak threads into other test runs.;@After_    public void shutdownExec() {_        exec.shutdown()__    };shutdown,the,executor,so,we,don,t,leak,threads,into,other,test,runs;after,public,void,shutdown,exec,exec,shutdown
RestClientSingleHostTests -> @After     public void shutdownExec();1544448720;Shutdown the executor so we don't leak threads into other test runs.;@After_    public void shutdownExec() {_        exec.shutdown()__    };shutdown,the,executor,so,we,don,t,leak,threads,into,other,test,runs;after,public,void,shutdown,exec,exec,shutdown
RestClientSingleHostTests -> @After     public void shutdownExec();1548869519;Shutdown the executor so we don't leak threads into other test runs.;@After_    public void shutdownExec() {_        exec.shutdown()__    };shutdown,the,executor,so,we,don,t,leak,threads,into,other,test,runs;after,public,void,shutdown,exec,exec,shutdown
RestClientSingleHostTests -> @After     public void shutdownExec();1549439027;Shutdown the executor so we don't leak threads into other test runs.;@After_    public void shutdownExec() {_        exec.shutdown()__    };shutdown,the,executor,so,we,don,t,leak,threads,into,other,test,runs;after,public,void,shutdown,exec,exec,shutdown
RestClientSingleHostTests -> private static String formatWarning(String warningBody);1539615817;Emulates Elasticsearch's DeprecationLogger.formatWarning in simple_cases. We don't have that available because we're testing against 1.7.;private static String formatWarning(String warningBody) {_        return "299 Elasticsearch-1.2.2-SNAPSHOT-eeeeeee \"" + warningBody + "\" \"Mon, 01 Jan 2001 00:00:00 GMT\""__    };emulates,elasticsearch,s,deprecation,logger,format,warning,in,simple,cases,we,don,t,have,that,available,because,we,re,testing,against,1,7;private,static,string,format,warning,string,warning,body,return,299,elasticsearch,1,2,2,snapshot,eeeeeee,warning,body,mon,01,jan,2001,00,00,00,gmt
RestClientSingleHostTests -> private static String formatWarning(String warningBody);1544448720;Emulates Elasticsearch's DeprecationLogger.formatWarning in simple_cases. We don't have that available because we're testing against 1.7.;private static String formatWarning(String warningBody) {_        return "299 Elasticsearch-1.2.2-SNAPSHOT-eeeeeee \"" + warningBody + "\" \"Mon, 01 Jan 2001 00:00:00 GMT\""__    };emulates,elasticsearch,s,deprecation,logger,format,warning,in,simple,cases,we,don,t,have,that,available,because,we,re,testing,against,1,7;private,static,string,format,warning,string,warning,body,return,299,elasticsearch,1,2,2,snapshot,eeeeeee,warning,body,mon,01,jan,2001,00,00,00,gmt
RestClientSingleHostTests -> private static String formatWarning(String warningBody);1548869519;Emulates Elasticsearch's DeprecationLogger.formatWarning in simple_cases. We don't have that available because we're testing against 1.7.;private static String formatWarning(String warningBody) {_        return "299 Elasticsearch-1.2.2-SNAPSHOT-eeeeeee \"" + warningBody + "\" \"Mon, 01 Jan 2001 00:00:00 GMT\""__    };emulates,elasticsearch,s,deprecation,logger,format,warning,in,simple,cases,we,don,t,have,that,available,because,we,re,testing,against,1,7;private,static,string,format,warning,string,warning,body,return,299,elasticsearch,1,2,2,snapshot,eeeeeee,warning,body,mon,01,jan,2001,00,00,00,gmt
RestClientSingleHostTests -> private static String formatWarning(String warningBody);1549439027;Emulates Elasticsearch's DeprecationLogger.formatWarning in simple_cases. We don't have that available because we're testing against 1.7.;private static String formatWarning(String warningBody) {_        return "299 Elasticsearch-1.2.2-SNAPSHOT-eeeeeee \"" + warningBody + "\" \"Mon, 01 Jan 2001 00:00:00 GMT\""__    };emulates,elasticsearch,s,deprecation,logger,format,warning,in,simple,cases,we,don,t,have,that,available,because,we,re,testing,against,1,7;private,static,string,format,warning,string,warning,body,return,299,elasticsearch,1,2,2,snapshot,eeeeeee,warning,body,mon,01,jan,2001,00,00,00,gmt
RestClientSingleHostTests -> @SuppressWarnings("unchecked")     public void testInternalHttpRequest() throws Exception;1524684173;Verifies the content of the {@link HttpRequest} that's internally created and passed through to the http client;@SuppressWarnings("unchecked")_    public void testInternalHttpRequest() throws Exception {_        ArgumentCaptor<HttpAsyncRequestProducer> requestArgumentCaptor = ArgumentCaptor.forClass(HttpAsyncRequestProducer.class)__        int times = 0__        for (String httpMethod : getHttpMethods()) {_            HttpUriRequest expectedRequest = performRandomRequest(httpMethod)__            verify(httpClient, times(++times)).<HttpResponse>execute(requestArgumentCaptor.capture(),_                    any(HttpAsyncResponseConsumer.class), any(HttpClientContext.class), any(FutureCallback.class))__            HttpUriRequest actualRequest = (HttpUriRequest)requestArgumentCaptor.getValue().generateRequest()__            assertEquals(expectedRequest.getURI(), actualRequest.getURI())__            assertEquals(expectedRequest.getClass(), actualRequest.getClass())__            assertArrayEquals(expectedRequest.getAllHeaders(), actualRequest.getAllHeaders())__            if (expectedRequest instanceof HttpEntityEnclosingRequest) {_                HttpEntity expectedEntity = ((HttpEntityEnclosingRequest) expectedRequest).getEntity()__                if (expectedEntity != null) {_                    HttpEntity actualEntity = ((HttpEntityEnclosingRequest) actualRequest).getEntity()__                    assertEquals(EntityUtils.toString(expectedEntity), EntityUtils.toString(actualEntity))__                }_            }_        }_    };verifies,the,content,of,the,link,http,request,that,s,internally,created,and,passed,through,to,the,http,client;suppress,warnings,unchecked,public,void,test,internal,http,request,throws,exception,argument,captor,http,async,request,producer,request,argument,captor,argument,captor,for,class,http,async,request,producer,class,int,times,0,for,string,http,method,get,http,methods,http,uri,request,expected,request,perform,random,request,http,method,verify,http,client,times,times,http,response,execute,request,argument,captor,capture,any,http,async,response,consumer,class,any,http,client,context,class,any,future,callback,class,http,uri,request,actual,request,http,uri,request,request,argument,captor,get,value,generate,request,assert,equals,expected,request,get,uri,actual,request,get,uri,assert,equals,expected,request,get,class,actual,request,get,class,assert,array,equals,expected,request,get,all,headers,actual,request,get,all,headers,if,expected,request,instanceof,http,entity,enclosing,request,http,entity,expected,entity,http,entity,enclosing,request,expected,request,get,entity,if,expected,entity,null,http,entity,actual,entity,http,entity,enclosing,request,actual,request,get,entity,assert,equals,entity,utils,to,string,expected,entity,entity,utils,to,string,actual,entity
RestClientSingleHostTests -> @SuppressWarnings("unchecked")     public void testInternalHttpRequest() throws Exception;1525248068;Verifies the content of the {@link HttpRequest} that's internally created and passed through to the http client;@SuppressWarnings("unchecked")_    public void testInternalHttpRequest() throws Exception {_        ArgumentCaptor<HttpAsyncRequestProducer> requestArgumentCaptor = ArgumentCaptor.forClass(HttpAsyncRequestProducer.class)__        int times = 0__        for (String httpMethod : getHttpMethods()) {_            HttpUriRequest expectedRequest = performRandomRequest(httpMethod)__            verify(httpClient, times(++times)).<HttpResponse>execute(requestArgumentCaptor.capture(),_                    any(HttpAsyncResponseConsumer.class), any(HttpClientContext.class), any(FutureCallback.class))__            HttpUriRequest actualRequest = (HttpUriRequest)requestArgumentCaptor.getValue().generateRequest()__            assertEquals(expectedRequest.getURI(), actualRequest.getURI())__            assertEquals(expectedRequest.getClass(), actualRequest.getClass())__            assertArrayEquals(expectedRequest.getAllHeaders(), actualRequest.getAllHeaders())__            if (expectedRequest instanceof HttpEntityEnclosingRequest) {_                HttpEntity expectedEntity = ((HttpEntityEnclosingRequest) expectedRequest).getEntity()__                if (expectedEntity != null) {_                    HttpEntity actualEntity = ((HttpEntityEnclosingRequest) actualRequest).getEntity()__                    assertEquals(EntityUtils.toString(expectedEntity), EntityUtils.toString(actualEntity))__                }_            }_        }_    };verifies,the,content,of,the,link,http,request,that,s,internally,created,and,passed,through,to,the,http,client;suppress,warnings,unchecked,public,void,test,internal,http,request,throws,exception,argument,captor,http,async,request,producer,request,argument,captor,argument,captor,for,class,http,async,request,producer,class,int,times,0,for,string,http,method,get,http,methods,http,uri,request,expected,request,perform,random,request,http,method,verify,http,client,times,times,http,response,execute,request,argument,captor,capture,any,http,async,response,consumer,class,any,http,client,context,class,any,future,callback,class,http,uri,request,actual,request,http,uri,request,request,argument,captor,get,value,generate,request,assert,equals,expected,request,get,uri,actual,request,get,uri,assert,equals,expected,request,get,class,actual,request,get,class,assert,array,equals,expected,request,get,all,headers,actual,request,get,all,headers,if,expected,request,instanceof,http,entity,enclosing,request,http,entity,expected,entity,http,entity,enclosing,request,expected,request,get,entity,if,expected,entity,null,http,entity,actual,entity,http,entity,enclosing,request,actual,request,get,entity,assert,equals,entity,utils,to,string,expected,entity,entity,utils,to,string,actual,entity
RestClientSingleHostTests -> @SuppressWarnings("unchecked")     public void testInternalHttpRequest() throws Exception;1526374795;Verifies the content of the {@link HttpRequest} that's internally created and passed through to the http client;@SuppressWarnings("unchecked")_    public void testInternalHttpRequest() throws Exception {_        ArgumentCaptor<HttpAsyncRequestProducer> requestArgumentCaptor = ArgumentCaptor.forClass(HttpAsyncRequestProducer.class)__        int times = 0__        for (String httpMethod : getHttpMethods()) {_            HttpUriRequest expectedRequest = performRandomRequest(httpMethod)__            verify(httpClient, times(++times)).<HttpResponse>execute(requestArgumentCaptor.capture(),_                    any(HttpAsyncResponseConsumer.class), any(HttpClientContext.class), any(FutureCallback.class))__            HttpUriRequest actualRequest = (HttpUriRequest)requestArgumentCaptor.getValue().generateRequest()__            assertEquals(expectedRequest.getURI(), actualRequest.getURI())__            assertEquals(expectedRequest.getClass(), actualRequest.getClass())__            assertArrayEquals(expectedRequest.getAllHeaders(), actualRequest.getAllHeaders())__            if (expectedRequest instanceof HttpEntityEnclosingRequest) {_                HttpEntity expectedEntity = ((HttpEntityEnclosingRequest) expectedRequest).getEntity()__                if (expectedEntity != null) {_                    HttpEntity actualEntity = ((HttpEntityEnclosingRequest) actualRequest).getEntity()__                    assertEquals(EntityUtils.toString(expectedEntity), EntityUtils.toString(actualEntity))__                }_            }_        }_    };verifies,the,content,of,the,link,http,request,that,s,internally,created,and,passed,through,to,the,http,client;suppress,warnings,unchecked,public,void,test,internal,http,request,throws,exception,argument,captor,http,async,request,producer,request,argument,captor,argument,captor,for,class,http,async,request,producer,class,int,times,0,for,string,http,method,get,http,methods,http,uri,request,expected,request,perform,random,request,http,method,verify,http,client,times,times,http,response,execute,request,argument,captor,capture,any,http,async,response,consumer,class,any,http,client,context,class,any,future,callback,class,http,uri,request,actual,request,http,uri,request,request,argument,captor,get,value,generate,request,assert,equals,expected,request,get,uri,actual,request,get,uri,assert,equals,expected,request,get,class,actual,request,get,class,assert,array,equals,expected,request,get,all,headers,actual,request,get,all,headers,if,expected,request,instanceof,http,entity,enclosing,request,http,entity,expected,entity,http,entity,enclosing,request,expected,request,get,entity,if,expected,entity,null,http,entity,actual,entity,http,entity,enclosing,request,actual,request,get,entity,assert,equals,entity,utils,to,string,expected,entity,entity,utils,to,string,actual,entity
RestClientSingleHostTests -> @SuppressWarnings("unchecked")     public void testInternalHttpRequest() throws Exception;1527096592;Verifies the content of the {@link HttpRequest} that's internally created and passed through to the http client;@SuppressWarnings("unchecked")_    public void testInternalHttpRequest() throws Exception {_        ArgumentCaptor<HttpAsyncRequestProducer> requestArgumentCaptor = ArgumentCaptor.forClass(HttpAsyncRequestProducer.class)__        int times = 0__        for (String httpMethod : getHttpMethods()) {_            HttpUriRequest expectedRequest = performRandomRequest(httpMethod)__            verify(httpClient, times(++times)).<HttpResponse>execute(requestArgumentCaptor.capture(),_                    any(HttpAsyncResponseConsumer.class), any(HttpClientContext.class), any(FutureCallback.class))__            HttpUriRequest actualRequest = (HttpUriRequest)requestArgumentCaptor.getValue().generateRequest()__            assertEquals(expectedRequest.getURI(), actualRequest.getURI())__            assertEquals(expectedRequest.getClass(), actualRequest.getClass())__            assertArrayEquals(expectedRequest.getAllHeaders(), actualRequest.getAllHeaders())__            if (expectedRequest instanceof HttpEntityEnclosingRequest) {_                HttpEntity expectedEntity = ((HttpEntityEnclosingRequest) expectedRequest).getEntity()__                if (expectedEntity != null) {_                    HttpEntity actualEntity = ((HttpEntityEnclosingRequest) actualRequest).getEntity()__                    assertEquals(EntityUtils.toString(expectedEntity), EntityUtils.toString(actualEntity))__                }_            }_        }_    };verifies,the,content,of,the,link,http,request,that,s,internally,created,and,passed,through,to,the,http,client;suppress,warnings,unchecked,public,void,test,internal,http,request,throws,exception,argument,captor,http,async,request,producer,request,argument,captor,argument,captor,for,class,http,async,request,producer,class,int,times,0,for,string,http,method,get,http,methods,http,uri,request,expected,request,perform,random,request,http,method,verify,http,client,times,times,http,response,execute,request,argument,captor,capture,any,http,async,response,consumer,class,any,http,client,context,class,any,future,callback,class,http,uri,request,actual,request,http,uri,request,request,argument,captor,get,value,generate,request,assert,equals,expected,request,get,uri,actual,request,get,uri,assert,equals,expected,request,get,class,actual,request,get,class,assert,array,equals,expected,request,get,all,headers,actual,request,get,all,headers,if,expected,request,instanceof,http,entity,enclosing,request,http,entity,expected,entity,http,entity,enclosing,request,expected,request,get,entity,if,expected,entity,null,http,entity,actual,entity,http,entity,enclosing,request,actual,request,get,entity,assert,equals,entity,utils,to,string,expected,entity,entity,utils,to,string,actual,entity
RestClientSingleHostTests -> @SuppressWarnings("unchecked")     public void testInternalHttpRequest() throws Exception;1527840262;Verifies the content of the {@link HttpRequest} that's internally created and passed through to the http client;@SuppressWarnings("unchecked")_    public void testInternalHttpRequest() throws Exception {_        ArgumentCaptor<HttpAsyncRequestProducer> requestArgumentCaptor = ArgumentCaptor.forClass(HttpAsyncRequestProducer.class)__        int times = 0__        for (String httpMethod : getHttpMethods()) {_            HttpUriRequest expectedRequest = performRandomRequest(httpMethod)__            verify(httpClient, times(++times)).<HttpResponse>execute(requestArgumentCaptor.capture(),_                    any(HttpAsyncResponseConsumer.class), any(HttpClientContext.class), any(FutureCallback.class))__            HttpUriRequest actualRequest = (HttpUriRequest)requestArgumentCaptor.getValue().generateRequest()__            assertEquals(expectedRequest.getURI(), actualRequest.getURI())__            assertEquals(expectedRequest.getClass(), actualRequest.getClass())__            assertArrayEquals(expectedRequest.getAllHeaders(), actualRequest.getAllHeaders())__            if (expectedRequest instanceof HttpEntityEnclosingRequest) {_                HttpEntity expectedEntity = ((HttpEntityEnclosingRequest) expectedRequest).getEntity()__                if (expectedEntity != null) {_                    HttpEntity actualEntity = ((HttpEntityEnclosingRequest) actualRequest).getEntity()__                    assertEquals(EntityUtils.toString(expectedEntity), EntityUtils.toString(actualEntity))__                }_            }_        }_    };verifies,the,content,of,the,link,http,request,that,s,internally,created,and,passed,through,to,the,http,client;suppress,warnings,unchecked,public,void,test,internal,http,request,throws,exception,argument,captor,http,async,request,producer,request,argument,captor,argument,captor,for,class,http,async,request,producer,class,int,times,0,for,string,http,method,get,http,methods,http,uri,request,expected,request,perform,random,request,http,method,verify,http,client,times,times,http,response,execute,request,argument,captor,capture,any,http,async,response,consumer,class,any,http,client,context,class,any,future,callback,class,http,uri,request,actual,request,http,uri,request,request,argument,captor,get,value,generate,request,assert,equals,expected,request,get,uri,actual,request,get,uri,assert,equals,expected,request,get,class,actual,request,get,class,assert,array,equals,expected,request,get,all,headers,actual,request,get,all,headers,if,expected,request,instanceof,http,entity,enclosing,request,http,entity,expected,entity,http,entity,enclosing,request,expected,request,get,entity,if,expected,entity,null,http,entity,actual,entity,http,entity,enclosing,request,actual,request,get,entity,assert,equals,entity,utils,to,string,expected,entity,entity,utils,to,string,actual,entity
RestClientSingleHostTests -> @SuppressWarnings("unchecked")     public void testInternalHttpRequest() throws Exception;1528762805;Verifies the content of the {@link HttpRequest} that's internally created and passed through to the http client;@SuppressWarnings("unchecked")_    public void testInternalHttpRequest() throws Exception {_        ArgumentCaptor<HttpAsyncRequestProducer> requestArgumentCaptor = ArgumentCaptor.forClass(HttpAsyncRequestProducer.class)__        int times = 0__        for (String httpMethod : getHttpMethods()) {_            HttpUriRequest expectedRequest = performRandomRequest(httpMethod)__            verify(httpClient, times(++times)).<HttpResponse>execute(requestArgumentCaptor.capture(),_                    any(HttpAsyncResponseConsumer.class), any(HttpClientContext.class), any(FutureCallback.class))__            HttpUriRequest actualRequest = (HttpUriRequest)requestArgumentCaptor.getValue().generateRequest()__            assertEquals(expectedRequest.getURI(), actualRequest.getURI())__            assertEquals(expectedRequest.getClass(), actualRequest.getClass())__            assertArrayEquals(expectedRequest.getAllHeaders(), actualRequest.getAllHeaders())__            if (expectedRequest instanceof HttpEntityEnclosingRequest) {_                HttpEntity expectedEntity = ((HttpEntityEnclosingRequest) expectedRequest).getEntity()__                if (expectedEntity != null) {_                    HttpEntity actualEntity = ((HttpEntityEnclosingRequest) actualRequest).getEntity()__                    assertEquals(EntityUtils.toString(expectedEntity), EntityUtils.toString(actualEntity))__                }_            }_        }_    };verifies,the,content,of,the,link,http,request,that,s,internally,created,and,passed,through,to,the,http,client;suppress,warnings,unchecked,public,void,test,internal,http,request,throws,exception,argument,captor,http,async,request,producer,request,argument,captor,argument,captor,for,class,http,async,request,producer,class,int,times,0,for,string,http,method,get,http,methods,http,uri,request,expected,request,perform,random,request,http,method,verify,http,client,times,times,http,response,execute,request,argument,captor,capture,any,http,async,response,consumer,class,any,http,client,context,class,any,future,callback,class,http,uri,request,actual,request,http,uri,request,request,argument,captor,get,value,generate,request,assert,equals,expected,request,get,uri,actual,request,get,uri,assert,equals,expected,request,get,class,actual,request,get,class,assert,array,equals,expected,request,get,all,headers,actual,request,get,all,headers,if,expected,request,instanceof,http,entity,enclosing,request,http,entity,expected,entity,http,entity,enclosing,request,expected,request,get,entity,if,expected,entity,null,http,entity,actual,entity,http,entity,enclosing,request,actual,request,get,entity,assert,equals,entity,utils,to,string,expected,entity,entity,utils,to,string,actual,entity
RestClientSingleHostTests -> @SuppressWarnings("unchecked")     public void testInternalHttpRequest() throws Exception;1529687475;Verifies the content of the {@link HttpRequest} that's internally created and passed through to the http client;@SuppressWarnings("unchecked")_    public void testInternalHttpRequest() throws Exception {_        ArgumentCaptor<HttpAsyncRequestProducer> requestArgumentCaptor = ArgumentCaptor.forClass(HttpAsyncRequestProducer.class)__        int times = 0__        for (String httpMethod : getHttpMethods()) {_            HttpUriRequest expectedRequest = performRandomRequest(httpMethod)__            verify(httpClient, times(++times)).<HttpResponse>execute(requestArgumentCaptor.capture(),_                    any(HttpAsyncResponseConsumer.class), any(HttpClientContext.class), any(FutureCallback.class))__            HttpUriRequest actualRequest = (HttpUriRequest)requestArgumentCaptor.getValue().generateRequest()__            assertEquals(expectedRequest.getURI(), actualRequest.getURI())__            assertEquals(expectedRequest.getClass(), actualRequest.getClass())__            assertArrayEquals(expectedRequest.getAllHeaders(), actualRequest.getAllHeaders())__            if (expectedRequest instanceof HttpEntityEnclosingRequest) {_                HttpEntity expectedEntity = ((HttpEntityEnclosingRequest) expectedRequest).getEntity()__                if (expectedEntity != null) {_                    HttpEntity actualEntity = ((HttpEntityEnclosingRequest) actualRequest).getEntity()__                    assertEquals(EntityUtils.toString(expectedEntity), EntityUtils.toString(actualEntity))__                }_            }_        }_    };verifies,the,content,of,the,link,http,request,that,s,internally,created,and,passed,through,to,the,http,client;suppress,warnings,unchecked,public,void,test,internal,http,request,throws,exception,argument,captor,http,async,request,producer,request,argument,captor,argument,captor,for,class,http,async,request,producer,class,int,times,0,for,string,http,method,get,http,methods,http,uri,request,expected,request,perform,random,request,http,method,verify,http,client,times,times,http,response,execute,request,argument,captor,capture,any,http,async,response,consumer,class,any,http,client,context,class,any,future,callback,class,http,uri,request,actual,request,http,uri,request,request,argument,captor,get,value,generate,request,assert,equals,expected,request,get,uri,actual,request,get,uri,assert,equals,expected,request,get,class,actual,request,get,class,assert,array,equals,expected,request,get,all,headers,actual,request,get,all,headers,if,expected,request,instanceof,http,entity,enclosing,request,http,entity,expected,entity,http,entity,enclosing,request,expected,request,get,entity,if,expected,entity,null,http,entity,actual,entity,http,entity,enclosing,request,actual,request,get,entity,assert,equals,entity,utils,to,string,expected,entity,entity,utils,to,string,actual,entity
RestClientSingleHostTests -> @SuppressWarnings("unchecked")     public void testInternalHttpRequest() throws Exception;1531179852;Verifies the content of the {@link HttpRequest} that's internally created and passed through to the http client;@SuppressWarnings("unchecked")_    public void testInternalHttpRequest() throws Exception {_        ArgumentCaptor<HttpAsyncRequestProducer> requestArgumentCaptor = ArgumentCaptor.forClass(HttpAsyncRequestProducer.class)__        int times = 0__        for (String httpMethod : getHttpMethods()) {_            HttpUriRequest expectedRequest = performRandomRequest(httpMethod)__            verify(httpClient, times(++times)).<HttpResponse>execute(requestArgumentCaptor.capture(),_                    any(HttpAsyncResponseConsumer.class), any(HttpClientContext.class), any(FutureCallback.class))__            HttpUriRequest actualRequest = (HttpUriRequest)requestArgumentCaptor.getValue().generateRequest()__            assertEquals(expectedRequest.getURI(), actualRequest.getURI())__            assertEquals(expectedRequest.getClass(), actualRequest.getClass())__            assertArrayEquals(expectedRequest.getAllHeaders(), actualRequest.getAllHeaders())__            if (expectedRequest instanceof HttpEntityEnclosingRequest) {_                HttpEntity expectedEntity = ((HttpEntityEnclosingRequest) expectedRequest).getEntity()__                if (expectedEntity != null) {_                    HttpEntity actualEntity = ((HttpEntityEnclosingRequest) actualRequest).getEntity()__                    assertEquals(EntityUtils.toString(expectedEntity), EntityUtils.toString(actualEntity))__                }_            }_        }_    };verifies,the,content,of,the,link,http,request,that,s,internally,created,and,passed,through,to,the,http,client;suppress,warnings,unchecked,public,void,test,internal,http,request,throws,exception,argument,captor,http,async,request,producer,request,argument,captor,argument,captor,for,class,http,async,request,producer,class,int,times,0,for,string,http,method,get,http,methods,http,uri,request,expected,request,perform,random,request,http,method,verify,http,client,times,times,http,response,execute,request,argument,captor,capture,any,http,async,response,consumer,class,any,http,client,context,class,any,future,callback,class,http,uri,request,actual,request,http,uri,request,request,argument,captor,get,value,generate,request,assert,equals,expected,request,get,uri,actual,request,get,uri,assert,equals,expected,request,get,class,actual,request,get,class,assert,array,equals,expected,request,get,all,headers,actual,request,get,all,headers,if,expected,request,instanceof,http,entity,enclosing,request,http,entity,expected,entity,http,entity,enclosing,request,expected,request,get,entity,if,expected,entity,null,http,entity,actual,entity,http,entity,enclosing,request,actual,request,get,entity,assert,equals,entity,utils,to,string,expected,entity,entity,utils,to,string,actual,entity
RestClientSingleHostTests -> @SuppressWarnings("unchecked")     public void testInternalHttpRequest() throws Exception;1535965276;Verifies the content of the {@link HttpRequest} that's internally created and passed through to the http client;@SuppressWarnings("unchecked")_    public void testInternalHttpRequest() throws Exception {_        ArgumentCaptor<HttpAsyncRequestProducer> requestArgumentCaptor = ArgumentCaptor.forClass(HttpAsyncRequestProducer.class)__        int times = 0__        for (String httpMethod : getHttpMethods()) {_            HttpUriRequest expectedRequest = performRandomRequest(httpMethod)__            verify(httpClient, times(++times)).<HttpResponse>execute(requestArgumentCaptor.capture(),_                    any(HttpAsyncResponseConsumer.class), any(HttpClientContext.class), any(FutureCallback.class))__            HttpUriRequest actualRequest = (HttpUriRequest)requestArgumentCaptor.getValue().generateRequest()__            assertEquals(expectedRequest.getURI(), actualRequest.getURI())__            assertEquals(expectedRequest.getClass(), actualRequest.getClass())__            assertArrayEquals(expectedRequest.getAllHeaders(), actualRequest.getAllHeaders())__            if (expectedRequest instanceof HttpEntityEnclosingRequest) {_                HttpEntity expectedEntity = ((HttpEntityEnclosingRequest) expectedRequest).getEntity()__                if (expectedEntity != null) {_                    HttpEntity actualEntity = ((HttpEntityEnclosingRequest) actualRequest).getEntity()__                    assertEquals(EntityUtils.toString(expectedEntity), EntityUtils.toString(actualEntity))__                }_            }_        }_    };verifies,the,content,of,the,link,http,request,that,s,internally,created,and,passed,through,to,the,http,client;suppress,warnings,unchecked,public,void,test,internal,http,request,throws,exception,argument,captor,http,async,request,producer,request,argument,captor,argument,captor,for,class,http,async,request,producer,class,int,times,0,for,string,http,method,get,http,methods,http,uri,request,expected,request,perform,random,request,http,method,verify,http,client,times,times,http,response,execute,request,argument,captor,capture,any,http,async,response,consumer,class,any,http,client,context,class,any,future,callback,class,http,uri,request,actual,request,http,uri,request,request,argument,captor,get,value,generate,request,assert,equals,expected,request,get,uri,actual,request,get,uri,assert,equals,expected,request,get,class,actual,request,get,class,assert,array,equals,expected,request,get,all,headers,actual,request,get,all,headers,if,expected,request,instanceof,http,entity,enclosing,request,http,entity,expected,entity,http,entity,enclosing,request,expected,request,get,entity,if,expected,entity,null,http,entity,actual,entity,http,entity,enclosing,request,actual,request,get,entity,assert,equals,entity,utils,to,string,expected,entity,entity,utils,to,string,actual,entity
RestClientSingleHostTests -> @SuppressWarnings("unchecked")     public void testInternalHttpRequest() throws Exception;1538170812;Verifies the content of the {@link HttpRequest} that's internally created and passed through to the http client;@SuppressWarnings("unchecked")_    public void testInternalHttpRequest() throws Exception {_        ArgumentCaptor<HttpAsyncRequestProducer> requestArgumentCaptor = ArgumentCaptor.forClass(HttpAsyncRequestProducer.class)__        int times = 0__        for (String httpMethod : getHttpMethods()) {_            HttpUriRequest expectedRequest = performRandomRequest(httpMethod)__            verify(httpClient, times(++times)).<HttpResponse>execute(requestArgumentCaptor.capture(),_                    any(HttpAsyncResponseConsumer.class), any(HttpClientContext.class), any(FutureCallback.class))__            HttpUriRequest actualRequest = (HttpUriRequest)requestArgumentCaptor.getValue().generateRequest()__            assertEquals(expectedRequest.getURI(), actualRequest.getURI())__            assertEquals(expectedRequest.getClass(), actualRequest.getClass())__            assertArrayEquals(expectedRequest.getAllHeaders(), actualRequest.getAllHeaders())__            if (expectedRequest instanceof HttpEntityEnclosingRequest) {_                HttpEntity expectedEntity = ((HttpEntityEnclosingRequest) expectedRequest).getEntity()__                if (expectedEntity != null) {_                    HttpEntity actualEntity = ((HttpEntityEnclosingRequest) actualRequest).getEntity()__                    assertEquals(EntityUtils.toString(expectedEntity), EntityUtils.toString(actualEntity))__                }_            }_        }_    };verifies,the,content,of,the,link,http,request,that,s,internally,created,and,passed,through,to,the,http,client;suppress,warnings,unchecked,public,void,test,internal,http,request,throws,exception,argument,captor,http,async,request,producer,request,argument,captor,argument,captor,for,class,http,async,request,producer,class,int,times,0,for,string,http,method,get,http,methods,http,uri,request,expected,request,perform,random,request,http,method,verify,http,client,times,times,http,response,execute,request,argument,captor,capture,any,http,async,response,consumer,class,any,http,client,context,class,any,future,callback,class,http,uri,request,actual,request,http,uri,request,request,argument,captor,get,value,generate,request,assert,equals,expected,request,get,uri,actual,request,get,uri,assert,equals,expected,request,get,class,actual,request,get,class,assert,array,equals,expected,request,get,all,headers,actual,request,get,all,headers,if,expected,request,instanceof,http,entity,enclosing,request,http,entity,expected,entity,http,entity,enclosing,request,expected,request,get,entity,if,expected,entity,null,http,entity,actual,entity,http,entity,enclosing,request,actual,request,get,entity,assert,equals,entity,utils,to,string,expected,entity,entity,utils,to,string,actual,entity
RestClientSingleHostTests -> @SuppressWarnings("unchecked")     public void testInternalHttpRequest() throws Exception;1539615817;Verifies the content of the {@link HttpRequest} that's internally created and passed through to the http client;@SuppressWarnings("unchecked")_    public void testInternalHttpRequest() throws Exception {_        ArgumentCaptor<HttpAsyncRequestProducer> requestArgumentCaptor = ArgumentCaptor.forClass(HttpAsyncRequestProducer.class)__        int times = 0__        for (String httpMethod : getHttpMethods()) {_            HttpUriRequest expectedRequest = performRandomRequest(httpMethod)__            verify(httpClient, times(++times)).<HttpResponse>execute(requestArgumentCaptor.capture(),_                    any(HttpAsyncResponseConsumer.class), any(HttpClientContext.class), any(FutureCallback.class))__            HttpUriRequest actualRequest = (HttpUriRequest)requestArgumentCaptor.getValue().generateRequest()__            assertEquals(expectedRequest.getURI(), actualRequest.getURI())__            assertEquals(expectedRequest.getClass(), actualRequest.getClass())__            assertArrayEquals(expectedRequest.getAllHeaders(), actualRequest.getAllHeaders())__            if (expectedRequest instanceof HttpEntityEnclosingRequest) {_                HttpEntity expectedEntity = ((HttpEntityEnclosingRequest) expectedRequest).getEntity()__                if (expectedEntity != null) {_                    HttpEntity actualEntity = ((HttpEntityEnclosingRequest) actualRequest).getEntity()__                    assertEquals(EntityUtils.toString(expectedEntity), EntityUtils.toString(actualEntity))__                }_            }_        }_    };verifies,the,content,of,the,link,http,request,that,s,internally,created,and,passed,through,to,the,http,client;suppress,warnings,unchecked,public,void,test,internal,http,request,throws,exception,argument,captor,http,async,request,producer,request,argument,captor,argument,captor,for,class,http,async,request,producer,class,int,times,0,for,string,http,method,get,http,methods,http,uri,request,expected,request,perform,random,request,http,method,verify,http,client,times,times,http,response,execute,request,argument,captor,capture,any,http,async,response,consumer,class,any,http,client,context,class,any,future,callback,class,http,uri,request,actual,request,http,uri,request,request,argument,captor,get,value,generate,request,assert,equals,expected,request,get,uri,actual,request,get,uri,assert,equals,expected,request,get,class,actual,request,get,class,assert,array,equals,expected,request,get,all,headers,actual,request,get,all,headers,if,expected,request,instanceof,http,entity,enclosing,request,http,entity,expected,entity,http,entity,enclosing,request,expected,request,get,entity,if,expected,entity,null,http,entity,actual,entity,http,entity,enclosing,request,actual,request,get,entity,assert,equals,entity,utils,to,string,expected,entity,entity,utils,to,string,actual,entity
RestClientSingleHostTests -> @SuppressWarnings("unchecked")     public void testInternalHttpRequest() throws Exception;1544448720;Verifies the content of the {@link HttpRequest} that's internally created and passed through to the http client;@SuppressWarnings("unchecked")_    public void testInternalHttpRequest() throws Exception {_        ArgumentCaptor<HttpAsyncRequestProducer> requestArgumentCaptor = ArgumentCaptor.forClass(HttpAsyncRequestProducer.class)__        int times = 0__        for (String httpMethod : getHttpMethods()) {_            HttpUriRequest expectedRequest = performRandomRequest(httpMethod)__            verify(httpClient, times(++times)).<HttpResponse>execute(requestArgumentCaptor.capture(),_                    any(HttpAsyncResponseConsumer.class), any(HttpClientContext.class), any(FutureCallback.class))__            HttpUriRequest actualRequest = (HttpUriRequest)requestArgumentCaptor.getValue().generateRequest()__            assertEquals(expectedRequest.getURI(), actualRequest.getURI())__            assertEquals(expectedRequest.getClass(), actualRequest.getClass())__            assertArrayEquals(expectedRequest.getAllHeaders(), actualRequest.getAllHeaders())__            if (expectedRequest instanceof HttpEntityEnclosingRequest) {_                HttpEntity expectedEntity = ((HttpEntityEnclosingRequest) expectedRequest).getEntity()__                if (expectedEntity != null) {_                    HttpEntity actualEntity = ((HttpEntityEnclosingRequest) actualRequest).getEntity()__                    assertEquals(EntityUtils.toString(expectedEntity), EntityUtils.toString(actualEntity))__                }_            }_        }_    };verifies,the,content,of,the,link,http,request,that,s,internally,created,and,passed,through,to,the,http,client;suppress,warnings,unchecked,public,void,test,internal,http,request,throws,exception,argument,captor,http,async,request,producer,request,argument,captor,argument,captor,for,class,http,async,request,producer,class,int,times,0,for,string,http,method,get,http,methods,http,uri,request,expected,request,perform,random,request,http,method,verify,http,client,times,times,http,response,execute,request,argument,captor,capture,any,http,async,response,consumer,class,any,http,client,context,class,any,future,callback,class,http,uri,request,actual,request,http,uri,request,request,argument,captor,get,value,generate,request,assert,equals,expected,request,get,uri,actual,request,get,uri,assert,equals,expected,request,get,class,actual,request,get,class,assert,array,equals,expected,request,get,all,headers,actual,request,get,all,headers,if,expected,request,instanceof,http,entity,enclosing,request,http,entity,expected,entity,http,entity,enclosing,request,expected,request,get,entity,if,expected,entity,null,http,entity,actual,entity,http,entity,enclosing,request,actual,request,get,entity,assert,equals,entity,utils,to,string,expected,entity,entity,utils,to,string,actual,entity
RestClientSingleHostTests -> @SuppressWarnings("unchecked")     public void testInternalHttpRequest() throws Exception;1548869519;Verifies the content of the {@link HttpRequest} that's internally created and passed through to the http client;@SuppressWarnings("unchecked")_    public void testInternalHttpRequest() throws Exception {_        ArgumentCaptor<HttpAsyncRequestProducer> requestArgumentCaptor = ArgumentCaptor.forClass(HttpAsyncRequestProducer.class)__        int times = 0__        for (String httpMethod : getHttpMethods()) {_            HttpUriRequest expectedRequest = performRandomRequest(httpMethod)__            verify(httpClient, times(++times)).<HttpResponse>execute(requestArgumentCaptor.capture(),_                    any(HttpAsyncResponseConsumer.class), any(HttpClientContext.class), any(FutureCallback.class))__            HttpUriRequest actualRequest = (HttpUriRequest)requestArgumentCaptor.getValue().generateRequest()__            assertEquals(expectedRequest.getURI(), actualRequest.getURI())__            assertEquals(expectedRequest.getClass(), actualRequest.getClass())__            assertArrayEquals(expectedRequest.getAllHeaders(), actualRequest.getAllHeaders())__            if (expectedRequest instanceof HttpEntityEnclosingRequest) {_                HttpEntity expectedEntity = ((HttpEntityEnclosingRequest) expectedRequest).getEntity()__                if (expectedEntity != null) {_                    HttpEntity actualEntity = ((HttpEntityEnclosingRequest) actualRequest).getEntity()__                    assertEquals(EntityUtils.toString(expectedEntity), EntityUtils.toString(actualEntity))__                }_            }_        }_    };verifies,the,content,of,the,link,http,request,that,s,internally,created,and,passed,through,to,the,http,client;suppress,warnings,unchecked,public,void,test,internal,http,request,throws,exception,argument,captor,http,async,request,producer,request,argument,captor,argument,captor,for,class,http,async,request,producer,class,int,times,0,for,string,http,method,get,http,methods,http,uri,request,expected,request,perform,random,request,http,method,verify,http,client,times,times,http,response,execute,request,argument,captor,capture,any,http,async,response,consumer,class,any,http,client,context,class,any,future,callback,class,http,uri,request,actual,request,http,uri,request,request,argument,captor,get,value,generate,request,assert,equals,expected,request,get,uri,actual,request,get,uri,assert,equals,expected,request,get,class,actual,request,get,class,assert,array,equals,expected,request,get,all,headers,actual,request,get,all,headers,if,expected,request,instanceof,http,entity,enclosing,request,http,entity,expected,entity,http,entity,enclosing,request,expected,request,get,entity,if,expected,entity,null,http,entity,actual,entity,http,entity,enclosing,request,actual,request,get,entity,assert,equals,entity,utils,to,string,expected,entity,entity,utils,to,string,actual,entity
RestClientSingleHostTests -> @SuppressWarnings("unchecked")     public void testInternalHttpRequest() throws Exception;1549439027;Verifies the content of the {@link HttpRequest} that's internally created and passed through to the http client;@SuppressWarnings("unchecked")_    public void testInternalHttpRequest() throws Exception {_        ArgumentCaptor<HttpAsyncRequestProducer> requestArgumentCaptor = ArgumentCaptor.forClass(HttpAsyncRequestProducer.class)__        int times = 0__        for (String httpMethod : getHttpMethods()) {_            HttpUriRequest expectedRequest = performRandomRequest(httpMethod)__            verify(httpClient, times(++times)).<HttpResponse>execute(requestArgumentCaptor.capture(),_                    any(HttpAsyncResponseConsumer.class), any(HttpClientContext.class), any(FutureCallback.class))__            HttpUriRequest actualRequest = (HttpUriRequest)requestArgumentCaptor.getValue().generateRequest()__            assertEquals(expectedRequest.getURI(), actualRequest.getURI())__            assertEquals(expectedRequest.getClass(), actualRequest.getClass())__            assertArrayEquals(expectedRequest.getAllHeaders(), actualRequest.getAllHeaders())__            if (expectedRequest instanceof HttpEntityEnclosingRequest) {_                HttpEntity expectedEntity = ((HttpEntityEnclosingRequest) expectedRequest).getEntity()__                if (expectedEntity != null) {_                    HttpEntity actualEntity = ((HttpEntityEnclosingRequest) actualRequest).getEntity()__                    assertEquals(EntityUtils.toString(expectedEntity), EntityUtils.toString(actualEntity))__                }_            }_        }_    };verifies,the,content,of,the,link,http,request,that,s,internally,created,and,passed,through,to,the,http,client;suppress,warnings,unchecked,public,void,test,internal,http,request,throws,exception,argument,captor,http,async,request,producer,request,argument,captor,argument,captor,for,class,http,async,request,producer,class,int,times,0,for,string,http,method,get,http,methods,http,uri,request,expected,request,perform,random,request,http,method,verify,http,client,times,times,http,response,execute,request,argument,captor,capture,any,http,async,response,consumer,class,any,http,client,context,class,any,future,callback,class,http,uri,request,actual,request,http,uri,request,request,argument,captor,get,value,generate,request,assert,equals,expected,request,get,uri,actual,request,get,uri,assert,equals,expected,request,get,class,actual,request,get,class,assert,array,equals,expected,request,get,all,headers,actual,request,get,all,headers,if,expected,request,instanceof,http,entity,enclosing,request,http,entity,expected,entity,http,entity,enclosing,request,expected,request,get,entity,if,expected,entity,null,http,entity,actual,entity,http,entity,enclosing,request,actual,request,get,entity,assert,equals,entity,utils,to,string,expected,entity,entity,utils,to,string,actual,entity
RestClientSingleHostTests -> public void testBody() throws IOException;1524684173;End to end test for request and response body. Exercises the mock http client ability to send back_whatever body it has received.;public void testBody() throws IOException {_        String body = "{ \"field\": \"value\" }"__        StringEntity entity = new StringEntity(body, ContentType.APPLICATION_JSON)__        for (String method : Arrays.asList("DELETE", "GET", "PATCH", "POST", "PUT")) {_            for (int okStatusCode : getOkStatusCodes()) {_                Response response = restClient.performRequest(method, "/" + okStatusCode, Collections.<String, String>emptyMap(), entity)__                assertThat(response.getStatusLine().getStatusCode(), equalTo(okStatusCode))__                assertThat(EntityUtils.toString(response.getEntity()), equalTo(body))__            }_            for (int errorStatusCode : getAllErrorStatusCodes()) {_                try {_                    restClient.performRequest(method, "/" + errorStatusCode, Collections.<String, String>emptyMap(), entity)__                    fail("request should have failed")__                } catch(ResponseException e) {_                    Response response = e.getResponse()__                    assertThat(response.getStatusLine().getStatusCode(), equalTo(errorStatusCode))__                    assertThat(EntityUtils.toString(response.getEntity()), equalTo(body))__                    assertExceptionStackContainsCallingMethod(e)__                }_            }_        }_        for (String method : Arrays.asList("HEAD", "OPTIONS", "TRACE")) {_            try {_                restClient.performRequest(method, "/" + randomStatusCode(getRandom()), Collections.<String, String>emptyMap(), entity)__                fail("request should have failed")__            } catch(UnsupportedOperationException e) {_                assertThat(e.getMessage(), equalTo(method + " with body is not supported"))__            }_        }_    };end,to,end,test,for,request,and,response,body,exercises,the,mock,http,client,ability,to,send,back,whatever,body,it,has,received;public,void,test,body,throws,ioexception,string,body,field,value,string,entity,entity,new,string,entity,body,content,type,for,string,method,arrays,as,list,delete,get,patch,post,put,for,int,ok,status,code,get,ok,status,codes,response,response,rest,client,perform,request,method,ok,status,code,collections,string,string,empty,map,entity,assert,that,response,get,status,line,get,status,code,equal,to,ok,status,code,assert,that,entity,utils,to,string,response,get,entity,equal,to,body,for,int,error,status,code,get,all,error,status,codes,try,rest,client,perform,request,method,error,status,code,collections,string,string,empty,map,entity,fail,request,should,have,failed,catch,response,exception,e,response,response,e,get,response,assert,that,response,get,status,line,get,status,code,equal,to,error,status,code,assert,that,entity,utils,to,string,response,get,entity,equal,to,body,assert,exception,stack,contains,calling,method,e,for,string,method,arrays,as,list,head,options,trace,try,rest,client,perform,request,method,random,status,code,get,random,collections,string,string,empty,map,entity,fail,request,should,have,failed,catch,unsupported,operation,exception,e,assert,that,e,get,message,equal,to,method,with,body,is,not,supported
RestClientSingleHostTests -> public void testBody() throws IOException;1525248068;End to end test for request and response body. Exercises the mock http client ability to send back_whatever body it has received.;public void testBody() throws IOException {_        String body = "{ \"field\": \"value\" }"__        StringEntity entity = new StringEntity(body, ContentType.APPLICATION_JSON)__        for (String method : Arrays.asList("DELETE", "GET", "PATCH", "POST", "PUT")) {_            for (int okStatusCode : getOkStatusCodes()) {_                Request request = new Request(method, "/" + okStatusCode)__                request.setEntity(entity)__                Response response = restClient.performRequest(request)__                assertThat(response.getStatusLine().getStatusCode(), equalTo(okStatusCode))__                assertThat(EntityUtils.toString(response.getEntity()), equalTo(body))__            }_            for (int errorStatusCode : getAllErrorStatusCodes()) {_                Request request = new Request(method, "/" + errorStatusCode)__                request.setEntity(entity)__                try {_                    restClient.performRequest(request)__                    fail("request should have failed")__                } catch(ResponseException e) {_                    Response response = e.getResponse()__                    assertThat(response.getStatusLine().getStatusCode(), equalTo(errorStatusCode))__                    assertThat(EntityUtils.toString(response.getEntity()), equalTo(body))__                    assertExceptionStackContainsCallingMethod(e)__                }_            }_        }_        for (String method : Arrays.asList("HEAD", "OPTIONS", "TRACE")) {_            Request request = new Request(method, "/" + randomStatusCode(getRandom()))__            request.setEntity(entity)__            try {_                restClient.performRequest(request)__                fail("request should have failed")__            } catch(UnsupportedOperationException e) {_                assertThat(e.getMessage(), equalTo(method + " with body is not supported"))__            }_        }_    };end,to,end,test,for,request,and,response,body,exercises,the,mock,http,client,ability,to,send,back,whatever,body,it,has,received;public,void,test,body,throws,ioexception,string,body,field,value,string,entity,entity,new,string,entity,body,content,type,for,string,method,arrays,as,list,delete,get,patch,post,put,for,int,ok,status,code,get,ok,status,codes,request,request,new,request,method,ok,status,code,request,set,entity,entity,response,response,rest,client,perform,request,request,assert,that,response,get,status,line,get,status,code,equal,to,ok,status,code,assert,that,entity,utils,to,string,response,get,entity,equal,to,body,for,int,error,status,code,get,all,error,status,codes,request,request,new,request,method,error,status,code,request,set,entity,entity,try,rest,client,perform,request,request,fail,request,should,have,failed,catch,response,exception,e,response,response,e,get,response,assert,that,response,get,status,line,get,status,code,equal,to,error,status,code,assert,that,entity,utils,to,string,response,get,entity,equal,to,body,assert,exception,stack,contains,calling,method,e,for,string,method,arrays,as,list,head,options,trace,request,request,new,request,method,random,status,code,get,random,request,set,entity,entity,try,rest,client,perform,request,request,fail,request,should,have,failed,catch,unsupported,operation,exception,e,assert,that,e,get,message,equal,to,method,with,body,is,not,supported
RestClientSingleHostTests -> public void testBody() throws IOException;1526374795;End to end test for request and response body. Exercises the mock http client ability to send back_whatever body it has received.;public void testBody() throws IOException {_        String body = "{ \"field\": \"value\" }"__        StringEntity entity = new StringEntity(body, ContentType.APPLICATION_JSON)__        for (String method : Arrays.asList("DELETE", "GET", "PATCH", "POST", "PUT")) {_            for (int okStatusCode : getOkStatusCodes()) {_                Request request = new Request(method, "/" + okStatusCode)__                request.setEntity(entity)__                Response response = restClient.performRequest(request)__                assertThat(response.getStatusLine().getStatusCode(), equalTo(okStatusCode))__                assertThat(EntityUtils.toString(response.getEntity()), equalTo(body))__            }_            for (int errorStatusCode : getAllErrorStatusCodes()) {_                Request request = new Request(method, "/" + errorStatusCode)__                request.setEntity(entity)__                try {_                    restClient.performRequest(request)__                    fail("request should have failed")__                } catch(ResponseException e) {_                    Response response = e.getResponse()__                    assertThat(response.getStatusLine().getStatusCode(), equalTo(errorStatusCode))__                    assertThat(EntityUtils.toString(response.getEntity()), equalTo(body))__                    assertExceptionStackContainsCallingMethod(e)__                }_            }_        }_        for (String method : Arrays.asList("HEAD", "OPTIONS", "TRACE")) {_            Request request = new Request(method, "/" + randomStatusCode(getRandom()))__            request.setEntity(entity)__            try {_                restClient.performRequest(request)__                fail("request should have failed")__            } catch(UnsupportedOperationException e) {_                assertThat(e.getMessage(), equalTo(method + " with body is not supported"))__            }_        }_    };end,to,end,test,for,request,and,response,body,exercises,the,mock,http,client,ability,to,send,back,whatever,body,it,has,received;public,void,test,body,throws,ioexception,string,body,field,value,string,entity,entity,new,string,entity,body,content,type,for,string,method,arrays,as,list,delete,get,patch,post,put,for,int,ok,status,code,get,ok,status,codes,request,request,new,request,method,ok,status,code,request,set,entity,entity,response,response,rest,client,perform,request,request,assert,that,response,get,status,line,get,status,code,equal,to,ok,status,code,assert,that,entity,utils,to,string,response,get,entity,equal,to,body,for,int,error,status,code,get,all,error,status,codes,request,request,new,request,method,error,status,code,request,set,entity,entity,try,rest,client,perform,request,request,fail,request,should,have,failed,catch,response,exception,e,response,response,e,get,response,assert,that,response,get,status,line,get,status,code,equal,to,error,status,code,assert,that,entity,utils,to,string,response,get,entity,equal,to,body,assert,exception,stack,contains,calling,method,e,for,string,method,arrays,as,list,head,options,trace,request,request,new,request,method,random,status,code,get,random,request,set,entity,entity,try,rest,client,perform,request,request,fail,request,should,have,failed,catch,unsupported,operation,exception,e,assert,that,e,get,message,equal,to,method,with,body,is,not,supported
RestClientSingleHostTests -> public void testBody() throws IOException;1527096592;End to end test for request and response body. Exercises the mock http client ability to send back_whatever body it has received.;public void testBody() throws IOException {_        String body = "{ \"field\": \"value\" }"__        StringEntity entity = new StringEntity(body, ContentType.APPLICATION_JSON)__        for (String method : Arrays.asList("DELETE", "GET", "PATCH", "POST", "PUT")) {_            for (int okStatusCode : getOkStatusCodes()) {_                Request request = new Request(method, "/" + okStatusCode)__                request.setEntity(entity)__                Response response = restClient.performRequest(request)__                assertThat(response.getStatusLine().getStatusCode(), equalTo(okStatusCode))__                assertThat(EntityUtils.toString(response.getEntity()), equalTo(body))__            }_            for (int errorStatusCode : getAllErrorStatusCodes()) {_                Request request = new Request(method, "/" + errorStatusCode)__                request.setEntity(entity)__                try {_                    restClient.performRequest(request)__                    fail("request should have failed")__                } catch(ResponseException e) {_                    Response response = e.getResponse()__                    assertThat(response.getStatusLine().getStatusCode(), equalTo(errorStatusCode))__                    assertThat(EntityUtils.toString(response.getEntity()), equalTo(body))__                    assertExceptionStackContainsCallingMethod(e)__                }_            }_        }_        for (String method : Arrays.asList("HEAD", "OPTIONS", "TRACE")) {_            Request request = new Request(method, "/" + randomStatusCode(getRandom()))__            request.setEntity(entity)__            try {_                restClient.performRequest(request)__                fail("request should have failed")__            } catch(UnsupportedOperationException e) {_                assertThat(e.getMessage(), equalTo(method + " with body is not supported"))__            }_        }_    };end,to,end,test,for,request,and,response,body,exercises,the,mock,http,client,ability,to,send,back,whatever,body,it,has,received;public,void,test,body,throws,ioexception,string,body,field,value,string,entity,entity,new,string,entity,body,content,type,for,string,method,arrays,as,list,delete,get,patch,post,put,for,int,ok,status,code,get,ok,status,codes,request,request,new,request,method,ok,status,code,request,set,entity,entity,response,response,rest,client,perform,request,request,assert,that,response,get,status,line,get,status,code,equal,to,ok,status,code,assert,that,entity,utils,to,string,response,get,entity,equal,to,body,for,int,error,status,code,get,all,error,status,codes,request,request,new,request,method,error,status,code,request,set,entity,entity,try,rest,client,perform,request,request,fail,request,should,have,failed,catch,response,exception,e,response,response,e,get,response,assert,that,response,get,status,line,get,status,code,equal,to,error,status,code,assert,that,entity,utils,to,string,response,get,entity,equal,to,body,assert,exception,stack,contains,calling,method,e,for,string,method,arrays,as,list,head,options,trace,request,request,new,request,method,random,status,code,get,random,request,set,entity,entity,try,rest,client,perform,request,request,fail,request,should,have,failed,catch,unsupported,operation,exception,e,assert,that,e,get,message,equal,to,method,with,body,is,not,supported
RestClientSingleHostTests -> public void testBody() throws IOException;1527840262;End to end test for request and response body. Exercises the mock http client ability to send back_whatever body it has received.;public void testBody() throws IOException {_        String body = "{ \"field\": \"value\" }"__        StringEntity entity = new StringEntity(body, ContentType.APPLICATION_JSON)__        for (String method : Arrays.asList("DELETE", "GET", "PATCH", "POST", "PUT")) {_            for (int okStatusCode : getOkStatusCodes()) {_                Request request = new Request(method, "/" + okStatusCode)__                request.setEntity(entity)__                Response response = restClient.performRequest(request)__                assertThat(response.getStatusLine().getStatusCode(), equalTo(okStatusCode))__                assertThat(EntityUtils.toString(response.getEntity()), equalTo(body))__            }_            for (int errorStatusCode : getAllErrorStatusCodes()) {_                Request request = new Request(method, "/" + errorStatusCode)__                request.setEntity(entity)__                try {_                    restClient.performRequest(request)__                    fail("request should have failed")__                } catch(ResponseException e) {_                    Response response = e.getResponse()__                    assertThat(response.getStatusLine().getStatusCode(), equalTo(errorStatusCode))__                    assertThat(EntityUtils.toString(response.getEntity()), equalTo(body))__                    assertExceptionStackContainsCallingMethod(e)__                }_            }_        }_        for (String method : Arrays.asList("HEAD", "OPTIONS", "TRACE")) {_            Request request = new Request(method, "/" + randomStatusCode(getRandom()))__            request.setEntity(entity)__            try {_                restClient.performRequest(request)__                fail("request should have failed")__            } catch(UnsupportedOperationException e) {_                assertThat(e.getMessage(), equalTo(method + " with body is not supported"))__            }_        }_    };end,to,end,test,for,request,and,response,body,exercises,the,mock,http,client,ability,to,send,back,whatever,body,it,has,received;public,void,test,body,throws,ioexception,string,body,field,value,string,entity,entity,new,string,entity,body,content,type,for,string,method,arrays,as,list,delete,get,patch,post,put,for,int,ok,status,code,get,ok,status,codes,request,request,new,request,method,ok,status,code,request,set,entity,entity,response,response,rest,client,perform,request,request,assert,that,response,get,status,line,get,status,code,equal,to,ok,status,code,assert,that,entity,utils,to,string,response,get,entity,equal,to,body,for,int,error,status,code,get,all,error,status,codes,request,request,new,request,method,error,status,code,request,set,entity,entity,try,rest,client,perform,request,request,fail,request,should,have,failed,catch,response,exception,e,response,response,e,get,response,assert,that,response,get,status,line,get,status,code,equal,to,error,status,code,assert,that,entity,utils,to,string,response,get,entity,equal,to,body,assert,exception,stack,contains,calling,method,e,for,string,method,arrays,as,list,head,options,trace,request,request,new,request,method,random,status,code,get,random,request,set,entity,entity,try,rest,client,perform,request,request,fail,request,should,have,failed,catch,unsupported,operation,exception,e,assert,that,e,get,message,equal,to,method,with,body,is,not,supported
RestClientSingleHostTests -> public void testBody() throws IOException;1528762805;End to end test for request and response body. Exercises the mock http client ability to send back_whatever body it has received.;public void testBody() throws IOException {_        String body = "{ \"field\": \"value\" }"__        StringEntity entity = new StringEntity(body, ContentType.APPLICATION_JSON)__        for (String method : Arrays.asList("DELETE", "GET", "PATCH", "POST", "PUT")) {_            for (int okStatusCode : getOkStatusCodes()) {_                Request request = new Request(method, "/" + okStatusCode)__                request.setEntity(entity)__                Response response = restClient.performRequest(request)__                assertThat(response.getStatusLine().getStatusCode(), equalTo(okStatusCode))__                assertThat(EntityUtils.toString(response.getEntity()), equalTo(body))__            }_            for (int errorStatusCode : getAllErrorStatusCodes()) {_                Request request = new Request(method, "/" + errorStatusCode)__                request.setEntity(entity)__                try {_                    restClient.performRequest(request)__                    fail("request should have failed")__                } catch(ResponseException e) {_                    Response response = e.getResponse()__                    assertThat(response.getStatusLine().getStatusCode(), equalTo(errorStatusCode))__                    assertThat(EntityUtils.toString(response.getEntity()), equalTo(body))__                    assertExceptionStackContainsCallingMethod(e)__                }_            }_        }_        for (String method : Arrays.asList("HEAD", "OPTIONS", "TRACE")) {_            Request request = new Request(method, "/" + randomStatusCode(getRandom()))__            request.setEntity(entity)__            try {_                restClient.performRequest(request)__                fail("request should have failed")__            } catch(UnsupportedOperationException e) {_                assertThat(e.getMessage(), equalTo(method + " with body is not supported"))__            }_        }_    };end,to,end,test,for,request,and,response,body,exercises,the,mock,http,client,ability,to,send,back,whatever,body,it,has,received;public,void,test,body,throws,ioexception,string,body,field,value,string,entity,entity,new,string,entity,body,content,type,for,string,method,arrays,as,list,delete,get,patch,post,put,for,int,ok,status,code,get,ok,status,codes,request,request,new,request,method,ok,status,code,request,set,entity,entity,response,response,rest,client,perform,request,request,assert,that,response,get,status,line,get,status,code,equal,to,ok,status,code,assert,that,entity,utils,to,string,response,get,entity,equal,to,body,for,int,error,status,code,get,all,error,status,codes,request,request,new,request,method,error,status,code,request,set,entity,entity,try,rest,client,perform,request,request,fail,request,should,have,failed,catch,response,exception,e,response,response,e,get,response,assert,that,response,get,status,line,get,status,code,equal,to,error,status,code,assert,that,entity,utils,to,string,response,get,entity,equal,to,body,assert,exception,stack,contains,calling,method,e,for,string,method,arrays,as,list,head,options,trace,request,request,new,request,method,random,status,code,get,random,request,set,entity,entity,try,rest,client,perform,request,request,fail,request,should,have,failed,catch,unsupported,operation,exception,e,assert,that,e,get,message,equal,to,method,with,body,is,not,supported
RestClientSingleHostTests -> public void testBody() throws IOException;1529687475;End to end test for request and response body. Exercises the mock http client ability to send back_whatever body it has received.;public void testBody() throws IOException {_        String body = "{ \"field\": \"value\" }"__        StringEntity entity = new StringEntity(body, ContentType.APPLICATION_JSON)__        for (String method : Arrays.asList("DELETE", "GET", "PATCH", "POST", "PUT")) {_            for (int okStatusCode : getOkStatusCodes()) {_                Request request = new Request(method, "/" + okStatusCode)__                request.setEntity(entity)__                Response response = restClient.performRequest(request)__                assertThat(response.getStatusLine().getStatusCode(), equalTo(okStatusCode))__                assertThat(EntityUtils.toString(response.getEntity()), equalTo(body))__            }_            for (int errorStatusCode : getAllErrorStatusCodes()) {_                Request request = new Request(method, "/" + errorStatusCode)__                request.setEntity(entity)__                try {_                    restClient.performRequest(request)__                    fail("request should have failed")__                } catch(ResponseException e) {_                    Response response = e.getResponse()__                    assertThat(response.getStatusLine().getStatusCode(), equalTo(errorStatusCode))__                    assertThat(EntityUtils.toString(response.getEntity()), equalTo(body))__                    assertExceptionStackContainsCallingMethod(e)__                }_            }_        }_        for (String method : Arrays.asList("HEAD", "OPTIONS", "TRACE")) {_            Request request = new Request(method, "/" + randomStatusCode(getRandom()))__            request.setEntity(entity)__            try {_                restClient.performRequest(request)__                fail("request should have failed")__            } catch(UnsupportedOperationException e) {_                assertThat(e.getMessage(), equalTo(method + " with body is not supported"))__            }_        }_    };end,to,end,test,for,request,and,response,body,exercises,the,mock,http,client,ability,to,send,back,whatever,body,it,has,received;public,void,test,body,throws,ioexception,string,body,field,value,string,entity,entity,new,string,entity,body,content,type,for,string,method,arrays,as,list,delete,get,patch,post,put,for,int,ok,status,code,get,ok,status,codes,request,request,new,request,method,ok,status,code,request,set,entity,entity,response,response,rest,client,perform,request,request,assert,that,response,get,status,line,get,status,code,equal,to,ok,status,code,assert,that,entity,utils,to,string,response,get,entity,equal,to,body,for,int,error,status,code,get,all,error,status,codes,request,request,new,request,method,error,status,code,request,set,entity,entity,try,rest,client,perform,request,request,fail,request,should,have,failed,catch,response,exception,e,response,response,e,get,response,assert,that,response,get,status,line,get,status,code,equal,to,error,status,code,assert,that,entity,utils,to,string,response,get,entity,equal,to,body,assert,exception,stack,contains,calling,method,e,for,string,method,arrays,as,list,head,options,trace,request,request,new,request,method,random,status,code,get,random,request,set,entity,entity,try,rest,client,perform,request,request,fail,request,should,have,failed,catch,unsupported,operation,exception,e,assert,that,e,get,message,equal,to,method,with,body,is,not,supported
RestClientSingleHostTests -> public void testBody() throws IOException;1531179852;End to end test for request and response body. Exercises the mock http client ability to send back_whatever body it has received.;public void testBody() throws IOException {_        String body = "{ \"field\": \"value\" }"__        StringEntity entity = new StringEntity(body, ContentType.APPLICATION_JSON)__        for (String method : Arrays.asList("DELETE", "GET", "PATCH", "POST", "PUT")) {_            for (int okStatusCode : getOkStatusCodes()) {_                Request request = new Request(method, "/" + okStatusCode)__                request.setEntity(entity)__                Response response = restClient.performRequest(request)__                assertThat(response.getStatusLine().getStatusCode(), equalTo(okStatusCode))__                assertThat(EntityUtils.toString(response.getEntity()), equalTo(body))__            }_            for (int errorStatusCode : getAllErrorStatusCodes()) {_                Request request = new Request(method, "/" + errorStatusCode)__                request.setEntity(entity)__                try {_                    restClient.performRequest(request)__                    fail("request should have failed")__                } catch(ResponseException e) {_                    Response response = e.getResponse()__                    assertThat(response.getStatusLine().getStatusCode(), equalTo(errorStatusCode))__                    assertThat(EntityUtils.toString(response.getEntity()), equalTo(body))__                    assertExceptionStackContainsCallingMethod(e)__                }_            }_        }_        for (String method : Arrays.asList("HEAD", "OPTIONS", "TRACE")) {_            Request request = new Request(method, "/" + randomStatusCode(getRandom()))__            request.setEntity(entity)__            try {_                restClient.performRequest(request)__                fail("request should have failed")__            } catch(UnsupportedOperationException e) {_                assertThat(e.getMessage(), equalTo(method + " with body is not supported"))__            }_        }_    };end,to,end,test,for,request,and,response,body,exercises,the,mock,http,client,ability,to,send,back,whatever,body,it,has,received;public,void,test,body,throws,ioexception,string,body,field,value,string,entity,entity,new,string,entity,body,content,type,for,string,method,arrays,as,list,delete,get,patch,post,put,for,int,ok,status,code,get,ok,status,codes,request,request,new,request,method,ok,status,code,request,set,entity,entity,response,response,rest,client,perform,request,request,assert,that,response,get,status,line,get,status,code,equal,to,ok,status,code,assert,that,entity,utils,to,string,response,get,entity,equal,to,body,for,int,error,status,code,get,all,error,status,codes,request,request,new,request,method,error,status,code,request,set,entity,entity,try,rest,client,perform,request,request,fail,request,should,have,failed,catch,response,exception,e,response,response,e,get,response,assert,that,response,get,status,line,get,status,code,equal,to,error,status,code,assert,that,entity,utils,to,string,response,get,entity,equal,to,body,assert,exception,stack,contains,calling,method,e,for,string,method,arrays,as,list,head,options,trace,request,request,new,request,method,random,status,code,get,random,request,set,entity,entity,try,rest,client,perform,request,request,fail,request,should,have,failed,catch,unsupported,operation,exception,e,assert,that,e,get,message,equal,to,method,with,body,is,not,supported
RestClientSingleHostTests -> public void testBody() throws IOException;1535965276;End to end test for request and response body. Exercises the mock http client ability to send back_whatever body it has received.;public void testBody() throws IOException {_        String body = "{ \"field\": \"value\" }"__        StringEntity entity = new StringEntity(body, ContentType.APPLICATION_JSON)__        for (String method : Arrays.asList("DELETE", "GET", "PATCH", "POST", "PUT")) {_            for (int okStatusCode : getOkStatusCodes()) {_                Request request = new Request(method, "/" + okStatusCode)__                request.setEntity(entity)__                Response response = restClient.performRequest(request)__                assertThat(response.getStatusLine().getStatusCode(), equalTo(okStatusCode))__                assertThat(EntityUtils.toString(response.getEntity()), equalTo(body))__            }_            for (int errorStatusCode : getAllErrorStatusCodes()) {_                Request request = new Request(method, "/" + errorStatusCode)__                request.setEntity(entity)__                try {_                    restClient.performRequest(request)__                    fail("request should have failed")__                } catch(ResponseException e) {_                    Response response = e.getResponse()__                    assertThat(response.getStatusLine().getStatusCode(), equalTo(errorStatusCode))__                    assertThat(EntityUtils.toString(response.getEntity()), equalTo(body))__                    assertExceptionStackContainsCallingMethod(e)__                }_            }_        }_        for (String method : Arrays.asList("HEAD", "OPTIONS", "TRACE")) {_            Request request = new Request(method, "/" + randomStatusCode(getRandom()))__            request.setEntity(entity)__            try {_                restClient.performRequest(request)__                fail("request should have failed")__            } catch(UnsupportedOperationException e) {_                assertThat(e.getMessage(), equalTo(method + " with body is not supported"))__            }_        }_    };end,to,end,test,for,request,and,response,body,exercises,the,mock,http,client,ability,to,send,back,whatever,body,it,has,received;public,void,test,body,throws,ioexception,string,body,field,value,string,entity,entity,new,string,entity,body,content,type,for,string,method,arrays,as,list,delete,get,patch,post,put,for,int,ok,status,code,get,ok,status,codes,request,request,new,request,method,ok,status,code,request,set,entity,entity,response,response,rest,client,perform,request,request,assert,that,response,get,status,line,get,status,code,equal,to,ok,status,code,assert,that,entity,utils,to,string,response,get,entity,equal,to,body,for,int,error,status,code,get,all,error,status,codes,request,request,new,request,method,error,status,code,request,set,entity,entity,try,rest,client,perform,request,request,fail,request,should,have,failed,catch,response,exception,e,response,response,e,get,response,assert,that,response,get,status,line,get,status,code,equal,to,error,status,code,assert,that,entity,utils,to,string,response,get,entity,equal,to,body,assert,exception,stack,contains,calling,method,e,for,string,method,arrays,as,list,head,options,trace,request,request,new,request,method,random,status,code,get,random,request,set,entity,entity,try,rest,client,perform,request,request,fail,request,should,have,failed,catch,unsupported,operation,exception,e,assert,that,e,get,message,equal,to,method,with,body,is,not,supported
RestClientSingleHostTests -> public void testBody() throws IOException;1538170812;End to end test for request and response body. Exercises the mock http client ability to send back_whatever body it has received.;public void testBody() throws IOException {_        String body = "{ \"field\": \"value\" }"__        StringEntity entity = new StringEntity(body, ContentType.APPLICATION_JSON)__        for (String method : Arrays.asList("DELETE", "GET", "PATCH", "POST", "PUT")) {_            for (int okStatusCode : getOkStatusCodes()) {_                Request request = new Request(method, "/" + okStatusCode)__                request.setEntity(entity)__                Response response = restClient.performRequest(request)__                assertThat(response.getStatusLine().getStatusCode(), equalTo(okStatusCode))__                assertThat(EntityUtils.toString(response.getEntity()), equalTo(body))__            }_            for (int errorStatusCode : getAllErrorStatusCodes()) {_                Request request = new Request(method, "/" + errorStatusCode)__                request.setEntity(entity)__                try {_                    restClient.performRequest(request)__                    fail("request should have failed")__                } catch(ResponseException e) {_                    Response response = e.getResponse()__                    assertThat(response.getStatusLine().getStatusCode(), equalTo(errorStatusCode))__                    assertThat(EntityUtils.toString(response.getEntity()), equalTo(body))__                    assertExceptionStackContainsCallingMethod(e)__                }_            }_        }_        for (String method : Arrays.asList("HEAD", "OPTIONS", "TRACE")) {_            Request request = new Request(method, "/" + randomStatusCode(getRandom()))__            request.setEntity(entity)__            try {_                restClient.performRequest(request)__                fail("request should have failed")__            } catch(UnsupportedOperationException e) {_                assertThat(e.getMessage(), equalTo(method + " with body is not supported"))__            }_        }_    };end,to,end,test,for,request,and,response,body,exercises,the,mock,http,client,ability,to,send,back,whatever,body,it,has,received;public,void,test,body,throws,ioexception,string,body,field,value,string,entity,entity,new,string,entity,body,content,type,for,string,method,arrays,as,list,delete,get,patch,post,put,for,int,ok,status,code,get,ok,status,codes,request,request,new,request,method,ok,status,code,request,set,entity,entity,response,response,rest,client,perform,request,request,assert,that,response,get,status,line,get,status,code,equal,to,ok,status,code,assert,that,entity,utils,to,string,response,get,entity,equal,to,body,for,int,error,status,code,get,all,error,status,codes,request,request,new,request,method,error,status,code,request,set,entity,entity,try,rest,client,perform,request,request,fail,request,should,have,failed,catch,response,exception,e,response,response,e,get,response,assert,that,response,get,status,line,get,status,code,equal,to,error,status,code,assert,that,entity,utils,to,string,response,get,entity,equal,to,body,assert,exception,stack,contains,calling,method,e,for,string,method,arrays,as,list,head,options,trace,request,request,new,request,method,random,status,code,get,random,request,set,entity,entity,try,rest,client,perform,request,request,fail,request,should,have,failed,catch,unsupported,operation,exception,e,assert,that,e,get,message,equal,to,method,with,body,is,not,supported
RestClientSingleHostTests -> public void testBody() throws IOException;1539615817;End to end test for request and response body. Exercises the mock http client ability to send back_whatever body it has received.;public void testBody() throws IOException {_        String body = "{ \"field\": \"value\" }"__        StringEntity entity = new StringEntity(body, ContentType.APPLICATION_JSON)__        for (String method : Arrays.asList("DELETE", "GET", "PATCH", "POST", "PUT")) {_            for (int okStatusCode : getOkStatusCodes()) {_                Request request = new Request(method, "/" + okStatusCode)__                request.setEntity(entity)__                Response response = restClient.performRequest(request)__                assertThat(response.getStatusLine().getStatusCode(), equalTo(okStatusCode))__                assertThat(EntityUtils.toString(response.getEntity()), equalTo(body))__            }_            for (int errorStatusCode : getAllErrorStatusCodes()) {_                Request request = new Request(method, "/" + errorStatusCode)__                request.setEntity(entity)__                try {_                    restClient.performRequest(request)__                    fail("request should have failed")__                } catch(ResponseException e) {_                    Response response = e.getResponse()__                    assertThat(response.getStatusLine().getStatusCode(), equalTo(errorStatusCode))__                    assertThat(EntityUtils.toString(response.getEntity()), equalTo(body))__                    assertExceptionStackContainsCallingMethod(e)__                }_            }_        }_        for (String method : Arrays.asList("HEAD", "OPTIONS", "TRACE")) {_            Request request = new Request(method, "/" + randomStatusCode(getRandom()))__            request.setEntity(entity)__            try {_                restClient.performRequest(request)__                fail("request should have failed")__            } catch(UnsupportedOperationException e) {_                assertThat(e.getMessage(), equalTo(method + " with body is not supported"))__            }_        }_    };end,to,end,test,for,request,and,response,body,exercises,the,mock,http,client,ability,to,send,back,whatever,body,it,has,received;public,void,test,body,throws,ioexception,string,body,field,value,string,entity,entity,new,string,entity,body,content,type,for,string,method,arrays,as,list,delete,get,patch,post,put,for,int,ok,status,code,get,ok,status,codes,request,request,new,request,method,ok,status,code,request,set,entity,entity,response,response,rest,client,perform,request,request,assert,that,response,get,status,line,get,status,code,equal,to,ok,status,code,assert,that,entity,utils,to,string,response,get,entity,equal,to,body,for,int,error,status,code,get,all,error,status,codes,request,request,new,request,method,error,status,code,request,set,entity,entity,try,rest,client,perform,request,request,fail,request,should,have,failed,catch,response,exception,e,response,response,e,get,response,assert,that,response,get,status,line,get,status,code,equal,to,error,status,code,assert,that,entity,utils,to,string,response,get,entity,equal,to,body,assert,exception,stack,contains,calling,method,e,for,string,method,arrays,as,list,head,options,trace,request,request,new,request,method,random,status,code,get,random,request,set,entity,entity,try,rest,client,perform,request,request,fail,request,should,have,failed,catch,unsupported,operation,exception,e,assert,that,e,get,message,equal,to,method,with,body,is,not,supported
RestClientSingleHostTests -> public void testBody() throws IOException;1544448720;End to end test for request and response body. Exercises the mock http client ability to send back_whatever body it has received.;public void testBody() throws IOException {_        String body = "{ \"field\": \"value\" }"__        StringEntity entity = new StringEntity(body, ContentType.APPLICATION_JSON)__        for (String method : Arrays.asList("DELETE", "GET", "PATCH", "POST", "PUT")) {_            for (int okStatusCode : getOkStatusCodes()) {_                Request request = new Request(method, "/" + okStatusCode)__                request.setEntity(entity)__                Response response = restClient.performRequest(request)__                assertThat(response.getStatusLine().getStatusCode(), equalTo(okStatusCode))__                assertThat(EntityUtils.toString(response.getEntity()), equalTo(body))__            }_            for (int errorStatusCode : getAllErrorStatusCodes()) {_                Request request = new Request(method, "/" + errorStatusCode)__                request.setEntity(entity)__                try {_                    restClient.performRequest(request)__                    fail("request should have failed")__                } catch(ResponseException e) {_                    Response response = e.getResponse()__                    assertThat(response.getStatusLine().getStatusCode(), equalTo(errorStatusCode))__                    assertThat(EntityUtils.toString(response.getEntity()), equalTo(body))__                    assertExceptionStackContainsCallingMethod(e)__                }_            }_        }_        for (String method : Arrays.asList("HEAD", "OPTIONS", "TRACE")) {_            Request request = new Request(method, "/" + randomStatusCode(getRandom()))__            request.setEntity(entity)__            try {_                restClient.performRequest(request)__                fail("request should have failed")__            } catch(UnsupportedOperationException e) {_                assertThat(e.getMessage(), equalTo(method + " with body is not supported"))__            }_        }_    };end,to,end,test,for,request,and,response,body,exercises,the,mock,http,client,ability,to,send,back,whatever,body,it,has,received;public,void,test,body,throws,ioexception,string,body,field,value,string,entity,entity,new,string,entity,body,content,type,for,string,method,arrays,as,list,delete,get,patch,post,put,for,int,ok,status,code,get,ok,status,codes,request,request,new,request,method,ok,status,code,request,set,entity,entity,response,response,rest,client,perform,request,request,assert,that,response,get,status,line,get,status,code,equal,to,ok,status,code,assert,that,entity,utils,to,string,response,get,entity,equal,to,body,for,int,error,status,code,get,all,error,status,codes,request,request,new,request,method,error,status,code,request,set,entity,entity,try,rest,client,perform,request,request,fail,request,should,have,failed,catch,response,exception,e,response,response,e,get,response,assert,that,response,get,status,line,get,status,code,equal,to,error,status,code,assert,that,entity,utils,to,string,response,get,entity,equal,to,body,assert,exception,stack,contains,calling,method,e,for,string,method,arrays,as,list,head,options,trace,request,request,new,request,method,random,status,code,get,random,request,set,entity,entity,try,rest,client,perform,request,request,fail,request,should,have,failed,catch,unsupported,operation,exception,e,assert,that,e,get,message,equal,to,method,with,body,is,not,supported
RestClientSingleHostTests -> public void testBody() throws IOException;1548869519;End to end test for request and response body. Exercises the mock http client ability to send back_whatever body it has received.;public void testBody() throws IOException {_        String body = "{ \"field\": \"value\" }"__        StringEntity entity = new StringEntity(body, ContentType.APPLICATION_JSON)__        for (String method : Arrays.asList("DELETE", "GET", "PATCH", "POST", "PUT")) {_            for (int okStatusCode : getOkStatusCodes()) {_                Request request = new Request(method, "/" + okStatusCode)__                request.setEntity(entity)__                Response response = restClient.performRequest(request)__                assertThat(response.getStatusLine().getStatusCode(), equalTo(okStatusCode))__                assertThat(EntityUtils.toString(response.getEntity()), equalTo(body))__            }_            for (int errorStatusCode : getAllErrorStatusCodes()) {_                Request request = new Request(method, "/" + errorStatusCode)__                request.setEntity(entity)__                try {_                    restClient.performRequest(request)__                    fail("request should have failed")__                } catch(ResponseException e) {_                    Response response = e.getResponse()__                    assertThat(response.getStatusLine().getStatusCode(), equalTo(errorStatusCode))__                    assertThat(EntityUtils.toString(response.getEntity()), equalTo(body))__                    assertExceptionStackContainsCallingMethod(e)__                }_            }_        }_        for (String method : Arrays.asList("HEAD", "OPTIONS", "TRACE")) {_            Request request = new Request(method, "/" + randomStatusCode(getRandom()))__            request.setEntity(entity)__            try {_                restClient.performRequest(request)__                fail("request should have failed")__            } catch(UnsupportedOperationException e) {_                assertThat(e.getMessage(), equalTo(method + " with body is not supported"))__            }_        }_    };end,to,end,test,for,request,and,response,body,exercises,the,mock,http,client,ability,to,send,back,whatever,body,it,has,received;public,void,test,body,throws,ioexception,string,body,field,value,string,entity,entity,new,string,entity,body,content,type,for,string,method,arrays,as,list,delete,get,patch,post,put,for,int,ok,status,code,get,ok,status,codes,request,request,new,request,method,ok,status,code,request,set,entity,entity,response,response,rest,client,perform,request,request,assert,that,response,get,status,line,get,status,code,equal,to,ok,status,code,assert,that,entity,utils,to,string,response,get,entity,equal,to,body,for,int,error,status,code,get,all,error,status,codes,request,request,new,request,method,error,status,code,request,set,entity,entity,try,rest,client,perform,request,request,fail,request,should,have,failed,catch,response,exception,e,response,response,e,get,response,assert,that,response,get,status,line,get,status,code,equal,to,error,status,code,assert,that,entity,utils,to,string,response,get,entity,equal,to,body,assert,exception,stack,contains,calling,method,e,for,string,method,arrays,as,list,head,options,trace,request,request,new,request,method,random,status,code,get,random,request,set,entity,entity,try,rest,client,perform,request,request,fail,request,should,have,failed,catch,unsupported,operation,exception,e,assert,that,e,get,message,equal,to,method,with,body,is,not,supported
RestClientSingleHostTests -> @Deprecated     public void tesPerformRequestOldStyleNullHeaders() throws IOException;1525248068;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testSetHeaders()}.;@Deprecated_    public void tesPerformRequestOldStyleNullHeaders() throws IOException {_        String method = randomHttpMethod(getRandom())__        int statusCode = randomStatusCode(getRandom())__        try {_            performRequest(method, "/" + statusCode, (Header[])null)__            fail("request should have failed")__        } catch(NullPointerException e) {_            assertEquals("request headers must not be null", e.getMessage())__        }_        try {_            performRequest(method, "/" + statusCode, (Header)null)__            fail("request should have failed")__        } catch(NullPointerException e) {_            assertEquals("request header must not be null", e.getMessage())__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,set,headers;deprecated,public,void,tes,perform,request,old,style,null,headers,throws,ioexception,string,method,random,http,method,get,random,int,status,code,random,status,code,get,random,try,perform,request,method,status,code,header,null,fail,request,should,have,failed,catch,null,pointer,exception,e,assert,equals,request,headers,must,not,be,null,e,get,message,try,perform,request,method,status,code,header,null,fail,request,should,have,failed,catch,null,pointer,exception,e,assert,equals,request,header,must,not,be,null,e,get,message
RestClientSingleHostTests -> @Deprecated     public void tesPerformRequestOldStyleNullHeaders() throws IOException;1526374795;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testSetHeaders()}.;@Deprecated_    public void tesPerformRequestOldStyleNullHeaders() throws IOException {_        String method = randomHttpMethod(getRandom())__        int statusCode = randomStatusCode(getRandom())__        try {_            performRequest(method, "/" + statusCode, (Header[])null)__            fail("request should have failed")__        } catch(NullPointerException e) {_            assertEquals("request headers must not be null", e.getMessage())__        }_        try {_            performRequest(method, "/" + statusCode, (Header)null)__            fail("request should have failed")__        } catch(NullPointerException e) {_            assertEquals("request header must not be null", e.getMessage())__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,set,headers;deprecated,public,void,tes,perform,request,old,style,null,headers,throws,ioexception,string,method,random,http,method,get,random,int,status,code,random,status,code,get,random,try,perform,request,method,status,code,header,null,fail,request,should,have,failed,catch,null,pointer,exception,e,assert,equals,request,headers,must,not,be,null,e,get,message,try,perform,request,method,status,code,header,null,fail,request,should,have,failed,catch,null,pointer,exception,e,assert,equals,request,header,must,not,be,null,e,get,message
RestClientSingleHostTests -> @Deprecated     public void tesPerformRequestOldStyleNullHeaders() throws IOException;1527096592;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testAddHeaders()}.;@Deprecated_    public void tesPerformRequestOldStyleNullHeaders() throws IOException {_        String method = randomHttpMethod(getRandom())__        int statusCode = randomStatusCode(getRandom())__        try {_            performRequest(method, "/" + statusCode, (Header[])null)__            fail("request should have failed")__        } catch(NullPointerException e) {_            assertEquals("request headers must not be null", e.getMessage())__        }_        try {_            performRequest(method, "/" + statusCode, (Header)null)__            fail("request should have failed")__        } catch(NullPointerException e) {_            assertEquals("request header must not be null", e.getMessage())__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,add,headers;deprecated,public,void,tes,perform,request,old,style,null,headers,throws,ioexception,string,method,random,http,method,get,random,int,status,code,random,status,code,get,random,try,perform,request,method,status,code,header,null,fail,request,should,have,failed,catch,null,pointer,exception,e,assert,equals,request,headers,must,not,be,null,e,get,message,try,perform,request,method,status,code,header,null,fail,request,should,have,failed,catch,null,pointer,exception,e,assert,equals,request,header,must,not,be,null,e,get,message
RestClientSingleHostTests -> @Deprecated     public void tesPerformRequestOldStyleNullHeaders() throws IOException;1527840262;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testAddHeaders()}.;@Deprecated_    public void tesPerformRequestOldStyleNullHeaders() throws IOException {_        String method = randomHttpMethod(getRandom())__        int statusCode = randomStatusCode(getRandom())__        try {_            performRequest(method, "/" + statusCode, (Header[])null)__            fail("request should have failed")__        } catch(NullPointerException e) {_            assertEquals("request headers must not be null", e.getMessage())__        }_        try {_            performRequest(method, "/" + statusCode, (Header)null)__            fail("request should have failed")__        } catch(NullPointerException e) {_            assertEquals("request header must not be null", e.getMessage())__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,add,headers;deprecated,public,void,tes,perform,request,old,style,null,headers,throws,ioexception,string,method,random,http,method,get,random,int,status,code,random,status,code,get,random,try,perform,request,method,status,code,header,null,fail,request,should,have,failed,catch,null,pointer,exception,e,assert,equals,request,headers,must,not,be,null,e,get,message,try,perform,request,method,status,code,header,null,fail,request,should,have,failed,catch,null,pointer,exception,e,assert,equals,request,header,must,not,be,null,e,get,message
RestClientSingleHostTests -> @Deprecated     public void tesPerformRequestOldStyleNullHeaders() throws IOException;1528762805;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testAddHeaders()}.;@Deprecated_    public void tesPerformRequestOldStyleNullHeaders() throws IOException {_        String method = randomHttpMethod(getRandom())__        int statusCode = randomStatusCode(getRandom())__        try {_            performRequest(method, "/" + statusCode, (Header[])null)__            fail("request should have failed")__        } catch(NullPointerException e) {_            assertEquals("request headers must not be null", e.getMessage())__        }_        try {_            performRequest(method, "/" + statusCode, (Header)null)__            fail("request should have failed")__        } catch(NullPointerException e) {_            assertEquals("request header must not be null", e.getMessage())__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,add,headers;deprecated,public,void,tes,perform,request,old,style,null,headers,throws,ioexception,string,method,random,http,method,get,random,int,status,code,random,status,code,get,random,try,perform,request,method,status,code,header,null,fail,request,should,have,failed,catch,null,pointer,exception,e,assert,equals,request,headers,must,not,be,null,e,get,message,try,perform,request,method,status,code,header,null,fail,request,should,have,failed,catch,null,pointer,exception,e,assert,equals,request,header,must,not,be,null,e,get,message
RestClientSingleHostTests -> @Deprecated     public void tesPerformRequestOldStyleNullHeaders() throws IOException;1529687475;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testAddHeaders()}.;@Deprecated_    public void tesPerformRequestOldStyleNullHeaders() throws IOException {_        String method = randomHttpMethod(getRandom())__        int statusCode = randomStatusCode(getRandom())__        try {_            performRequest(method, "/" + statusCode, (Header[])null)__            fail("request should have failed")__        } catch(NullPointerException e) {_            assertEquals("request headers must not be null", e.getMessage())__        }_        try {_            performRequest(method, "/" + statusCode, (Header)null)__            fail("request should have failed")__        } catch(NullPointerException e) {_            assertEquals("request header must not be null", e.getMessage())__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,add,headers;deprecated,public,void,tes,perform,request,old,style,null,headers,throws,ioexception,string,method,random,http,method,get,random,int,status,code,random,status,code,get,random,try,perform,request,method,status,code,header,null,fail,request,should,have,failed,catch,null,pointer,exception,e,assert,equals,request,headers,must,not,be,null,e,get,message,try,perform,request,method,status,code,header,null,fail,request,should,have,failed,catch,null,pointer,exception,e,assert,equals,request,header,must,not,be,null,e,get,message
RestClientSingleHostTests -> @Deprecated     public void tesPerformRequestOldStyleNullHeaders() throws IOException;1531179852;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests}.;@Deprecated_    public void tesPerformRequestOldStyleNullHeaders() throws IOException {_        String method = randomHttpMethod(getRandom())__        int statusCode = randomStatusCode(getRandom())__        try {_            performRequest(method, "/" + statusCode, (Header[])null)__            fail("request should have failed")__        } catch(NullPointerException e) {_            assertEquals("request headers must not be null", e.getMessage())__        }_        try {_            performRequest(method, "/" + statusCode, (Header)null)__            fail("request should have failed")__        } catch(NullPointerException e) {_            assertEquals("request header must not be null", e.getMessage())__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests;deprecated,public,void,tes,perform,request,old,style,null,headers,throws,ioexception,string,method,random,http,method,get,random,int,status,code,random,status,code,get,random,try,perform,request,method,status,code,header,null,fail,request,should,have,failed,catch,null,pointer,exception,e,assert,equals,request,headers,must,not,be,null,e,get,message,try,perform,request,method,status,code,header,null,fail,request,should,have,failed,catch,null,pointer,exception,e,assert,equals,request,header,must,not,be,null,e,get,message
RestClientSingleHostTests -> public void testHeaders() throws IOException;1524684173;End to end test for request and response headers. Exercises the mock http client ability to send back_whatever headers it has received.;public void testHeaders() throws IOException {_        for (String method : getHttpMethods()) {_            final Header[] requestHeaders = RestClientTestUtil.randomHeaders(getRandom(), "Header")__            final int statusCode = randomStatusCode(getRandom())__            Response esResponse__            try {_                esResponse = restClient.performRequest(method, "/" + statusCode, requestHeaders)__            } catch(ResponseException e) {_                esResponse = e.getResponse()__            }_            assertThat(esResponse.getStatusLine().getStatusCode(), equalTo(statusCode))__            assertHeaders(defaultHeaders, requestHeaders, esResponse.getHeaders(), Collections.<String>emptySet())__        }_    };end,to,end,test,for,request,and,response,headers,exercises,the,mock,http,client,ability,to,send,back,whatever,headers,it,has,received;public,void,test,headers,throws,ioexception,for,string,method,get,http,methods,final,header,request,headers,rest,client,test,util,random,headers,get,random,header,final,int,status,code,random,status,code,get,random,response,es,response,try,es,response,rest,client,perform,request,method,status,code,request,headers,catch,response,exception,e,es,response,e,get,response,assert,that,es,response,get,status,line,get,status,code,equal,to,status,code,assert,headers,default,headers,request,headers,es,response,get,headers,collections,string,empty,set
RestClientSingleHostTests -> public void testHeaders() throws IOException;1525248068;End to end test for request and response headers. Exercises the mock http client ability to send back_whatever headers it has received.;public void testHeaders() throws IOException {_        for (String method : getHttpMethods()) {_            final Header[] requestHeaders = RestClientTestUtil.randomHeaders(getRandom(), "Header")__            final int statusCode = randomStatusCode(getRandom())__            Request request = new Request(method, "/" + statusCode)__            request.setHeaders(requestHeaders)__            Response esResponse__            try {_                esResponse = restClient.performRequest(request)__            } catch(ResponseException e) {_                esResponse = e.getResponse()__            }_            assertThat(esResponse.getStatusLine().getStatusCode(), equalTo(statusCode))__            assertHeaders(defaultHeaders, requestHeaders, esResponse.getHeaders(), Collections.<String>emptySet())__        }_    };end,to,end,test,for,request,and,response,headers,exercises,the,mock,http,client,ability,to,send,back,whatever,headers,it,has,received;public,void,test,headers,throws,ioexception,for,string,method,get,http,methods,final,header,request,headers,rest,client,test,util,random,headers,get,random,header,final,int,status,code,random,status,code,get,random,request,request,new,request,method,status,code,request,set,headers,request,headers,response,es,response,try,es,response,rest,client,perform,request,request,catch,response,exception,e,es,response,e,get,response,assert,that,es,response,get,status,line,get,status,code,equal,to,status,code,assert,headers,default,headers,request,headers,es,response,get,headers,collections,string,empty,set
RestClientSingleHostTests -> public void testHeaders() throws IOException;1526374795;End to end test for request and response headers. Exercises the mock http client ability to send back_whatever headers it has received.;public void testHeaders() throws IOException {_        for (String method : getHttpMethods()) {_            final Header[] requestHeaders = RestClientTestUtil.randomHeaders(getRandom(), "Header")__            final int statusCode = randomStatusCode(getRandom())__            Request request = new Request(method, "/" + statusCode)__            request.setHeaders(requestHeaders)__            Response esResponse__            try {_                esResponse = restClient.performRequest(request)__            } catch(ResponseException e) {_                esResponse = e.getResponse()__            }_            assertThat(esResponse.getStatusLine().getStatusCode(), equalTo(statusCode))__            assertHeaders(defaultHeaders, requestHeaders, esResponse.getHeaders(), Collections.<String>emptySet())__        }_    };end,to,end,test,for,request,and,response,headers,exercises,the,mock,http,client,ability,to,send,back,whatever,headers,it,has,received;public,void,test,headers,throws,ioexception,for,string,method,get,http,methods,final,header,request,headers,rest,client,test,util,random,headers,get,random,header,final,int,status,code,random,status,code,get,random,request,request,new,request,method,status,code,request,set,headers,request,headers,response,es,response,try,es,response,rest,client,perform,request,request,catch,response,exception,e,es,response,e,get,response,assert,that,es,response,get,status,line,get,status,code,equal,to,status,code,assert,headers,default,headers,request,headers,es,response,get,headers,collections,string,empty,set
RestClientSingleHostTests -> public void testHeaders() throws IOException;1527096592;End to end test for request and response headers. Exercises the mock http client ability to send back_whatever headers it has received.;public void testHeaders() throws IOException {_        for (String method : getHttpMethods()) {_            final Header[] requestHeaders = RestClientTestUtil.randomHeaders(getRandom(), "Header")__            final int statusCode = randomStatusCode(getRandom())__            Request request = new Request(method, "/" + statusCode)__            for (Header requestHeader : requestHeaders) {_                request.addHeader(requestHeader.getName(), requestHeader.getValue())__            }_            Response esResponse__            try {_                esResponse = restClient.performRequest(request)__            } catch(ResponseException e) {_                esResponse = e.getResponse()__            }_            assertThat(esResponse.getStatusLine().getStatusCode(), equalTo(statusCode))__            assertHeaders(defaultHeaders, requestHeaders, esResponse.getHeaders(), Collections.<String>emptySet())__        }_    };end,to,end,test,for,request,and,response,headers,exercises,the,mock,http,client,ability,to,send,back,whatever,headers,it,has,received;public,void,test,headers,throws,ioexception,for,string,method,get,http,methods,final,header,request,headers,rest,client,test,util,random,headers,get,random,header,final,int,status,code,random,status,code,get,random,request,request,new,request,method,status,code,for,header,request,header,request,headers,request,add,header,request,header,get,name,request,header,get,value,response,es,response,try,es,response,rest,client,perform,request,request,catch,response,exception,e,es,response,e,get,response,assert,that,es,response,get,status,line,get,status,code,equal,to,status,code,assert,headers,default,headers,request,headers,es,response,get,headers,collections,string,empty,set
RestClientSingleHostTests -> public void testHeaders() throws IOException;1527840262;End to end test for request and response headers. Exercises the mock http client ability to send back_whatever headers it has received.;public void testHeaders() throws IOException {_        for (String method : getHttpMethods()) {_            final Header[] requestHeaders = RestClientTestUtil.randomHeaders(getRandom(), "Header")__            final int statusCode = randomStatusCode(getRandom())__            Request request = new Request(method, "/" + statusCode)__            RequestOptions.Builder options = request.getOptions().toBuilder()__            for (Header requestHeader : requestHeaders) {_                options.addHeader(requestHeader.getName(), requestHeader.getValue())__            }_            request.setOptions(options)__            Response esResponse__            try {_                esResponse = restClient.performRequest(request)__            } catch(ResponseException e) {_                esResponse = e.getResponse()__            }_            assertThat(esResponse.getStatusLine().getStatusCode(), equalTo(statusCode))__            assertHeaders(defaultHeaders, requestHeaders, esResponse.getHeaders(), Collections.<String>emptySet())__        }_    };end,to,end,test,for,request,and,response,headers,exercises,the,mock,http,client,ability,to,send,back,whatever,headers,it,has,received;public,void,test,headers,throws,ioexception,for,string,method,get,http,methods,final,header,request,headers,rest,client,test,util,random,headers,get,random,header,final,int,status,code,random,status,code,get,random,request,request,new,request,method,status,code,request,options,builder,options,request,get,options,to,builder,for,header,request,header,request,headers,options,add,header,request,header,get,name,request,header,get,value,request,set,options,options,response,es,response,try,es,response,rest,client,perform,request,request,catch,response,exception,e,es,response,e,get,response,assert,that,es,response,get,status,line,get,status,code,equal,to,status,code,assert,headers,default,headers,request,headers,es,response,get,headers,collections,string,empty,set
RestClientSingleHostTests -> public void testHeaders() throws IOException;1528762805;End to end test for request and response headers. Exercises the mock http client ability to send back_whatever headers it has received.;public void testHeaders() throws IOException {_        for (String method : getHttpMethods()) {_            final Header[] requestHeaders = RestClientTestUtil.randomHeaders(getRandom(), "Header")__            final int statusCode = randomStatusCode(getRandom())__            Request request = new Request(method, "/" + statusCode)__            RequestOptions.Builder options = request.getOptions().toBuilder()__            for (Header requestHeader : requestHeaders) {_                options.addHeader(requestHeader.getName(), requestHeader.getValue())__            }_            request.setOptions(options)__            Response esResponse__            try {_                esResponse = restClient.performRequest(request)__            } catch(ResponseException e) {_                esResponse = e.getResponse()__            }_            assertThat(esResponse.getStatusLine().getStatusCode(), equalTo(statusCode))__            assertHeaders(defaultHeaders, requestHeaders, esResponse.getHeaders(), Collections.<String>emptySet())__        }_    };end,to,end,test,for,request,and,response,headers,exercises,the,mock,http,client,ability,to,send,back,whatever,headers,it,has,received;public,void,test,headers,throws,ioexception,for,string,method,get,http,methods,final,header,request,headers,rest,client,test,util,random,headers,get,random,header,final,int,status,code,random,status,code,get,random,request,request,new,request,method,status,code,request,options,builder,options,request,get,options,to,builder,for,header,request,header,request,headers,options,add,header,request,header,get,name,request,header,get,value,request,set,options,options,response,es,response,try,es,response,rest,client,perform,request,request,catch,response,exception,e,es,response,e,get,response,assert,that,es,response,get,status,line,get,status,code,equal,to,status,code,assert,headers,default,headers,request,headers,es,response,get,headers,collections,string,empty,set
RestClientSingleHostTests -> public void testHeaders() throws IOException;1529687475;End to end test for request and response headers. Exercises the mock http client ability to send back_whatever headers it has received.;public void testHeaders() throws IOException {_        for (String method : getHttpMethods()) {_            final Header[] requestHeaders = RestClientTestUtil.randomHeaders(getRandom(), "Header")__            final int statusCode = randomStatusCode(getRandom())__            Request request = new Request(method, "/" + statusCode)__            RequestOptions.Builder options = request.getOptions().toBuilder()__            for (Header requestHeader : requestHeaders) {_                options.addHeader(requestHeader.getName(), requestHeader.getValue())__            }_            request.setOptions(options)__            Response esResponse__            try {_                esResponse = restClient.performRequest(request)__            } catch(ResponseException e) {_                esResponse = e.getResponse()__            }_            assertThat(esResponse.getStatusLine().getStatusCode(), equalTo(statusCode))__            assertHeaders(defaultHeaders, requestHeaders, esResponse.getHeaders(), Collections.<String>emptySet())__        }_    };end,to,end,test,for,request,and,response,headers,exercises,the,mock,http,client,ability,to,send,back,whatever,headers,it,has,received;public,void,test,headers,throws,ioexception,for,string,method,get,http,methods,final,header,request,headers,rest,client,test,util,random,headers,get,random,header,final,int,status,code,random,status,code,get,random,request,request,new,request,method,status,code,request,options,builder,options,request,get,options,to,builder,for,header,request,header,request,headers,options,add,header,request,header,get,name,request,header,get,value,request,set,options,options,response,es,response,try,es,response,rest,client,perform,request,request,catch,response,exception,e,es,response,e,get,response,assert,that,es,response,get,status,line,get,status,code,equal,to,status,code,assert,headers,default,headers,request,headers,es,response,get,headers,collections,string,empty,set
RestClientSingleHostTests -> public void testHeaders() throws IOException;1531179852;End to end test for request and response headers. Exercises the mock http client ability to send back_whatever headers it has received.;public void testHeaders() throws IOException {_        for (String method : getHttpMethods()) {_            final Header[] requestHeaders = RestClientTestUtil.randomHeaders(getRandom(), "Header")__            final int statusCode = randomStatusCode(getRandom())__            Request request = new Request(method, "/" + statusCode)__            RequestOptions.Builder options = request.getOptions().toBuilder()__            for (Header requestHeader : requestHeaders) {_                options.addHeader(requestHeader.getName(), requestHeader.getValue())__            }_            request.setOptions(options)__            Response esResponse__            try {_                esResponse = restClient.performRequest(request)__            } catch(ResponseException e) {_                esResponse = e.getResponse()__            }_            assertThat(esResponse.getStatusLine().getStatusCode(), equalTo(statusCode))__            assertHeaders(defaultHeaders, requestHeaders, esResponse.getHeaders(), Collections.<String>emptySet())__        }_    };end,to,end,test,for,request,and,response,headers,exercises,the,mock,http,client,ability,to,send,back,whatever,headers,it,has,received;public,void,test,headers,throws,ioexception,for,string,method,get,http,methods,final,header,request,headers,rest,client,test,util,random,headers,get,random,header,final,int,status,code,random,status,code,get,random,request,request,new,request,method,status,code,request,options,builder,options,request,get,options,to,builder,for,header,request,header,request,headers,options,add,header,request,header,get,name,request,header,get,value,request,set,options,options,response,es,response,try,es,response,rest,client,perform,request,request,catch,response,exception,e,es,response,e,get,response,assert,that,es,response,get,status,line,get,status,code,equal,to,status,code,assert,headers,default,headers,request,headers,es,response,get,headers,collections,string,empty,set
RestClientSingleHostTests -> public void testHeaders() throws IOException;1535965276;End to end test for request and response headers. Exercises the mock http client ability to send back_whatever headers it has received.;public void testHeaders() throws IOException {_        for (String method : getHttpMethods()) {_            final Header[] requestHeaders = RestClientTestUtil.randomHeaders(getRandom(), "Header")__            final int statusCode = randomStatusCode(getRandom())__            Request request = new Request(method, "/" + statusCode)__            RequestOptions.Builder options = request.getOptions().toBuilder()__            for (Header requestHeader : requestHeaders) {_                options.addHeader(requestHeader.getName(), requestHeader.getValue())__            }_            request.setOptions(options)__            Response esResponse__            try {_                esResponse = restClient.performRequest(request)__            } catch(ResponseException e) {_                esResponse = e.getResponse()__            }_            assertThat(esResponse.getStatusLine().getStatusCode(), equalTo(statusCode))__            assertHeaders(defaultHeaders, requestHeaders, esResponse.getHeaders(), Collections.<String>emptySet())__        }_    };end,to,end,test,for,request,and,response,headers,exercises,the,mock,http,client,ability,to,send,back,whatever,headers,it,has,received;public,void,test,headers,throws,ioexception,for,string,method,get,http,methods,final,header,request,headers,rest,client,test,util,random,headers,get,random,header,final,int,status,code,random,status,code,get,random,request,request,new,request,method,status,code,request,options,builder,options,request,get,options,to,builder,for,header,request,header,request,headers,options,add,header,request,header,get,name,request,header,get,value,request,set,options,options,response,es,response,try,es,response,rest,client,perform,request,request,catch,response,exception,e,es,response,e,get,response,assert,that,es,response,get,status,line,get,status,code,equal,to,status,code,assert,headers,default,headers,request,headers,es,response,get,headers,collections,string,empty,set
RestClientSingleHostTests -> public void testHeaders() throws IOException;1538170812;End to end test for request and response headers. Exercises the mock http client ability to send back_whatever headers it has received.;public void testHeaders() throws IOException {_        for (String method : getHttpMethods()) {_            final Header[] requestHeaders = RestClientTestUtil.randomHeaders(getRandom(), "Header")__            final int statusCode = randomStatusCode(getRandom())__            Request request = new Request(method, "/" + statusCode)__            RequestOptions.Builder options = request.getOptions().toBuilder()__            for (Header requestHeader : requestHeaders) {_                options.addHeader(requestHeader.getName(), requestHeader.getValue())__            }_            request.setOptions(options)__            Response esResponse__            try {_                esResponse = restClient.performRequest(request)__            } catch(ResponseException e) {_                esResponse = e.getResponse()__            }_            assertThat(esResponse.getStatusLine().getStatusCode(), equalTo(statusCode))__            assertHeaders(defaultHeaders, requestHeaders, esResponse.getHeaders(), Collections.<String>emptySet())__        }_    };end,to,end,test,for,request,and,response,headers,exercises,the,mock,http,client,ability,to,send,back,whatever,headers,it,has,received;public,void,test,headers,throws,ioexception,for,string,method,get,http,methods,final,header,request,headers,rest,client,test,util,random,headers,get,random,header,final,int,status,code,random,status,code,get,random,request,request,new,request,method,status,code,request,options,builder,options,request,get,options,to,builder,for,header,request,header,request,headers,options,add,header,request,header,get,name,request,header,get,value,request,set,options,options,response,es,response,try,es,response,rest,client,perform,request,request,catch,response,exception,e,es,response,e,get,response,assert,that,es,response,get,status,line,get,status,code,equal,to,status,code,assert,headers,default,headers,request,headers,es,response,get,headers,collections,string,empty,set
RestClientSingleHostTests -> public void testHeaders() throws IOException;1539615817;End to end test for request and response headers. Exercises the mock http client ability to send back_whatever headers it has received.;public void testHeaders() throws IOException {_        for (String method : getHttpMethods()) {_            final Header[] requestHeaders = RestClientTestUtil.randomHeaders(getRandom(), "Header")__            final int statusCode = randomStatusCode(getRandom())__            Request request = new Request(method, "/" + statusCode)__            RequestOptions.Builder options = request.getOptions().toBuilder()__            for (Header requestHeader : requestHeaders) {_                options.addHeader(requestHeader.getName(), requestHeader.getValue())__            }_            request.setOptions(options)__            Response esResponse__            try {_                esResponse = restClient.performRequest(request)__            } catch(ResponseException e) {_                esResponse = e.getResponse()__            }_            assertThat(esResponse.getStatusLine().getStatusCode(), equalTo(statusCode))__            assertHeaders(defaultHeaders, requestHeaders, esResponse.getHeaders(), Collections.<String>emptySet())__            assertFalse(esResponse.hasWarnings())__        }_    };end,to,end,test,for,request,and,response,headers,exercises,the,mock,http,client,ability,to,send,back,whatever,headers,it,has,received;public,void,test,headers,throws,ioexception,for,string,method,get,http,methods,final,header,request,headers,rest,client,test,util,random,headers,get,random,header,final,int,status,code,random,status,code,get,random,request,request,new,request,method,status,code,request,options,builder,options,request,get,options,to,builder,for,header,request,header,request,headers,options,add,header,request,header,get,name,request,header,get,value,request,set,options,options,response,es,response,try,es,response,rest,client,perform,request,request,catch,response,exception,e,es,response,e,get,response,assert,that,es,response,get,status,line,get,status,code,equal,to,status,code,assert,headers,default,headers,request,headers,es,response,get,headers,collections,string,empty,set,assert,false,es,response,has,warnings
RestClientSingleHostTests -> public void testHeaders() throws IOException;1544448720;End to end test for request and response headers. Exercises the mock http client ability to send back_whatever headers it has received.;public void testHeaders() throws IOException {_        for (String method : getHttpMethods()) {_            final Header[] requestHeaders = RestClientTestUtil.randomHeaders(getRandom(), "Header")__            final int statusCode = randomStatusCode(getRandom())__            Request request = new Request(method, "/" + statusCode)__            RequestOptions.Builder options = request.getOptions().toBuilder()__            for (Header requestHeader : requestHeaders) {_                options.addHeader(requestHeader.getName(), requestHeader.getValue())__            }_            request.setOptions(options)__            Response esResponse__            try {_                esResponse = restClient.performRequest(request)__            } catch(ResponseException e) {_                esResponse = e.getResponse()__            }_            assertThat(esResponse.getStatusLine().getStatusCode(), equalTo(statusCode))__            assertHeaders(defaultHeaders, requestHeaders, esResponse.getHeaders(), Collections.<String>emptySet())__            assertFalse(esResponse.hasWarnings())__        }_    };end,to,end,test,for,request,and,response,headers,exercises,the,mock,http,client,ability,to,send,back,whatever,headers,it,has,received;public,void,test,headers,throws,ioexception,for,string,method,get,http,methods,final,header,request,headers,rest,client,test,util,random,headers,get,random,header,final,int,status,code,random,status,code,get,random,request,request,new,request,method,status,code,request,options,builder,options,request,get,options,to,builder,for,header,request,header,request,headers,options,add,header,request,header,get,name,request,header,get,value,request,set,options,options,response,es,response,try,es,response,rest,client,perform,request,request,catch,response,exception,e,es,response,e,get,response,assert,that,es,response,get,status,line,get,status,code,equal,to,status,code,assert,headers,default,headers,request,headers,es,response,get,headers,collections,string,empty,set,assert,false,es,response,has,warnings
RestClientSingleHostTests -> public void testHeaders() throws IOException;1548869519;End to end test for request and response headers. Exercises the mock http client ability to send back_whatever headers it has received.;public void testHeaders() throws IOException {_        for (String method : getHttpMethods()) {_            final Header[] requestHeaders = RestClientTestUtil.randomHeaders(getRandom(), "Header")__            final int statusCode = randomStatusCode(getRandom())__            Request request = new Request(method, "/" + statusCode)__            RequestOptions.Builder options = request.getOptions().toBuilder()__            for (Header requestHeader : requestHeaders) {_                options.addHeader(requestHeader.getName(), requestHeader.getValue())__            }_            request.setOptions(options)__            Response esResponse__            try {_                esResponse = restClient.performRequest(request)__            } catch(ResponseException e) {_                esResponse = e.getResponse()__            }_            assertThat(esResponse.getStatusLine().getStatusCode(), equalTo(statusCode))__            assertHeaders(defaultHeaders, requestHeaders, esResponse.getHeaders(), Collections.<String>emptySet())__            assertFalse(esResponse.hasWarnings())__        }_    };end,to,end,test,for,request,and,response,headers,exercises,the,mock,http,client,ability,to,send,back,whatever,headers,it,has,received;public,void,test,headers,throws,ioexception,for,string,method,get,http,methods,final,header,request,headers,rest,client,test,util,random,headers,get,random,header,final,int,status,code,random,status,code,get,random,request,request,new,request,method,status,code,request,options,builder,options,request,get,options,to,builder,for,header,request,header,request,headers,options,add,header,request,header,get,name,request,header,get,value,request,set,options,options,response,es,response,try,es,response,rest,client,perform,request,request,catch,response,exception,e,es,response,e,get,response,assert,that,es,response,get,status,line,get,status,code,equal,to,status,code,assert,headers,default,headers,request,headers,es,response,get,headers,collections,string,empty,set,assert,false,es,response,has,warnings
RestClientSingleHostTests -> @Deprecated     private Response performRequest(String method, String endpoint, Map<String, String> params, Header... headers) throws IOException;1525248068;@deprecated prefer {@link RestClient#performRequest(Request)}.;@Deprecated_    private Response performRequest(String method, String endpoint, Map<String, String> params, Header... headers) throws IOException {_        int methodSelector__        if (params.isEmpty()) {_            methodSelector = randomIntBetween(0, 2)__        } else {_            methodSelector = randomIntBetween(1, 2)__        }_        switch(methodSelector) {_            case 0:_                return restClient.performRequest(method, endpoint, headers)__            case 1:_                return restClient.performRequest(method, endpoint, params, headers)__            case 2:_                return restClient.performRequest(method, endpoint, params, (HttpEntity)null, headers)__            default:_                throw new UnsupportedOperationException()__        }_    };deprecated,prefer,link,rest,client,perform,request,request;deprecated,private,response,perform,request,string,method,string,endpoint,map,string,string,params,header,headers,throws,ioexception,int,method,selector,if,params,is,empty,method,selector,random,int,between,0,2,else,method,selector,random,int,between,1,2,switch,method,selector,case,0,return,rest,client,perform,request,method,endpoint,headers,case,1,return,rest,client,perform,request,method,endpoint,params,headers,case,2,return,rest,client,perform,request,method,endpoint,params,http,entity,null,headers,default,throw,new,unsupported,operation,exception
RestClientSingleHostTests -> @Deprecated     private Response performRequest(String method, String endpoint, Map<String, String> params, Header... headers) throws IOException;1526374795;@deprecated prefer {@link RestClient#performRequest(Request)}.;@Deprecated_    private Response performRequest(String method, String endpoint, Map<String, String> params, Header... headers) throws IOException {_        int methodSelector__        if (params.isEmpty()) {_            methodSelector = randomIntBetween(0, 2)__        } else {_            methodSelector = randomIntBetween(1, 2)__        }_        switch(methodSelector) {_            case 0:_                return restClient.performRequest(method, endpoint, headers)__            case 1:_                return restClient.performRequest(method, endpoint, params, headers)__            case 2:_                return restClient.performRequest(method, endpoint, params, (HttpEntity)null, headers)__            default:_                throw new UnsupportedOperationException()__        }_    };deprecated,prefer,link,rest,client,perform,request,request;deprecated,private,response,perform,request,string,method,string,endpoint,map,string,string,params,header,headers,throws,ioexception,int,method,selector,if,params,is,empty,method,selector,random,int,between,0,2,else,method,selector,random,int,between,1,2,switch,method,selector,case,0,return,rest,client,perform,request,method,endpoint,headers,case,1,return,rest,client,perform,request,method,endpoint,params,headers,case,2,return,rest,client,perform,request,method,endpoint,params,http,entity,null,headers,default,throw,new,unsupported,operation,exception
RestClientSingleHostTests -> @Deprecated     private Response performRequest(String method, String endpoint, Map<String, String> params, Header... headers) throws IOException;1527096592;@deprecated prefer {@link RestClient#performRequest(Request)}.;@Deprecated_    private Response performRequest(String method, String endpoint, Map<String, String> params, Header... headers) throws IOException {_        int methodSelector__        if (params.isEmpty()) {_            methodSelector = randomIntBetween(0, 2)__        } else {_            methodSelector = randomIntBetween(1, 2)__        }_        switch(methodSelector) {_            case 0:_                return restClient.performRequest(method, endpoint, headers)__            case 1:_                return restClient.performRequest(method, endpoint, params, headers)__            case 2:_                return restClient.performRequest(method, endpoint, params, (HttpEntity)null, headers)__            default:_                throw new UnsupportedOperationException()__        }_    };deprecated,prefer,link,rest,client,perform,request,request;deprecated,private,response,perform,request,string,method,string,endpoint,map,string,string,params,header,headers,throws,ioexception,int,method,selector,if,params,is,empty,method,selector,random,int,between,0,2,else,method,selector,random,int,between,1,2,switch,method,selector,case,0,return,rest,client,perform,request,method,endpoint,headers,case,1,return,rest,client,perform,request,method,endpoint,params,headers,case,2,return,rest,client,perform,request,method,endpoint,params,http,entity,null,headers,default,throw,new,unsupported,operation,exception
RestClientSingleHostTests -> @Deprecated     private Response performRequest(String method, String endpoint, Map<String, String> params, Header... headers) throws IOException;1527840262;@deprecated prefer {@link RestClient#performRequest(Request)}.;@Deprecated_    private Response performRequest(String method, String endpoint, Map<String, String> params, Header... headers) throws IOException {_        int methodSelector__        if (params.isEmpty()) {_            methodSelector = randomIntBetween(0, 2)__        } else {_            methodSelector = randomIntBetween(1, 2)__        }_        switch(methodSelector) {_            case 0:_                return restClient.performRequest(method, endpoint, headers)__            case 1:_                return restClient.performRequest(method, endpoint, params, headers)__            case 2:_                return restClient.performRequest(method, endpoint, params, (HttpEntity)null, headers)__            default:_                throw new UnsupportedOperationException()__        }_    };deprecated,prefer,link,rest,client,perform,request,request;deprecated,private,response,perform,request,string,method,string,endpoint,map,string,string,params,header,headers,throws,ioexception,int,method,selector,if,params,is,empty,method,selector,random,int,between,0,2,else,method,selector,random,int,between,1,2,switch,method,selector,case,0,return,rest,client,perform,request,method,endpoint,headers,case,1,return,rest,client,perform,request,method,endpoint,params,headers,case,2,return,rest,client,perform,request,method,endpoint,params,http,entity,null,headers,default,throw,new,unsupported,operation,exception
RestClientSingleHostTests -> @Deprecated     private Response performRequest(String method, String endpoint, Map<String, String> params, Header... headers) throws IOException;1528762805;@deprecated prefer {@link RestClient#performRequest(Request)}.;@Deprecated_    private Response performRequest(String method, String endpoint, Map<String, String> params, Header... headers) throws IOException {_        int methodSelector__        if (params.isEmpty()) {_            methodSelector = randomIntBetween(0, 2)__        } else {_            methodSelector = randomIntBetween(1, 2)__        }_        switch(methodSelector) {_            case 0:_                return restClient.performRequest(method, endpoint, headers)__            case 1:_                return restClient.performRequest(method, endpoint, params, headers)__            case 2:_                return restClient.performRequest(method, endpoint, params, (HttpEntity)null, headers)__            default:_                throw new UnsupportedOperationException()__        }_    };deprecated,prefer,link,rest,client,perform,request,request;deprecated,private,response,perform,request,string,method,string,endpoint,map,string,string,params,header,headers,throws,ioexception,int,method,selector,if,params,is,empty,method,selector,random,int,between,0,2,else,method,selector,random,int,between,1,2,switch,method,selector,case,0,return,rest,client,perform,request,method,endpoint,headers,case,1,return,rest,client,perform,request,method,endpoint,params,headers,case,2,return,rest,client,perform,request,method,endpoint,params,http,entity,null,headers,default,throw,new,unsupported,operation,exception
RestClientSingleHostTests -> @Deprecated     private Response performRequest(String method, String endpoint, Map<String, String> params, Header... headers) throws IOException;1529687475;@deprecated prefer {@link RestClient#performRequest(Request)}.;@Deprecated_    private Response performRequest(String method, String endpoint, Map<String, String> params, Header... headers) throws IOException {_        int methodSelector__        if (params.isEmpty()) {_            methodSelector = randomIntBetween(0, 2)__        } else {_            methodSelector = randomIntBetween(1, 2)__        }_        switch(methodSelector) {_            case 0:_                return restClient.performRequest(method, endpoint, headers)__            case 1:_                return restClient.performRequest(method, endpoint, params, headers)__            case 2:_                return restClient.performRequest(method, endpoint, params, (HttpEntity)null, headers)__            default:_                throw new UnsupportedOperationException()__        }_    };deprecated,prefer,link,rest,client,perform,request,request;deprecated,private,response,perform,request,string,method,string,endpoint,map,string,string,params,header,headers,throws,ioexception,int,method,selector,if,params,is,empty,method,selector,random,int,between,0,2,else,method,selector,random,int,between,1,2,switch,method,selector,case,0,return,rest,client,perform,request,method,endpoint,headers,case,1,return,rest,client,perform,request,method,endpoint,params,headers,case,2,return,rest,client,perform,request,method,endpoint,params,http,entity,null,headers,default,throw,new,unsupported,operation,exception
RestClientSingleHostTests -> @Deprecated     private Response performRequest(String method, String endpoint, Map<String, String> params, Header... headers) throws IOException;1531179852;@deprecated prefer {@link RestClient#performRequest(Request)}.;@Deprecated_    private Response performRequest(String method, String endpoint, Map<String, String> params, Header... headers) throws IOException {_        int methodSelector__        if (params.isEmpty()) {_            methodSelector = randomIntBetween(0, 2)__        } else {_            methodSelector = randomIntBetween(1, 2)__        }_        switch(methodSelector) {_            case 0:_                return restClient.performRequest(method, endpoint, headers)__            case 1:_                return restClient.performRequest(method, endpoint, params, headers)__            case 2:_                return restClient.performRequest(method, endpoint, params, (HttpEntity)null, headers)__            default:_                throw new UnsupportedOperationException()__        }_    };deprecated,prefer,link,rest,client,perform,request,request;deprecated,private,response,perform,request,string,method,string,endpoint,map,string,string,params,header,headers,throws,ioexception,int,method,selector,if,params,is,empty,method,selector,random,int,between,0,2,else,method,selector,random,int,between,1,2,switch,method,selector,case,0,return,rest,client,perform,request,method,endpoint,headers,case,1,return,rest,client,perform,request,method,endpoint,params,headers,case,2,return,rest,client,perform,request,method,endpoint,params,http,entity,null,headers,default,throw,new,unsupported,operation,exception
RestClientSingleHostTests -> @Deprecated     public void testPerformRequestOldStyleWithNullParams() throws IOException;1525248068;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testSetParameters()}.;@Deprecated_    public void testPerformRequestOldStyleWithNullParams() throws IOException {_        String method = randomHttpMethod(getRandom())__        int statusCode = randomStatusCode(getRandom())__        try {_            restClient.performRequest(method, "/" + statusCode, (Map<String, String>)null)__            fail("request should have failed")__        } catch(NullPointerException e) {_            assertEquals("parameters cannot be null", e.getMessage())__        }_        try {_            restClient.performRequest(method, "/" + statusCode, null, (HttpEntity)null)__            fail("request should have failed")__        } catch(NullPointerException e) {_            assertEquals("parameters cannot be null", e.getMessage())__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,set,parameters;deprecated,public,void,test,perform,request,old,style,with,null,params,throws,ioexception,string,method,random,http,method,get,random,int,status,code,random,status,code,get,random,try,rest,client,perform,request,method,status,code,map,string,string,null,fail,request,should,have,failed,catch,null,pointer,exception,e,assert,equals,parameters,cannot,be,null,e,get,message,try,rest,client,perform,request,method,status,code,null,http,entity,null,fail,request,should,have,failed,catch,null,pointer,exception,e,assert,equals,parameters,cannot,be,null,e,get,message
RestClientSingleHostTests -> @Deprecated     public void testPerformRequestOldStyleWithNullParams() throws IOException;1526374795;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testSetParameters()}.;@Deprecated_    public void testPerformRequestOldStyleWithNullParams() throws IOException {_        String method = randomHttpMethod(getRandom())__        int statusCode = randomStatusCode(getRandom())__        try {_            restClient.performRequest(method, "/" + statusCode, (Map<String, String>)null)__            fail("request should have failed")__        } catch(NullPointerException e) {_            assertEquals("parameters cannot be null", e.getMessage())__        }_        try {_            restClient.performRequest(method, "/" + statusCode, null, (HttpEntity)null)__            fail("request should have failed")__        } catch(NullPointerException e) {_            assertEquals("parameters cannot be null", e.getMessage())__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,set,parameters;deprecated,public,void,test,perform,request,old,style,with,null,params,throws,ioexception,string,method,random,http,method,get,random,int,status,code,random,status,code,get,random,try,rest,client,perform,request,method,status,code,map,string,string,null,fail,request,should,have,failed,catch,null,pointer,exception,e,assert,equals,parameters,cannot,be,null,e,get,message,try,rest,client,perform,request,method,status,code,null,http,entity,null,fail,request,should,have,failed,catch,null,pointer,exception,e,assert,equals,parameters,cannot,be,null,e,get,message
RestClientSingleHostTests -> @Deprecated     public void testPerformRequestOldStyleWithNullParams() throws IOException;1527096592;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testAddParameters()}.;@Deprecated_    public void testPerformRequestOldStyleWithNullParams() throws IOException {_        String method = randomHttpMethod(getRandom())__        int statusCode = randomStatusCode(getRandom())__        try {_            restClient.performRequest(method, "/" + statusCode, (Map<String, String>)null)__            fail("request should have failed")__        } catch(NullPointerException e) {_            assertEquals("parameters cannot be null", e.getMessage())__        }_        try {_            restClient.performRequest(method, "/" + statusCode, null, (HttpEntity)null)__            fail("request should have failed")__        } catch(NullPointerException e) {_            assertEquals("parameters cannot be null", e.getMessage())__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,add,parameters;deprecated,public,void,test,perform,request,old,style,with,null,params,throws,ioexception,string,method,random,http,method,get,random,int,status,code,random,status,code,get,random,try,rest,client,perform,request,method,status,code,map,string,string,null,fail,request,should,have,failed,catch,null,pointer,exception,e,assert,equals,parameters,cannot,be,null,e,get,message,try,rest,client,perform,request,method,status,code,null,http,entity,null,fail,request,should,have,failed,catch,null,pointer,exception,e,assert,equals,parameters,cannot,be,null,e,get,message
RestClientSingleHostTests -> @Deprecated     public void testPerformRequestOldStyleWithNullParams() throws IOException;1527840262;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testAddParameters()}.;@Deprecated_    public void testPerformRequestOldStyleWithNullParams() throws IOException {_        String method = randomHttpMethod(getRandom())__        int statusCode = randomStatusCode(getRandom())__        try {_            restClient.performRequest(method, "/" + statusCode, (Map<String, String>)null)__            fail("request should have failed")__        } catch(NullPointerException e) {_            assertEquals("parameters cannot be null", e.getMessage())__        }_        try {_            restClient.performRequest(method, "/" + statusCode, null, (HttpEntity)null)__            fail("request should have failed")__        } catch(NullPointerException e) {_            assertEquals("parameters cannot be null", e.getMessage())__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,add,parameters;deprecated,public,void,test,perform,request,old,style,with,null,params,throws,ioexception,string,method,random,http,method,get,random,int,status,code,random,status,code,get,random,try,rest,client,perform,request,method,status,code,map,string,string,null,fail,request,should,have,failed,catch,null,pointer,exception,e,assert,equals,parameters,cannot,be,null,e,get,message,try,rest,client,perform,request,method,status,code,null,http,entity,null,fail,request,should,have,failed,catch,null,pointer,exception,e,assert,equals,parameters,cannot,be,null,e,get,message
RestClientSingleHostTests -> @Deprecated     public void testPerformRequestOldStyleWithNullParams() throws IOException;1528762805;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testAddParameters()}.;@Deprecated_    public void testPerformRequestOldStyleWithNullParams() throws IOException {_        String method = randomHttpMethod(getRandom())__        int statusCode = randomStatusCode(getRandom())__        try {_            restClient.performRequest(method, "/" + statusCode, (Map<String, String>)null)__            fail("request should have failed")__        } catch(NullPointerException e) {_            assertEquals("parameters cannot be null", e.getMessage())__        }_        try {_            restClient.performRequest(method, "/" + statusCode, null, (HttpEntity)null)__            fail("request should have failed")__        } catch(NullPointerException e) {_            assertEquals("parameters cannot be null", e.getMessage())__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,add,parameters;deprecated,public,void,test,perform,request,old,style,with,null,params,throws,ioexception,string,method,random,http,method,get,random,int,status,code,random,status,code,get,random,try,rest,client,perform,request,method,status,code,map,string,string,null,fail,request,should,have,failed,catch,null,pointer,exception,e,assert,equals,parameters,cannot,be,null,e,get,message,try,rest,client,perform,request,method,status,code,null,http,entity,null,fail,request,should,have,failed,catch,null,pointer,exception,e,assert,equals,parameters,cannot,be,null,e,get,message
RestClientSingleHostTests -> @Deprecated     public void testPerformRequestOldStyleWithNullParams() throws IOException;1529687475;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testAddParameters()}.;@Deprecated_    public void testPerformRequestOldStyleWithNullParams() throws IOException {_        String method = randomHttpMethod(getRandom())__        int statusCode = randomStatusCode(getRandom())__        try {_            restClient.performRequest(method, "/" + statusCode, (Map<String, String>)null)__            fail("request should have failed")__        } catch(NullPointerException e) {_            assertEquals("parameters cannot be null", e.getMessage())__        }_        try {_            restClient.performRequest(method, "/" + statusCode, null, (HttpEntity)null)__            fail("request should have failed")__        } catch(NullPointerException e) {_            assertEquals("parameters cannot be null", e.getMessage())__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,add,parameters;deprecated,public,void,test,perform,request,old,style,with,null,params,throws,ioexception,string,method,random,http,method,get,random,int,status,code,random,status,code,get,random,try,rest,client,perform,request,method,status,code,map,string,string,null,fail,request,should,have,failed,catch,null,pointer,exception,e,assert,equals,parameters,cannot,be,null,e,get,message,try,rest,client,perform,request,method,status,code,null,http,entity,null,fail,request,should,have,failed,catch,null,pointer,exception,e,assert,equals,parameters,cannot,be,null,e,get,message
RestClientSingleHostTests -> @Deprecated     public void testPerformRequestOldStyleWithNullParams() throws IOException;1531179852;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testAddParameters()}.;@Deprecated_    public void testPerformRequestOldStyleWithNullParams() throws IOException {_        String method = randomHttpMethod(getRandom())__        int statusCode = randomStatusCode(getRandom())__        try {_            restClient.performRequest(method, "/" + statusCode, (Map<String, String>)null)__            fail("request should have failed")__        } catch(NullPointerException e) {_            assertEquals("parameters cannot be null", e.getMessage())__        }_        try {_            restClient.performRequest(method, "/" + statusCode, null, (HttpEntity)null)__            fail("request should have failed")__        } catch(NullPointerException e) {_            assertEquals("parameters cannot be null", e.getMessage())__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,add,parameters;deprecated,public,void,test,perform,request,old,style,with,null,params,throws,ioexception,string,method,random,http,method,get,random,int,status,code,random,status,code,get,random,try,rest,client,perform,request,method,status,code,map,string,string,null,fail,request,should,have,failed,catch,null,pointer,exception,e,assert,equals,parameters,cannot,be,null,e,get,message,try,rest,client,perform,request,method,status,code,null,http,entity,null,fail,request,should,have,failed,catch,null,pointer,exception,e,assert,equals,parameters,cannot,be,null,e,get,message
RestClientSingleHostTests -> public void testOkStatusCodes() throws IOException;1524684173;End to end test for ok status codes;public void testOkStatusCodes() throws IOException {_        for (String method : getHttpMethods()) {_            for (int okStatusCode : getOkStatusCodes()) {_                Response response = performRequest(method, "/" + okStatusCode)__                assertThat(response.getStatusLine().getStatusCode(), equalTo(okStatusCode))__            }_        }_        failureListener.assertNotCalled()__    };end,to,end,test,for,ok,status,codes;public,void,test,ok,status,codes,throws,ioexception,for,string,method,get,http,methods,for,int,ok,status,code,get,ok,status,codes,response,response,perform,request,method,ok,status,code,assert,that,response,get,status,line,get,status,code,equal,to,ok,status,code,failure,listener,assert,not,called
RestClientSingleHostTests -> public void testOkStatusCodes() throws IOException;1525248068;End to end test for ok status codes;public void testOkStatusCodes() throws IOException {_        for (String method : getHttpMethods()) {_            for (int okStatusCode : getOkStatusCodes()) {_                Response response = performRequest(method, "/" + okStatusCode)__                assertThat(response.getStatusLine().getStatusCode(), equalTo(okStatusCode))__            }_        }_        failureListener.assertNotCalled()__    };end,to,end,test,for,ok,status,codes;public,void,test,ok,status,codes,throws,ioexception,for,string,method,get,http,methods,for,int,ok,status,code,get,ok,status,codes,response,response,perform,request,method,ok,status,code,assert,that,response,get,status,line,get,status,code,equal,to,ok,status,code,failure,listener,assert,not,called
RestClientSingleHostTests -> public void testOkStatusCodes() throws IOException;1526374795;End to end test for ok status codes;public void testOkStatusCodes() throws IOException {_        for (String method : getHttpMethods()) {_            for (int okStatusCode : getOkStatusCodes()) {_                Response response = performRequest(method, "/" + okStatusCode)__                assertThat(response.getStatusLine().getStatusCode(), equalTo(okStatusCode))__            }_        }_        failureListener.assertNotCalled()__    };end,to,end,test,for,ok,status,codes;public,void,test,ok,status,codes,throws,ioexception,for,string,method,get,http,methods,for,int,ok,status,code,get,ok,status,codes,response,response,perform,request,method,ok,status,code,assert,that,response,get,status,line,get,status,code,equal,to,ok,status,code,failure,listener,assert,not,called
RestClientSingleHostTests -> public void testOkStatusCodes() throws IOException;1527096592;End to end test for ok status codes;public void testOkStatusCodes() throws IOException {_        for (String method : getHttpMethods()) {_            for (int okStatusCode : getOkStatusCodes()) {_                Response response = performRequest(method, "/" + okStatusCode)__                assertThat(response.getStatusLine().getStatusCode(), equalTo(okStatusCode))__            }_        }_        failureListener.assertNotCalled()__    };end,to,end,test,for,ok,status,codes;public,void,test,ok,status,codes,throws,ioexception,for,string,method,get,http,methods,for,int,ok,status,code,get,ok,status,codes,response,response,perform,request,method,ok,status,code,assert,that,response,get,status,line,get,status,code,equal,to,ok,status,code,failure,listener,assert,not,called
RestClientSingleHostTests -> public void testOkStatusCodes() throws IOException;1527840262;End to end test for ok status codes;public void testOkStatusCodes() throws IOException {_        for (String method : getHttpMethods()) {_            for (int okStatusCode : getOkStatusCodes()) {_                Response response = performRequest(method, "/" + okStatusCode)__                assertThat(response.getStatusLine().getStatusCode(), equalTo(okStatusCode))__            }_        }_        failureListener.assertNotCalled()__    };end,to,end,test,for,ok,status,codes;public,void,test,ok,status,codes,throws,ioexception,for,string,method,get,http,methods,for,int,ok,status,code,get,ok,status,codes,response,response,perform,request,method,ok,status,code,assert,that,response,get,status,line,get,status,code,equal,to,ok,status,code,failure,listener,assert,not,called
RestClientSingleHostTests -> public void testOkStatusCodes() throws IOException;1528762805;End to end test for ok status codes;public void testOkStatusCodes() throws IOException {_        for (String method : getHttpMethods()) {_            for (int okStatusCode : getOkStatusCodes()) {_                Response response = performRequest(method, "/" + okStatusCode)__                assertThat(response.getStatusLine().getStatusCode(), equalTo(okStatusCode))__            }_        }_        failureListener.assertNotCalled()__    };end,to,end,test,for,ok,status,codes;public,void,test,ok,status,codes,throws,ioexception,for,string,method,get,http,methods,for,int,ok,status,code,get,ok,status,codes,response,response,perform,request,method,ok,status,code,assert,that,response,get,status,line,get,status,code,equal,to,ok,status,code,failure,listener,assert,not,called
RestClientSingleHostTests -> public void testOkStatusCodes() throws IOException;1529687475;End to end test for ok status codes;public void testOkStatusCodes() throws IOException {_        for (String method : getHttpMethods()) {_            for (int okStatusCode : getOkStatusCodes()) {_                Response response = performRequest(method, "/" + okStatusCode)__                assertThat(response.getStatusLine().getStatusCode(), equalTo(okStatusCode))__            }_        }_        failureListener.assertNotCalled()__    };end,to,end,test,for,ok,status,codes;public,void,test,ok,status,codes,throws,ioexception,for,string,method,get,http,methods,for,int,ok,status,code,get,ok,status,codes,response,response,perform,request,method,ok,status,code,assert,that,response,get,status,line,get,status,code,equal,to,ok,status,code,failure,listener,assert,not,called
RestClientSingleHostTests -> public void testOkStatusCodes() throws IOException;1531179852;End to end test for ok status codes;public void testOkStatusCodes() throws IOException {_        for (String method : getHttpMethods()) {_            for (int okStatusCode : getOkStatusCodes()) {_                Response response = performRequest(method, "/" + okStatusCode)__                assertThat(response.getStatusLine().getStatusCode(), equalTo(okStatusCode))__            }_        }_        failureListener.assertNotCalled()__    };end,to,end,test,for,ok,status,codes;public,void,test,ok,status,codes,throws,ioexception,for,string,method,get,http,methods,for,int,ok,status,code,get,ok,status,codes,response,response,perform,request,method,ok,status,code,assert,that,response,get,status,line,get,status,code,equal,to,ok,status,code,failure,listener,assert,not,called
RestClientSingleHostTests -> public void testOkStatusCodes() throws IOException;1535965276;End to end test for ok status codes;public void testOkStatusCodes() throws IOException {_        for (String method : getHttpMethods()) {_            for (int okStatusCode : getOkStatusCodes()) {_                Response response = restClient.performRequest(new Request(method, "/" + okStatusCode))__                assertThat(response.getStatusLine().getStatusCode(), equalTo(okStatusCode))__            }_        }_        failureListener.assertNotCalled()__    };end,to,end,test,for,ok,status,codes;public,void,test,ok,status,codes,throws,ioexception,for,string,method,get,http,methods,for,int,ok,status,code,get,ok,status,codes,response,response,rest,client,perform,request,new,request,method,ok,status,code,assert,that,response,get,status,line,get,status,code,equal,to,ok,status,code,failure,listener,assert,not,called
RestClientSingleHostTests -> public void testOkStatusCodes() throws IOException;1538170812;End to end test for ok status codes;public void testOkStatusCodes() throws IOException {_        for (String method : getHttpMethods()) {_            for (int okStatusCode : getOkStatusCodes()) {_                Response response = restClient.performRequest(new Request(method, "/" + okStatusCode))__                assertThat(response.getStatusLine().getStatusCode(), equalTo(okStatusCode))__            }_        }_        failureListener.assertNotCalled()__    };end,to,end,test,for,ok,status,codes;public,void,test,ok,status,codes,throws,ioexception,for,string,method,get,http,methods,for,int,ok,status,code,get,ok,status,codes,response,response,rest,client,perform,request,new,request,method,ok,status,code,assert,that,response,get,status,line,get,status,code,equal,to,ok,status,code,failure,listener,assert,not,called
RestClientSingleHostTests -> public void testOkStatusCodes() throws IOException;1539615817;End to end test for ok status codes;public void testOkStatusCodes() throws IOException {_        for (String method : getHttpMethods()) {_            for (int okStatusCode : getOkStatusCodes()) {_                Response response = restClient.performRequest(new Request(method, "/" + okStatusCode))__                assertThat(response.getStatusLine().getStatusCode(), equalTo(okStatusCode))__            }_        }_        failureListener.assertNotCalled()__    };end,to,end,test,for,ok,status,codes;public,void,test,ok,status,codes,throws,ioexception,for,string,method,get,http,methods,for,int,ok,status,code,get,ok,status,codes,response,response,rest,client,perform,request,new,request,method,ok,status,code,assert,that,response,get,status,line,get,status,code,equal,to,ok,status,code,failure,listener,assert,not,called
RestClientSingleHostTests -> public void testOkStatusCodes() throws IOException;1544448720;End to end test for ok status codes;public void testOkStatusCodes() throws IOException {_        for (String method : getHttpMethods()) {_            for (int okStatusCode : getOkStatusCodes()) {_                Response response = restClient.performRequest(new Request(method, "/" + okStatusCode))__                assertThat(response.getStatusLine().getStatusCode(), equalTo(okStatusCode))__            }_        }_        failureListener.assertNotCalled()__    };end,to,end,test,for,ok,status,codes;public,void,test,ok,status,codes,throws,ioexception,for,string,method,get,http,methods,for,int,ok,status,code,get,ok,status,codes,response,response,rest,client,perform,request,new,request,method,ok,status,code,assert,that,response,get,status,line,get,status,code,equal,to,ok,status,code,failure,listener,assert,not,called
RestClientSingleHostTests -> public void testOkStatusCodes() throws IOException;1548869519;End to end test for ok status codes;public void testOkStatusCodes() throws IOException {_        for (String method : getHttpMethods()) {_            for (int okStatusCode : getOkStatusCodes()) {_                Response response = restClient.performRequest(new Request(method, "/" + okStatusCode))__                assertThat(response.getStatusLine().getStatusCode(), equalTo(okStatusCode))__            }_        }_        failureListener.assertNotCalled()__    };end,to,end,test,for,ok,status,codes;public,void,test,ok,status,codes,throws,ioexception,for,string,method,get,http,methods,for,int,ok,status,code,get,ok,status,codes,response,response,rest,client,perform,request,new,request,method,ok,status,code,assert,that,response,get,status,line,get,status,code,equal,to,ok,status,code,failure,listener,assert,not,called
