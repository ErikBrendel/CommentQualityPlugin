# id;timestamp;commentText;codeText;commentWords;codeWords
RestClientTests -> private String assertSelectAllRejected( NodeTuple<List<Node>> nodeTuple,             Map<HttpHost, DeadHostState> blacklist, NodeSelector nodeSelector);1528762805;Assert that {@link RestClient#selectHosts} fails on the provided arguments._@return the message in the exception thrown by the failure;private String assertSelectAllRejected( NodeTuple<List<Node>> nodeTuple,_            Map<HttpHost, DeadHostState> blacklist, NodeSelector nodeSelector) {_        try {_            RestClient.selectHosts(nodeTuple, blacklist, new AtomicInteger(0), nodeSelector)__            throw new AssertionError("expected selectHosts to fail")__        } catch (IOException e) {_            return e.getMessage()__        }_    };assert,that,link,rest,client,select,hosts,fails,on,the,provided,arguments,return,the,message,in,the,exception,thrown,by,the,failure;private,string,assert,select,all,rejected,node,tuple,list,node,node,tuple,map,http,host,dead,host,state,blacklist,node,selector,node,selector,try,rest,client,select,hosts,node,tuple,blacklist,new,atomic,integer,0,node,selector,throw,new,assertion,error,expected,select,hosts,to,fail,catch,ioexception,e,return,e,get,message
RestClientTests -> private String assertSelectAllRejected( NodeTuple<List<Node>> nodeTuple,             Map<HttpHost, DeadHostState> blacklist, NodeSelector nodeSelector);1529076503;Assert that {@link RestClient#selectHosts} fails on the provided arguments._@return the message in the exception thrown by the failure;private String assertSelectAllRejected( NodeTuple<List<Node>> nodeTuple,_            Map<HttpHost, DeadHostState> blacklist, NodeSelector nodeSelector) {_        try {_            RestClient.selectHosts(nodeTuple, blacklist, new AtomicInteger(0), nodeSelector)__            throw new AssertionError("expected selectHosts to fail")__        } catch (IOException e) {_            return e.getMessage()__        }_    };assert,that,link,rest,client,select,hosts,fails,on,the,provided,arguments,return,the,message,in,the,exception,thrown,by,the,failure;private,string,assert,select,all,rejected,node,tuple,list,node,node,tuple,map,http,host,dead,host,state,blacklist,node,selector,node,selector,try,rest,client,select,hosts,node,tuple,blacklist,new,atomic,integer,0,node,selector,throw,new,assertion,error,expected,select,hosts,to,fail,catch,ioexception,e,return,e,get,message
RestClientTests -> private String assertSelectAllRejected( NodeTuple<List<Node>> nodeTuple,             Map<HttpHost, DeadHostState> blacklist, NodeSelector nodeSelector);1529687475;Assert that {@link RestClient#selectHosts} fails on the provided arguments._@return the message in the exception thrown by the failure;private String assertSelectAllRejected( NodeTuple<List<Node>> nodeTuple,_            Map<HttpHost, DeadHostState> blacklist, NodeSelector nodeSelector) {_        try {_            RestClient.selectHosts(nodeTuple, blacklist, new AtomicInteger(0), nodeSelector)__            throw new AssertionError("expected selectHosts to fail")__        } catch (IOException e) {_            return e.getMessage()__        }_    };assert,that,link,rest,client,select,hosts,fails,on,the,provided,arguments,return,the,message,in,the,exception,thrown,by,the,failure;private,string,assert,select,all,rejected,node,tuple,list,node,node,tuple,map,http,host,dead,host,state,blacklist,node,selector,node,selector,try,rest,client,select,hosts,node,tuple,blacklist,new,atomic,integer,0,node,selector,throw,new,assertion,error,expected,select,hosts,to,fail,catch,ioexception,e,return,e,get,message
RestClientTests -> private static String assertSelectAllRejected( NodeTuple<List<Node>> nodeTuple,             Map<HttpHost, DeadHostState> blacklist, NodeSelector nodeSelector);1531179852;Assert that {@link RestClient#selectNodes} fails on the provided arguments._@return the message in the exception thrown by the failure;private static String assertSelectAllRejected( NodeTuple<List<Node>> nodeTuple,_            Map<HttpHost, DeadHostState> blacklist, NodeSelector nodeSelector) {_        try {_            RestClient.selectNodes(nodeTuple, blacklist, new AtomicInteger(0), nodeSelector)__            throw new AssertionError("expected selectHosts to fail")__        } catch (IOException e) {_            return e.getMessage()__        }_    };assert,that,link,rest,client,select,nodes,fails,on,the,provided,arguments,return,the,message,in,the,exception,thrown,by,the,failure;private,static,string,assert,select,all,rejected,node,tuple,list,node,node,tuple,map,http,host,dead,host,state,blacklist,node,selector,node,selector,try,rest,client,select,nodes,node,tuple,blacklist,new,atomic,integer,0,node,selector,throw,new,assertion,error,expected,select,hosts,to,fail,catch,ioexception,e,return,e,get,message
RestClientTests -> private static String assertSelectAllRejected( NodeTuple<List<Node>> nodeTuple,             Map<HttpHost, DeadHostState> blacklist, NodeSelector nodeSelector);1535965276;Assert that {@link RestClient#selectNodes} fails on the provided arguments._@return the message in the exception thrown by the failure;private static String assertSelectAllRejected( NodeTuple<List<Node>> nodeTuple,_            Map<HttpHost, DeadHostState> blacklist, NodeSelector nodeSelector) {_        try {_            RestClient.selectNodes(nodeTuple, blacklist, new AtomicInteger(0), nodeSelector)__            throw new AssertionError("expected selectHosts to fail")__        } catch (IOException e) {_            return e.getMessage()__        }_    };assert,that,link,rest,client,select,nodes,fails,on,the,provided,arguments,return,the,message,in,the,exception,thrown,by,the,failure;private,static,string,assert,select,all,rejected,node,tuple,list,node,node,tuple,map,http,host,dead,host,state,blacklist,node,selector,node,selector,try,rest,client,select,nodes,node,tuple,blacklist,new,atomic,integer,0,node,selector,throw,new,assertion,error,expected,select,hosts,to,fail,catch,ioexception,e,return,e,get,message
RestClientTests -> private static String assertSelectAllRejected( NodeTuple<List<Node>> nodeTuple,             Map<HttpHost, DeadHostState> blacklist, NodeSelector nodeSelector);1538170812;Assert that {@link RestClient#selectNodes} fails on the provided arguments._@return the message in the exception thrown by the failure;private static String assertSelectAllRejected( NodeTuple<List<Node>> nodeTuple,_            Map<HttpHost, DeadHostState> blacklist, NodeSelector nodeSelector) {_        try {_            RestClient.selectNodes(nodeTuple, blacklist, new AtomicInteger(0), nodeSelector)__            throw new AssertionError("expected selectHosts to fail")__        } catch (IOException e) {_            return e.getMessage()__        }_    };assert,that,link,rest,client,select,nodes,fails,on,the,provided,arguments,return,the,message,in,the,exception,thrown,by,the,failure;private,static,string,assert,select,all,rejected,node,tuple,list,node,node,tuple,map,http,host,dead,host,state,blacklist,node,selector,node,selector,try,rest,client,select,nodes,node,tuple,blacklist,new,atomic,integer,0,node,selector,throw,new,assertion,error,expected,select,hosts,to,fail,catch,ioexception,e,return,e,get,message
RestClientTests -> private static String assertSelectAllRejected( NodeTuple<List<Node>> nodeTuple,             Map<HttpHost, DeadHostState> blacklist, NodeSelector nodeSelector);1548457070;Assert that {@link RestClient#selectNodes} fails on the provided arguments._@return the message in the exception thrown by the failure;private static String assertSelectAllRejected( NodeTuple<List<Node>> nodeTuple,_            Map<HttpHost, DeadHostState> blacklist, NodeSelector nodeSelector) {_        try {_            RestClient.selectNodes(nodeTuple, blacklist, new AtomicInteger(0), nodeSelector)__            throw new AssertionError("expected selectHosts to fail")__        } catch (IOException e) {_            return e.getMessage()__        }_    };assert,that,link,rest,client,select,nodes,fails,on,the,provided,arguments,return,the,message,in,the,exception,thrown,by,the,failure;private,static,string,assert,select,all,rejected,node,tuple,list,node,node,tuple,map,http,host,dead,host,state,blacklist,node,selector,node,selector,try,rest,client,select,nodes,node,tuple,blacklist,new,atomic,integer,0,node,selector,throw,new,assertion,error,expected,select,hosts,to,fail,catch,ioexception,e,return,e,get,message
RestClientTests -> private static String assertSelectAllRejected( NodeTuple<List<Node>> nodeTuple,             Map<HttpHost, DeadHostState> blacklist, NodeSelector nodeSelector);1549439027;Assert that {@link RestClient#selectNodes} fails on the provided arguments._@return the message in the exception thrown by the failure;private static String assertSelectAllRejected( NodeTuple<List<Node>> nodeTuple,_            Map<HttpHost, DeadHostState> blacklist, NodeSelector nodeSelector) {_        try {_            RestClient.selectNodes(nodeTuple, blacklist, new AtomicInteger(0), nodeSelector)__            throw new AssertionError("expected selectHosts to fail")__        } catch (IOException e) {_            return e.getMessage()__        }_    };assert,that,link,rest,client,select,nodes,fails,on,the,provided,arguments,return,the,message,in,the,exception,thrown,by,the,failure;private,static,string,assert,select,all,rejected,node,tuple,list,node,node,tuple,map,http,host,dead,host,state,blacklist,node,selector,node,selector,try,rest,client,select,nodes,node,tuple,blacklist,new,atomic,integer,0,node,selector,throw,new,assertion,error,expected,select,hosts,to,fail,catch,ioexception,e,return,e,get,message
RestClientTests -> @Deprecated     public void testPerformAsyncOldStyleWithUnsupportedMethod() throws Exception;1525248068;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link #testPerformAsyncWithUnsupportedMethod()}.;@Deprecated_    public void testPerformAsyncOldStyleWithUnsupportedMethod() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            restClient.performRequestAsync("unsupported", randomAsciiLettersOfLength(5), new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    fail("should have failed because of unsupported method")__                }__                @Override_                public void onFailure(Exception exception) {_                    assertThat(exception, instanceOf(UnsupportedOperationException.class))__                    assertEquals("http method not supported: unsupported", exception.getMessage())__                    latch.countDown()__                }_            })__            latch.await()__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,test,perform,async,with,unsupported,method;deprecated,public,void,test,perform,async,old,style,with,unsupported,method,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,rest,client,perform,request,async,unsupported,random,ascii,letters,of,length,5,new,response,listener,override,public,void,on,success,response,response,fail,should,have,failed,because,of,unsupported,method,override,public,void,on,failure,exception,exception,assert,that,exception,instance,of,unsupported,operation,exception,class,assert,equals,http,method,not,supported,unsupported,exception,get,message,latch,count,down,latch,await
RestClientTests -> @Deprecated     public void testPerformAsyncOldStyleWithUnsupportedMethod() throws Exception;1526374795;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link #testPerformAsyncWithUnsupportedMethod()}.;@Deprecated_    public void testPerformAsyncOldStyleWithUnsupportedMethod() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            restClient.performRequestAsync("unsupported", randomAsciiLettersOfLength(5), new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    fail("should have failed because of unsupported method")__                }__                @Override_                public void onFailure(Exception exception) {_                    assertThat(exception, instanceOf(UnsupportedOperationException.class))__                    assertEquals("http method not supported: unsupported", exception.getMessage())__                    latch.countDown()__                }_            })__            latch.await()__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,test,perform,async,with,unsupported,method;deprecated,public,void,test,perform,async,old,style,with,unsupported,method,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,rest,client,perform,request,async,unsupported,random,ascii,letters,of,length,5,new,response,listener,override,public,void,on,success,response,response,fail,should,have,failed,because,of,unsupported,method,override,public,void,on,failure,exception,exception,assert,that,exception,instance,of,unsupported,operation,exception,class,assert,equals,http,method,not,supported,unsupported,exception,get,message,latch,count,down,latch,await
RestClientTests -> @Deprecated     public void testPerformAsyncOldStyleWithUnsupportedMethod() throws Exception;1527096592;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link #testPerformAsyncWithUnsupportedMethod()}.;@Deprecated_    public void testPerformAsyncOldStyleWithUnsupportedMethod() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            restClient.performRequestAsync("unsupported", randomAsciiLettersOfLength(5), new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    throw new UnsupportedOperationException("onSuccess cannot be called when using a mocked http client")__                }__                @Override_                public void onFailure(Exception exception) {_                    try {_                        assertThat(exception, instanceOf(UnsupportedOperationException.class))__                        assertEquals("http method not supported: unsupported", exception.getMessage())__                    } finally {_                        latch.countDown()__                    }_                }_            })__            assertTrue("time out waiting for request to return", latch.await(1000, TimeUnit.MILLISECONDS))__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,test,perform,async,with,unsupported,method;deprecated,public,void,test,perform,async,old,style,with,unsupported,method,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,rest,client,perform,request,async,unsupported,random,ascii,letters,of,length,5,new,response,listener,override,public,void,on,success,response,response,throw,new,unsupported,operation,exception,on,success,cannot,be,called,when,using,a,mocked,http,client,override,public,void,on,failure,exception,exception,try,assert,that,exception,instance,of,unsupported,operation,exception,class,assert,equals,http,method,not,supported,unsupported,exception,get,message,finally,latch,count,down,assert,true,time,out,waiting,for,request,to,return,latch,await,1000,time,unit,milliseconds
RestClientTests -> @Deprecated     public void testPerformAsyncOldStyleWithUnsupportedMethod() throws Exception;1527840262;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link #testPerformAsyncWithUnsupportedMethod()}.;@Deprecated_    public void testPerformAsyncOldStyleWithUnsupportedMethod() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            restClient.performRequestAsync("unsupported", randomAsciiLettersOfLength(5), new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    throw new UnsupportedOperationException("onSuccess cannot be called when using a mocked http client")__                }__                @Override_                public void onFailure(Exception exception) {_                    try {_                        assertThat(exception, instanceOf(UnsupportedOperationException.class))__                        assertEquals("http method not supported: unsupported", exception.getMessage())__                    } finally {_                        latch.countDown()__                    }_                }_            })__            assertTrue("time out waiting for request to return", latch.await(1000, TimeUnit.MILLISECONDS))__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,test,perform,async,with,unsupported,method;deprecated,public,void,test,perform,async,old,style,with,unsupported,method,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,rest,client,perform,request,async,unsupported,random,ascii,letters,of,length,5,new,response,listener,override,public,void,on,success,response,response,throw,new,unsupported,operation,exception,on,success,cannot,be,called,when,using,a,mocked,http,client,override,public,void,on,failure,exception,exception,try,assert,that,exception,instance,of,unsupported,operation,exception,class,assert,equals,http,method,not,supported,unsupported,exception,get,message,finally,latch,count,down,assert,true,time,out,waiting,for,request,to,return,latch,await,1000,time,unit,milliseconds
RestClientTests -> @Deprecated     public void testPerformAsyncOldStyleWithUnsupportedMethod() throws Exception;1528762805;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link #testPerformAsyncWithUnsupportedMethod()}.;@Deprecated_    public void testPerformAsyncOldStyleWithUnsupportedMethod() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            restClient.performRequestAsync("unsupported", randomAsciiLettersOfLength(5), new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    throw new UnsupportedOperationException("onSuccess cannot be called when using a mocked http client")__                }__                @Override_                public void onFailure(Exception exception) {_                    try {_                        assertThat(exception, instanceOf(UnsupportedOperationException.class))__                        assertEquals("http method not supported: unsupported", exception.getMessage())__                    } finally {_                        latch.countDown()__                    }_                }_            })__            assertTrue("time out waiting for request to return", latch.await(1000, TimeUnit.MILLISECONDS))__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,test,perform,async,with,unsupported,method;deprecated,public,void,test,perform,async,old,style,with,unsupported,method,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,rest,client,perform,request,async,unsupported,random,ascii,letters,of,length,5,new,response,listener,override,public,void,on,success,response,response,throw,new,unsupported,operation,exception,on,success,cannot,be,called,when,using,a,mocked,http,client,override,public,void,on,failure,exception,exception,try,assert,that,exception,instance,of,unsupported,operation,exception,class,assert,equals,http,method,not,supported,unsupported,exception,get,message,finally,latch,count,down,assert,true,time,out,waiting,for,request,to,return,latch,await,1000,time,unit,milliseconds
RestClientTests -> @Deprecated     public void testPerformAsyncOldStyleWithUnsupportedMethod() throws Exception;1529076503;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link #testPerformAsyncWithUnsupportedMethod()}.;@Deprecated_    public void testPerformAsyncOldStyleWithUnsupportedMethod() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            restClient.performRequestAsync("unsupported", randomAsciiLettersOfLength(5), new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    throw new UnsupportedOperationException("onSuccess cannot be called when using a mocked http client")__                }__                @Override_                public void onFailure(Exception exception) {_                    try {_                        assertThat(exception, instanceOf(UnsupportedOperationException.class))__                        assertEquals("http method not supported: unsupported", exception.getMessage())__                    } finally {_                        latch.countDown()__                    }_                }_            })__            assertTrue("time out waiting for request to return", latch.await(1000, TimeUnit.MILLISECONDS))__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,test,perform,async,with,unsupported,method;deprecated,public,void,test,perform,async,old,style,with,unsupported,method,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,rest,client,perform,request,async,unsupported,random,ascii,letters,of,length,5,new,response,listener,override,public,void,on,success,response,response,throw,new,unsupported,operation,exception,on,success,cannot,be,called,when,using,a,mocked,http,client,override,public,void,on,failure,exception,exception,try,assert,that,exception,instance,of,unsupported,operation,exception,class,assert,equals,http,method,not,supported,unsupported,exception,get,message,finally,latch,count,down,assert,true,time,out,waiting,for,request,to,return,latch,await,1000,time,unit,milliseconds
RestClientTests -> @Deprecated     public void testPerformAsyncOldStyleWithUnsupportedMethod() throws Exception;1529687475;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link #testPerformAsyncWithUnsupportedMethod()}.;@Deprecated_    public void testPerformAsyncOldStyleWithUnsupportedMethod() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            restClient.performRequestAsync("unsupported", randomAsciiLettersOfLength(5), new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    throw new UnsupportedOperationException("onSuccess cannot be called when using a mocked http client")__                }__                @Override_                public void onFailure(Exception exception) {_                    try {_                        assertThat(exception, instanceOf(UnsupportedOperationException.class))__                        assertEquals("http method not supported: unsupported", exception.getMessage())__                    } finally {_                        latch.countDown()__                    }_                }_            })__            assertTrue("time out waiting for request to return", latch.await(1000, TimeUnit.MILLISECONDS))__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,test,perform,async,with,unsupported,method;deprecated,public,void,test,perform,async,old,style,with,unsupported,method,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,rest,client,perform,request,async,unsupported,random,ascii,letters,of,length,5,new,response,listener,override,public,void,on,success,response,response,throw,new,unsupported,operation,exception,on,success,cannot,be,called,when,using,a,mocked,http,client,override,public,void,on,failure,exception,exception,try,assert,that,exception,instance,of,unsupported,operation,exception,class,assert,equals,http,method,not,supported,unsupported,exception,get,message,finally,latch,count,down,assert,true,time,out,waiting,for,request,to,return,latch,await,1000,time,unit,milliseconds
RestClientTests -> @Deprecated     public void testPerformAsyncOldStyleWithUnsupportedMethod() throws Exception;1531179852;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link #testPerformAsyncWithUnsupportedMethod()}.;@Deprecated_    public void testPerformAsyncOldStyleWithUnsupportedMethod() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            restClient.performRequestAsync("unsupported", randomAsciiLettersOfLength(5), new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    throw new UnsupportedOperationException("onSuccess cannot be called when using a mocked http client")__                }__                @Override_                public void onFailure(Exception exception) {_                    try {_                        assertThat(exception, instanceOf(UnsupportedOperationException.class))__                        assertEquals("http method not supported: unsupported", exception.getMessage())__                    } finally {_                        latch.countDown()__                    }_                }_            })__            assertTrue("time out waiting for request to return", latch.await(1000, TimeUnit.MILLISECONDS))__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,test,perform,async,with,unsupported,method;deprecated,public,void,test,perform,async,old,style,with,unsupported,method,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,rest,client,perform,request,async,unsupported,random,ascii,letters,of,length,5,new,response,listener,override,public,void,on,success,response,response,throw,new,unsupported,operation,exception,on,success,cannot,be,called,when,using,a,mocked,http,client,override,public,void,on,failure,exception,exception,try,assert,that,exception,instance,of,unsupported,operation,exception,class,assert,equals,http,method,not,supported,unsupported,exception,get,message,finally,latch,count,down,assert,true,time,out,waiting,for,request,to,return,latch,await,1000,time,unit,milliseconds
RestClientTests -> @Deprecated     public void testNullPath() throws IOException;1525248068;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testConstructor()}.;@Deprecated_    public void testNullPath() throws IOException {_        try (RestClient restClient = createRestClient()) {_            for (String method : getHttpMethods()) {_                try {_                    restClient.performRequest(method, null)__                    fail("path set to null should fail!")__                } catch (NullPointerException e) {_                    assertEquals("endpoint cannot be null", e.getMessage())__                }_            }_        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,constructor;deprecated,public,void,test,null,path,throws,ioexception,try,rest,client,rest,client,create,rest,client,for,string,method,get,http,methods,try,rest,client,perform,request,method,null,fail,path,set,to,null,should,fail,catch,null,pointer,exception,e,assert,equals,endpoint,cannot,be,null,e,get,message
RestClientTests -> @Deprecated     public void testNullPath() throws IOException;1526374795;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testConstructor()}.;@Deprecated_    public void testNullPath() throws IOException {_        try (RestClient restClient = createRestClient()) {_            for (String method : getHttpMethods()) {_                try {_                    restClient.performRequest(method, null)__                    fail("path set to null should fail!")__                } catch (NullPointerException e) {_                    assertEquals("endpoint cannot be null", e.getMessage())__                }_            }_        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,constructor;deprecated,public,void,test,null,path,throws,ioexception,try,rest,client,rest,client,create,rest,client,for,string,method,get,http,methods,try,rest,client,perform,request,method,null,fail,path,set,to,null,should,fail,catch,null,pointer,exception,e,assert,equals,endpoint,cannot,be,null,e,get,message
RestClientTests -> @Deprecated     public void testNullPath() throws IOException;1527096592;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testConstructor()}.;@Deprecated_    public void testNullPath() throws IOException {_        try (RestClient restClient = createRestClient()) {_            for (String method : getHttpMethods()) {_                try {_                    restClient.performRequest(method, null)__                    fail("path set to null should fail!")__                } catch (NullPointerException e) {_                    assertEquals("endpoint cannot be null", e.getMessage())__                }_            }_        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,constructor;deprecated,public,void,test,null,path,throws,ioexception,try,rest,client,rest,client,create,rest,client,for,string,method,get,http,methods,try,rest,client,perform,request,method,null,fail,path,set,to,null,should,fail,catch,null,pointer,exception,e,assert,equals,endpoint,cannot,be,null,e,get,message
RestClientTests -> @Deprecated     public void testNullPath() throws IOException;1527840262;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testConstructor()}.;@Deprecated_    public void testNullPath() throws IOException {_        try (RestClient restClient = createRestClient()) {_            for (String method : getHttpMethods()) {_                try {_                    restClient.performRequest(method, null)__                    fail("path set to null should fail!")__                } catch (NullPointerException e) {_                    assertEquals("endpoint cannot be null", e.getMessage())__                }_            }_        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,constructor;deprecated,public,void,test,null,path,throws,ioexception,try,rest,client,rest,client,create,rest,client,for,string,method,get,http,methods,try,rest,client,perform,request,method,null,fail,path,set,to,null,should,fail,catch,null,pointer,exception,e,assert,equals,endpoint,cannot,be,null,e,get,message
RestClientTests -> @Deprecated     public void testNullPath() throws IOException;1528762805;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testConstructor()}.;@Deprecated_    public void testNullPath() throws IOException {_        try (RestClient restClient = createRestClient()) {_            for (String method : getHttpMethods()) {_                try {_                    restClient.performRequest(method, null)__                    fail("path set to null should fail!")__                } catch (NullPointerException e) {_                    assertEquals("endpoint cannot be null", e.getMessage())__                }_            }_        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,constructor;deprecated,public,void,test,null,path,throws,ioexception,try,rest,client,rest,client,create,rest,client,for,string,method,get,http,methods,try,rest,client,perform,request,method,null,fail,path,set,to,null,should,fail,catch,null,pointer,exception,e,assert,equals,endpoint,cannot,be,null,e,get,message
RestClientTests -> @Deprecated     public void testNullPath() throws IOException;1529076503;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testConstructor()}.;@Deprecated_    public void testNullPath() throws IOException {_        try (RestClient restClient = createRestClient()) {_            for (String method : getHttpMethods()) {_                try {_                    restClient.performRequest(method, null)__                    fail("path set to null should fail!")__                } catch (NullPointerException e) {_                    assertEquals("endpoint cannot be null", e.getMessage())__                }_            }_        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,constructor;deprecated,public,void,test,null,path,throws,ioexception,try,rest,client,rest,client,create,rest,client,for,string,method,get,http,methods,try,rest,client,perform,request,method,null,fail,path,set,to,null,should,fail,catch,null,pointer,exception,e,assert,equals,endpoint,cannot,be,null,e,get,message
RestClientTests -> @Deprecated     public void testNullPath() throws IOException;1529687475;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testConstructor()}.;@Deprecated_    public void testNullPath() throws IOException {_        try (RestClient restClient = createRestClient()) {_            for (String method : getHttpMethods()) {_                try {_                    restClient.performRequest(method, null)__                    fail("path set to null should fail!")__                } catch (NullPointerException e) {_                    assertEquals("endpoint cannot be null", e.getMessage())__                }_            }_        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,constructor;deprecated,public,void,test,null,path,throws,ioexception,try,rest,client,rest,client,create,rest,client,for,string,method,get,http,methods,try,rest,client,perform,request,method,null,fail,path,set,to,null,should,fail,catch,null,pointer,exception,e,assert,equals,endpoint,cannot,be,null,e,get,message
RestClientTests -> @Deprecated     public void testNullPath() throws IOException;1531179852;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testConstructor()}.;@Deprecated_    public void testNullPath() throws IOException {_        try (RestClient restClient = createRestClient()) {_            for (String method : getHttpMethods()) {_                try {_                    restClient.performRequest(method, null)__                    fail("path set to null should fail!")__                } catch (NullPointerException e) {_                    assertEquals("endpoint cannot be null", e.getMessage())__                }_            }_        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,constructor;deprecated,public,void,test,null,path,throws,ioexception,try,rest,client,rest,client,create,rest,client,for,string,method,get,http,methods,try,rest,client,perform,request,method,null,fail,path,set,to,null,should,fail,catch,null,pointer,exception,e,assert,equals,endpoint,cannot,be,null,e,get,message
RestClientTests -> @Deprecated     public void testPerformOldStyleAsyncWithNullParams() throws Exception;1525248068;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testSetParameters()}.;@Deprecated_    public void testPerformOldStyleAsyncWithNullParams() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            restClient.performRequestAsync(randomAsciiLettersOfLength(5), randomAsciiLettersOfLength(5), null, new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    fail("should have failed because of null parameters")__                }__                @Override_                public void onFailure(Exception exception) {_                    assertThat(exception, instanceOf(NullPointerException.class))__                    assertEquals("parameters cannot be null", exception.getMessage())__                    latch.countDown()__                }_            })__            latch.await()__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,set,parameters;deprecated,public,void,test,perform,old,style,async,with,null,params,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,rest,client,perform,request,async,random,ascii,letters,of,length,5,random,ascii,letters,of,length,5,null,new,response,listener,override,public,void,on,success,response,response,fail,should,have,failed,because,of,null,parameters,override,public,void,on,failure,exception,exception,assert,that,exception,instance,of,null,pointer,exception,class,assert,equals,parameters,cannot,be,null,exception,get,message,latch,count,down,latch,await
RestClientTests -> @Deprecated     public void testPerformOldStyleAsyncWithNullParams() throws Exception;1526374795;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testAddParameters()}.;@Deprecated_    public void testPerformOldStyleAsyncWithNullParams() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            restClient.performRequestAsync(randomAsciiLettersOfLength(5), randomAsciiLettersOfLength(5), null, new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    fail("should have failed because of null parameters")__                }__                @Override_                public void onFailure(Exception exception) {_                    assertThat(exception, instanceOf(NullPointerException.class))__                    assertEquals("parameters cannot be null", exception.getMessage())__                    latch.countDown()__                }_            })__            latch.await()__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,add,parameters;deprecated,public,void,test,perform,old,style,async,with,null,params,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,rest,client,perform,request,async,random,ascii,letters,of,length,5,random,ascii,letters,of,length,5,null,new,response,listener,override,public,void,on,success,response,response,fail,should,have,failed,because,of,null,parameters,override,public,void,on,failure,exception,exception,assert,that,exception,instance,of,null,pointer,exception,class,assert,equals,parameters,cannot,be,null,exception,get,message,latch,count,down,latch,await
RestClientTests -> @Deprecated     public void testPerformOldStyleAsyncWithNullParams() throws Exception;1527096592;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testAddParameters()}.;@Deprecated_    public void testPerformOldStyleAsyncWithNullParams() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            restClient.performRequestAsync(randomAsciiLettersOfLength(5), randomAsciiLettersOfLength(5), null, new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    throw new UnsupportedOperationException("onSuccess cannot be called when using a mocked http client")__                }__                @Override_                public void onFailure(Exception exception) {_                    try {_                        assertThat(exception, instanceOf(NullPointerException.class))__                        assertEquals("parameters cannot be null", exception.getMessage())__                    } finally {_                        latch.countDown()__                    }_                }_            })__            assertTrue("time out waiting for request to return", latch.await(1000, TimeUnit.MILLISECONDS))__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,add,parameters;deprecated,public,void,test,perform,old,style,async,with,null,params,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,rest,client,perform,request,async,random,ascii,letters,of,length,5,random,ascii,letters,of,length,5,null,new,response,listener,override,public,void,on,success,response,response,throw,new,unsupported,operation,exception,on,success,cannot,be,called,when,using,a,mocked,http,client,override,public,void,on,failure,exception,exception,try,assert,that,exception,instance,of,null,pointer,exception,class,assert,equals,parameters,cannot,be,null,exception,get,message,finally,latch,count,down,assert,true,time,out,waiting,for,request,to,return,latch,await,1000,time,unit,milliseconds
RestClientTests -> @Deprecated     public void testPerformOldStyleAsyncWithNullParams() throws Exception;1527840262;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testAddParameters()}.;@Deprecated_    public void testPerformOldStyleAsyncWithNullParams() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            restClient.performRequestAsync(randomAsciiLettersOfLength(5), randomAsciiLettersOfLength(5), null, new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    throw new UnsupportedOperationException("onSuccess cannot be called when using a mocked http client")__                }__                @Override_                public void onFailure(Exception exception) {_                    try {_                        assertThat(exception, instanceOf(NullPointerException.class))__                        assertEquals("parameters cannot be null", exception.getMessage())__                    } finally {_                        latch.countDown()__                    }_                }_            })__            assertTrue("time out waiting for request to return", latch.await(1000, TimeUnit.MILLISECONDS))__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,add,parameters;deprecated,public,void,test,perform,old,style,async,with,null,params,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,rest,client,perform,request,async,random,ascii,letters,of,length,5,random,ascii,letters,of,length,5,null,new,response,listener,override,public,void,on,success,response,response,throw,new,unsupported,operation,exception,on,success,cannot,be,called,when,using,a,mocked,http,client,override,public,void,on,failure,exception,exception,try,assert,that,exception,instance,of,null,pointer,exception,class,assert,equals,parameters,cannot,be,null,exception,get,message,finally,latch,count,down,assert,true,time,out,waiting,for,request,to,return,latch,await,1000,time,unit,milliseconds
RestClientTests -> @Deprecated     public void testPerformOldStyleAsyncWithNullParams() throws Exception;1528762805;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testAddParameters()}.;@Deprecated_    public void testPerformOldStyleAsyncWithNullParams() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            restClient.performRequestAsync(randomAsciiLettersOfLength(5), randomAsciiLettersOfLength(5), null, new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    throw new UnsupportedOperationException("onSuccess cannot be called when using a mocked http client")__                }__                @Override_                public void onFailure(Exception exception) {_                    try {_                        assertThat(exception, instanceOf(NullPointerException.class))__                        assertEquals("parameters cannot be null", exception.getMessage())__                    } finally {_                        latch.countDown()__                    }_                }_            })__            assertTrue("time out waiting for request to return", latch.await(1000, TimeUnit.MILLISECONDS))__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,add,parameters;deprecated,public,void,test,perform,old,style,async,with,null,params,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,rest,client,perform,request,async,random,ascii,letters,of,length,5,random,ascii,letters,of,length,5,null,new,response,listener,override,public,void,on,success,response,response,throw,new,unsupported,operation,exception,on,success,cannot,be,called,when,using,a,mocked,http,client,override,public,void,on,failure,exception,exception,try,assert,that,exception,instance,of,null,pointer,exception,class,assert,equals,parameters,cannot,be,null,exception,get,message,finally,latch,count,down,assert,true,time,out,waiting,for,request,to,return,latch,await,1000,time,unit,milliseconds
RestClientTests -> @Deprecated     public void testPerformOldStyleAsyncWithNullParams() throws Exception;1529076503;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testAddParameters()}.;@Deprecated_    public void testPerformOldStyleAsyncWithNullParams() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            restClient.performRequestAsync(randomAsciiLettersOfLength(5), randomAsciiLettersOfLength(5), null, new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    throw new UnsupportedOperationException("onSuccess cannot be called when using a mocked http client")__                }__                @Override_                public void onFailure(Exception exception) {_                    try {_                        assertThat(exception, instanceOf(NullPointerException.class))__                        assertEquals("parameters cannot be null", exception.getMessage())__                    } finally {_                        latch.countDown()__                    }_                }_            })__            assertTrue("time out waiting for request to return", latch.await(1000, TimeUnit.MILLISECONDS))__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,add,parameters;deprecated,public,void,test,perform,old,style,async,with,null,params,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,rest,client,perform,request,async,random,ascii,letters,of,length,5,random,ascii,letters,of,length,5,null,new,response,listener,override,public,void,on,success,response,response,throw,new,unsupported,operation,exception,on,success,cannot,be,called,when,using,a,mocked,http,client,override,public,void,on,failure,exception,exception,try,assert,that,exception,instance,of,null,pointer,exception,class,assert,equals,parameters,cannot,be,null,exception,get,message,finally,latch,count,down,assert,true,time,out,waiting,for,request,to,return,latch,await,1000,time,unit,milliseconds
RestClientTests -> @Deprecated     public void testPerformOldStyleAsyncWithNullParams() throws Exception;1529687475;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testAddParameters()}.;@Deprecated_    public void testPerformOldStyleAsyncWithNullParams() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            restClient.performRequestAsync(randomAsciiLettersOfLength(5), randomAsciiLettersOfLength(5), null, new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    throw new UnsupportedOperationException("onSuccess cannot be called when using a mocked http client")__                }__                @Override_                public void onFailure(Exception exception) {_                    try {_                        assertThat(exception, instanceOf(NullPointerException.class))__                        assertEquals("parameters cannot be null", exception.getMessage())__                    } finally {_                        latch.countDown()__                    }_                }_            })__            assertTrue("time out waiting for request to return", latch.await(1000, TimeUnit.MILLISECONDS))__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,add,parameters;deprecated,public,void,test,perform,old,style,async,with,null,params,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,rest,client,perform,request,async,random,ascii,letters,of,length,5,random,ascii,letters,of,length,5,null,new,response,listener,override,public,void,on,success,response,response,throw,new,unsupported,operation,exception,on,success,cannot,be,called,when,using,a,mocked,http,client,override,public,void,on,failure,exception,exception,try,assert,that,exception,instance,of,null,pointer,exception,class,assert,equals,parameters,cannot,be,null,exception,get,message,finally,latch,count,down,assert,true,time,out,waiting,for,request,to,return,latch,await,1000,time,unit,milliseconds
RestClientTests -> @Deprecated     public void testPerformOldStyleAsyncWithNullParams() throws Exception;1531179852;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testAddParameters()}.;@Deprecated_    public void testPerformOldStyleAsyncWithNullParams() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            restClient.performRequestAsync(randomAsciiLettersOfLength(5), randomAsciiLettersOfLength(5), null, new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    throw new UnsupportedOperationException("onSuccess cannot be called when using a mocked http client")__                }__                @Override_                public void onFailure(Exception exception) {_                    try {_                        assertThat(exception, instanceOf(NullPointerException.class))__                        assertEquals("parameters cannot be null", exception.getMessage())__                    } finally {_                        latch.countDown()__                    }_                }_            })__            assertTrue("time out waiting for request to return", latch.await(1000, TimeUnit.MILLISECONDS))__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,add,parameters;deprecated,public,void,test,perform,old,style,async,with,null,params,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,rest,client,perform,request,async,random,ascii,letters,of,length,5,random,ascii,letters,of,length,5,null,new,response,listener,override,public,void,on,success,response,response,throw,new,unsupported,operation,exception,on,success,cannot,be,called,when,using,a,mocked,http,client,override,public,void,on,failure,exception,exception,try,assert,that,exception,instance,of,null,pointer,exception,class,assert,equals,parameters,cannot,be,null,exception,get,message,finally,latch,count,down,assert,true,time,out,waiting,for,request,to,return,latch,await,1000,time,unit,milliseconds
RestClientTests -> @Deprecated     public void testPerformAsyncOldStyleWithWrongEndpoint() throws Exception;1525248068;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link #testPerformAsyncWithWrongEndpoint()}.;@Deprecated_    public void testPerformAsyncOldStyleWithWrongEndpoint() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            restClient.performRequestAsync("GET", "::http:///", new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    fail("should have failed because of wrong endpoint")__                }__                @Override_                public void onFailure(Exception exception) {_                    assertThat(exception, instanceOf(IllegalArgumentException.class))__                    assertEquals("Expected scheme name at index 0: ::http:///", exception.getMessage())__                    latch.countDown()__                }_            })__            latch.await()__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,test,perform,async,with,wrong,endpoint;deprecated,public,void,test,perform,async,old,style,with,wrong,endpoint,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,rest,client,perform,request,async,get,http,new,response,listener,override,public,void,on,success,response,response,fail,should,have,failed,because,of,wrong,endpoint,override,public,void,on,failure,exception,exception,assert,that,exception,instance,of,illegal,argument,exception,class,assert,equals,expected,scheme,name,at,index,0,http,exception,get,message,latch,count,down,latch,await
RestClientTests -> @Deprecated     public void testPerformAsyncOldStyleWithWrongEndpoint() throws Exception;1526374795;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link #testPerformAsyncWithWrongEndpoint()}.;@Deprecated_    public void testPerformAsyncOldStyleWithWrongEndpoint() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            restClient.performRequestAsync("GET", "::http:///", new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    fail("should have failed because of wrong endpoint")__                }__                @Override_                public void onFailure(Exception exception) {_                    assertThat(exception, instanceOf(IllegalArgumentException.class))__                    assertEquals("Expected scheme name at index 0: ::http:///", exception.getMessage())__                    latch.countDown()__                }_            })__            latch.await()__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,test,perform,async,with,wrong,endpoint;deprecated,public,void,test,perform,async,old,style,with,wrong,endpoint,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,rest,client,perform,request,async,get,http,new,response,listener,override,public,void,on,success,response,response,fail,should,have,failed,because,of,wrong,endpoint,override,public,void,on,failure,exception,exception,assert,that,exception,instance,of,illegal,argument,exception,class,assert,equals,expected,scheme,name,at,index,0,http,exception,get,message,latch,count,down,latch,await
RestClientTests -> @Deprecated     public void testPerformAsyncOldStyleWithWrongEndpoint() throws Exception;1527096592;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link #testPerformAsyncWithWrongEndpoint()}.;@Deprecated_    public void testPerformAsyncOldStyleWithWrongEndpoint() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            restClient.performRequestAsync("GET", "::http:///", new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    throw new UnsupportedOperationException("onSuccess cannot be called when using a mocked http client")__                }__                @Override_                public void onFailure(Exception exception) {_                    try {_                        assertThat(exception, instanceOf(IllegalArgumentException.class))__                        assertEquals("Expected scheme name at index 0: ::http:///", exception.getMessage())__                    } finally {_                        latch.countDown()__                    }_                }_            })__            assertTrue("time out waiting for request to return", latch.await(1000, TimeUnit.MILLISECONDS))__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,test,perform,async,with,wrong,endpoint;deprecated,public,void,test,perform,async,old,style,with,wrong,endpoint,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,rest,client,perform,request,async,get,http,new,response,listener,override,public,void,on,success,response,response,throw,new,unsupported,operation,exception,on,success,cannot,be,called,when,using,a,mocked,http,client,override,public,void,on,failure,exception,exception,try,assert,that,exception,instance,of,illegal,argument,exception,class,assert,equals,expected,scheme,name,at,index,0,http,exception,get,message,finally,latch,count,down,assert,true,time,out,waiting,for,request,to,return,latch,await,1000,time,unit,milliseconds
RestClientTests -> @Deprecated     public void testPerformAsyncOldStyleWithWrongEndpoint() throws Exception;1527840262;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link #testPerformAsyncWithWrongEndpoint()}.;@Deprecated_    public void testPerformAsyncOldStyleWithWrongEndpoint() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            restClient.performRequestAsync("GET", "::http:///", new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    throw new UnsupportedOperationException("onSuccess cannot be called when using a mocked http client")__                }__                @Override_                public void onFailure(Exception exception) {_                    try {_                        assertThat(exception, instanceOf(IllegalArgumentException.class))__                        assertEquals("Expected scheme name at index 0: ::http:///", exception.getMessage())__                    } finally {_                        latch.countDown()__                    }_                }_            })__            assertTrue("time out waiting for request to return", latch.await(1000, TimeUnit.MILLISECONDS))__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,test,perform,async,with,wrong,endpoint;deprecated,public,void,test,perform,async,old,style,with,wrong,endpoint,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,rest,client,perform,request,async,get,http,new,response,listener,override,public,void,on,success,response,response,throw,new,unsupported,operation,exception,on,success,cannot,be,called,when,using,a,mocked,http,client,override,public,void,on,failure,exception,exception,try,assert,that,exception,instance,of,illegal,argument,exception,class,assert,equals,expected,scheme,name,at,index,0,http,exception,get,message,finally,latch,count,down,assert,true,time,out,waiting,for,request,to,return,latch,await,1000,time,unit,milliseconds
RestClientTests -> @Deprecated     public void testPerformAsyncOldStyleWithWrongEndpoint() throws Exception;1528762805;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link #testPerformAsyncWithWrongEndpoint()}.;@Deprecated_    public void testPerformAsyncOldStyleWithWrongEndpoint() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            restClient.performRequestAsync("GET", "::http:///", new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    throw new UnsupportedOperationException("onSuccess cannot be called when using a mocked http client")__                }__                @Override_                public void onFailure(Exception exception) {_                    try {_                        assertThat(exception, instanceOf(IllegalArgumentException.class))__                        assertEquals("Expected scheme name at index 0: ::http:///", exception.getMessage())__                    } finally {_                        latch.countDown()__                    }_                }_            })__            assertTrue("time out waiting for request to return", latch.await(1000, TimeUnit.MILLISECONDS))__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,test,perform,async,with,wrong,endpoint;deprecated,public,void,test,perform,async,old,style,with,wrong,endpoint,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,rest,client,perform,request,async,get,http,new,response,listener,override,public,void,on,success,response,response,throw,new,unsupported,operation,exception,on,success,cannot,be,called,when,using,a,mocked,http,client,override,public,void,on,failure,exception,exception,try,assert,that,exception,instance,of,illegal,argument,exception,class,assert,equals,expected,scheme,name,at,index,0,http,exception,get,message,finally,latch,count,down,assert,true,time,out,waiting,for,request,to,return,latch,await,1000,time,unit,milliseconds
RestClientTests -> @Deprecated     public void testPerformAsyncOldStyleWithWrongEndpoint() throws Exception;1529076503;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link #testPerformAsyncWithWrongEndpoint()}.;@Deprecated_    public void testPerformAsyncOldStyleWithWrongEndpoint() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            restClient.performRequestAsync("GET", "::http:///", new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    throw new UnsupportedOperationException("onSuccess cannot be called when using a mocked http client")__                }__                @Override_                public void onFailure(Exception exception) {_                    try {_                        assertThat(exception, instanceOf(IllegalArgumentException.class))__                        assertEquals("Expected scheme name at index 0: ::http:///", exception.getMessage())__                    } finally {_                        latch.countDown()__                    }_                }_            })__            assertTrue("time out waiting for request to return", latch.await(1000, TimeUnit.MILLISECONDS))__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,test,perform,async,with,wrong,endpoint;deprecated,public,void,test,perform,async,old,style,with,wrong,endpoint,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,rest,client,perform,request,async,get,http,new,response,listener,override,public,void,on,success,response,response,throw,new,unsupported,operation,exception,on,success,cannot,be,called,when,using,a,mocked,http,client,override,public,void,on,failure,exception,exception,try,assert,that,exception,instance,of,illegal,argument,exception,class,assert,equals,expected,scheme,name,at,index,0,http,exception,get,message,finally,latch,count,down,assert,true,time,out,waiting,for,request,to,return,latch,await,1000,time,unit,milliseconds
RestClientTests -> @Deprecated     public void testPerformAsyncOldStyleWithWrongEndpoint() throws Exception;1529687475;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link #testPerformAsyncWithWrongEndpoint()}.;@Deprecated_    public void testPerformAsyncOldStyleWithWrongEndpoint() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            restClient.performRequestAsync("GET", "::http:///", new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    throw new UnsupportedOperationException("onSuccess cannot be called when using a mocked http client")__                }__                @Override_                public void onFailure(Exception exception) {_                    try {_                        assertThat(exception, instanceOf(IllegalArgumentException.class))__                        assertEquals("Expected scheme name at index 0: ::http:///", exception.getMessage())__                    } finally {_                        latch.countDown()__                    }_                }_            })__            assertTrue("time out waiting for request to return", latch.await(1000, TimeUnit.MILLISECONDS))__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,test,perform,async,with,wrong,endpoint;deprecated,public,void,test,perform,async,old,style,with,wrong,endpoint,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,rest,client,perform,request,async,get,http,new,response,listener,override,public,void,on,success,response,response,throw,new,unsupported,operation,exception,on,success,cannot,be,called,when,using,a,mocked,http,client,override,public,void,on,failure,exception,exception,try,assert,that,exception,instance,of,illegal,argument,exception,class,assert,equals,expected,scheme,name,at,index,0,http,exception,get,message,finally,latch,count,down,assert,true,time,out,waiting,for,request,to,return,latch,await,1000,time,unit,milliseconds
RestClientTests -> @Deprecated     public void testPerformAsyncOldStyleWithWrongEndpoint() throws Exception;1531179852;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link #testPerformAsyncWithWrongEndpoint()}.;@Deprecated_    public void testPerformAsyncOldStyleWithWrongEndpoint() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            restClient.performRequestAsync("GET", "::http:///", new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    throw new UnsupportedOperationException("onSuccess cannot be called when using a mocked http client")__                }__                @Override_                public void onFailure(Exception exception) {_                    try {_                        assertThat(exception, instanceOf(IllegalArgumentException.class))__                        assertEquals("Expected scheme name at index 0: ::http:///", exception.getMessage())__                    } finally {_                        latch.countDown()__                    }_                }_            })__            assertTrue("time out waiting for request to return", latch.await(1000, TimeUnit.MILLISECONDS))__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,test,perform,async,with,wrong,endpoint;deprecated,public,void,test,perform,async,old,style,with,wrong,endpoint,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,rest,client,perform,request,async,get,http,new,response,listener,override,public,void,on,success,response,response,throw,new,unsupported,operation,exception,on,success,cannot,be,called,when,using,a,mocked,http,client,override,public,void,on,failure,exception,exception,try,assert,that,exception,instance,of,illegal,argument,exception,class,assert,equals,expected,scheme,name,at,index,0,http,exception,get,message,finally,latch,count,down,assert,true,time,out,waiting,for,request,to,return,latch,await,1000,time,unit,milliseconds
RestClientTests -> @Deprecated     public void testPerformOldStyleAsyncWithNullHeaders() throws Exception;1525248068;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testSetHeaders()}.;@Deprecated_    public void testPerformOldStyleAsyncWithNullHeaders() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            ResponseListener listener = new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    fail("should have failed because of null headers")__                }__                @Override_                public void onFailure(Exception exception) {_                    assertThat(exception, instanceOf(NullPointerException.class))__                    assertEquals("header cannot be null", exception.getMessage())__                    latch.countDown()__                }_            }__            restClient.performRequestAsync("GET", randomAsciiLettersOfLength(5), listener, (Header) null)__            latch.await()__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,set,headers;deprecated,public,void,test,perform,old,style,async,with,null,headers,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,response,listener,listener,new,response,listener,override,public,void,on,success,response,response,fail,should,have,failed,because,of,null,headers,override,public,void,on,failure,exception,exception,assert,that,exception,instance,of,null,pointer,exception,class,assert,equals,header,cannot,be,null,exception,get,message,latch,count,down,rest,client,perform,request,async,get,random,ascii,letters,of,length,5,listener,header,null,latch,await
RestClientTests -> @Deprecated     public void testPerformOldStyleAsyncWithNullHeaders() throws Exception;1526374795;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testSetHeaders()}.;@Deprecated_    public void testPerformOldStyleAsyncWithNullHeaders() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            ResponseListener listener = new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    fail("should have failed because of null headers")__                }__                @Override_                public void onFailure(Exception exception) {_                    assertThat(exception, instanceOf(NullPointerException.class))__                    assertEquals("header cannot be null", exception.getMessage())__                    latch.countDown()__                }_            }__            restClient.performRequestAsync("GET", randomAsciiLettersOfLength(5), listener, (Header) null)__            latch.await()__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,set,headers;deprecated,public,void,test,perform,old,style,async,with,null,headers,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,response,listener,listener,new,response,listener,override,public,void,on,success,response,response,fail,should,have,failed,because,of,null,headers,override,public,void,on,failure,exception,exception,assert,that,exception,instance,of,null,pointer,exception,class,assert,equals,header,cannot,be,null,exception,get,message,latch,count,down,rest,client,perform,request,async,get,random,ascii,letters,of,length,5,listener,header,null,latch,await
RestClientTests -> @Deprecated     public void testPerformOldStyleAsyncWithNullHeaders() throws Exception;1527096592;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testAddHeader()}.;@Deprecated_    public void testPerformOldStyleAsyncWithNullHeaders() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            ResponseListener listener = new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    throw new UnsupportedOperationException("onSuccess cannot be called when using a mocked http client")__                }__                @Override_                public void onFailure(Exception exception) {_                    try {_                        assertThat(exception, instanceOf(NullPointerException.class))__                        assertEquals("header cannot be null", exception.getMessage())__                    } finally {_                        latch.countDown()__                    }_                }_            }__            restClient.performRequestAsync("GET", randomAsciiLettersOfLength(5), listener, (Header) null)__            assertTrue("time out waiting for request to return", latch.await(1000, TimeUnit.MILLISECONDS))__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,add,header;deprecated,public,void,test,perform,old,style,async,with,null,headers,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,response,listener,listener,new,response,listener,override,public,void,on,success,response,response,throw,new,unsupported,operation,exception,on,success,cannot,be,called,when,using,a,mocked,http,client,override,public,void,on,failure,exception,exception,try,assert,that,exception,instance,of,null,pointer,exception,class,assert,equals,header,cannot,be,null,exception,get,message,finally,latch,count,down,rest,client,perform,request,async,get,random,ascii,letters,of,length,5,listener,header,null,assert,true,time,out,waiting,for,request,to,return,latch,await,1000,time,unit,milliseconds
RestClientTests -> @Deprecated     public void testPerformOldStyleAsyncWithNullHeaders() throws Exception;1527840262;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testAddHeader()}.;@Deprecated_    public void testPerformOldStyleAsyncWithNullHeaders() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            ResponseListener listener = new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    throw new UnsupportedOperationException("onSuccess cannot be called when using a mocked http client")__                }__                @Override_                public void onFailure(Exception exception) {_                    try {_                        assertThat(exception, instanceOf(NullPointerException.class))__                        assertEquals("header cannot be null", exception.getMessage())__                    } finally {_                        latch.countDown()__                    }_                }_            }__            restClient.performRequestAsync("GET", randomAsciiLettersOfLength(5), listener, (Header) null)__            assertTrue("time out waiting for request to return", latch.await(1000, TimeUnit.MILLISECONDS))__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,add,header;deprecated,public,void,test,perform,old,style,async,with,null,headers,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,response,listener,listener,new,response,listener,override,public,void,on,success,response,response,throw,new,unsupported,operation,exception,on,success,cannot,be,called,when,using,a,mocked,http,client,override,public,void,on,failure,exception,exception,try,assert,that,exception,instance,of,null,pointer,exception,class,assert,equals,header,cannot,be,null,exception,get,message,finally,latch,count,down,rest,client,perform,request,async,get,random,ascii,letters,of,length,5,listener,header,null,assert,true,time,out,waiting,for,request,to,return,latch,await,1000,time,unit,milliseconds
RestClientTests -> @Deprecated     public void testPerformOldStyleAsyncWithNullHeaders() throws Exception;1528762805;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testAddHeader()}.;@Deprecated_    public void testPerformOldStyleAsyncWithNullHeaders() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            ResponseListener listener = new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    throw new UnsupportedOperationException("onSuccess cannot be called when using a mocked http client")__                }__                @Override_                public void onFailure(Exception exception) {_                    try {_                        assertThat(exception, instanceOf(NullPointerException.class))__                        assertEquals("header cannot be null", exception.getMessage())__                    } finally {_                        latch.countDown()__                    }_                }_            }__            restClient.performRequestAsync("GET", randomAsciiLettersOfLength(5), listener, (Header) null)__            assertTrue("time out waiting for request to return", latch.await(1000, TimeUnit.MILLISECONDS))__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,add,header;deprecated,public,void,test,perform,old,style,async,with,null,headers,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,response,listener,listener,new,response,listener,override,public,void,on,success,response,response,throw,new,unsupported,operation,exception,on,success,cannot,be,called,when,using,a,mocked,http,client,override,public,void,on,failure,exception,exception,try,assert,that,exception,instance,of,null,pointer,exception,class,assert,equals,header,cannot,be,null,exception,get,message,finally,latch,count,down,rest,client,perform,request,async,get,random,ascii,letters,of,length,5,listener,header,null,assert,true,time,out,waiting,for,request,to,return,latch,await,1000,time,unit,milliseconds
RestClientTests -> @Deprecated     public void testPerformOldStyleAsyncWithNullHeaders() throws Exception;1529076503;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testAddHeader()}.;@Deprecated_    public void testPerformOldStyleAsyncWithNullHeaders() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            ResponseListener listener = new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    throw new UnsupportedOperationException("onSuccess cannot be called when using a mocked http client")__                }__                @Override_                public void onFailure(Exception exception) {_                    try {_                        assertThat(exception, instanceOf(NullPointerException.class))__                        assertEquals("header cannot be null", exception.getMessage())__                    } finally {_                        latch.countDown()__                    }_                }_            }__            restClient.performRequestAsync("GET", randomAsciiLettersOfLength(5), listener, (Header) null)__            assertTrue("time out waiting for request to return", latch.await(1000, TimeUnit.MILLISECONDS))__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,add,header;deprecated,public,void,test,perform,old,style,async,with,null,headers,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,response,listener,listener,new,response,listener,override,public,void,on,success,response,response,throw,new,unsupported,operation,exception,on,success,cannot,be,called,when,using,a,mocked,http,client,override,public,void,on,failure,exception,exception,try,assert,that,exception,instance,of,null,pointer,exception,class,assert,equals,header,cannot,be,null,exception,get,message,finally,latch,count,down,rest,client,perform,request,async,get,random,ascii,letters,of,length,5,listener,header,null,assert,true,time,out,waiting,for,request,to,return,latch,await,1000,time,unit,milliseconds
RestClientTests -> @Deprecated     public void testPerformOldStyleAsyncWithNullHeaders() throws Exception;1529687475;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testAddHeader()}.;@Deprecated_    public void testPerformOldStyleAsyncWithNullHeaders() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            ResponseListener listener = new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    throw new UnsupportedOperationException("onSuccess cannot be called when using a mocked http client")__                }__                @Override_                public void onFailure(Exception exception) {_                    try {_                        assertThat(exception, instanceOf(NullPointerException.class))__                        assertEquals("header cannot be null", exception.getMessage())__                    } finally {_                        latch.countDown()__                    }_                }_            }__            restClient.performRequestAsync("GET", randomAsciiLettersOfLength(5), listener, (Header) null)__            assertTrue("time out waiting for request to return", latch.await(1000, TimeUnit.MILLISECONDS))__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests,test,add,header;deprecated,public,void,test,perform,old,style,async,with,null,headers,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,response,listener,listener,new,response,listener,override,public,void,on,success,response,response,throw,new,unsupported,operation,exception,on,success,cannot,be,called,when,using,a,mocked,http,client,override,public,void,on,failure,exception,exception,try,assert,that,exception,instance,of,null,pointer,exception,class,assert,equals,header,cannot,be,null,exception,get,message,finally,latch,count,down,rest,client,perform,request,async,get,random,ascii,letters,of,length,5,listener,header,null,assert,true,time,out,waiting,for,request,to,return,latch,await,1000,time,unit,milliseconds
RestClientTests -> @Deprecated     public void testPerformOldStyleAsyncWithNullHeaders() throws Exception;1531179852;@deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests}.;@Deprecated_    public void testPerformOldStyleAsyncWithNullHeaders() throws Exception {_        final CountDownLatch latch = new CountDownLatch(1)__        try (RestClient restClient = createRestClient()) {_            ResponseListener listener = new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    throw new UnsupportedOperationException("onSuccess cannot be called when using a mocked http client")__                }__                @Override_                public void onFailure(Exception exception) {_                    try {_                        assertThat(exception, instanceOf(NullPointerException.class))__                        assertEquals("header cannot be null", exception.getMessage())__                    } finally {_                        latch.countDown()__                    }_                }_            }__            restClient.performRequestAsync("GET", randomAsciiLettersOfLength(5), listener, (Header) null)__            assertTrue("time out waiting for request to return", latch.await(1000, TimeUnit.MILLISECONDS))__        }_    };deprecated,will,remove,method,in,7,0,but,needs,tests,until,then,replaced,by,link,request,tests;deprecated,public,void,test,perform,old,style,async,with,null,headers,throws,exception,final,count,down,latch,latch,new,count,down,latch,1,try,rest,client,rest,client,create,rest,client,response,listener,listener,new,response,listener,override,public,void,on,success,response,response,throw,new,unsupported,operation,exception,on,success,cannot,be,called,when,using,a,mocked,http,client,override,public,void,on,failure,exception,exception,try,assert,that,exception,instance,of,null,pointer,exception,class,assert,equals,header,cannot,be,null,exception,get,message,finally,latch,count,down,rest,client,perform,request,async,get,random,ascii,letters,of,length,5,listener,header,null,assert,true,time,out,waiting,for,request,to,return,latch,await,1000,time,unit,milliseconds
