# id;timestamp;commentText;codeText;commentWords;codeWords
RestClientSingleHostIntegTests -> public void testPreemptiveAuthEnabled() throws IOException;1524684173;Verify that credentials are sent on the first request with preemptive auth enabled (default when provided with credentials).;public void testPreemptiveAuthEnabled() throws IOException  {_        final String[] methods = { "POST", "PUT", "GET", "DELETE" }___        try (RestClient restClient = createRestClient(true, true)) {_            for (final String method : methods) {_                final Response response = bodyTest(restClient, method)___                assertThat(response.getHeader("Authorization"), startsWith("Basic"))__            }_        }_    };verify,that,credentials,are,sent,on,the,first,request,with,preemptive,auth,enabled,default,when,provided,with,credentials;public,void,test,preemptive,auth,enabled,throws,ioexception,final,string,methods,post,put,get,delete,try,rest,client,rest,client,create,rest,client,true,true,for,final,string,method,methods,final,response,response,body,test,rest,client,method,assert,that,response,get,header,authorization,starts,with,basic
RestClientSingleHostIntegTests -> public void testPreemptiveAuthEnabled() throws IOException;1524780945;Verify that credentials are sent on the first request with preemptive auth enabled (default when provided with credentials).;public void testPreemptiveAuthEnabled() throws IOException  {_        final String[] methods = { "POST", "PUT", "GET", "DELETE" }___        try (RestClient restClient = createRestClient(true, true)) {_            for (final String method : methods) {_                final Response response = bodyTest(restClient, method)___                assertThat(response.getHeader("Authorization"), startsWith("Basic"))__            }_        }_    };verify,that,credentials,are,sent,on,the,first,request,with,preemptive,auth,enabled,default,when,provided,with,credentials;public,void,test,preemptive,auth,enabled,throws,ioexception,final,string,methods,post,put,get,delete,try,rest,client,rest,client,create,rest,client,true,true,for,final,string,method,methods,final,response,response,body,test,rest,client,method,assert,that,response,get,header,authorization,starts,with,basic
RestClientSingleHostIntegTests -> public void testPreemptiveAuthEnabled() throws IOException;1525859433;Verify that credentials are sent on the first request with preemptive auth enabled (default when provided with credentials).;public void testPreemptiveAuthEnabled() throws IOException  {_        final String[] methods = { "POST", "PUT", "GET", "DELETE" }___        try (RestClient restClient = createRestClient(true, true)) {_            for (final String method : methods) {_                final Response response = bodyTest(restClient, method)___                assertThat(response.getHeader("Authorization"), startsWith("Basic"))__            }_        }_    };verify,that,credentials,are,sent,on,the,first,request,with,preemptive,auth,enabled,default,when,provided,with,credentials;public,void,test,preemptive,auth,enabled,throws,ioexception,final,string,methods,post,put,get,delete,try,rest,client,rest,client,create,rest,client,true,true,for,final,string,method,methods,final,response,response,body,test,rest,client,method,assert,that,response,get,header,authorization,starts,with,basic
RestClientSingleHostIntegTests -> public void testPreemptiveAuthEnabled() throws IOException;1526029249;Verify that credentials are sent on the first request with preemptive auth enabled (default when provided with credentials).;public void testPreemptiveAuthEnabled() throws IOException  {_        final String[] methods = { "POST", "PUT", "GET", "DELETE" }___        try (RestClient restClient = createRestClient(true, true)) {_            for (final String method : methods) {_                final Response response = bodyTest(restClient, method)___                assertThat(response.getHeader("Authorization"), startsWith("Basic"))__            }_        }_    };verify,that,credentials,are,sent,on,the,first,request,with,preemptive,auth,enabled,default,when,provided,with,credentials;public,void,test,preemptive,auth,enabled,throws,ioexception,final,string,methods,post,put,get,delete,try,rest,client,rest,client,create,rest,client,true,true,for,final,string,method,methods,final,response,response,body,test,rest,client,method,assert,that,response,get,header,authorization,starts,with,basic
RestClientSingleHostIntegTests -> public void testPreemptiveAuthEnabled() throws IOException;1526374795;Verify that credentials are sent on the first request with preemptive auth enabled (default when provided with credentials).;public void testPreemptiveAuthEnabled() throws IOException  {_        final String[] methods = { "POST", "PUT", "GET", "DELETE" }___        try (RestClient restClient = createRestClient(true, true)) {_            for (final String method : methods) {_                final Response response = bodyTest(restClient, method)___                assertThat(response.getHeader("Authorization"), startsWith("Basic"))__            }_        }_    };verify,that,credentials,are,sent,on,the,first,request,with,preemptive,auth,enabled,default,when,provided,with,credentials;public,void,test,preemptive,auth,enabled,throws,ioexception,final,string,methods,post,put,get,delete,try,rest,client,rest,client,create,rest,client,true,true,for,final,string,method,methods,final,response,response,body,test,rest,client,method,assert,that,response,get,header,authorization,starts,with,basic
RestClientSingleHostIntegTests -> public void testPreemptiveAuthEnabled() throws IOException;1526574077;Verify that credentials are sent on the first request with preemptive auth enabled (default when provided with credentials).;public void testPreemptiveAuthEnabled() throws IOException {_        final String[] methods = {"POST", "PUT", "GET", "DELETE"}___        try (RestClient restClient = createRestClient(true, true)) {_            for (final String method : methods) {_                final Response response = bodyTest(restClient, method)___                assertThat(response.getHeader("Authorization"), startsWith("Basic"))__            }_        }_    };verify,that,credentials,are,sent,on,the,first,request,with,preemptive,auth,enabled,default,when,provided,with,credentials;public,void,test,preemptive,auth,enabled,throws,ioexception,final,string,methods,post,put,get,delete,try,rest,client,rest,client,create,rest,client,true,true,for,final,string,method,methods,final,response,response,body,test,rest,client,method,assert,that,response,get,header,authorization,starts,with,basic
RestClientSingleHostIntegTests -> public void testPreemptiveAuthEnabled() throws IOException;1527096592;Verify that credentials are sent on the first request with preemptive auth enabled (default when provided with credentials).;public void testPreemptiveAuthEnabled() throws IOException {_        final String[] methods = {"POST", "PUT", "GET", "DELETE"}___        try (RestClient restClient = createRestClient(true, true)) {_            for (final String method : methods) {_                final Response response = bodyTest(restClient, method)___                assertThat(response.getHeader("Authorization"), startsWith("Basic"))__            }_        }_    };verify,that,credentials,are,sent,on,the,first,request,with,preemptive,auth,enabled,default,when,provided,with,credentials;public,void,test,preemptive,auth,enabled,throws,ioexception,final,string,methods,post,put,get,delete,try,rest,client,rest,client,create,rest,client,true,true,for,final,string,method,methods,final,response,response,body,test,rest,client,method,assert,that,response,get,header,authorization,starts,with,basic
RestClientSingleHostIntegTests -> public void testPreemptiveAuthEnabled() throws IOException;1527840262;Verify that credentials are sent on the first request with preemptive auth enabled (default when provided with credentials).;public void testPreemptiveAuthEnabled() throws IOException {_        final String[] methods = {"POST", "PUT", "GET", "DELETE"}___        try (RestClient restClient = createRestClient(true, true)) {_            for (final String method : methods) {_                final Response response = bodyTest(restClient, method)___                assertThat(response.getHeader("Authorization"), startsWith("Basic"))__            }_        }_    };verify,that,credentials,are,sent,on,the,first,request,with,preemptive,auth,enabled,default,when,provided,with,credentials;public,void,test,preemptive,auth,enabled,throws,ioexception,final,string,methods,post,put,get,delete,try,rest,client,rest,client,create,rest,client,true,true,for,final,string,method,methods,final,response,response,body,test,rest,client,method,assert,that,response,get,header,authorization,starts,with,basic
RestClientSingleHostIntegTests -> public void testPreemptiveAuthEnabled() throws IOException;1531382259;Verify that credentials are sent on the first request with preemptive auth enabled (default when provided with credentials).;public void testPreemptiveAuthEnabled() throws IOException {_        final String[] methods = {"POST", "PUT", "GET", "DELETE"}___        try (RestClient restClient = createRestClient(true, true)) {_            for (final String method : methods) {_                final Response response = bodyTest(restClient, method)___                assertThat(response.getHeader("Authorization"), startsWith("Basic"))__            }_        }_    };verify,that,credentials,are,sent,on,the,first,request,with,preemptive,auth,enabled,default,when,provided,with,credentials;public,void,test,preemptive,auth,enabled,throws,ioexception,final,string,methods,post,put,get,delete,try,rest,client,rest,client,create,rest,client,true,true,for,final,string,method,methods,final,response,response,body,test,rest,client,method,assert,that,response,get,header,authorization,starts,with,basic
RestClientSingleHostIntegTests -> public void testPreemptiveAuthEnabled() throws IOException;1535965276;Verify that credentials are sent on the first request with preemptive auth enabled (default when provided with credentials).;public void testPreemptiveAuthEnabled() throws IOException {_        final String[] methods = {"POST", "PUT", "GET", "DELETE"}___        try (RestClient restClient = createRestClient(true, true)) {_            for (final String method : methods) {_                final Response response = bodyTest(restClient, method)___                assertThat(response.getHeader("Authorization"), startsWith("Basic"))__            }_        }_    };verify,that,credentials,are,sent,on,the,first,request,with,preemptive,auth,enabled,default,when,provided,with,credentials;public,void,test,preemptive,auth,enabled,throws,ioexception,final,string,methods,post,put,get,delete,try,rest,client,rest,client,create,rest,client,true,true,for,final,string,method,methods,final,response,response,body,test,rest,client,method,assert,that,response,get,header,authorization,starts,with,basic
RestClientSingleHostIntegTests -> public void testManyAsyncRequests() throws Exception;1525859433;Tests sending a bunch of async requests works well (e.g. no TimeoutException from the leased pool)_See https://github.com/elastic/elasticsearch/issues/24069;public void testManyAsyncRequests() throws Exception {_        int iters = randomIntBetween(500, 1000)__        final CountDownLatch latch = new CountDownLatch(iters)__        final List<Exception> exceptions = new CopyOnWriteArrayList<>()__        for (int i = 0_ i < iters_ i++) {_            Request request = new Request("PUT", "/200")__            request.setEntity(new NStringEntity("{}", ContentType.APPLICATION_JSON))__            restClient.performRequestAsync(request, new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    latch.countDown()__                }__                @Override_                public void onFailure(Exception exception) {_                    exceptions.add(exception)__                    latch.countDown()__                }_            })__        }__        assertTrue("timeout waiting for requests to be sent", latch.await(10, TimeUnit.SECONDS))__        if (exceptions.isEmpty() == false) {_            AssertionError error = new AssertionError("expected no failures but got some. see suppressed for first 10 of ["_                                        + exceptions.size() + "] failures")__            for (Exception exception : exceptions.subList(0, Math.min(10, exceptions.size()))) {_                error.addSuppressed(exception)__            }_            throw error__        }_    };tests,sending,a,bunch,of,async,requests,works,well,e,g,no,timeout,exception,from,the,leased,pool,see,https,github,com,elastic,elasticsearch,issues,24069;public,void,test,many,async,requests,throws,exception,int,iters,random,int,between,500,1000,final,count,down,latch,latch,new,count,down,latch,iters,final,list,exception,exceptions,new,copy,on,write,array,list,for,int,i,0,i,iters,i,request,request,new,request,put,200,request,set,entity,new,nstring,entity,content,type,rest,client,perform,request,async,request,new,response,listener,override,public,void,on,success,response,response,latch,count,down,override,public,void,on,failure,exception,exception,exceptions,add,exception,latch,count,down,assert,true,timeout,waiting,for,requests,to,be,sent,latch,await,10,time,unit,seconds,if,exceptions,is,empty,false,assertion,error,error,new,assertion,error,expected,no,failures,but,got,some,see,suppressed,for,first,10,of,exceptions,size,failures,for,exception,exception,exceptions,sub,list,0,math,min,10,exceptions,size,error,add,suppressed,exception,throw,error
RestClientSingleHostIntegTests -> public void testManyAsyncRequests() throws Exception;1526029249;Tests sending a bunch of async requests works well (e.g. no TimeoutException from the leased pool)_See https://github.com/elastic/elasticsearch/issues/24069;public void testManyAsyncRequests() throws Exception {_        int iters = randomIntBetween(500, 1000)__        final CountDownLatch latch = new CountDownLatch(iters)__        final List<Exception> exceptions = new CopyOnWriteArrayList<>()__        for (int i = 0_ i < iters_ i++) {_            Request request = new Request("PUT", "/200")__            request.setEntity(new NStringEntity("{}", ContentType.APPLICATION_JSON))__            restClient.performRequestAsync(request, new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    latch.countDown()__                }__                @Override_                public void onFailure(Exception exception) {_                    exceptions.add(exception)__                    latch.countDown()__                }_            })__        }__        assertTrue("timeout waiting for requests to be sent", latch.await(10, TimeUnit.SECONDS))__        if (exceptions.isEmpty() == false) {_            AssertionError error = new AssertionError("expected no failures but got some. see suppressed for first 10 of ["_                                        + exceptions.size() + "] failures")__            for (Exception exception : exceptions.subList(0, Math.min(10, exceptions.size()))) {_                error.addSuppressed(exception)__            }_            throw error__        }_    };tests,sending,a,bunch,of,async,requests,works,well,e,g,no,timeout,exception,from,the,leased,pool,see,https,github,com,elastic,elasticsearch,issues,24069;public,void,test,many,async,requests,throws,exception,int,iters,random,int,between,500,1000,final,count,down,latch,latch,new,count,down,latch,iters,final,list,exception,exceptions,new,copy,on,write,array,list,for,int,i,0,i,iters,i,request,request,new,request,put,200,request,set,entity,new,nstring,entity,content,type,rest,client,perform,request,async,request,new,response,listener,override,public,void,on,success,response,response,latch,count,down,override,public,void,on,failure,exception,exception,exceptions,add,exception,latch,count,down,assert,true,timeout,waiting,for,requests,to,be,sent,latch,await,10,time,unit,seconds,if,exceptions,is,empty,false,assertion,error,error,new,assertion,error,expected,no,failures,but,got,some,see,suppressed,for,first,10,of,exceptions,size,failures,for,exception,exception,exceptions,sub,list,0,math,min,10,exceptions,size,error,add,suppressed,exception,throw,error
RestClientSingleHostIntegTests -> public void testManyAsyncRequests() throws Exception;1526374795;Tests sending a bunch of async requests works well (e.g. no TimeoutException from the leased pool)_See https://github.com/elastic/elasticsearch/issues/24069;public void testManyAsyncRequests() throws Exception {_        int iters = randomIntBetween(500, 1000)__        final CountDownLatch latch = new CountDownLatch(iters)__        final List<Exception> exceptions = new CopyOnWriteArrayList<>()__        for (int i = 0_ i < iters_ i++) {_            Request request = new Request("PUT", "/200")__            request.setEntity(new NStringEntity("{}", ContentType.APPLICATION_JSON))__            restClient.performRequestAsync(request, new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    latch.countDown()__                }__                @Override_                public void onFailure(Exception exception) {_                    exceptions.add(exception)__                    latch.countDown()__                }_            })__        }__        assertTrue("timeout waiting for requests to be sent", latch.await(10, TimeUnit.SECONDS))__        if (exceptions.isEmpty() == false) {_            AssertionError error = new AssertionError("expected no failures but got some. see suppressed for first 10 of ["_                                        + exceptions.size() + "] failures")__            for (Exception exception : exceptions.subList(0, Math.min(10, exceptions.size()))) {_                error.addSuppressed(exception)__            }_            throw error__        }_    };tests,sending,a,bunch,of,async,requests,works,well,e,g,no,timeout,exception,from,the,leased,pool,see,https,github,com,elastic,elasticsearch,issues,24069;public,void,test,many,async,requests,throws,exception,int,iters,random,int,between,500,1000,final,count,down,latch,latch,new,count,down,latch,iters,final,list,exception,exceptions,new,copy,on,write,array,list,for,int,i,0,i,iters,i,request,request,new,request,put,200,request,set,entity,new,nstring,entity,content,type,rest,client,perform,request,async,request,new,response,listener,override,public,void,on,success,response,response,latch,count,down,override,public,void,on,failure,exception,exception,exceptions,add,exception,latch,count,down,assert,true,timeout,waiting,for,requests,to,be,sent,latch,await,10,time,unit,seconds,if,exceptions,is,empty,false,assertion,error,error,new,assertion,error,expected,no,failures,but,got,some,see,suppressed,for,first,10,of,exceptions,size,failures,for,exception,exception,exceptions,sub,list,0,math,min,10,exceptions,size,error,add,suppressed,exception,throw,error
RestClientSingleHostIntegTests -> public void testManyAsyncRequests() throws Exception;1526574077;Tests sending a bunch of async requests works well (e.g. no TimeoutException from the leased pool)_See https://github.com/elastic/elasticsearch/issues/24069;public void testManyAsyncRequests() throws Exception {_        int iters = randomIntBetween(500, 1000)__        final CountDownLatch latch = new CountDownLatch(iters)__        final List<Exception> exceptions = new CopyOnWriteArrayList<>()__        for (int i = 0_ i < iters_ i++) {_            Request request = new Request("PUT", "/200")__            request.setEntity(new NStringEntity("{}", ContentType.APPLICATION_JSON))__            restClient.performRequestAsync(request, new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    latch.countDown()__                }__                @Override_                public void onFailure(Exception exception) {_                    exceptions.add(exception)__                    latch.countDown()__                }_            })__        }__        assertTrue("timeout waiting for requests to be sent", latch.await(10, TimeUnit.SECONDS))__        if (exceptions.isEmpty() == false) {_            AssertionError error = new AssertionError("expected no failures but got some. see suppressed for first 10 of ["_                + exceptions.size() + "] failures")__            for (Exception exception : exceptions.subList(0, Math.min(10, exceptions.size()))) {_                error.addSuppressed(exception)__            }_            throw error__        }_    };tests,sending,a,bunch,of,async,requests,works,well,e,g,no,timeout,exception,from,the,leased,pool,see,https,github,com,elastic,elasticsearch,issues,24069;public,void,test,many,async,requests,throws,exception,int,iters,random,int,between,500,1000,final,count,down,latch,latch,new,count,down,latch,iters,final,list,exception,exceptions,new,copy,on,write,array,list,for,int,i,0,i,iters,i,request,request,new,request,put,200,request,set,entity,new,nstring,entity,content,type,rest,client,perform,request,async,request,new,response,listener,override,public,void,on,success,response,response,latch,count,down,override,public,void,on,failure,exception,exception,exceptions,add,exception,latch,count,down,assert,true,timeout,waiting,for,requests,to,be,sent,latch,await,10,time,unit,seconds,if,exceptions,is,empty,false,assertion,error,error,new,assertion,error,expected,no,failures,but,got,some,see,suppressed,for,first,10,of,exceptions,size,failures,for,exception,exception,exceptions,sub,list,0,math,min,10,exceptions,size,error,add,suppressed,exception,throw,error
RestClientSingleHostIntegTests -> public void testManyAsyncRequests() throws Exception;1527096592;Tests sending a bunch of async requests works well (e.g. no TimeoutException from the leased pool)_See https://github.com/elastic/elasticsearch/issues/24069;public void testManyAsyncRequests() throws Exception {_        int iters = randomIntBetween(500, 1000)__        final CountDownLatch latch = new CountDownLatch(iters)__        final List<Exception> exceptions = new CopyOnWriteArrayList<>()__        for (int i = 0_ i < iters_ i++) {_            Request request = new Request("PUT", "/200")__            request.setEntity(new NStringEntity("{}", ContentType.APPLICATION_JSON))__            restClient.performRequestAsync(request, new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    latch.countDown()__                }__                @Override_                public void onFailure(Exception exception) {_                    exceptions.add(exception)__                    latch.countDown()__                }_            })__        }__        assertTrue("timeout waiting for requests to be sent", latch.await(10, TimeUnit.SECONDS))__        if (exceptions.isEmpty() == false) {_            AssertionError error = new AssertionError("expected no failures but got some. see suppressed for first 10 of ["_                + exceptions.size() + "] failures")__            for (Exception exception : exceptions.subList(0, Math.min(10, exceptions.size()))) {_                error.addSuppressed(exception)__            }_            throw error__        }_    };tests,sending,a,bunch,of,async,requests,works,well,e,g,no,timeout,exception,from,the,leased,pool,see,https,github,com,elastic,elasticsearch,issues,24069;public,void,test,many,async,requests,throws,exception,int,iters,random,int,between,500,1000,final,count,down,latch,latch,new,count,down,latch,iters,final,list,exception,exceptions,new,copy,on,write,array,list,for,int,i,0,i,iters,i,request,request,new,request,put,200,request,set,entity,new,nstring,entity,content,type,rest,client,perform,request,async,request,new,response,listener,override,public,void,on,success,response,response,latch,count,down,override,public,void,on,failure,exception,exception,exceptions,add,exception,latch,count,down,assert,true,timeout,waiting,for,requests,to,be,sent,latch,await,10,time,unit,seconds,if,exceptions,is,empty,false,assertion,error,error,new,assertion,error,expected,no,failures,but,got,some,see,suppressed,for,first,10,of,exceptions,size,failures,for,exception,exception,exceptions,sub,list,0,math,min,10,exceptions,size,error,add,suppressed,exception,throw,error
RestClientSingleHostIntegTests -> public void testManyAsyncRequests() throws Exception;1527840262;Tests sending a bunch of async requests works well (e.g. no TimeoutException from the leased pool)_See https://github.com/elastic/elasticsearch/issues/24069;public void testManyAsyncRequests() throws Exception {_        int iters = randomIntBetween(500, 1000)__        final CountDownLatch latch = new CountDownLatch(iters)__        final List<Exception> exceptions = new CopyOnWriteArrayList<>()__        for (int i = 0_ i < iters_ i++) {_            Request request = new Request("PUT", "/200")__            request.setEntity(new NStringEntity("{}", ContentType.APPLICATION_JSON))__            restClient.performRequestAsync(request, new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    latch.countDown()__                }__                @Override_                public void onFailure(Exception exception) {_                    exceptions.add(exception)__                    latch.countDown()__                }_            })__        }__        assertTrue("timeout waiting for requests to be sent", latch.await(10, TimeUnit.SECONDS))__        if (exceptions.isEmpty() == false) {_            AssertionError error = new AssertionError("expected no failures but got some. see suppressed for first 10 of ["_                + exceptions.size() + "] failures")__            for (Exception exception : exceptions.subList(0, Math.min(10, exceptions.size()))) {_                error.addSuppressed(exception)__            }_            throw error__        }_    };tests,sending,a,bunch,of,async,requests,works,well,e,g,no,timeout,exception,from,the,leased,pool,see,https,github,com,elastic,elasticsearch,issues,24069;public,void,test,many,async,requests,throws,exception,int,iters,random,int,between,500,1000,final,count,down,latch,latch,new,count,down,latch,iters,final,list,exception,exceptions,new,copy,on,write,array,list,for,int,i,0,i,iters,i,request,request,new,request,put,200,request,set,entity,new,nstring,entity,content,type,rest,client,perform,request,async,request,new,response,listener,override,public,void,on,success,response,response,latch,count,down,override,public,void,on,failure,exception,exception,exceptions,add,exception,latch,count,down,assert,true,timeout,waiting,for,requests,to,be,sent,latch,await,10,time,unit,seconds,if,exceptions,is,empty,false,assertion,error,error,new,assertion,error,expected,no,failures,but,got,some,see,suppressed,for,first,10,of,exceptions,size,failures,for,exception,exception,exceptions,sub,list,0,math,min,10,exceptions,size,error,add,suppressed,exception,throw,error
RestClientSingleHostIntegTests -> public void testManyAsyncRequests() throws Exception;1531382259;Tests sending a bunch of async requests works well (e.g. no TimeoutException from the leased pool)_See https://github.com/elastic/elasticsearch/issues/24069;public void testManyAsyncRequests() throws Exception {_        int iters = randomIntBetween(500, 1000)__        final CountDownLatch latch = new CountDownLatch(iters)__        final List<Exception> exceptions = new CopyOnWriteArrayList<>()__        for (int i = 0_ i < iters_ i++) {_            Request request = new Request("PUT", "/200")__            request.setEntity(new NStringEntity("{}", ContentType.APPLICATION_JSON))__            restClient.performRequestAsync(request, new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    latch.countDown()__                }__                @Override_                public void onFailure(Exception exception) {_                    exceptions.add(exception)__                    latch.countDown()__                }_            })__        }__        assertTrue("timeout waiting for requests to be sent", latch.await(10, TimeUnit.SECONDS))__        if (exceptions.isEmpty() == false) {_            AssertionError error = new AssertionError("expected no failures but got some. see suppressed for first 10 of ["_                + exceptions.size() + "] failures")__            for (Exception exception : exceptions.subList(0, Math.min(10, exceptions.size()))) {_                error.addSuppressed(exception)__            }_            throw error__        }_    };tests,sending,a,bunch,of,async,requests,works,well,e,g,no,timeout,exception,from,the,leased,pool,see,https,github,com,elastic,elasticsearch,issues,24069;public,void,test,many,async,requests,throws,exception,int,iters,random,int,between,500,1000,final,count,down,latch,latch,new,count,down,latch,iters,final,list,exception,exceptions,new,copy,on,write,array,list,for,int,i,0,i,iters,i,request,request,new,request,put,200,request,set,entity,new,nstring,entity,content,type,rest,client,perform,request,async,request,new,response,listener,override,public,void,on,success,response,response,latch,count,down,override,public,void,on,failure,exception,exception,exceptions,add,exception,latch,count,down,assert,true,timeout,waiting,for,requests,to,be,sent,latch,await,10,time,unit,seconds,if,exceptions,is,empty,false,assertion,error,error,new,assertion,error,expected,no,failures,but,got,some,see,suppressed,for,first,10,of,exceptions,size,failures,for,exception,exception,exceptions,sub,list,0,math,min,10,exceptions,size,error,add,suppressed,exception,throw,error
RestClientSingleHostIntegTests -> public void testManyAsyncRequests() throws Exception;1535965276;Tests sending a bunch of async requests works well (e.g. no TimeoutException from the leased pool)_See https://github.com/elastic/elasticsearch/issues/24069;public void testManyAsyncRequests() throws Exception {_        int iters = randomIntBetween(500, 1000)__        final CountDownLatch latch = new CountDownLatch(iters)__        final List<Exception> exceptions = new CopyOnWriteArrayList<>()__        for (int i = 0_ i < iters_ i++) {_            Request request = new Request("PUT", "/200")__            request.setEntity(new NStringEntity("{}", ContentType.APPLICATION_JSON))__            restClient.performRequestAsync(request, new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    latch.countDown()__                }__                @Override_                public void onFailure(Exception exception) {_                    exceptions.add(exception)__                    latch.countDown()__                }_            })__        }__        assertTrue("timeout waiting for requests to be sent", latch.await(10, TimeUnit.SECONDS))__        if (exceptions.isEmpty() == false) {_            AssertionError error = new AssertionError("expected no failures but got some. see suppressed for first 10 of ["_                + exceptions.size() + "] failures")__            for (Exception exception : exceptions.subList(0, Math.min(10, exceptions.size()))) {_                error.addSuppressed(exception)__            }_            throw error__        }_    };tests,sending,a,bunch,of,async,requests,works,well,e,g,no,timeout,exception,from,the,leased,pool,see,https,github,com,elastic,elasticsearch,issues,24069;public,void,test,many,async,requests,throws,exception,int,iters,random,int,between,500,1000,final,count,down,latch,latch,new,count,down,latch,iters,final,list,exception,exceptions,new,copy,on,write,array,list,for,int,i,0,i,iters,i,request,request,new,request,put,200,request,set,entity,new,nstring,entity,content,type,rest,client,perform,request,async,request,new,response,listener,override,public,void,on,success,response,response,latch,count,down,override,public,void,on,failure,exception,exception,exceptions,add,exception,latch,count,down,assert,true,timeout,waiting,for,requests,to,be,sent,latch,await,10,time,unit,seconds,if,exceptions,is,empty,false,assertion,error,error,new,assertion,error,expected,no,failures,but,got,some,see,suppressed,for,first,10,of,exceptions,size,failures,for,exception,exception,exceptions,sub,list,0,math,min,10,exceptions,size,error,add,suppressed,exception,throw,error
RestClientSingleHostIntegTests -> public void testManyAsyncRequests() throws Exception;1549439027;Tests sending a bunch of async requests works well (e.g. no TimeoutException from the leased pool)_See https://github.com/elastic/elasticsearch/issues/24069;public void testManyAsyncRequests() throws Exception {_        int iters = randomIntBetween(500, 1000)__        final CountDownLatch latch = new CountDownLatch(iters)__        final List<Exception> exceptions = new CopyOnWriteArrayList<>()__        for (int i = 0_ i < iters_ i++) {_            Request request = new Request("PUT", "/200")__            request.setEntity(new NStringEntity("{}", ContentType.APPLICATION_JSON))__            restClient.performRequestAsync(request, new ResponseListener() {_                @Override_                public void onSuccess(Response response) {_                    latch.countDown()__                }__                @Override_                public void onFailure(Exception exception) {_                    exceptions.add(exception)__                    latch.countDown()__                }_            })__        }__        assertTrue("timeout waiting for requests to be sent", latch.await(10, TimeUnit.SECONDS))__        if (exceptions.isEmpty() == false) {_            AssertionError error = new AssertionError("expected no failures but got some. see suppressed for first 10 of ["_                + exceptions.size() + "] failures")__            for (Exception exception : exceptions.subList(0, Math.min(10, exceptions.size()))) {_                error.addSuppressed(exception)__            }_            throw error__        }_    };tests,sending,a,bunch,of,async,requests,works,well,e,g,no,timeout,exception,from,the,leased,pool,see,https,github,com,elastic,elasticsearch,issues,24069;public,void,test,many,async,requests,throws,exception,int,iters,random,int,between,500,1000,final,count,down,latch,latch,new,count,down,latch,iters,final,list,exception,exceptions,new,copy,on,write,array,list,for,int,i,0,i,iters,i,request,request,new,request,put,200,request,set,entity,new,nstring,entity,content,type,rest,client,perform,request,async,request,new,response,listener,override,public,void,on,success,response,response,latch,count,down,override,public,void,on,failure,exception,exception,exceptions,add,exception,latch,count,down,assert,true,timeout,waiting,for,requests,to,be,sent,latch,await,10,time,unit,seconds,if,exceptions,is,empty,false,assertion,error,error,new,assertion,error,expected,no,failures,but,got,some,see,suppressed,for,first,10,of,exceptions,size,failures,for,exception,exception,exceptions,sub,list,0,math,min,10,exceptions,size,error,add,suppressed,exception,throw,error
RestClientSingleHostIntegTests -> public void testHeaders() throws IOException;1524684173;End to end test for headers. We test it explicitly against a real http client as there are different ways_to set/add headers to the {@link org.apache.http.client.HttpClient}._Exercises the test http server ability to send back whatever headers it received.;public void testHeaders() throws IOException {_        for (String method : getHttpMethods()) {_            final Set<String> standardHeaders = new HashSet<>(Arrays.asList("Connection", "Host", "User-agent", "Date"))__            if (method.equals("HEAD") == false) {_                standardHeaders.add("Content-length")__            }_            final Header[] requestHeaders = RestClientTestUtil.randomHeaders(getRandom(), "Header")__            final int statusCode = randomStatusCode(getRandom())__            Response esResponse__            try {_                esResponse = restClient.performRequest(method, "/" + statusCode, Collections.<String, String>emptyMap(), requestHeaders)__            } catch(ResponseException e) {_                esResponse = e.getResponse()__            }__            assertEquals(method, esResponse.getRequestLine().getMethod())__            assertEquals(statusCode, esResponse.getStatusLine().getStatusCode())__            assertEquals(pathPrefix + "/" + statusCode, esResponse.getRequestLine().getUri())__            assertHeaders(defaultHeaders, requestHeaders, esResponse.getHeaders(), standardHeaders)__            for (final Header responseHeader : esResponse.getHeaders()) {_                String name = responseHeader.getName()__                if (name.startsWith("Header") == false) {_                    assertTrue("unknown header was returned " + name, standardHeaders.remove(name))__                }_            }_            assertTrue("some expected standard headers weren't returned: " + standardHeaders, standardHeaders.isEmpty())__        }_    };end,to,end,test,for,headers,we,test,it,explicitly,against,a,real,http,client,as,there,are,different,ways,to,set,add,headers,to,the,link,org,apache,http,client,http,client,exercises,the,test,http,server,ability,to,send,back,whatever,headers,it,received;public,void,test,headers,throws,ioexception,for,string,method,get,http,methods,final,set,string,standard,headers,new,hash,set,arrays,as,list,connection,host,user,agent,date,if,method,equals,head,false,standard,headers,add,content,length,final,header,request,headers,rest,client,test,util,random,headers,get,random,header,final,int,status,code,random,status,code,get,random,response,es,response,try,es,response,rest,client,perform,request,method,status,code,collections,string,string,empty,map,request,headers,catch,response,exception,e,es,response,e,get,response,assert,equals,method,es,response,get,request,line,get,method,assert,equals,status,code,es,response,get,status,line,get,status,code,assert,equals,path,prefix,status,code,es,response,get,request,line,get,uri,assert,headers,default,headers,request,headers,es,response,get,headers,standard,headers,for,final,header,response,header,es,response,get,headers,string,name,response,header,get,name,if,name,starts,with,header,false,assert,true,unknown,header,was,returned,name,standard,headers,remove,name,assert,true,some,expected,standard,headers,weren,t,returned,standard,headers,standard,headers,is,empty
RestClientSingleHostIntegTests -> public void testHeaders() throws IOException;1524780945;End to end test for headers. We test it explicitly against a real http client as there are different ways_to set/add headers to the {@link org.apache.http.client.HttpClient}._Exercises the test http server ability to send back whatever headers it received.;public void testHeaders() throws IOException {_        for (String method : getHttpMethods()) {_            final Set<String> standardHeaders = new HashSet<>(Arrays.asList("Connection", "Host", "User-agent", "Date"))__            if (method.equals("HEAD") == false) {_                standardHeaders.add("Content-length")__            }_            final Header[] requestHeaders = RestClientTestUtil.randomHeaders(getRandom(), "Header")__            final int statusCode = randomStatusCode(getRandom())__            Response esResponse__            try {_                esResponse = restClient.performRequest(method, "/" + statusCode, Collections.<String, String>emptyMap(), requestHeaders)__            } catch(ResponseException e) {_                esResponse = e.getResponse()__            }__            assertEquals(method, esResponse.getRequestLine().getMethod())__            assertEquals(statusCode, esResponse.getStatusLine().getStatusCode())__            assertEquals(pathPrefix + "/" + statusCode, esResponse.getRequestLine().getUri())__            assertHeaders(defaultHeaders, requestHeaders, esResponse.getHeaders(), standardHeaders)__            for (final Header responseHeader : esResponse.getHeaders()) {_                String name = responseHeader.getName()__                if (name.startsWith("Header") == false) {_                    assertTrue("unknown header was returned " + name, standardHeaders.remove(name))__                }_            }_            assertTrue("some expected standard headers weren't returned: " + standardHeaders, standardHeaders.isEmpty())__        }_    };end,to,end,test,for,headers,we,test,it,explicitly,against,a,real,http,client,as,there,are,different,ways,to,set,add,headers,to,the,link,org,apache,http,client,http,client,exercises,the,test,http,server,ability,to,send,back,whatever,headers,it,received;public,void,test,headers,throws,ioexception,for,string,method,get,http,methods,final,set,string,standard,headers,new,hash,set,arrays,as,list,connection,host,user,agent,date,if,method,equals,head,false,standard,headers,add,content,length,final,header,request,headers,rest,client,test,util,random,headers,get,random,header,final,int,status,code,random,status,code,get,random,response,es,response,try,es,response,rest,client,perform,request,method,status,code,collections,string,string,empty,map,request,headers,catch,response,exception,e,es,response,e,get,response,assert,equals,method,es,response,get,request,line,get,method,assert,equals,status,code,es,response,get,status,line,get,status,code,assert,equals,path,prefix,status,code,es,response,get,request,line,get,uri,assert,headers,default,headers,request,headers,es,response,get,headers,standard,headers,for,final,header,response,header,es,response,get,headers,string,name,response,header,get,name,if,name,starts,with,header,false,assert,true,unknown,header,was,returned,name,standard,headers,remove,name,assert,true,some,expected,standard,headers,weren,t,returned,standard,headers,standard,headers,is,empty
RestClientSingleHostIntegTests -> public void testHeaders() throws IOException;1525859433;End to end test for headers. We test it explicitly against a real http client as there are different ways_to set/add headers to the {@link org.apache.http.client.HttpClient}._Exercises the test http server ability to send back whatever headers it received.;public void testHeaders() throws IOException {_        for (String method : getHttpMethods()) {_            final Set<String> standardHeaders = new HashSet<>(Arrays.asList("Connection", "Host", "User-agent", "Date"))__            if (method.equals("HEAD") == false) {_                standardHeaders.add("Content-length")__            }_            final Header[] requestHeaders = RestClientTestUtil.randomHeaders(getRandom(), "Header")__            final int statusCode = randomStatusCode(getRandom())__            Response esResponse__            try {_                esResponse = restClient.performRequest(method, "/" + statusCode, Collections.<String, String>emptyMap(), requestHeaders)__            } catch(ResponseException e) {_                esResponse = e.getResponse()__            }__            assertEquals(method, esResponse.getRequestLine().getMethod())__            assertEquals(statusCode, esResponse.getStatusLine().getStatusCode())__            assertEquals(pathPrefix + "/" + statusCode, esResponse.getRequestLine().getUri())__            assertHeaders(defaultHeaders, requestHeaders, esResponse.getHeaders(), standardHeaders)__            for (final Header responseHeader : esResponse.getHeaders()) {_                String name = responseHeader.getName()__                if (name.startsWith("Header") == false) {_                    assertTrue("unknown header was returned " + name, standardHeaders.remove(name))__                }_            }_            assertTrue("some expected standard headers weren't returned: " + standardHeaders, standardHeaders.isEmpty())__        }_    };end,to,end,test,for,headers,we,test,it,explicitly,against,a,real,http,client,as,there,are,different,ways,to,set,add,headers,to,the,link,org,apache,http,client,http,client,exercises,the,test,http,server,ability,to,send,back,whatever,headers,it,received;public,void,test,headers,throws,ioexception,for,string,method,get,http,methods,final,set,string,standard,headers,new,hash,set,arrays,as,list,connection,host,user,agent,date,if,method,equals,head,false,standard,headers,add,content,length,final,header,request,headers,rest,client,test,util,random,headers,get,random,header,final,int,status,code,random,status,code,get,random,response,es,response,try,es,response,rest,client,perform,request,method,status,code,collections,string,string,empty,map,request,headers,catch,response,exception,e,es,response,e,get,response,assert,equals,method,es,response,get,request,line,get,method,assert,equals,status,code,es,response,get,status,line,get,status,code,assert,equals,path,prefix,status,code,es,response,get,request,line,get,uri,assert,headers,default,headers,request,headers,es,response,get,headers,standard,headers,for,final,header,response,header,es,response,get,headers,string,name,response,header,get,name,if,name,starts,with,header,false,assert,true,unknown,header,was,returned,name,standard,headers,remove,name,assert,true,some,expected,standard,headers,weren,t,returned,standard,headers,standard,headers,is,empty
RestClientSingleHostIntegTests -> public void testHeaders() throws IOException;1526029249;End to end test for headers. We test it explicitly against a real http client as there are different ways_to set/add headers to the {@link org.apache.http.client.HttpClient}._Exercises the test http server ability to send back whatever headers it received.;public void testHeaders() throws IOException {_        for (String method : getHttpMethods()) {_            final Set<String> standardHeaders = new HashSet<>(Arrays.asList("Connection", "Host", "User-agent", "Date"))__            if (method.equals("HEAD") == false) {_                standardHeaders.add("Content-length")__            }_            final Header[] requestHeaders = RestClientTestUtil.randomHeaders(getRandom(), "Header")__            final int statusCode = randomStatusCode(getRandom())__            Response esResponse__            try {_                esResponse = restClient.performRequest(method, "/" + statusCode, Collections.<String, String>emptyMap(), requestHeaders)__            } catch(ResponseException e) {_                esResponse = e.getResponse()__            }__            assertEquals(method, esResponse.getRequestLine().getMethod())__            assertEquals(statusCode, esResponse.getStatusLine().getStatusCode())__            assertEquals(pathPrefix + "/" + statusCode, esResponse.getRequestLine().getUri())__            assertHeaders(defaultHeaders, requestHeaders, esResponse.getHeaders(), standardHeaders)__            for (final Header responseHeader : esResponse.getHeaders()) {_                String name = responseHeader.getName()__                if (name.startsWith("Header") == false) {_                    assertTrue("unknown header was returned " + name, standardHeaders.remove(name))__                }_            }_            assertTrue("some expected standard headers weren't returned: " + standardHeaders, standardHeaders.isEmpty())__        }_    };end,to,end,test,for,headers,we,test,it,explicitly,against,a,real,http,client,as,there,are,different,ways,to,set,add,headers,to,the,link,org,apache,http,client,http,client,exercises,the,test,http,server,ability,to,send,back,whatever,headers,it,received;public,void,test,headers,throws,ioexception,for,string,method,get,http,methods,final,set,string,standard,headers,new,hash,set,arrays,as,list,connection,host,user,agent,date,if,method,equals,head,false,standard,headers,add,content,length,final,header,request,headers,rest,client,test,util,random,headers,get,random,header,final,int,status,code,random,status,code,get,random,response,es,response,try,es,response,rest,client,perform,request,method,status,code,collections,string,string,empty,map,request,headers,catch,response,exception,e,es,response,e,get,response,assert,equals,method,es,response,get,request,line,get,method,assert,equals,status,code,es,response,get,status,line,get,status,code,assert,equals,path,prefix,status,code,es,response,get,request,line,get,uri,assert,headers,default,headers,request,headers,es,response,get,headers,standard,headers,for,final,header,response,header,es,response,get,headers,string,name,response,header,get,name,if,name,starts,with,header,false,assert,true,unknown,header,was,returned,name,standard,headers,remove,name,assert,true,some,expected,standard,headers,weren,t,returned,standard,headers,standard,headers,is,empty
RestClientSingleHostIntegTests -> public void testHeaders() throws IOException;1526374795;End to end test for headers. We test it explicitly against a real http client as there are different ways_to set/add headers to the {@link org.apache.http.client.HttpClient}._Exercises the test http server ability to send back whatever headers it received.;public void testHeaders() throws IOException {_        for (String method : getHttpMethods()) {_            final Set<String> standardHeaders = new HashSet<>(Arrays.asList("Connection", "Host", "User-agent", "Date"))__            if (method.equals("HEAD") == false) {_                standardHeaders.add("Content-length")__            }_            final Header[] requestHeaders = RestClientTestUtil.randomHeaders(getRandom(), "Header")__            final int statusCode = randomStatusCode(getRandom())__            Response esResponse__            try {_                esResponse = restClient.performRequest(method, "/" + statusCode, Collections.<String, String>emptyMap(), requestHeaders)__            } catch(ResponseException e) {_                esResponse = e.getResponse()__            }__            assertEquals(method, esResponse.getRequestLine().getMethod())__            assertEquals(statusCode, esResponse.getStatusLine().getStatusCode())__            assertEquals(pathPrefix + "/" + statusCode, esResponse.getRequestLine().getUri())__            assertHeaders(defaultHeaders, requestHeaders, esResponse.getHeaders(), standardHeaders)__            for (final Header responseHeader : esResponse.getHeaders()) {_                String name = responseHeader.getName()__                if (name.startsWith("Header") == false) {_                    assertTrue("unknown header was returned " + name, standardHeaders.remove(name))__                }_            }_            assertTrue("some expected standard headers weren't returned: " + standardHeaders, standardHeaders.isEmpty())__        }_    };end,to,end,test,for,headers,we,test,it,explicitly,against,a,real,http,client,as,there,are,different,ways,to,set,add,headers,to,the,link,org,apache,http,client,http,client,exercises,the,test,http,server,ability,to,send,back,whatever,headers,it,received;public,void,test,headers,throws,ioexception,for,string,method,get,http,methods,final,set,string,standard,headers,new,hash,set,arrays,as,list,connection,host,user,agent,date,if,method,equals,head,false,standard,headers,add,content,length,final,header,request,headers,rest,client,test,util,random,headers,get,random,header,final,int,status,code,random,status,code,get,random,response,es,response,try,es,response,rest,client,perform,request,method,status,code,collections,string,string,empty,map,request,headers,catch,response,exception,e,es,response,e,get,response,assert,equals,method,es,response,get,request,line,get,method,assert,equals,status,code,es,response,get,status,line,get,status,code,assert,equals,path,prefix,status,code,es,response,get,request,line,get,uri,assert,headers,default,headers,request,headers,es,response,get,headers,standard,headers,for,final,header,response,header,es,response,get,headers,string,name,response,header,get,name,if,name,starts,with,header,false,assert,true,unknown,header,was,returned,name,standard,headers,remove,name,assert,true,some,expected,standard,headers,weren,t,returned,standard,headers,standard,headers,is,empty
RestClientSingleHostIntegTests -> public void testHeaders() throws IOException;1526574077;End to end test for headers. We test it explicitly against a real http client as there are different ways_to set/add headers to the {@link org.apache.http.client.HttpClient}._Exercises the test http server ability to send back whatever headers it received.;public void testHeaders() throws IOException {_        for (String method : getHttpMethods()) {_            final Set<String> standardHeaders = new HashSet<>(Arrays.asList("Connection", "Host", "User-agent", "Date"))__            if (method.equals("HEAD") == false) {_                standardHeaders.add("Content-length")__            }_            final Header[] requestHeaders = RestClientTestUtil.randomHeaders(getRandom(), "Header")__            final int statusCode = randomStatusCode(getRandom())__            Response esResponse__            try {_                esResponse = restClient.performRequest(method, "/" + statusCode, Collections.<String, String>emptyMap(), requestHeaders)__            } catch (ResponseException e) {_                esResponse = e.getResponse()__            }__            assertEquals(method, esResponse.getRequestLine().getMethod())__            assertEquals(statusCode, esResponse.getStatusLine().getStatusCode())__            assertEquals(pathPrefix + "/" + statusCode, esResponse.getRequestLine().getUri())__            assertHeaders(defaultHeaders, requestHeaders, esResponse.getHeaders(), standardHeaders)__            for (final Header responseHeader : esResponse.getHeaders()) {_                String name = responseHeader.getName()__                if (name.startsWith("Header") == false) {_                    assertTrue("unknown header was returned " + name, standardHeaders.remove(name))__                }_            }_            assertTrue("some expected standard headers weren't returned: " + standardHeaders, standardHeaders.isEmpty())__        }_    };end,to,end,test,for,headers,we,test,it,explicitly,against,a,real,http,client,as,there,are,different,ways,to,set,add,headers,to,the,link,org,apache,http,client,http,client,exercises,the,test,http,server,ability,to,send,back,whatever,headers,it,received;public,void,test,headers,throws,ioexception,for,string,method,get,http,methods,final,set,string,standard,headers,new,hash,set,arrays,as,list,connection,host,user,agent,date,if,method,equals,head,false,standard,headers,add,content,length,final,header,request,headers,rest,client,test,util,random,headers,get,random,header,final,int,status,code,random,status,code,get,random,response,es,response,try,es,response,rest,client,perform,request,method,status,code,collections,string,string,empty,map,request,headers,catch,response,exception,e,es,response,e,get,response,assert,equals,method,es,response,get,request,line,get,method,assert,equals,status,code,es,response,get,status,line,get,status,code,assert,equals,path,prefix,status,code,es,response,get,request,line,get,uri,assert,headers,default,headers,request,headers,es,response,get,headers,standard,headers,for,final,header,response,header,es,response,get,headers,string,name,response,header,get,name,if,name,starts,with,header,false,assert,true,unknown,header,was,returned,name,standard,headers,remove,name,assert,true,some,expected,standard,headers,weren,t,returned,standard,headers,standard,headers,is,empty
RestClientSingleHostIntegTests -> public void testHeaders() throws IOException;1527096592;End to end test for headers. We test it explicitly against a real http client as there are different ways_to set/add headers to the {@link org.apache.http.client.HttpClient}._Exercises the test http server ability to send back whatever headers it received.;public void testHeaders() throws IOException {_        for (String method : getHttpMethods()) {_            final Set<String> standardHeaders = new HashSet<>(Arrays.asList("Connection", "Host", "User-agent", "Date"))__            if (method.equals("HEAD") == false) {_                standardHeaders.add("Content-length")__            }_            final Header[] requestHeaders = RestClientTestUtil.randomHeaders(getRandom(), "Header")__            final int statusCode = randomStatusCode(getRandom())__            Response esResponse__            try {_                esResponse = restClient.performRequest(method, "/" + statusCode, Collections.<String, String>emptyMap(), requestHeaders)__            } catch (ResponseException e) {_                esResponse = e.getResponse()__            }__            assertEquals(method, esResponse.getRequestLine().getMethod())__            assertEquals(statusCode, esResponse.getStatusLine().getStatusCode())__            assertEquals(pathPrefix + "/" + statusCode, esResponse.getRequestLine().getUri())__            assertHeaders(defaultHeaders, requestHeaders, esResponse.getHeaders(), standardHeaders)__            for (final Header responseHeader : esResponse.getHeaders()) {_                String name = responseHeader.getName()__                if (name.startsWith("Header") == false) {_                    assertTrue("unknown header was returned " + name, standardHeaders.remove(name))__                }_            }_            assertTrue("some expected standard headers weren't returned: " + standardHeaders, standardHeaders.isEmpty())__        }_    };end,to,end,test,for,headers,we,test,it,explicitly,against,a,real,http,client,as,there,are,different,ways,to,set,add,headers,to,the,link,org,apache,http,client,http,client,exercises,the,test,http,server,ability,to,send,back,whatever,headers,it,received;public,void,test,headers,throws,ioexception,for,string,method,get,http,methods,final,set,string,standard,headers,new,hash,set,arrays,as,list,connection,host,user,agent,date,if,method,equals,head,false,standard,headers,add,content,length,final,header,request,headers,rest,client,test,util,random,headers,get,random,header,final,int,status,code,random,status,code,get,random,response,es,response,try,es,response,rest,client,perform,request,method,status,code,collections,string,string,empty,map,request,headers,catch,response,exception,e,es,response,e,get,response,assert,equals,method,es,response,get,request,line,get,method,assert,equals,status,code,es,response,get,status,line,get,status,code,assert,equals,path,prefix,status,code,es,response,get,request,line,get,uri,assert,headers,default,headers,request,headers,es,response,get,headers,standard,headers,for,final,header,response,header,es,response,get,headers,string,name,response,header,get,name,if,name,starts,with,header,false,assert,true,unknown,header,was,returned,name,standard,headers,remove,name,assert,true,some,expected,standard,headers,weren,t,returned,standard,headers,standard,headers,is,empty
RestClientSingleHostIntegTests -> public void testHeaders() throws IOException;1527840262;End to end test for headers. We test it explicitly against a real http client as there are different ways_to set/add headers to the {@link org.apache.http.client.HttpClient}._Exercises the test http server ability to send back whatever headers it received.;public void testHeaders() throws IOException {_        for (String method : getHttpMethods()) {_            final Set<String> standardHeaders = new HashSet<>(Arrays.asList("Connection", "Host", "User-agent", "Date"))__            if (method.equals("HEAD") == false) {_                standardHeaders.add("Content-length")__            }_            final Header[] requestHeaders = RestClientTestUtil.randomHeaders(getRandom(), "Header")__            final int statusCode = randomStatusCode(getRandom())__            Response esResponse__            try {_                esResponse = restClient.performRequest(method, "/" + statusCode, Collections.<String, String>emptyMap(), requestHeaders)__            } catch (ResponseException e) {_                esResponse = e.getResponse()__            }__            assertEquals(method, esResponse.getRequestLine().getMethod())__            assertEquals(statusCode, esResponse.getStatusLine().getStatusCode())__            assertEquals(pathPrefix + "/" + statusCode, esResponse.getRequestLine().getUri())__            assertHeaders(defaultHeaders, requestHeaders, esResponse.getHeaders(), standardHeaders)__            for (final Header responseHeader : esResponse.getHeaders()) {_                String name = responseHeader.getName()__                if (name.startsWith("Header") == false) {_                    assertTrue("unknown header was returned " + name, standardHeaders.remove(name))__                }_            }_            assertTrue("some expected standard headers weren't returned: " + standardHeaders, standardHeaders.isEmpty())__        }_    };end,to,end,test,for,headers,we,test,it,explicitly,against,a,real,http,client,as,there,are,different,ways,to,set,add,headers,to,the,link,org,apache,http,client,http,client,exercises,the,test,http,server,ability,to,send,back,whatever,headers,it,received;public,void,test,headers,throws,ioexception,for,string,method,get,http,methods,final,set,string,standard,headers,new,hash,set,arrays,as,list,connection,host,user,agent,date,if,method,equals,head,false,standard,headers,add,content,length,final,header,request,headers,rest,client,test,util,random,headers,get,random,header,final,int,status,code,random,status,code,get,random,response,es,response,try,es,response,rest,client,perform,request,method,status,code,collections,string,string,empty,map,request,headers,catch,response,exception,e,es,response,e,get,response,assert,equals,method,es,response,get,request,line,get,method,assert,equals,status,code,es,response,get,status,line,get,status,code,assert,equals,path,prefix,status,code,es,response,get,request,line,get,uri,assert,headers,default,headers,request,headers,es,response,get,headers,standard,headers,for,final,header,response,header,es,response,get,headers,string,name,response,header,get,name,if,name,starts,with,header,false,assert,true,unknown,header,was,returned,name,standard,headers,remove,name,assert,true,some,expected,standard,headers,weren,t,returned,standard,headers,standard,headers,is,empty
RestClientSingleHostIntegTests -> public void testHeaders() throws IOException;1531382259;End to end test for headers. We test it explicitly against a real http client as there are different ways_to set/add headers to the {@link org.apache.http.client.HttpClient}._Exercises the test http server ability to send back whatever headers it received.;public void testHeaders() throws IOException {_        for (String method : getHttpMethods()) {_            final Set<String> standardHeaders = new HashSet<>(Arrays.asList("Connection", "Host", "User-agent", "Date"))__            if (method.equals("HEAD") == false) {_                standardHeaders.add("Content-length")__            }_            final Header[] requestHeaders = RestClientTestUtil.randomHeaders(getRandom(), "Header")__            final int statusCode = randomStatusCode(getRandom())__            Response esResponse__            try {_                esResponse = restClient.performRequest(method, "/" + statusCode, Collections.<String, String>emptyMap(), requestHeaders)__            } catch (ResponseException e) {_                esResponse = e.getResponse()__            }__            assertEquals(method, esResponse.getRequestLine().getMethod())__            assertEquals(statusCode, esResponse.getStatusLine().getStatusCode())__            assertEquals(pathPrefix + "/" + statusCode, esResponse.getRequestLine().getUri())__            assertHeaders(defaultHeaders, requestHeaders, esResponse.getHeaders(), standardHeaders)__            for (final Header responseHeader : esResponse.getHeaders()) {_                String name = responseHeader.getName()__                if (name.startsWith("Header") == false) {_                    assertTrue("unknown header was returned " + name, standardHeaders.remove(name))__                }_            }_            assertTrue("some expected standard headers weren't returned: " + standardHeaders, standardHeaders.isEmpty())__        }_    };end,to,end,test,for,headers,we,test,it,explicitly,against,a,real,http,client,as,there,are,different,ways,to,set,add,headers,to,the,link,org,apache,http,client,http,client,exercises,the,test,http,server,ability,to,send,back,whatever,headers,it,received;public,void,test,headers,throws,ioexception,for,string,method,get,http,methods,final,set,string,standard,headers,new,hash,set,arrays,as,list,connection,host,user,agent,date,if,method,equals,head,false,standard,headers,add,content,length,final,header,request,headers,rest,client,test,util,random,headers,get,random,header,final,int,status,code,random,status,code,get,random,response,es,response,try,es,response,rest,client,perform,request,method,status,code,collections,string,string,empty,map,request,headers,catch,response,exception,e,es,response,e,get,response,assert,equals,method,es,response,get,request,line,get,method,assert,equals,status,code,es,response,get,status,line,get,status,code,assert,equals,path,prefix,status,code,es,response,get,request,line,get,uri,assert,headers,default,headers,request,headers,es,response,get,headers,standard,headers,for,final,header,response,header,es,response,get,headers,string,name,response,header,get,name,if,name,starts,with,header,false,assert,true,unknown,header,was,returned,name,standard,headers,remove,name,assert,true,some,expected,standard,headers,weren,t,returned,standard,headers,standard,headers,is,empty
RestClientSingleHostIntegTests -> public void testHeaders() throws IOException;1535965276;End to end test for headers. We test it explicitly against a real http client as there are different ways_to set/add headers to the {@link org.apache.http.client.HttpClient}._Exercises the test http server ability to send back whatever headers it received.;public void testHeaders() throws IOException {_        for (String method : getHttpMethods()) {_            final Set<String> standardHeaders = new HashSet<>(Arrays.asList("Connection", "Host", "User-agent", "Date"))__            if (method.equals("HEAD") == false) {_                standardHeaders.add("Content-length")__            }_            final Header[] requestHeaders = RestClientTestUtil.randomHeaders(getRandom(), "Header")__            final int statusCode = randomStatusCode(getRandom())__            Request request = new Request(method, "/" + statusCode)__            RequestOptions.Builder options = request.getOptions().toBuilder()__            for (Header header : requestHeaders) {_                options.addHeader(header.getName(), header.getValue())__            }_            request.setOptions(options)__            Response esResponse__            try {_                esResponse = restClient.performRequest(request)__            } catch (ResponseException e) {_                esResponse = e.getResponse()__            }__            assertEquals(method, esResponse.getRequestLine().getMethod())__            assertEquals(statusCode, esResponse.getStatusLine().getStatusCode())__            assertEquals(pathPrefix + "/" + statusCode, esResponse.getRequestLine().getUri())__            assertHeaders(defaultHeaders, requestHeaders, esResponse.getHeaders(), standardHeaders)__            for (final Header responseHeader : esResponse.getHeaders()) {_                String name = responseHeader.getName()__                if (name.startsWith("Header") == false) {_                    assertTrue("unknown header was returned " + name, standardHeaders.remove(name))__                }_            }_            assertTrue("some expected standard headers weren't returned: " + standardHeaders, standardHeaders.isEmpty())__        }_    };end,to,end,test,for,headers,we,test,it,explicitly,against,a,real,http,client,as,there,are,different,ways,to,set,add,headers,to,the,link,org,apache,http,client,http,client,exercises,the,test,http,server,ability,to,send,back,whatever,headers,it,received;public,void,test,headers,throws,ioexception,for,string,method,get,http,methods,final,set,string,standard,headers,new,hash,set,arrays,as,list,connection,host,user,agent,date,if,method,equals,head,false,standard,headers,add,content,length,final,header,request,headers,rest,client,test,util,random,headers,get,random,header,final,int,status,code,random,status,code,get,random,request,request,new,request,method,status,code,request,options,builder,options,request,get,options,to,builder,for,header,header,request,headers,options,add,header,header,get,name,header,get,value,request,set,options,options,response,es,response,try,es,response,rest,client,perform,request,request,catch,response,exception,e,es,response,e,get,response,assert,equals,method,es,response,get,request,line,get,method,assert,equals,status,code,es,response,get,status,line,get,status,code,assert,equals,path,prefix,status,code,es,response,get,request,line,get,uri,assert,headers,default,headers,request,headers,es,response,get,headers,standard,headers,for,final,header,response,header,es,response,get,headers,string,name,response,header,get,name,if,name,starts,with,header,false,assert,true,unknown,header,was,returned,name,standard,headers,remove,name,assert,true,some,expected,standard,headers,weren,t,returned,standard,headers,standard,headers,is,empty
RestClientSingleHostIntegTests -> public void testDeleteWithBody() throws IOException;1524684173;End to end test for delete with body. We test it explicitly as it is not supported_out of the box by {@link org.apache.http.client.HttpClient}._Exercises the test http server ability to send back whatever body it received.;public void testDeleteWithBody() throws IOException {_        bodyTest("DELETE")__    };end,to,end,test,for,delete,with,body,we,test,it,explicitly,as,it,is,not,supported,out,of,the,box,by,link,org,apache,http,client,http,client,exercises,the,test,http,server,ability,to,send,back,whatever,body,it,received;public,void,test,delete,with,body,throws,ioexception,body,test,delete
RestClientSingleHostIntegTests -> public void testDeleteWithBody() throws IOException;1524780945;End to end test for delete with body. We test it explicitly as it is not supported_out of the box by {@link org.apache.http.client.HttpClient}._Exercises the test http server ability to send back whatever body it received.;public void testDeleteWithBody() throws IOException {_        bodyTest("DELETE")__    };end,to,end,test,for,delete,with,body,we,test,it,explicitly,as,it,is,not,supported,out,of,the,box,by,link,org,apache,http,client,http,client,exercises,the,test,http,server,ability,to,send,back,whatever,body,it,received;public,void,test,delete,with,body,throws,ioexception,body,test,delete
RestClientSingleHostIntegTests -> public void testDeleteWithBody() throws IOException;1525859433;End to end test for delete with body. We test it explicitly as it is not supported_out of the box by {@link org.apache.http.client.HttpClient}._Exercises the test http server ability to send back whatever body it received.;public void testDeleteWithBody() throws IOException {_        bodyTest("DELETE")__    };end,to,end,test,for,delete,with,body,we,test,it,explicitly,as,it,is,not,supported,out,of,the,box,by,link,org,apache,http,client,http,client,exercises,the,test,http,server,ability,to,send,back,whatever,body,it,received;public,void,test,delete,with,body,throws,ioexception,body,test,delete
RestClientSingleHostIntegTests -> public void testDeleteWithBody() throws IOException;1526029249;End to end test for delete with body. We test it explicitly as it is not supported_out of the box by {@link org.apache.http.client.HttpClient}._Exercises the test http server ability to send back whatever body it received.;public void testDeleteWithBody() throws IOException {_        bodyTest("DELETE")__    };end,to,end,test,for,delete,with,body,we,test,it,explicitly,as,it,is,not,supported,out,of,the,box,by,link,org,apache,http,client,http,client,exercises,the,test,http,server,ability,to,send,back,whatever,body,it,received;public,void,test,delete,with,body,throws,ioexception,body,test,delete
RestClientSingleHostIntegTests -> public void testDeleteWithBody() throws IOException;1526374795;End to end test for delete with body. We test it explicitly as it is not supported_out of the box by {@link org.apache.http.client.HttpClient}._Exercises the test http server ability to send back whatever body it received.;public void testDeleteWithBody() throws IOException {_        bodyTest("DELETE")__    };end,to,end,test,for,delete,with,body,we,test,it,explicitly,as,it,is,not,supported,out,of,the,box,by,link,org,apache,http,client,http,client,exercises,the,test,http,server,ability,to,send,back,whatever,body,it,received;public,void,test,delete,with,body,throws,ioexception,body,test,delete
RestClientSingleHostIntegTests -> public void testDeleteWithBody() throws IOException;1526574077;End to end test for delete with body. We test it explicitly as it is not supported_out of the box by {@link org.apache.http.client.HttpClient}._Exercises the test http server ability to send back whatever body it received.;public void testDeleteWithBody() throws IOException {_        bodyTest("DELETE")__    };end,to,end,test,for,delete,with,body,we,test,it,explicitly,as,it,is,not,supported,out,of,the,box,by,link,org,apache,http,client,http,client,exercises,the,test,http,server,ability,to,send,back,whatever,body,it,received;public,void,test,delete,with,body,throws,ioexception,body,test,delete
RestClientSingleHostIntegTests -> public void testDeleteWithBody() throws IOException;1527096592;End to end test for delete with body. We test it explicitly as it is not supported_out of the box by {@link org.apache.http.client.HttpClient}._Exercises the test http server ability to send back whatever body it received.;public void testDeleteWithBody() throws IOException {_        bodyTest("DELETE")__    };end,to,end,test,for,delete,with,body,we,test,it,explicitly,as,it,is,not,supported,out,of,the,box,by,link,org,apache,http,client,http,client,exercises,the,test,http,server,ability,to,send,back,whatever,body,it,received;public,void,test,delete,with,body,throws,ioexception,body,test,delete
RestClientSingleHostIntegTests -> public void testDeleteWithBody() throws IOException;1527840262;End to end test for delete with body. We test it explicitly as it is not supported_out of the box by {@link org.apache.http.client.HttpClient}._Exercises the test http server ability to send back whatever body it received.;public void testDeleteWithBody() throws IOException {_        bodyTest("DELETE")__    };end,to,end,test,for,delete,with,body,we,test,it,explicitly,as,it,is,not,supported,out,of,the,box,by,link,org,apache,http,client,http,client,exercises,the,test,http,server,ability,to,send,back,whatever,body,it,received;public,void,test,delete,with,body,throws,ioexception,body,test,delete
RestClientSingleHostIntegTests -> public void testDeleteWithBody() throws IOException;1531382259;End to end test for delete with body. We test it explicitly as it is not supported_out of the box by {@link org.apache.http.client.HttpClient}._Exercises the test http server ability to send back whatever body it received.;public void testDeleteWithBody() throws IOException {_        bodyTest("DELETE")__    };end,to,end,test,for,delete,with,body,we,test,it,explicitly,as,it,is,not,supported,out,of,the,box,by,link,org,apache,http,client,http,client,exercises,the,test,http,server,ability,to,send,back,whatever,body,it,received;public,void,test,delete,with,body,throws,ioexception,body,test,delete
RestClientSingleHostIntegTests -> public void testDeleteWithBody() throws IOException;1535965276;End to end test for delete with body. We test it explicitly as it is not supported_out of the box by {@link org.apache.http.client.HttpClient}._Exercises the test http server ability to send back whatever body it received.;public void testDeleteWithBody() throws IOException {_        bodyTest("DELETE")__    };end,to,end,test,for,delete,with,body,we,test,it,explicitly,as,it,is,not,supported,out,of,the,box,by,link,org,apache,http,client,http,client,exercises,the,test,http,server,ability,to,send,back,whatever,body,it,received;public,void,test,delete,with,body,throws,ioexception,body,test,delete
RestClientSingleHostIntegTests -> public void testAuthCredentialsAreNotClearedOnAuthChallenge() throws IOException;1526574077;Verify that credentials continue to be sent even if a 401 (Unauthorized) response is received;public void testAuthCredentialsAreNotClearedOnAuthChallenge() throws IOException {_        final String[] methods = {"POST", "PUT", "GET", "DELETE"}___        try (RestClient restClient = createRestClient(true, true)) {_            for (final String method : methods) {_                Header realmHeader = new BasicHeader("WWW-Authenticate", "Basic realm=\"test\"")__                final Response response401 = bodyTest(restClient, method, 401, new Header[]{realmHeader})__                assertThat(response401.getHeader("Authorization"), startsWith("Basic"))___                final Response response200 = bodyTest(restClient, method, 200, new Header[0])__                assertThat(response200.getHeader("Authorization"), startsWith("Basic"))__            }_        }__    };verify,that,credentials,continue,to,be,sent,even,if,a,401,unauthorized,response,is,received;public,void,test,auth,credentials,are,not,cleared,on,auth,challenge,throws,ioexception,final,string,methods,post,put,get,delete,try,rest,client,rest,client,create,rest,client,true,true,for,final,string,method,methods,header,realm,header,new,basic,header,www,authenticate,basic,realm,test,final,response,response401,body,test,rest,client,method,401,new,header,realm,header,assert,that,response401,get,header,authorization,starts,with,basic,final,response,response200,body,test,rest,client,method,200,new,header,0,assert,that,response200,get,header,authorization,starts,with,basic
RestClientSingleHostIntegTests -> public void testAuthCredentialsAreNotClearedOnAuthChallenge() throws IOException;1527096592;Verify that credentials continue to be sent even if a 401 (Unauthorized) response is received;public void testAuthCredentialsAreNotClearedOnAuthChallenge() throws IOException {_        final String[] methods = {"POST", "PUT", "GET", "DELETE"}___        try (RestClient restClient = createRestClient(true, true)) {_            for (final String method : methods) {_                Header realmHeader = new BasicHeader("WWW-Authenticate", "Basic realm=\"test\"")__                final Response response401 = bodyTest(restClient, method, 401, new Header[]{realmHeader})__                assertThat(response401.getHeader("Authorization"), startsWith("Basic"))___                final Response response200 = bodyTest(restClient, method, 200, new Header[0])__                assertThat(response200.getHeader("Authorization"), startsWith("Basic"))__            }_        }__    };verify,that,credentials,continue,to,be,sent,even,if,a,401,unauthorized,response,is,received;public,void,test,auth,credentials,are,not,cleared,on,auth,challenge,throws,ioexception,final,string,methods,post,put,get,delete,try,rest,client,rest,client,create,rest,client,true,true,for,final,string,method,methods,header,realm,header,new,basic,header,www,authenticate,basic,realm,test,final,response,response401,body,test,rest,client,method,401,new,header,realm,header,assert,that,response401,get,header,authorization,starts,with,basic,final,response,response200,body,test,rest,client,method,200,new,header,0,assert,that,response200,get,header,authorization,starts,with,basic
RestClientSingleHostIntegTests -> public void testAuthCredentialsAreNotClearedOnAuthChallenge() throws IOException;1527840262;Verify that credentials continue to be sent even if a 401 (Unauthorized) response is received;public void testAuthCredentialsAreNotClearedOnAuthChallenge() throws IOException {_        final String[] methods = {"POST", "PUT", "GET", "DELETE"}___        try (RestClient restClient = createRestClient(true, true)) {_            for (final String method : methods) {_                Header realmHeader = new BasicHeader("WWW-Authenticate", "Basic realm=\"test\"")__                final Response response401 = bodyTest(restClient, method, 401, new Header[]{realmHeader})__                assertThat(response401.getHeader("Authorization"), startsWith("Basic"))___                final Response response200 = bodyTest(restClient, method, 200, new Header[0])__                assertThat(response200.getHeader("Authorization"), startsWith("Basic"))__            }_        }__    };verify,that,credentials,continue,to,be,sent,even,if,a,401,unauthorized,response,is,received;public,void,test,auth,credentials,are,not,cleared,on,auth,challenge,throws,ioexception,final,string,methods,post,put,get,delete,try,rest,client,rest,client,create,rest,client,true,true,for,final,string,method,methods,header,realm,header,new,basic,header,www,authenticate,basic,realm,test,final,response,response401,body,test,rest,client,method,401,new,header,realm,header,assert,that,response401,get,header,authorization,starts,with,basic,final,response,response200,body,test,rest,client,method,200,new,header,0,assert,that,response200,get,header,authorization,starts,with,basic
RestClientSingleHostIntegTests -> public void testAuthCredentialsAreNotClearedOnAuthChallenge() throws IOException;1531382259;Verify that credentials continue to be sent even if a 401 (Unauthorized) response is received;public void testAuthCredentialsAreNotClearedOnAuthChallenge() throws IOException {_        final String[] methods = {"POST", "PUT", "GET", "DELETE"}___        try (RestClient restClient = createRestClient(true, true)) {_            for (final String method : methods) {_                Header realmHeader = new BasicHeader("WWW-Authenticate", "Basic realm=\"test\"")__                final Response response401 = bodyTest(restClient, method, 401, new Header[]{realmHeader})__                assertThat(response401.getHeader("Authorization"), startsWith("Basic"))___                final Response response200 = bodyTest(restClient, method, 200, new Header[0])__                assertThat(response200.getHeader("Authorization"), startsWith("Basic"))__            }_        }__    };verify,that,credentials,continue,to,be,sent,even,if,a,401,unauthorized,response,is,received;public,void,test,auth,credentials,are,not,cleared,on,auth,challenge,throws,ioexception,final,string,methods,post,put,get,delete,try,rest,client,rest,client,create,rest,client,true,true,for,final,string,method,methods,header,realm,header,new,basic,header,www,authenticate,basic,realm,test,final,response,response401,body,test,rest,client,method,401,new,header,realm,header,assert,that,response401,get,header,authorization,starts,with,basic,final,response,response200,body,test,rest,client,method,200,new,header,0,assert,that,response200,get,header,authorization,starts,with,basic
RestClientSingleHostIntegTests -> public void testAuthCredentialsAreNotClearedOnAuthChallenge() throws IOException;1535965276;Verify that credentials continue to be sent even if a 401 (Unauthorized) response is received;public void testAuthCredentialsAreNotClearedOnAuthChallenge() throws IOException {_        final String[] methods = {"POST", "PUT", "GET", "DELETE"}___        try (RestClient restClient = createRestClient(true, true)) {_            for (final String method : methods) {_                Header realmHeader = new BasicHeader("WWW-Authenticate", "Basic realm=\"test\"")__                final Response response401 = bodyTest(restClient, method, 401, new Header[]{realmHeader})__                assertThat(response401.getHeader("Authorization"), startsWith("Basic"))___                final Response response200 = bodyTest(restClient, method, 200, new Header[0])__                assertThat(response200.getHeader("Authorization"), startsWith("Basic"))__            }_        }__    };verify,that,credentials,continue,to,be,sent,even,if,a,401,unauthorized,response,is,received;public,void,test,auth,credentials,are,not,cleared,on,auth,challenge,throws,ioexception,final,string,methods,post,put,get,delete,try,rest,client,rest,client,create,rest,client,true,true,for,final,string,method,methods,header,realm,header,new,basic,header,www,authenticate,basic,realm,test,final,response,response401,body,test,rest,client,method,401,new,header,realm,header,assert,that,response401,get,header,authorization,starts,with,basic,final,response,response200,body,test,rest,client,method,200,new,header,0,assert,that,response200,get,header,authorization,starts,with,basic
RestClientSingleHostIntegTests -> public void testPreemptiveAuthDisabled() throws IOException;1524684173;Verify that credentials are <em>not</em> sent on the first request with preemptive auth disabled.;public void testPreemptiveAuthDisabled() throws IOException  {_        final String[] methods = { "POST", "PUT", "GET", "DELETE" }___        try (RestClient restClient = createRestClient(true, false)) {_            for (final String method : methods) {_                final Response response = bodyTest(restClient, method)___                assertThat(response.getHeader("Authorization"), nullValue())__            }_        }_    };verify,that,credentials,are,em,not,em,sent,on,the,first,request,with,preemptive,auth,disabled;public,void,test,preemptive,auth,disabled,throws,ioexception,final,string,methods,post,put,get,delete,try,rest,client,rest,client,create,rest,client,true,false,for,final,string,method,methods,final,response,response,body,test,rest,client,method,assert,that,response,get,header,authorization,null,value
RestClientSingleHostIntegTests -> public void testPreemptiveAuthDisabled() throws IOException;1524780945;Verify that credentials are <em>not</em> sent on the first request with preemptive auth disabled.;public void testPreemptiveAuthDisabled() throws IOException  {_        final String[] methods = { "POST", "PUT", "GET", "DELETE" }___        try (RestClient restClient = createRestClient(true, false)) {_            for (final String method : methods) {_                final Response response = bodyTest(restClient, method)___                assertThat(response.getHeader("Authorization"), nullValue())__            }_        }_    };verify,that,credentials,are,em,not,em,sent,on,the,first,request,with,preemptive,auth,disabled;public,void,test,preemptive,auth,disabled,throws,ioexception,final,string,methods,post,put,get,delete,try,rest,client,rest,client,create,rest,client,true,false,for,final,string,method,methods,final,response,response,body,test,rest,client,method,assert,that,response,get,header,authorization,null,value
RestClientSingleHostIntegTests -> public void testPreemptiveAuthDisabled() throws IOException;1525859433;Verify that credentials are <em>not</em> sent on the first request with preemptive auth disabled.;public void testPreemptiveAuthDisabled() throws IOException  {_        final String[] methods = { "POST", "PUT", "GET", "DELETE" }___        try (RestClient restClient = createRestClient(true, false)) {_            for (final String method : methods) {_                final Response response = bodyTest(restClient, method)___                assertThat(response.getHeader("Authorization"), nullValue())__            }_        }_    };verify,that,credentials,are,em,not,em,sent,on,the,first,request,with,preemptive,auth,disabled;public,void,test,preemptive,auth,disabled,throws,ioexception,final,string,methods,post,put,get,delete,try,rest,client,rest,client,create,rest,client,true,false,for,final,string,method,methods,final,response,response,body,test,rest,client,method,assert,that,response,get,header,authorization,null,value
RestClientSingleHostIntegTests -> public void testPreemptiveAuthDisabled() throws IOException;1526029249;Verify that credentials are <em>not</em> sent on the first request with preemptive auth disabled.;public void testPreemptiveAuthDisabled() throws IOException  {_        final String[] methods = { "POST", "PUT", "GET", "DELETE" }___        try (RestClient restClient = createRestClient(true, false)) {_            for (final String method : methods) {_                final Response response = bodyTest(restClient, method)___                assertThat(response.getHeader("Authorization"), nullValue())__            }_        }_    };verify,that,credentials,are,em,not,em,sent,on,the,first,request,with,preemptive,auth,disabled;public,void,test,preemptive,auth,disabled,throws,ioexception,final,string,methods,post,put,get,delete,try,rest,client,rest,client,create,rest,client,true,false,for,final,string,method,methods,final,response,response,body,test,rest,client,method,assert,that,response,get,header,authorization,null,value
RestClientSingleHostIntegTests -> public void testPreemptiveAuthDisabled() throws IOException;1526374795;Verify that credentials are <em>not</em> sent on the first request with preemptive auth disabled.;public void testPreemptiveAuthDisabled() throws IOException  {_        final String[] methods = { "POST", "PUT", "GET", "DELETE" }___        try (RestClient restClient = createRestClient(true, false)) {_            for (final String method : methods) {_                final Response response = bodyTest(restClient, method)___                assertThat(response.getHeader("Authorization"), nullValue())__            }_        }_    };verify,that,credentials,are,em,not,em,sent,on,the,first,request,with,preemptive,auth,disabled;public,void,test,preemptive,auth,disabled,throws,ioexception,final,string,methods,post,put,get,delete,try,rest,client,rest,client,create,rest,client,true,false,for,final,string,method,methods,final,response,response,body,test,rest,client,method,assert,that,response,get,header,authorization,null,value
RestClientSingleHostIntegTests -> public void testPreemptiveAuthDisabled() throws IOException;1526574077;Verify that credentials are <em>not</em> sent on the first request with preemptive auth disabled.;public void testPreemptiveAuthDisabled() throws IOException {_        final String[] methods = {"POST", "PUT", "GET", "DELETE"}___        try (RestClient restClient = createRestClient(true, false)) {_            for (final String method : methods) {_                final Response response = bodyTest(restClient, method)___                assertThat(response.getHeader("Authorization"), nullValue())__            }_        }_    };verify,that,credentials,are,em,not,em,sent,on,the,first,request,with,preemptive,auth,disabled;public,void,test,preemptive,auth,disabled,throws,ioexception,final,string,methods,post,put,get,delete,try,rest,client,rest,client,create,rest,client,true,false,for,final,string,method,methods,final,response,response,body,test,rest,client,method,assert,that,response,get,header,authorization,null,value
RestClientSingleHostIntegTests -> public void testPreemptiveAuthDisabled() throws IOException;1527096592;Verify that credentials are <em>not</em> sent on the first request with preemptive auth disabled.;public void testPreemptiveAuthDisabled() throws IOException {_        final String[] methods = {"POST", "PUT", "GET", "DELETE"}___        try (RestClient restClient = createRestClient(true, false)) {_            for (final String method : methods) {_                final Response response = bodyTest(restClient, method)___                assertThat(response.getHeader("Authorization"), nullValue())__            }_        }_    };verify,that,credentials,are,em,not,em,sent,on,the,first,request,with,preemptive,auth,disabled;public,void,test,preemptive,auth,disabled,throws,ioexception,final,string,methods,post,put,get,delete,try,rest,client,rest,client,create,rest,client,true,false,for,final,string,method,methods,final,response,response,body,test,rest,client,method,assert,that,response,get,header,authorization,null,value
RestClientSingleHostIntegTests -> public void testPreemptiveAuthDisabled() throws IOException;1527840262;Verify that credentials are <em>not</em> sent on the first request with preemptive auth disabled.;public void testPreemptiveAuthDisabled() throws IOException {_        final String[] methods = {"POST", "PUT", "GET", "DELETE"}___        try (RestClient restClient = createRestClient(true, false)) {_            for (final String method : methods) {_                final Response response = bodyTest(restClient, method)___                assertThat(response.getHeader("Authorization"), nullValue())__            }_        }_    };verify,that,credentials,are,em,not,em,sent,on,the,first,request,with,preemptive,auth,disabled;public,void,test,preemptive,auth,disabled,throws,ioexception,final,string,methods,post,put,get,delete,try,rest,client,rest,client,create,rest,client,true,false,for,final,string,method,methods,final,response,response,body,test,rest,client,method,assert,that,response,get,header,authorization,null,value
RestClientSingleHostIntegTests -> public void testPreemptiveAuthDisabled() throws IOException;1531382259;Verify that credentials are <em>not</em> sent on the first request with preemptive auth disabled.;public void testPreemptiveAuthDisabled() throws IOException {_        final String[] methods = {"POST", "PUT", "GET", "DELETE"}___        try (RestClient restClient = createRestClient(true, false)) {_            for (final String method : methods) {_                final Response response = bodyTest(restClient, method)___                assertThat(response.getHeader("Authorization"), nullValue())__            }_        }_    };verify,that,credentials,are,em,not,em,sent,on,the,first,request,with,preemptive,auth,disabled;public,void,test,preemptive,auth,disabled,throws,ioexception,final,string,methods,post,put,get,delete,try,rest,client,rest,client,create,rest,client,true,false,for,final,string,method,methods,final,response,response,body,test,rest,client,method,assert,that,response,get,header,authorization,null,value
RestClientSingleHostIntegTests -> public void testPreemptiveAuthDisabled() throws IOException;1535965276;Verify that credentials are <em>not</em> sent on the first request with preemptive auth disabled.;public void testPreemptiveAuthDisabled() throws IOException {_        final String[] methods = {"POST", "PUT", "GET", "DELETE"}___        try (RestClient restClient = createRestClient(true, false)) {_            for (final String method : methods) {_                final Response response = bodyTest(restClient, method)___                assertThat(response.getHeader("Authorization"), nullValue())__            }_        }_    };verify,that,credentials,are,em,not,em,sent,on,the,first,request,with,preemptive,auth,disabled;public,void,test,preemptive,auth,disabled,throws,ioexception,final,string,methods,post,put,get,delete,try,rest,client,rest,client,create,rest,client,true,false,for,final,string,method,methods,final,response,response,body,test,rest,client,method,assert,that,response,get,header,authorization,null,value
RestClientSingleHostIntegTests -> public void testGetWithBody() throws IOException;1524684173;End to end test for get with body. We test it explicitly as it is not supported_out of the box by {@link org.apache.http.client.HttpClient}._Exercises the test http server ability to send back whatever body it received.;public void testGetWithBody() throws IOException {_        bodyTest("GET")__    };end,to,end,test,for,get,with,body,we,test,it,explicitly,as,it,is,not,supported,out,of,the,box,by,link,org,apache,http,client,http,client,exercises,the,test,http,server,ability,to,send,back,whatever,body,it,received;public,void,test,get,with,body,throws,ioexception,body,test,get
RestClientSingleHostIntegTests -> public void testGetWithBody() throws IOException;1524780945;End to end test for get with body. We test it explicitly as it is not supported_out of the box by {@link org.apache.http.client.HttpClient}._Exercises the test http server ability to send back whatever body it received.;public void testGetWithBody() throws IOException {_        bodyTest("GET")__    };end,to,end,test,for,get,with,body,we,test,it,explicitly,as,it,is,not,supported,out,of,the,box,by,link,org,apache,http,client,http,client,exercises,the,test,http,server,ability,to,send,back,whatever,body,it,received;public,void,test,get,with,body,throws,ioexception,body,test,get
RestClientSingleHostIntegTests -> public void testGetWithBody() throws IOException;1525859433;End to end test for get with body. We test it explicitly as it is not supported_out of the box by {@link org.apache.http.client.HttpClient}._Exercises the test http server ability to send back whatever body it received.;public void testGetWithBody() throws IOException {_        bodyTest("GET")__    };end,to,end,test,for,get,with,body,we,test,it,explicitly,as,it,is,not,supported,out,of,the,box,by,link,org,apache,http,client,http,client,exercises,the,test,http,server,ability,to,send,back,whatever,body,it,received;public,void,test,get,with,body,throws,ioexception,body,test,get
RestClientSingleHostIntegTests -> public void testGetWithBody() throws IOException;1526029249;End to end test for get with body. We test it explicitly as it is not supported_out of the box by {@link org.apache.http.client.HttpClient}._Exercises the test http server ability to send back whatever body it received.;public void testGetWithBody() throws IOException {_        bodyTest("GET")__    };end,to,end,test,for,get,with,body,we,test,it,explicitly,as,it,is,not,supported,out,of,the,box,by,link,org,apache,http,client,http,client,exercises,the,test,http,server,ability,to,send,back,whatever,body,it,received;public,void,test,get,with,body,throws,ioexception,body,test,get
RestClientSingleHostIntegTests -> public void testGetWithBody() throws IOException;1526374795;End to end test for get with body. We test it explicitly as it is not supported_out of the box by {@link org.apache.http.client.HttpClient}._Exercises the test http server ability to send back whatever body it received.;public void testGetWithBody() throws IOException {_        bodyTest("GET")__    };end,to,end,test,for,get,with,body,we,test,it,explicitly,as,it,is,not,supported,out,of,the,box,by,link,org,apache,http,client,http,client,exercises,the,test,http,server,ability,to,send,back,whatever,body,it,received;public,void,test,get,with,body,throws,ioexception,body,test,get
RestClientSingleHostIntegTests -> public void testGetWithBody() throws IOException;1526574077;End to end test for get with body. We test it explicitly as it is not supported_out of the box by {@link org.apache.http.client.HttpClient}._Exercises the test http server ability to send back whatever body it received.;public void testGetWithBody() throws IOException {_        bodyTest("GET")__    };end,to,end,test,for,get,with,body,we,test,it,explicitly,as,it,is,not,supported,out,of,the,box,by,link,org,apache,http,client,http,client,exercises,the,test,http,server,ability,to,send,back,whatever,body,it,received;public,void,test,get,with,body,throws,ioexception,body,test,get
RestClientSingleHostIntegTests -> public void testGetWithBody() throws IOException;1527096592;End to end test for get with body. We test it explicitly as it is not supported_out of the box by {@link org.apache.http.client.HttpClient}._Exercises the test http server ability to send back whatever body it received.;public void testGetWithBody() throws IOException {_        bodyTest("GET")__    };end,to,end,test,for,get,with,body,we,test,it,explicitly,as,it,is,not,supported,out,of,the,box,by,link,org,apache,http,client,http,client,exercises,the,test,http,server,ability,to,send,back,whatever,body,it,received;public,void,test,get,with,body,throws,ioexception,body,test,get
RestClientSingleHostIntegTests -> public void testGetWithBody() throws IOException;1527840262;End to end test for get with body. We test it explicitly as it is not supported_out of the box by {@link org.apache.http.client.HttpClient}._Exercises the test http server ability to send back whatever body it received.;public void testGetWithBody() throws IOException {_        bodyTest("GET")__    };end,to,end,test,for,get,with,body,we,test,it,explicitly,as,it,is,not,supported,out,of,the,box,by,link,org,apache,http,client,http,client,exercises,the,test,http,server,ability,to,send,back,whatever,body,it,received;public,void,test,get,with,body,throws,ioexception,body,test,get
RestClientSingleHostIntegTests -> public void testGetWithBody() throws IOException;1531382259;End to end test for get with body. We test it explicitly as it is not supported_out of the box by {@link org.apache.http.client.HttpClient}._Exercises the test http server ability to send back whatever body it received.;public void testGetWithBody() throws IOException {_        bodyTest("GET")__    };end,to,end,test,for,get,with,body,we,test,it,explicitly,as,it,is,not,supported,out,of,the,box,by,link,org,apache,http,client,http,client,exercises,the,test,http,server,ability,to,send,back,whatever,body,it,received;public,void,test,get,with,body,throws,ioexception,body,test,get
RestClientSingleHostIntegTests -> public void testGetWithBody() throws IOException;1535965276;End to end test for get with body. We test it explicitly as it is not supported_out of the box by {@link org.apache.http.client.HttpClient}._Exercises the test http server ability to send back whatever body it received.;public void testGetWithBody() throws IOException {_        bodyTest("GET")__    };end,to,end,test,for,get,with,body,we,test,it,explicitly,as,it,is,not,supported,out,of,the,box,by,link,org,apache,http,client,http,client,exercises,the,test,http,server,ability,to,send,back,whatever,body,it,received;public,void,test,get,with,body,throws,ioexception,body,test,get
