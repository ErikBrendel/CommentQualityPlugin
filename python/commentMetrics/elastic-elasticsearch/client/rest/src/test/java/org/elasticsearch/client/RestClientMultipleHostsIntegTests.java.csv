# id;timestamp;commentText;codeText;commentWords;codeWords
RestClientMultipleHostsIntegTests -> public void testNodeSelector() throws IOException;1528762805;Test host selector against a real server <strong>and</strong>_test what happens after calling;public void testNodeSelector() throws IOException {_        Request request = new Request("GET", "/200")__        RequestOptions.Builder options = request.getOptions().toBuilder()__        options.setNodeSelector(firstPositionNodeSelector())__        request.setOptions(options)__        int rounds = between(1, 10)__        for (int i = 0_ i < rounds_ i++) {_            _            if (stoppedFirstHost) {_                try {_                    restClient.performRequest(request)__                    fail("expected to fail to connect")__                } catch (ConnectException e) {_                    assertEquals("Connection refused", e.getMessage())__                }_            } else {_                Response response = restClient.performRequest(request)__                assertEquals(httpHosts[0], response.getHost())__            }_        }_    };test,host,selector,against,a,real,server,strong,and,strong,test,what,happens,after,calling;public,void,test,node,selector,throws,ioexception,request,request,new,request,get,200,request,options,builder,options,request,get,options,to,builder,options,set,node,selector,first,position,node,selector,request,set,options,options,int,rounds,between,1,10,for,int,i,0,i,rounds,i,if,stopped,first,host,try,rest,client,perform,request,request,fail,expected,to,fail,to,connect,catch,connect,exception,e,assert,equals,connection,refused,e,get,message,else,response,response,rest,client,perform,request,request,assert,equals,http,hosts,0,response,get,host
RestClientMultipleHostsIntegTests -> public void testNodeSelector() throws IOException;1528977744;Test host selector against a real server <strong>and</strong>_test what happens after calling;public void testNodeSelector() throws IOException {_        Request request = new Request("GET", "/200")__        RequestOptions.Builder options = request.getOptions().toBuilder()__        options.setNodeSelector(firstPositionNodeSelector())__        request.setOptions(options)__        int rounds = between(1, 10)__        for (int i = 0_ i < rounds_ i++) {_            _            if (stoppedFirstHost) {_                try {_                    restClient.performRequest(request)__                    fail("expected to fail to connect")__                } catch (ConnectException e) {_                    assertEquals("Connection refused", e.getMessage())__                }_            } else {_                Response response = restClient.performRequest(request)__                assertEquals(httpHosts[0], response.getHost())__            }_        }_    };test,host,selector,against,a,real,server,strong,and,strong,test,what,happens,after,calling;public,void,test,node,selector,throws,ioexception,request,request,new,request,get,200,request,options,builder,options,request,get,options,to,builder,options,set,node,selector,first,position,node,selector,request,set,options,options,int,rounds,between,1,10,for,int,i,0,i,rounds,i,if,stopped,first,host,try,rest,client,perform,request,request,fail,expected,to,fail,to,connect,catch,connect,exception,e,assert,equals,connection,refused,e,get,message,else,response,response,rest,client,perform,request,request,assert,equals,http,hosts,0,response,get,host
RestClientMultipleHostsIntegTests -> public void testNodeSelector() throws IOException;1529076503;Test host selector against a real server <strong>and</strong>_test what happens after calling;public void testNodeSelector() throws IOException {_        Request request = new Request("GET", "/200")__        RequestOptions.Builder options = request.getOptions().toBuilder()__        options.setNodeSelector(firstPositionNodeSelector())__        request.setOptions(options)__        int rounds = between(1, 10)__        for (int i = 0_ i < rounds_ i++) {_            _            if (stoppedFirstHost) {_                try {_                    restClient.performRequest(request)__                    fail("expected to fail to connect")__                } catch (ConnectException e) {_                    _                    assertThat(e.getMessage(), startsWith("Connection refused"))__                }_            } else {_                Response response = restClient.performRequest(request)__                assertEquals(httpHosts[0], response.getHost())__            }_        }_    };test,host,selector,against,a,real,server,strong,and,strong,test,what,happens,after,calling;public,void,test,node,selector,throws,ioexception,request,request,new,request,get,200,request,options,builder,options,request,get,options,to,builder,options,set,node,selector,first,position,node,selector,request,set,options,options,int,rounds,between,1,10,for,int,i,0,i,rounds,i,if,stopped,first,host,try,rest,client,perform,request,request,fail,expected,to,fail,to,connect,catch,connect,exception,e,assert,that,e,get,message,starts,with,connection,refused,else,response,response,rest,client,perform,request,request,assert,equals,http,hosts,0,response,get,host
RestClientMultipleHostsIntegTests -> public void testNodeSelector() throws IOException;1529658035;Test host selector against a real server <strong>and</strong>_test what happens after calling;public void testNodeSelector() throws IOException {_        Request request = new Request("GET", "/200")__        RequestOptions.Builder options = request.getOptions().toBuilder()__        options.setNodeSelector(firstPositionNodeSelector())__        request.setOptions(options)__        int rounds = between(1, 10)__        for (int i = 0_ i < rounds_ i++) {_            _            if (stoppedFirstHost) {_                try {_                    restClient.performRequest(request)__                    fail("expected to fail to connect")__                } catch (ConnectException e) {_                    _                    if (false == System.getProperty("os.name").startsWith("Windows")) {_                        assertEquals("Connection refused", e.getMessage())__                    }_                }_            } else {_                Response response = restClient.performRequest(request)__                assertEquals(httpHosts[0], response.getHost())__            }_        }_    };test,host,selector,against,a,real,server,strong,and,strong,test,what,happens,after,calling;public,void,test,node,selector,throws,ioexception,request,request,new,request,get,200,request,options,builder,options,request,get,options,to,builder,options,set,node,selector,first,position,node,selector,request,set,options,options,int,rounds,between,1,10,for,int,i,0,i,rounds,i,if,stopped,first,host,try,rest,client,perform,request,request,fail,expected,to,fail,to,connect,catch,connect,exception,e,if,false,system,get,property,os,name,starts,with,windows,assert,equals,connection,refused,e,get,message,else,response,response,rest,client,perform,request,request,assert,equals,http,hosts,0,response,get,host
RestClientMultipleHostsIntegTests -> public void testNodeSelector() throws IOException;1529687475;Test host selector against a real server <strong>and</strong>_test what happens after calling;public void testNodeSelector() throws IOException {_        try (RestClient restClient = buildRestClient(firstPositionNodeSelector())) {_            Request request = new Request("GET", "/200")__            int rounds = between(1, 10)__            for (int i = 0_ i < rounds_ i++) {_                _                if (stoppedFirstHost) {_                    try {_                        restClient.performRequest(request)__                        fail("expected to fail to connect")__                    } catch (ConnectException e) {_                        _                        if (false == System.getProperty("os.name").startsWith("Windows")) {_                            assertEquals("Connection refused", e.getMessage())__                        }_                    }_                } else {_                    Response response = restClient.performRequest(request)__                    assertEquals(httpHosts[0], response.getHost())__                }_            }_        }_    };test,host,selector,against,a,real,server,strong,and,strong,test,what,happens,after,calling;public,void,test,node,selector,throws,ioexception,try,rest,client,rest,client,build,rest,client,first,position,node,selector,request,request,new,request,get,200,int,rounds,between,1,10,for,int,i,0,i,rounds,i,if,stopped,first,host,try,rest,client,perform,request,request,fail,expected,to,fail,to,connect,catch,connect,exception,e,if,false,system,get,property,os,name,starts,with,windows,assert,equals,connection,refused,e,get,message,else,response,response,rest,client,perform,request,request,assert,equals,http,hosts,0,response,get,host
