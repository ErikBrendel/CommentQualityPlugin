commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;public void testCloseAllJobsRequest() {     CloseJobRequest request = CloseJobRequest.closeAllJobsRequest().     assertEquals(request.getJobIds().size(), 1).     assertEquals(request.getJobIds().get(0), "_all"). }
false;public;0;7;;public void testWithNullJobIds() {     Exception exception = expectThrows(IllegalArgumentException.class, CloseJobRequest::new).     assertEquals(exception.getMessage(), "jobIds must not be empty").     exception = expectThrows(NullPointerException.class, () -> new CloseJobRequest("job1", null)).     assertEquals(exception.getMessage(), "jobIds must not contain null values"). }
false;protected;0;25;;@Override protected CloseJobRequest createTestInstance() {     int jobCount = randomIntBetween(1, 10).     List<String> jobIds = new ArrayList<>(jobCount).     for (int i = 0. i < jobCount. i++) {         jobIds.add(randomAlphaOfLength(10)).     }     CloseJobRequest request = new CloseJobRequest(jobIds.toArray(new String[0])).     if (randomBoolean()) {         request.setAllowNoJobs(randomBoolean()).     }     if (randomBoolean()) {         request.setTimeout(TimeValue.timeValueMinutes(randomIntBetween(1, 10))).     }     if (randomBoolean()) {         request.setForce(randomBoolean()).     }     return request. }
false;protected;1;4;;@Override protected CloseJobRequest doParseInstance(XContentParser parser) throws IOException {     return CloseJobRequest.PARSER.parse(parser, null). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return true. }
