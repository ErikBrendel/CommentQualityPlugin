commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected HistogramGroupConfig createTestInstance() {     return randomHistogramGroupConfig(). }
false;protected;1;4;;@Override protected HistogramGroupConfig doParseInstance(final XContentParser parser) throws IOException {     return HistogramGroupConfig.fromXContent(parser). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return true. }
false;public;0;10;;public void testValidateNullFields() {     final HistogramGroupConfig config = new HistogramGroupConfig(60L).     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(true)).     ValidationException validationException = validation.get().     assertThat(validationException.validationErrors().size(), is(1)).     assertThat(validationException.validationErrors(), contains(is("Fields must have at least one value"))). }
false;public;0;10;;public void testValidatEmptyFields() {     final HistogramGroupConfig config = new HistogramGroupConfig(60L, Strings.EMPTY_ARRAY).     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(true)).     ValidationException validationException = validation.get().     assertThat(validationException.validationErrors().size(), is(1)).     assertThat(validationException.validationErrors(), contains(is("Fields must have at least one value"))). }
false;public;0;10;;public void testValidateNegativeInterval() {     final HistogramGroupConfig config = new HistogramGroupConfig(-1L, randomHistogramGroupConfig().getFields()).     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(true)).     ValidationException validationException = validation.get().     assertThat(validationException.validationErrors().size(), is(1)).     assertThat(validationException.validationErrors(), contains(is("Interval must be a positive long"))). }
false;public;0;10;;public void testValidateZeroInterval() {     final HistogramGroupConfig config = new HistogramGroupConfig(0L, randomHistogramGroupConfig().getFields()).     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(true)).     ValidationException validationException = validation.get().     assertThat(validationException.validationErrors().size(), is(1)).     assertThat(validationException.validationErrors(), contains(is("Interval must be a positive long"))). }
false;public;0;7;;public void testValidate() {     final HistogramGroupConfig config = randomHistogramGroupConfig().     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(false)). }
false;static;0;8;;static HistogramGroupConfig randomHistogramGroupConfig() {     final long interval = randomNonNegativeLong().     final String[] fields = new String[randomIntBetween(1, 10)].     for (int i = 0. i < fields.length. i++) {         fields[i] = randomAlphaOfLength(randomIntBetween(3, 10)).     }     return new HistogramGroupConfig(interval, fields). }
