commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;public void testRequestValidation() {     GetApiKeyRequest request = GetApiKeyRequest.usingApiKeyId(randomAlphaOfLength(5)).     Optional<ValidationException> ve = request.validate().     assertFalse(ve.isPresent()).     request = GetApiKeyRequest.usingApiKeyName(randomAlphaOfLength(5)).     ve = request.validate().     assertFalse(ve.isPresent()).     request = GetApiKeyRequest.usingRealmName(randomAlphaOfLength(5)).     ve = request.validate().     assertFalse(ve.isPresent()).     request = GetApiKeyRequest.usingUserName(randomAlphaOfLength(5)).     ve = request.validate().     assertFalse(ve.isPresent()).     request = GetApiKeyRequest.usingRealmAndUserName(randomAlphaOfLength(5), randomAlphaOfLength(7)).     ve = request.validate().     assertFalse(ve.isPresent()). }
false;public;0;22;;public void testRequestValidationFailureScenarios() throws IOException {     String[][] inputs = new String[][] { { randomFrom(new String[] { null, "" }), randomFrom(new String[] { null, "" }), randomFrom(new String[] { null, "" }), randomFrom(new String[] { null, "" }) }, { randomFrom(new String[] { null, "" }), "user", "api-kid", "api-kname" }, { "realm", randomFrom(new String[] { null, "" }), "api-kid", "api-kname" }, { "realm", "user", "api-kid", randomFrom(new String[] { null, "" }) }, { randomFrom(new String[] { null, "" }), randomFrom(new String[] { null, "" }), "api-kid", "api-kname" } }.     String[] expectedErrorMessages = new String[] { "One of [api key id, api key name, username, realm name] must be specified", "username or realm name must not be specified when the api key id or api key name is specified", "username or realm name must not be specified when the api key id or api key name is specified", "username or realm name must not be specified when the api key id or api key name is specified", "only one of [api key id, api key name] can be specified" }.     for (int i = 0. i < inputs.length. i++) {         final int caseNo = i.         IllegalArgumentException ve = expectThrows(IllegalArgumentException.class, () -> new GetApiKeyRequest(inputs[caseNo][0], inputs[caseNo][1], inputs[caseNo][2], inputs[caseNo][3])).         assertNotNull(ve).         assertThat(ve.getMessage(), equalTo(expectedErrorMessages[caseNo])).     } }
