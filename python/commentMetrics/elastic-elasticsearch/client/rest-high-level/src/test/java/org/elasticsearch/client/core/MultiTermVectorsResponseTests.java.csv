commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;public void testFromXContent() throws IOException {     xContentTester(this::createParser, this::createTestInstance, this::toXContent, MultiTermVectorsResponse::fromXContent).supportsUnknownFields(true).randomFieldsExcludeFilter(field -> field.endsWith("term_vectors") || field.endsWith("terms") || field.endsWith("tokens")).test(). }
false;private;2;12;;private void toXContent(MultiTermVectorsResponse response, XContentBuilder builder) throws IOException {     builder.startObject().     List<TermVectorsResponse> termVectorsResponseList = response.getTermVectorsResponses().     if (termVectorsResponseList != null) {         builder.startArray("docs").         for (TermVectorsResponse tvr : termVectorsResponseList) {             TermVectorsResponseTests.toXContent(tvr, builder).         }         builder.endArray().     }     builder.endObject(). }
false;protected;0;9;;protected MultiTermVectorsResponse createTestInstance() {     int numberOfResponses = randomIntBetween(0, 5).     List<TermVectorsResponse> responses = new ArrayList<>(numberOfResponses).     for (int i = 0. i < numberOfResponses. i++) {         TermVectorsResponse tvResponse = TermVectorsResponseTests.createTestInstance().         responses.add(tvResponse).     }     return new MultiTermVectorsResponse(responses). }
