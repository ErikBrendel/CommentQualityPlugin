commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Before public void setupRemoteClusterConfig() throws Exception {     // Configure local cluster as remote cluster:     // TODO: replace with nodes info highlevel rest client code when it is available:     final Request request = new Request("GET", "/_nodes").     Map<?, ?> nodesResponse = (Map<?, ?>) toMap(client().performRequest(request)).get("nodes").     // Select node info of first node (we don't know the node id):     nodesResponse = (Map<?, ?>) nodesResponse.get(nodesResponse.keySet().iterator().next()).     String transportAddress = (String) nodesResponse.get("transport_address").     ClusterUpdateSettingsRequest updateSettingsRequest = new ClusterUpdateSettingsRequest().     updateSettingsRequest.transientSettings(Collections.singletonMap("cluster.remote.local_cluster.seeds", transportAddress)).     ClusterUpdateSettingsResponse updateSettingsResponse = highLevelClient().cluster().putSettings(updateSettingsRequest, RequestOptions.DEFAULT).     assertThat(updateSettingsResponse.isAcknowledged(), is(true)).     assertBusy(() -> {         Map<?, ?> localConnection = (Map<?, ?>) toMap(client().performRequest(new Request("GET", "/_remote/info"))).get("local_cluster").         assertThat(localConnection, notNullValue()).         assertThat(localConnection.get("connected"), is(true)).     }). }
false;public;0;112;;public void testIndexFollowing() throws Exception {     CcrClient ccrClient = highLevelClient().ccr().     CreateIndexRequest createIndexRequest = new CreateIndexRequest("leader").     createIndexRequest.settings(Collections.singletonMap("index.soft_deletes.enabled", true)).     CreateIndexResponse response = highLevelClient().indices().create(createIndexRequest, RequestOptions.DEFAULT).     assertThat(response.isAcknowledged(), is(true)).     PutFollowRequest putFollowRequest = new PutFollowRequest("local_cluster", "leader", "follower", ActiveShardCount.ONE).     PutFollowResponse putFollowResponse = execute(putFollowRequest, ccrClient::putFollow, ccrClient::putFollowAsync).     assertThat(putFollowResponse.isFollowIndexCreated(), is(true)).     assertThat(putFollowResponse.isFollowIndexShardsAcked(), is(true)).     assertThat(putFollowResponse.isIndexFollowingStarted(), is(true)).     IndexRequest indexRequest = new IndexRequest("leader", "_doc").setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).source("{}", XContentType.JSON).     highLevelClient().index(indexRequest, RequestOptions.DEFAULT).     SearchRequest leaderSearchRequest = new SearchRequest("leader").     SearchResponse leaderSearchResponse = highLevelClient().search(leaderSearchRequest, RequestOptions.DEFAULT).     assertThat(leaderSearchResponse.getHits().getTotalHits().value, equalTo(1L)).     try {         assertBusy(() -> {             FollowInfoRequest followInfoRequest = new FollowInfoRequest("follower").             FollowInfoResponse followInfoResponse = execute(followInfoRequest, ccrClient::getFollowInfo, ccrClient::getFollowInfoAsync).             assertThat(followInfoResponse.getInfos().size(), equalTo(1)).             assertThat(followInfoResponse.getInfos().get(0).getFollowerIndex(), equalTo("follower")).             assertThat(followInfoResponse.getInfos().get(0).getLeaderIndex(), equalTo("leader")).             assertThat(followInfoResponse.getInfos().get(0).getRemoteCluster(), equalTo("local_cluster")).             assertThat(followInfoResponse.getInfos().get(0).getStatus(), equalTo(FollowInfoResponse.Status.ACTIVE)).             FollowStatsRequest followStatsRequest = new FollowStatsRequest("follower").             FollowStatsResponse followStatsResponse = execute(followStatsRequest, ccrClient::getFollowStats, ccrClient::getFollowStatsAsync).             List<ShardFollowStats> shardFollowStats = followStatsResponse.getIndicesFollowStats().getShardFollowStats("follower").             long followerGlobalCheckpoint = shardFollowStats.stream().mapToLong(ShardFollowStats::getFollowerGlobalCheckpoint).max().getAsLong().             assertThat(followerGlobalCheckpoint, equalTo(0L)).             SearchRequest followerSearchRequest = new SearchRequest("follower").             SearchResponse followerSearchResponse = highLevelClient().search(followerSearchRequest, RequestOptions.DEFAULT).             assertThat(followerSearchResponse.getHits().getTotalHits().value, equalTo(1L)).         }).     } catch (Exception e) {         IndicesFollowStats followStats = ccrClient.getCcrStats(new CcrStatsRequest(), RequestOptions.DEFAULT).getIndicesFollowStats().         for (Map.Entry<String, List<ShardFollowStats>> entry : followStats.getShardFollowStats().entrySet()) {             for (ShardFollowStats shardFollowStats : entry.getValue()) {                 if (shardFollowStats.getFatalException() != null) {                     logger.warn(new ParameterizedMessage("fatal shard follow exception {}", shardFollowStats.getShardId()), shardFollowStats.getFatalException()).                 }             }         }     }     PauseFollowRequest pauseFollowRequest = new PauseFollowRequest("follower").     AcknowledgedResponse pauseFollowResponse = execute(pauseFollowRequest, ccrClient::pauseFollow, ccrClient::pauseFollowAsync).     assertThat(pauseFollowResponse.isAcknowledged(), is(true)).     highLevelClient().index(indexRequest, RequestOptions.DEFAULT).     ResumeFollowRequest resumeFollowRequest = new ResumeFollowRequest("follower").     AcknowledgedResponse resumeFollowResponse = execute(resumeFollowRequest, ccrClient::resumeFollow, ccrClient::resumeFollowAsync).     assertThat(resumeFollowResponse.isAcknowledged(), is(true)).     assertBusy(() -> {         FollowStatsRequest followStatsRequest = new FollowStatsRequest("follower").         FollowStatsResponse followStatsResponse = execute(followStatsRequest, ccrClient::getFollowStats, ccrClient::getFollowStatsAsync).         List<ShardFollowStats> shardFollowStats = followStatsResponse.getIndicesFollowStats().getShardFollowStats("follower").         long followerGlobalCheckpoint = shardFollowStats.stream().mapToLong(ShardFollowStats::getFollowerGlobalCheckpoint).max().getAsLong().         assertThat(followerGlobalCheckpoint, equalTo(1L)).         SearchRequest followerSearchRequest = new SearchRequest("follower").         SearchResponse followerSearchResponse = highLevelClient().search(followerSearchRequest, RequestOptions.DEFAULT).         assertThat(followerSearchResponse.getHits().getTotalHits().value, equalTo(2L)).     }).     // Need to pause prior to unfollowing it:     pauseFollowRequest = new PauseFollowRequest("follower").     pauseFollowResponse = execute(pauseFollowRequest, ccrClient::pauseFollow, ccrClient::pauseFollowAsync).     assertThat(pauseFollowResponse.isAcknowledged(), is(true)).     assertBusy(() -> {         FollowInfoRequest followInfoRequest = new FollowInfoRequest("follower").         FollowInfoResponse followInfoResponse = execute(followInfoRequest, ccrClient::getFollowInfo, ccrClient::getFollowInfoAsync).         assertThat(followInfoResponse.getInfos().size(), equalTo(1)).         assertThat(followInfoResponse.getInfos().get(0).getFollowerIndex(), equalTo("follower")).         assertThat(followInfoResponse.getInfos().get(0).getLeaderIndex(), equalTo("leader")).         assertThat(followInfoResponse.getInfos().get(0).getRemoteCluster(), equalTo("local_cluster")).         assertThat(followInfoResponse.getInfos().get(0).getStatus(), equalTo(FollowInfoResponse.Status.PAUSED)).     }).     // Need to close index prior to unfollowing it:     CloseIndexRequest closeIndexRequest = new CloseIndexRequest("follower").     org.elasticsearch.action.support.master.AcknowledgedResponse closeIndexReponse = highLevelClient().indices().close(closeIndexRequest, RequestOptions.DEFAULT).     assertThat(closeIndexReponse.isAcknowledged(), is(true)).     UnfollowRequest unfollowRequest = new UnfollowRequest("follower").     AcknowledgedResponse unfollowResponse = execute(unfollowRequest, ccrClient::unfollow, ccrClient::unfollowAsync).     assertThat(unfollowResponse.isAcknowledged(), is(true)). }
false;public;0;43;;public void testAutoFollowing() throws Exception {     CcrClient ccrClient = highLevelClient().ccr().     PutAutoFollowPatternRequest putAutoFollowPatternRequest = new PutAutoFollowPatternRequest("pattern1", "local_cluster", Collections.singletonList("logs-*")).     putAutoFollowPatternRequest.setFollowIndexNamePattern("copy-{{leader_index}}").     AcknowledgedResponse putAutoFollowPatternResponse = execute(putAutoFollowPatternRequest, ccrClient::putAutoFollowPattern, ccrClient::putAutoFollowPatternAsync).     assertThat(putAutoFollowPatternResponse.isAcknowledged(), is(true)).     CreateIndexRequest createIndexRequest = new CreateIndexRequest("logs-20200101").     createIndexRequest.settings(Collections.singletonMap("index.soft_deletes.enabled", true)).     CreateIndexResponse response = highLevelClient().indices().create(createIndexRequest, RequestOptions.DEFAULT).     assertThat(response.isAcknowledged(), is(true)).     assertBusy(() -> {         CcrStatsRequest ccrStatsRequest = new CcrStatsRequest().         CcrStatsResponse ccrStatsResponse = execute(ccrStatsRequest, ccrClient::getCcrStats, ccrClient::getCcrStatsAsync).         assertThat(ccrStatsResponse.getAutoFollowStats().getNumberOfSuccessfulFollowIndices(), equalTo(1L)).         assertThat(ccrStatsResponse.getIndicesFollowStats().getShardFollowStats("copy-logs-20200101"), notNullValue()).     }).     assertThat(indexExists("copy-logs-20200101"), is(true)).     GetAutoFollowPatternRequest getAutoFollowPatternRequest = randomBoolean() ? new GetAutoFollowPatternRequest("pattern1") : new GetAutoFollowPatternRequest().     GetAutoFollowPatternResponse getAutoFollowPatternResponse = execute(getAutoFollowPatternRequest, ccrClient::getAutoFollowPattern, ccrClient::getAutoFollowPatternAsync).     assertThat(getAutoFollowPatternResponse.getPatterns().size(), equalTo(1)).     GetAutoFollowPatternResponse.Pattern pattern = getAutoFollowPatternResponse.getPatterns().get("pattern1").     assertThat(pattern, notNullValue()).     assertThat(pattern.getRemoteCluster(), equalTo(putAutoFollowPatternRequest.getRemoteCluster())).     assertThat(pattern.getLeaderIndexPatterns(), equalTo(putAutoFollowPatternRequest.getLeaderIndexPatterns())).     assertThat(pattern.getFollowIndexNamePattern(), equalTo(putAutoFollowPatternRequest.getFollowIndexNamePattern())).     // Cleanup:     final DeleteAutoFollowPatternRequest deleteAutoFollowPatternRequest = new DeleteAutoFollowPatternRequest("pattern1").     AcknowledgedResponse deleteAutoFollowPatternResponse = execute(deleteAutoFollowPatternRequest, ccrClient::deleteAutoFollowPattern, ccrClient::deleteAutoFollowPatternAsync).     assertThat(deleteAutoFollowPatternResponse.isAcknowledged(), is(true)).     PauseFollowRequest pauseFollowRequest = new PauseFollowRequest("copy-logs-20200101").     AcknowledgedResponse pauseFollowResponse = ccrClient.pauseFollow(pauseFollowRequest, RequestOptions.DEFAULT).     assertThat(pauseFollowResponse.isAcknowledged(), is(true)). }
false;private,static;1;3;;private static Map<String, Object> toMap(Response response) throws IOException {     return XContentHelper.convertToMap(JsonXContent.jsonXContent, EntityUtils.toString(response.getEntity()), false). }
