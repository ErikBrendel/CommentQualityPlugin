commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUpOptionalId() {     id = randomAlphaOfLengthBetween(1, 10). }
false;protected;0;4;;@Override protected RollupJobConfig createTestInstance() {     return randomRollupJobConfig(id). }
false;protected;1;4;;@Override protected RollupJobConfig doParseInstance(final XContentParser parser) throws IOException {     return RollupJobConfig.fromXContent(parser, randomBoolean() ? id : null). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return true. }
false;public;0;13;;public void testValidateNullId() {     final RollupJobConfig sample = randomRollupJobConfig(id).     final RollupJobConfig config = new RollupJobConfig(null, sample.getIndexPattern(), sample.getRollupIndex(), sample.getCron(), sample.getPageSize(), sample.getGroupConfig(), sample.getMetricsConfig(), sample.getTimeout()).     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(true)).     ValidationException validationException = validation.get().     assertThat(validationException.validationErrors().size(), is(1)).     assertThat(validationException.validationErrors(), contains("Id must be a non-null, non-empty string")). }
false;public;0;13;;public void testValidateEmptyId() {     final RollupJobConfig sample = randomRollupJobConfig(id).     final RollupJobConfig config = new RollupJobConfig("", sample.getIndexPattern(), sample.getRollupIndex(), sample.getCron(), sample.getPageSize(), sample.getGroupConfig(), sample.getMetricsConfig(), sample.getTimeout()).     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(true)).     ValidationException validationException = validation.get().     assertThat(validationException.validationErrors().size(), is(1)).     assertThat(validationException.validationErrors(), contains("Id must be a non-null, non-empty string")). }
false;public;0;13;;public void testValidateNullIndexPattern() {     final RollupJobConfig sample = randomRollupJobConfig(id).     final RollupJobConfig config = new RollupJobConfig(sample.getId(), null, sample.getRollupIndex(), sample.getCron(), sample.getPageSize(), sample.getGroupConfig(), sample.getMetricsConfig(), sample.getTimeout()).     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(true)).     ValidationException validationException = validation.get().     assertThat(validationException.validationErrors().size(), is(1)).     assertThat(validationException.validationErrors(), contains("Index pattern must be a non-null, non-empty string")). }
false;public;0;13;;public void testValidateEmptyIndexPattern() {     final RollupJobConfig sample = randomRollupJobConfig(id).     final RollupJobConfig config = new RollupJobConfig(sample.getId(), "", sample.getRollupIndex(), sample.getCron(), sample.getPageSize(), sample.getGroupConfig(), sample.getMetricsConfig(), sample.getTimeout()).     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(true)).     ValidationException validationException = validation.get().     assertThat(validationException.validationErrors().size(), is(1)).     assertThat(validationException.validationErrors(), contains("Index pattern must be a non-null, non-empty string")). }
false;public;0;14;;public void testValidateMatchAllIndexPattern() {     final RollupJobConfig sample = randomRollupJobConfig(id).     final RollupJobConfig config = new RollupJobConfig(sample.getId(), "*", sample.getRollupIndex(), sample.getCron(), sample.getPageSize(), sample.getGroupConfig(), sample.getMetricsConfig(), sample.getTimeout()).     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(true)).     ValidationException validationException = validation.get().     assertThat(validationException.validationErrors().size(), is(1)).     assertThat(validationException.validationErrors(), contains("Index pattern must not match all indices (as it would match it's own rollup index")). }
false;public;0;13;;public void testValidateIndexPatternMatchesRollupIndex() {     final RollupJobConfig sample = randomRollupJobConfig(id).     final RollupJobConfig config = new RollupJobConfig(sample.getId(), "rollup*", "rollup", sample.getCron(), sample.getPageSize(), sample.getGroupConfig(), sample.getMetricsConfig(), sample.getTimeout()).     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(true)).     ValidationException validationException = validation.get().     assertThat(validationException.validationErrors().size(), is(1)).     assertThat(validationException.validationErrors(), contains("Index pattern would match rollup index name which is not allowed")). }
false;public;0;13;;public void testValidateSameIndexAndRollupPatterns() {     final RollupJobConfig sample = randomRollupJobConfig(id).     final RollupJobConfig config = new RollupJobConfig(sample.getId(), "test", "test", sample.getCron(), sample.getPageSize(), sample.getGroupConfig(), sample.getMetricsConfig(), sample.getTimeout()).     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(true)).     ValidationException validationException = validation.get().     assertThat(validationException.validationErrors().size(), is(1)).     assertThat(validationException.validationErrors(), contains("Rollup index may not be the same as the index pattern")). }
false;public;0;13;;public void testValidateNullRollupPattern() {     final RollupJobConfig sample = randomRollupJobConfig(id).     final RollupJobConfig config = new RollupJobConfig(sample.getId(), sample.getIndexPattern(), null, sample.getCron(), sample.getPageSize(), sample.getGroupConfig(), sample.getMetricsConfig(), sample.getTimeout()).     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(true)).     ValidationException validationException = validation.get().     assertThat(validationException.validationErrors().size(), is(1)).     assertThat(validationException.validationErrors(), contains("Rollup index must be a non-null, non-empty string")). }
false;public;0;13;;public void testValidateEmptyRollupPattern() {     final RollupJobConfig sample = randomRollupJobConfig(id).     final RollupJobConfig config = new RollupJobConfig(sample.getId(), sample.getIndexPattern(), "", sample.getCron(), sample.getPageSize(), sample.getGroupConfig(), sample.getMetricsConfig(), sample.getTimeout()).     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(true)).     ValidationException validationException = validation.get().     assertThat(validationException.validationErrors().size(), is(1)).     assertThat(validationException.validationErrors(), contains("Rollup index must be a non-null, non-empty string")). }
false;public;0;13;;public void testValidateNullCron() {     final RollupJobConfig sample = randomRollupJobConfig(id).     final RollupJobConfig config = new RollupJobConfig(sample.getId(), sample.getIndexPattern(), sample.getRollupIndex(), null, sample.getPageSize(), sample.getGroupConfig(), sample.getMetricsConfig(), sample.getTimeout()).     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(true)).     ValidationException validationException = validation.get().     assertThat(validationException.validationErrors().size(), is(1)).     assertThat(validationException.validationErrors(), contains("Cron schedule must be a non-null, non-empty string")). }
false;public;0;13;;public void testValidateEmptyCron() {     final RollupJobConfig sample = randomRollupJobConfig(id).     final RollupJobConfig config = new RollupJobConfig(sample.getId(), sample.getIndexPattern(), sample.getRollupIndex(), "", sample.getPageSize(), sample.getGroupConfig(), sample.getMetricsConfig(), sample.getTimeout()).     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(true)).     ValidationException validationException = validation.get().     assertThat(validationException.validationErrors().size(), is(1)).     assertThat(validationException.validationErrors(), contains("Cron schedule must be a non-null, non-empty string")). }
false;public;0;13;;public void testValidatePageSize() {     final RollupJobConfig sample = randomRollupJobConfig(id).     final RollupJobConfig config = new RollupJobConfig(sample.getId(), sample.getIndexPattern(), sample.getRollupIndex(), sample.getCron(), 0, sample.getGroupConfig(), sample.getMetricsConfig(), sample.getTimeout()).     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(true)).     ValidationException validationException = validation.get().     assertThat(validationException.validationErrors().size(), is(1)).     assertThat(validationException.validationErrors(), contains("Page size is mandatory and  must be a positive long")). }
false;public;0;13;;public void testValidateGroupOrMetrics() {     final RollupJobConfig sample = randomRollupJobConfig(id).     final RollupJobConfig config = new RollupJobConfig(sample.getId(), sample.getIndexPattern(), sample.getRollupIndex(), sample.getCron(), sample.getPageSize(), null, null, sample.getTimeout()).     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(true)).     ValidationException validationException = validation.get().     assertThat(validationException.validationErrors().size(), is(1)).     assertThat(validationException.validationErrors(), contains("At least one grouping or metric must be configured")). }
false;public;0;14;;public void testValidateGroupConfigWithErrors() {     final GroupConfig groupConfig = new GroupConfig(null).     final RollupJobConfig sample = randomRollupJobConfig(id).     final RollupJobConfig config = new RollupJobConfig(sample.getId(), sample.getIndexPattern(), sample.getRollupIndex(), sample.getCron(), sample.getPageSize(), groupConfig, sample.getMetricsConfig(), sample.getTimeout()).     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(true)).     ValidationException validationException = validation.get().     assertThat(validationException.validationErrors().size(), is(1)).     assertThat(validationException.validationErrors(), contains("Date histogram must not be null")). }
false;public;0;15;;public void testValidateListOfMetricsWithErrors() {     final List<MetricConfig> metricsConfigs = singletonList(new MetricConfig(null, null)).     final RollupJobConfig sample = randomRollupJobConfig(id).     final RollupJobConfig config = new RollupJobConfig(sample.getId(), sample.getIndexPattern(), sample.getRollupIndex(), sample.getCron(), sample.getPageSize(), sample.getGroupConfig(), metricsConfigs, sample.getTimeout()).     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(true)).     ValidationException validationException = validation.get().     assertThat(validationException.validationErrors().size(), is(2)).     assertThat(validationException.validationErrors(), containsInAnyOrder("Field name is required", "Metrics must be a non-null, non-empty array of strings")). }
false;public,static;1;18;;public static RollupJobConfig randomRollupJobConfig(final String id) {     final String indexPattern = randomAlphaOfLengthBetween(5, 20).     final String rollupIndex = "rollup_" + indexPattern.     final String cron = randomCron().     final int pageSize = randomIntBetween(1, 100).     final TimeValue timeout = randomBoolean() ? null : new TimeValue(randomIntBetween(0, 60), randomFrom(Arrays.asList(TimeUnit.MILLISECONDS, TimeUnit.SECONDS, TimeUnit.MINUTES))).     final GroupConfig groups = GroupConfigTests.randomGroupConfig().     final List<MetricConfig> metrics = new ArrayList<>().     if (randomBoolean()) {         final int numMetrics = randomIntBetween(1, 10).         for (int i = 0. i < numMetrics. i++) {             metrics.add(MetricConfigTests.randomMetricConfig()).         }     }     return new RollupJobConfig(id, indexPattern, rollupIndex, cron, pageSize, groups, unmodifiableList(metrics), timeout). }
false;private,static;0;9;;private static String randomCron() {     return // second     (ESTestCase.randomBoolean() ? "*" : String.valueOf(ESTestCase.randomIntBetween(0, 59))) + " " + // minute     (ESTestCase.randomBoolean() ? "*" : String.valueOf(ESTestCase.randomIntBetween(0, 59))) + " " + // hour     (ESTestCase.randomBoolean() ? "*" : String.valueOf(ESTestCase.randomIntBetween(0, 23))) + " " + // day of month     (ESTestCase.randomBoolean() ? "*" : String.valueOf(ESTestCase.randomIntBetween(1, 31))) + " " + // month     (ESTestCase.randomBoolean() ? "*" : String.valueOf(ESTestCase.randomIntBetween(1, 12))) + // day of week     " ?" + " " + // year     (ESTestCase.randomBoolean() ? "*" : String.valueOf(ESTestCase.randomIntBetween(1970, 2199))). }
