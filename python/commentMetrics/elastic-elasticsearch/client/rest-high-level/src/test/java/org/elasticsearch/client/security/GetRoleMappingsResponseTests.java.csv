commented;modifiers;parameterAmount;loc;comment;code
false;public;2;3;;@Override public void usedDeprecatedName(String usedName, String modernName) { }
false;public;2;3;;@Override public void usedDeprecatedField(String usedName, String replacedWith) { }
false;public;0;45;;public void testFromXContent() throws IOException {     final String json = "{\n" + " \"kerberosmapping\" : {\n" + "   \"enabled\" : true,\n" + "   \"roles\" : [\n" + "     \"superuser\"\n" + "   ],\n" + "   \"rules\" : {\n" + "     \"field\" : {\n" + "       \"realm.name\" : \"kerb1\"\n" + "     }\n" + "   },\n" + "   \"metadata\" : { }\n" + " },\n" + " \"ldapmapping\" : {\n" + "   \"enabled\" : false,\n" + "   \"roles\" : [\n" + "     \"monitoring\"\n" + "   ],\n" + "   \"rules\" : {\n" + "     \"field\" : {\n" + "       \"groups\" : \"cn=ipausers,cn=groups,cn=accounts,dc=ipademo,dc=local\"\n" + "     }\n" + "   },\n" + "   \"metadata\" : { }\n" + " }\n" + "}".     final GetRoleMappingsResponse response = GetRoleMappingsResponse.fromXContent(XContentType.JSON.xContent().createParser(new NamedXContentRegistry(Collections.emptyList()), new DeprecationHandler() {          @Override         public void usedDeprecatedName(String usedName, String modernName) {         }          @Override         public void usedDeprecatedField(String usedName, String replacedWith) {         }     }, json)).     final List<ExpressionRoleMapping> expectedRoleMappingsList = new ArrayList<>().     expectedRoleMappingsList.add(new ExpressionRoleMapping("kerberosmapping", FieldRoleMapperExpression.ofKeyValues("realm.name", "kerb1"), Collections.singletonList("superuser"), null, true)).     expectedRoleMappingsList.add(new ExpressionRoleMapping("ldapmapping", FieldRoleMapperExpression.ofGroups("cn=ipausers,cn=groups,cn=accounts,dc=ipademo,dc=local"), Collections.singletonList("monitoring"), null, false)).     final GetRoleMappingsResponse expectedResponse = new GetRoleMappingsResponse(expectedRoleMappingsList).     assertThat(response, equalTo(expectedResponse)). }
false;public;0;13;;public void testEqualsHashCode() {     final List<ExpressionRoleMapping> roleMappingsList = new ArrayList<>().     roleMappingsList.add(new ExpressionRoleMapping("kerberosmapping", FieldRoleMapperExpression.ofKeyValues("realm.name", "kerb1"), Collections.singletonList("superuser"), null, true)).     final GetRoleMappingsResponse response = new GetRoleMappingsResponse(roleMappingsList).     assertNotNull(response).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(response, (original) -> {         return new GetRoleMappingsResponse(original.getMappings()).     }).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(response, (original) -> {         return new GetRoleMappingsResponse(original.getMappings()).     }, GetRoleMappingsResponseTests::mutateTestItem). }
false;private,static;1;20;;private static GetRoleMappingsResponse mutateTestItem(GetRoleMappingsResponse original) {     GetRoleMappingsResponse mutated = null.     switch(randomIntBetween(0, 1)) {         case 0:             final List<ExpressionRoleMapping> roleMappingsList1 = new ArrayList<>().             roleMappingsList1.add(new ExpressionRoleMapping("ldapmapping", FieldRoleMapperExpression.ofGroups("cn=ipausers,cn=groups,cn=accounts,dc=ipademo,dc=local"), Collections.singletonList("monitoring"), null, false)).             mutated = new GetRoleMappingsResponse(roleMappingsList1).             break.         case 1:             final List<ExpressionRoleMapping> roleMappingsList2 = new ArrayList<>().             ExpressionRoleMapping orginialRoleMapping = original.getMappings().get(0).             roleMappingsList2.add(new ExpressionRoleMapping(orginialRoleMapping.getName(), FieldRoleMapperExpression.ofGroups("cn=ipausers,cn=groups,cn=accounts,dc=ipademo,dc=local"), orginialRoleMapping.getRoles(), orginialRoleMapping.getMetadata(), !orginialRoleMapping.isEnabled())).             mutated = new GetRoleMappingsResponse(roleMappingsList2).             break.     }     return mutated. }
