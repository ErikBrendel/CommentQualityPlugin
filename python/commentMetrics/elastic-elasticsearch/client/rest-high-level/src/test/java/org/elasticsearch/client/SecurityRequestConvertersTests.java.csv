commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;public void testPutUser() throws IOException {     final String username = randomAlphaOfLengthBetween(4, 12).     final char[] password = randomBoolean() ? randomAlphaOfLengthBetween(8, 12).toCharArray() : null.     final List<String> roles = Arrays.asList(generateRandomStringArray(randomIntBetween(2, 8), randomIntBetween(8, 16), false, true)).     final String email = randomBoolean() ? null : randomAlphaOfLengthBetween(12, 24).     final String fullName = randomBoolean() ? null : randomAlphaOfLengthBetween(7, 14).     final boolean enabled = randomBoolean().     final Map<String, Object> metadata = new HashMap<>().     if (randomBoolean()) {         for (int i = 0. i < randomIntBetween(0, 10). i++) {             metadata.put(String.valueOf(i), randomAlphaOfLengthBetween(1, 12)).         }     }     final User user = new User(username, roles, metadata, fullName, email).     final RefreshPolicy refreshPolicy = randomFrom(RefreshPolicy.values()).     final Map<String, String> expectedParams = getExpectedParamsFromRefreshPolicy(refreshPolicy).     PutUserRequest putUserRequest = new PutUserRequest(user, password, enabled, refreshPolicy).     Request request = SecurityRequestConverters.putUser(putUserRequest).     assertEquals(HttpPut.METHOD_NAME, request.getMethod()).     assertEquals("/_security/user/" + putUserRequest.getUser().getUsername(), request.getEndpoint()).     assertEquals(expectedParams, request.getParameters()).     assertToXContentBody(putUserRequest, request.getEntity()). }
false;public;0;11;;public void testDeleteUser() {     final String name = randomAlphaOfLengthBetween(4, 12).     final RefreshPolicy refreshPolicy = randomFrom(RefreshPolicy.values()).     final Map<String, String> expectedParams = getExpectedParamsFromRefreshPolicy(refreshPolicy).     DeleteUserRequest deleteUserRequest = new DeleteUserRequest(name, refreshPolicy).     Request request = SecurityRequestConverters.deleteUser(deleteUserRequest).     assertEquals(HttpDelete.METHOD_NAME, request.getMethod()).     assertEquals("/_security/user/" + name, request.getEndpoint()).     assertEquals(expectedParams, request.getParameters()).     assertNull(request.getEntity()). }
false;public;0;14;;public void testGetUsers() {     final String[] users = randomArray(0, 5, String[]::new, () -> randomAlphaOfLength(5)).     GetUsersRequest getUsersRequest = new GetUsersRequest(users).     Request request = SecurityRequestConverters.getUsers(getUsersRequest).     assertEquals(HttpGet.METHOD_NAME, request.getMethod()).     if (users.length == 0) {         assertEquals("/_security/user", request.getEndpoint()).     } else {         assertEquals("/_security/user/" + Strings.collectionToCommaDelimitedString(getUsersRequest.getUsernames()), request.getEndpoint()).     }     assertNull(request.getEntity()).     assertEquals(Collections.emptyMap(), request.getParameters()). }
false;public;0;27;;public void testPutRoleMapping() throws IOException {     final String username = randomAlphaOfLengthBetween(4, 7).     final String rolename = randomAlphaOfLengthBetween(4, 7).     final String roleMappingName = randomAlphaOfLengthBetween(4, 7).     final String groupname = "cn=" + randomAlphaOfLengthBetween(4, 7) + ",dc=example,dc=com".     final RefreshPolicy refreshPolicy = randomFrom(RefreshPolicy.values()).     final Map<String, String> expectedParams.     if (refreshPolicy != RefreshPolicy.NONE) {         expectedParams = Collections.singletonMap("refresh", refreshPolicy.getValue()).     } else {         expectedParams = Collections.emptyMap().     }     final RoleMapperExpression rules = AnyRoleMapperExpression.builder().addExpression(FieldRoleMapperExpression.ofUsername(username)).addExpression(FieldRoleMapperExpression.ofGroups(groupname)).build().     final PutRoleMappingRequest putRoleMappingRequest = new PutRoleMappingRequest(roleMappingName, true, Collections.singletonList(rolename), rules, null, refreshPolicy).     final Request request = SecurityRequestConverters.putRoleMapping(putRoleMappingRequest).     assertEquals(HttpPut.METHOD_NAME, request.getMethod()).     assertEquals("/_security/role_mapping/" + roleMappingName, request.getEndpoint()).     assertEquals(expectedParams, request.getParameters()).     assertToXContentBody(putRoleMappingRequest, request.getEntity()). }
false;public;0;18;;public void testGetRoleMappings() throws IOException {     int noOfRoleMappingNames = randomIntBetween(0, 2).     final String[] roleMappingNames = randomArray(noOfRoleMappingNames, noOfRoleMappingNames, String[]::new, () -> randomAlphaOfLength(5)).     final GetRoleMappingsRequest getRoleMappingsRequest = new GetRoleMappingsRequest(roleMappingNames).     final Request request = SecurityRequestConverters.getRoleMappings(getRoleMappingsRequest).     assertEquals(HttpGet.METHOD_NAME, request.getMethod()).     if (noOfRoleMappingNames == 0) {         assertEquals("/_security/role_mapping", request.getEndpoint()).     } else {         assertEquals("/_security/role_mapping/" + Strings.collectionToCommaDelimitedString(getRoleMappingsRequest.getRoleMappingNames()), request.getEndpoint()).     }     assertEquals(Collections.emptyMap(), request.getParameters()).     assertNull(request.getEntity()). }
false;public;0;11;;public void testEnableUser() {     final String username = randomAlphaOfLengthBetween(1, 12).     final RefreshPolicy refreshPolicy = randomFrom(RefreshPolicy.values()).     final Map<String, String> expectedParams = getExpectedParamsFromRefreshPolicy(refreshPolicy).     EnableUserRequest enableUserRequest = new EnableUserRequest(username, refreshPolicy).     Request request = SecurityRequestConverters.enableUser(enableUserRequest).     assertEquals(HttpPut.METHOD_NAME, request.getMethod()).     assertEquals("/_security/user/" + username + "/_enable", request.getEndpoint()).     assertEquals(expectedParams, request.getParameters()).     assertNull(request.getEntity()). }
false;public;0;11;;public void testDisableUser() {     final String username = randomAlphaOfLengthBetween(1, 12).     final RefreshPolicy refreshPolicy = randomFrom(RefreshPolicy.values()).     final Map<String, String> expectedParams = getExpectedParamsFromRefreshPolicy(refreshPolicy).     DisableUserRequest disableUserRequest = new DisableUserRequest(username, refreshPolicy).     Request request = SecurityRequestConverters.disableUser(disableUserRequest).     assertEquals(HttpPut.METHOD_NAME, request.getMethod()).     assertEquals("/_security/user/" + username + "/_disable", request.getEndpoint()).     assertEquals(expectedParams, request.getParameters()).     assertNull(request.getEntity()). }
false;private,static;1;7;;private static Map<String, String> getExpectedParamsFromRefreshPolicy(RefreshPolicy refreshPolicy) {     if (refreshPolicy != RefreshPolicy.NONE) {         return Collections.singletonMap("refresh", refreshPolicy.getValue()).     } else {         return Collections.emptyMap().     } }
false;public;0;12;;public void testChangePassword() throws IOException {     final String username = randomAlphaOfLengthBetween(4, 12).     final char[] password = randomAlphaOfLengthBetween(8, 12).toCharArray().     final RefreshPolicy refreshPolicy = randomFrom(RefreshPolicy.values()).     final Map<String, String> expectedParams = getExpectedParamsFromRefreshPolicy(refreshPolicy).     ChangePasswordRequest changePasswordRequest = new ChangePasswordRequest(username, password, refreshPolicy).     Request request = SecurityRequestConverters.changePassword(changePasswordRequest).     assertEquals(HttpPost.METHOD_NAME, request.getMethod()).     assertEquals("/_security/user/" + changePasswordRequest.getUsername() + "/_password", request.getEndpoint()).     assertEquals(expectedParams, request.getParameters()).     assertToXContentBody(changePasswordRequest, request.getEntity()). }
false;public;0;11;;public void testSelfChangePassword() throws IOException {     final char[] password = randomAlphaOfLengthBetween(8, 12).toCharArray().     final RefreshPolicy refreshPolicy = randomFrom(RefreshPolicy.values()).     final Map<String, String> expectedParams = getExpectedParamsFromRefreshPolicy(refreshPolicy).     ChangePasswordRequest changePasswordRequest = new ChangePasswordRequest(null, password, refreshPolicy).     Request request = SecurityRequestConverters.changePassword(changePasswordRequest).     assertEquals(HttpPost.METHOD_NAME, request.getMethod()).     assertEquals("/_security/user/_password", request.getEndpoint()).     assertEquals(expectedParams, request.getParameters()).     assertToXContentBody(changePasswordRequest, request.getEntity()). }
false;public;0;18;;public void testDeleteRoleMapping() throws IOException {     final String roleMappingName = randomAlphaOfLengthBetween(4, 7).     final RefreshPolicy refreshPolicy = randomFrom(RefreshPolicy.values()).     final Map<String, String> expectedParams.     if (refreshPolicy != RefreshPolicy.NONE) {         expectedParams = Collections.singletonMap("refresh", refreshPolicy.getValue()).     } else {         expectedParams = Collections.emptyMap().     }     final DeleteRoleMappingRequest deleteRoleMappingRequest = new DeleteRoleMappingRequest(roleMappingName, refreshPolicy).     final Request request = SecurityRequestConverters.deleteRoleMapping(deleteRoleMappingRequest).     assertEquals(HttpDelete.METHOD_NAME, request.getMethod()).     assertEquals("/_security/role_mapping/" + roleMappingName, request.getEndpoint()).     assertEquals(expectedParams, request.getParameters()).     assertNull(request.getEntity()). }
false;public;0;15;;public void testGetRoles() {     final String[] roles = randomArray(0, 5, String[]::new, () -> randomAlphaOfLength(5)).     final GetRolesRequest getRolesRequest = new GetRolesRequest(roles).     final Request request = SecurityRequestConverters.getRoles(getRolesRequest).     assertEquals(HttpGet.METHOD_NAME, request.getMethod()).     if (roles.length == 0) {         assertEquals("/_security/role", request.getEndpoint()).     } else {         assertEquals("/_security/role/" + Strings.collectionToCommaDelimitedString(getRolesRequest.getRoleNames()), request.getEndpoint()).     }     assertNull(request.getEntity()).     assertEquals(Collections.emptyMap(), request.getParameters()). }
false;public;0;11;;public void testDeleteRole() {     final String name = randomAlphaOfLengthBetween(1, 12).     final RefreshPolicy refreshPolicy = randomFrom(RefreshPolicy.values()).     final Map<String, String> expectedParams = getExpectedParamsFromRefreshPolicy(refreshPolicy).     DeleteRoleRequest deleteRoleRequest = new DeleteRoleRequest(name, refreshPolicy).     Request request = SecurityRequestConverters.deleteRole(deleteRoleRequest).     assertEquals(HttpDelete.METHOD_NAME, request.getMethod()).     assertEquals("/_security/role/" + name, request.getEndpoint()).     assertEquals(expectedParams, request.getParameters()).     assertNull(request.getEntity()). }
false;public;0;10;;public void testCreateTokenWithPasswordGrant() throws Exception {     final String username = randomAlphaOfLengthBetween(1, 12).     final String password = randomAlphaOfLengthBetween(8, 12).     CreateTokenRequest createTokenRequest = CreateTokenRequest.passwordGrant(username, password.toCharArray()).     Request request = SecurityRequestConverters.createToken(createTokenRequest).     assertEquals(HttpPost.METHOD_NAME, request.getMethod()).     assertEquals("/_security/oauth2/token", request.getEndpoint()).     assertEquals(0, request.getParameters().size()).     assertToXContentBody(createTokenRequest, request.getEntity()). }
false;public;0;9;;public void testCreateTokenWithRefreshTokenGrant() throws Exception {     final String refreshToken = randomAlphaOfLengthBetween(8, 24).     CreateTokenRequest createTokenRequest = CreateTokenRequest.refreshTokenGrant(refreshToken).     Request request = SecurityRequestConverters.createToken(createTokenRequest).     assertEquals(HttpPost.METHOD_NAME, request.getMethod()).     assertEquals("/_security/oauth2/token", request.getEndpoint()).     assertEquals(0, request.getParameters().size()).     assertToXContentBody(createTokenRequest, request.getEntity()). }
false;public;0;8;;public void testCreateTokenWithClientCredentialsGrant() throws Exception {     CreateTokenRequest createTokenRequest = CreateTokenRequest.clientCredentialsGrant().     Request request = SecurityRequestConverters.createToken(createTokenRequest).     assertEquals(HttpPost.METHOD_NAME, request.getMethod()).     assertEquals("/_security/oauth2/token", request.getEndpoint()).     assertEquals(0, request.getParameters().size()).     assertToXContentBody(createTokenRequest, request.getEntity()). }
false;public;0;10;;public void testGetApplicationPrivilege() throws Exception {     final String application = randomAlphaOfLength(6).     final String privilege = randomAlphaOfLength(4).     GetPrivilegesRequest getPrivilegesRequest = new GetPrivilegesRequest(application, privilege).     Request request = SecurityRequestConverters.getPrivileges(getPrivilegesRequest).     assertEquals(HttpGet.METHOD_NAME, request.getMethod()).     assertEquals("/_security/privilege/" + application + "/" + privilege, request.getEndpoint()).     assertEquals(Collections.emptyMap(), request.getParameters()).     assertNull(request.getEntity()). }
false;public;0;9;;public void testGetAllApplicationPrivileges() throws Exception {     final String application = randomAlphaOfLength(6).     GetPrivilegesRequest getPrivilegesRequest = GetPrivilegesRequest.getApplicationPrivileges(application).     Request request = SecurityRequestConverters.getPrivileges(getPrivilegesRequest).     assertEquals(HttpGet.METHOD_NAME, request.getMethod()).     assertEquals("/_security/privilege/" + application, request.getEndpoint()).     assertEquals(Collections.emptyMap(), request.getParameters()).     assertNull(request.getEntity()). }
false;public;0;13;;public void testGetMultipleApplicationPrivileges() throws Exception {     final String application = randomAlphaOfLength(6).     final int numberOfPrivileges = randomIntBetween(1, 5).     final String[] privilegeNames = randomArray(numberOfPrivileges, numberOfPrivileges, String[]::new, () -> randomAlphaOfLength(5)).     GetPrivilegesRequest getPrivilegesRequest = new GetPrivilegesRequest(application, privilegeNames).     Request request = SecurityRequestConverters.getPrivileges(getPrivilegesRequest).     assertEquals(HttpGet.METHOD_NAME, request.getMethod()).     assertEquals("/_security/privilege/" + application + "/" + Strings.arrayToCommaDelimitedString(privilegeNames), request.getEndpoint()).     assertEquals(Collections.emptyMap(), request.getParameters()).     assertNull(request.getEntity()). }
false;public;0;8;;public void testGetAllPrivileges() throws Exception {     GetPrivilegesRequest getPrivilegesRequest = GetPrivilegesRequest.getAllPrivileges().     Request request = SecurityRequestConverters.getPrivileges(getPrivilegesRequest).     assertEquals(HttpGet.METHOD_NAME, request.getMethod()).     assertEquals("/_security/privilege", request.getEndpoint()).     assertEquals(Collections.emptyMap(), request.getParameters()).     assertNull(request.getEntity()). }
false;public;0;20;;public void testPutPrivileges() throws Exception {     int noOfApplicationPrivileges = randomIntBetween(2, 4).     final List<ApplicationPrivilege> privileges = new ArrayList<>().     for (int count = 0. count < noOfApplicationPrivileges. count++) {         privileges.add(ApplicationPrivilege.builder().application(randomAlphaOfLength(4)).privilege(randomAlphaOfLengthBetween(3, 5)).actions(Sets.newHashSet(generateRandomStringArray(3, 5, false, false))).metadata(Collections.singletonMap("k1", "v1")).build()).     }     final RefreshPolicy refreshPolicy = randomFrom(RefreshPolicy.values()).     final Map<String, String> expectedParams = getExpectedParamsFromRefreshPolicy(refreshPolicy).     final PutPrivilegesRequest putPrivilegesRequest = new PutPrivilegesRequest(privileges, refreshPolicy).     final Request request = SecurityRequestConverters.putPrivileges(putPrivilegesRequest).     assertEquals(HttpPut.METHOD_NAME, request.getMethod()).     assertEquals("/_security/privilege", request.getEndpoint()).     assertEquals(expectedParams, request.getParameters()).     assertToXContentBody(putPrivilegesRequest, request.getEntity()). }
false;public;0;14;;public void testDeletePrivileges() {     final String application = randomAlphaOfLengthBetween(1, 12).     final List<String> privileges = randomSubsetOf(randomIntBetween(1, 3), "read", "write", "all").     final RefreshPolicy refreshPolicy = randomFrom(RefreshPolicy.values()).     final Map<String, String> expectedParams = getExpectedParamsFromRefreshPolicy(refreshPolicy).     DeletePrivilegesRequest deletePrivilegesRequest = new DeletePrivilegesRequest(application, privileges.toArray(Strings.EMPTY_ARRAY), refreshPolicy).     Request request = SecurityRequestConverters.deletePrivileges(deletePrivilegesRequest).     assertEquals(HttpDelete.METHOD_NAME, request.getMethod()).     assertEquals("/_security/privilege/" + application + "/" + Strings.collectionToCommaDelimitedString(privileges), request.getEndpoint()).     assertEquals(expectedParams, request.getParameters()).     assertNull(request.getEntity()). }
false;public;0;33;;public void testPutRole() throws IOException {     final String roleName = randomAlphaOfLengthBetween(4, 7).     final List<String> clusterPrivileges = randomSubsetOf(3, Role.ClusterPrivilegeName.ALL_ARRAY).     final Map<String, Object> metadata = Collections.singletonMap(randomAlphaOfLengthBetween(4, 7), randomAlphaOfLengthBetween(4, 7)).     final String[] runAsPrivilege = randomArray(3, String[]::new, () -> randomAlphaOfLength(5)).     final List<String> applicationPrivilegeNames = Arrays.asList(randomArray(1, 3, String[]::new, () -> randomAlphaOfLength(5))).     final List<String> applicationResouceNames = Arrays.asList(randomArray(1, 3, String[]::new, () -> randomAlphaOfLength(5))).     final ApplicationResourcePrivileges applicationResourcePrivilege = new ApplicationResourcePrivileges(randomAlphaOfLengthBetween(4, 7), applicationPrivilegeNames, applicationResouceNames).     final List<String> indicesName = Arrays.asList(randomArray(1, 3, String[]::new, () -> randomAlphaOfLength(5))).     final List<String> indicesPrivilegeName = Arrays.asList(randomArray(1, 3, String[]::new, () -> randomAlphaOfLength(5))).     final List<String> indicesPrivilegeGrantedName = Arrays.asList(randomArray(3, String[]::new, () -> randomAlphaOfLength(5))).     final List<String> indicesPrivilegeDeniedName = Arrays.asList(randomArray(3, String[]::new, () -> randomAlphaOfLength(5))).     final String indicesPrivilegeQuery = randomAlphaOfLengthBetween(0, 7).     final IndicesPrivileges indicesPrivilege = IndicesPrivileges.builder().indices(indicesName).privileges(indicesPrivilegeName).allowRestrictedIndices(randomBoolean()).grantedFields(indicesPrivilegeGrantedName).deniedFields(indicesPrivilegeDeniedName).query(indicesPrivilegeQuery).build().     final RefreshPolicy refreshPolicy = randomFrom(RefreshPolicy.values()).     final Map<String, String> expectedParams.     if (refreshPolicy != RefreshPolicy.NONE) {         expectedParams = Collections.singletonMap("refresh", refreshPolicy.getValue()).     } else {         expectedParams = Collections.emptyMap().     }     final Role role = Role.builder().name(roleName).clusterPrivileges(clusterPrivileges).indicesPrivileges(indicesPrivilege).applicationResourcePrivileges(applicationResourcePrivilege).runAsPrivilege(runAsPrivilege).metadata(metadata).build().     final PutRoleRequest putRoleRequest = new PutRoleRequest(role, refreshPolicy).     final Request request = SecurityRequestConverters.putRole(putRoleRequest).     assertEquals(HttpPut.METHOD_NAME, request.getMethod()).     assertEquals("/_security/role/" + roleName, request.getEndpoint()).     assertEquals(expectedParams, request.getParameters()).     assertToXContentBody(putRoleRequest, request.getEntity()). }
false;public;0;19;;public void testCreateApiKey() throws IOException {     final String name = randomAlphaOfLengthBetween(4, 7).     final List<Role> roles = Collections.singletonList(Role.builder().name("r1").clusterPrivileges(ClusterPrivilegeName.ALL).indicesPrivileges(IndicesPrivileges.builder().indices("ind-x").privileges(IndexPrivilegeName.ALL).build()).build()).     final TimeValue expiration = randomBoolean() ? null : TimeValue.timeValueHours(24).     final RefreshPolicy refreshPolicy = randomFrom(RefreshPolicy.values()).     final Map<String, String> expectedParams.     if (refreshPolicy != RefreshPolicy.NONE) {         expectedParams = Collections.singletonMap("refresh", refreshPolicy.getValue()).     } else {         expectedParams = Collections.emptyMap().     }     final CreateApiKeyRequest createApiKeyRequest = new CreateApiKeyRequest(name, roles, expiration, refreshPolicy).     final Request request = SecurityRequestConverters.createApiKey(createApiKeyRequest).     assertEquals(HttpPost.METHOD_NAME, request.getMethod()).     assertEquals("/_security/api_key", request.getEndpoint()).     assertEquals(expectedParams, request.getParameters()).     assertToXContentBody(createApiKeyRequest, request.getEntity()). }
false;public;0;12;;public void testGetApiKey() throws IOException {     String realmName = randomAlphaOfLength(5).     String userName = randomAlphaOfLength(7).     final GetApiKeyRequest getApiKeyRequest = GetApiKeyRequest.usingRealmAndUserName(realmName, userName).     final Request request = SecurityRequestConverters.getApiKey(getApiKeyRequest).     assertEquals(HttpGet.METHOD_NAME, request.getMethod()).     assertEquals("/_security/api_key", request.getEndpoint()).     Map<String, String> mapOfParameters = new HashMap<>().     mapOfParameters.put("realm_name", realmName).     mapOfParameters.put("username", userName).     assertThat(request.getParameters(), equalTo(mapOfParameters)). }
false;public;0;9;;public void testInvalidateApiKey() throws IOException {     String realmName = randomAlphaOfLength(5).     String userName = randomAlphaOfLength(7).     final InvalidateApiKeyRequest invalidateApiKeyRequest = InvalidateApiKeyRequest.usingRealmAndUserName(realmName, userName).     final Request request = SecurityRequestConverters.invalidateApiKey(invalidateApiKeyRequest).     assertEquals(HttpDelete.METHOD_NAME, request.getMethod()).     assertEquals("/_security/api_key", request.getEndpoint()).     assertToXContentBody(invalidateApiKeyRequest, request.getEntity()). }
