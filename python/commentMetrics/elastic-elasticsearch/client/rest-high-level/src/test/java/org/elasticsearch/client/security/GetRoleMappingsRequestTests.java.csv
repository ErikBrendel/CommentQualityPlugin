commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public void testGetRoleMappingsRequest() {     int noOfRoleMappingNames = randomIntBetween(0, 2).     final String[] roleMappingNames = randomArray(noOfRoleMappingNames, noOfRoleMappingNames, String[]::new, () -> randomAlphaOfLength(5)).     final GetRoleMappingsRequest getRoleMappingsRequest = new GetRoleMappingsRequest(roleMappingNames).     assertThat(getRoleMappingsRequest.getRoleMappingNames().size(), is(noOfRoleMappingNames)).     assertThat(getRoleMappingsRequest.getRoleMappingNames(), containsInAnyOrder(roleMappingNames)). }
false;public;0;12;;public void testEqualsHashCode() {     int noOfRoleMappingNames = randomIntBetween(0, 2).     final String[] roleMappingNames = randomArray(noOfRoleMappingNames, String[]::new, () -> randomAlphaOfLength(5)).     final GetRoleMappingsRequest getRoleMappingsRequest = new GetRoleMappingsRequest(roleMappingNames).     assertNotNull(getRoleMappingsRequest).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(getRoleMappingsRequest, (original) -> {         return new GetRoleMappingsRequest(original.getRoleMappingNames().toArray(new String[0])).     }).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(getRoleMappingsRequest, (original) -> {         return new GetRoleMappingsRequest(original.getRoleMappingNames().toArray(new String[0])).     }, GetRoleMappingsRequestTests::mutateTestItem). }
false;private,static;1;3;;private static GetRoleMappingsRequest mutateTestItem(GetRoleMappingsRequest original) {     return new GetRoleMappingsRequest(randomAlphaOfLength(8)). }
