commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void initClient() {     RestClient restClient = mock(RestClient.class).     restHighLevelClient = new RestHighLevelClientExt(restClient). }
false;public;0;16;;public void testParseEntityCustomResponseSection() throws IOException {     {         HttpEntity jsonEntity = new NStringEntity("{\"custom1\":{ \"field\":\"value\"}}", ContentType.APPLICATION_JSON).         BaseCustomResponseSection customSection = restHighLevelClient.parseEntity(jsonEntity, BaseCustomResponseSection::fromXContent).         assertThat(customSection, instanceOf(CustomResponseSection1.class)).         CustomResponseSection1 customResponseSection1 = (CustomResponseSection1) customSection.         assertEquals("value", customResponseSection1.value).     }     {         HttpEntity jsonEntity = new NStringEntity("{\"custom2\":{ \"array\": [\"item1\", \"item2\"]}}", ContentType.APPLICATION_JSON).         BaseCustomResponseSection customSection = restHighLevelClient.parseEntity(jsonEntity, BaseCustomResponseSection::fromXContent).         assertThat(customSection, instanceOf(CustomResponseSection2.class)).         CustomResponseSection2 customResponseSection2 = (CustomResponseSection2) customSection.         assertArrayEquals(new String[] { "item1", "item2" }, customResponseSection2.values).     } }
false;private,static;0;8;;private static List<NamedXContentRegistry.Entry> getNamedXContentsExt() {     List<NamedXContentRegistry.Entry> entries = new ArrayList<>().     entries.add(new NamedXContentRegistry.Entry(BaseCustomResponseSection.class, new ParseField("custom1"), CustomResponseSection1::fromXContent)).     entries.add(new NamedXContentRegistry.Entry(BaseCustomResponseSection.class, new ParseField("custom2"), CustomResponseSection2::fromXContent)).     return entries. }
false;static;1;7;;static BaseCustomResponseSection fromXContent(XContentParser parser) throws IOException {     assertEquals(XContentParser.Token.START_OBJECT, parser.nextToken()).     assertEquals(XContentParser.Token.FIELD_NAME, parser.nextToken()).     BaseCustomResponseSection custom = parser.namedObject(BaseCustomResponseSection.class, parser.currentName(), null).     assertEquals(XContentParser.Token.END_OBJECT, parser.nextToken()).     return custom. }
false;static;1;9;;static CustomResponseSection1 fromXContent(XContentParser parser) throws IOException {     assertEquals(XContentParser.Token.START_OBJECT, parser.nextToken()).     assertEquals(XContentParser.Token.FIELD_NAME, parser.nextToken()).     assertEquals("field", parser.currentName()).     assertEquals(XContentParser.Token.VALUE_STRING, parser.nextToken()).     CustomResponseSection1 responseSection1 = new CustomResponseSection1(parser.text()).     assertEquals(XContentParser.Token.END_OBJECT, parser.nextToken()).     return responseSection1. }
false;static;1;14;;static CustomResponseSection2 fromXContent(XContentParser parser) throws IOException {     assertEquals(XContentParser.Token.START_OBJECT, parser.nextToken()).     assertEquals(XContentParser.Token.FIELD_NAME, parser.nextToken()).     assertEquals("array", parser.currentName()).     assertEquals(XContentParser.Token.START_ARRAY, parser.nextToken()).     List<String> values = new ArrayList<>().     while (parser.nextToken().isValue()) {         values.add(parser.text()).     }     assertEquals(XContentParser.Token.END_ARRAY, parser.currentToken()).     CustomResponseSection2 responseSection2 = new CustomResponseSection2(values.toArray(new String[values.size()])).     assertEquals(XContentParser.Token.END_OBJECT, parser.nextToken()).     return responseSection2. }
