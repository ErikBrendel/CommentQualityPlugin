commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected FieldStats createTestInstance() {     return createTestFieldStats(). }
false;static;0;36;;static FieldStats createTestFieldStats() {     long count = randomIntBetween(1, 100000).     int cardinality = randomIntBetween(1, (int) count).     Double minValue = null.     Double maxValue = null.     Double meanValue = null.     Double medianValue = null.     boolean isMetric = randomBoolean().     if (isMetric) {         if (randomBoolean()) {             minValue = randomDouble().             maxValue = randomDouble().         } else {             minValue = (double) randomInt().             maxValue = (double) randomInt().         }         meanValue = randomDouble().         medianValue = randomDouble().     }     List<Map<String, Object>> topHits = new ArrayList<>().     for (int i = 0. i < Math.min(10, cardinality). ++i) {         Map<String, Object> topHit = new LinkedHashMap<>().         if (isMetric) {             topHit.put("value", randomBoolean() ? randomDouble() : (double) randomInt()).         } else {             topHit.put("value", randomAlphaOfLength(20)).         }         topHit.put("count", randomIntBetween(1, cardinality)).         topHits.add(topHit).     }     return new FieldStats(count, cardinality, minValue, maxValue, meanValue, medianValue, topHits). }
false;protected;1;4;;@Override protected FieldStats doParseInstance(XContentParser parser) {     return FieldStats.PARSER.apply(parser, null). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return true. }
false;protected;0;4;;@Override protected Predicate<String> getRandomFieldsExcludeFilter() {     return field -> field.contains(FieldStats.TOP_HITS.getPreferredName()). }
