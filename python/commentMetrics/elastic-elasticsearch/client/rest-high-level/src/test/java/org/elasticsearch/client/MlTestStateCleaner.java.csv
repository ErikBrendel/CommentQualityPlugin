commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;public void clearMlMetadata() throws IOException {     deleteAllDatafeeds().     deleteAllJobs(). }
false;private;0;8;;private void deleteAllDatafeeds() throws IOException {     stopAllDatafeeds().     GetDatafeedResponse getDatafeedResponse = mlClient.getDatafeed(GetDatafeedRequest.getAllDatafeedsRequest(), RequestOptions.DEFAULT).     for (DatafeedConfig datafeed : getDatafeedResponse.datafeeds()) {         mlClient.deleteDatafeed(new DeleteDatafeedRequest(datafeed.getId()), RequestOptions.DEFAULT).     } }
false;private;0;15;;private void stopAllDatafeeds() {     StopDatafeedRequest stopAllDatafeedsRequest = StopDatafeedRequest.stopAllDatafeedsRequest().     try {         mlClient.stopDatafeed(stopAllDatafeedsRequest, RequestOptions.DEFAULT).     } catch (Exception e1) {         logger.warn("failed to stop all datafeeds. Forcing stop", e1).         try {             stopAllDatafeedsRequest.setForce(true).             mlClient.stopDatafeed(stopAllDatafeedsRequest, RequestOptions.DEFAULT).         } catch (Exception e2) {             logger.warn("Force-closing all data feeds failed", e2).         }         throw new RuntimeException("Had to resort to force-stopping datafeeds, something went wrong?", e1).     } }
false;private;0;8;;private void deleteAllJobs() throws IOException {     closeAllJobs().     GetJobResponse getJobResponse = mlClient.getJob(GetJobRequest.getAllJobsRequest(), RequestOptions.DEFAULT).     for (Job job : getJobResponse.jobs()) {         mlClient.deleteJob(new DeleteJobRequest(job.getId()), RequestOptions.DEFAULT).     } }
false;private;0;15;;private void closeAllJobs() {     CloseJobRequest closeAllJobsRequest = CloseJobRequest.closeAllJobsRequest().     try {         mlClient.closeJob(closeAllJobsRequest, RequestOptions.DEFAULT).     } catch (Exception e1) {         logger.warn("failed to close all jobs. Forcing closed", e1).         closeAllJobsRequest.setForce(true).         try {             mlClient.closeJob(closeAllJobsRequest, RequestOptions.DEFAULT).         } catch (Exception e2) {             logger.warn("Force-closing all jobs failed", e2).         }         throw new RuntimeException("Had to resort to force-closing jobs, something went wrong?", e1).     } }
