commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;59;;public static AnalysisConfig.Builder createRandomized() {     boolean isCategorization = randomBoolean().     List<Detector> detectors = new ArrayList<>().     int numDetectors = randomIntBetween(1, 10).     for (int i = 0. i < numDetectors. i++) {         Detector.Builder builder = new Detector.Builder("count", null).         builder.setPartitionFieldName(isCategorization ? "mlcategory" : "part").         detectors.add(builder.build()).     }     AnalysisConfig.Builder builder = new AnalysisConfig.Builder(detectors).     if (randomBoolean()) {         TimeValue bucketSpan = TimeValue.timeValueSeconds(randomIntBetween(1, 1_000_000)).         builder.setBucketSpan(bucketSpan).     }     if (isCategorization) {         builder.setCategorizationFieldName(randomAlphaOfLength(10)).         if (randomBoolean()) {             builder.setCategorizationFilters(Arrays.asList(generateRandomStringArray(10, 10, false))).         } else {             CategorizationAnalyzerConfig.Builder analyzerBuilder = new CategorizationAnalyzerConfig.Builder().             if (rarely()) {                 analyzerBuilder.setAnalyzer(randomAlphaOfLength(10)).             } else {                 if (randomBoolean()) {                     for (String pattern : generateRandomStringArray(3, 40, false)) {                         Map<String, Object> charFilter = new HashMap<>().                         charFilter.put("type", "pattern_replace").                         charFilter.put("pattern", pattern).                         analyzerBuilder.addCharFilter(charFilter).                     }                 }                 Map<String, Object> tokenizer = new HashMap<>().                 tokenizer.put("type", "pattern").                 tokenizer.put("pattern", randomAlphaOfLength(10)).                 analyzerBuilder.setTokenizer(tokenizer).                 if (randomBoolean()) {                     for (String pattern : generateRandomStringArray(4, 40, false)) {                         Map<String, Object> tokenFilter = new HashMap<>().                         tokenFilter.put("type", "pattern_replace").                         tokenFilter.put("pattern", pattern).                         analyzerBuilder.addTokenFilter(tokenFilter).                     }                 }             }             builder.setCategorizationAnalyzerConfig(analyzerBuilder.build()).         }     }     if (randomBoolean()) {         builder.setLatency(TimeValue.timeValueSeconds(randomIntBetween(1, 1_000_000))).     }     if (randomBoolean()) {         builder.setMultivariateByFields(randomBoolean()).     }     builder.setInfluencers(Arrays.asList(generateRandomStringArray(10, 10, false))).     return builder. }
false;protected;0;4;;@Override protected AnalysisConfig createTestInstance() {     return createRandomized().build(). }
false;protected;1;4;;@Override protected AnalysisConfig doParseInstance(XContentParser parser) {     return AnalysisConfig.PARSER.apply(parser, null).build(). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return false. }
false;public;0;5;;public void testBuilder_WithNullDetectors() {     AnalysisConfig.Builder builder = new AnalysisConfig.Builder(new ArrayList<>()).     NullPointerException ex = expectThrows(NullPointerException.class, () -> builder.setDetectors(null)).     assertEquals("[detectors] must not be null", ex.getMessage()). }
false;public;0;4;;public void testEquals_GivenSameReference() {     AnalysisConfig config = createRandomized().build().     assertTrue(config.equals(config)). }
false;public;0;3;;public void testEquals_GivenDifferentClass() {     assertFalse(createRandomized().build().equals("a string")). }
false;public;0;3;;public void testEquals_GivenNull() {     assertFalse(createRandomized().build().equals(null)). }
false;public;0;8;;public void testEquals_GivenEqualConfig() {     AnalysisConfig config1 = createValidCategorizationConfig().build().     AnalysisConfig config2 = createValidCategorizationConfig().build().     assertTrue(config1.equals(config2)).     assertTrue(config2.equals(config1)).     assertEquals(config1.hashCode(), config2.hashCode()). }
false;public;0;12;;public void testEquals_GivenDifferentBucketSpan() {     AnalysisConfig.Builder builder = createConfigBuilder().     builder.setBucketSpan(TimeValue.timeValueSeconds(1800)).     AnalysisConfig config1 = builder.build().     builder = createConfigBuilder().     builder.setBucketSpan(TimeValue.timeValueHours(1)).     AnalysisConfig config2 = builder.build().     assertFalse(config1.equals(config2)).     assertFalse(config2.equals(config1)). }
false;public;0;12;;public void testEquals_GivenCategorizationField() {     AnalysisConfig.Builder builder = createValidCategorizationConfig().     builder.setCategorizationFieldName("foo").     AnalysisConfig config1 = builder.build().     builder = createValidCategorizationConfig().     builder.setCategorizationFieldName("bar").     AnalysisConfig config2 = builder.build().     assertFalse(config1.equals(config2)).     assertFalse(config2.equals(config1)). }
false;public;0;8;;public void testEquals_GivenDifferentDetector() {     AnalysisConfig config1 = createConfigWithDetectors(Collections.singletonList(new Detector.Builder("min", "low_count").build())).     AnalysisConfig config2 = createConfigWithDetectors(Collections.singletonList(new Detector.Builder("min", "high_count").build())).     assertFalse(config1.equals(config2)).     assertFalse(config2.equals(config1)). }
false;public;0;12;;public void testEquals_GivenDifferentInfluencers() {     AnalysisConfig.Builder builder = createConfigBuilder().     builder.setInfluencers(Collections.singletonList("foo")).     AnalysisConfig config1 = builder.build().     builder = createConfigBuilder().     builder.setInfluencers(Collections.singletonList("bar")).     AnalysisConfig config2 = builder.build().     assertFalse(config1.equals(config2)).     assertFalse(config2.equals(config1)). }
false;public;0;12;;public void testEquals_GivenDifferentLatency() {     AnalysisConfig.Builder builder = createConfigBuilder().     builder.setLatency(TimeValue.timeValueSeconds(1800)).     AnalysisConfig config1 = builder.build().     builder = createConfigBuilder().     builder.setLatency(TimeValue.timeValueSeconds(1801)).     AnalysisConfig config2 = builder.build().     assertFalse(config1.equals(config2)).     assertFalse(config2.equals(config1)). }
false;public;0;12;;public void testEquals_GivenSummaryCountField() {     AnalysisConfig.Builder builder = createConfigBuilder().     builder.setSummaryCountFieldName("foo").     AnalysisConfig config1 = builder.build().     builder = createConfigBuilder().     builder.setSummaryCountFieldName("bar").     AnalysisConfig config2 = builder.build().     assertFalse(config1.equals(config2)).     assertFalse(config2.equals(config1)). }
false;public;0;12;;public void testEquals_GivenMultivariateByField() {     AnalysisConfig.Builder builder = createConfigBuilder().     builder.setMultivariateByFields(true).     AnalysisConfig config1 = builder.build().     builder = createConfigBuilder().     builder.setMultivariateByFields(false).     AnalysisConfig config2 = builder.build().     assertFalse(config1.equals(config2)).     assertFalse(config2.equals(config1)). }
false;public;0;11;;public void testEquals_GivenDifferentCategorizationFilters() {     AnalysisConfig.Builder configBuilder1 = createValidCategorizationConfig().     AnalysisConfig.Builder configBuilder2 = createValidCategorizationConfig().     configBuilder1.setCategorizationFilters(Arrays.asList("foo", "bar")).     configBuilder2.setCategorizationFilters(Arrays.asList("foo", "foobar")).     AnalysisConfig config1 = configBuilder1.build().     AnalysisConfig config2 = configBuilder2.build().     assertFalse(config1.equals(config2)).     assertFalse(config2.equals(config1)). }
false;private,static;1;3;;private static AnalysisConfig createConfigWithDetectors(List<Detector> detectors) {     return new AnalysisConfig.Builder(detectors).build(). }
false;private,static;0;3;;private static AnalysisConfig.Builder createConfigBuilder() {     return new AnalysisConfig.Builder(Collections.singletonList(new Detector.Builder("min", "count").build())). }
false;private,static;0;9;;private static AnalysisConfig.Builder createValidCategorizationConfig() {     Detector.Builder detector = new Detector.Builder("count", null).     detector.setByFieldName("mlcategory").     AnalysisConfig.Builder analysisConfig = new AnalysisConfig.Builder(Collections.singletonList(detector.build())).     analysisConfig.setBucketSpan(TimeValue.timeValueHours(1)).     analysisConfig.setLatency(TimeValue.ZERO).     analysisConfig.setCategorizationFieldName("msg").     return analysisConfig. }
false;protected;0;5;;@Override protected NamedXContentRegistry xContentRegistry() {     SearchModule searchModule = new SearchModule(Settings.EMPTY, false, Collections.emptyList()).     return new NamedXContentRegistry(searchModule.getNamedXContents()). }
