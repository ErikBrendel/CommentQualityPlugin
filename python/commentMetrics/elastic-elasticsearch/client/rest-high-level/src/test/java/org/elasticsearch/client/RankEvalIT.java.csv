# id;timestamp;commentText;codeText;commentWords;codeWords
RankEvalIT -> public void testRankEvalRequest() throws IOException;1524684173;Test cases retrieves all six documents indexed above and checks the Prec@10_calculation where all unlabeled documents are treated as not relevant.;public void testRankEvalRequest() throws IOException {_        SearchSourceBuilder testQuery = new SearchSourceBuilder()__        testQuery.query(new MatchAllQueryBuilder())__        List<RatedDocument> amsterdamRatedDocs = createRelevant("index" , "2", "3", "4", "5")__        amsterdamRatedDocs.addAll(createRelevant("index2", "7"))__        RatedRequest amsterdamRequest = new RatedRequest("amsterdam_query", amsterdamRatedDocs, testQuery)__        RatedRequest berlinRequest = new RatedRequest("berlin_query", createRelevant("index", "1"), testQuery)__        List<RatedRequest> specifications = new ArrayList<>()__        specifications.add(amsterdamRequest)__        specifications.add(berlinRequest)__        PrecisionAtK metric = new PrecisionAtK(1, false, 10)__        RankEvalSpec spec = new RankEvalSpec(specifications, metric)___        RankEvalRequest rankEvalRequest = new RankEvalRequest(spec, new String[] { "index", "index2" })__        RankEvalResponse response = execute(rankEvalRequest, highLevelClient()::rankEval,_                highLevelClient()::rankEvalAsync)__        _        double expectedPrecision = (1.0 / 7.0 + 5.0 / 7.0) / 2.0__        assertEquals(expectedPrecision, response.getEvaluationResult(), Double.MIN_VALUE)__        Map<String, EvalQueryQuality> partialResults = response.getPartialResults()__        assertEquals(2, partialResults.size())__        EvalQueryQuality amsterdamQueryQuality = partialResults.get("amsterdam_query")__        assertEquals(2, filterUnknownDocuments(amsterdamQueryQuality.getHitsAndRatings()).size())__        List<RatedSearchHit> hitsAndRatings = amsterdamQueryQuality.getHitsAndRatings()__        assertEquals(7, hitsAndRatings.size())__        for (RatedSearchHit hit : hitsAndRatings) {_            String id = hit.getSearchHit().getId()__            if (id.equals("1") || id.equals("6")) {_                assertFalse(hit.getRating().isPresent())__            } else {_                assertEquals(1, hit.getRating().get().intValue())__            }_        }_        EvalQueryQuality berlinQueryQuality = partialResults.get("berlin_query")__        assertEquals(6, filterUnknownDocuments(berlinQueryQuality.getHitsAndRatings()).size())__        hitsAndRatings = berlinQueryQuality.getHitsAndRatings()__        assertEquals(7, hitsAndRatings.size())__        for (RatedSearchHit hit : hitsAndRatings) {_            String id = hit.getSearchHit().getId()__            if (id.equals("1")) {_                assertEquals(1, hit.getRating().get().intValue())__            } else {_                assertFalse(hit.getRating().isPresent())__            }_        }__        _        client().performRequest("POST", "index2/_close", Collections.emptyMap())__        rankEvalRequest.indicesOptions(IndicesOptions.fromParameters(null, "true", null, SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = execute(rankEvalRequest, highLevelClient()::rankEval, highLevelClient()::rankEvalAsync)__    };test,cases,retrieves,all,six,documents,indexed,above,and,checks,the,prec,10,calculation,where,all,unlabeled,documents,are,treated,as,not,relevant;public,void,test,rank,eval,request,throws,ioexception,search,source,builder,test,query,new,search,source,builder,test,query,query,new,match,all,query,builder,list,rated,document,amsterdam,rated,docs,create,relevant,index,2,3,4,5,amsterdam,rated,docs,add,all,create,relevant,index2,7,rated,request,amsterdam,request,new,rated,request,amsterdam,rated,docs,test,query,rated,request,berlin,request,new,rated,request,create,relevant,index,1,test,query,list,rated,request,specifications,new,array,list,specifications,add,amsterdam,request,specifications,add,berlin,request,precision,at,k,metric,new,precision,at,k,1,false,10,rank,eval,spec,spec,new,rank,eval,spec,specifications,metric,rank,eval,request,rank,eval,request,new,rank,eval,request,spec,new,string,index,index2,rank,eval,response,response,execute,rank,eval,request,high,level,client,rank,eval,high,level,client,rank,eval,async,double,expected,precision,1,0,7,0,5,0,7,0,2,0,assert,equals,expected,precision,response,get,evaluation,result,double,map,string,eval,query,quality,partial,results,response,get,partial,results,assert,equals,2,partial,results,size,eval,query,quality,amsterdam,query,quality,partial,results,get,assert,equals,2,filter,unknown,documents,amsterdam,query,quality,get,hits,and,ratings,size,list,rated,search,hit,hits,and,ratings,amsterdam,query,quality,get,hits,and,ratings,assert,equals,7,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,1,id,equals,6,assert,false,hit,get,rating,is,present,else,assert,equals,1,hit,get,rating,get,int,value,eval,query,quality,berlin,query,quality,partial,results,get,assert,equals,6,filter,unknown,documents,berlin,query,quality,get,hits,and,ratings,size,hits,and,ratings,berlin,query,quality,get,hits,and,ratings,assert,equals,7,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,1,assert,equals,1,hit,get,rating,get,int,value,else,assert,false,hit,get,rating,is,present,client,perform,request,post,index2,collections,empty,map,rank,eval,request,indices,options,indices,options,from,parameters,null,true,null,search,request,response,execute,rank,eval,request,high,level,client,rank,eval,high,level,client,rank,eval,async
RankEvalIT -> public void testRankEvalRequest() throws IOException;1528706846;Test cases retrieves all six documents indexed above and checks the Prec@10_calculation where all unlabeled documents are treated as not relevant.;public void testRankEvalRequest() throws IOException {_        SearchSourceBuilder testQuery = new SearchSourceBuilder()__        testQuery.query(new MatchAllQueryBuilder())__        List<RatedDocument> amsterdamRatedDocs = createRelevant("index" , "2", "3", "4", "5")__        amsterdamRatedDocs.addAll(createRelevant("index2", "7"))__        RatedRequest amsterdamRequest = new RatedRequest("amsterdam_query", amsterdamRatedDocs, testQuery)__        RatedRequest berlinRequest = new RatedRequest("berlin_query", createRelevant("index", "1"), testQuery)__        List<RatedRequest> specifications = new ArrayList<>()__        specifications.add(amsterdamRequest)__        specifications.add(berlinRequest)__        PrecisionAtK metric = new PrecisionAtK(1, false, 10)__        RankEvalSpec spec = new RankEvalSpec(specifications, metric)___        RankEvalRequest rankEvalRequest = new RankEvalRequest(spec, new String[] { "index", "index2" })__        RankEvalResponse response = execute(rankEvalRequest, highLevelClient()::rankEval, highLevelClient()::rankEvalAsync,_                highLevelClient()::rankEval, highLevelClient()::rankEvalAsync)__        _        double expectedPrecision = (1.0 / 7.0 + 5.0 / 7.0) / 2.0__        assertEquals(expectedPrecision, response.getEvaluationResult(), Double.MIN_VALUE)__        Map<String, EvalQueryQuality> partialResults = response.getPartialResults()__        assertEquals(2, partialResults.size())__        EvalQueryQuality amsterdamQueryQuality = partialResults.get("amsterdam_query")__        assertEquals(2, filterUnknownDocuments(amsterdamQueryQuality.getHitsAndRatings()).size())__        List<RatedSearchHit> hitsAndRatings = amsterdamQueryQuality.getHitsAndRatings()__        assertEquals(7, hitsAndRatings.size())__        for (RatedSearchHit hit : hitsAndRatings) {_            String id = hit.getSearchHit().getId()__            if (id.equals("1") || id.equals("6")) {_                assertFalse(hit.getRating().isPresent())__            } else {_                assertEquals(1, hit.getRating().get().intValue())__            }_        }_        EvalQueryQuality berlinQueryQuality = partialResults.get("berlin_query")__        assertEquals(6, filterUnknownDocuments(berlinQueryQuality.getHitsAndRatings()).size())__        hitsAndRatings = berlinQueryQuality.getHitsAndRatings()__        assertEquals(7, hitsAndRatings.size())__        for (RatedSearchHit hit : hitsAndRatings) {_            String id = hit.getSearchHit().getId()__            if (id.equals("1")) {_                assertEquals(1, hit.getRating().get().intValue())__            } else {_                assertFalse(hit.getRating().isPresent())__            }_        }__        _        client().performRequest("POST", "index2/_close", Collections.emptyMap())__        rankEvalRequest.indicesOptions(IndicesOptions.fromParameters(null, "true", null, SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = execute(rankEvalRequest, highLevelClient()::rankEval, highLevelClient()::rankEvalAsync,_                highLevelClient()::rankEval, highLevelClient()::rankEvalAsync)__    };test,cases,retrieves,all,six,documents,indexed,above,and,checks,the,prec,10,calculation,where,all,unlabeled,documents,are,treated,as,not,relevant;public,void,test,rank,eval,request,throws,ioexception,search,source,builder,test,query,new,search,source,builder,test,query,query,new,match,all,query,builder,list,rated,document,amsterdam,rated,docs,create,relevant,index,2,3,4,5,amsterdam,rated,docs,add,all,create,relevant,index2,7,rated,request,amsterdam,request,new,rated,request,amsterdam,rated,docs,test,query,rated,request,berlin,request,new,rated,request,create,relevant,index,1,test,query,list,rated,request,specifications,new,array,list,specifications,add,amsterdam,request,specifications,add,berlin,request,precision,at,k,metric,new,precision,at,k,1,false,10,rank,eval,spec,spec,new,rank,eval,spec,specifications,metric,rank,eval,request,rank,eval,request,new,rank,eval,request,spec,new,string,index,index2,rank,eval,response,response,execute,rank,eval,request,high,level,client,rank,eval,high,level,client,rank,eval,async,high,level,client,rank,eval,high,level,client,rank,eval,async,double,expected,precision,1,0,7,0,5,0,7,0,2,0,assert,equals,expected,precision,response,get,evaluation,result,double,map,string,eval,query,quality,partial,results,response,get,partial,results,assert,equals,2,partial,results,size,eval,query,quality,amsterdam,query,quality,partial,results,get,assert,equals,2,filter,unknown,documents,amsterdam,query,quality,get,hits,and,ratings,size,list,rated,search,hit,hits,and,ratings,amsterdam,query,quality,get,hits,and,ratings,assert,equals,7,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,1,id,equals,6,assert,false,hit,get,rating,is,present,else,assert,equals,1,hit,get,rating,get,int,value,eval,query,quality,berlin,query,quality,partial,results,get,assert,equals,6,filter,unknown,documents,berlin,query,quality,get,hits,and,ratings,size,hits,and,ratings,berlin,query,quality,get,hits,and,ratings,assert,equals,7,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,1,assert,equals,1,hit,get,rating,get,int,value,else,assert,false,hit,get,rating,is,present,client,perform,request,post,index2,collections,empty,map,rank,eval,request,indices,options,indices,options,from,parameters,null,true,null,search,request,response,execute,rank,eval,request,high,level,client,rank,eval,high,level,client,rank,eval,async,high,level,client,rank,eval,high,level,client,rank,eval,async
RankEvalIT -> public void testRankEvalRequest() throws IOException;1528893677;Test cases retrieves all six documents indexed above and checks the Prec@10_calculation where all unlabeled documents are treated as not relevant.;public void testRankEvalRequest() throws IOException {_        SearchSourceBuilder testQuery = new SearchSourceBuilder()__        testQuery.query(new MatchAllQueryBuilder())__        List<RatedDocument> amsterdamRatedDocs = createRelevant("index" , "2", "3", "4", "5")__        amsterdamRatedDocs.addAll(createRelevant("index2", "7"))__        RatedRequest amsterdamRequest = new RatedRequest("amsterdam_query", amsterdamRatedDocs, testQuery)__        RatedRequest berlinRequest = new RatedRequest("berlin_query", createRelevant("index", "1"), testQuery)__        List<RatedRequest> specifications = new ArrayList<>()__        specifications.add(amsterdamRequest)__        specifications.add(berlinRequest)__        PrecisionAtK metric = new PrecisionAtK(1, false, 10)__        RankEvalSpec spec = new RankEvalSpec(specifications, metric)___        RankEvalRequest rankEvalRequest = new RankEvalRequest(spec, new String[] { "index", "index2" })__        RankEvalResponse response = execute(rankEvalRequest, highLevelClient()::rankEval, highLevelClient()::rankEvalAsync)__        _        double expectedPrecision = (1.0 / 7.0 + 5.0 / 7.0) / 2.0__        assertEquals(expectedPrecision, response.getEvaluationResult(), Double.MIN_VALUE)__        Map<String, EvalQueryQuality> partialResults = response.getPartialResults()__        assertEquals(2, partialResults.size())__        EvalQueryQuality amsterdamQueryQuality = partialResults.get("amsterdam_query")__        assertEquals(2, filterUnknownDocuments(amsterdamQueryQuality.getHitsAndRatings()).size())__        List<RatedSearchHit> hitsAndRatings = amsterdamQueryQuality.getHitsAndRatings()__        assertEquals(7, hitsAndRatings.size())__        for (RatedSearchHit hit : hitsAndRatings) {_            String id = hit.getSearchHit().getId()__            if (id.equals("1") || id.equals("6")) {_                assertFalse(hit.getRating().isPresent())__            } else {_                assertEquals(1, hit.getRating().get().intValue())__            }_        }_        EvalQueryQuality berlinQueryQuality = partialResults.get("berlin_query")__        assertEquals(6, filterUnknownDocuments(berlinQueryQuality.getHitsAndRatings()).size())__        hitsAndRatings = berlinQueryQuality.getHitsAndRatings()__        assertEquals(7, hitsAndRatings.size())__        for (RatedSearchHit hit : hitsAndRatings) {_            String id = hit.getSearchHit().getId()__            if (id.equals("1")) {_                assertEquals(1, hit.getRating().get().intValue())__            } else {_                assertFalse(hit.getRating().isPresent())__            }_        }__        _        client().performRequest("POST", "index2/_close", Collections.emptyMap())__        rankEvalRequest.indicesOptions(IndicesOptions.fromParameters(null, "true", null, SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = execute(rankEvalRequest, highLevelClient()::rankEval, highLevelClient()::rankEvalAsync)__    };test,cases,retrieves,all,six,documents,indexed,above,and,checks,the,prec,10,calculation,where,all,unlabeled,documents,are,treated,as,not,relevant;public,void,test,rank,eval,request,throws,ioexception,search,source,builder,test,query,new,search,source,builder,test,query,query,new,match,all,query,builder,list,rated,document,amsterdam,rated,docs,create,relevant,index,2,3,4,5,amsterdam,rated,docs,add,all,create,relevant,index2,7,rated,request,amsterdam,request,new,rated,request,amsterdam,rated,docs,test,query,rated,request,berlin,request,new,rated,request,create,relevant,index,1,test,query,list,rated,request,specifications,new,array,list,specifications,add,amsterdam,request,specifications,add,berlin,request,precision,at,k,metric,new,precision,at,k,1,false,10,rank,eval,spec,spec,new,rank,eval,spec,specifications,metric,rank,eval,request,rank,eval,request,new,rank,eval,request,spec,new,string,index,index2,rank,eval,response,response,execute,rank,eval,request,high,level,client,rank,eval,high,level,client,rank,eval,async,double,expected,precision,1,0,7,0,5,0,7,0,2,0,assert,equals,expected,precision,response,get,evaluation,result,double,map,string,eval,query,quality,partial,results,response,get,partial,results,assert,equals,2,partial,results,size,eval,query,quality,amsterdam,query,quality,partial,results,get,assert,equals,2,filter,unknown,documents,amsterdam,query,quality,get,hits,and,ratings,size,list,rated,search,hit,hits,and,ratings,amsterdam,query,quality,get,hits,and,ratings,assert,equals,7,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,1,id,equals,6,assert,false,hit,get,rating,is,present,else,assert,equals,1,hit,get,rating,get,int,value,eval,query,quality,berlin,query,quality,partial,results,get,assert,equals,6,filter,unknown,documents,berlin,query,quality,get,hits,and,ratings,size,hits,and,ratings,berlin,query,quality,get,hits,and,ratings,assert,equals,7,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,1,assert,equals,1,hit,get,rating,get,int,value,else,assert,false,hit,get,rating,is,present,client,perform,request,post,index2,collections,empty,map,rank,eval,request,indices,options,indices,options,from,parameters,null,true,null,search,request,response,execute,rank,eval,request,high,level,client,rank,eval,high,level,client,rank,eval,async
RankEvalIT -> public void testRankEvalRequest() throws IOException;1531382259;Test cases retrieves all six documents indexed above and checks the Prec@10_calculation where all unlabeled documents are treated as not relevant.;public void testRankEvalRequest() throws IOException {_        SearchSourceBuilder testQuery = new SearchSourceBuilder()__        testQuery.query(new MatchAllQueryBuilder())__        List<RatedDocument> amsterdamRatedDocs = createRelevant("index" , "amsterdam1", "amsterdam2", "amsterdam3", "amsterdam4")__        amsterdamRatedDocs.addAll(createRelevant("index2", "amsterdam0"))__        RatedRequest amsterdamRequest = new RatedRequest("amsterdam_query", amsterdamRatedDocs, testQuery)__        RatedRequest berlinRequest = new RatedRequest("berlin_query", createRelevant("index", "berlin"), testQuery)__        List<RatedRequest> specifications = new ArrayList<>()__        specifications.add(amsterdamRequest)__        specifications.add(berlinRequest)__        PrecisionAtK metric = new PrecisionAtK(1, false, 10)__        RankEvalSpec spec = new RankEvalSpec(specifications, metric)___        RankEvalRequest rankEvalRequest = new RankEvalRequest(spec, new String[] { "index", "index2" })__        RankEvalResponse response = execute(rankEvalRequest, highLevelClient()::rankEval, highLevelClient()::rankEvalAsync)__        _        double expectedPrecision = (1.0 / 7.0 + 5.0 / 7.0) / 2.0__        assertEquals(expectedPrecision, response.getEvaluationResult(), Double.MIN_VALUE)__        Map<String, EvalQueryQuality> partialResults = response.getPartialResults()__        assertEquals(2, partialResults.size())__        EvalQueryQuality amsterdamQueryQuality = partialResults.get("amsterdam_query")__        assertEquals(2, filterUnknownDocuments(amsterdamQueryQuality.getHitsAndRatings()).size())__        List<RatedSearchHit> hitsAndRatings = amsterdamQueryQuality.getHitsAndRatings()__        assertEquals(7, hitsAndRatings.size())__        for (RatedSearchHit hit : hitsAndRatings) {_            String id = hit.getSearchHit().getId()__            if (id.equals("berlin") || id.equals("amsterdam5")) {_                assertFalse(hit.getRating().isPresent())__            } else {_                assertEquals(1, hit.getRating().get().intValue())__            }_        }_        EvalQueryQuality berlinQueryQuality = partialResults.get("berlin_query")__        assertEquals(6, filterUnknownDocuments(berlinQueryQuality.getHitsAndRatings()).size())__        hitsAndRatings = berlinQueryQuality.getHitsAndRatings()__        assertEquals(7, hitsAndRatings.size())__        for (RatedSearchHit hit : hitsAndRatings) {_            String id = hit.getSearchHit().getId()__            if (id.equals("berlin")) {_                assertEquals(1, hit.getRating().get().intValue())__            } else {_                assertFalse(hit.getRating().isPresent())__            }_        }__        _        client().performRequest(new Request("POST", "index2/_close"))__        rankEvalRequest.indicesOptions(IndicesOptions.fromParameters(null, "true", null, SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = execute(rankEvalRequest, highLevelClient()::rankEval, highLevelClient()::rankEvalAsync)__    };test,cases,retrieves,all,six,documents,indexed,above,and,checks,the,prec,10,calculation,where,all,unlabeled,documents,are,treated,as,not,relevant;public,void,test,rank,eval,request,throws,ioexception,search,source,builder,test,query,new,search,source,builder,test,query,query,new,match,all,query,builder,list,rated,document,amsterdam,rated,docs,create,relevant,index,amsterdam1,amsterdam2,amsterdam3,amsterdam4,amsterdam,rated,docs,add,all,create,relevant,index2,amsterdam0,rated,request,amsterdam,request,new,rated,request,amsterdam,rated,docs,test,query,rated,request,berlin,request,new,rated,request,create,relevant,index,berlin,test,query,list,rated,request,specifications,new,array,list,specifications,add,amsterdam,request,specifications,add,berlin,request,precision,at,k,metric,new,precision,at,k,1,false,10,rank,eval,spec,spec,new,rank,eval,spec,specifications,metric,rank,eval,request,rank,eval,request,new,rank,eval,request,spec,new,string,index,index2,rank,eval,response,response,execute,rank,eval,request,high,level,client,rank,eval,high,level,client,rank,eval,async,double,expected,precision,1,0,7,0,5,0,7,0,2,0,assert,equals,expected,precision,response,get,evaluation,result,double,map,string,eval,query,quality,partial,results,response,get,partial,results,assert,equals,2,partial,results,size,eval,query,quality,amsterdam,query,quality,partial,results,get,assert,equals,2,filter,unknown,documents,amsterdam,query,quality,get,hits,and,ratings,size,list,rated,search,hit,hits,and,ratings,amsterdam,query,quality,get,hits,and,ratings,assert,equals,7,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,berlin,id,equals,amsterdam5,assert,false,hit,get,rating,is,present,else,assert,equals,1,hit,get,rating,get,int,value,eval,query,quality,berlin,query,quality,partial,results,get,assert,equals,6,filter,unknown,documents,berlin,query,quality,get,hits,and,ratings,size,hits,and,ratings,berlin,query,quality,get,hits,and,ratings,assert,equals,7,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,berlin,assert,equals,1,hit,get,rating,get,int,value,else,assert,false,hit,get,rating,is,present,client,perform,request,new,request,post,index2,rank,eval,request,indices,options,indices,options,from,parameters,null,true,null,search,request,response,execute,rank,eval,request,high,level,client,rank,eval,high,level,client,rank,eval,async
RankEvalIT -> public void testRankEvalRequest() throws IOException;1532353780;Test cases retrieves all six documents indexed above and checks the Prec@10_calculation where all unlabeled documents are treated as not relevant.;public void testRankEvalRequest() throws IOException {_        SearchSourceBuilder testQuery = new SearchSourceBuilder()__        testQuery.query(new MatchAllQueryBuilder())__        List<RatedDocument> amsterdamRatedDocs = createRelevant("index" , "amsterdam1", "amsterdam2", "amsterdam3", "amsterdam4")__        amsterdamRatedDocs.addAll(createRelevant("index2", "amsterdam0"))__        RatedRequest amsterdamRequest = new RatedRequest("amsterdam_query", amsterdamRatedDocs, testQuery)__        RatedRequest berlinRequest = new RatedRequest("berlin_query", createRelevant("index", "berlin"), testQuery)__        List<RatedRequest> specifications = new ArrayList<>()__        specifications.add(amsterdamRequest)__        specifications.add(berlinRequest)__        PrecisionAtK metric = new PrecisionAtK(1, false, 10)__        RankEvalSpec spec = new RankEvalSpec(specifications, metric)___        RankEvalRequest rankEvalRequest = new RankEvalRequest(spec, new String[] { "index", "index2" })__        RankEvalResponse response = execute(rankEvalRequest, highLevelClient()::rankEval, highLevelClient()::rankEvalAsync)__        _        double expectedPrecision = (1.0 / 7.0 + 5.0 / 7.0) / 2.0__        assertEquals(expectedPrecision, response.getEvaluationResult(), Double.MIN_VALUE)__        Map<String, EvalQueryQuality> partialResults = response.getPartialResults()__        assertEquals(2, partialResults.size())__        EvalQueryQuality amsterdamQueryQuality = partialResults.get("amsterdam_query")__        assertEquals(2, filterUnratedDocuments(amsterdamQueryQuality.getHitsAndRatings()).size())__        List<RatedSearchHit> hitsAndRatings = amsterdamQueryQuality.getHitsAndRatings()__        assertEquals(7, hitsAndRatings.size())__        for (RatedSearchHit hit : hitsAndRatings) {_            String id = hit.getSearchHit().getId()__            if (id.equals("berlin") || id.equals("amsterdam5")) {_                assertFalse(hit.getRating().isPresent())__            } else {_                assertEquals(1, hit.getRating().get().intValue())__            }_        }_        EvalQueryQuality berlinQueryQuality = partialResults.get("berlin_query")__        assertEquals(6, filterUnratedDocuments(berlinQueryQuality.getHitsAndRatings()).size())__        hitsAndRatings = berlinQueryQuality.getHitsAndRatings()__        assertEquals(7, hitsAndRatings.size())__        for (RatedSearchHit hit : hitsAndRatings) {_            String id = hit.getSearchHit().getId()__            if (id.equals("berlin")) {_                assertEquals(1, hit.getRating().get().intValue())__            } else {_                assertFalse(hit.getRating().isPresent())__            }_        }__        _        client().performRequest(new Request("POST", "index2/_close"))__        rankEvalRequest.indicesOptions(IndicesOptions.fromParameters(null, "true", null, SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = execute(rankEvalRequest, highLevelClient()::rankEval, highLevelClient()::rankEvalAsync)__    };test,cases,retrieves,all,six,documents,indexed,above,and,checks,the,prec,10,calculation,where,all,unlabeled,documents,are,treated,as,not,relevant;public,void,test,rank,eval,request,throws,ioexception,search,source,builder,test,query,new,search,source,builder,test,query,query,new,match,all,query,builder,list,rated,document,amsterdam,rated,docs,create,relevant,index,amsterdam1,amsterdam2,amsterdam3,amsterdam4,amsterdam,rated,docs,add,all,create,relevant,index2,amsterdam0,rated,request,amsterdam,request,new,rated,request,amsterdam,rated,docs,test,query,rated,request,berlin,request,new,rated,request,create,relevant,index,berlin,test,query,list,rated,request,specifications,new,array,list,specifications,add,amsterdam,request,specifications,add,berlin,request,precision,at,k,metric,new,precision,at,k,1,false,10,rank,eval,spec,spec,new,rank,eval,spec,specifications,metric,rank,eval,request,rank,eval,request,new,rank,eval,request,spec,new,string,index,index2,rank,eval,response,response,execute,rank,eval,request,high,level,client,rank,eval,high,level,client,rank,eval,async,double,expected,precision,1,0,7,0,5,0,7,0,2,0,assert,equals,expected,precision,response,get,evaluation,result,double,map,string,eval,query,quality,partial,results,response,get,partial,results,assert,equals,2,partial,results,size,eval,query,quality,amsterdam,query,quality,partial,results,get,assert,equals,2,filter,unrated,documents,amsterdam,query,quality,get,hits,and,ratings,size,list,rated,search,hit,hits,and,ratings,amsterdam,query,quality,get,hits,and,ratings,assert,equals,7,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,berlin,id,equals,amsterdam5,assert,false,hit,get,rating,is,present,else,assert,equals,1,hit,get,rating,get,int,value,eval,query,quality,berlin,query,quality,partial,results,get,assert,equals,6,filter,unrated,documents,berlin,query,quality,get,hits,and,ratings,size,hits,and,ratings,berlin,query,quality,get,hits,and,ratings,assert,equals,7,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,berlin,assert,equals,1,hit,get,rating,get,int,value,else,assert,false,hit,get,rating,is,present,client,perform,request,new,request,post,index2,rank,eval,request,indices,options,indices,options,from,parameters,null,true,null,search,request,response,execute,rank,eval,request,high,level,client,rank,eval,high,level,client,rank,eval,async
RankEvalIT -> public void testRankEvalRequest() throws IOException;1532434432;Test cases retrieves all six documents indexed above and checks the Prec@10_calculation where all unlabeled documents are treated as not relevant.;public void testRankEvalRequest() throws IOException {_        SearchSourceBuilder testQuery = new SearchSourceBuilder()__        testQuery.query(new MatchAllQueryBuilder())__        List<RatedDocument> amsterdamRatedDocs = createRelevant("index" , "amsterdam1", "amsterdam2", "amsterdam3", "amsterdam4")__        amsterdamRatedDocs.addAll(createRelevant("index2", "amsterdam0"))__        RatedRequest amsterdamRequest = new RatedRequest("amsterdam_query", amsterdamRatedDocs, testQuery)__        RatedRequest berlinRequest = new RatedRequest("berlin_query", createRelevant("index", "berlin"), testQuery)__        List<RatedRequest> specifications = new ArrayList<>()__        specifications.add(amsterdamRequest)__        specifications.add(berlinRequest)__        PrecisionAtK metric = new PrecisionAtK(1, false, 10)__        RankEvalSpec spec = new RankEvalSpec(specifications, metric)___        RankEvalRequest rankEvalRequest = new RankEvalRequest(spec, new String[] { "index", "index2" })__        RankEvalResponse response = execute(rankEvalRequest, highLevelClient()::rankEval, highLevelClient()::rankEvalAsync)__        _        double expectedPrecision = (1.0 / 7.0 + 5.0 / 7.0) / 2.0__        assertEquals(expectedPrecision, response.getMetricScore(), Double.MIN_VALUE)__        Map<String, EvalQueryQuality> partialResults = response.getPartialResults()__        assertEquals(2, partialResults.size())__        EvalQueryQuality amsterdamQueryQuality = partialResults.get("amsterdam_query")__        assertEquals(2, filterUnratedDocuments(amsterdamQueryQuality.getHitsAndRatings()).size())__        List<RatedSearchHit> hitsAndRatings = amsterdamQueryQuality.getHitsAndRatings()__        assertEquals(7, hitsAndRatings.size())__        for (RatedSearchHit hit : hitsAndRatings) {_            String id = hit.getSearchHit().getId()__            if (id.equals("berlin") || id.equals("amsterdam5")) {_                assertFalse(hit.getRating().isPresent())__            } else {_                assertEquals(1, hit.getRating().get().intValue())__            }_        }_        EvalQueryQuality berlinQueryQuality = partialResults.get("berlin_query")__        assertEquals(6, filterUnratedDocuments(berlinQueryQuality.getHitsAndRatings()).size())__        hitsAndRatings = berlinQueryQuality.getHitsAndRatings()__        assertEquals(7, hitsAndRatings.size())__        for (RatedSearchHit hit : hitsAndRatings) {_            String id = hit.getSearchHit().getId()__            if (id.equals("berlin")) {_                assertEquals(1, hit.getRating().get().intValue())__            } else {_                assertFalse(hit.getRating().isPresent())__            }_        }__        _        client().performRequest(new Request("POST", "index2/_close"))__        rankEvalRequest.indicesOptions(IndicesOptions.fromParameters(null, "true", null, SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = execute(rankEvalRequest, highLevelClient()::rankEval, highLevelClient()::rankEvalAsync)__    };test,cases,retrieves,all,six,documents,indexed,above,and,checks,the,prec,10,calculation,where,all,unlabeled,documents,are,treated,as,not,relevant;public,void,test,rank,eval,request,throws,ioexception,search,source,builder,test,query,new,search,source,builder,test,query,query,new,match,all,query,builder,list,rated,document,amsterdam,rated,docs,create,relevant,index,amsterdam1,amsterdam2,amsterdam3,amsterdam4,amsterdam,rated,docs,add,all,create,relevant,index2,amsterdam0,rated,request,amsterdam,request,new,rated,request,amsterdam,rated,docs,test,query,rated,request,berlin,request,new,rated,request,create,relevant,index,berlin,test,query,list,rated,request,specifications,new,array,list,specifications,add,amsterdam,request,specifications,add,berlin,request,precision,at,k,metric,new,precision,at,k,1,false,10,rank,eval,spec,spec,new,rank,eval,spec,specifications,metric,rank,eval,request,rank,eval,request,new,rank,eval,request,spec,new,string,index,index2,rank,eval,response,response,execute,rank,eval,request,high,level,client,rank,eval,high,level,client,rank,eval,async,double,expected,precision,1,0,7,0,5,0,7,0,2,0,assert,equals,expected,precision,response,get,metric,score,double,map,string,eval,query,quality,partial,results,response,get,partial,results,assert,equals,2,partial,results,size,eval,query,quality,amsterdam,query,quality,partial,results,get,assert,equals,2,filter,unrated,documents,amsterdam,query,quality,get,hits,and,ratings,size,list,rated,search,hit,hits,and,ratings,amsterdam,query,quality,get,hits,and,ratings,assert,equals,7,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,berlin,id,equals,amsterdam5,assert,false,hit,get,rating,is,present,else,assert,equals,1,hit,get,rating,get,int,value,eval,query,quality,berlin,query,quality,partial,results,get,assert,equals,6,filter,unrated,documents,berlin,query,quality,get,hits,and,ratings,size,hits,and,ratings,berlin,query,quality,get,hits,and,ratings,assert,equals,7,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,berlin,assert,equals,1,hit,get,rating,get,int,value,else,assert,false,hit,get,rating,is,present,client,perform,request,new,request,post,index2,rank,eval,request,indices,options,indices,options,from,parameters,null,true,null,search,request,response,execute,rank,eval,request,high,level,client,rank,eval,high,level,client,rank,eval,async
RankEvalIT -> public void testRankEvalRequest() throws IOException;1532456624;Test cases retrieves all six documents indexed above and checks the Prec@10_calculation where all unlabeled documents are treated as not relevant.;public void testRankEvalRequest() throws IOException {_        List<RatedRequest> specifications = createTestEvaluationSpec()__        PrecisionAtK metric = new PrecisionAtK(1, false, 10)__        RankEvalSpec spec = new RankEvalSpec(specifications, metric)___        RankEvalRequest rankEvalRequest = new RankEvalRequest(spec, new String[] { "index", "index2" })__        RankEvalResponse response = execute(rankEvalRequest, highLevelClient()::rankEval, highLevelClient()::rankEvalAsync)__        _        double expectedPrecision = (1.0 / 7.0 + 5.0 / 7.0) / 2.0__        assertEquals(expectedPrecision, response.getMetricScore(), Double.MIN_VALUE)__        Map<String, EvalQueryQuality> partialResults = response.getPartialResults()__        assertEquals(2, partialResults.size())__        EvalQueryQuality amsterdamQueryQuality = partialResults.get("amsterdam_query")__        assertEquals(2, filterUnratedDocuments(amsterdamQueryQuality.getHitsAndRatings()).size())__        List<RatedSearchHit> hitsAndRatings = amsterdamQueryQuality.getHitsAndRatings()__        assertEquals(7, hitsAndRatings.size())__        for (RatedSearchHit hit : hitsAndRatings) {_            String id = hit.getSearchHit().getId()__            if (id.equals("berlin") || id.equals("amsterdam5")) {_                assertFalse(hit.getRating().isPresent())__            } else {_                assertEquals(1, hit.getRating().get().intValue())__            }_        }_        EvalQueryQuality berlinQueryQuality = partialResults.get("berlin_query")__        assertEquals(6, filterUnratedDocuments(berlinQueryQuality.getHitsAndRatings()).size())__        hitsAndRatings = berlinQueryQuality.getHitsAndRatings()__        assertEquals(7, hitsAndRatings.size())__        for (RatedSearchHit hit : hitsAndRatings) {_            String id = hit.getSearchHit().getId()__            if (id.equals("berlin")) {_                assertEquals(1, hit.getRating().get().intValue())__            } else {_                assertFalse(hit.getRating().isPresent())__            }_        }__        _        client().performRequest(new Request("POST", "index2/_close"))__        rankEvalRequest.indicesOptions(IndicesOptions.fromParameters(null, "true", null, SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = execute(rankEvalRequest, highLevelClient()::rankEval, highLevelClient()::rankEvalAsync)__    };test,cases,retrieves,all,six,documents,indexed,above,and,checks,the,prec,10,calculation,where,all,unlabeled,documents,are,treated,as,not,relevant;public,void,test,rank,eval,request,throws,ioexception,list,rated,request,specifications,create,test,evaluation,spec,precision,at,k,metric,new,precision,at,k,1,false,10,rank,eval,spec,spec,new,rank,eval,spec,specifications,metric,rank,eval,request,rank,eval,request,new,rank,eval,request,spec,new,string,index,index2,rank,eval,response,response,execute,rank,eval,request,high,level,client,rank,eval,high,level,client,rank,eval,async,double,expected,precision,1,0,7,0,5,0,7,0,2,0,assert,equals,expected,precision,response,get,metric,score,double,map,string,eval,query,quality,partial,results,response,get,partial,results,assert,equals,2,partial,results,size,eval,query,quality,amsterdam,query,quality,partial,results,get,assert,equals,2,filter,unrated,documents,amsterdam,query,quality,get,hits,and,ratings,size,list,rated,search,hit,hits,and,ratings,amsterdam,query,quality,get,hits,and,ratings,assert,equals,7,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,berlin,id,equals,amsterdam5,assert,false,hit,get,rating,is,present,else,assert,equals,1,hit,get,rating,get,int,value,eval,query,quality,berlin,query,quality,partial,results,get,assert,equals,6,filter,unrated,documents,berlin,query,quality,get,hits,and,ratings,size,hits,and,ratings,berlin,query,quality,get,hits,and,ratings,assert,equals,7,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,berlin,assert,equals,1,hit,get,rating,get,int,value,else,assert,false,hit,get,rating,is,present,client,perform,request,new,request,post,index2,rank,eval,request,indices,options,indices,options,from,parameters,null,true,null,search,request,response,execute,rank,eval,request,high,level,client,rank,eval,high,level,client,rank,eval,async
RankEvalIT -> public void testRankEvalRequest() throws IOException;1538509426;Test cases retrieves all six documents indexed above and checks the Prec@10_calculation where all unlabeled documents are treated as not relevant.;public void testRankEvalRequest() throws IOException {_        List<RatedRequest> specifications = createTestEvaluationSpec()__        PrecisionAtK metric = new PrecisionAtK(1, false, 10)__        RankEvalSpec spec = new RankEvalSpec(specifications, metric)___        RankEvalRequest rankEvalRequest = new RankEvalRequest(spec, new String[] { "index", "index2" })__        RankEvalResponse response = execute(rankEvalRequest, highLevelClient()::rankEval, highLevelClient()::rankEvalAsync)__        _        double expectedPrecision = (1.0 / 7.0 + 5.0 / 7.0) / 2.0__        assertEquals(expectedPrecision, response.getMetricScore(), Double.MIN_VALUE)__        Map<String, EvalQueryQuality> partialResults = response.getPartialResults()__        assertEquals(2, partialResults.size())__        EvalQueryQuality amsterdamQueryQuality = partialResults.get("amsterdam_query")__        assertEquals(2, filterUnratedDocuments(amsterdamQueryQuality.getHitsAndRatings()).size())__        List<RatedSearchHit> hitsAndRatings = amsterdamQueryQuality.getHitsAndRatings()__        assertEquals(7, hitsAndRatings.size())__        for (RatedSearchHit hit : hitsAndRatings) {_            String id = hit.getSearchHit().getId()__            if (id.equals("berlin") || id.equals("amsterdam5")) {_                assertFalse(hit.getRating().isPresent())__            } else {_                assertEquals(1, hit.getRating().getAsInt())__            }_        }_        EvalQueryQuality berlinQueryQuality = partialResults.get("berlin_query")__        assertEquals(6, filterUnratedDocuments(berlinQueryQuality.getHitsAndRatings()).size())__        hitsAndRatings = berlinQueryQuality.getHitsAndRatings()__        assertEquals(7, hitsAndRatings.size())__        for (RatedSearchHit hit : hitsAndRatings) {_            String id = hit.getSearchHit().getId()__            if (id.equals("berlin")) {_                assertEquals(1, hit.getRating().getAsInt())__            } else {_                assertFalse(hit.getRating().isPresent())__            }_        }__        _        client().performRequest(new Request("POST", "index2/_close"))__        rankEvalRequest.indicesOptions(IndicesOptions.fromParameters(null, "true", null, SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = execute(rankEvalRequest, highLevelClient()::rankEval, highLevelClient()::rankEvalAsync)__    };test,cases,retrieves,all,six,documents,indexed,above,and,checks,the,prec,10,calculation,where,all,unlabeled,documents,are,treated,as,not,relevant;public,void,test,rank,eval,request,throws,ioexception,list,rated,request,specifications,create,test,evaluation,spec,precision,at,k,metric,new,precision,at,k,1,false,10,rank,eval,spec,spec,new,rank,eval,spec,specifications,metric,rank,eval,request,rank,eval,request,new,rank,eval,request,spec,new,string,index,index2,rank,eval,response,response,execute,rank,eval,request,high,level,client,rank,eval,high,level,client,rank,eval,async,double,expected,precision,1,0,7,0,5,0,7,0,2,0,assert,equals,expected,precision,response,get,metric,score,double,map,string,eval,query,quality,partial,results,response,get,partial,results,assert,equals,2,partial,results,size,eval,query,quality,amsterdam,query,quality,partial,results,get,assert,equals,2,filter,unrated,documents,amsterdam,query,quality,get,hits,and,ratings,size,list,rated,search,hit,hits,and,ratings,amsterdam,query,quality,get,hits,and,ratings,assert,equals,7,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,berlin,id,equals,amsterdam5,assert,false,hit,get,rating,is,present,else,assert,equals,1,hit,get,rating,get,as,int,eval,query,quality,berlin,query,quality,partial,results,get,assert,equals,6,filter,unrated,documents,berlin,query,quality,get,hits,and,ratings,size,hits,and,ratings,berlin,query,quality,get,hits,and,ratings,assert,equals,7,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,berlin,assert,equals,1,hit,get,rating,get,as,int,else,assert,false,hit,get,rating,is,present,client,perform,request,new,request,post,index2,rank,eval,request,indices,options,indices,options,from,parameters,null,true,null,search,request,response,execute,rank,eval,request,high,level,client,rank,eval,high,level,client,rank,eval,async
RankEvalIT -> public void testRankEvalRequest() throws IOException;1541493930;Test cases retrieves all six documents indexed above and checks the Prec@10_calculation where all unlabeled documents are treated as not relevant.;public void testRankEvalRequest() throws IOException {_        List<RatedRequest> specifications = createTestEvaluationSpec()__        PrecisionAtK metric = new PrecisionAtK(1, false, 10)__        RankEvalSpec spec = new RankEvalSpec(specifications, metric)___        RankEvalRequest rankEvalRequest = new RankEvalRequest(spec, new String[] { "index", "index2" })__        RankEvalResponse response = execute(rankEvalRequest, highLevelClient()::rankEval, highLevelClient()::rankEvalAsync)__        _        double expectedPrecision = (1.0 / 7.0 + 5.0 / 7.0) / 2.0__        assertEquals(expectedPrecision, response.getMetricScore(), Double.MIN_VALUE)__        Map<String, EvalQueryQuality> partialResults = response.getPartialResults()__        assertEquals(2, partialResults.size())__        EvalQueryQuality amsterdamQueryQuality = partialResults.get("amsterdam_query")__        assertEquals(2, filterUnratedDocuments(amsterdamQueryQuality.getHitsAndRatings()).size())__        List<RatedSearchHit> hitsAndRatings = amsterdamQueryQuality.getHitsAndRatings()__        assertEquals(7, hitsAndRatings.size())__        for (RatedSearchHit hit : hitsAndRatings) {_            String id = hit.getSearchHit().getId()__            if (id.equals("berlin") || id.equals("amsterdam5")) {_                assertFalse(hit.getRating().isPresent())__            } else {_                assertEquals(1, hit.getRating().getAsInt())__            }_        }_        EvalQueryQuality berlinQueryQuality = partialResults.get("berlin_query")__        assertEquals(6, filterUnratedDocuments(berlinQueryQuality.getHitsAndRatings()).size())__        hitsAndRatings = berlinQueryQuality.getHitsAndRatings()__        assertEquals(7, hitsAndRatings.size())__        for (RatedSearchHit hit : hitsAndRatings) {_            String id = hit.getSearchHit().getId()__            if (id.equals("berlin")) {_                assertEquals(1, hit.getRating().getAsInt())__            } else {_                assertFalse(hit.getRating().isPresent())__            }_        }__        _        client().performRequest(new Request("POST", "index2/_close"))__        rankEvalRequest.indicesOptions(IndicesOptions.fromParameters(null, "true", null, "false", SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = execute(rankEvalRequest, highLevelClient()::rankEval, highLevelClient()::rankEvalAsync)__    };test,cases,retrieves,all,six,documents,indexed,above,and,checks,the,prec,10,calculation,where,all,unlabeled,documents,are,treated,as,not,relevant;public,void,test,rank,eval,request,throws,ioexception,list,rated,request,specifications,create,test,evaluation,spec,precision,at,k,metric,new,precision,at,k,1,false,10,rank,eval,spec,spec,new,rank,eval,spec,specifications,metric,rank,eval,request,rank,eval,request,new,rank,eval,request,spec,new,string,index,index2,rank,eval,response,response,execute,rank,eval,request,high,level,client,rank,eval,high,level,client,rank,eval,async,double,expected,precision,1,0,7,0,5,0,7,0,2,0,assert,equals,expected,precision,response,get,metric,score,double,map,string,eval,query,quality,partial,results,response,get,partial,results,assert,equals,2,partial,results,size,eval,query,quality,amsterdam,query,quality,partial,results,get,assert,equals,2,filter,unrated,documents,amsterdam,query,quality,get,hits,and,ratings,size,list,rated,search,hit,hits,and,ratings,amsterdam,query,quality,get,hits,and,ratings,assert,equals,7,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,berlin,id,equals,amsterdam5,assert,false,hit,get,rating,is,present,else,assert,equals,1,hit,get,rating,get,as,int,eval,query,quality,berlin,query,quality,partial,results,get,assert,equals,6,filter,unrated,documents,berlin,query,quality,get,hits,and,ratings,size,hits,and,ratings,berlin,query,quality,get,hits,and,ratings,assert,equals,7,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,berlin,assert,equals,1,hit,get,rating,get,as,int,else,assert,false,hit,get,rating,is,present,client,perform,request,new,request,post,index2,rank,eval,request,indices,options,indices,options,from,parameters,null,true,null,false,search,request,response,execute,rank,eval,request,high,level,client,rank,eval,high,level,client,rank,eval,async
RankEvalIT -> public void testRankEvalRequest() throws IOException;1545141229;Test cases retrieves all six documents indexed above and checks the Prec@10_calculation where all unlabeled documents are treated as not relevant.;public void testRankEvalRequest() throws IOException {_        List<RatedRequest> specifications = createTestEvaluationSpec()__        PrecisionAtK metric = new PrecisionAtK(1, false, 10)__        RankEvalSpec spec = new RankEvalSpec(specifications, metric)___        RankEvalRequest rankEvalRequest = new RankEvalRequest(spec, new String[] { "index", "index2" })__        RankEvalResponse response = execute(rankEvalRequest, highLevelClient()::rankEval, highLevelClient()::rankEvalAsync)__        _        double expectedPrecision = (1.0 / 7.0 + 5.0 / 7.0) / 2.0__        assertEquals(expectedPrecision, response.getMetricScore(), Double.MIN_VALUE)__        Map<String, EvalQueryQuality> partialResults = response.getPartialResults()__        assertEquals(2, partialResults.size())__        EvalQueryQuality amsterdamQueryQuality = partialResults.get("amsterdam_query")__        assertEquals(2, filterUnratedDocuments(amsterdamQueryQuality.getHitsAndRatings()).size())__        List<RatedSearchHit> hitsAndRatings = amsterdamQueryQuality.getHitsAndRatings()__        assertEquals(7, hitsAndRatings.size())__        for (RatedSearchHit hit : hitsAndRatings) {_            String id = hit.getSearchHit().getId()__            if (id.equals("berlin") || id.equals("amsterdam5")) {_                assertFalse(hit.getRating().isPresent())__            } else {_                assertEquals(1, hit.getRating().getAsInt())__            }_        }_        EvalQueryQuality berlinQueryQuality = partialResults.get("berlin_query")__        assertEquals(6, filterUnratedDocuments(berlinQueryQuality.getHitsAndRatings()).size())__        hitsAndRatings = berlinQueryQuality.getHitsAndRatings()__        assertEquals(7, hitsAndRatings.size())__        for (RatedSearchHit hit : hitsAndRatings) {_            String id = hit.getSearchHit().getId()__            if (id.equals("berlin")) {_                assertEquals(1, hit.getRating().getAsInt())__            } else {_                assertFalse(hit.getRating().isPresent())__            }_        }__        _        client().performRequest(new Request("POST", "index2/_close"))__        rankEvalRequest.indicesOptions(IndicesOptions.fromParameters(null, "true", null, "false", SearchRequest.DEFAULT_INDICES_OPTIONS))__        response = execute(rankEvalRequest, highLevelClient()::rankEval, highLevelClient()::rankEvalAsync)__    };test,cases,retrieves,all,six,documents,indexed,above,and,checks,the,prec,10,calculation,where,all,unlabeled,documents,are,treated,as,not,relevant;public,void,test,rank,eval,request,throws,ioexception,list,rated,request,specifications,create,test,evaluation,spec,precision,at,k,metric,new,precision,at,k,1,false,10,rank,eval,spec,spec,new,rank,eval,spec,specifications,metric,rank,eval,request,rank,eval,request,new,rank,eval,request,spec,new,string,index,index2,rank,eval,response,response,execute,rank,eval,request,high,level,client,rank,eval,high,level,client,rank,eval,async,double,expected,precision,1,0,7,0,5,0,7,0,2,0,assert,equals,expected,precision,response,get,metric,score,double,map,string,eval,query,quality,partial,results,response,get,partial,results,assert,equals,2,partial,results,size,eval,query,quality,amsterdam,query,quality,partial,results,get,assert,equals,2,filter,unrated,documents,amsterdam,query,quality,get,hits,and,ratings,size,list,rated,search,hit,hits,and,ratings,amsterdam,query,quality,get,hits,and,ratings,assert,equals,7,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,berlin,id,equals,amsterdam5,assert,false,hit,get,rating,is,present,else,assert,equals,1,hit,get,rating,get,as,int,eval,query,quality,berlin,query,quality,partial,results,get,assert,equals,6,filter,unrated,documents,berlin,query,quality,get,hits,and,ratings,size,hits,and,ratings,berlin,query,quality,get,hits,and,ratings,assert,equals,7,hits,and,ratings,size,for,rated,search,hit,hit,hits,and,ratings,string,id,hit,get,search,hit,get,id,if,id,equals,berlin,assert,equals,1,hit,get,rating,get,as,int,else,assert,false,hit,get,rating,is,present,client,perform,request,new,request,post,index2,rank,eval,request,indices,options,indices,options,from,parameters,null,true,null,false,search,request,response,execute,rank,eval,request,high,level,client,rank,eval,high,level,client,rank,eval,async
RankEvalIT -> public void testMetrics() throws IOException;1532456624;Test case checks that the default metrics are registered and usable;public void testMetrics() throws IOException {_        List<RatedRequest> specifications = createTestEvaluationSpec()__        List<Supplier<EvaluationMetric>> metrics = Arrays.asList(PrecisionAtK::new, MeanReciprocalRank::new, DiscountedCumulativeGain::new,_                () -> new ExpectedReciprocalRank(1))__        double expectedScores[] = new double[] {0.4285714285714286, 0.75, 1.6408962261063627, 0.4407738095238095}__        int i = 0__        for (Supplier<EvaluationMetric> metricSupplier : metrics) {_            RankEvalSpec spec = new RankEvalSpec(specifications, metricSupplier.get())___            RankEvalRequest rankEvalRequest = new RankEvalRequest(spec, new String[] { "index", "index2" })__            RankEvalResponse response = execute(rankEvalRequest, highLevelClient()::rankEval, highLevelClient()::rankEvalAsync)__            assertEquals(expectedScores[i], response.getMetricScore(), Double.MIN_VALUE)__            i++__        }_    };test,case,checks,that,the,default,metrics,are,registered,and,usable;public,void,test,metrics,throws,ioexception,list,rated,request,specifications,create,test,evaluation,spec,list,supplier,evaluation,metric,metrics,arrays,as,list,precision,at,k,new,mean,reciprocal,rank,new,discounted,cumulative,gain,new,new,expected,reciprocal,rank,1,double,expected,scores,new,double,0,4285714285714286,0,75,1,6408962261063627,0,4407738095238095,int,i,0,for,supplier,evaluation,metric,metric,supplier,metrics,rank,eval,spec,spec,new,rank,eval,spec,specifications,metric,supplier,get,rank,eval,request,rank,eval,request,new,rank,eval,request,spec,new,string,index,index2,rank,eval,response,response,execute,rank,eval,request,high,level,client,rank,eval,high,level,client,rank,eval,async,assert,equals,expected,scores,i,response,get,metric,score,double,i
RankEvalIT -> public void testMetrics() throws IOException;1538509426;Test case checks that the default metrics are registered and usable;public void testMetrics() throws IOException {_        List<RatedRequest> specifications = createTestEvaluationSpec()__        List<Supplier<EvaluationMetric>> metrics = Arrays.asList(PrecisionAtK::new, MeanReciprocalRank::new, DiscountedCumulativeGain::new,_                () -> new ExpectedReciprocalRank(1))__        double expectedScores[] = new double[] {0.4285714285714286, 0.75, 1.6408962261063627, 0.4407738095238095}__        int i = 0__        for (Supplier<EvaluationMetric> metricSupplier : metrics) {_            RankEvalSpec spec = new RankEvalSpec(specifications, metricSupplier.get())___            RankEvalRequest rankEvalRequest = new RankEvalRequest(spec, new String[] { "index", "index2" })__            RankEvalResponse response = execute(rankEvalRequest, highLevelClient()::rankEval, highLevelClient()::rankEvalAsync)__            assertEquals(expectedScores[i], response.getMetricScore(), Double.MIN_VALUE)__            i++__        }_    };test,case,checks,that,the,default,metrics,are,registered,and,usable;public,void,test,metrics,throws,ioexception,list,rated,request,specifications,create,test,evaluation,spec,list,supplier,evaluation,metric,metrics,arrays,as,list,precision,at,k,new,mean,reciprocal,rank,new,discounted,cumulative,gain,new,new,expected,reciprocal,rank,1,double,expected,scores,new,double,0,4285714285714286,0,75,1,6408962261063627,0,4407738095238095,int,i,0,for,supplier,evaluation,metric,metric,supplier,metrics,rank,eval,spec,spec,new,rank,eval,spec,specifications,metric,supplier,get,rank,eval,request,rank,eval,request,new,rank,eval,request,spec,new,string,index,index2,rank,eval,response,response,execute,rank,eval,request,high,level,client,rank,eval,high,level,client,rank,eval,async,assert,equals,expected,scores,i,response,get,metric,score,double,i
RankEvalIT -> public void testMetrics() throws IOException;1541493930;Test case checks that the default metrics are registered and usable;public void testMetrics() throws IOException {_        List<RatedRequest> specifications = createTestEvaluationSpec()__        List<Supplier<EvaluationMetric>> metrics = Arrays.asList(PrecisionAtK::new, MeanReciprocalRank::new, DiscountedCumulativeGain::new,_                () -> new ExpectedReciprocalRank(1))__        double expectedScores[] = new double[] {0.4285714285714286, 0.75, 1.6408962261063627, 0.4407738095238095}__        int i = 0__        for (Supplier<EvaluationMetric> metricSupplier : metrics) {_            RankEvalSpec spec = new RankEvalSpec(specifications, metricSupplier.get())___            RankEvalRequest rankEvalRequest = new RankEvalRequest(spec, new String[] { "index", "index2" })__            RankEvalResponse response = execute(rankEvalRequest, highLevelClient()::rankEval, highLevelClient()::rankEvalAsync)__            assertEquals(expectedScores[i], response.getMetricScore(), Double.MIN_VALUE)__            i++__        }_    };test,case,checks,that,the,default,metrics,are,registered,and,usable;public,void,test,metrics,throws,ioexception,list,rated,request,specifications,create,test,evaluation,spec,list,supplier,evaluation,metric,metrics,arrays,as,list,precision,at,k,new,mean,reciprocal,rank,new,discounted,cumulative,gain,new,new,expected,reciprocal,rank,1,double,expected,scores,new,double,0,4285714285714286,0,75,1,6408962261063627,0,4407738095238095,int,i,0,for,supplier,evaluation,metric,metric,supplier,metrics,rank,eval,spec,spec,new,rank,eval,spec,specifications,metric,supplier,get,rank,eval,request,rank,eval,request,new,rank,eval,request,spec,new,string,index,index2,rank,eval,response,response,execute,rank,eval,request,high,level,client,rank,eval,high,level,client,rank,eval,async,assert,equals,expected,scores,i,response,get,metric,score,double,i
RankEvalIT -> public void testMetrics() throws IOException;1545141229;Test case checks that the default metrics are registered and usable;public void testMetrics() throws IOException {_        List<RatedRequest> specifications = createTestEvaluationSpec()__        List<Supplier<EvaluationMetric>> metrics = Arrays.asList(PrecisionAtK::new, MeanReciprocalRank::new, DiscountedCumulativeGain::new,_                () -> new ExpectedReciprocalRank(1))__        double expectedScores[] = new double[] {0.4285714285714286, 0.75, 1.6408962261063627, 0.4407738095238095}__        int i = 0__        for (Supplier<EvaluationMetric> metricSupplier : metrics) {_            RankEvalSpec spec = new RankEvalSpec(specifications, metricSupplier.get())___            RankEvalRequest rankEvalRequest = new RankEvalRequest(spec, new String[] { "index", "index2" })__            RankEvalResponse response = execute(rankEvalRequest, highLevelClient()::rankEval, highLevelClient()::rankEvalAsync)__            assertEquals(expectedScores[i], response.getMetricScore(), Double.MIN_VALUE)__            i++__        }_    };test,case,checks,that,the,default,metrics,are,registered,and,usable;public,void,test,metrics,throws,ioexception,list,rated,request,specifications,create,test,evaluation,spec,list,supplier,evaluation,metric,metrics,arrays,as,list,precision,at,k,new,mean,reciprocal,rank,new,discounted,cumulative,gain,new,new,expected,reciprocal,rank,1,double,expected,scores,new,double,0,4285714285714286,0,75,1,6408962261063627,0,4407738095238095,int,i,0,for,supplier,evaluation,metric,metric,supplier,metrics,rank,eval,spec,spec,new,rank,eval,spec,specifications,metric,supplier,get,rank,eval,request,rank,eval,request,new,rank,eval,request,spec,new,string,index,index2,rank,eval,response,response,execute,rank,eval,request,high,level,client,rank,eval,high,level,client,rank,eval,async,assert,equals,expected,scores,i,response,get,metric,score,double,i
