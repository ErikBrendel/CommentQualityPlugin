commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;public void testCreateTokenFromPassword() {     final CreateTokenRequest request = CreateTokenRequest.passwordGrant("jsmith", "top secret password".toCharArray()).     assertThat(request.getGrantType(), equalTo("password")).     assertThat(request.getUsername(), equalTo("jsmith")).     assertThat(new String(request.getPassword()), equalTo("top secret password")).     assertThat(request.getScope(), nullValue()).     assertThat(request.getRefreshToken(), nullValue()).     assertThat(Strings.toString(request), equalTo("{" + "\"grant_type\":\"password\"," + "\"username\":\"jsmith\"," + "\"password\":\"top secret password\"" + "}")). }
false;public;0;13;;public void testCreateTokenFromRefreshToken() {     final CreateTokenRequest request = CreateTokenRequest.refreshTokenGrant("9a7f41cf-9918-4d1f-bfaa-ad3f8f9f02b9").     assertThat(request.getGrantType(), equalTo("refresh_token")).     assertThat(request.getRefreshToken(), equalTo("9a7f41cf-9918-4d1f-bfaa-ad3f8f9f02b9")).     assertThat(request.getScope(), nullValue()).     assertThat(request.getUsername(), nullValue()).     assertThat(request.getPassword(), nullValue()).     assertThat(Strings.toString(request), equalTo("{" + "\"grant_type\":\"refresh_token\"," + "\"refresh_token\":\"9a7f41cf-9918-4d1f-bfaa-ad3f8f9f02b9\"" + "}")). }
false;public;0;9;;public void testCreateTokenFromClientCredentials() {     final CreateTokenRequest request = CreateTokenRequest.clientCredentialsGrant().     assertThat(request.getGrantType(), equalTo("client_credentials")).     assertThat(request.getScope(), nullValue()).     assertThat(request.getUsername(), nullValue()).     assertThat(request.getPassword(), nullValue()).     assertThat(request.getRefreshToken(), nullValue()).     assertThat(Strings.toString(request), equalTo("{\"grant_type\":\"client_credentials\"}")). }
false;public;0;11;;public void testEqualsAndHashCode() {     final String grantType = randomAlphaOfLength(8).     final String scope = randomBoolean() ? null : randomAlphaOfLength(6).     final String username = randomBoolean() ? null : randomAlphaOfLengthBetween(4, 10).     final char[] password = randomBoolean() ? null : randomAlphaOfLengthBetween(8, 12).toCharArray().     final String refreshToken = randomBoolean() ? null : randomAlphaOfLengthBetween(12, 24).     final CreateTokenRequest request = new CreateTokenRequest(grantType, scope, username, password, refreshToken).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(request, r -> new CreateTokenRequest(r.getGrantType(), r.getScope(), r.getUsername(), r.getPassword(), r.getRefreshToken()), this::mutate). }
false;private;1;16;;private CreateTokenRequest mutate(CreateTokenRequest req) {     switch(randomIntBetween(1, 5)) {         case 1:             return new CreateTokenRequest("g", req.getScope(), req.getUsername(), req.getPassword(), req.getRefreshToken()).         case 2:             return new CreateTokenRequest(req.getGrantType(), "s", req.getUsername(), req.getPassword(), req.getRefreshToken()).         case 3:             return new CreateTokenRequest(req.getGrantType(), req.getScope(), "u", req.getPassword(), req.getRefreshToken()).         case 4:             final char[] password = { 'p' }.             return new CreateTokenRequest(req.getGrantType(), req.getScope(), req.getUsername(), password, req.getRefreshToken()).         case 5:             return new CreateTokenRequest(req.getGrantType(), req.getScope(), req.getUsername(), req.getPassword(), "r").     }     throw new IllegalStateException("Bad random number"). }
