commented;modifiers;parameterAmount;loc;comment;code
false;public;0;74;;public void testSnapshotCreateRepository() throws IOException {     RestHighLevelClient client = highLevelClient().     // tag::create-repository-request     PutRepositoryRequest request = new PutRepositoryRequest().     // end::create-repository-request     // tag::create-repository-create-settings     String locationKey = FsRepository.LOCATION_SETTING.getKey().     String locationValue = ".".     String compressKey = FsRepository.COMPRESS_SETTING.getKey().     boolean compressValue = true.     Settings settings = Settings.builder().put(locationKey, locationValue).put(compressKey, compressValue).build().     // end::create-repository-create-settings     // tag::create-repository-request-repository-settings     // <1>     request.settings(settings).     // end::create-repository-request-repository-settings     {         // tag::create-repository-settings-builder         Settings.Builder settingsBuilder = Settings.builder().put(locationKey, locationValue).put(compressKey, compressValue).         // <1>         request.settings(settingsBuilder).     // end::create-repository-settings-builder     }     {         // tag::create-repository-settings-map         Map<String, Object> map = new HashMap<>().         map.put(locationKey, locationValue).         map.put(compressKey, compressValue).         // <1>         request.settings(map).     // end::create-repository-settings-map     }     {         // tag::create-repository-settings-source         request.settings("{\"location\": \".\", \"compress\": \"true\"}", // <1>         XContentType.JSON).     // end::create-repository-settings-source     }     // tag::create-repository-request-name     // <1>     request.name(repositoryName).     // end::create-repository-request-name     // tag::create-repository-request-type     // <1>     request.type(FsRepository.TYPE).     // end::create-repository-request-type     // tag::create-repository-request-masterTimeout     // <1>     request.masterNodeTimeout(TimeValue.timeValueMinutes(1)).     // <2>     request.masterNodeTimeout("1m").     // end::create-repository-request-masterTimeout     // tag::create-repository-request-timeout     // <1>     request.timeout(TimeValue.timeValueMinutes(1)).     // <2>     request.timeout("1m").     // end::create-repository-request-timeout     // tag::create-repository-request-verify     // <1>     request.verify(true).     // end::create-repository-request-verify     // tag::create-repository-execute     AcknowledgedResponse response = client.snapshot().createRepository(request, RequestOptions.DEFAULT).     // end::create-repository-execute     // tag::create-repository-response     // <1>     boolean acknowledged = response.isAcknowledged().     // end::create-repository-response     assertTrue(acknowledged). }
false;public;1;4;;@Override public void onResponse(AcknowledgedResponse putRepositoryResponse) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;31;;public void testSnapshotCreateRepositoryAsync() throws InterruptedException {     RestHighLevelClient client = highLevelClient().     {         PutRepositoryRequest request = new PutRepositoryRequest(repositoryName).         // tag::create-repository-execute-listener         ActionListener<AcknowledgedResponse> listener = new ActionListener<AcknowledgedResponse>() {              @Override             public void onResponse(AcknowledgedResponse putRepositoryResponse) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::create-repository-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::create-repository-execute-async         // <1>         client.snapshot().createRepositoryAsync(request, RequestOptions.DEFAULT, listener).         // end::create-repository-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;0;31;;public void testSnapshotGetRepository() throws IOException {     RestHighLevelClient client = highLevelClient().     createTestRepositories().     // tag::get-repository-request     GetRepositoriesRequest request = new GetRepositoriesRequest().     // end::get-repository-request     // tag::get-repository-request-repositories     String[] repositories = new String[] { repositoryName }.     // <1>     request.repositories(repositories).     // end::get-repository-request-repositories     // tag::get-repository-request-local     // <1>     request.local(true).     // end::get-repository-request-local     // tag::get-repository-request-masterTimeout     // <1>     request.masterNodeTimeout(TimeValue.timeValueMinutes(1)).     // <2>     request.masterNodeTimeout("1m").     // end::get-repository-request-masterTimeout     // tag::get-repository-execute     GetRepositoriesResponse response = client.snapshot().getRepository(request, RequestOptions.DEFAULT).     // end::get-repository-execute     // tag::get-repository-response     List<RepositoryMetaData> repositoryMetaDataResponse = response.repositories().     // end::get-repository-response     assertThat(1, equalTo(repositoryMetaDataResponse.size())).     assertThat(repositoryName, equalTo(repositoryMetaDataResponse.get(0).name())). }
false;public;1;4;;@Override public void onResponse(GetRepositoriesResponse getRepositoriesResponse) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;31;;public void testSnapshotGetRepositoryAsync() throws InterruptedException {     RestHighLevelClient client = highLevelClient().     {         GetRepositoriesRequest request = new GetRepositoriesRequest().         // tag::get-repository-execute-listener         ActionListener<GetRepositoriesResponse> listener = new ActionListener<GetRepositoriesResponse>() {              @Override             public void onResponse(GetRepositoriesResponse getRepositoriesResponse) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::get-repository-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::get-repository-execute-async         // <1>         client.snapshot().getRepositoryAsync(request, RequestOptions.DEFAULT, listener).         // end::get-repository-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;0;68;;public void testRestoreSnapshot() throws IOException {     RestHighLevelClient client = highLevelClient().     createTestRepositories().     createTestIndex().     createTestSnapshots().     // tag::restore-snapshot-request     RestoreSnapshotRequest request = new RestoreSnapshotRequest(repositoryName, snapshotName).     // end::restore-snapshot-request     // we need to restore as a different index name     // tag::restore-snapshot-request-masterTimeout     // <1>     request.masterNodeTimeout(TimeValue.timeValueMinutes(1)).     // <2>     request.masterNodeTimeout("1m").     // end::restore-snapshot-request-masterTimeout     // tag::restore-snapshot-request-waitForCompletion     // <1>     request.waitForCompletion(true).     // end::restore-snapshot-request-waitForCompletion     // tag::restore-snapshot-request-partial     // <1>     request.partial(false).     // end::restore-snapshot-request-partial     // tag::restore-snapshot-request-include-global-state     // <1>     request.includeGlobalState(false).     // end::restore-snapshot-request-include-global-state     // tag::restore-snapshot-request-include-aliases     // <1>     request.includeAliases(false).     // end::restore-snapshot-request-include-aliases     // tag::restore-snapshot-request-indices     request.indices("test_index").     // end::restore-snapshot-request-indices     String restoredIndexName = "restored_index".     // tag::restore-snapshot-request-rename     // <1>     request.renamePattern("test_(.+)").     // <2>     request.renameReplacement("restored_$1").     // end::restore-snapshot-request-rename     // tag::restore-snapshot-request-index-settings     // <1>     request.indexSettings(Settings.builder().put("index.number_of_replicas", 0).build()).     // <2>     request.ignoreIndexSettings("index.refresh_interval", "index.search.idle.after").     request.indicesOptions(new // <3>     IndicesOptions(EnumSet.of(IndicesOptions.Option.IGNORE_UNAVAILABLE), EnumSet.of(IndicesOptions.WildcardStates.OPEN))).     // end::restore-snapshot-request-index-settings     // tag::restore-snapshot-execute     RestoreSnapshotResponse response = client.snapshot().restore(request, RequestOptions.DEFAULT).     // end::restore-snapshot-execute     // tag::restore-snapshot-response     RestoreInfo restoreInfo = response.getRestoreInfo().     // <1>     List<String> indices = restoreInfo.indices().     // end::restore-snapshot-response     assertEquals(Collections.singletonList(restoredIndexName), indices).     assertEquals(0, restoreInfo.failedShards()).     assertTrue(restoreInfo.successfulShards() > 0). }
false;public;1;4;;@Override public void onResponse(RestoreSnapshotResponse restoreSnapshotResponse) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;31;;public void testRestoreSnapshotAsync() throws InterruptedException {     RestHighLevelClient client = highLevelClient().     {         RestoreSnapshotRequest request = new RestoreSnapshotRequest().         // tag::restore-snapshot-execute-listener         ActionListener<RestoreSnapshotResponse> listener = new ActionListener<RestoreSnapshotResponse>() {              @Override             public void onResponse(RestoreSnapshotResponse restoreSnapshotResponse) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::restore-snapshot-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::restore-snapshot-execute-async         // <1>         client.snapshot().restoreAsync(request, RequestOptions.DEFAULT, listener).         // end::restore-snapshot-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;0;27;;public void testSnapshotDeleteRepository() throws IOException {     RestHighLevelClient client = highLevelClient().     createTestRepositories().     // tag::delete-repository-request     DeleteRepositoryRequest request = new DeleteRepositoryRequest(repositoryName).     // end::delete-repository-request     // tag::delete-repository-request-masterTimeout     // <1>     request.masterNodeTimeout(TimeValue.timeValueMinutes(1)).     // <2>     request.masterNodeTimeout("1m").     // end::delete-repository-request-masterTimeout     // tag::delete-repository-request-timeout     // <1>     request.timeout(TimeValue.timeValueMinutes(1)).     // <2>     request.timeout("1m").     // end::delete-repository-request-timeout     // tag::delete-repository-execute     AcknowledgedResponse response = client.snapshot().deleteRepository(request, RequestOptions.DEFAULT).     // end::delete-repository-execute     // tag::delete-repository-response     // <1>     boolean acknowledged = response.isAcknowledged().     // end::delete-repository-response     assertTrue(acknowledged). }
false;public;1;4;;@Override public void onResponse(AcknowledgedResponse deleteRepositoryResponse) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;31;;public void testSnapshotDeleteRepositoryAsync() throws InterruptedException {     RestHighLevelClient client = highLevelClient().     {         DeleteRepositoryRequest request = new DeleteRepositoryRequest().         // tag::delete-repository-execute-listener         ActionListener<AcknowledgedResponse> listener = new ActionListener<AcknowledgedResponse>() {              @Override             public void onResponse(AcknowledgedResponse deleteRepositoryResponse) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::delete-repository-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::delete-repository-execute-async         // <1>         client.snapshot().deleteRepositoryAsync(request, RequestOptions.DEFAULT, listener).         // end::delete-repository-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;0;27;;public void testSnapshotVerifyRepository() throws IOException {     RestHighLevelClient client = highLevelClient().     createTestRepositories().     // tag::verify-repository-request     VerifyRepositoryRequest request = new VerifyRepositoryRequest(repositoryName).     // end::verify-repository-request     // tag::verify-repository-request-masterTimeout     // <1>     request.masterNodeTimeout(TimeValue.timeValueMinutes(1)).     // <2>     request.masterNodeTimeout("1m").     // end::verify-repository-request-masterTimeout     // tag::verify-repository-request-timeout     // <1>     request.timeout(TimeValue.timeValueMinutes(1)).     // <2>     request.timeout("1m").     // end::verify-repository-request-timeout     // tag::verify-repository-execute     VerifyRepositoryResponse response = client.snapshot().verifyRepository(request, RequestOptions.DEFAULT).     // end::verify-repository-execute     // tag::verify-repository-response     List<VerifyRepositoryResponse.NodeView> repositoryMetaDataResponse = response.getNodes().     // end::verify-repository-response     assertThat(1, equalTo(repositoryMetaDataResponse.size())).     assertThat("node-0", equalTo(repositoryMetaDataResponse.get(0).getName())). }
false;public;1;4;;@Override public void onResponse(VerifyRepositoryResponse verifyRepositoryRestResponse) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;31;;public void testSnapshotVerifyRepositoryAsync() throws InterruptedException {     RestHighLevelClient client = highLevelClient().     {         VerifyRepositoryRequest request = new VerifyRepositoryRequest(repositoryName).         // tag::verify-repository-execute-listener         ActionListener<VerifyRepositoryResponse> listener = new ActionListener<VerifyRepositoryResponse>() {              @Override             public void onResponse(VerifyRepositoryResponse verifyRepositoryRestResponse) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::verify-repository-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::verify-repository-execute-async         // <1>         client.snapshot().verifyRepositoryAsync(request, RequestOptions.DEFAULT, listener).         // end::verify-repository-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;0;57;;public void testSnapshotCreate() throws IOException {     RestHighLevelClient client = highLevelClient().     CreateIndexRequest createIndexRequest = new CreateIndexRequest("test-index0").     client.indices().create(createIndexRequest, RequestOptions.DEFAULT).     createIndexRequest = new CreateIndexRequest("test-index1").     client.indices().create(createIndexRequest, RequestOptions.DEFAULT).     createTestRepositories().     // tag::create-snapshot-request     CreateSnapshotRequest request = new CreateSnapshotRequest().     // end::create-snapshot-request     // tag::create-snapshot-request-repositoryName     // <1>     request.repository(repositoryName).     // end::create-snapshot-request-repositoryName     // tag::create-snapshot-request-snapshotName     // <1>     request.snapshot(snapshotName).     // end::create-snapshot-request-snapshotName     // tag::create-snapshot-request-indices     // <1>     request.indices("test-index0", "test-index1").     // end::create-snapshot-request-indices     // tag::create-snapshot-request-indicesOptions     // <1>     request.indicesOptions(IndicesOptions.fromOptions(false, false, true, true)).     // end::create-snapshot-request-indicesOptions     // tag::create-snapshot-request-partial     // <1>     request.partial(false).     // end::create-snapshot-request-partial     // tag::create-snapshot-request-includeGlobalState     // <1>     request.includeGlobalState(true).     // end::create-snapshot-request-includeGlobalState     // tag::create-snapshot-request-masterTimeout     // <1>     request.masterNodeTimeout(TimeValue.timeValueMinutes(1)).     // <2>     request.masterNodeTimeout("1m").     // end::create-snapshot-request-masterTimeout     // tag::create-snapshot-request-waitForCompletion     // <1>     request.waitForCompletion(true).     // end::create-snapshot-request-waitForCompletion     // tag::create-snapshot-execute     CreateSnapshotResponse response = client.snapshot().create(request, RequestOptions.DEFAULT).     // end::create-snapshot-execute     // tag::create-snapshot-response     // <1>     RestStatus status = response.status().     // end::create-snapshot-response     assertEquals(RestStatus.OK, status).     // tag::create-snapshot-response-snapshot-info     // <1>     SnapshotInfo snapshotInfo = response.getSnapshotInfo().     // end::create-snapshot-response-snapshot-info     assertNotNull(snapshotInfo). }
false;public;1;4;;@Override public void onResponse(CreateSnapshotResponse createSnapshotResponse) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception exception) { // <2> }
false;public;0;31;;public void testSnapshotCreateAsync() throws InterruptedException {     RestHighLevelClient client = highLevelClient().     {         CreateSnapshotRequest request = new CreateSnapshotRequest(repositoryName, snapshotName).         // tag::create-snapshot-execute-listener         ActionListener<CreateSnapshotResponse> listener = new ActionListener<CreateSnapshotResponse>() {              @Override             public void onResponse(CreateSnapshotResponse createSnapshotResponse) {             // <1>             }              @Override             public void onFailure(Exception exception) {             // <2>             }         }.         // end::create-snapshot-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::create-snapshot-execute-async         // <1>         client.snapshot().createAsync(request, RequestOptions.DEFAULT, listener).         // end::create-snapshot-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;0;50;;@SuppressWarnings("unused") public void testSnapshotGetSnapshots() throws IOException {     RestHighLevelClient client = highLevelClient().     createTestRepositories().     createTestIndex().     createTestSnapshots().     // tag::get-snapshots-request     GetSnapshotsRequest request = new GetSnapshotsRequest().     // end::get-snapshots-request     // tag::get-snapshots-request-repositoryName     // <1>     request.repository(repositoryName).     // end::get-snapshots-request-repositoryName     // tag::get-snapshots-request-snapshots     String[] snapshots = { snapshotName }.     // <1>     request.snapshots(snapshots).     // end::get-snapshots-request-snapshots     // tag::get-snapshots-request-masterTimeout     // <1>     request.masterNodeTimeout(TimeValue.timeValueMinutes(1)).     // <2>     request.masterNodeTimeout("1m").     // end::get-snapshots-request-masterTimeout     // tag::get-snapshots-request-verbose     // <1>     request.verbose(true).     // end::get-snapshots-request-verbose     // tag::get-snapshots-request-ignore-unavailable     // <1>     request.ignoreUnavailable(false).     // end::get-snapshots-request-ignore-unavailable     // tag::get-snapshots-execute     GetSnapshotsResponse response = client.snapshot().get(request, RequestOptions.DEFAULT).     // end::get-snapshots-execute     // tag::get-snapshots-response     List<SnapshotInfo> snapshotsInfos = response.getSnapshots().     SnapshotInfo snapshotInfo = snapshotsInfos.get(0).     // <1>     RestStatus restStatus = snapshotInfo.status().     // <2>     SnapshotId snapshotId = snapshotInfo.snapshotId().     // <3>     SnapshotState snapshotState = snapshotInfo.state().     // <4>     List<SnapshotShardFailure> snapshotShardFailures = snapshotInfo.shardFailures().     // <5>     long startTime = snapshotInfo.startTime().     // <6>     long endTime = snapshotInfo.endTime().     // end::get-snapshots-response     assertEquals(1, snapshotsInfos.size()). }
false;public;1;4;;@Override public void onResponse(GetSnapshotsResponse getSnapshotsResponse) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;31;;public void testSnapshotGetSnapshotsAsync() throws InterruptedException {     RestHighLevelClient client = highLevelClient().     {         GetSnapshotsRequest request = new GetSnapshotsRequest(repositoryName).         // tag::get-snapshots-execute-listener         ActionListener<GetSnapshotsResponse> listener = new ActionListener<GetSnapshotsResponse>() {              @Override             public void onResponse(GetSnapshotsResponse getSnapshotsResponse) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::get-snapshots-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::get-snapshots-execute-async         // <1>         client.snapshot().getAsync(request, RequestOptions.DEFAULT, listener).         // end::get-snapshots-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;0;40;;public void testSnapshotSnapshotsStatus() throws IOException {     RestHighLevelClient client = highLevelClient().     createTestRepositories().     createTestIndex().     createTestSnapshots().     // tag::snapshots-status-request     SnapshotsStatusRequest request = new SnapshotsStatusRequest().     // end::snapshots-status-request     // tag::snapshots-status-request-repository     // <1>     request.repository(repositoryName).     // end::snapshots-status-request-repository     // tag::snapshots-status-request-snapshots     String[] snapshots = new String[] { snapshotName }.     // <1>     request.snapshots(snapshots).     // end::snapshots-status-request-snapshots     // tag::snapshots-status-request-ignoreUnavailable     // <1>     request.ignoreUnavailable(true).     // end::snapshots-status-request-ignoreUnavailable     // tag::snapshots-status-request-masterTimeout     // <1>     request.masterNodeTimeout(TimeValue.timeValueMinutes(1)).     // <2>     request.masterNodeTimeout("1m").     // end::snapshots-status-request-masterTimeout     // tag::snapshots-status-execute     SnapshotsStatusResponse response = client.snapshot().status(request, RequestOptions.DEFAULT).     // end::snapshots-status-execute     // tag::snapshots-status-response     List<SnapshotStatus> snapshotStatusesResponse = response.getSnapshots().     // <1>     SnapshotStatus snapshotStatus = snapshotStatusesResponse.get(0).     // <2>     SnapshotsInProgress.State snapshotState = snapshotStatus.getState().     // <3>     SnapshotStats shardStats = snapshotStatus.getIndices().get(indexName).getShards().get(0).getStats().     // end::snapshots-status-response     assertThat(snapshotStatusesResponse.size(), equalTo(1)).     assertThat(snapshotStatusesResponse.get(0).getSnapshot().getRepository(), equalTo(SnapshotClientDocumentationIT.repositoryName)).     assertThat(snapshotStatusesResponse.get(0).getSnapshot().getSnapshotId().getName(), equalTo(snapshotName)).     assertThat(snapshotState.completed(), equalTo(true)). }
false;public;1;4;;@Override public void onResponse(SnapshotsStatusResponse snapshotsStatusResponse) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;31;;public void testSnapshotSnapshotsStatusAsync() throws InterruptedException {     RestHighLevelClient client = highLevelClient().     {         SnapshotsStatusRequest request = new SnapshotsStatusRequest().         // tag::snapshots-status-execute-listener         ActionListener<SnapshotsStatusResponse> listener = new ActionListener<SnapshotsStatusResponse>() {              @Override             public void onResponse(SnapshotsStatusResponse snapshotsStatusResponse) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::snapshots-status-execute-listener         // Replace the empty listener with a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::snapshots-status-execute-async         // <1>         client.snapshot().statusAsync(request, RequestOptions.DEFAULT, listener).         // end::snapshots-status-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;0;26;;public void testSnapshotDeleteSnapshot() throws IOException {     RestHighLevelClient client = highLevelClient().     createTestRepositories().     createTestIndex().     createTestSnapshots().     // tag::delete-snapshot-request     DeleteSnapshotRequest request = new DeleteSnapshotRequest(repositoryName).     request.snapshot(snapshotName).     // end::delete-snapshot-request     // tag::delete-snapshot-request-masterTimeout     // <1>     request.masterNodeTimeout(TimeValue.timeValueMinutes(1)).     // <2>     request.masterNodeTimeout("1m").     // end::delete-snapshot-request-masterTimeout     // tag::delete-snapshot-execute     AcknowledgedResponse response = client.snapshot().delete(request, RequestOptions.DEFAULT).     // end::delete-snapshot-execute     // tag::delete-snapshot-response     // <1>     boolean acknowledged = response.isAcknowledged().     // end::delete-snapshot-response     assertTrue(acknowledged). }
false;public;1;4;;@Override public void onResponse(AcknowledgedResponse deleteSnapshotResponse) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;31;;public void testSnapshotDeleteSnapshotAsync() throws InterruptedException {     RestHighLevelClient client = highLevelClient().     {         DeleteSnapshotRequest request = new DeleteSnapshotRequest().         // tag::delete-snapshot-execute-listener         ActionListener<AcknowledgedResponse> listener = new ActionListener<AcknowledgedResponse>() {              @Override             public void onResponse(AcknowledgedResponse deleteSnapshotResponse) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::delete-snapshot-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::delete-snapshot-execute-async         // <1>         client.snapshot().deleteAsync(request, RequestOptions.DEFAULT, listener).         // end::delete-snapshot-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;private;0;6;;private void createTestRepositories() throws IOException {     PutRepositoryRequest request = new PutRepositoryRequest(repositoryName).     request.type(FsRepository.TYPE).     request.settings("{\"location\": \".\"}", XContentType.JSON).     assertTrue(highLevelClient().snapshot().createRepository(request, RequestOptions.DEFAULT).isAcknowledged()). }
false;private;0;3;;private void createTestIndex() throws IOException {     createIndex(indexName, Settings.EMPTY). }
false;private;0;8;;private void createTestSnapshots() throws IOException {     Request createSnapshot = new Request("put", String.format(Locale.ROOT, "_snapshot/%s/%s", repositoryName, snapshotName)).     createSnapshot.addParameter("wait_for_completion", "true").     createSnapshot.setJsonEntity("{\"indices\":\"" + indexName + "\"}").     Response response = highLevelClient().getLowLevelClient().performRequest(createSnapshot).     // check that the request went ok without parsing JSON here. When using the high level client, check acknowledgement instead.     assertEquals(200, response.getStatusLine().getStatusCode()). }
