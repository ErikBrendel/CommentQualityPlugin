commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void onResponse(GetUsersResponse getRolesResponse) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;90;;public void testGetUsers() throws Exception {     final RestHighLevelClient client = highLevelClient().     String[] usernames = new String[] { "user1", "user2", "user3" }.     addUser(client, usernames[0], randomAlphaOfLengthBetween(6, 10)).     addUser(client, usernames[1], randomAlphaOfLengthBetween(6, 10)).     addUser(client, usernames[2], randomAlphaOfLengthBetween(6, 10)).     {         // tag::get-users-request         GetUsersRequest request = new GetUsersRequest(usernames[0]).         // end::get-users-request         // tag::get-users-execute         GetUsersResponse response = client.security().getUsers(request, RequestOptions.DEFAULT).         // end::get-users-execute         // tag::get-users-response         List<User> users = new ArrayList<>(1).         users.addAll(response.getUsers()).         // end::get-users-response         assertNotNull(response).         assertThat(users.size(), equalTo(1)).         assertThat(users.get(0).getUsername(), is(usernames[0])).     }     {         // tag::get-users-list-request         GetUsersRequest request = new GetUsersRequest(usernames).         GetUsersResponse response = client.security().getUsers(request, RequestOptions.DEFAULT).         // end::get-users-list-request         List<User> users = new ArrayList<>(3).         users.addAll(response.getUsers()).         assertNotNull(response).         assertThat(users.size(), equalTo(3)).         assertThat(users.get(0).getUsername(), equalTo(usernames[0])).         assertThat(users.get(1).getUsername(), equalTo(usernames[1])).         assertThat(users.get(2).getUsername(), equalTo(usernames[2])).         assertThat(users.size(), equalTo(3)).     }     {         // tag::get-users-all-request         GetUsersRequest request = new GetUsersRequest().         GetUsersResponse response = client.security().getUsers(request, RequestOptions.DEFAULT).         // end::get-users-all-request         List<User> users = new ArrayList<>(3).         users.addAll(response.getUsers()).         assertNotNull(response).         // 9 users are expected to be returned         // test_users (3): user1, user2, user3         // system_users (6): elastic, beats_system, apm_system, logstash_system, kibana, remote_monitoring_user         assertThat(users.size(), equalTo(9)).     }     {         GetUsersRequest request = new GetUsersRequest(usernames[0]).         ActionListener<GetUsersResponse> listener.         // tag::get-users-execute-listener         listener = new ActionListener<GetUsersResponse>() {              @Override             public void onResponse(GetUsersResponse getRolesResponse) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::get-users-execute-listener         assertNotNull(listener).         // Replace the empty listener by a blocking listener in test         final PlainActionFuture<GetUsersResponse> future = new PlainActionFuture<>().         listener = future.         // tag::get-users-execute-async         // <1>         client.security().getUsersAsync(request, RequestOptions.DEFAULT, listener).         // end::get-users-execute-async         final GetUsersResponse response = future.get(30, TimeUnit.SECONDS).         List<User> users = new ArrayList<>(1).         users.addAll(response.getUsers()).         assertNotNull(response).         assertThat(users.size(), equalTo(1)).         assertThat(users.get(0).getUsername(), equalTo(usernames[0])).     } }
false;public;1;4;;@Override public void onResponse(PutUserResponse response) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;77;;public void testPutUser() throws Exception {     RestHighLevelClient client = highLevelClient().     {         // tag::put-user-password-request         char[] password = new char[] { 'p', 'a', 's', 's', 'w', 'o', 'r', 'd' }.         User user = new User("example", Collections.singletonList("superuser")).         PutUserRequest request = PutUserRequest.withPassword(user, password, true, RefreshPolicy.NONE).         // end::put-user-password-request         // tag::put-user-execute         PutUserResponse response = client.security().putUser(request, RequestOptions.DEFAULT).         // end::put-user-execute         // tag::put-user-response         // <1>         boolean isCreated = response.isCreated().         // end::put-user-response         assertTrue(isCreated).     }     {         byte[] salt = new byte[32].         // no need for secure random in a test. it could block and would not be reproducible anyway         random().nextBytes(salt).         char[] password = new char[] { 'p', 'a', 's', 's', 'w', 'o', 'r', 'd' }.         User user = new User("example2", Collections.singletonList("superuser")).         // tag::put-user-hash-request         SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance("PBKDF2withHMACSHA512").         PBEKeySpec keySpec = new PBEKeySpec(password, salt, 10000, 256).         final byte[] pbkdfEncoded = secretKeyFactory.generateSecret(keySpec).getEncoded().         char[] passwordHash = ("{PBKDF2}10000$" + Base64.getEncoder().encodeToString(salt) + "$" + Base64.getEncoder().encodeToString(pbkdfEncoded)).toCharArray().         PutUserRequest request = PutUserRequest.withPasswordHash(user, passwordHash, true, RefreshPolicy.NONE).         try {             client.security().putUser(request, RequestOptions.DEFAULT).         } catch (ElasticsearchStatusException e) {             // This is expected to fail as the server will not be using PBKDF2, but that's easiest hasher to support             // in a standard JVM without introducing additional libraries.             assertThat(e.getDetailedMessage(), containsString("PBKDF2")).         }     }     {         User user = new User("example", Arrays.asList("superuser", "another-role")).         // tag::put-user-update-request         PutUserRequest request = PutUserRequest.updateUser(user, true, RefreshPolicy.NONE).         // end::put-user-update-request         // tag::put-user-execute-listener         ActionListener<PutUserResponse> listener = new ActionListener<PutUserResponse>() {              @Override             public void onResponse(PutUserResponse response) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::put-user-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::put-user-execute-async         // <1>         client.security().putUserAsync(request, RequestOptions.DEFAULT, listener).         // end::put-user-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;1;4;;@Override public void onResponse(DeleteUserResponse deleteUserResponse) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;53;;public void testDeleteUser() throws Exception {     RestHighLevelClient client = highLevelClient().     addUser(client, "testUser", "testPassword").     {         // tag::delete-user-request         DeleteUserRequest deleteUserRequest = new DeleteUserRequest(// <1>         "testUser").         // end::delete-user-request         // tag::delete-user-execute         DeleteUserResponse deleteUserResponse = client.security().deleteUser(deleteUserRequest, RequestOptions.DEFAULT).         // end::delete-user-execute         // tag::delete-user-response         // <1>         boolean found = deleteUserResponse.isAcknowledged().         // end::delete-user-response         assertTrue(found).         // check if deleting the already deleted user again will give us a different response         deleteUserResponse = client.security().deleteUser(deleteUserRequest, RequestOptions.DEFAULT).         assertFalse(deleteUserResponse.isAcknowledged()).     }     {         DeleteUserRequest deleteUserRequest = new DeleteUserRequest("testUser", RefreshPolicy.IMMEDIATE).         ActionListener<DeleteUserResponse> listener.         // tag::delete-user-execute-listener         listener = new ActionListener<DeleteUserResponse>() {              @Override             public void onResponse(DeleteUserResponse deleteUserResponse) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::delete-user-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::delete-user-execute-async         // <1>         client.security().deleteUserAsync(deleteUserRequest, RequestOptions.DEFAULT, listener).         // end::delete-user-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;private;3;6;;private void addUser(RestHighLevelClient client, String userName, String password) throws IOException {     User user = new User(userName, Collections.singletonList(userName)).     PutUserRequest request = PutUserRequest.withPassword(user, password.toCharArray(), true, RefreshPolicy.NONE).     PutUserResponse response = client.security().putUser(request, RequestOptions.DEFAULT).     assertTrue(response.isCreated()). }
false;public;1;4;;@Override public void onResponse(PutRoleMappingResponse response) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;51;;public void testPutRoleMapping() throws Exception {     final RestHighLevelClient client = highLevelClient().     {         // tag::put-role-mapping-execute         final RoleMapperExpression rules = AnyRoleMapperExpression.builder().addExpression(FieldRoleMapperExpression.ofUsername("*")).addExpression(FieldRoleMapperExpression.ofGroups("cn=admins,dc=example,dc=com")).build().         final PutRoleMappingRequest request = new PutRoleMappingRequest("mapping-example", true, Collections.singletonList("superuser"), rules, null, RefreshPolicy.NONE).         final PutRoleMappingResponse response = client.security().putRoleMapping(request, RequestOptions.DEFAULT).         // end::put-role-mapping-execute         // tag::put-role-mapping-response         // <1>         boolean isCreated = response.isCreated().         // end::put-role-mapping-response         assertTrue(isCreated).     }     {         final RoleMapperExpression rules = AnyRoleMapperExpression.builder().addExpression(FieldRoleMapperExpression.ofUsername("*")).addExpression(FieldRoleMapperExpression.ofGroups("cn=admins,dc=example,dc=com")).build().         final PutRoleMappingRequest request = new PutRoleMappingRequest("mapping-example", true, Collections.singletonList("superuser"), rules, null, RefreshPolicy.NONE).         // tag::put-role-mapping-execute-listener         ActionListener<PutRoleMappingResponse> listener = new ActionListener<PutRoleMappingResponse>() {              @Override             public void onResponse(PutRoleMappingResponse response) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::put-role-mapping-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::put-role-mapping-execute-async         // <1>         client.security().putRoleMappingAsync(request, RequestOptions.DEFAULT, listener).         // end::put-role-mapping-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;1;4;;@Override public void onResponse(GetRoleMappingsResponse response) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;112;;public void testGetRoleMappings() throws Exception {     final RestHighLevelClient client = highLevelClient().     final RoleMapperExpression rules1 = AnyRoleMapperExpression.builder().addExpression(FieldRoleMapperExpression.ofUsername("*")).addExpression(FieldRoleMapperExpression.ofGroups("cn=admins,dc=example,dc=com")).build().     final PutRoleMappingRequest putRoleMappingRequest1 = new PutRoleMappingRequest("mapping-example-1", true, Collections.singletonList("superuser"), rules1, null, RefreshPolicy.NONE).     final PutRoleMappingResponse putRoleMappingResponse1 = client.security().putRoleMapping(putRoleMappingRequest1, RequestOptions.DEFAULT).     boolean isCreated1 = putRoleMappingResponse1.isCreated().     assertTrue(isCreated1).     final RoleMapperExpression rules2 = AnyRoleMapperExpression.builder().addExpression(FieldRoleMapperExpression.ofGroups("cn=admins,dc=example,dc=com")).build().     final Map<String, Object> metadata2 = new HashMap<>().     metadata2.put("k1", "v1").     final PutRoleMappingRequest putRoleMappingRequest2 = new PutRoleMappingRequest("mapping-example-2", true, Collections.singletonList("monitoring"), rules2, metadata2, RefreshPolicy.NONE).     final PutRoleMappingResponse putRoleMappingResponse2 = client.security().putRoleMapping(putRoleMappingRequest2, RequestOptions.DEFAULT).     boolean isCreated2 = putRoleMappingResponse2.isCreated().     assertTrue(isCreated2).     {         // tag::get-role-mappings-execute         final GetRoleMappingsRequest request = new GetRoleMappingsRequest("mapping-example-1").         final GetRoleMappingsResponse response = client.security().getRoleMappings(request, RequestOptions.DEFAULT).         // end::get-role-mappings-execute         // tag::get-role-mappings-response         List<ExpressionRoleMapping> mappings = response.getMappings().         // end::get-role-mappings-response         assertNotNull(mappings).         assertThat(mappings.size(), is(1)).         assertThat(mappings.get(0).isEnabled(), is(true)).         assertThat(mappings.get(0).getName(), is("mapping-example-1")).         assertThat(mappings.get(0).getExpression(), equalTo(rules1)).         assertThat(mappings.get(0).getMetadata(), equalTo(Collections.emptyMap())).         assertThat(mappings.get(0).getRoles(), contains("superuser")).     }     {         // tag::get-role-mappings-list-execute         final GetRoleMappingsRequest request = new GetRoleMappingsRequest("mapping-example-1", "mapping-example-2").         final GetRoleMappingsResponse response = client.security().getRoleMappings(request, RequestOptions.DEFAULT).         // end::get-role-mappings-list-execute         List<ExpressionRoleMapping> mappings = response.getMappings().         assertNotNull(mappings).         assertThat(mappings.size(), is(2)).         for (ExpressionRoleMapping roleMapping : mappings) {             assertThat(roleMapping.isEnabled(), is(true)).             assertThat(roleMapping.getName(), isIn(new String[] { "mapping-example-1", "mapping-example-2" })).             if (roleMapping.getName().equals("mapping-example-1")) {                 assertThat(roleMapping.getMetadata(), equalTo(Collections.emptyMap())).                 assertThat(roleMapping.getExpression(), equalTo(rules1)).                 assertThat(roleMapping.getRoles(), contains("superuser")).             } else {                 assertThat(roleMapping.getMetadata(), equalTo(metadata2)).                 assertThat(roleMapping.getExpression(), equalTo(rules2)).                 assertThat(roleMapping.getRoles(), contains("monitoring")).             }         }     }     {         // tag::get-role-mappings-all-execute         final GetRoleMappingsRequest request = new GetRoleMappingsRequest().         final GetRoleMappingsResponse response = client.security().getRoleMappings(request, RequestOptions.DEFAULT).         // end::get-role-mappings-all-execute         List<ExpressionRoleMapping> mappings = response.getMappings().         assertNotNull(mappings).         assertThat(mappings.size(), is(2)).         for (ExpressionRoleMapping roleMapping : mappings) {             assertThat(roleMapping.isEnabled(), is(true)).             assertThat(roleMapping.getName(), isIn(new String[] { "mapping-example-1", "mapping-example-2" })).             if (roleMapping.getName().equals("mapping-example-1")) {                 assertThat(roleMapping.getMetadata(), equalTo(Collections.emptyMap())).                 assertThat(roleMapping.getExpression(), equalTo(rules1)).                 assertThat(roleMapping.getRoles(), contains("superuser")).             } else {                 assertThat(roleMapping.getMetadata(), equalTo(metadata2)).                 assertThat(roleMapping.getExpression(), equalTo(rules2)).                 assertThat(roleMapping.getRoles(), contains("monitoring")).             }         }     }     {         final GetRoleMappingsRequest request = new GetRoleMappingsRequest().         // tag::get-role-mappings-execute-listener         ActionListener<GetRoleMappingsResponse> listener = new ActionListener<GetRoleMappingsResponse>() {              @Override             public void onResponse(GetRoleMappingsResponse response) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::get-role-mappings-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::get-role-mappings-execute-async         // <1>         client.security().getRoleMappingsAsync(request, RequestOptions.DEFAULT, listener).         // end::get-role-mappings-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;1;4;;@Override public void onResponse(Boolean response) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;44;;public void testEnableUser() throws Exception {     RestHighLevelClient client = highLevelClient().     char[] password = new char[] { 'p', 'a', 's', 's', 'w', 'o', 'r', 'd' }.     User enable_user = new User("enable_user", Collections.singletonList("superuser")).     PutUserRequest putUserRequest = PutUserRequest.withPassword(enable_user, password, true, RefreshPolicy.IMMEDIATE).     PutUserResponse putUserResponse = client.security().putUser(putUserRequest, RequestOptions.DEFAULT).     assertTrue(putUserResponse.isCreated()).     {         // tag::enable-user-execute         EnableUserRequest request = new EnableUserRequest("enable_user", RefreshPolicy.NONE).         boolean response = client.security().enableUser(request, RequestOptions.DEFAULT).         // end::enable-user-execute         assertTrue(response).     }     {         // tag::enable-user-execute-listener         EnableUserRequest request = new EnableUserRequest("enable_user", RefreshPolicy.NONE).         ActionListener<Boolean> listener = new ActionListener<Boolean>() {              @Override             public void onResponse(Boolean response) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::enable-user-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::enable-user-execute-async         // <1>         client.security().enableUserAsync(request, RequestOptions.DEFAULT, listener).         // end::enable-user-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;1;4;;@Override public void onResponse(Boolean response) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;43;;public void testDisableUser() throws Exception {     RestHighLevelClient client = highLevelClient().     char[] password = new char[] { 'p', 'a', 's', 's', 'w', 'o', 'r', 'd' }.     User disable_user = new User("disable_user", Collections.singletonList("superuser")).     PutUserRequest putUserRequest = PutUserRequest.withPassword(disable_user, password, true, RefreshPolicy.IMMEDIATE).     PutUserResponse putUserResponse = client.security().putUser(putUserRequest, RequestOptions.DEFAULT).     assertTrue(putUserResponse.isCreated()).     {         // tag::disable-user-execute         DisableUserRequest request = new DisableUserRequest("disable_user", RefreshPolicy.NONE).         boolean response = client.security().disableUser(request, RequestOptions.DEFAULT).         // end::disable-user-execute         assertTrue(response).     }     {         // tag::disable-user-execute-listener         DisableUserRequest request = new DisableUserRequest("disable_user", RefreshPolicy.NONE).         ActionListener<Boolean> listener = new ActionListener<Boolean>() {              @Override             public void onResponse(Boolean response) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::disable-user-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::disable-user-execute-async         // <1>         client.security().disableUserAsync(request, RequestOptions.DEFAULT, listener).         // end::disable-user-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;1;4;;@Override public void onResponse(GetRolesResponse getRolesResponse) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;82;;public void testGetRoles() throws Exception {     final RestHighLevelClient client = highLevelClient().     addRole("my_role").     addRole("my_role2").     addRole("my_role3").     {         // tag::get-roles-request         GetRolesRequest request = new GetRolesRequest("my_role").         // end::get-roles-request         // tag::get-roles-execute         GetRolesResponse response = client.security().getRoles(request, RequestOptions.DEFAULT).         // end::get-roles-execute         // tag::get-roles-response         List<Role> roles = response.getRoles().         // end::get-roles-response         assertNotNull(response).         assertThat(roles.size(), equalTo(1)).         assertThat(roles.get(0).getName(), equalTo("my_role")).         assertThat(roles.get(0).getClusterPrivileges().contains("all"), equalTo(true)).     }     {         // tag::get-roles-list-request         GetRolesRequest request = new GetRolesRequest("my_role", "my_role2").         GetRolesResponse response = client.security().getRoles(request, RequestOptions.DEFAULT).         // end::get-roles-list-request         List<Role> roles = response.getRoles().         assertNotNull(response).         assertThat(roles.size(), equalTo(2)).         assertThat(roles.get(0).getClusterPrivileges().contains("all"), equalTo(true)).         assertThat(roles.get(1).getClusterPrivileges().contains("all"), equalTo(true)).     }     {         // tag::get-roles-all-request         GetRolesRequest request = new GetRolesRequest().         GetRolesResponse response = client.security().getRoles(request, RequestOptions.DEFAULT).         // end::get-roles-all-request         List<Role> roles = response.getRoles().         assertNotNull(response).         // 25 system roles plus the three we created         assertThat(roles.size(), equalTo(28)).     }     {         GetRolesRequest request = new GetRolesRequest("my_role").         ActionListener<GetRolesResponse> listener.         // tag::get-roles-execute-listener         listener = new ActionListener<GetRolesResponse>() {              @Override             public void onResponse(GetRolesResponse getRolesResponse) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::get-roles-execute-listener         assertNotNull(listener).         // Replace the empty listener by a blocking listener in test         final PlainActionFuture<GetRolesResponse> future = new PlainActionFuture<>().         listener = future.         // tag::get-roles-execute-async         // <1>         client.security().getRolesAsync(request, RequestOptions.DEFAULT, listener).         // end::get-roles-execute-async         final GetRolesResponse response = future.get(30, TimeUnit.SECONDS).         assertNotNull(response).         assertThat(response.getRoles().size(), equalTo(1)).         assertThat(response.getRoles().get(0).getName(), equalTo("my_role")).         assertThat(response.getRoles().get(0).getClusterPrivileges().contains("all"), equalTo(true)).     } }
false;public;1;4;;@Override public void onResponse(AuthenticateResponse response) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;54;;public void testAuthenticate() throws Exception {     RestHighLevelClient client = highLevelClient().     {         // tag::authenticate-execute         AuthenticateResponse response = client.security().authenticate(RequestOptions.DEFAULT).         // end::authenticate-execute         // tag::authenticate-response         // <1>         User user = response.getUser().         // <2>         boolean enabled = response.enabled().         // <3>         final String authenticationRealmName = response.getAuthenticationRealm().getName().         // <4>         final String authenticationRealmType = response.getAuthenticationRealm().getType().         // <5>         final String lookupRealmName = response.getLookupRealm().getName().         // <6>         final String lookupRealmType = response.getLookupRealm().getType().         // end::authenticate-response         assertThat(user.getUsername(), is("test_user")).         assertThat(user.getRoles(), contains(new String[] { "superuser" })).         assertThat(user.getFullName(), nullValue()).         assertThat(user.getEmail(), nullValue()).         assertThat(user.getMetadata().isEmpty(), is(true)).         assertThat(enabled, is(true)).         assertThat(authenticationRealmName, is("default_file")).         assertThat(authenticationRealmType, is("file")).         assertThat(lookupRealmName, is("default_file")).         assertThat(lookupRealmType, is("file")).     }     {         // tag::authenticate-execute-listener         ActionListener<AuthenticateResponse> listener = new ActionListener<AuthenticateResponse>() {              @Override             public void onResponse(AuthenticateResponse response) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::authenticate-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::authenticate-execute-async         // <1>         client.security().authenticateAsync(RequestOptions.DEFAULT, listener).         // end::authenticate-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;1;4;;@Override public void onResponse(HasPrivilegesResponse response) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;62;;public void testHasPrivileges() throws Exception {     RestHighLevelClient client = highLevelClient().     {         // tag::has-privileges-request         HasPrivilegesRequest request = new HasPrivilegesRequest(Sets.newHashSet("monitor", "manage"), Sets.newHashSet(IndicesPrivileges.builder().indices("logstash-2018-10-05").privileges("read", "write").allowRestrictedIndices(false).build(), IndicesPrivileges.builder().indices("logstash-2018-*").privileges("read").allowRestrictedIndices(true).build()), null).         // end::has-privileges-request         // tag::has-privileges-execute         HasPrivilegesResponse response = client.security().hasPrivileges(request, RequestOptions.DEFAULT).         // end::has-privileges-execute         // tag::has-privileges-response         // <1>         boolean hasMonitor = response.hasClusterPrivilege("monitor").         // <2>         boolean hasWrite = response.hasIndexPrivilege("logstash-2018-10-05", "write").         // <3>         boolean hasRead = response.hasIndexPrivilege("logstash-2018-*", "read").         // end::has-privileges-response         assertThat(response.getUsername(), is("test_user")).         assertThat(response.hasAllRequested(), is(true)).         assertThat(hasMonitor, is(true)).         assertThat(hasWrite, is(true)).         assertThat(hasRead, is(true)).         assertThat(response.getApplicationPrivileges().entrySet(), emptyIterable()).     }     {         HasPrivilegesRequest request = new HasPrivilegesRequest(Collections.singleton("monitor"), null, null).         // tag::has-privileges-execute-listener         ActionListener<HasPrivilegesResponse> listener = new ActionListener<HasPrivilegesResponse>() {              @Override             public void onResponse(HasPrivilegesResponse response) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::has-privileges-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::has-privileges-execute-async         // <1>         client.security().hasPrivilegesAsync(request, RequestOptions.DEFAULT, listener).         // end::has-privileges-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;1;4;;@Override public void onResponse(GetUserPrivilegesResponse getUserPrivilegesResponse) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;59;;public void testGetUserPrivileges() throws Exception {     RestHighLevelClient client = highLevelClient().     {         // tag::get-user-privileges-execute         GetUserPrivilegesResponse response = client.security().getUserPrivileges(RequestOptions.DEFAULT).         // end::get-user-privileges-execute         assertNotNull(response).         // tag::get-user-privileges-response         final Set<String> cluster = response.getClusterPrivileges().         final Set<UserIndicesPrivileges> index = response.getIndicesPrivileges().         final Set<ApplicationResourcePrivileges> application = response.getApplicationPrivileges().         final Set<String> runAs = response.getRunAsPrivilege().         // end::get-user-privileges-response         assertNotNull(cluster).         assertThat(cluster, contains("all")).         assertNotNull(index).         assertThat(index.size(), is(1)).         final UserIndicesPrivileges indexPrivilege = index.iterator().next().         assertThat(indexPrivilege.getIndices(), contains("*")).         assertThat(indexPrivilege.getPrivileges(), contains("all")).         assertThat(indexPrivilege.getFieldSecurity().size(), is(0)).         assertThat(indexPrivilege.getQueries().size(), is(0)).         assertNotNull(application).         assertThat(application.size(), is(1)).         assertNotNull(runAs).         assertThat(runAs, contains("*")).     }     {         // tag::get-user-privileges-execute-listener         ActionListener<GetUserPrivilegesResponse> listener = new ActionListener<GetUserPrivilegesResponse>() {              @Override             public void onResponse(GetUserPrivilegesResponse getUserPrivilegesResponse) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::get-user-privileges-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::get-user-privileges-execute-async         // <1>         client.security().getUserPrivilegesAsync(RequestOptions.DEFAULT, listener).         // end::get-user-privileges-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;1;4;;@Override public void onResponse(ClearRealmCacheResponse clearRealmCacheResponse) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;44;;public void testClearRealmCache() throws Exception {     RestHighLevelClient client = highLevelClient().     {         // tag::clear-realm-cache-request         ClearRealmCacheRequest request = new ClearRealmCacheRequest(Collections.emptyList(), Collections.emptyList()).         // end::clear-realm-cache-request         // tag::clear-realm-cache-execute         ClearRealmCacheResponse response = client.security().clearRealmCache(request, RequestOptions.DEFAULT).         // end::clear-realm-cache-execute         assertNotNull(response).         assertThat(response.getNodes(), not(empty())).         // tag::clear-realm-cache-response         // <1>         List<ClearRealmCacheResponse.Node> nodes = response.getNodes().     // end::clear-realm-cache-response     }     {         // tag::clear-realm-cache-execute-listener         ClearRealmCacheRequest request = new ClearRealmCacheRequest(Collections.emptyList(), Collections.emptyList()).         ActionListener<ClearRealmCacheResponse> listener = new ActionListener<ClearRealmCacheResponse>() {              @Override             public void onResponse(ClearRealmCacheResponse clearRealmCacheResponse) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::clear-realm-cache-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::clear-realm-cache-execute-async         // <1>         client.security().clearRealmCacheAsync(request, RequestOptions.DEFAULT, listener).         // end::clear-realm-cache-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;1;4;;@Override public void onResponse(ClearRolesCacheResponse clearRolesCacheResponse) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;45;;public void testClearRolesCache() throws Exception {     RestHighLevelClient client = highLevelClient().     {         // tag::clear-roles-cache-request         ClearRolesCacheRequest request = new ClearRolesCacheRequest("my_role").         // end::clear-roles-cache-request         // tag::clear-roles-cache-execute         ClearRolesCacheResponse response = client.security().clearRolesCache(request, RequestOptions.DEFAULT).         // end::clear-roles-cache-execute         assertNotNull(response).         assertThat(response.getNodes(), not(empty())).         // tag::clear-roles-cache-response         // <1>         List<ClearRolesCacheResponse.Node> nodes = response.getNodes().     // end::clear-roles-cache-response     }     {         // tag::clear-roles-cache-execute-listener         ClearRolesCacheRequest request = new ClearRolesCacheRequest("my_role").         ActionListener<ClearRolesCacheResponse> listener = new ActionListener<ClearRolesCacheResponse>() {              @Override             public void onResponse(ClearRolesCacheResponse clearRolesCacheResponse) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::clear-roles-cache-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::clear-roles-cache-execute-async         // <1>         client.security().clearRolesCacheAsync(request, RequestOptions.DEFAULT, listener).         // end::clear-roles-cache-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;1;4;;@Override public void onResponse(GetSslCertificatesResponse getSslCertificatesResponse) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;79;;public void testGetSslCertificates() throws Exception {     RestHighLevelClient client = highLevelClient().     {         // tag::get-certificates-execute         GetSslCertificatesResponse response = client.security().getSslCertificates(RequestOptions.DEFAULT).         // end::get-certificates-execute         assertNotNull(response).         // tag::get-certificates-response         // <1>         List<CertificateInfo> certificates = response.getCertificates().         // end::get-certificates-response         assertThat(certificates.size(), Matchers.equalTo(9)).         final Iterator<CertificateInfo> it = certificates.iterator().         CertificateInfo c = it.next().         assertThat(c.getSubjectDn(), Matchers.equalTo("CN=testnode-client-profile")).         assertThat(c.getPath(), Matchers.equalTo("testnode.jks")).         assertThat(c.getFormat(), Matchers.equalTo("jks")).         c = it.next().         assertThat(c.getSubjectDn(), Matchers.equalTo("CN=Elasticsearch Test Node, OU=elasticsearch, O=org")).         assertThat(c.getPath(), Matchers.equalTo("testnode.crt")).         assertThat(c.getFormat(), Matchers.equalTo("PEM")).         c = it.next().         assertThat(c.getSubjectDn(), Matchers.equalTo("CN=OpenLDAP, OU=Elasticsearch, O=Elastic, L=Mountain View, ST=CA, C=US")).         assertThat(c.getPath(), Matchers.equalTo("testnode.jks")).         assertThat(c.getFormat(), Matchers.equalTo("jks")).         c = it.next().         assertThat(c.getSubjectDn(), Matchers.equalTo("CN=Elasticsearch Test Node, OU=elasticsearch, O=org")).         assertThat(c.getPath(), Matchers.equalTo("testnode.jks")).         assertThat(c.getFormat(), Matchers.equalTo("jks")).         c = it.next().         assertThat(c.getSubjectDn(), Matchers.equalTo("CN=Elasticsearch Test Client, OU=elasticsearch, O=org")).         assertThat(c.getPath(), Matchers.equalTo("testnode.jks")).         assertThat(c.getFormat(), Matchers.equalTo("jks")).         c = it.next().         assertThat(c.getSubjectDn(), Matchers.equalTo("CN=ad-ELASTICSEARCHAD-CA, DC=ad, DC=test, DC=elasticsearch, DC=com")).         assertThat(c.getPath(), Matchers.equalTo("testnode.jks")).         assertThat(c.getFormat(), Matchers.equalTo("jks")).         c = it.next().         assertThat(c.getSubjectDn(), Matchers.equalTo("CN=Elasticsearch Test Node")).         assertThat(c.getPath(), Matchers.equalTo("testnode.jks")).         assertThat(c.getFormat(), Matchers.equalTo("jks")).         c = it.next().         assertThat(c.getSubjectDn(), Matchers.equalTo("CN=samba4")).         assertThat(c.getPath(), Matchers.equalTo("testnode.jks")).         assertThat(c.getFormat(), Matchers.equalTo("jks")).         c = it.next().         assertThat(c.getSubjectDn(), Matchers.equalTo("CN=Elasticsearch Test Node")).         assertThat(c.getPath(), Matchers.equalTo("testnode.jks")).         assertThat(c.getFormat(), Matchers.equalTo("jks")).     }     {         // tag::get-certificates-execute-listener         ActionListener<GetSslCertificatesResponse> listener = new ActionListener<GetSslCertificatesResponse>() {              @Override             public void onResponse(GetSslCertificatesResponse getSslCertificatesResponse) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::get-certificates-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::get-certificates-execute-async         // <1>         client.security().getSslCertificatesAsync(RequestOptions.DEFAULT, listener).         // end::get-certificates-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;1;4;;@Override public void onResponse(Boolean response) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;43;;public void testChangePassword() throws Exception {     RestHighLevelClient client = highLevelClient().     char[] password = new char[] { 'p', 'a', 's', 's', 'w', 'o', 'r', 'd' }.     char[] newPassword = new char[] { 'n', 'e', 'w', 'p', 'a', 's', 's', 'w', 'o', 'r', 'd' }.     User user = new User("change_password_user", Collections.singletonList("superuser"), Collections.emptyMap(), null, null).     PutUserRequest putUserRequest = PutUserRequest.withPassword(user, password, true, RefreshPolicy.NONE).     PutUserResponse putUserResponse = client.security().putUser(putUserRequest, RequestOptions.DEFAULT).     assertTrue(putUserResponse.isCreated()).     {         // tag::change-password-execute         ChangePasswordRequest request = new ChangePasswordRequest("change_password_user", newPassword, RefreshPolicy.NONE).         boolean response = client.security().changePassword(request, RequestOptions.DEFAULT).         // end::change-password-execute         assertTrue(response).     }     {         // tag::change-password-execute-listener         ChangePasswordRequest request = new ChangePasswordRequest("change_password_user", password, RefreshPolicy.NONE).         ActionListener<Boolean> listener = new ActionListener<Boolean>() {              @Override             public void onResponse(Boolean response) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::change-password-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::change-password-execute-async         // <1>         client.security().changePasswordAsync(request, RequestOptions.DEFAULT, listener).         // end::change-password-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;1;4;;@Override public void onResponse(DeleteRoleMappingResponse response) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;52;;public void testDeleteRoleMapping() throws Exception {     final RestHighLevelClient client = highLevelClient().     {         // Create role mappings         final RoleMapperExpression rules = FieldRoleMapperExpression.ofUsername("*").         final PutRoleMappingRequest request = new PutRoleMappingRequest("mapping-example", true, Collections.singletonList("superuser"), rules, null, RefreshPolicy.NONE).         final PutRoleMappingResponse response = client.security().putRoleMapping(request, RequestOptions.DEFAULT).         boolean isCreated = response.isCreated().         assertTrue(isCreated).     }     {         // tag::delete-role-mapping-execute         final DeleteRoleMappingRequest request = new DeleteRoleMappingRequest("mapping-example", RefreshPolicy.NONE).         final DeleteRoleMappingResponse response = client.security().deleteRoleMapping(request, RequestOptions.DEFAULT).         // end::delete-role-mapping-execute         // tag::delete-role-mapping-response         // <1>         boolean isFound = response.isFound().         // end::delete-role-mapping-response         assertTrue(isFound).     }     {         final DeleteRoleMappingRequest request = new DeleteRoleMappingRequest("mapping-example", RefreshPolicy.NONE).         // tag::delete-role-mapping-execute-listener         ActionListener<DeleteRoleMappingResponse> listener = new ActionListener<DeleteRoleMappingResponse>() {              @Override             public void onResponse(DeleteRoleMappingResponse response) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::delete-role-mapping-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::delete-role-mapping-execute-async         // <1>         client.security().deleteRoleMappingAsync(request, RequestOptions.DEFAULT, listener).         // end::delete-role-mapping-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;1;4;;@Override public void onResponse(DeleteRoleResponse deleteRoleResponse) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;53;;public void testDeleteRole() throws Exception {     RestHighLevelClient client = highLevelClient().     addRole("testrole").     {         // tag::delete-role-request         DeleteRoleRequest deleteRoleRequest = new DeleteRoleRequest(// <1>         "testrole").         // end::delete-role-request         // tag::delete-role-execute         DeleteRoleResponse deleteRoleResponse = client.security().deleteRole(deleteRoleRequest, RequestOptions.DEFAULT).         // end::delete-role-execute         // tag::delete-role-response         // <1>         boolean found = deleteRoleResponse.isFound().         // end::delete-role-response         assertTrue(found).         // check if deleting the already deleted role again will give us a different response         deleteRoleResponse = client.security().deleteRole(deleteRoleRequest, RequestOptions.DEFAULT).         assertFalse(deleteRoleResponse.isFound()).     }     {         DeleteRoleRequest deleteRoleRequest = new DeleteRoleRequest("testrole").         ActionListener<DeleteRoleResponse> listener.         // tag::delete-role-execute-listener         listener = new ActionListener<DeleteRoleResponse>() {              @Override             public void onResponse(DeleteRoleResponse deleteRoleResponse) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::delete-role-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::delete-role-execute-async         // <1>         client.security().deleteRoleAsync(deleteRoleRequest, RequestOptions.DEFAULT, listener).         // end::delete-role-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;1;4;;@Override public void onResponse(PutRoleResponse response) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;55;;public void testPutRole() throws Exception {     RestHighLevelClient client = highLevelClient().     {         // tag::put-role-request         final Role role = Role.builder().name("testPutRole").clusterPrivileges(randomSubsetOf(1, Role.ClusterPrivilegeName.ALL_ARRAY)).build().         final PutRoleRequest request = new PutRoleRequest(role, RefreshPolicy.NONE).         // end::put-role-request         // tag::put-role-execute         final PutRoleResponse response = client.security().putRole(request, RequestOptions.DEFAULT).         // end::put-role-execute         // tag::put-role-response         // <1>         boolean isCreated = response.isCreated().         // end::put-role-response         assertTrue(isCreated).     }     {         final Role role = Role.builder().name("testPutRole").clusterPrivileges(randomSubsetOf(1, Role.ClusterPrivilegeName.ALL_ARRAY)).build().         final PutRoleRequest request = new PutRoleRequest(role, RefreshPolicy.NONE).         // tag::put-role-execute-listener         ActionListener<PutRoleResponse> listener = new ActionListener<PutRoleResponse>() {              @Override             public void onResponse(PutRoleResponse response) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::put-role-execute-listener         // Avoid unused variable warning         assertNotNull(listener).         // Replace the empty listener by a blocking listener in test         final PlainActionFuture<PutRoleResponse> future = new PlainActionFuture<>().         listener = future.         // tag::put-role-execute-async         // <1>         client.security().putRoleAsync(request, RequestOptions.DEFAULT, listener).         // end::put-role-execute-async         assertNotNull(future.get(30, TimeUnit.SECONDS)).         // false because it has already been created by the sync variant         assertThat(future.get().isCreated(), is(false)).     } }
false;private;1;8;;private void addRole(String roleName) throws IOException {     final Role role = Role.builder().name(roleName).clusterPrivileges("all").build().     final PutRoleRequest request = new PutRoleRequest(role, RefreshPolicy.IMMEDIATE).     highLevelClient().security().putRole(request, RequestOptions.DEFAULT). }
false;public;1;4;;@Override public void onResponse(CreateTokenResponse createTokenResponse) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;75;;public void testCreateToken() throws Exception {     RestHighLevelClient client = highLevelClient().     {         // Setup user         User token_user = new User("token_user", Collections.singletonList("kibana_user")).         PutUserRequest putUserRequest = PutUserRequest.withPassword(token_user, "password".toCharArray(), true, RefreshPolicy.IMMEDIATE).         PutUserResponse putUserResponse = client.security().putUser(putUserRequest, RequestOptions.DEFAULT).         assertTrue(putUserResponse.isCreated()).     }     {         // tag::create-token-password-request         final char[] password = new char[] { 'p', 'a', 's', 's', 'w', 'o', 'r', 'd' }.         CreateTokenRequest createTokenRequest = CreateTokenRequest.passwordGrant("token_user", password).         // end::create-token-password-request         // tag::create-token-execute         CreateTokenResponse createTokenResponse = client.security().createToken(createTokenRequest, RequestOptions.DEFAULT).         // end::create-token-execute         // tag::create-token-response         // <1>         String accessToken = createTokenResponse.getAccessToken().         // <2>         String refreshToken = createTokenResponse.getRefreshToken().         // end::create-token-response         assertNotNull(accessToken).         assertNotNull(refreshToken).         assertNotNull(createTokenResponse.getExpiresIn()).         // tag::create-token-refresh-request         createTokenRequest = CreateTokenRequest.refreshTokenGrant(refreshToken).         // end::create-token-refresh-request         CreateTokenResponse refreshResponse = client.security().createToken(createTokenRequest, RequestOptions.DEFAULT).         assertNotNull(refreshResponse.getAccessToken()).         assertNotNull(refreshResponse.getRefreshToken()).     }     {         // tag::create-token-client-credentials-request         CreateTokenRequest createTokenRequest = CreateTokenRequest.clientCredentialsGrant().         // end::create-token-client-credentials-request         ActionListener<CreateTokenResponse> listener.         // tag::create-token-execute-listener         listener = new ActionListener<CreateTokenResponse>() {              @Override             public void onResponse(CreateTokenResponse createTokenResponse) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::create-token-execute-listener         // Avoid unused variable warning         assertNotNull(listener).         // Replace the empty listener by a blocking listener in test         final PlainActionFuture<CreateTokenResponse> future = new PlainActionFuture<>().         listener = future.         // tag::create-token-execute-async         // <1>         client.security().createTokenAsync(createTokenRequest, RequestOptions.DEFAULT, listener).         // end::create-token-execute-async         assertNotNull(future.get(30, TimeUnit.SECONDS)).         assertNotNull(future.get().getAccessToken()).         // "client-credentials" grants aren't refreshable         assertNull(future.get().getRefreshToken()).     } }
false;public;1;4;;@Override public void onResponse(InvalidateTokenResponse invalidateTokenResponse) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;146;;public void testInvalidateToken() throws Exception {     RestHighLevelClient client = highLevelClient().     String accessToken.     String refreshToken.     {         // Setup users         final char[] password = "password".toCharArray().         User user = new User("user", Collections.singletonList("kibana_user")).         PutUserRequest putUserRequest = PutUserRequest.withPassword(user, password, true, RefreshPolicy.IMMEDIATE).         PutUserResponse putUserResponse = client.security().putUser(putUserRequest, RequestOptions.DEFAULT).         assertTrue(putUserResponse.isCreated()).         User this_user = new User("this_user", Collections.singletonList("kibana_user")).         PutUserRequest putThisUserRequest = PutUserRequest.withPassword(this_user, password, true, RefreshPolicy.IMMEDIATE).         PutUserResponse putThisUserResponse = client.security().putUser(putThisUserRequest, RequestOptions.DEFAULT).         assertTrue(putThisUserResponse.isCreated()).         User that_user = new User("that_user", Collections.singletonList("kibana_user")).         PutUserRequest putThatUserRequest = PutUserRequest.withPassword(that_user, password, true, RefreshPolicy.IMMEDIATE).         PutUserResponse putThatUserResponse = client.security().putUser(putThatUserRequest, RequestOptions.DEFAULT).         assertTrue(putThatUserResponse.isCreated()).         User other_user = new User("other_user", Collections.singletonList("kibana_user")).         PutUserRequest putOtherUserRequest = PutUserRequest.withPassword(other_user, password, true, RefreshPolicy.IMMEDIATE).         PutUserResponse putOtherUserResponse = client.security().putUser(putOtherUserRequest, RequestOptions.DEFAULT).         assertTrue(putOtherUserResponse.isCreated()).         User extra_user = new User("extra_user", Collections.singletonList("kibana_user")).         PutUserRequest putExtraUserRequest = PutUserRequest.withPassword(extra_user, password, true, RefreshPolicy.IMMEDIATE).         PutUserResponse putExtraUserResponse = client.security().putUser(putExtraUserRequest, RequestOptions.DEFAULT).         assertTrue(putExtraUserResponse.isCreated()).         // Create tokens         final CreateTokenRequest createTokenRequest = CreateTokenRequest.passwordGrant("user", password).         final CreateTokenResponse tokenResponse = client.security().createToken(createTokenRequest, RequestOptions.DEFAULT).         accessToken = tokenResponse.getAccessToken().         refreshToken = tokenResponse.getRefreshToken().         final CreateTokenRequest createThisTokenRequest = CreateTokenRequest.passwordGrant("this_user", password).         final CreateTokenResponse thisTokenResponse = client.security().createToken(createThisTokenRequest, RequestOptions.DEFAULT).         assertNotNull(thisTokenResponse).         final CreateTokenRequest createThatTokenRequest = CreateTokenRequest.passwordGrant("that_user", password).         final CreateTokenResponse thatTokenResponse = client.security().createToken(createThatTokenRequest, RequestOptions.DEFAULT).         assertNotNull(thatTokenResponse).         final CreateTokenRequest createOtherTokenRequest = CreateTokenRequest.passwordGrant("other_user", password).         final CreateTokenResponse otherTokenResponse = client.security().createToken(createOtherTokenRequest, RequestOptions.DEFAULT).         assertNotNull(otherTokenResponse).         final CreateTokenRequest createExtraTokenRequest = CreateTokenRequest.passwordGrant("extra_user", password).         final CreateTokenResponse extraTokenResponse = client.security().createToken(createExtraTokenRequest, RequestOptions.DEFAULT).         assertNotNull(extraTokenResponse).     }     {         // tag::invalidate-access-token-request         InvalidateTokenRequest invalidateTokenRequest = InvalidateTokenRequest.accessToken(accessToken).         // end::invalidate-access-token-request         // tag::invalidate-token-execute         InvalidateTokenResponse invalidateTokenResponse = client.security().invalidateToken(invalidateTokenRequest, RequestOptions.DEFAULT).         // end::invalidate-token-execute         // tag::invalidate-token-response         final List<ElasticsearchException> errors = invalidateTokenResponse.getErrors().         final int invalidatedTokens = invalidateTokenResponse.getInvalidatedTokens().         final int previouslyInvalidatedTokens = invalidateTokenResponse.getPreviouslyInvalidatedTokens().         // end::invalidate-token-response         assertTrue(errors.isEmpty()).         assertThat(invalidatedTokens, equalTo(1)).         assertThat(previouslyInvalidatedTokens, equalTo(0)).     }     {         // tag::invalidate-refresh-token-request         InvalidateTokenRequest invalidateTokenRequest = InvalidateTokenRequest.refreshToken(refreshToken).         // end::invalidate-refresh-token-request         InvalidateTokenResponse invalidateTokenResponse = client.security().invalidateToken(invalidateTokenRequest, RequestOptions.DEFAULT).         assertTrue(invalidateTokenResponse.getErrors().isEmpty()).         assertThat(invalidateTokenResponse.getInvalidatedTokens(), equalTo(1)).         assertThat(invalidateTokenResponse.getPreviouslyInvalidatedTokens(), equalTo(0)).     }     {         // tag::invalidate-user-tokens-request         InvalidateTokenRequest invalidateTokenRequest = InvalidateTokenRequest.userTokens("other_user").         // end::invalidate-user-tokens-request         InvalidateTokenResponse invalidateTokenResponse = client.security().invalidateToken(invalidateTokenRequest, RequestOptions.DEFAULT).         assertTrue(invalidateTokenResponse.getErrors().isEmpty()).         // We have one refresh and one access token for that user         assertThat(invalidateTokenResponse.getInvalidatedTokens(), equalTo(2)).         assertThat(invalidateTokenResponse.getPreviouslyInvalidatedTokens(), equalTo(0)).     }     {         // tag::invalidate-user-realm-tokens-request         InvalidateTokenRequest invalidateTokenRequest = new InvalidateTokenRequest(null, null, "default_native", "extra_user").         // end::invalidate-user-realm-tokens-request         InvalidateTokenResponse invalidateTokenResponse = client.security().invalidateToken(invalidateTokenRequest, RequestOptions.DEFAULT).         assertTrue(invalidateTokenResponse.getErrors().isEmpty()).         // We have one refresh and one access token for that user in this realm         assertThat(invalidateTokenResponse.getInvalidatedTokens(), equalTo(2)).         assertThat(invalidateTokenResponse.getPreviouslyInvalidatedTokens(), equalTo(0)).     }     {         // tag::invalidate-realm-tokens-request         InvalidateTokenRequest invalidateTokenRequest = InvalidateTokenRequest.realmTokens("default_native").         // end::invalidate-realm-tokens-request         ActionListener<InvalidateTokenResponse> listener.         // tag::invalidate-token-execute-listener         listener = new ActionListener<InvalidateTokenResponse>() {              @Override             public void onResponse(InvalidateTokenResponse invalidateTokenResponse) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::invalidate-token-execute-listener         // Avoid unused variable warning         assertNotNull(listener).         // Replace the empty listener by a blocking listener in test         final PlainActionFuture<InvalidateTokenResponse> future = new PlainActionFuture<>().         listener = future.         // tag::invalidate-token-execute-async         // <1>         client.security().invalidateTokenAsync(invalidateTokenRequest, RequestOptions.DEFAULT, listener).         // end::invalidate-token-execute-async         final InvalidateTokenResponse response = future.get(30, TimeUnit.SECONDS).         assertNotNull(response).         assertTrue(response.getErrors().isEmpty()).         // We still have 4 tokens ( 2 access_tokens and 2 refresh_tokens ) for the default_native realm         assertThat(response.getInvalidatedTokens(), equalTo(4)).         assertThat(response.getPreviouslyInvalidatedTokens(), equalTo(0)).     } }
false;public;1;4;;@Override public void onResponse(GetPrivilegesResponse getPrivilegesResponse) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;128;;public void testGetPrivileges() throws Exception {     final RestHighLevelClient client = highLevelClient().     final ApplicationPrivilege readTestappPrivilege = new ApplicationPrivilege("testapp", "read", Arrays.asList("action:login", "data:read/*"), null).     final Map<String, Object> metadata = new HashMap<>().     metadata.put("key1", "value1").     final ApplicationPrivilege writeTestappPrivilege = new ApplicationPrivilege("testapp", "write", Arrays.asList("action:login", "data:write/*"), metadata).     final ApplicationPrivilege allTestappPrivilege = new ApplicationPrivilege("testapp", "all", Arrays.asList("action:login", "data:write/*", "manage:*"), null).     final Map<String, Object> metadata2 = new HashMap<>().     metadata2.put("key2", "value2").     final ApplicationPrivilege readTestapp2Privilege = new ApplicationPrivilege("testapp2", "read", Arrays.asList("action:login", "data:read/*"), metadata2).     final ApplicationPrivilege writeTestapp2Privilege = new ApplicationPrivilege("testapp2", "write", Arrays.asList("action:login", "data:write/*"), null).     final ApplicationPrivilege allTestapp2Privilege = new ApplicationPrivilege("testapp2", "all", Arrays.asList("action:login", "data:write/*", "manage:*"), null).     {         List<ApplicationPrivilege> applicationPrivileges = new ArrayList<>().         applicationPrivileges.add(readTestappPrivilege).         applicationPrivileges.add(writeTestappPrivilege).         applicationPrivileges.add(allTestappPrivilege).         applicationPrivileges.add(readTestapp2Privilege).         applicationPrivileges.add(writeTestapp2Privilege).         applicationPrivileges.add(allTestapp2Privilege).         PutPrivilegesRequest putPrivilegesRequest = new PutPrivilegesRequest(applicationPrivileges, RefreshPolicy.IMMEDIATE).         PutPrivilegesResponse putPrivilegesResponse = client.security().putPrivileges(putPrivilegesRequest, RequestOptions.DEFAULT).         assertNotNull(putPrivilegesResponse).         assertThat(putPrivilegesResponse.wasCreated("testapp", "write"), is(true)).         assertThat(putPrivilegesResponse.wasCreated("testapp", "read"), is(true)).         assertThat(putPrivilegesResponse.wasCreated("testapp", "all"), is(true)).         assertThat(putPrivilegesResponse.wasCreated("testapp2", "all"), is(true)).         assertThat(putPrivilegesResponse.wasCreated("testapp2", "write"), is(true)).         assertThat(putPrivilegesResponse.wasCreated("testapp2", "read"), is(true)).     }     {         // tag::get-privileges-request         GetPrivilegesRequest request = new GetPrivilegesRequest("testapp", "write").         // end::get-privileges-request         // tag::get-privileges-execute         GetPrivilegesResponse response = client.security().getPrivileges(request, RequestOptions.DEFAULT).         // end::get-privileges-execute         assertNotNull(response).         assertThat(response.getPrivileges().size(), equalTo(1)).         assertThat(response.getPrivileges().contains(writeTestappPrivilege), equalTo(true)).     }     {         // tag::get-all-application-privileges-request         GetPrivilegesRequest request = GetPrivilegesRequest.getApplicationPrivileges("testapp").         // end::get-all-application-privileges-request         GetPrivilegesResponse response = client.security().getPrivileges(request, RequestOptions.DEFAULT).         assertNotNull(response).         assertThat(response.getPrivileges().size(), equalTo(3)).         final GetPrivilegesResponse exptectedResponse = new GetPrivilegesResponse(Arrays.asList(readTestappPrivilege, writeTestappPrivilege, allTestappPrivilege)).         assertThat(response, equalTo(exptectedResponse)).         // tag::get-privileges-response         Set<ApplicationPrivilege> privileges = response.getPrivileges().         // end::get-privileges-response         for (ApplicationPrivilege privilege : privileges) {             assertThat(privilege.getApplication(), equalTo("testapp")).             if (privilege.getName().equals("read")) {                 assertThat(privilege.getActions(), containsInAnyOrder("action:login", "data:read/*")).                 assertThat(privilege.getMetadata().isEmpty(), equalTo(true)).             } else if (privilege.getName().equals("write")) {                 assertThat(privilege.getActions(), containsInAnyOrder("action:login", "data:write/*")).                 assertThat(privilege.getMetadata().isEmpty(), equalTo(false)).                 assertThat(privilege.getMetadata().get("key1"), equalTo("value1")).             } else if (privilege.getName().equals("all")) {                 assertThat(privilege.getActions(), containsInAnyOrder("action:login", "data:write/*", "manage:*")).                 assertThat(privilege.getMetadata().isEmpty(), equalTo(true)).             }         }     }     {         // tag::get-all-privileges-request         GetPrivilegesRequest request = GetPrivilegesRequest.getAllPrivileges().         // end::get-all-privileges-request         GetPrivilegesResponse response = client.security().getPrivileges(request, RequestOptions.DEFAULT).         assertNotNull(response).         assertThat(response.getPrivileges().size(), equalTo(6)).         final GetPrivilegesResponse exptectedResponse = new GetPrivilegesResponse(Arrays.asList(readTestappPrivilege, writeTestappPrivilege, allTestappPrivilege, readTestapp2Privilege, writeTestapp2Privilege, allTestapp2Privilege)).         assertThat(response, equalTo(exptectedResponse)).     }     {         GetPrivilegesRequest request = new GetPrivilegesRequest("testapp", "read").         // tag::get-privileges-execute-listener         ActionListener<GetPrivilegesResponse> listener = new ActionListener<GetPrivilegesResponse>() {              @Override             public void onResponse(GetPrivilegesResponse getPrivilegesResponse) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::get-privileges-execute-listener         // Avoid unused variable warning         assertNotNull(listener).         // Replace the empty listener by a blocking listener in test         final PlainActionFuture<GetPrivilegesResponse> future = new PlainActionFuture<>().         listener = future.         // tag::get-privileges-execute-async         // <1>         client.security().getPrivilegesAsync(request, RequestOptions.DEFAULT, listener).         // end::get-privileges-execute-async         final GetPrivilegesResponse response = future.get(30, TimeUnit.SECONDS).         assertNotNull(response).         assertThat(response.getPrivileges().size(), equalTo(1)).         assertThat(response.getPrivileges().contains(readTestappPrivilege), equalTo(true)).     } }
false;public;1;4;;@Override public void onResponse(PutPrivilegesResponse response) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;72;;public void testPutPrivileges() throws Exception {     RestHighLevelClient client = highLevelClient().     {         // tag::put-privileges-request         final List<ApplicationPrivilege> privileges = new ArrayList<>().         privileges.add(ApplicationPrivilege.builder().application("app01").privilege("all").actions(Sets.newHashSet("action:login")).metadata(Collections.singletonMap("k1", "v1")).build()).         privileges.add(ApplicationPrivilege.builder().application("app01").privilege("write").actions(Sets.newHashSet("action:write")).build()).         final PutPrivilegesRequest putPrivilegesRequest = new PutPrivilegesRequest(privileges, RefreshPolicy.IMMEDIATE).         // end::put-privileges-request         // tag::put-privileges-execute         final PutPrivilegesResponse putPrivilegesResponse = client.security().putPrivileges(putPrivilegesRequest, RequestOptions.DEFAULT).         // end::put-privileges-execute         final String applicationName = "app01".         final String privilegeName = "all".         // tag::put-privileges-response         // <1>         final boolean status = putPrivilegesResponse.wasCreated(applicationName, privilegeName).         // end::put-privileges-response         assertThat(status, is(true)).     }     {         final List<ApplicationPrivilege> privileges = new ArrayList<>().         privileges.add(ApplicationPrivilege.builder().application("app01").privilege("all").actions(Sets.newHashSet("action:login")).metadata(Collections.singletonMap("k1", "v1")).build()).         final PutPrivilegesRequest putPrivilegesRequest = new PutPrivilegesRequest(privileges, RefreshPolicy.IMMEDIATE).         // tag::put-privileges-execute-listener         ActionListener<PutPrivilegesResponse> listener = new ActionListener<PutPrivilegesResponse>() {              @Override             public void onResponse(PutPrivilegesResponse response) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::put-privileges-execute-listener         // Avoid unused variable warning         assertNotNull(listener).         // Replace the empty listener by a blocking listener in test         final PlainActionFuture<PutPrivilegesResponse> future = new PlainActionFuture<>().         listener = future.         // tag::put-privileges-execute-async         // <1>         client.security().putPrivilegesAsync(putPrivilegesRequest, RequestOptions.DEFAULT, listener).         // end::put-privileges-execute-async         assertNotNull(future.get(30, TimeUnit.SECONDS)).         assertThat(future.get().wasCreated("app01", "all"), is(false)).     } }
false;public;1;4;;@Override public void onResponse(DeletePrivilegesResponse deletePrivilegesResponse) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;79;;public void testDeletePrivilege() throws Exception {     RestHighLevelClient client = highLevelClient().     {         List<ApplicationPrivilege> applicationPrivileges = new ArrayList<>().         applicationPrivileges.add(ApplicationPrivilege.builder().application("testapp").privilege("read").actions("action:login", "data:read/*").build()).         applicationPrivileges.add(ApplicationPrivilege.builder().application("testapp").privilege("write").actions("action:login", "data:write/*").build()).         applicationPrivileges.add(ApplicationPrivilege.builder().application("testapp").privilege("all").actions("action:login", "data:write/*").build()).         PutPrivilegesRequest putPrivilegesRequest = new PutPrivilegesRequest(applicationPrivileges, RefreshPolicy.IMMEDIATE).         PutPrivilegesResponse putPrivilegesResponse = client.security().putPrivileges(putPrivilegesRequest, RequestOptions.DEFAULT).         assertNotNull(putPrivilegesResponse).         assertThat(putPrivilegesResponse.wasCreated("testapp", "write"), is(true)).         assertThat(putPrivilegesResponse.wasCreated("testapp", "read"), is(true)).         assertThat(putPrivilegesResponse.wasCreated("testapp", "all"), is(true)).     }     {         // tag::delete-privileges-request         DeletePrivilegesRequest request = new DeletePrivilegesRequest(// <1>         "testapp", "read", // <2>         "write").         // end::delete-privileges-request         // tag::delete-privileges-execute         DeletePrivilegesResponse response = client.security().deletePrivileges(request, RequestOptions.DEFAULT).         // end::delete-privileges-execute         // tag::delete-privileges-response         // <1>         String application = response.getApplication().         // <2>         boolean found = response.isFound("read").         // end::delete-privileges-response         assertThat(application, equalTo("testapp")).         assertTrue(response.isFound("write")).         assertTrue(found).         // check if deleting the already deleted privileges again will give us a different response         response = client.security().deletePrivileges(request, RequestOptions.DEFAULT).         assertFalse(response.isFound("write")).     }     {         DeletePrivilegesRequest deletePrivilegesRequest = new DeletePrivilegesRequest("testapp", "all").         ActionListener<DeletePrivilegesResponse> listener.         // tag::delete-privileges-execute-listener         listener = new ActionListener<DeletePrivilegesResponse>() {              @Override             public void onResponse(DeletePrivilegesResponse deletePrivilegesResponse) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::delete-privileges-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::delete-privileges-execute-async         // <1>         client.security().deletePrivilegesAsync(deletePrivilegesRequest, RequestOptions.DEFAULT, listener).         // end::delete-privileges-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;1;4;;@Override public void onResponse(CreateApiKeyResponse createApiKeyResponse) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;62;;public void testCreateApiKey() throws Exception {     RestHighLevelClient client = highLevelClient().     List<Role> roles = Collections.singletonList(Role.builder().name("r1").clusterPrivileges(ClusterPrivilegeName.ALL).indicesPrivileges(IndicesPrivileges.builder().indices("ind-x").privileges(IndexPrivilegeName.ALL).build()).build()).     final TimeValue expiration = TimeValue.timeValueHours(24).     final RefreshPolicy refreshPolicy = randomFrom(RefreshPolicy.values()).     {         final String name = randomAlphaOfLength(5).         // tag::create-api-key-request         CreateApiKeyRequest createApiKeyRequest = new CreateApiKeyRequest(name, roles, expiration, refreshPolicy).         // end::create-api-key-request         // tag::create-api-key-execute         CreateApiKeyResponse createApiKeyResponse = client.security().createApiKey(createApiKeyRequest, RequestOptions.DEFAULT).         // end::create-api-key-execute         // tag::create-api-key-response         // <1>         SecureString apiKey = createApiKeyResponse.getKey().         // <2>         Instant apiKeyExpiration = createApiKeyResponse.getExpiration().         // end::create-api-key-response         assertThat(createApiKeyResponse.getName(), equalTo(name)).         assertNotNull(apiKey).         assertNotNull(apiKeyExpiration).     }     {         final String name = randomAlphaOfLength(5).         CreateApiKeyRequest createApiKeyRequest = new CreateApiKeyRequest(name, roles, expiration, refreshPolicy).         ActionListener<CreateApiKeyResponse> listener.         // tag::create-api-key-execute-listener         listener = new ActionListener<CreateApiKeyResponse>() {              @Override             public void onResponse(CreateApiKeyResponse createApiKeyResponse) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::create-api-key-execute-listener         // Avoid unused variable warning         assertNotNull(listener).         // Replace the empty listener by a blocking listener in test         final PlainActionFuture<CreateApiKeyResponse> future = new PlainActionFuture<>().         listener = future.         // tag::create-api-key-execute-async         // <1>         client.security().createApiKeyAsync(createApiKeyRequest, RequestOptions.DEFAULT, listener).         // end::create-api-key-execute-async         assertNotNull(future.get(30, TimeUnit.SECONDS)).         assertThat(future.get().getName(), equalTo(name)).         assertNotNull(future.get().getKey()).         assertNotNull(future.get().getExpiration()).     } }
false;public;1;4;;@Override public void onResponse(GetApiKeyResponse getApiKeyResponse) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;116;;public void testGetApiKey() throws Exception {     RestHighLevelClient client = highLevelClient().     List<Role> roles = Collections.singletonList(Role.builder().name("r1").clusterPrivileges(ClusterPrivilegeName.ALL).indicesPrivileges(IndicesPrivileges.builder().indices("ind-x").privileges(IndexPrivilegeName.ALL).build()).build()).     final TimeValue expiration = TimeValue.timeValueHours(24).     final RefreshPolicy refreshPolicy = randomFrom(RefreshPolicy.values()).     // Create API Keys     CreateApiKeyRequest createApiKeyRequest = new CreateApiKeyRequest("k1", roles, expiration, refreshPolicy).     CreateApiKeyResponse createApiKeyResponse1 = client.security().createApiKey(createApiKeyRequest, RequestOptions.DEFAULT).     assertThat(createApiKeyResponse1.getName(), equalTo("k1")).     assertNotNull(createApiKeyResponse1.getKey()).     final ApiKey expectedApiKeyInfo = new ApiKey(createApiKeyResponse1.getName(), createApiKeyResponse1.getId(), Instant.now(), Instant.now().plusMillis(expiration.getMillis()), false, "test_user", "default_file").     {         // tag::get-api-key-id-request         GetApiKeyRequest getApiKeyRequest = GetApiKeyRequest.usingApiKeyId(createApiKeyResponse1.getId()).         // end::get-api-key-id-request         // tag::get-api-key-execute         GetApiKeyResponse getApiKeyResponse = client.security().getApiKey(getApiKeyRequest, RequestOptions.DEFAULT).         // end::get-api-key-execute         assertThat(getApiKeyResponse.getApiKeyInfos(), is(notNullValue())).         assertThat(getApiKeyResponse.getApiKeyInfos().size(), is(1)).         verifyApiKey(getApiKeyResponse.getApiKeyInfos().get(0), expectedApiKeyInfo).     }     {         // tag::get-api-key-name-request         GetApiKeyRequest getApiKeyRequest = GetApiKeyRequest.usingApiKeyName(createApiKeyResponse1.getName()).         // end::get-api-key-name-request         GetApiKeyResponse getApiKeyResponse = client.security().getApiKey(getApiKeyRequest, RequestOptions.DEFAULT).         assertThat(getApiKeyResponse.getApiKeyInfos(), is(notNullValue())).         assertThat(getApiKeyResponse.getApiKeyInfos().size(), is(1)).         verifyApiKey(getApiKeyResponse.getApiKeyInfos().get(0), expectedApiKeyInfo).     }     {         // tag::get-realm-api-keys-request         GetApiKeyRequest getApiKeyRequest = GetApiKeyRequest.usingRealmName("default_file").         // end::get-realm-api-keys-request         GetApiKeyResponse getApiKeyResponse = client.security().getApiKey(getApiKeyRequest, RequestOptions.DEFAULT).         assertThat(getApiKeyResponse.getApiKeyInfos(), is(notNullValue())).         assertThat(getApiKeyResponse.getApiKeyInfos().size(), is(1)).         verifyApiKey(getApiKeyResponse.getApiKeyInfos().get(0), expectedApiKeyInfo).     }     {         // tag::get-user-api-keys-request         GetApiKeyRequest getApiKeyRequest = GetApiKeyRequest.usingUserName("test_user").         // end::get-user-api-keys-request         GetApiKeyResponse getApiKeyResponse = client.security().getApiKey(getApiKeyRequest, RequestOptions.DEFAULT).         assertThat(getApiKeyResponse.getApiKeyInfos(), is(notNullValue())).         assertThat(getApiKeyResponse.getApiKeyInfos().size(), is(1)).         verifyApiKey(getApiKeyResponse.getApiKeyInfos().get(0), expectedApiKeyInfo).     }     {         // tag::get-user-realm-api-keys-request         GetApiKeyRequest getApiKeyRequest = GetApiKeyRequest.usingRealmAndUserName("default_file", "test_user").         // end::get-user-realm-api-keys-request         // tag::get-api-key-response         GetApiKeyResponse getApiKeyResponse = client.security().getApiKey(getApiKeyRequest, RequestOptions.DEFAULT).         // end::get-api-key-response         assertThat(getApiKeyResponse.getApiKeyInfos(), is(notNullValue())).         assertThat(getApiKeyResponse.getApiKeyInfos().size(), is(1)).         verifyApiKey(getApiKeyResponse.getApiKeyInfos().get(0), expectedApiKeyInfo).     }     {         GetApiKeyRequest getApiKeyRequest = GetApiKeyRequest.usingApiKeyId(createApiKeyResponse1.getId()).         ActionListener<GetApiKeyResponse> listener.         // tag::get-api-key-execute-listener         listener = new ActionListener<GetApiKeyResponse>() {              @Override             public void onResponse(GetApiKeyResponse getApiKeyResponse) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::get-api-key-execute-listener         // Avoid unused variable warning         assertNotNull(listener).         // Replace the empty listener by a blocking listener in test         final PlainActionFuture<GetApiKeyResponse> future = new PlainActionFuture<>().         listener = future.         // tag::get-api-key-execute-async         // <1>         client.security().getApiKeyAsync(getApiKeyRequest, RequestOptions.DEFAULT, listener).         // end::get-api-key-execute-async         final GetApiKeyResponse response = future.get(30, TimeUnit.SECONDS).         assertNotNull(response).         assertThat(response.getApiKeyInfos(), is(notNullValue())).         assertThat(response.getApiKeyInfos().size(), is(1)).         verifyApiKey(response.getApiKeyInfos().get(0), expectedApiKeyInfo).     } }
false;private;2;8;;private void verifyApiKey(final ApiKey actual, final ApiKey expected) {     assertThat(actual.getId(), is(expected.getId())).     assertThat(actual.getName(), is(expected.getName())).     assertThat(actual.getUsername(), is(expected.getUsername())).     assertThat(actual.getRealm(), is(expected.getRealm())).     assertThat(actual.isInvalidated(), is(expected.isInvalidated())).     assertThat(actual.getExpiration(), is(greaterThan(Instant.now()))). }
false;public;1;4;;@Override public void onResponse(InvalidateApiKeyResponse invalidateApiKeyResponse) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;170;;public void testInvalidateApiKey() throws Exception {     RestHighLevelClient client = highLevelClient().     List<Role> roles = Collections.singletonList(Role.builder().name("r1").clusterPrivileges(ClusterPrivilegeName.ALL).indicesPrivileges(IndicesPrivileges.builder().indices("ind-x").privileges(IndexPrivilegeName.ALL).build()).build()).     final TimeValue expiration = TimeValue.timeValueHours(24).     final RefreshPolicy refreshPolicy = randomFrom(RefreshPolicy.values()).     // Create API Keys     CreateApiKeyRequest createApiKeyRequest = new CreateApiKeyRequest("k1", roles, expiration, refreshPolicy).     CreateApiKeyResponse createApiKeyResponse1 = client.security().createApiKey(createApiKeyRequest, RequestOptions.DEFAULT).     assertThat(createApiKeyResponse1.getName(), equalTo("k1")).     assertNotNull(createApiKeyResponse1.getKey()).     {         // tag::invalidate-api-key-id-request         InvalidateApiKeyRequest invalidateApiKeyRequest = InvalidateApiKeyRequest.usingApiKeyId(createApiKeyResponse1.getId()).         // end::invalidate-api-key-id-request         // tag::invalidate-api-key-execute         InvalidateApiKeyResponse invalidateApiKeyResponse = client.security().invalidateApiKey(invalidateApiKeyRequest, RequestOptions.DEFAULT).         // end::invalidate-api-key-execute         final List<ElasticsearchException> errors = invalidateApiKeyResponse.getErrors().         final List<String> invalidatedApiKeyIds = invalidateApiKeyResponse.getInvalidatedApiKeys().         final List<String> previouslyInvalidatedApiKeyIds = invalidateApiKeyResponse.getPreviouslyInvalidatedApiKeys().         assertTrue(errors.isEmpty()).         List<String> expectedInvalidatedApiKeyIds = Arrays.asList(createApiKeyResponse1.getId()).         assertThat(invalidatedApiKeyIds, containsInAnyOrder(expectedInvalidatedApiKeyIds.toArray(Strings.EMPTY_ARRAY))).         assertThat(previouslyInvalidatedApiKeyIds.size(), equalTo(0)).     }     {         createApiKeyRequest = new CreateApiKeyRequest("k2", roles, expiration, refreshPolicy).         CreateApiKeyResponse createApiKeyResponse2 = client.security().createApiKey(createApiKeyRequest, RequestOptions.DEFAULT).         assertThat(createApiKeyResponse2.getName(), equalTo("k2")).         assertNotNull(createApiKeyResponse2.getKey()).         // tag::invalidate-api-key-name-request         InvalidateApiKeyRequest invalidateApiKeyRequest = InvalidateApiKeyRequest.usingApiKeyName(createApiKeyResponse2.getName()).         // end::invalidate-api-key-name-request         InvalidateApiKeyResponse invalidateApiKeyResponse = client.security().invalidateApiKey(invalidateApiKeyRequest, RequestOptions.DEFAULT).         final List<ElasticsearchException> errors = invalidateApiKeyResponse.getErrors().         final List<String> invalidatedApiKeyIds = invalidateApiKeyResponse.getInvalidatedApiKeys().         final List<String> previouslyInvalidatedApiKeyIds = invalidateApiKeyResponse.getPreviouslyInvalidatedApiKeys().         assertTrue(errors.isEmpty()).         List<String> expectedInvalidatedApiKeyIds = Arrays.asList(createApiKeyResponse2.getId()).         assertThat(invalidatedApiKeyIds, containsInAnyOrder(expectedInvalidatedApiKeyIds.toArray(Strings.EMPTY_ARRAY))).         assertThat(previouslyInvalidatedApiKeyIds.size(), equalTo(0)).     }     {         createApiKeyRequest = new CreateApiKeyRequest("k3", roles, expiration, refreshPolicy).         CreateApiKeyResponse createApiKeyResponse3 = client.security().createApiKey(createApiKeyRequest, RequestOptions.DEFAULT).         assertThat(createApiKeyResponse3.getName(), equalTo("k3")).         assertNotNull(createApiKeyResponse3.getKey()).         // tag::invalidate-realm-api-keys-request         InvalidateApiKeyRequest invalidateApiKeyRequest = InvalidateApiKeyRequest.usingRealmName("default_file").         // end::invalidate-realm-api-keys-request         InvalidateApiKeyResponse invalidateApiKeyResponse = client.security().invalidateApiKey(invalidateApiKeyRequest, RequestOptions.DEFAULT).         final List<ElasticsearchException> errors = invalidateApiKeyResponse.getErrors().         final List<String> invalidatedApiKeyIds = invalidateApiKeyResponse.getInvalidatedApiKeys().         final List<String> previouslyInvalidatedApiKeyIds = invalidateApiKeyResponse.getPreviouslyInvalidatedApiKeys().         assertTrue(errors.isEmpty()).         List<String> expectedInvalidatedApiKeyIds = Arrays.asList(createApiKeyResponse3.getId()).         assertThat(invalidatedApiKeyIds, containsInAnyOrder(expectedInvalidatedApiKeyIds.toArray(Strings.EMPTY_ARRAY))).         assertThat(previouslyInvalidatedApiKeyIds.size(), equalTo(0)).     }     {         createApiKeyRequest = new CreateApiKeyRequest("k4", roles, expiration, refreshPolicy).         CreateApiKeyResponse createApiKeyResponse4 = client.security().createApiKey(createApiKeyRequest, RequestOptions.DEFAULT).         assertThat(createApiKeyResponse4.getName(), equalTo("k4")).         assertNotNull(createApiKeyResponse4.getKey()).         // tag::invalidate-user-api-keys-request         InvalidateApiKeyRequest invalidateApiKeyRequest = InvalidateApiKeyRequest.usingUserName("test_user").         // end::invalidate-user-api-keys-request         InvalidateApiKeyResponse invalidateApiKeyResponse = client.security().invalidateApiKey(invalidateApiKeyRequest, RequestOptions.DEFAULT).         final List<ElasticsearchException> errors = invalidateApiKeyResponse.getErrors().         final List<String> invalidatedApiKeyIds = invalidateApiKeyResponse.getInvalidatedApiKeys().         final List<String> previouslyInvalidatedApiKeyIds = invalidateApiKeyResponse.getPreviouslyInvalidatedApiKeys().         assertTrue(errors.isEmpty()).         List<String> expectedInvalidatedApiKeyIds = Arrays.asList(createApiKeyResponse4.getId()).         assertThat(invalidatedApiKeyIds, containsInAnyOrder(expectedInvalidatedApiKeyIds.toArray(Strings.EMPTY_ARRAY))).         assertThat(previouslyInvalidatedApiKeyIds.size(), equalTo(0)).     }     {         createApiKeyRequest = new CreateApiKeyRequest("k5", roles, expiration, refreshPolicy).         CreateApiKeyResponse createApiKeyResponse5 = client.security().createApiKey(createApiKeyRequest, RequestOptions.DEFAULT).         assertThat(createApiKeyResponse5.getName(), equalTo("k5")).         assertNotNull(createApiKeyResponse5.getKey()).         // tag::invalidate-user-realm-api-keys-request         InvalidateApiKeyRequest invalidateApiKeyRequest = InvalidateApiKeyRequest.usingRealmAndUserName("default_file", "test_user").         // end::invalidate-user-realm-api-keys-request         // tag::invalidate-api-key-response         InvalidateApiKeyResponse invalidateApiKeyResponse = client.security().invalidateApiKey(invalidateApiKeyRequest, RequestOptions.DEFAULT).         // end::invalidate-api-key-response         final List<ElasticsearchException> errors = invalidateApiKeyResponse.getErrors().         final List<String> invalidatedApiKeyIds = invalidateApiKeyResponse.getInvalidatedApiKeys().         final List<String> previouslyInvalidatedApiKeyIds = invalidateApiKeyResponse.getPreviouslyInvalidatedApiKeys().         assertTrue(errors.isEmpty()).         List<String> expectedInvalidatedApiKeyIds = Arrays.asList(createApiKeyResponse5.getId()).         assertThat(invalidatedApiKeyIds, containsInAnyOrder(expectedInvalidatedApiKeyIds.toArray(Strings.EMPTY_ARRAY))).         assertThat(previouslyInvalidatedApiKeyIds.size(), equalTo(0)).     }     {         createApiKeyRequest = new CreateApiKeyRequest("k6", roles, expiration, refreshPolicy).         CreateApiKeyResponse createApiKeyResponse6 = client.security().createApiKey(createApiKeyRequest, RequestOptions.DEFAULT).         assertThat(createApiKeyResponse6.getName(), equalTo("k6")).         assertNotNull(createApiKeyResponse6.getKey()).         InvalidateApiKeyRequest invalidateApiKeyRequest = InvalidateApiKeyRequest.usingApiKeyId(createApiKeyResponse6.getId()).         ActionListener<InvalidateApiKeyResponse> listener.         // tag::invalidate-api-key-execute-listener         listener = new ActionListener<InvalidateApiKeyResponse>() {              @Override             public void onResponse(InvalidateApiKeyResponse invalidateApiKeyResponse) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::invalidate-api-key-execute-listener         // Avoid unused variable warning         assertNotNull(listener).         // Replace the empty listener by a blocking listener in test         final PlainActionFuture<InvalidateApiKeyResponse> future = new PlainActionFuture<>().         listener = future.         // tag::invalidate-api-key-execute-async         // <1>         client.security().invalidateApiKeyAsync(invalidateApiKeyRequest, RequestOptions.DEFAULT, listener).         // end::invalidate-api-key-execute-async         final InvalidateApiKeyResponse response = future.get(30, TimeUnit.SECONDS).         assertNotNull(response).         final List<String> invalidatedApiKeyIds = response.getInvalidatedApiKeys().         List<String> expectedInvalidatedApiKeyIds = Arrays.asList(createApiKeyResponse6.getId()).         assertTrue(response.getErrors().isEmpty()).         assertThat(invalidatedApiKeyIds, containsInAnyOrder(expectedInvalidatedApiKeyIds.toArray(Strings.EMPTY_ARRAY))).         assertThat(response.getPreviouslyInvalidatedApiKeys().size(), equalTo(0)).     } }
