commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     phaseName = randomAlphaOfLength(20). }
false;protected;0;4;;@Override protected Phase createTestInstance() {     return randomPhase(phaseName). }
false;static;1;11;;static Phase randomPhase(String phaseName) {     TimeValue after = null.     if (randomBoolean()) {         after = TimeValue.parseTimeValue(randomTimeValue(0, 1000000000, "s", "m", "h", "d"), "test_after").     }     Map<String, LifecycleAction> actions = Collections.emptyMap().     if (randomBoolean()) {         actions = Collections.singletonMap(DeleteAction.NAME, new DeleteAction()).     }     return new Phase(phaseName, after, actions). }
false;protected;1;4;;@Override protected Phase doParseInstance(XContentParser parser) {     return Phase.parse(parser, phaseName). }
false;protected;0;5;;@Override protected Predicate<String> getRandomFieldsExcludeFilter() {     // actions are plucked from the named registry, and it fails if the action is not in the named registry     return (field) -> field.equals("actions"). }
false;protected;0;6;;@Override protected NamedXContentRegistry xContentRegistry() {     List<NamedXContentRegistry.Entry> entries = new ArrayList<>(ClusterModule.getNamedXWriteables()).     entries.add(new NamedXContentRegistry.Entry(LifecycleAction.class, new ParseField(DeleteAction.NAME), DeleteAction::parse)).     return new NamedXContentRegistry(entries). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return true. }
false;public;0;4;;public void testDefaultAfter() {     Phase phase = new Phase(randomAlphaOfLength(20), null, Collections.emptyMap()).     assertEquals(TimeValue.ZERO, phase.getMinimumAge()). }
