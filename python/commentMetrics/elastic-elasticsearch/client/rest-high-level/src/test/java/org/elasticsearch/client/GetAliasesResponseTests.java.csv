commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected GetAliasesResponse createTestInstance() {     RestStatus status = randomFrom(RestStatus.OK, RestStatus.NOT_FOUND).     String errorMessage = RestStatus.OK == status ? null : randomAlphaOfLengthBetween(5, 10).     return new GetAliasesResponse(status, errorMessage, createIndicesAliasesMap(0, 5)). }
false;private,static;2;14;;private static Map<String, Set<AliasMetaData>> createIndicesAliasesMap(int min, int max) {     Map<String, Set<AliasMetaData>> map = new HashMap<>().     int indicesNum = randomIntBetween(min, max).     for (int i = 0. i < indicesNum. i++) {         String index = randomAlphaOfLength(5).         Set<AliasMetaData> aliasMetaData = new HashSet<>().         int aliasesNum = randomIntBetween(0, 3).         for (int alias = 0. alias < aliasesNum. alias++) {             aliasMetaData.add(createAliasMetaData()).         }         map.put(index, aliasMetaData).     }     return map. }
false;public,static;0;16;;public static AliasMetaData createAliasMetaData() {     AliasMetaData.Builder builder = AliasMetaData.builder(randomAlphaOfLengthBetween(3, 10)).     if (randomBoolean()) {         builder.routing(randomAlphaOfLengthBetween(3, 10)).     }     if (randomBoolean()) {         builder.searchRouting(randomAlphaOfLengthBetween(3, 10)).     }     if (randomBoolean()) {         builder.indexRouting(randomAlphaOfLengthBetween(3, 10)).     }     if (randomBoolean()) {         builder.filter("{\"term\":{\"year\":2016}}").     }     return builder.build(). }
false;protected;1;4;;@Override protected GetAliasesResponse doParseInstance(XContentParser parser) throws IOException {     return GetAliasesResponse.fromXContent(parser). }
false;protected;0;6;;@Override protected Predicate<String> getRandomFieldsExcludeFilter() {     return p -> // do not add elements at the top-level as any element at this level is parsed as a new index     p.equals("") || // do not add new alias     p.endsWith(".aliases") || // do not insert random data into AliasMetaData#filter     p.contains(".filter"). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return true. }
false;protected;2;8;;@Override protected void assertEqualInstances(GetAliasesResponse expectedInstance, GetAliasesResponse newInstance) {     assertEquals(expectedInstance.getAliases(), newInstance.getAliases()).     assertEquals(expectedInstance.status(), newInstance.status()).     assertEquals(expectedInstance.getError(), newInstance.getError()).     assertNull(expectedInstance.getException()).     assertNull(newInstance.getException()). }
false;public;0;32;;public void testFromXContentWithElasticsearchException() throws IOException {     String xContent = "{" + "  \"error\": {" + "    \"root_cause\": [" + "      {" + "        \"type\": \"index_not_found_exception\"," + "        \"reason\": \"no such index [index]\"," + "        \"resource.type\": \"index_or_alias\"," + "        \"resource.id\": \"index\"," + "        \"index_uuid\": \"_na_\"," + "        \"index\": \"index\"" + "      }" + "    ]," + "    \"type\": \"index_not_found_exception\"," + "    \"reason\": \"no such index [index]\"," + "    \"resource.type\": \"index_or_alias\"," + "    \"resource.id\": \"index\"," + "    \"index_uuid\": \"_na_\"," + "    \"index\": \"index\"" + "  }," + "  \"status\": 404" + "}".     try (XContentParser parser = createParser(JsonXContent.jsonXContent, xContent)) {         GetAliasesResponse getAliasesResponse = GetAliasesResponse.fromXContent(parser).         assertThat(getAliasesResponse.getError(), nullValue()).         assertThat(getAliasesResponse.status(), equalTo(RestStatus.NOT_FOUND)).         assertThat(getAliasesResponse.getException().getMessage(), equalTo("Elasticsearch exception [type=index_not_found_exception, reason=no such index [index]]")).     } }
false;public;0;13;;public void testFromXContentWithNoAliasFound() throws IOException {     String xContent = "{" + "  \"error\": \"alias [aa] missing\"," + "  \"status\": 404" + "}".     try (XContentParser parser = createParser(JsonXContent.jsonXContent, xContent)) {         GetAliasesResponse getAliasesResponse = GetAliasesResponse.fromXContent(parser).         assertThat(getAliasesResponse.status(), equalTo(RestStatus.NOT_FOUND)).         assertThat(getAliasesResponse.getError(), equalTo("alias [aa] missing")).         assertThat(getAliasesResponse.getException(), nullValue()).     } }
false;public;0;23;;public void testFromXContentWithMissingAndFoundAlias() throws IOException {     String xContent = "{" + "  \"error\": \"alias [something] missing\"," + "  \"status\": 404," + "  \"index\": {" + "    \"aliases\": {" + "      \"alias\": {}" + "    }" + "  }" + "}".     final String index = "index".     try (XContentParser parser = createParser(JsonXContent.jsonXContent, xContent)) {         GetAliasesResponse response = GetAliasesResponse.fromXContent(parser).         assertThat(response.status(), equalTo(RestStatus.NOT_FOUND)).         assertThat(response.getError(), equalTo("alias [something] missing")).         assertThat(response.getAliases().size(), equalTo(1)).         assertThat(response.getAliases().get(index).size(), equalTo(1)).         AliasMetaData aliasMetaData = response.getAliases().get(index).iterator().next().         assertThat(aliasMetaData.alias(), equalTo("alias")).         assertThat(response.getException(), nullValue()).     } }
