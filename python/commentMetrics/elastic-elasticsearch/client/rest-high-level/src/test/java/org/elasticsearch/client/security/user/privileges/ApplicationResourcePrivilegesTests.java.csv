commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;5;;public static ApplicationResourcePrivileges createNewRandom(String name) {     return new ApplicationResourcePrivileges(name, Arrays.asList(randomArray(1, 8, size -> new String[size], () -> randomAlphaOfLengthBetween(1, 8))), Arrays.asList(randomArray(1, 8, size -> new String[size], () -> randomAlphaOfLengthBetween(1, 8)))). }
false;protected;0;4;;@Override protected ApplicationResourcePrivileges createTestInstance() {     return createNewRandom(randomAlphaOfLengthBetween(1, 8)). }
false;protected;1;4;;@Override protected ApplicationResourcePrivileges doParseInstance(XContentParser parser) throws IOException {     return ApplicationResourcePrivileges.fromXContent(parser). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return false. }
false;public;0;8;;public void testEmptyApplicationName() {     final String emptyApplicationName = randomBoolean() ? "" : null.     final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new ApplicationResourcePrivileges(emptyApplicationName, Arrays.asList(randomArray(1, 8, size -> new String[size], () -> randomAlphaOfLengthBetween(1, 8))), Arrays.asList(randomArray(1, 8, size -> new String[size], () -> randomAlphaOfLengthBetween(1, 8))))).     assertThat(e.getMessage(), is("application privileges must have an application name")). }
false;public;0;8;;public void testEmptyPrivileges() {     final Collection<String> emptyPrivileges = randomBoolean() ? Collections.emptyList() : null.     final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new ApplicationResourcePrivileges(randomAlphaOfLengthBetween(1, 8), emptyPrivileges, Arrays.asList(randomArray(1, 8, size -> new String[size], () -> randomAlphaOfLengthBetween(1, 8))))).     assertThat(e.getMessage(), is("application privileges must define at least one privilege")). }
false;public;0;8;;public void testEmptyResources() {     final Collection<String> emptyResources = randomBoolean() ? Collections.emptyList() : null.     final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new ApplicationResourcePrivileges(randomAlphaOfLengthBetween(1, 8), Arrays.asList(randomArray(1, 8, size -> new String[size], () -> randomAlphaOfLengthBetween(1, 8))), emptyResources)).     assertThat(e.getMessage(), is("application privileges must refer to at least one resource")). }
