commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;public void testFromXContent() throws IOException {     xContentTester(this::createParser, GetFieldMappingsResponseTests::createTestInstance, GetFieldMappingsResponseTests::toXContent, GetFieldMappingsResponse::fromXContent).supportsUnknownFields(true).randomFieldsExcludeFilter(getRandomFieldsExcludeFilter()).test(). }
false;private;0;6;;private Predicate<String> getRandomFieldsExcludeFilter() {     // otherwise random field could be evaluated as index name or type name     return s -> false == (s.matches("(?<index>[^.]+)") || s.matches("(?<index>[^.]+)\\.mappings\\.(?<field>[^.]+)")). }
false;private,static;0;19;;private static GetFieldMappingsResponse createTestInstance() {     Map<String, Map<String, FieldMappingMetaData>> mappings = new HashMap<>().     // if mappings is empty, means that fields are not found     if (randomBoolean()) {         int indices = randomInt(10).         for (int i = 0. i < indices. i++) {             Map<String, FieldMappingMetaData> fieldMappings = new HashMap<>().             int fields = randomInt(10).             for (int k = 0. k < fields. k++) {                 final String mapping = randomBoolean() ? "{\"type\":\"string\"}" : "{\"type\":\"keyword\"}".                 final String fieldName = randomAlphaOfLength(8).                 FieldMappingMetaData metaData = new FieldMappingMetaData(fieldName, new BytesArray(mapping)).                 fieldMappings.put(fieldName, metaData).             }             mappings.put(randomAlphaOfLength(8), fieldMappings).         }     }     return new GetFieldMappingsResponse(mappings). }
true;private,static;2;16;// As the client class GetFieldMappingsResponse doesn't have toXContent method, adding this method here only for the test ;// As the client class GetFieldMappingsResponse doesn't have toXContent method, adding this method here only for the test private static void toXContent(GetFieldMappingsResponse response, XContentBuilder builder) throws IOException {     builder.startObject().     for (Map.Entry<String, Map<String, FieldMappingMetaData>> indexEntry : response.mappings().entrySet()) {         builder.startObject(indexEntry.getKey()).         builder.startObject("mappings").         for (Map.Entry<String, FieldMappingMetaData> fieldEntry : indexEntry.getValue().entrySet()) {             builder.startObject(fieldEntry.getKey()).             builder.field("full_name", fieldEntry.getValue().fullName()).             builder.field("mapping", fieldEntry.getValue().sourceAsMap()).             builder.endObject().         }         builder.endObject().         builder.endObject().     }     builder.endObject(). }
