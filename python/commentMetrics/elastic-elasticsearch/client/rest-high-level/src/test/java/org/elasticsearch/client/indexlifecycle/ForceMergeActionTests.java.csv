commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected ForceMergeAction doParseInstance(XContentParser parser) {     return ForceMergeAction.parse(parser). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return true. }
false;protected;0;4;;@Override protected ForceMergeAction createTestInstance() {     return randomInstance(). }
false;static;0;3;;static ForceMergeAction randomInstance() {     return new ForceMergeAction(randomIntBetween(1, 100)). }
false;public;0;7;;public void testMissingMaxNumSegments() throws IOException {     BytesReference emptyObject = BytesReference.bytes(JsonXContent.contentBuilder().startObject().endObject()).     XContentParser parser = XContentHelper.createParser(null, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, emptyObject, XContentType.JSON).     Exception e = expectThrows(IllegalArgumentException.class, () -> ForceMergeAction.parse(parser)).     assertThat(e.getMessage(), equalTo("Required [max_num_segments]")). }
false;public;0;4;;public void testInvalidNegativeSegmentNumber() {     Exception r = expectThrows(IllegalArgumentException.class, () -> new ForceMergeAction(randomIntBetween(-10, 0))).     assertThat(r.getMessage(), equalTo("[max_num_segments] must be a positive integer")). }
