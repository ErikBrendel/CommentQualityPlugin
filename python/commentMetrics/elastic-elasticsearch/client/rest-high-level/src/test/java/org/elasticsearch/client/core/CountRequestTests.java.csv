commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;public void testIllegalArguments() {     CountRequest countRequest = new CountRequest().     assertNotNull(countRequest.indices()).     assertNotNull(countRequest.indicesOptions()).     assertNotNull(countRequest.types()).     NullPointerException e = expectThrows(NullPointerException.class, () -> countRequest.indices((String[]) null)).     assertEquals("indices must not be null", e.getMessage()).     e = expectThrows(NullPointerException.class, () -> countRequest.indices((String) null)).     assertEquals("index must not be null", e.getMessage()).     e = expectThrows(NullPointerException.class, () -> countRequest.indicesOptions(null)).     assertEquals("indicesOptions must not be null", e.getMessage()).     e = expectThrows(NullPointerException.class, () -> countRequest.types((String[]) null)).     assertEquals("types must not be null", e.getMessage()).     e = expectThrows(NullPointerException.class, () -> countRequest.types((String) null)).     assertEquals("type must not be null", e.getMessage()).     e = expectThrows(NullPointerException.class, () -> countRequest.source(null)).     assertEquals("source must not be null", e.getMessage()). }
false;public;0;3;;public void testEqualsAndHashcode() {     checkEqualsAndHashCode(createCountRequest(), CountRequestTests::copyRequest, this::mutate). }
false;private;0;5;;private CountRequest createCountRequest() {     CountRequest countRequest = new CountRequest("index").     countRequest.source(new SearchSourceBuilder().query(new MatchQueryBuilder("num", 10))).     return countRequest. }
false;private;1;12;;private CountRequest mutate(CountRequest countRequest) {     CountRequest mutation = copyRequest(countRequest).     List<Runnable> mutators = new ArrayList<>().     mutators.add(() -> mutation.indices(ArrayUtils.concat(countRequest.indices(), new String[] { randomAlphaOfLength(10) }))).     mutators.add(() -> mutation.indicesOptions(randomValueOtherThan(countRequest.indicesOptions(), () -> IndicesOptions.fromOptions(randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean())))).     mutators.add(() -> mutation.types(ArrayUtils.concat(countRequest.types(), new String[] { randomAlphaOfLength(10) }))).     mutators.add(() -> mutation.preference(randomValueOtherThan(countRequest.preference(), () -> randomAlphaOfLengthBetween(3, 10)))).     mutators.add(() -> mutation.routing(randomValueOtherThan(countRequest.routing(), () -> randomAlphaOfLengthBetween(3, 10)))).     randomFrom(mutators).run().     return mutation. }
false;private,static;1;12;;private static CountRequest copyRequest(CountRequest countRequest) {     CountRequest result = new CountRequest().     result.indices(countRequest.indices()).     result.indicesOptions(countRequest.indicesOptions()).     result.types(countRequest.types()).     result.routing(countRequest.routing()).     result.preference(countRequest.preference()).     if (countRequest.source() != null) {         result.source(countRequest.source()).     }     return result. }
