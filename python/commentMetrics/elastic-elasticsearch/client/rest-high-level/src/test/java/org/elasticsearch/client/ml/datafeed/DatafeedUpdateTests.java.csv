commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;53;;public static DatafeedUpdate createRandom() {     DatafeedUpdate.Builder builder = new DatafeedUpdate.Builder(DatafeedConfigTests.randomValidDatafeedId()).     if (randomBoolean()) {         builder.setJobId(randomAlphaOfLength(10)).     }     if (randomBoolean()) {         builder.setQueryDelay(TimeValue.timeValueMillis(randomIntBetween(1, Integer.MAX_VALUE))).     }     if (randomBoolean()) {         builder.setFrequency(TimeValue.timeValueSeconds(randomIntBetween(1, Integer.MAX_VALUE))).     }     if (randomBoolean()) {         builder.setIndices(DatafeedConfigTests.randomStringList(1, 10)).     }     if (randomBoolean()) {         try {             builder.setQuery(QueryBuilders.termQuery(randomAlphaOfLength(10), randomAlphaOfLength(10))).         } catch (IOException e) {             throw new RuntimeException("Failed to serialize query", e).         }     }     if (randomBoolean()) {         int scriptsSize = randomInt(3).         List<SearchSourceBuilder.ScriptField> scriptFields = new ArrayList<>(scriptsSize).         for (int scriptIndex = 0. scriptIndex < scriptsSize. scriptIndex++) {             scriptFields.add(new SearchSourceBuilder.ScriptField(randomAlphaOfLength(10), mockScript(randomAlphaOfLength(10)), randomBoolean())).         }         builder.setScriptFields(scriptFields).     }     if (randomBoolean()) {         // can only test with a single agg as the xcontent order gets randomized by test base class and then         // the actual xcontent isn't the same and test fail.         // Testing with a single agg is ok as we don't have special list xcontent logic         AggregatorFactories.Builder aggs = new AggregatorFactories.Builder().         aggs.addAggregator(AggregationBuilders.avg(randomAlphaOfLength(10)).field(randomAlphaOfLength(10))).         try {             builder.setAggregations(aggs).         } catch (IOException e) {             throw new RuntimeException("Failed to serialize aggs", e).         }     }     if (randomBoolean()) {         builder.setScrollSize(randomIntBetween(0, Integer.MAX_VALUE)).     }     if (randomBoolean()) {         builder.setChunkingConfig(ChunkingConfigTests.createRandomizedChunk()).     }     if (randomBoolean()) {         builder.setDelayedDataCheckConfig(DelayedDataCheckConfigTests.createRandomizedConfig()).     }     return builder.build(). }
false;protected;0;4;;@Override protected DatafeedUpdate createTestInstance() {     return createRandom(). }
false;protected;1;4;;@Override protected DatafeedUpdate doParseInstance(XContentParser parser) {     return DatafeedUpdate.PARSER.apply(parser, null).build(). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return false. }
