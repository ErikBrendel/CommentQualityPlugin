commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public void testDeleteRoleMappingRequest() {     final String name = randomAlphaOfLength(5).     final RefreshPolicy refreshPolicy = randomFrom(RefreshPolicy.values()).     final DeleteRoleMappingRequest deleteRoleMappingRequest = new DeleteRoleMappingRequest(name, refreshPolicy).     assertThat(deleteRoleMappingRequest.getName(), equalTo(name)).     assertThat(deleteRoleMappingRequest.getRefreshPolicy(), equalTo(refreshPolicy)). }
false;public;0;5;;public void testDeleteRoleMappingRequestThrowsExceptionForNullOrEmptyName() {     final String name = randomBoolean() ? null : "".     final IllegalArgumentException ile = expectThrows(IllegalArgumentException.class, () -> new DeleteRoleMappingRequest(name, null)).     assertThat(ile.getMessage(), equalTo("role-mapping name is required")). }
false;public;0;15;;public void testEqualsHashCode() {     final String name = randomAlphaOfLength(5).     final RefreshPolicy refreshPolicy = randomFrom(RefreshPolicy.values()).     final DeleteRoleMappingRequest deleteRoleMappingRequest = new DeleteRoleMappingRequest(name, refreshPolicy).     assertNotNull(deleteRoleMappingRequest).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(deleteRoleMappingRequest, (original) -> {         return new DeleteRoleMappingRequest(original.getName(), original.getRefreshPolicy()).     }).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(deleteRoleMappingRequest, (original) -> {         return new DeleteRoleMappingRequest(original.getName(), original.getRefreshPolicy()).     }, DeleteRoleMappingRequestTests::mutateTestItem). }
false;private,static;1;9;;private static DeleteRoleMappingRequest mutateTestItem(DeleteRoleMappingRequest original) {     if (randomBoolean()) {         return new DeleteRoleMappingRequest(randomAlphaOfLength(5), original.getRefreshPolicy()).     } else {         List<RefreshPolicy> values = Arrays.stream(RefreshPolicy.values()).filter(rp -> rp != original.getRefreshPolicy()).collect(Collectors.toList()).         return new DeleteRoleMappingRequest(original.getName(), randomFrom(values)).     } }
