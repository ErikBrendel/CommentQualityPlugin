commented;modifiers;parameterAmount;loc;comment;code
false;public;0;85;;public void testClusterPutSettings() throws IOException {     RestHighLevelClient client = highLevelClient().     // tag::put-settings-request     ClusterUpdateSettingsRequest request = new ClusterUpdateSettingsRequest().     // end::put-settings-request     // tag::put-settings-create-settings     String transientSettingKey = RecoverySettings.INDICES_RECOVERY_MAX_BYTES_PER_SEC_SETTING.getKey().     int transientSettingValue = 10.     Settings transientSettings = Settings.builder().put(transientSettingKey, transientSettingValue, ByteSizeUnit.BYTES).build().     String persistentSettingKey = EnableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ENABLE_SETTING.getKey().     String persistentSettingValue = EnableAllocationDecider.Allocation.NONE.name().     Settings persistentSettings = Settings.builder().put(persistentSettingKey, persistentSettingValue).build().     // end::put-settings-create-settings     // tag::put-settings-request-cluster-settings     // <1>     request.transientSettings(transientSettings).     // <2>     request.persistentSettings(persistentSettings).     // end::put-settings-request-cluster-settings     {         // tag::put-settings-settings-builder         Settings.Builder transientSettingsBuilder = Settings.builder().put(transientSettingKey, transientSettingValue, ByteSizeUnit.BYTES).         // <1>         request.transientSettings(transientSettingsBuilder).     // end::put-settings-settings-builder     }     {         // tag::put-settings-settings-map         Map<String, Object> map = new HashMap<>().         map.put(transientSettingKey, transientSettingValue + ByteSizeUnit.BYTES.getSuffix()).         // <1>         request.transientSettings(map).     // end::put-settings-settings-map     }     {         // tag::put-settings-settings-source         request.transientSettings("{\"indices.recovery.max_bytes_per_sec\": \"10b\"}", // <1>         XContentType.JSON).     // end::put-settings-settings-source     }     // tag::put-settings-request-timeout     // <1>     request.timeout(TimeValue.timeValueMinutes(2)).     // <2>     request.timeout("2m").     // end::put-settings-request-timeout     // tag::put-settings-request-masterTimeout     // <1>     request.masterNodeTimeout(TimeValue.timeValueMinutes(1)).     // <2>     request.masterNodeTimeout("1m").     // end::put-settings-request-masterTimeout     // tag::put-settings-execute     ClusterUpdateSettingsResponse response = client.cluster().putSettings(request, RequestOptions.DEFAULT).     // end::put-settings-execute     // tag::put-settings-response     // <1>     boolean acknowledged = response.isAcknowledged().     // <2>     Settings transientSettingsResponse = response.getTransientSettings().     // <3>     Settings persistentSettingsResponse = response.getPersistentSettings().     // end::put-settings-response     assertTrue(acknowledged).     assertThat(transientSettingsResponse.get(transientSettingKey), equalTo(transientSettingValue + ByteSizeUnit.BYTES.getSuffix())).     assertThat(persistentSettingsResponse.get(persistentSettingKey), equalTo(persistentSettingValue)).     // tag::put-settings-request-reset-transient     // <1>     request.transientSettings(Settings.builder().putNull(transientSettingKey).build()).     // tag::put-settings-request-reset-transient     request.persistentSettings(Settings.builder().putNull(persistentSettingKey)).     ClusterUpdateSettingsResponse resetResponse = client.cluster().putSettings(request, RequestOptions.DEFAULT).     assertTrue(resetResponse.isAcknowledged()). }
false;public;1;4;;@Override public void onResponse(ClusterUpdateSettingsResponse response) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;31;;public void testClusterUpdateSettingsAsync() throws Exception {     RestHighLevelClient client = highLevelClient().     {         ClusterUpdateSettingsRequest request = new ClusterUpdateSettingsRequest().         // tag::put-settings-execute-listener         ActionListener<ClusterUpdateSettingsResponse> listener = new ActionListener<ClusterUpdateSettingsResponse>() {              @Override             public void onResponse(ClusterUpdateSettingsResponse response) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::put-settings-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::put-settings-execute-async         // <1>         client.cluster().putSettingsAsync(request, RequestOptions.DEFAULT, listener).         // end::put-settings-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;0;34;;@SuppressWarnings("unused") public void testClusterGetSettings() throws IOException {     RestHighLevelClient client = highLevelClient().     // tag::get-settings-request     ClusterGetSettingsRequest request = new ClusterGetSettingsRequest().     // end::get-settings-request     // tag::get-settings-request-includeDefaults     // <1>     request.includeDefaults(true).     // end::get-settings-request-includeDefaults     // tag::get-settings-request-local     // <1>     request.local(true).     // end::get-settings-request-local     // tag::get-settings-request-masterTimeout     // <1>     request.masterNodeTimeout(TimeValue.timeValueMinutes(1)).     // <2>     request.masterNodeTimeout("1m").     // end::get-settings-request-masterTimeout     // tag::get-settings-execute     // <1>     ClusterGetSettingsResponse response = client.cluster().getSettings(request, RequestOptions.DEFAULT).     // end::get-settings-execute     // tag::get-settings-response     // <1>     Settings persistentSettings = response.getPersistentSettings().     // <2>     Settings transientSettings = response.getTransientSettings().     // <3>     Settings defaultSettings = response.getDefaultSettings().     // <4>     String settingValue = response.getSetting("cluster.routing.allocation.enable").     // end::get-settings-response     assertThat(defaultSettings.size(), greaterThan(0)). }
false;public;1;4;;@Override public void onResponse(ClusterGetSettingsResponse response) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;30;;public void testClusterGetSettingsAsync() throws InterruptedException {     RestHighLevelClient client = highLevelClient().     ClusterGetSettingsRequest request = new ClusterGetSettingsRequest().     // tag::get-settings-execute-listener     ActionListener<ClusterGetSettingsResponse> listener = new ActionListener<ClusterGetSettingsResponse>() {          @Override         public void onResponse(ClusterGetSettingsResponse response) {         // <1>         }          @Override         public void onFailure(Exception e) {         // <2>         }     }.     // end::get-settings-execute-listener     // Replace the empty listener by a blocking listener in test     final CountDownLatch latch = new CountDownLatch(1).     listener = new LatchedActionListener<>(listener, latch).     // tag::get-settings-execute-async     // <1>     client.cluster().getSettingsAsync(request, RequestOptions.DEFAULT, listener).     // end::get-settings-execute-async     assertTrue(latch.await(30L, TimeUnit.SECONDS)). }
false;public;0;139;;@SuppressWarnings("unused") public void testClusterHealth() throws IOException {     RestHighLevelClient client = highLevelClient().     client.indices().create(new CreateIndexRequest("index"), RequestOptions.DEFAULT).     {         // tag::health-request         ClusterHealthRequest request = new ClusterHealthRequest().     // end::health-request     }     {         // tag::health-request-indices-ctr         ClusterHealthRequest request = new ClusterHealthRequest("index1", "index2").     // end::health-request-indices-ctr     }     {         // tag::health-request-indices-setter         ClusterHealthRequest request = new ClusterHealthRequest().         request.indices("index1", "index2").     // end::health-request-indices-setter     }     ClusterHealthRequest request = new ClusterHealthRequest().     // tag::health-request-timeout     // <1>     request.timeout(TimeValue.timeValueSeconds(50)).     // <2>     request.timeout("50s").     // end::health-request-timeout     // tag::health-request-master-timeout     // <1>     request.masterNodeTimeout(TimeValue.timeValueSeconds(20)).     // <2>     request.masterNodeTimeout("20s").     // end::health-request-master-timeout     // tag::health-request-wait-status     // <1>     request.waitForStatus(ClusterHealthStatus.YELLOW).     // <2>     request.waitForYellowStatus().     // end::health-request-wait-status     // tag::health-request-wait-events     // <1>     request.waitForEvents(Priority.NORMAL).     // end::health-request-wait-events     // tag::health-request-level     // <1>     request.level(ClusterHealthRequest.Level.SHARDS).     // end::health-request-level     // tag::health-request-wait-relocation     // <1>     request.waitForNoRelocatingShards(true).     // end::health-request-wait-relocation     // tag::health-request-wait-initializing     // <1>     request.waitForNoInitializingShards(true).     // end::health-request-wait-initializing     // tag::health-request-wait-nodes     // <1>     request.waitForNodes("2").     // <2>     request.waitForNodes(">=2").     // <3>     request.waitForNodes("le(2)").     // end::health-request-wait-nodes     // tag::health-request-wait-active     // <1>     request.waitForActiveShards(ActiveShardCount.ALL).     // <2>     request.waitForActiveShards(1).     // end::health-request-wait-active     // tag::health-request-local     // <1>     request.local(true).     // end::health-request-local     // tag::health-execute     ClusterHealthResponse response = client.cluster().health(request, RequestOptions.DEFAULT).     // end::health-execute     assertThat(response.isTimedOut(), equalTo(false)).     assertThat(response.status(), equalTo(RestStatus.OK)).     assertThat(response.getStatus(), equalTo(ClusterHealthStatus.YELLOW)).     assertThat(response, notNullValue()).     // tag::health-response-general     // <1>     String clusterName = response.getClusterName().     // <2>     ClusterHealthStatus status = response.getStatus().     // end::health-response-general     // tag::health-response-request-status     // <1>     boolean timedOut = response.isTimedOut().     // <2>     RestStatus restStatus = response.status().     // end::health-response-request-status     // tag::health-response-nodes     // <1>     int numberOfNodes = response.getNumberOfNodes().     // <2>     int numberOfDataNodes = response.getNumberOfDataNodes().     // end::health-response-nodes     {         // tag::health-response-shards         // <1>         int activeShards = response.getActiveShards().         // <2>         int activePrimaryShards = response.getActivePrimaryShards().         // <3>         int relocatingShards = response.getRelocatingShards().         // <4>         int initializingShards = response.getInitializingShards().         // <5>         int unassignedShards = response.getUnassignedShards().         // <6>         int delayedUnassignedShards = response.getDelayedUnassignedShards().         // <7>         double activeShardsPercent = response.getActiveShardsPercent().     // end::health-response-shards     }     // tag::health-response-task     // <1>     TimeValue taskMaxWaitingTime = response.getTaskMaxWaitingTime().     // <2>     int numberOfPendingTasks = response.getNumberOfPendingTasks().     // <3>     int numberOfInFlightFetch = response.getNumberOfInFlightFetch().     // end::health-response-task     // tag::health-response-indices     // <1>     Map<String, ClusterIndexHealth> indices = response.getIndices().     // end::health-response-indices     {         // tag::health-response-index         // <1>         ClusterIndexHealth index = indices.get("index").         ClusterHealthStatus indexStatus = index.getStatus().         int numberOfShards = index.getNumberOfShards().         int numberOfReplicas = index.getNumberOfReplicas().         int activeShards = index.getActiveShards().         int activePrimaryShards = index.getActivePrimaryShards().         int initializingShards = index.getInitializingShards().         int relocatingShards = index.getRelocatingShards().         int unassignedShards = index.getUnassignedShards().         // end::health-response-index         // tag::health-response-shard-details         // <1>         Map<Integer, ClusterShardHealth> shards = index.getShards().         ClusterShardHealth shardHealth = shards.get(0).         int shardId = shardHealth.getShardId().         ClusterHealthStatus shardStatus = shardHealth.getStatus().         int active = shardHealth.getActiveShards().         int initializing = shardHealth.getInitializingShards().         int unassigned = shardHealth.getUnassignedShards().         int relocating = shardHealth.getRelocatingShards().         boolean primaryActive = shardHealth.isPrimaryActive().     // end::health-response-shard-details     } }
false;public;1;4;;@Override public void onResponse(ClusterHealthResponse response) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;31;;public void testClusterHealthAsync() throws Exception {     RestHighLevelClient client = highLevelClient().     {         ClusterHealthRequest request = new ClusterHealthRequest().         // tag::health-execute-listener         ActionListener<ClusterHealthResponse> listener = new ActionListener<ClusterHealthResponse>() {              @Override             public void onResponse(ClusterHealthResponse response) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::health-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::health-execute-async         // <1>         client.cluster().healthAsync(request, RequestOptions.DEFAULT, listener).         // end::health-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
