commented;modifiers;parameterAmount;loc;comment;code
false;public;2;3;;@Override public void usedDeprecatedName(String usedName, String modernName) { }
false;public;2;3;;@Override public void usedDeprecatedField(String usedName, String replacedWith) { }
false;public;0;28;;public void testExpressionRoleMappingParser() throws IOException {     final String json = "{\n" + "   \"enabled\" : true,\n" + "   \"roles\" : [\n" + "     \"superuser\"\n" + "   ],\n" + "   \"rules\" : {\n" + "     \"field\" : {\n" + "       \"realm.name\" : \"kerb1\"\n" + "     }\n" + "   },\n" + "   \"metadata\" : { }\n" + " }".     final ExpressionRoleMapping expressionRoleMapping = ExpressionRoleMapping.PARSER.parse(XContentType.JSON.xContent().createParser(new NamedXContentRegistry(Collections.emptyList()), new DeprecationHandler() {          @Override         public void usedDeprecatedName(String usedName, String modernName) {         }          @Override         public void usedDeprecatedField(String usedName, String replacedWith) {         }     }, json), "example-role-mapping").     final ExpressionRoleMapping expectedRoleMapping = new ExpressionRoleMapping("example-role-mapping", FieldRoleMapperExpression.ofKeyValues("realm.name", "kerb1"), Collections.singletonList("superuser"), null, true).     assertThat(expressionRoleMapping, equalTo(expectedRoleMapping)). }
false;public;0;12;;public void testEqualsHashCode() {     final ExpressionRoleMapping expressionRoleMapping = new ExpressionRoleMapping("kerberosmapping", FieldRoleMapperExpression.ofKeyValues("realm.name", "kerb1"), Collections.singletonList("superuser"), null, true).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(expressionRoleMapping, (original) -> {         return new ExpressionRoleMapping(original.getName(), original.getExpression(), original.getRoles(), original.getMetadata(), original.isEnabled()).     }).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(expressionRoleMapping, (original) -> {         return new ExpressionRoleMapping(original.getName(), original.getExpression(), original.getRoles(), original.getMetadata(), original.isEnabled()).     }, ExpressionRoleMappingTests::mutateTestItem). }
false;private,static;1;28;;private static ExpressionRoleMapping mutateTestItem(ExpressionRoleMapping original) {     ExpressionRoleMapping mutated = null.     switch(randomIntBetween(0, 4)) {         case 0:             mutated = new ExpressionRoleMapping("namechanged", FieldRoleMapperExpression.ofKeyValues("realm.name", "kerb1"), Collections.singletonList("superuser"), null, true).             break.         case 1:             mutated = new ExpressionRoleMapping("kerberosmapping", FieldRoleMapperExpression.ofKeyValues("changed", "changed"), Collections.singletonList("superuser"), null, true).             break.         case 2:             mutated = new ExpressionRoleMapping("kerberosmapping", FieldRoleMapperExpression.ofKeyValues("realm.name", "kerb1"), Collections.singletonList("changed"), null, true).             break.         case 3:             Map<String, Object> metadata = new HashMap<>().             metadata.put("a", "b").             mutated = new ExpressionRoleMapping("kerberosmapping", FieldRoleMapperExpression.ofKeyValues("realm.name", "kerb1"), Collections.singletonList("superuser"), metadata, true).             break.         case 4:             mutated = new ExpressionRoleMapping("kerberosmapping", FieldRoleMapperExpression.ofKeyValues("realm.name", "kerb1"), Collections.singletonList("superuser"), null, false).             break.     }     return mutated. }
