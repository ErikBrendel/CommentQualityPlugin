commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;public void testGetLifecyclePolicy() {     String[] policies = rarely() ? null : randomIndicesNames(0, 10).     GetLifecyclePolicyRequest req = new GetLifecyclePolicyRequest(policies).     Map<String, String> expectedParams = new HashMap<>().     setRandomMasterTimeout(req::setMasterTimeout, TimedRequest.DEFAULT_MASTER_NODE_TIMEOUT, expectedParams).     setRandomTimeoutTimeValue(req::setTimeout, TimedRequest.DEFAULT_ACK_TIMEOUT, expectedParams).     Request request = IndexLifecycleRequestConverters.getLifecyclePolicy(req).     assertEquals(request.getMethod(), HttpGet.METHOD_NAME).     String policiesStr = Strings.arrayToCommaDelimitedString(policies).     assertEquals(request.getEndpoint(), "/_ilm/policy" + (policiesStr.isEmpty() ? "" : ("/" + policiesStr))).     assertEquals(request.getParameters(), expectedParams). }
false;public;0;13;;public void testPutLifecyclePolicy() throws Exception {     String name = randomAlphaOfLengthBetween(2, 20).     LifecyclePolicy policy = createRandomPolicy(name).     PutLifecyclePolicyRequest req = new PutLifecyclePolicyRequest(policy).     Map<String, String> expectedParams = new HashMap<>().     setRandomMasterTimeout(req::setMasterTimeout, TimedRequest.DEFAULT_MASTER_NODE_TIMEOUT, expectedParams).     setRandomTimeoutTimeValue(req::setTimeout, TimedRequest.DEFAULT_ACK_TIMEOUT, expectedParams).     Request request = IndexLifecycleRequestConverters.putLifecyclePolicy(req).     assertEquals(HttpPut.METHOD_NAME, request.getMethod()).     assertEquals("/_ilm/policy/" + name, request.getEndpoint()).     assertEquals(expectedParams, request.getParameters()). }
false;public;0;12;;public void testDeleteLifecycle() {     String lifecycleName = randomAlphaOfLengthBetween(2, 20).     DeleteLifecyclePolicyRequest req = new DeleteLifecyclePolicyRequest(lifecycleName).     Map<String, String> expectedParams = new HashMap<>().     setRandomMasterTimeout(req::setMasterTimeout, TimedRequest.DEFAULT_MASTER_NODE_TIMEOUT, expectedParams).     setRandomTimeoutTimeValue(req::setTimeout, TimedRequest.DEFAULT_ACK_TIMEOUT, expectedParams).     Request request = IndexLifecycleRequestConverters.deleteLifecyclePolicy(req).     assertEquals(request.getMethod(), HttpDelete.METHOD_NAME).     assertEquals(request.getEndpoint(), "/_ilm/policy/" + lifecycleName).     assertEquals(request.getParameters(), expectedParams). }
false;public;0;13;;public void testRemoveIndexLifecyclePolicy() {     Map<String, String> expectedParams = new HashMap<>().     String[] indices = randomIndicesNames(0, 10).     IndicesOptions indicesOptions = setRandomIndicesOptions(IndicesOptions.strictExpandOpen(), expectedParams).     RemoveIndexLifecyclePolicyRequest req = new RemoveIndexLifecyclePolicyRequest(Arrays.asList(indices), indicesOptions).     setRandomMasterTimeout(req::setMasterTimeout, TimedRequest.DEFAULT_MASTER_NODE_TIMEOUT, expectedParams).     Request request = IndexLifecycleRequestConverters.removeIndexLifecyclePolicy(req).     assertThat(request.getMethod(), equalTo(HttpPost.METHOD_NAME)).     String idxString = Strings.arrayToCommaDelimitedString(indices).     assertThat(request.getEndpoint(), equalTo("/" + (idxString.isEmpty() ? "" : (idxString + "/")) + "_ilm/remove")).     assertThat(request.getParameters(), equalTo(expectedParams)). }
false;public;0;11;;public void testStartILM() throws Exception {     StartILMRequest req = new StartILMRequest().     Map<String, String> expectedParams = new HashMap<>().     setRandomMasterTimeout(req::setMasterTimeout, TimedRequest.DEFAULT_MASTER_NODE_TIMEOUT, expectedParams).     setRandomTimeoutTimeValue(req::setTimeout, TimedRequest.DEFAULT_ACK_TIMEOUT, expectedParams).     Request request = IndexLifecycleRequestConverters.startILM(req).     assertThat(request.getMethod(), equalTo(HttpPost.METHOD_NAME)).     assertThat(request.getEndpoint(), equalTo("/_ilm/start")).     assertThat(request.getParameters(), equalTo(expectedParams)). }
false;public;0;11;;public void testStopILM() throws Exception {     StopILMRequest req = new StopILMRequest().     Map<String, String> expectedParams = new HashMap<>().     setRandomMasterTimeout(req::setMasterTimeout, TimedRequest.DEFAULT_MASTER_NODE_TIMEOUT, expectedParams).     setRandomTimeoutTimeValue(req::setTimeout, TimedRequest.DEFAULT_ACK_TIMEOUT, expectedParams).     Request request = IndexLifecycleRequestConverters.stopILM(req).     assertThat(request.getMethod(), equalTo(HttpPost.METHOD_NAME)).     assertThat(request.getEndpoint(), equalTo("/_ilm/stop")).     assertThat(request.getParameters(), equalTo(expectedParams)). }
false;public;0;11;;public void testLifecycleManagementStatus() throws Exception {     LifecycleManagementStatusRequest req = new LifecycleManagementStatusRequest().     Map<String, String> expectedParams = new HashMap<>().     setRandomMasterTimeout(req::setMasterTimeout, TimedRequest.DEFAULT_MASTER_NODE_TIMEOUT, expectedParams).     setRandomTimeoutTimeValue(req::setTimeout, TimedRequest.DEFAULT_ACK_TIMEOUT, expectedParams).     Request request = IndexLifecycleRequestConverters.lifecycleManagementStatus(req).     assertThat(request.getMethod(), equalTo(HttpGet.METHOD_NAME)).     assertThat(request.getEndpoint(), equalTo("/_ilm/status")).     assertThat(request.getParameters(), equalTo(expectedParams)). }
false;public;0;12;;public void testExplainLifecycle() throws Exception {     ExplainLifecycleRequest req = new ExplainLifecycleRequest(randomIndicesNames(1, 10)).     Map<String, String> expectedParams = new HashMap<>().     setRandomMasterTimeout(req, expectedParams).     setRandomIndicesOptions(req::indicesOptions, req::indicesOptions, expectedParams).     Request request = IndexLifecycleRequestConverters.explainLifecycle(req).     assertThat(request.getMethod(), equalTo(HttpGet.METHOD_NAME)).     String idxString = Strings.arrayToCommaDelimitedString(req.getIndices()).     assertThat(request.getEndpoint(), equalTo("/" + idxString + "/" + "_ilm/explain")).     assertThat(request.getParameters(), equalTo(expectedParams)). }
false;public;0;12;;public void testRetryLifecycle() throws Exception {     String[] indices = randomIndicesNames(1, 10).     RetryLifecyclePolicyRequest req = new RetryLifecyclePolicyRequest(indices).     Map<String, String> expectedParams = new HashMap<>().     setRandomMasterTimeout(req::setMasterTimeout, TimedRequest.DEFAULT_MASTER_NODE_TIMEOUT, expectedParams).     setRandomTimeoutTimeValue(req::setTimeout, TimedRequest.DEFAULT_ACK_TIMEOUT, expectedParams).     Request request = IndexLifecycleRequestConverters.retryLifecycle(req).     assertThat(request.getMethod(), equalTo(HttpPost.METHOD_NAME)).     String idxString = Strings.arrayToCommaDelimitedString(indices).     assertThat(request.getEndpoint(), equalTo("/" + (idxString.isEmpty() ? "" : (idxString + "/")) + "_ilm/retry")).     assertThat(request.getParameters(), equalTo(expectedParams)). }
