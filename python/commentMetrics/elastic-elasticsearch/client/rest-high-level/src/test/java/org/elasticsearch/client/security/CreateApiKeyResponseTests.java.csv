commented;modifiers;parameterAmount;loc;comment;code
false;public;0;29;;public void testFromXContent() throws IOException {     final String id = randomAlphaOfLengthBetween(4, 8).     final String name = randomAlphaOfLength(5).     final SecureString apiKey = UUIDs.randomBase64UUIDSecureString().     final Instant expiration = randomBoolean() ? null : Instant.ofEpochMilli(10000).     final XContentType xContentType = randomFrom(XContentType.values()).     final XContentBuilder builder = XContentFactory.contentBuilder(xContentType).     builder.startObject().field("id", id).field("name", name).     if (expiration != null) {         builder.field("expiration", expiration.toEpochMilli()).     }     byte[] charBytes = CharArrays.toUtf8Bytes(apiKey.getChars()).     try {         builder.field("api_key").utf8Value(charBytes, 0, charBytes.length).     } finally {         Arrays.fill(charBytes, (byte) 0).     }     builder.endObject().     BytesReference xContent = BytesReference.bytes(builder).     final CreateApiKeyResponse response = CreateApiKeyResponse.fromXContent(createParser(xContentType.xContent(), xContent)).     assertThat(response.getId(), equalTo(id)).     assertThat(response.getName(), equalTo(name)).     assertThat(response.getKey(), equalTo(apiKey)).     if (expiration != null) {         assertThat(response.getExpiration(), equalTo(expiration)).     } }
false;public;0;14;;public void testEqualsHashCode() {     final String id = randomAlphaOfLengthBetween(4, 8).     final String name = randomAlphaOfLength(5).     final SecureString apiKey = UUIDs.randomBase64UUIDSecureString().     final Instant expiration = Instant.ofEpochMilli(10000).     CreateApiKeyResponse createApiKeyResponse = new CreateApiKeyResponse(name, id, apiKey, expiration).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(createApiKeyResponse, (original) -> {         return new CreateApiKeyResponse(original.getName(), original.getId(), original.getKey(), original.getExpiration()).     }).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(createApiKeyResponse, (original) -> {         return new CreateApiKeyResponse(original.getName(), original.getId(), original.getKey(), original.getExpiration()).     }, CreateApiKeyResponseTests::mutateTestItem). }
false;private,static;1;16;;private static CreateApiKeyResponse mutateTestItem(CreateApiKeyResponse original) {     switch(randomIntBetween(0, 3)) {         case 0:             return new CreateApiKeyResponse(randomAlphaOfLength(7), original.getId(), original.getKey(), original.getExpiration()).         case 1:             return new CreateApiKeyResponse(original.getName(), randomAlphaOfLengthBetween(4, 8), original.getKey(), original.getExpiration()).         case 2:             return new CreateApiKeyResponse(original.getName(), original.getId(), UUIDs.randomBase64UUIDSecureString(), original.getExpiration()).         case 3:             return new CreateApiKeyResponse(original.getName(), original.getId(), original.getKey(), Instant.ofEpochMilli(150000)).         default:             return new CreateApiKeyResponse(randomAlphaOfLength(7), original.getId(), original.getKey(), original.getExpiration()).     } }
