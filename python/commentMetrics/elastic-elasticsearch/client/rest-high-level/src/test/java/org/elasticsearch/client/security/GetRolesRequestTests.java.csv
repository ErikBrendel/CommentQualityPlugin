commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;public void testGetRolesRequest() {     final String[] roles = randomArray(0, 5, String[]::new, () -> randomAlphaOfLength(5)).     final GetRolesRequest getRolesRequest = new GetRolesRequest(roles).     assertThat(getRolesRequest.getRoleNames().size(), equalTo(roles.length)).     assertThat(getRolesRequest.getRoleNames(), containsInAnyOrder(roles)). }
false;public;0;11;;public void testEqualsHashCode() {     final String[] roles = randomArray(0, 5, String[]::new, () -> randomAlphaOfLength(5)).     final GetRolesRequest getRolesRequest = new GetRolesRequest(roles).     assertNotNull(getRolesRequest).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(getRolesRequest, (original) -> {         return new GetRolesRequest(original.getRoleNames().toArray(new String[0])).     }).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(getRolesRequest, (original) -> {         return new GetRolesRequest(original.getRoleNames().toArray(new String[0])).     }, GetRolesRequestTests::mutateTestItem). }
false;private,static;1;4;;private static GetRolesRequest mutateTestItem(GetRolesRequest original) {     final int minRoles = original.getRoleNames().isEmpty() ? 1 : 0.     return new GetRolesRequest(randomArray(minRoles, 5, String[]::new, () -> randomAlphaOfLength(6))). }
