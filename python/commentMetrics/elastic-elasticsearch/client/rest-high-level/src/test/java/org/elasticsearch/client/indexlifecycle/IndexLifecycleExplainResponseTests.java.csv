commented;modifiers;parameterAmount;loc;comment;code
false;static;0;7;;static IndexLifecycleExplainResponse randomIndexExplainResponse() {     if (frequently()) {         return randomManagedIndexExplainResponse().     } else {         return randomUnmanagedIndexExplainResponse().     } }
false;private,static;0;3;;private static IndexLifecycleExplainResponse randomUnmanagedIndexExplainResponse() {     return IndexLifecycleExplainResponse.newUnmanagedIndexResponse(randomAlphaOfLength(10)). }
false;private,static;0;15;;private static IndexLifecycleExplainResponse randomManagedIndexExplainResponse() {     boolean stepNull = randomBoolean().     return IndexLifecycleExplainResponse.newManagedIndexResponse(randomAlphaOfLength(10), randomAlphaOfLength(10), randomBoolean() ? null : randomNonNegativeLong(), stepNull ? null : randomAlphaOfLength(10), stepNull ? null : randomAlphaOfLength(10), stepNull ? null : randomAlphaOfLength(10), randomBoolean() ? null : randomAlphaOfLength(10), stepNull ? null : randomNonNegativeLong(), stepNull ? null : randomNonNegativeLong(), stepNull ? null : randomNonNegativeLong(), randomBoolean() ? null : new BytesArray(new RandomStepInfo(() -> randomAlphaOfLength(10)).toString()), randomBoolean() ? null : PhaseExecutionInfoTests.randomPhaseExecutionInfo("")). }
false;public;0;18;;public void testInvalidStepDetails() {     final int numNull = randomIntBetween(1, 3).     IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> IndexLifecycleExplainResponse.newManagedIndexResponse(randomAlphaOfLength(10), randomAlphaOfLength(10), randomBoolean() ? null : randomNonNegativeLong(), (numNull == 1) ? null : randomAlphaOfLength(10), (numNull == 2) ? null : randomAlphaOfLength(10), (numNull == 3) ? null : randomAlphaOfLength(10), randomBoolean() ? null : randomAlphaOfLength(10), randomBoolean() ? null : randomNonNegativeLong(), randomBoolean() ? null : randomNonNegativeLong(), randomBoolean() ? null : randomNonNegativeLong(), randomBoolean() ? null : new BytesArray(new RandomStepInfo(() -> randomAlphaOfLength(10)).toString()), randomBoolean() ? null : PhaseExecutionInfoTests.randomPhaseExecutionInfo(""))).     assertThat(exception.getMessage(), startsWith("managed index response must have complete step details")).     assertThat(exception.getMessage(), containsString("=null")). }
false;protected;0;4;;@Override protected IndexLifecycleExplainResponse createTestInstance() {     return randomIndexExplainResponse(). }
false;protected;1;4;;@Override protected IndexLifecycleExplainResponse doParseInstance(XContentParser parser) throws IOException {     return IndexLifecycleExplainResponse.PARSER.apply(parser, null). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return true. }
false;protected;0;8;;@Override protected Predicate<String> getRandomFieldsExcludeFilter() {     return (field) -> field.endsWith("phase_definition.actions") || // This is a bytes reference, so any new fields are tested for equality in this bytes reference.     field.contains("step_info"). }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(key, value).     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(key, value). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     RandomStepInfo other = (RandomStepInfo) obj.     return Objects.equals(key, other.key) && Objects.equals(value, other.value). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this). }
false;protected;0;6;;@Override protected NamedXContentRegistry xContentRegistry() {     List<NamedXContentRegistry.Entry> entries = new ArrayList<>(ClusterModule.getNamedXWriteables()).     entries.add(new NamedXContentRegistry.Entry(LifecycleAction.class, new ParseField(DeleteAction.NAME), DeleteAction::parse)).     return new NamedXContentRegistry(entries). }
