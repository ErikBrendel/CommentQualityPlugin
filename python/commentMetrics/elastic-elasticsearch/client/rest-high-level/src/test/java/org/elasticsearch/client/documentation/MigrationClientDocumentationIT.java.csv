commented;modifiers;parameterAmount;loc;comment;code
false;public;0;29;;public void testGetAssistance() throws IOException {     RestHighLevelClient client = highLevelClient().     // tag::get-assistance-request     // <1>     IndexUpgradeInfoRequest request = new IndexUpgradeInfoRequest().     // end::get-assistance-request     // tag::get-assistance-request-indices     // <1>     request.indices("index1", "index2").     // end::get-assistance-request-indices     request.indices(Strings.EMPTY_ARRAY).     // tag::get-assistance-request-indices-options     // <1>     request.indicesOptions(IndicesOptions.lenientExpandOpen()).     // end::get-assistance-request-indices-options     // tag::get-assistance-execute     IndexUpgradeInfoResponse response = client.migration().getAssistance(request, RequestOptions.DEFAULT).     // end::get-assistance-execute     // tag::get-assistance-response     Map<String, UpgradeActionRequired> actions = response.getActions().     for (Map.Entry<String, UpgradeActionRequired> entry : actions.entrySet()) {         // <1>         String index = entry.getKey().         // <2>         UpgradeActionRequired actionRequired = entry.getValue().     } // end::get-assistance-response }
false;public;0;20;;public void testUpgrade() throws IOException {     RestHighLevelClient client = highLevelClient().     createIndex("test", Settings.EMPTY).     // tag::upgrade-request     // <1>     IndexUpgradeRequest request = new IndexUpgradeRequest("test").     try {         // tag::upgrade-execute         BulkByScrollResponse response = client.migration().upgrade(request, RequestOptions.DEFAULT).     // end::upgrade-execute     } catch (ElasticsearchStatusException e) {         assertThat(e.getMessage(), containsString("cannot be upgraded")).     } }
false;public;1;4;;@Override public void onResponse(BulkByScrollResponse bulkResponse) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;27;;public void testUpgradeAsync() throws IOException, InterruptedException {     RestHighLevelClient client = highLevelClient().     createIndex("test", Settings.EMPTY).     final CountDownLatch latch = new CountDownLatch(1).     // tag::upgrade-async-listener     ActionListener<BulkByScrollResponse> listener = new ActionListener<BulkByScrollResponse>() {          @Override         public void onResponse(BulkByScrollResponse bulkResponse) {         // <1>         }          @Override         public void onFailure(Exception e) {         // <2>         }     }.     // end::upgrade-async-listener     listener = new LatchedActionListener<>(listener, latch).     // tag::upgrade-async-execute     // <1>     client.migration().upgradeAsync(new IndexUpgradeRequest("test"), RequestOptions.DEFAULT, listener).     // end::upgrade-async-execute     assertTrue(latch.await(30L, TimeUnit.SECONDS)). }
false;public;0;12;;public void testUpgradeWithTaskApi() throws IOException {     createIndex("test", Settings.EMPTY).     RestHighLevelClient client = highLevelClient().     // tag::upgrade-task-api     IndexUpgradeRequest request = new IndexUpgradeRequest("test").     TaskSubmissionResponse response = client.migration().submitUpgradeTask(request, RequestOptions.DEFAULT).     String taskId = response.getTask().     // end::upgrade-task-api     assertThat(taskId, not(isEmptyOrNullString())). }
false;public;1;11;;@Override public void onResponse(DeprecationInfoResponse deprecationInfoResponse1) {     // <1>     List<DeprecationInfoResponse.DeprecationIssue> clusterIssues = deprecationInfoResponse.getClusterSettingsIssues().     List<DeprecationInfoResponse.DeprecationIssue> nodeIssues = deprecationInfoResponse.getNodeSettingsIssues().     Map<String, List<DeprecationInfoResponse.DeprecationIssue>> indexIssues = deprecationInfoResponse.getIndexSettingsIssues().     List<DeprecationInfoResponse.DeprecationIssue> mlIssues = deprecationInfoResponse.getMlSettingsIssues(). }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;58;;public void testGetDeprecationInfo() throws IOException, InterruptedException {     RestHighLevelClient client = highLevelClient().     createIndex("test", Settings.EMPTY).     // tag::get-deprecation-info-request     List<String> indices = new ArrayList<>().     indices.add("test").     // <1>     DeprecationInfoRequest deprecationInfoRequest = new DeprecationInfoRequest(indices).     // end::get-deprecation-info-request     // tag::get-deprecation-info-execute     DeprecationInfoResponse deprecationInfoResponse = client.migration().getDeprecationInfo(deprecationInfoRequest, RequestOptions.DEFAULT).     // end::get-deprecation-info-execute     // tag::get-deprecation-info-response     List<DeprecationInfoResponse.DeprecationIssue> clusterIssues = // <1>     deprecationInfoResponse.getClusterSettingsIssues().     List<DeprecationInfoResponse.DeprecationIssue> nodeIssues = // <2>     deprecationInfoResponse.getNodeSettingsIssues().     Map<String, List<DeprecationInfoResponse.DeprecationIssue>> indexIssues = // <3>     deprecationInfoResponse.getIndexSettingsIssues().     List<DeprecationInfoResponse.DeprecationIssue> mlIssues = // <4>     deprecationInfoResponse.getMlSettingsIssues().     // end::get-deprecation-info-response     // tag::get-deprecation-info-execute-listener     ActionListener<DeprecationInfoResponse> listener = new ActionListener<DeprecationInfoResponse>() {          @Override         public void onResponse(DeprecationInfoResponse deprecationInfoResponse1) {             // <1>             List<DeprecationInfoResponse.DeprecationIssue> clusterIssues = deprecationInfoResponse.getClusterSettingsIssues().             List<DeprecationInfoResponse.DeprecationIssue> nodeIssues = deprecationInfoResponse.getNodeSettingsIssues().             Map<String, List<DeprecationInfoResponse.DeprecationIssue>> indexIssues = deprecationInfoResponse.getIndexSettingsIssues().             List<DeprecationInfoResponse.DeprecationIssue> mlIssues = deprecationInfoResponse.getMlSettingsIssues().         }          @Override         public void onFailure(Exception e) {         // <2>         }     }.     // end::get-deprecation-info-execute-listener     final CountDownLatch latch = new CountDownLatch(1).     listener = new LatchedActionListener<>(listener, latch).     // tag::get-deprecation-info-execute-async     client.migration().getDeprecationInfoAsync(deprecationInfoRequest, RequestOptions.DEFAULT, // <1>     listener).     // end::get-deprecation-info-execute-async     assertTrue(latch.await(30L, TimeUnit.SECONDS)). }
