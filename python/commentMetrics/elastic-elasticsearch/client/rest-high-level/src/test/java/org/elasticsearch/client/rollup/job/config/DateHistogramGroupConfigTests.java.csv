commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected DateHistogramGroupConfig createTestInstance() {     return randomDateHistogramGroupConfig(). }
false;protected;1;4;;@Override protected DateHistogramGroupConfig doParseInstance(final XContentParser parser) throws IOException {     return DateHistogramGroupConfig.fromXContent(parser). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return true. }
false;public;0;10;;public void testValidateNullField() {     final DateHistogramGroupConfig config = new DateHistogramGroupConfig(null, DateHistogramInterval.DAY, null, null).     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(true)).     ValidationException validationException = validation.get().     assertThat(validationException.validationErrors().size(), is(1)).     assertThat(validationException.validationErrors(), contains(is("Field name is required"))). }
false;public;0;10;;public void testValidateEmptyField() {     final DateHistogramGroupConfig config = new DateHistogramGroupConfig("", DateHistogramInterval.DAY, null, null).     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(true)).     ValidationException validationException = validation.get().     assertThat(validationException.validationErrors().size(), is(1)).     assertThat(validationException.validationErrors(), contains(is("Field name is required"))). }
false;public;0;10;;public void testValidateNullInterval() {     final DateHistogramGroupConfig config = new DateHistogramGroupConfig("field", null, null, null).     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(true)).     ValidationException validationException = validation.get().     assertThat(validationException.validationErrors().size(), is(1)).     assertThat(validationException.validationErrors(), contains(is("Interval is required"))). }
false;public;0;7;;public void testValidate() {     final DateHistogramGroupConfig config = randomDateHistogramGroupConfig().     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(false)). }
false;static;0;7;;static DateHistogramGroupConfig randomDateHistogramGroupConfig() {     final String field = randomAlphaOfLength(randomIntBetween(3, 10)).     final DateHistogramInterval interval = new DateHistogramInterval(randomPositiveTimeValue()).     final DateHistogramInterval delay = randomBoolean() ? new DateHistogramInterval(randomPositiveTimeValue()) : null.     final String timezone = randomBoolean() ? randomDateTimeZone().toString() : null.     return new DateHistogramGroupConfig(field, interval, delay, timezone). }
