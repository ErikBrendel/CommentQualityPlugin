commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;public void testBool() {     // tag::bool     boolQuery().must(// <1>     termQuery("content", "test1")).must(// <1>     termQuery("content", "test4")).mustNot(// <2>     termQuery("content", "test2")).should(// <3>     termQuery("content", "test3")).filter(// <4>     termQuery("content", "test5")). // end::bool }
false;public;0;8;;public void testBoosting() {     // tag::boosting     boostingQuery(// <1>     termQuery("name", "kimchy"), // <2>     termQuery("name", "dadoonet")).negativeBoost(// <3>     0.2f). // end::boosting }
false;public;0;6;;public void testCommonTerms() {     // tag::common_terms     commonTermsQuery(// <1>     "name", // <2>     "kimchy"). // end::common_terms }
false;public;0;7;;public void testConstantScore() {     // tag::constant_score     constantScoreQuery(// <1>     termQuery("name", "kimchy")).boost(// <2>     2.0f). // end::constant_score }
false;public;0;9;;public void testDisMax() {     // tag::dis_max     disMaxQuery().add(// <1>     termQuery("name", "kimchy")).add(// <2>     termQuery("name", "elasticsearch")).boost(// <3>     1.2f).tieBreaker(// <4>     0.7f). // end::dis_max }
false;public;0;5;;public void testExists() {     // tag::exists     // <1>     existsQuery("name"). // end::exists }
false;public;0;12;;public void testFunctionScore() {     // tag::function_score     FilterFunctionBuilder[] functions = { new FunctionScoreQueryBuilder.FilterFunctionBuilder(// <1>     matchQuery("name", "kimchy"), // <2>     randomFunction()), new FunctionScoreQueryBuilder.FilterFunctionBuilder(// <3>     exponentialDecayFunction("age", 0L, 1L)) }.     functionScoreQuery(functions). // end::function_score }
false;public;0;7;;public void testFuzzy() {     // tag::fuzzy     fuzzyQuery(// <1>     "name", // <2>     "kimchy"). // end::fuzzy }
false;public;0;7;;public void testGeoBoundingBox() {     // tag::geo_bounding_box     // <1>     geoBoundingBoxQuery("pin.location").setCorners(// <2>     40.73, // <2>     -74.1, 40.717, // <3>     -73.99). // end::geo_bounding_box }
false;public;0;7;;public void testGeoDistance() {     // tag::geo_distance     // <1>     geoDistanceQuery("pin.location").point(40, // <2>     -70).distance(200, // <3>     DistanceUnit.KILOMETERS). // end::geo_distance }
false;public;0;9;;public void testGeoPolygon() {     // tag::geo_polygon     // <1>     List<GeoPoint> points = new ArrayList<>().     points.add(new GeoPoint(40, -70)).     points.add(new GeoPoint(30, -80)).     points.add(new GeoPoint(20, -90)).     // <2>     geoPolygonQuery("pin.location", points). // end::geo_polygon }
false;public;0;29;;public void testGeoShape() throws IOException {     {         // tag::geo_shape         GeoShapeQueryBuilder qb = geoShapeQuery(// <1>         "pin.location", new // <2>         MultiPointBuilder(new CoordinatesBuilder().coordinate(0, 0).coordinate(0, 10).coordinate(10, 10).coordinate(10, 0).coordinate(0, 0).build())).         // <3>         qb.relation(ShapeRelation.WITHIN).     // end::geo_shape     }     {         // tag::indexed_geo_shape         // Using pre-indexed shapes         GeoShapeQueryBuilder qb = geoShapeQuery(// <1>         "pin.location", // <2>         "DEU").         // <3>         qb.relation(ShapeRelation.WITHIN).indexedShapeIndex(// <4>         "shapes").indexedShapePath(// <5>         "location").     // end::indexed_geo_shape     } }
false;public;0;8;;public void testHasChild() {     // tag::has_child     JoinQueryBuilders.hasChildQuery(// <1>     "blog_tag", // <2>     termQuery("tag", "something"), // <3>     ScoreMode.None). // end::has_child }
false;public;0;8;;public void testHasParent() {     // tag::has_parent     JoinQueryBuilders.hasParentQuery(// <1>     "blog", // <2>     termQuery("tag", "something"), // <3>     false). // end::has_parent }
false;public;0;6;;public void testIds() {     // tag::ids     // <1>     idsQuery().addIds("1", "4", "100"). // end::ids }
false;public;0;5;;public void testMatchAll() {     // tag::match_all     matchAllQuery(). // end::match_all }
false;public;0;7;;public void testMatch() {     // tag::match     matchQuery(// <1>     "name", // <2>     "kimchy elasticsearch"). // end::match }
false;public;0;10;;public void testMoreLikeThis() {     // tag::more_like_this     // <1>     String[] fields = { "name.first", "name.last" }.     // <2>     String[] texts = { "text like this one" }.     moreLikeThisQuery(fields, texts, null).minTermFreq(// <3>     1).maxQueryTerms(// <4>     12). // end::more_like_this }
false;public;0;7;;public void testMultiMatch() {     // tag::multi_match     multiMatchQuery(// <1>     "kimchy elasticsearch", "user", // <2>     "message"). // end::multi_match }
false;public;0;10;;public void testNested() {     // tag::nested     nestedQuery(// <1>     "obj1", // <2>     boolQuery().must(matchQuery("obj1.name", "blue")).must(rangeQuery("obj1.count").gt(5)), // <3>     ScoreMode.Avg). // end::nested }
false;public;0;7;;public void testPrefix() {     // tag::prefix     prefixQuery(// <1>     "brand", // <2>     "heine"). // end::prefix }
false;public;0;5;;public void testQueryString() {     // tag::query_string     queryStringQuery("+kimchy -elasticsearch"). // end::query_string }
false;public;0;16;;public void testRange() {     // tag::range     // <1>     rangeQuery("price").from(// <2>     5).to(// <3>     10).includeLower(// <4>     true).includeUpper(// <5>     false).     // end::range     // tag::range_simplified     // A simplified form using gte, gt, lt or lte     // <1>     rangeQuery("age").gte(// <2>     "10").lt(// <3>     "20"). // end::range_simplified }
false;public;0;7;;public void testRegExp() {     // tag::regexp     regexpQuery(// <1>     "name.first", // <2>     "s.*y"). // end::regexp }
false;public;0;17;;public void testScript() {     // tag::script_inline     scriptQuery(// <1>     new Script("doc['num1'].value > 1")).     // end::script_inline     // tag::script_file     Map<String, Object> parameters = new HashMap<>().     parameters.put("param1", 5).     scriptQuery(new Script(// <1>     ScriptType.STORED, // <2>     null, // <3>     "myscript", // <4>     singletonMap("param1", 5))). // end::script_file }
false;public;0;5;;public void testSimpleQueryString() {     // tag::simple_query_string     simpleQueryStringQuery("+kimchy -elasticsearch"). // end::simple_query_string }
false;public;0;9;;public void testSpanContaining() {     // tag::span_containing     spanContainingQuery(// <1>     spanNearQuery(spanTermQuery("field1", "bar"), 5).addClause(spanTermQuery("field1", "baz")).inOrder(true), // <2>     spanTermQuery("field1", "foo")). // end::span_containing }
false;public;0;8;;public void testSpanFirst() {     // tag::span_first     spanFirstQuery(// <1>     spanTermQuery("user", "kimchy"), // <2>     3). // end::span_first }
false;public;0;6;;public void testSpanMultiTerm() {     // tag::span_multi     spanMultiTermQueryBuilder(// <1>     prefixQuery("user", "ki")). // end::span_multi }
false;public;0;10;;public void testSpanNear() {     // tag::span_near     spanNearQuery(// <1>     spanTermQuery("field", "value1"), // <2>     12).addClause(// <1>     spanTermQuery("field", "value2")).addClause(// <1>     spanTermQuery("field", "value3")).inOrder(// <3>     false). // end::span_near }
false;public;0;7;;public void testSpanNot() {     // tag::span_not     spanNotQuery(// <1>     spanTermQuery("field", "value1"), // <2>     spanTermQuery("field", "value2")). // end::span_not }
false;public;0;7;;public void testSpanOr() {     // tag::span_or     // <1>     spanOrQuery(spanTermQuery("field", "value1")).addClause(// <1>     spanTermQuery("field", "value2")).addClause(// <1>     spanTermQuery("field", "value3")). // end::span_or }
false;public;0;7;;public void testSpanTerm() {     // tag::span_term     spanTermQuery(// <1>     "user", // <2>     "kimchy"). // end::span_term }
false;public;0;9;;public void testSpanWithin() {     // tag::span_within     spanWithinQuery(// <1>     spanNearQuery(spanTermQuery("field1", "bar"), 5).addClause(spanTermQuery("field1", "baz")).inOrder(true), // <2>     spanTermQuery("field1", "foo")). // end::span_within }
false;public;0;7;;public void testTerm() {     // tag::term     termQuery(// <1>     "name", // <2>     "kimchy"). // end::term }
false;public;0;6;;public void testTerms() {     // tag::terms     termsQuery(// <1>     "tags", "blue", // <2>     "pill"). // end::terms }
false;public;0;5;;public void testType() {     // tag::type     // <1>     typeQuery("my_type"). // end::type }
false;public;0;7;;public void testWildcard() {     // tag::wildcard     wildcardQuery(// <1>     "user", // <2>     "k?mch*"). // end::wildcard }
false;public;0;6;;public void testWrapper() {     // tag::wrapper     // <1>     String query = "{\"term\": {\"user\": \"kimchy\"}}".     wrapperQuery(query). // end::wrapper }
