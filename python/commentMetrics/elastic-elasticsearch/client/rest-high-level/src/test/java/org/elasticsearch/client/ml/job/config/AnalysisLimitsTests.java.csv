commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected AnalysisLimits createTestInstance() {     return createRandomized(). }
false;public,static;0;4;;public static AnalysisLimits createRandomized() {     return new AnalysisLimits(randomBoolean() ? (long) randomIntBetween(1, 1000000) : null, randomBoolean() ? randomNonNegativeLong() : null). }
false;protected;1;4;;@Override protected AnalysisLimits doParseInstance(XContentParser parser) {     return AnalysisLimits.PARSER.apply(parser, null). }
false;public;0;9;;public void testParseModelMemoryLimitGivenPositiveNumber() throws IOException {     String json = "{\"model_memory_limit\": 2048}".     XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, json).     AnalysisLimits limits = AnalysisLimits.PARSER.apply(parser, null).     assertThat(limits.getModelMemoryLimit(), equalTo(2048L)). }
false;public;0;9;;public void testParseModelMemoryLimitGivenStringMultipleOfMBs() throws IOException {     String json = "{\"model_memory_limit\":\"4g\"}".     XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, json).     AnalysisLimits limits = AnalysisLimits.PARSER.apply(parser, null).     assertThat(limits.getModelMemoryLimit(), equalTo(4096L)). }
false;public;0;8;;public void testEquals_GivenEqual() {     AnalysisLimits analysisLimits1 = new AnalysisLimits(10L, 20L).     AnalysisLimits analysisLimits2 = new AnalysisLimits(10L, 20L).     assertTrue(analysisLimits1.equals(analysisLimits1)).     assertTrue(analysisLimits1.equals(analysisLimits2)).     assertTrue(analysisLimits2.equals(analysisLimits1)). }
false;public;0;7;;public void testEquals_GivenDifferentModelMemoryLimit() {     AnalysisLimits analysisLimits1 = new AnalysisLimits(10L, 20L).     AnalysisLimits analysisLimits2 = new AnalysisLimits(11L, 20L).     assertFalse(analysisLimits1.equals(analysisLimits2)).     assertFalse(analysisLimits2.equals(analysisLimits1)). }
false;public;0;7;;public void testEquals_GivenDifferentCategorizationExamplesLimit() {     AnalysisLimits analysisLimits1 = new AnalysisLimits(10L, 20L).     AnalysisLimits analysisLimits2 = new AnalysisLimits(10L, 21L).     assertFalse(analysisLimits1.equals(analysisLimits2)).     assertFalse(analysisLimits2.equals(analysisLimits1)). }
false;public;0;6;;public void testHashCode_GivenEqual() {     AnalysisLimits analysisLimits1 = new AnalysisLimits(5555L, 3L).     AnalysisLimits analysisLimits2 = new AnalysisLimits(5555L, 3L).     assertEquals(analysisLimits1.hashCode(), analysisLimits2.hashCode()). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return true. }
