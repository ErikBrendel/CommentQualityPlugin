commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;public void testGetAssistance() throws IOException {     {         IndexUpgradeInfoResponse response = highLevelClient().migration().getAssistance(new IndexUpgradeInfoRequest(), RequestOptions.DEFAULT).         assertEquals(0, response.getActions().size()).     }     {         createIndex("test", Settings.EMPTY).         IndexUpgradeInfoResponse response = highLevelClient().migration().getAssistance(new IndexUpgradeInfoRequest("test"), RequestOptions.DEFAULT).         assertEquals(0, response.getActions().size()).     } }
false;public;0;11;;public void testUpgradeWhenIndexCannotBeUpgraded() throws IOException {     createIndex("test", Settings.EMPTY).     ThrowingRunnable execute = () -> execute(new IndexUpgradeRequest("test"), highLevelClient().migration()::upgrade, highLevelClient().migration()::upgradeAsync).     ElasticsearchStatusException responseException = expectThrows(ElasticsearchStatusException.class, execute).     assertThat(responseException.getDetailedMessage(), containsString("cannot be upgraded")). }
false;public;0;13;;public void testUpgradeWithTaskApi() throws IOException, InterruptedException {     createIndex("test", Settings.EMPTY).     IndexUpgradeRequest request = new IndexUpgradeRequest("test").     TaskSubmissionResponse upgrade = highLevelClient().migration().submitUpgradeTask(request, RequestOptions.DEFAULT).     assertNotNull(upgrade.getTask()).     BooleanSupplier hasUpgradeCompleted = checkCompletionStatus(upgrade).     awaitBusy(hasUpgradeCompleted). }
false;public;0;10;;public void testGetDeprecationInfo() throws IOException {     createIndex("test", Settings.EMPTY).     DeprecationInfoRequest request = new DeprecationInfoRequest(Collections.singletonList("test")).     DeprecationInfoResponse response = highLevelClient().migration().getDeprecationInfo(request, RequestOptions.DEFAULT).     // a test like this cannot test actual deprecations     assertThat(response.getClusterSettingsIssues().size(), equalTo(0)).     assertThat(response.getIndexSettingsIssues().size(), equalTo(0)).     assertThat(response.getNodeSettingsIssues().size(), equalTo(0)).     assertThat(response.getMlSettingsIssues().size(), equalTo(0)). }
true;private;1;11;/**  * Using low-level api as high-level-rest-client's getTaskById work is in progress.  * TODO revisit once that work is finished  */ ;/**  * Using low-level api as high-level-rest-client's getTaskById work is in progress.  * TODO revisit once that work is finished  */ private BooleanSupplier checkCompletionStatus(TaskSubmissionResponse upgrade) {     return () -> {         try {             Response response = client().performRequest(new Request("GET", "/_tasks/" + upgrade.getTask())).             return (boolean) entityAsMap(response).get("completed").         } catch (IOException e) {             fail(e.getMessage()).             return false.         }     }. }
