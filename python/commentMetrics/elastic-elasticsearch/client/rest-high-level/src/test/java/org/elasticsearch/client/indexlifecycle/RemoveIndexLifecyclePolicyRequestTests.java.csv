commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public void testNullIndices() {     expectThrows(NullPointerException.class, () -> new RemoveIndexLifecyclePolicyRequest(null)). }
false;public;0;3;;public void testNullIndicesOptions() {     expectThrows(NullPointerException.class, () -> new RemoveIndexLifecyclePolicyRequest(Collections.emptyList(), null)). }
false;public;0;4;;public void testValidate() {     RemoveIndexLifecyclePolicyRequest request = new RemoveIndexLifecyclePolicyRequest(Collections.emptyList()).     assertFalse(request.validate().isPresent()). }
false;protected;0;9;;protected RemoveIndexLifecyclePolicyRequest createInstance() {     if (randomBoolean()) {         return new RemoveIndexLifecyclePolicyRequest(Arrays.asList(generateRandomStringArray(20, 20, false)), IndicesOptions.fromOptions(randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean())).     } else {         return new RemoveIndexLifecyclePolicyRequest(Arrays.asList(generateRandomStringArray(20, 20, false))).     } }
false;private;1;7;;private RemoveIndexLifecyclePolicyRequest copyInstance(RemoveIndexLifecyclePolicyRequest req) {     return new RemoveIndexLifecyclePolicyRequest(new ArrayList<>(req.indices()), IndicesOptions.fromOptions(req.indicesOptions().ignoreUnavailable(), req.indicesOptions().allowNoIndices(), req.indicesOptions().expandWildcardsOpen(), req.indicesOptions().expandWildcardsClosed(), req.indicesOptions().allowAliasesToMultipleIndices(), req.indicesOptions().forbidClosedIndices(), req.indicesOptions().ignoreAliases(), req.indicesOptions().ignoreThrottled())). }
false;private;1;11;;private RemoveIndexLifecyclePolicyRequest mutateInstance(RemoveIndexLifecyclePolicyRequest req) {     if (randomBoolean()) {         return new RemoveIndexLifecyclePolicyRequest(req.indices(), randomValueOtherThan(req.indicesOptions(), () -> IndicesOptions.fromOptions(randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean()))).     } else {         return new RemoveIndexLifecyclePolicyRequest(randomValueOtherThan(req.indices(), () -> Arrays.asList(generateRandomStringArray(20, 20, false))), req.indicesOptions()).     } }
false;public;0;5;;public void testEqualsAndHashCode() {     for (int count = 0. count < 100. ++count) {         EqualsHashCodeTestUtils.checkEqualsAndHashCode(createInstance(), this::copyInstance, this::mutateInstance).     } }
