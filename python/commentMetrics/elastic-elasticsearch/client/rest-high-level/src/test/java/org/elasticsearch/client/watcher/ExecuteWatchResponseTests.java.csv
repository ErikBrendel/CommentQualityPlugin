commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;public void testFromXContent() throws IOException {     xContentTester(this::createParser, ExecuteWatchResponseTests::createTestInstance, this::toXContent, ExecuteWatchResponse::fromXContent).supportsUnknownFields(true).assertEqualsConsumer(this::assertEqualInstances).assertToXContentEquivalence(false).test(). }
false;private;2;13;;private void assertEqualInstances(ExecuteWatchResponse expected, ExecuteWatchResponse actual) {     assertThat(expected.getRecordId(), is(actual.getRecordId())).     // This may have extra json, so lets just assume that if all of the original fields from the creation are there, then its equal     // This is the same code that is in createTestInstance in this class.     Map<String, Object> actualMap = actual.getRecordAsMap().     assertThat(ObjectPath.eval(WATCH_ID_KEY, actualMap), is(WATCH_ID_VALUE)).     assertThat(ObjectPath.eval(NODE_KEY, actualMap), is(NODE_VALUE)).     List<Object> messages = ObjectPath.eval(MESSAGES_KEY, actualMap).     assertThat(messages.size(), is(0)).     assertThat(ObjectPath.eval(TRIGGER_EVENT_KEY + "." + TRIGGER_EVENT_TYPE_KEY, actualMap), is(TRIGGER_TYPE_VALUE)).     assertThat(ObjectPath.eval(STATE_KEY, actualMap), is(STATE_VALUE)). }
false;private;2;9;;private XContentBuilder toXContent(BytesReference bytes, XContentBuilder builder) throws IOException {     // EMPTY is safe here because we never use namedObject     try (InputStream stream = bytes.streamInput().         XContentParser parser = createParser(JsonXContent.jsonXContent, stream)) {         parser.nextToken().         builder.generator().copyCurrentStructure(parser).         return builder.     } }
false;private;2;7;;private XContentBuilder toXContent(ExecuteWatchResponse response, XContentBuilder builder) throws IOException {     builder.startObject().     builder.field("_id", response.getRecordId()).     builder.field("watch_record").     toXContent(response.getRecord(), builder).     return builder.endObject(). }
false;private,static;0;21;;private static ExecuteWatchResponse createTestInstance() {     String id = "my_watch_0-2015-06-02T23:17:55.124Z".     try {         XContentBuilder builder = XContentFactory.jsonBuilder().         builder.startObject().         builder.field(WATCH_ID_KEY, WATCH_ID_VALUE).         builder.field(NODE_KEY, NODE_VALUE).         builder.startArray(MESSAGES_KEY).         builder.endArray().         builder.startObject(TRIGGER_EVENT_KEY).         builder.field(TRIGGER_EVENT_TYPE_KEY, TRIGGER_TYPE_VALUE).         builder.endObject().         builder.field(STATE_KEY, STATE_VALUE).         builder.endObject().         BytesReference bytes = BytesReference.bytes(builder).         return new ExecuteWatchResponse(id, bytes).     } catch (IOException e) {         throw new AssertionError(e).     } }
