commented;modifiers;parameterAmount;loc;comment;code
false;private;0;19;;@Before private void setupClient() throws IOException {     final RestClient mockClient = mock(RestClient.class).     final Response mockResponse = mock(Response.class).     when(mockResponse.getHost()).thenReturn(new HttpHost("localhost", 9200)).     when(mockResponse.getWarnings()).thenReturn(WARNINGS).     ProtocolVersion protocol = new ProtocolVersion("HTTP", 1, 1).     when(mockResponse.getStatusLine()).thenReturn(new BasicStatusLine(protocol, 200, "OK")).     RequestLine requestLine = new BasicRequestLine(HttpGet.METHOD_NAME, "/_blah", protocol).     when(mockResponse.getRequestLine()).thenReturn(requestLine).     WarningFailureException expectedException = new WarningFailureException(mockResponse).     doThrow(expectedException).when(mockClient).performRequest(any()).     client = new RestHighLevelClient(mockClient, RestClient::close, Collections.emptyList()). }
false;public;0;8;;public void testWarningFailure() {     WarningFailureException exception = expectThrows(WarningFailureException.class, () -> client.info(RequestOptions.DEFAULT)).     assertThat(exception.getMessage(), equalTo("method [GET], host [http://localhost:9200], URI [/_blah], " + "status line [HTTP/1.1 200 OK]")).     assertNull(exception.getCause()).     assertThat(exception.getResponse().getWarnings(), equalTo(WARNINGS)). }
