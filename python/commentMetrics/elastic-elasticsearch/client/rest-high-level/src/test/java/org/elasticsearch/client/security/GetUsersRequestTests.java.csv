commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;public void testGetUsersRequest() {     final String[] users = randomArray(0, 5, String[]::new, () -> randomAlphaOfLength(5)).     GetUsersRequest getUsersRequest = new GetUsersRequest(users).     assertThat(getUsersRequest.getUsernames().size(), equalTo(users.length)).     assertThat(getUsersRequest.getUsernames(), containsInAnyOrder(users)). }
false;public;0;11;;public void testEqualsHashCode() {     final String[] users = randomArray(0, 5, String[]::new, () -> randomAlphaOfLength(5)).     final GetUsersRequest getUsersRequest = new GetUsersRequest(users).     assertNotNull(getUsersRequest).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(getUsersRequest, (original) -> {         return new GetUsersRequest(original.getUsernames().toArray(new String[0])).     }).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(getUsersRequest, (original) -> {         return new GetUsersRequest(original.getUsernames().toArray(new String[0])).     }, GetUsersRequestTests::mutateTestItem). }
false;private,static;1;4;;private static GetUsersRequest mutateTestItem(GetUsersRequest original) {     final int minRoles = original.getUsernames().isEmpty() ? 1 : 0.     return new GetUsersRequest(randomArray(minRoles, 5, String[]::new, () -> randomAlphaOfLength(6))). }
