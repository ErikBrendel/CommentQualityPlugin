commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;5;;@BeforeClass public static void checkForSnapshot() {     assumeTrue("Trial license used to rollback is only valid when tested against snapshot/test builds", Build.CURRENT.isSnapshot()). }
false;public;0;4;;@After public void rollbackToTrial() throws IOException {     putTrialLicense(). }
false;public;1;4;;@Override public void onResponse(PutLicenseResponse putLicenseResponse) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;1;4;;@Override public void onResponse(AcknowledgedResponse deleteLicenseResponse) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;106;;public void testLicense() throws Exception {     RestHighLevelClient client = highLevelClient().     String license = "{\"license\": {\"uid\":\"893361dc-9749-4997-93cb-802e3d7fa4a8\",\"type\":\"gold\"," + "\"issue_date_in_millis\":1411948800000,\"expiry_date_in_millis\":1914278399999,\"max_nodes\":1,\"issued_to\":\"issued_to\"," + "\"issuer\":\"issuer\",\"signature\":\"AAAAAgAAAA3U8+YmnvwC+CWsV/mRAAABmC9ZN0hjZDBGYnVyRXpCOW5Bb3FjZDAxOWpSbTVoMVZwUzRxVk1PSm" + "kxakxZdW5IMlhlTHNoN1N2MXMvRFk4d3JTZEx3R3RRZ0pzU3lobWJKZnQvSEFva0ppTHBkWkprZWZSQi9iNmRQNkw1SlpLN0lDalZCS095MXRGN1lIZlpYcVVTTn" + "FrcTE2dzhJZmZrdFQrN3JQeGwxb0U0MXZ0dDJHSERiZTVLOHNzSDByWnpoZEphZHBEZjUrTVBxRENNSXNsWWJjZllaODdzVmEzUjNiWktNWGM5TUhQV2plaUo4Q1" + "JOUml4MXNuL0pSOEhQaVB2azhmUk9QVzhFeTFoM1Q0RnJXSG53MWk2K055c28zSmRnVkF1b2JSQkFLV2VXUmVHNDZ2R3o2VE1qbVNQS2lxOHN5bUErZlNIWkZSVm" + "ZIWEtaSU9wTTJENDVvT1NCYklacUYyK2FwRW9xa0t6dldMbmMzSGtQc3FWOTgzZ3ZUcXMvQkt2RUZwMFJnZzlvL2d2bDRWUzh6UG5pdENGWFRreXNKNkE9PQAAAQ" + "Be8GfzDm6T537Iuuvjetb3xK5dvg0K5NQapv+rczWcQFxgCuzbF8plkgetP1aAGZP4uRESDQPMlOCsx4d0UqqAm9f7GbBQ3l93P+PogInPFeEH9NvOmaAQovmxVM" + "9SE6DsDqlX4cXSO+bgWpXPTd2LmpoQc1fXd6BZ8GeuyYpVHVKp9hVU0tAYjw6HzYOE7+zuO1oJYOxElqy66AnIfkvHrvni+flym3tE7tDTgsDRaz7W3iBhaqiSnt" + "EqabEkvHdPHQdSR99XGaEvnHO1paK01/35iZF6OXHsF7CCj+558GRXiVxzueOe7TsGSSt8g7YjZwV9bRCyU7oB4B/nidgI\"}}".     {         // tag::put-license-execute         PutLicenseRequest request = new PutLicenseRequest().         // <1>         request.setLicenseDefinition(license).         // <2>         request.setAcknowledge(false).         PutLicenseResponse response = client.license().putLicense(request, RequestOptions.DEFAULT).         // end::put-license-execute         // tag::put-license-response         // <1>         LicensesStatus status = response.status().         // <2>         assertEquals(status, LicensesStatus.VALID).         // <3>         boolean acknowledged = response.isAcknowledged().         // <4>         String acknowledgeHeader = response.acknowledgeHeader().         // <5>         Map<String, String[]> acknowledgeMessages = response.acknowledgeMessages().         // end::put-license-response         // Should fail because we are trying to downgrade from platinum trial to gold         assertFalse(acknowledged).         assertThat(acknowledgeHeader, startsWith("This license update requires acknowledgement.")).         assertThat(acknowledgeMessages.keySet(), not(hasSize(0))).     }     {         PutLicenseRequest request = new PutLicenseRequest().         // tag::put-license-execute-listener         ActionListener<PutLicenseResponse> listener = new ActionListener<PutLicenseResponse>() {              @Override             public void onResponse(PutLicenseResponse putLicenseResponse) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::put-license-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::put-license-execute-async         client.license().putLicenseAsync(request, RequestOptions.DEFAULT, // <1>         listener).         // end::put-license-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     }     // we cannot actually delete the license, otherwise the remaining tests won't work     if (Booleans.isTrue("true")) {         return.     }     {         // tag::delete-license-execute         DeleteLicenseRequest request = new DeleteLicenseRequest().         AcknowledgedResponse response = client.license().deleteLicense(request, RequestOptions.DEFAULT).         // end::delete-license-execute         // tag::delete-license-response         // <1>         boolean acknowledged = response.isAcknowledged().         // end::delete-license-response         assertTrue(acknowledged).     }     {         DeleteLicenseRequest request = new DeleteLicenseRequest().         // tag::delete-license-execute-listener         ActionListener<AcknowledgedResponse> listener = new ActionListener<AcknowledgedResponse>() {              @Override             public void onResponse(AcknowledgedResponse deleteLicenseResponse) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::delete-license-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::delete-license-execute-async         client.license().deleteLicenseAsync(request, RequestOptions.DEFAULT, // <1>         listener).         // end::delete-license-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;1;4;;@Override public void onResponse(GetLicenseResponse indexResponse) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;57;;public void testGetLicense() throws Exception {     RestHighLevelClient client = highLevelClient().     {         // tag::get-license-execute         GetLicenseRequest request = new GetLicenseRequest().         GetLicenseResponse response = client.license().getLicense(request, RequestOptions.DEFAULT).         // end::get-license-execute         // tag::get-license-response         // <1>         String currentLicense = response.getLicenseDefinition().         // end::get-license-response         assertThat(currentLicense, containsString("trial")).         assertThat(currentLicense, containsString("client_rest-high-level_integTestCluster")).     }     {         GetLicenseRequest request = new GetLicenseRequest().         // tag::get-license-execute-listener         ActionListener<GetLicenseResponse> listener = new ActionListener<GetLicenseResponse>() {              @Override             public void onResponse(GetLicenseResponse indexResponse) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::get-license-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::get-license-execute-async         client.license().getLicenseAsync(request, RequestOptions.DEFAULT, // <1>         listener).         // end::get-license-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     }     {         GetLicenseRequest request = new GetLicenseRequest().         RequestOptions.Builder builder = RequestOptions.DEFAULT.toBuilder().         // Make sure that it still works in other formats         builder.addHeader("Accept", randomFrom("application/smile", "application/cbor")).         RequestOptions options = builder.build().         GetLicenseResponse response = client.license().getLicense(request, options).         String currentLicense = response.getLicenseDefinition().         assertThat(currentLicense, startsWith("{")).         assertThat(currentLicense, containsString("trial")).         assertThat(currentLicense, containsString("client_rest-high-level_integTestCluster")).         assertThat(currentLicense, endsWith("}")).     } }
false;public;1;4;;@Override public void onResponse(StartTrialResponse response) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;54;;public void testStartTrial() throws Exception {     RestHighLevelClient client = highLevelClient().     {         // tag::start-trial-execute         // <1>         StartTrialRequest request = new StartTrialRequest(true).         StartTrialResponse response = client.license().startTrial(request, RequestOptions.DEFAULT).         // end::start-trial-execute         // tag::start-trial-response         // <1>         boolean acknowledged = response.isAcknowledged().         // <2>         boolean trialWasStarted = response.isTrialWasStarted().         // <3>         String licenseType = response.getLicenseType().         // <4>         String errorMessage = response.getErrorMessage().         // <5>         String acknowledgeHeader = response.getAcknowledgeHeader().         // <6>         Map<String, String[]> acknowledgeMessages = response.getAcknowledgeMessages().         // end::start-trial-response         assertTrue(acknowledged).         assertFalse(trialWasStarted).         assertThat(licenseType, nullValue()).         assertThat(errorMessage, is("Operation failed: Trial was already activated.")).         assertThat(acknowledgeHeader, nullValue()).         assertThat(acknowledgeMessages, nullValue()).     }     {         StartTrialRequest request = new StartTrialRequest().         // tag::start-trial-execute-listener         ActionListener<StartTrialResponse> listener = new ActionListener<StartTrialResponse>() {              @Override             public void onResponse(StartTrialResponse response) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::start-trial-execute-listener         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::start-trial-execute-async         client.license().startTrialAsync(request, RequestOptions.DEFAULT, listener).         // end::start-trial-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;1;4;;@Override public void onResponse(StartBasicResponse indexResponse) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;45;;public void testPostStartBasic() throws Exception {     RestHighLevelClient client = highLevelClient().     {         // tag::start-basic-execute         StartBasicRequest request = new StartBasicRequest().         StartBasicResponse response = client.license().startBasic(request, RequestOptions.DEFAULT).         // end::start-basic-execute         // tag::start-basic-response         // <1>         boolean acknowledged = response.isAcknowledged().         // <2>         boolean basicStarted = response.isBasicStarted().         // <3>         String errorMessage = response.getErrorMessage().         // <4>         String acknowledgeMessage = response.getAcknowledgeMessage().         // <5>         Map<String, String[]> acknowledgeMessages = response.getAcknowledgeMessages().     // end::start-basic-response     }     {         StartBasicRequest request = new StartBasicRequest().         // tag::start-basic-listener         ActionListener<StartBasicResponse> listener = new ActionListener<StartBasicResponse>() {              @Override             public void onResponse(StartBasicResponse indexResponse) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::start-basic-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::start-basic-execute-async         client.license().startBasicAsync(request, RequestOptions.DEFAULT, // <1>         listener).         // end::start-basic-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;0;12;;public void testGetTrialStatus() throws IOException {     RestHighLevelClient client = highLevelClient().     {         // tag::get-trial-status-execute         GetTrialStatusResponse response = client.license().getTrialStatus(RequestOptions.DEFAULT).         // end::get-trial-status-execute         // tag::get-trial-status-response         // <1>         boolean eligibleToStartTrial = response.isEligibleToStartTrial().     // end::get-trial-status-response     } }
false;public;0;12;;public void testGetBasicStatus() throws IOException {     RestHighLevelClient client = highLevelClient().     {         // tag::get-basic-status-execute         GetBasicStatusResponse response = client.license().getBasicStatus(RequestOptions.DEFAULT).         // end::get-basic-status-execute         // tag::get-basic-status-response         // <1>         boolean eligibleToStartbasic = response.isEligibleToStartBasic().     // end::get-basic-status-response     } }
