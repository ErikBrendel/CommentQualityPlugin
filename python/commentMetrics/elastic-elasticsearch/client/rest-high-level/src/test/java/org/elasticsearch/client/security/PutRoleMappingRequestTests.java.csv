commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;public void testPutRoleMappingRequest() {     final String name = randomAlphaOfLength(5).     final boolean enabled = randomBoolean().     final List<String> roles = Collections.singletonList("superuser").     final RoleMapperExpression rules = FieldRoleMapperExpression.ofUsername("user").     final Map<String, Object> metadata = new HashMap<>().     metadata.put("k1", "v1").     final RefreshPolicy refreshPolicy = randomFrom(RefreshPolicy.values()).     PutRoleMappingRequest putRoleMappingRequest = new PutRoleMappingRequest(name, enabled, roles, rules, metadata, refreshPolicy).     assertNotNull(putRoleMappingRequest).     assertThat(putRoleMappingRequest.getName(), equalTo(name)).     assertThat(putRoleMappingRequest.isEnabled(), equalTo(enabled)).     assertThat(putRoleMappingRequest.getRefreshPolicy(), equalTo((refreshPolicy == null) ? RefreshPolicy.getDefault() : refreshPolicy)).     assertThat(putRoleMappingRequest.getRules(), equalTo(rules)).     assertThat(putRoleMappingRequest.getRoles(), equalTo(roles)).     assertThat(putRoleMappingRequest.getMetadata(), equalTo((metadata == null) ? Collections.emptyMap() : metadata)). }
false;public;0;13;;public void testPutRoleMappingRequestThrowsExceptionForNullOrEmptyName() {     final String name = randomBoolean() ? null : "".     final boolean enabled = randomBoolean().     final List<String> roles = Collections.singletonList("superuser").     final RoleMapperExpression rules = FieldRoleMapperExpression.ofUsername("user").     final Map<String, Object> metadata = new HashMap<>().     metadata.put("k1", "v1").     final RefreshPolicy refreshPolicy = randomFrom(RefreshPolicy.values()).     final IllegalArgumentException ile = expectThrows(IllegalArgumentException.class, () -> new PutRoleMappingRequest(name, enabled, roles, rules, metadata, refreshPolicy)).     assertThat(ile.getMessage(), equalTo("role-mapping name is missing")). }
false;public;0;13;;public void testPutRoleMappingRequestThrowsExceptionForNullOrEmptyRoles() {     final String name = randomAlphaOfLength(5).     final boolean enabled = randomBoolean().     final List<String> roles = randomBoolean() ? null : Collections.emptyList().     final RoleMapperExpression rules = FieldRoleMapperExpression.ofUsername("user").     final Map<String, Object> metadata = new HashMap<>().     metadata.put("k1", "v1").     final RefreshPolicy refreshPolicy = randomFrom(RefreshPolicy.values()).     final IllegalArgumentException ile = expectThrows(IllegalArgumentException.class, () -> new PutRoleMappingRequest(name, enabled, roles, rules, metadata, refreshPolicy)).     assertThat(ile.getMessage(), equalTo("role-mapping roles are missing")). }
false;public;0;11;;public void testPutRoleMappingRequestThrowsExceptionForNullRules() {     final String name = randomAlphaOfLength(5).     final boolean enabled = randomBoolean().     final List<String> roles = Collections.singletonList("superuser").     final RoleMapperExpression rules = null.     final Map<String, Object> metadata = new HashMap<>().     metadata.put("k1", "v1").     final RefreshPolicy refreshPolicy = randomFrom(RefreshPolicy.values()).     expectThrows(NullPointerException.class, () -> new PutRoleMappingRequest(name, enabled, roles, rules, metadata, refreshPolicy)). }
false;public;0;26;;public void testPutRoleMappingRequestToXContent() throws IOException {     final String name = randomAlphaOfLength(5).     final boolean enabled = randomBoolean().     final List<String> roles = Collections.singletonList("superuser").     final RoleMapperExpression rules = FieldRoleMapperExpression.ofUsername("user").     final Map<String, Object> metadata = new HashMap<>().     metadata.put("k1", "v1").     final RefreshPolicy refreshPolicy = randomFrom(RefreshPolicy.values()).     final PutRoleMappingRequest putRoleMappingRequest = new PutRoleMappingRequest(name, enabled, roles, rules, metadata, refreshPolicy).     final XContentBuilder builder = XContentFactory.jsonBuilder().     putRoleMappingRequest.toXContent(builder, ToXContent.EMPTY_PARAMS).     final String output = Strings.toString(builder).     final String expected = "{" + "\"enabled\":" + enabled + "," + "\"roles\":[\"superuser\"]," + "\"rules\":{" + "\"field\":{\"username\":[\"user\"]}" + "}," + "\"metadata\":{\"k1\":\"v1\"}" + "}".     assertThat(output, equalTo(expected)). }
false;public;0;21;;public void testEqualsHashCode() {     final String name = randomAlphaOfLength(5).     final boolean enabled = randomBoolean().     final List<String> roles = Collections.singletonList("superuser").     final RoleMapperExpression rules = FieldRoleMapperExpression.ofUsername("user").     final Map<String, Object> metadata = new HashMap<>().     metadata.put("k1", "v1").     final RefreshPolicy refreshPolicy = randomFrom(RefreshPolicy.values()).     PutRoleMappingRequest putRoleMappingRequest = new PutRoleMappingRequest(name, enabled, roles, rules, metadata, refreshPolicy).     assertNotNull(putRoleMappingRequest).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(putRoleMappingRequest, (original) -> {         return new PutRoleMappingRequest(original.getName(), original.isEnabled(), original.getRoles(), original.getRules(), original.getMetadata(), original.getRefreshPolicy()).     }).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(putRoleMappingRequest, (original) -> {         return new PutRoleMappingRequest(original.getName(), original.isEnabled(), original.getRoles(), original.getRules(), original.getMetadata(), original.getRefreshPolicy()).     }, PutRoleMappingRequestTests::mutateTestItem). }
false;private,static;1;25;;private static PutRoleMappingRequest mutateTestItem(PutRoleMappingRequest original) {     switch(randomIntBetween(0, 4)) {         case 0:             return new PutRoleMappingRequest(randomAlphaOfLength(5), original.isEnabled(), original.getRoles(), original.getRules(), original.getMetadata(), original.getRefreshPolicy()).         case 1:             return new PutRoleMappingRequest(original.getName(), !original.isEnabled(), original.getRoles(), original.getRules(), original.getMetadata(), original.getRefreshPolicy()).         case 2:             return new PutRoleMappingRequest(original.getName(), original.isEnabled(), original.getRoles(), FieldRoleMapperExpression.ofGroups("group"), original.getMetadata(), original.getRefreshPolicy()).         case 3:             return new PutRoleMappingRequest(original.getName(), original.isEnabled(), original.getRoles(), original.getRules(), Collections.emptyMap(), original.getRefreshPolicy()).         case 4:             List<RefreshPolicy> values = Arrays.stream(RefreshPolicy.values()).filter(rp -> rp != original.getRefreshPolicy()).collect(Collectors.toList()).             return new PutRoleMappingRequest(original.getName(), original.isEnabled(), original.getRoles(), original.getRules(), original.getMetadata(), randomFrom(values)).         default:             return new PutRoleMappingRequest(randomAlphaOfLength(5), original.isEnabled(), original.getRoles(), original.getRules(), original.getMetadata(), original.getRefreshPolicy()).     } }
