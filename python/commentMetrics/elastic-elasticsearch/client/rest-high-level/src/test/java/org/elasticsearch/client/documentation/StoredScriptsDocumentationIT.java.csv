commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void onResponse(GetStoredScriptResponse response) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;62;;@SuppressWarnings("unused") public void testGetStoredScript() throws Exception {     RestHighLevelClient client = highLevelClient().     final StoredScriptSource scriptSource = new StoredScriptSource("painless", "Math.log(_score * 2) + params.my_modifier", Collections.singletonMap(Script.CONTENT_TYPE_OPTION, XContentType.JSON.mediaType())).     putStoredScript("calculate-score", scriptSource).     {         // tag::get-stored-script-request         // <1>         GetStoredScriptRequest request = new GetStoredScriptRequest("calculate-score").         // end::get-stored-script-request         // tag::get-stored-script-request-masterTimeout         // <1>         request.masterNodeTimeout(TimeValue.timeValueSeconds(50)).         // <2>         request.masterNodeTimeout("50s").         // end::get-stored-script-request-masterTimeout         // tag::get-stored-script-execute         GetStoredScriptResponse getResponse = client.getScript(request, RequestOptions.DEFAULT).         // end::get-stored-script-execute         // tag::get-stored-script-response         // <1>         StoredScriptSource storedScriptSource = getResponse.getSource().         // <2>         String lang = storedScriptSource.getLang().         // <3>         String source = storedScriptSource.getSource().         // <4>         Map<String, String> options = storedScriptSource.getOptions().         // end::get-stored-script-response         assertThat(storedScriptSource, equalTo(scriptSource)).         // tag::get-stored-script-execute-listener         ActionListener<GetStoredScriptResponse> listener = new ActionListener<GetStoredScriptResponse>() {              @Override             public void onResponse(GetStoredScriptResponse response) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::get-stored-script-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::get-stored-script-execute-async         // <1>         client.getScriptAsync(request, RequestOptions.DEFAULT, listener).         // end::get-stored-script-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;1;4;;@Override public void onResponse(AcknowledgedResponse response) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;60;;@SuppressWarnings("unused") public void testDeleteStoredScript() throws Exception {     RestHighLevelClient client = highLevelClient().     final StoredScriptSource scriptSource = new StoredScriptSource("painless", "Math.log(_score * 2) + params.my_modifier", Collections.singletonMap(Script.CONTENT_TYPE_OPTION, XContentType.JSON.mediaType())).     putStoredScript("calculate-score", scriptSource).     // tag::delete-stored-script-request     // <1>     DeleteStoredScriptRequest deleteRequest = new DeleteStoredScriptRequest("calculate-score").     // end::delete-stored-script-request     // tag::delete-stored-script-request-masterTimeout     // <1>     deleteRequest.masterNodeTimeout(TimeValue.timeValueSeconds(50)).     // <2>     deleteRequest.masterNodeTimeout("50s").     // end::delete-stored-script-request-masterTimeout     // tag::delete-stored-script-request-timeout     // <1>     deleteRequest.timeout(TimeValue.timeValueSeconds(60)).     // <2>     deleteRequest.timeout("60s").     // end::delete-stored-script-request-timeout     // tag::delete-stored-script-execute     AcknowledgedResponse deleteResponse = client.deleteScript(deleteRequest, RequestOptions.DEFAULT).     // end::delete-stored-script-execute     // tag::delete-stored-script-response     // <1>     boolean acknowledged = deleteResponse.isAcknowledged().     // end::delete-stored-script-response     putStoredScript("calculate-score", scriptSource).     // tag::delete-stored-script-execute-listener     ActionListener<AcknowledgedResponse> listener = new ActionListener<AcknowledgedResponse>() {          @Override         public void onResponse(AcknowledgedResponse response) {         // <1>         }          @Override         public void onFailure(Exception e) {         // <2>         }     }.     // end::delete-stored-script-execute-listener     // Replace the empty listener by a blocking listener in test     final CountDownLatch latch = new CountDownLatch(1).     listener = new LatchedActionListener<>(listener, latch).     // tag::delete-stored-script-execute-async     // <1>     client.deleteScriptAsync(deleteRequest, RequestOptions.DEFAULT, listener).     // end::delete-stored-script-execute-async     assertTrue(latch.await(30L, TimeUnit.SECONDS)). }
false;public;1;4;;@Override public void onResponse(AcknowledgedResponse response) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;114;;public void testPutScript() throws Exception {     RestHighLevelClient client = highLevelClient().     {         // tag::put-stored-script-request         PutStoredScriptRequest request = new PutStoredScriptRequest().         // <1>         request.id("id").         request.content(new BytesArray("{\n" + "\"script\": {\n" + "\"lang\": \"painless\",\n" + "\"source\": \"Math.log(_score * 2) + params.multiplier\"" + "}\n" + "}\n"), // <2>         XContentType.JSON).         // end::put-stored-script-request         // tag::put-stored-script-context         // <1>         request.context("context").         // end::put-stored-script-context         // tag::put-stored-script-timeout         // <1>         request.timeout(TimeValue.timeValueMinutes(2)).         // <2>         request.timeout("2m").         // end::put-stored-script-timeout         // tag::put-stored-script-masterTimeout         // <1>         request.masterNodeTimeout(TimeValue.timeValueMinutes(1)).         // <2>         request.masterNodeTimeout("1m").     // end::put-stored-script-masterTimeout     }     {         PutStoredScriptRequest request = new PutStoredScriptRequest().         request.id("id").         // tag::put-stored-script-content-painless         XContentBuilder builder = XContentFactory.jsonBuilder().         builder.startObject().         {             builder.startObject("script").             {                 builder.field("lang", "painless").                 builder.field("source", "Math.log(_score * 2) + params.multiplier").             }             builder.endObject().         }         builder.endObject().         // <1>         request.content(BytesReference.bytes(builder), XContentType.JSON).         // end::put-stored-script-content-painless         // tag::put-stored-script-execute         AcknowledgedResponse putStoredScriptResponse = client.putScript(request, RequestOptions.DEFAULT).         // end::put-stored-script-execute         // tag::put-stored-script-response         // <1>         boolean acknowledged = putStoredScriptResponse.isAcknowledged().         // end::put-stored-script-response         assertTrue(acknowledged).         // tag::put-stored-script-execute-listener         ActionListener<AcknowledgedResponse> listener = new ActionListener<AcknowledgedResponse>() {              @Override             public void onResponse(AcknowledgedResponse response) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::put-stored-script-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::put-stored-script-execute-async         // <1>         client.putScriptAsync(request, RequestOptions.DEFAULT, listener).         // end::put-stored-script-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     }     {         PutStoredScriptRequest request = new PutStoredScriptRequest().         request.id("id").         // tag::put-stored-script-content-mustache         XContentBuilder builder = XContentFactory.jsonBuilder().         builder.startObject().         {             builder.startObject("script").             {                 builder.field("lang", "mustache").                 builder.field("source", "{\"query\":{\"match\":{\"title\":\"{{query_string}}\"}}}").             }             builder.endObject().         }         builder.endObject().         // <1>         request.content(BytesReference.bytes(builder), XContentType.JSON).         // end::put-stored-script-content-mustache         client.putScript(request, RequestOptions.DEFAULT).         Map<String, Object> script = getAsMap("/_scripts/id").         assertThat(extractValue("script.lang", script), equalTo("mustache")).         assertThat(extractValue("script.source", script), equalTo("{\"query\":{\"match\":{\"title\":\"{{query_string}}\"}}}")).     } }
false;private;2;5;;private void putStoredScript(String id, StoredScriptSource scriptSource) throws IOException {     PutStoredScriptRequest request = new PutStoredScriptRequest(id, "score", new BytesArray("{}"), XContentType.JSON, scriptSource).     assertAcked(execute(request, highLevelClient()::putScript, highLevelClient()::putScriptAsync)). }
