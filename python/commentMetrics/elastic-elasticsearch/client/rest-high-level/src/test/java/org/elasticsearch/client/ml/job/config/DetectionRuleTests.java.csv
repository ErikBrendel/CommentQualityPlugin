commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;46;;@Override protected DetectionRule createTestInstance() {     DetectionRule.Builder builder = new DetectionRule.Builder().     if (randomBoolean()) {         EnumSet<RuleAction> actions = EnumSet.noneOf(RuleAction.class).         int actionsCount = randomIntBetween(1, RuleAction.values().length).         for (int i = 0. i < actionsCount. ++i) {             actions.add(randomFrom(RuleAction.values())).         }         builder.setActions(actions).     }     boolean hasScope = randomBoolean().     boolean hasConditions = randomBoolean().     if (!hasScope && !hasConditions) {         // at least one of the two should be present         if (randomBoolean()) {             hasScope = true.         } else {             hasConditions = true.         }     }     if (hasScope) {         Map<String, FilterRef> scope = new HashMap<>().         int scopeSize = randomIntBetween(1, 3).         for (int i = 0. i < scopeSize. i++) {             scope.put(randomAlphaOfLength(20), new FilterRef(randomAlphaOfLength(20), randomFrom(FilterRef.FilterType.values()))).         }         builder.setScope(new RuleScope(scope)).     }     if (hasConditions) {         int size = randomIntBetween(1, 5).         List<RuleCondition> ruleConditions = new ArrayList<>(size).         for (int i = 0. i < size. i++) {             // no need for random condition (it is already tested)             ruleConditions.addAll(createCondition(randomDouble())).         }         builder.setConditions(ruleConditions).     }     return builder.build(). }
false;protected;1;4;;@Override protected DetectionRule doParseInstance(XContentParser parser) {     return DetectionRule.PARSER.apply(parser, null).build(). }
false;private,static;1;3;;private static List<RuleCondition> createCondition(double value) {     return Collections.singletonList(new RuleCondition(RuleCondition.AppliesTo.ACTUAL, Operator.GT, value)). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return false. }
