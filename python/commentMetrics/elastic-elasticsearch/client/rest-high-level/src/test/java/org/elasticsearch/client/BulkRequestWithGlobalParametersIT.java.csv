commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@SuppressWarnings("unchecked") public void testGlobalPipelineOnBulkRequest() throws IOException {     createFieldAddingPipleine("xyz", "fieldNameXYZ", "valueXYZ").     BulkRequest request = new BulkRequest().     request.add(new IndexRequest("test").id("1").source(XContentType.JSON, "field", "bulk1")).     request.add(new IndexRequest("test").id("2").source(XContentType.JSON, "field", "bulk2")).     request.pipeline("xyz").     bulk(request).     Iterable<SearchHit> hits = searchAll("test").     assertThat(hits, containsInAnyOrder(hasId("1"), hasId("2"))).     assertThat(hits, everyItem(hasProperty(fieldFromSource("fieldNameXYZ"), equalTo("valueXYZ")))). }
false;public;0;20;;public void testPipelineOnRequestOverridesGlobalPipeline() throws IOException {     createFieldAddingPipleine("globalId", "fieldXYZ", "valueXYZ").     createFieldAddingPipleine("perIndexId", "someNewField", "someValue").     BulkRequest request = new BulkRequest().     request.pipeline("globalId").     request.add(new IndexRequest("test").id("1").source(XContentType.JSON, "field", "bulk1").setPipeline("perIndexId")).     request.add(new IndexRequest("test").id("2").source(XContentType.JSON, "field", "bulk2").setPipeline("perIndexId")).     bulk(request).     Iterable<SearchHit> hits = searchAll("test").     assertThat(hits, everyItem(hasProperty(fieldFromSource("someNewField"), equalTo("someValue")))).     // global pipeline was not applied     assertThat(hits, everyItem(hasProperty(fieldFromSource("fieldXYZ"), nullValue()))). }
false;public;0;25;;@SuppressWarnings("unchecked") public void testMixPipelineOnRequestAndGlobal() throws IOException {     createFieldAddingPipleine("globalId", "fieldXYZ", "valueXYZ").     createFieldAddingPipleine("perIndexId", "someNewField", "someValue").     // tag::bulk-request-mix-pipeline     BulkRequest request = new BulkRequest().     request.pipeline("globalId").     request.add(new IndexRequest("test").id("1").source(XContentType.JSON, "field", "bulk1").setPipeline(// <1>     "perIndexId")).     request.add(new IndexRequest("test").id("2").source(XContentType.JSON, "field", // <2>     "bulk2")).     // end::bulk-request-mix-pipeline     bulk(request).     Iterable<SearchHit> hits = searchAll("test").     assertThat(hits, containsInAnyOrder(both(hasId("1")).and(hasProperty(fieldFromSource("someNewField"), equalTo("someValue"))), both(hasId("2")).and(hasProperty(fieldFromSource("fieldXYZ"), equalTo("valueXYZ"))))). }
false;public;0;12;;public void testGlobalIndex() throws IOException {     BulkRequest request = new BulkRequest("global_index", null).     request.add(new IndexRequest().id("1").source(XContentType.JSON, "field", "bulk1")).     request.add(new IndexRequest().id("2").source(XContentType.JSON, "field", "bulk2")).     bulk(request).     Iterable<SearchHit> hits = searchAll("global_index").     assertThat(hits, everyItem(hasIndex("global_index"))). }
false;public;0;17;;@SuppressWarnings("unchecked") public void testIndexGlobalAndPerRequest() throws IOException {     BulkRequest request = new BulkRequest("global_index", null).     request.add(new IndexRequest("local_index").id("1").source(XContentType.JSON, "field", "bulk1")).     request.add(// will take global index     new IndexRequest().id("2").source(XContentType.JSON, "field", "bulk2")).     bulk(request).     Iterable<SearchHit> hits = searchAll("local_index", "global_index").     assertThat(hits, containsInAnyOrder(both(hasId("1")).and(hasIndex("local_index")), both(hasId("2")).and(hasIndex("global_index")))). }
false;public;0;12;;public void testGlobalType() throws IOException {     BulkRequest request = new BulkRequest(null, "global_type").     request.add(new IndexRequest("index").id("1").source(XContentType.JSON, "field", "bulk1")).     request.add(new IndexRequest("index").id("2").source(XContentType.JSON, "field", "bulk2")).     bulkWithTypes(request).     Iterable<SearchHit> hits = searchAll("index").     assertThat(hits, everyItem(hasType("global_type"))). }
false;public;0;17;;@SuppressWarnings("unchecked") public void testTypeGlobalAndPerRequest() throws IOException {     BulkRequest request = new BulkRequest(null, "global_type").     request.add(new IndexRequest("index1", "local_type", "1").source(XContentType.JSON, "field", "bulk1")).     request.add(// will take global type     new IndexRequest("index2").id("2").source(XContentType.JSON, "field", "bulk2")).     bulkWithTypes(request).     Iterable<SearchHit> hits = searchAll("index1", "index2").     assertThat(hits, containsInAnyOrder(both(hasId("1")).and(hasType("local_type")), both(hasId("2")).and(hasType("global_type")))). }
false;public;0;17;;@SuppressWarnings("unchecked") public void testGlobalRouting() throws IOException {     createIndexWithMultipleShards("index").     BulkRequest request = new BulkRequest(null).     request.add(new IndexRequest("index").id("1").source(XContentType.JSON, "field", "bulk1")).     request.add(new IndexRequest("index").id("2").source(XContentType.JSON, "field", "bulk1")).     request.routing("1").     bulk(request).     Iterable<SearchHit> emptyHits = searchAll(new SearchRequest("index").routing("xxx")).     assertThat(emptyHits, is(emptyIterable())).     Iterable<SearchHit> hits = searchAll(new SearchRequest("index").routing("1")).     assertThat(hits, containsInAnyOrder(hasId("1"), hasId("2"))). }
false;public;0;15;;@SuppressWarnings("unchecked") public void testMixLocalAndGlobalRouting() throws IOException {     BulkRequest request = new BulkRequest(null).     request.routing("globalRouting").     request.add(new IndexRequest("index").id("1").source(XContentType.JSON, "field", "bulk1")).     request.add(new IndexRequest("index").id("2").routing("localRouting").source(XContentType.JSON, "field", "bulk1")).     bulk(request).     Iterable<SearchHit> hits = searchAll(new SearchRequest("index").routing("globalRouting", "localRouting")).     assertThat(hits, containsInAnyOrder(hasId("1"), hasId("2"))). }
false;public;0;12;;public void testGlobalIndexNoTypes() throws IOException {     BulkRequest request = new BulkRequest("global_index").     request.add(new IndexRequest().id("1").source(XContentType.JSON, "field", "bulk1")).     request.add(new IndexRequest().id("2").source(XContentType.JSON, "field", "bulk2")).     bulk(request).     Iterable<SearchHit> hits = searchAll("global_index").     assertThat(hits, everyItem(hasIndex("global_index"))). }
false;private;1;6;;private BulkResponse bulkWithTypes(BulkRequest request) throws IOException {     BulkResponse bulkResponse = execute(request, highLevelClient()::bulk, highLevelClient()::bulkAsync, expectWarnings(RestBulkAction.TYPES_DEPRECATION_MESSAGE)).     assertFalse(bulkResponse.hasFailures()).     return bulkResponse. }
false;private;1;5;;private BulkResponse bulk(BulkRequest request) throws IOException {     BulkResponse bulkResponse = execute(request, highLevelClient()::bulk, highLevelClient()::bulkAsync, RequestOptions.DEFAULT).     assertFalse(bulkResponse.hasFailures()).     return bulkResponse. }
false;private,static;1;4;;@SuppressWarnings("unchecked") private static <T> Function<SearchHit, T> fieldFromSource(String fieldName) {     return (response) -> (T) response.getSourceAsMap().get(fieldName). }
