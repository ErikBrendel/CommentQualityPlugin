commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;public void testEquals_GivenSameObject() {     Quantiles quantiles = new Quantiles("foo", new Date(0L), "foo").     assertTrue(quantiles.equals(quantiles)). }
false;public;0;4;;public void testEquals_GivenDifferentClassObject() {     Quantiles quantiles = new Quantiles("foo", new Date(0L), "foo").     assertFalse(quantiles.equals("not a quantiles object")). }
false;public;0;8;;public void testEquals_GivenEqualQuantilesObject() {     Quantiles quantiles1 = new Quantiles("foo", new Date(0L), "foo").     Quantiles quantiles2 = new Quantiles("foo", new Date(0L), "foo").     assertTrue(quantiles1.equals(quantiles2)).     assertTrue(quantiles2.equals(quantiles1)). }
false;public;0;8;;public void testEquals_GivenDifferentState() {     Quantiles quantiles1 = new Quantiles("foo", new Date(0L), "bar1").     Quantiles quantiles2 = new Quantiles("foo", new Date(0L), "bar2").     assertFalse(quantiles1.equals(quantiles2)).     assertFalse(quantiles2.equals(quantiles1)). }
false;public;0;7;;public void testHashCode_GivenEqualObject() {     Quantiles quantiles1 = new Quantiles("foo", new Date(0L), "foo").     Quantiles quantiles2 = new Quantiles("foo", new Date(0L), "foo").     assertEquals(quantiles1.hashCode(), quantiles2.hashCode()). }
false;protected;0;4;;@Override protected Quantiles createTestInstance() {     return createRandomized(). }
false;public,static;0;5;;public static Quantiles createRandomized() {     return new Quantiles(randomAlphaOfLengthBetween(1, 20), new Date(TimeValue.parseTimeValue(randomTimeValue(), "test").millis()), randomAlphaOfLengthBetween(0, 1000)). }
false;protected;1;4;;@Override protected Quantiles doParseInstance(XContentParser parser) {     return Quantiles.PARSER.apply(parser, null). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return true. }
