commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;public void testFromXContent() throws IOException {     ApiKey apiKeyInfo1 = createApiKeyInfo("name1", "id-1", Instant.ofEpochMilli(100000L), Instant.ofEpochMilli(10000000L), false, "user-a", "realm-x").     ApiKey apiKeyInfo2 = createApiKeyInfo("name2", "id-2", Instant.ofEpochMilli(100000L), Instant.ofEpochMilli(10000000L), true, "user-b", "realm-y").     GetApiKeyResponse response = new GetApiKeyResponse(Arrays.asList(apiKeyInfo1, apiKeyInfo2)).     final XContentType xContentType = randomFrom(XContentType.values()).     final XContentBuilder builder = XContentFactory.contentBuilder(xContentType).     toXContent(response, builder).     BytesReference xContent = BytesReference.bytes(builder).     GetApiKeyResponse responseParsed = GetApiKeyResponse.fromXContent(createParser(xContentType.xContent(), xContent)).     assertThat(responseParsed, equalTo(response)). }
false;private;2;19;;private void toXContent(GetApiKeyResponse response, final XContentBuilder builder) throws IOException {     builder.startObject().     builder.startArray("api_keys").     for (ApiKey apiKey : response.getApiKeyInfos()) {         builder.startObject().field("id", apiKey.getId()).field("name", apiKey.getName()).field("creation", apiKey.getCreation().toEpochMilli()).         if (apiKey.getExpiration() != null) {             builder.field("expiration", apiKey.getExpiration().toEpochMilli()).         }         builder.field("invalidated", apiKey.isInvalidated()).field("username", apiKey.getUsername()).field("realm", apiKey.getRealm()).         builder.endObject().     }     builder.endArray().     builder.endObject(). }
false;public;0;12;;public void testEqualsHashCode() {     ApiKey apiKeyInfo1 = createApiKeyInfo("name1", "id-1", Instant.ofEpochMilli(100000L), Instant.ofEpochMilli(10000000L), false, "user-a", "realm-x").     GetApiKeyResponse response = new GetApiKeyResponse(Arrays.asList(apiKeyInfo1)).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(response, (original) -> {         return new GetApiKeyResponse(original.getApiKeyInfos()).     }).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(response, (original) -> {         return new GetApiKeyResponse(original.getApiKeyInfos()).     }, GetApiKeyResponseTests::mutateTestItem). }
false;private,static;1;10;;private static GetApiKeyResponse mutateTestItem(GetApiKeyResponse original) {     ApiKey apiKeyInfo = createApiKeyInfo("name2", "id-2", Instant.ofEpochMilli(100000L), Instant.ofEpochMilli(10000000L), true, "user-b", "realm-y").     switch(randomIntBetween(0, 2)) {         case 0:             return new GetApiKeyResponse(Arrays.asList(apiKeyInfo)).         default:             return new GetApiKeyResponse(Arrays.asList(apiKeyInfo)).     } }
false;private,static;7;4;;private static ApiKey createApiKeyInfo(String name, String id, Instant creation, Instant expiration, boolean invalidated, String username, String realm) {     return new ApiKey(name, id, creation, expiration, invalidated, username, realm). }
