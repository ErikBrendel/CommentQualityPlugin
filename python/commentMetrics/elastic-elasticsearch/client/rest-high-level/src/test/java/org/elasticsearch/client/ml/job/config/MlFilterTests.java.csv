commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;public static MlFilter createTestFilter() {     return new MlFilterTests().createTestInstance(). }
false;protected;0;4;;@Override protected MlFilter createTestInstance() {     return createRandom(). }
false;public,static;0;3;;public static MlFilter createRandom() {     return createRandomBuilder(randomAlphaOfLength(10)).build(). }
false;public,static;1;13;;public static MlFilter.Builder createRandomBuilder(String filterId) {     String description = null.     if (randomBoolean()) {         description = randomAlphaOfLength(20).     }     int size = randomInt(10).     SortedSet<String> items = new TreeSet<>().     for (int i = 0. i < size. i++) {         items.add(randomAlphaOfLengthBetween(1, 20)).     }     return MlFilter.builder(filterId).setDescription(description).setItems(items). }
false;protected;1;4;;@Override protected MlFilter doParseInstance(XContentParser parser) {     return MlFilter.PARSER.apply(parser, null).build(). }
false;public;0;3;;public void testNullId() {     expectThrows(NullPointerException.class, () -> MlFilter.builder(null).build()). }
false;public;0;4;;public void testNullItems() {     expectThrows(NullPointerException.class, () -> MlFilter.builder(randomAlphaOfLength(10)).setItems((SortedSet<String>) null).build()). }
false;public;0;4;;public void testItemsAreSorted() {     MlFilter filter = MlFilter.builder("foo").setItems("c", "b", "a").build().     assertThat(filter.getItems(), contains("a", "b", "c")). }
false;public;0;4;;public void testGetItemsReturnsUnmodifiable() {     MlFilter filter = MlFilter.builder("foo").setItems("c", "b", "a").build().     expectThrows(UnsupportedOperationException.class, () -> filter.getItems().add("x")). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return true. }
