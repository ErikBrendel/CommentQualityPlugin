commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected RuleCondition createTestInstance() {     return createRandom(). }
false;public,static;0;5;;public static RuleCondition createRandom() {     RuleCondition.AppliesTo appliesTo = randomFrom(RuleCondition.AppliesTo.values()).     Operator operator = randomFrom(Operator.LT, Operator.LTE, Operator.GT, Operator.GTE).     return new RuleCondition(appliesTo, operator, randomDouble()). }
false;protected;1;4;;@Override protected RuleCondition doParseInstance(XContentParser parser) {     return RuleCondition.PARSER.apply(parser, null). }
false;public;0;4;;public void testEqualsGivenSameObject() {     RuleCondition condition = createRandom().     assertTrue(condition.equals(condition)). }
false;public;0;3;;public void testEqualsGivenString() {     assertFalse(createRandom().equals("a string")). }
false;public;0;6;;public void testCreateTimeBased() {     RuleCondition timeBased = RuleCondition.createTime(Operator.GTE, 100L).     assertEquals(RuleCondition.AppliesTo.TIME, timeBased.getAppliesTo()).     assertEquals(Operator.GTE, timeBased.getOperator()).     assertEquals(100.0, timeBased.getValue(), 0.000001). }
false;public;0;10;;public void testAppliesToFromString() {     assertEquals(RuleCondition.AppliesTo.ACTUAL, RuleCondition.AppliesTo.fromString("actual")).     assertEquals(RuleCondition.AppliesTo.ACTUAL, RuleCondition.AppliesTo.fromString("ACTUAL")).     assertEquals(RuleCondition.AppliesTo.TYPICAL, RuleCondition.AppliesTo.fromString("typical")).     assertEquals(RuleCondition.AppliesTo.TYPICAL, RuleCondition.AppliesTo.fromString("TYPICAL")).     assertEquals(RuleCondition.AppliesTo.DIFF_FROM_TYPICAL, RuleCondition.AppliesTo.fromString("diff_from_typical")).     assertEquals(RuleCondition.AppliesTo.DIFF_FROM_TYPICAL, RuleCondition.AppliesTo.fromString("DIFF_FROM_TYPICAL")).     assertEquals(RuleCondition.AppliesTo.TIME, RuleCondition.AppliesTo.fromString("time")).     assertEquals(RuleCondition.AppliesTo.TIME, RuleCondition.AppliesTo.fromString("TIME")). }
false;public;0;6;;public void testAppliesToToString() {     assertEquals("actual", RuleCondition.AppliesTo.ACTUAL.toString()).     assertEquals("typical", RuleCondition.AppliesTo.TYPICAL.toString()).     assertEquals("diff_from_typical", RuleCondition.AppliesTo.DIFF_FROM_TYPICAL.toString()).     assertEquals("time", RuleCondition.AppliesTo.TIME.toString()). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return true. }
