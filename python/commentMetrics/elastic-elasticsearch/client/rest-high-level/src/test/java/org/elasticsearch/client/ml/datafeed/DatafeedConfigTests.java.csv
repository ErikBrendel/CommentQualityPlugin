commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected DatafeedConfig createTestInstance() {     return createRandom(). }
false;public,static;0;3;;public static DatafeedConfig createRandom() {     return createRandomBuilder().build(). }
false;public,static;0;60;;public static DatafeedConfig.Builder createRandomBuilder() {     long bucketSpanMillis = 3600000.     DatafeedConfig.Builder builder = constructBuilder().     builder.setIndices(randomStringList(1, 10)).     if (randomBoolean()) {         try {             builder.setQuery(QueryBuilders.termQuery(randomAlphaOfLength(10), randomAlphaOfLength(10))).         } catch (IOException e) {             throw new RuntimeException("Failed to serialize query", e).         }     }     boolean addScriptFields = randomBoolean().     if (addScriptFields) {         int scriptsSize = randomInt(3).         List<ScriptField> scriptFields = new ArrayList<>(scriptsSize).         for (int scriptIndex = 0. scriptIndex < scriptsSize. scriptIndex++) {             scriptFields.add(new ScriptField(randomAlphaOfLength(10), mockScript(randomAlphaOfLength(10)), randomBoolean())).         }         builder.setScriptFields(scriptFields).     }     Long aggHistogramInterval = null.     if (randomBoolean()) {         // can only test with a single agg as the xcontent order gets randomized by test base class and then         // the actual xcontent isn't the same and test fail.         // Testing with a single agg is ok as we don't have special list xcontent logic         AggregatorFactories.Builder aggs = new AggregatorFactories.Builder().         aggHistogramInterval = randomNonNegativeLong().         aggHistogramInterval = aggHistogramInterval > bucketSpanMillis ? bucketSpanMillis : aggHistogramInterval.         aggHistogramInterval = aggHistogramInterval <= 0 ? 1 : aggHistogramInterval.         MaxAggregationBuilder maxTime = AggregationBuilders.max("time").field("time").         aggs.addAggregator(AggregationBuilders.dateHistogram("buckets").interval(aggHistogramInterval).subAggregation(maxTime).field("time")).         try {             builder.setAggregations(aggs).         } catch (IOException e) {             throw new RuntimeException("failed to serialize aggs", e).         }     }     if (randomBoolean()) {         builder.setScrollSize(randomIntBetween(0, Integer.MAX_VALUE)).     }     if (randomBoolean()) {         if (aggHistogramInterval == null) {             builder.setFrequency(TimeValue.timeValueSeconds(randomIntBetween(1, 1_000_000))).         } else {             builder.setFrequency(TimeValue.timeValueMillis(randomIntBetween(1, 5) * aggHistogramInterval)).         }     }     if (randomBoolean()) {         builder.setQueryDelay(TimeValue.timeValueMillis(randomIntBetween(1, 1_000_000))).     }     if (randomBoolean()) {         builder.setChunkingConfig(ChunkingConfigTests.createRandomizedChunk()).     }     if (randomBoolean()) {         builder.setDelayedDataCheckConfig(DelayedDataCheckConfigTests.createRandomizedConfig()).     }     return builder. }
false;public,static;2;8;;public static List<String> randomStringList(int min, int max) {     int size = scaledRandomIntBetween(min, max).     List<String> list = new ArrayList<>().     for (int i = 0. i < size. i++) {         list.add(randomAlphaOfLength(10)).     }     return list. }
false;protected;1;4;;@Override protected DatafeedConfig doParseInstance(XContentParser parser) {     return DatafeedConfig.PARSER.apply(parser, null).build(). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return false. }
false;public;0;6;;public void testFutureMetadataParse() throws IOException {     XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, FUTURE_DATAFEED).     // Unlike the config version of this test, the metadata parser should tolerate the unknown future field     assertNotNull(DatafeedConfig.PARSER.apply(parser, null).build()). }
false;public;0;7;;public void testCopyConstructor() {     for (int i = 0. i < NUMBER_OF_TEST_RUNS. i++) {         DatafeedConfig datafeedConfig = createTestInstance().         DatafeedConfig copy = new DatafeedConfig.Builder(datafeedConfig).build().         assertEquals(datafeedConfig, copy).     } }
false;public;0;3;;public void testCheckValid_GivenNullIdInConstruction() {     expectThrows(NullPointerException.class, () -> new DatafeedConfig.Builder(null, null)). }
false;public;0;3;;public void testCheckValid_GivenNullJobId() {     expectThrows(NullPointerException.class, () -> new DatafeedConfig.Builder(randomValidDatafeedId(), null)). }
false;public,static;0;4;;public static String randomValidDatafeedId() {     CodepointSetGenerator generator = new CodepointSetGenerator("abcdefghijklmnopqrstuvwxyz".toCharArray()).     return generator.ofCodePointsLength(random(), 10, 10). }
false;private,static;0;3;;private static DatafeedConfig.Builder constructBuilder() {     return new DatafeedConfig.Builder(randomValidDatafeedId(), randomAlphaOfLength(10)). }
