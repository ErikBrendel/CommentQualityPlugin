commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;public void testCancelTasks() {     CancelTasksRequest request = new CancelTasksRequest().     Map<String, String> expectedParams = new HashMap<>().     TaskId taskId = new TaskId(randomAlphaOfLength(5), randomNonNegativeLong()).     TaskId parentTaskId = new TaskId(randomAlphaOfLength(5), randomNonNegativeLong()).     request.setTaskId(taskId).     request.setParentTaskId(parentTaskId).     expectedParams.put("task_id", taskId.toString()).     expectedParams.put("parent_task_id", parentTaskId.toString()).     Request httpRequest = TasksRequestConverters.cancelTasks(request).     assertThat(httpRequest, notNullValue()).     assertThat(httpRequest.getMethod(), equalTo(HttpPost.METHOD_NAME)).     assertThat(httpRequest.getEntity(), nullValue()).     assertThat(httpRequest.getEndpoint(), equalTo("/_tasks/_cancel")).     assertThat(httpRequest.getParameters(), equalTo(expectedParams)). }
false;public;0;58;;public void testListTasks() {     {         ListTasksRequest request = new ListTasksRequest().         Map<String, String> expectedParams = new HashMap<>().         if (randomBoolean()) {             request.setDetailed(randomBoolean()).             if (request.getDetailed()) {                 expectedParams.put("detailed", "true").             }         }         request.setWaitForCompletion(randomBoolean()).         expectedParams.put("wait_for_completion", Boolean.toString(request.getWaitForCompletion())).         if (randomBoolean()) {             String timeout = randomTimeValue().             request.setTimeout(timeout).             expectedParams.put("timeout", timeout).         }         if (randomBoolean()) {             if (randomBoolean()) {                 TaskId taskId = new TaskId(randomAlphaOfLength(5), randomNonNegativeLong()).                 request.setParentTaskId(taskId).                 expectedParams.put("parent_task_id", taskId.toString()).             } else {                 request.setParentTask(TaskId.EMPTY_TASK_ID).             }         }         if (randomBoolean()) {             String[] nodes = generateRandomStringArray(10, 8, false).             request.setNodes(nodes).             if (nodes.length > 0) {                 expectedParams.put("nodes", String.join(",", nodes)).             }         }         if (randomBoolean()) {             String[] actions = generateRandomStringArray(10, 8, false).             request.setActions(actions).             if (actions.length > 0) {                 expectedParams.put("actions", String.join(",", actions)).             }         }         expectedParams.put("group_by", "none").         Request httpRequest = TasksRequestConverters.listTasks(request).         assertThat(httpRequest, notNullValue()).         assertThat(httpRequest.getMethod(), equalTo(HttpGet.METHOD_NAME)).         assertThat(httpRequest.getEntity(), nullValue()).         assertThat(httpRequest.getEndpoint(), equalTo("/_tasks")).         assertThat(httpRequest.getParameters(), equalTo(expectedParams)).     }     {         ListTasksRequest request = new ListTasksRequest().         request.setTaskId(new TaskId(randomAlphaOfLength(5), randomNonNegativeLong())).         IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> TasksRequestConverters.listTasks(request)).         assertEquals("TaskId cannot be used for list tasks request", exception.getMessage()).     } }
