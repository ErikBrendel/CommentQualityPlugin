commented;modifiers;parameterAmount;loc;comment;code
false;public;0;26;;public void testFromXContent() throws IOException {     final String json = "{\n" + "  \"app02\": {\n" + "    \"all\": {\n" + "      \"created\": true\n" + "    }\n" + "  },\n" + "  \"app01\": {\n" + "    \"read\": {\n" + "      \"created\": false\n" + "    },\n" + "    \"write\": {\n" + "      \"created\": true\n" + "    }\n" + "  }\n" + "}".     final PutPrivilegesResponse putPrivilegesResponse = PutPrivilegesResponse.fromXContent(createParser(XContentType.JSON.xContent(), json)).     assertThat(putPrivilegesResponse.wasCreated("app02", "all"), is(true)).     assertThat(putPrivilegesResponse.wasCreated("app01", "read"), is(false)).     assertThat(putPrivilegesResponse.wasCreated("app01", "write"), is(true)).     expectThrows(IllegalArgumentException.class, () -> putPrivilegesResponse.wasCreated("unknown-app", "unknown-priv")).     expectThrows(IllegalArgumentException.class, () -> putPrivilegesResponse.wasCreated("app01", "unknown-priv")). }
false;public;0;12;;public void testGetStatusFailsForUnknownApplicationOrPrivilegeName() {     final PutPrivilegesResponse putPrivilegesResponse = new PutPrivilegesResponse(Collections.singletonMap("app-1", Collections.singletonMap("priv", true))).     final boolean invalidAppName = randomBoolean().     final String applicationName = (invalidAppName) ? randomAlphaOfLength(4) : "app-1".     final String privilegeName = randomAlphaOfLength(4).     final IllegalArgumentException ile = expectThrows(IllegalArgumentException.class, () -> putPrivilegesResponse.wasCreated(applicationName, privilegeName)).     assertThat(ile.getMessage(), equalTo("application name or privilege name not found in the response")). }
false;public;0;12;;public void testGetStatusFailsForNullOrEmptyApplicationOrPrivilegeName() {     final PutPrivilegesResponse putPrivilegesResponse = new PutPrivilegesResponse(Collections.singletonMap("app-1", Collections.singletonMap("priv", true))).     final boolean nullOrEmptyAppName = randomBoolean().     final String applicationName = (nullOrEmptyAppName) ? randomFrom(Arrays.asList("", "    ", null)) : "app-1".     final String privilegeName = randomFrom(Arrays.asList("", "    ", null)).     final IllegalArgumentException ile = expectThrows(IllegalArgumentException.class, () -> putPrivilegesResponse.wasCreated(applicationName, privilegeName)).     assertThat(ile.getMessage(), (nullOrEmptyAppName ? equalTo("application name is required") : equalTo("privilege name is required"))). }
