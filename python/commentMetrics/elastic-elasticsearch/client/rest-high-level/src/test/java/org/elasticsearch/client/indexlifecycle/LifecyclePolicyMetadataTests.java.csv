commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected LifecyclePolicyMetadata createTestInstance() {     policyName = randomAlphaOfLengthBetween(5, 20).     LifecyclePolicy policy = createRandomPolicy(policyName).     return new LifecyclePolicyMetadata(policy, randomLong(), randomLong()). }
false;protected;1;4;;@Override protected LifecyclePolicyMetadata doParseInstance(XContentParser parser) throws IOException {     return LifecyclePolicyMetadata.parse(parser, policyName). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return true. }
false;protected;0;13;;@Override protected Predicate<String> getRandomFieldsExcludeFilter() {     return (field) -> field.endsWith(".phases") || // these are all meant to be maps of strings, so complex objects will confuse the parser     field.endsWith(".include") || field.endsWith(".exclude") || field.endsWith(".require") || // actions are meant to be a list of LifecycleAction parsable entries only     field.endsWith(".actions"). }
false;protected;0;16;;@Override protected NamedXContentRegistry xContentRegistry() {     List<NamedXContentRegistry.Entry> entries = new ArrayList<>(ClusterModule.getNamedXWriteables()).     entries.addAll(Arrays.asList(new NamedXContentRegistry.Entry(LifecycleAction.class, new ParseField(AllocateAction.NAME), AllocateAction::parse), new NamedXContentRegistry.Entry(LifecycleAction.class, new ParseField(DeleteAction.NAME), DeleteAction::parse), new NamedXContentRegistry.Entry(LifecycleAction.class, new ParseField(ForceMergeAction.NAME), ForceMergeAction::parse), new NamedXContentRegistry.Entry(LifecycleAction.class, new ParseField(ReadOnlyAction.NAME), ReadOnlyAction::parse), new NamedXContentRegistry.Entry(LifecycleAction.class, new ParseField(RolloverAction.NAME), RolloverAction::parse), new NamedXContentRegistry.Entry(LifecycleAction.class, new ParseField(ShrinkAction.NAME), ShrinkAction::parse), new NamedXContentRegistry.Entry(LifecycleAction.class, new ParseField(FreezeAction.NAME), FreezeAction::parse), new NamedXContentRegistry.Entry(LifecycleAction.class, new ParseField(SetPriorityAction.NAME), SetPriorityAction::parse), new NamedXContentRegistry.Entry(LifecycleAction.class, new ParseField(UnfollowAction.NAME), UnfollowAction::parse))).     return new NamedXContentRegistry(entries). }
