commented;modifiers;parameterAmount;loc;comment;code
false;public;0;35;;public void testPutPipeline() throws IOException {     RestHighLevelClient client = highLevelClient().     {         // tag::put-pipeline-request         String source = "{\"description\":\"my set of processors\"," + "\"processors\":[{\"set\":{\"field\":\"foo\",\"value\":\"bar\"}}]}".         PutPipelineRequest request = new PutPipelineRequest(// <1>         "my-pipeline-id", // <2>         new BytesArray(source.getBytes(StandardCharsets.UTF_8)), // <3>         XContentType.JSON).         // end::put-pipeline-request         // tag::put-pipeline-request-timeout         // <1>         request.timeout(TimeValue.timeValueMinutes(2)).         // <2>         request.timeout("2m").         // end::put-pipeline-request-timeout         // tag::put-pipeline-request-masterTimeout         // <1>         request.masterNodeTimeout(TimeValue.timeValueMinutes(1)).         // <2>         request.masterNodeTimeout("1m").         // end::put-pipeline-request-masterTimeout         // tag::put-pipeline-execute         // <1>         AcknowledgedResponse response = client.ingest().putPipeline(request, RequestOptions.DEFAULT).         // end::put-pipeline-execute         // tag::put-pipeline-response         // <1>         boolean acknowledged = response.isAcknowledged().         // end::put-pipeline-response         assertTrue(acknowledged).     } }
false;public;1;4;;@Override public void onResponse(AcknowledgedResponse response) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;39;;public void testPutPipelineAsync() throws Exception {     RestHighLevelClient client = highLevelClient().     {         String source = "{\"description\":\"my set of processors\"," + "\"processors\":[{\"set\":{\"field\":\"foo\",\"value\":\"bar\"}}]}".         PutPipelineRequest request = new PutPipelineRequest("my-pipeline-id", new BytesArray(source.getBytes(StandardCharsets.UTF_8)), XContentType.JSON).         // tag::put-pipeline-execute-listener         ActionListener<AcknowledgedResponse> listener = new ActionListener<AcknowledgedResponse>() {              @Override             public void onResponse(AcknowledgedResponse response) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::put-pipeline-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::put-pipeline-execute-async         // <1>         client.ingest().putPipelineAsync(request, RequestOptions.DEFAULT, listener).         // end::put-pipeline-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;0;33;;@SuppressWarnings("unused") public void testGetPipeline() throws IOException {     RestHighLevelClient client = highLevelClient().     {         createPipeline("my-pipeline-id").     }     {         // tag::get-pipeline-request         // <1>         GetPipelineRequest request = new GetPipelineRequest("my-pipeline-id").         // end::get-pipeline-request         // tag::get-pipeline-request-masterTimeout         // <1>         request.masterNodeTimeout(TimeValue.timeValueMinutes(1)).         // <2>         request.masterNodeTimeout("1m").         // end::get-pipeline-request-masterTimeout         // tag::get-pipeline-execute         // <1>         GetPipelineResponse response = client.ingest().getPipeline(request, RequestOptions.DEFAULT).         // end::get-pipeline-execute         // tag::get-pipeline-response         // <1>         boolean successful = response.isFound().         // <2>         List<PipelineConfiguration> pipelines = response.pipelines().         for (PipelineConfiguration pipeline : pipelines) {             // <3>             Map<String, Object> config = pipeline.getConfigAsMap().         }         // end::get-pipeline-response         assertTrue(successful).     } }
false;public;1;4;;@Override public void onResponse(GetPipelineResponse response) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;36;;public void testGetPipelineAsync() throws Exception {     RestHighLevelClient client = highLevelClient().     {         createPipeline("my-pipeline-id").     }     {         GetPipelineRequest request = new GetPipelineRequest("my-pipeline-id").         // tag::get-pipeline-execute-listener         ActionListener<GetPipelineResponse> listener = new ActionListener<GetPipelineResponse>() {              @Override             public void onResponse(GetPipelineResponse response) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::get-pipeline-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::get-pipeline-execute-async         // <1>         client.ingest().getPipelineAsync(request, RequestOptions.DEFAULT, listener).         // end::get-pipeline-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;0;32;;public void testDeletePipeline() throws IOException {     RestHighLevelClient client = highLevelClient().     {         createPipeline("my-pipeline-id").     }     {         // tag::delete-pipeline-request         // <1>         DeletePipelineRequest request = new DeletePipelineRequest("my-pipeline-id").         // end::delete-pipeline-request         // tag::delete-pipeline-request-timeout         // <1>         request.timeout(TimeValue.timeValueMinutes(2)).         // <2>         request.timeout("2m").         // end::delete-pipeline-request-timeout         // tag::delete-pipeline-request-masterTimeout         // <1>         request.masterNodeTimeout(TimeValue.timeValueMinutes(1)).         // <2>         request.masterNodeTimeout("1m").         // end::delete-pipeline-request-masterTimeout         // tag::delete-pipeline-execute         // <1>         AcknowledgedResponse response = client.ingest().deletePipeline(request, RequestOptions.DEFAULT).         // end::delete-pipeline-execute         // tag::delete-pipeline-response         // <1>         boolean acknowledged = response.isAcknowledged().         // end::delete-pipeline-response         assertTrue(acknowledged).     } }
false;public;1;4;;@Override public void onResponse(AcknowledgedResponse response) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;36;;public void testDeletePipelineAsync() throws Exception {     RestHighLevelClient client = highLevelClient().     {         createPipeline("my-pipeline-id").     }     {         DeletePipelineRequest request = new DeletePipelineRequest("my-pipeline-id").         // tag::delete-pipeline-execute-listener         ActionListener<AcknowledgedResponse> listener = new ActionListener<AcknowledgedResponse>() {              @Override             public void onResponse(AcknowledgedResponse response) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::delete-pipeline-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::delete-pipeline-execute-async         // <1>         client.ingest().deletePipelineAsync(request, RequestOptions.DEFAULT, listener).         // end::delete-pipeline-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;0;57;;public void testSimulatePipeline() throws IOException {     RestHighLevelClient client = highLevelClient().     {         // tag::simulate-pipeline-request         String source = "{\"" + "pipeline\":{" + "\"description\":\"_description\"," + "\"processors\":[{\"set\":{\"field\":\"field2\",\"value\":\"_value\"}}]" + "}," + "\"docs\":[" + "{\"_index\":\"index\",\"_id\":\"id\",\"_source\":{\"foo\":\"bar\"}}," + "{\"_index\":\"index\",\"_id\":\"id\",\"_source\":{\"foo\":\"rab\"}}" + "]" + "}".         SimulatePipelineRequest request = new SimulatePipelineRequest(// <1>         new BytesArray(source.getBytes(StandardCharsets.UTF_8)), // <2>         XContentType.JSON).         // end::simulate-pipeline-request         // tag::simulate-pipeline-request-pipeline-id         // <1>         request.setId("my-pipeline-id").         // end::simulate-pipeline-request-pipeline-id         // For testing we set this back to null         request.setId(null).         // tag::simulate-pipeline-request-verbose         // <1>         request.setVerbose(true).         // end::simulate-pipeline-request-verbose         // tag::simulate-pipeline-execute         // <1>         SimulatePipelineResponse response = client.ingest().simulate(request, RequestOptions.DEFAULT).         // tag::simulate-pipeline-response         for (SimulateDocumentResult result : response.getResults()) {             // <1>             if (request.isVerbose()) {                 assert result instanceof SimulateDocumentVerboseResult.                 // <2>                 SimulateDocumentVerboseResult verboseResult = (SimulateDocumentVerboseResult) result.                 for (SimulateProcessorResult processorResult : verboseResult.getProcessorResults()) {                     // <3>                     // <4>                     processorResult.getIngestDocument().                     // <5>                     processorResult.getFailure().                 }             } else {                 assert result instanceof SimulateDocumentBaseResult.                 // <6>                 SimulateDocumentBaseResult baseResult = (SimulateDocumentBaseResult) result.                 // <7>                 baseResult.getIngestDocument().                 // <8>                 baseResult.getFailure().             }         }         // end::simulate-pipeline-response         assert (response.getResults().size() > 0).     } }
false;public;1;4;;@Override public void onResponse(SimulatePipelineResponse response) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;46;;public void testSimulatePipelineAsync() throws Exception {     RestHighLevelClient client = highLevelClient().     {         String source = "{\"" + "pipeline\":{" + "\"description\":\"_description\"," + "\"processors\":[{\"set\":{\"field\":\"field2\",\"value\":\"_value\"}}]" + "}," + "\"docs\":[" + "{\"_index\":\"index\",\"_id\":\"id\",\"_source\":{\"foo\":\"bar\"}}," + "{\"_index\":\"index\",\"_id\":\"id\",\"_source\":{\"foo\":\"rab\"}}" + "]" + "}".         SimulatePipelineRequest request = new SimulatePipelineRequest(new BytesArray(source.getBytes(StandardCharsets.UTF_8)), XContentType.JSON).         // tag::simulate-pipeline-execute-listener         ActionListener<SimulatePipelineResponse> listener = new ActionListener<SimulatePipelineResponse>() {              @Override             public void onResponse(SimulatePipelineResponse response) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::simulate-pipeline-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::simulate-pipeline-execute-async         // <1>         client.ingest().simulateAsync(request, RequestOptions.DEFAULT, listener).         // end::simulate-pipeline-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
