commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public void testDeleteUserRequest() {     final String name = randomAlphaOfLength(10).     final RefreshPolicy refreshPolicy = randomFrom(RefreshPolicy.values()).     final DeleteUserRequest deleteUserRequest = new DeleteUserRequest(name, refreshPolicy).     assertThat(deleteUserRequest.getName(), equalTo(name)).     assertThat(deleteUserRequest.getRefreshPolicy(), equalTo(refreshPolicy)). }
false;public;0;5;;public void testDeleteUserRequestThrowsExceptionForNullName() {     final NullPointerException ile = expectThrows(NullPointerException.class, () -> new DeleteUserRequest(null, randomFrom(RefreshPolicy.values()))).     assertThat(ile.getMessage(), equalTo("user name is required")). }
false;public;0;5;;public void testDeleteUserRequestThrowsExceptionForNullRefreshPolicy() {     final NullPointerException ile = expectThrows(NullPointerException.class, () -> new DeleteUserRequest(randomAlphaOfLength(10), null)).     assertThat(ile.getMessage(), equalTo("refresh policy is required")). }
false;public;0;15;;public void testEqualsHashCode() {     final String name = randomAlphaOfLength(10).     final RefreshPolicy refreshPolicy = randomFrom(RefreshPolicy.values()).     final DeleteUserRequest deleteUserRequest = new DeleteUserRequest(name, refreshPolicy).     assertNotNull(deleteUserRequest).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(deleteUserRequest, (original) -> {         return new DeleteUserRequest(original.getName(), original.getRefreshPolicy()).     }).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(deleteUserRequest, (original) -> {         return new DeleteUserRequest(original.getName(), original.getRefreshPolicy()).     }, DeleteUserRequestTests::mutateTestItem). }
false;private,static;1;9;;private static DeleteUserRequest mutateTestItem(DeleteUserRequest original) {     if (randomBoolean()) {         return new DeleteUserRequest(randomAlphaOfLength(10), original.getRefreshPolicy()).     } else {         List<RefreshPolicy> values = Arrays.stream(RefreshPolicy.values()).filter(rp -> rp != original.getRefreshPolicy()).collect(Collectors.toList()).         return new DeleteUserRequest(original.getName(), randomFrom(values)).     } }
