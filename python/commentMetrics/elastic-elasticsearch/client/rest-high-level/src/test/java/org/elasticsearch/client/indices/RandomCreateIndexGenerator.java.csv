commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;15;/**  * Returns a random {@link CreateIndexRequest}.  *  * Randomizes the index name, the aliases, mappings and settings associated with the  * index. When present, the mappings make no mention of types.  */ ;/**  * Returns a random {@link CreateIndexRequest}.  *  * Randomizes the index name, the aliases, mappings and settings associated with the  * index. When present, the mappings make no mention of types.  */ public static CreateIndexRequest randomCreateIndexRequest() {     try {         // Create a random server request, and copy its contents into the HLRC request.         // Because client requests only accept typeless mappings, we must swap out the         // mapping definition for one that does not contain types.         org.elasticsearch.action.admin.indices.create.CreateIndexRequest serverRequest = org.elasticsearch.index.RandomCreateIndexGenerator.randomCreateIndexRequest().         return new CreateIndexRequest(serverRequest.index()).settings(serverRequest.settings()).aliases(serverRequest.aliases()).mapping(randomMapping()).     } catch (IOException e) {         throw new RuntimeException(e).     } }
true;public,static;0;7;/**  * Creates a random mapping, with no mention of types.  */ ;/**  * Creates a random mapping, with no mention of types.  */ public static XContentBuilder randomMapping() throws IOException {     XContentBuilder builder = XContentFactory.jsonBuilder().     builder.startObject().     org.elasticsearch.index.RandomCreateIndexGenerator.randomMappingFields(builder, true).     builder.endObject().     return builder. }
true;public,static;1;6;/**  * Sets random aliases to the provided {@link CreateIndexRequest}  */ ;/**  * Sets random aliases to the provided {@link CreateIndexRequest}  */ public static void randomAliases(CreateIndexRequest request) {     int aliasesNo = randomIntBetween(0, 2).     for (int i = 0. i < aliasesNo. i++) {         request.alias(randomAlias()).     } }
