commented;modifiers;parameterAmount;loc;comment;code
false;private;2;6;;private void toXContent(RemoveIndexLifecyclePolicyResponse response, XContentBuilder builder) throws IOException {     builder.startObject().     builder.field(RemoveIndexLifecyclePolicyResponse.HAS_FAILURES_FIELD.getPreferredName(), response.hasFailures()).     builder.field(RemoveIndexLifecyclePolicyResponse.FAILED_INDEXES_FIELD.getPreferredName(), response.getFailedIndexes()).     builder.endObject(). }
false;private;0;4;;private RemoveIndexLifecyclePolicyResponse createInstance() {     List<String> failedIndexes = Arrays.asList(generateRandomStringArray(20, 20, false)).     return new RemoveIndexLifecyclePolicyResponse(failedIndexes). }
false;private;1;3;;private RemoveIndexLifecyclePolicyResponse copyInstance(RemoveIndexLifecyclePolicyResponse req) {     return new RemoveIndexLifecyclePolicyResponse(new ArrayList<>(req.getFailedIndexes())). }
false;private;1;4;;private RemoveIndexLifecyclePolicyResponse mutateInstance(RemoveIndexLifecyclePolicyResponse req) {     return new RemoveIndexLifecyclePolicyResponse(randomValueOtherThan(req.getFailedIndexes(), () -> Arrays.asList(generateRandomStringArray(20, 20, false)))). }
false;public;0;9;;public void testFromXContent() throws IOException {     xContentTester(this::createParser, this::createInstance, this::toXContent, RemoveIndexLifecyclePolicyResponse::fromXContent).supportsUnknownFields(true).test(). }
false;public;0;5;;public void testNullFailedIndices() {     IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> new RemoveIndexLifecyclePolicyResponse(null)).     assertEquals("failed_indexes cannot be null", exception.getMessage()). }
false;public;0;14;;public void testHasFailures() {     RemoveIndexLifecyclePolicyResponse response = new RemoveIndexLifecyclePolicyResponse(new ArrayList<>()).     assertFalse(response.hasFailures()).     assertEquals(Collections.emptyList(), response.getFailedIndexes()).     int size = randomIntBetween(1, 10).     List<String> failedIndexes = new ArrayList<>(size).     for (int i = 0. i < size. i++) {         failedIndexes.add(randomAlphaOfLength(20)).     }     response = new RemoveIndexLifecyclePolicyResponse(failedIndexes).     assertTrue(response.hasFailures()).     assertEquals(failedIndexes, response.getFailedIndexes()). }
false;public;0;5;;public void testEqualsAndHashCode() {     for (int count = 0. count < 100. ++count) {         EqualsHashCodeTestUtils.checkEqualsAndHashCode(createInstance(), this::copyInstance, this::mutateInstance).     } }
