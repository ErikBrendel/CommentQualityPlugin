commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected CreateIndexRequest createTestInstance() {     return RandomCreateIndexGenerator.randomCreateIndexRequest(). }
false;protected;1;4;;@Override protected CreateIndexRequest doParseInstance(XContentParser parser) throws IOException {     return new CreateIndexRequest("index").source(parser.map()). }
false;protected;2;6;;@Override protected void assertEqualInstances(CreateIndexRequest expected, CreateIndexRequest actual) {     assertEquals(expected.settings(), actual.settings()).     assertAliasesEqual(expected.aliases(), actual.aliases()).     assertMappingsEqual(expected, actual). }
false;private;2;13;;private void assertMappingsEqual(CreateIndexRequest expected, CreateIndexRequest actual) {     if (expected.mappings() == null) {         assertNull(actual.mappings()).     } else {         assertNotNull(actual.mappings()).         try (XContentParser expectedJson = createParser(expected.mappingsXContentType().xContent(), expected.mappings()).             XContentParser actualJson = createParser(actual.mappingsXContentType().xContent(), actual.mappings())) {             assertEquals(expectedJson.map(), actualJson.map()).         } catch (IOException e) {             throw new RuntimeException(e).         }     } }
false;private;2;14;;private void assertAliasesEqual(Set<Alias> expected, Set<Alias> actual) {     assertEquals(expected, actual).     for (Alias expectedAlias : expected) {         for (Alias actualAlias : actual) {             if (expectedAlias.equals(actualAlias)) {                 // As Alias#equals only looks at name, we check the equality of the other Alias parameters here.                 assertEquals(expectedAlias.filter(), actualAlias.filter()).                 assertEquals(expectedAlias.indexRouting(), actualAlias.indexRouting()).                 assertEquals(expectedAlias.searchRouting(), actualAlias.searchRouting()).             }         }     } }
false;protected;0;6;;@Override protected Predicate<String> getRandomFieldsExcludeFilter() {     return field -> field.startsWith(MAPPINGS.getPreferredName()) || field.startsWith(SETTINGS.getPreferredName()) || field.startsWith(ALIASES.getPreferredName()). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return true. }
