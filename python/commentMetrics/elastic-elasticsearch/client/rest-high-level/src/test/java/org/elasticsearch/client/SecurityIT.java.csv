commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;public void testPutUser() throws Exception {     final SecurityClient securityClient = highLevelClient().security().     // create user     final PutUserRequest putUserRequest = randomPutUserRequest(randomBoolean()).     final PutUserResponse putUserResponse = execute(putUserRequest, securityClient::putUser, securityClient::putUserAsync).     // assert user created     assertThat(putUserResponse.isCreated(), is(true)).     // update user     final User updatedUser = randomUser(putUserRequest.getUser().getUsername()).     final PutUserRequest updateUserRequest = randomPutUserRequest(updatedUser, randomBoolean()).     final PutUserResponse updateUserResponse = execute(updateUserRequest, securityClient::putUser, securityClient::putUserAsync).     // assert user not created     assertThat(updateUserResponse.isCreated(), is(false)).     // delete user     final Request deleteUserRequest = new Request(HttpDelete.METHOD_NAME, "/_security/user/" + putUserRequest.getUser().getUsername()).     highLevelClient().getLowLevelClient().performRequest(deleteUserRequest). }
false;public;0;15;;public void testGetUser() throws Exception {     final SecurityClient securityClient = highLevelClient().security().     // create user     final PutUserRequest putUserRequest = randomPutUserRequest(randomBoolean()).     final PutUserResponse putUserResponse = execute(putUserRequest, securityClient::putUser, securityClient::putUserAsync).     // assert user created     assertThat(putUserResponse.isCreated(), is(true)).     // get user     final GetUsersRequest getUsersRequest = new GetUsersRequest(putUserRequest.getUser().getUsername()).     final GetUsersResponse getUsersResponse = execute(getUsersRequest, securityClient::getUsers, securityClient::getUsersAsync).     // assert user was correctly retrieved     ArrayList<User> users = new ArrayList<>().     users.addAll(getUsersResponse.getUsers()).     assertThat(users.get(0), is(putUserRequest.getUser())). }
false;public;0;42;;public void testAuthenticate() throws Exception {     final SecurityClient securityClient = highLevelClient().security().     // test fixture: put enabled user     final PutUserRequest putUserRequest = randomPutUserRequest(true).     final PutUserResponse putUserResponse = execute(putUserRequest, securityClient::putUser, securityClient::putUserAsync).     assertThat(putUserResponse.isCreated(), is(true)).     // authenticate correctly     final String basicAuthHeader = basicAuthHeader(putUserRequest.getUser().getUsername(), putUserRequest.getPassword()).     final AuthenticateResponse authenticateResponse = execute(securityClient::authenticate, securityClient::authenticateAsync, authorizationRequestOptions(basicAuthHeader)).     assertThat(authenticateResponse.getUser(), is(putUserRequest.getUser())).     assertThat(authenticateResponse.enabled(), is(true)).     // get user     final GetUsersRequest getUsersRequest = new GetUsersRequest(putUserRequest.getUser().getUsername()).     final GetUsersResponse getUsersResponse = execute(getUsersRequest, securityClient::getUsers, securityClient::getUsersAsync).     ArrayList<User> users = new ArrayList<>().     users.addAll(getUsersResponse.getUsers()).     assertThat(users.get(0), is(putUserRequest.getUser())).     // delete user     final DeleteUserRequest deleteUserRequest = new DeleteUserRequest(putUserRequest.getUser().getUsername(), putUserRequest.getRefreshPolicy()).     final DeleteUserResponse deleteUserResponse = execute(deleteUserRequest, securityClient::deleteUser, securityClient::deleteUserAsync).     assertThat(deleteUserResponse.isAcknowledged(), is(true)).     // authentication no longer works     ElasticsearchStatusException e = expectThrows(ElasticsearchStatusException.class, () -> execute(securityClient::authenticate, securityClient::authenticateAsync, authorizationRequestOptions(basicAuthHeader))).     assertThat(e.getMessage(), containsString("unable to authenticate user [" + putUserRequest.getUser().getUsername() + "]")).     // delete non-existing user     final DeleteUserResponse deleteUserResponse2 = execute(deleteUserRequest, securityClient::deleteUser, securityClient::deleteUserAsync).     assertThat(deleteUserResponse2.isAcknowledged(), is(false)). }
false;public;0;24;;public void testPutRole() throws Exception {     final SecurityClient securityClient = highLevelClient().security().     // create random role     final Role role = randomRole(randomAlphaOfLength(4)).     final PutRoleRequest putRoleRequest = new PutRoleRequest(role, RefreshPolicy.IMMEDIATE).     final PutRoleResponse createRoleResponse = execute(putRoleRequest, securityClient::putRole, securityClient::putRoleAsync).     // assert role created     assertThat(createRoleResponse.isCreated(), is(true)).     final GetRolesRequest getRoleRequest = new GetRolesRequest(role.getName()).     final GetRolesResponse getRoleResponse = securityClient.getRoles(getRoleRequest, RequestOptions.DEFAULT).     // assert role is equal     assertThat(getRoleResponse.getRoles(), contains(role)).     final PutRoleResponse updateRoleResponse = execute(putRoleRequest, securityClient::putRole, securityClient::putRoleAsync).     // assert role updated     assertThat(updateRoleResponse.isCreated(), is(false)).     final DeleteRoleRequest deleteRoleRequest = new DeleteRoleRequest(role.getName()).     final DeleteRoleResponse deleteRoleResponse = securityClient.deleteRole(deleteRoleRequest, RequestOptions.DEFAULT).     // assert role deleted     assertThat(deleteRoleResponse.isFound(), is(true)). }
false;private,static;0;4;;private static User randomUser() {     final String username = randomAlphaOfLengthBetween(1, 4).     return randomUser(username). }
false;private,static;1;18;;private static User randomUser(String username) {     final List<String> roles = Arrays.asList(generateRandomStringArray(3, 3, false, true)).     final String fullName = randomFrom(random(), null, randomAlphaOfLengthBetween(0, 3)).     final String email = randomFrom(random(), null, randomAlphaOfLengthBetween(0, 3)).     final Map<String, Object> metadata.     metadata = new HashMap<>().     if (randomBoolean()) {         metadata.put("string", null).     } else {         metadata.put("string", randomAlphaOfLengthBetween(0, 4)).     }     if (randomBoolean()) {         metadata.put("string_list", null).     } else {         metadata.put("string_list", Arrays.asList(generateRandomStringArray(4, 4, false, true))).     }     return new User(username, roles, metadata, fullName, email). }
false;private,static;1;21;;private static Role randomRole(String roleName) {     final Role.Builder roleBuilder = Role.builder().name(roleName).clusterPrivileges(randomSubsetOf(randomInt(3), Role.ClusterPrivilegeName.ALL_ARRAY)).indicesPrivileges(randomArray(3, IndicesPrivileges[]::new, () -> IndicesPrivilegesTests.createNewRandom(randomAlphaOfLength(3)))).applicationResourcePrivileges(randomArray(3, ApplicationResourcePrivileges[]::new, () -> ApplicationResourcePrivilegesTests.createNewRandom(randomAlphaOfLength(3).toLowerCase(Locale.ROOT)))).runAsPrivilege(randomArray(3, String[]::new, () -> randomAlphaOfLength(3))).     if (randomBoolean()) {         roleBuilder.globalApplicationPrivileges(GlobalPrivilegesTests.buildRandomManageApplicationPrivilege()).     }     if (randomBoolean()) {         final Map<String, Object> metadata = new HashMap<>().         for (int i = 0. i < randomInt(3). i++) {             metadata.put(randomAlphaOfLength(3), randomAlphaOfLength(3)).         }         roleBuilder.metadata(metadata).     }     return roleBuilder.build(). }
false;private,static;1;4;;private static PutUserRequest randomPutUserRequest(boolean enabled) {     final User user = randomUser().     return randomPutUserRequest(user, enabled). }
false;private,static;2;4;;private static PutUserRequest randomPutUserRequest(User user, boolean enabled) {     final char[] password = randomAlphaOfLengthBetween(6, 10).toCharArray().     return new PutUserRequest(user, password, enabled, RefreshPolicy.IMMEDIATE). }
false;private,static;2;5;;private static String basicAuthHeader(String username, char[] password) {     final String concat = new StringBuilder().append(username).append(':').append(password).toString().     final byte[] concatBytes = CharArrays.toUtf8Bytes(concat.toCharArray()).     return "Basic " + Base64.getEncoder().encodeToString(concatBytes). }
false;private,static;1;5;;private static RequestOptions authorizationRequestOptions(String authorizationHeader) {     final RequestOptions.Builder builder = RequestOptions.DEFAULT.toBuilder().     builder.addHeader("Authorization", authorizationHeader).     return builder.build(). }
