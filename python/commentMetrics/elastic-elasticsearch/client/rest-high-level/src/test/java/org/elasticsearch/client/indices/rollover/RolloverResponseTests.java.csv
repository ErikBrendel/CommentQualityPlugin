commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;public void testFromXContent() throws IOException {     xContentTester(this::createParser, RolloverResponseTests::createTestInstance, RolloverResponseTests::toXContent, RolloverResponse::fromXContent).supportsUnknownFields(true).randomFieldsExcludeFilter(getRandomFieldsExcludeFilter()).test(). }
false;private,static;0;15;;private static RolloverResponse createTestInstance() {     final String oldIndex = randomAlphaOfLength(8).     final String newIndex = randomAlphaOfLength(8).     final boolean dryRun = randomBoolean().     final boolean rolledOver = randomBoolean().     final boolean acknowledged = randomBoolean().     final boolean shardsAcknowledged = acknowledged && randomBoolean().     Map<String, Boolean> results = new HashMap<>().     int numResults = randomIntBetween(0, 3).     List<Supplier<Condition<?>>> conditions = randomSubsetOf(numResults, conditionSuppliers).     conditions.forEach(condition -> results.put(condition.get().name(), randomBoolean())).     return new RolloverResponse(oldIndex, newIndex, results, dryRun, rolledOver, acknowledged, shardsAcknowledged). }
false;private;0;3;;private Predicate<String> getRandomFieldsExcludeFilter() {     return field -> field.startsWith("conditions"). }
false;private,static;2;15;;private static void toXContent(RolloverResponse response, XContentBuilder builder) throws IOException {     Params params = new ToXContent.MapParams(Collections.singletonMap(BaseRestHandler.INCLUDE_TYPE_NAME_PARAMETER, "false")).     org.elasticsearch.action.admin.indices.rollover.RolloverResponse serverResponse = new org.elasticsearch.action.admin.indices.rollover.RolloverResponse(response.getOldIndex(), response.getNewIndex(), response.getConditionStatus(), response.isDryRun(), response.isRolledOver(), response.isAcknowledged(), response.isShardsAcknowledged()).     serverResponse.toXContent(builder, params). }
