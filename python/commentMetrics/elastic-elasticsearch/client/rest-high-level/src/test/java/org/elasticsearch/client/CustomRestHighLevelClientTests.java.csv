# id;timestamp;commentText;codeText;commentWords;codeWords
CustomRestHighLevelClientTests -> private Void mockPerformRequestAsync(Header httpHeader, ResponseListener responseListener);1524684173;Mocks the asynchronous request execution by calling the {@link #mockPerformRequest(Header)} method.;private Void mockPerformRequestAsync(Header httpHeader, ResponseListener responseListener) {_        try {_            responseListener.onSuccess(mockPerformRequest(httpHeader))__        } catch (IOException e) {_            responseListener.onFailure(e)__        }_        return null__    };mocks,the,asynchronous,request,execution,by,calling,the,link,mock,perform,request,header,method;private,void,mock,perform,request,async,header,http,header,response,listener,response,listener,try,response,listener,on,success,mock,perform,request,http,header,catch,ioexception,e,response,listener,on,failure,e,return,null
CustomRestHighLevelClientTests -> private Void mockPerformRequestAsync(Header httpHeader, ResponseListener responseListener);1525248068;Mocks the asynchronous request execution by calling the {@link #mockPerformRequest(Header)} method.;private Void mockPerformRequestAsync(Header httpHeader, ResponseListener responseListener) {_        try {_            responseListener.onSuccess(mockPerformRequest(httpHeader))__        } catch (IOException e) {_            responseListener.onFailure(e)__        }_        return null__    };mocks,the,asynchronous,request,execution,by,calling,the,link,mock,perform,request,header,method;private,void,mock,perform,request,async,header,http,header,response,listener,response,listener,try,response,listener,on,success,mock,perform,request,http,header,catch,ioexception,e,response,listener,on,failure,e,return,null
CustomRestHighLevelClientTests -> private Void mockPerformRequestAsync(Header httpHeader, ResponseListener responseListener);1527096592;Mocks the asynchronous request execution by calling the {@link #mockPerformRequest(Header)} method.;private Void mockPerformRequestAsync(Header httpHeader, ResponseListener responseListener) {_        try {_            responseListener.onSuccess(mockPerformRequest(httpHeader))__        } catch (IOException e) {_            responseListener.onFailure(e)__        }_        return null__    };mocks,the,asynchronous,request,execution,by,calling,the,link,mock,perform,request,header,method;private,void,mock,perform,request,async,header,http,header,response,listener,response,listener,try,response,listener,on,success,mock,perform,request,http,header,catch,ioexception,e,response,listener,on,failure,e,return,null
CustomRestHighLevelClientTests -> private Response mockPerformRequest(Header httpHeader) throws IOException;1524684173;Mocks the synchronous request execution like if it was executed by Elasticsearch.;private Response mockPerformRequest(Header httpHeader) throws IOException {_        final Response mockResponse = mock(Response.class)__        when(mockResponse.getHost()).thenReturn(new HttpHost("localhost", 9200))___        ProtocolVersion protocol = new ProtocolVersion("HTTP", 1, 1)__        when(mockResponse.getStatusLine()).thenReturn(new BasicStatusLine(protocol, 200, "OK"))___        MainResponse response = new MainResponse(httpHeader.getValue(), Version.CURRENT, ClusterName.DEFAULT, "_na", Build.CURRENT)__        BytesRef bytesRef = XContentHelper.toXContent(response, XContentType.JSON, false).toBytesRef()__        when(mockResponse.getEntity()).thenReturn(new ByteArrayEntity(bytesRef.bytes, ContentType.APPLICATION_JSON))___        RequestLine requestLine = new BasicRequestLine(HttpGet.METHOD_NAME, ENDPOINT, protocol)__        when(mockResponse.getRequestLine()).thenReturn(requestLine)___        return mockResponse__    };mocks,the,synchronous,request,execution,like,if,it,was,executed,by,elasticsearch;private,response,mock,perform,request,header,http,header,throws,ioexception,final,response,mock,response,mock,response,class,when,mock,response,get,host,then,return,new,http,host,localhost,9200,protocol,version,protocol,new,protocol,version,http,1,1,when,mock,response,get,status,line,then,return,new,basic,status,line,protocol,200,ok,main,response,response,new,main,response,http,header,get,value,version,current,cluster,name,default,build,current,bytes,ref,bytes,ref,xcontent,helper,to,xcontent,response,xcontent,type,json,false,to,bytes,ref,when,mock,response,get,entity,then,return,new,byte,array,entity,bytes,ref,bytes,content,type,request,line,request,line,new,basic,request,line,http,get,endpoint,protocol,when,mock,response,get,request,line,then,return,request,line,return,mock,response
CustomRestHighLevelClientTests -> private Response mockPerformRequest(Header httpHeader) throws IOException;1525248068;Mocks the synchronous request execution like if it was executed by Elasticsearch.;private Response mockPerformRequest(Header httpHeader) throws IOException {_        final Response mockResponse = mock(Response.class)__        when(mockResponse.getHost()).thenReturn(new HttpHost("localhost", 9200))___        ProtocolVersion protocol = new ProtocolVersion("HTTP", 1, 1)__        when(mockResponse.getStatusLine()).thenReturn(new BasicStatusLine(protocol, 200, "OK"))___        MainResponse response = new MainResponse(httpHeader.getValue(), Version.CURRENT, ClusterName.DEFAULT, "_na", Build.CURRENT)__        BytesRef bytesRef = XContentHelper.toXContent(response, XContentType.JSON, false).toBytesRef()__        when(mockResponse.getEntity()).thenReturn(new ByteArrayEntity(bytesRef.bytes, ContentType.APPLICATION_JSON))___        RequestLine requestLine = new BasicRequestLine(HttpGet.METHOD_NAME, ENDPOINT, protocol)__        when(mockResponse.getRequestLine()).thenReturn(requestLine)___        return mockResponse__    };mocks,the,synchronous,request,execution,like,if,it,was,executed,by,elasticsearch;private,response,mock,perform,request,header,http,header,throws,ioexception,final,response,mock,response,mock,response,class,when,mock,response,get,host,then,return,new,http,host,localhost,9200,protocol,version,protocol,new,protocol,version,http,1,1,when,mock,response,get,status,line,then,return,new,basic,status,line,protocol,200,ok,main,response,response,new,main,response,http,header,get,value,version,current,cluster,name,default,build,current,bytes,ref,bytes,ref,xcontent,helper,to,xcontent,response,xcontent,type,json,false,to,bytes,ref,when,mock,response,get,entity,then,return,new,byte,array,entity,bytes,ref,bytes,content,type,request,line,request,line,new,basic,request,line,http,get,endpoint,protocol,when,mock,response,get,request,line,then,return,request,line,return,mock,response
CustomRestHighLevelClientTests -> private Response mockPerformRequest(Header httpHeader) throws IOException;1527096592;Mocks the synchronous request execution like if it was executed by Elasticsearch.;private Response mockPerformRequest(Header httpHeader) throws IOException {_        final Response mockResponse = mock(Response.class)__        when(mockResponse.getHost()).thenReturn(new HttpHost("localhost", 9200))___        ProtocolVersion protocol = new ProtocolVersion("HTTP", 1, 1)__        when(mockResponse.getStatusLine()).thenReturn(new BasicStatusLine(protocol, 200, "OK"))___        MainResponse response = new MainResponse(httpHeader.getValue(), Version.CURRENT, ClusterName.DEFAULT, "_na", Build.CURRENT)__        BytesRef bytesRef = XContentHelper.toXContent(response, XContentType.JSON, false).toBytesRef()__        when(mockResponse.getEntity()).thenReturn(new ByteArrayEntity(bytesRef.bytes, ContentType.APPLICATION_JSON))___        RequestLine requestLine = new BasicRequestLine(HttpGet.METHOD_NAME, ENDPOINT, protocol)__        when(mockResponse.getRequestLine()).thenReturn(requestLine)___        return mockResponse__    };mocks,the,synchronous,request,execution,like,if,it,was,executed,by,elasticsearch;private,response,mock,perform,request,header,http,header,throws,ioexception,final,response,mock,response,mock,response,class,when,mock,response,get,host,then,return,new,http,host,localhost,9200,protocol,version,protocol,new,protocol,version,http,1,1,when,mock,response,get,status,line,then,return,new,basic,status,line,protocol,200,ok,main,response,response,new,main,response,http,header,get,value,version,current,cluster,name,default,build,current,bytes,ref,bytes,ref,xcontent,helper,to,xcontent,response,xcontent,type,json,false,to,bytes,ref,when,mock,response,get,entity,then,return,new,byte,array,entity,bytes,ref,bytes,content,type,request,line,request,line,new,basic,request,line,http,get,endpoint,protocol,when,mock,response,get,request,line,then,return,request,line,return,mock,response
CustomRestHighLevelClientTests -> private Void mockPerformRequestAsync(Request request, ResponseListener responseListener);1527840262;Mocks the asynchronous request execution by calling the {@link #mockPerformRequest(Request)} method.;private Void mockPerformRequestAsync(Request request, ResponseListener responseListener) {_        try {_            responseListener.onSuccess(mockPerformRequest(request))__        } catch (IOException e) {_            responseListener.onFailure(e)__        }_        return null__    };mocks,the,asynchronous,request,execution,by,calling,the,link,mock,perform,request,request,method;private,void,mock,perform,request,async,request,request,response,listener,response,listener,try,response,listener,on,success,mock,perform,request,request,catch,ioexception,e,response,listener,on,failure,e,return,null
CustomRestHighLevelClientTests -> private Void mockPerformRequestAsync(Request request, ResponseListener responseListener);1531910483;Mocks the asynchronous request execution by calling the {@link #mockPerformRequest(Request)} method.;private Void mockPerformRequestAsync(Request request, ResponseListener responseListener) {_        try {_            responseListener.onSuccess(mockPerformRequest(request))__        } catch (IOException e) {_            responseListener.onFailure(e)__        }_        return null__    };mocks,the,asynchronous,request,execution,by,calling,the,link,mock,perform,request,request,method;private,void,mock,perform,request,async,request,request,response,listener,response,listener,try,response,listener,on,success,mock,perform,request,request,catch,ioexception,e,response,listener,on,failure,e,return,null
CustomRestHighLevelClientTests -> private Void mockPerformRequestAsync(Request request, ResponseListener responseListener);1542042438;Mocks the asynchronous request execution by calling the {@link #mockPerformRequest(Request)} method.;private Void mockPerformRequestAsync(Request request, ResponseListener responseListener) {_        try {_            responseListener.onSuccess(mockPerformRequest(request))__        } catch (IOException e) {_            responseListener.onFailure(e)__        }_        return null__    };mocks,the,asynchronous,request,execution,by,calling,the,link,mock,perform,request,request,method;private,void,mock,perform,request,async,request,request,response,listener,response,listener,try,response,listener,on,success,mock,perform,request,request,catch,ioexception,e,response,listener,on,failure,e,return,null
CustomRestHighLevelClientTests -> private Void mockPerformRequestAsync(Request request, ResponseListener responseListener);1546960318;Mocks the asynchronous request execution by calling the {@link #mockPerformRequest(Request)} method.;private Void mockPerformRequestAsync(Request request, ResponseListener responseListener) {_        try {_            responseListener.onSuccess(mockPerformRequest(request))__        } catch (IOException e) {_            responseListener.onFailure(e)__        }_        return null__    };mocks,the,asynchronous,request,execution,by,calling,the,link,mock,perform,request,request,method;private,void,mock,perform,request,async,request,request,response,listener,response,listener,try,response,listener,on,success,mock,perform,request,request,catch,ioexception,e,response,listener,on,failure,e,return,null
CustomRestHighLevelClientTests -> private Void mockPerformRequestAsync(Request request, ResponseListener responseListener);1548303196;Mocks the asynchronous request execution by calling the {@link #mockPerformRequest(Request)} method.;private Void mockPerformRequestAsync(Request request, ResponseListener responseListener) {_        try {_            responseListener.onSuccess(mockPerformRequest(request))__        } catch (IOException e) {_            responseListener.onFailure(e)__        }_        return null__    };mocks,the,asynchronous,request,execution,by,calling,the,link,mock,perform,request,request,method;private,void,mock,perform,request,async,request,request,response,listener,response,listener,try,response,listener,on,success,mock,perform,request,request,catch,ioexception,e,response,listener,on,failure,e,return,null
CustomRestHighLevelClientTests -> private Response mockPerformRequest(Request request) throws IOException;1527840262;Mocks the synchronous request execution like if it was executed by Elasticsearch.;private Response mockPerformRequest(Request request) throws IOException {_        assertThat(request.getOptions().getHeaders(), hasSize(1))__        Header httpHeader = request.getOptions().getHeaders().get(0)__        final Response mockResponse = mock(Response.class)__        when(mockResponse.getHost()).thenReturn(new HttpHost("localhost", 9200))___        ProtocolVersion protocol = new ProtocolVersion("HTTP", 1, 1)__        when(mockResponse.getStatusLine()).thenReturn(new BasicStatusLine(protocol, 200, "OK"))___        MainResponse response = new MainResponse(httpHeader.getValue(), Version.CURRENT, ClusterName.DEFAULT, "_na", Build.CURRENT)__        BytesRef bytesRef = XContentHelper.toXContent(response, XContentType.JSON, false).toBytesRef()__        when(mockResponse.getEntity()).thenReturn(new ByteArrayEntity(bytesRef.bytes, ContentType.APPLICATION_JSON))___        RequestLine requestLine = new BasicRequestLine(HttpGet.METHOD_NAME, ENDPOINT, protocol)__        when(mockResponse.getRequestLine()).thenReturn(requestLine)___        return mockResponse__    };mocks,the,synchronous,request,execution,like,if,it,was,executed,by,elasticsearch;private,response,mock,perform,request,request,request,throws,ioexception,assert,that,request,get,options,get,headers,has,size,1,header,http,header,request,get,options,get,headers,get,0,final,response,mock,response,mock,response,class,when,mock,response,get,host,then,return,new,http,host,localhost,9200,protocol,version,protocol,new,protocol,version,http,1,1,when,mock,response,get,status,line,then,return,new,basic,status,line,protocol,200,ok,main,response,response,new,main,response,http,header,get,value,version,current,cluster,name,default,build,current,bytes,ref,bytes,ref,xcontent,helper,to,xcontent,response,xcontent,type,json,false,to,bytes,ref,when,mock,response,get,entity,then,return,new,byte,array,entity,bytes,ref,bytes,content,type,request,line,request,line,new,basic,request,line,http,get,endpoint,protocol,when,mock,response,get,request,line,then,return,request,line,return,mock,response
CustomRestHighLevelClientTests -> private Response mockPerformRequest(Request request) throws IOException;1531910483;Mocks the synchronous request execution like if it was executed by Elasticsearch.;private Response mockPerformRequest(Request request) throws IOException {_        assertThat(request.getOptions().getHeaders(), hasSize(1))__        Header httpHeader = request.getOptions().getHeaders().get(0)__        final Response mockResponse = mock(Response.class)__        when(mockResponse.getHost()).thenReturn(new HttpHost("localhost", 9200))___        ProtocolVersion protocol = new ProtocolVersion("HTTP", 1, 1)__        when(mockResponse.getStatusLine()).thenReturn(new BasicStatusLine(protocol, 200, "OK"))___        MainResponse response = new MainResponse(httpHeader.getValue(), Version.CURRENT, ClusterName.DEFAULT, "_na", Build.CURRENT)__        BytesRef bytesRef = XContentHelper.toXContent(response, XContentType.JSON, false).toBytesRef()__        when(mockResponse.getEntity()).thenReturn(new ByteArrayEntity(bytesRef.bytes, ContentType.APPLICATION_JSON))___        RequestLine requestLine = new BasicRequestLine(HttpGet.METHOD_NAME, ENDPOINT, protocol)__        when(mockResponse.getRequestLine()).thenReturn(requestLine)___        return mockResponse__    };mocks,the,synchronous,request,execution,like,if,it,was,executed,by,elasticsearch;private,response,mock,perform,request,request,request,throws,ioexception,assert,that,request,get,options,get,headers,has,size,1,header,http,header,request,get,options,get,headers,get,0,final,response,mock,response,mock,response,class,when,mock,response,get,host,then,return,new,http,host,localhost,9200,protocol,version,protocol,new,protocol,version,http,1,1,when,mock,response,get,status,line,then,return,new,basic,status,line,protocol,200,ok,main,response,response,new,main,response,http,header,get,value,version,current,cluster,name,default,build,current,bytes,ref,bytes,ref,xcontent,helper,to,xcontent,response,xcontent,type,json,false,to,bytes,ref,when,mock,response,get,entity,then,return,new,byte,array,entity,bytes,ref,bytes,content,type,request,line,request,line,new,basic,request,line,http,get,endpoint,protocol,when,mock,response,get,request,line,then,return,request,line,return,mock,response
CustomRestHighLevelClientTests -> private Response mockPerformRequest(Request request) throws IOException;1542042438;Mocks the synchronous request execution like if it was executed by Elasticsearch.;private Response mockPerformRequest(Request request) throws IOException {_        assertThat(request.getOptions().getHeaders(), hasSize(1))__        Header httpHeader = request.getOptions().getHeaders().get(0)__        final Response mockResponse = mock(Response.class)__        when(mockResponse.getHost()).thenReturn(new HttpHost("localhost", 9200))___        ProtocolVersion protocol = new ProtocolVersion("HTTP", 1, 1)__        when(mockResponse.getStatusLine()).thenReturn(new BasicStatusLine(protocol, 200, "OK"))___        MainResponse response = new MainResponse(httpHeader.getValue(), Version.CURRENT, ClusterName.DEFAULT, "_na", Build.CURRENT)__        BytesRef bytesRef = XContentHelper.toXContent(response, XContentType.JSON, false).toBytesRef()__        when(mockResponse.getEntity()).thenReturn(new ByteArrayEntity(bytesRef.bytes, ContentType.APPLICATION_JSON))___        RequestLine requestLine = new BasicRequestLine(HttpGet.METHOD_NAME, ENDPOINT, protocol)__        when(mockResponse.getRequestLine()).thenReturn(requestLine)___        return mockResponse__    };mocks,the,synchronous,request,execution,like,if,it,was,executed,by,elasticsearch;private,response,mock,perform,request,request,request,throws,ioexception,assert,that,request,get,options,get,headers,has,size,1,header,http,header,request,get,options,get,headers,get,0,final,response,mock,response,mock,response,class,when,mock,response,get,host,then,return,new,http,host,localhost,9200,protocol,version,protocol,new,protocol,version,http,1,1,when,mock,response,get,status,line,then,return,new,basic,status,line,protocol,200,ok,main,response,response,new,main,response,http,header,get,value,version,current,cluster,name,default,build,current,bytes,ref,bytes,ref,xcontent,helper,to,xcontent,response,xcontent,type,json,false,to,bytes,ref,when,mock,response,get,entity,then,return,new,byte,array,entity,bytes,ref,bytes,content,type,request,line,request,line,new,basic,request,line,http,get,endpoint,protocol,when,mock,response,get,request,line,then,return,request,line,return,mock,response
CustomRestHighLevelClientTests -> private Response mockPerformRequest(Request request) throws IOException;1546960318;Mocks the synchronous request execution like if it was executed by Elasticsearch.;private Response mockPerformRequest(Request request) throws IOException {_        assertThat(request.getOptions().getHeaders(), hasSize(1))__        Header httpHeader = request.getOptions().getHeaders().get(0)__        final Response mockResponse = mock(Response.class)__        when(mockResponse.getHost()).thenReturn(new HttpHost("localhost", 9200))___        ProtocolVersion protocol = new ProtocolVersion("HTTP", 1, 1)__        when(mockResponse.getStatusLine()).thenReturn(new BasicStatusLine(protocol, 200, "OK"))___        MainResponse response = new MainResponse(httpHeader.getValue(), Version.CURRENT, ClusterName.DEFAULT, "_na", Build.CURRENT)__        BytesRef bytesRef = XContentHelper.toXContent(response, XContentType.JSON, false).toBytesRef()__        when(mockResponse.getEntity()).thenReturn(new NByteArrayEntity(bytesRef.bytes, ContentType.APPLICATION_JSON))___        RequestLine requestLine = new BasicRequestLine(HttpGet.METHOD_NAME, ENDPOINT, protocol)__        when(mockResponse.getRequestLine()).thenReturn(requestLine)___        return mockResponse__    };mocks,the,synchronous,request,execution,like,if,it,was,executed,by,elasticsearch;private,response,mock,perform,request,request,request,throws,ioexception,assert,that,request,get,options,get,headers,has,size,1,header,http,header,request,get,options,get,headers,get,0,final,response,mock,response,mock,response,class,when,mock,response,get,host,then,return,new,http,host,localhost,9200,protocol,version,protocol,new,protocol,version,http,1,1,when,mock,response,get,status,line,then,return,new,basic,status,line,protocol,200,ok,main,response,response,new,main,response,http,header,get,value,version,current,cluster,name,default,build,current,bytes,ref,bytes,ref,xcontent,helper,to,xcontent,response,xcontent,type,json,false,to,bytes,ref,when,mock,response,get,entity,then,return,new,nbyte,array,entity,bytes,ref,bytes,content,type,request,line,request,line,new,basic,request,line,http,get,endpoint,protocol,when,mock,response,get,request,line,then,return,request,line,return,mock,response
CustomRestHighLevelClientTests -> private Response mockPerformRequest(Request request) throws IOException;1548303196;Mocks the synchronous request execution like if it was executed by Elasticsearch.;private Response mockPerformRequest(Request request) throws IOException {_        assertThat(request.getOptions().getHeaders(), hasSize(1))__        Header httpHeader = request.getOptions().getHeaders().get(0)__        final Response mockResponse = mock(Response.class)__        when(mockResponse.getHost()).thenReturn(new HttpHost("localhost", 9200))___        ProtocolVersion protocol = new ProtocolVersion("HTTP", 1, 1)__        when(mockResponse.getStatusLine()).thenReturn(new BasicStatusLine(protocol, 200, "OK"))___        MainResponse response = new MainResponse(httpHeader.getValue(), Version.CURRENT, ClusterName.DEFAULT, "_na", Build.CURRENT)__        BytesRef bytesRef = XContentHelper.toXContent(response, XContentType.JSON, false).toBytesRef()__        when(mockResponse.getEntity()).thenReturn(new NByteArrayEntity(bytesRef.bytes, ContentType.APPLICATION_JSON))___        RequestLine requestLine = new BasicRequestLine(HttpGet.METHOD_NAME, ENDPOINT, protocol)__        when(mockResponse.getRequestLine()).thenReturn(requestLine)___        return mockResponse__    };mocks,the,synchronous,request,execution,like,if,it,was,executed,by,elasticsearch;private,response,mock,perform,request,request,request,throws,ioexception,assert,that,request,get,options,get,headers,has,size,1,header,http,header,request,get,options,get,headers,get,0,final,response,mock,response,mock,response,class,when,mock,response,get,host,then,return,new,http,host,localhost,9200,protocol,version,protocol,new,protocol,version,http,1,1,when,mock,response,get,status,line,then,return,new,basic,status,line,protocol,200,ok,main,response,response,new,main,response,http,header,get,value,version,current,cluster,name,default,build,current,bytes,ref,bytes,ref,xcontent,helper,to,xcontent,response,xcontent,type,json,false,to,bytes,ref,when,mock,response,get,entity,then,return,new,nbyte,array,entity,bytes,ref,bytes,content,type,request,line,request,line,new,basic,request,line,http,get,endpoint,protocol,when,mock,response,get,request,line,then,return,request,line,return,mock,response
CustomRestHighLevelClientTests -> @SuppressForbidden(reason = "We're forced to uses Class#getDeclaredMethods() here because this test checks protected methods")     public void testMethodsVisibility() throws ClassNotFoundException;1524684173;The {@link RestHighLevelClient} must declare the following execution methods using the <code>protected</code> modifier_so that they can be used by subclasses to implement custom logic.;@SuppressForbidden(reason = "We're forced to uses Class#getDeclaredMethods() here because this test checks protected methods")_    public void testMethodsVisibility() throws ClassNotFoundException {_        final String[] methodNames = new String[]{"performRequest",_                                                  "performRequestAsync",_                                                  "performRequestAndParseEntity",_                                                  "performRequestAsyncAndParseEntity",_                                                  "parseEntity",_                                                  "parseResponseException"}___        final List<String> protectedMethods =  Arrays.stream(RestHighLevelClient.class.getDeclaredMethods())_                                                     .filter(method -> Modifier.isProtected(method.getModifiers()))_                                                     .map(Method::getName)_                                                     .collect(Collectors.toList())___        assertThat(protectedMethods, containsInAnyOrder(methodNames))__    };the,link,rest,high,level,client,must,declare,the,following,execution,methods,using,the,code,protected,code,modifier,so,that,they,can,be,used,by,subclasses,to,implement,custom,logic;suppress,forbidden,reason,we,re,forced,to,uses,class,get,declared,methods,here,because,this,test,checks,protected,methods,public,void,test,methods,visibility,throws,class,not,found,exception,final,string,method,names,new,string,perform,request,perform,request,async,perform,request,and,parse,entity,perform,request,async,and,parse,entity,parse,entity,parse,response,exception,final,list,string,protected,methods,arrays,stream,rest,high,level,client,class,get,declared,methods,filter,method,modifier,is,protected,method,get,modifiers,map,method,get,name,collect,collectors,to,list,assert,that,protected,methods,contains,in,any,order,method,names
CustomRestHighLevelClientTests -> @SuppressForbidden(reason = "We're forced to uses Class#getDeclaredMethods() here because this test checks protected methods")     public void testMethodsVisibility() throws ClassNotFoundException;1525248068;The {@link RestHighLevelClient} must declare the following execution methods using the <code>protected</code> modifier_so that they can be used by subclasses to implement custom logic.;@SuppressForbidden(reason = "We're forced to uses Class#getDeclaredMethods() here because this test checks protected methods")_    public void testMethodsVisibility() throws ClassNotFoundException {_        final String[] methodNames = new String[]{"performRequest",_                                                  "performRequestAsync",_                                                  "performRequestAndParseEntity",_                                                  "performRequestAsyncAndParseEntity",_                                                  "parseEntity",_                                                  "parseResponseException"}___        final List<String> protectedMethods =  Arrays.stream(RestHighLevelClient.class.getDeclaredMethods())_                                                     .filter(method -> Modifier.isProtected(method.getModifiers()))_                                                     .map(Method::getName)_                                                     .collect(Collectors.toList())___        assertThat(protectedMethods, containsInAnyOrder(methodNames))__    };the,link,rest,high,level,client,must,declare,the,following,execution,methods,using,the,code,protected,code,modifier,so,that,they,can,be,used,by,subclasses,to,implement,custom,logic;suppress,forbidden,reason,we,re,forced,to,uses,class,get,declared,methods,here,because,this,test,checks,protected,methods,public,void,test,methods,visibility,throws,class,not,found,exception,final,string,method,names,new,string,perform,request,perform,request,async,perform,request,and,parse,entity,perform,request,async,and,parse,entity,parse,entity,parse,response,exception,final,list,string,protected,methods,arrays,stream,rest,high,level,client,class,get,declared,methods,filter,method,modifier,is,protected,method,get,modifiers,map,method,get,name,collect,collectors,to,list,assert,that,protected,methods,contains,in,any,order,method,names
CustomRestHighLevelClientTests -> @SuppressForbidden(reason = "We're forced to uses Class#getDeclaredMethods() here because this test checks protected methods")     public void testMethodsVisibility() throws ClassNotFoundException;1527096592;The {@link RestHighLevelClient} must declare the following execution methods using the <code>protected</code> modifier_so that they can be used by subclasses to implement custom logic.;@SuppressForbidden(reason = "We're forced to uses Class#getDeclaredMethods() here because this test checks protected methods")_    public void testMethodsVisibility() throws ClassNotFoundException {_        final String[] methodNames = new String[]{"performRequest",_                                                  "performRequestAsync",_                                                  "performRequestAndParseEntity",_                                                  "performRequestAsyncAndParseEntity",_                                                  "parseEntity",_                                                  "parseResponseException"}___        final List<String> protectedMethods =  Arrays.stream(RestHighLevelClient.class.getDeclaredMethods())_                                                     .filter(method -> Modifier.isProtected(method.getModifiers()))_                                                     .map(Method::getName)_                                                     .collect(Collectors.toList())___        assertThat(protectedMethods, containsInAnyOrder(methodNames))__    };the,link,rest,high,level,client,must,declare,the,following,execution,methods,using,the,code,protected,code,modifier,so,that,they,can,be,used,by,subclasses,to,implement,custom,logic;suppress,forbidden,reason,we,re,forced,to,uses,class,get,declared,methods,here,because,this,test,checks,protected,methods,public,void,test,methods,visibility,throws,class,not,found,exception,final,string,method,names,new,string,perform,request,perform,request,async,perform,request,and,parse,entity,perform,request,async,and,parse,entity,parse,entity,parse,response,exception,final,list,string,protected,methods,arrays,stream,rest,high,level,client,class,get,declared,methods,filter,method,modifier,is,protected,method,get,modifiers,map,method,get,name,collect,collectors,to,list,assert,that,protected,methods,contains,in,any,order,method,names
CustomRestHighLevelClientTests -> @SuppressForbidden(reason = "We're forced to uses Class#getDeclaredMethods() here because this test checks protected methods")     public void testMethodsVisibility() throws ClassNotFoundException;1527840262;The {@link RestHighLevelClient} must declare the following execution methods using the <code>protected</code> modifier_so that they can be used by subclasses to implement custom logic.;@SuppressForbidden(reason = "We're forced to uses Class#getDeclaredMethods() here because this test checks protected methods")_    public void testMethodsVisibility() throws ClassNotFoundException {_        final String[] methodNames = new String[]{"parseEntity",_                                                  "parseResponseException",_                                                  "performRequest",_                                                  "performRequestAndParseEntity",_                                                  "performRequestAsync",_                                                  "performRequestAsyncAndParseEntity"}___        final Set<String> protectedMethods =  Arrays.stream(RestHighLevelClient.class.getDeclaredMethods())_                                                     .filter(method -> Modifier.isProtected(method.getModifiers()))_                                                     .map(Method::getName)_                                                     .collect(Collectors.toCollection(TreeSet::new))___        assertThat(protectedMethods, contains(methodNames))__    };the,link,rest,high,level,client,must,declare,the,following,execution,methods,using,the,code,protected,code,modifier,so,that,they,can,be,used,by,subclasses,to,implement,custom,logic;suppress,forbidden,reason,we,re,forced,to,uses,class,get,declared,methods,here,because,this,test,checks,protected,methods,public,void,test,methods,visibility,throws,class,not,found,exception,final,string,method,names,new,string,parse,entity,parse,response,exception,perform,request,perform,request,and,parse,entity,perform,request,async,perform,request,async,and,parse,entity,final,set,string,protected,methods,arrays,stream,rest,high,level,client,class,get,declared,methods,filter,method,modifier,is,protected,method,get,modifiers,map,method,get,name,collect,collectors,to,collection,tree,set,new,assert,that,protected,methods,contains,method,names
CustomRestHighLevelClientTests -> @SuppressForbidden(reason = "We're forced to uses Class#getDeclaredMethods() here because this test checks protected methods")     public void testMethodsVisibility();1531910483;The {@link RestHighLevelClient} must declare the following execution methods using the <code>protected</code> modifier_so that they can be used by subclasses to implement custom logic.;@SuppressForbidden(reason = "We're forced to uses Class#getDeclaredMethods() here because this test checks protected methods")_    public void testMethodsVisibility() {_        final String[] methodNames = new String[]{"parseEntity",_                                                  "parseResponseException",_                                                  "performRequest",_                                                  "performRequestAndParseEntity",_                                                  "performRequestAsync",_                                                  "performRequestAsyncAndParseEntity"}___        final Set<String> protectedMethods =  Arrays.stream(RestHighLevelClient.class.getDeclaredMethods())_                                                     .filter(method -> Modifier.isProtected(method.getModifiers()))_                                                     .map(Method::getName)_                                                     .collect(Collectors.toCollection(TreeSet::new))___        assertThat(protectedMethods, contains(methodNames))__    };the,link,rest,high,level,client,must,declare,the,following,execution,methods,using,the,code,protected,code,modifier,so,that,they,can,be,used,by,subclasses,to,implement,custom,logic;suppress,forbidden,reason,we,re,forced,to,uses,class,get,declared,methods,here,because,this,test,checks,protected,methods,public,void,test,methods,visibility,final,string,method,names,new,string,parse,entity,parse,response,exception,perform,request,perform,request,and,parse,entity,perform,request,async,perform,request,async,and,parse,entity,final,set,string,protected,methods,arrays,stream,rest,high,level,client,class,get,declared,methods,filter,method,modifier,is,protected,method,get,modifiers,map,method,get,name,collect,collectors,to,collection,tree,set,new,assert,that,protected,methods,contains,method,names
CustomRestHighLevelClientTests -> @SuppressForbidden(reason = "We're forced to uses Class#getDeclaredMethods() here because this test checks protected methods")     public void testMethodsVisibility();1542042438;The {@link RestHighLevelClient} must declare the following execution methods using the <code>protected</code> modifier_so that they can be used by subclasses to implement custom logic.;@SuppressForbidden(reason = "We're forced to uses Class#getDeclaredMethods() here because this test checks protected methods")_    public void testMethodsVisibility() {_        final String[] methodNames = new String[]{"parseEntity",_                                                  "parseResponseException",_                                                  "performRequest",_                                                  "performRequestAndParseEntity",_                                                  "performRequestAndParseOptionalEntity",_                                                  "performRequestAsync",_                                                  "performRequestAsyncAndParseEntity",_                                                  "performRequestAsyncAndParseOptionalEntity"_                                                  }___        final Set<String> protectedMethods =  Arrays.stream(RestHighLevelClient.class.getDeclaredMethods())_                                                     .filter(method -> Modifier.isProtected(method.getModifiers()))_                                                     .map(Method::getName)_                                                     .collect(Collectors.toCollection(TreeSet::new))___        assertThat(protectedMethods, contains(methodNames))__    };the,link,rest,high,level,client,must,declare,the,following,execution,methods,using,the,code,protected,code,modifier,so,that,they,can,be,used,by,subclasses,to,implement,custom,logic;suppress,forbidden,reason,we,re,forced,to,uses,class,get,declared,methods,here,because,this,test,checks,protected,methods,public,void,test,methods,visibility,final,string,method,names,new,string,parse,entity,parse,response,exception,perform,request,perform,request,and,parse,entity,perform,request,and,parse,optional,entity,perform,request,async,perform,request,async,and,parse,entity,perform,request,async,and,parse,optional,entity,final,set,string,protected,methods,arrays,stream,rest,high,level,client,class,get,declared,methods,filter,method,modifier,is,protected,method,get,modifiers,map,method,get,name,collect,collectors,to,collection,tree,set,new,assert,that,protected,methods,contains,method,names
CustomRestHighLevelClientTests -> @SuppressForbidden(reason = "We're forced to uses Class#getDeclaredMethods() here because this test checks protected methods")     public void testMethodsVisibility();1546960318;The {@link RestHighLevelClient} must declare the following execution methods using the <code>protected</code> modifier_so that they can be used by subclasses to implement custom logic.;@SuppressForbidden(reason = "We're forced to uses Class#getDeclaredMethods() here because this test checks protected methods")_    public void testMethodsVisibility() {_        final String[] methodNames = new String[]{"parseEntity",_                                                  "parseResponseException",_                                                  "performRequest",_                                                  "performRequestAndParseEntity",_                                                  "performRequestAndParseOptionalEntity",_                                                  "performRequestAsync",_                                                  "performRequestAsyncAndParseEntity",_                                                  "performRequestAsyncAndParseOptionalEntity"_                                                  }___        final Set<String> protectedMethods =  Arrays.stream(RestHighLevelClient.class.getDeclaredMethods())_                                                     .filter(method -> Modifier.isProtected(method.getModifiers()))_                                                     .map(Method::getName)_                                                     .collect(Collectors.toCollection(TreeSet::new))___        assertThat(protectedMethods, contains(methodNames))__    };the,link,rest,high,level,client,must,declare,the,following,execution,methods,using,the,code,protected,code,modifier,so,that,they,can,be,used,by,subclasses,to,implement,custom,logic;suppress,forbidden,reason,we,re,forced,to,uses,class,get,declared,methods,here,because,this,test,checks,protected,methods,public,void,test,methods,visibility,final,string,method,names,new,string,parse,entity,parse,response,exception,perform,request,perform,request,and,parse,entity,perform,request,and,parse,optional,entity,perform,request,async,perform,request,async,and,parse,entity,perform,request,async,and,parse,optional,entity,final,set,string,protected,methods,arrays,stream,rest,high,level,client,class,get,declared,methods,filter,method,modifier,is,protected,method,get,modifiers,map,method,get,name,collect,collectors,to,collection,tree,set,new,assert,that,protected,methods,contains,method,names
CustomRestHighLevelClientTests -> @SuppressForbidden(reason = "We're forced to uses Class#getDeclaredMethods() here because this test checks protected methods")     public void testMethodsVisibility();1548303196;The {@link RestHighLevelClient} must declare the following execution methods using the <code>protected</code> modifier_so that they can be used by subclasses to implement custom logic.;@SuppressForbidden(reason = "We're forced to uses Class#getDeclaredMethods() here because this test checks protected methods")_    public void testMethodsVisibility() {_        final String[] methodNames = new String[]{"convertExistsResponse",_                                                  "parseEntity",_                                                  "parseResponseException",_                                                  "performRequest",_                                                  "performRequestAndParseEntity",_                                                  "performRequestAndParseOptionalEntity",_                                                  "performRequestAsync",_                                                  "performRequestAsyncAndParseEntity",_                                                  "performRequestAsyncAndParseOptionalEntity"_                                                  }___        final Set<String> protectedMethods =  Arrays.stream(RestHighLevelClient.class.getDeclaredMethods())_                                                     .filter(method -> Modifier.isProtected(method.getModifiers()))_                                                     .map(Method::getName)_                                                     .collect(Collectors.toCollection(TreeSet::new))___        assertThat(protectedMethods, contains(methodNames))__    };the,link,rest,high,level,client,must,declare,the,following,execution,methods,using,the,code,protected,code,modifier,so,that,they,can,be,used,by,subclasses,to,implement,custom,logic;suppress,forbidden,reason,we,re,forced,to,uses,class,get,declared,methods,here,because,this,test,checks,protected,methods,public,void,test,methods,visibility,final,string,method,names,new,string,convert,exists,response,parse,entity,parse,response,exception,perform,request,perform,request,and,parse,entity,perform,request,and,parse,optional,entity,perform,request,async,perform,request,async,and,parse,entity,perform,request,async,and,parse,optional,entity,final,set,string,protected,methods,arrays,stream,rest,high,level,client,class,get,declared,methods,filter,method,modifier,is,protected,method,get,modifiers,map,method,get,name,collect,collectors,to,collection,tree,set,new,assert,that,protected,methods,contains,method,names
