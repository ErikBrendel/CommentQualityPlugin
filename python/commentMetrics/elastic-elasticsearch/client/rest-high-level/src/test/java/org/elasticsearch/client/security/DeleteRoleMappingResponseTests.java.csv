commented;modifiers;parameterAmount;loc;comment;code
false;public;2;3;;@Override public void usedDeprecatedName(String usedName, String modernName) { }
false;public;2;3;;@Override public void usedDeprecatedField(String usedName, String replacedWith) { }
false;public;0;15;;public void testFromXContent() throws IOException {     final String json = "{ \"found\" : \"true\" }".     final DeleteRoleMappingResponse response = DeleteRoleMappingResponse.fromXContent(XContentType.JSON.xContent().createParser(new NamedXContentRegistry(Collections.emptyList()), new DeprecationHandler() {          @Override         public void usedDeprecatedName(String usedName, String modernName) {         }          @Override         public void usedDeprecatedField(String usedName, String replacedWith) {         }     }, json)).     final DeleteRoleMappingResponse expectedResponse = new DeleteRoleMappingResponse(true).     assertThat(response, equalTo(expectedResponse)). }
false;public;0;13;;public void testEqualsHashCode() {     final boolean found = randomBoolean().     final DeleteRoleMappingResponse deleteRoleMappingResponse = new DeleteRoleMappingResponse(found).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(deleteRoleMappingResponse, (original) -> {         return new DeleteRoleMappingResponse(original.isFound()).     }).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(deleteRoleMappingResponse, (original) -> {         return new DeleteRoleMappingResponse(original.isFound()).     }, DeleteRoleMappingResponseTests::mutateTestItem). }
false;private,static;1;3;;private static DeleteRoleMappingResponse mutateTestItem(DeleteRoleMappingResponse original) {     return new DeleteRoleMappingResponse(!original.isFound()). }
