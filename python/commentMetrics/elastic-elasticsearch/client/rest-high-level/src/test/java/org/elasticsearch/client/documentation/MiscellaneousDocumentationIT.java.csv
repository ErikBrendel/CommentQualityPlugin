commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;public void testMain() throws IOException {     RestHighLevelClient client = highLevelClient().     {         // tag::main-execute         MainResponse response = client.info(RequestOptions.DEFAULT).         // end::main-execute         // tag::main-response         // <1>         ClusterName clusterName = response.getClusterName().         // <2>         String clusterUuid = response.getClusterUuid().         // <3>         String nodeName = response.getNodeName().         // <4>         Version version = response.getVersion().         // <5>         Build build = response.getBuild().         // end::main-response         assertNotNull(clusterName).         assertNotNull(clusterUuid).         assertNotNull(nodeName).         assertNotNull(version).         assertNotNull(build).     } }
false;public;0;7;;public void testPing() throws IOException {     RestHighLevelClient client = highLevelClient().     // tag::ping-execute     boolean response = client.ping(RequestOptions.DEFAULT).     // end::ping-execute     assertTrue(response). }
false;public;1;4;;@Override public void onResponse(XPackInfoResponse indexResponse) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;51;;public void testXPackInfo() throws Exception {     RestHighLevelClient client = highLevelClient().     {         // tag::x-pack-info-execute         XPackInfoRequest request = new XPackInfoRequest().         // <1>         request.setVerbose(true).         request.setCategories(// <2>         EnumSet.of(XPackInfoRequest.Category.BUILD, XPackInfoRequest.Category.LICENSE, XPackInfoRequest.Category.FEATURES)).         XPackInfoResponse response = client.xpack().info(request, RequestOptions.DEFAULT).         // end::x-pack-info-execute         // tag::x-pack-info-response         // <1>         BuildInfo build = response.getBuildInfo().         // <2>         LicenseInfo license = response.getLicenseInfo().         // <3>         assertThat(license.getExpiryDate(), is(greaterThan(Instant.now().toEpochMilli()))).         // <4>         FeatureSetsInfo features = response.getFeatureSetsInfo().         // end::x-pack-info-response         assertNotNull(response.getBuildInfo()).         assertNotNull(response.getLicenseInfo()).         assertNotNull(response.getFeatureSetsInfo()).     }     {         XPackInfoRequest request = new XPackInfoRequest().         // tag::x-pack-info-execute-listener         ActionListener<XPackInfoResponse> listener = new ActionListener<XPackInfoResponse>() {              @Override             public void onResponse(XPackInfoResponse indexResponse) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::x-pack-info-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::x-pack-info-execute-async         // <1>         client.xpack().infoAsync(request, RequestOptions.DEFAULT, listener).         // end::x-pack-info-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;1;4;;@Override public void onResponse(XPackUsageResponse response) { // <1> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;43;;public void testXPackUsage() throws Exception {     RestHighLevelClient client = highLevelClient().     {         // tag::x-pack-usage-execute         XPackUsageRequest request = new XPackUsageRequest().         XPackUsageResponse response = client.xpack().usage(request, RequestOptions.DEFAULT).         // end::x-pack-usage-execute         // tag::x-pack-usage-response         Map<String, Map<String, Object>> usages = response.getUsages().         Map<String, Object> monitoringUsage = usages.get("monitoring").         assertThat(monitoringUsage.get("available"), is(true)).         assertThat(monitoringUsage.get("enabled"), is(true)).         assertThat(monitoringUsage.get("collection_enabled"), is(false)).     // end::x-pack-usage-response     }     {         XPackUsageRequest request = new XPackUsageRequest().         // tag::x-pack-usage-execute-listener         ActionListener<XPackUsageResponse> listener = new ActionListener<XPackUsageResponse>() {              @Override             public void onResponse(XPackUsageResponse response) {             // <1>             }              @Override             public void onFailure(Exception e) {             // <2>             }         }.         // end::x-pack-usage-execute-listener         // Replace the empty listener by a blocking listener in test         final CountDownLatch latch = new CountDownLatch(1).         listener = new LatchedActionListener<>(listener, latch).         // tag::x-pack-usage-execute-async         // <1>         client.xpack().usageAsync(request, RequestOptions.DEFAULT, listener).         // end::x-pack-usage-execute-async         assertTrue(latch.await(30L, TimeUnit.SECONDS)).     } }
false;public;0;12;;public void testInitializationFromClientBuilder() throws IOException {     // tag::rest-high-level-client-init     RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(new HttpHost("localhost", 9200, "http"), new HttpHost("localhost", 9201, "http"))).     // end::rest-high-level-client-init     // tag::rest-high-level-client-close     client.close(). // end::rest-high-level-client-close }
