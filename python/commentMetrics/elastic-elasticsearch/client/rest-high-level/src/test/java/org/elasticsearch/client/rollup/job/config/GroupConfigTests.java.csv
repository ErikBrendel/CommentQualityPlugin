commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected GroupConfig createTestInstance() {     return randomGroupConfig(). }
false;protected;1;4;;@Override protected GroupConfig doParseInstance(final XContentParser parser) throws IOException {     return GroupConfig.fromXContent(parser). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return true. }
false;public;0;10;;public void testValidateNullDateHistogramGroupConfig() {     final GroupConfig config = new GroupConfig(null).     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(true)).     ValidationException validationException = validation.get().     assertThat(validationException.validationErrors().size(), is(1)).     assertThat(validationException.validationErrors(), contains(is("Date histogram must not be null"))). }
false;public;0;13;;public void testValidateDateHistogramGroupConfigWithErrors() {     final DateHistogramGroupConfig dateHistogramGroupConfig = new DateHistogramGroupConfig(null, null, null, null).     final GroupConfig config = new GroupConfig(dateHistogramGroupConfig).     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(true)).     ValidationException validationException = validation.get().     assertThat(validationException.validationErrors().size(), is(2)).     assertThat(validationException.validationErrors(), containsInAnyOrder("Field name is required", "Interval is required")). }
false;public;0;13;;public void testValidateHistogramGroupConfigWithErrors() {     final HistogramGroupConfig histogramGroupConfig = new HistogramGroupConfig(0L).     final GroupConfig config = new GroupConfig(randomGroupConfig().getDateHistogram(), histogramGroupConfig, null).     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(true)).     ValidationException validationException = validation.get().     assertThat(validationException.validationErrors().size(), is(2)).     assertThat(validationException.validationErrors(), containsInAnyOrder("Fields must have at least one value", "Interval must be a positive long")). }
false;public;0;12;;public void testValidateTermsGroupConfigWithErrors() {     final TermsGroupConfig termsGroupConfig = new TermsGroupConfig().     final GroupConfig config = new GroupConfig(randomGroupConfig().getDateHistogram(), null, termsGroupConfig).     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(true)).     ValidationException validationException = validation.get().     assertThat(validationException.validationErrors().size(), is(1)).     assertThat(validationException.validationErrors(), contains("Fields must have at least one value")). }
false;public;0;7;;public void testValidate() {     final GroupConfig config = randomGroupConfig().     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(false)). }
false;static;0;6;;static GroupConfig randomGroupConfig() {     DateHistogramGroupConfig dateHistogram = DateHistogramGroupConfigTests.randomDateHistogramGroupConfig().     HistogramGroupConfig histogram = randomBoolean() ? HistogramGroupConfigTests.randomHistogramGroupConfig() : null.     TermsGroupConfig terms = randomBoolean() ? TermsGroupConfigTests.randomTermsGroupConfig() : null.     return new GroupConfig(dateHistogram, histogram, terms). }
