commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected MetricConfig createTestInstance() {     return randomMetricConfig(). }
false;protected;1;4;;@Override protected MetricConfig doParseInstance(final XContentParser parser) throws IOException {     return MetricConfig.fromXContent(parser). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return true. }
false;public;0;10;;public void testValidateNullField() {     final MetricConfig config = new MetricConfig(null, randomMetricConfig().getMetrics()).     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(true)).     ValidationException validationException = validation.get().     assertThat(validationException.validationErrors().size(), is(1)).     assertThat(validationException.validationErrors(), contains(is("Field name is required"))). }
false;public;0;10;;public void testValidateEmptyField() {     final MetricConfig config = new MetricConfig("", randomMetricConfig().getMetrics()).     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(true)).     ValidationException validationException = validation.get().     assertThat(validationException.validationErrors().size(), is(1)).     assertThat(validationException.validationErrors(), contains(is("Field name is required"))). }
false;public;0;10;;public void testValidateNullListOfMetrics() {     final MetricConfig config = new MetricConfig("field", null).     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(true)).     ValidationException validationException = validation.get().     assertThat(validationException.validationErrors().size(), is(1)).     assertThat(validationException.validationErrors(), contains(is("Metrics must be a non-null, non-empty array of strings"))). }
false;public;0;10;;public void testValidateEmptyListOfMetrics() {     final MetricConfig config = new MetricConfig("field", Collections.emptyList()).     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(true)).     ValidationException validationException = validation.get().     assertThat(validationException.validationErrors().size(), is(1)).     assertThat(validationException.validationErrors(), contains(is("Metrics must be a non-null, non-empty array of strings"))). }
false;public;0;7;;public void testValidate() {     final MetricConfig config = randomMetricConfig().     Optional<ValidationException> validation = config.validate().     assertThat(validation, notNullValue()).     assertThat(validation.isPresent(), is(false)). }
false;static;0;23;;static MetricConfig randomMetricConfig() {     final List<String> metrics = new ArrayList<>().     if (randomBoolean()) {         metrics.add("min").     }     if (randomBoolean()) {         metrics.add("max").     }     if (randomBoolean()) {         metrics.add("sum").     }     if (randomBoolean()) {         metrics.add("avg").     }     if (randomBoolean()) {         metrics.add("value_count").     }     if (metrics.size() == 0) {         metrics.add("min").     }     // large name so we don't accidentally collide     return new MetricConfig(randomAlphaOfLengthBetween(15, 25), Collections.unmodifiableList(metrics)). }
