commented;modifiers;parameterAmount;loc;comment;code
false;public;2;3;;@Override public void usedDeprecatedName(String usedName, String modernName) { }
false;public;2;3;;@Override public void usedDeprecatedField(String usedName, String replacedWith) { }
false;public;0;33;;public void testFromXContentAndToXContent() throws IOException {     String json = "{\n" + "  \"application\" : \"myapp\",\n" + "  \"name\" : \"read\",\n" + "  \"actions\" : [\n" + "    \"data:read/*\",\n" + "    \"action:login\"\n" + "  ],\n" + "  \"metadata\" : {\n" + "    \"description\" : \"Read access to myapp\"\n" + "  }\n" + "}".     final ApplicationPrivilege privilege = ApplicationPrivilege.fromXContent(XContentType.JSON.xContent().createParser(new NamedXContentRegistry(Collections.emptyList()), new DeprecationHandler() {          @Override         public void usedDeprecatedName(String usedName, String modernName) {         }          @Override         public void usedDeprecatedField(String usedName, String replacedWith) {         }     }, json)).     final Map<String, Object> metadata = new HashMap<>().     metadata.put("description", "Read access to myapp").     final ApplicationPrivilege expectedPrivilege = new ApplicationPrivilege("myapp", "read", Arrays.asList("data:read/*", "action:login"), metadata).     assertThat(privilege, equalTo(expectedPrivilege)).     XContentBuilder builder = privilege.toXContent(XContentFactory.jsonBuilder().prettyPrint(), ToXContent.EMPTY_PARAMS).     String toJson = Strings.toString(builder).     assertThat(toJson, equalTo(json)). }
false;public;0;8;;public void testEmptyApplicationName() {     final Map<String, Object> metadata = new HashMap<>().     metadata.put("description", "Read access to myapp").     final String applicationName = randomBoolean() ? null : "".     final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new ApplicationPrivilege(applicationName, "read", Arrays.asList("data:read/*", "action:login"), metadata)).     assertThat(e.getMessage(), equalTo("application name must be provided")). }
false;public;0;8;;public void testEmptyPrivilegeName() {     final Map<String, Object> metadata = new HashMap<>().     metadata.put("description", "Read access to myapp").     final String privilegenName = randomBoolean() ? null : "".     final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new ApplicationPrivilege("myapp", privilegenName, Arrays.asList("data:read/*", "action:login"), metadata)).     assertThat(e.getMessage(), equalTo("privilege name must be provided")). }
false;public;0;8;;public void testEmptyActions() {     final Map<String, Object> metadata = new HashMap<>().     metadata.put("description", "Read access to myapp").     final List<String> actions = randomBoolean() ? null : Collections.emptyList().     final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new ApplicationPrivilege("myapp", "read", actions, metadata)).     assertThat(e.getMessage(), equalTo("actions must be provided")). }
false;public;0;14;;public void testBuilder() {     final Map<String, Object> metadata = new HashMap<>().     metadata.put("description", "Read access to myapp").     ApplicationPrivilege privilege = ApplicationPrivilege.builder().application("myapp").privilege("read").actions("data:read/*", "action:login").metadata(metadata).build().     assertThat(privilege.getApplication(), equalTo("myapp")).     assertThat(privilege.getName(), equalTo("read")).     assertThat(privilege.getActions(), containsInAnyOrder("data:read/*", "action:login")).     assertThat(privilege.getMetadata(), equalTo(metadata)). }
