commented;modifiers;parameterAmount;loc;comment;code
false;public;0;30;;public void testXPackInfo() {     XPackInfoRequest infoRequest = new XPackInfoRequest().     Map<String, String> expectedParams = new HashMap<>().     infoRequest.setVerbose(ESTestCase.randomBoolean()).     if (false == infoRequest.isVerbose()) {         expectedParams.put("human", "false").     }     int option = ESTestCase.between(0, 2).     switch(option) {         case 0:             infoRequest.setCategories(EnumSet.allOf(XPackInfoRequest.Category.class)).             break.         case 1:             infoRequest.setCategories(EnumSet.of(XPackInfoRequest.Category.FEATURES)).             expectedParams.put("categories", "features").             break.         case 2:             infoRequest.setCategories(EnumSet.of(XPackInfoRequest.Category.FEATURES, XPackInfoRequest.Category.BUILD)).             expectedParams.put("categories", "build,features").             break.         default:             throw new IllegalArgumentException("invalid option [" + option + "]").     }     Request request = XPackRequestConverters.info(infoRequest).     assertEquals(HttpGet.METHOD_NAME, request.getMethod()).     assertEquals("/_xpack", request.getEndpoint()).     assertNull(request.getEntity()).     assertEquals(expectedParams, request.getParameters()). }
