commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;public void testGetStoredScript() throws Exception {     final StoredScriptSource scriptSource = new StoredScriptSource("painless", "Math.log(_score * 2) + params.my_modifier", Collections.singletonMap(Script.CONTENT_TYPE_OPTION, XContentType.JSON.mediaType())).     PutStoredScriptRequest request = new PutStoredScriptRequest(id, "score", new BytesArray("{}"), XContentType.JSON, scriptSource).     assertAcked(execute(request, highLevelClient()::putScript, highLevelClient()::putScriptAsync)).     GetStoredScriptRequest getRequest = new GetStoredScriptRequest("calculate-score").     getRequest.masterNodeTimeout("50s").     GetStoredScriptResponse getResponse = execute(getRequest, highLevelClient()::getScript, highLevelClient()::getScriptAsync).     assertThat(getResponse.getSource(), equalTo(scriptSource)). }
false;public;0;22;;public void testDeleteStoredScript() throws Exception {     final StoredScriptSource scriptSource = new StoredScriptSource("painless", "Math.log(_score * 2) + params.my_modifier", Collections.singletonMap(Script.CONTENT_TYPE_OPTION, XContentType.JSON.mediaType())).     PutStoredScriptRequest request = new PutStoredScriptRequest(id, "score", new BytesArray("{}"), XContentType.JSON, scriptSource).     assertAcked(execute(request, highLevelClient()::putScript, highLevelClient()::putScriptAsync)).     DeleteStoredScriptRequest deleteRequest = new DeleteStoredScriptRequest(id).     deleteRequest.masterNodeTimeout("50s").     deleteRequest.timeout("50s").     assertAcked(execute(deleteRequest, highLevelClient()::deleteScript, highLevelClient()::deleteScriptAsync)).     GetStoredScriptRequest getRequest = new GetStoredScriptRequest(id).     final ElasticsearchStatusException statusException = expectThrows(ElasticsearchStatusException.class, () -> execute(getRequest, highLevelClient()::getScript, highLevelClient()::getScriptAsync)).     assertThat(statusException.status(), equalTo(RestStatus.NOT_FOUND)). }
false;public;0;16;;public void testPutScript() throws Exception {     final StoredScriptSource scriptSource = new StoredScriptSource("painless", "Math.log(_score * 2) + params.my_modifier", Collections.singletonMap(Script.CONTENT_TYPE_OPTION, XContentType.JSON.mediaType())).     PutStoredScriptRequest request = new PutStoredScriptRequest(id, "score", new BytesArray("{}"), XContentType.JSON, scriptSource).     assertAcked(execute(request, highLevelClient()::putScript, highLevelClient()::putScriptAsync)).     Map<String, Object> script = getAsMap("/_scripts/" + id).     assertThat(extractValue("_id", script), equalTo(id)).     assertThat(extractValue("found", script), equalTo(true)).     assertThat(extractValue("script.lang", script), equalTo("painless")).     assertThat(extractValue("script.source", script), equalTo("Math.log(_score * 2) + params.my_modifier")). }
