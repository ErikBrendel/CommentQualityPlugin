commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;public void test() throws IOException {     List<Role> roles = new ArrayList<>().     roles.add(Role.builder().name("r1").clusterPrivileges(ClusterPrivilegeName.ALL).indicesPrivileges(IndicesPrivileges.builder().indices("ind-x").privileges(IndexPrivilegeName.ALL).build()).build()).     roles.add(Role.builder().name("r2").clusterPrivileges(ClusterPrivilegeName.ALL).indicesPrivileges(IndicesPrivileges.builder().indices("ind-y").privileges(IndexPrivilegeName.ALL).build()).build()).     CreateApiKeyRequest createApiKeyRequest = new CreateApiKeyRequest("api-key", roles, null, null).     final XContentBuilder builder = XContentFactory.jsonBuilder().     createApiKeyRequest.toXContent(builder, ToXContent.EMPTY_PARAMS).     final String output = Strings.toString(builder).     assertThat(output, equalTo("{\"name\":\"api-key\",\"role_descriptors\":{\"r1\":{\"applications\":[],\"cluster\":[\"all\"],\"indices\":[{\"names\":" + "[\"ind-x\"],\"privileges\":[\"all\"],\"allow_restricted_indices\":false}],\"metadata\":{},\"run_as\":[]}," + "\"r2\":{\"applications\":[],\"cluster\":" + "[\"all\"],\"indices\":[{\"names\":[\"ind-y\"],\"privileges\":[\"all\"],\"allow_restricted_indices\":false}]," + "\"metadata\":{},\"run_as\":[]}}}")). }
false;public;0;16;;public void testEqualsHashCode() {     final String name = randomAlphaOfLength(5).     List<Role> roles = Collections.singletonList(Role.builder().name("r1").clusterPrivileges(ClusterPrivilegeName.ALL).indicesPrivileges(IndicesPrivileges.builder().indices("ind-x").privileges(IndexPrivilegeName.ALL).build()).build()).     final TimeValue expiration = null.     final RefreshPolicy refreshPolicy = randomFrom(RefreshPolicy.values()).     CreateApiKeyRequest createApiKeyRequest = new CreateApiKeyRequest(name, roles, expiration, refreshPolicy).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(createApiKeyRequest, (original) -> {         return new CreateApiKeyRequest(original.getName(), original.getRoles(), original.getExpiration(), original.getRefreshPolicy()).     }).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(createApiKeyRequest, (original) -> {         return new CreateApiKeyRequest(original.getName(), original.getRoles(), original.getExpiration(), original.getRefreshPolicy()).     }, CreateApiKeyRequestTests::mutateTestItem). }
false;private,static;1;24;;private static CreateApiKeyRequest mutateTestItem(CreateApiKeyRequest original) {     switch(randomIntBetween(0, 3)) {         case 0:             return new CreateApiKeyRequest(randomAlphaOfLength(5), original.getRoles(), original.getExpiration(), original.getRefreshPolicy()).         case 1:             return new CreateApiKeyRequest(original.getName(), Collections.singletonList(Role.builder().name(randomAlphaOfLength(6)).clusterPrivileges(ClusterPrivilegeName.ALL).indicesPrivileges(IndicesPrivileges.builder().indices(randomAlphaOfLength(4)).privileges(IndexPrivilegeName.ALL).build()).build()), original.getExpiration(), original.getRefreshPolicy()).         case 2:             return new CreateApiKeyRequest(original.getName(), original.getRoles(), TimeValue.timeValueSeconds(10000), original.getRefreshPolicy()).         case 3:             List<RefreshPolicy> values = Arrays.stream(RefreshPolicy.values()).filter(rp -> rp != original.getRefreshPolicy()).collect(Collectors.toList()).             return new CreateApiKeyRequest(original.getName(), original.getRoles(), original.getExpiration(), randomFrom(values)).         default:             return new CreateApiKeyRequest(randomAlphaOfLength(5), original.getRoles(), original.getExpiration(), original.getRefreshPolicy()).     } }
