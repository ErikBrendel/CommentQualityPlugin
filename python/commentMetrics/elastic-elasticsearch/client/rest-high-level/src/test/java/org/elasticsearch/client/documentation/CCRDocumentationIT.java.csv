commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Before public void setupRemoteClusterConfig() throws IOException {     RestHighLevelClient client = highLevelClient().     // Configure local cluster as remote cluster:     // TODO: replace with nodes info highlevel rest client code when it is available:     final Request request = new Request("GET", "/_nodes").     Map<?, ?> nodesResponse = (Map<?, ?>) toMap(client().performRequest(request)).get("nodes").     // Select node info of first node (we don't know the node id):     nodesResponse = (Map<?, ?>) nodesResponse.get(nodesResponse.keySet().iterator().next()).     String transportAddress = (String) nodesResponse.get("transport_address").     ClusterUpdateSettingsRequest updateSettingsRequest = new ClusterUpdateSettingsRequest().     updateSettingsRequest.transientSettings(Collections.singletonMap("cluster.remote.local.seeds", transportAddress)).     ClusterUpdateSettingsResponse updateSettingsResponse = client.cluster().putSettings(updateSettingsRequest, RequestOptions.DEFAULT).     assertThat(updateSettingsResponse.isAcknowledged(), is(true)). }
false;public;1;9;;@Override public void onResponse(PutFollowResponse response) {     // <1>     boolean isFollowIndexCreated = putFollowResponse.isFollowIndexCreated().     boolean isFollowIndexShardsAcked = putFollowResponse.isFollowIndexShardsAcked().     boolean isIndexFollowingStarted = putFollowResponse.isIndexFollowingStarted(). }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;80;;public void testPutFollow() throws Exception {     RestHighLevelClient client = highLevelClient().     {         // Create leader index:         CreateIndexRequest createIndexRequest = new CreateIndexRequest("leader").         createIndexRequest.settings(Collections.singletonMap("index.soft_deletes.enabled", true)).         CreateIndexResponse response = client.indices().create(createIndexRequest, RequestOptions.DEFAULT).         assertThat(response.isAcknowledged(), is(true)).     }     // tag::ccr-put-follow-request     PutFollowRequest putFollowRequest = new PutFollowRequest(// <1>     "local", // <2>     "leader", // <3>     "follower", // <4>     ActiveShardCount.ONE).     // end::ccr-put-follow-request     // tag::ccr-put-follow-execute     PutFollowResponse putFollowResponse = client.ccr().putFollow(putFollowRequest, RequestOptions.DEFAULT).     // end::ccr-put-follow-execute     // tag::ccr-put-follow-response     boolean isFollowIndexCreated = // <1>     putFollowResponse.isFollowIndexCreated().     boolean isFollowIndexShardsAcked = // <2>     putFollowResponse.isFollowIndexShardsAcked().     boolean isIndexFollowingStarted = // <3>     putFollowResponse.isIndexFollowingStarted().     // end::ccr-put-follow-response     // Pause following and delete follower index, so that we can execute put follow api again:     {         PauseFollowRequest pauseFollowRequest = new PauseFollowRequest("follower").         AcknowledgedResponse pauseFollowResponse = client.ccr().pauseFollow(pauseFollowRequest, RequestOptions.DEFAULT).         assertThat(pauseFollowResponse.isAcknowledged(), is(true)).         DeleteIndexRequest deleteIndexRequest = new DeleteIndexRequest("follower").         assertThat(client.indices().delete(deleteIndexRequest, RequestOptions.DEFAULT).isAcknowledged(), is(true)).     }     // tag::ccr-put-follow-execute-listener     ActionListener<PutFollowResponse> listener = new ActionListener<PutFollowResponse>() {          @Override         public void onResponse(PutFollowResponse response) {             // <1>             boolean isFollowIndexCreated = putFollowResponse.isFollowIndexCreated().             boolean isFollowIndexShardsAcked = putFollowResponse.isFollowIndexShardsAcked().             boolean isIndexFollowingStarted = putFollowResponse.isIndexFollowingStarted().         }          @Override         public void onFailure(Exception e) {         // <2>         }     }.     // end::ccr-put-follow-execute-listener     // Replace the empty listener by a blocking listener in test     final CountDownLatch latch = new CountDownLatch(1).     listener = new LatchedActionListener<>(listener, latch).     // tag::ccr-put-follow-execute-async     client.ccr().putFollowAsync(putFollowRequest, RequestOptions.DEFAULT, // <1>     listener).     // end::ccr-put-follow-execute-async     assertTrue(latch.await(30L, TimeUnit.SECONDS)).     {         PauseFollowRequest pauseFollowRequest = new PauseFollowRequest("follower").         AcknowledgedResponse pauseFollowResponse = client.ccr().pauseFollow(pauseFollowRequest, RequestOptions.DEFAULT).         assertThat(pauseFollowResponse.isAcknowledged(), is(true)).     } }
false;public;1;4;;@Override public void onResponse(AcknowledgedResponse response) {     // <1>     boolean acknowledged = response.isAcknowledged(). }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;65;;public void testPauseFollow() throws Exception {     RestHighLevelClient client = highLevelClient().     {         // Create leader index:         CreateIndexRequest createIndexRequest = new CreateIndexRequest("leader").         createIndexRequest.settings(Collections.singletonMap("index.soft_deletes.enabled", true)).         CreateIndexResponse response = client.indices().create(createIndexRequest, RequestOptions.DEFAULT).         assertThat(response.isAcknowledged(), is(true)).     }     String followIndex = "follower".     // Follow index, so that it can be paused:     {         PutFollowRequest putFollowRequest = new PutFollowRequest("local", "leader", followIndex, ActiveShardCount.ONE).         PutFollowResponse putFollowResponse = client.ccr().putFollow(putFollowRequest, RequestOptions.DEFAULT).         assertThat(putFollowResponse.isFollowIndexCreated(), is(true)).         assertThat(putFollowResponse.isFollowIndexShardsAcked(), is(true)).         assertThat(putFollowResponse.isIndexFollowingStarted(), is(true)).     }     // tag::ccr-pause-follow-request     // <1>     PauseFollowRequest request = new PauseFollowRequest(followIndex).     // end::ccr-pause-follow-request     // tag::ccr-pause-follow-execute     AcknowledgedResponse response = client.ccr().pauseFollow(request, RequestOptions.DEFAULT).     // end::ccr-pause-follow-execute     // tag::ccr-pause-follow-response     // <1>     boolean acknowledged = response.isAcknowledged().     // end::ccr-pause-follow-response     // tag::ccr-pause-follow-execute-listener     ActionListener<AcknowledgedResponse> listener = new ActionListener<AcknowledgedResponse>() {          @Override         public void onResponse(AcknowledgedResponse response) {             // <1>             boolean acknowledged = response.isAcknowledged().         }          @Override         public void onFailure(Exception e) {         // <2>         }     }.     // end::ccr-pause-follow-execute-listener     // Resume follow index, so that it can be paused again:     {         ResumeFollowRequest resumeFollowRequest = new ResumeFollowRequest(followIndex).         AcknowledgedResponse resumeResponse = client.ccr().resumeFollow(resumeFollowRequest, RequestOptions.DEFAULT).         assertThat(resumeResponse.isAcknowledged(), is(true)).     }     // Replace the empty listener by a blocking listener in test     final CountDownLatch latch = new CountDownLatch(1).     listener = new LatchedActionListener<>(listener, latch).     // tag::ccr-pause-follow-execute-async     client.ccr().pauseFollowAsync(request, RequestOptions.DEFAULT, // <1>     listener).     // end::ccr-pause-follow-execute-async     assertTrue(latch.await(30L, TimeUnit.SECONDS)). }
false;public;1;4;;@Override public void onResponse(AcknowledgedResponse response) {     // <1>     boolean acknowledged = response.isAcknowledged(). }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;75;;public void testResumeFollow() throws Exception {     RestHighLevelClient client = highLevelClient().     {         // Create leader index:         CreateIndexRequest createIndexRequest = new CreateIndexRequest("leader").         createIndexRequest.settings(Collections.singletonMap("index.soft_deletes.enabled", true)).         CreateIndexResponse response = client.indices().create(createIndexRequest, RequestOptions.DEFAULT).         assertThat(response.isAcknowledged(), is(true)).     }     String followIndex = "follower".     // Follow index, so that it can be paused:     {         PutFollowRequest putFollowRequest = new PutFollowRequest("local", "leader", followIndex, ActiveShardCount.ONE).         PutFollowResponse putFollowResponse = client.ccr().putFollow(putFollowRequest, RequestOptions.DEFAULT).         assertThat(putFollowResponse.isFollowIndexCreated(), is(true)).         assertThat(putFollowResponse.isFollowIndexShardsAcked(), is(true)).         assertThat(putFollowResponse.isIndexFollowingStarted(), is(true)).     }     // Pause follow index, so that it can be resumed:     {         PauseFollowRequest pauseFollowRequest = new PauseFollowRequest(followIndex).         AcknowledgedResponse pauseResponse = client.ccr().pauseFollow(pauseFollowRequest, RequestOptions.DEFAULT).         assertThat(pauseResponse.isAcknowledged(), is(true)).     }     // tag::ccr-resume-follow-request     // <1>     ResumeFollowRequest request = new ResumeFollowRequest(followIndex).     // end::ccr-resume-follow-request     // tag::ccr-resume-follow-execute     AcknowledgedResponse response = client.ccr().resumeFollow(request, RequestOptions.DEFAULT).     // end::ccr-resume-follow-execute     // tag::ccr-resume-follow-response     // <1>     boolean acknowledged = response.isAcknowledged().     // end::ccr-resume-follow-response     // Pause follow index, so that it can be resumed again:     {         PauseFollowRequest pauseFollowRequest = new PauseFollowRequest(followIndex).         AcknowledgedResponse pauseResponse = client.ccr().pauseFollow(pauseFollowRequest, RequestOptions.DEFAULT).         assertThat(pauseResponse.isAcknowledged(), is(true)).     }     // tag::ccr-resume-follow-execute-listener     ActionListener<AcknowledgedResponse> listener = new ActionListener<AcknowledgedResponse>() {          @Override         public void onResponse(AcknowledgedResponse response) {             // <1>             boolean acknowledged = response.isAcknowledged().         }          @Override         public void onFailure(Exception e) {         // <2>         }     }.     // end::ccr-resume-follow-execute-listener     // Replace the empty listener by a blocking listener in test     final CountDownLatch latch = new CountDownLatch(1).     listener = new LatchedActionListener<>(listener, latch).     // tag::ccr-resume-follow-execute-async     client.ccr().resumeFollowAsync(request, RequestOptions.DEFAULT, // <1>     listener).     // end::ccr-resume-follow-execute-async     assertTrue(latch.await(30L, TimeUnit.SECONDS)).     // Cleanup:     client.ccr().pauseFollow(new PauseFollowRequest(followIndex), RequestOptions.DEFAULT). }
false;public;1;4;;@Override public void onResponse(AcknowledgedResponse response) {     // <1>     boolean acknowledged = response.isAcknowledged(). }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;84;;public void testUnfollow() throws Exception {     RestHighLevelClient client = highLevelClient().     {         // Create leader index:         CreateIndexRequest createIndexRequest = new CreateIndexRequest("leader").         createIndexRequest.settings(Collections.singletonMap("index.soft_deletes.enabled", true)).         CreateIndexResponse response = client.indices().create(createIndexRequest, RequestOptions.DEFAULT).         assertThat(response.isAcknowledged(), is(true)).     }     String followIndex = "follower".     // Follow index, pause and close, so that it can be unfollowed:     {         PutFollowRequest putFollowRequest = new PutFollowRequest("local", "leader", followIndex, ActiveShardCount.ONE).         PutFollowResponse putFollowResponse = client.ccr().putFollow(putFollowRequest, RequestOptions.DEFAULT).         assertThat(putFollowResponse.isFollowIndexCreated(), is(true)).         assertThat(putFollowResponse.isFollowIndexShardsAcked(), is(true)).         assertThat(putFollowResponse.isIndexFollowingStarted(), is(true)).         PauseFollowRequest pauseFollowRequest = new PauseFollowRequest(followIndex).         AcknowledgedResponse unfollowResponse = client.ccr().pauseFollow(pauseFollowRequest, RequestOptions.DEFAULT).         assertThat(unfollowResponse.isAcknowledged(), is(true)).         CloseIndexRequest closeIndexRequest = new CloseIndexRequest(followIndex).         assertThat(client.indices().close(closeIndexRequest, RequestOptions.DEFAULT).isAcknowledged(), is(true)).     }     // tag::ccr-unfollow-request     // <1>     UnfollowRequest request = new UnfollowRequest(followIndex).     // end::ccr-unfollow-request     // tag::ccr-unfollow-execute     AcknowledgedResponse response = client.ccr().unfollow(request, RequestOptions.DEFAULT).     // end::ccr-unfollow-execute     // tag::ccr-unfollow-response     // <1>     boolean acknowledged = response.isAcknowledged().     // end::ccr-unfollow-response     // Delete, put follow index, pause and close, so that it can be unfollowed again:     {         DeleteIndexRequest deleteIndexRequest = new DeleteIndexRequest(followIndex).         assertThat(client.indices().delete(deleteIndexRequest, RequestOptions.DEFAULT).isAcknowledged(), is(true)).         PutFollowRequest putFollowRequest = new PutFollowRequest("local", "leader", followIndex, ActiveShardCount.ONE).         PutFollowResponse putFollowResponse = client.ccr().putFollow(putFollowRequest, RequestOptions.DEFAULT).         assertThat(putFollowResponse.isFollowIndexCreated(), is(true)).         assertThat(putFollowResponse.isFollowIndexShardsAcked(), is(true)).         assertThat(putFollowResponse.isIndexFollowingStarted(), is(true)).         PauseFollowRequest pauseFollowRequest = new PauseFollowRequest(followIndex).         AcknowledgedResponse unfollowResponse = client.ccr().pauseFollow(pauseFollowRequest, RequestOptions.DEFAULT).         assertThat(unfollowResponse.isAcknowledged(), is(true)).         CloseIndexRequest closeIndexRequest = new CloseIndexRequest(followIndex).         assertThat(client.indices().close(closeIndexRequest, RequestOptions.DEFAULT).isAcknowledged(), is(true)).     }     // tag::ccr-unfollow-execute-listener     ActionListener<AcknowledgedResponse> listener = new ActionListener<AcknowledgedResponse>() {          @Override         public void onResponse(AcknowledgedResponse response) {             // <1>             boolean acknowledged = response.isAcknowledged().         }          @Override         public void onFailure(Exception e) {         // <2>         }     }.     // end::ccr-unfollow-execute-listener     // Replace the empty listener by a blocking listener in test     final CountDownLatch latch = new CountDownLatch(1).     listener = new LatchedActionListener<>(listener, latch).     // tag::ccr-unfollow-execute-async     client.ccr().unfollowAsync(request, RequestOptions.DEFAULT, // <1>     listener).     // end::ccr-unfollow-execute-async     assertTrue(latch.await(30L, TimeUnit.SECONDS)). }
false;public;1;4;;@Override public void onResponse(AcknowledgedResponse response) {     // <1>     boolean acknowledged = response.isAcknowledged(). }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;62;;public void testPutAutoFollowPattern() throws Exception {     RestHighLevelClient client = highLevelClient().     // tag::ccr-put-auto-follow-pattern-request     PutAutoFollowPatternRequest request = new PutAutoFollowPatternRequest(// <1>     "my_pattern", // <2>     "local", // <3>     Arrays.asList("logs-*", "metrics-*")).     // <4>     request.setFollowIndexNamePattern("copy-{{leader_index}}").     // end::ccr-put-auto-follow-pattern-request     // tag::ccr-put-auto-follow-pattern-execute     AcknowledgedResponse response = client.ccr().putAutoFollowPattern(request, RequestOptions.DEFAULT).     // end::ccr-put-auto-follow-pattern-execute     // tag::ccr-put-auto-follow-pattern-response     // <1>     boolean acknowledged = response.isAcknowledged().     // end::ccr-put-auto-follow-pattern-response     // Delete auto follow pattern, so that we can store it again:     {         final DeleteAutoFollowPatternRequest deleteRequest = new DeleteAutoFollowPatternRequest("my_pattern").         AcknowledgedResponse deleteResponse = client.ccr().deleteAutoFollowPattern(deleteRequest, RequestOptions.DEFAULT).         assertThat(deleteResponse.isAcknowledged(), is(true)).     }     // tag::ccr-put-auto-follow-pattern-execute-listener     ActionListener<AcknowledgedResponse> listener = new ActionListener<AcknowledgedResponse>() {          @Override         public void onResponse(AcknowledgedResponse response) {             // <1>             boolean acknowledged = response.isAcknowledged().         }          @Override         public void onFailure(Exception e) {         // <2>         }     }.     // end::ccr-put-auto-follow-pattern-execute-listener     // Replace the empty listener by a blocking listener in test     final CountDownLatch latch = new CountDownLatch(1).     listener = new LatchedActionListener<>(listener, latch).     // tag::ccr-put-auto-follow-pattern-execute-async     client.ccr().putAutoFollowPatternAsync(request, RequestOptions.DEFAULT, // <1>     listener).     // end::ccr-put-auto-follow-pattern-execute-async     assertTrue(latch.await(30L, TimeUnit.SECONDS)).     // Cleanup:     {         final DeleteAutoFollowPatternRequest deleteRequest = new DeleteAutoFollowPatternRequest("my_pattern").         AcknowledgedResponse deleteResponse = client.ccr().deleteAutoFollowPattern(deleteRequest, RequestOptions.DEFAULT).         assertThat(deleteResponse.isAcknowledged(), is(true)).     } }
false;public;1;4;;@Override public void onResponse(AcknowledgedResponse response) {     // <1>     boolean acknowledged = response.isAcknowledged(). }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;59;;public void testDeleteAutoFollowPattern() throws Exception {     RestHighLevelClient client = highLevelClient().     // Put auto follow pattern, so that we can delete it:     {         final PutAutoFollowPatternRequest putRequest = new PutAutoFollowPatternRequest("my_pattern", "local", Collections.singletonList("logs-*")).         AcknowledgedResponse putResponse = client.ccr().putAutoFollowPattern(putRequest, RequestOptions.DEFAULT).         assertThat(putResponse.isAcknowledged(), is(true)).     }     // tag::ccr-delete-auto-follow-pattern-request     DeleteAutoFollowPatternRequest request = // <1>     new DeleteAutoFollowPatternRequest("my_pattern").     // end::ccr-delete-auto-follow-pattern-request     // tag::ccr-delete-auto-follow-pattern-execute     AcknowledgedResponse response = client.ccr().deleteAutoFollowPattern(request, RequestOptions.DEFAULT).     // end::ccr-delete-auto-follow-pattern-execute     // tag::ccr-delete-auto-follow-pattern-response     // <1>     boolean acknowledged = response.isAcknowledged().     // end::ccr-delete-auto-follow-pattern-response     // Put auto follow pattern, so that we can delete it again:     {         final PutAutoFollowPatternRequest putRequest = new PutAutoFollowPatternRequest("my_pattern", "local", Collections.singletonList("logs-*")).         AcknowledgedResponse putResponse = client.ccr().putAutoFollowPattern(putRequest, RequestOptions.DEFAULT).         assertThat(putResponse.isAcknowledged(), is(true)).     }     // tag::ccr-delete-auto-follow-pattern-execute-listener     ActionListener<AcknowledgedResponse> listener = new ActionListener<AcknowledgedResponse>() {          @Override         public void onResponse(AcknowledgedResponse response) {             // <1>             boolean acknowledged = response.isAcknowledged().         }          @Override         public void onFailure(Exception e) {         // <2>         }     }.     // end::ccr-delete-auto-follow-pattern-execute-listener     // Replace the empty listener by a blocking listener in test     final CountDownLatch latch = new CountDownLatch(1).     listener = new LatchedActionListener<>(listener, latch).     // tag::ccr-delete-auto-follow-pattern-execute-async     client.ccr().deleteAutoFollowPatternAsync(request, RequestOptions.DEFAULT, // <1>     listener).     // end::ccr-delete-auto-follow-pattern-execute-async     assertTrue(latch.await(30L, TimeUnit.SECONDS)). }
false;public;1;7;;@Override public void onResponse(GetAutoFollowPatternResponse response) {     // <1>     Map<String, Pattern> patterns = response.getPatterns().     Pattern pattern = patterns.get("my_pattern").     pattern.getLeaderIndexPatterns(). }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;63;;public void testGetAutoFollowPattern() throws Exception {     RestHighLevelClient client = highLevelClient().     // Put auto follow pattern, so that we can get it:     {         final PutAutoFollowPatternRequest putRequest = new PutAutoFollowPatternRequest("my_pattern", "local", Collections.singletonList("logs-*")).         AcknowledgedResponse putResponse = client.ccr().putAutoFollowPattern(putRequest, RequestOptions.DEFAULT).         assertThat(putResponse.isAcknowledged(), is(true)).     }     // tag::ccr-get-auto-follow-pattern-request     GetAutoFollowPatternRequest request = // <1>     new GetAutoFollowPatternRequest("my_pattern").     // end::ccr-get-auto-follow-pattern-request     // tag::ccr-get-auto-follow-pattern-execute     GetAutoFollowPatternResponse response = client.ccr().getAutoFollowPattern(request, RequestOptions.DEFAULT).     // end::ccr-get-auto-follow-pattern-execute     // tag::ccr-get-auto-follow-pattern-response     Map<String, Pattern> patterns = response.getPatterns().     // <1>     Pattern pattern = patterns.get("my_pattern").     pattern.getLeaderIndexPatterns().     // end::ccr-get-auto-follow-pattern-response     // tag::ccr-get-auto-follow-pattern-execute-listener     ActionListener<GetAutoFollowPatternResponse> listener = new ActionListener<GetAutoFollowPatternResponse>() {          @Override         public void onResponse(GetAutoFollowPatternResponse response) {             // <1>             Map<String, Pattern> patterns = response.getPatterns().             Pattern pattern = patterns.get("my_pattern").             pattern.getLeaderIndexPatterns().         }          @Override         public void onFailure(Exception e) {         // <2>         }     }.     // end::ccr-get-auto-follow-pattern-execute-listener     // Replace the empty listener by a blocking listener in test     final CountDownLatch latch = new CountDownLatch(1).     listener = new LatchedActionListener<>(listener, latch).     // tag::ccr-get-auto-follow-pattern-execute-async     client.ccr().getAutoFollowPatternAsync(request, RequestOptions.DEFAULT, // <1>     listener).     // end::ccr-get-auto-follow-pattern-execute-async     assertTrue(latch.await(30L, TimeUnit.SECONDS)).     // Cleanup:     {         DeleteAutoFollowPatternRequest deleteRequest = new DeleteAutoFollowPatternRequest("my_pattern").         AcknowledgedResponse deleteResponse = client.ccr().deleteAutoFollowPattern(deleteRequest, RequestOptions.DEFAULT).         assertThat(deleteResponse.isAcknowledged(), is(true)).     } }
false;public;1;7;;@Override public void onResponse(CcrStatsResponse response) {     // <1>     IndicesFollowStats indicesFollowStats = response.getIndicesFollowStats().     AutoFollowStats autoFollowStats = response.getAutoFollowStats(). }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;49;;public void testGetCCRStats() throws Exception {     RestHighLevelClient client = highLevelClient().     // tag::ccr-get-stats-request     CcrStatsRequest request = // <1>     new CcrStatsRequest().     // end::ccr-get-stats-request     // tag::ccr-get-stats-execute     CcrStatsResponse response = client.ccr().getCcrStats(request, RequestOptions.DEFAULT).     // end::ccr-get-stats-execute     // tag::ccr-get-stats-response     IndicesFollowStats indicesFollowStats = // <1>     response.getIndicesFollowStats().     AutoFollowStats autoFollowStats = // <2>     response.getAutoFollowStats().     // end::ccr-get-stats-response     // tag::ccr-get-stats-execute-listener     ActionListener<CcrStatsResponse> listener = new ActionListener<CcrStatsResponse>() {          @Override         public void onResponse(CcrStatsResponse response) {             // <1>             IndicesFollowStats indicesFollowStats = response.getIndicesFollowStats().             AutoFollowStats autoFollowStats = response.getAutoFollowStats().         }          @Override         public void onFailure(Exception e) {         // <2>         }     }.     // end::ccr-get-stats-execute-listener     // Replace the empty listener by a blocking listener in test     final CountDownLatch latch = new CountDownLatch(1).     listener = new LatchedActionListener<>(listener, latch).     // tag::ccr-get-stats-execute-async     client.ccr().getCcrStatsAsync(request, RequestOptions.DEFAULT, // <1>     listener).     // end::ccr-get-stats-execute-async     assertTrue(latch.await(30L, TimeUnit.SECONDS)). }
false;public;1;5;;@Override public void onResponse(FollowStatsResponse response) {     // <1>     IndicesFollowStats indicesFollowStats = response.getIndicesFollowStats(). }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;67;;public void testGetFollowStats() throws Exception {     RestHighLevelClient client = highLevelClient().     {         // Create leader index:         CreateIndexRequest createIndexRequest = new CreateIndexRequest("leader").         createIndexRequest.settings(Collections.singletonMap("index.soft_deletes.enabled", true)).         CreateIndexResponse response = client.indices().create(createIndexRequest, RequestOptions.DEFAULT).         assertThat(response.isAcknowledged(), is(true)).     }     {         // Follow index, so that we can query for follow stats:         PutFollowRequest putFollowRequest = new PutFollowRequest("local", "leader", "follower", ActiveShardCount.ONE).         PutFollowResponse putFollowResponse = client.ccr().putFollow(putFollowRequest, RequestOptions.DEFAULT).         assertThat(putFollowResponse.isFollowIndexCreated(), is(true)).         assertThat(putFollowResponse.isFollowIndexShardsAcked(), is(true)).         assertThat(putFollowResponse.isIndexFollowingStarted(), is(true)).     }     // tag::ccr-get-follow-stats-request     FollowStatsRequest request = // <1>     new FollowStatsRequest("follower").     // end::ccr-get-follow-stats-request     // tag::ccr-get-follow-stats-execute     FollowStatsResponse response = client.ccr().getFollowStats(request, RequestOptions.DEFAULT).     // end::ccr-get-follow-stats-execute     // tag::ccr-get-follow-stats-response     IndicesFollowStats indicesFollowStats = // <1>     response.getIndicesFollowStats().     // end::ccr-get-follow-stats-response     // tag::ccr-get-follow-stats-execute-listener     ActionListener<FollowStatsResponse> listener = new ActionListener<FollowStatsResponse>() {          @Override         public void onResponse(FollowStatsResponse response) {             // <1>             IndicesFollowStats indicesFollowStats = response.getIndicesFollowStats().         }          @Override         public void onFailure(Exception e) {         // <2>         }     }.     // end::ccr-get-follow-stats-execute-listener     // Replace the empty listener by a blocking listener in test     final CountDownLatch latch = new CountDownLatch(1).     listener = new LatchedActionListener<>(listener, latch).     // tag::ccr-get-follow-stats-execute-async     client.ccr().getFollowStatsAsync(request, RequestOptions.DEFAULT, // <1>     listener).     // end::ccr-get-follow-stats-execute-async     assertTrue(latch.await(30L, TimeUnit.SECONDS)).     {         PauseFollowRequest pauseFollowRequest = new PauseFollowRequest("follower").         AcknowledgedResponse pauseFollowResponse = client.ccr().pauseFollow(pauseFollowRequest, RequestOptions.DEFAULT).         assertThat(pauseFollowResponse.isAcknowledged(), is(true)).     } }
false;public;1;5;;@Override public void onResponse(FollowInfoResponse response) {     // <1>     List<FollowInfoResponse.FollowerInfo> infos = response.getInfos(). }
false;public;1;4;;@Override public void onFailure(Exception e) { // <2> }
false;public;0;67;;public void testGetFollowInfos() throws Exception {     RestHighLevelClient client = highLevelClient().     {         // Create leader index:         CreateIndexRequest createIndexRequest = new CreateIndexRequest("leader").         createIndexRequest.settings(Collections.singletonMap("index.soft_deletes.enabled", true)).         CreateIndexResponse response = client.indices().create(createIndexRequest, RequestOptions.DEFAULT).         assertThat(response.isAcknowledged(), is(true)).     }     {         // Follow index, so that we can query for follow stats:         PutFollowRequest putFollowRequest = new PutFollowRequest("local", "leader", "follower", ActiveShardCount.ONE).         PutFollowResponse putFollowResponse = client.ccr().putFollow(putFollowRequest, RequestOptions.DEFAULT).         assertThat(putFollowResponse.isFollowIndexCreated(), is(true)).         assertThat(putFollowResponse.isFollowIndexShardsAcked(), is(true)).         assertThat(putFollowResponse.isIndexFollowingStarted(), is(true)).     }     // tag::ccr-get-follow-info-request     FollowInfoRequest request = // <1>     new FollowInfoRequest("follower").     // end::ccr-get-follow-info-request     // tag::ccr-get-follow-info-execute     FollowInfoResponse response = client.ccr().getFollowInfo(request, RequestOptions.DEFAULT).     // end::ccr-get-follow-info-execute     // tag::ccr-get-follow-info-response     List<FollowInfoResponse.FollowerInfo> infos = // <1>     response.getInfos().     // end::ccr-get-follow-info-response     // tag::ccr-get-follow-info-execute-listener     ActionListener<FollowInfoResponse> listener = new ActionListener<FollowInfoResponse>() {          @Override         public void onResponse(FollowInfoResponse response) {             // <1>             List<FollowInfoResponse.FollowerInfo> infos = response.getInfos().         }          @Override         public void onFailure(Exception e) {         // <2>         }     }.     // end::ccr-get-follow-info-execute-listener     // Replace the empty listener by a blocking listener in test     final CountDownLatch latch = new CountDownLatch(1).     listener = new LatchedActionListener<>(listener, latch).     // tag::ccr-get-follow-info-execute-async     client.ccr().getFollowInfoAsync(request, RequestOptions.DEFAULT, // <1>     listener).     // end::ccr-get-follow-info-execute-async     assertTrue(latch.await(30L, TimeUnit.SECONDS)).     {         PauseFollowRequest pauseFollowRequest = new PauseFollowRequest("follower").         AcknowledgedResponse pauseFollowResponse = client.ccr().pauseFollow(pauseFollowRequest, RequestOptions.DEFAULT).         assertThat(pauseFollowResponse.isAcknowledged(), is(true)).     } }
false;static;1;3;;static Map<String, Object> toMap(Response response) throws IOException {     return XContentHelper.convertToMap(JsonXContent.jsonXContent, EntityUtils.toString(response.getEntity()), false). }
