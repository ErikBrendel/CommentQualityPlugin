commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;22;;public static DatafeedStats createRandomInstance() {     String datafeedId = DatafeedConfigTests.randomValidDatafeedId().     DatafeedState datafeedState = randomFrom(DatafeedState.STARTED, DatafeedState.STARTING, DatafeedState.STOPPED, DatafeedState.STOPPING).     NodeAttributes nodeAttributes = null.     if (randomBoolean()) {         NodeAttributes randomAttributes = NodeAttributesTests.createRandom().         int numberOfAttributes = randomIntBetween(1, 10).         Map<String, String> attributes = new HashMap<>(numberOfAttributes).         for (int i = 0. i < numberOfAttributes. i++) {             String val = randomAlphaOfLength(10).             attributes.put("ml.key-" + i, val).         }         nodeAttributes = new NodeAttributes(randomAttributes.getId(), randomAttributes.getName(), randomAttributes.getEphemeralId(), randomAttributes.getTransportAddress(), attributes).     }     String assignmentReason = randomBoolean() ? randomAlphaOfLength(10) : null.     return new DatafeedStats(datafeedId, datafeedState, nodeAttributes, assignmentReason). }
false;protected;0;4;;@Override protected DatafeedStats createTestInstance() {     return createRandomInstance(). }
false;protected;1;4;;@Override protected DatafeedStats doParseInstance(XContentParser parser) throws IOException {     return DatafeedStats.PARSER.apply(parser, null). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return true. }
false;protected;0;4;;@Override protected Predicate<String> getRandomFieldsExcludeFilter() {     return field -> field.equals("node.attributes"). }
