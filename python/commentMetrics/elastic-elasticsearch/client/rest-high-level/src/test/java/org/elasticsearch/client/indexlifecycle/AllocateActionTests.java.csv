commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected AllocateAction createTestInstance() {     return randomInstance(). }
false;static;0;25;;static AllocateAction randomInstance() {     boolean hasAtLeastOneMap = false.     Map<String, String> includes.     if (randomBoolean()) {         includes = randomMap(1, 100).         hasAtLeastOneMap = true.     } else {         includes = randomBoolean() ? null : Collections.emptyMap().     }     Map<String, String> excludes.     if (randomBoolean()) {         hasAtLeastOneMap = true.         excludes = randomMap(1, 100).     } else {         excludes = randomBoolean() ? null : Collections.emptyMap().     }     Map<String, String> requires.     if (hasAtLeastOneMap == false || randomBoolean()) {         requires = randomMap(1, 100).     } else {         requires = randomBoolean() ? null : Collections.emptyMap().     }     Integer numberOfReplicas = randomBoolean() ? null : randomIntBetween(0, 10).     return new AllocateAction(numberOfReplicas, includes, excludes, requires). }
false;protected;1;4;;@Override protected AllocateAction doParseInstance(XContentParser parser) {     return AllocateAction.parse(parser). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return true. }
false;protected;0;6;;@Override protected Predicate<String> getRandomFieldsExcludeFilter() {     // setting it this way allows for new fields at the root     return (field) -> field.isEmpty() == false. }
false;public;0;10;;public void testAllMapsNullOrEmpty() {     Map<String, String> include = randomBoolean() ? null : Collections.emptyMap().     Map<String, String> exclude = randomBoolean() ? null : Collections.emptyMap().     Map<String, String> require = randomBoolean() ? null : Collections.emptyMap().     IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> new AllocateAction(null, include, exclude, require)).     assertEquals("At least one of " + AllocateAction.INCLUDE_FIELD.getPreferredName() + ", " + AllocateAction.EXCLUDE_FIELD.getPreferredName() + " or " + AllocateAction.REQUIRE_FIELD.getPreferredName() + "must contain attributes for action " + AllocateAction.NAME, exception.getMessage()). }
false;public;0;8;;public void testInvalidNumberOfReplicas() {     Map<String, String> include = randomMap(1, 5).     Map<String, String> exclude = randomBoolean() ? null : Collections.emptyMap().     Map<String, String> require = randomBoolean() ? null : Collections.emptyMap().     IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> new AllocateAction(randomIntBetween(-1000, -1), include, exclude, require)).     assertEquals("[" + AllocateAction.NUMBER_OF_REPLICAS_FIELD.getPreferredName() + "] must be >= 0", exception.getMessage()). }
false;public,static;2;8;;public static Map<String, String> randomMap(int minEntries, int maxEntries) {     Map<String, String> map = new HashMap<>().     int numIncludes = randomIntBetween(minEntries, maxEntries).     for (int i = 0. i < numIncludes. i++) {         map.put(randomAlphaOfLengthBetween(1, 20), randomAlphaOfLengthBetween(1, 20)).     }     return map. }
