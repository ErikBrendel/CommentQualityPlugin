commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;public void testFromXContent() throws IOException {     xContentTester(this::createParser, this::createTestInstance, this::toXContent, GetTaskResponse::fromXContent).supportsUnknownFields(true).assertEqualsConsumer(this::assertEqualInstances).assertToXContentEquivalence(true).randomFieldsExcludeFilter(field -> field.endsWith("headers") || field.endsWith("status")).test(). }
false;private;0;3;;private GetTaskResponse createTestInstance() {     return new GetTaskResponse(randomBoolean(), randomTaskInfo()). }
false;private;2;10;;private void toXContent(GetTaskResponse response, XContentBuilder builder) throws IOException {     builder.startObject().     {         builder.field(GetTaskResponse.COMPLETED.getPreferredName(), response.isCompleted()).         builder.startObject(GetTaskResponse.TASK.getPreferredName()).         response.getTaskInfo().toXContent(builder, ToXContent.EMPTY_PARAMS).         builder.endObject().     }     builder.endObject(). }
false;private;2;4;;private void assertEqualInstances(GetTaskResponse expectedInstance, GetTaskResponse newInstance) {     assertEquals(expectedInstance.isCompleted(), newInstance.isCompleted()).     assertEquals(expectedInstance.getTaskInfo(), newInstance.getTaskInfo()). }
false;static;0;15;;static TaskInfo randomTaskInfo() {     TaskId taskId = randomTaskId().     String type = randomAlphaOfLength(5).     String action = randomAlphaOfLength(5).     Task.Status status = randomBoolean() ? randomRawTaskStatus() : null.     String description = randomBoolean() ? randomAlphaOfLength(5) : null.     long startTime = randomLong().     long runningTimeNanos = randomLong().     boolean cancellable = randomBoolean().     TaskId parentTaskId = randomBoolean() ? TaskId.EMPTY_TASK_ID : randomTaskId().     Map<String, String> headers = randomBoolean() ? Collections.emptyMap() : Collections.singletonMap(randomAlphaOfLength(5), randomAlphaOfLength(5)).     return new TaskInfo(taskId, type, action, description, status, startTime, runningTimeNanos, cancellable, parentTaskId, headers). }
false;private,static;0;3;;private static TaskId randomTaskId() {     return new TaskId(randomAlphaOfLength(5), randomLong()). }
false;private,static;0;13;;private static RawTaskStatus randomRawTaskStatus() {     try (XContentBuilder builder = XContentBuilder.builder(Requests.INDEX_CONTENT_TYPE.xContent())) {         builder.startObject().         int fields = between(0, 10).         for (int f = 0. f < fields. f++) {             builder.field(randomAlphaOfLength(5), randomAlphaOfLength(5)).         }         builder.endObject().         return new RawTaskStatus(BytesReference.bytes(builder)).     } catch (IOException e) {         throw new IllegalStateException(e).     } }
