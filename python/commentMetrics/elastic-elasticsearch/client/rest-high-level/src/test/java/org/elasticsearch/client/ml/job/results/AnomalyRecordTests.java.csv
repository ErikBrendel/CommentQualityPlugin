commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected AnomalyRecord createTestInstance() {     return createTestInstance("foo"). }
false;public,static;1;50;;public static AnomalyRecord createTestInstance(String jobId) {     AnomalyRecord anomalyRecord = new AnomalyRecord(jobId, new Date(randomNonNegativeLong()), randomNonNegativeLong()).     anomalyRecord.setActual(Collections.singletonList(randomDouble())).     anomalyRecord.setTypical(Collections.singletonList(randomDouble())).     anomalyRecord.setProbability(randomDouble()).     if (randomBoolean()) {         anomalyRecord.setMultiBucketImpact(randomDouble()).     }     anomalyRecord.setRecordScore(randomDouble()).     anomalyRecord.setInitialRecordScore(randomDouble()).     anomalyRecord.setInterim(randomBoolean()).     if (randomBoolean()) {         anomalyRecord.setFieldName(randomAlphaOfLength(12)).     }     if (randomBoolean()) {         anomalyRecord.setByFieldName(randomAlphaOfLength(12)).         anomalyRecord.setByFieldValue(randomAlphaOfLength(12)).     }     if (randomBoolean()) {         anomalyRecord.setPartitionFieldName(randomAlphaOfLength(12)).         anomalyRecord.setPartitionFieldValue(randomAlphaOfLength(12)).     }     if (randomBoolean()) {         anomalyRecord.setOverFieldName(randomAlphaOfLength(12)).         anomalyRecord.setOverFieldValue(randomAlphaOfLength(12)).     }     anomalyRecord.setFunction(randomAlphaOfLengthBetween(5, 20)).     anomalyRecord.setFunctionDescription(randomAlphaOfLengthBetween(5, 20)).     if (randomBoolean()) {         anomalyRecord.setCorrelatedByFieldValue(randomAlphaOfLength(16)).     }     if (randomBoolean()) {         int count = randomIntBetween(0, 9).         List<Influence> influences = new ArrayList<>().         for (int i = 0. i < count. i++) {             influences.add(new Influence(randomAlphaOfLength(8), Collections.singletonList(randomAlphaOfLengthBetween(1, 28)))).         }         anomalyRecord.setInfluencers(influences).     }     if (randomBoolean()) {         int count = randomIntBetween(0, 9).         List<AnomalyCause> causes = new ArrayList<>().         for (int i = 0. i < count. i++) {             causes.add(new AnomalyCauseTests().createTestInstance()).         }         anomalyRecord.setCauses(causes).     }     return anomalyRecord. }
false;protected;1;4;;@Override protected AnomalyRecord doParseInstance(XContentParser parser) {     return AnomalyRecord.PARSER.apply(parser, null). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return true. }
