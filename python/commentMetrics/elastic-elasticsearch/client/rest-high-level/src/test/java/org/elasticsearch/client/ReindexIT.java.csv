commented;modifiers;parameterAmount;loc;comment;code
false;public;0;45;;public void testReindex() throws IOException {     final String sourceIndex = "source1".     final String destinationIndex = "dest".     {         // Prepare         Settings settings = Settings.builder().put("number_of_shards", 1).put("number_of_replicas", 0).build().         createIndex(sourceIndex, settings).         createIndex(destinationIndex, settings).         BulkRequest bulkRequest = new BulkRequest().add(new IndexRequest(sourceIndex).id("1").source(Collections.singletonMap("foo", "bar"), XContentType.JSON)).add(new IndexRequest(sourceIndex).id("2").source(Collections.singletonMap("foo2", "bar2"), XContentType.JSON)).setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).         assertEquals(RestStatus.OK, highLevelClient().bulk(bulkRequest, RequestOptions.DEFAULT).status()).     }     {         // reindex one document with id 1 from source to destination         ReindexRequest reindexRequest = new ReindexRequest().         reindexRequest.setSourceIndices(sourceIndex).         reindexRequest.setDestIndex(destinationIndex).         reindexRequest.setSourceQuery(new IdsQueryBuilder().addIds("1")).         reindexRequest.setRefresh(true).         BulkByScrollResponse bulkResponse = execute(reindexRequest, highLevelClient()::reindex, highLevelClient()::reindexAsync).         assertEquals(1, bulkResponse.getCreated()).         assertEquals(1, bulkResponse.getTotal()).         assertEquals(0, bulkResponse.getDeleted()).         assertEquals(0, bulkResponse.getNoops()).         assertEquals(0, bulkResponse.getVersionConflicts()).         assertEquals(1, bulkResponse.getBatches()).         assertTrue(bulkResponse.getTook().getMillis() > 0).         assertEquals(1, bulkResponse.getBatches()).         assertEquals(0, bulkResponse.getBulkFailures().size()).         assertEquals(0, bulkResponse.getSearchFailures().size()).     } }
false;public;0;39;;public void testReindexTask() throws Exception {     final String sourceIndex = "source123".     final String destinationIndex = "dest2".     {         // Prepare         Settings settings = Settings.builder().put("number_of_shards", 1).put("number_of_replicas", 0).build().         createIndex(sourceIndex, settings).         createIndex(destinationIndex, settings).         BulkRequest bulkRequest = new BulkRequest().add(new IndexRequest(sourceIndex).id("1").source(Collections.singletonMap("foo", "bar"), XContentType.JSON)).add(new IndexRequest(sourceIndex).id("2").source(Collections.singletonMap("foo2", "bar2"), XContentType.JSON)).setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).         assertEquals(RestStatus.OK, highLevelClient().bulk(bulkRequest, RequestOptions.DEFAULT).status()).     }     {         // tag::submit-reindex-task         // <1>         ReindexRequest reindexRequest = new ReindexRequest().         reindexRequest.setSourceIndices(sourceIndex).         reindexRequest.setDestIndex(destinationIndex).         reindexRequest.setRefresh(true).         TaskSubmissionResponse reindexSubmission = highLevelClient().submitReindexTask(reindexRequest, // <2>         RequestOptions.DEFAULT).         // <3>         String taskId = reindexSubmission.getTask().         // end::submit-reindex-task         assertBusy(checkCompletionStatus(client(), taskId)).     } }
false;static;2;6;;static CheckedRunnable<Exception> checkCompletionStatus(RestClient client, String taskId) {     return () -> {         Response response = client.performRequest(new Request("GET", "/_tasks/" + taskId)).         assertTrue((boolean) entityAsMap(response).get("completed")).     }. }
