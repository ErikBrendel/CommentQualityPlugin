commented;modifiers;parameterAmount;loc;comment;code
false;public;0;33;;public void testFromXContent() throws IOException {     List<String> invalidatedApiKeys = Arrays.asList(randomArray(2, 5, String[]::new, () -> randomAlphaOfLength(5))).     List<String> previouslyInvalidatedApiKeys = Arrays.asList(randomArray(2, 3, String[]::new, () -> randomAlphaOfLength(5))).     List<ElasticsearchException> errors = Arrays.asList(randomArray(2, 5, ElasticsearchException[]::new, () -> new ElasticsearchException(randomAlphaOfLength(5), new IllegalArgumentException(randomAlphaOfLength(4))))).     final XContentType xContentType = randomFrom(XContentType.values()).     final XContentBuilder builder = XContentFactory.contentBuilder(xContentType).     builder.startObject().array("invalidated_api_keys", invalidatedApiKeys.toArray(Strings.EMPTY_ARRAY)).array("previously_invalidated_api_keys", previouslyInvalidatedApiKeys.toArray(Strings.EMPTY_ARRAY)).field("error_count", errors.size()).     if (errors.isEmpty() == false) {         builder.field("error_details").         builder.startArray().         for (ElasticsearchException e : errors) {             builder.startObject().             ElasticsearchException.generateThrowableXContent(builder, ToXContent.EMPTY_PARAMS, e).             builder.endObject().         }         builder.endArray().     }     builder.endObject().     BytesReference xContent = BytesReference.bytes(builder).     final InvalidateApiKeyResponse response = InvalidateApiKeyResponse.fromXContent(createParser(xContentType.xContent(), xContent)).     assertThat(response.getInvalidatedApiKeys(), containsInAnyOrder(invalidatedApiKeys.toArray(Strings.EMPTY_ARRAY))).     assertThat(response.getPreviouslyInvalidatedApiKeys(), containsInAnyOrder(previouslyInvalidatedApiKeys.toArray(Strings.EMPTY_ARRAY))).     assertThat(response.getErrors(), is(notNullValue())).     assertThat(response.getErrors().size(), is(errors.size())).     assertThat(response.getErrors().get(0).toString(), containsString("type=illegal_argument_exception")).     assertThat(response.getErrors().get(1).toString(), containsString("type=illegal_argument_exception")). }
false;public;0;17;;public void testEqualsHashCode() {     List<String> invalidatedApiKeys = Arrays.asList(randomArray(2, 5, String[]::new, () -> randomAlphaOfLength(5))).     List<String> previouslyInvalidatedApiKeys = Arrays.asList(randomArray(2, 3, String[]::new, () -> randomAlphaOfLength(5))).     List<ElasticsearchException> errors = Arrays.asList(randomArray(2, 5, ElasticsearchException[]::new, () -> new ElasticsearchException(randomAlphaOfLength(5), new IllegalArgumentException(randomAlphaOfLength(4))))).     InvalidateApiKeyResponse invalidateApiKeyResponse = new InvalidateApiKeyResponse(invalidatedApiKeys, previouslyInvalidatedApiKeys, errors).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(invalidateApiKeyResponse, (original) -> {         return new InvalidateApiKeyResponse(original.getInvalidatedApiKeys(), original.getPreviouslyInvalidatedApiKeys(), original.getErrors()).     }).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(invalidateApiKeyResponse, (original) -> {         return new InvalidateApiKeyResponse(original.getInvalidatedApiKeys(), original.getPreviouslyInvalidatedApiKeys(), original.getErrors()).     }, InvalidateApiKeyResponseTests::mutateTestItem). }
false;private,static;1;15;;private static InvalidateApiKeyResponse mutateTestItem(InvalidateApiKeyResponse original) {     switch(randomIntBetween(0, 2)) {         case 0:             return new InvalidateApiKeyResponse(Arrays.asList(randomArray(2, 5, String[]::new, () -> randomAlphaOfLength(5))), original.getPreviouslyInvalidatedApiKeys(), original.getErrors()).         case 1:             return new InvalidateApiKeyResponse(original.getInvalidatedApiKeys(), Collections.emptyList(), original.getErrors()).         case 2:             return new InvalidateApiKeyResponse(original.getInvalidatedApiKeys(), original.getPreviouslyInvalidatedApiKeys(), Collections.emptyList()).         default:             return new InvalidateApiKeyResponse(Arrays.asList(randomArray(2, 5, String[]::new, () -> randomAlphaOfLength(5))), original.getPreviouslyInvalidatedApiKeys(), original.getErrors()).     } }
