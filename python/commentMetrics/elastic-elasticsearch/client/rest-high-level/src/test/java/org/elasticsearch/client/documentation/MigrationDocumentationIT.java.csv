commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;public void testClusterHealth() throws IOException {     RestHighLevelClient client = highLevelClient().     {         // tag::migration-cluster-health         Request request = new Request("GET", "/_cluster/health").         // <1>         request.addParameter("wait_for_status", "green").         // <2>         Response response = client.getLowLevelClient().performRequest(request).         ClusterHealthStatus healthStatus.         try (InputStream is = response.getEntity().getContent()) {             // <3>             // <4>             Map<String, Object> map = XContentHelper.convertToMap(XContentType.JSON.xContent(), is, true).             // <5>             healthStatus = ClusterHealthStatus.fromString((String) map.get("status")).         }         if (healthStatus != ClusterHealthStatus.GREEN) {         // <6>         }         // end::migration-cluster-health         assertSame(ClusterHealthStatus.GREEN, healthStatus).     } }
false;public;1;4;;@Override public void onResponse(DeleteResponse deleteResponse) { // <3> }
false;public;1;4;;@Override public void onFailure(Exception e) { // <4> }
false;public;0;38;;public void testRequests() throws Exception {     RestHighLevelClient client = highLevelClient().     {         // tag::migration-request-ctor         // <1>         IndexRequest request = new IndexRequest("index").id("id").         request.source("{\"field\":\"value\"}", XContentType.JSON).         // end::migration-request-ctor         // tag::migration-request-ctor-execution         IndexResponse response = client.index(request, RequestOptions.DEFAULT).         // end::migration-request-ctor-execution         assertEquals(RestStatus.CREATED, response.status()).     }     {         // tag::migration-request-async-execution         // <1>         DeleteRequest request = new DeleteRequest("index", "id").         client.deleteAsync(request, RequestOptions.DEFAULT, new // <2>         ActionListener<DeleteResponse>() {              @Override             public void onResponse(DeleteResponse deleteResponse) {             // <3>             }              @Override             public void onFailure(Exception e) {             // <4>             }         }).         // end::migration-request-async-execution         assertBusy(() -> assertFalse(client.exists(new GetRequest("index", "id"), RequestOptions.DEFAULT))).     }     {         // tag::migration-request-sync-execution         DeleteRequest request = new DeleteRequest("index", "id").         // <1>         DeleteResponse response = client.delete(request, RequestOptions.DEFAULT).         // end::migration-request-sync-execution         assertEquals(RestStatus.NOT_FOUND, response.status()).     } }
