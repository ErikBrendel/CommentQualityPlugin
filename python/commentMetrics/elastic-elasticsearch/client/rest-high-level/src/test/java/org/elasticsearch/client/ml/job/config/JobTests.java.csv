commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Job createTestInstance() {     return createRandomizedJob(). }
false;protected;1;4;;@Override protected Job doParseInstance(XContentParser parser) {     return Job.PARSER.apply(parser, null).build(). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return false. }
false;public;0;6;;public void testFutureMetadataParse() throws IOException {     XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, FUTURE_JOB).     // The parser should tolerate unknown fields     assertNotNull(Job.PARSER.apply(parser, null).build()). }
false;public;0;7;;public void testCopyConstructor() {     for (int i = 0. i < NUMBER_OF_TEST_RUNS. i++) {         Job job = createTestInstance().         Job copy = new Job.Builder(job).build().         assertEquals(job, copy).     } }
false;public;0;5;;public void testBuilder_WithNullID() {     Job.Builder builder = new Job.Builder("anything").setId(null).     NullPointerException ex = expectThrows(NullPointerException.class, builder::build).     assertEquals("[job_id] must not be null", ex.getMessage()). }
false;public;0;5;;public void testBuilder_WithNullJobType() {     Job.Builder builder = new Job.Builder("anything").setJobType(null).     NullPointerException ex = expectThrows(NullPointerException.class, builder::build).     assertEquals("[job_type] must not be null", ex.getMessage()). }
false;public,static;0;4;;public static String randomValidJobId() {     CodepointSetGenerator generator = new CodepointSetGenerator("abcdefghijklmnopqrstuvwxyz".toCharArray()).     return generator.ofCodePointsLength(random(), 10, 10). }
false;public,static;0;6;;public static AnalysisConfig.Builder createAnalysisConfig() {     Detector.Builder d1 = new Detector.Builder("info_content", "domain").     d1.setOverFieldName("client").     Detector.Builder d2 = new Detector.Builder("min", "field").     return new AnalysisConfig.Builder(Arrays.asList(d1.build(), d2.build())). }
false;public,static;0;54;;public static Job.Builder createRandomizedJobBuilder() {     String jobId = randomValidJobId().     Job.Builder builder = new Job.Builder(jobId).     if (randomBoolean()) {         builder.setDescription(randomAlphaOfLength(10)).     }     if (randomBoolean()) {         int groupsNum = randomIntBetween(0, 10).         List<String> groups = new ArrayList<>(groupsNum).         for (int i = 0. i < groupsNum. i++) {             groups.add(randomValidJobId()).         }         builder.setGroups(groups).     }     builder.setCreateTime(new Date(randomNonNegativeLong())).     if (randomBoolean()) {         builder.setFinishedTime(new Date(randomNonNegativeLong())).     }     builder.setAnalysisConfig(AnalysisConfigTests.createRandomized()).     builder.setAnalysisLimits(AnalysisLimitsTests.createRandomized()).     DataDescription.Builder dataDescription = new DataDescription.Builder().     dataDescription.setFormat(randomFrom(DataDescription.DataFormat.values())).     builder.setDataDescription(dataDescription).     if (randomBoolean()) {         builder.setModelPlotConfig(new ModelPlotConfig(randomBoolean(), randomAlphaOfLength(10))).     }     if (randomBoolean()) {         builder.setRenormalizationWindowDays(randomNonNegativeLong()).     }     if (randomBoolean()) {         builder.setBackgroundPersistInterval(TimeValue.timeValueHours(randomIntBetween(1, 24))).     }     if (randomBoolean()) {         builder.setModelSnapshotRetentionDays(randomNonNegativeLong()).     }     if (randomBoolean()) {         builder.setResultsRetentionDays(randomNonNegativeLong()).     }     if (randomBoolean()) {         builder.setCustomSettings(Collections.singletonMap(randomAlphaOfLength(10), randomAlphaOfLength(10))).     }     if (randomBoolean()) {         builder.setModelSnapshotId(randomAlphaOfLength(10)).     }     if (randomBoolean()) {         builder.setResultsIndexName(randomValidJobId()).     }     if (randomBoolean()) {         builder.setDeleting(randomBoolean()).     }     return builder. }
false;public,static;0;3;;public static Job createRandomizedJob() {     return createRandomizedJobBuilder().build(). }
false;protected;0;5;;@Override protected NamedXContentRegistry xContentRegistry() {     SearchModule searchModule = new SearchModule(Settings.EMPTY, false, Collections.emptyList()).     return new NamedXContentRegistry(searchModule.getNamedXContents()). }
