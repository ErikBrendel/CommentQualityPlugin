commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;public void testCloseAllDatafeedsRequest() {     StopDatafeedRequest request = StopDatafeedRequest.stopAllDatafeedsRequest().     assertEquals(request.getDatafeedIds().size(), 1).     assertEquals(request.getDatafeedIds().get(0), "_all"). }
false;public;0;7;;public void testWithNullDatafeedIds() {     Exception exception = expectThrows(IllegalArgumentException.class, StopDatafeedRequest::new).     assertEquals(exception.getMessage(), "datafeedIds must not be empty").     exception = expectThrows(NullPointerException.class, () -> new StopDatafeedRequest("datafeed1", null)).     assertEquals(exception.getMessage(), "datafeedIds must not contain null values"). }
false;protected;0;25;;@Override protected StopDatafeedRequest createTestInstance() {     int datafeedCount = randomIntBetween(1, 10).     List<String> datafeedIds = new ArrayList<>(datafeedCount).     for (int i = 0. i < datafeedCount. i++) {         datafeedIds.add(randomAlphaOfLength(10)).     }     StopDatafeedRequest request = new StopDatafeedRequest(datafeedIds.toArray(new String[0])).     if (randomBoolean()) {         request.setAllowNoDatafeeds(randomBoolean()).     }     if (randomBoolean()) {         request.setTimeout(TimeValue.timeValueMinutes(randomIntBetween(1, 10))).     }     if (randomBoolean()) {         request.setForce(randomBoolean()).     }     return request. }
false;protected;1;4;;@Override protected StopDatafeedRequest doParseInstance(XContentParser parser) throws IOException {     return StopDatafeedRequest.PARSER.parse(parser, null). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return false. }
