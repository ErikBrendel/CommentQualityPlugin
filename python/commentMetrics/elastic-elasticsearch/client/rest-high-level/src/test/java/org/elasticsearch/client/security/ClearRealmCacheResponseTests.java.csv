commented;modifiers;parameterAmount;loc;comment;code
false;public;0;35;;public void testParseFromXContent() throws IOException {     final ElasticsearchException exception = new ElasticsearchException("test").     final String nodesHeader = "\"_nodes\": { \"total\": 2, \"successful\": 1, \"failed\": 1, \"failures\": [ " + Strings.toString(exception) + "] },".     final String clusterName = "\"cluster_name\": \"cn\",".     try (XContentParser parser = JsonXContent.jsonXContent.createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, "{" + nodesHeader + clusterName + "\"nodes\" : {} }")) {         ClearRealmCacheResponse response = ClearRealmCacheResponse.fromXContent(parser).         assertNotNull(response).         assertThat(response.getNodes(), empty()).         assertThat(response.getClusterName(), equalTo("cn")).         assertThat(response.getHeader().getSuccessful(), equalTo(1)).         assertThat(response.getHeader().getFailed(), equalTo(1)).         assertThat(response.getHeader().getTotal(), equalTo(2)).         assertThat(response.getHeader().getFailures(), hasSize(1)).         assertThat(response.getHeader().getFailures().get(0).getMessage(), containsString("reason=test")).     }     try (XContentParser parser = JsonXContent.jsonXContent.createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, "{" + nodesHeader + clusterName + "\"nodes\" : { " + "\"id1\": { \"name\": \"a\"}, " + "\"id2\": { \"name\": \"b\"}" + "}}")) {         ClearRealmCacheResponse response = ClearRealmCacheResponse.fromXContent(parser).         assertNotNull(response).         assertThat(response.getNodes(), hasSize(2)).         assertThat(response.getNodes().get(0).getId(), equalTo("id1")).         assertThat(response.getNodes().get(0).getName(), equalTo("a")).         assertThat(response.getNodes().get(1).getId(), equalTo("id2")).         assertThat(response.getNodes().get(1).getName(), equalTo("b")).     } }
