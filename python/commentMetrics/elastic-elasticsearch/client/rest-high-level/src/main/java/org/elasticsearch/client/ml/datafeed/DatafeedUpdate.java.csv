commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;5;;private static BytesReference parseBytes(XContentParser parser) throws IOException {     XContentBuilder contentBuilder = JsonXContent.contentBuilder().     contentBuilder.generator().copyCurrentStructure(parser).     return BytesReference.bytes(contentBuilder). }
true;public;0;3;/**  * Get the id of the datafeed to update  */ ;/**  * Get the id of the datafeed to update  */ public String getId() {     return id. }
false;public;2;33;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(DatafeedConfig.ID.getPreferredName(), id).     addOptionalField(builder, Job.ID, jobId).     if (queryDelay != null) {         builder.field(DatafeedConfig.QUERY_DELAY.getPreferredName(), queryDelay.getStringRep()).     }     if (frequency != null) {         builder.field(DatafeedConfig.FREQUENCY.getPreferredName(), frequency.getStringRep()).     }     addOptionalField(builder, DatafeedConfig.INDICES, indices).     if (query != null) {         builder.field(DatafeedConfig.QUERY.getPreferredName(), asMap(query)).     }     if (aggregations != null) {         builder.field(DatafeedConfig.AGGREGATIONS.getPreferredName(), asMap(aggregations)).     }     if (scriptFields != null) {         builder.startObject(DatafeedConfig.SCRIPT_FIELDS.getPreferredName()).         for (SearchSourceBuilder.ScriptField scriptField : scriptFields) {             scriptField.toXContent(builder, params).         }         builder.endObject().     }     if (delayedDataCheckConfig != null) {         builder.field(DatafeedConfig.DELAYED_DATA_CHECK_CONFIG.getPreferredName(), delayedDataCheckConfig).     }     addOptionalField(builder, DatafeedConfig.SCROLL_SIZE, scrollSize).     addOptionalField(builder, DatafeedConfig.CHUNKING_CONFIG, chunkingConfig).     builder.endObject().     return builder. }
false;private;3;5;;private void addOptionalField(XContentBuilder builder, ParseField field, Object value) throws IOException {     if (value != null) {         builder.field(field.getPreferredName(), value).     } }
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;0;3;;public TimeValue getQueryDelay() {     return queryDelay. }
false;public;0;3;;public TimeValue getFrequency() {     return frequency. }
false;public;0;3;;public List<String> getIndices() {     return indices. }
false;public;0;3;;public Integer getScrollSize() {     return scrollSize. }
false;public;0;3;;public BytesReference getQuery() {     return query. }
false;public;0;3;;public BytesReference getAggregations() {     return aggregations. }
false;public;0;3;;public List<SearchSourceBuilder.ScriptField> getScriptFields() {     return scriptFields == null ? Collections.emptyList() : scriptFields. }
false;public;0;3;;public ChunkingConfig getChunkingConfig() {     return chunkingConfig. }
false;public;0;3;;public DelayedDataCheckConfig getDelayedDataCheckConfig() {     return delayedDataCheckConfig. }
false;private,static;1;3;;private static Map<String, Object> asMap(BytesReference bytesReference) {     return bytesReference == null ? null : XContentHelper.convertToMap(bytesReference, true, XContentType.JSON).v2(). }
true;public;1;24;/**  * The lists of indices and types are compared for equality but they are not  * sorted first so this test could fail simply because the indices and types  * lists are in different orders.  *  * Also note this could be a heavy operation when a query or aggregations  * are set as we need to convert the bytes references into maps to correctly  * compare them.  */ ;/**  * The lists of indices and types are compared for equality but they are not  * sorted first so this test could fail simply because the indices and types  * lists are in different orders.  *  * Also note this could be a heavy operation when a query or aggregations  * are set as we need to convert the bytes references into maps to correctly  * compare them.  */ @Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     DatafeedUpdate that = (DatafeedUpdate) other.     return Objects.equals(this.id, that.id) && Objects.equals(this.jobId, that.jobId) && Objects.equals(this.frequency, that.frequency) && Objects.equals(this.queryDelay, that.queryDelay) && Objects.equals(this.indices, that.indices) && Objects.equals(asMap(this.query), asMap(that.query)) && Objects.equals(this.scrollSize, that.scrollSize) && Objects.equals(asMap(this.aggregations), asMap(that.aggregations)) && Objects.equals(this.delayedDataCheckConfig, that.delayedDataCheckConfig) && Objects.equals(this.scriptFields, that.scriptFields) && Objects.equals(this.chunkingConfig, that.chunkingConfig). }
true;public;0;5;/**  * Note this could be a heavy operation when a query or aggregations  * are set as we need to convert the bytes references into maps to  * compute a stable hash code.  */ ;/**  * Note this could be a heavy operation when a query or aggregations  * are set as we need to convert the bytes references into maps to  * compute a stable hash code.  */ @Override public int hashCode() {     return Objects.hash(id, jobId, frequency, queryDelay, indices, asMap(query), scrollSize, asMap(aggregations), scriptFields, chunkingConfig, delayedDataCheckConfig). }
false;public,static;1;3;;public static Builder builder(String id) {     return new Builder(id). }
false;public;1;4;;public Builder setJobId(String jobId) {     this.jobId = jobId.     return this. }
false;public;1;4;;public Builder setIndices(List<String> indices) {     this.indices = indices.     return this. }
false;public;1;3;;public Builder setIndices(String... indices) {     return setIndices(Arrays.asList(indices)). }
false;public;1;4;;public Builder setQueryDelay(TimeValue queryDelay) {     this.queryDelay = queryDelay.     return this. }
false;public;1;4;;public Builder setFrequency(TimeValue frequency) {     this.frequency = frequency.     return this. }
false;private;1;4;;private Builder setQuery(BytesReference query) {     this.query = query.     return this. }
false;public;1;4;;public Builder setQuery(String queryAsJson) {     this.query = queryAsJson == null ? null : new BytesArray(queryAsJson).     return this. }
false;public;1;4;;public Builder setQuery(QueryBuilder query) throws IOException {     this.query = query == null ? null : xContentToBytes(query).     return this. }
false;private;1;4;;private Builder setAggregations(BytesReference aggregations) {     this.aggregations = aggregations.     return this. }
false;public;1;4;;public Builder setAggregations(String aggsAsJson) {     this.aggregations = aggsAsJson == null ? null : new BytesArray(aggsAsJson).     return this. }
false;public;1;4;;public Builder setAggregations(AggregatorFactories.Builder aggregations) throws IOException {     this.aggregations = aggregations == null ? null : xContentToBytes(aggregations).     return this. }
false;public;1;6;;public Builder setScriptFields(List<SearchSourceBuilder.ScriptField> scriptFields) {     List<SearchSourceBuilder.ScriptField> sorted = new ArrayList<>(scriptFields).     sorted.sort(Comparator.comparing(SearchSourceBuilder.ScriptField::fieldName)).     this.scriptFields = sorted.     return this. }
false;public;1;4;;public Builder setScrollSize(int scrollSize) {     this.scrollSize = scrollSize.     return this. }
false;public;1;4;;public Builder setChunkingConfig(ChunkingConfig chunkingConfig) {     this.chunkingConfig = chunkingConfig.     return this. }
false;public;1;4;;public Builder setDelayedDataCheckConfig(DelayedDataCheckConfig delayedDataCheckConfig) {     this.delayedDataCheckConfig = delayedDataCheckConfig.     return this. }
false;public;0;4;;public DatafeedUpdate build() {     return new DatafeedUpdate(id, jobId, queryDelay, frequency, indices, query, aggregations, scriptFields, scrollSize, chunkingConfig, delayedDataCheckConfig). }
false;private,static;1;6;;private static BytesReference xContentToBytes(ToXContentObject object) throws IOException {     try (XContentBuilder builder = JsonXContent.contentBuilder()) {         object.toXContent(builder, ToXContentObject.EMPTY_PARAMS).         return BytesReference.bytes(builder).     } }
