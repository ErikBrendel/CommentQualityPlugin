commented;modifiers;parameterAmount;loc;comment;code
false;static;1;10;;static Request putJob(PutJobRequest putJobRequest) throws IOException {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("anomaly_detectors").addPathPart(putJobRequest.getJob().getId()).build().     Request request = new Request(HttpPut.METHOD_NAME, endpoint).     request.setEntity(createEntity(putJobRequest, REQUEST_BODY_CONTENT_TYPE)).     return request. }
false;static;1;15;;static Request getJob(GetJobRequest getJobRequest) {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("anomaly_detectors").addPathPart(Strings.collectionToCommaDelimitedString(getJobRequest.getJobIds())).build().     Request request = new Request(HttpGet.METHOD_NAME, endpoint).     RequestConverters.Params params = new RequestConverters.Params(request).     if (getJobRequest.getAllowNoJobs() != null) {         params.putParam("allow_no_jobs", Boolean.toString(getJobRequest.getAllowNoJobs())).     }     return request. }
false;static;1;15;;static Request getJobStats(GetJobStatsRequest getJobStatsRequest) {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("anomaly_detectors").addPathPart(Strings.collectionToCommaDelimitedString(getJobStatsRequest.getJobIds())).addPathPartAsIs("_stats").build().     Request request = new Request(HttpGet.METHOD_NAME, endpoint).     RequestConverters.Params params = new RequestConverters.Params(request).     if (getJobStatsRequest.getAllowNoJobs() != null) {         params.putParam("allow_no_jobs", Boolean.toString(getJobStatsRequest.getAllowNoJobs())).     }     return request. }
false;static;1;11;;static Request openJob(OpenJobRequest openJobRequest) throws IOException {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("anomaly_detectors").addPathPart(openJobRequest.getJobId()).addPathPartAsIs("_open").build().     Request request = new Request(HttpPost.METHOD_NAME, endpoint).     request.setEntity(createEntity(openJobRequest, REQUEST_BODY_CONTENT_TYPE)).     return request. }
false;static;1;11;;static Request closeJob(CloseJobRequest closeJobRequest) throws IOException {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("anomaly_detectors").addPathPart(Strings.collectionToCommaDelimitedString(closeJobRequest.getJobIds())).addPathPartAsIs("_close").build().     Request request = new Request(HttpPost.METHOD_NAME, endpoint).     request.setEntity(createEntity(closeJobRequest, REQUEST_BODY_CONTENT_TYPE)).     return request. }
false;static;1;9;;static Request deleteExpiredData(DeleteExpiredDataRequest deleteExpiredDataRequest) {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("_delete_expired_data").build().     Request request = new Request(HttpDelete.METHOD_NAME, endpoint).     return request. }
false;static;1;18;;static Request deleteJob(DeleteJobRequest deleteJobRequest) {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("anomaly_detectors").addPathPart(deleteJobRequest.getJobId()).build().     Request request = new Request(HttpDelete.METHOD_NAME, endpoint).     RequestConverters.Params params = new RequestConverters.Params(request).     if (deleteJobRequest.getForce() != null) {         params.putParam("force", Boolean.toString(deleteJobRequest.getForce())).     }     if (deleteJobRequest.getWaitForCompletion() != null) {         params.putParam("wait_for_completion", Boolean.toString(deleteJobRequest.getWaitForCompletion())).     }     return request. }
false;static;1;11;;static Request flushJob(FlushJobRequest flushJobRequest) throws IOException {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("anomaly_detectors").addPathPart(flushJobRequest.getJobId()).addPathPartAsIs("_flush").build().     Request request = new Request(HttpPost.METHOD_NAME, endpoint).     request.setEntity(createEntity(flushJobRequest, REQUEST_BODY_CONTENT_TYPE)).     return request. }
false;static;1;11;;static Request forecastJob(ForecastJobRequest forecastJobRequest) throws IOException {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("anomaly_detectors").addPathPart(forecastJobRequest.getJobId()).addPathPartAsIs("_forecast").build().     Request request = new Request(HttpPost.METHOD_NAME, endpoint).     request.setEntity(createEntity(forecastJobRequest, REQUEST_BODY_CONTENT_TYPE)).     return request. }
false;static;1;11;;static Request updateJob(UpdateJobRequest updateJobRequest) throws IOException {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("anomaly_detectors").addPathPart(updateJobRequest.getJobUpdate().getJobId()).addPathPartAsIs("_update").build().     Request request = new Request(HttpPost.METHOD_NAME, endpoint).     request.setEntity(createEntity(updateJobRequest.getJobUpdate(), REQUEST_BODY_CONTENT_TYPE)).     return request. }
false;static;1;10;;static Request putDatafeed(PutDatafeedRequest putDatafeedRequest) throws IOException {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("datafeeds").addPathPart(putDatafeedRequest.getDatafeed().getId()).build().     Request request = new Request(HttpPut.METHOD_NAME, endpoint).     request.setEntity(createEntity(putDatafeedRequest, REQUEST_BODY_CONTENT_TYPE)).     return request. }
false;static;1;11;;static Request updateDatafeed(UpdateDatafeedRequest updateDatafeedRequest) throws IOException {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("datafeeds").addPathPart(updateDatafeedRequest.getDatafeedUpdate().getId()).addPathPartAsIs("_update").build().     Request request = new Request(HttpPost.METHOD_NAME, endpoint).     request.setEntity(createEntity(updateDatafeedRequest, REQUEST_BODY_CONTENT_TYPE)).     return request. }
false;static;1;16;;static Request getDatafeed(GetDatafeedRequest getDatafeedRequest) {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("datafeeds").addPathPart(Strings.collectionToCommaDelimitedString(getDatafeedRequest.getDatafeedIds())).build().     Request request = new Request(HttpGet.METHOD_NAME, endpoint).     RequestConverters.Params params = new RequestConverters.Params(request).     if (getDatafeedRequest.getAllowNoDatafeeds() != null) {         params.putParam(GetDatafeedRequest.ALLOW_NO_DATAFEEDS.getPreferredName(), Boolean.toString(getDatafeedRequest.getAllowNoDatafeeds())).     }     return request. }
false;static;1;13;;static Request deleteDatafeed(DeleteDatafeedRequest deleteDatafeedRequest) {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("datafeeds").addPathPart(deleteDatafeedRequest.getDatafeedId()).build().     Request request = new Request(HttpDelete.METHOD_NAME, endpoint).     RequestConverters.Params params = new RequestConverters.Params(request).     if (deleteDatafeedRequest.getForce() != null) {         params.putParam("force", Boolean.toString(deleteDatafeedRequest.getForce())).     }     return request. }
false;static;1;11;;static Request startDatafeed(StartDatafeedRequest startDatafeedRequest) throws IOException {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("datafeeds").addPathPart(startDatafeedRequest.getDatafeedId()).addPathPartAsIs("_start").build().     Request request = new Request(HttpPost.METHOD_NAME, endpoint).     request.setEntity(createEntity(startDatafeedRequest, REQUEST_BODY_CONTENT_TYPE)).     return request. }
false;static;1;11;;static Request stopDatafeed(StopDatafeedRequest stopDatafeedRequest) throws IOException {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("datafeeds").addPathPart(Strings.collectionToCommaDelimitedString(stopDatafeedRequest.getDatafeedIds())).addPathPartAsIs("_stop").build().     Request request = new Request(HttpPost.METHOD_NAME, endpoint).     request.setEntity(createEntity(stopDatafeedRequest, REQUEST_BODY_CONTENT_TYPE)).     return request. }
false;static;1;15;;static Request getDatafeedStats(GetDatafeedStatsRequest getDatafeedStatsRequest) {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("datafeeds").addPathPart(Strings.collectionToCommaDelimitedString(getDatafeedStatsRequest.getDatafeedIds())).addPathPartAsIs("_stats").build().     Request request = new Request(HttpGet.METHOD_NAME, endpoint).     RequestConverters.Params params = new RequestConverters.Params(request).     if (getDatafeedStatsRequest.getAllowNoDatafeeds() != null) {         params.putParam("allow_no_datafeeds", Boolean.toString(getDatafeedStatsRequest.getAllowNoDatafeeds())).     }     return request. }
false;static;1;9;;static Request previewDatafeed(PreviewDatafeedRequest previewDatafeedRequest) {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("datafeeds").addPathPart(previewDatafeedRequest.getDatafeedId()).addPathPartAsIs("_preview").build().     return new Request(HttpGet.METHOD_NAME, endpoint). }
false;static;1;18;;static Request deleteForecast(DeleteForecastRequest deleteForecastRequest) {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("anomaly_detectors").addPathPart(deleteForecastRequest.getJobId()).addPathPartAsIs("_forecast").addPathPart(Strings.collectionToCommaDelimitedString(deleteForecastRequest.getForecastIds())).build().     Request request = new Request(HttpDelete.METHOD_NAME, endpoint).     RequestConverters.Params params = new RequestConverters.Params(request).     if (deleteForecastRequest.getAllowNoForecasts() != null) {         params.putParam("allow_no_forecasts", Boolean.toString(deleteForecastRequest.getAllowNoForecasts())).     }     if (deleteForecastRequest.timeout() != null) {         params.putParam("timeout", deleteForecastRequest.timeout().getStringRep()).     }     return request. }
false;static;1;10;;static Request deleteModelSnapshot(DeleteModelSnapshotRequest deleteModelSnapshotRequest) {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("anomaly_detectors").addPathPart(deleteModelSnapshotRequest.getJobId()).addPathPartAsIs("model_snapshots").addPathPart(deleteModelSnapshotRequest.getSnapshotId()).build().     return new Request(HttpDelete.METHOD_NAME, endpoint). }
false;static;1;12;;static Request getBuckets(GetBucketsRequest getBucketsRequest) throws IOException {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("anomaly_detectors").addPathPart(getBucketsRequest.getJobId()).addPathPartAsIs("results").addPathPartAsIs("buckets").build().     Request request = new Request(HttpGet.METHOD_NAME, endpoint).     request.setEntity(createEntity(getBucketsRequest, REQUEST_BODY_CONTENT_TYPE)).     return request. }
false;static;1;12;;static Request getCategories(GetCategoriesRequest getCategoriesRequest) throws IOException {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("anomaly_detectors").addPathPart(getCategoriesRequest.getJobId()).addPathPartAsIs("results").addPathPartAsIs("categories").build().     Request request = new Request(HttpGet.METHOD_NAME, endpoint).     request.setEntity(createEntity(getCategoriesRequest, REQUEST_BODY_CONTENT_TYPE)).     return request. }
false;static;1;11;;static Request getModelSnapshots(GetModelSnapshotsRequest getModelSnapshotsRequest) throws IOException {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("anomaly_detectors").addPathPart(getModelSnapshotsRequest.getJobId()).addPathPartAsIs("model_snapshots").build().     Request request = new Request(HttpGet.METHOD_NAME, endpoint).     request.setEntity(createEntity(getModelSnapshotsRequest, REQUEST_BODY_CONTENT_TYPE)).     return request. }
false;static;1;13;;static Request updateModelSnapshot(UpdateModelSnapshotRequest updateModelSnapshotRequest) throws IOException {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("anomaly_detectors").addPathPart(updateModelSnapshotRequest.getJobId()).addPathPartAsIs("model_snapshots").addPathPart(updateModelSnapshotRequest.getSnapshotId()).addPathPartAsIs("_update").build().     Request request = new Request(HttpPost.METHOD_NAME, endpoint).     request.setEntity(createEntity(updateModelSnapshotRequest, REQUEST_BODY_CONTENT_TYPE)).     return request. }
false;static;1;13;;static Request revertModelSnapshot(RevertModelSnapshotRequest revertModelSnapshotsRequest) throws IOException {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("anomaly_detectors").addPathPart(revertModelSnapshotsRequest.getJobId()).addPathPartAsIs("model_snapshots").addPathPart(revertModelSnapshotsRequest.getSnapshotId()).addPathPart("_revert").build().     Request request = new Request(HttpPost.METHOD_NAME, endpoint).     request.setEntity(createEntity(revertModelSnapshotsRequest, REQUEST_BODY_CONTENT_TYPE)).     return request. }
false;static;1;12;;static Request getOverallBuckets(GetOverallBucketsRequest getOverallBucketsRequest) throws IOException {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("anomaly_detectors").addPathPart(Strings.collectionToCommaDelimitedString(getOverallBucketsRequest.getJobIds())).addPathPartAsIs("results").addPathPartAsIs("overall_buckets").build().     Request request = new Request(HttpGet.METHOD_NAME, endpoint).     request.setEntity(createEntity(getOverallBucketsRequest, REQUEST_BODY_CONTENT_TYPE)).     return request. }
false;static;1;12;;static Request getRecords(GetRecordsRequest getRecordsRequest) throws IOException {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("anomaly_detectors").addPathPart(getRecordsRequest.getJobId()).addPathPartAsIs("results").addPathPartAsIs("records").build().     Request request = new Request(HttpGet.METHOD_NAME, endpoint).     request.setEntity(createEntity(getRecordsRequest, REQUEST_BODY_CONTENT_TYPE)).     return request. }
false;static;1;27;;static Request postData(PostDataRequest postDataRequest) {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("anomaly_detectors").addPathPart(postDataRequest.getJobId()).addPathPartAsIs("_data").build().     Request request = new Request(HttpPost.METHOD_NAME, endpoint).     RequestConverters.Params params = new RequestConverters.Params(request).     if (postDataRequest.getResetStart() != null) {         params.putParam(PostDataRequest.RESET_START.getPreferredName(), postDataRequest.getResetStart()).     }     if (postDataRequest.getResetEnd() != null) {         params.putParam(PostDataRequest.RESET_END.getPreferredName(), postDataRequest.getResetEnd()).     }     BytesReference content = postDataRequest.getContent().     if (content != null) {         BytesRef source = postDataRequest.getContent().toBytesRef().         HttpEntity byteEntity = new NByteArrayEntity(source.bytes, source.offset, source.length, createContentType(postDataRequest.getXContentType())).         request.setEntity(byteEntity).     }     return request. }
false;static;1;12;;static Request getInfluencers(GetInfluencersRequest getInfluencersRequest) throws IOException {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("anomaly_detectors").addPathPart(getInfluencersRequest.getJobId()).addPathPartAsIs("results").addPathPartAsIs("influencers").build().     Request request = new Request(HttpGet.METHOD_NAME, endpoint).     request.setEntity(createEntity(getInfluencersRequest, REQUEST_BODY_CONTENT_TYPE)).     return request. }
false;static;1;10;;static Request putCalendar(PutCalendarRequest putCalendarRequest) throws IOException {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("calendars").addPathPart(putCalendarRequest.getCalendar().getId()).build().     Request request = new Request(HttpPut.METHOD_NAME, endpoint).     request.setEntity(createEntity(putCalendarRequest, REQUEST_BODY_CONTENT_TYPE)).     return request. }
false;static;1;10;;static Request getCalendars(GetCalendarsRequest getCalendarsRequest) throws IOException {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("calendars").addPathPart(getCalendarsRequest.getCalendarId()).build().     Request request = new Request(HttpGet.METHOD_NAME, endpoint).     request.setEntity(createEntity(getCalendarsRequest, REQUEST_BODY_CONTENT_TYPE)).     return request. }
false;static;1;10;;static Request putCalendarJob(PutCalendarJobRequest putCalendarJobRequest) {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("calendars").addPathPart(putCalendarJobRequest.getCalendarId()).addPathPartAsIs("jobs").addPathPart(Strings.collectionToCommaDelimitedString(putCalendarJobRequest.getJobIds())).build().     return new Request(HttpPut.METHOD_NAME, endpoint). }
false;static;1;10;;static Request deleteCalendarJob(DeleteCalendarJobRequest deleteCalendarJobRequest) {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("calendars").addPathPart(deleteCalendarJobRequest.getCalendarId()).addPathPartAsIs("jobs").addPathPart(Strings.collectionToCommaDelimitedString(deleteCalendarJobRequest.getJobIds())).build().     return new Request(HttpDelete.METHOD_NAME, endpoint). }
false;static;1;9;;static Request deleteCalendar(DeleteCalendarRequest deleteCalendarRequest) {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("calendars").addPathPart(deleteCalendarRequest.getCalendarId()).build().     Request request = new Request(HttpDelete.METHOD_NAME, endpoint).     return request. }
false;static;1;11;;static Request getCalendarEvents(GetCalendarEventsRequest getCalendarEventsRequest) throws IOException {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("calendars").addPathPart(getCalendarEventsRequest.getCalendarId()).addPathPartAsIs("events").build().     Request request = new Request(HttpGet.METHOD_NAME, endpoint).     request.setEntity(createEntity(getCalendarEventsRequest, REQUEST_BODY_CONTENT_TYPE)).     return request. }
false;static;1;13;;static Request postCalendarEvents(PostCalendarEventRequest postCalendarEventRequest) throws IOException {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("calendars").addPathPart(postCalendarEventRequest.getCalendarId()).addPathPartAsIs("events").build().     Request request = new Request(HttpPost.METHOD_NAME, endpoint).     request.setEntity(createEntity(postCalendarEventRequest, REQUEST_BODY_CONTENT_TYPE, PostCalendarEventRequest.EXCLUDE_CALENDAR_ID_PARAMS)).     return request. }
false;static;1;10;;static Request deleteCalendarEvent(DeleteCalendarEventRequest deleteCalendarEventRequest) {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("calendars").addPathPart(deleteCalendarEventRequest.getCalendarId()).addPathPartAsIs("events").addPathPart(deleteCalendarEventRequest.getEventId()).build().     return new Request(HttpDelete.METHOD_NAME, endpoint). }
false;static;1;10;;static Request putFilter(PutFilterRequest putFilterRequest) throws IOException {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("filters").addPathPart(putFilterRequest.getMlFilter().getId()).build().     Request request = new Request(HttpPut.METHOD_NAME, endpoint).     request.setEntity(createEntity(putFilterRequest, REQUEST_BODY_CONTENT_TYPE)).     return request. }
false;static;1;16;;static Request getFilter(GetFiltersRequest getFiltersRequest) {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("filters").addPathPart(getFiltersRequest.getFilterId()).build().     Request request = new Request(HttpGet.METHOD_NAME, endpoint).     RequestConverters.Params params = new RequestConverters.Params(request).     if (getFiltersRequest.getSize() != null) {         params.putParam(PageParams.SIZE.getPreferredName(), getFiltersRequest.getSize().toString()).     }     if (getFiltersRequest.getFrom() != null) {         params.putParam(PageParams.FROM.getPreferredName(), getFiltersRequest.getFrom().toString()).     }     return request. }
false;static;1;11;;static Request updateFilter(UpdateFilterRequest updateFilterRequest) throws IOException {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("filters").addPathPart(updateFilterRequest.getFilterId()).addPathPartAsIs("_update").build().     Request request = new Request(HttpPost.METHOD_NAME, endpoint).     request.setEntity(createEntity(updateFilterRequest, REQUEST_BODY_CONTENT_TYPE)).     return request. }
false;static;1;8;;static Request deleteFilter(DeleteFilterRequest deleteFilterRequest) {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml", "filters").addPathPart(deleteFilterRequest.getId()).build().     Request request = new Request(HttpDelete.METHOD_NAME, endpoint).     return request. }
false;static;1;10;;static Request setUpgradeMode(SetUpgradeModeRequest setUpgradeModeRequest) {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml", "set_upgrade_mode").build().     Request request = new Request(HttpPost.METHOD_NAME, endpoint).     RequestConverters.Params params = new RequestConverters.Params(request).     params.putParam(SetUpgradeModeRequest.ENABLED.getPreferredName(), Boolean.toString(setUpgradeModeRequest.isEnabled())).     if (setUpgradeModeRequest.getTimeout() != null) {         params.putParam(SetUpgradeModeRequest.TIMEOUT.getPreferredName(), setUpgradeModeRequest.getTimeout().toString()).     }     return request. }
false;static;1;6;;static Request mlInfo(MlInfoRequest infoRequest) {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml", "info").build().     return new Request(HttpGet.METHOD_NAME, endpoint). }
false;static;1;59;;static Request findFileStructure(FindFileStructureRequest findFileStructureRequest) {     String endpoint = new EndpointBuilder().addPathPartAsIs("_ml").addPathPartAsIs("find_file_structure").build().     Request request = new Request(HttpPost.METHOD_NAME, endpoint).     RequestConverters.Params params = new RequestConverters.Params(request).     if (findFileStructureRequest.getLinesToSample() != null) {         params.putParam(FindFileStructureRequest.LINES_TO_SAMPLE.getPreferredName(), findFileStructureRequest.getLinesToSample().toString()).     }     if (findFileStructureRequest.getTimeout() != null) {         params.putParam(FindFileStructureRequest.TIMEOUT.getPreferredName(), findFileStructureRequest.getTimeout().toString()).     }     if (findFileStructureRequest.getCharset() != null) {         params.putParam(FindFileStructureRequest.CHARSET.getPreferredName(), findFileStructureRequest.getCharset()).     }     if (findFileStructureRequest.getFormat() != null) {         params.putParam(FindFileStructureRequest.FORMAT.getPreferredName(), findFileStructureRequest.getFormat().toString()).     }     if (findFileStructureRequest.getColumnNames() != null) {         params.putParam(FindFileStructureRequest.COLUMN_NAMES.getPreferredName(), Strings.collectionToCommaDelimitedString(findFileStructureRequest.getColumnNames())).     }     if (findFileStructureRequest.getHasHeaderRow() != null) {         params.putParam(FindFileStructureRequest.HAS_HEADER_ROW.getPreferredName(), findFileStructureRequest.getHasHeaderRow().toString()).     }     if (findFileStructureRequest.getDelimiter() != null) {         params.putParam(FindFileStructureRequest.DELIMITER.getPreferredName(), findFileStructureRequest.getDelimiter().toString()).     }     if (findFileStructureRequest.getQuote() != null) {         params.putParam(FindFileStructureRequest.QUOTE.getPreferredName(), findFileStructureRequest.getQuote().toString()).     }     if (findFileStructureRequest.getShouldTrimFields() != null) {         params.putParam(FindFileStructureRequest.SHOULD_TRIM_FIELDS.getPreferredName(), findFileStructureRequest.getShouldTrimFields().toString()).     }     if (findFileStructureRequest.getGrokPattern() != null) {         params.putParam(FindFileStructureRequest.GROK_PATTERN.getPreferredName(), findFileStructureRequest.getGrokPattern()).     }     if (findFileStructureRequest.getTimestampFormat() != null) {         params.putParam(FindFileStructureRequest.TIMESTAMP_FORMAT.getPreferredName(), findFileStructureRequest.getTimestampFormat()).     }     if (findFileStructureRequest.getTimestampField() != null) {         params.putParam(FindFileStructureRequest.TIMESTAMP_FIELD.getPreferredName(), findFileStructureRequest.getTimestampField()).     }     if (findFileStructureRequest.getExplain() != null) {         params.putParam(FindFileStructureRequest.EXPLAIN.getPreferredName(), findFileStructureRequest.getExplain().toString()).     }     BytesReference sample = findFileStructureRequest.getSample().     BytesRef source = sample.toBytesRef().     HttpEntity byteEntity = new NByteArrayEntity(source.bytes, source.offset, source.length, createContentType(XContentType.JSON)).     request.setEntity(byteEntity).     return request. }
