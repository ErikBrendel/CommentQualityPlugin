commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getName() {     return name. }
false;public;0;3;;public TimeValue getExpiration() {     return expiration. }
false;public;0;3;;public List<Role> getRoles() {     return roles. }
false;public;0;3;;public RefreshPolicy getRefreshPolicy() {     return refreshPolicy. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(name, refreshPolicy, roles, expiration). }
false;public;1;12;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     final CreateApiKeyRequest that = (CreateApiKeyRequest) o.     return Objects.equals(name, that.name) && Objects.equals(refreshPolicy, that.refreshPolicy) && Objects.equals(roles, that.roles) && Objects.equals(expiration, that.expiration). }
false;public;2;32;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().field("name", name).     if (expiration != null) {         builder.field("expiration", expiration.getStringRep()).     }     builder.startObject("role_descriptors").     for (Role role : roles) {         builder.startObject(role.getName()).         if (role.getApplicationPrivileges() != null) {             builder.field(Role.APPLICATIONS.getPreferredName(), role.getApplicationPrivileges()).         }         if (role.getClusterPrivileges() != null) {             builder.field(Role.CLUSTER.getPreferredName(), role.getClusterPrivileges()).         }         if (role.getGlobalPrivileges() != null) {             builder.field(Role.GLOBAL.getPreferredName(), role.getGlobalPrivileges()).         }         if (role.getIndicesPrivileges() != null) {             builder.field(Role.INDICES.getPreferredName(), role.getIndicesPrivileges()).         }         if (role.getMetadata() != null) {             builder.field(Role.METADATA.getPreferredName(), role.getMetadata()).         }         if (role.getRunAsPrivilege() != null) {             builder.field(Role.RUN_AS.getPreferredName(), role.getRunAsPrivilege()).         }         builder.endObject().     }     builder.endObject().     return builder.endObject(). }
