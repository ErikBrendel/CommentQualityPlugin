commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getFilterId() {     return filterId. }
false;public;0;3;;public Integer getFrom() {     return from. }
false;public;0;3;;public Integer getSize() {     return size. }
true;public;1;3;/**  * Sets the filter id  * @param filterId the filter id  */ ;/**  * Sets the filter id  * @param filterId the filter id  */ public void setFilterId(String filterId) {     this.filterId = filterId. }
true;public;1;3;/**  * Sets the number of filters to skip.  * @param from set the `from` parameter  */ ;/**  * Sets the number of filters to skip.  * @param from set the `from` parameter  */ public void setFrom(Integer from) {     this.from = from. }
true;public;1;3;/**  * Sets the number of filters to return.  * @param size set the `size` parameter  */ ;/**  * Sets the number of filters to return.  * @param size set the `size` parameter  */ public void setSize(Integer size) {     this.size = size. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;2;15;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (filterId != null) {         builder.field(MlFilter.ID.getPreferredName(), filterId).     }     if (from != null) {         builder.field(PageParams.FROM.getPreferredName(), from).     }     if (size != null) {         builder.field(PageParams.SIZE.getPreferredName(), size).     }     builder.endObject().     return builder. }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     GetFiltersRequest request = (GetFiltersRequest) obj.     return Objects.equals(filterId, request.filterId) && Objects.equals(from, request.from) && Objects.equals(size, request.size). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(filterId, from, size). }
