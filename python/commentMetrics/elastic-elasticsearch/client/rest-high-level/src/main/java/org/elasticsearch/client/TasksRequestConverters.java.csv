commented;modifiers;parameterAmount;loc;comment;code
false;static;1;10;;static Request cancelTasks(CancelTasksRequest cancelTasksRequest) {     Request request = new Request(HttpPost.METHOD_NAME, "/_tasks/_cancel").     RequestConverters.Params params = new RequestConverters.Params(request).     params.withTimeout(cancelTasksRequest.getTimeout()).withTaskId(cancelTasksRequest.getTaskId()).withNodes(cancelTasksRequest.getNodes()).withParentTaskId(cancelTasksRequest.getParentTaskId()).withActions(cancelTasksRequest.getActions()).     return request. }
false;static;1;15;;static Request listTasks(ListTasksRequest listTaskRequest) {     if (listTaskRequest.getTaskId() != null && listTaskRequest.getTaskId().isSet()) {         throw new IllegalArgumentException("TaskId cannot be used for list tasks request").     }     Request request = new Request(HttpGet.METHOD_NAME, "/_tasks").     RequestConverters.Params params = new RequestConverters.Params(request).     params.withTimeout(listTaskRequest.getTimeout()).withDetailed(listTaskRequest.getDetailed()).withWaitForCompletion(listTaskRequest.getWaitForCompletion()).withParentTaskId(listTaskRequest.getParentTaskId()).withNodes(listTaskRequest.getNodes()).withActions(listTaskRequest.getActions()).putParam("group_by", "none").     return request. }
false;static;1;10;;static Request getTask(GetTaskRequest getTaskRequest) {     String endpoint = new EndpointBuilder().addPathPartAsIs("_tasks").addPathPartAsIs(getTaskRequest.getNodeId() + ":" + Long.toString(getTaskRequest.getTaskId())).build().     Request request = new Request(HttpGet.METHOD_NAME, endpoint).     RequestConverters.Params params = new RequestConverters.Params(request).     params.withTimeout(getTaskRequest.getTimeout()).withWaitForCompletion(getTaskRequest.getWaitForCompletion()).     return request. }
