commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Map<String, RollupFieldCaps> getFieldCaps() {     return fieldCapLookup. }
false;public;0;3;;public String getRollupIndex() {     return rollupIndex. }
false;public;0;3;;public String getIndexPattern() {     return indexPattern. }
false;public;0;3;;public String getJobID() {     return jobID. }
false;public;2;18;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     {         builder.field(JOB_ID.getPreferredName(), jobID).         builder.field(ROLLUP_INDEX.getPreferredName(), rollupIndex).         builder.field(INDEX_PATTERN.getPreferredName(), indexPattern).         builder.startObject(FIELDS.getPreferredName()).         {             for (Map.Entry<String, RollupFieldCaps> fieldCap : fieldCapLookup.entrySet()) {                 builder.array(fieldCap.getKey(), fieldCap.getValue()).             }         }         builder.endObject().     }     builder.endObject().     return builder. }
false;public;1;17;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     RollupJobCaps that = (RollupJobCaps) other.     return Objects.equals(this.jobID, that.jobID) && Objects.equals(this.indexPattern, that.indexPattern) && Objects.equals(this.rollupIndex, that.rollupIndex) && Objects.equals(this.fieldCapLookup, that.fieldCapLookup). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobID, rollupIndex, fieldCapLookup, indexPattern). }
false;public;0;3;;public List<Map<String, Object>> getAggs() {     return aggs. }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     for (Map<String, Object> agg : aggs) {         builder.map(agg).     }     return builder. }
false;public,static;1;9;;public static RollupFieldCaps fromXContent(XContentParser parser) throws IOException {     List<Map<String, Object>> aggs = new ArrayList<>().     if (parser.nextToken().equals(XContentParser.Token.START_ARRAY)) {         while (parser.nextToken().equals(XContentParser.Token.START_OBJECT)) {             aggs.add(parser.map()).         }     }     return new RollupFieldCaps(aggs). }
false;public;1;13;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     RollupFieldCaps that = (RollupFieldCaps) other.     return Objects.equals(this.aggs, that.aggs). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(aggs). }
