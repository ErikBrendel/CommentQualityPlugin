commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * The indices into which the mappings will be put.  */ ;/**  * The indices into which the mappings will be put.  */ public String[] indices() {     return indices. }
false;public;0;3;;public IndicesOptions indicesOptions() {     return indicesOptions. }
false;public;1;4;;public GetIndexRequest indicesOptions(IndicesOptions indicesOptions) {     this.indicesOptions = indicesOptions.     return this. }
false;public,final;1;4;;public final GetIndexRequest local(boolean local) {     this.local = local.     return this. }
true;public,final;0;3;/**  * Return local information, do not retrieve the state from master node (default: false).  * @return <code>true</code> if local information is to be returned.  * <code>false</code> if information is to be retrieved from master node (default).  */ ;/**  * Return local information, do not retrieve the state from master node (default: false).  * @return <code>true</code> if local information is to be returned.  * <code>false</code> if information is to be retrieved from master node (default).  */ public final boolean local() {     return local. }
false;public;1;8;;public GetIndexRequest features(Feature... features) {     if (features == null) {         throw new IllegalArgumentException("features cannot be null").     } else {         this.features = features.     }     return this. }
false;public;1;7;;public GetIndexRequest addFeatures(Feature... features) {     if (this.features == DEFAULT_FEATURES) {         return features(features).     } else {         return features(ArrayUtils.concat(features(), features, Feature.class)).     } }
false;public;0;3;;public Feature[] features() {     return features. }
false;public;1;4;;public GetIndexRequest humanReadable(boolean humanReadable) {     this.humanReadable = humanReadable.     return this. }
false;public;0;3;;public boolean humanReadable() {     return humanReadable. }
true;public;1;4;/**  * Sets the value of "include_defaults".  *  * @param includeDefaults value of "include_defaults" to be set.  * @return this request  */ ;/**  * Sets the value of "include_defaults".  *  * @param includeDefaults value of "include_defaults" to be set.  * @return this request  */ public GetIndexRequest includeDefaults(boolean includeDefaults) {     this.includeDefaults = includeDefaults.     return this. }
true;public;0;3;/**  * Whether to return all default settings for each of the indices.  *  * @return <code>true</code> if defaults settings for each of the indices need to returned.  * <code>false</code> otherwise.  */ ;/**  * Whether to return all default settings for each of the indices.  *  * @return <code>true</code> if defaults settings for each of the indices need to returned.  * <code>false</code> otherwise.  */ public boolean includeDefaults() {     return includeDefaults. }
