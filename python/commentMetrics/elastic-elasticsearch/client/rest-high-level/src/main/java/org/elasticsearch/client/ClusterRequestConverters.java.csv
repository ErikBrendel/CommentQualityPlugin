commented;modifiers;parameterAmount;loc;comment;code
false;static;1;10;;static Request clusterPutSettings(ClusterUpdateSettingsRequest clusterUpdateSettingsRequest) throws IOException {     Request request = new Request(HttpPut.METHOD_NAME, "/_cluster/settings").     RequestConverters.Params parameters = new RequestConverters.Params(request).     parameters.withTimeout(clusterUpdateSettingsRequest.timeout()).     parameters.withMasterTimeout(clusterUpdateSettingsRequest.masterNodeTimeout()).     request.setEntity(RequestConverters.createEntity(clusterUpdateSettingsRequest, RequestConverters.REQUEST_BODY_CONTENT_TYPE)).     return request. }
false;static;1;10;;static Request clusterGetSettings(ClusterGetSettingsRequest clusterGetSettingsRequest) throws IOException {     Request request = new Request(HttpGet.METHOD_NAME, "/_cluster/settings").     RequestConverters.Params parameters = new RequestConverters.Params(request).     parameters.withLocal(clusterGetSettingsRequest.local()).     parameters.withIncludeDefaults(clusterGetSettingsRequest.includeDefaults()).     parameters.withMasterTimeout(clusterGetSettingsRequest.masterNodeTimeout()).     return request. }
false;static;1;21;;static Request clusterHealth(ClusterHealthRequest healthRequest) {     String[] indices = healthRequest.indices() == null ? Strings.EMPTY_ARRAY : healthRequest.indices().     String endpoint = new RequestConverters.EndpointBuilder().addPathPartAsIs("_cluster/health").addCommaSeparatedPathParts(indices).build().     Request request = new Request(HttpGet.METHOD_NAME, endpoint).     new RequestConverters.Params(request).withWaitForStatus(healthRequest.waitForStatus()).withWaitForNoRelocatingShards(healthRequest.waitForNoRelocatingShards()).withWaitForNoInitializingShards(healthRequest.waitForNoInitializingShards()).withWaitForActiveShards(healthRequest.waitForActiveShards(), ActiveShardCount.NONE).withWaitForNodes(healthRequest.waitForNodes()).withWaitForEvents(healthRequest.waitForEvents()).withTimeout(healthRequest.timeout()).withMasterTimeout(healthRequest.masterNodeTimeout()).withLocal(healthRequest.local()).withLevel(healthRequest.level()).     return request. }
