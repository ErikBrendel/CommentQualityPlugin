commented;modifiers;parameterAmount;loc;comment;code
false;public;2;60;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Job.ID.getPreferredName(), jobId).     builder.field(Result.RESULT_TYPE.getPreferredName(), RESULT_TYPE_VALUE).     builder.field(PROBABILITY.getPreferredName(), probability).     if (multiBucketImpact != null) {         builder.field(MULTI_BUCKET_IMPACT.getPreferredName(), multiBucketImpact).     }     builder.field(RECORD_SCORE.getPreferredName(), recordScore).     builder.field(INITIAL_RECORD_SCORE.getPreferredName(), initialRecordScore).     builder.field(BUCKET_SPAN.getPreferredName(), bucketSpan).     builder.field(DETECTOR_INDEX.getPreferredName(), detectorIndex).     builder.field(Result.IS_INTERIM.getPreferredName(), isInterim).     builder.timeField(Result.TIMESTAMP.getPreferredName(), Result.TIMESTAMP.getPreferredName() + "_string", timestamp.getTime()).     if (byFieldName != null) {         builder.field(BY_FIELD_NAME.getPreferredName(), byFieldName).     }     if (byFieldValue != null) {         builder.field(BY_FIELD_VALUE.getPreferredName(), byFieldValue).     }     if (correlatedByFieldValue != null) {         builder.field(CORRELATED_BY_FIELD_VALUE.getPreferredName(), correlatedByFieldValue).     }     if (partitionFieldName != null) {         builder.field(PARTITION_FIELD_NAME.getPreferredName(), partitionFieldName).     }     if (partitionFieldValue != null) {         builder.field(PARTITION_FIELD_VALUE.getPreferredName(), partitionFieldValue).     }     if (function != null) {         builder.field(FUNCTION.getPreferredName(), function).     }     if (functionDescription != null) {         builder.field(FUNCTION_DESCRIPTION.getPreferredName(), functionDescription).     }     if (typical != null) {         builder.field(TYPICAL.getPreferredName(), typical).     }     if (actual != null) {         builder.field(ACTUAL.getPreferredName(), actual).     }     if (fieldName != null) {         builder.field(FIELD_NAME.getPreferredName(), fieldName).     }     if (overFieldName != null) {         builder.field(OVER_FIELD_NAME.getPreferredName(), overFieldName).     }     if (overFieldValue != null) {         builder.field(OVER_FIELD_VALUE.getPreferredName(), overFieldValue).     }     if (causes != null) {         builder.field(CAUSES.getPreferredName(), causes).     }     if (influences != null) {         builder.field(INFLUENCERS.getPreferredName(), influences).     }     builder.endObject().     return builder. }
false;public;0;3;;public String getJobId() {     return this.jobId. }
false;public;0;3;;public int getDetectorIndex() {     return detectorIndex. }
false;;1;3;;void setDetectorIndex(int detectorIndex) {     this.detectorIndex = detectorIndex. }
false;public;0;3;;public double getRecordScore() {     return recordScore. }
false;;1;3;;void setRecordScore(double recordScore) {     this.recordScore = recordScore. }
false;public;0;3;;public double getInitialRecordScore() {     return initialRecordScore. }
false;;1;3;;void setInitialRecordScore(double initialRecordScore) {     this.initialRecordScore = initialRecordScore. }
false;public;0;3;;public Date getTimestamp() {     return timestamp. }
true;public;0;3;/**  * Bucketspan expressed in seconds  */ ;/**  * Bucketspan expressed in seconds  */ public long getBucketSpan() {     return bucketSpan. }
false;public;0;3;;public double getProbability() {     return probability. }
false;;1;3;;void setProbability(double value) {     probability = value. }
false;public;0;3;;public double getMultiBucketImpact() {     return multiBucketImpact. }
false;;1;3;;void setMultiBucketImpact(double value) {     multiBucketImpact = value. }
false;public;0;3;;public String getByFieldName() {     return byFieldName. }
false;;1;3;;void setByFieldName(String value) {     byFieldName = value. }
false;public;0;3;;public String getByFieldValue() {     return byFieldValue. }
false;;1;3;;void setByFieldValue(String value) {     byFieldValue = value. }
false;public;0;3;;public String getCorrelatedByFieldValue() {     return correlatedByFieldValue. }
false;;1;3;;void setCorrelatedByFieldValue(String value) {     correlatedByFieldValue = value. }
false;public;0;3;;public String getPartitionFieldName() {     return partitionFieldName. }
false;;1;3;;void setPartitionFieldName(String field) {     partitionFieldName = field. }
false;public;0;3;;public String getPartitionFieldValue() {     return partitionFieldValue. }
false;;1;3;;void setPartitionFieldValue(String value) {     partitionFieldValue = value. }
false;public;0;3;;public String getFunction() {     return function. }
false;;1;3;;void setFunction(String name) {     function = name. }
false;public;0;3;;public String getFunctionDescription() {     return functionDescription. }
false;;1;3;;void setFunctionDescription(String functionDescription) {     this.functionDescription = functionDescription. }
false;public;0;3;;public List<Double> getTypical() {     return typical. }
false;;1;3;;void setTypical(List<Double> typical) {     this.typical = Collections.unmodifiableList(typical). }
false;public;0;3;;public List<Double> getActual() {     return actual. }
false;;1;3;;void setActual(List<Double> actual) {     this.actual = Collections.unmodifiableList(actual). }
false;public;0;3;;public boolean isInterim() {     return isInterim. }
false;;1;3;;void setInterim(boolean isInterim) {     this.isInterim = isInterim. }
false;public;0;3;;public String getFieldName() {     return fieldName. }
false;;1;3;;void setFieldName(String field) {     fieldName = field. }
false;public;0;3;;public String getOverFieldName() {     return overFieldName. }
false;;1;3;;void setOverFieldName(String name) {     overFieldName = name. }
false;public;0;3;;public String getOverFieldValue() {     return overFieldValue. }
false;;1;3;;void setOverFieldValue(String value) {     overFieldValue = value. }
false;public;0;3;;public List<AnomalyCause> getCauses() {     return causes. }
false;;1;3;;void setCauses(List<AnomalyCause> causes) {     this.causes = Collections.unmodifiableList(causes). }
false;public;0;3;;public List<Influence> getInfluencers() {     return influences. }
false;;1;3;;void setInfluencers(List<Influence> influencers) {     this.influences = Collections.unmodifiableList(influencers). }
false;public;0;8;;@Override public int hashCode() {     return Objects.hash(jobId, detectorIndex, bucketSpan, probability, multiBucketImpact, recordScore, initialRecordScore, typical, actual, function, functionDescription, fieldName, byFieldName, byFieldValue, correlatedByFieldValue, partitionFieldName, partitionFieldValue, overFieldName, overFieldValue, timestamp, isInterim, causes, influences, jobId). }
false;public;1;36;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     AnomalyRecord that = (AnomalyRecord) other.     return Objects.equals(this.jobId, that.jobId) && this.detectorIndex == that.detectorIndex && this.bucketSpan == that.bucketSpan && this.probability == that.probability && Objects.equals(this.multiBucketImpact, that.multiBucketImpact) && this.recordScore == that.recordScore && this.initialRecordScore == that.initialRecordScore && Objects.deepEquals(this.typical, that.typical) && Objects.deepEquals(this.actual, that.actual) && Objects.equals(this.function, that.function) && Objects.equals(this.functionDescription, that.functionDescription) && Objects.equals(this.fieldName, that.fieldName) && Objects.equals(this.byFieldName, that.byFieldName) && Objects.equals(this.byFieldValue, that.byFieldValue) && Objects.equals(this.correlatedByFieldValue, that.correlatedByFieldValue) && Objects.equals(this.partitionFieldName, that.partitionFieldName) && Objects.equals(this.partitionFieldValue, that.partitionFieldValue) && Objects.equals(this.overFieldName, that.overFieldName) && Objects.equals(this.overFieldValue, that.overFieldValue) && Objects.equals(this.timestamp, that.timestamp) && Objects.equals(this.isInterim, that.isInterim) && Objects.equals(this.causes, that.causes) && Objects.equals(this.influences, that.influences). }
