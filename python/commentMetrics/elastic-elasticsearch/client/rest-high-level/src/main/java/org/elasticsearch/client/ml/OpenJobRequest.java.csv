commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static OpenJobRequest fromXContent(XContentParser parser) throws IOException {     return PARSER.parse(parser, null). }
false;public;0;3;;public String getJobId() {     return jobId. }
true;public;1;3;/**  * The jobId to open  *  * @param jobId unique jobId, must not be null  */ ;/**  * The jobId to open  *  * @param jobId unique jobId, must not be null  */ public void setJobId(String jobId) {     this.jobId = Objects.requireNonNull(jobId, "[job_id] must not be null"). }
false;public;0;3;;public TimeValue getTimeout() {     return timeout. }
true;public;1;3;/**  * How long to wait for job to open before timing out the request  *  * @param timeout default value of 30 minutes  */ ;/**  * How long to wait for job to open before timing out the request  *  * @param timeout default value of 30 minutes  */ public void setTimeout(TimeValue timeout) {     this.timeout = timeout. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;2;10;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Job.ID.getPreferredName(), jobId).     if (timeout != null) {         builder.field(TIMEOUT.getPreferredName(), timeout.getStringRep()).     }     builder.endObject().     return builder. }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobId, timeout). }
false;public;1;13;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     OpenJobRequest that = (OpenJobRequest) other.     return Objects.equals(jobId, that.jobId) && Objects.equals(timeout, that.timeout). }
