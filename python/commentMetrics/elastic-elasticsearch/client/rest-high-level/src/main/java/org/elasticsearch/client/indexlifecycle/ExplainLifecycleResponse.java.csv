commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static ExplainLifecycleResponse fromXContent(XContentParser parser) {     return PARSER.apply(parser, null). }
true;public;0;3;/**  * @return a map of the responses from each requested index. The maps key is  *         the index name and the value is the  *         {@link IndexLifecycleExplainResponse} describing the current  *         lifecycle status of that index  */ ;/**  * @return a map of the responses from each requested index. The maps key is  *         the index name and the value is the  *         {@link IndexLifecycleExplainResponse} describing the current  *         lifecycle status of that index  */ public Map<String, IndexLifecycleExplainResponse> getIndexResponses() {     return indexResponses. }
false;public;2;11;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.startObject(INDICES_FIELD.getPreferredName()).     for (IndexLifecycleExplainResponse indexResponse : indexResponses.values()) {         builder.field(indexResponse.getIndex(), indexResponse).     }     builder.endObject().     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(indexResponses). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (obj.getClass() != getClass()) {         return false.     }     ExplainLifecycleResponse other = (ExplainLifecycleResponse) obj.     return Objects.equals(indexResponses, other.indexResponses). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this, true, true). }
