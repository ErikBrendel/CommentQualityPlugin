commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;0;3;;public boolean getCalcInterim() {     return calcInterim. }
true;public;1;3;/**  * When {@code true} calculates the interim results for the most recent bucket or all buckets within the latency period.  *  * @param calcInterim defaults to {@code false}.  */ ;/**  * When {@code true} calculates the interim results for the most recent bucket or all buckets within the latency period.  *  * @param calcInterim defaults to {@code false}.  */ public void setCalcInterim(boolean calcInterim) {     this.calcInterim = calcInterim. }
false;public;0;3;;public String getStart() {     return start. }
true;public;1;3;/**  * When used in conjunction with {@link FlushJobRequest#calcInterim},  * specifies the start of the range of buckets on which to calculate interim results.  *  * @param start the beginning of the range of buckets. may be an epoch seconds, epoch millis or an ISO string  */ ;/**  * When used in conjunction with {@link FlushJobRequest#calcInterim},  * specifies the start of the range of buckets on which to calculate interim results.  *  * @param start the beginning of the range of buckets. may be an epoch seconds, epoch millis or an ISO string  */ public void setStart(String start) {     this.start = start. }
false;public;0;3;;public String getEnd() {     return end. }
true;public;1;3;/**  * When used in conjunction with {@link FlushJobRequest#calcInterim}, specifies the end of the range  * of buckets on which to calculate interim results  *  * @param end the end of the range of buckets. may be an epoch seconds, epoch millis or an ISO string  */ ;/**  * When used in conjunction with {@link FlushJobRequest#calcInterim}, specifies the end of the range  * of buckets on which to calculate interim results  *  * @param end the end of the range of buckets. may be an epoch seconds, epoch millis or an ISO string  */ public void setEnd(String end) {     this.end = end. }
false;public;0;3;;public String getAdvanceTime() {     return advanceTime. }
true;public;1;3;/**  * Specifies to advance to a particular time value.  * Results are generated and the model is updated for data from the specified time interval.  *  * @param advanceTime String representation of a timestamp. may be an epoch seconds, epoch millis or an ISO string  */ ;/**  * Specifies to advance to a particular time value.  * Results are generated and the model is updated for data from the specified time interval.  *  * @param advanceTime String representation of a timestamp. may be an epoch seconds, epoch millis or an ISO string  */ public void setAdvanceTime(String advanceTime) {     this.advanceTime = advanceTime. }
false;public;0;3;;public String getSkipTime() {     return skipTime. }
true;public;1;3;/**  * Specifies to skip to a particular time value.  * Results are not generated and the model is not updated for data from the specified time interval.  *  * @param skipTime String representation of a timestamp. may be an epoch seconds, epoch millis or an ISO string  */ ;/**  * Specifies to skip to a particular time value.  * Results are not generated and the model is not updated for data from the specified time interval.  *  * @param skipTime String representation of a timestamp. may be an epoch seconds, epoch millis or an ISO string  */ public void setSkipTime(String skipTime) {     this.skipTime = skipTime. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobId, calcInterim, start, end, advanceTime, skipTime). }
false;public;1;18;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     FlushJobRequest other = (FlushJobRequest) obj.     return Objects.equals(jobId, other.jobId) && calcInterim == other.calcInterim && Objects.equals(start, other.start) && Objects.equals(end, other.end) && Objects.equals(advanceTime, other.advanceTime) && Objects.equals(skipTime, other.skipTime). }
false;public;2;22;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Job.ID.getPreferredName(), jobId).     if (calcInterim != null) {         builder.field(CALC_INTERIM.getPreferredName(), calcInterim).     }     if (start != null) {         builder.field(START.getPreferredName(), start).     }     if (end != null) {         builder.field(END.getPreferredName(), end).     }     if (advanceTime != null) {         builder.field(ADVANCE_TIME.getPreferredName(), advanceTime).     }     if (skipTime != null) {         builder.field(SKIP_TIME.getPreferredName(), skipTime).     }     builder.endObject().     return builder. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
