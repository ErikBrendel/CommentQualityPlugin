commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * The number of forecasts currently available for this model.  */ ;/**  * The number of forecasts currently available for this model.  */ public long getTotal() {     return total. }
true;public;0;3;/**  * The number of jobs that have at least one forecast.  */ ;/**  * The number of jobs that have at least one forecast.  */ public long getForecastedJobs() {     return forecastedJobs. }
true;public;0;3;/**  * Statistics about the memory usage: minimum, maximum, average and total.  */ ;/**  * Statistics about the memory usage: minimum, maximum, average and total.  */ public SimpleStats getMemoryStats() {     return memoryStats. }
true;public;0;3;/**  * Statistics about the number of forecast records: minimum, maximum, average and total.  */ ;/**  * Statistics about the number of forecast records: minimum, maximum, average and total.  */ public SimpleStats getRecordStats() {     return recordStats. }
true;public;0;3;/**  * Statistics about the forecast runtime in milliseconds: minimum, maximum, average and total  */ ;/**  * Statistics about the forecast runtime in milliseconds: minimum, maximum, average and total  */ public SimpleStats getRuntimeStats() {     return runtimeStats. }
true;public;0;3;/**  * Counts per forecast status, for example: {"finished" : 2}.  */ ;/**  * Counts per forecast status, for example: {"finished" : 2}.  */ public Map<String, Long> getStatusCounts() {     return statusCounts. }
false;public;2;14;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(TOTAL.getPreferredName(), total).     builder.field(FORECASTED_JOBS.getPreferredName(), forecastedJobs).     if (total > 0) {         builder.field(MEMORY_BYTES.getPreferredName(), memoryStats).         builder.field(RECORDS.getPreferredName(), recordStats).         builder.field(PROCESSING_TIME_MS.getPreferredName(), runtimeStats).         builder.field(STATUS.getPreferredName(), statusCounts).     }     return builder.endObject(). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(total, forecastedJobs, memoryStats, recordStats, runtimeStats, statusCounts). }
false;public;1;18;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     ForecastStats other = (ForecastStats) obj.     return Objects.equals(total, other.total) && Objects.equals(forecastedJobs, other.forecastedJobs) && Objects.equals(memoryStats, other.memoryStats) && Objects.equals(recordStats, other.recordStats) && Objects.equals(runtimeStats, other.runtimeStats) && Objects.equals(statusCounts, other.statusCounts). }
