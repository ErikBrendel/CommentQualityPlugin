commented;modifiers;parameterAmount;loc;comment;code
false;public;2;12;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.timeField(Result.TIMESTAMP.getPreferredName(), Result.TIMESTAMP.getPreferredName() + "_string", timestamp.getTime()).     builder.field(BUCKET_SPAN.getPreferredName(), bucketSpan).     builder.field(OVERALL_SCORE.getPreferredName(), overallScore).     builder.field(JOBS.getPreferredName(), jobs).     builder.field(Result.IS_INTERIM.getPreferredName(), isInterim).     builder.field(Result.RESULT_TYPE.getPreferredName(), RESULT_TYPE_VALUE).     builder.endObject().     return builder. }
false;public;0;3;;public Date getTimestamp() {     return timestamp. }
true;public;0;3;/**  * Bucketspan expressed in seconds  */ ;/**  * Bucketspan expressed in seconds  */ public long getBucketSpan() {     return bucketSpan. }
false;public;0;3;;public double getOverallScore() {     return overallScore. }
false;public;0;3;;public List<JobInfo> getJobs() {     return jobs. }
false;;1;3;;void setJobs(List<JobInfo> jobs) {     this.jobs = Collections.unmodifiableList(jobs). }
false;public;0;3;;public boolean isInterim() {     return isInterim. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(timestamp, bucketSpan, overallScore, jobs, isInterim). }
true;public;1;18;/**  * Compare all the fields and embedded anomaly records (if any)  */ ;/**  * Compare all the fields and embedded anomaly records (if any)  */ @Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     OverallBucket that = (OverallBucket) other.     return Objects.equals(this.timestamp, that.timestamp) && this.bucketSpan == that.bucketSpan && this.overallScore == that.overallScore && Objects.equals(this.jobs, that.jobs) && this.isInterim == that.isInterim. }
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;0;3;;public double getMaxAnomalyScore() {     return maxAnomalyScore. }
false;public;2;8;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Job.ID.getPreferredName(), jobId).     builder.field(MAX_ANOMALY_SCORE.getPreferredName(), maxAnomalyScore).     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobId, maxAnomalyScore). }
false;public;1;11;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     JobInfo that = (JobInfo) other.     return Objects.equals(this.jobId, that.jobId) && this.maxAnomalyScore == that.maxAnomalyScore. }
false;public;1;8;;@Override public int compareTo(JobInfo other) {     int result = this.jobId.compareTo(other.jobId).     if (result == 0) {         result = Double.compare(this.maxAnomalyScore, other.maxAnomalyScore).     }     return result. }
