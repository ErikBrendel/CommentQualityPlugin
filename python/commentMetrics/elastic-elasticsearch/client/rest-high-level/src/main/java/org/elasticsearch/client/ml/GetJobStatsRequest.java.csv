commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Explicitly gets all jobs statistics  *  * @return a {@link GetJobStatsRequest} for all existing jobs  */ ;/**  * Explicitly gets all jobs statistics  *  * @return a {@link GetJobStatsRequest} for all existing jobs  */ public static GetJobStatsRequest getAllJobStatsRequest() {     return new GetJobStatsRequest(ALL_JOBS). }
true;public;0;3;/**  * All the jobIds for which to get statistics  */ ;/**  * All the jobIds for which to get statistics  */ public List<String> getJobIds() {     return jobIds. }
false;public;0;3;;public Boolean getAllowNoJobs() {     return this.allowNoJobs. }
true;public;1;3;/**  * Whether to ignore if a wildcard expression matches no jobs.  *  * This includes {@code _all} string or when no jobs have been specified  *  * @param allowNoJobs When {@code true} ignore if wildcard or {@code _all} matches no jobs. Defaults to {@code true}  */ ;/**  * Whether to ignore if a wildcard expression matches no jobs.  *  * This includes {@code _all} string or when no jobs have been specified  *  * @param allowNoJobs When {@code true} ignore if wildcard or {@code _all} matches no jobs. Defaults to {@code true}  */ public void setAllowNoJobs(boolean allowNoJobs) {     this.allowNoJobs = allowNoJobs. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobIds, allowNoJobs). }
false;public;1;14;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     GetJobStatsRequest that = (GetJobStatsRequest) other.     return Objects.equals(jobIds, that.jobIds) && Objects.equals(allowNoJobs, that.allowNoJobs). }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;2;10;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Job.ID.getPreferredName(), Strings.collectionToCommaDelimitedString(jobIds)).     if (allowNoJobs != null) {         builder.field(ALLOW_NO_JOBS.getPreferredName(), allowNoJobs).     }     builder.endObject().     return builder. }
