commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Add a new validation error to the accumulating validation errors  * @param error the error to add  */ ;/**  * Add a new validation error to the accumulating validation errors  * @param error the error to add  */ public void addValidationError(final String error) {     validationErrors.add(error). }
true;public,final;1;7;/**  * Adds validation errors from an existing {@link ValidationException} to  * the accumulating validation errors  * @param exception the {@link ValidationException} to add errors from  */ ;/**  * Adds validation errors from an existing {@link ValidationException} to  * the accumulating validation errors  * @param exception the {@link ValidationException} to add errors from  */ public final void addValidationErrors(@Nullable final ValidationException exception) {     if (exception != null) {         for (String error : exception.validationErrors()) {             addValidationError(error).         }     } }
true;public,final;0;3;/**  * Returns the validation errors accumulated  */ ;/**  * Returns the validation errors accumulated  */ public final List<String> validationErrors() {     return validationErrors. }
false;public,final;0;10;;@Override public final String getMessage() {     StringBuilder sb = new StringBuilder().     sb.append("Validation Failed: ").     int index = 0.     for (String error : validationErrors) {         sb.append(++index).append(": ").append(error).append(".").     }     return sb.toString(). }
