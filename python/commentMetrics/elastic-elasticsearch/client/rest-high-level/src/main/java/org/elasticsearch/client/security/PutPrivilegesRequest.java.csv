commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * @return a map of application name to list of  * {@link ApplicationPrivilege}s  */ ;/**  * @return a map of application name to list of  * {@link ApplicationPrivilege}s  */ public Map<String, List<ApplicationPrivilege>> getPrivileges() {     return privileges. }
false;public;0;3;;public RefreshPolicy getRefreshPolicy() {     return refreshPolicy. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(privileges, refreshPolicy). }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || (this.getClass() != o.getClass())) {         return false.     }     final PutPrivilegesRequest that = (PutPrivilegesRequest) o.     return privileges.equals(that.privileges) && (refreshPolicy == that.refreshPolicy). }
false;public;2;14;;@Override public XContentBuilder toXContent(final XContentBuilder builder, final Params params) throws IOException {     builder.startObject().     for (Entry<String, List<ApplicationPrivilege>> entry : privileges.entrySet()) {         builder.field(entry.getKey()).         builder.startObject().         for (ApplicationPrivilege applicationPrivilege : entry.getValue()) {             builder.field(applicationPrivilege.getName()).             applicationPrivilege.toXContent(builder, params).         }         builder.endObject().     }     return builder.endObject(). }
