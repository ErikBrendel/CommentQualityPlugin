commented;modifiers;parameterAmount;loc;comment;code
true;public;2;4;/**  * Deletes an index using the Delete Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-delete-index.html">  * Delete Index API on elastic.co</a>  * @param deleteIndexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Deletes an index using the Delete Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-delete-index.html">  * Delete Index API on elastic.co</a>  * @param deleteIndexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public AcknowledgedResponse delete(DeleteIndexRequest deleteIndexRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(deleteIndexRequest, IndicesRequestConverters::deleteIndex, options, AcknowledgedResponse::fromXContent, emptySet()). }
true;public;3;4;/**  * Asynchronously deletes an index using the Delete Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-delete-index.html">  * Delete Index API on elastic.co</a>  * @param deleteIndexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously deletes an index using the Delete Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-delete-index.html">  * Delete Index API on elastic.co</a>  * @param deleteIndexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void deleteAsync(DeleteIndexRequest deleteIndexRequest, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(deleteIndexRequest, IndicesRequestConverters::deleteIndex, options, AcknowledgedResponse::fromXContent, listener, emptySet()). }
true;public;2;5;/**  * Creates an index using the Create Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html">  * Create Index API on elastic.co</a>  * @param createIndexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Creates an index using the Create Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html">  * Create Index API on elastic.co</a>  * @param createIndexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public CreateIndexResponse create(CreateIndexRequest createIndexRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(createIndexRequest, IndicesRequestConverters::createIndex, options, CreateIndexResponse::fromXContent, emptySet()). }
true;public;3;6;/**  * Asynchronously creates an index using the Create Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html">  * Create Index API on elastic.co</a>  * @param createIndexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously creates an index using the Create Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html">  * Create Index API on elastic.co</a>  * @param createIndexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void createAsync(CreateIndexRequest createIndexRequest, RequestOptions options, ActionListener<CreateIndexResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(createIndexRequest, IndicesRequestConverters::createIndex, options, CreateIndexResponse::fromXContent, listener, emptySet()). }
true;public;2;8;/**  * Creates an index using the Create Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html">  * Create Index API on elastic.co</a>  * @param createIndexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  *  * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The  * method {@link #create(CreateIndexRequest, RequestOptions)} should be used instead, which accepts a new  * request object.  */ ;/**  * Creates an index using the Create Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html">  * Create Index API on elastic.co</a>  * @param createIndexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  *  * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The  * method {@link #create(CreateIndexRequest, RequestOptions)} should be used instead, which accepts a new  * request object.  */ @Deprecated public org.elasticsearch.action.admin.indices.create.CreateIndexResponse create(org.elasticsearch.action.admin.indices.create.CreateIndexRequest createIndexRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(createIndexRequest, IndicesRequestConverters::createIndex, options, org.elasticsearch.action.admin.indices.create.CreateIndexResponse::fromXContent, emptySet()). }
true;public;3;8;/**  * Asynchronously creates an index using the Create Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html">  * Create Index API on elastic.co</a>  * @param createIndexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  *  * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The  * method {@link #createAsync(CreateIndexRequest, RequestOptions, ActionListener)} should be used instead,  * which accepts a new request object.  */ ;/**  * Asynchronously creates an index using the Create Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html">  * Create Index API on elastic.co</a>  * @param createIndexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  *  * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The  * method {@link #createAsync(CreateIndexRequest, RequestOptions, ActionListener)} should be used instead,  * which accepts a new request object.  */ @Deprecated public void createAsync(org.elasticsearch.action.admin.indices.create.CreateIndexRequest createIndexRequest, RequestOptions options, ActionListener<org.elasticsearch.action.admin.indices.create.CreateIndexResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(createIndexRequest, IndicesRequestConverters::createIndex, options, org.elasticsearch.action.admin.indices.create.CreateIndexResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Updates the mappings on an index using the Put Mapping API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html">  * Put Mapping API on elastic.co</a>  * @param putMappingRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Updates the mappings on an index using the Put Mapping API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html">  * Put Mapping API on elastic.co</a>  * @param putMappingRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public AcknowledgedResponse putMapping(PutMappingRequest putMappingRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(putMappingRequest, IndicesRequestConverters::putMapping, options, AcknowledgedResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously updates the mappings on an index using the Put Mapping API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html">  * Put Mapping API on elastic.co</a>  * @param putMappingRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously updates the mappings on an index using the Put Mapping API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html">  * Put Mapping API on elastic.co</a>  * @param putMappingRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void putMappingAsync(PutMappingRequest putMappingRequest, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(putMappingRequest, IndicesRequestConverters::putMapping, options, AcknowledgedResponse::fromXContent, listener, emptySet()). }
true;public;2;6;/**  * Updates the mappings on an index using the Put Mapping API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html">  * Put Mapping API on elastic.co</a>  * @param putMappingRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  *  * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method  * {@link #putMapping(PutMappingRequest, RequestOptions)} should be used instead, which accepts a new request object.  */ ;/**  * Updates the mappings on an index using the Put Mapping API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html">  * Put Mapping API on elastic.co</a>  * @param putMappingRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  *  * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method  * {@link #putMapping(PutMappingRequest, RequestOptions)} should be used instead, which accepts a new request object.  */ @Deprecated public AcknowledgedResponse putMapping(org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest putMappingRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(putMappingRequest, IndicesRequestConverters::putMapping, options, AcknowledgedResponse::fromXContent, emptySet()). }
true;public;3;7;/**  * Asynchronously updates the mappings on an index using the Put Mapping API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html">  * Put Mapping API on elastic.co</a>  * @param putMappingRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  *  * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The  * method {@link #putMappingAsync(PutMappingRequest, RequestOptions, ActionListener)} should be used instead,  * which accepts a new request object.  */ ;/**  * Asynchronously updates the mappings on an index using the Put Mapping API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html">  * Put Mapping API on elastic.co</a>  * @param putMappingRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  *  * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The  * method {@link #putMappingAsync(PutMappingRequest, RequestOptions, ActionListener)} should be used instead,  * which accepts a new request object.  */ @Deprecated public void putMappingAsync(org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest putMappingRequest, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(putMappingRequest, IndicesRequestConverters::putMapping, options, AcknowledgedResponse::fromXContent, listener, emptySet()). }
true;public;2;7;/**  * Retrieves the mappings on an index or indices using the Get Mapping API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html">  * Get Mapping API on elastic.co</a>  * @param getMappingsRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Retrieves the mappings on an index or indices using the Get Mapping API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html">  * Get Mapping API on elastic.co</a>  * @param getMappingsRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public GetMappingsResponse getMapping(GetMappingsRequest getMappingsRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(getMappingsRequest, IndicesRequestConverters::getMappings, options, GetMappingsResponse::fromXContent, emptySet()). }
true;public;3;9;/**  * Asynchronously retrieves the mappings on an index on indices using the Get Mapping API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html">  * Get Mapping API on elastic.co</a>  * @param getMappingsRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously retrieves the mappings on an index on indices using the Get Mapping API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html">  * Get Mapping API on elastic.co</a>  * @param getMappingsRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void getMappingAsync(GetMappingsRequest getMappingsRequest, RequestOptions options, ActionListener<GetMappingsResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(getMappingsRequest, IndicesRequestConverters::getMappings, options, GetMappingsResponse::fromXContent, listener, emptySet()). }
true;public;2;10;/**  * Retrieves the mappings on an index or indices using the Get Mapping API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html">  * Get Mapping API on elastic.co</a>  * @param getMappingsRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  *  * @deprecated This method uses old request and response objects which still refer to types, a deprecated  * feature. The method {@link #getMapping(GetMappingsRequest, RequestOptions)} should be used instead, which  * accepts a new request object.  */ ;/**  * Retrieves the mappings on an index or indices using the Get Mapping API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html">  * Get Mapping API on elastic.co</a>  * @param getMappingsRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  *  * @deprecated This method uses old request and response objects which still refer to types, a deprecated  * feature. The method {@link #getMapping(GetMappingsRequest, RequestOptions)} should be used instead, which  * accepts a new request object.  */ @Deprecated public org.elasticsearch.action.admin.indices.mapping.get.GetMappingsResponse getMapping(org.elasticsearch.action.admin.indices.mapping.get.GetMappingsRequest getMappingsRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(getMappingsRequest, IndicesRequestConverters::getMappings, options, org.elasticsearch.action.admin.indices.mapping.get.GetMappingsResponse::fromXContent, emptySet()). }
true;public;3;11;/**  * Asynchronously retrieves the mappings on an index on indices using the Get Mapping API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html">  * Get Mapping API on elastic.co</a>  * @param getMappingsRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  *  * @deprecated This method uses old request and response objects which still refer to types, a deprecated feature.  * The method {@link #getMapping(GetMappingsRequest, RequestOptions)} should be used instead, which accepts a new  * request object.  */ ;/**  * Asynchronously retrieves the mappings on an index on indices using the Get Mapping API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html">  * Get Mapping API on elastic.co</a>  * @param getMappingsRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  *  * @deprecated This method uses old request and response objects which still refer to types, a deprecated feature.  * The method {@link #getMapping(GetMappingsRequest, RequestOptions)} should be used instead, which accepts a new  * request object.  */ @Deprecated public void getMappingAsync(org.elasticsearch.action.admin.indices.mapping.get.GetMappingsRequest getMappingsRequest, RequestOptions options, ActionListener<org.elasticsearch.action.admin.indices.mapping.get.GetMappingsResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(getMappingsRequest, IndicesRequestConverters::getMappings, options, org.elasticsearch.action.admin.indices.mapping.get.GetMappingsResponse::fromXContent, listener, emptySet()). }
true;public;2;7;/**  * Retrieves the field mappings on an index or indices using the Get Field Mapping API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html">  * Get Field Mapping API on elastic.co</a>  * @param getFieldMappingsRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  *  * @deprecated This method uses old request and response objects which still refer to types, a deprecated feature.  * The method {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which  * accepts a new request object.  */ ;/**  * Retrieves the field mappings on an index or indices using the Get Field Mapping API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html">  * Get Field Mapping API on elastic.co</a>  * @param getFieldMappingsRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  *  * @deprecated This method uses old request and response objects which still refer to types, a deprecated feature.  * The method {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which  * accepts a new request object.  */ @Deprecated public org.elasticsearch.action.admin.indices.mapping.get.GetFieldMappingsResponse getFieldMapping(org.elasticsearch.action.admin.indices.mapping.get.GetFieldMappingsRequest getFieldMappingsRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(getFieldMappingsRequest, IndicesRequestConverters::getFieldMapping, options, org.elasticsearch.action.admin.indices.mapping.get.GetFieldMappingsResponse::fromXContent, emptySet()). }
true;public;3;7;/**  * Asynchronously retrieves the field mappings on an index on indices using the Get Field Mapping API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html">  * Get Field Mapping API on elastic.co</a>  * @param getFieldMappingsRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  *  * @deprecated This method uses old request and response objects which still refer to types, a deprecated feature.  * The method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be  * used instead, which accepts a new request object.  */ ;/**  * Asynchronously retrieves the field mappings on an index on indices using the Get Field Mapping API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html">  * Get Field Mapping API on elastic.co</a>  * @param getFieldMappingsRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  *  * @deprecated This method uses old request and response objects which still refer to types, a deprecated feature.  * The method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be  * used instead, which accepts a new request object.  */ @Deprecated public void getFieldMappingAsync(org.elasticsearch.action.admin.indices.mapping.get.GetFieldMappingsRequest getFieldMappingsRequest, RequestOptions options, ActionListener<org.elasticsearch.action.admin.indices.mapping.get.GetFieldMappingsResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(getFieldMappingsRequest, IndicesRequestConverters::getFieldMapping, options, org.elasticsearch.action.admin.indices.mapping.get.GetFieldMappingsResponse::fromXContent, listener, emptySet()). }
true;public;2;6;/**  * Retrieves the field mappings on an index or indices using the Get Field Mapping API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html">  * Get Field Mapping API on elastic.co</a>  * @param getFieldMappingsRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Retrieves the field mappings on an index or indices using the Get Field Mapping API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html">  * Get Field Mapping API on elastic.co</a>  * @param getFieldMappingsRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public GetFieldMappingsResponse getFieldMapping(GetFieldMappingsRequest getFieldMappingsRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(getFieldMappingsRequest, IndicesRequestConverters::getFieldMapping, options, GetFieldMappingsResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously retrieves the field mappings on an index or indices using the Get Field Mapping API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html">  * Get Field Mapping API on elastic.co</a>  * @param getFieldMappingsRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously retrieves the field mappings on an index or indices using the Get Field Mapping API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html">  * Get Field Mapping API on elastic.co</a>  * @param getFieldMappingsRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void getFieldMappingAsync(GetFieldMappingsRequest getFieldMappingsRequest, RequestOptions options, ActionListener<GetFieldMappingsResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(getFieldMappingsRequest, IndicesRequestConverters::getFieldMapping, options, GetFieldMappingsResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Updates aliases using the Index Aliases API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html">  * Index Aliases API on elastic.co</a>  * @param indicesAliasesRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Updates aliases using the Index Aliases API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html">  * Index Aliases API on elastic.co</a>  * @param indicesAliasesRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public AcknowledgedResponse updateAliases(IndicesAliasesRequest indicesAliasesRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(indicesAliasesRequest, IndicesRequestConverters::updateAliases, options, AcknowledgedResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously updates aliases using the Index Aliases API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html">  * Index Aliases API on elastic.co</a>  * @param indicesAliasesRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously updates aliases using the Index Aliases API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html">  * Index Aliases API on elastic.co</a>  * @param indicesAliasesRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void updateAliasesAsync(IndicesAliasesRequest indicesAliasesRequest, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(indicesAliasesRequest, IndicesRequestConverters::updateAliases, options, AcknowledgedResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Opens an index using the Open Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-open-close.html">  * Open Index API on elastic.co</a>  * @param openIndexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Opens an index using the Open Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-open-close.html">  * Open Index API on elastic.co</a>  * @param openIndexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public OpenIndexResponse open(OpenIndexRequest openIndexRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(openIndexRequest, IndicesRequestConverters::openIndex, options, OpenIndexResponse::fromXContent, emptySet()). }
true;public;3;4;/**  * Asynchronously opens an index using the Open Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-open-close.html">  * Open Index API on elastic.co</a>  * @param openIndexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously opens an index using the Open Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-open-close.html">  * Open Index API on elastic.co</a>  * @param openIndexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void openAsync(OpenIndexRequest openIndexRequest, RequestOptions options, ActionListener<OpenIndexResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(openIndexRequest, IndicesRequestConverters::openIndex, options, OpenIndexResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Closes an index using the Close Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-open-close.html">  * Close Index API on elastic.co</a>  * @param closeIndexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Closes an index using the Close Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-open-close.html">  * Close Index API on elastic.co</a>  * @param closeIndexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public AcknowledgedResponse close(CloseIndexRequest closeIndexRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(closeIndexRequest, IndicesRequestConverters::closeIndex, options, AcknowledgedResponse::fromXContent, emptySet()). }
true;public;3;4;/**  * Asynchronously closes an index using the Close Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-open-close.html">  * Close Index API on elastic.co</a>  * @param closeIndexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously closes an index using the Close Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-open-close.html">  * Close Index API on elastic.co</a>  * @param closeIndexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void closeAsync(CloseIndexRequest closeIndexRequest, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(closeIndexRequest, IndicesRequestConverters::closeIndex, options, AcknowledgedResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Checks if one or more aliases exist using the Aliases Exist API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html">  * Indices Aliases API on elastic.co</a>  * @param getAliasesRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request  */ ;/**  * Checks if one or more aliases exist using the Aliases Exist API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html">  * Indices Aliases API on elastic.co</a>  * @param getAliasesRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request  */ public boolean existsAlias(GetAliasesRequest getAliasesRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequest(getAliasesRequest, IndicesRequestConverters::existsAlias, options, RestHighLevelClient::convertExistsResponse, emptySet()). }
true;public;3;4;/**  * Asynchronously checks if one or more aliases exist using the Aliases Exist API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html">  * Indices Aliases API on elastic.co</a>  * @param getAliasesRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously checks if one or more aliases exist using the Aliases Exist API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html">  * Indices Aliases API on elastic.co</a>  * @param getAliasesRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void existsAliasAsync(GetAliasesRequest getAliasesRequest, RequestOptions options, ActionListener<Boolean> listener) {     restHighLevelClient.performRequestAsync(getAliasesRequest, IndicesRequestConverters::existsAlias, options, RestHighLevelClient::convertExistsResponse, listener, emptySet()). }
true;public;2;4;/**  * Refresh one or more indices using the Refresh API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-refresh.html"> Refresh API on elastic.co</a>  * @param refreshRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Refresh one or more indices using the Refresh API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-refresh.html"> Refresh API on elastic.co</a>  * @param refreshRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public RefreshResponse refresh(RefreshRequest refreshRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(refreshRequest, IndicesRequestConverters::refresh, options, RefreshResponse::fromXContent, emptySet()). }
true;public;3;4;/**  * Asynchronously refresh one or more indices using the Refresh API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-refresh.html"> Refresh API on elastic.co</a>  * @param refreshRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously refresh one or more indices using the Refresh API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-refresh.html"> Refresh API on elastic.co</a>  * @param refreshRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void refreshAsync(RefreshRequest refreshRequest, RequestOptions options, ActionListener<RefreshResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(refreshRequest, IndicesRequestConverters::refresh, options, RefreshResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Flush one or more indices using the Flush API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-flush.html"> Flush API on elastic.co</a>  * @param flushRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Flush one or more indices using the Flush API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-flush.html"> Flush API on elastic.co</a>  * @param flushRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public FlushResponse flush(FlushRequest flushRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(flushRequest, IndicesRequestConverters::flush, options, FlushResponse::fromXContent, emptySet()). }
true;public;3;4;/**  * Asynchronously flush one or more indices using the Flush API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-flush.html"> Flush API on elastic.co</a>  * @param flushRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously flush one or more indices using the Flush API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-flush.html"> Flush API on elastic.co</a>  * @param flushRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void flushAsync(FlushRequest flushRequest, RequestOptions options, ActionListener<FlushResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(flushRequest, IndicesRequestConverters::flush, options, FlushResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Initiate a synced flush manually using the synced flush API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-synced-flush.html">  *     Synced flush API on elastic.co</a>  * @param syncedFlushRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Initiate a synced flush manually using the synced flush API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-synced-flush.html">  *     Synced flush API on elastic.co</a>  * @param syncedFlushRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public SyncedFlushResponse flushSynced(SyncedFlushRequest syncedFlushRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(syncedFlushRequest, IndicesRequestConverters::flushSynced, options, SyncedFlushResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously initiate a synced flush manually using the synced flush API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-synced-flush.html">  *     Synced flush API on elastic.co</a>  * @param syncedFlushRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously initiate a synced flush manually using the synced flush API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-synced-flush.html">  *     Synced flush API on elastic.co</a>  * @param syncedFlushRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void flushSyncedAsync(SyncedFlushRequest syncedFlushRequest, RequestOptions options, ActionListener<SyncedFlushResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(syncedFlushRequest, IndicesRequestConverters::flushSynced, options, SyncedFlushResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Retrieve the settings of one or more indices.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-settings.html">  * Indices Get Settings API on elastic.co</a>  * @param getSettingsRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Retrieve the settings of one or more indices.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-settings.html">  * Indices Get Settings API on elastic.co</a>  * @param getSettingsRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public GetSettingsResponse getSettings(GetSettingsRequest getSettingsRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(getSettingsRequest, IndicesRequestConverters::getSettings, options, GetSettingsResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously retrieve the settings of one or more indices.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-settings.html">  * Indices Get Settings API on elastic.co</a>  * @param getSettingsRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously retrieve the settings of one or more indices.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-settings.html">  * Indices Get Settings API on elastic.co</a>  * @param getSettingsRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void getSettingsAsync(GetSettingsRequest getSettingsRequest, RequestOptions options, ActionListener<GetSettingsResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(getSettingsRequest, IndicesRequestConverters::getSettings, options, GetSettingsResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Retrieve information about one or more indexes  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-index.html">  * Indices Get Index API on elastic.co</a>  * @param getIndexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Retrieve information about one or more indexes  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-index.html">  * Indices Get Index API on elastic.co</a>  * @param getIndexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public GetIndexResponse get(GetIndexRequest getIndexRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(getIndexRequest, IndicesRequestConverters::getIndex, options, GetIndexResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Retrieve information about one or more indexes  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-index.html">  * Indices Get Index API on elastic.co</a>  * @param getIndexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Retrieve information about one or more indexes  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-index.html">  * Indices Get Index API on elastic.co</a>  * @param getIndexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void getAsync(GetIndexRequest getIndexRequest, RequestOptions options, ActionListener<GetIndexResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(getIndexRequest, IndicesRequestConverters::getIndex, options, GetIndexResponse::fromXContent, listener, emptySet()). }
true;public;2;6;/**  * Retrieve information about one or more indexes  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-index.html">  * Indices Get Index API on elastic.co</a>  * @param getIndexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method  * {@link #get(GetIndexRequest, RequestOptions)} should be used instead, which accepts a new request object.  */ ;/**  * Retrieve information about one or more indexes  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-index.html">  * Indices Get Index API on elastic.co</a>  * @param getIndexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method  * {@link #get(GetIndexRequest, RequestOptions)} should be used instead, which accepts a new request object.  */ @Deprecated public org.elasticsearch.action.admin.indices.get.GetIndexResponse get(org.elasticsearch.action.admin.indices.get.GetIndexRequest getIndexRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(getIndexRequest, IndicesRequestConverters::getIndex, options, org.elasticsearch.action.admin.indices.get.GetIndexResponse::fromXContent, emptySet()). }
true;public;3;6;/**  * Retrieve information about one or more indexes  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-index.html">  * Indices Get Index API on elastic.co</a>  * @param getIndexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method  * {@link #getAsync(GetIndexRequest, RequestOptions, ActionListener)} should be used instead, which accepts a new request object.  */ ;/**  * Retrieve information about one or more indexes  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-index.html">  * Indices Get Index API on elastic.co</a>  * @param getIndexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method  * {@link #getAsync(GetIndexRequest, RequestOptions, ActionListener)} should be used instead, which accepts a new request object.  */ @Deprecated public void getAsync(org.elasticsearch.action.admin.indices.get.GetIndexRequest getIndexRequest, RequestOptions options, ActionListener<org.elasticsearch.action.admin.indices.get.GetIndexResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(getIndexRequest, IndicesRequestConverters::getIndex, options, org.elasticsearch.action.admin.indices.get.GetIndexResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Force merge one or more indices using the Force Merge API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-forcemerge.html">  * Force Merge API on elastic.co</a>  * @param forceMergeRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  * @deprecated use {@link #forcemerge(ForceMergeRequest, RequestOptions)} instead  */ ;/**  * Force merge one or more indices using the Force Merge API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-forcemerge.html">  * Force Merge API on elastic.co</a>  * @param forceMergeRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  * @deprecated use {@link #forcemerge(ForceMergeRequest, RequestOptions)} instead  */ @Deprecated public ForceMergeResponse forceMerge(ForceMergeRequest forceMergeRequest, RequestOptions options) throws IOException {     return forcemerge(forceMergeRequest, options). }
true;public;2;4;/**  * Force merge one or more indices using the Force Merge API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-forcemerge.html">  * Force Merge API on elastic.co</a>  * @param forceMergeRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Force merge one or more indices using the Force Merge API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-forcemerge.html">  * Force Merge API on elastic.co</a>  * @param forceMergeRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public ForceMergeResponse forcemerge(ForceMergeRequest forceMergeRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(forceMergeRequest, IndicesRequestConverters::forceMerge, options, ForceMergeResponse::fromXContent, emptySet()). }
true;public;3;4;/**  * Asynchronously force merge one or more indices using the Force Merge API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-forcemerge.html">  * Force Merge API on elastic.co</a>  * @param forceMergeRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  * @deprecated use {@link #forcemergeAsync(ForceMergeRequest, RequestOptions, ActionListener)} instead  */ ;/**  * Asynchronously force merge one or more indices using the Force Merge API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-forcemerge.html">  * Force Merge API on elastic.co</a>  * @param forceMergeRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  * @deprecated use {@link #forcemergeAsync(ForceMergeRequest, RequestOptions, ActionListener)} instead  */ @Deprecated public void forceMergeAsync(ForceMergeRequest forceMergeRequest, RequestOptions options, ActionListener<ForceMergeResponse> listener) {     forcemergeAsync(forceMergeRequest, options, listener). }
true;public;3;4;/**  * Asynchronously force merge one or more indices using the Force Merge API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-forcemerge.html">  * Force Merge API on elastic.co</a>  * @param forceMergeRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously force merge one or more indices using the Force Merge API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-forcemerge.html">  * Force Merge API on elastic.co</a>  * @param forceMergeRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void forcemergeAsync(ForceMergeRequest forceMergeRequest, RequestOptions options, ActionListener<ForceMergeResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(forceMergeRequest, IndicesRequestConverters::forceMerge, options, ForceMergeResponse::fromXContent, listener, emptySet()). }
true;public;2;5;/**  * Clears the cache of one or more indices using the Clear Cache API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-clearcache.html">  * Clear Cache API on elastic.co</a>  * @param clearIndicesCacheRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Clears the cache of one or more indices using the Clear Cache API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-clearcache.html">  * Clear Cache API on elastic.co</a>  * @param clearIndicesCacheRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public ClearIndicesCacheResponse clearCache(ClearIndicesCacheRequest clearIndicesCacheRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(clearIndicesCacheRequest, IndicesRequestConverters::clearCache, options, ClearIndicesCacheResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously clears the cache of one or more indices using the Clear Cache API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-clearcache.html">  * Clear Cache API on elastic.co</a>  * @param clearIndicesCacheRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously clears the cache of one or more indices using the Clear Cache API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-clearcache.html">  * Clear Cache API on elastic.co</a>  * @param clearIndicesCacheRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void clearCacheAsync(ClearIndicesCacheRequest clearIndicesCacheRequest, RequestOptions options, ActionListener<ClearIndicesCacheResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(clearIndicesCacheRequest, IndicesRequestConverters::clearCache, options, ClearIndicesCacheResponse::fromXContent, listener, emptySet()). }
true;public;2;9;/**  * Checks if the index (indices) exists or not.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-exists.html">  * Indices Exists API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request  */ ;/**  * Checks if the index (indices) exists or not.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-exists.html">  * Indices Exists API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request  */ public boolean exists(GetIndexRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequest(request, IndicesRequestConverters::indicesExist, options, RestHighLevelClient::convertExistsResponse, Collections.emptySet()). }
true;public;3;10;/**  * Asynchronously checks if the index (indices) exists or not.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-exists.html">  * Indices Exists API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously checks if the index (indices) exists or not.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-exists.html">  * Indices Exists API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void existsAsync(GetIndexRequest request, RequestOptions options, ActionListener<Boolean> listener) {     restHighLevelClient.performRequestAsync(request, IndicesRequestConverters::indicesExist, options, RestHighLevelClient::convertExistsResponse, listener, Collections.emptySet()). }
true;public;2;10;/**  * Checks if the index (indices) exists or not.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-exists.html">  * Indices Exists API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request  * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method  * {@link #exists(GetIndexRequest, RequestOptions)} should be used instead, which accepts a new request object.  */ ;/**  * Checks if the index (indices) exists or not.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-exists.html">  * Indices Exists API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request  * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method  * {@link #exists(GetIndexRequest, RequestOptions)} should be used instead, which accepts a new request object.  */ @Deprecated public boolean exists(org.elasticsearch.action.admin.indices.get.GetIndexRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequest(request, IndicesRequestConverters::indicesExist, options, RestHighLevelClient::convertExistsResponse, Collections.emptySet()). }
true;public;3;12;/**  * Asynchronously checks if the index (indices) exists or not.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-exists.html">  * Indices Exists API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method  * {@link #existsAsync(GetIndexRequest, RequestOptions, ActionListener)} should be used instead, which accepts a new request object.  */ ;/**  * Asynchronously checks if the index (indices) exists or not.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-exists.html">  * Indices Exists API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method  * {@link #existsAsync(GetIndexRequest, RequestOptions, ActionListener)} should be used instead, which accepts a new request object.  */ @Deprecated public void existsAsync(org.elasticsearch.action.admin.indices.get.GetIndexRequest request, RequestOptions options, ActionListener<Boolean> listener) {     restHighLevelClient.performRequestAsync(request, IndicesRequestConverters::indicesExist, options, RestHighLevelClient::convertExistsResponse, listener, Collections.emptySet()). }
true;public;2;4;/**  * Shrinks an index using the Shrink Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-shrink-index.html">  * Shrink Index API on elastic.co</a>  * @param resizeRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Shrinks an index using the Shrink Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-shrink-index.html">  * Shrink Index API on elastic.co</a>  * @param resizeRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public ResizeResponse shrink(ResizeRequest resizeRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(resizeRequest, IndicesRequestConverters::shrink, options, ResizeResponse::fromXContent, emptySet()). }
true;public;3;4;/**  * Asynchronously shrinks an index using the Shrink index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-shrink-index.html">  * Shrink Index API on elastic.co</a>  * @param resizeRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously shrinks an index using the Shrink index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-shrink-index.html">  * Shrink Index API on elastic.co</a>  * @param resizeRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void shrinkAsync(ResizeRequest resizeRequest, RequestOptions options, ActionListener<ResizeResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(resizeRequest, IndicesRequestConverters::shrink, options, ResizeResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Splits an index using the Split Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-split-index.html">  * Split Index API on elastic.co</a>  * @param resizeRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Splits an index using the Split Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-split-index.html">  * Split Index API on elastic.co</a>  * @param resizeRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public ResizeResponse split(ResizeRequest resizeRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(resizeRequest, IndicesRequestConverters::split, options, ResizeResponse::fromXContent, emptySet()). }
true;public;3;4;/**  * Asynchronously splits an index using the Split Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-split-index.html">  * Split Index API on elastic.co</a>  * @param resizeRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously splits an index using the Split Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-split-index.html">  * Split Index API on elastic.co</a>  * @param resizeRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void splitAsync(ResizeRequest resizeRequest, RequestOptions options, ActionListener<ResizeResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(resizeRequest, IndicesRequestConverters::split, options, ResizeResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Rolls over an index using the Rollover Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-rollover-index.html">  * Rollover Index API on elastic.co</a>  * @param rolloverRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Rolls over an index using the Rollover Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-rollover-index.html">  * Rollover Index API on elastic.co</a>  * @param rolloverRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public RolloverResponse rollover(RolloverRequest rolloverRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(rolloverRequest, IndicesRequestConverters::rollover, options, RolloverResponse::fromXContent, emptySet()). }
true;public;3;4;/**  * Asynchronously rolls over an index using the Rollover Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-rollover-index.html">  * Rollover Index API on elastic.co</a>  * @param rolloverRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously rolls over an index using the Rollover Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-rollover-index.html">  * Rollover Index API on elastic.co</a>  * @param rolloverRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void rolloverAsync(RolloverRequest rolloverRequest, RequestOptions options, ActionListener<RolloverResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(rolloverRequest, IndicesRequestConverters::rollover, options, RolloverResponse::fromXContent, listener, emptySet()). }
true;public;2;7;/**  * Rolls over an index using the Rollover Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-rollover-index.html">  * Rollover Index API on elastic.co</a>  * @param rolloverRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  *  * @deprecated This method uses deprecated request and response objects.  * The method {@link #rollover(RolloverRequest, RequestOptions)} should be used instead, which accepts a new request object.  */ ;/**  * Rolls over an index using the Rollover Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-rollover-index.html">  * Rollover Index API on elastic.co</a>  * @param rolloverRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  *  * @deprecated This method uses deprecated request and response objects.  * The method {@link #rollover(RolloverRequest, RequestOptions)} should be used instead, which accepts a new request object.  */ @Deprecated public org.elasticsearch.action.admin.indices.rollover.RolloverResponse rollover(org.elasticsearch.action.admin.indices.rollover.RolloverRequest rolloverRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(rolloverRequest, IndicesRequestConverters::rollover, options, org.elasticsearch.action.admin.indices.rollover.RolloverResponse::fromXContent, emptySet()). }
true;public;3;6;/**  * Asynchronously rolls over an index using the Rollover Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-rollover-index.html">  * Rollover Index API on elastic.co</a>  * @param rolloverRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  *  * @deprecated This method uses deprecated request and response objects.  * The method {@link #rolloverAsync(RolloverRequest, RequestOptions, ActionListener)} should be used instead, which  * accepts a new request object.  */ ;/**  * Asynchronously rolls over an index using the Rollover Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-rollover-index.html">  * Rollover Index API on elastic.co</a>  * @param rolloverRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  *  * @deprecated This method uses deprecated request and response objects.  * The method {@link #rolloverAsync(RolloverRequest, RequestOptions, ActionListener)} should be used instead, which  * accepts a new request object.  */ @Deprecated public void rolloverAsync(org.elasticsearch.action.admin.indices.rollover.RolloverRequest rolloverRequest, RequestOptions options, ActionListener<org.elasticsearch.action.admin.indices.rollover.RolloverResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(rolloverRequest, IndicesRequestConverters::rollover, options, org.elasticsearch.action.admin.indices.rollover.RolloverResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Gets one or more aliases using the Get Index Aliases API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html"> Indices Aliases API on  * elastic.co</a>  * @param getAliasesRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Gets one or more aliases using the Get Index Aliases API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html"> Indices Aliases API on  * elastic.co</a>  * @param getAliasesRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public GetAliasesResponse getAlias(GetAliasesRequest getAliasesRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(getAliasesRequest, IndicesRequestConverters::getAlias, options, GetAliasesResponse::fromXContent, singleton(RestStatus.NOT_FOUND.getStatus())). }
true;public;3;4;/**  * Asynchronously gets one or more aliases using the Get Index Aliases API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html"> Indices Aliases API on  * elastic.co</a>  * @param getAliasesRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously gets one or more aliases using the Get Index Aliases API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html"> Indices Aliases API on  * elastic.co</a>  * @param getAliasesRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void getAliasAsync(GetAliasesRequest getAliasesRequest, RequestOptions options, ActionListener<GetAliasesResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(getAliasesRequest, IndicesRequestConverters::getAlias, options, GetAliasesResponse::fromXContent, listener, singleton(RestStatus.NOT_FOUND.getStatus())). }
true;public;2;4;/**  * Updates specific index level settings using the Update Indices Settings API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-update-settings.html"> Update Indices Settings  * API on elastic.co</a>  * @param updateSettingsRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Updates specific index level settings using the Update Indices Settings API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-update-settings.html"> Update Indices Settings  * API on elastic.co</a>  * @param updateSettingsRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public AcknowledgedResponse putSettings(UpdateSettingsRequest updateSettingsRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(updateSettingsRequest, IndicesRequestConverters::indexPutSettings, options, AcknowledgedResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously updates specific index level settings using the Update Indices Settings API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-update-settings.html"> Update Indices Settings  * API on elastic.co</a>  * @param updateSettingsRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously updates specific index level settings using the Update Indices Settings API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-update-settings.html"> Update Indices Settings  * API on elastic.co</a>  * @param updateSettingsRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void putSettingsAsync(UpdateSettingsRequest updateSettingsRequest, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(updateSettingsRequest, IndicesRequestConverters::indexPutSettings, options, AcknowledgedResponse::fromXContent, listener, emptySet()). }
true;public;2;7;/**  * Puts an index template using the Index Templates API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html"> Index Templates API  * on elastic.co</a>  * @param putIndexTemplateRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  * @deprecated This old form of request allows types in mappings. Use {@link #putTemplate(PutIndexTemplateRequest, RequestOptions)}  * instead which introduces a new request object without types.  */ ;/**  * Puts an index template using the Index Templates API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html"> Index Templates API  * on elastic.co</a>  * @param putIndexTemplateRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  * @deprecated This old form of request allows types in mappings. Use {@link #putTemplate(PutIndexTemplateRequest, RequestOptions)}  * instead which introduces a new request object without types.  */ @Deprecated public AcknowledgedResponse putTemplate(org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest putIndexTemplateRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(putIndexTemplateRequest, IndicesRequestConverters::putTemplate, options, AcknowledgedResponse::fromXContent, emptySet()). }
true;public;3;6;/**  * Asynchronously puts an index template using the Index Templates API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html"> Index Templates API  * on elastic.co</a>  * @param putIndexTemplateRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  * @deprecated This old form of request allows types in mappings.  * Use {@link #putTemplateAsync(PutIndexTemplateRequest, RequestOptions, ActionListener)}  * instead which introduces a new request object without types.  */ ;/**  * Asynchronously puts an index template using the Index Templates API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html"> Index Templates API  * on elastic.co</a>  * @param putIndexTemplateRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  * @deprecated This old form of request allows types in mappings.  * Use {@link #putTemplateAsync(PutIndexTemplateRequest, RequestOptions, ActionListener)}  * instead which introduces a new request object without types.  */ @Deprecated public void putTemplateAsync(org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest putIndexTemplateRequest, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(putIndexTemplateRequest, IndicesRequestConverters::putTemplate, options, AcknowledgedResponse::fromXContent, listener, emptySet()). }
true;public;2;6;/**  * Puts an index template using the Index Templates API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html"> Index Templates API  * on elastic.co</a>  * @param putIndexTemplateRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Puts an index template using the Index Templates API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html"> Index Templates API  * on elastic.co</a>  * @param putIndexTemplateRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public AcknowledgedResponse putTemplate(PutIndexTemplateRequest putIndexTemplateRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(putIndexTemplateRequest, IndicesRequestConverters::putTemplate, options, AcknowledgedResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously puts an index template using the Index Templates API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html"> Index Templates API  * on elastic.co</a>  * @param putIndexTemplateRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously puts an index template using the Index Templates API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html"> Index Templates API  * on elastic.co</a>  * @param putIndexTemplateRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void putTemplateAsync(PutIndexTemplateRequest putIndexTemplateRequest, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(putIndexTemplateRequest, IndicesRequestConverters::putTemplate, options, AcknowledgedResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Validate a potentially expensive query without executing it.  * <p>  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-validate.html"> Validate Query API  * on elastic.co</a>  * @param validateQueryRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Validate a potentially expensive query without executing it.  * <p>  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-validate.html"> Validate Query API  * on elastic.co</a>  * @param validateQueryRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public ValidateQueryResponse validateQuery(ValidateQueryRequest validateQueryRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(validateQueryRequest, IndicesRequestConverters::validateQuery, options, ValidateQueryResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously validate a potentially expensive query without executing it.  * <p>  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-validate.html"> Validate Query API  * on elastic.co</a>  * @param validateQueryRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously validate a potentially expensive query without executing it.  * <p>  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-validate.html"> Validate Query API  * on elastic.co</a>  * @param validateQueryRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void validateQueryAsync(ValidateQueryRequest validateQueryRequest, RequestOptions options, ActionListener<ValidateQueryResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(validateQueryRequest, IndicesRequestConverters::validateQuery, options, ValidateQueryResponse::fromXContent, listener, emptySet()). }
true;public;2;7;/**  * Gets index templates using the Index Templates API. The mappings will be returned in a legacy deprecated format, where the  * mapping definition is nested under the type name.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html"> Index Templates API  * on elastic.co</a>  * @param getIndexTemplatesRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  * @deprecated This method uses an old response object which still refers to types, a deprecated feature. Use  * {@link #getIndexTemplate(GetIndexTemplatesRequest, RequestOptions)} instead which returns a new response object  */ ;/**  * Gets index templates using the Index Templates API. The mappings will be returned in a legacy deprecated format, where the  * mapping definition is nested under the type name.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html"> Index Templates API  * on elastic.co</a>  * @param getIndexTemplatesRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  * @deprecated This method uses an old response object which still refers to types, a deprecated feature. Use  * {@link #getIndexTemplate(GetIndexTemplatesRequest, RequestOptions)} instead which returns a new response object  */ @Deprecated public org.elasticsearch.action.admin.indices.template.get.GetIndexTemplatesResponse getTemplate(GetIndexTemplatesRequest getIndexTemplatesRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(getIndexTemplatesRequest, IndicesRequestConverters::getTemplatesWithDocumentTypes, options, org.elasticsearch.action.admin.indices.template.get.GetIndexTemplatesResponse::fromXContent, emptySet()). }
true;public;2;6;/**  * Gets index templates using the Index Templates API  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html"> Index Templates API  * on elastic.co</a>  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param getIndexTemplatesRequest the request  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Gets index templates using the Index Templates API  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html"> Index Templates API  * on elastic.co</a>  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param getIndexTemplatesRequest the request  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public GetIndexTemplatesResponse getIndexTemplate(GetIndexTemplatesRequest getIndexTemplatesRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(getIndexTemplatesRequest, IndicesRequestConverters::getTemplates, options, GetIndexTemplatesResponse::fromXContent, emptySet()). }
true;public;3;7;/**  * Asynchronously gets index templates using the Index Templates API. The mappings will be returned in a legacy deprecated format,  * where the mapping definition is nested under the type name.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html"> Index Templates API  * on elastic.co</a>  * @param getIndexTemplatesRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  * @deprecated This method uses an old response object which still refers to types, a deprecated feature. Use  * {@link #getIndexTemplateAsync(GetIndexTemplatesRequest, RequestOptions, ActionListener)} instead which returns a new response object  */ ;/**  * Asynchronously gets index templates using the Index Templates API. The mappings will be returned in a legacy deprecated format,  * where the mapping definition is nested under the type name.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html"> Index Templates API  * on elastic.co</a>  * @param getIndexTemplatesRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  * @deprecated This method uses an old response object which still refers to types, a deprecated feature. Use  * {@link #getIndexTemplateAsync(GetIndexTemplatesRequest, RequestOptions, ActionListener)} instead which returns a new response object  */ @Deprecated public void getTemplateAsync(GetIndexTemplatesRequest getIndexTemplatesRequest, RequestOptions options, ActionListener<org.elasticsearch.action.admin.indices.template.get.GetIndexTemplatesResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(getIndexTemplatesRequest, IndicesRequestConverters::getTemplatesWithDocumentTypes, options, org.elasticsearch.action.admin.indices.template.get.GetIndexTemplatesResponse::fromXContent, listener, emptySet()). }
true;public;3;6;/**  * Asynchronously gets index templates using the Index Templates API  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html"> Index Templates API  * on elastic.co</a>  * @param getIndexTemplatesRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously gets index templates using the Index Templates API  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html"> Index Templates API  * on elastic.co</a>  * @param getIndexTemplatesRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void getIndexTemplateAsync(GetIndexTemplatesRequest getIndexTemplatesRequest, RequestOptions options, ActionListener<GetIndexTemplatesResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(getIndexTemplatesRequest, IndicesRequestConverters::getTemplates, options, GetIndexTemplatesResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Uses the Index Templates API to determine if index templates exist  *  * @param indexTemplatesRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return true if any index templates in the request exist, false otherwise  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Uses the Index Templates API to determine if index templates exist  *  * @param indexTemplatesRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return true if any index templates in the request exist, false otherwise  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public boolean existsTemplate(IndexTemplatesExistRequest indexTemplatesRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequest(indexTemplatesRequest, IndicesRequestConverters::templatesExist, options, RestHighLevelClient::convertExistsResponse, emptySet()). }
true;public;3;7;/**  * Uses the Index Templates API to determine if index templates exist  *  * @param indexTemplatesExistRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion. The listener will be called with the value {@code true}  *                 if any index templates in the request exist, false otherwise  */ ;/**  * Uses the Index Templates API to determine if index templates exist  *  * @param indexTemplatesExistRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion. The listener will be called with the value {@code true}  *                 if any index templates in the request exist, false otherwise  */ public void existsTemplateAsync(IndexTemplatesExistRequest indexTemplatesExistRequest, RequestOptions options, ActionListener<Boolean> listener) {     restHighLevelClient.performRequestAsync(indexTemplatesExistRequest, IndicesRequestConverters::templatesExist, options, RestHighLevelClient::convertExistsResponse, listener, emptySet()). }
true;public;2;4;/**  * Calls the analyze API  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-analyze.html">Analyze API on elastic.co</a>  *  * @param request   the request  * @param options   the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  */ ;/**  * Calls the analyze API  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-analyze.html">Analyze API on elastic.co</a>  *  * @param request   the request  * @param options   the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  */ public AnalyzeResponse analyze(AnalyzeRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, IndicesRequestConverters::analyze, options, AnalyzeResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously calls the analyze API  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-analyze.html">Analyze API on elastic.co</a>  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously calls the analyze API  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-analyze.html">Analyze API on elastic.co</a>  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void analyzeAsync(AnalyzeRequest request, RequestOptions options, ActionListener<AnalyzeResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, IndicesRequestConverters::analyze, options, AnalyzeResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Synchronously calls the _freeze API  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  */ ;/**  * Synchronously calls the _freeze API  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  */ public ShardsAcknowledgedResponse freeze(FreezeIndexRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, IndicesRequestConverters::freezeIndex, options, ShardsAcknowledgedResponse::fromXContent, emptySet()). }
true;public;3;4;/**  * Asynchronously calls the _freeze API  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously calls the _freeze API  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void freezeAsync(FreezeIndexRequest request, RequestOptions options, ActionListener<ShardsAcknowledgedResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, IndicesRequestConverters::freezeIndex, options, ShardsAcknowledgedResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Synchronously calls the _unfreeze API  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  */ ;/**  * Synchronously calls the _unfreeze API  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  */ public ShardsAcknowledgedResponse unfreeze(UnfreezeIndexRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, IndicesRequestConverters::unfreezeIndex, options, ShardsAcknowledgedResponse::fromXContent, emptySet()). }
true;public;3;4;/**  * Asynchronously calls the _unfreeze API  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously calls the _unfreeze API  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void unfreezeAsync(UnfreezeIndexRequest request, RequestOptions options, ActionListener<ShardsAcknowledgedResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, IndicesRequestConverters::unfreezeIndex, options, ShardsAcknowledgedResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Delete an index template using the Index Templates API  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html"> Index Templates API  * on elastic.co</a>  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Delete an index template using the Index Templates API  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html"> Index Templates API  * on elastic.co</a>  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public AcknowledgedResponse deleteTemplate(DeleteIndexTemplateRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, IndicesRequestConverters::deleteTemplate, options, AcknowledgedResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously delete an index template using the Index Templates API  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html"> Index Templates API  * on elastic.co</a>  *  * @param request  the request  * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously delete an index template using the Index Templates API  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html"> Index Templates API  * on elastic.co</a>  *  * @param request  the request  * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void deleteTemplateAsync(DeleteIndexTemplateRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, IndicesRequestConverters::deleteTemplate, options, AcknowledgedResponse::fromXContent, listener, emptySet()). }
