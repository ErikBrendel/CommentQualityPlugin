commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;9;;public static CreateTokenRequest passwordGrant(String username, char[] password) {     if (Strings.isNullOrEmpty(username)) {         throw new IllegalArgumentException("username is required").     }     if (password == null || password.length == 0) {         throw new IllegalArgumentException("password is required").     }     return new CreateTokenRequest("password", null, username, password, null). }
false;public,static;1;6;;public static CreateTokenRequest refreshTokenGrant(String refreshToken) {     if (Strings.isNullOrEmpty(refreshToken)) {         throw new IllegalArgumentException("refresh_token is required").     }     return new CreateTokenRequest("refresh_token", null, null, null, refreshToken). }
false;public,static;0;3;;public static CreateTokenRequest clientCredentialsGrant() {     return new CreateTokenRequest("client_credentials", null, null, null, null). }
false;public;0;3;;public String getGrantType() {     return grantType. }
false;public;0;3;;public String getScope() {     return scope. }
false;public;0;3;;public String getUsername() {     return username. }
false;public;0;3;;public char[] getPassword() {     return password. }
false;public;0;3;;public String getRefreshToken() {     return refreshToken. }
false;public;2;23;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().field("grant_type", grantType).     if (scope != null) {         builder.field("scope", scope).     }     if (username != null) {         builder.field("username", username).     }     if (password != null) {         byte[] passwordBytes = CharArrays.toUtf8Bytes(password).         try {             builder.field("password").utf8Value(passwordBytes, 0, passwordBytes.length).         } finally {             Arrays.fill(passwordBytes, (byte) 0).         }     }     if (refreshToken != null) {         builder.field("refresh_token", refreshToken).     }     return builder.endObject(). }
false;public;1;15;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     final CreateTokenRequest that = (CreateTokenRequest) o.     return Objects.equals(grantType, that.grantType) && Objects.equals(scope, that.scope) && Objects.equals(username, that.username) && Arrays.equals(password, that.password) && Objects.equals(refreshToken, that.refreshToken). }
false;public;0;6;;@Override public int hashCode() {     int result = Objects.hash(grantType, scope, username, refreshToken).     result = 31 * result + Arrays.hashCode(password).     return result. }
