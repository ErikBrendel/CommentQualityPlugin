commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getJobId() {     return jobId. }
true;public;1;3;/**  * The jobId which to delete  * @param jobId unique jobId to delete, must not be null  */ ;/**  * The jobId which to delete  * @param jobId unique jobId to delete, must not be null  */ public void setJobId(String jobId) {     this.jobId = Objects.requireNonNull(jobId, "[job_id] must not be null"). }
false;public;0;3;;public Boolean getForce() {     return force. }
true;public;1;3;/**  * Used to forcefully delete an opened job.  * This method is quicker than closing and deleting the job.  *  * @param force When {@code true} forcefully delete an opened job. Defaults to {@code false}  */ ;/**  * Used to forcefully delete an opened job.  * This method is quicker than closing and deleting the job.  *  * @param force When {@code true} forcefully delete an opened job. Defaults to {@code false}  */ public void setForce(Boolean force) {     this.force = force. }
false;public;0;3;;public Boolean getWaitForCompletion() {     return waitForCompletion. }
true;public;1;3;/**  * Set whether this request should wait until the operation has completed before returning  * @param waitForCompletion When {@code true} the call will wait for the job deletion to complete.  *                          Otherwise, the deletion will be executed asynchronously and the response  *                          will contain the task id.  */ ;/**  * Set whether this request should wait until the operation has completed before returning  * @param waitForCompletion When {@code true} the call will wait for the job deletion to complete.  *                          Otherwise, the deletion will be executed asynchronously and the response  *                          will contain the task id.  */ public void setWaitForCompletion(Boolean waitForCompletion) {     this.waitForCompletion = waitForCompletion. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobId, force). }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || obj.getClass() != getClass()) {         return false.     }     DeleteJobRequest other = (DeleteJobRequest) obj.     return Objects.equals(jobId, other.jobId) && Objects.equals(force, other.force). }
