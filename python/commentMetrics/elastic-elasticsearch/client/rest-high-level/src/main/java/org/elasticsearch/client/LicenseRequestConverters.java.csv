commented;modifiers;parameterAmount;loc;comment;code
false;static;1;12;;static Request putLicense(PutLicenseRequest putLicenseRequest) {     String endpoint = new RequestConverters.EndpointBuilder().addPathPartAsIs("_license").build().     Request request = new Request(HttpPut.METHOD_NAME, endpoint).     RequestConverters.Params parameters = new RequestConverters.Params(request).     parameters.withTimeout(putLicenseRequest.timeout()).     parameters.withMasterTimeout(putLicenseRequest.masterNodeTimeout()).     if (putLicenseRequest.isAcknowledge()) {         parameters.putParam("acknowledge", "true").     }     request.setJsonEntity(putLicenseRequest.getLicenseDefinition()).     return request. }
false;static;1;7;;static Request getLicense(GetLicenseRequest getLicenseRequest) {     String endpoint = new RequestConverters.EndpointBuilder().addPathPartAsIs("_license").build().     Request request = new Request(HttpGet.METHOD_NAME, endpoint).     RequestConverters.Params parameters = new RequestConverters.Params(request).     parameters.withLocal(getLicenseRequest.isLocal()).     return request. }
false;static;1;8;;static Request deleteLicense(DeleteLicenseRequest deleteLicenseRequest) {     String endpoint = new RequestConverters.EndpointBuilder().addPathPartAsIs("_license").build().     Request request = new Request(HttpDelete.METHOD_NAME, endpoint).     RequestConverters.Params parameters = new RequestConverters.Params(request).     parameters.withTimeout(deleteLicenseRequest.timeout()).     parameters.withMasterTimeout(deleteLicenseRequest.masterNodeTimeout()).     return request. }
false;static;1;11;;static Request startTrial(StartTrialRequest startTrialRequest) {     final String endpoint = new RequestConverters.EndpointBuilder().addPathPartAsIs("_license", "start_trial").build().     final Request request = new Request(HttpPost.METHOD_NAME, endpoint).     RequestConverters.Params parameters = new RequestConverters.Params(request).     parameters.putParam("acknowledge", Boolean.toString(startTrialRequest.isAcknowledge())).     if (startTrialRequest.getLicenseType() != null) {         parameters.putParam("type", startTrialRequest.getLicenseType()).     }     return request. }
false;static;1;13;;static Request startBasic(StartBasicRequest startBasicRequest) {     String endpoint = new RequestConverters.EndpointBuilder().addPathPartAsIs("_license", "start_basic").build().     Request request = new Request(HttpPost.METHOD_NAME, endpoint).     RequestConverters.Params parameters = new RequestConverters.Params(request).     parameters.withTimeout(startBasicRequest.timeout()).     parameters.withMasterTimeout(startBasicRequest.masterNodeTimeout()).     if (startBasicRequest.isAcknowledge()) {         parameters.putParam("acknowledge", "true").     }     return request. }
false;static;0;3;;static Request getLicenseTrialStatus() {     return new Request(HttpGet.METHOD_NAME, "/_license/trial_status"). }
false;static;0;3;;static Request getLicenseBasicStatus() {     return new Request(HttpGet.METHOD_NAME, "/_license/basic_status"). }
