commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static DeleteJobResponse fromXContent(XContentParser parser) throws IOException {     return PARSER.parse(parser, null). }
true;public;0;3;/**  * Get the action acknowledgement  * @return {@code null} when the request had {@link DeleteJobRequest#getWaitForCompletion()} set to {@code false} or  * otherwise a {@code boolean} that indicates whether the job was deleted successfully.  */ ;/**  * Get the action acknowledgement  * @return {@code null} when the request had {@link DeleteJobRequest#getWaitForCompletion()} set to {@code false} or  * otherwise a {@code boolean} that indicates whether the job was deleted successfully.  */ public Boolean getAcknowledged() {     return acknowledged. }
true;public;0;3;/**  * Get the task id  * @return {@code null} when the request had {@link DeleteJobRequest#getWaitForCompletion()} set to {@code true} or  * otherwise the id of the job deletion task.  */ ;/**  * Get the task id  * @return {@code null} when the request had {@link DeleteJobRequest#getWaitForCompletion()} set to {@code true} or  * otherwise the id of the job deletion task.  */ public TaskId getTask() {     return task. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(acknowledged, task). }
false;public;1;13;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     DeleteJobResponse that = (DeleteJobResponse) other.     return Objects.equals(acknowledged, that.acknowledged) && Objects.equals(task, that.task). }
false;public;2;12;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (acknowledged != null) {         builder.field(ACKNOWLEDGED.getPreferredName(), acknowledged).     }     if (task != null) {         builder.field(TASK.getPreferredName(), task.toString()).     }     builder.endObject().     return builder. }
