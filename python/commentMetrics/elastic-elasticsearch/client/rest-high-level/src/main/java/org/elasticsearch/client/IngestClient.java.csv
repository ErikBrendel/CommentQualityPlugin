commented;modifiers;parameterAmount;loc;comment;code
true;public;2;4;/**  * Add a pipeline or update an existing pipeline.  * See  * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/put-pipeline-api.html"> Put Pipeline API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Add a pipeline or update an existing pipeline.  * See  * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/put-pipeline-api.html"> Put Pipeline API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public AcknowledgedResponse putPipeline(PutPipelineRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, IngestRequestConverters::putPipeline, options, AcknowledgedResponse::fromXContent, emptySet()). }
true;public;3;4;/**  * Asynchronously add a pipeline or update an existing pipeline.  * See  * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/put-pipeline-api.html"> Put Pipeline API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously add a pipeline or update an existing pipeline.  * See  * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/put-pipeline-api.html"> Put Pipeline API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void putPipelineAsync(PutPipelineRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, IngestRequestConverters::putPipeline, options, AcknowledgedResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Get an existing pipeline.  * See  * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/get-pipeline-api.html"> Get Pipeline API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Get an existing pipeline.  * See  * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/get-pipeline-api.html"> Get Pipeline API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public GetPipelineResponse getPipeline(GetPipelineRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, IngestRequestConverters::getPipeline, options, GetPipelineResponse::fromXContent, Collections.singleton(404)). }
true;public;3;4;/**  * Asynchronously get an existing pipeline.  * See  * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/get-pipeline-api.html"> Get Pipeline API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously get an existing pipeline.  * See  * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/get-pipeline-api.html"> Get Pipeline API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void getPipelineAsync(GetPipelineRequest request, RequestOptions options, ActionListener<GetPipelineResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, IngestRequestConverters::getPipeline, options, GetPipelineResponse::fromXContent, listener, Collections.singleton(404)). }
true;public;2;4;/**  * Delete an existing pipeline.  * See  * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/delete-pipeline-api.html">  *     Delete Pipeline API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Delete an existing pipeline.  * See  * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/delete-pipeline-api.html">  *     Delete Pipeline API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public AcknowledgedResponse deletePipeline(DeletePipelineRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, IngestRequestConverters::deletePipeline, options, AcknowledgedResponse::fromXContent, emptySet()). }
true;public;3;4;/**  * Asynchronously delete an existing pipeline.  * See  * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/delete-pipeline-api.html">  *     Delete Pipeline API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously delete an existing pipeline.  * See  * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/delete-pipeline-api.html">  *     Delete Pipeline API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void deletePipelineAsync(DeletePipelineRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, IngestRequestConverters::deletePipeline, options, AcknowledgedResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Simulate a pipeline on a set of documents provided in the request  * <p>  * See  * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/simulate-pipeline-api.html">  *     Simulate Pipeline API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Simulate a pipeline on a set of documents provided in the request  * <p>  * See  * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/simulate-pipeline-api.html">  *     Simulate Pipeline API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public SimulatePipelineResponse simulate(SimulatePipelineRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, IngestRequestConverters::simulatePipeline, options, SimulatePipelineResponse::fromXContent, emptySet()). }
true;public;3;6;/**  * Asynchronously simulate a pipeline on a set of documents provided in the request  * <p>  * See  * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/simulate-pipeline-api.html">  *     Simulate Pipeline API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously simulate a pipeline on a set of documents provided in the request  * <p>  * See  * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/simulate-pipeline-api.html">  *     Simulate Pipeline API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void simulateAsync(SimulatePipelineRequest request, RequestOptions options, ActionListener<SimulatePipelineResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, IngestRequestConverters::simulatePipeline, options, SimulatePipelineResponse::fromXContent, listener, emptySet()). }
