commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * The unique identifier of the node.  */ ;/**  * The unique identifier of the node.  */ public String getId() {     return id. }
true;public;0;3;/**  * The node name.  */ ;/**  * The node name.  */ public String getName() {     return name. }
true;public;0;3;/**  * The ephemeral id of the node.  */ ;/**  * The ephemeral id of the node.  */ public String getEphemeralId() {     return ephemeralId. }
true;public;0;3;/**  * The host and port where transport HTTP connections are accepted.  */ ;/**  * The host and port where transport HTTP connections are accepted.  */ public String getTransportAddress() {     return transportAddress. }
true;public;0;3;/**  * Additional attributes related to this node e.g., {"ml.max_open_jobs": "10"}.  */ ;/**  * Additional attributes related to this node e.g., {"ml.max_open_jobs": "10"}.  */ public Map<String, String> getAttributes() {     return attributes. }
false;public;2;11;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(ID.getPreferredName(), id).     builder.field(NAME.getPreferredName(), name).     builder.field(EPHEMERAL_ID.getPreferredName(), ephemeralId).     builder.field(TRANSPORT_ADDRESS.getPreferredName(), transportAddress).     builder.field(ATTRIBUTES.getPreferredName(), attributes).     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(id, name, ephemeralId, transportAddress, attributes). }
false;public;1;17;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     NodeAttributes that = (NodeAttributes) other.     return Objects.equals(id, that.id) && Objects.equals(name, that.name) && Objects.equals(ephemeralId, that.ephemeralId) && Objects.equals(transportAddress, that.transportAddress) && Objects.equals(attributes, that.attributes). }
