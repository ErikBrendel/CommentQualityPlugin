commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * @return true if the top level value of the source is a map  */ ;/**  * @return true if the top level value of the source is a map  */ public boolean isMap() {     return data instanceof Map. }
true;public;0;4;/**  * @return The source as a map  */ ;/**  * @return The source as a map  */ @SuppressWarnings("unchecked") public Map<String, Object> getAsMap() {     return (Map<String, Object>) data. }
true;public;0;3;/**  * @return true if the top level value of the source is a list  */ ;/**  * @return true if the top level value of the source is a list  */ public boolean isList() {     return data instanceof List. }
true;public;0;4;/**  * @return The source as a list  */ ;/**  * @return The source as a list  */ @SuppressWarnings("unchecked") public List<Object> getAsList() {     return (List<Object>) data. }
true;public;1;4;/**  * Extracts a value identified by the given path in the source.  *  * @param path a dot notation path to the requested value  * @return The extracted value or {@code null} if no value is associated with the given path  */ ;/**  * Extracts a value identified by the given path in the source.  *  * @param path a dot notation path to the requested value  * @return The extracted value or {@code null} if no value is associated with the given path  */ @SuppressWarnings("unchecked") public <T> T getValue(String path) {     return (T) ObjectPath.eval(path, data). }
