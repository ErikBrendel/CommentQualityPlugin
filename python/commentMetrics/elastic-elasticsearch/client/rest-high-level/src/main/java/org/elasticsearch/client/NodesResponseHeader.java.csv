commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;3;;public static NodesResponseHeader fromXContent(XContentParser parser, Void context) throws IOException {     return PARSER.parse(parser, context). }
true;public;0;3;/**  * the total number of nodes that the operation was carried on  */ ;/**  * the total number of nodes that the operation was carried on  */ public int getTotal() {     return total. }
true;public;0;3;/**  * the number of nodes that the operation has failed on  */ ;/**  * the number of nodes that the operation has failed on  */ public int getFailed() {     return failed. }
true;public;0;3;/**  * the number of nodes that the operation was successful on  */ ;/**  * the number of nodes that the operation was successful on  */ public int getSuccessful() {     return successful. }
true;public;0;3;/**  * Get the failed node exceptions.  *  * @return Never {@code null}. Can be empty.  */ ;/**  * Get the failed node exceptions.  *  * @return Never {@code null}. Can be empty.  */ public List<ElasticsearchException> getFailures() {     return failures. }
true;public;0;3;/**  * Determine if there are any node failures in {@link #failures}.  *  * @return {@code true} if {@link #failures} contains at least 1 exception.  */ ;/**  * Determine if there are any node failures in {@link #failures}.  *  * @return {@code true} if {@link #failures} contains at least 1 exception.  */ public boolean hasFailures() {     return failures.isEmpty() == false. }
false;public;1;14;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     NodesResponseHeader that = (NodesResponseHeader) o.     return total == that.total && successful == that.successful && failed == that.failed && Objects.equals(failures, that.failures). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(total, successful, failed, failures). }
