commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getCalendarId() {     return calendarId. }
false;public;0;3;;public PageParams getPageParams() {     return pageParams. }
true;public;1;3;/**  * The paging parameters for the gathered ScheduledEvents  * @param pageParams The desired paging params  */ ;/**  * The paging parameters for the gathered ScheduledEvents  * @param pageParams The desired paging params  */ public void setPageParams(PageParams pageParams) {     this.pageParams = pageParams. }
false;public;0;3;;public String getStart() {     return start. }
true;public;1;3;/**  * Specifies to get events with timestamps after this time.  *  * @param start String representation of a timestamp. may be an epoch seconds, epoch millis or an ISO string  */ ;/**  * Specifies to get events with timestamps after this time.  *  * @param start String representation of a timestamp. may be an epoch seconds, epoch millis or an ISO string  */ public void setStart(String start) {     this.start = start. }
false;public;0;3;;public String getEnd() {     return end. }
true;public;1;3;/**  * Specifies to get events with timestamps earlier than this time.  *  * @param end String representation of a timestamp. may be an epoch seconds, epoch millis or an ISO string  */ ;/**  * Specifies to get events with timestamps earlier than this time.  *  * @param end String representation of a timestamp. may be an epoch seconds, epoch millis or an ISO string  */ public void setEnd(String end) {     this.end = end. }
false;public;0;3;;public String getJobId() {     return jobId. }
true;public;1;3;/**  * The jobId for which to get the ScheduledEvents. When this option is used calendarId must be `_all`  * @param jobId The job for which to get the events.  */ ;/**  * The jobId for which to get the ScheduledEvents. When this option is used calendarId must be `_all`  * @param jobId The job for which to get the events.  */ public void setJobId(String jobId) {     this.jobId = jobId. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;2;19;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Calendar.ID.getPreferredName(), calendarId).     if (start != null) {         builder.field(START.getPreferredName(), start).     }     if (end != null) {         builder.field(END.getPreferredName(), end).     }     if (jobId != null) {         builder.field(Job.ID.getPreferredName(), jobId).     }     if (pageParams != null) {         builder.field(PageParams.PAGE.getPreferredName(), pageParams).     }     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(calendarId, start, end, jobId, pageParams). }
false;public;1;15;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     GetCalendarEventsRequest other = (GetCalendarEventsRequest) obj.     return Objects.equals(calendarId, other.calendarId) && Objects.equals(pageParams, other.pageParams) && Objects.equals(start, other.start) && Objects.equals(end, other.end) && Objects.equals(jobId, other.jobId). }
