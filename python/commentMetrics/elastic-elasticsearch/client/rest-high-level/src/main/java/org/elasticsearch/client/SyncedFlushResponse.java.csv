commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * @return The total number of shard copies that were processed across all indexes  */ ;/**  * @return The total number of shard copies that were processed across all indexes  */ public int totalShards() {     return totalCounts.total. }
true;public;0;3;/**  * @return The number of successful shard copies that were processed across all indexes  */ ;/**  * @return The number of successful shard copies that were processed across all indexes  */ public int successfulShards() {     return totalCounts.successful. }
true;public;0;3;/**  * @return The number of failed shard copies that were processed across all indexes  */ ;/**  * @return The number of failed shard copies that were processed across all indexes  */ public int failedShards() {     return totalCounts.failed. }
true;public;0;3;/**  * @return A map of results for each index where the keys of the map are the index names  *          and the values are the results encapsulated in {@link IndexResult}.  */ ;/**  * @return A map of results for each index where the keys of the map are the index names  *          and the values are the results encapsulated in {@link IndexResult}.  */ public Map<String, IndexResult> getIndexResults() {     return indexResults. }
false;;0;3;;ShardCounts getShardCounts() {     return totalCounts. }
false;public;2;16;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.startObject(SHARDS_FIELD).     totalCounts.toXContent(builder, params).     builder.endObject().     for (Map.Entry<String, IndexResult> entry : indexResults.entrySet()) {         String indexName = entry.getKey().         IndexResult indexResult = entry.getValue().         builder.startObject(indexName).         indexResult.toXContent(builder, params).         builder.endObject().     }     builder.endObject().     return builder. }
false;public,static;1;24;;public static SyncedFlushResponse fromXContent(XContentParser parser) throws IOException {     ensureExpectedToken(Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation).     ShardCounts totalCounts = null.     Map<String, IndexResult> indexResults = new HashMap<>().     XContentLocation startLoc = parser.getTokenLocation().     while (parser.nextToken().equals(Token.FIELD_NAME)) {         if (parser.currentName().equals(SHARDS_FIELD)) {             ensureExpectedToken(Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation).             totalCounts = ShardCounts.fromXContent(parser).         } else {             String indexName = parser.currentName().             IndexResult indexResult = IndexResult.fromXContent(parser).             indexResults.put(indexName, indexResult).         }     }     if (totalCounts != null) {         return new SyncedFlushResponse(totalCounts, indexResults).     } else {         throw new ParsingException(startLoc, "Unable to reconstruct object. Total counts for shards couldn't be parsed.").     } }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.field(TOTAL_FIELD, total).     builder.field(SUCCESSFUL_FIELD, successful).     builder.field(FAILED_FIELD, failed).     return builder. }
false;public,static;1;3;;public static ShardCounts fromXContent(XContentParser parser) throws IOException {     return PARSER.parse(parser, null). }
false;public;1;10;;public boolean equals(ShardCounts other) {     if (other != null) {         return other.total == this.total && other.successful == this.successful && other.failed == this.failed.     } else {         return false.     } }
true;public;0;3;/**  * @return The total number of shard copies that were processed for this index.  */ ;/**  * @return The total number of shard copies that were processed for this index.  */ public int totalShards() {     return counts.total. }
true;public;0;3;/**  * @return The number of successful shard copies that were processed for this index.  */ ;/**  * @return The number of successful shard copies that were processed for this index.  */ public int successfulShards() {     return counts.successful. }
true;public;0;3;/**  * @return The number of failed shard copies that were processed for this index.  */ ;/**  * @return The number of failed shard copies that were processed for this index.  */ public int failedShards() {     return counts.failed. }
true;public;0;3;/**  * @return A list of {@link ShardFailure} objects that describe each of the failed shard copies for this index.  */ ;/**  * @return A list of {@link ShardFailure} objects that describe each of the failed shard copies for this index.  */ public List<ShardFailure> failures() {     return failures. }
false;;0;3;;ShardCounts getShardCounts() {     return counts. }
false;public;2;12;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     counts.toXContent(builder, params).     if (failures.size() > 0) {         builder.startArray(FAILURES_FIELD).         for (ShardFailure failure : failures) {             failure.toXContent(builder, params).         }         builder.endArray().     }     return builder. }
false;public,static;1;3;;public static IndexResult fromXContent(XContentParser parser) throws IOException {     return PARSER.parse(parser, null). }
true;public;0;3;/**  * @return Id of the shard whose copy failed  */ ;/**  * @return Id of the shard whose copy failed  */ public int getShardId() {     return shardId. }
true;public;0;3;/**  * @return Reason for failure of the shard copy  */ ;/**  * @return Reason for failure of the shard copy  */ public String getFailureReason() {     return failureReason. }
true;public;0;3;/**  * @return Additional information about the failure.  */ ;/**  * @return Additional information about the failure.  */ public Map<String, Object> getRouting() {     return routing. }
false;public;2;11;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(SHARD_ID_FIELD, shardId).     builder.field(FAILURE_REASON_FIELD, failureReason).     if (routing.size() > 0) {         builder.field(ROUTING_FIELD, routing).     }     builder.endObject().     return builder. }
false;public,static;1;3;;public static ShardFailure fromXContent(XContentParser parser) throws IOException {     return PARSER.parse(parser, null). }
