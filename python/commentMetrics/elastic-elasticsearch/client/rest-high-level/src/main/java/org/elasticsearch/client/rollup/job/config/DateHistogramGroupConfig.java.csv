commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Override public Optional<ValidationException> validate() {     final ValidationException validationException = new ValidationException().     if (field == null || field.isEmpty()) {         validationException.addValidationError("Field name is required").     }     if (interval == null) {         validationException.addValidationError("Interval is required").     }     if (validationException.validationErrors().isEmpty()) {         return Optional.empty().     }     return Optional.of(validationException). }
true;public;0;3;/**  * Get the date field  */ ;/**  * Get the date field  */ public String getField() {     return field. }
true;public;0;3;/**  * Get the date interval  */ ;/**  * Get the date interval  */ public DateHistogramInterval getInterval() {     return interval. }
true;public;0;3;/**  * Get the time delay for this histogram  */ ;/**  * Get the time delay for this histogram  */ public DateHistogramInterval getDelay() {     return delay. }
true;public;0;3;/**  * Get the timezone to apply  */ ;/**  * Get the timezone to apply  */ public String getTimeZone() {     return timeZone. }
false;public;2;13;;@Override public XContentBuilder toXContent(final XContentBuilder builder, final Params params) throws IOException {     builder.startObject().     {         builder.field(INTERVAL, interval.toString()).         builder.field(FIELD, field).         if (delay != null) {             builder.field(DELAY, delay.toString()).         }         builder.field(TIME_ZONE, timeZone).     }     return builder.endObject(). }
false;public;1;14;;@Override public boolean equals(final Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     final DateHistogramGroupConfig that = (DateHistogramGroupConfig) other.     return Objects.equals(interval, that.interval) && Objects.equals(field, that.field) && Objects.equals(delay, that.delay) && Objects.equals(timeZone, that.timeZone). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(interval, field, delay, timeZone). }
false;public,static;1;3;;public static DateHistogramGroupConfig fromXContent(final XContentParser parser) throws IOException {     return PARSER.parse(parser, null). }
