commented;modifiers;parameterAmount;loc;comment;code
true;public,static;4;3;/**  * Create or update a user in the native realm, with the user's new or updated password specified in plaintext.  * @param user the user to be created or updated  * @param password the password of the user. The password array is not modified by this class.  *                 It is the responsibility of the caller to clear the password after receiving  *                 a response.  * @param enabled true if the user is enabled and allowed to access elasticsearch  * @param refreshPolicy the refresh policy for the request.  */ ;/**  * Create or update a user in the native realm, with the user's new or updated password specified in plaintext.  * @param user the user to be created or updated  * @param password the password of the user. The password array is not modified by this class.  *                 It is the responsibility of the caller to clear the password after receiving  *                 a response.  * @param enabled true if the user is enabled and allowed to access elasticsearch  * @param refreshPolicy the refresh policy for the request.  */ public static PutUserRequest withPassword(User user, char[] password, boolean enabled, RefreshPolicy refreshPolicy) {     return new PutUserRequest(user, password, null, enabled, refreshPolicy). }
true;public,static;4;3;/**  * Create or update a user in the native realm, with the user's new or updated password specified as a cryptographic hash.  * @param user the user to be created or updated  * @param passwordHash the hash of the password of the user. It must be in the correct format for the password hashing algorithm in  *                     use on this elasticsearch cluster. The array is not modified by this class.  *                     It is the responsibility of the caller to clear the hash after receiving a response.  * @param enabled true if the user is enabled and allowed to access elasticsearch  * @param refreshPolicy the refresh policy for the request.  */ ;/**  * Create or update a user in the native realm, with the user's new or updated password specified as a cryptographic hash.  * @param user the user to be created or updated  * @param passwordHash the hash of the password of the user. It must be in the correct format for the password hashing algorithm in  *                     use on this elasticsearch cluster. The array is not modified by this class.  *                     It is the responsibility of the caller to clear the hash after receiving a response.  * @param enabled true if the user is enabled and allowed to access elasticsearch  * @param refreshPolicy the refresh policy for the request.  */ public static PutUserRequest withPasswordHash(User user, char[] passwordHash, boolean enabled, RefreshPolicy refreshPolicy) {     return new PutUserRequest(user, null, passwordHash, enabled, refreshPolicy). }
true;public,static;3;3;/**  * Update an existing user in the native realm without modifying their password.  * @param user the user to be created or updated  * @param enabled true if the user is enabled and allowed to access elasticsearch  * @param refreshPolicy the refresh policy for the request.  */ ;/**  * Update an existing user in the native realm without modifying their password.  * @param user the user to be created or updated  * @param enabled true if the user is enabled and allowed to access elasticsearch  * @param refreshPolicy the refresh policy for the request.  */ public static PutUserRequest updateUser(User user, boolean enabled, RefreshPolicy refreshPolicy) {     return new PutUserRequest(user, null, null, enabled, refreshPolicy). }
false;public;0;3;;public User getUser() {     return user. }
false;public;0;3;;@Nullable public char[] getPassword() {     return password. }
false;public;0;3;;public boolean isEnabled() {     return enabled. }
false;public;0;3;;public RefreshPolicy getRefreshPolicy() {     return refreshPolicy. }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     final PutUserRequest that = (PutUserRequest) o.     return Objects.equals(user, that.user) && Arrays.equals(password, that.password) && Arrays.equals(passwordHash, that.passwordHash) && enabled == that.enabled && refreshPolicy == that.refreshPolicy. }
false;public;0;7;;@Override public int hashCode() {     int result = Objects.hash(user, enabled, refreshPolicy).     result = 31 * result + Arrays.hashCode(password).     result = 31 * result + Arrays.hashCode(passwordHash).     return result. }
false;public;0;9;;@Override public Optional<ValidationException> validate() {     if (user.getMetadata() != null && user.getMetadata().keySet().stream().anyMatch(s -> s.startsWith("_"))) {         ValidationException validationException = new ValidationException().         validationException.addValidationError("user metadata keys may not start with [_]").         return Optional.of(validationException).     }     return Optional.empty(). }
false;public;2;21;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field("username", user.getUsername()).     if (password != null) {         charField(builder, "password", password).     }     if (passwordHash != null) {         charField(builder, "password_hash", passwordHash).     }     builder.field("roles", user.getRoles()).     if (user.getFullName() != null) {         builder.field("full_name", user.getFullName()).     }     if (user.getEmail() != null) {         builder.field("email", user.getEmail()).     }     builder.field("metadata", user.getMetadata()).     builder.field("enabled", enabled).     return builder.endObject(). }
false;private;3;8;;private void charField(XContentBuilder builder, String fieldName, char[] chars) throws IOException {     byte[] charBytes = CharArrays.toUtf8Bytes(chars).     try {         builder.field(fieldName).utf8Value(charBytes, 0, charBytes.length).     } finally {         Arrays.fill(charBytes, (byte) 0).     } }
