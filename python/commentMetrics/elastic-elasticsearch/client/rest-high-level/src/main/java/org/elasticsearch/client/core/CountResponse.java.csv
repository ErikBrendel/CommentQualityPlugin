commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public ShardStats getShardStats() {     return shardStats. }
true;public;0;3;/**  * Number of documents matching request.  */ ;/**  * Number of documents matching request.  */ public long getCount() {     return count. }
true;public;0;3;/**  * The total number of shards the search was executed on.  */ ;/**  * The total number of shards the search was executed on.  */ public int getTotalShards() {     return shardStats.totalShards. }
true;public;0;3;/**  * The successful number of shards the search was executed on.  */ ;/**  * The successful number of shards the search was executed on.  */ public int getSuccessfulShards() {     return shardStats.successfulShards. }
true;public;0;3;/**  * The number of shards skipped due to pre-filtering  */ ;/**  * The number of shards skipped due to pre-filtering  */ public int getSkippedShards() {     return shardStats.skippedShards. }
true;public;0;3;/**  * The failed number of shards the search was executed on.  */ ;/**  * The failed number of shards the search was executed on.  */ public int getFailedShards() {     return shardStats.shardFailures.length. }
true;public;0;3;/**  * The failures that occurred during the search.  */ ;/**  * The failures that occurred during the search.  */ public ShardSearchFailure[] getShardFailures() {     return shardStats.shardFailures. }
false;public;0;3;;public RestStatus status() {     return RestStatus.status(shardStats.successfulShards, shardStats.totalShards, shardStats.shardFailures). }
false;public,static;1;30;;public static CountResponse fromXContent(XContentParser parser) throws IOException {     ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation).     parser.nextToken().     ensureExpectedToken(XContentParser.Token.FIELD_NAME, parser.currentToken(), parser::getTokenLocation).     String currentName = parser.currentName().     Boolean terminatedEarly = null.     long count = 0.     ShardStats shardStats = new ShardStats(-1, -1, 0, ShardSearchFailure.EMPTY_ARRAY).     for (XContentParser.Token token = parser.nextToken(). token != XContentParser.Token.END_OBJECT. token = parser.nextToken()) {         if (token == XContentParser.Token.FIELD_NAME) {             currentName = parser.currentName().         } else if (token.isValue()) {             if (COUNT.match(currentName, parser.getDeprecationHandler())) {                 count = parser.longValue().             } else if (TERMINATED_EARLY.match(currentName, parser.getDeprecationHandler())) {                 terminatedEarly = parser.booleanValue().             } else {                 parser.skipChildren().             }         } else if (token == XContentParser.Token.START_OBJECT) {             if (SHARDS.match(currentName, parser.getDeprecationHandler())) {                 shardStats = ShardStats.fromXContent(parser).             } else {                 parser.skipChildren().             }         }     }     return new CountResponse(count, terminatedEarly, shardStats). }
false;public;0;9;;@Override public String toString() {     String s = "{" + "count=" + count + (isTerminatedEarly() != null ? ", terminatedEarly=" + terminatedEarly : "") + ", " + shardStats + '}'.     return s. }
false;public;0;3;;public Boolean isTerminatedEarly() {     return terminatedEarly. }
false;public;0;3;;public int getSuccessfulShards() {     return successfulShards. }
false;public;0;3;;public int getTotalShards() {     return totalShards. }
false;public;0;3;;public int getSkippedShards() {     return skippedShards. }
false;public;0;3;;public ShardSearchFailure[] getShardFailures() {     return Arrays.copyOf(shardFailures, shardFailures.length, ShardSearchFailure[].class). }
false;static;1;36;;static ShardStats fromXContent(XContentParser parser) throws IOException {     int successfulShards = -1.     int totalShards = -1.     // BWC @see org.elasticsearch.action.search.SearchResponse     int skippedShards = 0.     List<ShardSearchFailure> failures = new ArrayList<>().     XContentParser.Token token.     String currentName = parser.currentName().     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentName = parser.currentName().         } else if (token.isValue()) {             if (FAILED.match(currentName, parser.getDeprecationHandler())) {                 parser.intValue().             } else if (SKIPPED.match(currentName, parser.getDeprecationHandler())) {                 skippedShards = parser.intValue().             } else if (TOTAL.match(currentName, parser.getDeprecationHandler())) {                 totalShards = parser.intValue().             } else if (SUCCESSFUL.match(currentName, parser.getDeprecationHandler())) {                 successfulShards = parser.intValue().             } else {                 parser.skipChildren().             }         } else if (token == XContentParser.Token.START_ARRAY) {             if (FAILURES.match(currentName, parser.getDeprecationHandler())) {                 while ((parser.nextToken()) != XContentParser.Token.END_ARRAY) {                     failures.add(ShardSearchFailure.fromXContent(parser)).                 }             } else {                 parser.skipChildren().             }         } else {             parser.skipChildren().         }     }     return new ShardStats(successfulShards, totalShards, skippedShards, failures.toArray(new ShardSearchFailure[failures.size()])). }
false;public;0;10;;@Override public String toString() {     return "_shards : {" + "total=" + totalShards + ", successful=" + successfulShards + ", skipped=" + skippedShards + ", failed=" + (shardFailures != null && shardFailures.length > 0 ? shardFailures.length : 0) + (shardFailures != null && shardFailures.length > 0 ? ", failures: " + Arrays.asList(shardFailures) : "") + '}'. }
