commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Explicitly close all jobs  *  * @return a {@link CloseJobRequest} for all existing jobs  */ ;/**  * Explicitly close all jobs  *  * @return a {@link CloseJobRequest} for all existing jobs  */ public static CloseJobRequest closeAllJobsRequest() {     return new CloseJobRequest(ALL_JOBS). }
true;public;0;3;/**  * All the jobIds to be closed  */ ;/**  * All the jobIds to be closed  */ public List<String> getJobIds() {     return jobIds. }
false;public;0;3;;public TimeValue getTimeout() {     return timeout. }
true;public;1;3;/**  * How long to wait for the close request to complete before timing out.  *  * @param timeout Default value: 30 minutes  */ ;/**  * How long to wait for the close request to complete before timing out.  *  * @param timeout Default value: 30 minutes  */ public void setTimeout(TimeValue timeout) {     this.timeout = timeout. }
false;public;0;3;;public Boolean getForce() {     return force. }
true;public;1;3;/**  * Should the closing be forced.  *  * Use to close a failed job, or to forcefully close a job which has not responded to its initial close request.  *  * @param force When {@code true} forcefully close the job. Defaults to {@code false}  */ ;/**  * Should the closing be forced.  *  * Use to close a failed job, or to forcefully close a job which has not responded to its initial close request.  *  * @param force When {@code true} forcefully close the job. Defaults to {@code false}  */ public void setForce(boolean force) {     this.force = force. }
false;public;0;3;;public Boolean getAllowNoJobs() {     return this.allowNoJobs. }
true;public;1;3;/**  * Whether to ignore if a wildcard expression matches no jobs.  *  * This includes {@code _all} string or when no jobs have been specified  *  * @param allowNoJobs When {@code true} ignore if wildcard or {@code _all} matches no jobs. Defaults to {@code true}  */ ;/**  * Whether to ignore if a wildcard expression matches no jobs.  *  * This includes {@code _all} string or when no jobs have been specified  *  * @param allowNoJobs When {@code true} ignore if wildcard or {@code _all} matches no jobs. Defaults to {@code true}  */ public void setAllowNoJobs(boolean allowNoJobs) {     this.allowNoJobs = allowNoJobs. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobIds, timeout, force, allowNoJobs). }
false;public;1;16;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     CloseJobRequest that = (CloseJobRequest) other.     return Objects.equals(jobIds, that.jobIds) && Objects.equals(timeout, that.timeout) && Objects.equals(force, that.force) && Objects.equals(allowNoJobs, that.allowNoJobs). }
false;public;2;16;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(JOB_ID.getPreferredName(), Strings.collectionToCommaDelimitedString(jobIds)).     if (timeout != null) {         builder.field(TIMEOUT.getPreferredName(), timeout.getStringRep()).     }     if (force != null) {         builder.field(FORCE.getPreferredName(), force).     }     if (allowNoJobs != null) {         builder.field(ALLOW_NO_JOBS.getPreferredName(), allowNoJobs).     }     builder.endObject().     return builder. }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this). }
