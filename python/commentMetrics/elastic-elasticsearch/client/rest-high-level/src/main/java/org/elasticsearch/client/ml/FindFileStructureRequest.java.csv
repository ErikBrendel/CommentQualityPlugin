commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Integer getLinesToSample() {     return linesToSample. }
false;public;1;3;;public void setLinesToSample(Integer linesToSample) {     this.linesToSample = linesToSample. }
false;public;0;3;;public TimeValue getTimeout() {     return timeout. }
false;public;1;3;;public void setTimeout(TimeValue timeout) {     this.timeout = timeout. }
false;public;0;3;;public String getCharset() {     return charset. }
false;public;1;3;;public void setCharset(String charset) {     this.charset = (charset == null || charset.isEmpty()) ? null : charset. }
false;public;0;3;;public FileStructure.Format getFormat() {     return format. }
false;public;1;3;;public void setFormat(FileStructure.Format format) {     this.format = format. }
false;public;1;3;;public void setFormat(String format) {     this.format = (format == null || format.isEmpty()) ? null : FileStructure.Format.fromString(format). }
false;public;0;3;;public List<String> getColumnNames() {     return columnNames. }
false;public;1;3;;public void setColumnNames(List<String> columnNames) {     this.columnNames = (columnNames == null || columnNames.isEmpty()) ? null : columnNames. }
false;public;1;3;;public void setColumnNames(String[] columnNames) {     this.columnNames = (columnNames == null || columnNames.length == 0) ? null : Arrays.asList(columnNames). }
false;public;0;3;;public Boolean getHasHeaderRow() {     return hasHeaderRow. }
false;public;1;3;;public void setHasHeaderRow(Boolean hasHeaderRow) {     this.hasHeaderRow = hasHeaderRow. }
false;public;0;3;;public Character getDelimiter() {     return delimiter. }
false;public;1;3;;public void setDelimiter(Character delimiter) {     this.delimiter = delimiter. }
false;public;1;9;;public void setDelimiter(String delimiter) {     if (delimiter == null || delimiter.isEmpty()) {         this.delimiter = null.     } else if (delimiter.length() == 1) {         this.delimiter = delimiter.charAt(0).     } else {         throw new IllegalArgumentException(DELIMITER.getPreferredName() + " must be a single character").     } }
false;public;0;3;;public Character getQuote() {     return quote. }
false;public;1;3;;public void setQuote(Character quote) {     this.quote = quote. }
false;public;1;9;;public void setQuote(String quote) {     if (quote == null || quote.isEmpty()) {         this.quote = null.     } else if (quote.length() == 1) {         this.quote = quote.charAt(0).     } else {         throw new IllegalArgumentException(QUOTE.getPreferredName() + " must be a single character").     } }
false;public;0;3;;public Boolean getShouldTrimFields() {     return shouldTrimFields. }
false;public;1;3;;public void setShouldTrimFields(Boolean shouldTrimFields) {     this.shouldTrimFields = shouldTrimFields. }
false;public;0;3;;public String getGrokPattern() {     return grokPattern. }
false;public;1;3;;public void setGrokPattern(String grokPattern) {     this.grokPattern = (grokPattern == null || grokPattern.isEmpty()) ? null : grokPattern. }
false;public;0;3;;public String getTimestampFormat() {     return timestampFormat. }
false;public;1;3;;public void setTimestampFormat(String timestampFormat) {     this.timestampFormat = (timestampFormat == null || timestampFormat.isEmpty()) ? null : timestampFormat. }
false;public;0;3;;public String getTimestampField() {     return timestampField. }
false;public;1;3;;public void setTimestampField(String timestampField) {     this.timestampField = (timestampField == null || timestampField.isEmpty()) ? null : timestampField. }
false;public;0;3;;public Boolean getExplain() {     return explain. }
false;public;1;3;;public void setExplain(Boolean explain) {     this.explain = explain. }
false;public;0;3;;public BytesReference getSample() {     return sample. }
false;public;1;3;;public void setSample(byte[] sample) {     this.sample = new BytesArray(sample). }
false;public;1;3;;public void setSample(BytesReference sample) {     this.sample = Objects.requireNonNull(sample). }
false;public;0;8;;@Override public Optional<ValidationException> validate() {     ValidationException validationException = new ValidationException().     if (sample == null || sample.length() == 0) {         validationException.addValidationError("sample must be specified").     }     return validationException.validationErrors().isEmpty() ? Optional.empty() : Optional.of(validationException). }
false;public;2;45;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     if (linesToSample != null) {         builder.field(LINES_TO_SAMPLE.getPreferredName(), linesToSample).     }     if (timeout != null) {         builder.field(TIMEOUT.getPreferredName(), timeout).     }     if (charset != null) {         builder.field(CHARSET.getPreferredName(), charset).     }     if (format != null) {         builder.field(FORMAT.getPreferredName(), format).     }     if (columnNames != null) {         builder.field(COLUMN_NAMES.getPreferredName(), columnNames).     }     if (hasHeaderRow != null) {         builder.field(HAS_HEADER_ROW.getPreferredName(), hasHeaderRow).     }     if (delimiter != null) {         builder.field(DELIMITER.getPreferredName(), delimiter.toString()).     }     if (quote != null) {         builder.field(QUOTE.getPreferredName(), quote.toString()).     }     if (shouldTrimFields != null) {         builder.field(SHOULD_TRIM_FIELDS.getPreferredName(), shouldTrimFields).     }     if (grokPattern != null) {         builder.field(GROK_PATTERN.getPreferredName(), grokPattern).     }     if (timestampFormat != null) {         builder.field(TIMESTAMP_FORMAT.getPreferredName(), timestampFormat).     }     if (timestampField != null) {         builder.field(TIMESTAMP_FIELD.getPreferredName(), timestampField).     }     if (explain != null) {         builder.field(EXPLAIN.getPreferredName(), explain).     }     // Sample is not included in the X-Content representation     return builder. }
false;public;0;5;;@Override public int hashCode() {     return Objects.hash(linesToSample, timeout, charset, format, columnNames, hasHeaderRow, delimiter, grokPattern, timestampFormat, timestampField, explain, sample). }
false;public;1;25;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     FindFileStructureRequest that = (FindFileStructureRequest) other.     return Objects.equals(this.linesToSample, that.linesToSample) && Objects.equals(this.timeout, that.timeout) && Objects.equals(this.charset, that.charset) && Objects.equals(this.format, that.format) && Objects.equals(this.columnNames, that.columnNames) && Objects.equals(this.hasHeaderRow, that.hasHeaderRow) && Objects.equals(this.delimiter, that.delimiter) && Objects.equals(this.grokPattern, that.grokPattern) && Objects.equals(this.timestampFormat, that.timestampFormat) && Objects.equals(this.timestampField, that.timestampField) && Objects.equals(this.explain, that.explain) && Objects.equals(this.sample, that.sample). }
