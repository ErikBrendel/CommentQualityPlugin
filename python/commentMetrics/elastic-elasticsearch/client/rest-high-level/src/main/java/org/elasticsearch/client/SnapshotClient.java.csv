commented;modifiers;parameterAmount;loc;comment;code
true;public;2;5;/**  * Gets a list of snapshot repositories. If the list of repositories is empty or it contains a single element "_all", all  * registered repositories are returned.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  * @param getRepositoriesRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Gets a list of snapshot repositories. If the list of repositories is empty or it contains a single element "_all", all  * registered repositories are returned.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  * @param getRepositoriesRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public GetRepositoriesResponse getRepository(GetRepositoriesRequest getRepositoriesRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(getRepositoriesRequest, SnapshotRequestConverters::getRepositories, options, GetRepositoriesResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously gets a list of snapshot repositories. If the list of repositories is empty or it contains a single element "_all", all  * registered repositories are returned.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  * @param getRepositoriesRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously gets a list of snapshot repositories. If the list of repositories is empty or it contains a single element "_all", all  * registered repositories are returned.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  * @param getRepositoriesRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void getRepositoryAsync(GetRepositoriesRequest getRepositoriesRequest, RequestOptions options, ActionListener<GetRepositoriesResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(getRepositoriesRequest, SnapshotRequestConverters::getRepositories, options, GetRepositoriesResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Creates a snapshot repository.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  * @param putRepositoryRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Creates a snapshot repository.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  * @param putRepositoryRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public AcknowledgedResponse createRepository(PutRepositoryRequest putRepositoryRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(putRepositoryRequest, SnapshotRequestConverters::createRepository, options, AcknowledgedResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously creates a snapshot repository.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  * @param putRepositoryRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously creates a snapshot repository.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  * @param putRepositoryRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void createRepositoryAsync(PutRepositoryRequest putRepositoryRequest, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(putRepositoryRequest, SnapshotRequestConverters::createRepository, options, AcknowledgedResponse::fromXContent, listener, emptySet()). }
true;public;2;5;/**  * Deletes a snapshot repository.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  * @param deleteRepositoryRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Deletes a snapshot repository.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  * @param deleteRepositoryRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public AcknowledgedResponse deleteRepository(DeleteRepositoryRequest deleteRepositoryRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(deleteRepositoryRequest, SnapshotRequestConverters::deleteRepository, options, AcknowledgedResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously deletes a snapshot repository.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  * @param deleteRepositoryRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously deletes a snapshot repository.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  * @param deleteRepositoryRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void deleteRepositoryAsync(DeleteRepositoryRequest deleteRepositoryRequest, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(deleteRepositoryRequest, SnapshotRequestConverters::deleteRepository, options, AcknowledgedResponse::fromXContent, listener, emptySet()). }
true;public;2;5;/**  * Verifies a snapshot repository.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  * @param verifyRepositoryRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Verifies a snapshot repository.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  * @param verifyRepositoryRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public VerifyRepositoryResponse verifyRepository(VerifyRepositoryRequest verifyRepositoryRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(verifyRepositoryRequest, SnapshotRequestConverters::verifyRepository, options, VerifyRepositoryResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously verifies a snapshot repository.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  * @param verifyRepositoryRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously verifies a snapshot repository.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  * @param verifyRepositoryRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void verifyRepositoryAsync(VerifyRepositoryRequest verifyRepositoryRequest, RequestOptions options, ActionListener<VerifyRepositoryResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(verifyRepositoryRequest, SnapshotRequestConverters::verifyRepository, options, VerifyRepositoryResponse::fromXContent, listener, emptySet()). }
true;public;2;5;/**  * Creates a snapshot.  * <p>  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  */ ;/**  * Creates a snapshot.  * <p>  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  */ public CreateSnapshotResponse create(CreateSnapshotRequest createSnapshotRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(createSnapshotRequest, SnapshotRequestConverters::createSnapshot, options, CreateSnapshotResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously creates a snapshot.  * <p>  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  */ ;/**  * Asynchronously creates a snapshot.  * <p>  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  */ public void createAsync(CreateSnapshotRequest createSnapshotRequest, RequestOptions options, ActionListener<CreateSnapshotResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(createSnapshotRequest, SnapshotRequestConverters::createSnapshot, options, CreateSnapshotResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Get snapshots.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  *  * @param getSnapshotsRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Get snapshots.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  *  * @param getSnapshotsRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public GetSnapshotsResponse get(GetSnapshotsRequest getSnapshotsRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(getSnapshotsRequest, SnapshotRequestConverters::getSnapshots, options, GetSnapshotsResponse::fromXContent, emptySet()). }
true;public;3;4;/**  * Asynchronously get snapshots.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  *  * @param getSnapshotsRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously get snapshots.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  *  * @param getSnapshotsRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void getAsync(GetSnapshotsRequest getSnapshotsRequest, RequestOptions options, ActionListener<GetSnapshotsResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(getSnapshotsRequest, SnapshotRequestConverters::getSnapshots, options, GetSnapshotsResponse::fromXContent, listener, emptySet()). }
true;public;2;5;/**  * Gets the status of requested snapshots.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  * @param snapshotsStatusRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Gets the status of requested snapshots.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  * @param snapshotsStatusRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public SnapshotsStatusResponse status(SnapshotsStatusRequest snapshotsStatusRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(snapshotsStatusRequest, SnapshotRequestConverters::snapshotsStatus, options, SnapshotsStatusResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously gets the status of requested snapshots.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  * @param snapshotsStatusRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously gets the status of requested snapshots.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  * @param snapshotsStatusRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void statusAsync(SnapshotsStatusRequest snapshotsStatusRequest, RequestOptions options, ActionListener<SnapshotsStatusResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(snapshotsStatusRequest, SnapshotRequestConverters::snapshotsStatus, options, SnapshotsStatusResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Restores a snapshot.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  *  * @param restoreSnapshotRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Restores a snapshot.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  *  * @param restoreSnapshotRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public RestoreSnapshotResponse restore(RestoreSnapshotRequest restoreSnapshotRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(restoreSnapshotRequest, SnapshotRequestConverters::restoreSnapshot, options, RestoreSnapshotResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously restores a snapshot.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  *  * @param restoreSnapshotRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously restores a snapshot.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  *  * @param restoreSnapshotRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void restoreAsync(RestoreSnapshotRequest restoreSnapshotRequest, RequestOptions options, ActionListener<RestoreSnapshotResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(restoreSnapshotRequest, SnapshotRequestConverters::restoreSnapshot, options, RestoreSnapshotResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Deletes a snapshot.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  *  * @param deleteSnapshotRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Deletes a snapshot.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  *  * @param deleteSnapshotRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public AcknowledgedResponse delete(DeleteSnapshotRequest deleteSnapshotRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(deleteSnapshotRequest, SnapshotRequestConverters::deleteSnapshot, options, AcknowledgedResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously deletes a snapshot.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  *  * @param deleteSnapshotRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously deletes a snapshot.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore  * API on elastic.co</a>  *  * @param deleteSnapshotRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void deleteAsync(DeleteSnapshotRequest deleteSnapshotRequest, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(deleteSnapshotRequest, SnapshotRequestConverters::deleteSnapshot, options, AcknowledgedResponse::fromXContent, listener, emptySet()). }
