commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Override public Optional<ValidationException> validate() {     final ValidationException validationException = new ValidationException().     if (fields == null || fields.length == 0) {         validationException.addValidationError("Fields must have at least one value").     }     if (validationException.validationErrors().isEmpty()) {         return Optional.empty().     }     return Optional.of(validationException). }
true;public;0;3;/**  * @return the names of the fields. Never {@code null}.  */ ;/**  * @return the names of the fields. Never {@code null}.  */ public String[] getFields() {     return fields. }
false;public;2;8;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     {         builder.field(FIELDS, fields).     }     return builder.endObject(). }
false;public;1;11;;@Override public boolean equals(final Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     final TermsGroupConfig that = (TermsGroupConfig) other.     return Arrays.equals(fields, that.fields). }
false;public;0;4;;@Override public int hashCode() {     return Arrays.hashCode(fields). }
false;public,static;1;3;;public static TermsGroupConfig fromXContent(final XContentParser parser) throws IOException {     return PARSER.parse(parser, null). }
