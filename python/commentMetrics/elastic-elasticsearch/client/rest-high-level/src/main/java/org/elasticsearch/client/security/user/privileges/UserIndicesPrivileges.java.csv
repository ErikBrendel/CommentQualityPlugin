commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;10;;@SuppressWarnings("unchecked") private static UserIndicesPrivileges buildObjectFromParserArgs(Object[] args) {     return new UserIndicesPrivileges((List<String>) args[0], (List<String>) args[1], (Boolean) args[2], (List<IndicesPrivileges.FieldSecurity>) args[3], (List<String>) args[4]). }
false;public,static;1;3;;public static UserIndicesPrivileges fromXContent(XContentParser parser) throws IOException {     return PARSER.parse(parser, null). }
false;public;0;3;;public Set<IndicesPrivileges.FieldSecurity> getFieldSecurity() {     return fieldSecurity. }
false;public;0;3;;public Set<String> getQueries() {     return query. }
false;public;0;4;;@Override public boolean isUsingDocumentLevelSecurity() {     return query.isEmpty() == false. }
false;public;0;4;;@Override public boolean isUsingFieldLevelSecurity() {     return fieldSecurity.stream().anyMatch(FieldSecurity::isUsingFieldLevelSecurity). }
false;public;1;15;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     final UserIndicesPrivileges that = (UserIndicesPrivileges) o.     return Objects.equals(indices, that.indices) && Objects.equals(privileges, that.privileges) && allowRestrictedIndices == that.allowRestrictedIndices && Objects.equals(fieldSecurity, that.fieldSecurity) && Objects.equals(query, that.query). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(indices, privileges, allowRestrictedIndices, fieldSecurity, query). }
false;public;0;10;;@Override public String toString() {     return "UserIndexPrivilege{" + "indices=" + indices + ", privileges=" + privileges + ", allow_restricted_indices=" + allowRestrictedIndices + ", fieldSecurity=" + fieldSecurity + ", query=" + query + '}'. }
