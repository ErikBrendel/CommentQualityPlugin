commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;5;/**  * Create a new {@link DeleteForecastRequest} that explicitly deletes all forecasts  *  * @param jobId the jobId of the Job whose forecasts to delete  */ ;/**  * Create a new {@link DeleteForecastRequest} that explicitly deletes all forecasts  *  * @param jobId the jobId of the Job whose forecasts to delete  */ public static DeleteForecastRequest deleteAllForecasts(String jobId) {     DeleteForecastRequest request = new DeleteForecastRequest(jobId).     request.setForecastIds(ALL).     return request. }
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;0;3;;public List<String> getForecastIds() {     return forecastIds. }
true;public;1;3;/**  * The forecast IDs to delete. Can be also be {@link DeleteForecastRequest#ALL} to explicitly delete ALL forecasts  *  * @param forecastIds forecast IDs to delete  */ ;/**  * The forecast IDs to delete. Can be also be {@link DeleteForecastRequest#ALL} to explicitly delete ALL forecasts  *  * @param forecastIds forecast IDs to delete  */ public void setForecastIds(String... forecastIds) {     setForecastIds(Arrays.asList(forecastIds)). }
false;;1;6;;void setForecastIds(List<String> forecastIds) {     if (forecastIds.stream().anyMatch(Objects::isNull)) {         throw new NullPointerException("forecastIds must not contain null values").     }     this.forecastIds = new ArrayList<>(forecastIds). }
false;public;0;3;;public Boolean getAllowNoForecasts() {     return allowNoForecasts. }
true;public;1;3;/**  * Sets the value of "allow_no_forecasts".  *  * @param allowNoForecasts when {@code true} no error is thrown when {@link DeleteForecastRequest#ALL} does not find any forecasts  */ ;/**  * Sets the value of "allow_no_forecasts".  *  * @param allowNoForecasts when {@code true} no error is thrown when {@link DeleteForecastRequest#ALL} does not find any forecasts  */ public void setAllowNoForecasts(boolean allowNoForecasts) {     this.allowNoForecasts = allowNoForecasts. }
true;public;1;3;/**  * Allows to set the timeout  * @param timeout timeout as a string (e.g. 1s)  */ ;/**  * Allows to set the timeout  * @param timeout timeout as a string (e.g. 1s)  */ public void timeout(String timeout) {     this.timeout = TimeValue.parseTimeValue(timeout, this.timeout, getClass().getSimpleName() + ".timeout"). }
true;public;1;3;/**  * Allows to set the timeout  * @param timeout timeout as a {@link TimeValue}  */ ;/**  * Allows to set the timeout  * @param timeout timeout as a {@link TimeValue}  */ public void timeout(TimeValue timeout) {     this.timeout = timeout. }
false;public;0;3;;public TimeValue timeout() {     return timeout. }
false;public;1;16;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     DeleteForecastRequest that = (DeleteForecastRequest) other.     return Objects.equals(jobId, that.jobId) && Objects.equals(forecastIds, that.forecastIds) && Objects.equals(allowNoForecasts, that.allowNoForecasts) && Objects.equals(timeout, that.timeout). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobId, forecastIds, allowNoForecasts, timeout). }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;2;16;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Job.ID.getPreferredName(), jobId).     if (forecastIds != null) {         builder.field(FORECAST_ID.getPreferredName(), Strings.collectionToCommaDelimitedString(forecastIds)).     }     if (allowNoForecasts != null) {         builder.field(ALLOW_NO_FORECASTS.getPreferredName(), allowNoForecasts).     }     if (timeout != null) {         builder.field(TIMEOUT.getPreferredName(), timeout.getStringRep()).     }     builder.endObject().     return builder. }
