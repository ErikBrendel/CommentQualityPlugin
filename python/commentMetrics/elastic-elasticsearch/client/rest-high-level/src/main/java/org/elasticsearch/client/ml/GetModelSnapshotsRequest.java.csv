commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;0;3;;public String getSnapshotId() {     return snapshotId. }
true;public;1;3;/**  * Sets the id of the snapshot to retrieve.  * @param snapshotId the snapshot id  */ ;/**  * Sets the id of the snapshot to retrieve.  * @param snapshotId the snapshot id  */ public void setSnapshotId(String snapshotId) {     this.snapshotId = snapshotId. }
false;public;0;3;;public String getSort() {     return sort. }
true;public;1;3;/**  * Sets the value of "sort".  * Specifies the snapshot field to sort on.  * @param sort value of "sort".  */ ;/**  * Sets the value of "sort".  * Specifies the snapshot field to sort on.  * @param sort value of "sort".  */ public void setSort(String sort) {     this.sort = sort. }
false;public;0;3;;public PageParams getPageParams() {     return pageParams. }
true;public;1;3;/**  * Sets the paging parameters  * @param pageParams the paging parameters  */ ;/**  * Sets the paging parameters  * @param pageParams the paging parameters  */ public void setPageParams(PageParams pageParams) {     this.pageParams = pageParams. }
false;public;0;3;;public String getStart() {     return start. }
true;public;1;3;/**  * Sets the value of "start" which is a timestamp.  * Only snapshots whose timestamp is on or after the "start" value will be returned.  * @param start String representation of a timestamp. may be an epoch seconds, epoch millis or an ISO string  */ ;/**  * Sets the value of "start" which is a timestamp.  * Only snapshots whose timestamp is on or after the "start" value will be returned.  * @param start String representation of a timestamp. may be an epoch seconds, epoch millis or an ISO string  */ public void setStart(String start) {     this.start = start. }
false;public;0;3;;public String getEnd() {     return end. }
true;public;1;3;/**  * Sets the value of "end" which is a timestamp.  * Only snapshots whose timestamp is before the "end" value will be returned.  * @param end String representation of a timestamp. may be an epoch seconds, epoch millis or an ISO string  */ ;/**  * Sets the value of "end" which is a timestamp.  * Only snapshots whose timestamp is before the "end" value will be returned.  * @param end String representation of a timestamp. may be an epoch seconds, epoch millis or an ISO string  */ public void setEnd(String end) {     this.end = end. }
false;public;0;3;;public Boolean getDesc() {     return desc. }
true;public;1;3;/**  * Sets the value of "desc".  * Specifies the sorting order.  * @param desc value of "desc"  */ ;/**  * Sets the value of "desc".  * Specifies the sorting order.  * @param desc value of "desc"  */ public void setDesc(boolean desc) {     this.desc = desc. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;2;24;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Job.ID.getPreferredName(), jobId).     if (snapshotId != null) {         builder.field(SNAPSHOT_ID.getPreferredName(), snapshotId).     }     if (sort != null) {         builder.field(SORT.getPreferredName(), sort).     }     if (start != null) {         builder.field(START.getPreferredName(), start).     }     if (end != null) {         builder.field(END.getPreferredName(), end).     }     if (desc != null) {         builder.field(DESC.getPreferredName(), desc).     }     if (pageParams != null) {         builder.field(PageParams.PAGE.getPreferredName(), pageParams).     }     builder.endObject().     return builder. }
false;public;1;17;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     GetModelSnapshotsRequest request = (GetModelSnapshotsRequest) obj.     return Objects.equals(jobId, request.jobId) && Objects.equals(snapshotId, request.snapshotId) && Objects.equals(sort, request.sort) && Objects.equals(start, request.start) && Objects.equals(end, request.end) && Objects.equals(desc, request.desc) && Objects.equals(pageParams, request.pageParams). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobId, snapshotId, pageParams, start, end, sort, desc). }
