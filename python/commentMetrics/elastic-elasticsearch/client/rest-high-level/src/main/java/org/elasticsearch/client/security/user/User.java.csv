commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * @return  The principal of this user - effectively serving as the  *          unique identity of the user. Can never be {@code null}.  */ ;/**  * @return  The principal of this user - effectively serving as the  *          unique identity of the user. Can never be {@code null}.  */ public String getUsername() {     return this.username. }
true;public;0;3;/**  * @return  The roles this user is associated with. The roles are  *          identified by their unique names and each represents as  *          set of permissions. Can never be {@code null}.  */ ;/**  * @return  The roles this user is associated with. The roles are  *          identified by their unique names and each represents as  *          set of permissions. Can never be {@code null}.  */ public Set<String> getRoles() {     return this.roles. }
true;public;0;3;/**  * @return  The metadata that is associated with this user. Can never be {@code null}.  */ ;/**  * @return  The metadata that is associated with this user. Can never be {@code null}.  */ public Map<String, Object> getMetadata() {     return metadata. }
true;public;0;3;/**  * @return  The full name of this user. May be {@code null}.  */ ;/**  * @return  The full name of this user. May be {@code null}.  */ @Nullable public String getFullName() {     return fullName. }
true;public;0;3;/**  * @return  The email of this user. May be {@code null}.  */ ;/**  * @return  The email of this user. May be {@code null}.  */ @Nullable public String getEmail() {     return email. }
false;public;0;11;;@Override public String toString() {     final StringBuilder sb = new StringBuilder().     sb.append("User[username=").append(username).     sb.append(",roles=[").append(Strings.collectionToCommaDelimitedString(roles)).append("]").     sb.append(",metadata=").append(metadata).     sb.append(",fullName=").append(fullName).     sb.append(",email=").append(email).     sb.append("]").     return sb.toString(). }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || this.getClass() != o.getClass())         return false.     final User that = (User) o.     return Objects.equals(username, that.username) && Objects.equals(roles, that.roles) && Objects.equals(metadata, that.metadata) && Objects.equals(fullName, that.fullName) && Objects.equals(email, that.email). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(username, roles, metadata, fullName, email). }
