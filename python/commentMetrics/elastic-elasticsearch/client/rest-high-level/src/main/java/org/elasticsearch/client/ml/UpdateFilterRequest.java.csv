commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getFilterId() {     return filterId. }
false;public;0;3;;public String getDescription() {     return description. }
true;public;1;3;/**  * The new description of the filter  * @param description the updated filter description  */ ;/**  * The new description of the filter  * @param description the updated filter description  */ public void setDescription(String description) {     this.description = description. }
false;public;0;3;;public SortedSet<String> getAddItems() {     return addItems. }
true;public;1;4;/**  * The collection of items to add to the filter  * @param addItems non-null items to add to the filter, defaults to empty array  */ ;/**  * The collection of items to add to the filter  * @param addItems non-null items to add to the filter, defaults to empty array  */ public void setAddItems(Collection<String> addItems) {     this.addItems = new TreeSet<>(Objects.requireNonNull(addItems, "[" + ADD_ITEMS.getPreferredName() + "] must not be null")). }
false;public;0;3;;public SortedSet<String> getRemoveItems() {     return removeItems. }
true;public;1;4;/**  * The collection of items to remove from the filter  * @param removeItems non-null items to remove from the filter, defaults to empty array  */ ;/**  * The collection of items to remove from the filter  * @param removeItems non-null items to remove from the filter, defaults to empty array  */ public void setRemoveItems(Collection<String> removeItems) {     this.removeItems = new TreeSet<>(Objects.requireNonNull(removeItems, "[" + REMOVE_ITEMS.getPreferredName() + "] must not be null")). }
false;public;2;16;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(MlFilter.ID.getPreferredName(), filterId).     if (description != null) {         builder.field(MlFilter.DESCRIPTION.getPreferredName(), description).     }     if (addItems != null) {         builder.field(ADD_ITEMS.getPreferredName(), addItems).     }     if (removeItems != null) {         builder.field(REMOVE_ITEMS.getPreferredName(), removeItems).     }     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(filterId, description, addItems, removeItems). }
false;public;1;15;;@Override public boolean equals(Object obj) {     if (obj == this) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     UpdateFilterRequest other = (UpdateFilterRequest) obj.     return Objects.equals(filterId, other.filterId) && Objects.equals(description, other.description) && Objects.equals(addItems, other.addItems) && Objects.equals(removeItems, other.removeItems). }
false;public,final;0;4;;@Override public final String toString() {     return Strings.toString(this). }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
