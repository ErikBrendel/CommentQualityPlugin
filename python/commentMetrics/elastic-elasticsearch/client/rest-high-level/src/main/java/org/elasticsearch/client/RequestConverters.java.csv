# id;timestamp;commentText;codeText;commentWords;codeWords
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1525248068;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1525645056;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1526029249;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1526449283;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1526510804;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1526981569;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1527207653;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1527773340;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1527840262;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1527878678;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1528167589;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1528706846;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1528762805;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1528804324;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1528893677;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1529341607;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1529433467;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1529508649;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1529658035;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1529916083;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1531179852;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1531382259;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1531729807;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1532028790;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1532456624;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1532991445;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1533063033;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1533245222;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1533641732;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1533806325;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1533843546;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1533921794;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1534176840;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1534248446;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1534362961;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1534434117;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1534539448;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1535046779;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1535552903;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1535570086;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1535654284;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1535654812;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1535665876;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1535666657;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1535965276;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1536137328;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1536177418;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1536181401;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1536314350;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1536357842;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1536363694;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1536611444;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1536611501;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1537300661;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1537806831;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1538579488;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1539702726;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1539723533;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1539796943;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1539951844;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1539954289;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1540394099;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1540485349;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1540486836;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1540583181;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1540847035;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1540912197;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1541164879;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1541661567;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1542275448;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1542648271;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1542723321;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1543416132;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1544120595;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1544211598;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1544499913;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1544813247;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1545091062;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1545261620;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1545358001;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1546960318;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1547156119;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1548897299;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1548943934;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> @SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")     public static ContentType createContentType(final XContentType xContentType);1549386356;Returns a {@link ContentType} from a given {@link XContentType}.__@param xContentType the {@link XContentType}_@return the {@link ContentType};@SuppressForbidden(reason = "Only allowed place to convert a XContentType to a ContentType")_    public static ContentType createContentType(final XContentType xContentType) {_        return ContentType.create(xContentType.mediaTypeWithoutParameters(), (Charset) null)__    };returns,a,link,content,type,from,a,given,link,xcontent,type,param,x,content,type,the,link,xcontent,type,return,the,link,content,type;suppress,forbidden,reason,only,allowed,place,to,convert,a,xcontent,type,to,a,content,type,public,static,content,type,create,content,type,final,xcontent,type,x,content,type,return,content,type,create,x,content,type,media,type,without,parameters,charset,null
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1525248068;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1525645056;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1526029249;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1526449283;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1526510804;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1526981569;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1527207653;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1527773340;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1527840262;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1527878678;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1528167589;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1528706846;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1528762805;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1528804324;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1528893677;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1529341607;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1529433467;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1529508649;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1529658035;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1529916083;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1531179852;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1531382259;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1531729807;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1532028790;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1532456624;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1532991445;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1533063033;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1533245222;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1533641732;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1533806325;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1533843546;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1533921794;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1534176840;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1534248446;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1534362961;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1534434117;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1534539448;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1535046779;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1535552903;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1535570086;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1535654284;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1535654812;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1535665876;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1535666657;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1535965276;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1536137328;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1536177418;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1536181401;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1536314350;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1536357842;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1536363694;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1536611444;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1536611501;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1537300661;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1537806831;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1538579488;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1539702726;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1539723533;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1539796943;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1539951844;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1539954289;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1540394099;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1540485349;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1540486836;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1540583181;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1540847035;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1540912197;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1541164879;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1541661567;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1542275448;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1542648271;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1542723321;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1543416132;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1544120595;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1544211598;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1544499913;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1544813247;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1545091062;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1545261620;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1545358001;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1546960318;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1547156119;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1548897299;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1548943934;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType);1549386356;Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms_to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).__@return the {@link IndexRequest}'s content type;static XContentType enforceSameContentType(IndexRequest indexRequest, @Nullable XContentType xContentType) {_        XContentType requestContentType = indexRequest.getContentType()__        if (requestContentType != XContentType.JSON && requestContentType != XContentType.SMILE) {_            throw new IllegalArgumentException("Unsupported content-type found for request with content-type [" + requestContentType_                    + "], only JSON and SMILE are supported")__        }_        if (xContentType == null) {_            return requestContentType__        }_        if (requestContentType != xContentType) {_            throw new IllegalArgumentException("Mismatching content-type found for request with content-type [" + requestContentType_                    + "], previous requests have content-type [" + xContentType + "]")__        }_        return xContentType__    };ensure,that,the,link,index,request,s,content,type,is,supported,by,the,bulk,api,and,that,it,conforms,to,the,current,link,bulk,request,s,content,type,if,it,s,known,at,the,time,of,this,method,get,called,return,the,link,index,request,s,content,type;static,xcontent,type,enforce,same,content,type,index,request,index,request,nullable,xcontent,type,x,content,type,xcontent,type,request,content,type,index,request,get,content,type,if,request,content,type,xcontent,type,json,request,content,type,xcontent,type,smile,throw,new,illegal,argument,exception,unsupported,content,type,found,for,request,with,content,type,request,content,type,only,json,and,smile,are,supported,if,x,content,type,null,return,request,content,type,if,request,content,type,x,content,type,throw,new,illegal,argument,exception,mismatching,content,type,found,for,request,with,content,type,request,content,type,previous,requests,have,content,type,x,content,type,return,x,content,type
RequestConverters -> static Request search(SearchRequest searchRequest, String searchEndpoint) throws IOException;1544211598;Convert a {@linkplain SearchRequest} into a {@linkplain Request}._@param searchRequest the request to convert_@param searchEndpoint the name of the search endpoint. {@literal _search}_for standard searches and {@literal _rollup_search} for rollup_searches.;static Request search(SearchRequest searchRequest, String searchEndpoint) throws IOException {_        Request request = new Request(HttpPost.METHOD_NAME, endpoint(searchRequest.indices(), searchRequest.types(), searchEndpoint))___        Params params = new Params(request)__        addSearchRequestParams(params, searchRequest)___        if (searchRequest.source() != null) {_            request.setEntity(createEntity(searchRequest.source(), REQUEST_BODY_CONTENT_TYPE))__        }_        return request__    };convert,a,linkplain,search,request,into,a,linkplain,request,param,search,request,the,request,to,convert,param,search,endpoint,the,name,of,the,search,endpoint,literal,for,standard,searches,and,literal,for,rollup,searches;static,request,search,search,request,search,request,string,search,endpoint,throws,ioexception,request,request,new,request,http,post,endpoint,search,request,indices,search,request,types,search,endpoint,params,params,new,params,request,add,search,request,params,params,search,request,if,search,request,source,null,request,set,entity,create,entity,search,request,source,return,request
RequestConverters -> static Request search(SearchRequest searchRequest, String searchEndpoint) throws IOException;1544499913;Convert a {@linkplain SearchRequest} into a {@linkplain Request}._@param searchRequest the request to convert_@param searchEndpoint the name of the search endpoint. {@literal _search}_for standard searches and {@literal _rollup_search} for rollup_searches.;static Request search(SearchRequest searchRequest, String searchEndpoint) throws IOException {_        Request request = new Request(HttpPost.METHOD_NAME, endpoint(searchRequest.indices(), searchRequest.types(), searchEndpoint))___        Params params = new Params(request)__        addSearchRequestParams(params, searchRequest)___        if (searchRequest.source() != null) {_            request.setEntity(createEntity(searchRequest.source(), REQUEST_BODY_CONTENT_TYPE))__        }_        return request__    };convert,a,linkplain,search,request,into,a,linkplain,request,param,search,request,the,request,to,convert,param,search,endpoint,the,name,of,the,search,endpoint,literal,for,standard,searches,and,literal,for,rollup,searches;static,request,search,search,request,search,request,string,search,endpoint,throws,ioexception,request,request,new,request,http,post,endpoint,search,request,indices,search,request,types,search,endpoint,params,params,new,params,request,add,search,request,params,params,search,request,if,search,request,source,null,request,set,entity,create,entity,search,request,source,return,request
RequestConverters -> static Request search(SearchRequest searchRequest, String searchEndpoint) throws IOException;1544813247;Convert a {@linkplain SearchRequest} into a {@linkplain Request}._@param searchRequest the request to convert_@param searchEndpoint the name of the search endpoint. {@literal _search}_for standard searches and {@literal _rollup_search} for rollup_searches.;static Request search(SearchRequest searchRequest, String searchEndpoint) throws IOException {_        Request request = new Request(HttpPost.METHOD_NAME, endpoint(searchRequest.indices(), searchRequest.types(), searchEndpoint))___        Params params = new Params(request)__        addSearchRequestParams(params, searchRequest)___        if (searchRequest.source() != null) {_            request.setEntity(createEntity(searchRequest.source(), REQUEST_BODY_CONTENT_TYPE))__        }_        return request__    };convert,a,linkplain,search,request,into,a,linkplain,request,param,search,request,the,request,to,convert,param,search,endpoint,the,name,of,the,search,endpoint,literal,for,standard,searches,and,literal,for,rollup,searches;static,request,search,search,request,search,request,string,search,endpoint,throws,ioexception,request,request,new,request,http,post,endpoint,search,request,indices,search,request,types,search,endpoint,params,params,new,params,request,add,search,request,params,params,search,request,if,search,request,source,null,request,set,entity,create,entity,search,request,source,return,request
RequestConverters -> static Request search(SearchRequest searchRequest, String searchEndpoint) throws IOException;1545091062;Convert a {@linkplain SearchRequest} into a {@linkplain Request}._@param searchRequest the request to convert_@param searchEndpoint the name of the search endpoint. {@literal _search}_for standard searches and {@literal _rollup_search} for rollup_searches.;static Request search(SearchRequest searchRequest, String searchEndpoint) throws IOException {_        Request request = new Request(HttpPost.METHOD_NAME, endpoint(searchRequest.indices(), searchRequest.types(), searchEndpoint))___        Params params = new Params(request)__        addSearchRequestParams(params, searchRequest)___        if (searchRequest.source() != null) {_            request.setEntity(createEntity(searchRequest.source(), REQUEST_BODY_CONTENT_TYPE))__        }_        return request__    };convert,a,linkplain,search,request,into,a,linkplain,request,param,search,request,the,request,to,convert,param,search,endpoint,the,name,of,the,search,endpoint,literal,for,standard,searches,and,literal,for,rollup,searches;static,request,search,search,request,search,request,string,search,endpoint,throws,ioexception,request,request,new,request,http,post,endpoint,search,request,indices,search,request,types,search,endpoint,params,params,new,params,request,add,search,request,params,params,search,request,if,search,request,source,null,request,set,entity,create,entity,search,request,source,return,request
RequestConverters -> static Request search(SearchRequest searchRequest, String searchEndpoint) throws IOException;1545261620;Convert a {@linkplain SearchRequest} into a {@linkplain Request}._@param searchRequest the request to convert_@param searchEndpoint the name of the search endpoint. {@literal _search}_for standard searches and {@literal _rollup_search} for rollup_searches.;static Request search(SearchRequest searchRequest, String searchEndpoint) throws IOException {_        Request request = new Request(HttpPost.METHOD_NAME, endpoint(searchRequest.indices(), searchRequest.types(), searchEndpoint))___        Params params = new Params(request)__        addSearchRequestParams(params, searchRequest)___        if (searchRequest.source() != null) {_            request.setEntity(createEntity(searchRequest.source(), REQUEST_BODY_CONTENT_TYPE))__        }_        return request__    };convert,a,linkplain,search,request,into,a,linkplain,request,param,search,request,the,request,to,convert,param,search,endpoint,the,name,of,the,search,endpoint,literal,for,standard,searches,and,literal,for,rollup,searches;static,request,search,search,request,search,request,string,search,endpoint,throws,ioexception,request,request,new,request,http,post,endpoint,search,request,indices,search,request,types,search,endpoint,params,params,new,params,request,add,search,request,params,params,search,request,if,search,request,source,null,request,set,entity,create,entity,search,request,source,return,request
RequestConverters -> static Request search(SearchRequest searchRequest, String searchEndpoint) throws IOException;1545358001;Convert a {@linkplain SearchRequest} into a {@linkplain Request}._@param searchRequest the request to convert_@param searchEndpoint the name of the search endpoint. {@literal _search}_for standard searches and {@literal _rollup_search} for rollup_searches.;static Request search(SearchRequest searchRequest, String searchEndpoint) throws IOException {_        Request request = new Request(HttpPost.METHOD_NAME, endpoint(searchRequest.indices(), searchRequest.types(), searchEndpoint))___        Params params = new Params(request)__        addSearchRequestParams(params, searchRequest)___        if (searchRequest.source() != null) {_            request.setEntity(createEntity(searchRequest.source(), REQUEST_BODY_CONTENT_TYPE))__        }_        return request__    };convert,a,linkplain,search,request,into,a,linkplain,request,param,search,request,the,request,to,convert,param,search,endpoint,the,name,of,the,search,endpoint,literal,for,standard,searches,and,literal,for,rollup,searches;static,request,search,search,request,search,request,string,search,endpoint,throws,ioexception,request,request,new,request,http,post,endpoint,search,request,indices,search,request,types,search,endpoint,params,params,new,params,request,add,search,request,params,params,search,request,if,search,request,source,null,request,set,entity,create,entity,search,request,source,return,request
RequestConverters -> static Request search(SearchRequest searchRequest, String searchEndpoint) throws IOException;1546960318;Convert a {@linkplain SearchRequest} into a {@linkplain Request}._@param searchRequest the request to convert_@param searchEndpoint the name of the search endpoint. {@literal _search}_for standard searches and {@literal _rollup_search} for rollup_searches.;static Request search(SearchRequest searchRequest, String searchEndpoint) throws IOException {_        Request request = new Request(HttpPost.METHOD_NAME, endpoint(searchRequest.indices(), searchRequest.types(), searchEndpoint))___        Params params = new Params(request)__        addSearchRequestParams(params, searchRequest)___        if (searchRequest.source() != null) {_            request.setEntity(createEntity(searchRequest.source(), REQUEST_BODY_CONTENT_TYPE))__        }_        return request__    };convert,a,linkplain,search,request,into,a,linkplain,request,param,search,request,the,request,to,convert,param,search,endpoint,the,name,of,the,search,endpoint,literal,for,standard,searches,and,literal,for,rollup,searches;static,request,search,search,request,search,request,string,search,endpoint,throws,ioexception,request,request,new,request,http,post,endpoint,search,request,indices,search,request,types,search,endpoint,params,params,new,params,request,add,search,request,params,params,search,request,if,search,request,source,null,request,set,entity,create,entity,search,request,source,return,request
RequestConverters -> static Request search(SearchRequest searchRequest, String searchEndpoint) throws IOException;1547156119;Convert a {@linkplain SearchRequest} into a {@linkplain Request}._@param searchRequest the request to convert_@param searchEndpoint the name of the search endpoint. {@literal _search}_for standard searches and {@literal _rollup_search} for rollup_searches.;static Request search(SearchRequest searchRequest, String searchEndpoint) throws IOException {_        Request request = new Request(HttpPost.METHOD_NAME, endpoint(searchRequest.indices(), searchRequest.types(), searchEndpoint))___        Params params = new Params(request)__        addSearchRequestParams(params, searchRequest)___        if (searchRequest.source() != null) {_            request.setEntity(createEntity(searchRequest.source(), REQUEST_BODY_CONTENT_TYPE))__        }_        return request__    };convert,a,linkplain,search,request,into,a,linkplain,request,param,search,request,the,request,to,convert,param,search,endpoint,the,name,of,the,search,endpoint,literal,for,standard,searches,and,literal,for,rollup,searches;static,request,search,search,request,search,request,string,search,endpoint,throws,ioexception,request,request,new,request,http,post,endpoint,search,request,indices,search,request,types,search,endpoint,params,params,new,params,request,add,search,request,params,params,search,request,if,search,request,source,null,request,set,entity,create,entity,search,request,source,return,request
RequestConverters -> static Request search(SearchRequest searchRequest, String searchEndpoint) throws IOException;1548897299;Convert a {@linkplain SearchRequest} into a {@linkplain Request}._@param searchRequest the request to convert_@param searchEndpoint the name of the search endpoint. {@literal _search}_for standard searches and {@literal _rollup_search} for rollup_searches.;static Request search(SearchRequest searchRequest, String searchEndpoint) throws IOException {_        Request request = new Request(HttpPost.METHOD_NAME, endpoint(searchRequest.indices(), searchRequest.types(), searchEndpoint))___        Params params = new Params(request)__        addSearchRequestParams(params, searchRequest)___        if (searchRequest.source() != null) {_            request.setEntity(createEntity(searchRequest.source(), REQUEST_BODY_CONTENT_TYPE))__        }_        return request__    };convert,a,linkplain,search,request,into,a,linkplain,request,param,search,request,the,request,to,convert,param,search,endpoint,the,name,of,the,search,endpoint,literal,for,standard,searches,and,literal,for,rollup,searches;static,request,search,search,request,search,request,string,search,endpoint,throws,ioexception,request,request,new,request,http,post,endpoint,search,request,indices,search,request,types,search,endpoint,params,params,new,params,request,add,search,request,params,params,search,request,if,search,request,source,null,request,set,entity,create,entity,search,request,source,return,request
RequestConverters -> static Request search(SearchRequest searchRequest, String searchEndpoint) throws IOException;1548943934;Convert a {@linkplain SearchRequest} into a {@linkplain Request}._@param searchRequest the request to convert_@param searchEndpoint the name of the search endpoint. {@literal _search}_for standard searches and {@literal _rollup_search} for rollup_searches.;static Request search(SearchRequest searchRequest, String searchEndpoint) throws IOException {_        Request request = new Request(HttpPost.METHOD_NAME, endpoint(searchRequest.indices(), searchRequest.types(), searchEndpoint))___        Params params = new Params(request)__        addSearchRequestParams(params, searchRequest)___        if (searchRequest.source() != null) {_            request.setEntity(createEntity(searchRequest.source(), REQUEST_BODY_CONTENT_TYPE))__        }_        return request__    };convert,a,linkplain,search,request,into,a,linkplain,request,param,search,request,the,request,to,convert,param,search,endpoint,the,name,of,the,search,endpoint,literal,for,standard,searches,and,literal,for,rollup,searches;static,request,search,search,request,search,request,string,search,endpoint,throws,ioexception,request,request,new,request,http,post,endpoint,search,request,indices,search,request,types,search,endpoint,params,params,new,params,request,add,search,request,params,params,search,request,if,search,request,source,null,request,set,entity,create,entity,search,request,source,return,request
RequestConverters -> static Request search(SearchRequest searchRequest, String searchEndpoint) throws IOException;1549386356;Convert a {@linkplain SearchRequest} into a {@linkplain Request}._@param searchRequest the request to convert_@param searchEndpoint the name of the search endpoint. {@literal _search}_for standard searches and {@literal _rollup_search} for rollup_searches.;static Request search(SearchRequest searchRequest, String searchEndpoint) throws IOException {_        Request request = new Request(HttpPost.METHOD_NAME, endpoint(searchRequest.indices(), searchRequest.types(), searchEndpoint))___        Params params = new Params(request)__        addSearchRequestParams(params, searchRequest)___        if (searchRequest.source() != null) {_            request.setEntity(createEntity(searchRequest.source(), REQUEST_BODY_CONTENT_TYPE))__        }_        return request__    };convert,a,linkplain,search,request,into,a,linkplain,request,param,search,request,the,request,to,convert,param,search,endpoint,the,name,of,the,search,endpoint,literal,for,standard,searches,and,literal,for,rollup,searches;static,request,search,search,request,search,request,string,search,endpoint,throws,ioexception,request,request,new,request,http,post,endpoint,search,request,indices,search,request,types,search,endpoint,params,params,new,params,request,add,search,request,params,params,search,request,if,search,request,source,null,request,set,entity,create,entity,search,request,source,return,request
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1535666657;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1535965276;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1536137328;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1536177418;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1536181401;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1536314350;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1536357842;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1536363694;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1536611444;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1536611501;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1537300661;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1537806831;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1538579488;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1539702726;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1539723533;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1539796943;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1539951844;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1539954289;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1540394099;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1540485349;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1540486836;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1540583181;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1540847035;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1540912197;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1541164879;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1541661567;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1542275448;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1542648271;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1542723321;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1543416132;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1544120595;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1544211598;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1544499913;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1544813247;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1545091062;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1545261620;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1545358001;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1546960318;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1547156119;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1548897299;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1548943934;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
RequestConverters -> Params -> @Deprecated         Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy);1549386356;@deprecated If creating a new HLRC ReST API call, use {@link RefreshPolicy}_instead of {@link WriteRequest.RefreshPolicy} from the server project;@Deprecated_        Params withRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {_            if (refreshPolicy != WriteRequest.RefreshPolicy.NONE) {_                return putParam("refresh", refreshPolicy.getValue())__            }_            return this__        };deprecated,if,creating,a,new,hlrc,re,st,api,call,use,link,refresh,policy,instead,of,link,write,request,refresh,policy,from,the,server,project;deprecated,params,with,refresh,policy,write,request,refresh,policy,refresh,policy,if,refresh,policy,write,request,refresh,policy,none,return,put,param,refresh,refresh,policy,get,value,return,this
