commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Helper method to create a query that will get ALL jobs  * @return new {@link GetJobRequest} object searching for the jobId "_all"  */ ;/**  * Helper method to create a query that will get ALL jobs  * @return new {@link GetJobRequest} object searching for the jobId "_all"  */ public static GetJobRequest getAllJobsRequest() {     return new GetJobRequest(ALL_JOBS). }
true;public;0;3;/**  * All the jobIds for which to get configuration information  */ ;/**  * All the jobIds for which to get configuration information  */ public List<String> getJobIds() {     return jobIds. }
true;public;1;3;/**  * Whether to ignore if a wildcard expression matches no jobs.  *  * @param allowNoJobs If this is {@code false}, then an error is returned when a wildcard (or {@code _all}) does not match any jobs  */ ;/**  * Whether to ignore if a wildcard expression matches no jobs.  *  * @param allowNoJobs If this is {@code false}, then an error is returned when a wildcard (or {@code _all}) does not match any jobs  */ public void setAllowNoJobs(boolean allowNoJobs) {     this.allowNoJobs = allowNoJobs. }
false;public;0;3;;public Boolean getAllowNoJobs() {     return allowNoJobs. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobIds, allowNoJobs). }
false;public;1;14;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || other.getClass() != getClass()) {         return false.     }     GetJobRequest that = (GetJobRequest) other.     return Objects.equals(jobIds, that.jobIds) && Objects.equals(allowNoJobs, that.allowNoJobs). }
false;public;2;15;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (jobIds.isEmpty() == false) {         builder.field(JOB_IDS.getPreferredName(), jobIds).     }     if (allowNoJobs != null) {         builder.field(ALLOW_NO_JOBS.getPreferredName(), allowNoJobs).     }     builder.endObject().     return builder. }
