commented;modifiers;parameterAmount;loc;comment;code
true;public;2;4;/**  * Get Migration Assistance for one or more indices  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Get Migration Assistance for one or more indices  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public IndexUpgradeInfoResponse getAssistance(IndexUpgradeInfoRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, MigrationRequestConverters::getMigrationAssistance, options, IndexUpgradeInfoResponse::fromXContent, Collections.emptySet()). }
false;public;2;4;;public BulkByScrollResponse upgrade(IndexUpgradeRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, MigrationRequestConverters::migrate, options, BulkByScrollResponse::fromXContent, Collections.emptySet()). }
false;public;2;4;;public TaskSubmissionResponse submitUpgradeTask(IndexUpgradeRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, MigrationRequestConverters::submitMigrateTask, options, TaskSubmissionResponse::fromXContent, Collections.emptySet()). }
false;public;3;4;;public void upgradeAsync(IndexUpgradeRequest request, RequestOptions options, ActionListener<BulkByScrollResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, MigrationRequestConverters::migrate, options, BulkByScrollResponse::fromXContent, listener, Collections.emptySet()). }
true;public;2;4;/**  * Get deprecation info for one or more indices  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Get deprecation info for one or more indices  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public DeprecationInfoResponse getDeprecationInfo(DeprecationInfoRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, MigrationRequestConverters::getDeprecationInfo, options, DeprecationInfoResponse::fromXContent, Collections.emptySet()). }
true;public;3;5;/**  * Asynchronously get deprecation info for one or more indices  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously get deprecation info for one or more indices  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void getDeprecationInfoAsync(DeprecationInfoRequest request, RequestOptions options, ActionListener<DeprecationInfoResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, MigrationRequestConverters::getDeprecationInfo, options, DeprecationInfoResponse::fromXContent, listener, Collections.emptySet()). }
