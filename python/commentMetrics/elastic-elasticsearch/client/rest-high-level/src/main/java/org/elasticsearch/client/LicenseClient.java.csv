commented;modifiers;parameterAmount;loc;comment;code
true;public;2;4;/**  * Updates license for the cluster.  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Updates license for the cluster.  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public PutLicenseResponse putLicense(PutLicenseRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, LicenseRequestConverters::putLicense, options, PutLicenseResponse::fromXContent, emptySet()). }
true;public;3;4;/**  * Asynchronously updates license for the cluster.  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously updates license for the cluster.  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void putLicenseAsync(PutLicenseRequest request, RequestOptions options, ActionListener<PutLicenseResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, LicenseRequestConverters::putLicense, options, PutLicenseResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Returns the current license for the cluster.  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Returns the current license for the cluster.  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public GetLicenseResponse getLicense(GetLicenseRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequest(request, LicenseRequestConverters::getLicense, options, response -> new GetLicenseResponse(convertResponseToJson(response)), emptySet()). }
true;public;3;4;/**  * Asynchronously returns the current license for the cluster cluster.  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously returns the current license for the cluster cluster.  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void getLicenseAsync(GetLicenseRequest request, RequestOptions options, ActionListener<GetLicenseResponse> listener) {     restHighLevelClient.performRequestAsync(request, LicenseRequestConverters::getLicense, options, response -> new GetLicenseResponse(convertResponseToJson(response)), listener, emptySet()). }
true;public;2;4;/**  * Deletes license from the cluster.  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Deletes license from the cluster.  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public AcknowledgedResponse deleteLicense(DeleteLicenseRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, LicenseRequestConverters::deleteLicense, options, AcknowledgedResponse::fromXContent, emptySet()). }
true;public;3;4;/**  * Asynchronously deletes license from the cluster.  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously deletes license from the cluster.  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void deleteLicenseAsync(DeleteLicenseRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, LicenseRequestConverters::deleteLicense, options, AcknowledgedResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Starts a trial license on the cluster.  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Starts a trial license on the cluster.  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public StartTrialResponse startTrial(StartTrialRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, LicenseRequestConverters::startTrial, options, StartTrialResponse::fromXContent, singleton(403)). }
true;public;3;7;/**  * Asynchronously starts a trial license on the cluster.  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously starts a trial license on the cluster.  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void startTrialAsync(StartTrialRequest request, RequestOptions options, ActionListener<StartTrialResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, LicenseRequestConverters::startTrial, options, StartTrialResponse::fromXContent, listener, singleton(403)). }
true;public;2;4;/**  * Initiates an indefinite basic license.  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Initiates an indefinite basic license.  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public StartBasicResponse startBasic(StartBasicRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, LicenseRequestConverters::startBasic, options, StartBasicResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously initiates an indefinite basic license.  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously initiates an indefinite basic license.  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void startBasicAsync(StartBasicRequest request, RequestOptions options, ActionListener<StartBasicResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, LicenseRequestConverters::startBasic, options, StartBasicResponse::fromXContent, listener, emptySet()). }
true;public;1;4;/**  * Retrieve the license trial status  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Retrieve the license trial status  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public GetTrialStatusResponse getTrialStatus(RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(Validatable.EMPTY, request -> LicenseRequestConverters.getLicenseTrialStatus(), options, GetTrialStatusResponse::fromXContent, emptySet()). }
true;public;1;4;/**  * Retrieve the license basic status  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Retrieve the license basic status  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public GetBasicStatusResponse getBasicStatus(RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(Validatable.EMPTY, request -> LicenseRequestConverters.getLicenseBasicStatus(), options, GetBasicStatusResponse::fromXContent, emptySet()). }
true;static;1;27;/**  * Converts an entire response into a json string  *  * This is useful for responses that we don't parse on the client side, but instead work as string  * such as in case of the license JSON  */ ;/**  * Converts an entire response into a json string  *  * This is useful for responses that we don't parse on the client side, but instead work as string  * such as in case of the license JSON  */ static String convertResponseToJson(Response response) throws IOException {     HttpEntity entity = response.getEntity().     if (entity == null) {         throw new IllegalStateException("Response body expected but not returned").     }     if (entity.getContentType() == null) {         throw new IllegalStateException("Elasticsearch didn't return the [Content-Type] header, unable to parse response body").     }     XContentType xContentType = XContentType.fromMediaTypeOrFormat(entity.getContentType().getValue()).     if (xContentType == null) {         throw new IllegalStateException("Unsupported Content-Type: " + entity.getContentType().getValue()).     }     if (xContentType == XContentType.JSON) {         // No changes is required         return Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8)).     } else {         // Need to convert into JSON         try (InputStream stream = response.getEntity().getContent().             XContentParser parser = XContentFactory.xContent(xContentType).createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, stream)) {             parser.nextToken().             XContentBuilder builder = XContentFactory.jsonBuilder().             builder.copyCurrentStructure(parser).             return Strings.toString(builder).         }     } }
