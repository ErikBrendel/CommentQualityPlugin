# id;timestamp;commentText;codeText;commentWords;codeWords
LicenseClient -> public PutLicenseResponse putLicense(PutLicenseRequest request, RequestOptions options) throws IOException;1532456624;Updates license for the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public PutLicenseResponse putLicense(PutLicenseRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequestAndParseEntity(request, RequestConverters::putLicense, options,_            PutLicenseResponse::fromXContent, emptySet())__    };updates,license,for,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,put,license,response,put,license,put,license,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,and,parse,entity,request,request,converters,put,license,options,put,license,response,from,xcontent,empty,set
LicenseClient -> public PutLicenseResponse putLicense(PutLicenseRequest request, RequestOptions options) throws IOException;1533641732;Updates license for the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public PutLicenseResponse putLicense(PutLicenseRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequestAndParseEntity(request, RequestConverters::putLicense, options,_            PutLicenseResponse::fromXContent, emptySet())__    };updates,license,for,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,put,license,response,put,license,put,license,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,and,parse,entity,request,request,converters,put,license,options,put,license,response,from,xcontent,empty,set
LicenseClient -> public PutLicenseResponse putLicense(PutLicenseRequest request, RequestOptions options) throws IOException;1534176840;Updates license for the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public PutLicenseResponse putLicense(PutLicenseRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequestAndParseEntity(request, RequestConverters::putLicense, options,_            PutLicenseResponse::fromXContent, emptySet())__    };updates,license,for,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,put,license,response,put,license,put,license,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,and,parse,entity,request,request,converters,put,license,options,put,license,response,from,xcontent,empty,set
LicenseClient -> public PutLicenseResponse putLicense(PutLicenseRequest request, RequestOptions options) throws IOException;1534248446;Updates license for the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public PutLicenseResponse putLicense(PutLicenseRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequestAndParseEntity(request, RequestConverters::putLicense, options,_            PutLicenseResponse::fromXContent, emptySet())__    };updates,license,for,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,put,license,response,put,license,put,license,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,and,parse,entity,request,request,converters,put,license,options,put,license,response,from,xcontent,empty,set
LicenseClient -> public PutLicenseResponse putLicense(PutLicenseRequest request, RequestOptions options) throws IOException;1534362961;Updates license for the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public PutLicenseResponse putLicense(PutLicenseRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequestAndParseEntity(request, RequestConverters::putLicense, options,_            PutLicenseResponse::fromXContent, emptySet())__    };updates,license,for,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,put,license,response,put,license,put,license,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,and,parse,entity,request,request,converters,put,license,options,put,license,response,from,xcontent,empty,set
LicenseClient -> public PutLicenseResponse putLicense(PutLicenseRequest request, RequestOptions options) throws IOException;1536314350;Updates license for the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public PutLicenseResponse putLicense(PutLicenseRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequestAndParseEntity(request, LicenseRequestConverters::putLicense, options,_            PutLicenseResponse::fromXContent, emptySet())__    };updates,license,for,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,put,license,response,put,license,put,license,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,and,parse,entity,request,license,request,converters,put,license,options,put,license,response,from,xcontent,empty,set
LicenseClient -> public PutLicenseResponse putLicense(PutLicenseRequest request, RequestOptions options) throws IOException;1539723533;Updates license for the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public PutLicenseResponse putLicense(PutLicenseRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequestAndParseEntity(request, LicenseRequestConverters::putLicense, options,_            PutLicenseResponse::fromXContent, emptySet())__    };updates,license,for,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,put,license,response,put,license,put,license,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,and,parse,entity,request,license,request,converters,put,license,options,put,license,response,from,xcontent,empty,set
LicenseClient -> public PutLicenseResponse putLicense(PutLicenseRequest request, RequestOptions options) throws IOException;1539796943;Updates license for the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public PutLicenseResponse putLicense(PutLicenseRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequestAndParseEntity(request, LicenseRequestConverters::putLicense, options,_            PutLicenseResponse::fromXContent, emptySet())__    };updates,license,for,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,put,license,response,put,license,put,license,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,and,parse,entity,request,license,request,converters,put,license,options,put,license,response,from,xcontent,empty,set
LicenseClient -> public PutLicenseResponse putLicense(PutLicenseRequest request, RequestOptions options) throws IOException;1540238977;Updates license for the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public PutLicenseResponse putLicense(PutLicenseRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequestAndParseEntity(request, LicenseRequestConverters::putLicense, options,_            PutLicenseResponse::fromXContent, emptySet())__    };updates,license,for,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,put,license,response,put,license,put,license,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,and,parse,entity,request,license,request,converters,put,license,options,put,license,response,from,xcontent,empty,set
LicenseClient -> public PutLicenseResponse putLicense(PutLicenseRequest request, RequestOptions options) throws IOException;1542120779;Updates license for the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public PutLicenseResponse putLicense(PutLicenseRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequestAndParseEntity(request, LicenseRequestConverters::putLicense, options,_            PutLicenseResponse::fromXContent, emptySet())__    };updates,license,for,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,put,license,response,put,license,put,license,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,and,parse,entity,request,license,request,converters,put,license,options,put,license,response,from,xcontent,empty,set
LicenseClient -> public GetLicenseResponse getLicense(GetLicenseRequest request, RequestOptions options) throws IOException;1533641732;Returns the current license for the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public GetLicenseResponse getLicense(GetLicenseRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequest(request, RequestConverters::getLicense, options,_            response -> new GetLicenseResponse(convertResponseToJson(response)), emptySet())__    };returns,the,current,license,for,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,get,license,response,get,license,get,license,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,request,request,converters,get,license,options,response,new,get,license,response,convert,response,to,json,response,empty,set
LicenseClient -> public GetLicenseResponse getLicense(GetLicenseRequest request, RequestOptions options) throws IOException;1534176840;Returns the current license for the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public GetLicenseResponse getLicense(GetLicenseRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequest(request, RequestConverters::getLicense, options,_            response -> new GetLicenseResponse(convertResponseToJson(response)), emptySet())__    };returns,the,current,license,for,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,get,license,response,get,license,get,license,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,request,request,converters,get,license,options,response,new,get,license,response,convert,response,to,json,response,empty,set
LicenseClient -> public GetLicenseResponse getLicense(GetLicenseRequest request, RequestOptions options) throws IOException;1534248446;Returns the current license for the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public GetLicenseResponse getLicense(GetLicenseRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequest(request, RequestConverters::getLicense, options,_            response -> new GetLicenseResponse(convertResponseToJson(response)), emptySet())__    };returns,the,current,license,for,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,get,license,response,get,license,get,license,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,request,request,converters,get,license,options,response,new,get,license,response,convert,response,to,json,response,empty,set
LicenseClient -> public GetLicenseResponse getLicense(GetLicenseRequest request, RequestOptions options) throws IOException;1534362961;Returns the current license for the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public GetLicenseResponse getLicense(GetLicenseRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequest(request, RequestConverters::getLicense, options,_            response -> new GetLicenseResponse(convertResponseToJson(response)), emptySet())__    };returns,the,current,license,for,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,get,license,response,get,license,get,license,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,request,request,converters,get,license,options,response,new,get,license,response,convert,response,to,json,response,empty,set
LicenseClient -> public GetLicenseResponse getLicense(GetLicenseRequest request, RequestOptions options) throws IOException;1536314350;Returns the current license for the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public GetLicenseResponse getLicense(GetLicenseRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequest(request, LicenseRequestConverters::getLicense, options,_            response -> new GetLicenseResponse(convertResponseToJson(response)), emptySet())__    };returns,the,current,license,for,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,get,license,response,get,license,get,license,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,request,license,request,converters,get,license,options,response,new,get,license,response,convert,response,to,json,response,empty,set
LicenseClient -> public GetLicenseResponse getLicense(GetLicenseRequest request, RequestOptions options) throws IOException;1539723533;Returns the current license for the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public GetLicenseResponse getLicense(GetLicenseRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequest(request, LicenseRequestConverters::getLicense, options,_            response -> new GetLicenseResponse(convertResponseToJson(response)), emptySet())__    };returns,the,current,license,for,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,get,license,response,get,license,get,license,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,request,license,request,converters,get,license,options,response,new,get,license,response,convert,response,to,json,response,empty,set
LicenseClient -> public GetLicenseResponse getLicense(GetLicenseRequest request, RequestOptions options) throws IOException;1539796943;Returns the current license for the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public GetLicenseResponse getLicense(GetLicenseRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequest(request, LicenseRequestConverters::getLicense, options,_            response -> new GetLicenseResponse(convertResponseToJson(response)), emptySet())__    };returns,the,current,license,for,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,get,license,response,get,license,get,license,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,request,license,request,converters,get,license,options,response,new,get,license,response,convert,response,to,json,response,empty,set
LicenseClient -> public GetLicenseResponse getLicense(GetLicenseRequest request, RequestOptions options) throws IOException;1540238977;Returns the current license for the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public GetLicenseResponse getLicense(GetLicenseRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequest(request, LicenseRequestConverters::getLicense, options,_            response -> new GetLicenseResponse(convertResponseToJson(response)), emptySet())__    };returns,the,current,license,for,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,get,license,response,get,license,get,license,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,request,license,request,converters,get,license,options,response,new,get,license,response,convert,response,to,json,response,empty,set
LicenseClient -> public GetLicenseResponse getLicense(GetLicenseRequest request, RequestOptions options) throws IOException;1542120779;Returns the current license for the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public GetLicenseResponse getLicense(GetLicenseRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequest(request, LicenseRequestConverters::getLicense, options,_            response -> new GetLicenseResponse(convertResponseToJson(response)), emptySet())__    };returns,the,current,license,for,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,get,license,response,get,license,get,license,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,request,license,request,converters,get,license,options,response,new,get,license,response,convert,response,to,json,response,empty,set
LicenseClient -> static String convertResponseToJson(Response response) throws IOException;1533641732;Converts an entire response into a json sting__This is useful for responses that we don't parse on the client side, but instead work as string_such as in case of the license JSON;static String convertResponseToJson(Response response) throws IOException {_        HttpEntity entity = response.getEntity()__        if (entity == null) {_            throw new IllegalStateException("Response body expected but not returned")__        }_        if (entity.getContentType() == null) {_            throw new IllegalStateException("Elasticsearch didn't return the [Content-Type] header, unable to parse response body")__        }_        XContentType xContentType = XContentType.fromMediaTypeOrFormat(entity.getContentType().getValue())__        if (xContentType == null) {_            throw new IllegalStateException("Unsupported Content-Type: " + entity.getContentType().getValue())__        }_        if (xContentType == XContentType.JSON) {_            _            return Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8))__        } else {_            _            try (InputStream stream = response.getEntity().getContent()__                 XContentParser parser = XContentFactory.xContent(xContentType).createParser(NamedXContentRegistry.EMPTY,_                     DeprecationHandler.THROW_UNSUPPORTED_OPERATION, stream)) {_                parser.nextToken()__                XContentBuilder builder = XContentFactory.jsonBuilder()__                builder.copyCurrentStructure(parser)__                return Strings.toString(builder)__            }_        }_    };converts,an,entire,response,into,a,json,sting,this,is,useful,for,responses,that,we,don,t,parse,on,the,client,side,but,instead,work,as,string,such,as,in,case,of,the,license,json;static,string,convert,response,to,json,response,response,throws,ioexception,http,entity,entity,response,get,entity,if,entity,null,throw,new,illegal,state,exception,response,body,expected,but,not,returned,if,entity,get,content,type,null,throw,new,illegal,state,exception,elasticsearch,didn,t,return,the,content,type,header,unable,to,parse,response,body,xcontent,type,x,content,type,xcontent,type,from,media,type,or,format,entity,get,content,type,get,value,if,x,content,type,null,throw,new,illegal,state,exception,unsupported,content,type,entity,get,content,type,get,value,if,x,content,type,xcontent,type,json,return,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,else,try,input,stream,stream,response,get,entity,get,content,xcontent,parser,parser,xcontent,factory,x,content,x,content,type,create,parser,named,xcontent,registry,empty,deprecation,handler,stream,parser,next,token,xcontent,builder,builder,xcontent,factory,json,builder,builder,copy,current,structure,parser,return,strings,to,string,builder
LicenseClient -> static String convertResponseToJson(Response response) throws IOException;1534176840;Converts an entire response into a json string__This is useful for responses that we don't parse on the client side, but instead work as string_such as in case of the license JSON;static String convertResponseToJson(Response response) throws IOException {_        HttpEntity entity = response.getEntity()__        if (entity == null) {_            throw new IllegalStateException("Response body expected but not returned")__        }_        if (entity.getContentType() == null) {_            throw new IllegalStateException("Elasticsearch didn't return the [Content-Type] header, unable to parse response body")__        }_        XContentType xContentType = XContentType.fromMediaTypeOrFormat(entity.getContentType().getValue())__        if (xContentType == null) {_            throw new IllegalStateException("Unsupported Content-Type: " + entity.getContentType().getValue())__        }_        if (xContentType == XContentType.JSON) {_            _            return Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8))__        } else {_            _            try (InputStream stream = response.getEntity().getContent()__                 XContentParser parser = XContentFactory.xContent(xContentType).createParser(NamedXContentRegistry.EMPTY,_                     DeprecationHandler.THROW_UNSUPPORTED_OPERATION, stream)) {_                parser.nextToken()__                XContentBuilder builder = XContentFactory.jsonBuilder()__                builder.copyCurrentStructure(parser)__                return Strings.toString(builder)__            }_        }_    };converts,an,entire,response,into,a,json,string,this,is,useful,for,responses,that,we,don,t,parse,on,the,client,side,but,instead,work,as,string,such,as,in,case,of,the,license,json;static,string,convert,response,to,json,response,response,throws,ioexception,http,entity,entity,response,get,entity,if,entity,null,throw,new,illegal,state,exception,response,body,expected,but,not,returned,if,entity,get,content,type,null,throw,new,illegal,state,exception,elasticsearch,didn,t,return,the,content,type,header,unable,to,parse,response,body,xcontent,type,x,content,type,xcontent,type,from,media,type,or,format,entity,get,content,type,get,value,if,x,content,type,null,throw,new,illegal,state,exception,unsupported,content,type,entity,get,content,type,get,value,if,x,content,type,xcontent,type,json,return,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,else,try,input,stream,stream,response,get,entity,get,content,xcontent,parser,parser,xcontent,factory,x,content,x,content,type,create,parser,named,xcontent,registry,empty,deprecation,handler,stream,parser,next,token,xcontent,builder,builder,xcontent,factory,json,builder,builder,copy,current,structure,parser,return,strings,to,string,builder
LicenseClient -> static String convertResponseToJson(Response response) throws IOException;1534248446;Converts an entire response into a json string__This is useful for responses that we don't parse on the client side, but instead work as string_such as in case of the license JSON;static String convertResponseToJson(Response response) throws IOException {_        HttpEntity entity = response.getEntity()__        if (entity == null) {_            throw new IllegalStateException("Response body expected but not returned")__        }_        if (entity.getContentType() == null) {_            throw new IllegalStateException("Elasticsearch didn't return the [Content-Type] header, unable to parse response body")__        }_        XContentType xContentType = XContentType.fromMediaTypeOrFormat(entity.getContentType().getValue())__        if (xContentType == null) {_            throw new IllegalStateException("Unsupported Content-Type: " + entity.getContentType().getValue())__        }_        if (xContentType == XContentType.JSON) {_            _            return Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8))__        } else {_            _            try (InputStream stream = response.getEntity().getContent()__                 XContentParser parser = XContentFactory.xContent(xContentType).createParser(NamedXContentRegistry.EMPTY,_                     DeprecationHandler.THROW_UNSUPPORTED_OPERATION, stream)) {_                parser.nextToken()__                XContentBuilder builder = XContentFactory.jsonBuilder()__                builder.copyCurrentStructure(parser)__                return Strings.toString(builder)__            }_        }_    };converts,an,entire,response,into,a,json,string,this,is,useful,for,responses,that,we,don,t,parse,on,the,client,side,but,instead,work,as,string,such,as,in,case,of,the,license,json;static,string,convert,response,to,json,response,response,throws,ioexception,http,entity,entity,response,get,entity,if,entity,null,throw,new,illegal,state,exception,response,body,expected,but,not,returned,if,entity,get,content,type,null,throw,new,illegal,state,exception,elasticsearch,didn,t,return,the,content,type,header,unable,to,parse,response,body,xcontent,type,x,content,type,xcontent,type,from,media,type,or,format,entity,get,content,type,get,value,if,x,content,type,null,throw,new,illegal,state,exception,unsupported,content,type,entity,get,content,type,get,value,if,x,content,type,xcontent,type,json,return,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,else,try,input,stream,stream,response,get,entity,get,content,xcontent,parser,parser,xcontent,factory,x,content,x,content,type,create,parser,named,xcontent,registry,empty,deprecation,handler,stream,parser,next,token,xcontent,builder,builder,xcontent,factory,json,builder,builder,copy,current,structure,parser,return,strings,to,string,builder
LicenseClient -> static String convertResponseToJson(Response response) throws IOException;1534362961;Converts an entire response into a json string__This is useful for responses that we don't parse on the client side, but instead work as string_such as in case of the license JSON;static String convertResponseToJson(Response response) throws IOException {_        HttpEntity entity = response.getEntity()__        if (entity == null) {_            throw new IllegalStateException("Response body expected but not returned")__        }_        if (entity.getContentType() == null) {_            throw new IllegalStateException("Elasticsearch didn't return the [Content-Type] header, unable to parse response body")__        }_        XContentType xContentType = XContentType.fromMediaTypeOrFormat(entity.getContentType().getValue())__        if (xContentType == null) {_            throw new IllegalStateException("Unsupported Content-Type: " + entity.getContentType().getValue())__        }_        if (xContentType == XContentType.JSON) {_            _            return Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8))__        } else {_            _            try (InputStream stream = response.getEntity().getContent()__                 XContentParser parser = XContentFactory.xContent(xContentType).createParser(NamedXContentRegistry.EMPTY,_                     DeprecationHandler.THROW_UNSUPPORTED_OPERATION, stream)) {_                parser.nextToken()__                XContentBuilder builder = XContentFactory.jsonBuilder()__                builder.copyCurrentStructure(parser)__                return Strings.toString(builder)__            }_        }_    };converts,an,entire,response,into,a,json,string,this,is,useful,for,responses,that,we,don,t,parse,on,the,client,side,but,instead,work,as,string,such,as,in,case,of,the,license,json;static,string,convert,response,to,json,response,response,throws,ioexception,http,entity,entity,response,get,entity,if,entity,null,throw,new,illegal,state,exception,response,body,expected,but,not,returned,if,entity,get,content,type,null,throw,new,illegal,state,exception,elasticsearch,didn,t,return,the,content,type,header,unable,to,parse,response,body,xcontent,type,x,content,type,xcontent,type,from,media,type,or,format,entity,get,content,type,get,value,if,x,content,type,null,throw,new,illegal,state,exception,unsupported,content,type,entity,get,content,type,get,value,if,x,content,type,xcontent,type,json,return,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,else,try,input,stream,stream,response,get,entity,get,content,xcontent,parser,parser,xcontent,factory,x,content,x,content,type,create,parser,named,xcontent,registry,empty,deprecation,handler,stream,parser,next,token,xcontent,builder,builder,xcontent,factory,json,builder,builder,copy,current,structure,parser,return,strings,to,string,builder
LicenseClient -> static String convertResponseToJson(Response response) throws IOException;1536314350;Converts an entire response into a json string__This is useful for responses that we don't parse on the client side, but instead work as string_such as in case of the license JSON;static String convertResponseToJson(Response response) throws IOException {_        HttpEntity entity = response.getEntity()__        if (entity == null) {_            throw new IllegalStateException("Response body expected but not returned")__        }_        if (entity.getContentType() == null) {_            throw new IllegalStateException("Elasticsearch didn't return the [Content-Type] header, unable to parse response body")__        }_        XContentType xContentType = XContentType.fromMediaTypeOrFormat(entity.getContentType().getValue())__        if (xContentType == null) {_            throw new IllegalStateException("Unsupported Content-Type: " + entity.getContentType().getValue())__        }_        if (xContentType == XContentType.JSON) {_            _            return Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8))__        } else {_            _            try (InputStream stream = response.getEntity().getContent()__                 XContentParser parser = XContentFactory.xContent(xContentType).createParser(NamedXContentRegistry.EMPTY,_                     DeprecationHandler.THROW_UNSUPPORTED_OPERATION, stream)) {_                parser.nextToken()__                XContentBuilder builder = XContentFactory.jsonBuilder()__                builder.copyCurrentStructure(parser)__                return Strings.toString(builder)__            }_        }_    };converts,an,entire,response,into,a,json,string,this,is,useful,for,responses,that,we,don,t,parse,on,the,client,side,but,instead,work,as,string,such,as,in,case,of,the,license,json;static,string,convert,response,to,json,response,response,throws,ioexception,http,entity,entity,response,get,entity,if,entity,null,throw,new,illegal,state,exception,response,body,expected,but,not,returned,if,entity,get,content,type,null,throw,new,illegal,state,exception,elasticsearch,didn,t,return,the,content,type,header,unable,to,parse,response,body,xcontent,type,x,content,type,xcontent,type,from,media,type,or,format,entity,get,content,type,get,value,if,x,content,type,null,throw,new,illegal,state,exception,unsupported,content,type,entity,get,content,type,get,value,if,x,content,type,xcontent,type,json,return,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,else,try,input,stream,stream,response,get,entity,get,content,xcontent,parser,parser,xcontent,factory,x,content,x,content,type,create,parser,named,xcontent,registry,empty,deprecation,handler,stream,parser,next,token,xcontent,builder,builder,xcontent,factory,json,builder,builder,copy,current,structure,parser,return,strings,to,string,builder
LicenseClient -> static String convertResponseToJson(Response response) throws IOException;1539723533;Converts an entire response into a json string__This is useful for responses that we don't parse on the client side, but instead work as string_such as in case of the license JSON;static String convertResponseToJson(Response response) throws IOException {_        HttpEntity entity = response.getEntity()__        if (entity == null) {_            throw new IllegalStateException("Response body expected but not returned")__        }_        if (entity.getContentType() == null) {_            throw new IllegalStateException("Elasticsearch didn't return the [Content-Type] header, unable to parse response body")__        }_        XContentType xContentType = XContentType.fromMediaTypeOrFormat(entity.getContentType().getValue())__        if (xContentType == null) {_            throw new IllegalStateException("Unsupported Content-Type: " + entity.getContentType().getValue())__        }_        if (xContentType == XContentType.JSON) {_            _            return Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8))__        } else {_            _            try (InputStream stream = response.getEntity().getContent()__                 XContentParser parser = XContentFactory.xContent(xContentType).createParser(NamedXContentRegistry.EMPTY,_                     DeprecationHandler.THROW_UNSUPPORTED_OPERATION, stream)) {_                parser.nextToken()__                XContentBuilder builder = XContentFactory.jsonBuilder()__                builder.copyCurrentStructure(parser)__                return Strings.toString(builder)__            }_        }_    };converts,an,entire,response,into,a,json,string,this,is,useful,for,responses,that,we,don,t,parse,on,the,client,side,but,instead,work,as,string,such,as,in,case,of,the,license,json;static,string,convert,response,to,json,response,response,throws,ioexception,http,entity,entity,response,get,entity,if,entity,null,throw,new,illegal,state,exception,response,body,expected,but,not,returned,if,entity,get,content,type,null,throw,new,illegal,state,exception,elasticsearch,didn,t,return,the,content,type,header,unable,to,parse,response,body,xcontent,type,x,content,type,xcontent,type,from,media,type,or,format,entity,get,content,type,get,value,if,x,content,type,null,throw,new,illegal,state,exception,unsupported,content,type,entity,get,content,type,get,value,if,x,content,type,xcontent,type,json,return,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,else,try,input,stream,stream,response,get,entity,get,content,xcontent,parser,parser,xcontent,factory,x,content,x,content,type,create,parser,named,xcontent,registry,empty,deprecation,handler,stream,parser,next,token,xcontent,builder,builder,xcontent,factory,json,builder,builder,copy,current,structure,parser,return,strings,to,string,builder
LicenseClient -> static String convertResponseToJson(Response response) throws IOException;1539796943;Converts an entire response into a json string__This is useful for responses that we don't parse on the client side, but instead work as string_such as in case of the license JSON;static String convertResponseToJson(Response response) throws IOException {_        HttpEntity entity = response.getEntity()__        if (entity == null) {_            throw new IllegalStateException("Response body expected but not returned")__        }_        if (entity.getContentType() == null) {_            throw new IllegalStateException("Elasticsearch didn't return the [Content-Type] header, unable to parse response body")__        }_        XContentType xContentType = XContentType.fromMediaTypeOrFormat(entity.getContentType().getValue())__        if (xContentType == null) {_            throw new IllegalStateException("Unsupported Content-Type: " + entity.getContentType().getValue())__        }_        if (xContentType == XContentType.JSON) {_            _            return Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8))__        } else {_            _            try (InputStream stream = response.getEntity().getContent()__                 XContentParser parser = XContentFactory.xContent(xContentType).createParser(NamedXContentRegistry.EMPTY,_                     DeprecationHandler.THROW_UNSUPPORTED_OPERATION, stream)) {_                parser.nextToken()__                XContentBuilder builder = XContentFactory.jsonBuilder()__                builder.copyCurrentStructure(parser)__                return Strings.toString(builder)__            }_        }_    };converts,an,entire,response,into,a,json,string,this,is,useful,for,responses,that,we,don,t,parse,on,the,client,side,but,instead,work,as,string,such,as,in,case,of,the,license,json;static,string,convert,response,to,json,response,response,throws,ioexception,http,entity,entity,response,get,entity,if,entity,null,throw,new,illegal,state,exception,response,body,expected,but,not,returned,if,entity,get,content,type,null,throw,new,illegal,state,exception,elasticsearch,didn,t,return,the,content,type,header,unable,to,parse,response,body,xcontent,type,x,content,type,xcontent,type,from,media,type,or,format,entity,get,content,type,get,value,if,x,content,type,null,throw,new,illegal,state,exception,unsupported,content,type,entity,get,content,type,get,value,if,x,content,type,xcontent,type,json,return,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,else,try,input,stream,stream,response,get,entity,get,content,xcontent,parser,parser,xcontent,factory,x,content,x,content,type,create,parser,named,xcontent,registry,empty,deprecation,handler,stream,parser,next,token,xcontent,builder,builder,xcontent,factory,json,builder,builder,copy,current,structure,parser,return,strings,to,string,builder
LicenseClient -> static String convertResponseToJson(Response response) throws IOException;1540238977;Converts an entire response into a json string__This is useful for responses that we don't parse on the client side, but instead work as string_such as in case of the license JSON;static String convertResponseToJson(Response response) throws IOException {_        HttpEntity entity = response.getEntity()__        if (entity == null) {_            throw new IllegalStateException("Response body expected but not returned")__        }_        if (entity.getContentType() == null) {_            throw new IllegalStateException("Elasticsearch didn't return the [Content-Type] header, unable to parse response body")__        }_        XContentType xContentType = XContentType.fromMediaTypeOrFormat(entity.getContentType().getValue())__        if (xContentType == null) {_            throw new IllegalStateException("Unsupported Content-Type: " + entity.getContentType().getValue())__        }_        if (xContentType == XContentType.JSON) {_            _            return Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8))__        } else {_            _            try (InputStream stream = response.getEntity().getContent()__                 XContentParser parser = XContentFactory.xContent(xContentType).createParser(NamedXContentRegistry.EMPTY,_                     DeprecationHandler.THROW_UNSUPPORTED_OPERATION, stream)) {_                parser.nextToken()__                XContentBuilder builder = XContentFactory.jsonBuilder()__                builder.copyCurrentStructure(parser)__                return Strings.toString(builder)__            }_        }_    };converts,an,entire,response,into,a,json,string,this,is,useful,for,responses,that,we,don,t,parse,on,the,client,side,but,instead,work,as,string,such,as,in,case,of,the,license,json;static,string,convert,response,to,json,response,response,throws,ioexception,http,entity,entity,response,get,entity,if,entity,null,throw,new,illegal,state,exception,response,body,expected,but,not,returned,if,entity,get,content,type,null,throw,new,illegal,state,exception,elasticsearch,didn,t,return,the,content,type,header,unable,to,parse,response,body,xcontent,type,x,content,type,xcontent,type,from,media,type,or,format,entity,get,content,type,get,value,if,x,content,type,null,throw,new,illegal,state,exception,unsupported,content,type,entity,get,content,type,get,value,if,x,content,type,xcontent,type,json,return,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,else,try,input,stream,stream,response,get,entity,get,content,xcontent,parser,parser,xcontent,factory,x,content,x,content,type,create,parser,named,xcontent,registry,empty,deprecation,handler,stream,parser,next,token,xcontent,builder,builder,xcontent,factory,json,builder,builder,copy,current,structure,parser,return,strings,to,string,builder
LicenseClient -> static String convertResponseToJson(Response response) throws IOException;1542120779;Converts an entire response into a json string__This is useful for responses that we don't parse on the client side, but instead work as string_such as in case of the license JSON;static String convertResponseToJson(Response response) throws IOException {_        HttpEntity entity = response.getEntity()__        if (entity == null) {_            throw new IllegalStateException("Response body expected but not returned")__        }_        if (entity.getContentType() == null) {_            throw new IllegalStateException("Elasticsearch didn't return the [Content-Type] header, unable to parse response body")__        }_        XContentType xContentType = XContentType.fromMediaTypeOrFormat(entity.getContentType().getValue())__        if (xContentType == null) {_            throw new IllegalStateException("Unsupported Content-Type: " + entity.getContentType().getValue())__        }_        if (xContentType == XContentType.JSON) {_            _            return Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8))__        } else {_            _            try (InputStream stream = response.getEntity().getContent()__                 XContentParser parser = XContentFactory.xContent(xContentType).createParser(NamedXContentRegistry.EMPTY,_                     DeprecationHandler.THROW_UNSUPPORTED_OPERATION, stream)) {_                parser.nextToken()__                XContentBuilder builder = XContentFactory.jsonBuilder()__                builder.copyCurrentStructure(parser)__                return Strings.toString(builder)__            }_        }_    };converts,an,entire,response,into,a,json,string,this,is,useful,for,responses,that,we,don,t,parse,on,the,client,side,but,instead,work,as,string,such,as,in,case,of,the,license,json;static,string,convert,response,to,json,response,response,throws,ioexception,http,entity,entity,response,get,entity,if,entity,null,throw,new,illegal,state,exception,response,body,expected,but,not,returned,if,entity,get,content,type,null,throw,new,illegal,state,exception,elasticsearch,didn,t,return,the,content,type,header,unable,to,parse,response,body,xcontent,type,x,content,type,xcontent,type,from,media,type,or,format,entity,get,content,type,get,value,if,x,content,type,null,throw,new,illegal,state,exception,unsupported,content,type,entity,get,content,type,get,value,if,x,content,type,xcontent,type,json,return,streams,copy,to,string,new,input,stream,reader,response,get,entity,get,content,standard,charsets,else,try,input,stream,stream,response,get,entity,get,content,xcontent,parser,parser,xcontent,factory,x,content,x,content,type,create,parser,named,xcontent,registry,empty,deprecation,handler,stream,parser,next,token,xcontent,builder,builder,xcontent,factory,json,builder,builder,copy,current,structure,parser,return,strings,to,string,builder
LicenseClient -> public StartBasicResponse startBasic(StartBasicRequest request, RequestOptions options) throws IOException;1539723533;Initiates an indefinite basic license._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public StartBasicResponse startBasic(StartBasicRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequestAndParseEntity(request, LicenseRequestConverters::startBasic, options,_            StartBasicResponse::fromXContent, emptySet())__    };initiates,an,indefinite,basic,license,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,start,basic,response,start,basic,start,basic,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,and,parse,entity,request,license,request,converters,start,basic,options,start,basic,response,from,xcontent,empty,set
LicenseClient -> public StartBasicResponse startBasic(StartBasicRequest request, RequestOptions options) throws IOException;1539796943;Initiates an indefinite basic license._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public StartBasicResponse startBasic(StartBasicRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequestAndParseEntity(request, LicenseRequestConverters::startBasic, options,_            StartBasicResponse::fromXContent, emptySet())__    };initiates,an,indefinite,basic,license,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,start,basic,response,start,basic,start,basic,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,and,parse,entity,request,license,request,converters,start,basic,options,start,basic,response,from,xcontent,empty,set
LicenseClient -> public StartBasicResponse startBasic(StartBasicRequest request, RequestOptions options) throws IOException;1540238977;Initiates an indefinite basic license._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public StartBasicResponse startBasic(StartBasicRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequestAndParseEntity(request, LicenseRequestConverters::startBasic, options,_            StartBasicResponse::fromXContent, emptySet())__    };initiates,an,indefinite,basic,license,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,start,basic,response,start,basic,start,basic,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,and,parse,entity,request,license,request,converters,start,basic,options,start,basic,response,from,xcontent,empty,set
LicenseClient -> public StartBasicResponse startBasic(StartBasicRequest request, RequestOptions options) throws IOException;1542120779;Initiates an indefinite basic license._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public StartBasicResponse startBasic(StartBasicRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequestAndParseEntity(request, LicenseRequestConverters::startBasic, options,_            StartBasicResponse::fromXContent, emptySet())__    };initiates,an,indefinite,basic,license,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,start,basic,response,start,basic,start,basic,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,and,parse,entity,request,license,request,converters,start,basic,options,start,basic,response,from,xcontent,empty,set
LicenseClient -> public void startBasicAsync(StartBasicRequest request, RequestOptions options,                                 ActionListener<StartBasicResponse> listener);1539723533;Asynchronously initiates an indefinite basic license._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void startBasicAsync(StartBasicRequest request, RequestOptions options,_                                ActionListener<StartBasicResponse> listener) {_        restHighLevelClient.performRequestAsyncAndParseEntity(request, LicenseRequestConverters::startBasic, options,_            StartBasicResponse::fromXContent, listener, emptySet())__    };asynchronously,initiates,an,indefinite,basic,license,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,start,basic,async,start,basic,request,request,request,options,options,action,listener,start,basic,response,listener,rest,high,level,client,perform,request,async,and,parse,entity,request,license,request,converters,start,basic,options,start,basic,response,from,xcontent,listener,empty,set
LicenseClient -> public void startBasicAsync(StartBasicRequest request, RequestOptions options,                                 ActionListener<StartBasicResponse> listener);1539796943;Asynchronously initiates an indefinite basic license._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void startBasicAsync(StartBasicRequest request, RequestOptions options,_                                ActionListener<StartBasicResponse> listener) {_        restHighLevelClient.performRequestAsyncAndParseEntity(request, LicenseRequestConverters::startBasic, options,_            StartBasicResponse::fromXContent, listener, emptySet())__    };asynchronously,initiates,an,indefinite,basic,license,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,start,basic,async,start,basic,request,request,request,options,options,action,listener,start,basic,response,listener,rest,high,level,client,perform,request,async,and,parse,entity,request,license,request,converters,start,basic,options,start,basic,response,from,xcontent,listener,empty,set
LicenseClient -> public void startBasicAsync(StartBasicRequest request, RequestOptions options,                                 ActionListener<StartBasicResponse> listener);1540238977;Asynchronously initiates an indefinite basic license._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void startBasicAsync(StartBasicRequest request, RequestOptions options,_                                ActionListener<StartBasicResponse> listener) {_        restHighLevelClient.performRequestAsyncAndParseEntity(request, LicenseRequestConverters::startBasic, options,_            StartBasicResponse::fromXContent, listener, emptySet())__    };asynchronously,initiates,an,indefinite,basic,license,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,start,basic,async,start,basic,request,request,request,options,options,action,listener,start,basic,response,listener,rest,high,level,client,perform,request,async,and,parse,entity,request,license,request,converters,start,basic,options,start,basic,response,from,xcontent,listener,empty,set
LicenseClient -> public void startBasicAsync(StartBasicRequest request, RequestOptions options,                                 ActionListener<StartBasicResponse> listener);1542120779;Asynchronously initiates an indefinite basic license._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void startBasicAsync(StartBasicRequest request, RequestOptions options,_                                ActionListener<StartBasicResponse> listener) {_        restHighLevelClient.performRequestAsyncAndParseEntity(request, LicenseRequestConverters::startBasic, options,_            StartBasicResponse::fromXContent, listener, emptySet())__    };asynchronously,initiates,an,indefinite,basic,license,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,start,basic,async,start,basic,request,request,request,options,options,action,listener,start,basic,response,listener,rest,high,level,client,perform,request,async,and,parse,entity,request,license,request,converters,start,basic,options,start,basic,response,from,xcontent,listener,empty,set
LicenseClient -> public void deleteLicenseAsync(DeleteLicenseRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener);1534362961;Asynchronously deletes license from the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void deleteLicenseAsync(DeleteLicenseRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {_        restHighLevelClient.performRequestAsyncAndParseEntity(request, RequestConverters::deleteLicense, options,_            AcknowledgedResponse::fromXContent, listener, emptySet())__    };asynchronously,deletes,license,from,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,delete,license,async,delete,license,request,request,request,options,options,action,listener,acknowledged,response,listener,rest,high,level,client,perform,request,async,and,parse,entity,request,request,converters,delete,license,options,acknowledged,response,from,xcontent,listener,empty,set
LicenseClient -> public void deleteLicenseAsync(DeleteLicenseRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener);1536314350;Asynchronously deletes license from the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void deleteLicenseAsync(DeleteLicenseRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {_        restHighLevelClient.performRequestAsyncAndParseEntity(request, LicenseRequestConverters::deleteLicense, options,_            AcknowledgedResponse::fromXContent, listener, emptySet())__    };asynchronously,deletes,license,from,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,delete,license,async,delete,license,request,request,request,options,options,action,listener,acknowledged,response,listener,rest,high,level,client,perform,request,async,and,parse,entity,request,license,request,converters,delete,license,options,acknowledged,response,from,xcontent,listener,empty,set
LicenseClient -> public void deleteLicenseAsync(DeleteLicenseRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener);1539723533;Asynchronously deletes license from the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void deleteLicenseAsync(DeleteLicenseRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {_        restHighLevelClient.performRequestAsyncAndParseEntity(request, LicenseRequestConverters::deleteLicense, options,_            AcknowledgedResponse::fromXContent, listener, emptySet())__    };asynchronously,deletes,license,from,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,delete,license,async,delete,license,request,request,request,options,options,action,listener,acknowledged,response,listener,rest,high,level,client,perform,request,async,and,parse,entity,request,license,request,converters,delete,license,options,acknowledged,response,from,xcontent,listener,empty,set
LicenseClient -> public void deleteLicenseAsync(DeleteLicenseRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener);1539796943;Asynchronously deletes license from the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void deleteLicenseAsync(DeleteLicenseRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {_        restHighLevelClient.performRequestAsyncAndParseEntity(request, LicenseRequestConverters::deleteLicense, options,_            AcknowledgedResponse::fromXContent, listener, emptySet())__    };asynchronously,deletes,license,from,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,delete,license,async,delete,license,request,request,request,options,options,action,listener,acknowledged,response,listener,rest,high,level,client,perform,request,async,and,parse,entity,request,license,request,converters,delete,license,options,acknowledged,response,from,xcontent,listener,empty,set
LicenseClient -> public void deleteLicenseAsync(DeleteLicenseRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener);1540238977;Asynchronously deletes license from the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void deleteLicenseAsync(DeleteLicenseRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {_        restHighLevelClient.performRequestAsyncAndParseEntity(request, LicenseRequestConverters::deleteLicense, options,_            AcknowledgedResponse::fromXContent, listener, emptySet())__    };asynchronously,deletes,license,from,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,delete,license,async,delete,license,request,request,request,options,options,action,listener,acknowledged,response,listener,rest,high,level,client,perform,request,async,and,parse,entity,request,license,request,converters,delete,license,options,acknowledged,response,from,xcontent,listener,empty,set
LicenseClient -> public void deleteLicenseAsync(DeleteLicenseRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener);1542120779;Asynchronously deletes license from the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void deleteLicenseAsync(DeleteLicenseRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {_        restHighLevelClient.performRequestAsyncAndParseEntity(request, LicenseRequestConverters::deleteLicense, options,_            AcknowledgedResponse::fromXContent, listener, emptySet())__    };asynchronously,deletes,license,from,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,delete,license,async,delete,license,request,request,request,options,options,action,listener,acknowledged,response,listener,rest,high,level,client,perform,request,async,and,parse,entity,request,license,request,converters,delete,license,options,acknowledged,response,from,xcontent,listener,empty,set
LicenseClient -> public void putLicenseAsync(PutLicenseRequest request, RequestOptions options, ActionListener<PutLicenseResponse> listener);1532456624;Asynchronously updates license for the cluster cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void putLicenseAsync(PutLicenseRequest request, RequestOptions options, ActionListener<PutLicenseResponse> listener) {_        restHighLevelClient.performRequestAsyncAndParseEntity(request, RequestConverters::putLicense, options,_            PutLicenseResponse::fromXContent, listener, emptySet())__    };asynchronously,updates,license,for,the,cluster,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,put,license,async,put,license,request,request,request,options,options,action,listener,put,license,response,listener,rest,high,level,client,perform,request,async,and,parse,entity,request,request,converters,put,license,options,put,license,response,from,xcontent,listener,empty,set
LicenseClient -> public void putLicenseAsync(PutLicenseRequest request, RequestOptions options, ActionListener<PutLicenseResponse> listener);1533641732;Asynchronously updates license for the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void putLicenseAsync(PutLicenseRequest request, RequestOptions options, ActionListener<PutLicenseResponse> listener) {_        restHighLevelClient.performRequestAsyncAndParseEntity(request, RequestConverters::putLicense, options,_            PutLicenseResponse::fromXContent, listener, emptySet())__    };asynchronously,updates,license,for,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,put,license,async,put,license,request,request,request,options,options,action,listener,put,license,response,listener,rest,high,level,client,perform,request,async,and,parse,entity,request,request,converters,put,license,options,put,license,response,from,xcontent,listener,empty,set
LicenseClient -> public void putLicenseAsync(PutLicenseRequest request, RequestOptions options, ActionListener<PutLicenseResponse> listener);1534176840;Asynchronously updates license for the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void putLicenseAsync(PutLicenseRequest request, RequestOptions options, ActionListener<PutLicenseResponse> listener) {_        restHighLevelClient.performRequestAsyncAndParseEntity(request, RequestConverters::putLicense, options,_            PutLicenseResponse::fromXContent, listener, emptySet())__    };asynchronously,updates,license,for,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,put,license,async,put,license,request,request,request,options,options,action,listener,put,license,response,listener,rest,high,level,client,perform,request,async,and,parse,entity,request,request,converters,put,license,options,put,license,response,from,xcontent,listener,empty,set
LicenseClient -> public void putLicenseAsync(PutLicenseRequest request, RequestOptions options, ActionListener<PutLicenseResponse> listener);1534248446;Asynchronously updates license for the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void putLicenseAsync(PutLicenseRequest request, RequestOptions options, ActionListener<PutLicenseResponse> listener) {_        restHighLevelClient.performRequestAsyncAndParseEntity(request, RequestConverters::putLicense, options,_            PutLicenseResponse::fromXContent, listener, emptySet())__    };asynchronously,updates,license,for,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,put,license,async,put,license,request,request,request,options,options,action,listener,put,license,response,listener,rest,high,level,client,perform,request,async,and,parse,entity,request,request,converters,put,license,options,put,license,response,from,xcontent,listener,empty,set
LicenseClient -> public void putLicenseAsync(PutLicenseRequest request, RequestOptions options, ActionListener<PutLicenseResponse> listener);1534362961;Asynchronously updates license for the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void putLicenseAsync(PutLicenseRequest request, RequestOptions options, ActionListener<PutLicenseResponse> listener) {_        restHighLevelClient.performRequestAsyncAndParseEntity(request, RequestConverters::putLicense, options,_            PutLicenseResponse::fromXContent, listener, emptySet())__    };asynchronously,updates,license,for,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,put,license,async,put,license,request,request,request,options,options,action,listener,put,license,response,listener,rest,high,level,client,perform,request,async,and,parse,entity,request,request,converters,put,license,options,put,license,response,from,xcontent,listener,empty,set
LicenseClient -> public void putLicenseAsync(PutLicenseRequest request, RequestOptions options, ActionListener<PutLicenseResponse> listener);1536314350;Asynchronously updates license for the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void putLicenseAsync(PutLicenseRequest request, RequestOptions options, ActionListener<PutLicenseResponse> listener) {_        restHighLevelClient.performRequestAsyncAndParseEntity(request, LicenseRequestConverters::putLicense, options,_            PutLicenseResponse::fromXContent, listener, emptySet())__    };asynchronously,updates,license,for,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,put,license,async,put,license,request,request,request,options,options,action,listener,put,license,response,listener,rest,high,level,client,perform,request,async,and,parse,entity,request,license,request,converters,put,license,options,put,license,response,from,xcontent,listener,empty,set
LicenseClient -> public void putLicenseAsync(PutLicenseRequest request, RequestOptions options, ActionListener<PutLicenseResponse> listener);1539723533;Asynchronously updates license for the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void putLicenseAsync(PutLicenseRequest request, RequestOptions options, ActionListener<PutLicenseResponse> listener) {_        restHighLevelClient.performRequestAsyncAndParseEntity(request, LicenseRequestConverters::putLicense, options,_            PutLicenseResponse::fromXContent, listener, emptySet())__    };asynchronously,updates,license,for,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,put,license,async,put,license,request,request,request,options,options,action,listener,put,license,response,listener,rest,high,level,client,perform,request,async,and,parse,entity,request,license,request,converters,put,license,options,put,license,response,from,xcontent,listener,empty,set
LicenseClient -> public void putLicenseAsync(PutLicenseRequest request, RequestOptions options, ActionListener<PutLicenseResponse> listener);1539796943;Asynchronously updates license for the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void putLicenseAsync(PutLicenseRequest request, RequestOptions options, ActionListener<PutLicenseResponse> listener) {_        restHighLevelClient.performRequestAsyncAndParseEntity(request, LicenseRequestConverters::putLicense, options,_            PutLicenseResponse::fromXContent, listener, emptySet())__    };asynchronously,updates,license,for,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,put,license,async,put,license,request,request,request,options,options,action,listener,put,license,response,listener,rest,high,level,client,perform,request,async,and,parse,entity,request,license,request,converters,put,license,options,put,license,response,from,xcontent,listener,empty,set
LicenseClient -> public void putLicenseAsync(PutLicenseRequest request, RequestOptions options, ActionListener<PutLicenseResponse> listener);1540238977;Asynchronously updates license for the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void putLicenseAsync(PutLicenseRequest request, RequestOptions options, ActionListener<PutLicenseResponse> listener) {_        restHighLevelClient.performRequestAsyncAndParseEntity(request, LicenseRequestConverters::putLicense, options,_            PutLicenseResponse::fromXContent, listener, emptySet())__    };asynchronously,updates,license,for,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,put,license,async,put,license,request,request,request,options,options,action,listener,put,license,response,listener,rest,high,level,client,perform,request,async,and,parse,entity,request,license,request,converters,put,license,options,put,license,response,from,xcontent,listener,empty,set
LicenseClient -> public void putLicenseAsync(PutLicenseRequest request, RequestOptions options, ActionListener<PutLicenseResponse> listener);1542120779;Asynchronously updates license for the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void putLicenseAsync(PutLicenseRequest request, RequestOptions options, ActionListener<PutLicenseResponse> listener) {_        restHighLevelClient.performRequestAsyncAndParseEntity(request, LicenseRequestConverters::putLicense, options,_            PutLicenseResponse::fromXContent, listener, emptySet())__    };asynchronously,updates,license,for,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,put,license,async,put,license,request,request,request,options,options,action,listener,put,license,response,listener,rest,high,level,client,perform,request,async,and,parse,entity,request,license,request,converters,put,license,options,put,license,response,from,xcontent,listener,empty,set
LicenseClient -> public void startTrialAsync(StartTrialRequest request,                                 RequestOptions options,                                 ActionListener<StartTrialResponse> listener);1539796943;Asynchronously starts a trial license on the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void startTrialAsync(StartTrialRequest request,_                                RequestOptions options,_                                ActionListener<StartTrialResponse> listener) {__        restHighLevelClient.performRequestAsyncAndParseEntity(request, LicenseRequestConverters::startTrial, options,_            StartTrialResponse::fromXContent, listener, singleton(403))__    };asynchronously,starts,a,trial,license,on,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,start,trial,async,start,trial,request,request,request,options,options,action,listener,start,trial,response,listener,rest,high,level,client,perform,request,async,and,parse,entity,request,license,request,converters,start,trial,options,start,trial,response,from,xcontent,listener,singleton,403
LicenseClient -> public void startTrialAsync(StartTrialRequest request,                                 RequestOptions options,                                 ActionListener<StartTrialResponse> listener);1540238977;Asynchronously starts a trial license on the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void startTrialAsync(StartTrialRequest request,_                                RequestOptions options,_                                ActionListener<StartTrialResponse> listener) {__        restHighLevelClient.performRequestAsyncAndParseEntity(request, LicenseRequestConverters::startTrial, options,_            StartTrialResponse::fromXContent, listener, singleton(403))__    };asynchronously,starts,a,trial,license,on,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,start,trial,async,start,trial,request,request,request,options,options,action,listener,start,trial,response,listener,rest,high,level,client,perform,request,async,and,parse,entity,request,license,request,converters,start,trial,options,start,trial,response,from,xcontent,listener,singleton,403
LicenseClient -> public void startTrialAsync(StartTrialRequest request,                                 RequestOptions options,                                 ActionListener<StartTrialResponse> listener);1542120779;Asynchronously starts a trial license on the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void startTrialAsync(StartTrialRequest request,_                                RequestOptions options,_                                ActionListener<StartTrialResponse> listener) {__        restHighLevelClient.performRequestAsyncAndParseEntity(request, LicenseRequestConverters::startTrial, options,_            StartTrialResponse::fromXContent, listener, singleton(403))__    };asynchronously,starts,a,trial,license,on,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,start,trial,async,start,trial,request,request,request,options,options,action,listener,start,trial,response,listener,rest,high,level,client,perform,request,async,and,parse,entity,request,license,request,converters,start,trial,options,start,trial,response,from,xcontent,listener,singleton,403
LicenseClient -> public AcknowledgedResponse deleteLicense(DeleteLicenseRequest request, RequestOptions options) throws IOException;1534362961;Deletes license from the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public AcknowledgedResponse deleteLicense(DeleteLicenseRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequestAndParseEntity(request, RequestConverters::deleteLicense, options,_            AcknowledgedResponse::fromXContent, emptySet())__    };deletes,license,from,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,acknowledged,response,delete,license,delete,license,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,and,parse,entity,request,request,converters,delete,license,options,acknowledged,response,from,xcontent,empty,set
LicenseClient -> public AcknowledgedResponse deleteLicense(DeleteLicenseRequest request, RequestOptions options) throws IOException;1536314350;Deletes license from the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public AcknowledgedResponse deleteLicense(DeleteLicenseRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequestAndParseEntity(request, LicenseRequestConverters::deleteLicense, options,_            AcknowledgedResponse::fromXContent, emptySet())__    };deletes,license,from,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,acknowledged,response,delete,license,delete,license,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,and,parse,entity,request,license,request,converters,delete,license,options,acknowledged,response,from,xcontent,empty,set
LicenseClient -> public AcknowledgedResponse deleteLicense(DeleteLicenseRequest request, RequestOptions options) throws IOException;1539723533;Deletes license from the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public AcknowledgedResponse deleteLicense(DeleteLicenseRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequestAndParseEntity(request, LicenseRequestConverters::deleteLicense, options,_            AcknowledgedResponse::fromXContent, emptySet())__    };deletes,license,from,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,acknowledged,response,delete,license,delete,license,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,and,parse,entity,request,license,request,converters,delete,license,options,acknowledged,response,from,xcontent,empty,set
LicenseClient -> public AcknowledgedResponse deleteLicense(DeleteLicenseRequest request, RequestOptions options) throws IOException;1539796943;Deletes license from the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public AcknowledgedResponse deleteLicense(DeleteLicenseRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequestAndParseEntity(request, LicenseRequestConverters::deleteLicense, options,_            AcknowledgedResponse::fromXContent, emptySet())__    };deletes,license,from,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,acknowledged,response,delete,license,delete,license,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,and,parse,entity,request,license,request,converters,delete,license,options,acknowledged,response,from,xcontent,empty,set
LicenseClient -> public AcknowledgedResponse deleteLicense(DeleteLicenseRequest request, RequestOptions options) throws IOException;1540238977;Deletes license from the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public AcknowledgedResponse deleteLicense(DeleteLicenseRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequestAndParseEntity(request, LicenseRequestConverters::deleteLicense, options,_            AcknowledgedResponse::fromXContent, emptySet())__    };deletes,license,from,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,acknowledged,response,delete,license,delete,license,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,and,parse,entity,request,license,request,converters,delete,license,options,acknowledged,response,from,xcontent,empty,set
LicenseClient -> public AcknowledgedResponse deleteLicense(DeleteLicenseRequest request, RequestOptions options) throws IOException;1542120779;Deletes license from the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public AcknowledgedResponse deleteLicense(DeleteLicenseRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequestAndParseEntity(request, LicenseRequestConverters::deleteLicense, options,_            AcknowledgedResponse::fromXContent, emptySet())__    };deletes,license,from,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,acknowledged,response,delete,license,delete,license,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,and,parse,entity,request,license,request,converters,delete,license,options,acknowledged,response,from,xcontent,empty,set
LicenseClient -> public void getLicenseAsync(GetLicenseRequest request, RequestOptions options, ActionListener<GetLicenseResponse> listener);1533641732;Asynchronously returns the current license for the cluster cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void getLicenseAsync(GetLicenseRequest request, RequestOptions options, ActionListener<GetLicenseResponse> listener) {_        restHighLevelClient.performRequestAsync(request, RequestConverters::getLicense, options,_            response -> new GetLicenseResponse(convertResponseToJson(response)), listener, emptySet())__    };asynchronously,returns,the,current,license,for,the,cluster,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,get,license,async,get,license,request,request,request,options,options,action,listener,get,license,response,listener,rest,high,level,client,perform,request,async,request,request,converters,get,license,options,response,new,get,license,response,convert,response,to,json,response,listener,empty,set
LicenseClient -> public void getLicenseAsync(GetLicenseRequest request, RequestOptions options, ActionListener<GetLicenseResponse> listener);1534176840;Asynchronously returns the current license for the cluster cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void getLicenseAsync(GetLicenseRequest request, RequestOptions options, ActionListener<GetLicenseResponse> listener) {_        restHighLevelClient.performRequestAsync(request, RequestConverters::getLicense, options,_            response -> new GetLicenseResponse(convertResponseToJson(response)), listener, emptySet())__    };asynchronously,returns,the,current,license,for,the,cluster,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,get,license,async,get,license,request,request,request,options,options,action,listener,get,license,response,listener,rest,high,level,client,perform,request,async,request,request,converters,get,license,options,response,new,get,license,response,convert,response,to,json,response,listener,empty,set
LicenseClient -> public void getLicenseAsync(GetLicenseRequest request, RequestOptions options, ActionListener<GetLicenseResponse> listener);1534248446;Asynchronously returns the current license for the cluster cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void getLicenseAsync(GetLicenseRequest request, RequestOptions options, ActionListener<GetLicenseResponse> listener) {_        restHighLevelClient.performRequestAsync(request, RequestConverters::getLicense, options,_            response -> new GetLicenseResponse(convertResponseToJson(response)), listener, emptySet())__    };asynchronously,returns,the,current,license,for,the,cluster,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,get,license,async,get,license,request,request,request,options,options,action,listener,get,license,response,listener,rest,high,level,client,perform,request,async,request,request,converters,get,license,options,response,new,get,license,response,convert,response,to,json,response,listener,empty,set
LicenseClient -> public void getLicenseAsync(GetLicenseRequest request, RequestOptions options, ActionListener<GetLicenseResponse> listener);1534362961;Asynchronously returns the current license for the cluster cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void getLicenseAsync(GetLicenseRequest request, RequestOptions options, ActionListener<GetLicenseResponse> listener) {_        restHighLevelClient.performRequestAsync(request, RequestConverters::getLicense, options,_            response -> new GetLicenseResponse(convertResponseToJson(response)), listener, emptySet())__    };asynchronously,returns,the,current,license,for,the,cluster,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,get,license,async,get,license,request,request,request,options,options,action,listener,get,license,response,listener,rest,high,level,client,perform,request,async,request,request,converters,get,license,options,response,new,get,license,response,convert,response,to,json,response,listener,empty,set
LicenseClient -> public void getLicenseAsync(GetLicenseRequest request, RequestOptions options, ActionListener<GetLicenseResponse> listener);1536314350;Asynchronously returns the current license for the cluster cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void getLicenseAsync(GetLicenseRequest request, RequestOptions options, ActionListener<GetLicenseResponse> listener) {_        restHighLevelClient.performRequestAsync(request, LicenseRequestConverters::getLicense, options,_            response -> new GetLicenseResponse(convertResponseToJson(response)), listener, emptySet())__    };asynchronously,returns,the,current,license,for,the,cluster,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,get,license,async,get,license,request,request,request,options,options,action,listener,get,license,response,listener,rest,high,level,client,perform,request,async,request,license,request,converters,get,license,options,response,new,get,license,response,convert,response,to,json,response,listener,empty,set
LicenseClient -> public void getLicenseAsync(GetLicenseRequest request, RequestOptions options, ActionListener<GetLicenseResponse> listener);1539723533;Asynchronously returns the current license for the cluster cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void getLicenseAsync(GetLicenseRequest request, RequestOptions options, ActionListener<GetLicenseResponse> listener) {_        restHighLevelClient.performRequestAsync(request, LicenseRequestConverters::getLicense, options,_            response -> new GetLicenseResponse(convertResponseToJson(response)), listener, emptySet())__    };asynchronously,returns,the,current,license,for,the,cluster,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,get,license,async,get,license,request,request,request,options,options,action,listener,get,license,response,listener,rest,high,level,client,perform,request,async,request,license,request,converters,get,license,options,response,new,get,license,response,convert,response,to,json,response,listener,empty,set
LicenseClient -> public void getLicenseAsync(GetLicenseRequest request, RequestOptions options, ActionListener<GetLicenseResponse> listener);1539796943;Asynchronously returns the current license for the cluster cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void getLicenseAsync(GetLicenseRequest request, RequestOptions options, ActionListener<GetLicenseResponse> listener) {_        restHighLevelClient.performRequestAsync(request, LicenseRequestConverters::getLicense, options,_            response -> new GetLicenseResponse(convertResponseToJson(response)), listener, emptySet())__    };asynchronously,returns,the,current,license,for,the,cluster,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,get,license,async,get,license,request,request,request,options,options,action,listener,get,license,response,listener,rest,high,level,client,perform,request,async,request,license,request,converters,get,license,options,response,new,get,license,response,convert,response,to,json,response,listener,empty,set
LicenseClient -> public void getLicenseAsync(GetLicenseRequest request, RequestOptions options, ActionListener<GetLicenseResponse> listener);1540238977;Asynchronously returns the current license for the cluster cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void getLicenseAsync(GetLicenseRequest request, RequestOptions options, ActionListener<GetLicenseResponse> listener) {_        restHighLevelClient.performRequestAsync(request, LicenseRequestConverters::getLicense, options,_            response -> new GetLicenseResponse(convertResponseToJson(response)), listener, emptySet())__    };asynchronously,returns,the,current,license,for,the,cluster,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,get,license,async,get,license,request,request,request,options,options,action,listener,get,license,response,listener,rest,high,level,client,perform,request,async,request,license,request,converters,get,license,options,response,new,get,license,response,convert,response,to,json,response,listener,empty,set
LicenseClient -> public void getLicenseAsync(GetLicenseRequest request, RequestOptions options, ActionListener<GetLicenseResponse> listener);1542120779;Asynchronously returns the current license for the cluster cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@param listener the listener to be notified upon request completion;public void getLicenseAsync(GetLicenseRequest request, RequestOptions options, ActionListener<GetLicenseResponse> listener) {_        restHighLevelClient.performRequestAsync(request, LicenseRequestConverters::getLicense, options,_            response -> new GetLicenseResponse(convertResponseToJson(response)), listener, emptySet())__    };asynchronously,returns,the,current,license,for,the,cluster,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,param,listener,the,listener,to,be,notified,upon,request,completion;public,void,get,license,async,get,license,request,request,request,options,options,action,listener,get,license,response,listener,rest,high,level,client,perform,request,async,request,license,request,converters,get,license,options,response,new,get,license,response,convert,response,to,json,response,listener,empty,set
LicenseClient -> public StartTrialResponse startTrial(StartTrialRequest request, RequestOptions options) throws IOException;1539796943;Starts a trial license on the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public StartTrialResponse startTrial(StartTrialRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequestAndParseEntity(request, LicenseRequestConverters::startTrial, options,_            StartTrialResponse::fromXContent, singleton(403))__    };starts,a,trial,license,on,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,start,trial,response,start,trial,start,trial,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,and,parse,entity,request,license,request,converters,start,trial,options,start,trial,response,from,xcontent,singleton,403
LicenseClient -> public StartTrialResponse startTrial(StartTrialRequest request, RequestOptions options) throws IOException;1540238977;Starts a trial license on the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public StartTrialResponse startTrial(StartTrialRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequestAndParseEntity(request, LicenseRequestConverters::startTrial, options,_            StartTrialResponse::fromXContent, singleton(403))__    };starts,a,trial,license,on,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,start,trial,response,start,trial,start,trial,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,and,parse,entity,request,license,request,converters,start,trial,options,start,trial,response,from,xcontent,singleton,403
LicenseClient -> public StartTrialResponse startTrial(StartTrialRequest request, RequestOptions options) throws IOException;1542120779;Starts a trial license on the cluster._@param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized_@return the response_@throws IOException in case there is a problem sending the request or parsing back the response;public StartTrialResponse startTrial(StartTrialRequest request, RequestOptions options) throws IOException {_        return restHighLevelClient.performRequestAndParseEntity(request, LicenseRequestConverters::startTrial, options,_            StartTrialResponse::fromXContent, singleton(403))__    };starts,a,trial,license,on,the,cluster,param,options,the,request,options,e,g,headers,use,link,request,options,default,if,nothing,needs,to,be,customized,return,the,response,throws,ioexception,in,case,there,is,a,problem,sending,the,request,or,parsing,back,the,response;public,start,trial,response,start,trial,start,trial,request,request,request,options,options,throws,ioexception,return,rest,high,level,client,perform,request,and,parse,entity,request,license,request,converters,start,trial,options,start,trial,response,from,xcontent,singleton,403
