commented;modifiers;parameterAmount;loc;comment;code
false;static;1;12;;static Request changePassword(ChangePasswordRequest changePasswordRequest) throws IOException {     String endpoint = new RequestConverters.EndpointBuilder().addPathPartAsIs("_security/user").addPathPart(changePasswordRequest.getUsername()).addPathPartAsIs("_password").build().     Request request = new Request(HttpPost.METHOD_NAME, endpoint).     request.setEntity(createEntity(changePasswordRequest, REQUEST_BODY_CONTENT_TYPE)).     RequestConverters.Params params = new RequestConverters.Params(request).     params.withRefreshPolicy(changePasswordRequest.getRefreshPolicy()).     return request. }
false;static;1;8;;static Request getUsers(GetUsersRequest getUsersRequest) {     RequestConverters.EndpointBuilder builder = new RequestConverters.EndpointBuilder().addPathPartAsIs("_security/user").     if (getUsersRequest.getUsernames().size() > 0) {         builder.addPathPart(Strings.collectionToCommaDelimitedString(getUsersRequest.getUsernames())).     }     return new Request(HttpGet.METHOD_NAME, builder.build()). }
false;static;1;11;;static Request putUser(PutUserRequest putUserRequest) throws IOException {     String endpoint = new RequestConverters.EndpointBuilder().addPathPartAsIs("_security/user").addPathPart(putUserRequest.getUser().getUsername()).build().     Request request = new Request(HttpPut.METHOD_NAME, endpoint).     request.setEntity(createEntity(putUserRequest, REQUEST_BODY_CONTENT_TYPE)).     RequestConverters.Params params = new RequestConverters.Params(request).     params.withRefreshPolicy(putUserRequest.getRefreshPolicy()).     return request. }
false;static;1;10;;static Request deleteUser(DeleteUserRequest deleteUserRequest) {     String endpoint = new RequestConverters.EndpointBuilder().addPathPartAsIs("_security", "user").addPathPart(deleteUserRequest.getName()).build().     Request request = new Request(HttpDelete.METHOD_NAME, endpoint).     RequestConverters.Params params = new RequestConverters.Params(request).     params.withRefreshPolicy(deleteUserRequest.getRefreshPolicy()).     return request. }
false;static;1;11;;static Request putRoleMapping(final PutRoleMappingRequest putRoleMappingRequest) throws IOException {     final String endpoint = new RequestConverters.EndpointBuilder().addPathPartAsIs("_security/role_mapping").addPathPart(putRoleMappingRequest.getName()).build().     final Request request = new Request(HttpPut.METHOD_NAME, endpoint).     request.setEntity(createEntity(putRoleMappingRequest, REQUEST_BODY_CONTENT_TYPE)).     final RequestConverters.Params params = new RequestConverters.Params(request).     params.withRefreshPolicy(putRoleMappingRequest.getRefreshPolicy()).     return request. }
false;static;1;8;;static Request getRoleMappings(final GetRoleMappingsRequest getRoleMappingRequest) throws IOException {     RequestConverters.EndpointBuilder builder = new RequestConverters.EndpointBuilder().     builder.addPathPartAsIs("_security/role_mapping").     if (getRoleMappingRequest.getRoleMappingNames().size() > 0) {         builder.addPathPart(Strings.collectionToCommaDelimitedString(getRoleMappingRequest.getRoleMappingNames())).     }     return new Request(HttpGet.METHOD_NAME, builder.build()). }
false;static;1;3;;static Request enableUser(EnableUserRequest enableUserRequest) {     return setUserEnabled(enableUserRequest). }
false;static;1;3;;static Request disableUser(DisableUserRequest disableUserRequest) {     return setUserEnabled(disableUserRequest). }
false;private,static;1;11;;private static Request setUserEnabled(SetUserEnabledRequest setUserEnabledRequest) {     String endpoint = new RequestConverters.EndpointBuilder().addPathPartAsIs("_security/user").addPathPart(setUserEnabledRequest.getUsername()).addPathPart(setUserEnabledRequest.isEnabled() ? "_enable" : "_disable").build().     Request request = new Request(HttpPut.METHOD_NAME, endpoint).     RequestConverters.Params params = new RequestConverters.Params(request).     params.withRefreshPolicy(setUserEnabledRequest.getRefreshPolicy()).     return request. }
false;static;1;5;;static Request hasPrivileges(HasPrivilegesRequest hasPrivilegesRequest) throws IOException {     Request request = new Request(HttpGet.METHOD_NAME, "/_security/user/_has_privileges").     request.setEntity(createEntity(hasPrivilegesRequest, REQUEST_BODY_CONTENT_TYPE)).     return request. }
false;static;1;16;;static Request clearRealmCache(ClearRealmCacheRequest clearRealmCacheRequest) {     RequestConverters.EndpointBuilder builder = new RequestConverters.EndpointBuilder().addPathPartAsIs("_security/realm").     if (clearRealmCacheRequest.getRealms().isEmpty() == false) {         builder.addCommaSeparatedPathParts(clearRealmCacheRequest.getRealms().toArray(Strings.EMPTY_ARRAY)).     } else {         builder.addPathPart("_all").     }     final String endpoint = builder.addPathPartAsIs("_clear_cache").build().     Request request = new Request(HttpPost.METHOD_NAME, endpoint).     if (clearRealmCacheRequest.getUsernames().isEmpty() == false) {         RequestConverters.Params params = new RequestConverters.Params(request).         params.putParam("usernames", Strings.collectionToCommaDelimitedString(clearRealmCacheRequest.getUsernames())).     }     return request. }
false;static;1;8;;static Request clearRolesCache(ClearRolesCacheRequest disableCacheRequest) {     String endpoint = new RequestConverters.EndpointBuilder().addPathPartAsIs("_security/role").addCommaSeparatedPathParts(disableCacheRequest.names()).addPathPart("_clear_cache").build().     return new Request(HttpPost.METHOD_NAME, endpoint). }
false;static;1;10;;static Request deleteRoleMapping(DeleteRoleMappingRequest deleteRoleMappingRequest) {     final String endpoint = new RequestConverters.EndpointBuilder().addPathPartAsIs("_security/role_mapping").addPathPart(deleteRoleMappingRequest.getName()).build().     final Request request = new Request(HttpDelete.METHOD_NAME, endpoint).     final RequestConverters.Params params = new RequestConverters.Params(request).     params.withRefreshPolicy(deleteRoleMappingRequest.getRefreshPolicy()).     return request. }
false;static;1;10;;static Request deleteRole(DeleteRoleRequest deleteRoleRequest) {     String endpoint = new RequestConverters.EndpointBuilder().addPathPartAsIs("_security/role").addPathPart(deleteRoleRequest.getName()).build().     Request request = new Request(HttpDelete.METHOD_NAME, endpoint).     RequestConverters.Params params = new RequestConverters.Params(request).     params.withRefreshPolicy(deleteRoleRequest.getRefreshPolicy()).     return request. }
false;static;1;8;;static Request getRoles(GetRolesRequest getRolesRequest) {     RequestConverters.EndpointBuilder builder = new RequestConverters.EndpointBuilder().     builder.addPathPartAsIs("_security/role").     if (getRolesRequest.getRoleNames().size() > 0) {         builder.addPathPart(Strings.collectionToCommaDelimitedString(getRolesRequest.getRoleNames())).     }     return new Request(HttpGet.METHOD_NAME, builder.build()). }
false;static;1;5;;static Request createToken(CreateTokenRequest createTokenRequest) throws IOException {     Request request = new Request(HttpPost.METHOD_NAME, "/_security/oauth2/token").     request.setEntity(createEntity(createTokenRequest, REQUEST_BODY_CONTENT_TYPE)).     return request. }
false;static;1;5;;static Request invalidateToken(InvalidateTokenRequest invalidateTokenRequest) throws IOException {     Request request = new Request(HttpDelete.METHOD_NAME, "/_security/oauth2/token").     request.setEntity(createEntity(invalidateTokenRequest, REQUEST_BODY_CONTENT_TYPE)).     return request. }
false;static;1;8;;static Request getPrivileges(GetPrivilegesRequest getPrivilegesRequest) {     String endpoint = new RequestConverters.EndpointBuilder().addPathPartAsIs("_security/privilege").addPathPart(getPrivilegesRequest.getApplicationName()).addCommaSeparatedPathParts(getPrivilegesRequest.getPrivilegeNames()).build().     return new Request(HttpGet.METHOD_NAME, endpoint). }
false;static;1;7;;static Request putPrivileges(final PutPrivilegesRequest putPrivilegesRequest) throws IOException {     Request request = new Request(HttpPut.METHOD_NAME, "/_security/privilege").     request.setEntity(createEntity(putPrivilegesRequest, REQUEST_BODY_CONTENT_TYPE)).     RequestConverters.Params params = new RequestConverters.Params(request).     params.withRefreshPolicy(putPrivilegesRequest.getRefreshPolicy()).     return request. }
false;static;1;11;;static Request deletePrivileges(DeletePrivilegesRequest deletePrivilegeRequest) {     String endpoint = new RequestConverters.EndpointBuilder().addPathPartAsIs("_security/privilege").addPathPart(deletePrivilegeRequest.getApplication()).addCommaSeparatedPathParts(deletePrivilegeRequest.getPrivileges()).build().     Request request = new Request(HttpDelete.METHOD_NAME, endpoint).     RequestConverters.Params params = new RequestConverters.Params(request).     params.withRefreshPolicy(deletePrivilegeRequest.getRefreshPolicy()).     return request. }
false;static;1;11;;static Request putRole(final PutRoleRequest putRoleRequest) throws IOException {     final String endpoint = new RequestConverters.EndpointBuilder().addPathPartAsIs("_security/role").addPathPart(putRoleRequest.getRole().getName()).build().     final Request request = new Request(HttpPut.METHOD_NAME, endpoint).     request.setEntity(createEntity(putRoleRequest, REQUEST_BODY_CONTENT_TYPE)).     final RequestConverters.Params params = new RequestConverters.Params(request).     params.withRefreshPolicy(putRoleRequest.getRefreshPolicy()).     return request. }
false;static;1;7;;static Request createApiKey(final CreateApiKeyRequest createApiKeyRequest) throws IOException {     final Request request = new Request(HttpPost.METHOD_NAME, "/_security/api_key").     request.setEntity(createEntity(createApiKeyRequest, REQUEST_BODY_CONTENT_TYPE)).     final RequestConverters.Params params = new RequestConverters.Params(request).     params.withRefreshPolicy(createApiKeyRequest.getRefreshPolicy()).     return request. }
false;static;1;16;;static Request getApiKey(final GetApiKeyRequest getApiKeyRequest) throws IOException {     final Request request = new Request(HttpGet.METHOD_NAME, "/_security/api_key").     if (Strings.hasText(getApiKeyRequest.getId())) {         request.addParameter("id", getApiKeyRequest.getId()).     }     if (Strings.hasText(getApiKeyRequest.getName())) {         request.addParameter("name", getApiKeyRequest.getName()).     }     if (Strings.hasText(getApiKeyRequest.getUserName())) {         request.addParameter("username", getApiKeyRequest.getUserName()).     }     if (Strings.hasText(getApiKeyRequest.getRealmName())) {         request.addParameter("realm_name", getApiKeyRequest.getRealmName()).     }     return request. }
false;static;1;6;;static Request invalidateApiKey(final InvalidateApiKeyRequest invalidateApiKeyRequest) throws IOException {     final Request request = new Request(HttpDelete.METHOD_NAME, "/_security/api_key").     request.setEntity(createEntity(invalidateApiKeyRequest, REQUEST_BODY_CONTENT_TYPE)).     final RequestConverters.Params params = new RequestConverters.Params(request).     return request. }
