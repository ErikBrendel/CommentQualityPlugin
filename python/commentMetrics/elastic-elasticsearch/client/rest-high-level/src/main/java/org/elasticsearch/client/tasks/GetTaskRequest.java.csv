commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getNodeId() {     return nodeId. }
false;public;0;3;;public long getTaskId() {     return taskId. }
true;public;0;3;/**  * Should this request wait for all found tasks to complete?  */ ;/**  * Should this request wait for all found tasks to complete?  */ public boolean getWaitForCompletion() {     return waitForCompletion. }
true;public;1;4;/**  * Should this request wait for all found tasks to complete?  */ ;/**  * Should this request wait for all found tasks to complete?  */ public GetTaskRequest setWaitForCompletion(boolean waitForCompletion) {     this.waitForCompletion = waitForCompletion.     return this. }
true;public;0;3;/**  * Timeout to wait for any async actions this request must take. It must take anywhere from 0 to 2.  */ ;/**  * Timeout to wait for any async actions this request must take. It must take anywhere from 0 to 2.  */ public TimeValue getTimeout() {     return timeout. }
true;public;1;4;/**  * Timeout to wait for any async actions this request must take.  */ ;/**  * Timeout to wait for any async actions this request must take.  */ public GetTaskRequest setTimeout(TimeValue timeout) {     this.timeout = timeout.     return this. }
false;public;0;11;;@Override public Optional<ValidationException> validate() {     final ValidationException validationException = new ValidationException().     if (timeout != null && !waitForCompletion) {         validationException.addValidationError("Timeout settings are only accepted if waitForCompletion is also set").     }     if (validationException.validationErrors().isEmpty()) {         return Optional.empty().     }     return Optional.of(validationException). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(nodeId, taskId, waitForCompletion, timeout). }
false;public;1;14;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     GetTaskRequest other = (GetTaskRequest) obj.     return Objects.equals(nodeId, other.nodeId) && taskId == other.taskId && waitForCompletion == other.waitForCompletion && Objects.equals(timeout, other.timeout). }
