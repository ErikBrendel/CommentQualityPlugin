commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * @return The name that will be the ID of the indexed document  */ ;/**  * @return The name that will be the ID of the indexed document  */ public String getId() {     return id. }
true;public;0;3;/**  * @return The source of the watch  */ ;/**  * @return The source of the watch  */ public BytesReference getSource() {     return source. }
true;public;0;3;/**  * @return The initial active state of the watch (defaults to {@code true}, e.g. "active")  */ ;/**  * @return The initial active state of the watch (defaults to {@code true}, e.g. "active")  */ public boolean isActive() {     return active. }
true;public;1;3;/**  * Sets the initial active state of the watch  */ ;/**  * Sets the initial active state of the watch  */ public void setActive(boolean active) {     this.active = active. }
true;public;0;3;/**  * Get the content type for the source  */ ;/**  * Get the content type for the source  */ public XContentType xContentType() {     return xContentType. }
true;public;1;7;/**  * only performs this put request if the watch's last modification was assigned the given  * sequence number. Must be used in combination with {@link #setIfPrimaryTerm(long)}  *  * If the watch's last modification was assigned a different sequence number a  * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.  */ ;/**  * only performs this put request if the watch's last modification was assigned the given  * sequence number. Must be used in combination with {@link #setIfPrimaryTerm(long)}  *  * If the watch's last modification was assigned a different sequence number a  * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.  */ public PutWatchRequest setIfSeqNo(long seqNo) {     if (seqNo < 0 && seqNo != UNASSIGNED_SEQ_NO) {         throw new IllegalArgumentException("sequence numbers must be non negative. got [" + seqNo + "].").     }     ifSeqNo = seqNo.     return this. }
true;public;1;7;/**  * only performs this put request if the watch's last modification was assigned the given  * primary term. Must be used in combination with {@link #setIfSeqNo(long)}  *  * If the watch last modification was assigned a different term a  * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.  */ ;/**  * only performs this put request if the watch's last modification was assigned the given  * primary term. Must be used in combination with {@link #setIfSeqNo(long)}  *  * If the watch last modification was assigned a different term a  * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.  */ public PutWatchRequest setIfPrimaryTerm(long term) {     if (term < 0) {         throw new IllegalArgumentException("primary term must be non negative. got [" + term + "]").     }     ifPrimaryTerm = term.     return this. }
true;public;0;3;/**  * If set, only perform this put watch request if the watch's last modification was assigned this sequence number.  * If the watch last last modification was assigned a different sequence number a  * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.  */ ;/**  * If set, only perform this put watch request if the watch's last modification was assigned this sequence number.  * If the watch last last modification was assigned a different sequence number a  * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.  */ public long ifSeqNo() {     return ifSeqNo. }
true;public;0;3;/**  * If set, only perform this put watch request if the watch's last modification was assigned this primary term.  *  * If the watch's last modification was assigned a different term a  * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.  */ ;/**  * If set, only perform this put watch request if the watch's last modification was assigned this primary term.  *  * If the watch's last modification was assigned a different term a  * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.  */ public long ifPrimaryTerm() {     return ifPrimaryTerm. }
false;public,static;1;3;;public static boolean isValidId(String id) {     return Strings.isEmpty(id) == false && NO_WS_PATTERN.matcher(id).matches(). }
