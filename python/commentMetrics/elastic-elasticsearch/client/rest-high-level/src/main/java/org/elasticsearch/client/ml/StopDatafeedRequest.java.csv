commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Explicitly stop all datafeeds  *  * @return a {@link StopDatafeedRequest} for all existing datafeeds  */ ;/**  * Explicitly stop all datafeeds  *  * @return a {@link StopDatafeedRequest} for all existing datafeeds  */ public static StopDatafeedRequest stopAllDatafeedsRequest() {     return new StopDatafeedRequest(ALL_DATAFEEDS). }
true;public;0;3;/**  * All the datafeedIds to be stopped  */ ;/**  * All the datafeedIds to be stopped  */ public List<String> getDatafeedIds() {     return datafeedIds. }
false;public;0;3;;public TimeValue getTimeout() {     return timeout. }
true;public;1;3;/**  * How long to wait for the stop request to complete before timing out.  *  * @param timeout Default value: 30 minutes  */ ;/**  * How long to wait for the stop request to complete before timing out.  *  * @param timeout Default value: 30 minutes  */ public void setTimeout(TimeValue timeout) {     this.timeout = timeout. }
false;public;0;3;;public Boolean getForce() {     return force. }
true;public;1;3;/**  * Should the stopping be forced.  *  * Use to forcefully stop a datafeed  *  * @param force When {@code true} forcefully stop the datafeed. Defaults to {@code false}  */ ;/**  * Should the stopping be forced.  *  * Use to forcefully stop a datafeed  *  * @param force When {@code true} forcefully stop the datafeed. Defaults to {@code false}  */ public void setForce(boolean force) {     this.force = force. }
false;public;0;3;;public Boolean getAllowNoDatafeeds() {     return this.allowNoDatafeeds. }
true;public;1;3;/**  * Whether to ignore if a wildcard expression matches no datafeeds.  *  * This includes {@code _all} string.  *  * @param allowNoDatafeeds When {@code true} ignore if wildcard or {@code _all} matches no datafeeds. Defaults to {@code true}  */ ;/**  * Whether to ignore if a wildcard expression matches no datafeeds.  *  * This includes {@code _all} string.  *  * @param allowNoDatafeeds When {@code true} ignore if wildcard or {@code _all} matches no datafeeds. Defaults to {@code true}  */ public void setAllowNoDatafeeds(boolean allowNoDatafeeds) {     this.allowNoDatafeeds = allowNoDatafeeds. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(datafeedIds, timeout, force, allowNoDatafeeds). }
false;public;1;16;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     StopDatafeedRequest that = (StopDatafeedRequest) other.     return Objects.equals(datafeedIds, that.datafeedIds) && Objects.equals(timeout, that.timeout) && Objects.equals(force, that.force) && Objects.equals(allowNoDatafeeds, that.allowNoDatafeeds). }
false;public;2;16;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(DatafeedConfig.ID.getPreferredName(), Strings.collectionToCommaDelimitedString(datafeedIds)).     if (timeout != null) {         builder.field(TIMEOUT.getPreferredName(), timeout.getStringRep()).     }     if (force != null) {         builder.field(FORCE.getPreferredName(), force).     }     if (allowNoDatafeeds != null) {         builder.field(ALLOW_NO_DATAFEEDS.getPreferredName(), allowNoDatafeeds).     }     builder.endObject().     return builder. }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this). }
