commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public String toString() {     List<IndexTemplateMetaData> thisList = new ArrayList<>(this.indexTemplates).     thisList.sort(Comparator.comparing(IndexTemplateMetaData::name)).     return "GetIndexTemplatesResponse [indexTemplates=" + thisList + "]". }
false;public;0;3;;public List<IndexTemplateMetaData> getIndexTemplates() {     return indexTemplates. }
false;public,static;1;10;;public static GetIndexTemplatesResponse fromXContent(XContentParser parser) throws IOException {     final List<IndexTemplateMetaData> templates = new ArrayList<>().     for (XContentParser.Token token = parser.nextToken(). token != XContentParser.Token.END_OBJECT. token = parser.nextToken()) {         if (token == XContentParser.Token.FIELD_NAME) {             final IndexTemplateMetaData templateMetaData = IndexTemplateMetaData.Builder.fromXContent(parser, parser.currentName()).             templates.add(templateMetaData).         }     }     return new GetIndexTemplatesResponse(templates). }
false;public;0;6;;@Override public int hashCode() {     List<IndexTemplateMetaData> sortedList = new ArrayList<>(this.indexTemplates).     sortedList.sort(Comparator.comparing(IndexTemplateMetaData::name)).     return Objects.hash(sortedList). }
false;public;1;16;;@Override public boolean equals(Object obj) {     if (this == obj)         return true.     if (obj == null)         return false.     if (getClass() != obj.getClass())         return false.     // To compare results we need to make sure the templates are listed in the same order     GetIndexTemplatesResponse other = (GetIndexTemplatesResponse) obj.     List<IndexTemplateMetaData> thisList = new ArrayList<>(this.indexTemplates).     List<IndexTemplateMetaData> otherList = new ArrayList<>(other.indexTemplates).     thisList.sort(Comparator.comparing(IndexTemplateMetaData::name)).     otherList.sort(Comparator.comparing(IndexTemplateMetaData::name)).     return Objects.equals(thisList, otherList). }
