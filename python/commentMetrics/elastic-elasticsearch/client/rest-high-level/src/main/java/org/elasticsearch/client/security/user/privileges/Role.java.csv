commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getName() {     return name. }
false;public;0;3;;public Set<String> getClusterPrivileges() {     return clusterPrivileges. }
false;public;0;3;;public GlobalPrivileges getGlobalPrivileges() {     return globalPrivileges. }
false;public;0;3;;public Set<IndicesPrivileges> getIndicesPrivileges() {     return indicesPrivileges. }
false;public;0;3;;public Set<ApplicationResourcePrivileges> getApplicationPrivileges() {     return applicationPrivileges. }
false;public;0;3;;public Set<String> getRunAsPrivilege() {     return runAsPrivilege. }
false;public;0;3;;public Map<String, Object> getMetadata() {     return metadata. }
false;public;1;13;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Role that = (Role) o.     return name.equals(that.name) && clusterPrivileges.equals(that.clusterPrivileges) && Objects.equals(globalPrivileges, that.globalPrivileges) && indicesPrivileges.equals(that.indicesPrivileges) && applicationPrivileges.equals(that.applicationPrivileges) && runAsPrivilege.equals(that.runAsPrivilege) && metadata.equals(that.metadata). }
false;public;0;5;;@Override public int hashCode() {     return Objects.hash(name, clusterPrivileges, globalPrivileges, indicesPrivileges, applicationPrivileges, runAsPrivilege, metadata). }
false;public;0;37;;@Override public String toString() {     StringBuilder sb = new StringBuilder("{").     sb.append("Name=").append(name).append(",").     if (false == clusterPrivileges.isEmpty()) {         sb.append("ClusterPrivileges=").         sb.append(clusterPrivileges.toString()).         sb.append(", ").     }     if (globalPrivileges != null) {         sb.append("GlobalPrivileges=").         sb.append(globalPrivileges.toString()).         sb.append(", ").     }     if (false == indicesPrivileges.isEmpty()) {         sb.append("IndicesPrivileges=").         sb.append(indicesPrivileges.toString()).         sb.append(", ").     }     if (false == applicationPrivileges.isEmpty()) {         sb.append("ApplicationPrivileges=").         sb.append(applicationPrivileges.toString()).         sb.append(", ").     }     if (false == runAsPrivilege.isEmpty()) {         sb.append("RunAsPrivilege=").         sb.append(runAsPrivilege.toString()).         sb.append(", ").     }     if (false == metadata.isEmpty()) {         sb.append("Metadata=[").         sb.append(metadata.toString()).         sb.append("], ").     }     sb.append("}").     return sb.toString(). }
false;public,static;2;3;;public static Tuple<Role, Map<String, Object>> fromXContent(XContentParser parser, String name) {     return PARSER.apply(parser, name). }
false;public,static;0;3;;public static Builder builder() {     return new Builder(). }
false;public;1;8;;public Builder name(String name) {     if (Strings.hasText(name) == false) {         throw new IllegalArgumentException("role name must be provided").     } else {         this.name = name.     }     return this. }
false;public;1;4;;public Builder clusterPrivileges(String... clusterPrivileges) {     return clusterPrivileges(Arrays.asList(Objects.requireNonNull(clusterPrivileges, "Cluster privileges cannot be null. Pass an empty array instead."))). }
false;public;1;5;;public Builder clusterPrivileges(Collection<String> clusterPrivileges) {     this.clusterPrivileges = Objects.requireNonNull(clusterPrivileges, "Cluster privileges cannot be null. Pass an empty collection instead.").     return this. }
false;public;1;4;;public Builder globalApplicationPrivileges(GlobalPrivileges globalApplicationPrivileges) {     this.globalApplicationPrivileges = globalApplicationPrivileges.     return this. }
false;public;1;4;;public Builder indicesPrivileges(IndicesPrivileges... indicesPrivileges) {     return indicesPrivileges(Arrays.asList(Objects.requireNonNull(indicesPrivileges, "Indices privileges cannot be null. Pass an empty array instead."))). }
false;public;1;5;;public Builder indicesPrivileges(Collection<IndicesPrivileges> indicesPrivileges) {     this.indicesPrivileges = Objects.requireNonNull(indicesPrivileges, "Indices privileges cannot be null. Pass an empty collection instead.").     return this. }
false;public;1;4;;public Builder applicationResourcePrivileges(ApplicationResourcePrivileges... applicationResourcePrivileges) {     return applicationResourcePrivileges(Arrays.asList(Objects.requireNonNull(applicationResourcePrivileges, "Application resource privileges cannot be null. Pass an empty array instead."))). }
false;public;1;5;;public Builder applicationResourcePrivileges(Collection<ApplicationResourcePrivileges> applicationResourcePrivileges) {     this.applicationResourcePrivileges = Objects.requireNonNull(applicationResourcePrivileges, "Application resource privileges cannot be null. Pass an empty collection instead.").     return this. }
false;public;1;4;;public Builder runAsPrivilege(String... runAsPrivilege) {     return runAsPrivilege(Arrays.asList(Objects.requireNonNull(runAsPrivilege, "Run as privilege cannot be null. Pass an empty array instead."))). }
false;public;1;5;;public Builder runAsPrivilege(Collection<String> runAsPrivilege) {     this.runAsPrivilege = Objects.requireNonNull(runAsPrivilege, "Run as privilege cannot be null. Pass an empty collection instead.").     return this. }
false;public;1;4;;public Builder metadata(Map<String, Object> metadata) {     this.metadata = Objects.requireNonNull(metadata, "Metadata cannot be null. Pass an empty map instead.").     return this. }
false;public;0;4;;public Role build() {     return new Role(name, clusterPrivileges, globalApplicationPrivileges, indicesPrivileges, applicationResourcePrivileges, runAsPrivilege, metadata). }
