commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static TermVectorsResponse fromXContent(XContentParser parser) {     return PARSER.apply(parser, null). }
true;public;0;3;/**  * Returns the index for the response  */ ;/**  * Returns the index for the response  */ public String getIndex() {     return index. }
true;public;0;4;/**  * Returns the type for the response  *  * @deprecated Types are in the process of being removed.  */ ;/**  * Returns the type for the response  *  * @deprecated Types are in the process of being removed.  */ @Deprecated public String getType() {     return type. }
true;public;0;3;/**  * Returns the id of the request  * can be NULL if there is no document ID  */ ;/**  * Returns the id of the request  * can be NULL if there is no document ID  */ public String getId() {     return id. }
true;public;0;3;/**  * Returns if the document is found  * always <code>true</code> for artificial documents  */ ;/**  * Returns if the document is found  * always <code>true</code> for artificial documents  */ public boolean getFound() {     return found. }
true;public;0;3;/**  * Returns the document version  */ ;/**  * Returns the document version  */ public long getDocVersion() {     return docVersion. }
true;public;0;3;/**  * Returns the time that a request took in milliseconds  */ ;/**  * Returns the time that a request took in milliseconds  */ public long getTookInMillis() {     return tookInMillis. }
true;public;0;3;/**  * Returns the list of term vectors  */ ;/**  * Returns the list of term vectors  */ public List<TermVector> getTermVectorsList() {     return termVectorList. }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (this == obj)         return true.     if (!(obj instanceof TermVectorsResponse))         return false.     TermVectorsResponse other = (TermVectorsResponse) obj.     return index.equals(other.index) && type.equals(other.type) && Objects.equals(id, other.id) && docVersion == other.docVersion && found == other.found && tookInMillis == tookInMillis && Objects.equals(termVectorList, other.termVectorList). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(index, type, id, docVersion, found, tookInMillis, termVectorList). }
false;public,static;2;3;;public static TermVector fromXContent(XContentParser parser, String fieldName) {     return PARSER.apply(parser, fieldName). }
true;public;0;3;/**  * Returns the field name of the current term vector  */ ;/**  * Returns the field name of the current term vector  */ public String getFieldName() {     return fieldName. }
true;public;0;3;/**  * Returns the list of terms for the current term vector  */ ;/**  * Returns the list of terms for the current term vector  */ public List<Term> getTerms() {     return terms. }
true;public;0;3;/**  * Returns the field statistics for the current field  */ ;/**  * Returns the field statistics for the current field  */ public FieldStatistics getFieldStatistics() {     return fieldStatistics. }
false;public;1;9;;@Override public boolean equals(Object obj) {     if (this == obj)         return true.     if (!(obj instanceof TermVector))         return false.     TermVector other = (TermVector) obj.     return fieldName.equals(other.fieldName) && Objects.equals(fieldStatistics, other.fieldStatistics) && Objects.equals(terms, other.terms). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(fieldName, fieldStatistics, terms). }
false;public,static;1;3;;public static FieldStatistics fromXContent(XContentParser parser) {     return PARSER.apply(parser, null). }
true;public;0;3;/*              * Returns how many documents this field contains              */ ;/*              * Returns how many documents this field contains              */ public int getDocCount() {     return docCount. }
true;public;0;3;/**  * Returns the sum of document frequencies for all terms in this field  */ ;/**  * Returns the sum of document frequencies for all terms in this field  */ public long getSumDocFreq() {     return sumDocFreq. }
true;public;0;3;/**  * Returns the sum of total term frequencies of all terms in this field  */ ;/**  * Returns the sum of total term frequencies of all terms in this field  */ public long getSumTotalTermFreq() {     return sumTotalTermFreq. }
false;public;1;9;;@Override public boolean equals(Object obj) {     if (this == obj)         return true.     if (!(obj instanceof FieldStatistics))         return false.     FieldStatistics other = (FieldStatistics) obj.     return docCount == other.docCount && sumDocFreq == other.sumDocFreq && sumTotalTermFreq == other.sumTotalTermFreq. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(docCount, sumDocFreq, sumTotalTermFreq). }
false;public,static;2;3;;public static Term fromXContent(XContentParser parser, String term) {     return PARSER.apply(parser, term). }
true;public;0;3;/**  * Returns the string representation of the term  */ ;/**  * Returns the string representation of the term  */ public String getTerm() {     return term. }
true;public;0;3;/**  * Returns term frequency - the number of times this term occurs in the current document  */ ;/**  * Returns term frequency - the number of times this term occurs in the current document  */ public int getTermFreq() {     return termFreq. }
true;public;0;3;/**  * Returns document frequency - the number of documents in the index that contain this term  */ ;/**  * Returns document frequency - the number of documents in the index that contain this term  */ public Integer getDocFreq() {     return docFreq. }
true;public;0;3;/**  * Returns total term frequency - the number of times this term occurs across all documents  */ ;/**  * Returns total term frequency - the number of times this term occurs across all documents  */ public Long getTotalTermFreq() {     return totalTermFreq. }
true;public;0;3;/**  * Returns tf-idf score, if the request used some form of terms filtering  */ ;/**  * Returns tf-idf score, if the request used some form of terms filtering  */ public Float getScore() {     return score. }
true;public;0;3;/**  * Returns a list of tokens for the term  */ ;/**  * Returns a list of tokens for the term  */ public List<Token> getTokens() {     return tokens. }
false;public;1;12;;@Override public boolean equals(Object obj) {     if (this == obj)         return true.     if (!(obj instanceof Term))         return false.     Term other = (Term) obj.     return term.equals(other.term) && termFreq == other.termFreq && Objects.equals(docFreq, other.docFreq) && Objects.equals(totalTermFreq, other.totalTermFreq) && Objects.equals(score, other.score) && Objects.equals(tokens, other.tokens). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(term, termFreq, docFreq, totalTermFreq, score, tokens). }
false;public,static;1;3;;public static Token fromXContent(XContentParser parser) {     return PARSER.apply(parser, null). }
true;public;0;3;/**  * Returns the start offset of the token in the document's field  */ ;/**  * Returns the start offset of the token in the document's field  */ public Integer getStartOffset() {     return startOffset. }
true;public;0;3;/**  * Returns the end offset of the token in the document's field  */ ;/**  * Returns the end offset of the token in the document's field  */ public Integer getEndOffset() {     return endOffset. }
true;public;0;3;/**  * Returns the position of the token in the document's field  */ ;/**  * Returns the position of the token in the document's field  */ public Integer getPosition() {     return position. }
true;public;0;3;/**  * Returns the payload of the token or <code>null</code> if the payload doesn't exist  */ ;/**  * Returns the payload of the token or <code>null</code> if the payload doesn't exist  */ public String getPayload() {     return payload. }
false;public;1;10;;@Override public boolean equals(Object obj) {     if (this == obj)         return true.     if (!(obj instanceof Token))         return false.     Token other = (Token) obj.     return Objects.equals(startOffset, other.startOffset) && Objects.equals(endOffset, other.endOffset) && Objects.equals(position, other.position) && Objects.equals(payload, other.payload). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(startOffset, endOffset, position, payload). }
