commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the Job Id.  *  * @return The job Id string  */ ;/**  * Return the Job Id.  *  * @return The job Id string  */ public String getId() {     return jobId. }
false;public;0;3;;public String getJobType() {     return jobType. }
false;public;0;3;;public List<String> getGroups() {     return groups. }
true;private;0;3;/**  * Private version of getResultsIndexName so that a job can be built from another  * job and pass index name validation  *  * @return The job's index name, minus prefix  */ ;/**  * Private version of getResultsIndexName so that a job can be built from another  * job and pass index name validation  *  * @return The job's index name, minus prefix  */ private String getResultsIndexNameNoPrefix() {     return resultsIndexName. }
true;public;0;3;/**  * The job description  *  * @return job description  */ ;/**  * The job description  *  * @return job description  */ public String getDescription() {     return description. }
true;public;0;3;/**  * The Job creation time. This name is preferred when serialising to the  * REST API.  *  * @return The date the job was created  */ ;/**  * The Job creation time. This name is preferred when serialising to the  * REST API.  *  * @return The date the job was created  */ public Date getCreateTime() {     return createTime. }
true;public;0;3;/**  * The time the job was finished or <code>null</code> if not finished.  *  * @return The date the job was last retired or <code>null</code>  */ ;/**  * The time the job was finished or <code>null</code> if not finished.  *  * @return The date the job was last retired or <code>null</code>  */ public Date getFinishedTime() {     return finishedTime. }
true;public;0;3;/**  * The analysis configuration object  *  * @return The AnalysisConfig  */ ;/**  * The analysis configuration object  *  * @return The AnalysisConfig  */ public AnalysisConfig getAnalysisConfig() {     return analysisConfig. }
true;public;0;3;/**  * The analysis options object  *  * @return The AnalysisLimits  */ ;/**  * The analysis options object  *  * @return The AnalysisLimits  */ public AnalysisLimits getAnalysisLimits() {     return analysisLimits. }
false;public;0;3;;public ModelPlotConfig getModelPlotConfig() {     return modelPlotConfig. }
true;public;0;3;/**  * If not set the input data is assumed to be csv with a '_time' field in  * epoch format.  *  * @return A DataDescription or <code>null</code>  * @see DataDescription  */ ;/**  * If not set the input data is assumed to be csv with a '_time' field in  * epoch format.  *  * @return A DataDescription or <code>null</code>  * @see DataDescription  */ public DataDescription getDataDescription() {     return dataDescription. }
true;public;0;3;/**  * The duration of the renormalization window in days  *  * @return renormalization window in days  */ ;/**  * The duration of the renormalization window in days  *  * @return renormalization window in days  */ public Long getRenormalizationWindowDays() {     return renormalizationWindowDays. }
true;public;0;3;/**  * The background persistence interval  *  * @return background persistence interval  */ ;/**  * The background persistence interval  *  * @return background persistence interval  */ public TimeValue getBackgroundPersistInterval() {     return backgroundPersistInterval. }
false;public;0;3;;public Long getModelSnapshotRetentionDays() {     return modelSnapshotRetentionDays. }
false;public;0;3;;public Long getResultsRetentionDays() {     return resultsRetentionDays. }
false;public;0;3;;public Map<String, Object> getCustomSettings() {     return customSettings. }
false;public;0;3;;public String getModelSnapshotId() {     return modelSnapshotId. }
false;public;0;3;;public Boolean getDeleting() {     return deleting. }
false;public;2;58;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     final String humanReadableSuffix = "_string".     builder.field(ID.getPreferredName(), jobId).     builder.field(JOB_TYPE.getPreferredName(), jobType).     if (groups.isEmpty() == false) {         builder.field(GROUPS.getPreferredName(), groups).     }     if (description != null) {         builder.field(DESCRIPTION.getPreferredName(), description).     }     if (createTime != null) {         builder.timeField(CREATE_TIME.getPreferredName(), CREATE_TIME.getPreferredName() + humanReadableSuffix, createTime.getTime()).     }     if (finishedTime != null) {         builder.timeField(FINISHED_TIME.getPreferredName(), FINISHED_TIME.getPreferredName() + humanReadableSuffix, finishedTime.getTime()).     }     builder.field(ANALYSIS_CONFIG.getPreferredName(), analysisConfig, params).     if (analysisLimits != null) {         builder.field(ANALYSIS_LIMITS.getPreferredName(), analysisLimits, params).     }     if (dataDescription != null) {         builder.field(DATA_DESCRIPTION.getPreferredName(), dataDescription, params).     }     if (modelPlotConfig != null) {         builder.field(MODEL_PLOT_CONFIG.getPreferredName(), modelPlotConfig, params).     }     if (renormalizationWindowDays != null) {         builder.field(RENORMALIZATION_WINDOW_DAYS.getPreferredName(), renormalizationWindowDays).     }     if (backgroundPersistInterval != null) {         builder.field(BACKGROUND_PERSIST_INTERVAL.getPreferredName(), backgroundPersistInterval.getStringRep()).     }     if (modelSnapshotRetentionDays != null) {         builder.field(MODEL_SNAPSHOT_RETENTION_DAYS.getPreferredName(), modelSnapshotRetentionDays).     }     if (resultsRetentionDays != null) {         builder.field(RESULTS_RETENTION_DAYS.getPreferredName(), resultsRetentionDays).     }     if (customSettings != null) {         builder.field(CUSTOM_SETTINGS.getPreferredName(), customSettings).     }     if (modelSnapshotId != null) {         builder.field(MODEL_SNAPSHOT_ID.getPreferredName(), modelSnapshotId).     }     if (resultsIndexName != null) {         builder.field(RESULTS_INDEX_NAME.getPreferredName(), resultsIndexName).     }     if (deleting != null) {         builder.field(DELETING.getPreferredName(), deleting).     }     builder.endObject().     return builder. }
false;public;1;30;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     Job that = (Job) other.     return Objects.equals(this.jobId, that.jobId) && Objects.equals(this.jobType, that.jobType) && Objects.equals(this.groups, that.groups) && Objects.equals(this.description, that.description) && Objects.equals(this.createTime, that.createTime) && Objects.equals(this.finishedTime, that.finishedTime) && Objects.equals(this.analysisConfig, that.analysisConfig) && Objects.equals(this.analysisLimits, that.analysisLimits) && Objects.equals(this.dataDescription, that.dataDescription) && Objects.equals(this.modelPlotConfig, that.modelPlotConfig) && Objects.equals(this.renormalizationWindowDays, that.renormalizationWindowDays) && Objects.equals(this.backgroundPersistInterval, that.backgroundPersistInterval) && Objects.equals(this.modelSnapshotRetentionDays, that.modelSnapshotRetentionDays) && Objects.equals(this.resultsRetentionDays, that.resultsRetentionDays) && Objects.equals(this.customSettings, that.customSettings) && Objects.equals(this.modelSnapshotId, that.modelSnapshotId) && Objects.equals(this.resultsIndexName, that.resultsIndexName) && Objects.equals(this.deleting, that.deleting). }
false;public;0;7;;@Override public int hashCode() {     return Objects.hash(jobId, jobType, groups, description, createTime, finishedTime, analysisConfig, analysisLimits, dataDescription, modelPlotConfig, renormalizationWindowDays, backgroundPersistInterval, modelSnapshotRetentionDays, resultsRetentionDays, customSettings, modelSnapshotId, resultsIndexName, deleting). }
false;public,final;0;4;;@Override public final String toString() {     return Strings.toString(this). }
false;public,static;1;3;;public static Builder builder(String id) {     return new Builder(id). }
false;public;1;4;;public Builder setId(String id) {     this.id = id.     return this. }
false;public;0;3;;public String getId() {     return id. }
false;public;1;4;;public Builder setJobType(String jobType) {     this.jobType = jobType.     return this. }
false;public;1;4;;public Builder setGroups(List<String> groups) {     this.groups = groups == null ? Collections.emptyList() : groups.     return this. }
false;public;1;4;;public Builder setCustomSettings(Map<String, Object> customSettings) {     this.customSettings = customSettings.     return this. }
false;public;1;4;;public Builder setDescription(String description) {     this.description = description.     return this. }
false;public;1;4;;public Builder setAnalysisConfig(AnalysisConfig.Builder configBuilder) {     analysisConfig = Objects.requireNonNull(configBuilder, ANALYSIS_CONFIG.getPreferredName()).build().     return this. }
false;public;1;4;;public Builder setAnalysisLimits(AnalysisLimits analysisLimits) {     this.analysisLimits = Objects.requireNonNull(analysisLimits, ANALYSIS_LIMITS.getPreferredName()).     return this. }
false;;1;4;;Builder setCreateTime(Date createTime) {     this.createTime = createTime.     return this. }
false;;1;4;;Builder setFinishedTime(Date finishedTime) {     this.finishedTime = finishedTime.     return this. }
false;public;1;4;;public Builder setDataDescription(DataDescription.Builder description) {     dataDescription = Objects.requireNonNull(description, DATA_DESCRIPTION.getPreferredName()).build().     return this. }
false;public;1;4;;public Builder setModelPlotConfig(ModelPlotConfig modelPlotConfig) {     this.modelPlotConfig = modelPlotConfig.     return this. }
false;public;1;4;;public Builder setBackgroundPersistInterval(TimeValue backgroundPersistInterval) {     this.backgroundPersistInterval = backgroundPersistInterval.     return this. }
false;public;1;4;;public Builder setRenormalizationWindowDays(Long renormalizationWindowDays) {     this.renormalizationWindowDays = renormalizationWindowDays.     return this. }
false;public;1;4;;public Builder setModelSnapshotRetentionDays(Long modelSnapshotRetentionDays) {     this.modelSnapshotRetentionDays = modelSnapshotRetentionDays.     return this. }
false;public;1;4;;public Builder setResultsRetentionDays(Long resultsRetentionDays) {     this.resultsRetentionDays = resultsRetentionDays.     return this. }
false;public;1;4;;public Builder setModelSnapshotId(String modelSnapshotId) {     this.modelSnapshotId = modelSnapshotId.     return this. }
false;public;1;4;;public Builder setResultsIndexName(String resultsIndexName) {     this.resultsIndexName = resultsIndexName.     return this. }
false;;1;4;;Builder setDeleting(Boolean deleting) {     this.deleting = deleting.     return this. }
true;public;0;9;/**  * Builds a job.  *  * @return The job  */ ;/**  * Builds a job.  *  * @return The job  */ public Job build() {     Objects.requireNonNull(id, "[" + ID.getPreferredName() + "] must not be null").     Objects.requireNonNull(jobType, "[" + JOB_TYPE.getPreferredName() + "] must not be null").     return new Job(id, jobType, groups, description, createTime, finishedTime, analysisConfig, analysisLimits, dataDescription, modelPlotConfig, renormalizationWindowDays, backgroundPersistInterval, modelSnapshotRetentionDays, resultsRetentionDays, customSettings, modelSnapshotId, resultsIndexName, deleting). }
