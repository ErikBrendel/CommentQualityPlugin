commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Execute an existing watch on the cluster  *  * @param id the id of the watch to execute  */ ;/**  * Execute an existing watch on the cluster  *  * @param id the id of the watch to execute  */ public static ExecuteWatchRequest byId(String id) {     return new ExecuteWatchRequest(Objects.requireNonNull(id, "Watch id cannot be null"), null). }
true;public,static;1;3;/**  * Execute an inline watch  * @param watchContent the JSON definition of the watch  */ ;/**  * Execute an inline watch  * @param watchContent the JSON definition of the watch  */ public static ExecuteWatchRequest inline(String watchContent) {     return new ExecuteWatchRequest(null, Objects.requireNonNull(watchContent, "Watch content cannot be null")). }
false;public;0;3;;public String getId() {     return this.id. }
true;public;1;3;/**  * @param ignoreCondition set if the condition for this execution be ignored  */ ;/**  * @param ignoreCondition set if the condition for this execution be ignored  */ public void setIgnoreCondition(boolean ignoreCondition) {     this.ignoreCondition = ignoreCondition. }
false;public;0;3;;public boolean ignoreCondition() {     return ignoreCondition. }
true;public;1;6;/**  * @param recordExecution Sets if this execution be recorded in the history index  */ ;/**  * @param recordExecution Sets if this execution be recorded in the history index  */ public void setRecordExecution(boolean recordExecution) {     if (watchContent != null && recordExecution) {         throw new IllegalArgumentException("The execution of an inline watch cannot be recorded").     }     this.recordExecution = recordExecution. }
false;public;0;3;;public boolean recordExecution() {     return recordExecution. }
true;public;1;3;/**  * @param alternativeInput Sets the alternative input  */ ;/**  * @param alternativeInput Sets the alternative input  */ public void setAlternativeInput(String alternativeInput) {     this.alternativeInput = new BytesArray(alternativeInput). }
true;public;1;3;/**  * @param data A JSON string representing the data that should be associated with the trigger event.  */ ;/**  * @param data A JSON string representing the data that should be associated with the trigger event.  */ public void setTriggerData(String data) {     this.triggerData = new BytesArray(data). }
true;public;2;4;/**  * Sets the action execution mode for the give action (identified by its id).  *  * @param actionId      the action id.  * @param actionMode    the execution mode of the action.  */ ;/**  * Sets the action execution mode for the give action (identified by its id).  *  * @param actionId      the action id.  * @param actionMode    the execution mode of the action.  */ public void setActionMode(String actionId, ActionExecutionMode actionMode) {     Objects.requireNonNull(actionId, "actionId cannot be null").     actionModes.put(actionId, actionMode). }
false;public;0;3;;public Map<String, ActionExecutionMode> getActionModes() {     return this.actionModes. }
true;public;1;3;/**  * @param debug indicates whether the watch should execute in debug mode. In debug mode the  *              returned watch record will hold the execution {@code vars}  */ ;/**  * @param debug indicates whether the watch should execute in debug mode. In debug mode the  *              returned watch record will hold the execution {@code vars}  */ public void setDebug(boolean debug) {     this.debug = debug. }
false;public;0;3;;public boolean isDebug() {     return debug. }
false;public;0;4;;@Override public String toString() {     return "execute[" + id + "]". }
false;public;2;18;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (triggerData != null) {         builder.rawField("trigger_data", triggerData.streamInput(), XContentType.JSON).     }     if (alternativeInput != null) {         builder.rawField("alternative_input", alternativeInput.streamInput(), XContentType.JSON).     }     if (actionModes.size() > 0) {         builder.field("action_modes", actionModes).     }     if (watchContent != null) {         builder.rawField("watch", watchContent.streamInput(), XContentType.JSON).     }     builder.endObject().     return builder. }
