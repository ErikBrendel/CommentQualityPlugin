commented;modifiers;parameterAmount;loc;comment;code
true;public;2;4;/**  * Get current tasks using the Task Management API.  * See  * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html"> Task Management API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Get current tasks using the Task Management API.  * See  * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html"> Task Management API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public ListTasksResponse list(ListTasksRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, TasksRequestConverters::listTasks, options, ListTasksResponse::fromXContent, emptySet()). }
true;public;3;4;/**  * Asynchronously get current tasks using the Task Management API.  * See  * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html"> Task Management API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously get current tasks using the Task Management API.  * See  * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html"> Task Management API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void listAsync(ListTasksRequest request, RequestOptions options, ActionListener<ListTasksResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, TasksRequestConverters::listTasks, options, ListTasksResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Get a task using the Task Management API.  * See  * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html"> Task Management API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Get a task using the Task Management API.  * See  * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html"> Task Management API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public Optional<GetTaskResponse> get(GetTaskRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseOptionalEntity(request, TasksRequestConverters::getTask, options, GetTaskResponse::fromXContent). }
true;public;3;5;/**  * Get a task using the Task Management API.  * See  * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html"> Task Management API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener an actionlistener that takes an optional response (404s are returned as an empty Optional)  */ ;/**  * Get a task using the Task Management API.  * See  * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html"> Task Management API on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener an actionlistener that takes an optional response (404s are returned as an empty Optional)  */ public void getAsync(GetTaskRequest request, RequestOptions options, ActionListener<Optional<GetTaskResponse>> listener) {     restHighLevelClient.performRequestAsyncAndParseOptionalEntity(request, TasksRequestConverters::getTask, options, GetTaskResponse::fromXContent, listener). }
true;public;2;9;/**  * Cancel one or more cluster tasks using the Task Management API.  *  * See  * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html"> Task Management API on elastic.co</a>  * @param cancelTasksRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Cancel one or more cluster tasks using the Task Management API.  *  * See  * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html"> Task Management API on elastic.co</a>  * @param cancelTasksRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public CancelTasksResponse cancel(CancelTasksRequest cancelTasksRequest, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(cancelTasksRequest, TasksRequestConverters::cancelTasks, options, CancelTasksResponse::fromXContent, emptySet()). }
true;public;3;10;/**  * Asynchronously cancel one or more cluster tasks using the Task Management API.  *  * See  * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html"> Task Management API on elastic.co</a>  * @param cancelTasksRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously cancel one or more cluster tasks using the Task Management API.  *  * See  * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html"> Task Management API on elastic.co</a>  * @param cancelTasksRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void cancelAsync(CancelTasksRequest cancelTasksRequest, RequestOptions options, ActionListener<CancelTasksResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(cancelTasksRequest, TasksRequestConverters::cancelTasks, options, CancelTasksResponse::fromXContent, listener, emptySet()). }
