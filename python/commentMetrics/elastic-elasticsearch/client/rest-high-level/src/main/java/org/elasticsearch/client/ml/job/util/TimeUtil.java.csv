commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;9;/**  * Parse out a Date object given the current parser and field name.  *  * @param parser current XContentParser  * @param fieldName the field's preferred name (utilized in exception)  * @return parsed Date object  * @throws IOException from XContentParser  */ ;/**  * Parse out a Date object given the current parser and field name.  *  * @param parser current XContentParser  * @param fieldName the field's preferred name (utilized in exception)  * @return parsed Date object  * @throws IOException from XContentParser  */ public static Date parseTimeField(XContentParser parser, String fieldName) throws IOException {     if (parser.currentToken() == XContentParser.Token.VALUE_NUMBER) {         return new Date(parser.longValue()).     } else if (parser.currentToken() == XContentParser.Token.VALUE_STRING) {         return new Date(DateFormatters.from(DateTimeFormatter.ISO_INSTANT.parse(parser.text())).toInstant().toEpochMilli()).     }     throw new IllegalArgumentException("unexpected token [" + parser.currentToken() + "] for [" + fieldName + "]"). }
