commented;modifiers;parameterAmount;loc;comment;code
true;public;2;4;/**  * Start the watch service  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-start.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Start the watch service  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-start.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public AcknowledgedResponse startWatchService(StartWatchServiceRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, WatcherRequestConverters::startWatchService, options, AcknowledgedResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously start the watch service  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-start.html">  * the docs</a> for more.  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  */ ;/**  * Asynchronously start the watch service  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-start.html">  * the docs</a> for more.  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  */ public void startWatchServiceAsync(StartWatchServiceRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, WatcherRequestConverters::startWatchService, options, AcknowledgedResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Stop the watch service  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-start.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Stop the watch service  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-start.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public AcknowledgedResponse stopWatchService(StopWatchServiceRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, WatcherRequestConverters::stopWatchService, options, AcknowledgedResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously stop the watch service  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-start.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  */ ;/**  * Asynchronously stop the watch service  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-start.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  */ public void stopWatchServiceAsync(StopWatchServiceRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, WatcherRequestConverters::stopWatchService, options, AcknowledgedResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Put a watch into the cluster  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-put-watch.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Put a watch into the cluster  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-put-watch.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public PutWatchResponse putWatch(PutWatchRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, WatcherRequestConverters::putWatch, options, PutWatchResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously put a watch into the cluster  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-put-watch.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously put a watch into the cluster  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-put-watch.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void putWatchAsync(PutWatchRequest request, RequestOptions options, ActionListener<PutWatchResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, WatcherRequestConverters::putWatch, options, PutWatchResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Gets a watch from the cluster  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-get-watch.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Gets a watch from the cluster  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-get-watch.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public GetWatchResponse getWatch(GetWatchRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, WatcherRequestConverters::getWatch, options, GetWatchResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously gets a watch into the cluster  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-get-watch.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously gets a watch into the cluster  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-get-watch.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void getWatchAsync(GetWatchRequest request, RequestOptions options, ActionListener<GetWatchResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, WatcherRequestConverters::getWatch, options, GetWatchResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Deactivate an existing watch  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-deactivate-watch.html">  *     the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Deactivate an existing watch  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-deactivate-watch.html">  *     the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public DeactivateWatchResponse deactivateWatch(DeactivateWatchRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, WatcherRequestConverters::deactivateWatch, options, DeactivateWatchResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously deactivate an existing watch  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-deactivate-watch.html">  *     the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously deactivate an existing watch  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-deactivate-watch.html">  *     the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void deactivateWatchAsync(DeactivateWatchRequest request, RequestOptions options, ActionListener<DeactivateWatchResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, WatcherRequestConverters::deactivateWatch, options, DeactivateWatchResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Deletes a watch from the cluster  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-delete-watch.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Deletes a watch from the cluster  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-delete-watch.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public DeleteWatchResponse deleteWatch(DeleteWatchRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, WatcherRequestConverters::deleteWatch, options, DeleteWatchResponse::fromXContent, singleton(404)). }
true;public;3;4;/**  * Asynchronously deletes a watch from the cluster  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-delete-watch.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously deletes a watch from the cluster  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-delete-watch.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void deleteWatchAsync(DeleteWatchRequest request, RequestOptions options, ActionListener<DeleteWatchResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, WatcherRequestConverters::deleteWatch, options, DeleteWatchResponse::fromXContent, listener, singleton(404)). }
true;public;2;4;/**  * Acknowledges a watch.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-ack-watch.html">  * the docs</a> for more information.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException if there is a problem sending the request or parsing back the response  */ ;/**  * Acknowledges a watch.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-ack-watch.html">  * the docs</a> for more information.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException if there is a problem sending the request or parsing back the response  */ public AckWatchResponse ackWatch(AckWatchRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, WatcherRequestConverters::ackWatch, options, AckWatchResponse::fromXContent, emptySet()). }
true;public;3;4;/**  * Asynchronously acknowledges a watch.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-ack-watch.html">  * the docs</a> for more information.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon completion of the request  */ ;/**  * Asynchronously acknowledges a watch.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-ack-watch.html">  * the docs</a> for more information.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon completion of the request  */ public void ackWatchAsync(AckWatchRequest request, RequestOptions options, ActionListener<AckWatchResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, WatcherRequestConverters::ackWatch, options, AckWatchResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Activate a watch from the cluster  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-activate-watch.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Activate a watch from the cluster  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-activate-watch.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public ActivateWatchResponse activateWatch(ActivateWatchRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, WatcherRequestConverters::activateWatch, options, ActivateWatchResponse::fromXContent, singleton(404)). }
true;public;3;4;/**  * Asynchronously activates a watch from the cluster  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-activate-watch.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously activates a watch from the cluster  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-activate-watch.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void activateWatchAsync(ActivateWatchRequest request, RequestOptions options, ActionListener<ActivateWatchResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, WatcherRequestConverters::activateWatch, options, ActivateWatchResponse::fromXContent, listener, singleton(404)). }
true;public;2;4;/**  * Execute a watch on the cluster  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-execute-watch.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException if there is a problem sending the request or parsing the response  */ ;/**  * Execute a watch on the cluster  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-execute-watch.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException if there is a problem sending the request or parsing the response  */ public ExecuteWatchResponse executeWatch(ExecuteWatchRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, WatcherRequestConverters::executeWatch, options, ExecuteWatchResponse::fromXContent, emptySet()). }
true;public;3;4;/**  * Asynchronously execute a watch on the cluster  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-execute-watch.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notifed upon request completion  */ ;/**  * Asynchronously execute a watch on the cluster  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-execute-watch.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notifed upon request completion  */ public void executeWatchAsync(ExecuteWatchRequest request, RequestOptions options, ActionListener<ExecuteWatchResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, WatcherRequestConverters::executeWatch, options, ExecuteWatchResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Get the watcher stats  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-stats.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Get the watcher stats  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-stats.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public WatcherStatsResponse watcherStats(WatcherStatsRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, WatcherRequestConverters::watcherStats, options, WatcherStatsResponse::fromXContent, emptySet()). }
true;public;3;4;/**  * Asynchronously get the watcher stats  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-stats.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously get the watcher stats  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-stats.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void watcherStatsAsync(WatcherStatsRequest request, RequestOptions options, ActionListener<WatcherStatsResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, WatcherRequestConverters::watcherStats, options, WatcherStatsResponse::fromXContent, listener, emptySet()). }
