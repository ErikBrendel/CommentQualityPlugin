# id;timestamp;commentText;codeText;commentWords;codeWords
LifecyclePolicy -> public Map<String, Phase> getPhases();1535665876;@return the {@link Phase}s for this {@link LifecyclePolicy} in the order_in which they will be executed.;public Map<String, Phase> getPhases() {_        return phases__    };return,the,link,phase,s,for,this,link,lifecycle,policy,in,the,order,in,which,they,will,be,executed;public,map,string,phase,get,phases,return,phases
LifecyclePolicy -> public Map<String, Phase> getPhases();1546556440;@return the {@link Phase}s for this {@link LifecyclePolicy} in the order_in which they will be executed.;public Map<String, Phase> getPhases() {_        return phases__    };return,the,link,phase,s,for,this,link,lifecycle,policy,in,the,order,in,which,they,will,be,executed;public,map,string,phase,get,phases,return,phases
LifecyclePolicy -> public Map<String, Phase> getPhases();1547740536;@return the {@link Phase}s for this {@link LifecyclePolicy} in the order_in which they will be executed.;public Map<String, Phase> getPhases() {_        return phases__    };return,the,link,phase,s,for,this,link,lifecycle,policy,in,the,order,in,which,they,will,be,executed;public,map,string,phase,get,phases,return,phases
LifecyclePolicy -> public Map<String, Phase> getPhases();1547841903;@return the {@link Phase}s for this {@link LifecyclePolicy} in the order_in which they will be executed.;public Map<String, Phase> getPhases() {_        return phases__    };return,the,link,phase,s,for,this,link,lifecycle,policy,in,the,order,in,which,they,will,be,executed;public,map,string,phase,get,phases,return,phases
LifecyclePolicy -> public Map<String, Phase> getPhases();1548880315;@return the {@link Phase}s for this {@link LifecyclePolicy} in the order_in which they will be executed.;public Map<String, Phase> getPhases() {_        return phases__    };return,the,link,phase,s,for,this,link,lifecycle,policy,in,the,order,in,which,they,will,be,executed;public,map,string,phase,get,phases,return,phases
LifecyclePolicy -> public String getName();1535665876;@return the name of this {@link LifecyclePolicy};public String getName() {_        return name__    };return,the,name,of,this,link,lifecycle,policy;public,string,get,name,return,name
LifecyclePolicy -> public String getName();1546556440;@return the name of this {@link LifecyclePolicy};public String getName() {_        return name__    };return,the,name,of,this,link,lifecycle,policy;public,string,get,name,return,name
LifecyclePolicy -> public String getName();1547740536;@return the name of this {@link LifecyclePolicy};public String getName() {_        return name__    };return,the,name,of,this,link,lifecycle,policy;public,string,get,name,return,name
LifecyclePolicy -> public String getName();1547841903;@return the name of this {@link LifecyclePolicy};public String getName() {_        return name__    };return,the,name,of,this,link,lifecycle,policy;public,string,get,name,return,name
LifecyclePolicy -> public String getName();1548880315;@return the name of this {@link LifecyclePolicy};public String getName() {_        return name__    };return,the,name,of,this,link,lifecycle,policy;public,string,get,name,return,name
LifecyclePolicy -> public LifecyclePolicy(String name, Map<String, Phase> phases);1535665876;@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(String name, Map<String, Phase> phases) {_       phases.values().forEach(phase -> {_            if (ALLOWED_ACTIONS.containsKey(phase.getName()) == false) {_                throw new IllegalArgumentException("Lifecycle does not support phase [" + phase.getName() + "]")__            }_            phase.getActions().forEach((actionName, action) -> {_                if (ALLOWED_ACTIONS.get(phase.getName()).contains(actionName) == false) {_                    throw new IllegalArgumentException("invalid action [" + actionName + "] " +_                        "defined in phase [" + phase.getName() +"]")__                }_            })__        })__        this.name = name__        this.phases = phases__    };param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,string,name,map,string,phase,phases,phases,values,for,each,phase,if,contains,key,phase,get,name,false,throw,new,illegal,argument,exception,lifecycle,does,not,support,phase,phase,get,name,phase,get,actions,for,each,action,name,action,if,get,phase,get,name,contains,action,name,false,throw,new,illegal,argument,exception,invalid,action,action,name,defined,in,phase,phase,get,name,this,name,name,this,phases,phases
LifecyclePolicy -> public LifecyclePolicy(String name, Map<String, Phase> phases);1546556440;@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(String name, Map<String, Phase> phases) {_       phases.values().forEach(phase -> {_            if (ALLOWED_ACTIONS.containsKey(phase.getName()) == false) {_                throw new IllegalArgumentException("Lifecycle does not support phase [" + phase.getName() + "]")__            }_            phase.getActions().forEach((actionName, action) -> {_                if (ALLOWED_ACTIONS.get(phase.getName()).contains(actionName) == false) {_                    throw new IllegalArgumentException("invalid action [" + actionName + "] " +_                        "defined in phase [" + phase.getName() +"]")__                }_            })__        })__        this.name = name__        this.phases = phases__    };param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,string,name,map,string,phase,phases,phases,values,for,each,phase,if,contains,key,phase,get,name,false,throw,new,illegal,argument,exception,lifecycle,does,not,support,phase,phase,get,name,phase,get,actions,for,each,action,name,action,if,get,phase,get,name,contains,action,name,false,throw,new,illegal,argument,exception,invalid,action,action,name,defined,in,phase,phase,get,name,this,name,name,this,phases,phases
LifecyclePolicy -> public LifecyclePolicy(String name, Map<String, Phase> phases);1547740536;@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(String name, Map<String, Phase> phases) {_       phases.values().forEach(phase -> {_            if (ALLOWED_ACTIONS.containsKey(phase.getName()) == false) {_                throw new IllegalArgumentException("Lifecycle does not support phase [" + phase.getName() + "]")__            }_            phase.getActions().forEach((actionName, action) -> {_                if (ALLOWED_ACTIONS.get(phase.getName()).contains(actionName) == false) {_                    throw new IllegalArgumentException("invalid action [" + actionName + "] " +_                        "defined in phase [" + phase.getName() +"]")__                }_            })__        })__        this.name = name__        this.phases = phases__    };param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,string,name,map,string,phase,phases,phases,values,for,each,phase,if,contains,key,phase,get,name,false,throw,new,illegal,argument,exception,lifecycle,does,not,support,phase,phase,get,name,phase,get,actions,for,each,action,name,action,if,get,phase,get,name,contains,action,name,false,throw,new,illegal,argument,exception,invalid,action,action,name,defined,in,phase,phase,get,name,this,name,name,this,phases,phases
LifecyclePolicy -> public LifecyclePolicy(String name, Map<String, Phase> phases);1547841903;@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(String name, Map<String, Phase> phases) {_       phases.values().forEach(phase -> {_            if (ALLOWED_ACTIONS.containsKey(phase.getName()) == false) {_                throw new IllegalArgumentException("Lifecycle does not support phase [" + phase.getName() + "]")__            }_            phase.getActions().forEach((actionName, action) -> {_                if (ALLOWED_ACTIONS.get(phase.getName()).contains(actionName) == false) {_                    throw new IllegalArgumentException("invalid action [" + actionName + "] " +_                        "defined in phase [" + phase.getName() +"]")__                }_            })__        })__        this.name = name__        this.phases = phases__    };param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,string,name,map,string,phase,phases,phases,values,for,each,phase,if,contains,key,phase,get,name,false,throw,new,illegal,argument,exception,lifecycle,does,not,support,phase,phase,get,name,phase,get,actions,for,each,action,name,action,if,get,phase,get,name,contains,action,name,false,throw,new,illegal,argument,exception,invalid,action,action,name,defined,in,phase,phase,get,name,this,name,name,this,phases,phases
LifecyclePolicy -> public LifecyclePolicy(String name, Map<String, Phase> phases);1548880315;@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(String name, Map<String, Phase> phases) {_       phases.values().forEach(phase -> {_            if (ALLOWED_ACTIONS.containsKey(phase.getName()) == false) {_                throw new IllegalArgumentException("Lifecycle does not support phase [" + phase.getName() + "]")__            }_            phase.getActions().forEach((actionName, action) -> {_                if (ALLOWED_ACTIONS.get(phase.getName()).contains(actionName) == false) {_                    throw new IllegalArgumentException("invalid action [" + actionName + "] " +_                        "defined in phase [" + phase.getName() +"]")__                }_            })__        })__        this.name = name__        this.phases = phases__    };param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,string,name,map,string,phase,phases,phases,values,for,each,phase,if,contains,key,phase,get,name,false,throw,new,illegal,argument,exception,lifecycle,does,not,support,phase,phase,get,name,phase,get,actions,for,each,action,name,action,if,get,phase,get,name,contains,action,name,false,throw,new,illegal,argument,exception,invalid,action,action,name,defined,in,phase,phase,get,name,this,name,name,this,phases,phases
