commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;3;;public static LifecyclePolicy parse(XContentParser parser, String name) {     return PARSER.apply(parser, name). }
true;public;0;3;/**  * @return the name of this {@link LifecyclePolicy}  */ ;/**  * @return the name of this {@link LifecyclePolicy}  */ public String getName() {     return name. }
true;public;0;3;/**  * @return the {@link Phase}s for this {@link LifecyclePolicy} in the order  *         in which they will be executed.  */ ;/**  * @return the {@link Phase}s for this {@link LifecyclePolicy} in the order  *         in which they will be executed.  */ public Map<String, Phase> getPhases() {     return phases. }
false;public;2;11;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.startObject(PHASES_FIELD.getPreferredName()).     for (Phase phase : phases.values()) {         builder.field(phase.getName(), phase).     }     builder.endObject().     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(name, phases). }
false;public;1;12;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (obj.getClass() != getClass()) {         return false.     }     LifecyclePolicy other = (LifecyclePolicy) obj.     return Objects.equals(name, other.name) && Objects.equals(phases, other.phases). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this, true, true). }
