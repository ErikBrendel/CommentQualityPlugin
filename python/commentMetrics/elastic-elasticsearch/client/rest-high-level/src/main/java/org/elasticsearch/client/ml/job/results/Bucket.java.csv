commented;modifiers;parameterAmount;loc;comment;code
false;public;2;22;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Job.ID.getPreferredName(), jobId).     builder.timeField(Result.TIMESTAMP.getPreferredName(), Result.TIMESTAMP.getPreferredName() + "_string", timestamp.getTime()).     builder.field(ANOMALY_SCORE.getPreferredName(), anomalyScore).     builder.field(BUCKET_SPAN.getPreferredName(), bucketSpan).     builder.field(INITIAL_ANOMALY_SCORE.getPreferredName(), initialAnomalyScore).     if (records.isEmpty() == false) {         builder.field(RECORDS.getPreferredName(), records).     }     builder.field(EVENT_COUNT.getPreferredName(), eventCount).     builder.field(Result.IS_INTERIM.getPreferredName(), isInterim).     builder.field(BUCKET_INFLUENCERS.getPreferredName(), bucketInfluencers).     builder.field(PROCESSING_TIME_MS.getPreferredName(), processingTimeMs).     if (scheduledEvents.isEmpty() == false) {         builder.field(SCHEDULED_EVENTS.getPreferredName(), scheduledEvents).     }     builder.field(Result.RESULT_TYPE.getPreferredName(), RESULT_TYPE_VALUE).     builder.endObject().     return builder. }
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;0;3;;public Date getTimestamp() {     return timestamp. }
true;public;0;3;/**  * Bucketspan expressed in seconds  */ ;/**  * Bucketspan expressed in seconds  */ public long getBucketSpan() {     return bucketSpan. }
false;public;0;3;;public double getAnomalyScore() {     return anomalyScore. }
false;;1;3;;void setAnomalyScore(double anomalyScore) {     this.anomalyScore = anomalyScore. }
false;public;0;3;;public double getInitialAnomalyScore() {     return initialAnomalyScore. }
false;;1;3;;void setInitialAnomalyScore(double initialAnomalyScore) {     this.initialAnomalyScore = initialAnomalyScore. }
true;public;0;3;/**  * Get all the anomaly records associated with this bucket.  * The records are not part of the bucket document. They will  * only be present when the bucket was retrieved and expanded  * to contain the associated records.  *  * @return the anomaly records for the bucket IF the bucket was expanded.  */ ;/**  * Get all the anomaly records associated with this bucket.  * The records are not part of the bucket document. They will  * only be present when the bucket was retrieved and expanded  * to contain the associated records.  *  * @return the anomaly records for the bucket IF the bucket was expanded.  */ public List<AnomalyRecord> getRecords() {     return records. }
false;;1;3;;void setRecords(List<AnomalyRecord> records) {     this.records = Collections.unmodifiableList(records). }
true;public;0;3;/**  * The number of records (events) actually processed in this bucket.  */ ;/**  * The number of records (events) actually processed in this bucket.  */ public long getEventCount() {     return eventCount. }
false;;1;3;;void setEventCount(long value) {     eventCount = value. }
false;public;0;3;;public boolean isInterim() {     return isInterim. }
false;;1;3;;void setInterim(boolean isInterim) {     this.isInterim = isInterim. }
false;public;0;3;;public long getProcessingTimeMs() {     return processingTimeMs. }
false;;1;3;;void setProcessingTimeMs(long timeMs) {     processingTimeMs = timeMs. }
false;public;0;3;;public List<BucketInfluencer> getBucketInfluencers() {     return bucketInfluencers. }
false;;1;3;;void setBucketInfluencers(List<BucketInfluencer> bucketInfluencers) {     this.bucketInfluencers = Collections.unmodifiableList(bucketInfluencers). }
false;public;0;3;;public List<String> getScheduledEvents() {     return scheduledEvents. }
false;;1;3;;void setScheduledEvents(List<String> scheduledEvents) {     this.scheduledEvents = Collections.unmodifiableList(scheduledEvents). }
false;public;0;5;;@Override public int hashCode() {     return Objects.hash(jobId, timestamp, eventCount, initialAnomalyScore, anomalyScore, records, isInterim, bucketSpan, bucketInfluencers, processingTimeMs, scheduledEvents). }
true;public;1;20;/**  * Compare all the fields and embedded anomaly records (if any)  */ ;/**  * Compare all the fields and embedded anomaly records (if any)  */ @Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     Bucket that = (Bucket) other.     return Objects.equals(this.jobId, that.jobId) && Objects.equals(this.timestamp, that.timestamp) && (this.eventCount == that.eventCount) && (this.bucketSpan == that.bucketSpan) && (this.anomalyScore == that.anomalyScore) && (this.initialAnomalyScore == that.initialAnomalyScore) && Objects.equals(this.records, that.records) && Objects.equals(this.isInterim, that.isInterim) && Objects.equals(this.bucketInfluencers, that.bucketInfluencers) && (this.processingTimeMs == that.processingTimeMs) && Objects.equals(this.scheduledEvents, that.scheduledEvents). }
