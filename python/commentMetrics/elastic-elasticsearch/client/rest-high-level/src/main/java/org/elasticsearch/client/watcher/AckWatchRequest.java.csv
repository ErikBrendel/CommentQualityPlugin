commented;modifiers;parameterAmount;loc;comment;code
false;private;2;23;;private void validateIds(String watchId, String... actionIds) {     ValidationException exception = new ValidationException().     if (watchId == null) {         exception.addValidationError("watch id is missing").     } else if (PutWatchRequest.isValidId(watchId) == false) {         exception.addValidationError("watch id contains whitespace").     }     if (actionIds != null) {         for (String actionId : actionIds) {             if (actionId == null) {                 exception.addValidationError(String.format(Locale.ROOT, "action id may not be null")).             } else if (PutWatchRequest.isValidId(actionId) == false) {                 exception.addValidationError(String.format(Locale.ROOT, "action id [%s] contains whitespace", actionId)).             }         }     }     if (!exception.validationErrors().isEmpty()) {         throw exception.     } }
true;public;0;3;/**  * @return The ID of the watch to be acked.  */ ;/**  * @return The ID of the watch to be acked.  */ public String getWatchId() {     return watchId. }
true;public;0;3;/**  * @return The IDs of the actions to be acked. If omitted,  * all actions for the given watch will be acknowledged.  */ ;/**  * @return The IDs of the actions to be acked. If omitted,  * all actions for the given watch will be acknowledged.  */ public String[] getActionIds() {     return actionIds. }
false;public;0;15;;@Override public String toString() {     StringBuilder sb = new StringBuilder("ack [").append(watchId).append("]").     if (actionIds.length > 0) {         sb.append("[").         for (int i = 0. i < actionIds.length. i++) {             if (i > 0) {                 sb.append(", ").             }             sb.append(actionIds[i]).         }         sb.append("]").     }     return sb.toString(). }
