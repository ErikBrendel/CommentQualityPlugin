commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getDatafeedId() {     return datafeedId. }
false;public;0;3;;public DatafeedState getDatafeedState() {     return datafeedState. }
false;public;0;3;;public NodeAttributes getNode() {     return node. }
false;public;0;3;;public String getAssignmentExplanation() {     return assignmentExplanation. }
false;public;2;27;;@Override public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params params) throws IOException {     builder.startObject().     builder.field(DatafeedConfig.ID.getPreferredName(), datafeedId).     builder.field(DatafeedState.STATE.getPreferredName(), datafeedState.toString()).     if (node != null) {         builder.startObject("node").         builder.field("id", node.getId()).         builder.field("name", node.getName()).         builder.field("ephemeral_id", node.getEphemeralId()).         builder.field("transport_address", node.getTransportAddress()).         builder.startObject("attributes").         for (Map.Entry<String, String> entry : node.getAttributes().entrySet()) {             if (entry.getKey().startsWith("ml.")) {                 builder.field(entry.getKey(), entry.getValue()).             }         }         builder.endObject().         builder.endObject().     }     if (assignmentExplanation != null) {         builder.field(ASSIGNMENT_EXPLANATION.getPreferredName(), assignmentExplanation).     }     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(datafeedId, datafeedState.toString(), node, assignmentExplanation). }
false;public;1;14;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     DatafeedStats other = (DatafeedStats) obj.     return Objects.equals(datafeedId, other.datafeedId) && Objects.equals(this.datafeedState, other.datafeedState) && Objects.equals(this.node, other.node) && Objects.equals(this.assignmentExplanation, other.assignmentExplanation). }
