commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * The jobId referencing the job for these statistics  */ ;/**  * The jobId referencing the job for these statistics  */ public String getJobId() {     return jobId. }
true;public;0;3;/**  * An object that describes the number of records processed and any related error counts  * See {@link DataCounts}  */ ;/**  * An object that describes the number of records processed and any related error counts  * See {@link DataCounts}  */ public DataCounts getDataCounts() {     return dataCounts. }
true;public;0;3;/**  * An object that provides information about the size and contents of the model.  * See {@link ModelSizeStats}  */ ;/**  * An object that provides information about the size and contents of the model.  * See {@link ModelSizeStats}  */ public ModelSizeStats getModelSizeStats() {     return modelSizeStats. }
true;public;0;3;/**  * An object that provides statistical information about forecasts of this job.  * See {@link ForecastStats}  */ ;/**  * An object that provides statistical information about forecasts of this job.  * See {@link ForecastStats}  */ public ForecastStats getForecastStats() {     return forecastStats. }
true;public;0;3;/**  * The status of the job  * See {@link JobState}  */ ;/**  * The status of the job  * See {@link JobState}  */ public JobState getState() {     return state. }
true;public;0;3;/**  * For open jobs only, contains information about the node where the job runs  * See {@link NodeAttributes}  */ ;/**  * For open jobs only, contains information about the node where the job runs  * See {@link NodeAttributes}  */ public NodeAttributes getNode() {     return node. }
true;public;0;3;/**  * For open jobs only, contains messages relating to the selection of a node to run the job.  */ ;/**  * For open jobs only, contains messages relating to the selection of a node to run the job.  */ public String getAssignmentExplanation() {     return assignmentExplanation. }
true;public;0;3;/**  * For open jobs only, the elapsed time for which the job has been open  */ ;/**  * For open jobs only, the elapsed time for which the job has been open  */ public TimeValue getOpenTime() {     return openTime. }
false;public;2;23;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Job.ID.getPreferredName(), jobId).     builder.field(DATA_COUNTS.getPreferredName(), dataCounts).     builder.field(STATE.getPreferredName(), state.toString()).     if (modelSizeStats != null) {         builder.field(MODEL_SIZE_STATS.getPreferredName(), modelSizeStats).     }     if (forecastStats != null) {         builder.field(FORECASTS_STATS.getPreferredName(), forecastStats).     }     if (node != null) {         builder.field(NODE.getPreferredName(), node).     }     if (assignmentExplanation != null) {         builder.field(ASSIGNMENT_EXPLANATION.getPreferredName(), assignmentExplanation).     }     if (openTime != null) {         builder.field(OPEN_TIME.getPreferredName(), openTime.getStringRep()).     }     return builder.endObject(). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobId, dataCounts, modelSizeStats, forecastStats, state, node, assignmentExplanation, openTime). }
false;public;1;20;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     JobStats other = (JobStats) obj.     return Objects.equals(jobId, other.jobId) && Objects.equals(this.dataCounts, other.dataCounts) && Objects.equals(this.modelSizeStats, other.modelSizeStats) && Objects.equals(this.forecastStats, other.forecastStats) && Objects.equals(this.state, other.state) && Objects.equals(this.node, other.node) && Objects.equals(this.assignmentExplanation, other.assignmentExplanation) && Objects.equals(this.openTime, other.openTime). }
