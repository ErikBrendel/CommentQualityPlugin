commented;modifiers;parameterAmount;loc;comment;code
false;public;0;47;;@Override public Optional<ValidationException> validate() {     final ValidationException validationException = new ValidationException().     if (id == null || id.isEmpty()) {         validationException.addValidationError("Id must be a non-null, non-empty string").     }     if (indexPattern == null || indexPattern.isEmpty()) {         validationException.addValidationError("Index pattern must be a non-null, non-empty string").     } else if (Regex.isMatchAllPattern(indexPattern)) {         validationException.addValidationError("Index pattern must not match all indices (as it would match it's own rollup index").     } else if (indexPattern != null && indexPattern.equals(rollupIndex)) {         validationException.addValidationError("Rollup index may not be the same as the index pattern").     } else if (Regex.isSimpleMatchPattern(indexPattern) && Regex.simpleMatch(indexPattern, rollupIndex)) {         validationException.addValidationError("Index pattern would match rollup index name which is not allowed").     }     if (rollupIndex == null || rollupIndex.isEmpty()) {         validationException.addValidationError("Rollup index must be a non-null, non-empty string").     }     if (cron == null || cron.isEmpty()) {         validationException.addValidationError("Cron schedule must be a non-null, non-empty string").     }     if (pageSize <= 0) {         validationException.addValidationError("Page size is mandatory and  must be a positive long").     }     if (groupConfig == null && (metricsConfig == null || metricsConfig.isEmpty())) {         validationException.addValidationError("At least one grouping or metric must be configured").     }     if (groupConfig != null) {         final Optional<ValidationException> groupValidationErrors = groupConfig.validate().         if (groupValidationErrors != null && groupValidationErrors.isPresent()) {             validationException.addValidationErrors(groupValidationErrors.get()).         }     }     if (metricsConfig != null) {         for (MetricConfig metricConfig : metricsConfig) {             final Optional<ValidationException> metricsValidationErrors = metricConfig.validate().             if (metricsValidationErrors != null && metricsValidationErrors.isPresent()) {                 validationException.addValidationErrors(metricsValidationErrors.get()).             }         }     }     if (validationException.validationErrors().isEmpty()) {         return Optional.empty().     }     return Optional.of(validationException). }
false;public;0;3;;public String getId() {     return id. }
false;public;0;3;;public GroupConfig getGroupConfig() {     return groupConfig. }
false;public;0;3;;public List<MetricConfig> getMetricsConfig() {     return metricsConfig. }
false;public;0;3;;public TimeValue getTimeout() {     return timeout. }
false;public;0;3;;public String getIndexPattern() {     return indexPattern. }
false;public;0;3;;public String getRollupIndex() {     return rollupIndex. }
false;public;0;3;;public String getCron() {     return cron. }
false;public;0;3;;public int getPageSize() {     return pageSize. }
false;public;2;26;;@Override public XContentBuilder toXContent(final XContentBuilder builder, final Params params) throws IOException {     builder.startObject().     {         builder.field(ID, id).         builder.field(INDEX_PATTERN, indexPattern).         builder.field(ROLLUP_INDEX, rollupIndex).         builder.field(CRON, cron).         if (groupConfig != null) {             builder.field(GroupConfig.NAME, groupConfig).         }         if (metricsConfig != null) {             builder.startArray(MetricConfig.NAME).             for (MetricConfig metric : metricsConfig) {                 metric.toXContent(builder, params).             }             builder.endArray().         }         if (timeout != null) {             builder.field(TIMEOUT, timeout.getStringRep()).         }         builder.field(PAGE_SIZE, pageSize).     }     builder.endObject().     return builder. }
false;public;1;18;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     final RollupJobConfig that = (RollupJobConfig) other.     return Objects.equals(this.id, that.id) && Objects.equals(this.indexPattern, that.indexPattern) && Objects.equals(this.rollupIndex, that.rollupIndex) && Objects.equals(this.cron, that.cron) && Objects.equals(this.groupConfig, that.groupConfig) && Objects.equals(this.metricsConfig, that.metricsConfig) && Objects.equals(this.timeout, that.timeout) && Objects.equals(this.pageSize, that.pageSize). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(id, indexPattern, rollupIndex, cron, groupConfig, metricsConfig, timeout, pageSize). }
false;public,static;2;3;;public static RollupJobConfig fromXContent(final XContentParser parser, @Nullable final String optionalJobId) throws IOException {     return PARSER.parse(parser, optionalJobId). }
