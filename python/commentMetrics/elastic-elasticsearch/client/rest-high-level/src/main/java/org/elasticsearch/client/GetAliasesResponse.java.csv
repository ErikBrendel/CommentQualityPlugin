commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public RestStatus status() {     return status. }
true;public;0;3;/**  * Return the possibly returned error, null otherwise  */ ;/**  * Return the possibly returned error, null otherwise  */ public String getError() {     return error. }
true;public;0;3;/**  * Return the exception that may have been returned  */ ;/**  * Return the exception that may have been returned  */ public ElasticsearchException getException() {     return exception. }
true;public;0;3;/**  * Return the requested aliases  */ ;/**  * Return the requested aliases  */ public Map<String, Set<AliasMetaData>> getAliases() {     return aliases. }
false;public;2;26;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     {         if (status != RestStatus.OK) {             builder.field("error", error).             builder.field("status", status.getStatus()).         }         for (Map.Entry<String, Set<AliasMetaData>> entry : aliases.entrySet()) {             builder.startObject(entry.getKey()).             {                 builder.startObject("aliases").                 {                     for (final AliasMetaData alias : entry.getValue()) {                         AliasMetaData.Builder.toXContent(alias, builder, ToXContent.EMPTY_PARAMS).                     }                 }                 builder.endObject().             }             builder.endObject().         }     }     builder.endObject().     return builder. }
true;public,static;1;48;/**  * Parse the get aliases response  */ ;/**  * Parse the get aliases response  */ public static GetAliasesResponse fromXContent(XContentParser parser) throws IOException {     if (parser.currentToken() == null) {         parser.nextToken().     }     ensureExpectedToken(Token.START_OBJECT, parser.currentToken(), parser::getTokenLocation).     Map<String, Set<AliasMetaData>> aliases = new HashMap<>().     String currentFieldName.     Token token.     String error = null.     ElasticsearchException exception = null.     RestStatus status = RestStatus.OK.     while (parser.nextToken() != Token.END_OBJECT) {         if (parser.currentToken() == Token.FIELD_NAME) {             currentFieldName = parser.currentName().             if ("status".equals(currentFieldName)) {                 if ((token = parser.nextToken()) != Token.FIELD_NAME) {                     ensureExpectedToken(Token.VALUE_NUMBER, token, parser::getTokenLocation).                     status = RestStatus.fromCode(parser.intValue()).                 }             } else if ("error".equals(currentFieldName)) {                 token = parser.nextToken().                 if (token == Token.VALUE_STRING) {                     error = parser.text().                 } else if (token == Token.START_OBJECT) {                     parser.nextToken().                     exception = ElasticsearchException.innerFromXContent(parser, true).                 } else if (token == Token.START_ARRAY) {                     parser.skipChildren().                 }             } else {                 String indexName = parser.currentName().                 if (parser.nextToken() == Token.START_OBJECT) {                     Set<AliasMetaData> parseInside = parseAliases(parser).                     aliases.put(indexName, parseInside).                 }             }         }     }     if (exception != null) {         assert error == null.         assert aliases.isEmpty().         return new GetAliasesResponse(status, exception).     }     return new GetAliasesResponse(status, error, aliases). }
false;private,static;1;22;;private static Set<AliasMetaData> parseAliases(XContentParser parser) throws IOException {     Set<AliasMetaData> aliases = new HashSet<>().     Token token.     String currentFieldName = null.     while ((token = parser.nextToken()) != Token.END_OBJECT) {         if (token == Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (token == Token.START_OBJECT) {             if ("aliases".equals(currentFieldName)) {                 while (parser.nextToken() != Token.END_OBJECT) {                     AliasMetaData fromXContent = AliasMetaData.Builder.fromXContent(parser).                     aliases.add(fromXContent).                 }             } else {                 parser.skipChildren().             }         } else if (token == Token.START_ARRAY) {             parser.skipChildren().         }     }     return aliases. }
