commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * The combination of the {@link FieldSecurity#getGrantedFields() granted} and  * {@link FieldSecurity#getDeniedFields() denied} document fields.  * May be null, in which case no field level security is applicable, and all the document's fields are granted access to.  */ ;/**  * The combination of the {@link FieldSecurity#getGrantedFields() granted} and  * {@link FieldSecurity#getDeniedFields() denied} document fields.  * May be null, in which case no field level security is applicable, and all the document's fields are granted access to.  */ public FieldSecurity getFieldSecurity() {     return fieldSecurity. }
true;public;0;3;/**  * A query limiting the visible documents in the indices. Can be null, in which  * case all documents are visible.  */ ;/**  * A query limiting the visible documents in the indices. Can be null, in which  * case all documents are visible.  */ @Nullable public String getQuery() {     return this.query. }
true;public;0;4;/**  * If {@code true} some documents might not be visible. Only the documents  * matching {@code query} will be readable.  */ ;/**  * If {@code true} some documents might not be visible. Only the documents  * matching {@code query} will be readable.  */ @Override public boolean isUsingDocumentLevelSecurity() {     return query != null. }
true;public;0;4;/**  * If {@code true} some document fields might not be visible.  */ ;/**  * If {@code true} some document fields might not be visible.  */ @Override public boolean isUsingFieldLevelSecurity() {     return fieldSecurity != null && fieldSecurity.isUsingFieldLevelSecurity(). }
false;public;1;15;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     IndicesPrivileges that = (IndicesPrivileges) o.     return indices.equals(that.indices) && privileges.equals(that.privileges) && allowRestrictedIndices == that.allowRestrictedIndices && Objects.equals(this.fieldSecurity, that.fieldSecurity) && Objects.equals(query, that.query). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(indices, privileges, allowRestrictedIndices, fieldSecurity, query). }
false;public;0;8;;@Override public String toString() {     try {         return XContentHelper.toXContent(this, XContentType.JSON, true).utf8ToString().     } catch (IOException e) {         throw new RuntimeException("Unexpected", e).     } }
false;public;2;14;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(NAMES.getPreferredName(), indices).     builder.field(PRIVILEGES.getPreferredName(), privileges).     builder.field(ALLOW_RESTRICTED_INDICES.getPreferredName(), allowRestrictedIndices).     if (fieldSecurity != null) {         builder.field(FIELD_PERMISSIONS.getPreferredName(), fieldSecurity, params).     }     if (isUsingDocumentLevelSecurity()) {         builder.field("query", query).     }     return builder.endObject(). }
false;public,static;1;3;;public static IndicesPrivileges fromXContent(XContentParser parser) {     return PARSER.apply(parser, null). }
false;public,static;0;3;;public static Builder builder() {     return new Builder(). }
false;public;1;3;;public Builder indices(String... indices) {     return indices(Arrays.asList(Objects.requireNonNull(indices, "indices required"))). }
false;public;1;4;;public Builder indices(Collection<String> indices) {     this.indices = Objects.requireNonNull(indices, "indices required").     return this. }
false;public;1;3;;public Builder privileges(String... privileges) {     return privileges(Arrays.asList(Objects.requireNonNull(privileges, "privileges required"))). }
false;public;1;4;;public Builder privileges(Collection<String> privileges) {     this.privileges = Objects.requireNonNull(privileges, "privileges required").     return this. }
false;public;1;7;;public Builder grantedFields(@Nullable String... grantedFields) {     if (grantedFields == null) {         this.grantedFields = null.         return this.     }     return grantedFields(Arrays.asList(grantedFields)). }
false;public;1;4;;public Builder grantedFields(@Nullable Collection<String> grantedFields) {     this.grantedFields = grantedFields.     return this. }
false;public;1;7;;public Builder deniedFields(@Nullable String... deniedFields) {     if (deniedFields == null) {         this.deniedFields = null.         return this.     }     return deniedFields(Arrays.asList(deniedFields)). }
false;public;1;4;;public Builder deniedFields(@Nullable Collection<String> deniedFields) {     this.deniedFields = deniedFields.     return this. }
false;public;1;4;;public Builder query(@Nullable String query) {     this.query = query.     return this. }
false;public;1;4;;public Builder allowRestrictedIndices(boolean allow) {     this.allowRestrictedIndices = allow.     return this. }
false;public;0;9;;public IndicesPrivileges build() {     final FieldSecurity fieldSecurity.     if (grantedFields == null && deniedFields == null) {         fieldSecurity = null.     } else {         fieldSecurity = new FieldSecurity(grantedFields, deniedFields).     }     return new IndicesPrivileges(indices, privileges, allowRestrictedIndices, fieldSecurity, query). }
