commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Helper method to create a query that will get ALL datafeeds  * @return new {@link GetDatafeedRequest} object searching for the datafeedId "_all"  */ ;/**  * Helper method to create a query that will get ALL datafeeds  * @return new {@link GetDatafeedRequest} object searching for the datafeedId "_all"  */ public static GetDatafeedRequest getAllDatafeedsRequest() {     return new GetDatafeedRequest(ALL_DATAFEEDS). }
true;public;0;3;/**  * All the datafeedIds for which to get configuration information  */ ;/**  * All the datafeedIds for which to get configuration information  */ public List<String> getDatafeedIds() {     return datafeedIds. }
true;public;1;3;/**  * Whether to ignore if a wildcard expression matches no datafeeds.  *  * @param allowNoDatafeeds If this is {@code false}, then an error is returned when a wildcard (or {@code _all})  *                        does not match any datafeeds  */ ;/**  * Whether to ignore if a wildcard expression matches no datafeeds.  *  * @param allowNoDatafeeds If this is {@code false}, then an error is returned when a wildcard (or {@code _all})  *                        does not match any datafeeds  */ public void setAllowNoDatafeeds(boolean allowNoDatafeeds) {     this.allowNoDatafeeds = allowNoDatafeeds. }
false;public;0;3;;public Boolean getAllowNoDatafeeds() {     return allowNoDatafeeds. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(datafeedIds, allowNoDatafeeds). }
false;public;1;14;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || other.getClass() != getClass()) {         return false.     }     GetDatafeedRequest that = (GetDatafeedRequest) other.     return Objects.equals(datafeedIds, that.datafeedIds) && Objects.equals(allowNoDatafeeds, that.allowNoDatafeeds). }
false;public;2;15;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (datafeedIds.isEmpty() == false) {         builder.field(DATAFEED_IDS.getPreferredName(), datafeedIds).     }     if (allowNoDatafeeds != null) {         builder.field(ALLOW_NO_DATAFEEDS.getPreferredName(), allowNoDatafeeds).     }     builder.endObject().     return builder. }
