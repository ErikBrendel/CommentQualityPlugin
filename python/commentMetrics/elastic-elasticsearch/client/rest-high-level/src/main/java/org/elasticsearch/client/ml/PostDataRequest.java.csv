commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;0;3;;public String getResetStart() {     return resetStart. }
true;public;1;3;/**  * Specifies the start of the bucket resetting range  *  * @param resetStart String representation of a timestamp. may be an epoch seconds, epoch millis or an ISO 8601 string  */ ;/**  * Specifies the start of the bucket resetting range  *  * @param resetStart String representation of a timestamp. may be an epoch seconds, epoch millis or an ISO 8601 string  */ public void setResetStart(String resetStart) {     this.resetStart = resetStart. }
false;public;0;3;;public String getResetEnd() {     return resetEnd. }
true;public;1;3;/**  * Specifies the end of the bucket resetting range  *  * @param resetEnd String representation of a timestamp. may be an epoch seconds, epoch millis or an ISO 8601 string  */ ;/**  * Specifies the end of the bucket resetting range  *  * @param resetEnd String representation of a timestamp. may be an epoch seconds, epoch millis or an ISO 8601 string  */ public void setResetEnd(String resetEnd) {     this.resetEnd = resetEnd. }
false;public;0;3;;public BytesReference getContent() {     return content. }
false;public;0;3;;public XContentType getXContentType() {     return xContentType. }
false;public;0;5;;@Override public int hashCode() {     // We leave out the content for server side parity     return Objects.hash(jobId, resetStart, resetEnd, xContentType). }
false;public;1;17;;@Override public boolean equals(Object obj) {     if (obj == this) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     // We leave out the content for server side parity     PostDataRequest other = (PostDataRequest) obj.     return Objects.equals(jobId, other.jobId) && Objects.equals(resetStart, other.resetStart) && Objects.equals(resetEnd, other.resetEnd) && Objects.equals(xContentType, other.xContentType). }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;2;14;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Job.ID.getPreferredName(), jobId).     builder.field(CONTENT_TYPE.getPreferredName(), xContentType.mediaType()).     if (resetEnd != null) {         builder.field(RESET_END.getPreferredName(), resetEnd).     }     if (resetStart != null) {         builder.field(RESET_START.getPreferredName(), resetStart).     }     builder.endObject().     return builder. }
true;public;1;4;/**  * Add a document via a {@code byte[]} array  *  * @param doc {@code byte[]} array of a serialized JSON object  */ ;/**  * Add a document via a {@code byte[]} array  *  * @param doc {@code byte[]} array of a serialized JSON object  */ public JsonBuilder addDoc(byte[] doc) {     bytes.add(ByteBuffer.wrap(doc)).     return this. }
true;public;1;4;/**  * Add a document via a serialized JSON String  *  * @param doc a serialized JSON String  */ ;/**  * Add a document via a serialized JSON String  *  * @param doc a serialized JSON String  */ public JsonBuilder addDoc(String doc) {     bytes.add(ByteBuffer.wrap(doc.getBytes(StandardCharsets.UTF_8))).     return this. }
true;public;1;7;/**  * Add a document via an object map  *  * @param doc document object to add to bulk request  * @throws IOException on parsing/serialization errors  */ ;/**  * Add a document via an object map  *  * @param doc document object to add to bulk request  * @throws IOException on parsing/serialization errors  */ public JsonBuilder addDoc(Map<String, Object> doc) throws IOException {     try (XContentBuilder builder = XContentBuilder.builder(XContentType.JSON.xContent())) {         builder.map(doc).         bytes.add(ByteBuffer.wrap(BytesReference.toBytes(BytesReference.bytes(builder)))).     }     return this. }
false;private;0;4;;private BytesReference build() {     ByteBuffer[] buffers = bytes.toArray(new ByteBuffer[bytes.size()]).     return BytesReference.fromByteBuffers(buffers). }
