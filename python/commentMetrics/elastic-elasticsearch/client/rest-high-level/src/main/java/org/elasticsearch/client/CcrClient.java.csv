commented;modifiers;parameterAmount;loc;comment;code
true;public;2;9;/**  * Executes the put follow api, which creates a follower index and then the follower index starts following  * the leader index.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-put-follow.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Executes the put follow api, which creates a follower index and then the follower index starts following  * the leader index.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-put-follow.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public PutFollowResponse putFollow(PutFollowRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, CcrRequestConverters::putFollow, options, PutFollowResponse::fromXContent, Collections.emptySet()). }
true;public;3;12;/**  * Asynchronously executes the put follow api, which creates a follower index and then the follower index starts  * following the leader index.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-put-follow.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously executes the put follow api, which creates a follower index and then the follower index starts  * following the leader index.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-put-follow.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void putFollowAsync(PutFollowRequest request, RequestOptions options, ActionListener<PutFollowResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, CcrRequestConverters::putFollow, options, PutFollowResponse::fromXContent, listener, Collections.emptySet()). }
true;public;2;9;/**  * Instructs a follower index to pause the following of a leader index.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-pause-follow.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Instructs a follower index to pause the following of a leader index.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-pause-follow.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public AcknowledgedResponse pauseFollow(PauseFollowRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, CcrRequestConverters::pauseFollow, options, AcknowledgedResponse::fromXContent, Collections.emptySet()). }
true;public;3;11;/**  * Asynchronously instruct a follower index to pause the following of a leader index.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-pause-follow.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously instruct a follower index to pause the following of a leader index.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-pause-follow.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void pauseFollowAsync(PauseFollowRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, CcrRequestConverters::pauseFollow, options, AcknowledgedResponse::fromXContent, listener, Collections.emptySet()). }
true;public;2;9;/**  * Instructs a follower index to resume the following of a leader index.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-resume-follow.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Instructs a follower index to resume the following of a leader index.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-resume-follow.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public AcknowledgedResponse resumeFollow(ResumeFollowRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, CcrRequestConverters::resumeFollow, options, AcknowledgedResponse::fromXContent, Collections.emptySet()). }
true;public;3;11;/**  * Asynchronously instruct a follower index to resume the following of a leader index.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-resume-follow.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously instruct a follower index to resume the following of a leader index.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-resume-follow.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void resumeFollowAsync(ResumeFollowRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, CcrRequestConverters::resumeFollow, options, AcknowledgedResponse::fromXContent, listener, Collections.emptySet()). }
true;public;2;9;/**  * Instructs a follower index to unfollow and become a regular index.  * Note that index following needs to be paused and the follower index needs to be closed.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-unfollow.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Instructs a follower index to unfollow and become a regular index.  * Note that index following needs to be paused and the follower index needs to be closed.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-unfollow.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public AcknowledgedResponse unfollow(UnfollowRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, CcrRequestConverters::unfollow, options, AcknowledgedResponse::fromXContent, Collections.emptySet()). }
true;public;3;12;/**  * Asynchronously instructs a follower index to unfollow and become a regular index.  * Note that index following needs to be paused and the follower index needs to be closed.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-unfollow.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously instructs a follower index to unfollow and become a regular index.  * Note that index following needs to be paused and the follower index needs to be closed.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-unfollow.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void unfollowAsync(UnfollowRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, CcrRequestConverters::unfollow, options, AcknowledgedResponse::fromXContent, listener, Collections.emptySet()). }
true;public;2;9;/**  * Stores an auto follow pattern.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-put-auto-follow-pattern.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Stores an auto follow pattern.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-put-auto-follow-pattern.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public AcknowledgedResponse putAutoFollowPattern(PutAutoFollowPatternRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, CcrRequestConverters::putAutoFollowPattern, options, AcknowledgedResponse::fromXContent, Collections.emptySet()). }
true;public;3;11;/**  * Asynchronously stores an auto follow pattern.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-put-auto-follow-pattern.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously stores an auto follow pattern.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-put-auto-follow-pattern.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void putAutoFollowPatternAsync(PutAutoFollowPatternRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, CcrRequestConverters::putAutoFollowPattern, options, AcknowledgedResponse::fromXContent, listener, Collections.emptySet()). }
true;public;2;10;/**  * Deletes an auto follow pattern.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-delete-auto-follow-pattern.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Deletes an auto follow pattern.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-delete-auto-follow-pattern.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public AcknowledgedResponse deleteAutoFollowPattern(DeleteAutoFollowPatternRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, CcrRequestConverters::deleteAutoFollowPattern, options, AcknowledgedResponse::fromXContent, Collections.emptySet()). }
true;public;3;12;/**  * Asynchronously deletes an auto follow pattern.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-delete-auto-follow-pattern.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously deletes an auto follow pattern.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-delete-auto-follow-pattern.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void deleteAutoFollowPatternAsync(DeleteAutoFollowPatternRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, CcrRequestConverters::deleteAutoFollowPattern, options, AcknowledgedResponse::fromXContent, listener, Collections.emptySet()). }
true;public;2;10;/**  * Gets an auto follow pattern.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-get-auto-follow-pattern.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Gets an auto follow pattern.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-get-auto-follow-pattern.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public GetAutoFollowPatternResponse getAutoFollowPattern(GetAutoFollowPatternRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, CcrRequestConverters::getAutoFollowPattern, options, GetAutoFollowPatternResponse::fromXContent, Collections.emptySet()). }
true;public;3;12;/**  * Asynchronously gets an auto follow pattern.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-get-auto-follow-pattern.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously gets an auto follow pattern.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-get-auto-follow-pattern.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void getAutoFollowPatternAsync(GetAutoFollowPatternRequest request, RequestOptions options, ActionListener<GetAutoFollowPatternResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, CcrRequestConverters::getAutoFollowPattern, options, GetAutoFollowPatternResponse::fromXContent, listener, Collections.emptySet()). }
true;public;2;10;/**  * Gets all CCR stats.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-get-stats.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Gets all CCR stats.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-get-stats.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public CcrStatsResponse getCcrStats(CcrStatsRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, CcrRequestConverters::getCcrStats, options, CcrStatsResponse::fromXContent, Collections.emptySet()). }
true;public;3;12;/**  * Asynchronously gets all CCR stats.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-get-stats.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  */ ;/**  * Asynchronously gets all CCR stats.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-get-stats.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  */ public void getCcrStatsAsync(CcrStatsRequest request, RequestOptions options, ActionListener<CcrStatsResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, CcrRequestConverters::getCcrStats, options, CcrStatsResponse::fromXContent, listener, Collections.emptySet()). }
true;public;2;10;/**  * Gets follow stats for specific indices.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-get-follow-stats.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Gets follow stats for specific indices.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-get-follow-stats.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public FollowStatsResponse getFollowStats(FollowStatsRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, CcrRequestConverters::getFollowStats, options, FollowStatsResponse::fromXContent, Collections.emptySet()). }
true;public;3;12;/**  * Asynchronously gets follow stats for specific indices.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-get-follow-stats.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  */ ;/**  * Asynchronously gets follow stats for specific indices.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-get-follow-stats.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  */ public void getFollowStatsAsync(FollowStatsRequest request, RequestOptions options, ActionListener<FollowStatsResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, CcrRequestConverters::getFollowStats, options, FollowStatsResponse::fromXContent, listener, Collections.emptySet()). }
true;public;2;9;/**  * Gets follow info for specific indices.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-get-follow-info.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Gets follow info for specific indices.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-get-follow-info.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public FollowInfoResponse getFollowInfo(FollowInfoRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, CcrRequestConverters::getFollowInfo, options, FollowInfoResponse::fromXContent, Collections.emptySet()). }
true;public;3;12;/**  * Asynchronously gets follow info for specific indices.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-get-follow-info.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  */ ;/**  * Asynchronously gets follow info for specific indices.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-get-follow-info.html">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  */ public void getFollowInfoAsync(FollowInfoRequest request, RequestOptions options, ActionListener<FollowInfoResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, CcrRequestConverters::getFollowInfo, options, FollowInfoResponse::fromXContent, listener, Collections.emptySet()). }
