commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;7;;public static PreviewDatafeedResponse fromXContent(XContentParser parser) throws IOException {     try (XContentBuilder builder = XContentFactory.jsonBuilder()) {         parser.nextToken().         builder.copyCurrentStructure(parser).         return new PreviewDatafeedResponse(BytesReference.bytes(builder)).     } }
false;public;0;3;;public BytesReference getPreview() {     return preview. }
true;public;0;13;/**  * Parses the preview to a list of {@link Map} objects  * @return List of previewed data  * @throws IOException If there is a parsing issue with the {@link BytesReference}  * @throws java.lang.ClassCastException If casting the raw {@link Object} entries to a {@link Map} fails  */ ;/**  * Parses the preview to a list of {@link Map} objects  * @return List of previewed data  * @throws IOException If there is a parsing issue with the {@link BytesReference}  * @throws java.lang.ClassCastException If casting the raw {@link Object} entries to a {@link Map} fails  */ @SuppressWarnings("unchecked") public List<Map<String, Object>> getDataList() throws IOException {     try (StreamInput streamInput = preview.streamInput().         XContentParser parser = XContentType.JSON.xContent().createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, streamInput)) {         XContentParser.Token token = parser.nextToken().         if (token == XContentParser.Token.START_ARRAY) {             return parser.listOrderedMap().stream().map(obj -> (Map<String, Object>) obj).collect(Collectors.toList()).         } else {             return Collections.singletonList(parser.mapOrdered()).         }     } }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     try (InputStream stream = preview.streamInput()) {         builder.rawValue(stream, XContentType.JSON).     }     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(preview). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     PreviewDatafeedResponse other = (PreviewDatafeedResponse) obj.     return Objects.equals(preview, other.preview). }
false;public,final;0;4;;@Override public final String toString() {     return Strings.toString(this). }
