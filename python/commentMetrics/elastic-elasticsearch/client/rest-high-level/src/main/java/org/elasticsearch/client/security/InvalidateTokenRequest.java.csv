commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;6;;public static InvalidateTokenRequest accessToken(String accessToken) {     if (Strings.isNullOrEmpty(accessToken)) {         throw new IllegalArgumentException("token is required").     }     return new InvalidateTokenRequest(accessToken, null). }
false;public,static;1;6;;public static InvalidateTokenRequest refreshToken(String refreshToken) {     if (Strings.isNullOrEmpty(refreshToken)) {         throw new IllegalArgumentException("refresh_token is required").     }     return new InvalidateTokenRequest(null, refreshToken). }
false;public,static;1;6;;public static InvalidateTokenRequest realmTokens(String realmName) {     if (Strings.isNullOrEmpty(realmName)) {         throw new IllegalArgumentException("realm name is required").     }     return new InvalidateTokenRequest(null, null, realmName, null). }
false;public,static;1;6;;public static InvalidateTokenRequest userTokens(String username) {     if (Strings.isNullOrEmpty(username)) {         throw new IllegalArgumentException("username is required").     }     return new InvalidateTokenRequest(null, null, null, username). }
false;public;0;3;;public String getAccessToken() {     return accessToken. }
false;public;0;3;;public String getRefreshToken() {     return refreshToken. }
false;public;0;3;;public String getRealmName() {     return realmName. }
false;public;0;3;;public String getUsername() {     return username. }
false;public;2;17;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (accessToken != null) {         builder.field("token", accessToken).     }     if (refreshToken != null) {         builder.field("refresh_token", refreshToken).     }     if (realmName != null) {         builder.field("realm_name", realmName).     }     if (username != null) {         builder.field("username", username).     }     return builder.endObject(). }
false;public;1;10;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     InvalidateTokenRequest that = (InvalidateTokenRequest) o.     return Objects.equals(accessToken, that.accessToken) && Objects.equals(refreshToken, that.refreshToken) && Objects.equals(realmName, that.realmName) && Objects.equals(username, that.username). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(accessToken, refreshToken, realmName, username). }
