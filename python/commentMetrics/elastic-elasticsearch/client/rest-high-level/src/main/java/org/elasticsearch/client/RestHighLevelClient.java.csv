commented;modifiers;parameterAmount;loc;comment;code
true;public,final;0;3;/**  * Returns the low-level client that the current high-level client instance is using to perform requests  */ ;/**  * Returns the low-level client that the current high-level client instance is using to perform requests  */ public final RestClient getLowLevelClient() {     return client. }
false;public,final;0;4;;@Override public final void close() throws IOException {     doClose.accept(client). }
true;public,final;0;3;/**  * Provides an {@link IndicesClient} which can be used to access the Indices API.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices.html">Indices API on elastic.co</a>  */ ;/**  * Provides an {@link IndicesClient} which can be used to access the Indices API.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices.html">Indices API on elastic.co</a>  */ public final IndicesClient indices() {     return indicesClient. }
true;public,final;0;3;/**  * Provides a {@link ClusterClient} which can be used to access the Cluster API.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster.html">Cluster API on elastic.co</a>  */ ;/**  * Provides a {@link ClusterClient} which can be used to access the Cluster API.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster.html">Cluster API on elastic.co</a>  */ public final ClusterClient cluster() {     return clusterClient. }
true;public,final;0;3;/**  * Provides a {@link IngestClient} which can be used to access the Ingest API.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest.html">Ingest API on elastic.co</a>  */ ;/**  * Provides a {@link IngestClient} which can be used to access the Ingest API.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest.html">Ingest API on elastic.co</a>  */ public final IngestClient ingest() {     return ingestClient. }
true;public,final;0;3;/**  * Provides a {@link SnapshotClient} which can be used to access the Snapshot API.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html">Snapshot API on elastic.co</a>  */ ;/**  * Provides a {@link SnapshotClient} which can be used to access the Snapshot API.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html">Snapshot API on elastic.co</a>  */ public final SnapshotClient snapshot() {     return snapshotClient. }
true;public;0;3;/**  * Provides methods for accessing the Elastic Licensed Rollup APIs that  * are shipped with the default distribution of Elasticsearch. All of  * these APIs will 404 if run against the OSS distribution of Elasticsearch.  * <p>  * See the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-apis.html">  * Watcher APIs on elastic.co</a> for more information.  */ ;/**  * Provides methods for accessing the Elastic Licensed Rollup APIs that  * are shipped with the default distribution of Elasticsearch. All of  * these APIs will 404 if run against the OSS distribution of Elasticsearch.  * <p>  * See the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-apis.html">  * Watcher APIs on elastic.co</a> for more information.  */ public RollupClient rollup() {     return rollupClient. }
true;public,final;0;3;/**  * Provides methods for accessing the Elastic Licensed CCR APIs that  * are shipped with the Elastic Stack distribution of Elasticsearch. All of  * these APIs will 404 if run against the OSS distribution of Elasticsearch.  * <p>  * See the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-api.html">  * CCR APIs on elastic.co</a> for more information.  *  * @return the client wrapper for making CCR API calls  */ ;/**  * Provides methods for accessing the Elastic Licensed CCR APIs that  * are shipped with the Elastic Stack distribution of Elasticsearch. All of  * these APIs will 404 if run against the OSS distribution of Elasticsearch.  * <p>  * See the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-api.html">  * CCR APIs on elastic.co</a> for more information.  *  * @return the client wrapper for making CCR API calls  */ public final CcrClient ccr() {     return ccrClient. }
true;public,final;0;3;/**  * Provides a {@link TasksClient} which can be used to access the Tasks API.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html">Task Management API on elastic.co</a>  */ ;/**  * Provides a {@link TasksClient} which can be used to access the Tasks API.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html">Task Management API on elastic.co</a>  */ public final TasksClient tasks() {     return tasksClient. }
true;public,final;0;3;/**  * Provides methods for accessing the Elastic Licensed X-Pack Info  * and Usage APIs that are shipped with the default distribution of  * Elasticsearch. All of these APIs will 404 if run against the OSS  * distribution of Elasticsearch.  * <p>  * See the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/info-api.html">  * Info APIs on elastic.co</a> for more information.  */ ;/**  * Provides methods for accessing the Elastic Licensed X-Pack Info  * and Usage APIs that are shipped with the default distribution of  * Elasticsearch. All of these APIs will 404 if run against the OSS  * distribution of Elasticsearch.  * <p>  * See the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/info-api.html">  * Info APIs on elastic.co</a> for more information.  */ public final XPackClient xpack() {     return xPackClient. }
true;public;0;1;/**  * Provides methods for accessing the Elastic Licensed Watcher APIs that  * are shipped with the default distribution of Elasticsearch. All of  * these APIs will 404 if run against the OSS distribution of Elasticsearch.  * <p>  * See the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api.html">  * Watcher APIs on elastic.co</a> for more information.  */ ;/**  * Provides methods for accessing the Elastic Licensed Watcher APIs that  * are shipped with the default distribution of Elasticsearch. All of  * these APIs will 404 if run against the OSS distribution of Elasticsearch.  * <p>  * See the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api.html">  * Watcher APIs on elastic.co</a> for more information.  */ public WatcherClient watcher() {     return watcherClient. }
true;public;0;1;/**  * Provides methods for accessing the Elastic Licensed Graph explore API that  * is shipped with the default distribution of Elasticsearch. All of  * these APIs will 404 if run against the OSS distribution of Elasticsearch.  * <p>  * See the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/graph-explore-api.html">  * Graph API on elastic.co</a> for more information.  */ ;/**  * Provides methods for accessing the Elastic Licensed Graph explore API that  * is shipped with the default distribution of Elasticsearch. All of  * these APIs will 404 if run against the OSS distribution of Elasticsearch.  * <p>  * See the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/graph-explore-api.html">  * Graph API on elastic.co</a> for more information.  */ public GraphClient graph() {     return graphClient. }
true;public;0;1;/**  * Provides methods for accessing the Elastic Licensed Licensing APIs that  * are shipped with the default distribution of Elasticsearch. All of  * these APIs will 404 if run against the OSS distribution of Elasticsearch.  * <p>  * See the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/licensing-apis.html">  * Licensing APIs on elastic.co</a> for more information.  */ ;/**  * Provides methods for accessing the Elastic Licensed Licensing APIs that  * are shipped with the default distribution of Elasticsearch. All of  * these APIs will 404 if run against the OSS distribution of Elasticsearch.  * <p>  * See the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/licensing-apis.html">  * Licensing APIs on elastic.co</a> for more information.  */ public LicenseClient license() {     return licenseClient. }
true;public;0;3;/**  * A wrapper for the {@link RestHighLevelClient} that provides methods for  * accessing the Elastic Index Lifecycle APIs.  * <p>  * See the <a href="http://FILL-ME-IN-WE-HAVE-NO-DOCS-YET.com"> X-Pack APIs  * on elastic.co</a> for more information.  */ ;/**  * A wrapper for the {@link RestHighLevelClient} that provides methods for  * accessing the Elastic Index Lifecycle APIs.  * <p>  * See the <a href="http://FILL-ME-IN-WE-HAVE-NO-DOCS-YET.com"> X-Pack APIs  * on elastic.co</a> for more information.  */ public IndexLifecycleClient indexLifecycle() {     return ilmClient. }
true;public;0;3;/**  * Provides methods for accessing the Elastic Licensed Licensing APIs that  * are shipped with the default distribution of Elasticsearch. All of  * these APIs will 404 if run against the OSS distribution of Elasticsearch.  * <p>  * See the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/migration-api.html">  * Migration APIs on elastic.co</a> for more information.  */ ;/**  * Provides methods for accessing the Elastic Licensed Licensing APIs that  * are shipped with the default distribution of Elasticsearch. All of  * these APIs will 404 if run against the OSS distribution of Elasticsearch.  * <p>  * See the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/migration-api.html">  * Migration APIs on elastic.co</a> for more information.  */ public MigrationClient migration() {     return migrationClient. }
true;public;0;3;/**  * Provides methods for accessing the Elastic Licensed Machine Learning APIs that  * are shipped with the Elastic Stack distribution of Elasticsearch. All of  * these APIs will 404 if run against the OSS distribution of Elasticsearch.  * <p>  * See the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-apis.html">  * Machine Learning APIs on elastic.co</a> for more information.  *  * @return the client wrapper for making Machine Learning API calls  */ ;/**  * Provides methods for accessing the Elastic Licensed Machine Learning APIs that  * are shipped with the Elastic Stack distribution of Elasticsearch. All of  * these APIs will 404 if run against the OSS distribution of Elasticsearch.  * <p>  * See the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-apis.html">  * Machine Learning APIs on elastic.co</a> for more information.  *  * @return the client wrapper for making Machine Learning API calls  */ public MachineLearningClient machineLearning() {     return machineLearningClient. }
true;public;0;3;/**  * Provides methods for accessing the Elastic Licensed Security APIs that  * are shipped with the Elastic Stack distribution of Elasticsearch. All of  * these APIs will 404 if run against the OSS distribution of Elasticsearch.  * <p>  * See the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api.html">  * Security APIs on elastic.co</a> for more information.  *  * @return the client wrapper for making Security API calls  */ ;/**  * Provides methods for accessing the Elastic Licensed Security APIs that  * are shipped with the Elastic Stack distribution of Elasticsearch. All of  * these APIs will 404 if run against the OSS distribution of Elasticsearch.  * <p>  * See the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api.html">  * Security APIs on elastic.co</a> for more information.  *  * @return the client wrapper for making Security API calls  */ public SecurityClient security() {     return securityClient. }
true;public,final;2;3;/**  * Executes a bulk request using the Bulk API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html">Bulk API on elastic.co</a>  * @param bulkRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ ;/**  * Executes a bulk request using the Bulk API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html">Bulk API on elastic.co</a>  * @param bulkRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ public final BulkResponse bulk(BulkRequest bulkRequest, RequestOptions options) throws IOException {     return performRequestAndParseEntity(bulkRequest, RequestConverters::bulk, options, BulkResponse::fromXContent, emptySet()). }
true;public,final;3;3;/**  * Asynchronously executes a bulk request using the Bulk API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html">Bulk API on elastic.co</a>  * @param bulkRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously executes a bulk request using the Bulk API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html">Bulk API on elastic.co</a>  * @param bulkRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public final void bulkAsync(BulkRequest bulkRequest, RequestOptions options, ActionListener<BulkResponse> listener) {     performRequestAsyncAndParseEntity(bulkRequest, RequestConverters::bulk, options, BulkResponse::fromXContent, listener, emptySet()). }
true;public,final;2;5;/**  * Executes a reindex request.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html">Reindex API on elastic.co</a>  * @param reindexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ ;/**  * Executes a reindex request.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html">Reindex API on elastic.co</a>  * @param reindexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ public final BulkByScrollResponse reindex(ReindexRequest reindexRequest, RequestOptions options) throws IOException {     return performRequestAndParseEntity(reindexRequest, RequestConverters::reindex, options, BulkByScrollResponse::fromXContent, emptySet()). }
true;public,final;2;5;/**  * Submits a reindex task.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html">Reindex API on elastic.co</a>  * @param reindexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the submission response  */ ;/**  * Submits a reindex task.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html">Reindex API on elastic.co</a>  * @param reindexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the submission response  */ public final TaskSubmissionResponse submitReindexTask(ReindexRequest reindexRequest, RequestOptions options) throws IOException {     return performRequestAndParseEntity(reindexRequest, RequestConverters::submitReindex, options, TaskSubmissionResponse::fromXContent, emptySet()). }
true;public,final;3;5;/**  * Asynchronously executes a reindex request.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html">Reindex API on elastic.co</a>  * @param reindexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously executes a reindex request.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html">Reindex API on elastic.co</a>  * @param reindexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public final void reindexAsync(ReindexRequest reindexRequest, RequestOptions options, ActionListener<BulkByScrollResponse> listener) {     performRequestAsyncAndParseEntity(reindexRequest, RequestConverters::reindex, options, BulkByScrollResponse::fromXContent, listener, emptySet()). }
true;public,final;2;5;/**  * Executes a update by query request.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update-by-query.html">  *     Update By Query API on elastic.co</a>  * @param updateByQueryRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ ;/**  * Executes a update by query request.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update-by-query.html">  *     Update By Query API on elastic.co</a>  * @param updateByQueryRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ public final BulkByScrollResponse updateByQuery(UpdateByQueryRequest updateByQueryRequest, RequestOptions options) throws IOException {     return performRequestAndParseEntity(updateByQueryRequest, RequestConverters::updateByQuery, options, BulkByScrollResponse::fromXContent, emptySet()). }
true;public,final;3;6;/**  * Asynchronously executes an update by query request.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update-by-query.html">  *     Update By Query API on elastic.co</a>  * @param updateByQueryRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously executes an update by query request.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update-by-query.html">  *     Update By Query API on elastic.co</a>  * @param updateByQueryRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public final void updateByQueryAsync(UpdateByQueryRequest updateByQueryRequest, RequestOptions options, ActionListener<BulkByScrollResponse> listener) {     performRequestAsyncAndParseEntity(updateByQueryRequest, RequestConverters::updateByQuery, options, BulkByScrollResponse::fromXContent, listener, emptySet()). }
true;public,final;2;5;/**  * Executes a delete by query request.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete-by-query.html">  *     Delete By Query API on elastic.co</a>  * @param deleteByQueryRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ ;/**  * Executes a delete by query request.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete-by-query.html">  *     Delete By Query API on elastic.co</a>  * @param deleteByQueryRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ public final BulkByScrollResponse deleteByQuery(DeleteByQueryRequest deleteByQueryRequest, RequestOptions options) throws IOException {     return performRequestAndParseEntity(deleteByQueryRequest, RequestConverters::deleteByQuery, options, BulkByScrollResponse::fromXContent, emptySet()). }
true;public,final;3;6;/**  * Asynchronously executes a delete by query request.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete-by-query.html">  *     Delete By Query API on elastic.co</a>  * @param deleteByQueryRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously executes a delete by query request.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete-by-query.html">  *     Delete By Query API on elastic.co</a>  * @param deleteByQueryRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public final void deleteByQueryAsync(DeleteByQueryRequest deleteByQueryRequest, RequestOptions options, ActionListener<BulkByScrollResponse> listener) {     performRequestAsyncAndParseEntity(deleteByQueryRequest, RequestConverters::deleteByQuery, options, BulkByScrollResponse::fromXContent, listener, emptySet()). }
true;public,final;2;4;/**  * Executes a delete by query rethrottle request.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete-by-query.html">  *     Delete By Query API on elastic.co</a>  * @param rethrottleRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ ;/**  * Executes a delete by query rethrottle request.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete-by-query.html">  *     Delete By Query API on elastic.co</a>  * @param rethrottleRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ public final ListTasksResponse deleteByQueryRethrottle(RethrottleRequest rethrottleRequest, RequestOptions options) throws IOException {     return performRequestAndParseEntity(rethrottleRequest, RequestConverters::rethrottleDeleteByQuery, options, ListTasksResponse::fromXContent, emptySet()). }
true;public,final;3;5;/**  * Asynchronously execute an delete by query rethrottle request.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete-by-query.html">  *     Delete By Query API on elastic.co</a>  * @param rethrottleRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously execute an delete by query rethrottle request.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete-by-query.html">  *     Delete By Query API on elastic.co</a>  * @param rethrottleRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public final void deleteByQueryRethrottleAsync(RethrottleRequest rethrottleRequest, RequestOptions options, ActionListener<ListTasksResponse> listener) {     performRequestAsyncAndParseEntity(rethrottleRequest, RequestConverters::rethrottleDeleteByQuery, options, ListTasksResponse::fromXContent, listener, emptySet()). }
true;public,final;2;4;/**  * Executes a update by query rethrottle request.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update-by-query.html">  *     Update By Query API on elastic.co</a>  * @param rethrottleRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ ;/**  * Executes a update by query rethrottle request.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update-by-query.html">  *     Update By Query API on elastic.co</a>  * @param rethrottleRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ public final ListTasksResponse updateByQueryRethrottle(RethrottleRequest rethrottleRequest, RequestOptions options) throws IOException {     return performRequestAndParseEntity(rethrottleRequest, RequestConverters::rethrottleUpdateByQuery, options, ListTasksResponse::fromXContent, emptySet()). }
true;public,final;3;5;/**  * Asynchronously execute an update by query rethrottle request.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update-by-query.html">  *     Update By Query API on elastic.co</a>  * @param rethrottleRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously execute an update by query rethrottle request.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update-by-query.html">  *     Update By Query API on elastic.co</a>  * @param rethrottleRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public final void updateByQueryRethrottleAsync(RethrottleRequest rethrottleRequest, RequestOptions options, ActionListener<ListTasksResponse> listener) {     performRequestAsyncAndParseEntity(rethrottleRequest, RequestConverters::rethrottleUpdateByQuery, options, ListTasksResponse::fromXContent, listener, emptySet()). }
true;public,final;2;4;/**  * Executes a reindex rethrottling request.  * See the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html#docs-reindex-rethrottle">  * Reindex rethrottling API on elastic.co</a>  *  * @param rethrottleRequest the request  * @param options           the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ ;/**  * Executes a reindex rethrottling request.  * See the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html#docs-reindex-rethrottle">  * Reindex rethrottling API on elastic.co</a>  *  * @param rethrottleRequest the request  * @param options           the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ public final ListTasksResponse reindexRethrottle(RethrottleRequest rethrottleRequest, RequestOptions options) throws IOException {     return performRequestAndParseEntity(rethrottleRequest, RequestConverters::rethrottleReindex, options, ListTasksResponse::fromXContent, emptySet()). }
true;public,final;3;5;/**  * Executes a reindex rethrottling request.  * See the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html#docs-reindex-rethrottle">  * Reindex rethrottling API on elastic.co</a>  *  * @param rethrottleRequest the request  * @param options           the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener          the listener to be notified upon request completion  */ ;/**  * Executes a reindex rethrottling request.  * See the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html#docs-reindex-rethrottle">  * Reindex rethrottling API on elastic.co</a>  *  * @param rethrottleRequest the request  * @param options           the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener          the listener to be notified upon request completion  */ public final void reindexRethrottleAsync(RethrottleRequest rethrottleRequest, RequestOptions options, ActionListener<ListTasksResponse> listener) {     performRequestAsyncAndParseEntity(rethrottleRequest, RequestConverters::rethrottleReindex, options, ListTasksResponse::fromXContent, listener, emptySet()). }
true;public,final;1;4;/**  * Pings the remote Elasticsearch cluster and returns true if the ping succeeded, false otherwise  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return <code>true</code> if the ping succeeded, false otherwise  */ ;/**  * Pings the remote Elasticsearch cluster and returns true if the ping succeeded, false otherwise  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return <code>true</code> if the ping succeeded, false otherwise  */ public final boolean ping(RequestOptions options) throws IOException {     return performRequest(new MainRequest(), (request) -> RequestConverters.ping(), options, RestHighLevelClient::convertExistsResponse, emptySet()). }
true;public,final;1;4;/**  * Get the cluster info otherwise provided when sending an HTTP request to '/'  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ ;/**  * Get the cluster info otherwise provided when sending an HTTP request to '/'  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ public final MainResponse info(RequestOptions options) throws IOException {     return performRequestAndParseEntity(new MainRequest(), (request) -> RequestConverters.info(), options, MainResponse::fromXContent, emptySet()). }
true;public,final;2;3;/**  * Retrieves a document by id using the Get API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html">Get API on elastic.co</a>  * @param getRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ ;/**  * Retrieves a document by id using the Get API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html">Get API on elastic.co</a>  * @param getRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ public final GetResponse get(GetRequest getRequest, RequestOptions options) throws IOException {     return performRequestAndParseEntity(getRequest, RequestConverters::get, options, GetResponse::fromXContent, singleton(404)). }
true;public,final;3;4;/**  * Asynchronously retrieves a document by id using the Get API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html">Get API on elastic.co</a>  * @param getRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously retrieves a document by id using the Get API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html">Get API on elastic.co</a>  * @param getRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public final void getAsync(GetRequest getRequest, RequestOptions options, ActionListener<GetResponse> listener) {     performRequestAsyncAndParseEntity(getRequest, RequestConverters::get, options, GetResponse::fromXContent, listener, singleton(404)). }
true;public,final;2;4;/**  * Retrieves multiple documents by id using the Multi Get API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-multi-get.html">Multi Get API on elastic.co</a>  * @param multiGetRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @deprecated use {@link #mget(MultiGetRequest, RequestOptions)} instead  */ ;/**  * Retrieves multiple documents by id using the Multi Get API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-multi-get.html">Multi Get API on elastic.co</a>  * @param multiGetRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @deprecated use {@link #mget(MultiGetRequest, RequestOptions)} instead  */ @Deprecated public final MultiGetResponse multiGet(MultiGetRequest multiGetRequest, RequestOptions options) throws IOException {     return mget(multiGetRequest, options). }
true;public,final;2;4;/**  * Retrieves multiple documents by id using the Multi Get API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-multi-get.html">Multi Get API on elastic.co</a>  * @param multiGetRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ ;/**  * Retrieves multiple documents by id using the Multi Get API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-multi-get.html">Multi Get API on elastic.co</a>  * @param multiGetRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ public final MultiGetResponse mget(MultiGetRequest multiGetRequest, RequestOptions options) throws IOException {     return performRequestAndParseEntity(multiGetRequest, RequestConverters::multiGet, options, MultiGetResponse::fromXContent, singleton(404)). }
true;public,final;3;4;/**  * Asynchronously retrieves multiple documents by id using the Multi Get API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-multi-get.html">Multi Get API on elastic.co</a>  * @param multiGetRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  * @deprecated use {@link #mgetAsync(MultiGetRequest, RequestOptions, ActionListener)} instead  */ ;/**  * Asynchronously retrieves multiple documents by id using the Multi Get API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-multi-get.html">Multi Get API on elastic.co</a>  * @param multiGetRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  * @deprecated use {@link #mgetAsync(MultiGetRequest, RequestOptions, ActionListener)} instead  */ @Deprecated public final void multiGetAsync(MultiGetRequest multiGetRequest, RequestOptions options, ActionListener<MultiGetResponse> listener) {     mgetAsync(multiGetRequest, options, listener). }
true;public,final;3;4;/**  * Asynchronously retrieves multiple documents by id using the Multi Get API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-multi-get.html">Multi Get API on elastic.co</a>  * @param multiGetRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously retrieves multiple documents by id using the Multi Get API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-multi-get.html">Multi Get API on elastic.co</a>  * @param multiGetRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public final void mgetAsync(MultiGetRequest multiGetRequest, RequestOptions options, ActionListener<MultiGetResponse> listener) {     performRequestAsyncAndParseEntity(multiGetRequest, RequestConverters::multiGet, options, MultiGetResponse::fromXContent, listener, singleton(404)). }
true;public,final;2;3;/**  * Checks for the existence of a document. Returns true if it exists, false otherwise.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html">Get API on elastic.co</a>  * @param getRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return <code>true</code> if the document exists, <code>false</code> otherwise  */ ;/**  * Checks for the existence of a document. Returns true if it exists, false otherwise.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html">Get API on elastic.co</a>  * @param getRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return <code>true</code> if the document exists, <code>false</code> otherwise  */ public final boolean exists(GetRequest getRequest, RequestOptions options) throws IOException {     return performRequest(getRequest, RequestConverters::exists, options, RestHighLevelClient::convertExistsResponse, emptySet()). }
true;public,final;3;4;/**  * Asynchronously checks for the existence of a document. Returns true if it exists, false otherwise.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html">Get API on elastic.co</a>  * @param getRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously checks for the existence of a document. Returns true if it exists, false otherwise.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html">Get API on elastic.co</a>  * @param getRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public final void existsAsync(GetRequest getRequest, RequestOptions options, ActionListener<Boolean> listener) {     performRequestAsync(getRequest, RequestConverters::exists, options, RestHighLevelClient::convertExistsResponse, listener, emptySet()). }
true;public;2;3;/**  * Checks for the existence of a document with a "_source" field. Returns true if it exists, false otherwise.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html#_source">Source exists API  * on elastic.co</a>  * @param getRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return <code>true</code> if the document and _source field exists, <code>false</code> otherwise  */ ;/**  * Checks for the existence of a document with a "_source" field. Returns true if it exists, false otherwise.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html#_source">Source exists API  * on elastic.co</a>  * @param getRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return <code>true</code> if the document and _source field exists, <code>false</code> otherwise  */ public boolean existsSource(GetRequest getRequest, RequestOptions options) throws IOException {     return performRequest(getRequest, RequestConverters::sourceExists, options, RestHighLevelClient::convertExistsResponse, emptySet()). }
true;public,final;3;4;/**  * Asynchronously checks for the existence of a document with a "_source" field. Returns true if it exists, false otherwise.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html#_source">Source exists API  * on elastic.co</a>  * @param getRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously checks for the existence of a document with a "_source" field. Returns true if it exists, false otherwise.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html#_source">Source exists API  * on elastic.co</a>  * @param getRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public final void existsSourceAsync(GetRequest getRequest, RequestOptions options, ActionListener<Boolean> listener) {     performRequestAsync(getRequest, RequestConverters::sourceExists, options, RestHighLevelClient::convertExistsResponse, listener, emptySet()). }
true;public,final;2;3;/**  * Index a document using the Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html">Index API on elastic.co</a>  * @param indexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ ;/**  * Index a document using the Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html">Index API on elastic.co</a>  * @param indexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ public final IndexResponse index(IndexRequest indexRequest, RequestOptions options) throws IOException {     return performRequestAndParseEntity(indexRequest, RequestConverters::index, options, IndexResponse::fromXContent, emptySet()). }
true;public,final;3;4;/**  * Asynchronously index a document using the Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html">Index API on elastic.co</a>  * @param indexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously index a document using the Index API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html">Index API on elastic.co</a>  * @param indexRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public final void indexAsync(IndexRequest indexRequest, RequestOptions options, ActionListener<IndexResponse> listener) {     performRequestAsyncAndParseEntity(indexRequest, RequestConverters::index, options, IndexResponse::fromXContent, listener, emptySet()). }
true;public,final;2;4;/**  * Executes a count request using the Count API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-count.html">Count API on elastic.co</a>  * @param countRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ ;/**  * Executes a count request using the Count API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-count.html">Count API on elastic.co</a>  * @param countRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ public final CountResponse count(CountRequest countRequest, RequestOptions options) throws IOException {     return performRequestAndParseEntity(countRequest, RequestConverters::count, options, CountResponse::fromXContent, emptySet()). }
true;public,final;3;4;/**  * Asynchronously executes a count request using the Count API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-count.html">Count API on elastic.co</a>  * @param countRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously executes a count request using the Count API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-count.html">Count API on elastic.co</a>  * @param countRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public final void countAsync(CountRequest countRequest, RequestOptions options, ActionListener<CountResponse> listener) {     performRequestAsyncAndParseEntity(countRequest, RequestConverters::count, options, CountResponse::fromXContent, listener, emptySet()). }
true;public,final;2;3;/**  * Updates a document using the Update API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update.html">Update API on elastic.co</a>  * @param updateRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ ;/**  * Updates a document using the Update API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update.html">Update API on elastic.co</a>  * @param updateRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ public final UpdateResponse update(UpdateRequest updateRequest, RequestOptions options) throws IOException {     return performRequestAndParseEntity(updateRequest, RequestConverters::update, options, UpdateResponse::fromXContent, emptySet()). }
true;public,final;3;4;/**  * Asynchronously updates a document using the Update API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update.html">Update API on elastic.co</a>  * @param updateRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously updates a document using the Update API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update.html">Update API on elastic.co</a>  * @param updateRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public final void updateAsync(UpdateRequest updateRequest, RequestOptions options, ActionListener<UpdateResponse> listener) {     performRequestAsyncAndParseEntity(updateRequest, RequestConverters::update, options, UpdateResponse::fromXContent, listener, emptySet()). }
true;public,final;2;4;/**  * Deletes a document by id using the Delete API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete.html">Delete API on elastic.co</a>  * @param deleteRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ ;/**  * Deletes a document by id using the Delete API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete.html">Delete API on elastic.co</a>  * @param deleteRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ public final DeleteResponse delete(DeleteRequest deleteRequest, RequestOptions options) throws IOException {     return performRequestAndParseEntity(deleteRequest, RequestConverters::delete, options, DeleteResponse::fromXContent, singleton(404)). }
true;public,final;3;4;/**  * Asynchronously deletes a document by id using the Delete API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete.html">Delete API on elastic.co</a>  * @param deleteRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously deletes a document by id using the Delete API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete.html">Delete API on elastic.co</a>  * @param deleteRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public final void deleteAsync(DeleteRequest deleteRequest, RequestOptions options, ActionListener<DeleteResponse> listener) {     performRequestAsyncAndParseEntity(deleteRequest, RequestConverters::delete, options, DeleteResponse::fromXContent, listener, Collections.singleton(404)). }
true;public,final;2;8;/**  * Executes a search request using the Search API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-search.html">Search API on elastic.co</a>  * @param searchRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ ;/**  * Executes a search request using the Search API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-search.html">Search API on elastic.co</a>  * @param searchRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ public final SearchResponse search(SearchRequest searchRequest, RequestOptions options) throws IOException {     return performRequestAndParseEntity(searchRequest, r -> RequestConverters.search(r, "_search"), options, SearchResponse::fromXContent, emptySet()). }
true;public,final;3;9;/**  * Asynchronously executes a search using the Search API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-search.html">Search API on elastic.co</a>  * @param searchRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously executes a search using the Search API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-search.html">Search API on elastic.co</a>  * @param searchRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public final void searchAsync(SearchRequest searchRequest, RequestOptions options, ActionListener<SearchResponse> listener) {     performRequestAsyncAndParseEntity(searchRequest, r -> RequestConverters.search(r, "_search"), options, SearchResponse::fromXContent, listener, emptySet()). }
true;public,final;2;4;/**  * Executes a multi search using the msearch API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html">Multi search API on  * elastic.co</a>  * @param multiSearchRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @deprecated use {@link #msearch(MultiSearchRequest, RequestOptions)} instead  */ ;/**  * Executes a multi search using the msearch API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html">Multi search API on  * elastic.co</a>  * @param multiSearchRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @deprecated use {@link #msearch(MultiSearchRequest, RequestOptions)} instead  */ @Deprecated public final MultiSearchResponse multiSearch(MultiSearchRequest multiSearchRequest, RequestOptions options) throws IOException {     return msearch(multiSearchRequest, options). }
true;public,final;2;4;/**  * Executes a multi search using the msearch API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html">Multi search API on  * elastic.co</a>  * @param multiSearchRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ ;/**  * Executes a multi search using the msearch API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html">Multi search API on  * elastic.co</a>  * @param multiSearchRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ public final MultiSearchResponse msearch(MultiSearchRequest multiSearchRequest, RequestOptions options) throws IOException {     return performRequestAndParseEntity(multiSearchRequest, RequestConverters::multiSearch, options, MultiSearchResponse::fromXContext, emptySet()). }
true;public,final;3;5;/**  * Asynchronously executes a multi search using the msearch API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html">Multi search API on  * elastic.co</a>  * @param searchRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  * @deprecated use {@link #msearchAsync(MultiSearchRequest, RequestOptions, ActionListener)} instead  */ ;/**  * Asynchronously executes a multi search using the msearch API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html">Multi search API on  * elastic.co</a>  * @param searchRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  * @deprecated use {@link #msearchAsync(MultiSearchRequest, RequestOptions, ActionListener)} instead  */ @Deprecated public final void multiSearchAsync(MultiSearchRequest searchRequest, RequestOptions options, ActionListener<MultiSearchResponse> listener) {     msearchAsync(searchRequest, options, listener). }
true;public,final;3;5;/**  * Asynchronously executes a multi search using the msearch API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html">Multi search API on  * elastic.co</a>  * @param searchRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously executes a multi search using the msearch API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html">Multi search API on  * elastic.co</a>  * @param searchRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public final void msearchAsync(MultiSearchRequest searchRequest, RequestOptions options, ActionListener<MultiSearchResponse> listener) {     performRequestAsyncAndParseEntity(searchRequest, RequestConverters::multiSearch, options, MultiSearchResponse::fromXContext, listener, emptySet()). }
true;public,final;2;4;/**  * Executes a search using the Search Scroll API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html">Search Scroll  * API on elastic.co</a>  * @param searchScrollRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @deprecated use {@link #scroll(SearchScrollRequest, RequestOptions)} instead  */ ;/**  * Executes a search using the Search Scroll API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html">Search Scroll  * API on elastic.co</a>  * @param searchScrollRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @deprecated use {@link #scroll(SearchScrollRequest, RequestOptions)} instead  */ @Deprecated public final SearchResponse searchScroll(SearchScrollRequest searchScrollRequest, RequestOptions options) throws IOException {     return scroll(searchScrollRequest, options). }
true;public,final;2;4;/**  * Executes a search using the Search Scroll API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html">Search Scroll  * API on elastic.co</a>  * @param searchScrollRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ ;/**  * Executes a search using the Search Scroll API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html">Search Scroll  * API on elastic.co</a>  * @param searchScrollRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ public final SearchResponse scroll(SearchScrollRequest searchScrollRequest, RequestOptions options) throws IOException {     return performRequestAndParseEntity(searchScrollRequest, RequestConverters::searchScroll, options, SearchResponse::fromXContent, emptySet()). }
true;public,final;3;5;/**  * Asynchronously executes a search using the Search Scroll API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html">Search Scroll  * API on elastic.co</a>  * @param searchScrollRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  * @deprecated use {@link #scrollAsync(SearchScrollRequest, RequestOptions, ActionListener)} instead  */ ;/**  * Asynchronously executes a search using the Search Scroll API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html">Search Scroll  * API on elastic.co</a>  * @param searchScrollRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  * @deprecated use {@link #scrollAsync(SearchScrollRequest, RequestOptions, ActionListener)} instead  */ @Deprecated public final void searchScrollAsync(SearchScrollRequest searchScrollRequest, RequestOptions options, ActionListener<SearchResponse> listener) {     scrollAsync(searchScrollRequest, options, listener). }
true;public,final;3;5;/**  * Asynchronously executes a search using the Search Scroll API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html">Search Scroll  * API on elastic.co</a>  * @param searchScrollRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously executes a search using the Search Scroll API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html">Search Scroll  * API on elastic.co</a>  * @param searchScrollRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public final void scrollAsync(SearchScrollRequest searchScrollRequest, RequestOptions options, ActionListener<SearchResponse> listener) {     performRequestAsyncAndParseEntity(searchScrollRequest, RequestConverters::searchScroll, options, SearchResponse::fromXContent, listener, emptySet()). }
true;public,final;2;4;/**  * Clears one or more scroll ids using the Clear Scroll API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html#_clear_scroll_api">  * Clear Scroll API on elastic.co</a>  * @param clearScrollRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ ;/**  * Clears one or more scroll ids using the Clear Scroll API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html#_clear_scroll_api">  * Clear Scroll API on elastic.co</a>  * @param clearScrollRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ public final ClearScrollResponse clearScroll(ClearScrollRequest clearScrollRequest, RequestOptions options) throws IOException {     return performRequestAndParseEntity(clearScrollRequest, RequestConverters::clearScroll, options, ClearScrollResponse::fromXContent, emptySet()). }
true;public,final;3;5;/**  * Asynchronously clears one or more scroll ids using the Clear Scroll API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html#_clear_scroll_api">  * Clear Scroll API on elastic.co</a>  * @param clearScrollRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously clears one or more scroll ids using the Clear Scroll API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html#_clear_scroll_api">  * Clear Scroll API on elastic.co</a>  * @param clearScrollRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public final void clearScrollAsync(ClearScrollRequest clearScrollRequest, RequestOptions options, ActionListener<ClearScrollResponse> listener) {     performRequestAsyncAndParseEntity(clearScrollRequest, RequestConverters::clearScroll, options, ClearScrollResponse::fromXContent, listener, emptySet()). }
true;public,final;2;5;/**  * Executes a request using the Search Template API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html">Search Template API  * on elastic.co</a>.  * @param searchTemplateRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ ;/**  * Executes a request using the Search Template API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html">Search Template API  * on elastic.co</a>.  * @param searchTemplateRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ public final SearchTemplateResponse searchTemplate(SearchTemplateRequest searchTemplateRequest, RequestOptions options) throws IOException {     return performRequestAndParseEntity(searchTemplateRequest, RequestConverters::searchTemplate, options, SearchTemplateResponse::fromXContent, emptySet()). }
true;public,final;3;5;/**  * Asynchronously executes a request using the Search Template API.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html">Search Template API  * on elastic.co</a>.  */ ;/**  * Asynchronously executes a request using the Search Template API.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html">Search Template API  * on elastic.co</a>.  */ public final void searchTemplateAsync(SearchTemplateRequest searchTemplateRequest, RequestOptions options, ActionListener<SearchTemplateResponse> listener) {     performRequestAsyncAndParseEntity(searchTemplateRequest, RequestConverters::searchTemplate, options, SearchTemplateResponse::fromXContent, listener, emptySet()). }
true;public,final;2;9;/**  * Executes a request using the Explain API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-explain.html">Explain API on elastic.co</a>  * @param explainRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ ;/**  * Executes a request using the Explain API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-explain.html">Explain API on elastic.co</a>  * @param explainRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ public final ExplainResponse explain(ExplainRequest explainRequest, RequestOptions options) throws IOException {     return performRequest(explainRequest, RequestConverters::explain, options, response -> {         CheckedFunction<XContentParser, ExplainResponse, IOException> entityParser = parser -> ExplainResponse.fromXContent(parser, convertExistsResponse(response)).         return parseEntity(response.getEntity(), entityParser).     }, singleton(404)). }
true;public,final;3;9;/**  * Asynchronously executes a request using the Explain API.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-explain.html">Explain API on elastic.co</a>  * @param explainRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously executes a request using the Explain API.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-explain.html">Explain API on elastic.co</a>  * @param explainRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public final void explainAsync(ExplainRequest explainRequest, RequestOptions options, ActionListener<ExplainResponse> listener) {     performRequestAsync(explainRequest, RequestConverters::explain, options, response -> {         CheckedFunction<XContentParser, ExplainResponse, IOException> entityParser = parser -> ExplainResponse.fromXContent(parser, convertExistsResponse(response)).         return parseEntity(response.getEntity(), entityParser).     }, listener, singleton(404)). }
true;public,final;2;4;/**  * Calls the Term Vectors API  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-termvectors.html">Term Vectors API on  * elastic.co</a>  *  * @param request   the request  * @param options   the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  */ ;/**  * Calls the Term Vectors API  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-termvectors.html">Term Vectors API on  * elastic.co</a>  *  * @param request   the request  * @param options   the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  */ public final TermVectorsResponse termvectors(TermVectorsRequest request, RequestOptions options) throws IOException {     return performRequestAndParseEntity(request, RequestConverters::termVectors, options, TermVectorsResponse::fromXContent, emptySet()). }
true;public,final;3;4;/**  * Asynchronously calls the Term Vectors API  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-termvectors.html">Term Vectors API on  * elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously calls the Term Vectors API  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-termvectors.html">Term Vectors API on  * elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public final void termvectorsAsync(TermVectorsRequest request, RequestOptions options, ActionListener<TermVectorsResponse> listener) {     performRequestAsyncAndParseEntity(request, RequestConverters::termVectors, options, TermVectorsResponse::fromXContent, listener, emptySet()). }
true;public,final;2;4;/**  * Calls the Multi Term Vectors API  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-multi-termvectors.html">Multi Term Vectors API  * on elastic.co</a>  *  * @param request   the request  * @param options   the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  */ ;/**  * Calls the Multi Term Vectors API  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-multi-termvectors.html">Multi Term Vectors API  * on elastic.co</a>  *  * @param request   the request  * @param options   the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  */ public final MultiTermVectorsResponse mtermvectors(MultiTermVectorsRequest request, RequestOptions options) throws IOException {     return performRequestAndParseEntity(request, RequestConverters::mtermVectors, options, MultiTermVectorsResponse::fromXContent, emptySet()). }
true;public,final;3;5;/**  * Asynchronously calls the Multi Term Vectors API  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-multi-termvectors.html">Multi Term Vectors API  * on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously calls the Multi Term Vectors API  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-multi-termvectors.html">Multi Term Vectors API  * on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public final void mtermvectorsAsync(MultiTermVectorsRequest request, RequestOptions options, ActionListener<MultiTermVectorsResponse> listener) {     performRequestAsyncAndParseEntity(request, RequestConverters::mtermVectors, options, MultiTermVectorsResponse::fromXContent, listener, emptySet()). }
true;public,final;2;4;/**  * Executes a request using the Ranking Evaluation API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-rank-eval.html">Ranking Evaluation API  * on elastic.co</a>  * @param rankEvalRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ ;/**  * Executes a request using the Ranking Evaluation API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-rank-eval.html">Ranking Evaluation API  * on elastic.co</a>  * @param rankEvalRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ public final RankEvalResponse rankEval(RankEvalRequest rankEvalRequest, RequestOptions options) throws IOException {     return performRequestAndParseEntity(rankEvalRequest, RequestConverters::rankEval, options, RankEvalResponse::fromXContent, emptySet()). }
true;public,final;2;5;/**  * Executes a request using the Multi Search Template API.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/multi-search-template.html">Multi Search Template API  * on elastic.co</a>.  */ ;/**  * Executes a request using the Multi Search Template API.  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/multi-search-template.html">Multi Search Template API  * on elastic.co</a>.  */ public final MultiSearchTemplateResponse msearchTemplate(MultiSearchTemplateRequest multiSearchTemplateRequest, RequestOptions options) throws IOException {     return performRequestAndParseEntity(multiSearchTemplateRequest, RequestConverters::multiSearchTemplate, options, MultiSearchTemplateResponse::fromXContext, emptySet()). }
true;public,final;3;6;/**  * Asynchronously executes a request using the Multi Search Template API  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/multi-search-template.html">Multi Search Template API  * on elastic.co</a>.  */ ;/**  * Asynchronously executes a request using the Multi Search Template API  *  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/multi-search-template.html">Multi Search Template API  * on elastic.co</a>.  */ public final void msearchTemplateAsync(MultiSearchTemplateRequest multiSearchTemplateRequest, RequestOptions options, ActionListener<MultiSearchTemplateResponse> listener) {     performRequestAsyncAndParseEntity(multiSearchTemplateRequest, RequestConverters::multiSearchTemplate, options, MultiSearchTemplateResponse::fromXContext, listener, emptySet()). }
true;public,final;3;4;/**  * Asynchronously executes a request using the Ranking Evaluation API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-rank-eval.html">Ranking Evaluation API  * on elastic.co</a>  * @param rankEvalRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously executes a request using the Ranking Evaluation API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-rank-eval.html">Ranking Evaluation API  * on elastic.co</a>  * @param rankEvalRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public final void rankEvalAsync(RankEvalRequest rankEvalRequest, RequestOptions options, ActionListener<RankEvalResponse> listener) {     performRequestAsyncAndParseEntity(rankEvalRequest, RequestConverters::rankEval, options, RankEvalResponse::fromXContent, listener, emptySet()). }
true;public,final;2;5;/**  * Executes a request using the Field Capabilities API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-field-caps.html">Field Capabilities API  * on elastic.co</a>.  * @param fieldCapabilitiesRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ ;/**  * Executes a request using the Field Capabilities API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-field-caps.html">Field Capabilities API  * on elastic.co</a>.  * @param fieldCapabilitiesRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ public final FieldCapabilitiesResponse fieldCaps(FieldCapabilitiesRequest fieldCapabilitiesRequest, RequestOptions options) throws IOException {     return performRequestAndParseEntity(fieldCapabilitiesRequest, RequestConverters::fieldCaps, options, FieldCapabilitiesResponse::fromXContent, emptySet()). }
true;public;2;4;/**  * Get stored script by id.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting-using.html">  *     How to use scripts on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ ;/**  * Get stored script by id.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting-using.html">  *     How to use scripts on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ public GetStoredScriptResponse getScript(GetStoredScriptRequest request, RequestOptions options) throws IOException {     return performRequestAndParseEntity(request, RequestConverters::getScript, options, GetStoredScriptResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously get stored script by id.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting-using.html">  *     How to use scripts on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously get stored script by id.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting-using.html">  *     How to use scripts on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void getScriptAsync(GetStoredScriptRequest request, RequestOptions options, ActionListener<GetStoredScriptResponse> listener) {     performRequestAsyncAndParseEntity(request, RequestConverters::getScript, options, GetStoredScriptResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Delete stored script by id.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting-using.html">  *     How to use scripts on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ ;/**  * Delete stored script by id.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting-using.html">  *     How to use scripts on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ public AcknowledgedResponse deleteScript(DeleteStoredScriptRequest request, RequestOptions options) throws IOException {     return performRequestAndParseEntity(request, RequestConverters::deleteScript, options, AcknowledgedResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously delete stored script by id.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting-using.html">  *     How to use scripts on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously delete stored script by id.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting-using.html">  *     How to use scripts on elastic.co</a>  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void deleteScriptAsync(DeleteStoredScriptRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {     performRequestAsyncAndParseEntity(request, RequestConverters::deleteScript, options, AcknowledgedResponse::fromXContent, listener, emptySet()). }
true;public;2;5;/**  * Puts an stored script using the Scripting API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting-using.html"> Scripting API  * on elastic.co</a>  * @param putStoredScriptRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ ;/**  * Puts an stored script using the Scripting API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting-using.html"> Scripting API  * on elastic.co</a>  * @param putStoredScriptRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  */ public AcknowledgedResponse putScript(PutStoredScriptRequest putStoredScriptRequest, RequestOptions options) throws IOException {     return performRequestAndParseEntity(putStoredScriptRequest, RequestConverters::putScript, options, AcknowledgedResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously puts an stored script using the Scripting API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting-using.html"> Scripting API  * on elastic.co</a>  * @param putStoredScriptRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously puts an stored script using the Scripting API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting-using.html"> Scripting API  * on elastic.co</a>  * @param putStoredScriptRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void putScriptAsync(PutStoredScriptRequest putStoredScriptRequest, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {     performRequestAsyncAndParseEntity(putStoredScriptRequest, RequestConverters::putScript, options, AcknowledgedResponse::fromXContent, listener, emptySet()). }
true;public,final;3;5;/**  * Asynchronously executes a request using the Field Capabilities API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-field-caps.html">Field Capabilities API  * on elastic.co</a>.  * @param fieldCapabilitiesRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously executes a request using the Field Capabilities API.  * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-field-caps.html">Field Capabilities API  * on elastic.co</a>.  * @param fieldCapabilitiesRequest the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public final void fieldCapsAsync(FieldCapabilitiesRequest fieldCapabilitiesRequest, RequestOptions options, ActionListener<FieldCapabilitiesResponse> listener) {     performRequestAsyncAndParseEntity(fieldCapabilitiesRequest, RequestConverters::fieldCaps, options, FieldCapabilitiesResponse::fromXContent, listener, emptySet()). }
true;protected,final;5;9;/**  * @deprecated If creating a new HLRC ReST API call, consider creating new actions instead of reusing server actions. The Validation  * layer has been added to the ReST client, and requests should extend {@link Validatable} instead of {@link ActionRequest}.  */ ;/**  * @deprecated If creating a new HLRC ReST API call, consider creating new actions instead of reusing server actions. The Validation  * layer has been added to the ReST client, and requests should extend {@link Validatable} instead of {@link ActionRequest}.  */ @Deprecated protected final <Req extends ActionRequest, Resp> Resp performRequestAndParseEntity(Req request, CheckedFunction<Req, Request, IOException> requestConverter, RequestOptions options, CheckedFunction<XContentParser, Resp, IOException> entityParser, Set<Integer> ignores) throws IOException {     return performRequest(request, requestConverter, options, response -> parseEntity(response.getEntity(), entityParser), ignores). }
true;protected,final;5;8;/**  * Defines a helper method for performing a request and then parsing the returned entity using the provided entityParser.  */ ;/**  * Defines a helper method for performing a request and then parsing the returned entity using the provided entityParser.  */ protected final <Req extends Validatable, Resp> Resp performRequestAndParseEntity(Req request, CheckedFunction<Req, Request, IOException> requestConverter, RequestOptions options, CheckedFunction<XContentParser, Resp, IOException> entityParser, Set<Integer> ignores) throws IOException {     return performRequest(request, requestConverter, options, response -> parseEntity(response.getEntity(), entityParser), ignores). }
true;protected,final;5;12;/**  * @deprecated If creating a new HLRC ReST API call, consider creating new actions instead of reusing server actions. The Validation  * layer has been added to the ReST client, and requests should extend {@link Validatable} instead of {@link ActionRequest}.  */ ;/**  * @deprecated If creating a new HLRC ReST API call, consider creating new actions instead of reusing server actions. The Validation  * layer has been added to the ReST client, and requests should extend {@link Validatable} instead of {@link ActionRequest}.  */ @Deprecated protected final <Req extends ActionRequest, Resp> Resp performRequest(Req request, CheckedFunction<Req, Request, IOException> requestConverter, RequestOptions options, CheckedFunction<Response, Resp, IOException> responseConverter, Set<Integer> ignores) throws IOException {     ActionRequestValidationException validationException = request.validate().     if (validationException != null && validationException.validationErrors().isEmpty() == false) {         throw validationException.     }     return internalPerformRequest(request, requestConverter, options, responseConverter, ignores). }
true;protected,final;5;11;/**  * Defines a helper method for performing a request.  */ ;/**  * Defines a helper method for performing a request.  */ protected final <Req extends Validatable, Resp> Resp performRequest(Req request, CheckedFunction<Req, Request, IOException> requestConverter, RequestOptions options, CheckedFunction<Response, Resp, IOException> responseConverter, Set<Integer> ignores) throws IOException {     Optional<ValidationException> validationException = request.validate().     if (validationException != null && validationException.isPresent()) {         throw validationException.get().     }     return internalPerformRequest(request, requestConverter, options, responseConverter, ignores). }
true;private;5;31;/**  * Provides common functionality for performing a request.  */ ;/**  * Provides common functionality for performing a request.  */ private <Req, Resp> Resp internalPerformRequest(Req request, CheckedFunction<Req, Request, IOException> requestConverter, RequestOptions options, CheckedFunction<Response, Resp, IOException> responseConverter, Set<Integer> ignores) throws IOException {     Request req = requestConverter.apply(request).     req.setOptions(options).     Response response.     try {         response = client.performRequest(req).     } catch (ResponseException e) {         if (ignores.contains(e.getResponse().getStatusLine().getStatusCode())) {             try {                 return responseConverter.apply(e.getResponse()).             } catch (Exception innerException) {                 // first. If parsing of the response breaks, we fall back to parsing it as an error.                 throw parseResponseException(e).             }         }         throw parseResponseException(e).     }     try {         return responseConverter.apply(response).     } catch (Exception e) {         throw new IOException("Unable to parse response body for " + response, e).     } }
true;protected,final;4;27;/**  * Defines a helper method for requests that can 404 and in which case will return an empty Optional  * otherwise tries to parse the response body  */ ;/**  * Defines a helper method for requests that can 404 and in which case will return an empty Optional  * otherwise tries to parse the response body  */ protected final <Req extends Validatable, Resp> Optional<Resp> performRequestAndParseOptionalEntity(Req request, CheckedFunction<Req, Request, IOException> requestConverter, RequestOptions options, CheckedFunction<XContentParser, Resp, IOException> entityParser) throws IOException {     Optional<ValidationException> validationException = request.validate().     if (validationException != null && validationException.isPresent()) {         throw validationException.get().     }     Request req = requestConverter.apply(request).     req.setOptions(options).     Response response.     try {         response = client.performRequest(req).     } catch (ResponseException e) {         if (RestStatus.NOT_FOUND.getStatus() == e.getResponse().getStatusLine().getStatusCode()) {             return Optional.empty().         }         throw parseResponseException(e).     }     try {         return Optional.of(parseEntity(response.getEntity(), entityParser)).     } catch (Exception e) {         throw new IOException("Unable to parse response body for " + response, e).     } }
true;protected,final;6;9;/**  * @deprecated If creating a new HLRC ReST API call, consider creating new actions instead of reusing server actions. The Validation  * layer has been added to the ReST client, and requests should extend {@link Validatable} instead of {@link ActionRequest}.  */ ;/**  * @deprecated If creating a new HLRC ReST API call, consider creating new actions instead of reusing server actions. The Validation  * layer has been added to the ReST client, and requests should extend {@link Validatable} instead of {@link ActionRequest}.  */ @Deprecated protected final <Req extends ActionRequest, Resp> void performRequestAsyncAndParseEntity(Req request, CheckedFunction<Req, Request, IOException> requestConverter, RequestOptions options, CheckedFunction<XContentParser, Resp, IOException> entityParser, ActionListener<Resp> listener, Set<Integer> ignores) {     performRequestAsync(request, requestConverter, options, response -> parseEntity(response.getEntity(), entityParser), listener, ignores). }
true;protected,final;6;8;/**  * Defines a helper method for asynchronously performing a request.  */ ;/**  * Defines a helper method for asynchronously performing a request.  */ protected final <Req extends Validatable, Resp> void performRequestAsyncAndParseEntity(Req request, CheckedFunction<Req, Request, IOException> requestConverter, RequestOptions options, CheckedFunction<XContentParser, Resp, IOException> entityParser, ActionListener<Resp> listener, Set<Integer> ignores) {     performRequestAsync(request, requestConverter, options, response -> parseEntity(response.getEntity(), entityParser), listener, ignores). }
true;protected,final;6;13;/**  * @deprecated If creating a new HLRC ReST API call, consider creating new actions instead of reusing server actions. The Validation  * layer has been added to the ReST client, and requests should extend {@link Validatable} instead of {@link ActionRequest}.  */ ;/**  * @deprecated If creating a new HLRC ReST API call, consider creating new actions instead of reusing server actions. The Validation  * layer has been added to the ReST client, and requests should extend {@link Validatable} instead of {@link ActionRequest}.  */ @Deprecated protected final <Req extends ActionRequest, Resp> void performRequestAsync(Req request, CheckedFunction<Req, Request, IOException> requestConverter, RequestOptions options, CheckedFunction<Response, Resp, IOException> responseConverter, ActionListener<Resp> listener, Set<Integer> ignores) {     ActionRequestValidationException validationException = request.validate().     if (validationException != null && validationException.validationErrors().isEmpty() == false) {         listener.onFailure(validationException).         return.     }     internalPerformRequestAsync(request, requestConverter, options, responseConverter, listener, ignores). }
true;protected,final;6;12;/**  * Defines a helper method for asynchronously performing a request.  */ ;/**  * Defines a helper method for asynchronously performing a request.  */ protected final <Req extends Validatable, Resp> void performRequestAsync(Req request, CheckedFunction<Req, Request, IOException> requestConverter, RequestOptions options, CheckedFunction<Response, Resp, IOException> responseConverter, ActionListener<Resp> listener, Set<Integer> ignores) {     Optional<ValidationException> validationException = request.validate().     if (validationException != null && validationException.isPresent()) {         listener.onFailure(validationException.get()).         return.     }     internalPerformRequestAsync(request, requestConverter, options, responseConverter, listener, ignores). }
true;private;6;17;/**  * Provides common functionality for asynchronously performing a request.  */ ;/**  * Provides common functionality for asynchronously performing a request.  */ private <Req, Resp> void internalPerformRequestAsync(Req request, CheckedFunction<Req, Request, IOException> requestConverter, RequestOptions options, CheckedFunction<Response, Resp, IOException> responseConverter, ActionListener<Resp> listener, Set<Integer> ignores) {     Request req.     try {         req = requestConverter.apply(request).     } catch (Exception e) {         listener.onFailure(e).         return.     }     req.setOptions(options).     ResponseListener responseListener = wrapResponseListener(responseConverter, listener, ignores).     client.performRequestAsync(req, responseListener). }
false;public;1;9;;@Override public void onSuccess(Response response) {     try {         actionListener.onResponse(responseConverter.apply(response)).     } catch (Exception e) {         IOException ioe = new IOException("Unable to parse response body for " + response, e).         onFailure(ioe).     } }
false;public;1;22;;@Override public void onFailure(Exception exception) {     if (exception instanceof ResponseException) {         ResponseException responseException = (ResponseException) exception.         Response response = responseException.getResponse().         if (ignores.contains(response.getStatusLine().getStatusCode())) {             try {                 actionListener.onResponse(responseConverter.apply(response)).             } catch (Exception innerException) {                 // the exception is ignored as we now try to parse the response as an error.                 // this covers cases like get where 404 can either be a valid document not found response,                 // or an error for which parsing is completely different. We try to consider the 404 response as a valid one                 // first. If parsing of the response breaks, we fall back to parsing it as an error.                 actionListener.onFailure(parseResponseException(responseException)).             }         } else {             actionListener.onFailure(parseResponseException(responseException)).         }     } else {         actionListener.onFailure(exception).     } }
false;final;3;37;;final <Resp> ResponseListener wrapResponseListener(CheckedFunction<Response, Resp, IOException> responseConverter, ActionListener<Resp> actionListener, Set<Integer> ignores) {     return new ResponseListener() {          @Override         public void onSuccess(Response response) {             try {                 actionListener.onResponse(responseConverter.apply(response)).             } catch (Exception e) {                 IOException ioe = new IOException("Unable to parse response body for " + response, e).                 onFailure(ioe).             }         }          @Override         public void onFailure(Exception exception) {             if (exception instanceof ResponseException) {                 ResponseException responseException = (ResponseException) exception.                 Response response = responseException.getResponse().                 if (ignores.contains(response.getStatusLine().getStatusCode())) {                     try {                         actionListener.onResponse(responseConverter.apply(response)).                     } catch (Exception innerException) {                         // the exception is ignored as we now try to parse the response as an error.                         // this covers cases like get where 404 can either be a valid document not found response,                         // or an error for which parsing is completely different. We try to consider the 404 response as a valid one                         // first. If parsing of the response breaks, we fall back to parsing it as an error.                         actionListener.onFailure(parseResponseException(responseException)).                     }                 } else {                     actionListener.onFailure(parseResponseException(responseException)).                 }             } else {                 actionListener.onFailure(exception).             }         }     }. }
true;protected,final;5;22;/**  * Asynchronous request which returns empty {@link Optional}s in the case of 404s or parses entity into an Optional  */ ;/**  * Asynchronous request which returns empty {@link Optional}s in the case of 404s or parses entity into an Optional  */ protected final <Req extends Validatable, Resp> void performRequestAsyncAndParseOptionalEntity(Req request, CheckedFunction<Req, Request, IOException> requestConverter, RequestOptions options, CheckedFunction<XContentParser, Resp, IOException> entityParser, ActionListener<Optional<Resp>> listener) {     Optional<ValidationException> validationException = request.validate().     if (validationException != null && validationException.isPresent()) {         listener.onFailure(validationException.get()).         return.     }     Request req.     try {         req = requestConverter.apply(request).     } catch (Exception e) {         listener.onFailure(e).         return.     }     req.setOptions(options).     ResponseListener responseListener = wrapResponseListener404sOptional(response -> parseEntity(response.getEntity(), entityParser), listener).     client.performRequestAsync(req, responseListener). }
false;public;1;9;;@Override public void onSuccess(Response response) {     try {         actionListener.onResponse(Optional.of(responseConverter.apply(response))).     } catch (Exception e) {         IOException ioe = new IOException("Unable to parse response body for " + response, e).         onFailure(ioe).     } }
false;public;1;14;;@Override public void onFailure(Exception exception) {     if (exception instanceof ResponseException) {         ResponseException responseException = (ResponseException) exception.         Response response = responseException.getResponse().         if (RestStatus.NOT_FOUND.getStatus() == response.getStatusLine().getStatusCode()) {             actionListener.onResponse(Optional.empty()).         } else {             actionListener.onFailure(parseResponseException(responseException)).         }     } else {         actionListener.onFailure(exception).     } }
false;final;2;29;;final <Resp> ResponseListener wrapResponseListener404sOptional(CheckedFunction<Response, Resp, IOException> responseConverter, ActionListener<Optional<Resp>> actionListener) {     return new ResponseListener() {          @Override         public void onSuccess(Response response) {             try {                 actionListener.onResponse(Optional.of(responseConverter.apply(response))).             } catch (Exception e) {                 IOException ioe = new IOException("Unable to parse response body for " + response, e).                 onFailure(ioe).             }         }          @Override         public void onFailure(Exception exception) {             if (exception instanceof ResponseException) {                 ResponseException responseException = (ResponseException) exception.                 Response response = responseException.getResponse().                 if (RestStatus.NOT_FOUND.getStatus() == response.getStatusLine().getStatusCode()) {                     actionListener.onResponse(Optional.empty()).                 } else {                     actionListener.onFailure(parseResponseException(responseException)).                 }             } else {                 actionListener.onFailure(exception).             }         }     }. }
true;protected,final;1;20;/**  * Converts a {@link ResponseException} obtained from the low level REST client into an {@link ElasticsearchException}.  * If a response body was returned, tries to parse it as an error returned from Elasticsearch.  * If no response body was returned or anything goes wrong while parsing the error, returns a new {@link ElasticsearchStatusException}  * that wraps the original {@link ResponseException}. The potential exception obtained while parsing is added to the returned  * exception as a suppressed exception. This method is guaranteed to not throw any exception eventually thrown while parsing.  */ ;/**  * Converts a {@link ResponseException} obtained from the low level REST client into an {@link ElasticsearchException}.  * If a response body was returned, tries to parse it as an error returned from Elasticsearch.  * If no response body was returned or anything goes wrong while parsing the error, returns a new {@link ElasticsearchStatusException}  * that wraps the original {@link ResponseException}. The potential exception obtained while parsing is added to the returned  * exception as a suppressed exception. This method is guaranteed to not throw any exception eventually thrown while parsing.  */ protected final ElasticsearchStatusException parseResponseException(ResponseException responseException) {     Response response = responseException.getResponse().     HttpEntity entity = response.getEntity().     ElasticsearchStatusException elasticsearchException.     RestStatus restStatus = RestStatus.fromCode(response.getStatusLine().getStatusCode()).     if (entity == null) {         elasticsearchException = new ElasticsearchStatusException(responseException.getMessage(), restStatus, responseException).     } else {         try {             elasticsearchException = parseEntity(entity, BytesRestResponse::errorFromXContent).             elasticsearchException.addSuppressed(responseException).         } catch (Exception e) {             elasticsearchException = new ElasticsearchStatusException("Unable to parse response body", restStatus, responseException).             elasticsearchException.addSuppressed(e).         }     }     return elasticsearchException. }
false;protected,final;2;16;;protected final <Resp> Resp parseEntity(final HttpEntity entity, final CheckedFunction<XContentParser, Resp, IOException> entityParser) throws IOException {     if (entity == null) {         throw new IllegalStateException("Response body expected but not returned").     }     if (entity.getContentType() == null) {         throw new IllegalStateException("Elasticsearch didn't return the [Content-Type] header, unable to parse response body").     }     XContentType xContentType = XContentType.fromMediaTypeOrFormat(entity.getContentType().getValue()).     if (xContentType == null) {         throw new IllegalStateException("Unsupported Content-Type: " + entity.getContentType().getValue()).     }     try (XContentParser parser = xContentType.xContent().createParser(registry, DEPRECATION_HANDLER, entity.getContent())) {         return entityParser.apply(parser).     } }
false;protected,static;1;3;;protected static boolean convertExistsResponse(Response response) {     return response.getStatusLine().getStatusCode() == 200. }
false;public;2;2;;@Override public void usedDeprecatedName(String usedName, String modernName) { }
false;public;2;2;;@Override public void usedDeprecatedField(String usedName, String replacedWith) { }
false;static;0;61;;static List<NamedXContentRegistry.Entry> getDefaultNamedXContents() {     Map<String, ContextParser<Object, ? extends Aggregation>> map = new HashMap<>().     map.put(CardinalityAggregationBuilder.NAME, (p, c) -> ParsedCardinality.fromXContent(p, (String) c)).     map.put(InternalHDRPercentiles.NAME, (p, c) -> ParsedHDRPercentiles.fromXContent(p, (String) c)).     map.put(InternalHDRPercentileRanks.NAME, (p, c) -> ParsedHDRPercentileRanks.fromXContent(p, (String) c)).     map.put(InternalTDigestPercentiles.NAME, (p, c) -> ParsedTDigestPercentiles.fromXContent(p, (String) c)).     map.put(InternalTDigestPercentileRanks.NAME, (p, c) -> ParsedTDigestPercentileRanks.fromXContent(p, (String) c)).     map.put(PercentilesBucketPipelineAggregationBuilder.NAME, (p, c) -> ParsedPercentilesBucket.fromXContent(p, (String) c)).     map.put(MedianAbsoluteDeviationAggregationBuilder.NAME, (p, c) -> ParsedMedianAbsoluteDeviation.fromXContent(p, (String) c)).     map.put(MinAggregationBuilder.NAME, (p, c) -> ParsedMin.fromXContent(p, (String) c)).     map.put(MaxAggregationBuilder.NAME, (p, c) -> ParsedMax.fromXContent(p, (String) c)).     map.put(SumAggregationBuilder.NAME, (p, c) -> ParsedSum.fromXContent(p, (String) c)).     map.put(AvgAggregationBuilder.NAME, (p, c) -> ParsedAvg.fromXContent(p, (String) c)).     map.put(WeightedAvgAggregationBuilder.NAME, (p, c) -> ParsedWeightedAvg.fromXContent(p, (String) c)).     map.put(ValueCountAggregationBuilder.NAME, (p, c) -> ParsedValueCount.fromXContent(p, (String) c)).     map.put(InternalSimpleValue.NAME, (p, c) -> ParsedSimpleValue.fromXContent(p, (String) c)).     map.put(DerivativePipelineAggregationBuilder.NAME, (p, c) -> ParsedDerivative.fromXContent(p, (String) c)).     map.put(InternalBucketMetricValue.NAME, (p, c) -> ParsedBucketMetricValue.fromXContent(p, (String) c)).     map.put(StatsAggregationBuilder.NAME, (p, c) -> ParsedStats.fromXContent(p, (String) c)).     map.put(StatsBucketPipelineAggregationBuilder.NAME, (p, c) -> ParsedStatsBucket.fromXContent(p, (String) c)).     map.put(ExtendedStatsAggregationBuilder.NAME, (p, c) -> ParsedExtendedStats.fromXContent(p, (String) c)).     map.put(ExtendedStatsBucketPipelineAggregationBuilder.NAME, (p, c) -> ParsedExtendedStatsBucket.fromXContent(p, (String) c)).     map.put(GeoBoundsAggregationBuilder.NAME, (p, c) -> ParsedGeoBounds.fromXContent(p, (String) c)).     map.put(GeoCentroidAggregationBuilder.NAME, (p, c) -> ParsedGeoCentroid.fromXContent(p, (String) c)).     map.put(HistogramAggregationBuilder.NAME, (p, c) -> ParsedHistogram.fromXContent(p, (String) c)).     map.put(DateHistogramAggregationBuilder.NAME, (p, c) -> ParsedDateHistogram.fromXContent(p, (String) c)).     map.put(AutoDateHistogramAggregationBuilder.NAME, (p, c) -> ParsedAutoDateHistogram.fromXContent(p, (String) c)).     map.put(StringTerms.NAME, (p, c) -> ParsedStringTerms.fromXContent(p, (String) c)).     map.put(LongTerms.NAME, (p, c) -> ParsedLongTerms.fromXContent(p, (String) c)).     map.put(DoubleTerms.NAME, (p, c) -> ParsedDoubleTerms.fromXContent(p, (String) c)).     map.put(MissingAggregationBuilder.NAME, (p, c) -> ParsedMissing.fromXContent(p, (String) c)).     map.put(NestedAggregationBuilder.NAME, (p, c) -> ParsedNested.fromXContent(p, (String) c)).     map.put(ReverseNestedAggregationBuilder.NAME, (p, c) -> ParsedReverseNested.fromXContent(p, (String) c)).     map.put(GlobalAggregationBuilder.NAME, (p, c) -> ParsedGlobal.fromXContent(p, (String) c)).     map.put(FilterAggregationBuilder.NAME, (p, c) -> ParsedFilter.fromXContent(p, (String) c)).     map.put(InternalSampler.PARSER_NAME, (p, c) -> ParsedSampler.fromXContent(p, (String) c)).     map.put(GeoHashGridAggregationBuilder.NAME, (p, c) -> ParsedGeoHashGrid.fromXContent(p, (String) c)).     map.put(GeoTileGridAggregationBuilder.NAME, (p, c) -> ParsedGeoTileGrid.fromXContent(p, (String) c)).     map.put(RangeAggregationBuilder.NAME, (p, c) -> ParsedRange.fromXContent(p, (String) c)).     map.put(DateRangeAggregationBuilder.NAME, (p, c) -> ParsedDateRange.fromXContent(p, (String) c)).     map.put(GeoDistanceAggregationBuilder.NAME, (p, c) -> ParsedGeoDistance.fromXContent(p, (String) c)).     map.put(FiltersAggregationBuilder.NAME, (p, c) -> ParsedFilters.fromXContent(p, (String) c)).     map.put(AdjacencyMatrixAggregationBuilder.NAME, (p, c) -> ParsedAdjacencyMatrix.fromXContent(p, (String) c)).     map.put(SignificantLongTerms.NAME, (p, c) -> ParsedSignificantLongTerms.fromXContent(p, (String) c)).     map.put(SignificantStringTerms.NAME, (p, c) -> ParsedSignificantStringTerms.fromXContent(p, (String) c)).     map.put(ScriptedMetricAggregationBuilder.NAME, (p, c) -> ParsedScriptedMetric.fromXContent(p, (String) c)).     map.put(IpRangeAggregationBuilder.NAME, (p, c) -> ParsedBinaryRange.fromXContent(p, (String) c)).     map.put(TopHitsAggregationBuilder.NAME, (p, c) -> ParsedTopHits.fromXContent(p, (String) c)).     map.put(CompositeAggregationBuilder.NAME, (p, c) -> ParsedComposite.fromXContent(p, (String) c)).     List<NamedXContentRegistry.Entry> entries = map.entrySet().stream().map(entry -> new NamedXContentRegistry.Entry(Aggregation.class, new ParseField(entry.getKey()), entry.getValue())).collect(Collectors.toList()).     entries.add(new NamedXContentRegistry.Entry(Suggest.Suggestion.class, new ParseField(TermSuggestionBuilder.SUGGESTION_NAME), (parser, context) -> TermSuggestion.fromXContent(parser, (String) context))).     entries.add(new NamedXContentRegistry.Entry(Suggest.Suggestion.class, new ParseField(PhraseSuggestionBuilder.SUGGESTION_NAME), (parser, context) -> PhraseSuggestion.fromXContent(parser, (String) context))).     entries.add(new NamedXContentRegistry.Entry(Suggest.Suggestion.class, new ParseField(CompletionSuggestionBuilder.SUGGESTION_NAME), (parser, context) -> CompletionSuggestion.fromXContent(parser, (String) context))).     return entries. }
true;static;0;7;/**  * Loads and returns the {@link NamedXContentRegistry.Entry} parsers provided by plugins.  */ ;/**  * Loads and returns the {@link NamedXContentRegistry.Entry} parsers provided by plugins.  */ static List<NamedXContentRegistry.Entry> getProvidedNamedXContents() {     List<NamedXContentRegistry.Entry> entries = new ArrayList<>().     for (NamedXContentProvider service : ServiceLoader.load(NamedXContentProvider.class)) {         entries.addAll(service.getNamedXContentParsers()).     }     return entries. }
