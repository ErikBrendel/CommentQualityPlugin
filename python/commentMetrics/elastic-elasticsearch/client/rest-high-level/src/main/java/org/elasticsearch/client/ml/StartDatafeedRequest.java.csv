commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getDatafeedId() {     return datafeedId. }
false;public;0;3;;public String getStart() {     return start. }
true;public;1;3;/**  * The time that the datafeed should begin. This value is inclusive.  *  * If you specify a start value that is earlier than the timestamp of the latest processed record,  * the datafeed continues from 1 millisecond after the timestamp of the latest processed record.  *  * If you do not specify a start time and the datafeed is associated with a new job,  * the analysis starts from the earliest time for which data is available.  *  * @param start String representation of a timestamp. may be an epoch seconds, epoch millis or an ISO 8601 string  */ ;/**  * The time that the datafeed should begin. This value is inclusive.  *  * If you specify a start value that is earlier than the timestamp of the latest processed record,  * the datafeed continues from 1 millisecond after the timestamp of the latest processed record.  *  * If you do not specify a start time and the datafeed is associated with a new job,  * the analysis starts from the earliest time for which data is available.  *  * @param start String representation of a timestamp. may be an epoch seconds, epoch millis or an ISO 8601 string  */ public void setStart(String start) {     this.start = start. }
false;public;0;3;;public String getEnd() {     return end. }
true;public;1;3;/**  * The time that the datafeed should end. This value is exclusive.  * If you do not specify an end time, the datafeed runs continuously.  *  * @param end String representation of a timestamp. may be an epoch seconds, epoch millis or an ISO 8601 string  */ ;/**  * The time that the datafeed should end. This value is exclusive.  * If you do not specify an end time, the datafeed runs continuously.  *  * @param end String representation of a timestamp. may be an epoch seconds, epoch millis or an ISO 8601 string  */ public void setEnd(String end) {     this.end = end. }
false;public;0;3;;public TimeValue getTimeout() {     return timeout. }
true;public;1;3;/**  * Indicates how long to wait for the cluster to respond to the request.  *  * @param timeout TimeValue for how long to wait for a response from the cluster  */ ;/**  * Indicates how long to wait for the cluster to respond to the request.  *  * @param timeout TimeValue for how long to wait for a response from the cluster  */ public void setTimeout(TimeValue timeout) {     this.timeout = timeout. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(datafeedId, start, end, timeout). }
false;public;1;16;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || obj.getClass() != getClass()) {         return false.     }     StartDatafeedRequest other = (StartDatafeedRequest) obj.     return Objects.equals(datafeedId, other.datafeedId) && Objects.equals(start, other.start) && Objects.equals(end, other.end) && Objects.equals(timeout, other.timeout). }
false;public;2;16;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(DatafeedConfig.ID.getPreferredName(), datafeedId).     if (start != null) {         builder.field(START.getPreferredName(), start).     }     if (end != null) {         builder.field(END.getPreferredName(), end).     }     if (timeout != null) {         builder.field(TIMEOUT.getPreferredName(), timeout.getStringRep()).     }     builder.endObject().     return builder. }
