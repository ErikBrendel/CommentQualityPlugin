commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Override public Optional<ValidationException> validate() {     final ValidationException validationException = new ValidationException().     if (field == null || field.isEmpty()) {         validationException.addValidationError("Field name is required").     }     if (metrics == null || metrics.isEmpty()) {         validationException.addValidationError("Metrics must be a non-null, non-empty array of strings").     }     if (validationException.validationErrors().isEmpty()) {         return Optional.empty().     }     return Optional.of(validationException). }
true;public;0;3;/**  * @return the name of the field used in the metric configuration. Never {@code null}.  */ ;/**  * @return the name of the field used in the metric configuration. Never {@code null}.  */ public String getField() {     return field. }
true;public;0;3;/**  * @return the names of the metrics used in the metric configuration. Never {@code null}.  */ ;/**  * @return the names of the metrics used in the metric configuration. Never {@code null}.  */ public List<String> getMetrics() {     return metrics. }
false;public;2;9;;@Override public XContentBuilder toXContent(final XContentBuilder builder, final Params params) throws IOException {     builder.startObject().     {         builder.field(FIELD, field).         builder.field(METRICS, metrics).     }     return builder.endObject(). }
false;public;1;11;;@Override public boolean equals(final Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     final MetricConfig that = (MetricConfig) other.     return Objects.equals(field, that.field) && Objects.equals(metrics, that.metrics). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(field, metrics). }
false;public,static;1;3;;public static MetricConfig fromXContent(final XContentParser parser) throws IOException {     return PARSER.parse(parser, null). }
