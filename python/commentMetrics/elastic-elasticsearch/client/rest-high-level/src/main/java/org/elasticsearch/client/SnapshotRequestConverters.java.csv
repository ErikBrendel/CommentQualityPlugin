commented;modifiers;parameterAmount;loc;comment;code
false;static;1;11;;static Request getRepositories(GetRepositoriesRequest getRepositoriesRequest) {     String[] repositories = getRepositoriesRequest.repositories() == null ? Strings.EMPTY_ARRAY : getRepositoriesRequest.repositories().     String endpoint = new RequestConverters.EndpointBuilder().addPathPartAsIs("_snapshot").addCommaSeparatedPathParts(repositories).build().     Request request = new Request(HttpGet.METHOD_NAME, endpoint).     RequestConverters.Params parameters = new RequestConverters.Params(request).     parameters.withMasterTimeout(getRepositoriesRequest.masterNodeTimeout()).     parameters.withLocal(getRepositoriesRequest.local()).     return request. }
false;static;1;12;;static Request createRepository(PutRepositoryRequest putRepositoryRequest) throws IOException {     String endpoint = new RequestConverters.EndpointBuilder().addPathPart("_snapshot").addPathPart(putRepositoryRequest.name()).build().     Request request = new Request(HttpPut.METHOD_NAME, endpoint).     RequestConverters.Params parameters = new RequestConverters.Params(request).     parameters.withMasterTimeout(putRepositoryRequest.masterNodeTimeout()).     parameters.withTimeout(putRepositoryRequest.timeout()).     parameters.withVerify(putRepositoryRequest.verify()).     request.setEntity(RequestConverters.createEntity(putRepositoryRequest, RequestConverters.REQUEST_BODY_CONTENT_TYPE)).     return request. }
false;static;1;10;;static Request deleteRepository(DeleteRepositoryRequest deleteRepositoryRequest) {     String endpoint = new RequestConverters.EndpointBuilder().addPathPartAsIs("_snapshot").addPathPart(deleteRepositoryRequest.name()).build().     Request request = new Request(HttpDelete.METHOD_NAME, endpoint).     RequestConverters.Params parameters = new RequestConverters.Params(request).     parameters.withMasterTimeout(deleteRepositoryRequest.masterNodeTimeout()).     parameters.withTimeout(deleteRepositoryRequest.timeout()).     return request. }
false;static;1;12;;static Request verifyRepository(VerifyRepositoryRequest verifyRepositoryRequest) {     String endpoint = new RequestConverters.EndpointBuilder().addPathPartAsIs("_snapshot").addPathPart(verifyRepositoryRequest.name()).addPathPartAsIs("_verify").build().     Request request = new Request(HttpPost.METHOD_NAME, endpoint).     RequestConverters.Params parameters = new RequestConverters.Params(request).     parameters.withMasterTimeout(verifyRepositoryRequest.masterNodeTimeout()).     parameters.withTimeout(verifyRepositoryRequest.timeout()).     return request. }
false;static;1;12;;static Request createSnapshot(CreateSnapshotRequest createSnapshotRequest) throws IOException {     String endpoint = new RequestConverters.EndpointBuilder().addPathPart("_snapshot").addPathPart(createSnapshotRequest.repository()).addPathPart(createSnapshotRequest.snapshot()).build().     Request request = new Request(HttpPut.METHOD_NAME, endpoint).     RequestConverters.Params params = new RequestConverters.Params(request).     params.withMasterTimeout(createSnapshotRequest.masterNodeTimeout()).     params.withWaitForCompletion(createSnapshotRequest.waitForCompletion()).     request.setEntity(RequestConverters.createEntity(createSnapshotRequest, RequestConverters.REQUEST_BODY_CONTENT_TYPE)).     return request. }
false;static;1;19;;static Request getSnapshots(GetSnapshotsRequest getSnapshotsRequest) {     RequestConverters.EndpointBuilder endpointBuilder = new RequestConverters.EndpointBuilder().addPathPartAsIs("_snapshot").addPathPart(getSnapshotsRequest.repository()).     String endpoint.     if (getSnapshotsRequest.snapshots().length == 0) {         endpoint = endpointBuilder.addPathPart("_all").build().     } else {         endpoint = endpointBuilder.addCommaSeparatedPathParts(getSnapshotsRequest.snapshots()).build().     }     Request request = new Request(HttpGet.METHOD_NAME, endpoint).     RequestConverters.Params parameters = new RequestConverters.Params(request).     parameters.withMasterTimeout(getSnapshotsRequest.masterNodeTimeout()).     parameters.putParam("ignore_unavailable", Boolean.toString(getSnapshotsRequest.ignoreUnavailable())).     parameters.putParam("verbose", Boolean.toString(getSnapshotsRequest.verbose())).     return request. }
false;static;1;13;;static Request snapshotsStatus(SnapshotsStatusRequest snapshotsStatusRequest) {     String endpoint = new RequestConverters.EndpointBuilder().addPathPartAsIs("_snapshot").addPathPart(snapshotsStatusRequest.repository()).addCommaSeparatedPathParts(snapshotsStatusRequest.snapshots()).addPathPartAsIs("_status").build().     Request request = new Request(HttpGet.METHOD_NAME, endpoint).     RequestConverters.Params parameters = new RequestConverters.Params(request).     parameters.withMasterTimeout(snapshotsStatusRequest.masterNodeTimeout()).     parameters.withIgnoreUnavailable(snapshotsStatusRequest.ignoreUnavailable()).     return request. }
false;static;1;13;;static Request restoreSnapshot(RestoreSnapshotRequest restoreSnapshotRequest) throws IOException {     String endpoint = new RequestConverters.EndpointBuilder().addPathPartAsIs("_snapshot").addPathPart(restoreSnapshotRequest.repository()).addPathPart(restoreSnapshotRequest.snapshot()).addPathPartAsIs("_restore").build().     Request request = new Request(HttpPost.METHOD_NAME, endpoint).     RequestConverters.Params parameters = new RequestConverters.Params(request).     parameters.withMasterTimeout(restoreSnapshotRequest.masterNodeTimeout()).     parameters.withWaitForCompletion(restoreSnapshotRequest.waitForCompletion()).     request.setEntity(RequestConverters.createEntity(restoreSnapshotRequest, RequestConverters.REQUEST_BODY_CONTENT_TYPE)).     return request. }
false;static;1;11;;static Request deleteSnapshot(DeleteSnapshotRequest deleteSnapshotRequest) {     String endpoint = new RequestConverters.EndpointBuilder().addPathPartAsIs("_snapshot").addPathPart(deleteSnapshotRequest.repository()).addPathPart(deleteSnapshotRequest.snapshot()).build().     Request request = new Request(HttpDelete.METHOD_NAME, endpoint).     RequestConverters.Params parameters = new RequestConverters.Params(request).     parameters.withMasterTimeout(deleteSnapshotRequest.masterNodeTimeout()).     return request. }
