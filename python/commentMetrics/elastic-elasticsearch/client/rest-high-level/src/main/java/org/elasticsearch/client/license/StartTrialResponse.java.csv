commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static StartTrialResponse fromXContent(XContentParser parser) throws IOException {     return PARSER.apply(parser, null). }
true;public;0;3;/**  * Returns true if the request that corresponds to this response acknowledged license changes that would occur as a result of starting  * a trial license  */ ;/**  * Returns true if the request that corresponds to this response acknowledged license changes that would occur as a result of starting  * a trial license  */ public boolean isAcknowledged() {     return acknowledged. }
true;public;0;3;/**  * Returns true if a trial license was started as a result of the request corresponding to this response. Returns false if the cluster  * did not start a trial, or a trial had already been started before the corresponding request was made  */ ;/**  * Returns true if a trial license was started as a result of the request corresponding to this response. Returns false if the cluster  * did not start a trial, or a trial had already been started before the corresponding request was made  */ public boolean isTrialWasStarted() {     return trialWasStarted. }
true;public;0;3;/**  * If a trial license was started as a result of the request corresponding to this response (see {@link #isTrialWasStarted()}) then  * returns the type of license that was started on the cluster. Returns null otherwise  */ ;/**  * If a trial license was started as a result of the request corresponding to this response (see {@link #isTrialWasStarted()}) then  * returns the type of license that was started on the cluster. Returns null otherwise  */ public String getLicenseType() {     return licenseType. }
true;public;0;3;/**  * If a trial license was not started as a result of the request corresponding to this response (see {@link #isTrialWasStarted()} then  * returns a brief message explaining why the trial could not be started. Returns false otherwise  */ ;/**  * If a trial license was not started as a result of the request corresponding to this response (see {@link #isTrialWasStarted()} then  * returns a brief message explaining why the trial could not be started. Returns false otherwise  */ public String getErrorMessage() {     return errorMessage. }
true;public;0;3;/**  * If the request corresponding to this response did not acknowledge licensing changes that would result from starting a trial license  * (see {@link #isAcknowledged()}), returns a message describing how the user must acknowledge licensing changes as a result of  * such a request. Returns null otherwise  */ ;/**  * If the request corresponding to this response did not acknowledge licensing changes that would result from starting a trial license  * (see {@link #isAcknowledged()}), returns a message describing how the user must acknowledge licensing changes as a result of  * such a request. Returns null otherwise  */ public String getAcknowledgeHeader() {     return acknowledgeHeader. }
true;public;0;3;/**  * If the request corresponding to this response did not acknowledge licensing changes that would result from starting a trial license  * (see {@link #isAcknowledged()}, returns a map. The map's keys are names of commercial Elasticsearch features, and their values are  * messages about how those features will be affected by licensing changes as a result of starting a trial license  */ ;/**  * If the request corresponding to this response did not acknowledge licensing changes that would result from starting a trial license  * (see {@link #isAcknowledged()}, returns a map. The map's keys are names of commercial Elasticsearch features, and their values are  * messages about how those features will be affected by licensing changes as a result of starting a trial license  */ public Map<String, String[]> getAcknowledgeMessages() {     return acknowledgeMessages. }
