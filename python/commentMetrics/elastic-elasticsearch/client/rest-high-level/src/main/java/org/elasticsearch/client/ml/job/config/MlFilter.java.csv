commented;modifiers;parameterAmount;loc;comment;code
false;public;2;12;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(ID.getPreferredName(), id).     if (description != null) {         builder.field(DESCRIPTION.getPreferredName(), description).     }     builder.field(ITEMS.getPreferredName(), items).     // Don't include TYPE as it's fixed     builder.endObject().     return builder. }
false;public;0;3;;public String getId() {     return id. }
false;public;0;3;;public String getDescription() {     return description. }
false;public;0;3;;public SortedSet<String> getItems() {     return items. }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (obj == this) {         return true.     }     if (obj instanceof MlFilter == false) {         return false.     }     MlFilter other = (MlFilter) obj.     return id.equals(other.id) && Objects.equals(description, other.description) && items.equals(other.items). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(id, description, items). }
true;public,static;1;3;/**  * Creates a new Builder object for creating an MlFilter object  * @param filterId The ID of the filter to create  */ ;/**  * Creates a new Builder object for creating an MlFilter object  * @param filterId The ID of the filter to create  */ public static Builder builder(String filterId) {     return new Builder().setId(filterId). }
true;public;1;4;/**  * Set the ID of the filter  * @param id The id desired  */ ;/**  * Set the ID of the filter  * @param id The id desired  */ public Builder setId(String id) {     this.id = Objects.requireNonNull(id).     return this. }
false;public;0;4;;@Nullable public String getId() {     return id. }
true;public;1;4;/**  * Set the description of the filter  * @param description The description desired  */ ;/**  * Set the description of the filter  * @param description The description desired  */ public Builder setDescription(String description) {     this.description = description.     return this. }
false;public;1;4;;public Builder setItems(SortedSet<String> items) {     this.items = Objects.requireNonNull(items).     return this. }
false;public;1;4;;public Builder setItems(List<String> items) {     this.items = new TreeSet<>(items).     return this. }
true;public;1;4;/**  * The items of the filter.  *  * A wildcard * can be used at the beginning or the end of an item. Up to 10000 items are allowed in each filter.  *  * @param items String list of items to be applied in the filter  */ ;/**  * The items of the filter.  *  * A wildcard * can be used at the beginning or the end of an item. Up to 10000 items are allowed in each filter.  *  * @param items String list of items to be applied in the filter  */ public Builder setItems(String... items) {     setItems(Arrays.asList(items)).     return this. }
false;public;0;3;;public MlFilter build() {     return new MlFilter(id, description, items). }
