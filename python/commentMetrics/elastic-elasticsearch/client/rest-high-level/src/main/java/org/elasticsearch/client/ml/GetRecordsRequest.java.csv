commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;0;3;;public Boolean getExcludeInterim() {     return excludeInterim. }
true;public;1;3;/**  * Sets the value of "exclude_interim".  * When {@code true}, interim records will be filtered out.  * @param excludeInterim value of "exclude_interim" to be set  */ ;/**  * Sets the value of "exclude_interim".  * When {@code true}, interim records will be filtered out.  * @param excludeInterim value of "exclude_interim" to be set  */ public void setExcludeInterim(Boolean excludeInterim) {     this.excludeInterim = excludeInterim. }
false;public;0;3;;public String getStart() {     return start. }
true;public;1;3;/**  * Sets the value of "start" which is a timestamp.  * Only records whose timestamp is on or after the "start" value will be returned.  * @param start String representation of a timestamp. may be an epoch seconds, epoch millis or an ISO string  */ ;/**  * Sets the value of "start" which is a timestamp.  * Only records whose timestamp is on or after the "start" value will be returned.  * @param start String representation of a timestamp. may be an epoch seconds, epoch millis or an ISO string  */ public void setStart(String start) {     this.start = start. }
false;public;0;3;;public String getEnd() {     return end. }
true;public;1;3;/**  * Sets the value of "end" which is a timestamp.  * Only records whose timestamp is before the "end" value will be returned.  * @param end String representation of a timestamp. may be an epoch seconds, epoch millis or an ISO string  */ ;/**  * Sets the value of "end" which is a timestamp.  * Only records whose timestamp is before the "end" value will be returned.  * @param end String representation of a timestamp. may be an epoch seconds, epoch millis or an ISO string  */ public void setEnd(String end) {     this.end = end. }
false;public;0;3;;public PageParams getPageParams() {     return pageParams. }
true;public;1;3;/**  * Sets the paging parameters  * @param pageParams The paging parameters  */ ;/**  * Sets the paging parameters  * @param pageParams The paging parameters  */ public void setPageParams(PageParams pageParams) {     this.pageParams = pageParams. }
false;public;0;3;;public Double getRecordScore() {     return recordScore. }
true;public;1;3;/**  * Sets the value of "record_score".  * Only records with "record_score" equal or greater will be returned.  * @param recordScore value of "record_score".  */ ;/**  * Sets the value of "record_score".  * Only records with "record_score" equal or greater will be returned.  * @param recordScore value of "record_score".  */ public void setRecordScore(Double recordScore) {     this.recordScore = recordScore. }
false;public;0;3;;public String getSort() {     return sort. }
true;public;1;3;/**  * Sets the value of "sort".  * Specifies the record field to sort on.  * @param sort value of "sort".  */ ;/**  * Sets the value of "sort".  * Specifies the record field to sort on.  * @param sort value of "sort".  */ public void setSort(String sort) {     this.sort = sort. }
false;public;0;3;;public Boolean getDescending() {     return descending. }
true;public;1;3;/**  * Sets the value of "desc".  * Specifies the sorting order.  * @param descending value of "desc"  */ ;/**  * Sets the value of "desc".  * Specifies the sorting order.  * @param descending value of "desc"  */ public void setDescending(Boolean descending) {     this.descending = descending. }
false;public;2;28;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Job.ID.getPreferredName(), jobId).     if (excludeInterim != null) {         builder.field(EXCLUDE_INTERIM.getPreferredName(), excludeInterim).     }     if (start != null) {         builder.field(START.getPreferredName(), start).     }     if (end != null) {         builder.field(END.getPreferredName(), end).     }     if (pageParams != null) {         builder.field(PageParams.PAGE.getPreferredName(), pageParams).     }     if (recordScore != null) {         builder.field(RECORD_SCORE.getPreferredName(), recordScore).     }     if (sort != null) {         builder.field(SORT.getPreferredName(), sort).     }     if (descending != null) {         builder.field(DESCENDING.getPreferredName(), descending).     }     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobId, excludeInterim, recordScore, pageParams, start, end, sort, descending). }
false;public;1;18;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     GetRecordsRequest other = (GetRecordsRequest) obj.     return Objects.equals(jobId, other.jobId) && Objects.equals(excludeInterim, other.excludeInterim) && Objects.equals(recordScore, other.recordScore) && Objects.equals(pageParams, other.pageParams) && Objects.equals(start, other.start) && Objects.equals(end, other.end) && Objects.equals(sort, other.sort) && Objects.equals(descending, other.descending). }
