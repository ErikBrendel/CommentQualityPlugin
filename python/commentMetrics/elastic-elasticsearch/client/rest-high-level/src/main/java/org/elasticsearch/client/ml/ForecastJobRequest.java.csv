commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;0;3;;public TimeValue getDuration() {     return duration. }
true;public;1;3;/**  * Set the forecast duration  *  * A period of time that indicates how far into the future to forecast.  * The default value is 1 day. The forecast starts at the last record that was processed.  *  * @param duration TimeValue for the duration of the forecast  */ ;/**  * Set the forecast duration  *  * A period of time that indicates how far into the future to forecast.  * The default value is 1 day. The forecast starts at the last record that was processed.  *  * @param duration TimeValue for the duration of the forecast  */ public void setDuration(TimeValue duration) {     this.duration = duration. }
false;public;0;3;;public TimeValue getExpiresIn() {     return expiresIn. }
true;public;1;3;/**  * Set the forecast expiration  *  * The period of time that forecast results are retained.  * After a forecast expires, the results are deleted. The default value is 14 days.  * If set to a value of 0, the forecast is never automatically deleted.  *  * @param expiresIn TimeValue for the forecast expiration  */ ;/**  * Set the forecast expiration  *  * The period of time that forecast results are retained.  * After a forecast expires, the results are deleted. The default value is 14 days.  * If set to a value of 0, the forecast is never automatically deleted.  *  * @param expiresIn TimeValue for the forecast expiration  */ public void setExpiresIn(TimeValue expiresIn) {     this.expiresIn = expiresIn. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobId, duration, expiresIn). }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     ForecastJobRequest other = (ForecastJobRequest) obj.     return Objects.equals(jobId, other.jobId) && Objects.equals(duration, other.duration) && Objects.equals(expiresIn, other.expiresIn). }
false;public;2;13;;@Override public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params params) throws IOException {     builder.startObject().     builder.field(Job.ID.getPreferredName(), jobId).     if (duration != null) {         builder.field(DURATION.getPreferredName(), duration.getStringRep()).     }     if (expiresIn != null) {         builder.field(EXPIRES_IN.getPreferredName(), expiresIn.getStringRep()).     }     builder.endObject().     return builder. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
