commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public List<String> getJobIds() {     return jobIds. }
false;public;0;3;;public Integer getTopN() {     return topN. }
true;public;1;3;/**  * Sets the value of "top_n".  * @param topN The number of top job bucket scores to be used in the overall_score calculation. Defaults to 1.  */ ;/**  * Sets the value of "top_n".  * @param topN The number of top job bucket scores to be used in the overall_score calculation. Defaults to 1.  */ public void setTopN(Integer topN) {     this.topN = topN. }
false;public;0;3;;public TimeValue getBucketSpan() {     return bucketSpan. }
true;public;1;3;/**  * Sets the value of "bucket_span".  * @param bucketSpan The span of the overall buckets. Must be greater or equal to the largest job’s bucket_span.  *                   Defaults to the largest job’s bucket_span.  */ ;/**  * Sets the value of "bucket_span".  * @param bucketSpan The span of the overall buckets. Must be greater or equal to the largest job’s bucket_span.  *                   Defaults to the largest job’s bucket_span.  */ public void setBucketSpan(TimeValue bucketSpan) {     this.bucketSpan = bucketSpan. }
false;private;1;3;;private void setBucketSpan(String bucketSpan) {     this.bucketSpan = TimeValue.parseTimeValue(bucketSpan, BUCKET_SPAN.getPreferredName()). }
false;public;0;3;;public boolean isExcludeInterim() {     return excludeInterim. }
true;public;1;3;/**  * Sets the value of "exclude_interim".  * When {@code true}, interim overall buckets will be filtered out.  * Overall buckets are interim if any of the job buckets within the overall bucket interval are interim.  * @param excludeInterim value of "exclude_interim" to be set  */ ;/**  * Sets the value of "exclude_interim".  * When {@code true}, interim overall buckets will be filtered out.  * Overall buckets are interim if any of the job buckets within the overall bucket interval are interim.  * @param excludeInterim value of "exclude_interim" to be set  */ public void setExcludeInterim(Boolean excludeInterim) {     this.excludeInterim = excludeInterim. }
false;public;0;3;;public String getStart() {     return start. }
true;public;1;3;/**  * Sets the value of "start" which is a timestamp.  * Only overall buckets whose timestamp is on or after the "start" value will be returned.  * @param start String representation of a timestamp. may be an epoch seconds, epoch millis or an ISO string  */ ;/**  * Sets the value of "start" which is a timestamp.  * Only overall buckets whose timestamp is on or after the "start" value will be returned.  * @param start String representation of a timestamp. may be an epoch seconds, epoch millis or an ISO string  */ public void setStart(String start) {     this.start = start. }
false;public;0;3;;public String getEnd() {     return end. }
true;public;1;3;/**  * Sets the value of "end" which is a timestamp.  * Only overall buckets whose timestamp is before the "end" value will be returned.  * @param end String representation of a timestamp. may be an epoch seconds, epoch millis or an ISO string  */ ;/**  * Sets the value of "end" which is a timestamp.  * Only overall buckets whose timestamp is before the "end" value will be returned.  * @param end String representation of a timestamp. may be an epoch seconds, epoch millis or an ISO string  */ public void setEnd(String end) {     this.end = end. }
false;public;0;3;;public Double getOverallScore() {     return overallScore. }
true;public;1;3;/**  * Sets the value of "overall_score".  * Only buckets with "overall_score" equal or greater will be returned.  * @param overallScore value of "anomaly_score".  */ ;/**  * Sets the value of "overall_score".  * Only buckets with "overall_score" equal or greater will be returned.  * @param overallScore value of "anomaly_score".  */ public void setOverallScore(double overallScore) {     this.overallScore = overallScore. }
true;public;1;3;/**  * See {@link GetJobRequest#getAllowNoJobs()}  * @param allowNoJobs value of "allow_no_jobs".  */ ;/**  * See {@link GetJobRequest#getAllowNoJobs()}  * @param allowNoJobs value of "allow_no_jobs".  */ public void setAllowNoJobs(boolean allowNoJobs) {     this.allowNoJobs = allowNoJobs. }
true;public;0;3;/**  * Whether to ignore if a wildcard expression matches no jobs.  *  * If this is {@code false}, then an error is returned when a wildcard (or {@code _all}) does not match any jobs  */ ;/**  * Whether to ignore if a wildcard expression matches no jobs.  *  * If this is {@code false}, then an error is returned when a wildcard (or {@code _all}) does not match any jobs  */ public Boolean getAllowNoJobs() {     return allowNoJobs. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;2;31;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (jobIds.isEmpty() == false) {         builder.field(Job.ID.getPreferredName(), Strings.collectionToCommaDelimitedString(jobIds)).     }     if (topN != null) {         builder.field(TOP_N.getPreferredName(), topN).     }     if (bucketSpan != null) {         builder.field(BUCKET_SPAN.getPreferredName(), bucketSpan.getStringRep()).     }     if (excludeInterim != null) {         builder.field(EXCLUDE_INTERIM.getPreferredName(), excludeInterim).     }     if (start != null) {         builder.field(START.getPreferredName(), start).     }     if (end != null) {         builder.field(END.getPreferredName(), end).     }     if (overallScore != null) {         builder.field(OVERALL_SCORE.getPreferredName(), overallScore).     }     if (allowNoJobs != null) {         builder.field(ALLOW_NO_JOBS.getPreferredName(), allowNoJobs).     }     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobIds, topN, bucketSpan, excludeInterim, overallScore, start, end, allowNoJobs). }
false;public;1;18;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     GetOverallBucketsRequest other = (GetOverallBucketsRequest) obj.     return Objects.equals(jobIds, other.jobIds) && Objects.equals(topN, other.topN) && Objects.equals(bucketSpan, other.bucketSpan) && Objects.equals(excludeInterim, other.excludeInterim) && Objects.equals(overallScore, other.overallScore) && Objects.equals(start, other.start) && Objects.equals(end, other.end) && Objects.equals(allowNoJobs, other.allowNoJobs). }
