commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public List<DeprecationIssue> getClusterSettingsIssues() {     return clusterSettingsIssues. }
false;public;0;3;;public List<DeprecationIssue> getNodeSettingsIssues() {     return nodeSettingsIssues. }
false;public;0;3;;public Map<String, List<DeprecationIssue>> getIndexSettingsIssues() {     return indexSettingsIssues. }
false;public;0;3;;public List<DeprecationIssue> getMlSettingsIssues() {     return mlSettingsIssues. }
false;private,static;1;10;;private static List<DeprecationIssue> parseDeprecationIssues(XContentParser parser) throws IOException {     List<DeprecationIssue> issues = new ArrayList<>().     XContentParser.Token token = null.     while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {         if (token == XContentParser.Token.START_OBJECT) {             issues.add(DeprecationIssue.PARSER.parse(parser, null)).         }     }     return issues. }
false;public,static;1;29;;public static DeprecationInfoResponse fromXContent(XContentParser parser) throws IOException {     Map<String, List<DeprecationIssue>> indexSettings = new HashMap<>().     List<DeprecationIssue> clusterSettings = new ArrayList<>().     List<DeprecationIssue> nodeSettings = new ArrayList<>().     List<DeprecationIssue> mlSettings = new ArrayList<>().     String fieldName = null.     XContentParser.Token token.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             fieldName = parser.currentName().         } else if (CLUSTER_SETTINGS.getPreferredName().equals(fieldName)) {             clusterSettings.addAll(parseDeprecationIssues(parser)).         } else if (NODE_SETTINGS.getPreferredName().equals(fieldName)) {             nodeSettings.addAll(parseDeprecationIssues(parser)).         } else if (ML_SETTINGS.getPreferredName().equals(fieldName)) {             mlSettings.addAll(parseDeprecationIssues(parser)).         } else if (INDEX_SETTINGS.getPreferredName().equals(fieldName)) {             // parse out the key/value pairs             while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {                 String key = parser.currentName().                 List<DeprecationIssue> value = parseDeprecationIssues(parser).                 if (value.size() > 0) {                     // only add indices that contain deprecation issues                     indexSettings.put(key, value).                 }             }         }     }     return new DeprecationInfoResponse(clusterSettings, nodeSettings, indexSettings, mlSettings). }
false;public;1;10;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     DeprecationInfoResponse that = (DeprecationInfoResponse) o.     return Objects.equals(clusterSettingsIssues, that.clusterSettingsIssues) && Objects.equals(nodeSettingsIssues, that.nodeSettingsIssues) && Objects.equals(mlSettingsIssues, that.mlSettingsIssues) && Objects.equals(indexSettingsIssues, that.indexSettingsIssues). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(clusterSettingsIssues, nodeSettingsIssues, indexSettingsIssues, mlSettingsIssues). }
false;public;0;5;;@Override public String toString() {     return clusterSettingsIssues.toString() + ":" + nodeSettingsIssues.toString() + ":" + indexSettingsIssues.toString() + ":" + mlSettingsIssues.toString(). }
false;public,static;1;3;;public static Level fromString(String value) {     return Level.valueOf(value.toUpperCase(Locale.ROOT)). }
false;public;0;4;;@Override public String toString() {     return name().toLowerCase(Locale.ROOT). }
false;public;0;3;;public Level getLevel() {     return level. }
false;public;0;3;;public String getMessage() {     return message. }
false;public;0;3;;public String getUrl() {     return url. }
false;public;0;3;;public String getDetails() {     return details. }
false;public;1;14;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     DeprecationIssue that = (DeprecationIssue) o.     return Objects.equals(level, that.level) && Objects.equals(message, that.message) && Objects.equals(url, that.url) && Objects.equals(details, that.details). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(level, message, url, details). }
