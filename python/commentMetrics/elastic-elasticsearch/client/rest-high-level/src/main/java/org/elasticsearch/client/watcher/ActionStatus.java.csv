commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public AckStatus ackStatus() {     return ackStatus. }
false;public;0;3;;public Execution lastExecution() {     return lastExecution. }
false;public;0;3;;public Execution lastSuccessfulExecution() {     return lastSuccessfulExecution. }
false;public;0;3;;public Throttle lastThrottle() {     return lastThrottle. }
false;public;1;12;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     ActionStatus that = (ActionStatus) o.     return Objects.equals(ackStatus, that.ackStatus) && Objects.equals(lastExecution, that.lastExecution) && Objects.equals(lastSuccessfulExecution, that.lastSuccessfulExecution) && Objects.equals(lastThrottle, that.lastThrottle). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(ackStatus, lastExecution, lastSuccessfulExecution, lastThrottle). }
false;public,static;2;29;;public static ActionStatus parse(String actionId, XContentParser parser) throws IOException {     AckStatus ackStatus = null.     Execution lastExecution = null.     Execution lastSuccessfulExecution = null.     Throttle lastThrottle = null.     String currentFieldName = null.     XContentParser.Token token.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (Field.ACK_STATUS.match(currentFieldName, parser.getDeprecationHandler())) {             ackStatus = AckStatus.parse(actionId, parser).         } else if (Field.LAST_EXECUTION.match(currentFieldName, parser.getDeprecationHandler())) {             lastExecution = Execution.parse(actionId, parser).         } else if (Field.LAST_SUCCESSFUL_EXECUTION.match(currentFieldName, parser.getDeprecationHandler())) {             lastSuccessfulExecution = Execution.parse(actionId, parser).         } else if (Field.LAST_THROTTLE.match(currentFieldName, parser.getDeprecationHandler())) {             lastThrottle = Throttle.parse(actionId, parser).         } else {             parser.skipChildren().         }     }     if (ackStatus == null) {         throw new ElasticsearchParseException("could not parse action status for [{}]. missing required field [{}]", actionId, Field.ACK_STATUS.getPreferredName()).     }     return new ActionStatus(ackStatus, lastExecution, lastSuccessfulExecution, lastThrottle). }
false;public;0;3;;public ZonedDateTime timestamp() {     return timestamp. }
false;public;0;3;;public State state() {     return state. }
false;public;1;9;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     AckStatus ackStatus = (AckStatus) o.     return Objects.equals(timestamp, ackStatus.timestamp) && Objects.equals(state, ackStatus.state). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(timestamp, state). }
false;public,static;2;27;;public static AckStatus parse(String actionId, XContentParser parser) throws IOException {     ZonedDateTime timestamp = null.     State state = null.     String currentFieldName = null.     XContentParser.Token token.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (Field.TIMESTAMP.match(currentFieldName, parser.getDeprecationHandler())) {             timestamp = WatchStatusDateParser.parseDate(parser.text()).         } else if (Field.ACK_STATUS_STATE.match(currentFieldName, parser.getDeprecationHandler())) {             state = State.valueOf(parser.text().toUpperCase(Locale.ROOT)).         } else {             parser.skipChildren().         }     }     if (timestamp == null) {         throw new ElasticsearchParseException("could not parse action status for [{}]. missing required field [{}.{}]", actionId, Field.ACK_STATUS.getPreferredName(), Field.TIMESTAMP.getPreferredName()).     }     if (state == null) {         throw new ElasticsearchParseException("could not parse action status for [{}]. missing required field [{}.{}]", actionId, Field.ACK_STATUS.getPreferredName(), Field.ACK_STATUS_STATE.getPreferredName()).     }     return new AckStatus(timestamp, state). }
false;public,static;1;3;;public static Execution successful(ZonedDateTime timestamp) {     return new Execution(timestamp, true, null). }
false;public,static;2;3;;public static Execution failure(ZonedDateTime timestamp, String reason) {     return new Execution(timestamp, false, reason). }
false;public;0;3;;public ZonedDateTime timestamp() {     return timestamp. }
false;public;0;3;;public boolean successful() {     return successful. }
false;public;0;3;;public String reason() {     return reason. }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Execution execution = (Execution) o.     return Objects.equals(successful, execution.successful) && Objects.equals(timestamp, execution.timestamp) && Objects.equals(reason, execution.reason). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(timestamp, successful, reason). }
false;public,static;2;37;;public static Execution parse(String actionId, XContentParser parser) throws IOException {     ZonedDateTime timestamp = null.     Boolean successful = null.     String reason = null.     String currentFieldName = null.     XContentParser.Token token.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (Field.TIMESTAMP.match(currentFieldName, parser.getDeprecationHandler())) {             timestamp = WatchStatusDateParser.parseDate(parser.text()).         } else if (Field.EXECUTION_SUCCESSFUL.match(currentFieldName, parser.getDeprecationHandler())) {             successful = parser.booleanValue().         } else if (Field.REASON.match(currentFieldName, parser.getDeprecationHandler())) {             reason = parser.text().         } else {             parser.skipChildren().         }     }     if (timestamp == null) {         throw new ElasticsearchParseException("could not parse action status for [{}]. missing required field [{}.{}]", actionId, Field.LAST_EXECUTION.getPreferredName(), Field.TIMESTAMP.getPreferredName()).     }     if (successful == null) {         throw new ElasticsearchParseException("could not parse action status for [{}]. missing required field [{}.{}]", actionId, Field.LAST_EXECUTION.getPreferredName(), Field.EXECUTION_SUCCESSFUL.getPreferredName()).     }     if (successful) {         return successful(timestamp).     }     if (reason == null) {         throw new ElasticsearchParseException("could not parse action status for [{}]. missing required field for unsuccessful" + " execution [{}.{}]", actionId, Field.LAST_EXECUTION.getPreferredName(), Field.REASON.getPreferredName()).     }     return failure(timestamp, reason). }
false;public;0;3;;public ZonedDateTime timestamp() {     return timestamp. }
false;public;0;3;;public String reason() {     return reason. }
false;public;1;8;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Throttle throttle = (Throttle) o.     return Objects.equals(timestamp, throttle.timestamp) && Objects.equals(reason, throttle.reason). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(timestamp, reason). }
false;public,static;2;27;;public static Throttle parse(String actionId, XContentParser parser) throws IOException {     ZonedDateTime timestamp = null.     String reason = null.     String currentFieldName = null.     XContentParser.Token token.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (Field.TIMESTAMP.match(currentFieldName, parser.getDeprecationHandler())) {             timestamp = WatchStatusDateParser.parseDate(parser.text()).         } else if (Field.REASON.match(currentFieldName, parser.getDeprecationHandler())) {             reason = parser.text().         } else {             parser.skipChildren().         }     }     if (timestamp == null) {         throw new ElasticsearchParseException("could not parse action status for [{}]. missing required field [{}.{}]", actionId, Field.LAST_THROTTLE.getPreferredName(), Field.TIMESTAMP.getPreferredName()).     }     if (reason == null) {         throw new ElasticsearchParseException("could not parse action status for [{}]. missing required field [{}.{}]", actionId, Field.LAST_THROTTLE.getPreferredName(), Field.REASON.getPreferredName()).     }     return new Throttle(timestamp, reason). }
