commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;0;3;;public List<String> getGroups() {     return groups. }
false;public;0;3;;public String getDescription() {     return description. }
false;public;0;3;;public List<DetectorUpdate> getDetectorUpdates() {     return detectorUpdates. }
false;public;0;3;;public ModelPlotConfig getModelPlotConfig() {     return modelPlotConfig. }
false;public;0;3;;public AnalysisLimits getAnalysisLimits() {     return analysisLimits. }
false;public;0;3;;public Long getRenormalizationWindowDays() {     return renormalizationWindowDays. }
false;public;0;3;;public TimeValue getBackgroundPersistInterval() {     return backgroundPersistInterval. }
false;public;0;3;;public Long getModelSnapshotRetentionDays() {     return modelSnapshotRetentionDays. }
false;public;0;3;;public Long getResultsRetentionDays() {     return resultsRetentionDays. }
false;public;0;3;;public List<String> getCategorizationFilters() {     return categorizationFilters. }
false;public;0;3;;public Map<String, Object> getCustomSettings() {     return customSettings. }
false;public;2;40;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Job.ID.getPreferredName(), jobId).     if (groups != null) {         builder.field(Job.GROUPS.getPreferredName(), groups).     }     if (description != null) {         builder.field(Job.DESCRIPTION.getPreferredName(), description).     }     if (detectorUpdates != null) {         builder.field(DETECTORS.getPreferredName(), detectorUpdates).     }     if (modelPlotConfig != null) {         builder.field(Job.MODEL_PLOT_CONFIG.getPreferredName(), modelPlotConfig).     }     if (analysisLimits != null) {         builder.field(Job.ANALYSIS_LIMITS.getPreferredName(), analysisLimits).     }     if (renormalizationWindowDays != null) {         builder.field(Job.RENORMALIZATION_WINDOW_DAYS.getPreferredName(), renormalizationWindowDays).     }     if (backgroundPersistInterval != null) {         builder.field(Job.BACKGROUND_PERSIST_INTERVAL.getPreferredName(), backgroundPersistInterval).     }     if (modelSnapshotRetentionDays != null) {         builder.field(Job.MODEL_SNAPSHOT_RETENTION_DAYS.getPreferredName(), modelSnapshotRetentionDays).     }     if (resultsRetentionDays != null) {         builder.field(Job.RESULTS_RETENTION_DAYS.getPreferredName(), resultsRetentionDays).     }     if (categorizationFilters != null) {         builder.field(AnalysisConfig.CATEGORIZATION_FILTERS.getPreferredName(), categorizationFilters).     }     if (customSettings != null) {         builder.field(Job.CUSTOM_SETTINGS.getPreferredName(), customSettings).     }     builder.endObject().     return builder. }
false;public;1;25;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     JobUpdate that = (JobUpdate) other.     return Objects.equals(this.jobId, that.jobId) && Objects.equals(this.groups, that.groups) && Objects.equals(this.description, that.description) && Objects.equals(this.detectorUpdates, that.detectorUpdates) && Objects.equals(this.modelPlotConfig, that.modelPlotConfig) && Objects.equals(this.analysisLimits, that.analysisLimits) && Objects.equals(this.renormalizationWindowDays, that.renormalizationWindowDays) && Objects.equals(this.backgroundPersistInterval, that.backgroundPersistInterval) && Objects.equals(this.modelSnapshotRetentionDays, that.modelSnapshotRetentionDays) && Objects.equals(this.resultsRetentionDays, that.resultsRetentionDays) && Objects.equals(this.categorizationFilters, that.categorizationFilters) && Objects.equals(this.customSettings, that.customSettings). }
false;public;0;5;;@Override public int hashCode() {     return Objects.hash(jobId, groups, description, detectorUpdates, modelPlotConfig, analysisLimits, renormalizationWindowDays, backgroundPersistInterval, modelSnapshotRetentionDays, resultsRetentionDays, categorizationFilters, customSettings). }
false;public;0;3;;public int getDetectorIndex() {     return detectorIndex. }
false;public;0;3;;public String getDescription() {     return description. }
false;public;0;3;;public List<DetectionRule> getRules() {     return rules. }
false;public;2;15;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Detector.DETECTOR_INDEX.getPreferredName(), detectorIndex).     if (description != null) {         builder.field(Job.DESCRIPTION.getPreferredName(), description).     }     if (rules != null) {         builder.field(Detector.CUSTOM_RULES_FIELD.getPreferredName(), rules).     }     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(detectorIndex, description, rules). }
false;public;1;14;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     DetectorUpdate that = (DetectorUpdate) other.     return this.detectorIndex == that.detectorIndex && Objects.equals(this.description, that.description) && Objects.equals(this.rules, that.rules). }
true;public;1;4;/**  * Set the job groups  *  * Updates the {@link Job#groups} setting  *  * @param groups A list of group names  */ ;/**  * Set the job groups  *  * Updates the {@link Job#groups} setting  *  * @param groups A list of group names  */ public Builder setGroups(List<String> groups) {     this.groups = groups.     return this. }
true;public;1;4;/**  * Set the job description  *  * Updates the {@link Job#description} setting  *  * @param description the desired Machine Learning job description  */ ;/**  * Set the job description  *  * Updates the {@link Job#description} setting  *  * @param description the desired Machine Learning job description  */ public Builder setDescription(String description) {     this.description = description.     return this. }
true;public;1;4;/**  * The detector updates to apply to the job  *  * Updates the {@link AnalysisConfig#detectors} setting  *  * @param detectorUpdates list of {@link JobUpdate.DetectorUpdate} objects  */ ;/**  * The detector updates to apply to the job  *  * Updates the {@link AnalysisConfig#detectors} setting  *  * @param detectorUpdates list of {@link JobUpdate.DetectorUpdate} objects  */ public Builder setDetectorUpdates(List<DetectorUpdate> detectorUpdates) {     this.detectorUpdates = detectorUpdates.     return this. }
true;public;1;4;/**  * Enables/disables the model plot config setting through {@link ModelPlotConfig#enabled}  *  * Updates the {@link Job#modelPlotConfig} setting  *  * @param modelPlotConfig {@link ModelPlotConfig} object with updated fields  */ ;/**  * Enables/disables the model plot config setting through {@link ModelPlotConfig#enabled}  *  * Updates the {@link Job#modelPlotConfig} setting  *  * @param modelPlotConfig {@link ModelPlotConfig} object with updated fields  */ public Builder setModelPlotConfig(ModelPlotConfig modelPlotConfig) {     this.modelPlotConfig = modelPlotConfig.     return this. }
true;public;1;4;/**  * Sets new {@link AnalysisLimits} for the {@link Job}  *  * Updates the {@link Job#analysisLimits} setting  *  * @param analysisLimits Updates to {@link AnalysisLimits}  */ ;/**  * Sets new {@link AnalysisLimits} for the {@link Job}  *  * Updates the {@link Job#analysisLimits} setting  *  * @param analysisLimits Updates to {@link AnalysisLimits}  */ public Builder setAnalysisLimits(AnalysisLimits analysisLimits) {     this.analysisLimits = analysisLimits.     return this. }
true;public;1;4;/**  * Advanced configuration option. The period over which adjustments to the score are applied, as new data is seen  *  * Updates the {@link Job#renormalizationWindowDays} setting  *  * @param renormalizationWindowDays number of renormalization window days  */ ;/**  * Advanced configuration option. The period over which adjustments to the score are applied, as new data is seen  *  * Updates the {@link Job#renormalizationWindowDays} setting  *  * @param renormalizationWindowDays number of renormalization window days  */ public Builder setRenormalizationWindowDays(Long renormalizationWindowDays) {     this.renormalizationWindowDays = renormalizationWindowDays.     return this. }
true;public;1;4;/**  * Advanced configuration option. The time between each periodic persistence of the model  *  * Updates the {@link Job#backgroundPersistInterval} setting  *  * @param backgroundPersistInterval the time between background persistence  */ ;/**  * Advanced configuration option. The time between each periodic persistence of the model  *  * Updates the {@link Job#backgroundPersistInterval} setting  *  * @param backgroundPersistInterval the time between background persistence  */ public Builder setBackgroundPersistInterval(TimeValue backgroundPersistInterval) {     this.backgroundPersistInterval = backgroundPersistInterval.     return this. }
true;public;1;4;/**  * The time in days that model snapshots are retained for the job.  *  * Updates the {@link Job#modelSnapshotRetentionDays} setting  *  * @param modelSnapshotRetentionDays number of days to keep a model snapshot  */ ;/**  * The time in days that model snapshots are retained for the job.  *  * Updates the {@link Job#modelSnapshotRetentionDays} setting  *  * @param modelSnapshotRetentionDays number of days to keep a model snapshot  */ public Builder setModelSnapshotRetentionDays(Long modelSnapshotRetentionDays) {     this.modelSnapshotRetentionDays = modelSnapshotRetentionDays.     return this. }
true;public;1;4;/**  * Advanced configuration option. The number of days for which job results are retained  *  * Updates the {@link Job#resultsRetentionDays} setting  *  * @param resultsRetentionDays number of days to keep results.  */ ;/**  * Advanced configuration option. The number of days for which job results are retained  *  * Updates the {@link Job#resultsRetentionDays} setting  *  * @param resultsRetentionDays number of days to keep results.  */ public Builder setResultsRetentionDays(Long resultsRetentionDays) {     this.resultsRetentionDays = resultsRetentionDays.     return this. }
true;public;1;4;/**  * Sets the categorization filters on the {@link Job}  *  * Updates the {@link AnalysisConfig#categorizationFilters} setting.  * Requires {@link AnalysisConfig#categorizationFieldName} to have been set on the existing Job.  *  * @param categorizationFilters list of categorization filters for the Job's {@link AnalysisConfig}  */ ;/**  * Sets the categorization filters on the {@link Job}  *  * Updates the {@link AnalysisConfig#categorizationFilters} setting.  * Requires {@link AnalysisConfig#categorizationFieldName} to have been set on the existing Job.  *  * @param categorizationFilters list of categorization filters for the Job's {@link AnalysisConfig}  */ public Builder setCategorizationFilters(List<String> categorizationFilters) {     this.categorizationFilters = categorizationFilters.     return this. }
true;public;1;4;/**  * Contains custom meta data about the job.  *  * Updates the {@link Job#customSettings} setting  *  * @param customSettings custom settings map for the job  */ ;/**  * Contains custom meta data about the job.  *  * Updates the {@link Job#customSettings} setting  *  * @param customSettings custom settings map for the job  */ public Builder setCustomSettings(Map<String, Object> customSettings) {     this.customSettings = customSettings.     return this. }
false;public;0;4;;public JobUpdate build() {     return new JobUpdate(jobId, groups, description, detectorUpdates, modelPlotConfig, analysisLimits, backgroundPersistInterval, renormalizationWindowDays, resultsRetentionDays, modelSnapshotRetentionDays, categorizationFilters, customSettings). }
