commented;modifiers;parameterAmount;loc;comment;code
false;public;0;28;;@Override public Optional<ValidationException> validate() {     final ValidationException validationException = new ValidationException().     if (dateHistogram != null) {         final Optional<ValidationException> dateHistogramValidationErrors = dateHistogram.validate().         if (dateHistogramValidationErrors != null && dateHistogramValidationErrors.isPresent()) {             validationException.addValidationErrors(dateHistogramValidationErrors.get()).         }     } else {         validationException.addValidationError("Date histogram must not be null").     }     if (histogram != null) {         final Optional<ValidationException> histogramValidationErrors = histogram.validate().         if (histogramValidationErrors != null && histogramValidationErrors.isPresent()) {             validationException.addValidationErrors(histogramValidationErrors.get()).         }     }     if (terms != null) {         final Optional<ValidationException> termsValidationErrors = terms.validate().         if (termsValidationErrors != null && termsValidationErrors.isPresent()) {             validationException.addValidationErrors(termsValidationErrors.get()).         }     }     if (validationException.validationErrors().isEmpty()) {         return Optional.empty().     }     return Optional.of(validationException). }
true;public;0;3;/**  * @return the configuration of the date histogram  */ ;/**  * @return the configuration of the date histogram  */ public DateHistogramGroupConfig getDateHistogram() {     return dateHistogram. }
true;public;0;4;/**  * @return the configuration of the histogram  */ ;/**  * @return the configuration of the histogram  */ @Nullable public HistogramGroupConfig getHistogram() {     return histogram. }
true;public;0;4;/**  * @return the configuration of the terms  */ ;/**  * @return the configuration of the terms  */ @Nullable public TermsGroupConfig getTerms() {     return terms. }
false;public;2;14;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     {         builder.field(DateHistogramGroupConfig.NAME, dateHistogram).         if (histogram != null) {             builder.field(HistogramGroupConfig.NAME, histogram).         }         if (terms != null) {             builder.field(TermsGroupConfig.NAME, terms).         }     }     return builder.endObject(). }
false;public;1;13;;@Override public boolean equals(final Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     final GroupConfig that = (GroupConfig) other.     return Objects.equals(dateHistogram, that.dateHistogram) && Objects.equals(histogram, that.histogram) && Objects.equals(terms, that.terms). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(dateHistogram, histogram, terms). }
false;public,static;1;3;;public static GroupConfig fromXContent(final XContentParser parser) throws IOException {     return PARSER.parse(parser, null). }
