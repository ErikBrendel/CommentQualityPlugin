commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Explicitly gets all datafeeds statistics  *  * @return a {@link GetDatafeedStatsRequest} for all existing datafeeds  */ ;/**  * Explicitly gets all datafeeds statistics  *  * @return a {@link GetDatafeedStatsRequest} for all existing datafeeds  */ public static GetDatafeedStatsRequest getAllDatafeedStatsRequest() {     return new GetDatafeedStatsRequest(ALL_DATAFEEDS). }
true;public;0;3;/**  * All the datafeedIds for which to get statistics  */ ;/**  * All the datafeedIds for which to get statistics  */ public List<String> getDatafeedIds() {     return datafeedIds. }
false;public;0;3;;public Boolean getAllowNoDatafeeds() {     return this.allowNoDatafeeds. }
true;public;1;3;/**  * Whether to ignore if a wildcard expression matches no datafeeds.  *  * This includes {@code _all} string or when no datafeeds have been specified  *  * @param allowNoDatafeeds When {@code true} ignore if wildcard or {@code _all} matches no datafeeds. Defaults to {@code true}  */ ;/**  * Whether to ignore if a wildcard expression matches no datafeeds.  *  * This includes {@code _all} string or when no datafeeds have been specified  *  * @param allowNoDatafeeds When {@code true} ignore if wildcard or {@code _all} matches no datafeeds. Defaults to {@code true}  */ public void setAllowNoDatafeeds(boolean allowNoDatafeeds) {     this.allowNoDatafeeds = allowNoDatafeeds. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(datafeedIds, allowNoDatafeeds). }
false;public;1;14;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     GetDatafeedStatsRequest that = (GetDatafeedStatsRequest) other.     return Objects.equals(datafeedIds, that.datafeedIds) && Objects.equals(allowNoDatafeeds, that.allowNoDatafeeds). }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;2;10;;@Override public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params params) throws IOException {     builder.startObject().     builder.field(DatafeedConfig.ID.getPreferredName(), Strings.collectionToCommaDelimitedString(datafeedIds)).     if (allowNoDatafeeds != null) {         builder.field(ALLOW_NO_DATAFEEDS.getPreferredName(), allowNoDatafeeds).     }     builder.endObject().     return builder. }
