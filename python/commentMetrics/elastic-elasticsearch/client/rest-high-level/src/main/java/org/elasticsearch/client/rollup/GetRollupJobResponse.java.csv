commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Jobs returned by the request.  */ ;/**  * Jobs returned by the request.  */ public List<JobWrapper> getJobs() {     return jobs. }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     final GetRollupJobResponse that = (GetRollupJobResponse) o.     return jobs.equals(that.jobs). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobs). }
false;public,static;1;3;;public static GetRollupJobResponse fromXContent(final XContentParser parser) throws IOException {     return PARSER.parse(parser, null). }
false;public,final;0;4;;@Override public final String toString() {     return "{jobs=" + jobs.stream().map(Object::toString).collect(joining("\n")) + "\n}". }
true;public;0;3;/**  * Configuration of the job.  */ ;/**  * Configuration of the job.  */ public RollupJobConfig getJob() {     return job. }
true;public;0;3;/**  * Statistics about the execution of the job.  */ ;/**  * Statistics about the execution of the job.  */ public RollupIndexerJobStats getStats() {     return stats. }
true;public;0;3;/**  * Current state of the job.  */ ;/**  * Current state of the job.  */ public RollupJobStatus getStatus() {     return status. }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     JobWrapper other = (JobWrapper) obj.     return Objects.equals(job, other.job) && Objects.equals(stats, other.stats) && Objects.equals(status, other.status). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(job, stats, status). }
false;public,final;0;6;;@Override public final String toString() {     return "{job=" + job + ", stats=" + stats + ", status=" + status + "}". }
true;public;0;3;/**  * The number of pages read from the input indices.  */ ;/**  * The number of pages read from the input indices.  */ public long getNumPages() {     return numPages. }
true;public;0;3;/**  * The number of documents read from the input indices.  */ ;/**  * The number of documents read from the input indices.  */ public long getNumDocuments() {     return numInputDocuments. }
true;public;0;3;/**  * Number of times that the job woke up to write documents.  */ ;/**  * Number of times that the job woke up to write documents.  */ public long getNumInvocations() {     return numInvocations. }
true;public;0;3;/**  * Number of documents written to the result indices.  */ ;/**  * Number of documents written to the result indices.  */ public long getOutputDocuments() {     return numOuputDocuments. }
true;public;0;3;/**  * Number of failures that have occurred during the bulk indexing phase of Rollup  */ ;/**  * Number of failures that have occurred during the bulk indexing phase of Rollup  */ public long getIndexFailures() {     return indexFailures. }
true;public;0;3;/**  * Number of failures that have occurred during the search phase of Rollup  */ ;/**  * Number of failures that have occurred during the search phase of Rollup  */ public long getSearchFailures() {     return searchFailures. }
true;public;0;3;/**  * Returns the time spent indexing (cumulative) in milliseconds  */ ;/**  * Returns the time spent indexing (cumulative) in milliseconds  */ public long getIndexTime() {     return indexTime. }
true;public;0;3;/**  * Returns the time spent searching (cumulative) in milliseconds  */ ;/**  * Returns the time spent searching (cumulative) in milliseconds  */ public long getSearchTime() {     return searchTime. }
true;public;0;3;/**  * Returns the total number of indexing requests that have been sent by the rollup job  * (Note: this is not the number of _documents_ that have been indexed)  */ ;/**  * Returns the total number of indexing requests that have been sent by the rollup job  * (Note: this is not the number of _documents_ that have been indexed)  */ public long getIndexTotal() {     return indexTotal. }
true;public;0;3;/**  * Returns the total number of search requests that have been sent by the rollup job  */ ;/**  * Returns the total number of search requests that have been sent by the rollup job  */ public long getSearchTotal() {     return searchTotal. }
false;public;1;16;;@Override public boolean equals(Object other) {     if (this == other)         return true.     if (other == null || getClass() != other.getClass())         return false.     RollupIndexerJobStats that = (RollupIndexerJobStats) other.     return Objects.equals(this.numPages, that.numPages) && Objects.equals(this.numInputDocuments, that.numInputDocuments) && Objects.equals(this.numOuputDocuments, that.numOuputDocuments) && Objects.equals(this.numInvocations, that.numInvocations) && Objects.equals(this.indexTime, that.indexTime) && Objects.equals(this.searchTime, that.searchTime) && Objects.equals(this.indexFailures, that.indexFailures) && Objects.equals(this.searchFailures, that.searchFailures) && Objects.equals(this.searchTotal, that.searchTotal) && Objects.equals(this.indexTotal, that.indexTotal). }
false;public;0;5;;@Override public int hashCode() {     return Objects.hash(numPages, numInputDocuments, numOuputDocuments, numInvocations, indexTime, searchTime, indexFailures, searchFailures, searchTotal, indexTotal). }
false;public,final;0;13;;@Override public final String toString() {     return "{pages=" + numPages + ", input_docs=" + numInputDocuments + ", output_docs=" + numOuputDocuments + ", invocations=" + numInvocations + ", index_failures=" + indexFailures + ", search_failures=" + searchFailures + ", index_time_in_ms=" + indexTime + ", index_total=" + indexTotal + ", search_time_in_ms=" + searchTime + ", search_total=" + searchTotal + "}". }
true;public;0;3;/**  * The state of the writer.  */ ;/**  * The state of the writer.  */ public IndexerState getState() {     return state. }
true;public;0;3;/**  * The current position of the writer.  */ ;/**  * The current position of the writer.  */ public Map<String, Object> getCurrentPosition() {     return currentPosition. }
true;public;0;3;/**  * Flag holds the state of the ID scheme, e.g. if it has been upgraded  * to the concatenation scheme.  */ ;/**  * Flag holds the state of the ID scheme, e.g. if it has been upgraded  * to the concatenation scheme.  */ public boolean getUpgradedDocumentId() {     return upgradedDocumentId. }
false;public;1;9;;@Override public boolean equals(Object other) {     if (this == other)         return true.     if (other == null || getClass() != other.getClass())         return false.     RollupJobStatus that = (RollupJobStatus) other.     return Objects.equals(state, that.state) && Objects.equals(currentPosition, that.currentPosition) && upgradedDocumentId == that.upgradedDocumentId. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(state, currentPosition, upgradedDocumentId). }
false;public,final;0;6;;@Override public final String toString() {     return "{stats=" + state + ", currentPosition=" + currentPosition + ", upgradedDocumentId=" + upgradedDocumentId + "}". }
false;static;1;3;;static IndexerState fromString(String name) {     return valueOf(name.trim().toUpperCase(Locale.ROOT)). }
false;;0;3;;String value() {     return name().toLowerCase(Locale.ROOT). }
