commented;modifiers;parameterAmount;loc;comment;code
true;public;2;5;/**  * Retrieve one or more lifecycle policy definition. See  * <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-ilm-ilm-get-lifecycle-policy.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Retrieve one or more lifecycle policy definition. See  * <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-ilm-ilm-get-lifecycle-policy.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public GetLifecyclePolicyResponse getLifecyclePolicy(GetLifecyclePolicyRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, IndexLifecycleRequestConverters::getLifecyclePolicy, options, GetLifecyclePolicyResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously retrieve one or more lifecycle policy definition. See  * <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-ilm-ilm-get-lifecycle-policy.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously retrieve one or more lifecycle policy definition. See  * <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-ilm-ilm-get-lifecycle-policy.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void getLifecyclePolicyAsync(GetLifecyclePolicyRequest request, RequestOptions options, ActionListener<GetLifecyclePolicyResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, IndexLifecycleRequestConverters::getLifecyclePolicy, options, GetLifecyclePolicyResponse::fromXContent, listener, emptySet()). }
true;public;2;5;/**  * Create or modify a lifecycle definition. See <a href=  * "https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-ilm-ilm-put-lifecycle-policy.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Create or modify a lifecycle definition. See <a href=  * "https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-ilm-ilm-put-lifecycle-policy.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public AcknowledgedResponse putLifecyclePolicy(PutLifecyclePolicyRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, IndexLifecycleRequestConverters::putLifecyclePolicy, options, AcknowledgedResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously create or modify a lifecycle definition. See <a href=  * "https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-ilm-ilm-put-lifecycle-policy.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously create or modify a lifecycle definition. See <a href=  * "https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-ilm-ilm-put-lifecycle-policy.html">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void putLifecyclePolicyAsync(PutLifecyclePolicyRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, IndexLifecycleRequestConverters::putLifecyclePolicy, options, AcknowledgedResponse::fromXContent, listener, emptySet()). }
true;public;2;5;/**  * Delete a lifecycle definition  * See <a href="https://fix-me-when-we-have-docs.com">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Delete a lifecycle definition  * See <a href="https://fix-me-when-we-have-docs.com">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public AcknowledgedResponse deleteLifecyclePolicy(DeleteLifecyclePolicyRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, IndexLifecycleRequestConverters::deleteLifecyclePolicy, options, AcknowledgedResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously delete a lifecycle definition  * See <a href="https://fix-me-when-we-have-docs.com">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously delete a lifecycle definition  * See <a href="https://fix-me-when-we-have-docs.com">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void deleteLifecyclePolicyAsync(DeleteLifecyclePolicyRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, IndexLifecycleRequestConverters::deleteLifecyclePolicy, options, AcknowledgedResponse::fromXContent, listener, emptySet()). }
true;public;2;5;/**  * Remove the index lifecycle policy for an index  * See <a href="https://fix-me-when-we-have-docs.com">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Remove the index lifecycle policy for an index  * See <a href="https://fix-me-when-we-have-docs.com">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public RemoveIndexLifecyclePolicyResponse removeIndexLifecyclePolicy(RemoveIndexLifecyclePolicyRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, IndexLifecycleRequestConverters::removeIndexLifecyclePolicy, options, RemoveIndexLifecyclePolicyResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously remove the index lifecycle policy for an index  * See <a href="https://fix-me-when-we-have-docs.com">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously remove the index lifecycle policy for an index  * See <a href="https://fix-me-when-we-have-docs.com">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void removeIndexLifecyclePolicyAsync(RemoveIndexLifecyclePolicyRequest request, RequestOptions options, ActionListener<RemoveIndexLifecyclePolicyResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, IndexLifecycleRequestConverters::removeIndexLifecyclePolicy, options, RemoveIndexLifecyclePolicyResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Start the Index Lifecycle Management feature.  * See <a href="https://fix-me-when-we-have-docs.com">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Start the Index Lifecycle Management feature.  * See <a href="https://fix-me-when-we-have-docs.com">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public AcknowledgedResponse startILM(StartILMRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, IndexLifecycleRequestConverters::startILM, options, AcknowledgedResponse::fromXContent, emptySet()). }
true;public;3;4;/**  * Asynchronously start the Index Lifecycle Management feature.  * See <a href="https://fix-me-when-we-have-docs.com">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously start the Index Lifecycle Management feature.  * See <a href="https://fix-me-when-we-have-docs.com">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void startILMAsync(StartILMRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, IndexLifecycleRequestConverters::startILM, options, AcknowledgedResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Stop the Index Lifecycle Management feature.  * See <a href="https://fix-me-when-we-have-docs.com">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Stop the Index Lifecycle Management feature.  * See <a href="https://fix-me-when-we-have-docs.com">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public AcknowledgedResponse stopILM(StopILMRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, IndexLifecycleRequestConverters::stopILM, options, AcknowledgedResponse::fromXContent, emptySet()). }
true;public;2;5;/**  * Get the status of index lifecycle management  * See <a href="https://fix-me-when-we-have-docs.com">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  */ ;/**  * Get the status of index lifecycle management  * See <a href="https://fix-me-when-we-have-docs.com">  * the docs</a> for more.  *  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  */ public LifecycleManagementStatusResponse lifecycleManagementStatus(LifecycleManagementStatusRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, IndexLifecycleRequestConverters::lifecycleManagementStatus, options, LifecycleManagementStatusResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously get the status of index lifecycle management  * See <a href="https://fix-me-when-we-have-docs.com">  * the docs</a> for more.  *  * @param request  the request  * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously get the status of index lifecycle management  * See <a href="https://fix-me-when-we-have-docs.com">  * the docs</a> for more.  *  * @param request  the request  * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void lifecycleManagementStatusAsync(LifecycleManagementStatusRequest request, RequestOptions options, ActionListener<LifecycleManagementStatusResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, IndexLifecycleRequestConverters::lifecycleManagementStatus, options, LifecycleManagementStatusResponse::fromXContent, listener, emptySet()). }
true;public;3;4;/**  * Asynchronously stop the Index Lifecycle Management feature.  * See <a href="https://fix-me-when-we-have-docs.com">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously stop the Index Lifecycle Management feature.  * See <a href="https://fix-me-when-we-have-docs.com">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void stopILMAsync(StopILMRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, IndexLifecycleRequestConverters::stopILM, options, AcknowledgedResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Explain the lifecycle state for an index  * See <a href="https://fix-me-when-we-have-docs.com">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Explain the lifecycle state for an index  * See <a href="https://fix-me-when-we-have-docs.com">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public ExplainLifecycleResponse explainLifecycle(ExplainLifecycleRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, IndexLifecycleRequestConverters::explainLifecycle, options, ExplainLifecycleResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously explain the lifecycle state for an index  * See <a href="https://fix-me-when-we-have-docs.com">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously explain the lifecycle state for an index  * See <a href="https://fix-me-when-we-have-docs.com">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void explainLifecycleAsync(ExplainLifecycleRequest request, RequestOptions options, ActionListener<ExplainLifecycleResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, IndexLifecycleRequestConverters::explainLifecycle, options, ExplainLifecycleResponse::fromXContent, listener, emptySet()). }
true;public;2;4;/**  * Retry lifecycle step for given indices  * See <a href="https://fix-me-when-we-have-docs.com">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ ;/**  * Retry lifecycle step for given indices  * See <a href="https://fix-me-when-we-have-docs.com">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @return the response  * @throws IOException in case there is a problem sending the request or parsing back the response  */ public AcknowledgedResponse retryLifecyclePolicy(RetryLifecyclePolicyRequest request, RequestOptions options) throws IOException {     return restHighLevelClient.performRequestAndParseEntity(request, IndexLifecycleRequestConverters::retryLifecycle, options, AcknowledgedResponse::fromXContent, emptySet()). }
true;public;3;5;/**  * Asynchronously retry the lifecycle step for given indices  * See <a href="https://fix-me-when-we-have-docs.com">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ ;/**  * Asynchronously retry the lifecycle step for given indices  * See <a href="https://fix-me-when-we-have-docs.com">  * the docs</a> for more.  * @param request the request  * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized  * @param listener the listener to be notified upon request completion  */ public void retryLifecyclePolicyAsync(RetryLifecyclePolicyRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {     restHighLevelClient.performRequestAsyncAndParseEntity(request, IndexLifecycleRequestConverters::retryLifecycle, options, AcknowledgedResponse::fromXContent, listener, emptySet()). }
