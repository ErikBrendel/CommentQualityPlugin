commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;0;3;;public String getSnapshotId() {     return snapshotId. }
false;public;0;3;;public Boolean getDeleteInterveningResults() {     return deleteInterveningResults. }
true;public;1;3;/**  * Sets the request flag that indicates whether or not intervening results should be deleted.  * @param deleteInterveningResults Flag that indicates whether or not intervening results should be deleted.  */ ;/**  * Sets the request flag that indicates whether or not intervening results should be deleted.  * @param deleteInterveningResults Flag that indicates whether or not intervening results should be deleted.  */ public void setDeleteInterveningResults(Boolean deleteInterveningResults) {     this.deleteInterveningResults = deleteInterveningResults. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;2;11;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Job.ID.getPreferredName(), jobId).     builder.field(ModelSnapshot.SNAPSHOT_ID.getPreferredName(), snapshotId).     if (deleteInterveningResults != null) {         builder.field(DELETE_INTERVENING.getPreferredName(), deleteInterveningResults).     }     builder.endObject().     return builder. }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     RevertModelSnapshotRequest request = (RevertModelSnapshotRequest) obj.     return Objects.equals(jobId, request.jobId) && Objects.equals(snapshotId, request.snapshotId) && Objects.equals(deleteInterveningResults, request.deleteInterveningResults). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobId, snapshotId, deleteInterveningResults). }
