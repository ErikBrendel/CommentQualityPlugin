commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Case-insensitive from string method.  * Works with either ALL, All, etc.  *  * @param value String representation  * @return The data format  */ ;/**  * Case-insensitive from string method.  * Works with either ALL, All, etc.  *  * @param value String representation  * @return The data format  */ public static ExcludeFrequent forString(String value) {     return valueOf(value.toUpperCase(Locale.ROOT)). }
false;public;0;4;;@Override public String toString() {     return name().toLowerCase(Locale.ROOT). }
false;public;2;33;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(DETECTOR_DESCRIPTION_FIELD.getPreferredName(), detectorDescription).     builder.field(FUNCTION_FIELD.getPreferredName(), function).     if (fieldName != null) {         builder.field(FIELD_NAME_FIELD.getPreferredName(), fieldName).     }     if (byFieldName != null) {         builder.field(BY_FIELD_NAME_FIELD.getPreferredName(), byFieldName).     }     if (overFieldName != null) {         builder.field(OVER_FIELD_NAME_FIELD.getPreferredName(), overFieldName).     }     if (partitionFieldName != null) {         builder.field(PARTITION_FIELD_NAME_FIELD.getPreferredName(), partitionFieldName).     }     if (useNull) {         builder.field(USE_NULL_FIELD.getPreferredName(), useNull).     }     if (excludeFrequent != null) {         builder.field(EXCLUDE_FREQUENT_FIELD.getPreferredName(), excludeFrequent).     }     if (rules.isEmpty() == false) {         builder.field(CUSTOM_RULES_FIELD.getPreferredName(), rules).     }     // negative means unknown     if (detectorIndex >= 0) {         builder.field(DETECTOR_INDEX.getPreferredName(), detectorIndex).     }     builder.endObject().     return builder. }
false;public;0;3;;public String getDetectorDescription() {     return detectorDescription. }
true;public;0;3;/**  * The analysis function used e.g. count, rare, min etc.  *  * @return The function or <code>null</code> if not set  */ ;/**  * The analysis function used e.g. count, rare, min etc.  *  * @return The function or <code>null</code> if not set  */ public DetectorFunction getFunction() {     return function. }
true;public;0;3;/**  * The Analysis field  *  * @return The field to analyse  */ ;/**  * The Analysis field  *  * @return The field to analyse  */ public String getFieldName() {     return fieldName. }
true;public;0;3;/**  * The 'by' field or <code>null</code> if not set.  *  * @return The 'by' field  */ ;/**  * The 'by' field or <code>null</code> if not set.  *  * @return The 'by' field  */ public String getByFieldName() {     return byFieldName. }
true;public;0;3;/**  * The 'over' field or <code>null</code> if not set.  *  * @return The 'over' field  */ ;/**  * The 'over' field or <code>null</code> if not set.  *  * @return The 'over' field  */ public String getOverFieldName() {     return overFieldName. }
true;public;0;3;/**  * Segments the analysis along another field to have completely  * independent baselines for each instance of partitionfield  *  * @return The Partition Field  */ ;/**  * Segments the analysis along another field to have completely  * independent baselines for each instance of partitionfield  *  * @return The Partition Field  */ public String getPartitionFieldName() {     return partitionFieldName. }
true;public;0;3;/**  * Where there isn't a value for the 'by' or 'over' field should a new  * series be used as the 'null' series.  *  * @return true if the 'null' series should be created  */ ;/**  * Where there isn't a value for the 'by' or 'over' field should a new  * series be used as the 'null' series.  *  * @return true if the 'null' series should be created  */ public boolean isUseNull() {     return useNull. }
true;public;0;3;/**  * Excludes frequently-occurring metrics from the analysis.  * can apply to 'by' field, 'over' field, or both  *  * @return the value that the user set  */ ;/**  * Excludes frequently-occurring metrics from the analysis.  * can apply to 'by' field, 'over' field, or both  *  * @return the value that the user set  */ public ExcludeFrequent getExcludeFrequent() {     return excludeFrequent. }
false;public;0;3;;public List<DetectionRule> getRules() {     return rules. }
true;public;0;3;/**  * @return the detector index or a negative number if unknown  */ ;/**  * @return the detector index or a negative number if unknown  */ public int getDetectorIndex() {     return detectorIndex. }
false;public;1;23;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other instanceof Detector == false) {         return false.     }     Detector that = (Detector) other.     return Objects.equals(this.detectorDescription, that.detectorDescription) && Objects.equals(this.function, that.function) && Objects.equals(this.fieldName, that.fieldName) && Objects.equals(this.byFieldName, that.byFieldName) && Objects.equals(this.overFieldName, that.overFieldName) && Objects.equals(this.partitionFieldName, that.partitionFieldName) && Objects.equals(this.useNull, that.useNull) && Objects.equals(this.excludeFrequent, that.excludeFrequent) && Objects.equals(this.rules, that.rules) && this.detectorIndex == that.detectorIndex. }
false;public;0;5;;@Override public int hashCode() {     return Objects.hash(detectorDescription, function, fieldName, byFieldName, overFieldName, partitionFieldName, useNull, excludeFrequent, rules, detectorIndex). }
false;public,static;0;3;;public static Builder builder() {     return new Builder(). }
false;public;1;4;;public Builder setDetectorDescription(String detectorDescription) {     this.detectorDescription = detectorDescription.     return this. }
false;public;1;4;;public Builder setFunction(String function) {     this.function = DetectorFunction.fromString(function).     return this. }
false;public;1;4;;public Builder setFieldName(String fieldName) {     this.fieldName = fieldName.     return this. }
false;public;1;4;;public Builder setByFieldName(String byFieldName) {     this.byFieldName = byFieldName.     return this. }
false;public;1;4;;public Builder setOverFieldName(String overFieldName) {     this.overFieldName = overFieldName.     return this. }
false;public;1;4;;public Builder setPartitionFieldName(String partitionFieldName) {     this.partitionFieldName = partitionFieldName.     return this. }
false;public;1;4;;public Builder setUseNull(boolean useNull) {     this.useNull = useNull.     return this. }
false;public;1;4;;public Builder setExcludeFrequent(ExcludeFrequent excludeFrequent) {     this.excludeFrequent = excludeFrequent.     return this. }
false;public;1;4;;public Builder setRules(List<DetectionRule> rules) {     this.rules = rules.     return this. }
false;public;1;4;;public Builder setDetectorIndex(int detectorIndex) {     this.detectorIndex = detectorIndex.     return this. }
false;public;0;4;;public Detector build() {     return new Detector(detectorDescription, function, fieldName, byFieldName, overFieldName, partitionFieldName, useNull, excludeFrequent, rules, detectorIndex). }
