commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;16;;public static UserDictionary getUserDictionary(Environment env, Settings settings) {     try {         final Reader reader = Analysis.getReaderFromFile(env, settings, USER_DICT_OPTION).         if (reader == null) {             return null.         } else {             try {                 return UserDictionary.open(reader).             } finally {                 reader.close().             }         }     } catch (IOException e) {         throw new ElasticsearchException("failed to load kuromoji user dictionary", e).     } }
false;public,static;1;14;;public static JapaneseTokenizer.Mode getMode(Settings settings) {     JapaneseTokenizer.Mode mode = JapaneseTokenizer.DEFAULT_MODE.     String modeSetting = settings.get("mode", null).     if (modeSetting != null) {         if ("search".equalsIgnoreCase(modeSetting)) {             mode = JapaneseTokenizer.Mode.SEARCH.         } else if ("normal".equalsIgnoreCase(modeSetting)) {             mode = JapaneseTokenizer.Mode.NORMAL.         } else if ("extended".equalsIgnoreCase(modeSetting)) {             mode = JapaneseTokenizer.Mode.EXTENDED.         }     }     return mode. }
false;public;0;10;;@Override public Tokenizer create() {     JapaneseTokenizer t = new JapaneseTokenizer(userDictionary, discartPunctuation, mode).     int nBestCost = this.nBestCost.     if (nBestExamples != null) {         nBestCost = Math.max(nBestCost, t.calcNBestCost(nBestExamples)).     }     t.setNBestCost(nBestCost).     return t. }
