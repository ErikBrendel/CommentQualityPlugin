# id;timestamp;commentText;codeText;commentWords;codeWords
AzureDiscoveryClusterFormationTests -> @BeforeClass     public static void startHttpd() throws Exception;1524684173;Creates mock EC2 endpoint providing the list of started nodes to the DescribeInstances API call;@BeforeClass_    public static void startHttpd() throws Exception {_        logDir = createTempDir()__        SSLContext sslContext = getSSLContext()__        httpsServer = MockHttpServer.createHttps(new InetSocketAddress(InetAddress.getLoopbackAddress().getHostAddress(), 0), 0)__        httpsServer.setHttpsConfigurator(new HttpsConfigurator(sslContext))__        httpsServer.createContext("/subscription/services/hostedservices/myservice", (s) -> {_            Headers headers = s.getResponseHeaders()__            headers.add("Content-Type", "text/xml_ charset=UTF-8")__            XMLOutputFactory xmlOutputFactory = XMLOutputFactory.newFactory()__            xmlOutputFactory.setProperty(XMLOutputFactory.IS_REPAIRING_NAMESPACES, true)__            StringWriter out = new StringWriter()__            XMLStreamWriter sw__            try {_                sw = xmlOutputFactory.createXMLStreamWriter(out)__                sw.writeStartDocument()___                String namespace = "http://schemas.microsoft.com/windowsazure"__                sw.setDefaultNamespace(namespace)__                sw.writeStartElement(XMLConstants.DEFAULT_NS_PREFIX, "HostedService", namespace)__                {_                    sw.writeStartElement("Deployments")__                    {_                        Path[] files = FileSystemUtils.files(logDir)__                        for (int i = 0_ i < files.length_ i++) {_                            Path resolve = files[i].resolve("transport.ports")__                            if (Files.exists(resolve)) {_                                List<String> addresses = Files.readAllLines(resolve)__                                Collections.shuffle(addresses, random())__                                String address = addresses.get(0)__                                int indexOfLastColon = address.lastIndexOf(':')__                                String host = address.substring(0, indexOfLastColon)__                                String port = address.substring(indexOfLastColon + 1)___                                sw.writeStartElement("Deployment")__                                {_                                    sw.writeStartElement("Name")__                                    sw.writeCharacters("mydeployment")__                                    sw.writeEndElement()___                                    sw.writeStartElement("DeploymentSlot")__                                    sw.writeCharacters(DeploymentSlot.Production.name())__                                    sw.writeEndElement()___                                    sw.writeStartElement("Status")__                                    sw.writeCharacters(DeploymentStatus.Running.name())__                                    sw.writeEndElement()___                                    sw.writeStartElement("RoleInstanceList")__                                    {_                                        sw.writeStartElement("RoleInstance")__                                        {_                                            sw.writeStartElement("RoleName")__                                            sw.writeCharacters(UUID.randomUUID().toString())__                                            sw.writeEndElement()___                                            sw.writeStartElement("IpAddress")__                                            sw.writeCharacters(host)__                                            sw.writeEndElement()___                                            sw.writeStartElement("InstanceEndpoints")__                                            {_                                                sw.writeStartElement("InstanceEndpoint")__                                                {_                                                    sw.writeStartElement("Name")__                                                    sw.writeCharacters("myendpoint")__                                                    sw.writeEndElement()___                                                    sw.writeStartElement("Vip")__                                                    sw.writeCharacters(host)__                                                    sw.writeEndElement()___                                                    sw.writeStartElement("PublicPort")__                                                    sw.writeCharacters(port)__                                                    sw.writeEndElement()__                                                }_                                                sw.writeEndElement()__                                            }_                                            sw.writeEndElement()__                                        }_                                        sw.writeEndElement()__                                    }_                                    sw.writeEndElement()__                                }_                                sw.writeEndElement()__                            }_                        }_                    }_                    sw.writeEndElement()__                }_                sw.writeEndElement()___                sw.writeEndDocument()__                sw.flush()___                final byte[] responseAsBytes = out.toString().getBytes(StandardCharsets.UTF_8)__                s.sendResponseHeaders(200, responseAsBytes.length)__                OutputStream responseBody = s.getResponseBody()__                responseBody.write(responseAsBytes)__                responseBody.close()__            } catch (XMLStreamException e) {_                Loggers.getLogger(AzureDiscoveryClusterFormationTests.class).error("Failed serializing XML", e)__                throw new RuntimeException(e)__            }_        })___        httpsServer.start()__    };creates,mock,ec2,endpoint,providing,the,list,of,started,nodes,to,the,describe,instances,api,call;before,class,public,static,void,start,httpd,throws,exception,log,dir,create,temp,dir,sslcontext,ssl,context,get,sslcontext,https,server,mock,http,server,create,https,new,inet,socket,address,inet,address,get,loopback,address,get,host,address,0,0,https,server,set,https,configurator,new,https,configurator,ssl,context,https,server,create,context,subscription,services,hostedservices,myservice,s,headers,headers,s,get,response,headers,headers,add,content,type,text,xml,charset,utf,8,xmloutput,factory,xml,output,factory,xmloutput,factory,new,factory,xml,output,factory,set,property,xmloutput,factory,true,string,writer,out,new,string,writer,xmlstream,writer,sw,try,sw,xml,output,factory,create,xmlstream,writer,out,sw,write,start,document,string,namespace,http,schemas,microsoft,com,windowsazure,sw,set,default,namespace,namespace,sw,write,start,element,xmlconstants,hosted,service,namespace,sw,write,start,element,deployments,path,files,file,system,utils,files,log,dir,for,int,i,0,i,files,length,i,path,resolve,files,i,resolve,transport,ports,if,files,exists,resolve,list,string,addresses,files,read,all,lines,resolve,collections,shuffle,addresses,random,string,address,addresses,get,0,int,index,of,last,colon,address,last,index,of,string,host,address,substring,0,index,of,last,colon,string,port,address,substring,index,of,last,colon,1,sw,write,start,element,deployment,sw,write,start,element,name,sw,write,characters,mydeployment,sw,write,end,element,sw,write,start,element,deployment,slot,sw,write,characters,deployment,slot,production,name,sw,write,end,element,sw,write,start,element,status,sw,write,characters,deployment,status,running,name,sw,write,end,element,sw,write,start,element,role,instance,list,sw,write,start,element,role,instance,sw,write,start,element,role,name,sw,write,characters,uuid,random,uuid,to,string,sw,write,end,element,sw,write,start,element,ip,address,sw,write,characters,host,sw,write,end,element,sw,write,start,element,instance,endpoints,sw,write,start,element,instance,endpoint,sw,write,start,element,name,sw,write,characters,myendpoint,sw,write,end,element,sw,write,start,element,vip,sw,write,characters,host,sw,write,end,element,sw,write,start,element,public,port,sw,write,characters,port,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,document,sw,flush,final,byte,response,as,bytes,out,to,string,get,bytes,standard,charsets,s,send,response,headers,200,response,as,bytes,length,output,stream,response,body,s,get,response,body,response,body,write,response,as,bytes,response,body,close,catch,xmlstream,exception,e,loggers,get,logger,azure,discovery,cluster,formation,tests,class,error,failed,serializing,xml,e,throw,new,runtime,exception,e,https,server,start
AzureDiscoveryClusterFormationTests -> @BeforeClass     public static void startHttpd() throws Exception;1531910483;Creates mock EC2 endpoint providing the list of started nodes to the DescribeInstances API call;@BeforeClass_    public static void startHttpd() throws Exception {_        logDir = createTempDir()__        SSLContext sslContext = getSSLContext()__        httpsServer = MockHttpServer.createHttps(new InetSocketAddress(InetAddress.getLoopbackAddress().getHostAddress(), 0), 0)__        httpsServer.setHttpsConfigurator(new HttpsConfigurator(sslContext))__        httpsServer.createContext("/subscription/services/hostedservices/myservice", (s) -> {_            Headers headers = s.getResponseHeaders()__            headers.add("Content-Type", "text/xml_ charset=UTF-8")__            XMLOutputFactory xmlOutputFactory = XMLOutputFactory.newFactory()__            xmlOutputFactory.setProperty(XMLOutputFactory.IS_REPAIRING_NAMESPACES, true)__            StringWriter out = new StringWriter()__            XMLStreamWriter sw__            try {_                sw = xmlOutputFactory.createXMLStreamWriter(out)__                sw.writeStartDocument()___                String namespace = "http://schemas.microsoft.com/windowsazure"__                sw.setDefaultNamespace(namespace)__                sw.writeStartElement(XMLConstants.DEFAULT_NS_PREFIX, "HostedService", namespace)__                {_                    sw.writeStartElement("Deployments")__                    {_                        Path[] files = FileSystemUtils.files(logDir)__                        for (int i = 0_ i < files.length_ i++) {_                            Path resolve = files[i].resolve("transport.ports")__                            if (Files.exists(resolve)) {_                                List<String> addresses = Files.readAllLines(resolve)__                                Collections.shuffle(addresses, random())__                                String address = addresses.get(0)__                                int indexOfLastColon = address.lastIndexOf(':')__                                String host = address.substring(0, indexOfLastColon)__                                String port = address.substring(indexOfLastColon + 1)___                                sw.writeStartElement("Deployment")__                                {_                                    sw.writeStartElement("Name")__                                    sw.writeCharacters("mydeployment")__                                    sw.writeEndElement()___                                    sw.writeStartElement("DeploymentSlot")__                                    sw.writeCharacters(DeploymentSlot.Production.name())__                                    sw.writeEndElement()___                                    sw.writeStartElement("Status")__                                    sw.writeCharacters(DeploymentStatus.Running.name())__                                    sw.writeEndElement()___                                    sw.writeStartElement("RoleInstanceList")__                                    {_                                        sw.writeStartElement("RoleInstance")__                                        {_                                            sw.writeStartElement("RoleName")__                                            sw.writeCharacters(UUID.randomUUID().toString())__                                            sw.writeEndElement()___                                            sw.writeStartElement("IpAddress")__                                            sw.writeCharacters(host)__                                            sw.writeEndElement()___                                            sw.writeStartElement("InstanceEndpoints")__                                            {_                                                sw.writeStartElement("InstanceEndpoint")__                                                {_                                                    sw.writeStartElement("Name")__                                                    sw.writeCharacters("myendpoint")__                                                    sw.writeEndElement()___                                                    sw.writeStartElement("Vip")__                                                    sw.writeCharacters(host)__                                                    sw.writeEndElement()___                                                    sw.writeStartElement("PublicPort")__                                                    sw.writeCharacters(port)__                                                    sw.writeEndElement()__                                                }_                                                sw.writeEndElement()__                                            }_                                            sw.writeEndElement()__                                        }_                                        sw.writeEndElement()__                                    }_                                    sw.writeEndElement()__                                }_                                sw.writeEndElement()__                            }_                        }_                    }_                    sw.writeEndElement()__                }_                sw.writeEndElement()___                sw.writeEndDocument()__                sw.flush()___                final byte[] responseAsBytes = out.toString().getBytes(StandardCharsets.UTF_8)__                s.sendResponseHeaders(200, responseAsBytes.length)__                OutputStream responseBody = s.getResponseBody()__                responseBody.write(responseAsBytes)__                responseBody.close()__            } catch (XMLStreamException e) {_                Loggers.getLogger(AzureDiscoveryClusterFormationTests.class).error("Failed serializing XML", e)__                throw new RuntimeException(e)__            }_        })___        httpsServer.start()__    };creates,mock,ec2,endpoint,providing,the,list,of,started,nodes,to,the,describe,instances,api,call;before,class,public,static,void,start,httpd,throws,exception,log,dir,create,temp,dir,sslcontext,ssl,context,get,sslcontext,https,server,mock,http,server,create,https,new,inet,socket,address,inet,address,get,loopback,address,get,host,address,0,0,https,server,set,https,configurator,new,https,configurator,ssl,context,https,server,create,context,subscription,services,hostedservices,myservice,s,headers,headers,s,get,response,headers,headers,add,content,type,text,xml,charset,utf,8,xmloutput,factory,xml,output,factory,xmloutput,factory,new,factory,xml,output,factory,set,property,xmloutput,factory,true,string,writer,out,new,string,writer,xmlstream,writer,sw,try,sw,xml,output,factory,create,xmlstream,writer,out,sw,write,start,document,string,namespace,http,schemas,microsoft,com,windowsazure,sw,set,default,namespace,namespace,sw,write,start,element,xmlconstants,hosted,service,namespace,sw,write,start,element,deployments,path,files,file,system,utils,files,log,dir,for,int,i,0,i,files,length,i,path,resolve,files,i,resolve,transport,ports,if,files,exists,resolve,list,string,addresses,files,read,all,lines,resolve,collections,shuffle,addresses,random,string,address,addresses,get,0,int,index,of,last,colon,address,last,index,of,string,host,address,substring,0,index,of,last,colon,string,port,address,substring,index,of,last,colon,1,sw,write,start,element,deployment,sw,write,start,element,name,sw,write,characters,mydeployment,sw,write,end,element,sw,write,start,element,deployment,slot,sw,write,characters,deployment,slot,production,name,sw,write,end,element,sw,write,start,element,status,sw,write,characters,deployment,status,running,name,sw,write,end,element,sw,write,start,element,role,instance,list,sw,write,start,element,role,instance,sw,write,start,element,role,name,sw,write,characters,uuid,random,uuid,to,string,sw,write,end,element,sw,write,start,element,ip,address,sw,write,characters,host,sw,write,end,element,sw,write,start,element,instance,endpoints,sw,write,start,element,instance,endpoint,sw,write,start,element,name,sw,write,characters,myendpoint,sw,write,end,element,sw,write,start,element,vip,sw,write,characters,host,sw,write,end,element,sw,write,start,element,public,port,sw,write,characters,port,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,document,sw,flush,final,byte,response,as,bytes,out,to,string,get,bytes,standard,charsets,s,send,response,headers,200,response,as,bytes,length,output,stream,response,body,s,get,response,body,response,body,write,response,as,bytes,response,body,close,catch,xmlstream,exception,e,loggers,get,logger,azure,discovery,cluster,formation,tests,class,error,failed,serializing,xml,e,throw,new,runtime,exception,e,https,server,start
AzureDiscoveryClusterFormationTests -> @BeforeClass     public static void startHttpd() throws Exception;1540847035;Creates mock EC2 endpoint providing the list of started nodes to the DescribeInstances API call;@BeforeClass_    public static void startHttpd() throws Exception {_        logDir = createTempDir()__        SSLContext sslContext = getSSLContext()__        httpsServer = MockHttpServer.createHttps(new InetSocketAddress(InetAddress.getLoopbackAddress().getHostAddress(), 0), 0)__        httpsServer.setHttpsConfigurator(new HttpsConfigurator(sslContext))__        httpsServer.createContext("/subscription/services/hostedservices/myservice", (s) -> {_            Headers headers = s.getResponseHeaders()__            headers.add("Content-Type", "text/xml_ charset=UTF-8")__            XMLOutputFactory xmlOutputFactory = XMLOutputFactory.newFactory()__            xmlOutputFactory.setProperty(XMLOutputFactory.IS_REPAIRING_NAMESPACES, true)__            StringWriter out = new StringWriter()__            XMLStreamWriter sw__            try {_                sw = xmlOutputFactory.createXMLStreamWriter(out)__                sw.writeStartDocument()___                String namespace = "http://schemas.microsoft.com/windowsazure"__                sw.setDefaultNamespace(namespace)__                sw.writeStartElement(XMLConstants.DEFAULT_NS_PREFIX, "HostedService", namespace)__                {_                    sw.writeStartElement("Deployments")__                    {_                        Path[] files = FileSystemUtils.files(logDir)__                        for (int i = 0_ i < files.length_ i++) {_                            Path resolve = files[i].resolve("transport.ports")__                            if (Files.exists(resolve)) {_                                List<String> addresses = Files.readAllLines(resolve)__                                Collections.shuffle(addresses, random())__                                String address = addresses.get(0)__                                int indexOfLastColon = address.lastIndexOf(':')__                                String host = address.substring(0, indexOfLastColon)__                                String port = address.substring(indexOfLastColon + 1)___                                sw.writeStartElement("Deployment")__                                {_                                    sw.writeStartElement("Name")__                                    sw.writeCharacters("mydeployment")__                                    sw.writeEndElement()___                                    sw.writeStartElement("DeploymentSlot")__                                    sw.writeCharacters(DeploymentSlot.Production.name())__                                    sw.writeEndElement()___                                    sw.writeStartElement("Status")__                                    sw.writeCharacters(DeploymentStatus.Running.name())__                                    sw.writeEndElement()___                                    sw.writeStartElement("RoleInstanceList")__                                    {_                                        sw.writeStartElement("RoleInstance")__                                        {_                                            sw.writeStartElement("RoleName")__                                            sw.writeCharacters(UUID.randomUUID().toString())__                                            sw.writeEndElement()___                                            sw.writeStartElement("IpAddress")__                                            sw.writeCharacters(host)__                                            sw.writeEndElement()___                                            sw.writeStartElement("InstanceEndpoints")__                                            {_                                                sw.writeStartElement("InstanceEndpoint")__                                                {_                                                    sw.writeStartElement("Name")__                                                    sw.writeCharacters("myendpoint")__                                                    sw.writeEndElement()___                                                    sw.writeStartElement("Vip")__                                                    sw.writeCharacters(host)__                                                    sw.writeEndElement()___                                                    sw.writeStartElement("PublicPort")__                                                    sw.writeCharacters(port)__                                                    sw.writeEndElement()__                                                }_                                                sw.writeEndElement()__                                            }_                                            sw.writeEndElement()__                                        }_                                        sw.writeEndElement()__                                    }_                                    sw.writeEndElement()__                                }_                                sw.writeEndElement()__                            }_                        }_                    }_                    sw.writeEndElement()__                }_                sw.writeEndElement()___                sw.writeEndDocument()__                sw.flush()___                final byte[] responseAsBytes = out.toString().getBytes(StandardCharsets.UTF_8)__                s.sendResponseHeaders(200, responseAsBytes.length)__                OutputStream responseBody = s.getResponseBody()__                responseBody.write(responseAsBytes)__                responseBody.close()__            } catch (XMLStreamException e) {_                LogManager.getLogger(AzureDiscoveryClusterFormationTests.class).error("Failed serializing XML", e)__                throw new RuntimeException(e)__            }_        })___        httpsServer.start()__    };creates,mock,ec2,endpoint,providing,the,list,of,started,nodes,to,the,describe,instances,api,call;before,class,public,static,void,start,httpd,throws,exception,log,dir,create,temp,dir,sslcontext,ssl,context,get,sslcontext,https,server,mock,http,server,create,https,new,inet,socket,address,inet,address,get,loopback,address,get,host,address,0,0,https,server,set,https,configurator,new,https,configurator,ssl,context,https,server,create,context,subscription,services,hostedservices,myservice,s,headers,headers,s,get,response,headers,headers,add,content,type,text,xml,charset,utf,8,xmloutput,factory,xml,output,factory,xmloutput,factory,new,factory,xml,output,factory,set,property,xmloutput,factory,true,string,writer,out,new,string,writer,xmlstream,writer,sw,try,sw,xml,output,factory,create,xmlstream,writer,out,sw,write,start,document,string,namespace,http,schemas,microsoft,com,windowsazure,sw,set,default,namespace,namespace,sw,write,start,element,xmlconstants,hosted,service,namespace,sw,write,start,element,deployments,path,files,file,system,utils,files,log,dir,for,int,i,0,i,files,length,i,path,resolve,files,i,resolve,transport,ports,if,files,exists,resolve,list,string,addresses,files,read,all,lines,resolve,collections,shuffle,addresses,random,string,address,addresses,get,0,int,index,of,last,colon,address,last,index,of,string,host,address,substring,0,index,of,last,colon,string,port,address,substring,index,of,last,colon,1,sw,write,start,element,deployment,sw,write,start,element,name,sw,write,characters,mydeployment,sw,write,end,element,sw,write,start,element,deployment,slot,sw,write,characters,deployment,slot,production,name,sw,write,end,element,sw,write,start,element,status,sw,write,characters,deployment,status,running,name,sw,write,end,element,sw,write,start,element,role,instance,list,sw,write,start,element,role,instance,sw,write,start,element,role,name,sw,write,characters,uuid,random,uuid,to,string,sw,write,end,element,sw,write,start,element,ip,address,sw,write,characters,host,sw,write,end,element,sw,write,start,element,instance,endpoints,sw,write,start,element,instance,endpoint,sw,write,start,element,name,sw,write,characters,myendpoint,sw,write,end,element,sw,write,start,element,vip,sw,write,characters,host,sw,write,end,element,sw,write,start,element,public,port,sw,write,characters,port,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,document,sw,flush,final,byte,response,as,bytes,out,to,string,get,bytes,standard,charsets,s,send,response,headers,200,response,as,bytes,length,output,stream,response,body,s,get,response,body,response,body,write,response,as,bytes,response,body,close,catch,xmlstream,exception,e,log,manager,get,logger,azure,discovery,cluster,formation,tests,class,error,failed,serializing,xml,e,throw,new,runtime,exception,e,https,server,start
AzureDiscoveryClusterFormationTests -> @BeforeClass     public static void startHttpd() throws Exception;1544823664;Creates mock EC2 endpoint providing the list of started nodes to the DescribeInstances API call;@BeforeClass_    public static void startHttpd() throws Exception {_        logDir = createTempDir()__        SSLContext sslContext = getSSLContext()__        httpsServer = MockHttpServer.createHttps(new InetSocketAddress(InetAddress.getLoopbackAddress().getHostAddress(), 0), 0)__        httpsServer.setHttpsConfigurator(new HttpsConfigurator(sslContext))__        httpsServer.createContext("/subscription/services/hostedservices/myservice", (s) -> {_            Headers headers = s.getResponseHeaders()__            headers.add("Content-Type", "text/xml_ charset=UTF-8")__            XMLOutputFactory xmlOutputFactory = XMLOutputFactory.newFactory()__            xmlOutputFactory.setProperty(XMLOutputFactory.IS_REPAIRING_NAMESPACES, true)__            StringWriter out = new StringWriter()__            XMLStreamWriter sw__            try {_                sw = xmlOutputFactory.createXMLStreamWriter(out)__                sw.writeStartDocument()___                String namespace = "http://schemas.microsoft.com/windowsazure"__                sw.setDefaultNamespace(namespace)__                sw.writeStartElement(XMLConstants.DEFAULT_NS_PREFIX, "HostedService", namespace)__                {_                    sw.writeStartElement("Deployments")__                    {_                        Path[] files = FileSystemUtils.files(logDir)__                        for (int i = 0_ i < files.length_ i++) {_                            Path resolve = files[i].resolve("transport.ports")__                            if (Files.exists(resolve)) {_                                List<String> addresses = Files.readAllLines(resolve)__                                Collections.shuffle(addresses, random())__                                String address = addresses.get(0)__                                int indexOfLastColon = address.lastIndexOf(':')__                                String host = address.substring(0, indexOfLastColon)__                                String port = address.substring(indexOfLastColon + 1)___                                sw.writeStartElement("Deployment")__                                {_                                    sw.writeStartElement("Name")__                                    sw.writeCharacters("mydeployment")__                                    sw.writeEndElement()___                                    sw.writeStartElement("DeploymentSlot")__                                    sw.writeCharacters(DeploymentSlot.Production.name())__                                    sw.writeEndElement()___                                    sw.writeStartElement("Status")__                                    sw.writeCharacters(DeploymentStatus.Running.name())__                                    sw.writeEndElement()___                                    sw.writeStartElement("RoleInstanceList")__                                    {_                                        sw.writeStartElement("RoleInstance")__                                        {_                                            sw.writeStartElement("RoleName")__                                            sw.writeCharacters(UUID.randomUUID().toString())__                                            sw.writeEndElement()___                                            sw.writeStartElement("IpAddress")__                                            sw.writeCharacters(host)__                                            sw.writeEndElement()___                                            sw.writeStartElement("InstanceEndpoints")__                                            {_                                                sw.writeStartElement("InstanceEndpoint")__                                                {_                                                    sw.writeStartElement("Name")__                                                    sw.writeCharacters("myendpoint")__                                                    sw.writeEndElement()___                                                    sw.writeStartElement("Vip")__                                                    sw.writeCharacters(host)__                                                    sw.writeEndElement()___                                                    sw.writeStartElement("PublicPort")__                                                    sw.writeCharacters(port)__                                                    sw.writeEndElement()__                                                }_                                                sw.writeEndElement()__                                            }_                                            sw.writeEndElement()__                                        }_                                        sw.writeEndElement()__                                    }_                                    sw.writeEndElement()__                                }_                                sw.writeEndElement()__                            }_                        }_                    }_                    sw.writeEndElement()__                }_                sw.writeEndElement()___                sw.writeEndDocument()__                sw.flush()___                final byte[] responseAsBytes = out.toString().getBytes(StandardCharsets.UTF_8)__                s.sendResponseHeaders(200, responseAsBytes.length)__                OutputStream responseBody = s.getResponseBody()__                responseBody.write(responseAsBytes)__                responseBody.close()__            } catch (XMLStreamException e) {_                LogManager.getLogger(AzureDiscoveryClusterFormationTests.class).error("Failed serializing XML", e)__                throw new RuntimeException(e)__            }_        })___        httpsServer.start()__    };creates,mock,ec2,endpoint,providing,the,list,of,started,nodes,to,the,describe,instances,api,call;before,class,public,static,void,start,httpd,throws,exception,log,dir,create,temp,dir,sslcontext,ssl,context,get,sslcontext,https,server,mock,http,server,create,https,new,inet,socket,address,inet,address,get,loopback,address,get,host,address,0,0,https,server,set,https,configurator,new,https,configurator,ssl,context,https,server,create,context,subscription,services,hostedservices,myservice,s,headers,headers,s,get,response,headers,headers,add,content,type,text,xml,charset,utf,8,xmloutput,factory,xml,output,factory,xmloutput,factory,new,factory,xml,output,factory,set,property,xmloutput,factory,true,string,writer,out,new,string,writer,xmlstream,writer,sw,try,sw,xml,output,factory,create,xmlstream,writer,out,sw,write,start,document,string,namespace,http,schemas,microsoft,com,windowsazure,sw,set,default,namespace,namespace,sw,write,start,element,xmlconstants,hosted,service,namespace,sw,write,start,element,deployments,path,files,file,system,utils,files,log,dir,for,int,i,0,i,files,length,i,path,resolve,files,i,resolve,transport,ports,if,files,exists,resolve,list,string,addresses,files,read,all,lines,resolve,collections,shuffle,addresses,random,string,address,addresses,get,0,int,index,of,last,colon,address,last,index,of,string,host,address,substring,0,index,of,last,colon,string,port,address,substring,index,of,last,colon,1,sw,write,start,element,deployment,sw,write,start,element,name,sw,write,characters,mydeployment,sw,write,end,element,sw,write,start,element,deployment,slot,sw,write,characters,deployment,slot,production,name,sw,write,end,element,sw,write,start,element,status,sw,write,characters,deployment,status,running,name,sw,write,end,element,sw,write,start,element,role,instance,list,sw,write,start,element,role,instance,sw,write,start,element,role,name,sw,write,characters,uuid,random,uuid,to,string,sw,write,end,element,sw,write,start,element,ip,address,sw,write,characters,host,sw,write,end,element,sw,write,start,element,instance,endpoints,sw,write,start,element,instance,endpoint,sw,write,start,element,name,sw,write,characters,myendpoint,sw,write,end,element,sw,write,start,element,vip,sw,write,characters,host,sw,write,end,element,sw,write,start,element,public,port,sw,write,characters,port,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,document,sw,flush,final,byte,response,as,bytes,out,to,string,get,bytes,standard,charsets,s,send,response,headers,200,response,as,bytes,length,output,stream,response,body,s,get,response,body,response,body,write,response,as,bytes,response,body,close,catch,xmlstream,exception,e,log,manager,get,logger,azure,discovery,cluster,formation,tests,class,error,failed,serializing,xml,e,throw,new,runtime,exception,e,https,server,start
AzureDiscoveryClusterFormationTests -> @BeforeClass     public static void startHttpd() throws Exception;1549356412;Creates mock EC2 endpoint providing the list of started nodes to the DescribeInstances API call;@BeforeClass_    public static void startHttpd() throws Exception {_        logDir = createTempDir()__        SSLContext sslContext = getSSLContext()__        httpsServer = MockHttpServer.createHttps(new InetSocketAddress(InetAddress.getLoopbackAddress().getHostAddress(), 0), 0)__        httpsServer.setHttpsConfigurator(new HttpsConfigurator(sslContext))__        httpsServer.createContext("/subscription/services/hostedservices/myservice", (s) -> {_            Headers headers = s.getResponseHeaders()__            headers.add("Content-Type", "text/xml_ charset=UTF-8")__            XMLOutputFactory xmlOutputFactory = XMLOutputFactory.newFactory()__            xmlOutputFactory.setProperty(XMLOutputFactory.IS_REPAIRING_NAMESPACES, true)__            StringWriter out = new StringWriter()__            XMLStreamWriter sw__            try {_                sw = xmlOutputFactory.createXMLStreamWriter(out)__                sw.writeStartDocument()___                String namespace = "http://schemas.microsoft.com/windowsazure"__                sw.setDefaultNamespace(namespace)__                sw.writeStartElement(XMLConstants.DEFAULT_NS_PREFIX, "HostedService", namespace)__                {_                    sw.writeStartElement("Deployments")__                    {_                        Path[] files = FileSystemUtils.files(logDir)__                        for (int i = 0_ i < files.length_ i++) {_                            Path resolve = files[i].resolve("transport.ports")__                            if (Files.exists(resolve)) {_                                List<String> addresses = Files.readAllLines(resolve)__                                Collections.shuffle(addresses, random())__                                String address = addresses.get(0)__                                int indexOfLastColon = address.lastIndexOf(':')__                                String host = address.substring(0, indexOfLastColon)__                                String port = address.substring(indexOfLastColon + 1)___                                sw.writeStartElement("Deployment")__                                {_                                    sw.writeStartElement("Name")__                                    sw.writeCharacters("mydeployment")__                                    sw.writeEndElement()___                                    sw.writeStartElement("DeploymentSlot")__                                    sw.writeCharacters(DeploymentSlot.Production.name())__                                    sw.writeEndElement()___                                    sw.writeStartElement("Status")__                                    sw.writeCharacters(DeploymentStatus.Running.name())__                                    sw.writeEndElement()___                                    sw.writeStartElement("RoleInstanceList")__                                    {_                                        sw.writeStartElement("RoleInstance")__                                        {_                                            sw.writeStartElement("RoleName")__                                            sw.writeCharacters(UUID.randomUUID().toString())__                                            sw.writeEndElement()___                                            sw.writeStartElement("IpAddress")__                                            sw.writeCharacters(host)__                                            sw.writeEndElement()___                                            sw.writeStartElement("InstanceEndpoints")__                                            {_                                                sw.writeStartElement("InstanceEndpoint")__                                                {_                                                    sw.writeStartElement("Name")__                                                    sw.writeCharacters("myendpoint")__                                                    sw.writeEndElement()___                                                    sw.writeStartElement("Vip")__                                                    sw.writeCharacters(host)__                                                    sw.writeEndElement()___                                                    sw.writeStartElement("PublicPort")__                                                    sw.writeCharacters(port)__                                                    sw.writeEndElement()__                                                }_                                                sw.writeEndElement()__                                            }_                                            sw.writeEndElement()__                                        }_                                        sw.writeEndElement()__                                    }_                                    sw.writeEndElement()__                                }_                                sw.writeEndElement()__                            }_                        }_                    }_                    sw.writeEndElement()__                }_                sw.writeEndElement()___                sw.writeEndDocument()__                sw.flush()___                final byte[] responseAsBytes = out.toString().getBytes(StandardCharsets.UTF_8)__                s.sendResponseHeaders(200, responseAsBytes.length)__                OutputStream responseBody = s.getResponseBody()__                responseBody.write(responseAsBytes)__                responseBody.close()__            } catch (XMLStreamException e) {_                LogManager.getLogger(AzureDiscoveryClusterFormationTests.class).error("Failed serializing XML", e)__                throw new RuntimeException(e)__            }_        })___        httpsServer.start()__    };creates,mock,ec2,endpoint,providing,the,list,of,started,nodes,to,the,describe,instances,api,call;before,class,public,static,void,start,httpd,throws,exception,log,dir,create,temp,dir,sslcontext,ssl,context,get,sslcontext,https,server,mock,http,server,create,https,new,inet,socket,address,inet,address,get,loopback,address,get,host,address,0,0,https,server,set,https,configurator,new,https,configurator,ssl,context,https,server,create,context,subscription,services,hostedservices,myservice,s,headers,headers,s,get,response,headers,headers,add,content,type,text,xml,charset,utf,8,xmloutput,factory,xml,output,factory,xmloutput,factory,new,factory,xml,output,factory,set,property,xmloutput,factory,true,string,writer,out,new,string,writer,xmlstream,writer,sw,try,sw,xml,output,factory,create,xmlstream,writer,out,sw,write,start,document,string,namespace,http,schemas,microsoft,com,windowsazure,sw,set,default,namespace,namespace,sw,write,start,element,xmlconstants,hosted,service,namespace,sw,write,start,element,deployments,path,files,file,system,utils,files,log,dir,for,int,i,0,i,files,length,i,path,resolve,files,i,resolve,transport,ports,if,files,exists,resolve,list,string,addresses,files,read,all,lines,resolve,collections,shuffle,addresses,random,string,address,addresses,get,0,int,index,of,last,colon,address,last,index,of,string,host,address,substring,0,index,of,last,colon,string,port,address,substring,index,of,last,colon,1,sw,write,start,element,deployment,sw,write,start,element,name,sw,write,characters,mydeployment,sw,write,end,element,sw,write,start,element,deployment,slot,sw,write,characters,deployment,slot,production,name,sw,write,end,element,sw,write,start,element,status,sw,write,characters,deployment,status,running,name,sw,write,end,element,sw,write,start,element,role,instance,list,sw,write,start,element,role,instance,sw,write,start,element,role,name,sw,write,characters,uuid,random,uuid,to,string,sw,write,end,element,sw,write,start,element,ip,address,sw,write,characters,host,sw,write,end,element,sw,write,start,element,instance,endpoints,sw,write,start,element,instance,endpoint,sw,write,start,element,name,sw,write,characters,myendpoint,sw,write,end,element,sw,write,start,element,vip,sw,write,characters,host,sw,write,end,element,sw,write,start,element,public,port,sw,write,characters,port,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,document,sw,flush,final,byte,response,as,bytes,out,to,string,get,bytes,standard,charsets,s,send,response,headers,200,response,as,bytes,length,output,stream,response,body,s,get,response,body,response,body,write,response,as,bytes,response,body,close,catch,xmlstream,exception,e,log,manager,get,logger,azure,discovery,cluster,formation,tests,class,error,failed,serializing,xml,e,throw,new,runtime,exception,e,https,server,start
AzureDiscoveryClusterFormationTests -> @BeforeClass     public static void startHttpd() throws Exception;1549452878;Creates mock EC2 endpoint providing the list of started nodes to the DescribeInstances API call;@BeforeClass_    public static void startHttpd() throws Exception {_        logDir = createTempDir()__        SSLContext sslContext = getSSLContext()__        httpsServer = MockHttpServer.createHttps(new InetSocketAddress(InetAddress.getLoopbackAddress().getHostAddress(), 0), 0)__        httpsServer.setHttpsConfigurator(new HttpsConfigurator(sslContext))__        httpsServer.createContext("/subscription/services/hostedservices/myservice", (s) -> {_            Headers headers = s.getResponseHeaders()__            headers.add("Content-Type", "text/xml_ charset=UTF-8")__            XMLOutputFactory xmlOutputFactory = XMLOutputFactory.newFactory()__            xmlOutputFactory.setProperty(XMLOutputFactory.IS_REPAIRING_NAMESPACES, true)__            StringWriter out = new StringWriter()__            XMLStreamWriter sw__            try {_                sw = xmlOutputFactory.createXMLStreamWriter(out)__                sw.writeStartDocument()___                String namespace = "http://schemas.microsoft.com/windowsazure"__                sw.setDefaultNamespace(namespace)__                sw.writeStartElement(XMLConstants.DEFAULT_NS_PREFIX, "HostedService", namespace)__                {_                    sw.writeStartElement("Deployments")__                    {_                        Path[] files = FileSystemUtils.files(logDir)__                        for (int i = 0_ i < files.length_ i++) {_                            Path resolve = files[i].resolve("transport.ports")__                            if (Files.exists(resolve)) {_                                List<String> addresses = Files.readAllLines(resolve)__                                Collections.shuffle(addresses, random())__                                String address = addresses.get(0)__                                int indexOfLastColon = address.lastIndexOf(':')__                                String host = address.substring(0, indexOfLastColon)__                                String port = address.substring(indexOfLastColon + 1)___                                sw.writeStartElement("Deployment")__                                {_                                    sw.writeStartElement("Name")__                                    sw.writeCharacters("mydeployment")__                                    sw.writeEndElement()___                                    sw.writeStartElement("DeploymentSlot")__                                    sw.writeCharacters(DeploymentSlot.Production.name())__                                    sw.writeEndElement()___                                    sw.writeStartElement("Status")__                                    sw.writeCharacters(DeploymentStatus.Running.name())__                                    sw.writeEndElement()___                                    sw.writeStartElement("RoleInstanceList")__                                    {_                                        sw.writeStartElement("RoleInstance")__                                        {_                                            sw.writeStartElement("RoleName")__                                            sw.writeCharacters(UUID.randomUUID().toString())__                                            sw.writeEndElement()___                                            sw.writeStartElement("IpAddress")__                                            sw.writeCharacters(host)__                                            sw.writeEndElement()___                                            sw.writeStartElement("InstanceEndpoints")__                                            {_                                                sw.writeStartElement("InstanceEndpoint")__                                                {_                                                    sw.writeStartElement("Name")__                                                    sw.writeCharacters("myendpoint")__                                                    sw.writeEndElement()___                                                    sw.writeStartElement("Vip")__                                                    sw.writeCharacters(host)__                                                    sw.writeEndElement()___                                                    sw.writeStartElement("PublicPort")__                                                    sw.writeCharacters(port)__                                                    sw.writeEndElement()__                                                }_                                                sw.writeEndElement()__                                            }_                                            sw.writeEndElement()__                                        }_                                        sw.writeEndElement()__                                    }_                                    sw.writeEndElement()__                                }_                                sw.writeEndElement()__                            }_                        }_                    }_                    sw.writeEndElement()__                }_                sw.writeEndElement()___                sw.writeEndDocument()__                sw.flush()___                final byte[] responseAsBytes = out.toString().getBytes(StandardCharsets.UTF_8)__                s.sendResponseHeaders(200, responseAsBytes.length)__                OutputStream responseBody = s.getResponseBody()__                responseBody.write(responseAsBytes)__                responseBody.close()__            } catch (XMLStreamException e) {_                LogManager.getLogger(AzureDiscoveryClusterFormationTests.class).error("Failed serializing XML", e)__                throw new RuntimeException(e)__            }_        })___        httpsServer.start()__    };creates,mock,ec2,endpoint,providing,the,list,of,started,nodes,to,the,describe,instances,api,call;before,class,public,static,void,start,httpd,throws,exception,log,dir,create,temp,dir,sslcontext,ssl,context,get,sslcontext,https,server,mock,http,server,create,https,new,inet,socket,address,inet,address,get,loopback,address,get,host,address,0,0,https,server,set,https,configurator,new,https,configurator,ssl,context,https,server,create,context,subscription,services,hostedservices,myservice,s,headers,headers,s,get,response,headers,headers,add,content,type,text,xml,charset,utf,8,xmloutput,factory,xml,output,factory,xmloutput,factory,new,factory,xml,output,factory,set,property,xmloutput,factory,true,string,writer,out,new,string,writer,xmlstream,writer,sw,try,sw,xml,output,factory,create,xmlstream,writer,out,sw,write,start,document,string,namespace,http,schemas,microsoft,com,windowsazure,sw,set,default,namespace,namespace,sw,write,start,element,xmlconstants,hosted,service,namespace,sw,write,start,element,deployments,path,files,file,system,utils,files,log,dir,for,int,i,0,i,files,length,i,path,resolve,files,i,resolve,transport,ports,if,files,exists,resolve,list,string,addresses,files,read,all,lines,resolve,collections,shuffle,addresses,random,string,address,addresses,get,0,int,index,of,last,colon,address,last,index,of,string,host,address,substring,0,index,of,last,colon,string,port,address,substring,index,of,last,colon,1,sw,write,start,element,deployment,sw,write,start,element,name,sw,write,characters,mydeployment,sw,write,end,element,sw,write,start,element,deployment,slot,sw,write,characters,deployment,slot,production,name,sw,write,end,element,sw,write,start,element,status,sw,write,characters,deployment,status,running,name,sw,write,end,element,sw,write,start,element,role,instance,list,sw,write,start,element,role,instance,sw,write,start,element,role,name,sw,write,characters,uuid,random,uuid,to,string,sw,write,end,element,sw,write,start,element,ip,address,sw,write,characters,host,sw,write,end,element,sw,write,start,element,instance,endpoints,sw,write,start,element,instance,endpoint,sw,write,start,element,name,sw,write,characters,myendpoint,sw,write,end,element,sw,write,start,element,vip,sw,write,characters,host,sw,write,end,element,sw,write,start,element,public,port,sw,write,characters,port,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,element,sw,write,end,document,sw,flush,final,byte,response,as,bytes,out,to,string,get,bytes,standard,charsets,s,send,response,headers,200,response,as,bytes,length,output,stream,response,body,s,get,response,body,response,body,write,response,as,bytes,response,body,close,catch,xmlstream,exception,e,log,manager,get,logger,azure,discovery,cluster,formation,tests,class,error,failed,serializing,xml,e,throw,new,runtime,exception,e,https,server,start
