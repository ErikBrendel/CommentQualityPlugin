# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractAzureComputeServiceTestCase -> protected void registerAzureNode(final String nodeName);1524684173;Register an existing node as a Azure node, exposing its address and details htrough__@param nodeName the name of the node;protected void registerAzureNode(final String nodeName) {_        TransportService transportService = internalCluster().getInstance(TransportService.class, nodeName)__        assertNotNull(transportService)__        DiscoveryNode discoveryNode = transportService.getLocalNode()__        assertNotNull(discoveryNode)__        if (nodes.put(discoveryNode.getName(), discoveryNode) != null) {_            throw new IllegalArgumentException("Node [" + discoveryNode.getName() + "] cannot be registered twice in Azure")__        }_    };register,an,existing,node,as,a,azure,node,exposing,its,address,and,details,htrough,param,node,name,the,name,of,the,node;protected,void,register,azure,node,final,string,node,name,transport,service,transport,service,internal,cluster,get,instance,transport,service,class,node,name,assert,not,null,transport,service,discovery,node,discovery,node,transport,service,get,local,node,assert,not,null,discovery,node,if,nodes,put,discovery,node,get,name,discovery,node,null,throw,new,illegal,argument,exception,node,discovery,node,get,name,cannot,be,registered,twice,in,azure
AbstractAzureComputeServiceTestCase -> protected void registerAzureNode(final String nodeName);1544436057;Register an existing node as a Azure node, exposing its address and details htrough__@param nodeName the name of the node;protected void registerAzureNode(final String nodeName) {_        TransportService transportService = internalCluster().getInstance(TransportService.class, nodeName)__        assertNotNull(transportService)__        DiscoveryNode discoveryNode = transportService.getLocalNode()__        assertNotNull(discoveryNode)__        if (nodes.put(discoveryNode.getName(), discoveryNode) != null) {_            throw new IllegalArgumentException("Node [" + discoveryNode.getName() + "] cannot be registered twice in Azure")__        }_    };register,an,existing,node,as,a,azure,node,exposing,its,address,and,details,htrough,param,node,name,the,name,of,the,node;protected,void,register,azure,node,final,string,node,name,transport,service,transport,service,internal,cluster,get,instance,transport,service,class,node,name,assert,not,null,transport,service,discovery,node,discovery,node,transport,service,get,local,node,assert,not,null,discovery,node,if,nodes,put,discovery,node,get,name,discovery,node,null,throw,new,illegal,argument,exception,node,discovery,node,get,name,cannot,be,registered,twice,in,azure
AbstractAzureComputeServiceTestCase -> protected void registerAzureNode(final String nodeName);1549270328;Register an existing node as a Azure node, exposing its address and details htrough__@param nodeName the name of the node;protected void registerAzureNode(final String nodeName) {_        TransportService transportService = internalCluster().getInstance(TransportService.class, nodeName)__        assertNotNull(transportService)__        DiscoveryNode discoveryNode = transportService.getLocalNode()__        assertNotNull(discoveryNode)__        if (nodes.put(discoveryNode.getName(), discoveryNode) != null) {_            throw new IllegalArgumentException("Node [" + discoveryNode.getName() + "] cannot be registered twice in Azure")__        }_    };register,an,existing,node,as,a,azure,node,exposing,its,address,and,details,htrough,param,node,name,the,name,of,the,node;protected,void,register,azure,node,final,string,node,name,transport,service,transport,service,internal,cluster,get,instance,transport,service,class,node,name,assert,not,null,transport,service,discovery,node,discovery,node,transport,service,get,local,node,assert,not,null,discovery,node,if,nodes,put,discovery,node,get,name,discovery,node,null,throw,new,illegal,argument,exception,node,discovery,node,get,name,cannot,be,registered,twice,in,azure
AbstractAzureComputeServiceTestCase -> protected void registerAzureNode(final String nodeName);1549356412;Register an existing node as a Azure node, exposing its address and details htrough__@param nodeName the name of the node;protected void registerAzureNode(final String nodeName) {_        TransportService transportService = internalCluster().getInstance(TransportService.class, nodeName)__        assertNotNull(transportService)__        DiscoveryNode discoveryNode = transportService.getLocalNode()__        assertNotNull(discoveryNode)__        if (nodes.put(discoveryNode.getName(), discoveryNode) != null) {_            throw new IllegalArgumentException("Node [" + discoveryNode.getName() + "] cannot be registered twice in Azure")__        }_    };register,an,existing,node,as,a,azure,node,exposing,its,address,and,details,htrough,param,node,name,the,name,of,the,node;protected,void,register,azure,node,final,string,node,name,transport,service,transport,service,internal,cluster,get,instance,transport,service,class,node,name,assert,not,null,transport,service,discovery,node,discovery,node,transport,service,get,local,node,assert,not,null,discovery,node,if,nodes,put,discovery,node,get,name,discovery,node,null,throw,new,illegal,argument,exception,node,discovery,node,get,name,cannot,be,registered,twice,in,azure
AbstractAzureComputeServiceTestCase -> protected void registerAzureNode(final String nodeName);1549452878;Register an existing node as a Azure node, exposing its address and details htrough__@param nodeName the name of the node;protected void registerAzureNode(final String nodeName) {_        TransportService transportService = internalCluster().getInstance(TransportService.class, nodeName)__        assertNotNull(transportService)__        DiscoveryNode discoveryNode = transportService.getLocalNode()__        assertNotNull(discoveryNode)__        if (nodes.put(discoveryNode.getName(), discoveryNode) != null) {_            throw new IllegalArgumentException("Node [" + discoveryNode.getName() + "] cannot be registered twice in Azure")__        }_    };register,an,existing,node,as,a,azure,node,exposing,its,address,and,details,htrough,param,node,name,the,name,of,the,node;protected,void,register,azure,node,final,string,node,name,transport,service,transport,service,internal,cluster,get,instance,transport,service,class,node,name,assert,not,null,transport,service,discovery,node,discovery,node,transport,service,get,local,node,assert,not,null,discovery,node,if,nodes,put,discovery,node,get,name,discovery,node,null,throw,new,illegal,argument,exception,node,discovery,node,get,name,cannot,be,registered,twice,in,azure
AbstractAzureComputeServiceTestCase -> TestPlugin -> @Override         protected AzureUnicastHostsProvider createUnicastHostsProvider(final Settings settings,                                                                        final AzureComputeService azureComputeService,                                                                        final TransportService transportService,                                                                        final NetworkService networkService);1524684173;Defines a {@link AzureUnicastHostsProvider} for testing purpose that is able to resolve_network addresses for Azure instances running on the same host but different ports.;@Override_        protected AzureUnicastHostsProvider createUnicastHostsProvider(final Settings settings,_                                                                       final AzureComputeService azureComputeService,_                                                                       final TransportService transportService,_                                                                       final NetworkService networkService) {_            return new AzureUnicastHostsProvider(settings, azureComputeService, transportService, networkService) {_                @Override_                protected String resolveInstanceAddress(final HostType hostType, final RoleInstance instance) {_                    if (hostType == HostType.PRIVATE_IP) {_                        DiscoveryNode discoveryNode = nodes.get(instance.getInstanceName())__                        if (discoveryNode != null) {_                            _                            return NetworkAddress.format(discoveryNode.getAddress().address())__                        }_                    }_                    return super.resolveInstanceAddress(hostType, instance)__                }_            }__        };defines,a,link,azure,unicast,hosts,provider,for,testing,purpose,that,is,able,to,resolve,network,addresses,for,azure,instances,running,on,the,same,host,but,different,ports;override,protected,azure,unicast,hosts,provider,create,unicast,hosts,provider,final,settings,settings,final,azure,compute,service,azure,compute,service,final,transport,service,transport,service,final,network,service,network,service,return,new,azure,unicast,hosts,provider,settings,azure,compute,service,transport,service,network,service,override,protected,string,resolve,instance,address,final,host,type,host,type,final,role,instance,instance,if,host,type,host,type,discovery,node,discovery,node,nodes,get,instance,get,instance,name,if,discovery,node,null,return,network,address,format,discovery,node,get,address,address,return,super,resolve,instance,address,host,type,instance
AbstractAzureComputeServiceTestCase -> TestPlugin -> @Override         protected AzureUnicastHostsProvider createUnicastHostsProvider(final Settings settings,                                                                        final AzureComputeService azureComputeService,                                                                        final TransportService transportService,                                                                        final NetworkService networkService);1544436057;Defines a {@link AzureUnicastHostsProvider} for testing purpose that is able to resolve_network addresses for Azure instances running on the same host but different ports.;@Override_        protected AzureUnicastHostsProvider createUnicastHostsProvider(final Settings settings,_                                                                       final AzureComputeService azureComputeService,_                                                                       final TransportService transportService,_                                                                       final NetworkService networkService) {_            return new AzureUnicastHostsProvider(settings, azureComputeService, transportService, networkService) {_                @Override_                protected String resolveInstanceAddress(final HostType hostType, final RoleInstance instance) {_                    if (hostType == HostType.PRIVATE_IP) {_                        DiscoveryNode discoveryNode = nodes.get(instance.getInstanceName())__                        if (discoveryNode != null) {_                            _                            return NetworkAddress.format(discoveryNode.getAddress().address())__                        }_                    }_                    return super.resolveInstanceAddress(hostType, instance)__                }_            }__        };defines,a,link,azure,unicast,hosts,provider,for,testing,purpose,that,is,able,to,resolve,network,addresses,for,azure,instances,running,on,the,same,host,but,different,ports;override,protected,azure,unicast,hosts,provider,create,unicast,hosts,provider,final,settings,settings,final,azure,compute,service,azure,compute,service,final,transport,service,transport,service,final,network,service,network,service,return,new,azure,unicast,hosts,provider,settings,azure,compute,service,transport,service,network,service,override,protected,string,resolve,instance,address,final,host,type,host,type,final,role,instance,instance,if,host,type,host,type,discovery,node,discovery,node,nodes,get,instance,get,instance,name,if,discovery,node,null,return,network,address,format,discovery,node,get,address,address,return,super,resolve,instance,address,host,type,instance
AbstractAzureComputeServiceTestCase -> TestPlugin -> @Override         protected AzureUnicastHostsProvider createUnicastHostsProvider(final Settings settings,                                                                        final AzureComputeService azureComputeService,                                                                        final TransportService transportService,                                                                        final NetworkService networkService);1549270328;Defines a {@link AzureUnicastHostsProvider} for testing purpose that is able to resolve_network addresses for Azure instances running on the same host but different ports.;@Override_        protected AzureUnicastHostsProvider createUnicastHostsProvider(final Settings settings,_                                                                       final AzureComputeService azureComputeService,_                                                                       final TransportService transportService,_                                                                       final NetworkService networkService) {_            return new AzureUnicastHostsProvider(settings, azureComputeService, transportService, networkService) {_                @Override_                protected String resolveInstanceAddress(final HostType hostType, final RoleInstance instance) {_                    if (hostType == HostType.PRIVATE_IP) {_                        DiscoveryNode discoveryNode = nodes.get(instance.getInstanceName())__                        if (discoveryNode != null) {_                            _                            return NetworkAddress.format(discoveryNode.getAddress().address())__                        }_                    }_                    return super.resolveInstanceAddress(hostType, instance)__                }_            }__        };defines,a,link,azure,unicast,hosts,provider,for,testing,purpose,that,is,able,to,resolve,network,addresses,for,azure,instances,running,on,the,same,host,but,different,ports;override,protected,azure,unicast,hosts,provider,create,unicast,hosts,provider,final,settings,settings,final,azure,compute,service,azure,compute,service,final,transport,service,transport,service,final,network,service,network,service,return,new,azure,unicast,hosts,provider,settings,azure,compute,service,transport,service,network,service,override,protected,string,resolve,instance,address,final,host,type,host,type,final,role,instance,instance,if,host,type,host,type,discovery,node,discovery,node,nodes,get,instance,get,instance,name,if,discovery,node,null,return,network,address,format,discovery,node,get,address,address,return,super,resolve,instance,address,host,type,instance
AbstractAzureComputeServiceTestCase -> TestPlugin -> @Override         protected AzureUnicastHostsProvider createUnicastHostsProvider(final Settings settings,                                                                        final AzureComputeService azureComputeService,                                                                        final TransportService transportService,                                                                        final NetworkService networkService);1549356412;Defines a {@link AzureUnicastHostsProvider} for testing purpose that is able to resolve_network addresses for Azure instances running on the same host but different ports.;@Override_        protected AzureUnicastHostsProvider createUnicastHostsProvider(final Settings settings,_                                                                       final AzureComputeService azureComputeService,_                                                                       final TransportService transportService,_                                                                       final NetworkService networkService) {_            return new AzureUnicastHostsProvider(settings, azureComputeService, transportService, networkService) {_                @Override_                protected String resolveInstanceAddress(final HostType hostType, final RoleInstance instance) {_                    if (hostType == HostType.PRIVATE_IP) {_                        DiscoveryNode discoveryNode = nodes.get(instance.getInstanceName())__                        if (discoveryNode != null) {_                            _                            return NetworkAddress.format(discoveryNode.getAddress().address())__                        }_                    }_                    return super.resolveInstanceAddress(hostType, instance)__                }_            }__        };defines,a,link,azure,unicast,hosts,provider,for,testing,purpose,that,is,able,to,resolve,network,addresses,for,azure,instances,running,on,the,same,host,but,different,ports;override,protected,azure,unicast,hosts,provider,create,unicast,hosts,provider,final,settings,settings,final,azure,compute,service,azure,compute,service,final,transport,service,transport,service,final,network,service,network,service,return,new,azure,unicast,hosts,provider,settings,azure,compute,service,transport,service,network,service,override,protected,string,resolve,instance,address,final,host,type,host,type,final,role,instance,instance,if,host,type,host,type,discovery,node,discovery,node,nodes,get,instance,get,instance,name,if,discovery,node,null,return,network,address,format,discovery,node,get,address,address,return,super,resolve,instance,address,host,type,instance
