commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@After public void clearAzureNodes() {     nodes.clear(). }
false;protected;1;14;;@Override protected Settings nodeSettings(int nodeOrdinal) {     Settings.Builder builder = Settings.builder().put(super.nodeSettings(nodeOrdinal)).put(DISCOVERY_SEED_PROVIDERS_SETTING.getKey(), "azure").     // We add a fake subscription_id to start mock compute service     builder.put(Management.SUBSCRIPTION_ID_SETTING.getKey(), "fake").put(Discovery.REFRESH_SETTING.getKey(), "5s").put(Management.KEYSTORE_PATH_SETTING.getKey(), "dummy").put(Management.KEYSTORE_PASSWORD_SETTING.getKey(), "dummy").put(Management.SERVICE_NAME_SETTING.getKey(), "dummy").     return builder.build(). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Collections.singletonList(TestPlugin.class). }
true;protected;1;9;/**  * Register an existing node as a Azure node, exposing its address and details htrough  *  * @param nodeName the name of the node  */ ;/**  * Register an existing node as a Azure node, exposing its address and details htrough  *  * @param nodeName the name of the node  */ protected void registerAzureNode(final String nodeName) {     TransportService transportService = internalCluster().getInstance(TransportService.class, nodeName).     assertNotNull(transportService).     DiscoveryNode discoveryNode = transportService.getLocalNode().     assertNotNull(discoveryNode).     if (nodes.put(discoveryNode.getName(), discoveryNode) != null) {         throw new IllegalArgumentException("Node [" + discoveryNode.getName() + "] cannot be registered twice in Azure").     } }
false;protected;1;6;;protected void assertNumberOfNodes(int expected) {     NodesInfoResponse nodeInfos = client().admin().cluster().prepareNodesInfo().clear().execute().actionGet().     assertNotNull(nodeInfos).     assertNotNull(nodeInfos.getNodes()).     assertEquals(expected, nodeInfos.getNodes().size()). }
false;protected;0;38;;@Override protected AzureComputeService createComputeService() {     return () -> {         final List<RoleInstance> instances = new ArrayList<>().         for (Map.Entry<String, DiscoveryNode> node : nodes.entrySet()) {             final String name = node.getKey().             final DiscoveryNode discoveryNode = node.getValue().             RoleInstance instance = new RoleInstance().             instance.setInstanceName(name).             instance.setHostName(discoveryNode.getHostName()).             instance.setPowerState(RoleInstancePowerState.Started).             // Set the private IP address             final TransportAddress transportAddress = discoveryNode.getAddress().             instance.setIPAddress(transportAddress.address().getAddress()).             // Set the public IP address             final InstanceEndpoint endpoint = new InstanceEndpoint().             endpoint.setName(Discovery.ENDPOINT_NAME_SETTING.getDefault(Settings.EMPTY)).             endpoint.setVirtualIPAddress(transportAddress.address().getAddress()).             endpoint.setPort(transportAddress.address().getPort()).             instance.setInstanceEndpoints(new ArrayList<>(Collections.singletonList(endpoint))).             instances.add(instance).         }         final HostedServiceGetDetailedResponse.Deployment deployment = new HostedServiceGetDetailedResponse.Deployment().         deployment.setName("dummy").         deployment.setDeploymentSlot(DeploymentSlot.Production).         deployment.setStatus(DeploymentStatus.Running).         deployment.setRoleInstances(new ArrayList<>(Collections.unmodifiableList(instances))).         final HostedServiceGetDetailedResponse response = new HostedServiceGetDetailedResponse().         response.setDeployments(newSingletonArrayList(deployment)).         return response.     }. }
false;protected;2;11;;@Override protected String resolveInstanceAddress(final HostType hostType, final RoleInstance instance) {     if (hostType == HostType.PRIVATE_IP) {         DiscoveryNode discoveryNode = nodes.get(instance.getInstanceName()).         if (discoveryNode != null) {             // Format the InetSocketAddress to a format that contains the port number             return NetworkAddress.format(discoveryNode.getAddress().address()).         }     }     return super.resolveInstanceAddress(hostType, instance). }
true;protected;4;19;/**  * Defines a {@link AzureSeedHostsProvider} for testing purpose that is able to resolve  * network addresses for Azure instances running on the same host but different ports.  */ ;/**  * Defines a {@link AzureSeedHostsProvider} for testing purpose that is able to resolve  * network addresses for Azure instances running on the same host but different ports.  */ @Override protected AzureSeedHostsProvider createSeedHostsProvider(final Settings settings, final AzureComputeService azureComputeService, final TransportService transportService, final NetworkService networkService) {     return new AzureSeedHostsProvider(settings, azureComputeService, transportService, networkService) {          @Override         protected String resolveInstanceAddress(final HostType hostType, final RoleInstance instance) {             if (hostType == HostType.PRIVATE_IP) {                 DiscoveryNode discoveryNode = nodes.get(instance.getInstanceName()).                 if (discoveryNode != null) {                     // Format the InetSocketAddress to a format that contains the port number                     return NetworkAddress.format(discoveryNode.getAddress().address()).                 }             }             return super.resolveInstanceAddress(hostType, instance).         }     }. }
