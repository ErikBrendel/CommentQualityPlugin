commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;public void testOneNodeShouldRunUsingPrivateIp() {     Settings.Builder settings = Settings.builder().put(Management.SERVICE_NAME_SETTING.getKey(), "dummy").put(Discovery.HOST_TYPE_SETTING.getKey(), "private_ip").     final String node1 = internalCluster().startNode(settings).     registerAzureNode(node1).     assertNotNull(client().admin().cluster().prepareState().setMasterNodeTimeout("1s").get().getState().nodes().getMasterNodeId()).     // We expect having 1 node as part of the cluster, let's test that     assertNumberOfNodes(1). }
false;public;0;12;;public void testOneNodeShouldRunUsingPublicIp() {     Settings.Builder settings = Settings.builder().put(Management.SERVICE_NAME_SETTING.getKey(), "dummy").put(Discovery.HOST_TYPE_SETTING.getKey(), "public_ip").     final String node1 = internalCluster().startNode(settings).     registerAzureNode(node1).     assertNotNull(client().admin().cluster().prepareState().setMasterNodeTimeout("1s").get().getState().nodes().getMasterNodeId()).     // We expect having 1 node as part of the cluster, let's test that     assertNumberOfNodes(1). }
false;public;0;8;;public void testOneNodeShouldRunUsingWrongSettings() {     Settings.Builder settings = Settings.builder().put(Management.SERVICE_NAME_SETTING.getKey(), "dummy").put(Discovery.HOST_TYPE_SETTING.getKey(), "do_not_exist").     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> internalCluster().startNode(settings)).     assertThat(e.getMessage(), containsString("invalid value for host type [do_not_exist]")). }
