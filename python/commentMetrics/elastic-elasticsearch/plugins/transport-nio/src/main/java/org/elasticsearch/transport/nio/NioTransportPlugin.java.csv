commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override public List<Setting<?>> getSettings() {     return Arrays.asList(NIO_HTTP_WORKER_COUNT, NIO_WORKER_COUNT). }
false;public;6;8;;@Override public Map<String, Supplier<Transport>> getTransports(Settings settings, ThreadPool threadPool, PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService, NamedWriteableRegistry namedWriteableRegistry, NetworkService networkService) {     return Collections.singletonMap(NIO_TRANSPORT_NAME, () -> new NioTransport(settings, Version.CURRENT, threadPool, networkService, pageCacheRecycler, namedWriteableRegistry, circuitBreakerService, getNioGroupFactory(settings))). }
false;public;8;11;;@Override public Map<String, Supplier<HttpServerTransport>> getHttpTransports(Settings settings, ThreadPool threadPool, BigArrays bigArrays, PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService, NamedXContentRegistry xContentRegistry, NetworkService networkService, HttpServerTransport.Dispatcher dispatcher) {     return Collections.singletonMap(NIO_HTTP_TRANSPORT_NAME, () -> new NioHttpServerTransport(settings, networkService, bigArrays, pageCacheRecycler, threadPool, xContentRegistry, dispatcher, getNioGroupFactory(settings))). }
false;private,synchronized;1;10;;private synchronized NioGroupFactory getNioGroupFactory(Settings settings) {     NioGroupFactory nioGroupFactory = groupFactory.get().     if (nioGroupFactory != null) {         assert nioGroupFactory.getSettings().equals(settings) : "Different settings than originally provided".         return nioGroupFactory.     } else {         groupFactory.set(new NioGroupFactory(settings, logger)).         return groupFactory.get().     } }
