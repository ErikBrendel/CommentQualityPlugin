commented;modifiers;parameterAmount;loc;comment;code
false;public;3;15;;@Override public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) {     try {         ByteBuf message = (ByteBuf) msg.         promise.addListener((f) -> message.release()).         NettyListener listener = NettyListener.fromChannelPromise(promise).         flushOperations.add(new FlushOperation(message.nioBuffers(), listener)).     } catch (Exception e) {         promise.setFailure(e).     } }
false;public;0;13;;@Override public void close() throws Exception {     assert flushOperations.isEmpty() : "Should close outbound operations before calling close".     ChannelFuture closeFuture = nettyChannel.close().     // This should be safe as we are not a real network channel     closeFuture.await().     if (closeFuture.isSuccess() == false) {         Throwable cause = closeFuture.cause().         ExceptionsHelper.maybeDieOnAnotherThread(cause).         throw (Exception) cause.     } }
false;public;1;12;;public void addCloseListener(BiConsumer<Void, Exception> listener) {     nettyChannel.closeFuture().addListener(f -> {         if (f.isSuccess()) {             listener.accept(null, null).         } else {             final Throwable cause = f.cause().             ExceptionsHelper.maybeDieOnAnotherThread(cause).             assert cause instanceof Exception.             listener.accept(null, (Exception) cause).         }     }). }
false;public;1;6;;public int read(ByteBuffer[] buffers) {     ByteBuf byteBuf = Unpooled.wrappedBuffer(buffers).     int initialReaderIndex = byteBuf.readerIndex().     nettyChannel.writeInbound(byteBuf).     return byteBuf.readerIndex() - initialReaderIndex. }
false;public;1;6;;public int read(InboundChannelBuffer.Page[] pages) {     ByteBuf byteBuf = PagedByteBuf.byteBufFromPages(pages).     int readableBytes = byteBuf.readableBytes().     nettyChannel.writeInbound(byteBuf).     return readableBytes. }
false;public;0;3;;public Object pollInboundMessage() {     return nettyChannel.readInbound(). }
false;public;1;3;;public void write(WriteOperation writeOperation) {     nettyChannel.writeAndFlush(writeOperation.getObject(), NettyListener.fromBiConsumer(writeOperation.getListener(), nettyChannel)). }
false;public;0;3;;public FlushOperation pollOutboundOperation() {     return flushOperations.pollFirst(). }
false;public;0;3;;public int getOutboundCount() {     return flushOperations.size(). }
