commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;@Override public int consumeReads(InboundChannelBuffer channelBuffer) throws IOException {     int bytesConsumed = adaptor.read(channelBuffer.sliceAndRetainPagesTo(channelBuffer.getIndex())).     Object message.     while ((message = adaptor.pollInboundMessage()) != null) {         handleRequest(message).     }     return bytesConsumed. }
false;public;3;6;;@Override public WriteOperation createWriteOperation(SocketChannelContext context, Object message, BiConsumer<Void, Exception> listener) {     assert message instanceof NioHttpResponse : "This channel only supports messages that are of type: " + NioHttpResponse.class + ". Found type: " + message.getClass() + ".".     return new HttpWriteOperation(context, (NioHttpResponse) message, listener). }
false;public;1;5;;@Override public List<FlushOperation> writeToBytes(WriteOperation writeOperation) {     adaptor.write(writeOperation).     return pollFlushOperations(). }
false;public;0;9;;@Override public List<FlushOperation> pollFlushOperations() {     ArrayList<FlushOperation> copiedOperations = new ArrayList<>(adaptor.getOutboundCount()).     FlushOperation flushOperation.     while ((flushOperation = adaptor.pollOutboundOperation()) != null) {         copiedOperations.add(flushOperation).     }     return copiedOperations. }
false;public;0;8;;@Override public void close() throws IOException {     try {         adaptor.close().     } catch (Exception e) {         throw new IOException(e).     } }
false;private;1;33;;@SuppressWarnings("unchecked") private void handleRequest(Object msg) {     final HttpPipelinedRequest<FullHttpRequest> pipelinedRequest = (HttpPipelinedRequest<FullHttpRequest>) msg.     FullHttpRequest request = pipelinedRequest.getRequest().     try {         final FullHttpRequest copiedRequest = new DefaultFullHttpRequest(request.protocolVersion(), request.method(), request.uri(), Unpooled.copiedBuffer(request.content()), request.headers(), request.trailingHeaders()).         NioHttpRequest httpRequest = new NioHttpRequest(copiedRequest, pipelinedRequest.getSequence()).         if (request.decoderResult().isFailure()) {             Throwable cause = request.decoderResult().cause().             if (cause instanceof Error) {                 ExceptionsHelper.maybeDieOnAnotherThread(cause).                 transport.incomingRequestError(httpRequest, nioHttpChannel, new Exception(cause)).             } else {                 transport.incomingRequestError(httpRequest, nioHttpChannel, (Exception) cause).             }         } else {             transport.incomingRequest(httpRequest, nioHttpChannel).         }     } finally {         // As we have copied the buffer, we can release the request         request.release().     } }
