commented;modifiers;parameterAmount;loc;comment;code
false;static;1;15;;static ByteBuf byteBufFromPages(InboundChannelBuffer.Page[] pages) {     int componentCount = pages.length.     if (componentCount == 0) {         return Unpooled.EMPTY_BUFFER.     } else if (componentCount == 1) {         return byteBufFromPage(pages[0]).     } else {         int maxComponents = Math.max(16, componentCount).         final List<ByteBuf> components = new ArrayList<>(componentCount).         for (InboundChannelBuffer.Page page : pages) {             components.add(byteBufFromPage(page)).         }         return new CompositeByteBuf(UnpooledByteBufAllocator.DEFAULT, false, maxComponents, components).     } }
false;private,static;1;7;;private static ByteBuf byteBufFromPage(InboundChannelBuffer.Page page) {     ByteBuffer buffer = page.getByteBuffer().     assert buffer.isDirect() == false && buffer.hasArray() : "Must be a heap buffer with an array".     int offset = buffer.arrayOffset() + buffer.position().     PagedByteBuf newByteBuf = new PagedByteBuf(buffer.array(), page::close).     return newByteBuf.slice(offset, buffer.remaining()). }
false;protected;0;8;;@Override protected void deallocate() {     try {         super.deallocate().     } finally {         releasable.run().     } }
