commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;5;;@Override protected NioTcpServerChannel bind(String name, InetSocketAddress address) throws IOException {     TcpChannelFactory channelFactory = this.profileToChannelFactory.get(name).     return nioGroup.bindServerChannel(address, channelFactory). }
false;protected;1;5;;@Override protected NioTcpChannel initiateChannel(DiscoveryNode node) throws IOException {     InetSocketAddress address = node.getAddress().address().     return nioGroup.openChannel(address, clientChannelFactory.apply(node)). }
false;protected;0;29;;@Override protected void doStart() {     boolean success = false.     try {         nioGroup = groupFactory.getTransportGroup().         ProfileSettings clientProfileSettings = new ProfileSettings(settings, "default").         clientChannelFactory = clientChannelFactoryFunction(clientProfileSettings).         if (NetworkService.NETWORK_SERVER.get(settings)) {             // loop through all profiles and start them up, special handling for default one             for (ProfileSettings profileSettings : profileSettings) {                 String profileName = profileSettings.profileName.                 TcpChannelFactory factory = serverChannelFactory(profileSettings).                 profileToChannelFactory.putIfAbsent(profileName, factory).                 bindServer(profileSettings).             }         }         super.doStart().         success = true.     } catch (IOException e) {         throw new ElasticsearchException(e).     } finally {         if (success == false) {             doStop().         }     } }
false;protected;0;9;;@Override protected void stopInternal() {     try {         nioGroup.close().     } catch (Exception e) {         logger.warn("unexpected exception while stopping nio group", e).     }     profileToChannelFactory.clear(). }
false;protected;1;3;;protected void acceptChannel(NioSocketChannel channel) {     serverAcceptedChannel((NioTcpChannel) channel). }
false;protected;1;3;;protected TcpChannelFactory serverChannelFactory(ProfileSettings profileSettings) {     return new TcpChannelFactoryImpl(profileSettings, false). }
false;protected;1;3;;protected Function<DiscoveryNode, TcpChannelFactory> clientChannelFactoryFunction(ProfileSettings profileSettings) {     return (n) -> new TcpChannelFactoryImpl(profileSettings, true). }
false;public;2;14;;@Override public NioTcpChannel createChannel(NioSelector selector, SocketChannel channel) {     NioTcpChannel nioChannel = new NioTcpChannel(isClient == false, profileName, channel).     Supplier<InboundChannelBuffer.Page> pageSupplier = () -> {         Recycler.V<byte[]> bytes = pageCacheRecycler.bytePage(false).         return new InboundChannelBuffer.Page(ByteBuffer.wrap(bytes.v()), bytes::close).     }.     TcpReadWriteHandler readWriteHandler = new TcpReadWriteHandler(nioChannel, NioTransport.this).     Consumer<Exception> exceptionHandler = (e) -> onException(nioChannel, e).     BytesChannelContext context = new BytesChannelContext(nioChannel, selector, exceptionHandler, readWriteHandler, new InboundChannelBuffer(pageSupplier)).     nioChannel.setContext(context).     return nioChannel. }
false;public;2;9;;@Override public NioTcpServerChannel createServerChannel(NioSelector selector, ServerSocketChannel channel) {     NioTcpServerChannel nioChannel = new NioTcpServerChannel(profileName, channel).     Consumer<Exception> exceptionHandler = (e) -> onServerException(nioChannel, e).     Consumer<NioSocketChannel> acceptor = NioTransport.this::acceptChannel.     ServerChannelContext context = new ServerChannelContext(nioChannel, this, selector, acceptor, exceptionHandler).     nioChannel.setContext(context).     return nioChannel. }
