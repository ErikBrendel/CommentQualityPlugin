commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Logger getLogger() {     return logger. }
false;protected;0;16;;@Override protected void doStart() {     boolean success = false.     try {         nioGroup = nioGroupFactory.getHttpGroup().         channelFactory = channelFactory().         bindServer().         success = true.     } catch (IOException e) {         throw new ElasticsearchException(e).     } finally {         if (success == false) {             // otherwise we leak threads since we never moved to started             doStop().         }     } }
false;protected;0;8;;@Override protected void stopInternal() {     try {         nioGroup.close().     } catch (Exception e) {         logger.warn("unexpected exception while stopping nio group", e).     } }
false;protected;1;4;;@Override protected HttpServerChannel bind(InetSocketAddress socketAddress) throws IOException {     return nioGroup.bindServerChannel(socketAddress, channelFactory). }
false;protected;0;3;;protected ChannelFactory<NioHttpServerChannel, NioHttpChannel> channelFactory() {     return new HttpChannelFactory(). }
false;static;1;35;;static NioCorsConfig buildCorsConfig(Settings settings) {     if (SETTING_CORS_ENABLED.get(settings) == false) {         return NioCorsConfigBuilder.forOrigins().disable().build().     }     String origin = SETTING_CORS_ALLOW_ORIGIN.get(settings).     final NioCorsConfigBuilder builder.     if (Strings.isNullOrEmpty(origin)) {         builder = NioCorsConfigBuilder.forOrigins().     } else if (origin.equals(ANY_ORIGIN)) {         builder = NioCorsConfigBuilder.forAnyOrigin().     } else {         try {             Pattern p = RestUtils.checkCorsSettingForRegex(origin).             if (p == null) {                 builder = NioCorsConfigBuilder.forOrigins(RestUtils.corsSettingAsArray(origin)).             } else {                 builder = NioCorsConfigBuilder.forPattern(p).             }         } catch (PatternSyntaxException e) {             throw new SettingsException("Bad regex in [" + SETTING_CORS_ALLOW_ORIGIN.getKey() + "]: [" + origin + "]", e).         }     }     if (SETTING_CORS_ALLOW_CREDENTIALS.get(settings)) {         builder.allowCredentials().     }     String[] strMethods = Strings.tokenizeToStringArray(SETTING_CORS_ALLOW_METHODS.get(settings), ",").     HttpMethod[] methods = Arrays.stream(strMethods).map(HttpMethod::valueOf).toArray(HttpMethod[]::new).     return builder.allowedRequestMethods(methods).maxAge(SETTING_CORS_MAX_AGE.get(settings)).allowedRequestHeaders(Strings.tokenizeToStringArray(SETTING_CORS_ALLOW_HEADERS.get(settings), ",")).shortCircuit().build(). }
false;protected;1;3;;protected void acceptChannel(NioSocketChannel socketChannel) {     super.serverAcceptedChannel((HttpChannel) socketChannel). }
false;public;2;15;;@Override public NioHttpChannel createChannel(NioSelector selector, SocketChannel channel) throws IOException {     NioHttpChannel httpChannel = new NioHttpChannel(channel).     java.util.function.Supplier<InboundChannelBuffer.Page> pageSupplier = () -> {         Recycler.V<byte[]> bytes = pageCacheRecycler.bytePage(false).         return new InboundChannelBuffer.Page(ByteBuffer.wrap(bytes.v()), bytes::close).     }.     HttpReadWriteHandler httpReadWritePipeline = new HttpReadWriteHandler(httpChannel, NioHttpServerTransport.this, handlingSettings, corsConfig).     Consumer<Exception> exceptionHandler = (e) -> onException(httpChannel, e).     SocketChannelContext context = new BytesChannelContext(httpChannel, selector, exceptionHandler, httpReadWritePipeline, new InboundChannelBuffer(pageSupplier)).     httpChannel.setContext(context).     return httpChannel. }
false;public;2;9;;@Override public NioHttpServerChannel createServerChannel(NioSelector selector, ServerSocketChannel channel) throws IOException {     NioHttpServerChannel httpServerChannel = new NioHttpServerChannel(channel).     Consumer<Exception> exceptionHandler = (e) -> onServerException(httpServerChannel, e).     Consumer<NioSocketChannel> acceptor = NioHttpServerTransport.this::acceptChannel.     ServerChannelContext context = new ServerChannelContext(httpServerChannel, this, selector, acceptor, exceptionHandler).     httpServerChannel.setContext(context).     return httpServerChannel. }
