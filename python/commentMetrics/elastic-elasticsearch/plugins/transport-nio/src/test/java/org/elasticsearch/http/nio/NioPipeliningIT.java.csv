commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean addMockHttpTransport() {     // enable http     return false. }
false;public;0;15;;public void testThatNioHttpServerSupportsPipelining() throws Exception {     String[] requests = new String[] { "/", "/_nodes/stats", "/", "/_cluster/state", "/" }.     HttpServerTransport httpServerTransport = internalCluster().getInstance(HttpServerTransport.class).     TransportAddress[] boundAddresses = httpServerTransport.boundAddress().boundAddresses().     TransportAddress transportAddress = randomFrom(boundAddresses).     try (NioHttpClient nettyHttpClient = new NioHttpClient()) {         Collection<FullHttpResponse> responses = nettyHttpClient.get(transportAddress.address(), requests).         assertThat(responses, hasSize(5)).         Collection<String> opaqueIds = NioHttpClient.returnOpaqueIds(responses).         assertOpaqueIdsInOrder(opaqueIds).     } }
false;private;1;8;;private void assertOpaqueIdsInOrder(Collection<String> opaqueIds) {     // check if opaque ids are monotonically increasing     int i = 0.     String msg = String.format(Locale.ROOT, "Expected list of opaque ids to be monotonically increasing, got [%s]", opaqueIds).     for (String opaqueId : opaqueIds) {         assertThat(msg, opaqueId, is(String.valueOf(i++))).     } }
