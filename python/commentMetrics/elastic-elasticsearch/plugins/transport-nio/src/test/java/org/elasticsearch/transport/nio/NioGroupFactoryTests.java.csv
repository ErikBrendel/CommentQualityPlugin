commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;public void testSharedGroupStillWorksWhenOneInstanceClosed() throws IOException {     NioGroupFactory groupFactory = new NioGroupFactory(Settings.EMPTY, logger).     InetSocketAddress inetSocketAddress = new InetSocketAddress(InetAddress.getLoopbackAddress(), 0).     NioGroup httpGroup = groupFactory.getHttpGroup().     try {         NioGroup transportGroup = groupFactory.getTransportGroup().         transportGroup.close().         expectThrows(IllegalStateException.class, () -> transportGroup.bindServerChannel(inetSocketAddress, new BindingFactory())).         httpGroup.bindServerChannel(inetSocketAddress, new BindingFactory()).     } finally {         httpGroup.close().     }     expectThrows(IllegalStateException.class, () -> httpGroup.bindServerChannel(inetSocketAddress, new BindingFactory())). }
false;public;2;4;;@Override public NioSocketChannel createChannel(NioSelector selector, SocketChannel channel) throws IOException {     throw new IOException("boom"). }
false;public;2;9;;@Override public NioServerSocketChannel createServerChannel(NioSelector selector, ServerSocketChannel channel) throws IOException {     NioServerSocketChannel nioChannel = new NioServerSocketChannel(channel).     Consumer<Exception> exceptionHandler = (e) -> {     }.     Consumer<NioSocketChannel> acceptor = (c) -> {     }.     ServerChannelContext context = new ServerChannelContext(nioChannel, this, selector, acceptor, exceptionHandler).     nioChannel.setContext(context).     return nioChannel. }
