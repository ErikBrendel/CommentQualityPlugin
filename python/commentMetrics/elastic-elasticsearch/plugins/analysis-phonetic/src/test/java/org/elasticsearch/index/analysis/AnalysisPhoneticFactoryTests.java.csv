commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;8;;@Override protected Map<String, Class<?>> getTokenFilters() {     Map<String, Class<?>> filters = new HashMap<>(super.getTokenFilters()).     filters.put("beidermorse", PhoneticTokenFilterFactory.class).     filters.put("doublemetaphone", PhoneticTokenFilterFactory.class).     filters.put("phonetic", PhoneticTokenFilterFactory.class).     return filters. }
false;public;0;27;;public void testDisallowedWithSynonyms() throws IOException {     AnalysisPhoneticPlugin plugin = new AnalysisPhoneticPlugin().     Settings settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, VersionUtils.randomVersionBetween(random(), Version.V_7_0_0, Version.CURRENT)).put("path.home", createTempDir().toString()).build().     IndexSettings idxSettings = IndexSettingsModule.newIndexSettings("index", settings).     TokenFilterFactory tff = plugin.getTokenFilters().get("phonetic").get(idxSettings, null, "phonetic", settings).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, tff::getSynonymFilter).     assertEquals("Token filter [phonetic] cannot be used to parse synonyms", e.getMessage()).     settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, VersionUtils.randomVersionBetween(random(), Version.V_6_0_0, VersionUtils.getPreviousVersion(Version.V_7_0_0))).put("path.home", createTempDir().toString()).build().     idxSettings = IndexSettingsModule.newIndexSettings("index", settings).     tff = plugin.getTokenFilters().get("phonetic").get(idxSettings, null, "phonetic", settings).     tff.getSynonymFilter().     assertWarnings("Token filter [phonetic] will not be usable to parse synonyms after v7.0"). }
