commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String toString() {     return container. }
true;public;0;3;/**  * Gets the configured {@link LocationMode} for the Azure storage requests.  */ ;/**  * Gets the configured {@link LocationMode} for the Azure storage requests.  */ public LocationMode getLocationMode() {     return locationMode. }
false;public;0;3;;public String getClientName() {     return clientName. }
false;public;1;4;;@Override public BlobContainer blobContainer(BlobPath path) {     return new AzureBlobContainer(path, this). }
false;public;1;10;;@Override public void delete(BlobPath path) throws IOException {     final String keyPath = path.buildAsString().     try {         service.deleteFiles(clientName, container, keyPath).     } catch (URISyntaxException | StorageException e) {         logger.warn("cannot access [{}] in container {{}}: {}", keyPath, container, e.getMessage()).         throw new IOException(e).     } }
false;public;0;3;;@Override public void close() { }
false;public;0;3;;public boolean containerExist() throws URISyntaxException, StorageException {     return service.doesContainerExist(clientName, container). }
false;public;1;3;;public boolean blobExists(String blob) throws URISyntaxException, StorageException {     return service.blobExists(clientName, container, blob). }
false;public;1;3;;public void deleteBlob(String blob) throws URISyntaxException, StorageException {     service.deleteBlob(clientName, container, blob). }
false;public;1;3;;public InputStream getInputStream(String blob) throws URISyntaxException, StorageException, IOException {     return service.getInputStream(clientName, container, blob). }
false;public;2;4;;public Map<String, BlobMetaData> listBlobsByPrefix(String keyPath, String prefix) throws URISyntaxException, StorageException {     return service.listBlobsByPrefix(clientName, container, keyPath, prefix). }
false;public;4;4;;public void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws URISyntaxException, StorageException, FileAlreadyExistsException {     service.writeBlob(this.clientName, container, blobName, inputStream, blobSize, failIfAlreadyExists). }
