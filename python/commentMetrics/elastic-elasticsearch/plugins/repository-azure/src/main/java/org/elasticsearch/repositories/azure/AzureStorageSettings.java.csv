commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getKey() {     return key. }
false;public;0;3;;public String getAccount() {     return account. }
false;public;0;3;;public String getEndpointSuffix() {     return endpointSuffix. }
false;public;0;3;;public TimeValue getTimeout() {     return timeout. }
false;public;0;3;;public int getMaxRetries() {     return maxRetries. }
false;public;0;3;;public Proxy getProxy() {     return proxy. }
false;public;0;12;;public String buildConnectionString() {     final StringBuilder connectionStringBuilder = new StringBuilder().     connectionStringBuilder.append("DefaultEndpointsProtocol=https").append(".AccountName=").append(account).append(".AccountKey=").append(key).     if (Strings.hasText(endpointSuffix)) {         connectionStringBuilder.append(".EndpointSuffix=").append(endpointSuffix).     }     return connectionStringBuilder.toString(). }
false;public;0;3;;public LocationMode getLocationMode() {     return locationMode. }
false;public;0;13;;@Override public String toString() {     final StringBuilder sb = new StringBuilder("AzureStorageSettings{").     sb.append("account='").append(account).append('\'').     sb.append(", key='").append(key).append('\'').     sb.append(", timeout=").append(timeout).     sb.append(", endpointSuffix='").append(endpointSuffix).append('\'').     sb.append(", maxRetries=").append(maxRetries).     sb.append(", proxy=").append(proxy).     sb.append(", locationMode='").append(locationMode).append('\'').     sb.append('}').     return sb.toString(). }
true;public,static;1;15;/**  * Parse and read all settings available under the azure.client.* namespace  * @param settings settings to parse  * @return All the named configurations  */ ;/**  * Parse and read all settings available under the azure.client.* namespace  * @param settings settings to parse  * @return All the named configurations  */ public static Map<String, AzureStorageSettings> load(Settings settings) {     // Get the list of existing named configurations     final Map<String, AzureStorageSettings> storageSettings = new HashMap<>().     for (final String clientName : ACCOUNT_SETTING.getNamespaces(settings)) {         storageSettings.put(clientName, getClientSettings(settings, clientName)).     }     if (false == storageSettings.containsKey("default") && false == storageSettings.isEmpty()) {         // in case no setting named "default" has been set, let's define our "default"         // as the first named config we get         final AzureStorageSettings defaultSettings = storageSettings.values().iterator().next().         storageSettings.put("default", defaultSettings).     }     assert storageSettings.containsKey("default") || storageSettings.isEmpty() : "always have 'default' if any".     return Collections.unmodifiableMap(storageSettings). }
true;static;2;12;/**  * Parse settings for a single client.  */ ;// pkg private for tests /**  * Parse settings for a single client.  */ static AzureStorageSettings getClientSettings(Settings settings, String clientName) {     try (SecureString account = getConfigValue(settings, clientName, ACCOUNT_SETTING).         SecureString key = getConfigValue(settings, clientName, KEY_SETTING)) {         return new AzureStorageSettings(account.toString(), key.toString(), getValue(settings, clientName, ENDPOINT_SUFFIX_SETTING), getValue(settings, clientName, TIMEOUT_SETTING), getValue(settings, clientName, MAX_RETRIES_SETTING), getValue(settings, clientName, PROXY_TYPE_SETTING), getValue(settings, clientName, PROXY_HOST_SETTING), getValue(settings, clientName, PROXY_PORT_SETTING)).     } }
false;private,static;3;5;;private static <T> T getConfigValue(Settings settings, String clientName, Setting.AffixSetting<T> clientSetting) {     final Setting<T> concreteSetting = clientSetting.getConcreteSettingForNamespace(clientName).     return concreteSetting.get(settings). }
false;public,static;3;5;;public static <T> T getValue(Settings settings, String groupName, Setting<T> setting) {     final Setting.AffixKey k = (Setting.AffixKey) setting.getRawKey().     final String fullKey = k.toConcreteKey(groupName).toString().     return setting.getConcreteSetting(fullKey).get(settings). }
false;static;2;11;;static Map<String, AzureStorageSettings> overrideLocationMode(Map<String, AzureStorageSettings> clientsSettings, LocationMode locationMode) {     final MapBuilder<String, AzureStorageSettings> mapBuilder = new MapBuilder<>().     for (final Map.Entry<String, AzureStorageSettings> entry : clientsSettings.entrySet()) {         final AzureStorageSettings azureSettings = new AzureStorageSettings(entry.getValue().account, entry.getValue().key, entry.getValue().endpointSuffix, entry.getValue().timeout, entry.getValue().maxRetries, entry.getValue().proxy, locationMode).         mapBuilder.put(entry.getKey(), azureSettings).     }     return mapBuilder.immutableMap(). }
