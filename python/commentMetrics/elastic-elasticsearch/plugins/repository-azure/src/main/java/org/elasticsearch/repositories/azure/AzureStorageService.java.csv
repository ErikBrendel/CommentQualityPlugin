# id;timestamp;commentText;codeText;commentWords;codeWords
AzureStorageService -> public Map<String, AzureStorageSettings> refreshAndClearCache(Map<String, AzureStorageSettings> clientsSettings);1531179852;Updates settings for building clients. Any client cache is cleared. Future_client requests will use the new refreshed settings.__@param clientsSettings the settings for new clients_@return the old settings;public Map<String, AzureStorageSettings> refreshAndClearCache(Map<String, AzureStorageSettings> clientsSettings) {_        final Map<String, AzureStorageSettings> prevSettings = this.storageSettings__        this.storageSettings = MapBuilder.newMapBuilder(clientsSettings).immutableMap()__        _        return prevSettings__    };updates,settings,for,building,clients,any,client,cache,is,cleared,future,client,requests,will,use,the,new,refreshed,settings,param,clients,settings,the,settings,for,new,clients,return,the,old,settings;public,map,string,azure,storage,settings,refresh,and,clear,cache,map,string,azure,storage,settings,clients,settings,final,map,string,azure,storage,settings,prev,settings,this,storage,settings,this,storage,settings,map,builder,new,map,builder,clients,settings,immutable,map,return,prev,settings
AzureStorageService -> public Map<String, AzureStorageSettings> refreshAndClearCache(Map<String, AzureStorageSettings> clientsSettings);1533063033;Updates settings for building clients. Any client cache is cleared. Future_client requests will use the new refreshed settings.__@param clientsSettings the settings for new clients_@return the old settings;public Map<String, AzureStorageSettings> refreshAndClearCache(Map<String, AzureStorageSettings> clientsSettings) {_        final Map<String, AzureStorageSettings> prevSettings = this.storageSettings__        this.storageSettings = MapBuilder.newMapBuilder(clientsSettings).immutableMap()__        _        return prevSettings__    };updates,settings,for,building,clients,any,client,cache,is,cleared,future,client,requests,will,use,the,new,refreshed,settings,param,clients,settings,the,settings,for,new,clients,return,the,old,settings;public,map,string,azure,storage,settings,refresh,and,clear,cache,map,string,azure,storage,settings,clients,settings,final,map,string,azure,storage,settings,prev,settings,this,storage,settings,this,storage,settings,map,builder,new,map,builder,clients,settings,immutable,map,return,prev,settings
AzureStorageService -> public Map<String, AzureStorageSettings> refreshAndClearCache(Map<String, AzureStorageSettings> clientsSettings);1541092382;Updates settings for building clients. Any client cache is cleared. Future_client requests will use the new refreshed settings.__@param clientsSettings the settings for new clients_@return the old settings;public Map<String, AzureStorageSettings> refreshAndClearCache(Map<String, AzureStorageSettings> clientsSettings) {_        final Map<String, AzureStorageSettings> prevSettings = this.storageSettings__        this.storageSettings = MapBuilder.newMapBuilder(clientsSettings).immutableMap()__        _        return prevSettings__    };updates,settings,for,building,clients,any,client,cache,is,cleared,future,client,requests,will,use,the,new,refreshed,settings,param,clients,settings,the,settings,for,new,clients,return,the,old,settings;public,map,string,azure,storage,settings,refresh,and,clear,cache,map,string,azure,storage,settings,clients,settings,final,map,string,azure,storage,settings,prev,settings,this,storage,settings,this,storage,settings,map,builder,new,map,builder,clients,settings,immutable,map,return,prev,settings
AzureStorageService -> public Map<String, AzureStorageSettings> refreshAndClearCache(Map<String, AzureStorageSettings> clientsSettings);1542397818;Updates settings for building clients. Any client cache is cleared. Future_client requests will use the new refreshed settings.__@param clientsSettings the settings for new clients_@return the old settings;public Map<String, AzureStorageSettings> refreshAndClearCache(Map<String, AzureStorageSettings> clientsSettings) {_        final Map<String, AzureStorageSettings> prevSettings = this.storageSettings__        this.storageSettings = MapBuilder.newMapBuilder(clientsSettings).immutableMap()__        _        return prevSettings__    };updates,settings,for,building,clients,any,client,cache,is,cleared,future,client,requests,will,use,the,new,refreshed,settings,param,clients,settings,the,settings,for,new,clients,return,the,old,settings;public,map,string,azure,storage,settings,refresh,and,clear,cache,map,string,azure,storage,settings,clients,settings,final,map,string,azure,storage,settings,prev,settings,this,storage,settings,this,storage,settings,map,builder,new,map,builder,clients,settings,immutable,map,return,prev,settings
AzureStorageService -> public Tuple<CloudBlobClient, Supplier<OperationContext>> client(String clientName);1531179852;Creates a {@code CloudBlobClient} on each invocation using the current client_settings. CloudBlobClient is not thread safe and the settings can change,_therefore the instance is not cache-able and should only be reused inside a_thread for logically coupled ops. The {@code OperationContext} is used to_specify the proxy, but a new context is *required* for each call.;public Tuple<CloudBlobClient, Supplier<OperationContext>> client(String clientName) {_        final AzureStorageSettings azureStorageSettings = this.storageSettings.get(clientName)__        if (azureStorageSettings == null) {_            throw new SettingsException("Unable to find client with name [" + clientName + "]")__        }_        try {_            return new Tuple<>(buildClient(azureStorageSettings), () -> buildOperationContext(azureStorageSettings))__        } catch (InvalidKeyException | URISyntaxException | IllegalArgumentException e) {_            throw new SettingsException("Invalid azure client settings with name [" + clientName + "]", e)__        }_    };creates,a,code,cloud,blob,client,on,each,invocation,using,the,current,client,settings,cloud,blob,client,is,not,thread,safe,and,the,settings,can,change,therefore,the,instance,is,not,cache,able,and,should,only,be,reused,inside,a,thread,for,logically,coupled,ops,the,code,operation,context,is,used,to,specify,the,proxy,but,a,new,context,is,required,for,each,call;public,tuple,cloud,blob,client,supplier,operation,context,client,string,client,name,final,azure,storage,settings,azure,storage,settings,this,storage,settings,get,client,name,if,azure,storage,settings,null,throw,new,settings,exception,unable,to,find,client,with,name,client,name,try,return,new,tuple,build,client,azure,storage,settings,build,operation,context,azure,storage,settings,catch,invalid,key,exception,urisyntax,exception,illegal,argument,exception,e,throw,new,settings,exception,invalid,azure,client,settings,with,name,client,name,e
AzureStorageService -> public Tuple<CloudBlobClient, Supplier<OperationContext>> client(String clientName);1533063033;Creates a {@code CloudBlobClient} on each invocation using the current client_settings. CloudBlobClient is not thread safe and the settings can change,_therefore the instance is not cache-able and should only be reused inside a_thread for logically coupled ops. The {@code OperationContext} is used to_specify the proxy, but a new context is *required* for each call.;public Tuple<CloudBlobClient, Supplier<OperationContext>> client(String clientName) {_        final AzureStorageSettings azureStorageSettings = this.storageSettings.get(clientName)__        if (azureStorageSettings == null) {_            throw new SettingsException("Unable to find client with name [" + clientName + "]")__        }_        try {_            return new Tuple<>(buildClient(azureStorageSettings), () -> buildOperationContext(azureStorageSettings))__        } catch (InvalidKeyException | URISyntaxException | IllegalArgumentException e) {_            throw new SettingsException("Invalid azure client settings with name [" + clientName + "]", e)__        }_    };creates,a,code,cloud,blob,client,on,each,invocation,using,the,current,client,settings,cloud,blob,client,is,not,thread,safe,and,the,settings,can,change,therefore,the,instance,is,not,cache,able,and,should,only,be,reused,inside,a,thread,for,logically,coupled,ops,the,code,operation,context,is,used,to,specify,the,proxy,but,a,new,context,is,required,for,each,call;public,tuple,cloud,blob,client,supplier,operation,context,client,string,client,name,final,azure,storage,settings,azure,storage,settings,this,storage,settings,get,client,name,if,azure,storage,settings,null,throw,new,settings,exception,unable,to,find,client,with,name,client,name,try,return,new,tuple,build,client,azure,storage,settings,build,operation,context,azure,storage,settings,catch,invalid,key,exception,urisyntax,exception,illegal,argument,exception,e,throw,new,settings,exception,invalid,azure,client,settings,with,name,client,name,e
AzureStorageService -> public Tuple<CloudBlobClient, Supplier<OperationContext>> client(String clientName);1541092382;Creates a {@code CloudBlobClient} on each invocation using the current client_settings. CloudBlobClient is not thread safe and the settings can change,_therefore the instance is not cache-able and should only be reused inside a_thread for logically coupled ops. The {@code OperationContext} is used to_specify the proxy, but a new context is *required* for each call.;public Tuple<CloudBlobClient, Supplier<OperationContext>> client(String clientName) {_        final AzureStorageSettings azureStorageSettings = this.storageSettings.get(clientName)__        if (azureStorageSettings == null) {_            throw new SettingsException("Unable to find client with name [" + clientName + "]")__        }_        try {_            return new Tuple<>(buildClient(azureStorageSettings), () -> buildOperationContext(azureStorageSettings))__        } catch (InvalidKeyException | URISyntaxException | IllegalArgumentException e) {_            throw new SettingsException("Invalid azure client settings with name [" + clientName + "]", e)__        }_    };creates,a,code,cloud,blob,client,on,each,invocation,using,the,current,client,settings,cloud,blob,client,is,not,thread,safe,and,the,settings,can,change,therefore,the,instance,is,not,cache,able,and,should,only,be,reused,inside,a,thread,for,logically,coupled,ops,the,code,operation,context,is,used,to,specify,the,proxy,but,a,new,context,is,required,for,each,call;public,tuple,cloud,blob,client,supplier,operation,context,client,string,client,name,final,azure,storage,settings,azure,storage,settings,this,storage,settings,get,client,name,if,azure,storage,settings,null,throw,new,settings,exception,unable,to,find,client,with,name,client,name,try,return,new,tuple,build,client,azure,storage,settings,build,operation,context,azure,storage,settings,catch,invalid,key,exception,urisyntax,exception,illegal,argument,exception,e,throw,new,settings,exception,invalid,azure,client,settings,with,name,client,name,e
AzureStorageService -> public Tuple<CloudBlobClient, Supplier<OperationContext>> client(String clientName);1542397818;Creates a {@code CloudBlobClient} on each invocation using the current client_settings. CloudBlobClient is not thread safe and the settings can change,_therefore the instance is not cache-able and should only be reused inside a_thread for logically coupled ops. The {@code OperationContext} is used to_specify the proxy, but a new context is *required* for each call.;public Tuple<CloudBlobClient, Supplier<OperationContext>> client(String clientName) {_        final AzureStorageSettings azureStorageSettings = this.storageSettings.get(clientName)__        if (azureStorageSettings == null) {_            throw new SettingsException("Unable to find client with name [" + clientName + "]")__        }_        try {_            return new Tuple<>(buildClient(azureStorageSettings), () -> buildOperationContext(azureStorageSettings))__        } catch (InvalidKeyException | URISyntaxException | IllegalArgumentException e) {_            throw new SettingsException("Invalid azure client settings with name [" + clientName + "]", e)__        }_    };creates,a,code,cloud,blob,client,on,each,invocation,using,the,current,client,settings,cloud,blob,client,is,not,thread,safe,and,the,settings,can,change,therefore,the,instance,is,not,cache,able,and,should,only,be,reused,inside,a,thread,for,logically,coupled,ops,the,code,operation,context,is,used,to,specify,the,proxy,but,a,new,context,is,required,for,each,call;public,tuple,cloud,blob,client,supplier,operation,context,client,string,client,name,final,azure,storage,settings,azure,storage,settings,this,storage,settings,get,client,name,if,azure,storage,settings,null,throw,new,settings,exception,unable,to,find,client,with,name,client,name,try,return,new,tuple,build,client,azure,storage,settings,build,operation,context,azure,storage,settings,catch,invalid,key,exception,urisyntax,exception,illegal,argument,exception,e,throw,new,settings,exception,invalid,azure,client,settings,with,name,client,name,e
AzureStorageService -> static String blobNameFromUri(URI uri);1531179852;Extract the blob name from a URI like https://myservice.azure.net/container/path/to/myfile_It should remove the container part (first part of the path) and gives path/to/myfile_@param uri URI to parse_@return The blob name relative to the container;static String blobNameFromUri(URI uri) {_        final String path = uri.getPath()__        _        _        _        _        _        final String[] splits = path.split("/", 3)__        _        return splits[2]__    };extract,the,blob,name,from,a,uri,like,https,myservice,azure,net,container,path,to,myfile,it,should,remove,the,container,part,first,part,of,the,path,and,gives,path,to,myfile,param,uri,uri,to,parse,return,the,blob,name,relative,to,the,container;static,string,blob,name,from,uri,uri,uri,final,string,path,uri,get,path,final,string,splits,path,split,3,return,splits,2
AzureStorageService -> static String blobNameFromUri(URI uri);1533063033;Extract the blob name from a URI like https://myservice.azure.net/container/path/to/myfile_It should remove the container part (first part of the path) and gives path/to/myfile_@param uri URI to parse_@return The blob name relative to the container;static String blobNameFromUri(URI uri) {_        final String path = uri.getPath()__        _        _        _        _        _        final String[] splits = path.split("/", 3)__        _        return splits[2]__    };extract,the,blob,name,from,a,uri,like,https,myservice,azure,net,container,path,to,myfile,it,should,remove,the,container,part,first,part,of,the,path,and,gives,path,to,myfile,param,uri,uri,to,parse,return,the,blob,name,relative,to,the,container;static,string,blob,name,from,uri,uri,uri,final,string,path,uri,get,path,final,string,splits,path,split,3,return,splits,2
AzureStorageService -> static String blobNameFromUri(URI uri);1541092382;Extract the blob name from a URI like https://myservice.azure.net/container/path/to/myfile_It should remove the container part (first part of the path) and gives path/to/myfile_@param uri URI to parse_@return The blob name relative to the container;static String blobNameFromUri(URI uri) {_        final String path = uri.getPath()__        _        _        _        _        _        final String[] splits = path.split("/", 3)__        _        return splits[2]__    };extract,the,blob,name,from,a,uri,like,https,myservice,azure,net,container,path,to,myfile,it,should,remove,the,container,part,first,part,of,the,path,and,gives,path,to,myfile,param,uri,uri,to,parse,return,the,blob,name,relative,to,the,container;static,string,blob,name,from,uri,uri,uri,final,string,path,uri,get,path,final,string,splits,path,split,3,return,splits,2
AzureStorageService -> static String blobNameFromUri(URI uri);1542397818;Extract the blob name from a URI like https://myservice.azure.net/container/path/to/myfile_It should remove the container part (first part of the path) and gives path/to/myfile_@param uri URI to parse_@return The blob name relative to the container;static String blobNameFromUri(URI uri) {_        final String path = uri.getPath()__        _        _        _        _        _        final String[] splits = path.split("/", 3)__        _        return splits[2]__    };extract,the,blob,name,from,a,uri,like,https,myservice,azure,net,container,path,to,myfile,it,should,remove,the,container,part,first,part,of,the,path,and,gives,path,to,myfile,param,uri,uri,to,parse,return,the,blob,name,relative,to,the,container;static,string,blob,name,from,uri,uri,uri,final,string,path,uri,get,path,final,string,splits,path,split,3,return,splits,2
