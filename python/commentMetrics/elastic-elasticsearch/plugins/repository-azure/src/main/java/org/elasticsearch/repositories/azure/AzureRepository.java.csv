commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;4;// only use for testing ;// only use for testing @Override protected BlobStore getBlobStore() {     return super.getBlobStore(). }
true;protected;0;9;/**  * {@inheritDoc}  */ ;/**  * {@inheritDoc}  */ @Override protected AzureBlobStore createBlobStore() throws URISyntaxException, StorageException {     final AzureBlobStore blobStore = new AzureBlobStore(metadata, storageService).     logger.debug((org.apache.logging.log4j.util.Supplier<?>) () -> new ParameterizedMessage("using container [{}], chunk_size [{}], compress [{}], base_path [{}]", blobStore, chunkSize, isCompress(), basePath)).     return blobStore. }
false;protected;0;4;;@Override protected BlobPath basePath() {     return basePath. }
true;protected;0;4;/**  * {@inheritDoc}  */ ;/**  * {@inheritDoc}  */ @Override protected ByteSizeValue chunkSize() {     return chunkSize. }
false;public;3;13;;@Override public void initializeSnapshot(SnapshotId snapshotId, List<IndexId> indices, MetaData clusterMetadata) {     try {         final AzureBlobStore blobStore = (AzureBlobStore) blobStore().         if (blobStore.containerExist() == false) {             throw new IllegalArgumentException("The bucket [" + blobStore + "] does not exist. Please create it before " + " creating an azure snapshot repository backed by it.").         }     } catch (URISyntaxException | StorageException e) {         throw new SnapshotCreationException(metadata.name(), snapshotId, e).     }     super.initializeSnapshot(snapshotId, indices, clusterMetadata). }
false;public;0;4;;@Override public boolean isReadOnly() {     return readonly. }
