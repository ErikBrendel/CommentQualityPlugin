commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;@Override public boolean blobExists(String blobName) {     logger.trace("blobExists({})", blobName).     try {         return blobStore.blobExists(buildKey(blobName)).     } catch (URISyntaxException | StorageException e) {         logger.warn("can not access [{}] in container {{}}: {}", blobName, blobStore, e.getMessage()).     }     return false. }
false;public;1;25;;@Override public InputStream readBlob(String blobName) throws IOException {     logger.trace("readBlob({})", blobName).     if (blobStore.getLocationMode() == LocationMode.SECONDARY_ONLY && !blobExists(blobName)) {         // stream to it.         throw new NoSuchFileException("Blob [" + blobName + "] does not exist").     }     try {         return blobStore.getInputStream(buildKey(blobName)).     } catch (StorageException e) {         if (e.getHttpStatusCode() == HttpURLConnection.HTTP_NOT_FOUND) {             throw new NoSuchFileException(e.getMessage()).         }         throw new IOException(e).     } catch (URISyntaxException e) {         throw new IOException(e).     } }
false;public;4;10;;@Override public void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException {     logger.trace("writeBlob({}, stream, {})", buildKey(blobName), blobSize).     try {         blobStore.writeBlob(buildKey(blobName), inputStream, blobSize, failIfAlreadyExists).     } catch (URISyntaxException | StorageException e) {         throw new IOException("Can not write blob " + blobName, e).     } }
false;public;4;4;;@Override public void writeBlobAtomic(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException {     writeBlob(blobName, inputStream, blobSize, failIfAlreadyExists). }
false;public;1;15;;@Override public void deleteBlob(String blobName) throws IOException {     logger.trace("deleteBlob({})", blobName).     try {         blobStore.deleteBlob(buildKey(blobName)).     } catch (StorageException e) {         if (e.getHttpStatusCode() == HttpURLConnection.HTTP_NOT_FOUND) {             throw new NoSuchFileException(e.getMessage()).         }         throw new IOException(e).     } catch (URISyntaxException e) {         throw new IOException(e).     } }
false;public;1;11;;@Override public Map<String, BlobMetaData> listBlobsByPrefix(@Nullable String prefix) throws IOException {     logger.trace("listBlobsByPrefix({})", prefix).     try {         return blobStore.listBlobsByPrefix(keyPath, prefix).     } catch (URISyntaxException | StorageException e) {         logger.warn("can not access [{}] in container {{}}: {}", prefix, blobStore, e.getMessage()).         throw new IOException(e).     } }
false;public;0;5;;@Override public Map<String, BlobMetaData> listBlobs() throws IOException {     logger.trace("listBlobs()").     return listBlobsByPrefix(null). }
false;protected;1;3;;protected String buildKey(String blobName) {     return keyPath + (blobName == null ? "" : blobName). }
