commented;modifiers;parameterAmount;loc;comment;code
false;public;2;5;;@Override public Map<String, Repository.Factory> getRepositories(Environment env, NamedXContentRegistry namedXContentRegistry) {     return Collections.singletonMap(AzureRepository.TYPE, (metadata) -> new AzureRepository(metadata, env, namedXContentRegistry, azureStoreService)). }
false;public;0;13;;@Override public List<Setting<?>> getSettings() {     return Arrays.asList(AzureStorageSettings.ACCOUNT_SETTING, AzureStorageSettings.KEY_SETTING, AzureStorageSettings.ENDPOINT_SUFFIX_SETTING, AzureStorageSettings.TIMEOUT_SETTING, AzureStorageSettings.MAX_RETRIES_SETTING, AzureStorageSettings.PROXY_TYPE_SETTING, AzureStorageSettings.PROXY_HOST_SETTING, AzureStorageSettings.PROXY_PORT_SETTING). }
false;public;1;9;;@Override public void reload(Settings settings) {     // secure settings should be readable     final Map<String, AzureStorageSettings> clientsSettings = AzureStorageSettings.load(settings).     if (clientsSettings.isEmpty()) {         throw new SettingsException("If you want to use an azure repository, you need to define a client configuration.").     }     azureStoreService.refreshAndClearCache(clientsSettings). }
