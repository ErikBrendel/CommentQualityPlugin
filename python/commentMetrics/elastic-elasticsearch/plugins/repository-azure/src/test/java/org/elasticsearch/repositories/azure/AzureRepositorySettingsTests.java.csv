commented;modifiers;parameterAmount;loc;comment;code
false;private;1;11;;private AzureRepository azureRepository(Settings settings) {     Settings internalSettings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toAbsolutePath()).putList(Environment.PATH_DATA_SETTING.getKey(), tmpPaths()).put(settings).build().     final AzureRepository azureRepository = new AzureRepository(new RepositoryMetaData("foo", "azure", internalSettings), TestEnvironment.newEnvironment(internalSettings), NamedXContentRegistry.EMPTY, mock(AzureStorageService.class)).     assertThat(azureRepository.getBlobStore(), is(nullValue())).     return azureRepository. }
false;public;0;3;;public void testReadonlyDefault() {     assertThat(azureRepository(Settings.EMPTY).isReadOnly(), is(false)). }
false;public;0;5;;public void testReadonlyDefaultAndReadonlyOn() {     assertThat(azureRepository(Settings.builder().put("readonly", true).build()).isReadOnly(), is(true)). }
false;public;0;5;;public void testReadonlyWithPrimaryOnly() {     assertThat(azureRepository(Settings.builder().put(AzureRepository.Repository.LOCATION_MODE_SETTING.getKey(), LocationMode.PRIMARY_ONLY.name()).build()).isReadOnly(), is(false)). }
false;public;0;6;;public void testReadonlyWithPrimaryOnlyAndReadonlyOn() {     assertThat(azureRepository(Settings.builder().put(AzureRepository.Repository.LOCATION_MODE_SETTING.getKey(), LocationMode.PRIMARY_ONLY.name()).put("readonly", true).build()).isReadOnly(), is(true)). }
false;public;0;6;;public void testReadonlyWithSecondaryOnlyAndReadonlyOn() {     assertThat(azureRepository(Settings.builder().put(AzureRepository.Repository.LOCATION_MODE_SETTING.getKey(), LocationMode.SECONDARY_ONLY.name()).put("readonly", true).build()).isReadOnly(), is(true)). }
false;public;0;6;;public void testReadonlyWithSecondaryOnlyAndReadonlyOff() {     assertThat(azureRepository(Settings.builder().put(AzureRepository.Repository.LOCATION_MODE_SETTING.getKey(), LocationMode.SECONDARY_ONLY.name()).put("readonly", false).build()).isReadOnly(), is(false)). }
false;public;0;6;;public void testReadonlyWithPrimaryAndSecondaryOnlyAndReadonlyOn() {     assertThat(azureRepository(Settings.builder().put(AzureRepository.Repository.LOCATION_MODE_SETTING.getKey(), LocationMode.PRIMARY_THEN_SECONDARY.name()).put("readonly", true).build()).isReadOnly(), is(true)). }
false;public;0;6;;public void testReadonlyWithPrimaryAndSecondaryOnlyAndReadonlyOff() {     assertThat(azureRepository(Settings.builder().put(AzureRepository.Repository.LOCATION_MODE_SETTING.getKey(), LocationMode.PRIMARY_THEN_SECONDARY.name()).put("readonly", false).build()).isReadOnly(), is(false)). }
false;public;0;25;;public void testChunkSize() {     // default chunk size     AzureRepository azureRepository = azureRepository(Settings.EMPTY).     assertEquals(AzureStorageService.MAX_CHUNK_SIZE, azureRepository.chunkSize()).     // chunk size in settings     int size = randomIntBetween(1, 256).     azureRepository = azureRepository(Settings.builder().put("chunk_size", size + "mb").build()).     assertEquals(new ByteSizeValue(size, ByteSizeUnit.MB), azureRepository.chunkSize()).     // zero bytes is not allowed     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> azureRepository(Settings.builder().put("chunk_size", "0").build())).     assertEquals("failed to parse value [0] for setting [chunk_size], must be >= [1b]", e.getMessage()).     // negative bytes not allowed     e = expectThrows(IllegalArgumentException.class, () -> azureRepository(Settings.builder().put("chunk_size", "-1").build())).     assertEquals("failed to parse value [-1] for setting [chunk_size], must be >= [1b]", e.getMessage()).     // greater than max chunk size not allowed     e = expectThrows(IllegalArgumentException.class, () -> azureRepository(Settings.builder().put("chunk_size", "257mb").build())).     assertEquals("failed to parse value [257mb] for setting [chunk_size], must be <= [256mb]", e.getMessage()). }
