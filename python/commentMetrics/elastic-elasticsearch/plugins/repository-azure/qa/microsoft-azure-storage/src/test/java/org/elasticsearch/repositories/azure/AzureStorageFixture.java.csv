# id;timestamp;commentText;codeText;commentWords;codeWords
AzureStorageFixture -> private AzureStorageFixture(final String workingDir, final String container);1528980219;Creates a {@link AzureStorageFixture} with a custom endpoint;private AzureStorageFixture(final String workingDir, final String container) {_        super(workingDir)__        this.containers.put(container, new Container(container))__        this.handlers = defaultHandlers(containers)__    };creates,a,link,azure,storage,fixture,with,a,custom,endpoint;private,azure,storage,fixture,final,string,working,dir,final,string,container,super,working,dir,this,containers,put,container,new,container,container,this,handlers,default,handlers,containers
AzureStorageFixture -> private AzureStorageFixture(final String workingDir, final String container);1531179852;Creates a {@link AzureStorageFixture} with a custom endpoint;private AzureStorageFixture(final String workingDir, final String container) {_        super(workingDir)__        this.containers.put(container, new Container(container))__        this.handlers = defaultHandlers(containers)__    };creates,a,link,azure,storage,fixture,with,a,custom,endpoint;private,azure,storage,fixture,final,string,working,dir,final,string,container,super,working,dir,this,containers,put,container,new,container,container,this,handlers,default,handlers,containers
AzureStorageFixture -> private static Response newError(final long requestId,                                      final RestStatus status,                                      final String code,                                      final String message);1528980219;Azure Error_<p>_https://docs.microsoft.com/en-us/rest/api/storageservices/status-and-error-codes2;private static Response newError(final long requestId,_                                     final RestStatus status,_                                     final String code,_                                     final String message) {__        final StringBuilder response = new StringBuilder()__        response.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")__        response.append("<Error>")__        response.append("<Code>").append(code).append("</Code>")__        response.append("<Message>").append(message).append("</Message>")__        response.append("</Error>")___        final Map<String, String> headers = new HashMap<>(contentType("application/xml"))__        headers.put("x-ms-request-id", String.valueOf(requestId))__        headers.put("x-ms-error-code", code)___        return new Response(status.getStatus(), headers, response.toString().getBytes(UTF_8))__    };azure,error,p,https,docs,microsoft,com,en,us,rest,api,storageservices,status,and,error,codes2;private,static,response,new,error,final,long,request,id,final,rest,status,status,final,string,code,final,string,message,final,string,builder,response,new,string,builder,response,append,xml,version,1,0,encoding,utf,8,response,append,error,response,append,code,append,code,append,code,response,append,message,append,message,append,message,response,append,error,final,map,string,string,headers,new,hash,map,content,type,application,xml,headers,put,x,ms,request,id,string,value,of,request,id,headers,put,x,ms,error,code,code,return,new,response,status,get,status,headers,response,to,string,get,bytes
AzureStorageFixture -> private static Response newError(final long requestId,                                      final RestStatus status,                                      final String code,                                      final String message);1531179852;Azure Error_<p>_https://docs.microsoft.com/en-us/rest/api/storageservices/status-and-error-codes2;private static Response newError(final long requestId,_                                     final RestStatus status,_                                     final String code,_                                     final String message) {__        final StringBuilder response = new StringBuilder()__        response.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")__        response.append("<Error>")__        response.append("<Code>").append(code).append("</Code>")__        response.append("<Message>").append(message).append("</Message>")__        response.append("</Error>")___        final Map<String, String> headers = new HashMap<>(contentType("application/xml"))__        headers.put("x-ms-request-id", String.valueOf(requestId))__        headers.put("x-ms-error-code", code)___        return new Response(status.getStatus(), headers, response.toString().getBytes(UTF_8))__    };azure,error,p,https,docs,microsoft,com,en,us,rest,api,storageservices,status,and,error,codes2;private,static,response,new,error,final,long,request,id,final,rest,status,status,final,string,code,final,string,message,final,string,builder,response,new,string,builder,response,append,xml,version,1,0,encoding,utf,8,response,append,error,response,append,code,append,code,append,code,response,append,message,append,message,append,message,response,append,error,final,map,string,string,headers,new,hash,map,content,type,application,xml,headers,put,x,ms,request,id,string,value,of,request,id,headers,put,x,ms,error,code,code,return,new,response,status,get,status,headers,response,to,string,get,bytes
AzureStorageFixture -> private static List<String> objectsPaths(final String path);1528980219;Decline a path like "http://host:port/{bucket}" into 10 derived paths like:_- http://host:port/{bucket}/{path0}_- http://host:port/{bucket}/{path0}/{path1}_- http://host:port/{bucket}/{path0}/{path1}/{path2}_- etc;private static List<String> objectsPaths(final String path) {_        final List<String> paths = new ArrayList<>()__        String p = path__        for (int i = 0_ i < 10_ i++) {_            p = p + "/{path" + i + "}"__            paths.add(p)__        }_        return paths__    };decline,a,path,like,http,host,port,bucket,into,10,derived,paths,like,http,host,port,bucket,path0,http,host,port,bucket,path0,path1,http,host,port,bucket,path0,path1,path2,etc;private,static,list,string,objects,paths,final,string,path,final,list,string,paths,new,array,list,string,p,path,for,int,i,0,i,10,i,p,p,path,i,paths,add,p,return,paths
AzureStorageFixture -> private static List<String> objectsPaths(final String path);1531179852;Decline a path like "http://host:port/{bucket}" into 10 derived paths like:_- http://host:port/{bucket}/{path0}_- http://host:port/{bucket}/{path0}/{path1}_- http://host:port/{bucket}/{path0}/{path1}/{path2}_- etc;private static List<String> objectsPaths(final String path) {_        final List<String> paths = new ArrayList<>()__        String p = path__        for (int i = 0_ i < 10_ i++) {_            p = p + "/{path" + i + "}"__            paths.add(p)__        }_        return paths__    };decline,a,path,like,http,host,port,bucket,into,10,derived,paths,like,http,host,port,bucket,path0,http,host,port,bucket,path0,path1,http,host,port,bucket,path0,path1,path2,etc;private,static,list,string,objects,paths,final,string,path,final,list,string,paths,new,array,list,string,p,path,for,int,i,0,i,10,i,p,p,path,i,paths,add,p,return,paths
AzureStorageFixture -> private static String objectName(final Map<String, String> params);1528980219;Retrieves the object name from all derived paths named {pathX} where 0 <= X < 10._<p>_This is the counterpart of {@link #objectsPaths(String)};private static String objectName(final Map<String, String> params) {_        final StringBuilder name = new StringBuilder()__        for (int i = 0_ i < 10_ i++) {_            String value = params.getOrDefault("path" + i, null)__            if (value != null) {_                if (name.length() > 0) {_                    name.append('/')__                }_                name.append(value)__            }_        }_        return name.toString()__    };retrieves,the,object,name,from,all,derived,paths,named,path,x,where,0,x,10,p,this,is,the,counterpart,of,link,objects,paths,string;private,static,string,object,name,final,map,string,string,params,final,string,builder,name,new,string,builder,for,int,i,0,i,10,i,string,value,params,get,or,default,path,i,null,if,value,null,if,name,length,0,name,append,name,append,value,return,name,to,string
AzureStorageFixture -> private static String objectName(final Map<String, String> params);1531179852;Retrieves the object name from all derived paths named {pathX} where 0 <= X < 10._<p>_This is the counterpart of {@link #objectsPaths(String)};private static String objectName(final Map<String, String> params) {_        final StringBuilder name = new StringBuilder()__        for (int i = 0_ i < 10_ i++) {_            String value = params.getOrDefault("path" + i, null)__            if (value != null) {_                if (name.length() > 0) {_                    name.append('/')__                }_                name.append(value)__            }_        }_        return name.toString()__    };retrieves,the,object,name,from,all,derived,paths,named,path,x,where,0,x,10,p,this,is,the,counterpart,of,link,objects,paths,string;private,static,string,object,name,final,map,string,string,params,final,string,builder,name,new,string,builder,for,int,i,0,i,10,i,string,value,params,get,or,default,path,i,null,if,value,null,if,name,length,0,name,append,name,append,value,return,name,to,string
AzureStorageFixture -> private static PathTrie<RequestHandler> defaultHandlers(final Map<String, Container> containers);1528980219;Builds the default request handlers;private static PathTrie<RequestHandler> defaultHandlers(final Map<String, Container> containers) {_        final PathTrie<RequestHandler> handlers = new PathTrie<>(RestUtils.REST_DECODER)___        _        _        _        objectsPaths("HEAD /{container}").forEach(path ->_            handlers.insert(path, (request) -> {_                final String containerName = request.getParam("container")___                final Container container = containers.get(containerName)__                if (container == null) {_                    return newContainerNotFoundError(request.getId())__                }__                final String blobName = objectName(request.getParameters())__                for (Map.Entry<String, byte[]> object : container.objects.entrySet()) {_                    if (object.getKey().equals(blobName)) {_                        Map<String, String> responseHeaders = new HashMap<>()__                        responseHeaders.put("x-ms-blob-content-length", String.valueOf(object.getValue().length))__                        responseHeaders.put("x-ms-blob-type", "blockblob")__                        return new Response(RestStatus.OK.getStatus(), responseHeaders, EMPTY_BYTE)__                    }_                }_                return newBlobNotFoundError(request.getId())__            })_        )___        _        _        _        objectsPaths("PUT /{container}").forEach(path ->_            handlers.insert(path, (request) -> {_                final String destContainerName = request.getParam("container")__                final String destBlobName = objectName(request.getParameters())___                final Container destContainer = containers.get(destContainerName)__                if (destContainer == null) {_                    return newContainerNotFoundError(request.getId())__                }__                byte[] existingBytes = destContainer.objects.putIfAbsent(destBlobName, request.getBody())__                if (existingBytes != null) {_                    return newBlobAlreadyExistsError(request.getId())__                }__                return new Response(RestStatus.CREATED.getStatus(), TEXT_PLAIN_CONTENT_TYPE, EMPTY_BYTE)_            })_        )___        _        _        _        objectsPaths("GET /{container}").forEach(path ->_            handlers.insert(path, (request) -> {_                final String containerName = request.getParam("container")___                final Container container = containers.get(containerName)__                if (container == null) {_                    return newContainerNotFoundError(request.getId())__                }__                final String blobName = objectName(request.getParameters())__                if (container.objects.containsKey(blobName)) {_                    Map<String, String> responseHeaders = new HashMap<>(contentType("application/octet-stream"))__                    responseHeaders.put("x-ms-copy-status", "success")__                    responseHeaders.put("x-ms-blob-type", "blockblob")__                    return new Response(RestStatus.OK.getStatus(), responseHeaders, container.objects.get(blobName))___                }_                return newBlobNotFoundError(request.getId())__            })_        )___        _        _        _        objectsPaths("DELETE /{container}").forEach(path ->_            handlers.insert(path, (request) -> {_                final String containerName = request.getParam("container")___                final Container container = containers.get(containerName)__                if (container == null) {_                    return newContainerNotFoundError(request.getId())__                }__                final String blobName = objectName(request.getParameters())__                if (container.objects.remove(blobName) != null) {_                    return new Response(RestStatus.ACCEPTED.getStatus(), TEXT_PLAIN_CONTENT_TYPE, EMPTY_BYTE)__                }_                return newBlobNotFoundError(request.getId())__            })_        )___        _        _        _        handlers.insert("GET /{container}/", (request) -> {_            final String containerName = request.getParam("container")___            final Container container = containers.get(containerName)__            if (container == null) {_                return newContainerNotFoundError(request.getId())__            }__            final String prefix = request.getParam("prefix")__            return newEnumerationResultsResponse(request.getId(), container, prefix)__        })___        _        _        _        handlers.insert("HEAD /{container}", (request) -> {_            String container = request.getParam("container")__            if (Strings.hasText(container) && containers.containsKey(container)) {_                return new Response(RestStatus.OK.getStatus(), TEXT_PLAIN_CONTENT_TYPE, EMPTY_BYTE)__            } else {_                return newContainerNotFoundError(request.getId())__            }_        })___        return handlers__    };builds,the,default,request,handlers;private,static,path,trie,request,handler,default,handlers,final,map,string,container,containers,final,path,trie,request,handler,handlers,new,path,trie,rest,utils,objects,paths,head,container,for,each,path,handlers,insert,path,request,final,string,container,name,request,get,param,container,final,container,container,containers,get,container,name,if,container,null,return,new,container,not,found,error,request,get,id,final,string,blob,name,object,name,request,get,parameters,for,map,entry,string,byte,object,container,objects,entry,set,if,object,get,key,equals,blob,name,map,string,string,response,headers,new,hash,map,response,headers,put,x,ms,blob,content,length,string,value,of,object,get,value,length,response,headers,put,x,ms,blob,type,blockblob,return,new,response,rest,status,ok,get,status,response,headers,return,new,blob,not,found,error,request,get,id,objects,paths,put,container,for,each,path,handlers,insert,path,request,final,string,dest,container,name,request,get,param,container,final,string,dest,blob,name,object,name,request,get,parameters,final,container,dest,container,containers,get,dest,container,name,if,dest,container,null,return,new,container,not,found,error,request,get,id,byte,existing,bytes,dest,container,objects,put,if,absent,dest,blob,name,request,get,body,if,existing,bytes,null,return,new,blob,already,exists,error,request,get,id,return,new,response,rest,status,created,get,status,objects,paths,get,container,for,each,path,handlers,insert,path,request,final,string,container,name,request,get,param,container,final,container,container,containers,get,container,name,if,container,null,return,new,container,not,found,error,request,get,id,final,string,blob,name,object,name,request,get,parameters,if,container,objects,contains,key,blob,name,map,string,string,response,headers,new,hash,map,content,type,application,octet,stream,response,headers,put,x,ms,copy,status,success,response,headers,put,x,ms,blob,type,blockblob,return,new,response,rest,status,ok,get,status,response,headers,container,objects,get,blob,name,return,new,blob,not,found,error,request,get,id,objects,paths,delete,container,for,each,path,handlers,insert,path,request,final,string,container,name,request,get,param,container,final,container,container,containers,get,container,name,if,container,null,return,new,container,not,found,error,request,get,id,final,string,blob,name,object,name,request,get,parameters,if,container,objects,remove,blob,name,null,return,new,response,rest,status,accepted,get,status,return,new,blob,not,found,error,request,get,id,handlers,insert,get,container,request,final,string,container,name,request,get,param,container,final,container,container,containers,get,container,name,if,container,null,return,new,container,not,found,error,request,get,id,final,string,prefix,request,get,param,prefix,return,new,enumeration,results,response,request,get,id,container,prefix,handlers,insert,head,container,request,string,container,request,get,param,container,if,strings,has,text,container,containers,contains,key,container,return,new,response,rest,status,ok,get,status,else,return,new,container,not,found,error,request,get,id,return,handlers
AzureStorageFixture -> private static PathTrie<RequestHandler> defaultHandlers(final Map<String, Container> containers);1531179852;Builds the default request handlers;private static PathTrie<RequestHandler> defaultHandlers(final Map<String, Container> containers) {_        final PathTrie<RequestHandler> handlers = new PathTrie<>(RestUtils.REST_DECODER)___        _        _        _        objectsPaths("HEAD /{container}").forEach(path ->_            handlers.insert(path, (request) -> {_                final String containerName = request.getParam("container")___                final Container container = containers.get(containerName)__                if (container == null) {_                    return newContainerNotFoundError(request.getId())__                }__                final String blobName = objectName(request.getParameters())__                for (Map.Entry<String, byte[]> object : container.objects.entrySet()) {_                    if (object.getKey().equals(blobName)) {_                        Map<String, String> responseHeaders = new HashMap<>()__                        responseHeaders.put("x-ms-blob-content-length", String.valueOf(object.getValue().length))__                        responseHeaders.put("x-ms-blob-type", "blockblob")__                        return new Response(RestStatus.OK.getStatus(), responseHeaders, EMPTY_BYTE)__                    }_                }_                return newBlobNotFoundError(request.getId())__            })_        )___        _        _        _        objectsPaths("PUT /{container}").forEach(path ->_            handlers.insert(path, (request) -> {_                final String destContainerName = request.getParam("container")__                final String destBlobName = objectName(request.getParameters())__                final String ifNoneMatch = request.getHeader("If-None-Match")___                final Container destContainer = containers.get(destContainerName)__                if (destContainer == null) {_                    return newContainerNotFoundError(request.getId())__                }__                if ("*".equals(ifNoneMatch)) {_                    byte[] existingBytes = destContainer.objects.putIfAbsent(destBlobName, request.getBody())__                    if (existingBytes != null) {_                        return newBlobAlreadyExistsError(request.getId())__                    }_                } else {_                    destContainer.objects.put(destBlobName, request.getBody())__                }__                return new Response(RestStatus.CREATED.getStatus(), TEXT_PLAIN_CONTENT_TYPE, EMPTY_BYTE)_            })_        )___        _        _        _        objectsPaths("GET /{container}").forEach(path ->_            handlers.insert(path, (request) -> {_                final String containerName = request.getParam("container")___                final Container container = containers.get(containerName)__                if (container == null) {_                    return newContainerNotFoundError(request.getId())__                }__                final String blobName = objectName(request.getParameters())__                if (container.objects.containsKey(blobName)) {_                    Map<String, String> responseHeaders = new HashMap<>(contentType("application/octet-stream"))__                    responseHeaders.put("x-ms-copy-status", "success")__                    responseHeaders.put("x-ms-blob-type", "blockblob")__                    return new Response(RestStatus.OK.getStatus(), responseHeaders, container.objects.get(blobName))___                }_                return newBlobNotFoundError(request.getId())__            })_        )___        _        _        _        objectsPaths("DELETE /{container}").forEach(path ->_            handlers.insert(path, (request) -> {_                final String containerName = request.getParam("container")___                final Container container = containers.get(containerName)__                if (container == null) {_                    return newContainerNotFoundError(request.getId())__                }__                final String blobName = objectName(request.getParameters())__                if (container.objects.remove(blobName) != null) {_                    return new Response(RestStatus.ACCEPTED.getStatus(), TEXT_PLAIN_CONTENT_TYPE, EMPTY_BYTE)__                }_                return newBlobNotFoundError(request.getId())__            })_        )___        _        _        _        handlers.insert("GET /{container}/", (request) -> {_            final String containerName = request.getParam("container")___            final Container container = containers.get(containerName)__            if (container == null) {_                return newContainerNotFoundError(request.getId())__            }__            final String prefix = request.getParam("prefix")__            return newEnumerationResultsResponse(request.getId(), container, prefix)__        })___        _        _        _        handlers.insert("HEAD /{container}", (request) -> {_            String container = request.getParam("container")__            if (Strings.hasText(container) && containers.containsKey(container)) {_                return new Response(RestStatus.OK.getStatus(), TEXT_PLAIN_CONTENT_TYPE, EMPTY_BYTE)__            } else {_                return newContainerNotFoundError(request.getId())__            }_        })___        return handlers__    };builds,the,default,request,handlers;private,static,path,trie,request,handler,default,handlers,final,map,string,container,containers,final,path,trie,request,handler,handlers,new,path,trie,rest,utils,objects,paths,head,container,for,each,path,handlers,insert,path,request,final,string,container,name,request,get,param,container,final,container,container,containers,get,container,name,if,container,null,return,new,container,not,found,error,request,get,id,final,string,blob,name,object,name,request,get,parameters,for,map,entry,string,byte,object,container,objects,entry,set,if,object,get,key,equals,blob,name,map,string,string,response,headers,new,hash,map,response,headers,put,x,ms,blob,content,length,string,value,of,object,get,value,length,response,headers,put,x,ms,blob,type,blockblob,return,new,response,rest,status,ok,get,status,response,headers,return,new,blob,not,found,error,request,get,id,objects,paths,put,container,for,each,path,handlers,insert,path,request,final,string,dest,container,name,request,get,param,container,final,string,dest,blob,name,object,name,request,get,parameters,final,string,if,none,match,request,get,header,if,none,match,final,container,dest,container,containers,get,dest,container,name,if,dest,container,null,return,new,container,not,found,error,request,get,id,if,equals,if,none,match,byte,existing,bytes,dest,container,objects,put,if,absent,dest,blob,name,request,get,body,if,existing,bytes,null,return,new,blob,already,exists,error,request,get,id,else,dest,container,objects,put,dest,blob,name,request,get,body,return,new,response,rest,status,created,get,status,objects,paths,get,container,for,each,path,handlers,insert,path,request,final,string,container,name,request,get,param,container,final,container,container,containers,get,container,name,if,container,null,return,new,container,not,found,error,request,get,id,final,string,blob,name,object,name,request,get,parameters,if,container,objects,contains,key,blob,name,map,string,string,response,headers,new,hash,map,content,type,application,octet,stream,response,headers,put,x,ms,copy,status,success,response,headers,put,x,ms,blob,type,blockblob,return,new,response,rest,status,ok,get,status,response,headers,container,objects,get,blob,name,return,new,blob,not,found,error,request,get,id,objects,paths,delete,container,for,each,path,handlers,insert,path,request,final,string,container,name,request,get,param,container,final,container,container,containers,get,container,name,if,container,null,return,new,container,not,found,error,request,get,id,final,string,blob,name,object,name,request,get,parameters,if,container,objects,remove,blob,name,null,return,new,response,rest,status,accepted,get,status,return,new,blob,not,found,error,request,get,id,handlers,insert,get,container,request,final,string,container,name,request,get,param,container,final,container,container,containers,get,container,name,if,container,null,return,new,container,not,found,error,request,get,id,final,string,prefix,request,get,param,prefix,return,new,enumeration,results,response,request,get,id,container,prefix,handlers,insert,head,container,request,string,container,request,get,param,container,if,strings,has,text,container,containers,contains,key,container,return,new,response,rest,status,ok,get,status,else,return,new,container,not,found,error,request,get,id,return,handlers
AzureStorageFixture -> private static Response newEnumerationResultsResponse(final long requestId, final Container container, final String prefix);1528980219;Azure EnumerationResults Response;private static Response newEnumerationResultsResponse(final long requestId, final Container container, final String prefix) {_        final String id = Long.toString(requestId)__        final StringBuilder response = new StringBuilder()__        response.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>")__        response.append("<EnumerationResults ServiceEndpoint=\"http://myaccount.blob.core.windows.net/\"")__        response.append(" ContainerName=\"").append(container.name).append("\">")__        if (prefix != null) {_            response.append("<Prefix>").append(prefix).append("</Prefix>")__        } else {_            response.append("<Prefix/>")__        }_        response.append("<MaxResults>").append(container.objects.size()).append("</MaxResults>")__        response.append("<Blobs>")___        int count = 0__        for (Map.Entry<String, byte[]> object : container.objects.entrySet()) {_            String objectName = object.getKey()__            if (prefix == null || objectName.startsWith(prefix)) {_                response.append("<Blob>")__                response.append("<Name>").append(objectName).append("</Name>")__                response.append("<Properties>")__                response.append("<Content-Length>").append(object.getValue().length).append("</Content-Length>")__                response.append("<CopyId>").append(count++).append("</CopyId>")__                response.append("<CopyStatus>success</CopyStatus>")__                response.append("<BlobType>BlockBlob</BlobType>")__                response.append("</Properties>")__                response.append("</Blob>")__            }_        }__        response.append("</Blobs>")__        response.append("<NextMarker />")__        response.append("</EnumerationResults>")___        final Map<String, String> headers = new HashMap<>(contentType("application/xml"))__        headers.put("x-ms-request-id", id)___        return new Response(RestStatus.OK.getStatus(), headers, response.toString().getBytes(UTF_8))__    };azure,enumeration,results,response;private,static,response,new,enumeration,results,response,final,long,request,id,final,container,container,final,string,prefix,final,string,id,long,to,string,request,id,final,string,builder,response,new,string,builder,response,append,xml,version,1,0,encoding,utf,8,response,append,enumeration,results,service,endpoint,http,myaccount,blob,core,windows,net,response,append,container,name,append,container,name,append,if,prefix,null,response,append,prefix,append,prefix,append,prefix,else,response,append,prefix,response,append,max,results,append,container,objects,size,append,max,results,response,append,blobs,int,count,0,for,map,entry,string,byte,object,container,objects,entry,set,string,object,name,object,get,key,if,prefix,null,object,name,starts,with,prefix,response,append,blob,response,append,name,append,object,name,append,name,response,append,properties,response,append,content,length,append,object,get,value,length,append,content,length,response,append,copy,id,append,count,append,copy,id,response,append,copy,status,success,copy,status,response,append,blob,type,block,blob,blob,type,response,append,properties,response,append,blob,response,append,blobs,response,append,next,marker,response,append,enumeration,results,final,map,string,string,headers,new,hash,map,content,type,application,xml,headers,put,x,ms,request,id,id,return,new,response,rest,status,ok,get,status,headers,response,to,string,get,bytes
AzureStorageFixture -> private static Response newEnumerationResultsResponse(final long requestId, final Container container, final String prefix);1531179852;Azure EnumerationResults Response;private static Response newEnumerationResultsResponse(final long requestId, final Container container, final String prefix) {_        final String id = Long.toString(requestId)__        final StringBuilder response = new StringBuilder()__        response.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>")__        response.append("<EnumerationResults ServiceEndpoint=\"http://myaccount.blob.core.windows.net/\"")__        response.append(" ContainerName=\"").append(container.name).append("\">")__        if (prefix != null) {_            response.append("<Prefix>").append(prefix).append("</Prefix>")__        } else {_            response.append("<Prefix/>")__        }_        response.append("<MaxResults>").append(container.objects.size()).append("</MaxResults>")__        response.append("<Blobs>")___        int count = 0__        for (Map.Entry<String, byte[]> object : container.objects.entrySet()) {_            String objectName = object.getKey()__            if (prefix == null || objectName.startsWith(prefix)) {_                response.append("<Blob>")__                response.append("<Name>").append(objectName).append("</Name>")__                response.append("<Properties>")__                response.append("<Content-Length>").append(object.getValue().length).append("</Content-Length>")__                response.append("<CopyId>").append(count++).append("</CopyId>")__                response.append("<CopyStatus>success</CopyStatus>")__                response.append("<BlobType>BlockBlob</BlobType>")__                response.append("</Properties>")__                response.append("</Blob>")__            }_        }__        response.append("</Blobs>")__        response.append("<NextMarker />")__        response.append("</EnumerationResults>")___        final Map<String, String> headers = new HashMap<>(contentType("application/xml"))__        headers.put("x-ms-request-id", id)___        return new Response(RestStatus.OK.getStatus(), headers, response.toString().getBytes(UTF_8))__    };azure,enumeration,results,response;private,static,response,new,enumeration,results,response,final,long,request,id,final,container,container,final,string,prefix,final,string,id,long,to,string,request,id,final,string,builder,response,new,string,builder,response,append,xml,version,1,0,encoding,utf,8,response,append,enumeration,results,service,endpoint,http,myaccount,blob,core,windows,net,response,append,container,name,append,container,name,append,if,prefix,null,response,append,prefix,append,prefix,append,prefix,else,response,append,prefix,response,append,max,results,append,container,objects,size,append,max,results,response,append,blobs,int,count,0,for,map,entry,string,byte,object,container,objects,entry,set,string,object,name,object,get,key,if,prefix,null,object,name,starts,with,prefix,response,append,blob,response,append,name,append,object,name,append,name,response,append,properties,response,append,content,length,append,object,get,value,length,append,content,length,response,append,copy,id,append,count,append,copy,id,response,append,copy,status,success,copy,status,response,append,blob,type,block,blob,blob,type,response,append,properties,response,append,blob,response,append,blobs,response,append,next,marker,response,append,enumeration,results,final,map,string,string,headers,new,hash,map,content,type,application,xml,headers,put,x,ms,request,id,id,return,new,response,rest,status,ok,get,status,headers,response,to,string,get,bytes
