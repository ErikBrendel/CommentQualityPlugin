commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> getPlugins() {     return pluginList(HdfsPlugin.class). }
false;public;0;102;;public void testSimpleWorkflow() {     assumeFalse("https://github.com/elastic/elasticsearch/issues/31498", JavaVersion.current().equals(JavaVersion.parse("11"))).     Client client = client().     AcknowledgedResponse putRepositoryResponse = client.admin().cluster().preparePutRepository("test-repo").setType("hdfs").setSettings(Settings.builder().put("uri", "hdfs:///").put("conf.fs.AbstractFileSystem.hdfs.impl", TestingFs.class.getName()).put("path", "foo").put("chunk_size", randomIntBetween(100, 1000) + "k").put("compress", randomBoolean())).get().     assertThat(putRepositoryResponse.isAcknowledged(), equalTo(true)).     createIndex("test-idx-1").     createIndex("test-idx-2").     createIndex("test-idx-3").     ensureGreen().     logger.info("--> indexing some data").     for (int i = 0. i < 100. i++) {         client().prepareIndex("test-idx-1", "doc", Integer.toString(i)).setSource("foo", "bar" + i).get().         client().prepareIndex("test-idx-2", "doc", Integer.toString(i)).setSource("foo", "bar" + i).get().         client().prepareIndex("test-idx-3", "doc", Integer.toString(i)).setSource("foo", "bar" + i).get().     }     client().admin().indices().prepareRefresh().get().     assertThat(count(client, "test-idx-1"), equalTo(100L)).     assertThat(count(client, "test-idx-2"), equalTo(100L)).     assertThat(count(client, "test-idx-3"), equalTo(100L)).     logger.info("--> snapshot").     CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap").setWaitForCompletion(true).setIndices("test-idx-*", "-test-idx-3").get().     assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0)).     assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponse.getSnapshotInfo().totalShards())).     assertThat(client.admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap").get().getSnapshots().get(0).state(), equalTo(SnapshotState.SUCCESS)).     logger.info("--> delete some data").     for (int i = 0. i < 50. i++) {         client.prepareDelete("test-idx-1", "doc", Integer.toString(i)).get().     }     for (int i = 50. i < 100. i++) {         client.prepareDelete("test-idx-2", "doc", Integer.toString(i)).get().     }     for (int i = 0. i < 100. i += 2) {         client.prepareDelete("test-idx-3", "doc", Integer.toString(i)).get().     }     client().admin().indices().prepareRefresh().get().     assertThat(count(client, "test-idx-1"), equalTo(50L)).     assertThat(count(client, "test-idx-2"), equalTo(50L)).     assertThat(count(client, "test-idx-3"), equalTo(50L)).     logger.info("--> close indices").     client.admin().indices().prepareClose("test-idx-1", "test-idx-2").get().     logger.info("--> restore all indices from the snapshot").     RestoreSnapshotResponse restoreSnapshotResponse = client.admin().cluster().prepareRestoreSnapshot("test-repo", "test-snap").setWaitForCompletion(true).execute().actionGet().     assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0)).     ensureGreen().     assertThat(count(client, "test-idx-1"), equalTo(100L)).     assertThat(count(client, "test-idx-2"), equalTo(100L)).     assertThat(count(client, "test-idx-3"), equalTo(50L)).     // Test restore after index deletion     logger.info("--> delete indices").     client().admin().indices().prepareDelete("test-idx-1", "test-idx-2").get().     logger.info("--> restore one index after deletion").     restoreSnapshotResponse = client.admin().cluster().prepareRestoreSnapshot("test-repo", "test-snap").setWaitForCompletion(true).setIndices("test-idx-*", "-test-idx-2").execute().actionGet().     assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0)).     ensureGreen().     assertThat(count(client, "test-idx-1"), equalTo(100L)).     ClusterState clusterState = client.admin().cluster().prepareState().get().getState().     assertThat(clusterState.getMetaData().hasIndex("test-idx-1"), equalTo(true)).     assertThat(clusterState.getMetaData().hasIndex("test-idx-2"), equalTo(false)). }
false;public;0;11;;public void testMissingUri() {     try {         client().admin().cluster().preparePutRepository("test-repo").setType("hdfs").setSettings(Settings.EMPTY).get().         fail().     } catch (RepositoryException e) {         assertTrue(e.getCause() instanceof IllegalArgumentException).         assertTrue(e.getCause().getMessage().contains("No 'uri' defined for hdfs")).     } }
false;public;0;12;;public void testEmptyUri() {     try {         client().admin().cluster().preparePutRepository("test-repo").setType("hdfs").setSettings(Settings.builder().put("uri", "/path").build()).get().         fail().     } catch (RepositoryException e) {         assertTrue(e.getCause() instanceof IllegalArgumentException).         assertTrue(e.getCause().getMessage(), e.getCause().getMessage().contains("Invalid scheme [null] specified in uri [/path]")).     } }
false;public;0;12;;public void testNonHdfsUri() {     try {         client().admin().cluster().preparePutRepository("test-repo").setType("hdfs").setSettings(Settings.builder().put("uri", "file:///").build()).get().         fail().     } catch (RepositoryException e) {         assertTrue(e.getCause() instanceof IllegalArgumentException).         assertTrue(e.getCause().getMessage().contains("Invalid scheme [file] specified in uri [file:///]")).     } }
false;public;0;12;;public void testPathSpecifiedInHdfs() {     try {         client().admin().cluster().preparePutRepository("test-repo").setType("hdfs").setSettings(Settings.builder().put("uri", "hdfs:///some/path").build()).get().         fail().     } catch (RepositoryException e) {         assertTrue(e.getCause() instanceof IllegalArgumentException).         assertTrue(e.getCause().getMessage().contains("Use 'path' option to specify a path [/some/path]")).     } }
false;public;0;12;;public void testMissingPath() {     try {         client().admin().cluster().preparePutRepository("test-repo").setType("hdfs").setSettings(Settings.builder().put("uri", "hdfs:///").build()).get().         fail().     } catch (RepositoryException e) {         assertTrue(e.getCause() instanceof IllegalArgumentException).         assertTrue(e.getCause().getMessage().contains("No 'path' defined for hdfs")).     } }
false;private;2;3;;private long count(Client client, String index) {     return client.prepareSearch(index).setSize(0).get().getHits().getTotalHits().value. }
