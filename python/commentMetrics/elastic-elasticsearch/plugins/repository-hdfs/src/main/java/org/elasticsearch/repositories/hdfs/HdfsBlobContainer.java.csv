commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public boolean blobExists(String blobName) {     try {         return store.execute(fileContext -> fileContext.util().exists(new Path(path, blobName))).     } catch (Exception e) {         return false.     } }
false;public;1;10;;@Override public void deleteBlob(String blobName) throws IOException {     try {         if (store.execute(fileContext -> fileContext.delete(new Path(path, blobName), true)) == false) {             throw new NoSuchFileException("Blob [" + blobName + "] does not exist").         }     } catch (FileNotFoundException fnfe) {         throw new NoSuchFileException("[" + blobName + "] blob not found").     } }
false;public;1;14;;@Override public InputStream readBlob(String blobName) throws IOException {     // be called with the proper privileges.     try {         return store.execute(fileContext -> new HDFSPrivilegedInputSteam(fileContext.open(new Path(path, blobName), bufferSize), securityContext)).     } catch (FileNotFoundException fnfe) {         throw new NoSuchFileException("[" + blobName + "] blob not found").     } }
false;public;4;19;;@Override public void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException {     store.execute((Operation<Void>) fileContext -> {         Path blob = new Path(path, blobName).         EnumSet<CreateFlag> flags = failIfAlreadyExists ? EnumSet.of(CreateFlag.CREATE, CreateFlag.SYNC_BLOCK) : EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE, CreateFlag.SYNC_BLOCK).         try (FSDataOutputStream stream = fileContext.create(blob, flags, CreateOpts.bufferSize(bufferSize))) {             int bytesRead.             byte[] buffer = new byte[bufferSize].             while ((bytesRead = inputStream.read(buffer)) != -1) {                 stream.write(buffer, 0, bytesRead).             }         } catch (org.apache.hadoop.fs.FileAlreadyExistsException faee) {             throw new FileAlreadyExistsException(blob.toString(), null, faee.getMessage()).         }         return null.     }). }
false;public;4;22;;@Override public void writeBlobAtomic(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException {     final String tempBlob = FsBlobContainer.tempBlobName(blobName).     store.execute((Operation<Void>) fileContext -> {         final Path tempBlobPath = new Path(path, tempBlob).         try (FSDataOutputStream stream = fileContext.create(tempBlobPath, EnumSet.of(CreateFlag.CREATE, CreateFlag.SYNC_BLOCK), CreateOpts.bufferSize(bufferSize))) {             int bytesRead.             byte[] buffer = new byte[bufferSize].             while ((bytesRead = inputStream.read(buffer)) != -1) {                 stream.write(buffer, 0, bytesRead).             }         }         final Path blob = new Path(path, blobName).         try {             fileContext.rename(tempBlobPath, blob, failIfAlreadyExists ? Options.Rename.NONE : Options.Rename.OVERWRITE).         } catch (org.apache.hadoop.fs.FileAlreadyExistsException faee) {             throw new FileAlreadyExistsException(blob.toString(), null, faee.getMessage()).         }         return null.     }). }
false;public;1;10;;@Override public Map<String, BlobMetaData> listBlobsByPrefix(@Nullable final String prefix) throws IOException {     FileStatus[] files = store.execute(fileContext -> (fileContext.util().listStatus(path, path -> prefix == null || path.getName().startsWith(prefix)))).     Map<String, BlobMetaData> map = new LinkedHashMap<String, BlobMetaData>().     for (FileStatus file : files) {         map.put(file.getPath().getName(), new PlainBlobMetaData(file.getPath().getName(), file.getLen())).     }     return Collections.unmodifiableMap(map). }
false;public;0;4;;@Override public Map<String, BlobMetaData> listBlobs() throws IOException {     return listBlobsByPrefix(null). }
false;public;0;3;;public int read() throws IOException {     return securityContext.doPrivilegedOrThrow(in::read). }
false;public;1;3;;public int read(byte[] b) throws IOException {     return securityContext.doPrivilegedOrThrow(() -> in.read(b)). }
false;public;3;3;;public int read(byte[] b, int off, int len) throws IOException {     return securityContext.doPrivilegedOrThrow(() -> in.read(b, off, len)). }
false;public;1;3;;public long skip(long n) throws IOException {     return securityContext.doPrivilegedOrThrow(() -> in.skip(n)). }
false;public;0;3;;public int available() throws IOException {     return securityContext.doPrivilegedOrThrow(() -> in.available()). }
false;public,synchronized;0;6;;public synchronized void reset() throws IOException {     securityContext.doPrivilegedOrThrow(() -> {         in.reset().         return null.     }). }
