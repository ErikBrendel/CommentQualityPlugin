commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;19;;public static UserDictionary getUserDictionary(Environment env, Settings settings) {     if (settings.get(USER_DICT_PATH_OPTION) != null && settings.get(USER_DICT_RULES_OPTION) != null) {         throw new IllegalArgumentException("It is not allowed to use [" + USER_DICT_PATH_OPTION + "] in conjunction" + " with [" + USER_DICT_RULES_OPTION + "]").     }     List<String> ruleList = Analysis.getWordList(env, settings, USER_DICT_PATH_OPTION, USER_DICT_RULES_OPTION).     StringBuilder sb = new StringBuilder().     if (ruleList == null || ruleList.isEmpty()) {         return null.     }     for (String line : ruleList) {         sb.append(line).append(System.lineSeparator()).     }     try (Reader rulesReader = new StringReader(sb.toString())) {         return UserDictionary.open(rulesReader).     } catch (IOException e) {         throw new ElasticsearchException("failed to load nori user dictionary", e).     } }
false;public,static;1;8;;public static KoreanTokenizer.DecompoundMode getMode(Settings settings) {     KoreanTokenizer.DecompoundMode mode = KoreanTokenizer.DEFAULT_DECOMPOUND.     String modeSetting = settings.get("decompound_mode", null).     if (modeSetting != null) {         mode = KoreanTokenizer.DecompoundMode.valueOf(modeSetting.toUpperCase(Locale.ENGLISH)).     }     return mode. }
false;public;0;4;;@Override public Tokenizer create() {     return new KoreanTokenizer(KoreanTokenizer.DEFAULT_TOKEN_ATTRIBUTE_FACTORY, userDictionary, decompoundMode, false). }
