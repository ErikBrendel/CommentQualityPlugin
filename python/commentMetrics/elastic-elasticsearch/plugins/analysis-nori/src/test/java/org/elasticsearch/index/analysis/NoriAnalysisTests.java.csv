commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;public void testDefaultsNoriAnalysis() throws IOException {     TestAnalysis analysis = createTestAnalysis(Settings.EMPTY).     TokenizerFactory tokenizerFactory = analysis.tokenizer.get("nori_tokenizer").     assertThat(tokenizerFactory, instanceOf(NoriTokenizerFactory.class)).     TokenFilterFactory filterFactory = analysis.tokenFilter.get("nori_part_of_speech").     assertThat(filterFactory, instanceOf(NoriPartOfSpeechStopFilterFactory.class)).     filterFactory = analysis.tokenFilter.get("nori_readingform").     assertThat(filterFactory, instanceOf(NoriReadingFormFilterFactory.class)).     IndexAnalyzers indexAnalyzers = analysis.indexAnalyzers.     NamedAnalyzer analyzer = indexAnalyzers.get("nori").     assertThat(analyzer.analyzer(), instanceOf(KoreanAnalyzer.class)). }
false;public;0;16;;public void testNoriAnalyzer() throws Exception {     Settings settings = Settings.builder().put("index.analysis.analyzer.my_analyzer.type", "nori").put("index.analysis.analyzer.my_analyzer.stoptags", "NR, SP").put("index.analysis.analyzer.my_analyzer.decompound_mode", "mixed").build().     TestAnalysis analysis = createTestAnalysis(settings).     Analyzer analyzer = analysis.indexAnalyzers.get("my_analyzer").     try (TokenStream stream = analyzer.tokenStream("", "여섯 용이")) {         assertTokenStreamContents(stream, new String[] { "용", "이" }).     }     try (TokenStream stream = analyzer.tokenStream("", "가늠표")) {         assertTokenStreamContents(stream, new String[] { "가늠표", "가늠", "표" }).     } }
false;public;0;15;;public void testNoriAnalyzerUserDict() throws Exception {     Settings settings = Settings.builder().put("index.analysis.analyzer.my_analyzer.type", "nori").putList("index.analysis.analyzer.my_analyzer.user_dictionary_rules", "c++", "C샤프", "세종", "세종시 세종 시").build().     TestAnalysis analysis = createTestAnalysis(settings).     Analyzer analyzer = analysis.indexAnalyzers.get("my_analyzer").     try (TokenStream stream = analyzer.tokenStream("", "세종시")) {         assertTokenStreamContents(stream, new String[] { "세종", "시" }).     }     try (TokenStream stream = analyzer.tokenStream("", "c++world")) {         assertTokenStreamContents(stream, new String[] { "c++", "world" }).     } }
false;public;0;15;;public void testNoriAnalyzerUserDictPath() throws Exception {     Settings settings = Settings.builder().put("index.analysis.analyzer.my_analyzer.type", "nori").put("index.analysis.analyzer.my_analyzer.user_dictionary", "user_dict.txt").build().     TestAnalysis analysis = createTestAnalysis(settings).     Analyzer analyzer = analysis.indexAnalyzers.get("my_analyzer").     try (TokenStream stream = analyzer.tokenStream("", "세종시")) {         assertTokenStreamContents(stream, new String[] { "세종", "시" }).     }     try (TokenStream stream = analyzer.tokenStream("", "c++world")) {         assertTokenStreamContents(stream, new String[] { "c++", "world" }).     } }
false;public;0;10;;public void testNoriAnalyzerInvalidUserDictOption() throws Exception {     Settings settings = Settings.builder().put("index.analysis.analyzer.my_analyzer.type", "nori").put("index.analysis.analyzer.my_analyzer.user_dictionary", "user_dict.txt").putList("index.analysis.analyzer.my_analyzer.user_dictionary_rules", "c++", "C샤프", "세종", "세종시 세종 시").build().     IllegalArgumentException exc = expectThrows(IllegalArgumentException.class, () -> createTestAnalysis(settings)).     assertThat(exc.getMessage(), containsString("It is not allowed to use [user_dictionary] in conjunction " + "with [user_dictionary_rules]")). }
false;public;0;12;;public void testNoriTokenizer() throws Exception {     Settings settings = Settings.builder().put("index.analysis.tokenizer.my_tokenizer.type", "nori_tokenizer").put("index.analysis.tokenizer.my_tokenizer.decompound_mode", "mixed").build().     TestAnalysis analysis = createTestAnalysis(settings).     Tokenizer tokenizer = analysis.tokenizer.get("my_tokenizer").create().     tokenizer.setReader(new StringReader("뿌리가 깊은 나무")).     assertTokenStreamContents(tokenizer, new String[] { "뿌리", "가", "깊", "은", "나무" }).     tokenizer.setReader(new StringReader("가늠표")).     assertTokenStreamContents(tokenizer, new String[] { "가늠표", "가늠", "표" }). }
false;public;0;12;;public void testNoriPartOfSpeech() throws IOException {     Settings settings = Settings.builder().put("index.analysis.filter.my_filter.type", "nori_part_of_speech").put("index.analysis.filter.my_filter.stoptags", "NR, SP").build().     TestAnalysis analysis = createTestAnalysis(settings).     TokenFilterFactory factory = analysis.tokenFilter.get("my_filter").     Tokenizer tokenizer = new KoreanTokenizer().     tokenizer.setReader(new StringReader("여섯 용이")).     TokenStream stream = factory.create(tokenizer).     assertTokenStreamContents(stream, new String[] { "용", "이" }). }
false;public;0;13;;public void testNoriReadingForm() throws IOException {     Settings settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).put("index.analysis.filter.my_filter.type", "nori_readingform").build().     TestAnalysis analysis = AnalysisTestsHelper.createTestAnalysisFromSettings(settings, new AnalysisNoriPlugin()).     TokenFilterFactory factory = analysis.tokenFilter.get("my_filter").     Tokenizer tokenizer = new KoreanTokenizer().     tokenizer.setReader(new StringReader("鄕歌")).     TokenStream stream = factory.create(tokenizer).     assertTokenStreamContents(stream, new String[] { "향가" }). }
false;private;1;13;;private TestAnalysis createTestAnalysis(Settings analysisSettings) throws IOException {     InputStream dict = NoriAnalysisTests.class.getResourceAsStream("user_dict.txt").     Path home = createTempDir().     Path config = home.resolve("config").     Files.createDirectory(config).     Files.copy(dict, config.resolve("user_dict.txt")).     Settings settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).put(Environment.PATH_HOME_SETTING.getKey(), home).put(analysisSettings).build().     return AnalysisTestsHelper.createTestAnalysisFromSettings(settings, new AnalysisNoriPlugin()). }
