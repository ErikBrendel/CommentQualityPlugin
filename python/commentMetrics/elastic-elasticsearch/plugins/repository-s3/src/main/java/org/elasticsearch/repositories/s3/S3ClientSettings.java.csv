# id;timestamp;commentText;codeText;commentWords;codeWords
S3ClientSettings -> static S3ClientSettings getClientSettings(Settings settings, String clientName);1524684173;Parse settings for a single client.;static S3ClientSettings getClientSettings(Settings settings, String clientName) {_        try (SecureString accessKey = getConfigValue(settings, clientName, ACCESS_KEY_SETTING)__             SecureString secretKey = getConfigValue(settings, clientName, SECRET_KEY_SETTING)__             SecureString proxyUsername = getConfigValue(settings, clientName, PROXY_USERNAME_SETTING)__             SecureString proxyPassword = getConfigValue(settings, clientName, PROXY_PASSWORD_SETTING)) {_            BasicAWSCredentials credentials = null__            if (accessKey.length() != 0) {_                if (secretKey.length() != 0) {_                    credentials = new BasicAWSCredentials(accessKey.toString(), secretKey.toString())__                } else {_                    throw new IllegalArgumentException("Missing secret key for s3 client [" + clientName + "]")__                }_            } else if (secretKey.length() != 0) {_                throw new IllegalArgumentException("Missing access key for s3 client [" + clientName + "]")__            }_            return new S3ClientSettings(_                credentials,_                getConfigValue(settings, clientName, ENDPOINT_SETTING),_                getConfigValue(settings, clientName, PROTOCOL_SETTING),_                getConfigValue(settings, clientName, PROXY_HOST_SETTING),_                getConfigValue(settings, clientName, PROXY_PORT_SETTING),_                proxyUsername.toString(),_                proxyPassword.toString(),_                (int)getConfigValue(settings, clientName, READ_TIMEOUT_SETTING).millis(),_                getConfigValue(settings, clientName, MAX_RETRIES_SETTING),_                getConfigValue(settings, clientName, USE_THROTTLE_RETRIES_SETTING)_            )__        }_    };parse,settings,for,a,single,client;static,s3client,settings,get,client,settings,settings,settings,string,client,name,try,secure,string,access,key,get,config,value,settings,client,name,secure,string,secret,key,get,config,value,settings,client,name,secure,string,proxy,username,get,config,value,settings,client,name,secure,string,proxy,password,get,config,value,settings,client,name,basic,awscredentials,credentials,null,if,access,key,length,0,if,secret,key,length,0,credentials,new,basic,awscredentials,access,key,to,string,secret,key,to,string,else,throw,new,illegal,argument,exception,missing,secret,key,for,s3,client,client,name,else,if,secret,key,length,0,throw,new,illegal,argument,exception,missing,access,key,for,s3,client,client,name,return,new,s3client,settings,credentials,get,config,value,settings,client,name,get,config,value,settings,client,name,get,config,value,settings,client,name,get,config,value,settings,client,name,proxy,username,to,string,proxy,password,to,string,int,get,config,value,settings,client,name,millis,get,config,value,settings,client,name,get,config,value,settings,client,name
S3ClientSettings -> static S3ClientSettings getClientSettings(Settings settings, String clientName);1529341607;Parse settings for a single client.;static S3ClientSettings getClientSettings(Settings settings, String clientName) {_        final BasicAWSCredentials credentials = S3ClientSettings.loadCredentials(settings, clientName)__        try (SecureString proxyUsername = getConfigValue(settings, clientName, PROXY_USERNAME_SETTING)__             SecureString proxyPassword = getConfigValue(settings, clientName, PROXY_PASSWORD_SETTING)) {_            return new S3ClientSettings(_                credentials,_                getConfigValue(settings, clientName, ENDPOINT_SETTING),_                getConfigValue(settings, clientName, PROTOCOL_SETTING),_                getConfigValue(settings, clientName, PROXY_HOST_SETTING),_                getConfigValue(settings, clientName, PROXY_PORT_SETTING),_                proxyUsername.toString(),_                proxyPassword.toString(),_                (int)getConfigValue(settings, clientName, READ_TIMEOUT_SETTING).millis(),_                getConfigValue(settings, clientName, MAX_RETRIES_SETTING),_                getConfigValue(settings, clientName, USE_THROTTLE_RETRIES_SETTING)_            )__        }_    };parse,settings,for,a,single,client;static,s3client,settings,get,client,settings,settings,settings,string,client,name,final,basic,awscredentials,credentials,s3client,settings,load,credentials,settings,client,name,try,secure,string,proxy,username,get,config,value,settings,client,name,secure,string,proxy,password,get,config,value,settings,client,name,return,new,s3client,settings,credentials,get,config,value,settings,client,name,get,config,value,settings,client,name,get,config,value,settings,client,name,get,config,value,settings,client,name,proxy,username,to,string,proxy,password,to,string,int,get,config,value,settings,client,name,millis,get,config,value,settings,client,name,get,config,value,settings,client,name
S3ClientSettings -> static S3ClientSettings getClientSettings(Settings settings, String clientName);1531179852;Parse settings for a single client.;static S3ClientSettings getClientSettings(Settings settings, String clientName) {_        final AWSCredentials credentials = S3ClientSettings.loadCredentials(settings, clientName)__        try (SecureString proxyUsername = getConfigValue(settings, clientName, PROXY_USERNAME_SETTING)__             SecureString proxyPassword = getConfigValue(settings, clientName, PROXY_PASSWORD_SETTING)) {_            return new S3ClientSettings(_                credentials,_                getConfigValue(settings, clientName, ENDPOINT_SETTING),_                getConfigValue(settings, clientName, PROTOCOL_SETTING),_                getConfigValue(settings, clientName, PROXY_HOST_SETTING),_                getConfigValue(settings, clientName, PROXY_PORT_SETTING),_                proxyUsername.toString(),_                proxyPassword.toString(),_                (int)getConfigValue(settings, clientName, READ_TIMEOUT_SETTING).millis(),_                getConfigValue(settings, clientName, MAX_RETRIES_SETTING),_                getConfigValue(settings, clientName, USE_THROTTLE_RETRIES_SETTING)_            )__        }_    };parse,settings,for,a,single,client;static,s3client,settings,get,client,settings,settings,settings,string,client,name,final,awscredentials,credentials,s3client,settings,load,credentials,settings,client,name,try,secure,string,proxy,username,get,config,value,settings,client,name,secure,string,proxy,password,get,config,value,settings,client,name,return,new,s3client,settings,credentials,get,config,value,settings,client,name,get,config,value,settings,client,name,get,config,value,settings,client,name,get,config,value,settings,client,name,proxy,username,to,string,proxy,password,to,string,int,get,config,value,settings,client,name,millis,get,config,value,settings,client,name,get,config,value,settings,client,name
S3ClientSettings -> static Map<String, S3ClientSettings> load(Settings settings);1524684173;Load all client settings from the given settings.__Note this will always at least return a client named "default".;static Map<String, S3ClientSettings> load(Settings settings) {_        Set<String> clientNames = settings.getGroups(PREFIX).keySet()__        Map<String, S3ClientSettings> clients = new HashMap<>()__        for (String clientName : clientNames) {_            clients.put(clientName, getClientSettings(settings, clientName))__        }_        if (clients.containsKey("default") == false) {_            _            _            clients.put("default", getClientSettings(settings, "default"))__        }_        return Collections.unmodifiableMap(clients)__    };load,all,client,settings,from,the,given,settings,note,this,will,always,at,least,return,a,client,named,default;static,map,string,s3client,settings,load,settings,settings,set,string,client,names,settings,get,groups,prefix,key,set,map,string,s3client,settings,clients,new,hash,map,for,string,client,name,client,names,clients,put,client,name,get,client,settings,settings,client,name,if,clients,contains,key,default,false,clients,put,default,get,client,settings,settings,default,return,collections,unmodifiable,map,clients
S3ClientSettings -> static Map<String, S3ClientSettings> load(Settings settings);1529341607;Load all client settings from the given settings.__Note this will always at least return a client named "default".;static Map<String, S3ClientSettings> load(Settings settings) {_        final Set<String> clientNames = settings.getGroups(PREFIX).keySet()__        final Map<String, S3ClientSettings> clients = new HashMap<>()__        for (final String clientName : clientNames) {_            clients.put(clientName, getClientSettings(settings, clientName))__        }_        if (clients.containsKey("default") == false) {_            _            _            clients.put("default", getClientSettings(settings, "default"))__        }_        return Collections.unmodifiableMap(clients)__    };load,all,client,settings,from,the,given,settings,note,this,will,always,at,least,return,a,client,named,default;static,map,string,s3client,settings,load,settings,settings,final,set,string,client,names,settings,get,groups,prefix,key,set,final,map,string,s3client,settings,clients,new,hash,map,for,final,string,client,name,client,names,clients,put,client,name,get,client,settings,settings,client,name,if,clients,contains,key,default,false,clients,put,default,get,client,settings,settings,default,return,collections,unmodifiable,map,clients
S3ClientSettings -> static Map<String, S3ClientSettings> load(Settings settings);1531179852;Load all client settings from the given settings.__Note this will always at least return a client named "default".;static Map<String, S3ClientSettings> load(Settings settings) {_        final Set<String> clientNames = settings.getGroups(PREFIX).keySet()__        final Map<String, S3ClientSettings> clients = new HashMap<>()__        for (final String clientName : clientNames) {_            clients.put(clientName, getClientSettings(settings, clientName))__        }_        if (clients.containsKey("default") == false) {_            _            _            clients.put("default", getClientSettings(settings, "default"))__        }_        return Collections.unmodifiableMap(clients)__    };load,all,client,settings,from,the,given,settings,note,this,will,always,at,least,return,a,client,named,default;static,map,string,s3client,settings,load,settings,settings,final,set,string,client,names,settings,get,groups,prefix,key,set,final,map,string,s3client,settings,clients,new,hash,map,for,final,string,client,name,client,names,clients,put,client,name,get,client,settings,settings,client,name,if,clients,contains,key,default,false,clients,put,default,get,client,settings,settings,default,return,collections,unmodifiable,map,clients
S3ClientSettings -> static Map<String, S3ClientSettings> load(Settings settings);1537806831;Load all client settings from the given settings.__Note this will always at least return a client named "default".;static Map<String, S3ClientSettings> load(Settings settings) {_        final Set<String> clientNames = settings.getGroups(PREFIX).keySet()__        final Map<String, S3ClientSettings> clients = new HashMap<>()__        for (final String clientName : clientNames) {_            clients.put(clientName, getClientSettings(settings, clientName))__        }_        if (clients.containsKey("default") == false) {_            _            _            clients.put("default", getClientSettings(settings, "default"))__        }_        return Collections.unmodifiableMap(clients)__    };load,all,client,settings,from,the,given,settings,note,this,will,always,at,least,return,a,client,named,default;static,map,string,s3client,settings,load,settings,settings,final,set,string,client,names,settings,get,groups,prefix,key,set,final,map,string,s3client,settings,clients,new,hash,map,for,final,string,client,name,client,names,clients,put,client,name,get,client,settings,settings,client,name,if,clients,contains,key,default,false,clients,put,default,get,client,settings,settings,default,return,collections,unmodifiable,map,clients
S3ClientSettings -> static Map<String, S3ClientSettings> load(Settings settings);1548825751;Load all client settings from the given settings.__Note this will always at least return a client named "default".;static Map<String, S3ClientSettings> load(Settings settings) {_        final Set<String> clientNames = settings.getGroups(PREFIX).keySet()__        final Map<String, S3ClientSettings> clients = new HashMap<>()__        for (final String clientName : clientNames) {_            clients.put(clientName, getClientSettings(settings, clientName))__        }_        if (clients.containsKey("default") == false) {_            _            _            clients.put("default", getClientSettings(settings, "default"))__        }_        return Collections.unmodifiableMap(clients)__    };load,all,client,settings,from,the,given,settings,note,this,will,always,at,least,return,a,client,named,default;static,map,string,s3client,settings,load,settings,settings,final,set,string,client,names,settings,get,groups,prefix,key,set,final,map,string,s3client,settings,clients,new,hash,map,for,final,string,client,name,client,names,clients,put,client,name,get,client,settings,settings,client,name,if,clients,contains,key,default,false,clients,put,default,get,client,settings,settings,default,return,collections,unmodifiable,map,clients
S3ClientSettings -> static S3ClientSettings getClientSettings(final Settings settings, final String clientName);1537806831;Parse settings for a single client.;static S3ClientSettings getClientSettings(final Settings settings, final String clientName) {_        final AWSCredentials credentials = S3ClientSettings.loadCredentials(settings, clientName)__        return getClientSettings(settings, clientName, credentials)__    };parse,settings,for,a,single,client;static,s3client,settings,get,client,settings,final,settings,settings,final,string,client,name,final,awscredentials,credentials,s3client,settings,load,credentials,settings,client,name,return,get,client,settings,settings,client,name,credentials
S3ClientSettings -> static S3ClientSettings getClientSettings(final Settings settings, final String clientName);1548825751;Parse settings for a single client.;static S3ClientSettings getClientSettings(final Settings settings, final String clientName) {_        try (SecureString proxyUsername = getConfigValue(settings, clientName, PROXY_USERNAME_SETTING)__             SecureString proxyPassword = getConfigValue(settings, clientName, PROXY_PASSWORD_SETTING)) {_            return new S3ClientSettings(_                S3ClientSettings.loadCredentials(settings, clientName),_                getConfigValue(settings, clientName, ENDPOINT_SETTING),_                getConfigValue(settings, clientName, PROTOCOL_SETTING),_                getConfigValue(settings, clientName, PROXY_HOST_SETTING),_                getConfigValue(settings, clientName, PROXY_PORT_SETTING),_                proxyUsername.toString(),_                proxyPassword.toString(),_                Math.toIntExact(getConfigValue(settings, clientName, READ_TIMEOUT_SETTING).millis()),_                getConfigValue(settings, clientName, MAX_RETRIES_SETTING),_                getConfigValue(settings, clientName, USE_THROTTLE_RETRIES_SETTING)_            )__        }_    };parse,settings,for,a,single,client;static,s3client,settings,get,client,settings,final,settings,settings,final,string,client,name,try,secure,string,proxy,username,get,config,value,settings,client,name,secure,string,proxy,password,get,config,value,settings,client,name,return,new,s3client,settings,s3client,settings,load,credentials,settings,client,name,get,config,value,settings,client,name,get,config,value,settings,client,name,get,config,value,settings,client,name,get,config,value,settings,client,name,proxy,username,to,string,proxy,password,to,string,math,to,int,exact,get,config,value,settings,client,name,millis,get,config,value,settings,client,name,get,config,value,settings,client,name
