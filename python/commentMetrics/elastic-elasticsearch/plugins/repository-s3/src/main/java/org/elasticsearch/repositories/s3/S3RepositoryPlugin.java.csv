commented;modifiers;parameterAmount;loc;comment;code
true;protected;3;5;// proxy method for testing ;// proxy method for testing protected S3Repository createRepository(final RepositoryMetaData metadata, final Settings settings, final NamedXContentRegistry registry) {     return new S3Repository(metadata, settings, registry, service). }
false;public;2;4;;@Override public Map<String, Repository.Factory> getRepositories(final Environment env, final NamedXContentRegistry registry) {     return Collections.singletonMap(S3Repository.TYPE, (metadata) -> createRepository(metadata, env.settings(), registry)). }
false;public;0;19;;@Override public List<Setting<?>> getSettings() {     return Arrays.asList(// named s3 client configuration settings     S3ClientSettings.ACCESS_KEY_SETTING, S3ClientSettings.SECRET_KEY_SETTING, S3ClientSettings.SESSION_TOKEN_SETTING, S3ClientSettings.ENDPOINT_SETTING, S3ClientSettings.PROTOCOL_SETTING, S3ClientSettings.PROXY_HOST_SETTING, S3ClientSettings.PROXY_PORT_SETTING, S3ClientSettings.PROXY_USERNAME_SETTING, S3ClientSettings.PROXY_PASSWORD_SETTING, S3ClientSettings.READ_TIMEOUT_SETTING, S3ClientSettings.MAX_RETRIES_SETTING, S3ClientSettings.USE_THROTTLE_RETRIES_SETTING, S3Repository.ACCESS_KEY_SETTING, S3Repository.SECRET_KEY_SETTING). }
false;public;1;6;;@Override public void reload(Settings settings) {     // secure settings should be readable     final Map<String, S3ClientSettings> clientsSettings = S3ClientSettings.load(settings).     service.refreshAndClearCache(clientsSettings). }
false;public;0;4;;@Override public void close() throws IOException {     service.close(). }
