# id;timestamp;commentText;codeText;commentWords;codeWords
S3Service -> public synchronized Map<String, S3ClientSettings> refreshAndClearCache(Map<String, S3ClientSettings> clientsSettings);1531179852;Refreshes the settings for the AmazonS3 clients and clears the cache of_existing clients. New clients will be build using these new settings. Old_clients are usable until released. On release they will be destroyed instead_to being returned to the cache.;public synchronized Map<String, S3ClientSettings> refreshAndClearCache(Map<String, S3ClientSettings> clientsSettings) {_        _        _        releaseCachedClients()__        final Map<String, S3ClientSettings> prevSettings = this.clientsSettings__        this.clientsSettings = MapBuilder.newMapBuilder(clientsSettings).immutableMap()__        assert this.clientsSettings.containsKey("default") : "always at least have 'default'"__        _        return prevSettings__    };refreshes,the,settings,for,the,amazon,s3,clients,and,clears,the,cache,of,existing,clients,new,clients,will,be,build,using,these,new,settings,old,clients,are,usable,until,released,on,release,they,will,be,destroyed,instead,to,being,returned,to,the,cache;public,synchronized,map,string,s3client,settings,refresh,and,clear,cache,map,string,s3client,settings,clients,settings,release,cached,clients,final,map,string,s3client,settings,prev,settings,this,clients,settings,this,clients,settings,map,builder,new,map,builder,clients,settings,immutable,map,assert,this,clients,settings,contains,key,default,always,at,least,have,default,return,prev,settings
S3Service -> public synchronized Map<String, S3ClientSettings> refreshAndClearCache(Map<String, S3ClientSettings> clientsSettings);1532028790;Refreshes the settings for the AmazonS3 clients and clears the cache of_existing clients. New clients will be build using these new settings. Old_clients are usable until released. On release they will be destroyed instead_to being returned to the cache.;public synchronized Map<String, S3ClientSettings> refreshAndClearCache(Map<String, S3ClientSettings> clientsSettings) {_        _        _        releaseCachedClients()__        final Map<String, S3ClientSettings> prevSettings = this.clientsSettings__        this.clientsSettings = MapBuilder.newMapBuilder(clientsSettings).immutableMap()__        assert this.clientsSettings.containsKey("default") : "always at least have 'default'"__        _        return prevSettings__    };refreshes,the,settings,for,the,amazon,s3,clients,and,clears,the,cache,of,existing,clients,new,clients,will,be,build,using,these,new,settings,old,clients,are,usable,until,released,on,release,they,will,be,destroyed,instead,to,being,returned,to,the,cache;public,synchronized,map,string,s3client,settings,refresh,and,clear,cache,map,string,s3client,settings,clients,settings,release,cached,clients,final,map,string,s3client,settings,prev,settings,this,clients,settings,this,clients,settings,map,builder,new,map,builder,clients,settings,immutable,map,assert,this,clients,settings,contains,key,default,always,at,least,have,default,return,prev,settings
S3Service -> public synchronized Map<String, S3ClientSettings> refreshAndClearCache(Map<String, S3ClientSettings> clientsSettings);1536828374;Refreshes the settings for the AmazonS3 clients and clears the cache of_existing clients. New clients will be build using these new settings. Old_clients are usable until released. On release they will be destroyed instead_to being returned to the cache.;public synchronized Map<String, S3ClientSettings> refreshAndClearCache(Map<String, S3ClientSettings> clientsSettings) {_        _        _        releaseCachedClients()__        final Map<String, S3ClientSettings> prevSettings = this.clientsSettings__        this.clientsSettings = MapBuilder.newMapBuilder(clientsSettings).immutableMap()__        assert this.clientsSettings.containsKey("default") : "always at least have 'default'"__        _        return prevSettings__    };refreshes,the,settings,for,the,amazon,s3,clients,and,clears,the,cache,of,existing,clients,new,clients,will,be,build,using,these,new,settings,old,clients,are,usable,until,released,on,release,they,will,be,destroyed,instead,to,being,returned,to,the,cache;public,synchronized,map,string,s3client,settings,refresh,and,clear,cache,map,string,s3client,settings,clients,settings,release,cached,clients,final,map,string,s3client,settings,prev,settings,this,clients,settings,this,clients,settings,map,builder,new,map,builder,clients,settings,immutable,map,assert,this,clients,settings,contains,key,default,always,at,least,have,default,return,prev,settings
S3Service -> public synchronized Map<String, S3ClientSettings> refreshAndClearCache(Map<String, S3ClientSettings> clientsSettings);1541092382;Refreshes the settings for the AmazonS3 clients and clears the cache of_existing clients. New clients will be build using these new settings. Old_clients are usable until released. On release they will be destroyed instead_to being returned to the cache.;public synchronized Map<String, S3ClientSettings> refreshAndClearCache(Map<String, S3ClientSettings> clientsSettings) {_        _        _        releaseCachedClients()__        final Map<String, S3ClientSettings> prevSettings = this.clientsSettings__        this.clientsSettings = MapBuilder.newMapBuilder(clientsSettings).immutableMap()__        assert this.clientsSettings.containsKey("default") : "always at least have 'default'"__        _        return prevSettings__    };refreshes,the,settings,for,the,amazon,s3,clients,and,clears,the,cache,of,existing,clients,new,clients,will,be,build,using,these,new,settings,old,clients,are,usable,until,released,on,release,they,will,be,destroyed,instead,to,being,returned,to,the,cache;public,synchronized,map,string,s3client,settings,refresh,and,clear,cache,map,string,s3client,settings,clients,settings,release,cached,clients,final,map,string,s3client,settings,prev,settings,this,clients,settings,this,clients,settings,map,builder,new,map,builder,clients,settings,immutable,map,assert,this,clients,settings,contains,key,default,always,at,least,have,default,return,prev,settings
S3Service -> public synchronized Map<String, S3ClientSettings> refreshAndClearCache(Map<String, S3ClientSettings> clientsSettings);1541736446;Refreshes the settings for the AmazonS3 clients and clears the cache of_existing clients. New clients will be build using these new settings. Old_clients are usable until released. On release they will be destroyed instead_to being returned to the cache.;public synchronized Map<String, S3ClientSettings> refreshAndClearCache(Map<String, S3ClientSettings> clientsSettings) {_        _        _        releaseCachedClients()__        final Map<String, S3ClientSettings> prevSettings = this.clientsSettings__        this.clientsSettings = MapBuilder.newMapBuilder(clientsSettings).immutableMap()__        assert this.clientsSettings.containsKey("default") : "always at least have 'default'"__        _        return prevSettings__    };refreshes,the,settings,for,the,amazon,s3,clients,and,clears,the,cache,of,existing,clients,new,clients,will,be,build,using,these,new,settings,old,clients,are,usable,until,released,on,release,they,will,be,destroyed,instead,to,being,returned,to,the,cache;public,synchronized,map,string,s3client,settings,refresh,and,clear,cache,map,string,s3client,settings,clients,settings,release,cached,clients,final,map,string,s3client,settings,prev,settings,this,clients,settings,this,clients,settings,map,builder,new,map,builder,clients,settings,immutable,map,assert,this,clients,settings,contains,key,default,always,at,least,have,default,return,prev,settings
S3Service -> public synchronized Map<String, S3ClientSettings> refreshAndClearCache(Map<String, S3ClientSettings> clientsSettings);1542397818;Refreshes the settings for the AmazonS3 clients and clears the cache of_existing clients. New clients will be build using these new settings. Old_clients are usable until released. On release they will be destroyed instead_to being returned to the cache.;public synchronized Map<String, S3ClientSettings> refreshAndClearCache(Map<String, S3ClientSettings> clientsSettings) {_        _        _        releaseCachedClients()__        final Map<String, S3ClientSettings> prevSettings = this.clientsSettings__        this.clientsSettings = MapBuilder.newMapBuilder(clientsSettings).immutableMap()__        assert this.clientsSettings.containsKey("default") : "always at least have 'default'"__        _        return prevSettings__    };refreshes,the,settings,for,the,amazon,s3,clients,and,clears,the,cache,of,existing,clients,new,clients,will,be,build,using,these,new,settings,old,clients,are,usable,until,released,on,release,they,will,be,destroyed,instead,to,being,returned,to,the,cache;public,synchronized,map,string,s3client,settings,refresh,and,clear,cache,map,string,s3client,settings,clients,settings,release,cached,clients,final,map,string,s3client,settings,prev,settings,this,clients,settings,this,clients,settings,map,builder,new,map,builder,clients,settings,immutable,map,assert,this,clients,settings,contains,key,default,always,at,least,have,default,return,prev,settings
S3Service -> public AmazonS3Reference client(String clientName);1531179852;Attempts to retrieve a client by name from the cache. If the client does not_exist it will be created.;public AmazonS3Reference client(String clientName) {_        AmazonS3Reference clientReference = clientsCache.get(clientName)__        if ((clientReference != null) && clientReference.tryIncRef()) {_            return clientReference__        }_        synchronized (this) {_            clientReference = clientsCache.get(clientName)__            if ((clientReference != null) && clientReference.tryIncRef()) {_                return clientReference__            }_            final S3ClientSettings clientSettings = clientsSettings.get(clientName)__            if (clientSettings == null) {_                throw new IllegalArgumentException("Unknown s3 client name [" + clientName + "]. Existing client configs: "_                        + Strings.collectionToDelimitedString(clientsSettings.keySet(), ","))__            }_            logger.debug("creating S3 client with client_name [{}], endpoint [{}]", clientName, clientSettings.endpoint)__            clientReference = new AmazonS3Reference(buildClient(clientSettings))__            clientReference.incRef()__            clientsCache = MapBuilder.newMapBuilder(clientsCache).put(clientName, clientReference).immutableMap()__            return clientReference__        }_    };attempts,to,retrieve,a,client,by,name,from,the,cache,if,the,client,does,not,exist,it,will,be,created;public,amazon,s3reference,client,string,client,name,amazon,s3reference,client,reference,clients,cache,get,client,name,if,client,reference,null,client,reference,try,inc,ref,return,client,reference,synchronized,this,client,reference,clients,cache,get,client,name,if,client,reference,null,client,reference,try,inc,ref,return,client,reference,final,s3client,settings,client,settings,clients,settings,get,client,name,if,client,settings,null,throw,new,illegal,argument,exception,unknown,s3,client,name,client,name,existing,client,configs,strings,collection,to,delimited,string,clients,settings,key,set,logger,debug,creating,s3,client,with,endpoint,client,name,client,settings,endpoint,client,reference,new,amazon,s3reference,build,client,client,settings,client,reference,inc,ref,clients,cache,map,builder,new,map,builder,clients,cache,put,client,name,client,reference,immutable,map,return,client,reference
S3Service -> public AmazonS3Reference client(String clientName);1532028790;Attempts to retrieve a client by name from the cache. If the client does not_exist it will be created.;public AmazonS3Reference client(String clientName) {_        AmazonS3Reference clientReference = clientsCache.get(clientName)__        if ((clientReference != null) && clientReference.tryIncRef()) {_            return clientReference__        }_        synchronized (this) {_            clientReference = clientsCache.get(clientName)__            if ((clientReference != null) && clientReference.tryIncRef()) {_                return clientReference__            }_            final S3ClientSettings clientSettings = clientsSettings.get(clientName)__            if (clientSettings == null) {_                throw new IllegalArgumentException("Unknown s3 client name [" + clientName + "]. Existing client configs: "_                        + Strings.collectionToDelimitedString(clientsSettings.keySet(), ","))__            }_            logger.debug("creating S3 client with client_name [{}], endpoint [{}]", clientName, clientSettings.endpoint)__            clientReference = new AmazonS3Reference(buildClient(clientSettings))__            clientReference.incRef()__            clientsCache = MapBuilder.newMapBuilder(clientsCache).put(clientName, clientReference).immutableMap()__            return clientReference__        }_    };attempts,to,retrieve,a,client,by,name,from,the,cache,if,the,client,does,not,exist,it,will,be,created;public,amazon,s3reference,client,string,client,name,amazon,s3reference,client,reference,clients,cache,get,client,name,if,client,reference,null,client,reference,try,inc,ref,return,client,reference,synchronized,this,client,reference,clients,cache,get,client,name,if,client,reference,null,client,reference,try,inc,ref,return,client,reference,final,s3client,settings,client,settings,clients,settings,get,client,name,if,client,settings,null,throw,new,illegal,argument,exception,unknown,s3,client,name,client,name,existing,client,configs,strings,collection,to,delimited,string,clients,settings,key,set,logger,debug,creating,s3,client,with,endpoint,client,name,client,settings,endpoint,client,reference,new,amazon,s3reference,build,client,client,settings,client,reference,inc,ref,clients,cache,map,builder,new,map,builder,clients,cache,put,client,name,client,reference,immutable,map,return,client,reference
S3Service -> public AmazonS3Reference client(String clientName);1536828374;Attempts to retrieve a client by name from the cache. If the client does not_exist it will be created.;public AmazonS3Reference client(String clientName) {_        AmazonS3Reference clientReference = clientsCache.get(clientName)__        if ((clientReference != null) && clientReference.tryIncRef()) {_            return clientReference__        }_        synchronized (this) {_            clientReference = clientsCache.get(clientName)__            if ((clientReference != null) && clientReference.tryIncRef()) {_                return clientReference__            }_            final S3ClientSettings clientSettings = clientsSettings.get(clientName)__            if (clientSettings == null) {_                throw new IllegalArgumentException("Unknown s3 client name [" + clientName + "]. Existing client configs: "_                        + Strings.collectionToDelimitedString(clientsSettings.keySet(), ","))__            }_            logger.debug("creating S3 client with client_name [{}], endpoint [{}]", clientName, clientSettings.endpoint)__            clientReference = new AmazonS3Reference(buildClient(clientSettings))__            clientReference.incRef()__            clientsCache = MapBuilder.newMapBuilder(clientsCache).put(clientName, clientReference).immutableMap()__            return clientReference__        }_    };attempts,to,retrieve,a,client,by,name,from,the,cache,if,the,client,does,not,exist,it,will,be,created;public,amazon,s3reference,client,string,client,name,amazon,s3reference,client,reference,clients,cache,get,client,name,if,client,reference,null,client,reference,try,inc,ref,return,client,reference,synchronized,this,client,reference,clients,cache,get,client,name,if,client,reference,null,client,reference,try,inc,ref,return,client,reference,final,s3client,settings,client,settings,clients,settings,get,client,name,if,client,settings,null,throw,new,illegal,argument,exception,unknown,s3,client,name,client,name,existing,client,configs,strings,collection,to,delimited,string,clients,settings,key,set,logger,debug,creating,s3,client,with,endpoint,client,name,client,settings,endpoint,client,reference,new,amazon,s3reference,build,client,client,settings,client,reference,inc,ref,clients,cache,map,builder,new,map,builder,clients,cache,put,client,name,client,reference,immutable,map,return,client,reference
S3Service -> public AmazonS3Reference client(String clientName);1541092382;Attempts to retrieve a client by name from the cache. If the client does not_exist it will be created.;public AmazonS3Reference client(String clientName) {_        AmazonS3Reference clientReference = clientsCache.get(clientName)__        if ((clientReference != null) && clientReference.tryIncRef()) {_            return clientReference__        }_        synchronized (this) {_            clientReference = clientsCache.get(clientName)__            if ((clientReference != null) && clientReference.tryIncRef()) {_                return clientReference__            }_            final S3ClientSettings clientSettings = clientsSettings.get(clientName)__            if (clientSettings == null) {_                throw new IllegalArgumentException("Unknown s3 client name [" + clientName + "]. Existing client configs: "_                        + Strings.collectionToDelimitedString(clientsSettings.keySet(), ","))__            }_            logger.debug("creating S3 client with client_name [{}], endpoint [{}]", clientName, clientSettings.endpoint)__            clientReference = new AmazonS3Reference(buildClient(clientSettings))__            clientReference.incRef()__            clientsCache = MapBuilder.newMapBuilder(clientsCache).put(clientName, clientReference).immutableMap()__            return clientReference__        }_    };attempts,to,retrieve,a,client,by,name,from,the,cache,if,the,client,does,not,exist,it,will,be,created;public,amazon,s3reference,client,string,client,name,amazon,s3reference,client,reference,clients,cache,get,client,name,if,client,reference,null,client,reference,try,inc,ref,return,client,reference,synchronized,this,client,reference,clients,cache,get,client,name,if,client,reference,null,client,reference,try,inc,ref,return,client,reference,final,s3client,settings,client,settings,clients,settings,get,client,name,if,client,settings,null,throw,new,illegal,argument,exception,unknown,s3,client,name,client,name,existing,client,configs,strings,collection,to,delimited,string,clients,settings,key,set,logger,debug,creating,s3,client,with,endpoint,client,name,client,settings,endpoint,client,reference,new,amazon,s3reference,build,client,client,settings,client,reference,inc,ref,clients,cache,map,builder,new,map,builder,clients,cache,put,client,name,client,reference,immutable,map,return,client,reference
S3Service -> public AmazonS3Reference client(String clientName);1541736446;Attempts to retrieve a client by name from the cache. If the client does not_exist it will be created.;public AmazonS3Reference client(String clientName) {_        AmazonS3Reference clientReference = clientsCache.get(clientName)__        if ((clientReference != null) && clientReference.tryIncRef()) {_            return clientReference__        }_        synchronized (this) {_            clientReference = clientsCache.get(clientName)__            if ((clientReference != null) && clientReference.tryIncRef()) {_                return clientReference__            }_            final S3ClientSettings clientSettings = clientsSettings.get(clientName)__            if (clientSettings == null) {_                throw new IllegalArgumentException("Unknown s3 client name [" + clientName + "]. Existing client configs: "_                        + Strings.collectionToDelimitedString(clientsSettings.keySet(), ","))__            }_            logger.debug("creating S3 client with client_name [{}], endpoint [{}]", clientName, clientSettings.endpoint)__            clientReference = new AmazonS3Reference(buildClient(clientSettings))__            clientReference.incRef()__            clientsCache = MapBuilder.newMapBuilder(clientsCache).put(clientName, clientReference).immutableMap()__            return clientReference__        }_    };attempts,to,retrieve,a,client,by,name,from,the,cache,if,the,client,does,not,exist,it,will,be,created;public,amazon,s3reference,client,string,client,name,amazon,s3reference,client,reference,clients,cache,get,client,name,if,client,reference,null,client,reference,try,inc,ref,return,client,reference,synchronized,this,client,reference,clients,cache,get,client,name,if,client,reference,null,client,reference,try,inc,ref,return,client,reference,final,s3client,settings,client,settings,clients,settings,get,client,name,if,client,settings,null,throw,new,illegal,argument,exception,unknown,s3,client,name,client,name,existing,client,configs,strings,collection,to,delimited,string,clients,settings,key,set,logger,debug,creating,s3,client,with,endpoint,client,name,client,settings,endpoint,client,reference,new,amazon,s3reference,build,client,client,settings,client,reference,inc,ref,clients,cache,map,builder,new,map,builder,clients,cache,put,client,name,client,reference,immutable,map,return,client,reference
S3Service -> public AmazonS3Reference client(String clientName);1542397818;Attempts to retrieve a client by name from the cache. If the client does not_exist it will be created.;public AmazonS3Reference client(String clientName) {_        AmazonS3Reference clientReference = clientsCache.get(clientName)__        if ((clientReference != null) && clientReference.tryIncRef()) {_            return clientReference__        }_        synchronized (this) {_            clientReference = clientsCache.get(clientName)__            if ((clientReference != null) && clientReference.tryIncRef()) {_                return clientReference__            }_            final S3ClientSettings clientSettings = clientsSettings.get(clientName)__            if (clientSettings == null) {_                throw new IllegalArgumentException("Unknown s3 client name [" + clientName + "]. Existing client configs: "_                        + Strings.collectionToDelimitedString(clientsSettings.keySet(), ","))__            }_            logger.debug("creating S3 client with client_name [{}], endpoint [{}]", clientName, clientSettings.endpoint)__            clientReference = new AmazonS3Reference(buildClient(clientSettings))__            clientReference.incRef()__            clientsCache = MapBuilder.newMapBuilder(clientsCache).put(clientName, clientReference).immutableMap()__            return clientReference__        }_    };attempts,to,retrieve,a,client,by,name,from,the,cache,if,the,client,does,not,exist,it,will,be,created;public,amazon,s3reference,client,string,client,name,amazon,s3reference,client,reference,clients,cache,get,client,name,if,client,reference,null,client,reference,try,inc,ref,return,client,reference,synchronized,this,client,reference,clients,cache,get,client,name,if,client,reference,null,client,reference,try,inc,ref,return,client,reference,final,s3client,settings,client,settings,clients,settings,get,client,name,if,client,settings,null,throw,new,illegal,argument,exception,unknown,s3,client,name,client,name,existing,client,configs,strings,collection,to,delimited,string,clients,settings,key,set,logger,debug,creating,s3,client,with,endpoint,client,name,client,settings,endpoint,client,reference,new,amazon,s3reference,build,client,client,settings,client,reference,inc,ref,clients,cache,map,builder,new,map,builder,clients,cache,put,client,name,client,reference,immutable,map,return,client,reference
