# id;timestamp;commentText;codeText;commentWords;codeWords
S3Repository -> S3Repository(RepositoryMetaData metadata, Settings settings, NamedXContentRegistry namedXContentRegistry, AwsS3Service s3Service);1524684173;Constructs an s3 backed repository;S3Repository(RepositoryMetaData metadata, Settings settings, NamedXContentRegistry namedXContentRegistry, AwsS3Service s3Service) {_        super(metadata, settings, namedXContentRegistry)___        String bucket = BUCKET_SETTING.get(metadata.settings())__        if (bucket == null) {_            throw new RepositoryException(metadata.name(), "No bucket defined for s3 gateway")__        }__        boolean serverSideEncryption = SERVER_SIDE_ENCRYPTION_SETTING.get(metadata.settings())__        ByteSizeValue bufferSize = BUFFER_SIZE_SETTING.get(metadata.settings())__        this.chunkSize = CHUNK_SIZE_SETTING.get(metadata.settings())__        this.compress = COMPRESS_SETTING.get(metadata.settings())___        _        if (this.chunkSize.getBytes() < bufferSize.getBytes()) {_            throw new RepositoryException(metadata.name(), CHUNK_SIZE_SETTING.getKey() + " (" + this.chunkSize +_                ") can't be lower than " + BUFFER_SIZE_SETTING.getKey() + " (" + bufferSize + ").")__        }__        _        String storageClass = STORAGE_CLASS_SETTING.get(metadata.settings())__        String cannedACL = CANNED_ACL_SETTING.get(metadata.settings())___        logger.debug("using bucket [{}], chunk_size [{}], server_side_encryption [{}], " +_            "buffer_size [{}], cannedACL [{}], storageClass [{}]",_            bucket, chunkSize, serverSideEncryption, bufferSize, cannedACL, storageClass)___        AmazonS3 client = s3Service.client(metadata.settings())__        blobStore = new S3BlobStore(settings, client, bucket, serverSideEncryption, bufferSize, cannedACL, storageClass)___        String basePath = BASE_PATH_SETTING.get(metadata.settings())__        if (Strings.hasLength(basePath)) {_            this.basePath = new BlobPath().add(basePath)__        } else {_            this.basePath = BlobPath.cleanPath()__        }_    };constructs,an,s3,backed,repository;s3repository,repository,meta,data,metadata,settings,settings,named,xcontent,registry,named,xcontent,registry,aws,s3service,s3service,super,metadata,settings,named,xcontent,registry,string,bucket,get,metadata,settings,if,bucket,null,throw,new,repository,exception,metadata,name,no,bucket,defined,for,s3,gateway,boolean,server,side,encryption,get,metadata,settings,byte,size,value,buffer,size,get,metadata,settings,this,chunk,size,get,metadata,settings,this,compress,get,metadata,settings,if,this,chunk,size,get,bytes,buffer,size,get,bytes,throw,new,repository,exception,metadata,name,get,key,this,chunk,size,can,t,be,lower,than,get,key,buffer,size,string,storage,class,get,metadata,settings,string,canned,acl,get,metadata,settings,logger,debug,using,bucket,canned,acl,storage,class,bucket,chunk,size,server,side,encryption,buffer,size,canned,acl,storage,class,amazon,s3,client,s3service,client,metadata,settings,blob,store,new,s3blob,store,settings,client,bucket,server,side,encryption,buffer,size,canned,acl,storage,class,string,base,path,get,metadata,settings,if,strings,has,length,base,path,this,base,path,new,blob,path,add,base,path,else,this,base,path,blob,path,clean,path
S3Repository -> S3Repository(RepositoryMetaData metadata, Settings settings, NamedXContentRegistry namedXContentRegistry, AwsS3Service s3Service);1525076988;Constructs an s3 backed repository;S3Repository(RepositoryMetaData metadata, Settings settings, NamedXContentRegistry namedXContentRegistry, AwsS3Service s3Service) {_        super(metadata, settings, namedXContentRegistry)___        String bucket = BUCKET_SETTING.get(metadata.settings())__        if (bucket == null) {_            throw new RepositoryException(metadata.name(), "No bucket defined for s3 repository")__        }__        boolean serverSideEncryption = SERVER_SIDE_ENCRYPTION_SETTING.get(metadata.settings())__        ByteSizeValue bufferSize = BUFFER_SIZE_SETTING.get(metadata.settings())__        this.chunkSize = CHUNK_SIZE_SETTING.get(metadata.settings())__        this.compress = COMPRESS_SETTING.get(metadata.settings())___        _        if (this.chunkSize.getBytes() < bufferSize.getBytes()) {_            throw new RepositoryException(metadata.name(), CHUNK_SIZE_SETTING.getKey() + " (" + this.chunkSize +_                ") can't be lower than " + BUFFER_SIZE_SETTING.getKey() + " (" + bufferSize + ").")__        }__        _        String storageClass = STORAGE_CLASS_SETTING.get(metadata.settings())__        String cannedACL = CANNED_ACL_SETTING.get(metadata.settings())___        logger.debug("using bucket [{}], chunk_size [{}], server_side_encryption [{}], " +_            "buffer_size [{}], cannedACL [{}], storageClass [{}]",_            bucket, chunkSize, serverSideEncryption, bufferSize, cannedACL, storageClass)___        AmazonS3 client = s3Service.client(metadata.settings())__        blobStore = new S3BlobStore(settings, client, bucket, serverSideEncryption, bufferSize, cannedACL, storageClass)___        String basePath = BASE_PATH_SETTING.get(metadata.settings())__        if (Strings.hasLength(basePath)) {_            this.basePath = new BlobPath().add(basePath)__        } else {_            this.basePath = BlobPath.cleanPath()__        }_    };constructs,an,s3,backed,repository;s3repository,repository,meta,data,metadata,settings,settings,named,xcontent,registry,named,xcontent,registry,aws,s3service,s3service,super,metadata,settings,named,xcontent,registry,string,bucket,get,metadata,settings,if,bucket,null,throw,new,repository,exception,metadata,name,no,bucket,defined,for,s3,repository,boolean,server,side,encryption,get,metadata,settings,byte,size,value,buffer,size,get,metadata,settings,this,chunk,size,get,metadata,settings,this,compress,get,metadata,settings,if,this,chunk,size,get,bytes,buffer,size,get,bytes,throw,new,repository,exception,metadata,name,get,key,this,chunk,size,can,t,be,lower,than,get,key,buffer,size,string,storage,class,get,metadata,settings,string,canned,acl,get,metadata,settings,logger,debug,using,bucket,canned,acl,storage,class,bucket,chunk,size,server,side,encryption,buffer,size,canned,acl,storage,class,amazon,s3,client,s3service,client,metadata,settings,blob,store,new,s3blob,store,settings,client,bucket,server,side,encryption,buffer,size,canned,acl,storage,class,string,base,path,get,metadata,settings,if,strings,has,length,base,path,this,base,path,new,blob,path,add,base,path,else,this,base,path,blob,path,clean,path
S3Repository -> S3Repository(RepositoryMetaData metadata, Settings settings, NamedXContentRegistry namedXContentRegistry, AwsS3Service s3Service);1528762805;Constructs an s3 backed repository;S3Repository(RepositoryMetaData metadata, Settings settings, NamedXContentRegistry namedXContentRegistry, AwsS3Service s3Service) {_        super(metadata, settings, namedXContentRegistry)___        String bucket = BUCKET_SETTING.get(metadata.settings())__        if (bucket == null) {_            throw new RepositoryException(metadata.name(), "No bucket defined for s3 repository")__        }__        boolean serverSideEncryption = SERVER_SIDE_ENCRYPTION_SETTING.get(metadata.settings())__        ByteSizeValue bufferSize = BUFFER_SIZE_SETTING.get(metadata.settings())__        this.chunkSize = CHUNK_SIZE_SETTING.get(metadata.settings())__        this.compress = COMPRESS_SETTING.get(metadata.settings())___        _        if (this.chunkSize.getBytes() < bufferSize.getBytes()) {_            throw new RepositoryException(metadata.name(), CHUNK_SIZE_SETTING.getKey() + " (" + this.chunkSize +_                ") can't be lower than " + BUFFER_SIZE_SETTING.getKey() + " (" + bufferSize + ").")__        }__        _        String storageClass = STORAGE_CLASS_SETTING.get(metadata.settings())__        String cannedACL = CANNED_ACL_SETTING.get(metadata.settings())___        logger.debug("using bucket [{}], chunk_size [{}], server_side_encryption [{}], " +_            "buffer_size [{}], cannedACL [{}], storageClass [{}]",_            bucket, chunkSize, serverSideEncryption, bufferSize, cannedACL, storageClass)___        AmazonS3 client = s3Service.client(metadata.settings())__        blobStore = new S3BlobStore(settings, client, bucket, serverSideEncryption, bufferSize, cannedACL, storageClass)___        String basePath = BASE_PATH_SETTING.get(metadata.settings())__        if (Strings.hasLength(basePath)) {_            this.basePath = new BlobPath().add(basePath)__        } else {_            this.basePath = BlobPath.cleanPath()__        }_    };constructs,an,s3,backed,repository;s3repository,repository,meta,data,metadata,settings,settings,named,xcontent,registry,named,xcontent,registry,aws,s3service,s3service,super,metadata,settings,named,xcontent,registry,string,bucket,get,metadata,settings,if,bucket,null,throw,new,repository,exception,metadata,name,no,bucket,defined,for,s3,repository,boolean,server,side,encryption,get,metadata,settings,byte,size,value,buffer,size,get,metadata,settings,this,chunk,size,get,metadata,settings,this,compress,get,metadata,settings,if,this,chunk,size,get,bytes,buffer,size,get,bytes,throw,new,repository,exception,metadata,name,get,key,this,chunk,size,can,t,be,lower,than,get,key,buffer,size,string,storage,class,get,metadata,settings,string,canned,acl,get,metadata,settings,logger,debug,using,bucket,canned,acl,storage,class,bucket,chunk,size,server,side,encryption,buffer,size,canned,acl,storage,class,amazon,s3,client,s3service,client,metadata,settings,blob,store,new,s3blob,store,settings,client,bucket,server,side,encryption,buffer,size,canned,acl,storage,class,string,base,path,get,metadata,settings,if,strings,has,length,base,path,this,base,path,new,blob,path,add,base,path,else,this,base,path,blob,path,clean,path
S3Repository -> S3Repository(final RepositoryMetaData metadata,                  final Settings settings,                  final NamedXContentRegistry namedXContentRegistry,                  final S3Service service);1531729807;Constructs an s3 backed repository;S3Repository(final RepositoryMetaData metadata,_                 final Settings settings,_                 final NamedXContentRegistry namedXContentRegistry,_                 final S3Service service) {_        super(metadata, settings, namedXContentRegistry)__        this.service = service___        _        this.bucket = BUCKET_SETTING.get(metadata.settings())__        if (bucket == null) {_            throw new RepositoryException(metadata.name(), "No bucket defined for s3 repository")__        }__        this.bufferSize = BUFFER_SIZE_SETTING.get(metadata.settings())__        this.chunkSize = CHUNK_SIZE_SETTING.get(metadata.settings())__        this.compress = COMPRESS_SETTING.get(metadata.settings())___        _        if (this.chunkSize.getBytes() < bufferSize.getBytes()) {_            throw new RepositoryException(metadata.name(), CHUNK_SIZE_SETTING.getKey() + " (" + this.chunkSize +_                ") can't be lower than " + BUFFER_SIZE_SETTING.getKey() + " (" + bufferSize + ").")__        }__        final String basePath = BASE_PATH_SETTING.get(metadata.settings())__        if (Strings.hasLength(basePath)) {_            this.basePath = new BlobPath().add(basePath)__        } else {_            this.basePath = BlobPath.cleanPath()__        }__        this.serverSideEncryption = SERVER_SIDE_ENCRYPTION_SETTING.get(metadata.settings())___        this.storageClass = STORAGE_CLASS_SETTING.get(metadata.settings())__        this.cannedACL = CANNED_ACL_SETTING.get(metadata.settings())__        this.clientName = CLIENT_NAME.get(metadata.settings())___        logger.debug("using bucket [{}], chunk_size [{}], server_side_encryption [{}], " +_                "buffer_size [{}], cannedACL [{}], storageClass [{}]",_            bucket, chunkSize, serverSideEncryption, bufferSize, cannedACL, storageClass)___        _        if (S3ClientSettings.checkDeprecatedCredentials(metadata.settings())) {_            overrideCredentialsFromClusterState(service)__        }_    };constructs,an,s3,backed,repository;s3repository,final,repository,meta,data,metadata,final,settings,settings,final,named,xcontent,registry,named,xcontent,registry,final,s3service,service,super,metadata,settings,named,xcontent,registry,this,service,service,this,bucket,get,metadata,settings,if,bucket,null,throw,new,repository,exception,metadata,name,no,bucket,defined,for,s3,repository,this,buffer,size,get,metadata,settings,this,chunk,size,get,metadata,settings,this,compress,get,metadata,settings,if,this,chunk,size,get,bytes,buffer,size,get,bytes,throw,new,repository,exception,metadata,name,get,key,this,chunk,size,can,t,be,lower,than,get,key,buffer,size,final,string,base,path,get,metadata,settings,if,strings,has,length,base,path,this,base,path,new,blob,path,add,base,path,else,this,base,path,blob,path,clean,path,this,server,side,encryption,get,metadata,settings,this,storage,class,get,metadata,settings,this,canned,acl,get,metadata,settings,this,client,name,get,metadata,settings,logger,debug,using,bucket,canned,acl,storage,class,bucket,chunk,size,server,side,encryption,buffer,size,canned,acl,storage,class,if,s3client,settings,check,deprecated,credentials,metadata,settings,override,credentials,from,cluster,state,service
S3Repository -> S3Repository(final RepositoryMetaData metadata,                  final Settings settings,                  final NamedXContentRegistry namedXContentRegistry,                  final S3Service service);1537806831;Constructs an s3 backed repository;S3Repository(final RepositoryMetaData metadata,_                 final Settings settings,_                 final NamedXContentRegistry namedXContentRegistry,_                 final S3Service service) {_        super(metadata, settings, namedXContentRegistry)__        this.service = service___        _        this.bucket = BUCKET_SETTING.get(metadata.settings())__        if (bucket == null) {_            throw new RepositoryException(metadata.name(), "No bucket defined for s3 repository")__        }__        this.bufferSize = BUFFER_SIZE_SETTING.get(metadata.settings())__        this.chunkSize = CHUNK_SIZE_SETTING.get(metadata.settings())__        this.compress = COMPRESS_SETTING.get(metadata.settings())___        _        if (this.chunkSize.getBytes() < bufferSize.getBytes()) {_            throw new RepositoryException(metadata.name(), CHUNK_SIZE_SETTING.getKey() + " (" + this.chunkSize +_                ") can't be lower than " + BUFFER_SIZE_SETTING.getKey() + " (" + bufferSize + ").")__        }__        final String basePath = BASE_PATH_SETTING.get(metadata.settings())__        if (Strings.hasLength(basePath)) {_            this.basePath = new BlobPath().add(basePath)__        } else {_            this.basePath = BlobPath.cleanPath()__        }__        this.serverSideEncryption = SERVER_SIDE_ENCRYPTION_SETTING.get(metadata.settings())___        this.storageClass = STORAGE_CLASS_SETTING.get(metadata.settings())__        this.cannedACL = CANNED_ACL_SETTING.get(metadata.settings())___        this.clientName = CLIENT_NAME.get(metadata.settings())___        if (CLIENT_NAME.exists(metadata.settings()) && S3ClientSettings.checkDeprecatedCredentials(metadata.settings())) {_            logger.warn(_                    "ignoring use of named client [{}] for repository [{}] as insecure credentials were specified",_                    clientName,_                    metadata.name())__        }__        if (S3ClientSettings.checkDeprecatedCredentials(metadata.settings())) {_            _            deprecationLogger.deprecated("Using s3 access/secret key from repository settings. Instead "_                    + "store these in named clients and the elasticsearch keystore for secure settings.")__            final BasicAWSCredentials insecureCredentials = S3ClientSettings.loadDeprecatedCredentials(metadata.settings())__            final S3ClientSettings s3ClientSettings = S3ClientSettings.getClientSettings(metadata, insecureCredentials)__            this.reference = new AmazonS3Reference(service.buildClient(s3ClientSettings))__        } else {_            reference = null__        }__        logger.debug(_                "using bucket [{}], chunk_size [{}], server_side_encryption [{}], buffer_size [{}], cannedACL [{}], storageClass [{}]",_                bucket,_                chunkSize,_                serverSideEncryption,_                bufferSize,_                cannedACL,_                storageClass)__    };constructs,an,s3,backed,repository;s3repository,final,repository,meta,data,metadata,final,settings,settings,final,named,xcontent,registry,named,xcontent,registry,final,s3service,service,super,metadata,settings,named,xcontent,registry,this,service,service,this,bucket,get,metadata,settings,if,bucket,null,throw,new,repository,exception,metadata,name,no,bucket,defined,for,s3,repository,this,buffer,size,get,metadata,settings,this,chunk,size,get,metadata,settings,this,compress,get,metadata,settings,if,this,chunk,size,get,bytes,buffer,size,get,bytes,throw,new,repository,exception,metadata,name,get,key,this,chunk,size,can,t,be,lower,than,get,key,buffer,size,final,string,base,path,get,metadata,settings,if,strings,has,length,base,path,this,base,path,new,blob,path,add,base,path,else,this,base,path,blob,path,clean,path,this,server,side,encryption,get,metadata,settings,this,storage,class,get,metadata,settings,this,canned,acl,get,metadata,settings,this,client,name,get,metadata,settings,if,exists,metadata,settings,s3client,settings,check,deprecated,credentials,metadata,settings,logger,warn,ignoring,use,of,named,client,for,repository,as,insecure,credentials,were,specified,client,name,metadata,name,if,s3client,settings,check,deprecated,credentials,metadata,settings,deprecation,logger,deprecated,using,s3,access,secret,key,from,repository,settings,instead,store,these,in,named,clients,and,the,elasticsearch,keystore,for,secure,settings,final,basic,awscredentials,insecure,credentials,s3client,settings,load,deprecated,credentials,metadata,settings,final,s3client,settings,s3client,settings,s3client,settings,get,client,settings,metadata,insecure,credentials,this,reference,new,amazon,s3reference,service,build,client,s3client,settings,else,reference,null,logger,debug,using,bucket,canned,acl,storage,class,bucket,chunk,size,server,side,encryption,buffer,size,canned,acl,storage,class
S3Repository -> S3Repository(final RepositoryMetaData metadata,                  final Settings settings,                  final NamedXContentRegistry namedXContentRegistry,                  final S3Service service);1539951844;Constructs an s3 backed repository;S3Repository(final RepositoryMetaData metadata,_                 final Settings settings,_                 final NamedXContentRegistry namedXContentRegistry,_                 final S3Service service) {_        super(metadata, settings, namedXContentRegistry)__        this.service = service___        _        this.bucket = BUCKET_SETTING.get(metadata.settings())__        if (bucket == null) {_            throw new RepositoryException(metadata.name(), "No bucket defined for s3 repository")__        }__        this.bufferSize = BUFFER_SIZE_SETTING.get(metadata.settings())__        this.chunkSize = CHUNK_SIZE_SETTING.get(metadata.settings())__        this.compress = COMPRESS_SETTING.get(metadata.settings())___        _        if (this.chunkSize.getBytes() < bufferSize.getBytes()) {_            throw new RepositoryException(metadata.name(), CHUNK_SIZE_SETTING.getKey() + " (" + this.chunkSize +_                ") can't be lower than " + BUFFER_SIZE_SETTING.getKey() + " (" + bufferSize + ").")__        }__        final String basePath = BASE_PATH_SETTING.get(metadata.settings())__        if (Strings.hasLength(basePath)) {_            this.basePath = new BlobPath().add(basePath)__        } else {_            this.basePath = BlobPath.cleanPath()__        }__        this.serverSideEncryption = SERVER_SIDE_ENCRYPTION_SETTING.get(metadata.settings())___        this.storageClass = STORAGE_CLASS_SETTING.get(metadata.settings())__        this.cannedACL = CANNED_ACL_SETTING.get(metadata.settings())___        this.clientName = CLIENT_NAME.get(metadata.settings())___        if (CLIENT_NAME.exists(metadata.settings()) && S3ClientSettings.checkDeprecatedCredentials(metadata.settings())) {_            logger.warn(_                    "ignoring use of named client [{}] for repository [{}] as insecure credentials were specified",_                    clientName,_                    metadata.name())__        }__        if (S3ClientSettings.checkDeprecatedCredentials(metadata.settings())) {_            _            deprecationLogger.deprecated("Using s3 access/secret key from repository settings. Instead "_                    + "store these in named clients and the elasticsearch keystore for secure settings.")__            final BasicAWSCredentials insecureCredentials = S3ClientSettings.loadDeprecatedCredentials(metadata.settings())__            final S3ClientSettings s3ClientSettings = S3ClientSettings.getClientSettings(metadata, insecureCredentials)__            this.reference = new AmazonS3Reference(service.buildClient(s3ClientSettings))__        } else {_            reference = null__        }__        logger.debug(_                "using bucket [{}], chunk_size [{}], server_side_encryption [{}], buffer_size [{}], cannedACL [{}], storageClass [{}]",_                bucket,_                chunkSize,_                serverSideEncryption,_                bufferSize,_                cannedACL,_                storageClass)__    };constructs,an,s3,backed,repository;s3repository,final,repository,meta,data,metadata,final,settings,settings,final,named,xcontent,registry,named,xcontent,registry,final,s3service,service,super,metadata,settings,named,xcontent,registry,this,service,service,this,bucket,get,metadata,settings,if,bucket,null,throw,new,repository,exception,metadata,name,no,bucket,defined,for,s3,repository,this,buffer,size,get,metadata,settings,this,chunk,size,get,metadata,settings,this,compress,get,metadata,settings,if,this,chunk,size,get,bytes,buffer,size,get,bytes,throw,new,repository,exception,metadata,name,get,key,this,chunk,size,can,t,be,lower,than,get,key,buffer,size,final,string,base,path,get,metadata,settings,if,strings,has,length,base,path,this,base,path,new,blob,path,add,base,path,else,this,base,path,blob,path,clean,path,this,server,side,encryption,get,metadata,settings,this,storage,class,get,metadata,settings,this,canned,acl,get,metadata,settings,this,client,name,get,metadata,settings,if,exists,metadata,settings,s3client,settings,check,deprecated,credentials,metadata,settings,logger,warn,ignoring,use,of,named,client,for,repository,as,insecure,credentials,were,specified,client,name,metadata,name,if,s3client,settings,check,deprecated,credentials,metadata,settings,deprecation,logger,deprecated,using,s3,access,secret,key,from,repository,settings,instead,store,these,in,named,clients,and,the,elasticsearch,keystore,for,secure,settings,final,basic,awscredentials,insecure,credentials,s3client,settings,load,deprecated,credentials,metadata,settings,final,s3client,settings,s3client,settings,s3client,settings,get,client,settings,metadata,insecure,credentials,this,reference,new,amazon,s3reference,service,build,client,s3client,settings,else,reference,null,logger,debug,using,bucket,canned,acl,storage,class,bucket,chunk,size,server,side,encryption,buffer,size,canned,acl,storage,class
S3Repository -> S3Repository(final RepositoryMetaData metadata,                  final Settings settings,                  final NamedXContentRegistry namedXContentRegistry,                  final S3Service service);1540847035;Constructs an s3 backed repository;S3Repository(final RepositoryMetaData metadata,_                 final Settings settings,_                 final NamedXContentRegistry namedXContentRegistry,_                 final S3Service service) {_        super(metadata, settings, namedXContentRegistry)__        this.service = service___        _        this.bucket = BUCKET_SETTING.get(metadata.settings())__        if (bucket == null) {_            throw new RepositoryException(metadata.name(), "No bucket defined for s3 repository")__        }__        this.bufferSize = BUFFER_SIZE_SETTING.get(metadata.settings())__        this.chunkSize = CHUNK_SIZE_SETTING.get(metadata.settings())__        this.compress = COMPRESS_SETTING.get(metadata.settings())___        _        if (this.chunkSize.getBytes() < bufferSize.getBytes()) {_            throw new RepositoryException(metadata.name(), CHUNK_SIZE_SETTING.getKey() + " (" + this.chunkSize +_                ") can't be lower than " + BUFFER_SIZE_SETTING.getKey() + " (" + bufferSize + ").")__        }__        final String basePath = BASE_PATH_SETTING.get(metadata.settings())__        if (Strings.hasLength(basePath)) {_            this.basePath = new BlobPath().add(basePath)__        } else {_            this.basePath = BlobPath.cleanPath()__        }__        this.serverSideEncryption = SERVER_SIDE_ENCRYPTION_SETTING.get(metadata.settings())___        this.storageClass = STORAGE_CLASS_SETTING.get(metadata.settings())__        this.cannedACL = CANNED_ACL_SETTING.get(metadata.settings())___        this.clientName = CLIENT_NAME.get(metadata.settings())___        if (CLIENT_NAME.exists(metadata.settings()) && S3ClientSettings.checkDeprecatedCredentials(metadata.settings())) {_            logger.warn(_                    "ignoring use of named client [{}] for repository [{}] as insecure credentials were specified",_                    clientName,_                    metadata.name())__        }__        if (S3ClientSettings.checkDeprecatedCredentials(metadata.settings())) {_            _            deprecationLogger.deprecated("Using s3 access/secret key from repository settings. Instead "_                    + "store these in named clients and the elasticsearch keystore for secure settings.")__            final BasicAWSCredentials insecureCredentials = S3ClientSettings.loadDeprecatedCredentials(metadata.settings())__            final S3ClientSettings s3ClientSettings = S3ClientSettings.getClientSettings(metadata, insecureCredentials)__            this.reference = new AmazonS3Reference(service.buildClient(s3ClientSettings))__        } else {_            reference = null__        }__        logger.debug(_                "using bucket [{}], chunk_size [{}], server_side_encryption [{}], buffer_size [{}], cannedACL [{}], storageClass [{}]",_                bucket,_                chunkSize,_                serverSideEncryption,_                bufferSize,_                cannedACL,_                storageClass)__    };constructs,an,s3,backed,repository;s3repository,final,repository,meta,data,metadata,final,settings,settings,final,named,xcontent,registry,named,xcontent,registry,final,s3service,service,super,metadata,settings,named,xcontent,registry,this,service,service,this,bucket,get,metadata,settings,if,bucket,null,throw,new,repository,exception,metadata,name,no,bucket,defined,for,s3,repository,this,buffer,size,get,metadata,settings,this,chunk,size,get,metadata,settings,this,compress,get,metadata,settings,if,this,chunk,size,get,bytes,buffer,size,get,bytes,throw,new,repository,exception,metadata,name,get,key,this,chunk,size,can,t,be,lower,than,get,key,buffer,size,final,string,base,path,get,metadata,settings,if,strings,has,length,base,path,this,base,path,new,blob,path,add,base,path,else,this,base,path,blob,path,clean,path,this,server,side,encryption,get,metadata,settings,this,storage,class,get,metadata,settings,this,canned,acl,get,metadata,settings,this,client,name,get,metadata,settings,if,exists,metadata,settings,s3client,settings,check,deprecated,credentials,metadata,settings,logger,warn,ignoring,use,of,named,client,for,repository,as,insecure,credentials,were,specified,client,name,metadata,name,if,s3client,settings,check,deprecated,credentials,metadata,settings,deprecation,logger,deprecated,using,s3,access,secret,key,from,repository,settings,instead,store,these,in,named,clients,and,the,elasticsearch,keystore,for,secure,settings,final,basic,awscredentials,insecure,credentials,s3client,settings,load,deprecated,credentials,metadata,settings,final,s3client,settings,s3client,settings,s3client,settings,get,client,settings,metadata,insecure,credentials,this,reference,new,amazon,s3reference,service,build,client,s3client,settings,else,reference,null,logger,debug,using,bucket,canned,acl,storage,class,bucket,chunk,size,server,side,encryption,buffer,size,canned,acl,storage,class
S3Repository -> S3Repository(final RepositoryMetaData metadata,                  final Settings settings,                  final NamedXContentRegistry namedXContentRegistry,                  final S3Service service);1541008027;Constructs an s3 backed repository;S3Repository(final RepositoryMetaData metadata,_                 final Settings settings,_                 final NamedXContentRegistry namedXContentRegistry,_                 final S3Service service) {_        super(metadata, settings, namedXContentRegistry)__        this.settings = settings__        this.service = service___        _        this.bucket = BUCKET_SETTING.get(metadata.settings())__        if (bucket == null) {_            throw new RepositoryException(metadata.name(), "No bucket defined for s3 repository")__        }__        this.bufferSize = BUFFER_SIZE_SETTING.get(metadata.settings())__        this.chunkSize = CHUNK_SIZE_SETTING.get(metadata.settings())__        this.compress = COMPRESS_SETTING.get(metadata.settings())___        _        if (this.chunkSize.getBytes() < bufferSize.getBytes()) {_            throw new RepositoryException(metadata.name(), CHUNK_SIZE_SETTING.getKey() + " (" + this.chunkSize +_                ") can't be lower than " + BUFFER_SIZE_SETTING.getKey() + " (" + bufferSize + ").")__        }__        final String basePath = BASE_PATH_SETTING.get(metadata.settings())__        if (Strings.hasLength(basePath)) {_            this.basePath = new BlobPath().add(basePath)__        } else {_            this.basePath = BlobPath.cleanPath()__        }__        this.serverSideEncryption = SERVER_SIDE_ENCRYPTION_SETTING.get(metadata.settings())___        this.storageClass = STORAGE_CLASS_SETTING.get(metadata.settings())__        this.cannedACL = CANNED_ACL_SETTING.get(metadata.settings())___        this.clientName = CLIENT_NAME.get(metadata.settings())___        if (CLIENT_NAME.exists(metadata.settings()) && S3ClientSettings.checkDeprecatedCredentials(metadata.settings())) {_            logger.warn(_                    "ignoring use of named client [{}] for repository [{}] as insecure credentials were specified",_                    clientName,_                    metadata.name())__        }__        if (S3ClientSettings.checkDeprecatedCredentials(metadata.settings())) {_            _            deprecationLogger.deprecated("Using s3 access/secret key from repository settings. Instead "_                    + "store these in named clients and the elasticsearch keystore for secure settings.")__            final BasicAWSCredentials insecureCredentials = S3ClientSettings.loadDeprecatedCredentials(metadata.settings())__            final S3ClientSettings s3ClientSettings = S3ClientSettings.getClientSettings(metadata, insecureCredentials)__            this.reference = new AmazonS3Reference(service.buildClient(s3ClientSettings))__        } else {_            reference = null__        }__        logger.debug(_                "using bucket [{}], chunk_size [{}], server_side_encryption [{}], buffer_size [{}], cannedACL [{}], storageClass [{}]",_                bucket,_                chunkSize,_                serverSideEncryption,_                bufferSize,_                cannedACL,_                storageClass)__    };constructs,an,s3,backed,repository;s3repository,final,repository,meta,data,metadata,final,settings,settings,final,named,xcontent,registry,named,xcontent,registry,final,s3service,service,super,metadata,settings,named,xcontent,registry,this,settings,settings,this,service,service,this,bucket,get,metadata,settings,if,bucket,null,throw,new,repository,exception,metadata,name,no,bucket,defined,for,s3,repository,this,buffer,size,get,metadata,settings,this,chunk,size,get,metadata,settings,this,compress,get,metadata,settings,if,this,chunk,size,get,bytes,buffer,size,get,bytes,throw,new,repository,exception,metadata,name,get,key,this,chunk,size,can,t,be,lower,than,get,key,buffer,size,final,string,base,path,get,metadata,settings,if,strings,has,length,base,path,this,base,path,new,blob,path,add,base,path,else,this,base,path,blob,path,clean,path,this,server,side,encryption,get,metadata,settings,this,storage,class,get,metadata,settings,this,canned,acl,get,metadata,settings,this,client,name,get,metadata,settings,if,exists,metadata,settings,s3client,settings,check,deprecated,credentials,metadata,settings,logger,warn,ignoring,use,of,named,client,for,repository,as,insecure,credentials,were,specified,client,name,metadata,name,if,s3client,settings,check,deprecated,credentials,metadata,settings,deprecation,logger,deprecated,using,s3,access,secret,key,from,repository,settings,instead,store,these,in,named,clients,and,the,elasticsearch,keystore,for,secure,settings,final,basic,awscredentials,insecure,credentials,s3client,settings,load,deprecated,credentials,metadata,settings,final,s3client,settings,s3client,settings,s3client,settings,get,client,settings,metadata,insecure,credentials,this,reference,new,amazon,s3reference,service,build,client,s3client,settings,else,reference,null,logger,debug,using,bucket,canned,acl,storage,class,bucket,chunk,size,server,side,encryption,buffer,size,canned,acl,storage,class
S3Repository -> S3Repository(final RepositoryMetaData metadata,                  final Settings settings,                  final NamedXContentRegistry namedXContentRegistry,                  final S3Service service);1541092382;Constructs an s3 backed repository;S3Repository(final RepositoryMetaData metadata,_                 final Settings settings,_                 final NamedXContentRegistry namedXContentRegistry,_                 final S3Service service) {_        super(metadata, settings, namedXContentRegistry)__        this.settings = settings__        this.service = service___        _        this.bucket = BUCKET_SETTING.get(metadata.settings())__        if (bucket == null) {_            throw new RepositoryException(metadata.name(), "No bucket defined for s3 repository")__        }__        this.bufferSize = BUFFER_SIZE_SETTING.get(metadata.settings())__        this.chunkSize = CHUNK_SIZE_SETTING.get(metadata.settings())__        this.compress = COMPRESS_SETTING.get(metadata.settings())___        _        if (this.chunkSize.getBytes() < bufferSize.getBytes()) {_            throw new RepositoryException(metadata.name(), CHUNK_SIZE_SETTING.getKey() + " (" + this.chunkSize +_                ") can't be lower than " + BUFFER_SIZE_SETTING.getKey() + " (" + bufferSize + ").")__        }__        final String basePath = BASE_PATH_SETTING.get(metadata.settings())__        if (Strings.hasLength(basePath)) {_            this.basePath = new BlobPath().add(basePath)__        } else {_            this.basePath = BlobPath.cleanPath()__        }__        this.serverSideEncryption = SERVER_SIDE_ENCRYPTION_SETTING.get(metadata.settings())___        this.storageClass = STORAGE_CLASS_SETTING.get(metadata.settings())__        this.cannedACL = CANNED_ACL_SETTING.get(metadata.settings())___        this.clientName = CLIENT_NAME.get(metadata.settings())___        if (CLIENT_NAME.exists(metadata.settings()) && S3ClientSettings.checkDeprecatedCredentials(metadata.settings())) {_            logger.warn(_                    "ignoring use of named client [{}] for repository [{}] as insecure credentials were specified",_                    clientName,_                    metadata.name())__        }__        if (S3ClientSettings.checkDeprecatedCredentials(metadata.settings())) {_            _            deprecationLogger.deprecated("Using s3 access/secret key from repository settings. Instead "_                    + "store these in named clients and the elasticsearch keystore for secure settings.")__            final BasicAWSCredentials insecureCredentials = S3ClientSettings.loadDeprecatedCredentials(metadata.settings())__            final S3ClientSettings s3ClientSettings = S3ClientSettings.getClientSettings(metadata, insecureCredentials)__            this.reference = new AmazonS3Reference(service.buildClient(s3ClientSettings))__        } else {_            reference = null__        }__        logger.debug(_                "using bucket [{}], chunk_size [{}], server_side_encryption [{}], buffer_size [{}], cannedACL [{}], storageClass [{}]",_                bucket,_                chunkSize,_                serverSideEncryption,_                bufferSize,_                cannedACL,_                storageClass)__    };constructs,an,s3,backed,repository;s3repository,final,repository,meta,data,metadata,final,settings,settings,final,named,xcontent,registry,named,xcontent,registry,final,s3service,service,super,metadata,settings,named,xcontent,registry,this,settings,settings,this,service,service,this,bucket,get,metadata,settings,if,bucket,null,throw,new,repository,exception,metadata,name,no,bucket,defined,for,s3,repository,this,buffer,size,get,metadata,settings,this,chunk,size,get,metadata,settings,this,compress,get,metadata,settings,if,this,chunk,size,get,bytes,buffer,size,get,bytes,throw,new,repository,exception,metadata,name,get,key,this,chunk,size,can,t,be,lower,than,get,key,buffer,size,final,string,base,path,get,metadata,settings,if,strings,has,length,base,path,this,base,path,new,blob,path,add,base,path,else,this,base,path,blob,path,clean,path,this,server,side,encryption,get,metadata,settings,this,storage,class,get,metadata,settings,this,canned,acl,get,metadata,settings,this,client,name,get,metadata,settings,if,exists,metadata,settings,s3client,settings,check,deprecated,credentials,metadata,settings,logger,warn,ignoring,use,of,named,client,for,repository,as,insecure,credentials,were,specified,client,name,metadata,name,if,s3client,settings,check,deprecated,credentials,metadata,settings,deprecation,logger,deprecated,using,s3,access,secret,key,from,repository,settings,instead,store,these,in,named,clients,and,the,elasticsearch,keystore,for,secure,settings,final,basic,awscredentials,insecure,credentials,s3client,settings,load,deprecated,credentials,metadata,settings,final,s3client,settings,s3client,settings,s3client,settings,get,client,settings,metadata,insecure,credentials,this,reference,new,amazon,s3reference,service,build,client,s3client,settings,else,reference,null,logger,debug,using,bucket,canned,acl,storage,class,bucket,chunk,size,server,side,encryption,buffer,size,canned,acl,storage,class
S3Repository -> S3Repository(final RepositoryMetaData metadata,                  final Settings settings,                  final NamedXContentRegistry namedXContentRegistry,                  final S3Service service);1548825751;Constructs an s3 backed repository;S3Repository(final RepositoryMetaData metadata,_                 final Settings settings,_                 final NamedXContentRegistry namedXContentRegistry,_                 final S3Service service) {_        super(metadata, settings, namedXContentRegistry)__        this.service = service___        this.repositoryMetaData = metadata___        _        this.bucket = BUCKET_SETTING.get(metadata.settings())__        if (bucket == null) {_            throw new RepositoryException(metadata.name(), "No bucket defined for s3 repository")__        }__        this.bufferSize = BUFFER_SIZE_SETTING.get(metadata.settings())__        this.chunkSize = CHUNK_SIZE_SETTING.get(metadata.settings())__        this.compress = COMPRESS_SETTING.get(metadata.settings())___        _        if (this.chunkSize.getBytes() < bufferSize.getBytes()) {_            throw new RepositoryException(metadata.name(), CHUNK_SIZE_SETTING.getKey() + " (" + this.chunkSize +_                ") can't be lower than " + BUFFER_SIZE_SETTING.getKey() + " (" + bufferSize + ").")__        }__        final String basePath = BASE_PATH_SETTING.get(metadata.settings())__        if (Strings.hasLength(basePath)) {_            this.basePath = new BlobPath().add(basePath)__        } else {_            this.basePath = BlobPath.cleanPath()__        }__        this.serverSideEncryption = SERVER_SIDE_ENCRYPTION_SETTING.get(metadata.settings())___        this.storageClass = STORAGE_CLASS_SETTING.get(metadata.settings())__        this.cannedACL = CANNED_ACL_SETTING.get(metadata.settings())___        if (S3ClientSettings.checkDeprecatedCredentials(metadata.settings())) {_            _            deprecationLogger.deprecated("Using s3 access/secret key from repository settings. Instead "_                    + "store these in named clients and the elasticsearch keystore for secure settings.")__        }__        logger.debug(_                "using bucket [{}], chunk_size [{}], server_side_encryption [{}], buffer_size [{}], cannedACL [{}], storageClass [{}]",_                bucket,_                chunkSize,_                serverSideEncryption,_                bufferSize,_                cannedACL,_                storageClass)__    };constructs,an,s3,backed,repository;s3repository,final,repository,meta,data,metadata,final,settings,settings,final,named,xcontent,registry,named,xcontent,registry,final,s3service,service,super,metadata,settings,named,xcontent,registry,this,service,service,this,repository,meta,data,metadata,this,bucket,get,metadata,settings,if,bucket,null,throw,new,repository,exception,metadata,name,no,bucket,defined,for,s3,repository,this,buffer,size,get,metadata,settings,this,chunk,size,get,metadata,settings,this,compress,get,metadata,settings,if,this,chunk,size,get,bytes,buffer,size,get,bytes,throw,new,repository,exception,metadata,name,get,key,this,chunk,size,can,t,be,lower,than,get,key,buffer,size,final,string,base,path,get,metadata,settings,if,strings,has,length,base,path,this,base,path,new,blob,path,add,base,path,else,this,base,path,blob,path,clean,path,this,server,side,encryption,get,metadata,settings,this,storage,class,get,metadata,settings,this,canned,acl,get,metadata,settings,if,s3client,settings,check,deprecated,credentials,metadata,settings,deprecation,logger,deprecated,using,s3,access,secret,key,from,repository,settings,instead,store,these,in,named,clients,and,the,elasticsearch,keystore,for,secure,settings,logger,debug,using,bucket,canned,acl,storage,class,bucket,chunk,size,server,side,encryption,buffer,size,canned,acl,storage,class
S3Repository -> S3Repository(final RepositoryMetaData metadata,                  final Settings settings,                  final NamedXContentRegistry namedXContentRegistry,                  final S3Service service);1550647627;Constructs an s3 backed repository;S3Repository(final RepositoryMetaData metadata,_                 final Settings settings,_                 final NamedXContentRegistry namedXContentRegistry,_                 final S3Service service) {_        super(metadata, settings, COMPRESS_SETTING.get(metadata.settings()), namedXContentRegistry)__        this.service = service___        this.repositoryMetaData = metadata___        _        this.bucket = BUCKET_SETTING.get(metadata.settings())__        if (bucket == null) {_            throw new RepositoryException(metadata.name(), "No bucket defined for s3 repository")__        }__        this.bufferSize = BUFFER_SIZE_SETTING.get(metadata.settings())__        this.chunkSize = CHUNK_SIZE_SETTING.get(metadata.settings())___        _        if (this.chunkSize.getBytes() < bufferSize.getBytes()) {_            throw new RepositoryException(metadata.name(), CHUNK_SIZE_SETTING.getKey() + " (" + this.chunkSize +_                ") can't be lower than " + BUFFER_SIZE_SETTING.getKey() + " (" + bufferSize + ").")__        }__        final String basePath = BASE_PATH_SETTING.get(metadata.settings())__        if (Strings.hasLength(basePath)) {_            this.basePath = new BlobPath().add(basePath)__        } else {_            this.basePath = BlobPath.cleanPath()__        }__        this.serverSideEncryption = SERVER_SIDE_ENCRYPTION_SETTING.get(metadata.settings())___        this.storageClass = STORAGE_CLASS_SETTING.get(metadata.settings())__        this.cannedACL = CANNED_ACL_SETTING.get(metadata.settings())___        if (S3ClientSettings.checkDeprecatedCredentials(metadata.settings())) {_            _            deprecationLogger.deprecated("Using s3 access/secret key from repository settings. Instead "_                    + "store these in named clients and the elasticsearch keystore for secure settings.")__        }__        logger.debug(_                "using bucket [{}], chunk_size [{}], server_side_encryption [{}], buffer_size [{}], cannedACL [{}], storageClass [{}]",_                bucket,_                chunkSize,_                serverSideEncryption,_                bufferSize,_                cannedACL,_                storageClass)__    };constructs,an,s3,backed,repository;s3repository,final,repository,meta,data,metadata,final,settings,settings,final,named,xcontent,registry,named,xcontent,registry,final,s3service,service,super,metadata,settings,get,metadata,settings,named,xcontent,registry,this,service,service,this,repository,meta,data,metadata,this,bucket,get,metadata,settings,if,bucket,null,throw,new,repository,exception,metadata,name,no,bucket,defined,for,s3,repository,this,buffer,size,get,metadata,settings,this,chunk,size,get,metadata,settings,if,this,chunk,size,get,bytes,buffer,size,get,bytes,throw,new,repository,exception,metadata,name,get,key,this,chunk,size,can,t,be,lower,than,get,key,buffer,size,final,string,base,path,get,metadata,settings,if,strings,has,length,base,path,this,base,path,new,blob,path,add,base,path,else,this,base,path,blob,path,clean,path,this,server,side,encryption,get,metadata,settings,this,storage,class,get,metadata,settings,this,canned,acl,get,metadata,settings,if,s3client,settings,check,deprecated,credentials,metadata,settings,deprecation,logger,deprecated,using,s3,access,secret,key,from,repository,settings,instead,store,these,in,named,clients,and,the,elasticsearch,keystore,for,secure,settings,logger,debug,using,bucket,canned,acl,storage,class,bucket,chunk,size,server,side,encryption,buffer,size,canned,acl,storage,class
