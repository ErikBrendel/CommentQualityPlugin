commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;public void testThereIsADefaultClientByDefault() {     final Map<String, S3ClientSettings> settings = S3ClientSettings.load(Settings.EMPTY).     assertThat(settings.keySet(), contains("default")).     final S3ClientSettings defaultSettings = settings.get("default").     assertThat(defaultSettings.credentials, nullValue()).     assertThat(defaultSettings.endpoint, isEmptyString()).     assertThat(defaultSettings.protocol, is(Protocol.HTTPS)).     assertThat(defaultSettings.proxyHost, isEmptyString()).     assertThat(defaultSettings.proxyPort, is(80)).     assertThat(defaultSettings.proxyUsername, isEmptyString()).     assertThat(defaultSettings.proxyPassword, isEmptyString()).     assertThat(defaultSettings.readTimeoutMillis, is(ClientConfiguration.DEFAULT_SOCKET_TIMEOUT)).     assertThat(defaultSettings.maxRetries, is(ClientConfiguration.DEFAULT_RETRY_POLICY.getMaxErrorRetry())).     assertThat(defaultSettings.throttleRetries, is(ClientConfiguration.DEFAULT_THROTTLE_RETRIES)). }
false;public;0;8;;public void testDefaultClientSettingsCanBeSet() {     final Map<String, S3ClientSettings> settings = S3ClientSettings.load(Settings.builder().put("s3.client.default.max_retries", 10).build()).     assertThat(settings.keySet(), contains("default")).     final S3ClientSettings defaultSettings = settings.get("default").     assertThat(defaultSettings.maxRetries, is(10)). }
false;public;0;11;;public void testNondefaultClientCreatedBySettingItsSettings() {     final Map<String, S3ClientSettings> settings = S3ClientSettings.load(Settings.builder().put("s3.client.another_client.max_retries", 10).build()).     assertThat(settings.keySet(), contains("default", "another_client")).     final S3ClientSettings defaultSettings = settings.get("default").     assertThat(defaultSettings.maxRetries, is(ClientConfiguration.DEFAULT_RETRY_POLICY.getMaxErrorRetry())).     final S3ClientSettings anotherClientSettings = settings.get("another_client").     assertThat(anotherClientSettings.maxRetries, is(10)). }
false;public;0;7;;public void testRejectionOfLoneAccessKey() {     final MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString("s3.client.default.access_key", "aws_key").     final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> S3ClientSettings.load(Settings.builder().setSecureSettings(secureSettings).build())).     assertThat(e.getMessage(), is("Missing secret key for s3 client [default]")). }
false;public;0;7;;public void testRejectionOfLoneSecretKey() {     final MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString("s3.client.default.secret_key", "aws_key").     final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> S3ClientSettings.load(Settings.builder().setSecureSettings(secureSettings).build())).     assertThat(e.getMessage(), is("Missing access key for s3 client [default]")). }
false;public;0;7;;public void testRejectionOfLoneSessionToken() {     final MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString("s3.client.default.session_token", "aws_key").     final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> S3ClientSettings.load(Settings.builder().setSecureSettings(secureSettings).build())).     assertThat(e.getMessage(), is("Missing access key and secret key for s3 client [default]")). }
false;public;0;10;;public void testCredentialsTypeWithAccessKeyAndSecretKey() {     final MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString("s3.client.default.access_key", "access_key").     secureSettings.setString("s3.client.default.secret_key", "secret_key").     final Map<String, S3ClientSettings> settings = S3ClientSettings.load(Settings.builder().setSecureSettings(secureSettings).build()).     final S3ClientSettings defaultSettings = settings.get("default").     S3BasicCredentials credentials = defaultSettings.credentials.     assertThat(credentials.getAWSAccessKeyId(), is("access_key")).     assertThat(credentials.getAWSSecretKey(), is("secret_key")). }
false;public;0;12;;public void testCredentialsTypeWithAccessKeyAndSecretKeyAndSessionToken() {     final MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString("s3.client.default.access_key", "access_key").     secureSettings.setString("s3.client.default.secret_key", "secret_key").     secureSettings.setString("s3.client.default.session_token", "session_token").     final Map<String, S3ClientSettings> settings = S3ClientSettings.load(Settings.builder().setSecureSettings(secureSettings).build()).     final S3ClientSettings defaultSettings = settings.get("default").     S3BasicSessionCredentials credentials = (S3BasicSessionCredentials) defaultSettings.credentials.     assertThat(credentials.getAWSAccessKeyId(), is("access_key")).     assertThat(credentials.getAWSSecretKey(), is("secret_key")).     assertThat(credentials.getSessionToken(), is("session_token")). }
false;public;0;24;;public void testRefineWithRepoSettings() {     final MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString("s3.client.default.access_key", "access_key").     secureSettings.setString("s3.client.default.secret_key", "secret_key").     secureSettings.setString("s3.client.default.session_token", "session_token").     final S3ClientSettings baseSettings = S3ClientSettings.load(Settings.builder().setSecureSettings(secureSettings).build()).get("default").     {         final S3ClientSettings refinedSettings = baseSettings.refine(new RepositoryMetaData("name", "type", Settings.EMPTY)).         assertTrue(refinedSettings == baseSettings).     }     {         final String endpoint = "some.host".         final S3ClientSettings refinedSettings = baseSettings.refine(new RepositoryMetaData("name", "type", Settings.builder().put("endpoint", endpoint).build())).         assertThat(refinedSettings.endpoint, is(endpoint)).         S3BasicSessionCredentials credentials = (S3BasicSessionCredentials) refinedSettings.credentials.         assertThat(credentials.getAWSAccessKeyId(), is("access_key")).         assertThat(credentials.getAWSSecretKey(), is("secret_key")).         assertThat(credentials.getSessionToken(), is("session_token")).     } }
