# id;timestamp;commentText;codeText;commentWords;codeWords
S3BlobStoreTests -> public static S3BlobStore randomMockS3BlobStore();1524684173;Creates a new {@link S3BlobStore} with random settings._<p>_The blobstore uses a {@link MockAmazonS3} client.;public static S3BlobStore randomMockS3BlobStore() {_        String bucket = randomAlphaOfLength(randomIntBetween(1, 10)).toLowerCase(Locale.ROOT)__        ByteSizeValue bufferSize = new ByteSizeValue(randomIntBetween(5, 100), ByteSizeUnit.MB)__        boolean serverSideEncryption = randomBoolean()___        String cannedACL = null__        if (randomBoolean()) {_            cannedACL = randomFrom(CannedAccessControlList.values()).toString()__        }__        String storageClass = null__        if (randomBoolean()) {_            storageClass = randomValueOtherThan(StorageClass.Glacier, () -> randomFrom(StorageClass.values())).toString()__        }__        AmazonS3 client = new MockAmazonS3(new ConcurrentHashMap<>(), bucket, serverSideEncryption, cannedACL, storageClass)__        return new S3BlobStore(Settings.EMPTY, client, bucket, serverSideEncryption, bufferSize, cannedACL, storageClass)__    };creates,a,new,link,s3blob,store,with,random,settings,p,the,blobstore,uses,a,link,mock,amazon,s3,client;public,static,s3blob,store,random,mock,s3blob,store,string,bucket,random,alpha,of,length,random,int,between,1,10,to,lower,case,locale,root,byte,size,value,buffer,size,new,byte,size,value,random,int,between,5,100,byte,size,unit,mb,boolean,server,side,encryption,random,boolean,string,canned,acl,null,if,random,boolean,canned,acl,random,from,canned,access,control,list,values,to,string,string,storage,class,null,if,random,boolean,storage,class,random,value,other,than,storage,class,glacier,random,from,storage,class,values,to,string,amazon,s3,client,new,mock,amazon,s3,new,concurrent,hash,map,bucket,server,side,encryption,canned,acl,storage,class,return,new,s3blob,store,settings,empty,client,bucket,server,side,encryption,buffer,size,canned,acl,storage,class
S3BlobStoreTests -> public static S3BlobStore randomMockS3BlobStore();1529341607;Creates a new {@link S3BlobStore} with random settings._<p>_The blobstore uses a {@link MockAmazonS3} client.;public static S3BlobStore randomMockS3BlobStore() {_        String bucket = randomAlphaOfLength(randomIntBetween(1, 10)).toLowerCase(Locale.ROOT)__        ByteSizeValue bufferSize = new ByteSizeValue(randomIntBetween(5, 100), ByteSizeUnit.MB)__        boolean serverSideEncryption = randomBoolean()___        String cannedACL = null__        if (randomBoolean()) {_            cannedACL = randomFrom(CannedAccessControlList.values()).toString()__        }__        String storageClass = null__        if (randomBoolean()) {_            storageClass = randomValueOtherThan(StorageClass.Glacier, () -> randomFrom(StorageClass.values())).toString()__        }__        final String theClientName = randomAlphaOfLength(4)__        final AmazonS3 client = new MockAmazonS3(new ConcurrentHashMap<>(), bucket, serverSideEncryption, cannedACL, storageClass)__        final AwsS3Service service = new InternalAwsS3Service(Settings.EMPTY) {_            @Override_            public synchronized AmazonS3Reference client(String clientName) {_                assert theClientName.equals(clientName)__                return new AmazonS3Reference(client)__            }_        }__        return new S3BlobStore(Settings.EMPTY, service, theClientName, bucket, serverSideEncryption, bufferSize, cannedACL, storageClass)__    };creates,a,new,link,s3blob,store,with,random,settings,p,the,blobstore,uses,a,link,mock,amazon,s3,client;public,static,s3blob,store,random,mock,s3blob,store,string,bucket,random,alpha,of,length,random,int,between,1,10,to,lower,case,locale,root,byte,size,value,buffer,size,new,byte,size,value,random,int,between,5,100,byte,size,unit,mb,boolean,server,side,encryption,random,boolean,string,canned,acl,null,if,random,boolean,canned,acl,random,from,canned,access,control,list,values,to,string,string,storage,class,null,if,random,boolean,storage,class,random,value,other,than,storage,class,glacier,random,from,storage,class,values,to,string,final,string,the,client,name,random,alpha,of,length,4,final,amazon,s3,client,new,mock,amazon,s3,new,concurrent,hash,map,bucket,server,side,encryption,canned,acl,storage,class,final,aws,s3service,service,new,internal,aws,s3service,settings,empty,override,public,synchronized,amazon,s3reference,client,string,client,name,assert,the,client,name,equals,client,name,return,new,amazon,s3reference,client,return,new,s3blob,store,settings,empty,service,the,client,name,bucket,server,side,encryption,buffer,size,canned,acl,storage,class
S3BlobStoreTests -> public static S3BlobStore randomMockS3BlobStore();1531179852;Creates a new {@link S3BlobStore} with random settings._<p>_The blobstore uses a {@link MockAmazonS3} client.;public static S3BlobStore randomMockS3BlobStore() {_        String bucket = randomAlphaOfLength(randomIntBetween(1, 10)).toLowerCase(Locale.ROOT)__        ByteSizeValue bufferSize = new ByteSizeValue(randomIntBetween(5, 100), ByteSizeUnit.MB)__        boolean serverSideEncryption = randomBoolean()___        String cannedACL = null__        if (randomBoolean()) {_            cannedACL = randomFrom(CannedAccessControlList.values()).toString()__        }__        String storageClass = null__        if (randomBoolean()) {_            storageClass = randomValueOtherThan(StorageClass.Glacier, () -> randomFrom(StorageClass.values())).toString()__        }__        final String theClientName = randomAlphaOfLength(4)__        final AmazonS3 client = new MockAmazonS3(new ConcurrentHashMap<>(), bucket, serverSideEncryption, cannedACL, storageClass)__        final S3Service service = new S3Service(Settings.EMPTY) {_            @Override_            public synchronized AmazonS3Reference client(String clientName) {_                assert theClientName.equals(clientName)__                return new AmazonS3Reference(client)__            }_        }__        return new S3BlobStore(Settings.EMPTY, service, theClientName, bucket, serverSideEncryption, bufferSize, cannedACL, storageClass)__    };creates,a,new,link,s3blob,store,with,random,settings,p,the,blobstore,uses,a,link,mock,amazon,s3,client;public,static,s3blob,store,random,mock,s3blob,store,string,bucket,random,alpha,of,length,random,int,between,1,10,to,lower,case,locale,root,byte,size,value,buffer,size,new,byte,size,value,random,int,between,5,100,byte,size,unit,mb,boolean,server,side,encryption,random,boolean,string,canned,acl,null,if,random,boolean,canned,acl,random,from,canned,access,control,list,values,to,string,string,storage,class,null,if,random,boolean,storage,class,random,value,other,than,storage,class,glacier,random,from,storage,class,values,to,string,final,string,the,client,name,random,alpha,of,length,4,final,amazon,s3,client,new,mock,amazon,s3,new,concurrent,hash,map,bucket,server,side,encryption,canned,acl,storage,class,final,s3service,service,new,s3service,settings,empty,override,public,synchronized,amazon,s3reference,client,string,client,name,assert,the,client,name,equals,client,name,return,new,amazon,s3reference,client,return,new,s3blob,store,settings,empty,service,the,client,name,bucket,server,side,encryption,buffer,size,canned,acl,storage,class
S3BlobStoreTests -> public static S3BlobStore randomMockS3BlobStore();1541092382;Creates a new {@link S3BlobStore} with random settings._<p>_The blobstore uses a {@link MockAmazonS3} client.;public static S3BlobStore randomMockS3BlobStore() {_        String bucket = randomAlphaOfLength(randomIntBetween(1, 10)).toLowerCase(Locale.ROOT)__        ByteSizeValue bufferSize = new ByteSizeValue(randomIntBetween(5, 100), ByteSizeUnit.MB)__        boolean serverSideEncryption = randomBoolean()___        String cannedACL = null__        if (randomBoolean()) {_            cannedACL = randomFrom(CannedAccessControlList.values()).toString()__        }__        String storageClass = null__        if (randomBoolean()) {_            storageClass = randomValueOtherThan(StorageClass.Glacier, () -> randomFrom(StorageClass.values())).toString()__        }__        final String theClientName = randomAlphaOfLength(4)__        final AmazonS3 client = new MockAmazonS3(new ConcurrentHashMap<>(), bucket, serverSideEncryption, cannedACL, storageClass)__        final S3Service service = new S3Service() {_            @Override_            public synchronized AmazonS3Reference client(String clientName) {_                assert theClientName.equals(clientName)__                return new AmazonS3Reference(client)__            }_        }__        return new S3BlobStore(service, theClientName, bucket, serverSideEncryption, bufferSize, cannedACL, storageClass)__    };creates,a,new,link,s3blob,store,with,random,settings,p,the,blobstore,uses,a,link,mock,amazon,s3,client;public,static,s3blob,store,random,mock,s3blob,store,string,bucket,random,alpha,of,length,random,int,between,1,10,to,lower,case,locale,root,byte,size,value,buffer,size,new,byte,size,value,random,int,between,5,100,byte,size,unit,mb,boolean,server,side,encryption,random,boolean,string,canned,acl,null,if,random,boolean,canned,acl,random,from,canned,access,control,list,values,to,string,string,storage,class,null,if,random,boolean,storage,class,random,value,other,than,storage,class,glacier,random,from,storage,class,values,to,string,final,string,the,client,name,random,alpha,of,length,4,final,amazon,s3,client,new,mock,amazon,s3,new,concurrent,hash,map,bucket,server,side,encryption,canned,acl,storage,class,final,s3service,service,new,s3service,override,public,synchronized,amazon,s3reference,client,string,client,name,assert,the,client,name,equals,client,name,return,new,amazon,s3reference,client,return,new,s3blob,store,service,the,client,name,bucket,server,side,encryption,buffer,size,canned,acl,storage,class
S3BlobStoreTests -> public static S3BlobStore randomMockS3BlobStore();1548825751;Creates a new {@link S3BlobStore} with random settings._<p>_The blobstore uses a {@link MockAmazonS3} client.;public static S3BlobStore randomMockS3BlobStore() {_        String bucket = randomAlphaOfLength(randomIntBetween(1, 10)).toLowerCase(Locale.ROOT)__        ByteSizeValue bufferSize = new ByteSizeValue(randomIntBetween(5, 100), ByteSizeUnit.MB)__        boolean serverSideEncryption = randomBoolean()___        String cannedACL = null__        if (randomBoolean()) {_            cannedACL = randomFrom(CannedAccessControlList.values()).toString()__        }__        String storageClass = null__        if (randomBoolean()) {_            storageClass = randomValueOtherThan(StorageClass.Glacier, () -> randomFrom(StorageClass.values())).toString()__        }__        final AmazonS3 client = new MockAmazonS3(new ConcurrentHashMap<>(), bucket, serverSideEncryption, cannedACL, storageClass)__        final S3Service service = new S3Service() {_            @Override_            public synchronized AmazonS3Reference client(RepositoryMetaData repositoryMetaData) {_                return new AmazonS3Reference(client)__            }_        }__        return new S3BlobStore(service, bucket, serverSideEncryption, bufferSize, cannedACL, storageClass,_            new RepositoryMetaData(bucket, "s3", Settings.EMPTY))__    };creates,a,new,link,s3blob,store,with,random,settings,p,the,blobstore,uses,a,link,mock,amazon,s3,client;public,static,s3blob,store,random,mock,s3blob,store,string,bucket,random,alpha,of,length,random,int,between,1,10,to,lower,case,locale,root,byte,size,value,buffer,size,new,byte,size,value,random,int,between,5,100,byte,size,unit,mb,boolean,server,side,encryption,random,boolean,string,canned,acl,null,if,random,boolean,canned,acl,random,from,canned,access,control,list,values,to,string,string,storage,class,null,if,random,boolean,storage,class,random,value,other,than,storage,class,glacier,random,from,storage,class,values,to,string,final,amazon,s3,client,new,mock,amazon,s3,new,concurrent,hash,map,bucket,server,side,encryption,canned,acl,storage,class,final,s3service,service,new,s3service,override,public,synchronized,amazon,s3reference,client,repository,meta,data,repository,meta,data,return,new,amazon,s3reference,client,return,new,s3blob,store,service,bucket,server,side,encryption,buffer,size,canned,acl,storage,class,new,repository,meta,data,bucket,s3,settings,empty
