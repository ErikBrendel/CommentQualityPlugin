commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;12;;@BeforeClass public static void setUpRepositorySettings() {     bucket = randomAlphaOfLength(randomIntBetween(1, 10)).toLowerCase(Locale.ROOT).     bufferSize = new ByteSizeValue(randomIntBetween(5, 50), ByteSizeUnit.MB).     serverSideEncryption = randomBoolean().     if (randomBoolean()) {         cannedACL = randomFrom(CannedAccessControlList.values()).toString().     }     if (randomBoolean()) {         storageClass = randomValueOtherThan(StorageClass.Glacier, () -> randomFrom(StorageClass.values())).toString().     } }
false;public,static;0;4;;@AfterClass public static void wipeRepository() {     blobs.clear(). }
false;protected;2;14;;@Override protected void createTestRepository(final String name, boolean verify) {     assertAcked(client().admin().cluster().preparePutRepository(name).setType(S3Repository.TYPE).setVerify(verify).setSettings(Settings.builder().put(S3Repository.BUCKET_SETTING.getKey(), bucket).put(S3Repository.BUFFER_SIZE_SETTING.getKey(), bufferSize).put(S3Repository.SERVER_SIDE_ENCRYPTION_SETTING.getKey(), serverSideEncryption).put(S3Repository.CANNED_ACL_SETTING.getKey(), cannedACL).put(S3Repository.STORAGE_CLASS_SETTING.getKey(), storageClass).put(S3Repository.ACCESS_KEY_SETTING.getKey(), "not_used_but_this_is_a_secret").put(S3Repository.SECRET_KEY_SETTING.getKey(), "not_used_but_this_is_a_secret"))). }
false;protected;1;4;;@Override protected void afterCreationCheck(Repository repository) {     assertThat(repository, instanceOf(S3Repository.class)). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Collections.singletonList(TestS3RepositoryPlugin.class). }
false;;1;4;;@Override AmazonS3 buildClient(S3ClientSettings clientSettings) {     return new MockAmazonS3(blobs, bucket, serverSideEncryption, cannedACL, storageClass). }
false;public;2;10;;@Override public Map<String, Repository.Factory> getRepositories(final Environment env, final NamedXContentRegistry registry) {     return Collections.singletonMap(S3Repository.TYPE, (metadata) -> new S3Repository(metadata, env.settings(), registry, new S3Service() {          @Override         AmazonS3 buildClient(S3ClientSettings clientSettings) {             return new MockAmazonS3(blobs, bucket, serverSideEncryption, cannedACL, storageClass).         }     })). }
false;public;1;9;;@Override public void sendResponse(RestResponse response) {     try {         assertThat(response.content().utf8ToString(), not(containsString("not_used_but_this_is_a_secret"))).     } catch (final AssertionError ex) {         getRepoError.set(ex).     }     getRepoLatch.countDown(). }
false;public;0;26;;public void testInsecureRepositoryCredentials() throws Exception {     final String repositoryName = "testInsecureRepositoryCredentials".     createAndCheckTestRepository(repositoryName).     final NodeClient nodeClient = internalCluster().getInstance(NodeClient.class).     final RestGetRepositoriesAction getRepoAction = new RestGetRepositoriesAction(Settings.EMPTY, mock(RestController.class), internalCluster().getInstance(SettingsFilter.class)).     final RestRequest getRepoRequest = new FakeRestRequest().     getRepoRequest.params().put("repository", repositoryName).     final CountDownLatch getRepoLatch = new CountDownLatch(1).     final AtomicReference<AssertionError> getRepoError = new AtomicReference<>().     getRepoAction.handleRequest(getRepoRequest, new AbstractRestChannel(getRepoRequest, true) {          @Override         public void sendResponse(RestResponse response) {             try {                 assertThat(response.content().utf8ToString(), not(containsString("not_used_but_this_is_a_secret"))).             } catch (final AssertionError ex) {                 getRepoError.set(ex).             }             getRepoLatch.countDown().         }     }, nodeClient).     getRepoLatch.await().     if (getRepoError.get() != null) {         throw getRepoError.get().     } }
