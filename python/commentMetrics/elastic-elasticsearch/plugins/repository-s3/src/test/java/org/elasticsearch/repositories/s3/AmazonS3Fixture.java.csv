# id;timestamp;commentText;codeText;commentWords;codeWords
AmazonS3Fixture -> private static PathTrie<RequestHandler> defaultHandlers(final Map<String, Bucket> buckets);1531179852;Builds the default request handlers *;private static PathTrie<RequestHandler> defaultHandlers(final Map<String, Bucket> buckets) {_        final PathTrie<RequestHandler> handlers = new PathTrie<>(RestUtils.REST_DECODER)___        _        _        _        objectsPaths("HEAD /{bucket}").forEach(path ->_            handlers.insert(path, (request) -> {_                final String bucketName = request.getParam("bucket")___                final Bucket bucket = buckets.get(bucketName)__                if (bucket == null) {_                    return newBucketNotFoundError(request.getId(), bucketName)__                }__                final String objectName = objectName(request.getParameters())__                for (Map.Entry<String, byte[]> object : bucket.objects.entrySet()) {_                    if (object.getKey().equals(objectName)) {_                        return new Response(RestStatus.OK.getStatus(), TEXT_PLAIN_CONTENT_TYPE, EMPTY_BYTE)__                    }_                }_                return newObjectNotFoundError(request.getId(), objectName)__            })_        )___        _        _        _        objectsPaths("PUT /{bucket}").forEach(path ->_            handlers.insert(path, (request) -> {_                final String destBucketName = request.getParam("bucket")___                final Bucket destBucket = buckets.get(destBucketName)__                if (destBucket == null) {_                    return newBucketNotFoundError(request.getId(), destBucketName)__                }__                final String destObjectName = objectName(request.getParameters())___                _                _                _                _                _                String headerDecodedContentLength = request.getHeader("X-amz-decoded-content-length")__                if (headerDecodedContentLength != null) {_                    int contentLength = Integer.valueOf(headerDecodedContentLength)___                    _                    _                    _                    _                    _                    _                    try (BufferedInputStream inputStream = new BufferedInputStream(new ByteArrayInputStream(request.getBody()))) {_                        int b__                        _                        while ((b = inputStream.read()) != -1) {_                            if (b == '\n') {_                                break__                            }_                        }__                        final byte[] bytes = new byte[contentLength]__                        inputStream.read(bytes, 0, contentLength)___                        destBucket.objects.put(destObjectName, bytes)__                        return new Response(RestStatus.OK.getStatus(), TEXT_PLAIN_CONTENT_TYPE, EMPTY_BYTE)__                    }_                }__                return newInternalError(request.getId(), "Something is wrong with this PUT request")__            })_        )___        _        _        _        objectsPaths("DELETE /{bucket}").forEach(path ->_            handlers.insert(path, (request) -> {_                final String bucketName = request.getParam("bucket")___                final Bucket bucket = buckets.get(bucketName)__                if (bucket == null) {_                    return newBucketNotFoundError(request.getId(), bucketName)__                }__                final String objectName = objectName(request.getParameters())__                bucket.objects.remove(objectName)__                return new Response(RestStatus.NO_CONTENT.getStatus(), TEXT_PLAIN_CONTENT_TYPE, EMPTY_BYTE)__            })_        )___        _        _        _        objectsPaths("GET /{bucket}").forEach(path ->_            handlers.insert(path, (request) -> {_                final String bucketName = request.getParam("bucket")___                final Bucket bucket = buckets.get(bucketName)__                if (bucket == null) {_                    return newBucketNotFoundError(request.getId(), bucketName)__                }__                final String objectName = objectName(request.getParameters())__                if (bucket.objects.containsKey(objectName)) {_                    return new Response(RestStatus.OK.getStatus(), contentType("application/octet-stream"), bucket.objects.get(objectName))___                }_                return newObjectNotFoundError(request.getId(), objectName)__            })_        )___        _        _        _        handlers.insert("HEAD /{bucket}", (request) -> {_            String bucket = request.getParam("bucket")__            if (Strings.hasText(bucket) && buckets.containsKey(bucket)) {_                return new Response(RestStatus.OK.getStatus(), TEXT_PLAIN_CONTENT_TYPE, EMPTY_BYTE)__            } else {_                return newBucketNotFoundError(request.getId(), bucket)__            }_        })___        _        _        _        handlers.insert("GET /{bucket}/", (request) -> {_            final String bucketName = request.getParam("bucket")___            final Bucket bucket = buckets.get(bucketName)__            if (bucket == null) {_                return newBucketNotFoundError(request.getId(), bucketName)__            }__            String prefix = request.getParam("prefix")__            if (prefix == null) {_                prefix = request.getHeader("Prefix")__            }_            return newListBucketResultResponse(request.getId(), bucket, prefix)__        })___        _        _        _        handlers.insert("POST /", (request) -> {_            final List<String> deletes = new ArrayList<>()__            final List<String> errors = new ArrayList<>()___            if (request.getParam("delete") != null) {_                _                _                String requestBody = Streams.copyToString(new InputStreamReader(new ByteArrayInputStream(request.getBody()), UTF_8))__                if (requestBody.startsWith("<Delete>")) {_                    final String startMarker = "<Key>"__                    final String endMarker = "</Key>"___                    int offset = 0__                    while (offset != -1) {_                        offset = requestBody.indexOf(startMarker, offset)__                        if (offset > 0) {_                            int closingOffset = requestBody.indexOf(endMarker, offset)__                            if (closingOffset != -1) {_                                offset = offset + startMarker.length()__                                final String objectName = requestBody.substring(offset, closingOffset)___                                boolean found = false__                                for (Bucket bucket : buckets.values()) {_                                    if (bucket.objects.remove(objectName) != null) {_                                        found = true__                                    }_                                }__                                if (found) {_                                    deletes.add(objectName)__                                } else {_                                    errors.add(objectName)__                                }_                            }_                        }_                    }_                    return newDeleteResultResponse(request.getId(), deletes, errors)__                }_            }_            return newInternalError(request.getId(), "Something is wrong with this POST multiple deletes request")__        })___        return handlers__    };builds,the,default,request,handlers;private,static,path,trie,request,handler,default,handlers,final,map,string,bucket,buckets,final,path,trie,request,handler,handlers,new,path,trie,rest,utils,objects,paths,head,bucket,for,each,path,handlers,insert,path,request,final,string,bucket,name,request,get,param,bucket,final,bucket,bucket,buckets,get,bucket,name,if,bucket,null,return,new,bucket,not,found,error,request,get,id,bucket,name,final,string,object,name,object,name,request,get,parameters,for,map,entry,string,byte,object,bucket,objects,entry,set,if,object,get,key,equals,object,name,return,new,response,rest,status,ok,get,status,return,new,object,not,found,error,request,get,id,object,name,objects,paths,put,bucket,for,each,path,handlers,insert,path,request,final,string,dest,bucket,name,request,get,param,bucket,final,bucket,dest,bucket,buckets,get,dest,bucket,name,if,dest,bucket,null,return,new,bucket,not,found,error,request,get,id,dest,bucket,name,final,string,dest,object,name,object,name,request,get,parameters,string,header,decoded,content,length,request,get,header,x,amz,decoded,content,length,if,header,decoded,content,length,null,int,content,length,integer,value,of,header,decoded,content,length,try,buffered,input,stream,input,stream,new,buffered,input,stream,new,byte,array,input,stream,request,get,body,int,b,while,b,input,stream,read,1,if,b,n,break,final,byte,bytes,new,byte,content,length,input,stream,read,bytes,0,content,length,dest,bucket,objects,put,dest,object,name,bytes,return,new,response,rest,status,ok,get,status,return,new,internal,error,request,get,id,something,is,wrong,with,this,put,request,objects,paths,delete,bucket,for,each,path,handlers,insert,path,request,final,string,bucket,name,request,get,param,bucket,final,bucket,bucket,buckets,get,bucket,name,if,bucket,null,return,new,bucket,not,found,error,request,get,id,bucket,name,final,string,object,name,object,name,request,get,parameters,bucket,objects,remove,object,name,return,new,response,rest,status,get,status,objects,paths,get,bucket,for,each,path,handlers,insert,path,request,final,string,bucket,name,request,get,param,bucket,final,bucket,bucket,buckets,get,bucket,name,if,bucket,null,return,new,bucket,not,found,error,request,get,id,bucket,name,final,string,object,name,object,name,request,get,parameters,if,bucket,objects,contains,key,object,name,return,new,response,rest,status,ok,get,status,content,type,application,octet,stream,bucket,objects,get,object,name,return,new,object,not,found,error,request,get,id,object,name,handlers,insert,head,bucket,request,string,bucket,request,get,param,bucket,if,strings,has,text,bucket,buckets,contains,key,bucket,return,new,response,rest,status,ok,get,status,else,return,new,bucket,not,found,error,request,get,id,bucket,handlers,insert,get,bucket,request,final,string,bucket,name,request,get,param,bucket,final,bucket,bucket,buckets,get,bucket,name,if,bucket,null,return,new,bucket,not,found,error,request,get,id,bucket,name,string,prefix,request,get,param,prefix,if,prefix,null,prefix,request,get,header,prefix,return,new,list,bucket,result,response,request,get,id,bucket,prefix,handlers,insert,post,request,final,list,string,deletes,new,array,list,final,list,string,errors,new,array,list,if,request,get,param,delete,null,string,request,body,streams,copy,to,string,new,input,stream,reader,new,byte,array,input,stream,request,get,body,if,request,body,starts,with,delete,final,string,start,marker,key,final,string,end,marker,key,int,offset,0,while,offset,1,offset,request,body,index,of,start,marker,offset,if,offset,0,int,closing,offset,request,body,index,of,end,marker,offset,if,closing,offset,1,offset,offset,start,marker,length,final,string,object,name,request,body,substring,offset,closing,offset,boolean,found,false,for,bucket,bucket,buckets,values,if,bucket,objects,remove,object,name,null,found,true,if,found,deletes,add,object,name,else,errors,add,object,name,return,new,delete,result,response,request,get,id,deletes,errors,return,new,internal,error,request,get,id,something,is,wrong,with,this,post,multiple,deletes,request,return,handlers
AmazonS3Fixture -> private static PathTrie<RequestHandler> defaultHandlers(final Map<String, Bucket> buckets);1531729807;Builds the default request handlers *;private static PathTrie<RequestHandler> defaultHandlers(final Map<String, Bucket> buckets) {_        final PathTrie<RequestHandler> handlers = new PathTrie<>(RestUtils.REST_DECODER)___        _        _        _        objectsPaths("HEAD /{bucket}").forEach(path ->_            handlers.insert(path, (request) -> {_                final String bucketName = request.getParam("bucket")___                final Bucket bucket = buckets.get(bucketName)__                if (bucket == null) {_                    return newBucketNotFoundError(request.getId(), bucketName)__                }__                final String objectName = objectName(request.getParameters())__                for (Map.Entry<String, byte[]> object : bucket.objects.entrySet()) {_                    if (object.getKey().equals(objectName)) {_                        return new Response(RestStatus.OK.getStatus(), TEXT_PLAIN_CONTENT_TYPE, EMPTY_BYTE)__                    }_                }_                return newObjectNotFoundError(request.getId(), objectName)__            })_        )___        _        _        _        objectsPaths("PUT /{bucket}").forEach(path ->_            handlers.insert(path, (request) -> {_                final String destBucketName = request.getParam("bucket")___                final Bucket destBucket = buckets.get(destBucketName)__                if (destBucket == null) {_                    return newBucketNotFoundError(request.getId(), destBucketName)__                }__                final String destObjectName = objectName(request.getParameters())___                _                _                _                _                _                String headerDecodedContentLength = request.getHeader("X-amz-decoded-content-length")__                if (headerDecodedContentLength != null) {_                    int contentLength = Integer.valueOf(headerDecodedContentLength)___                    _                    _                    _                    _                    _                    _                    try (BufferedInputStream inputStream = new BufferedInputStream(new ByteArrayInputStream(request.getBody()))) {_                        int b__                        _                        while ((b = inputStream.read()) != -1) {_                            if (b == '\n') {_                                break__                            }_                        }__                        final byte[] bytes = new byte[contentLength]__                        inputStream.read(bytes, 0, contentLength)___                        destBucket.objects.put(destObjectName, bytes)__                        return new Response(RestStatus.OK.getStatus(), TEXT_PLAIN_CONTENT_TYPE, EMPTY_BYTE)__                    }_                }__                return newInternalError(request.getId(), "Something is wrong with this PUT request")__            })_        )___        _        _        _        objectsPaths("DELETE /{bucket}").forEach(path ->_            handlers.insert(path, (request) -> {_                final String bucketName = request.getParam("bucket")___                final Bucket bucket = buckets.get(bucketName)__                if (bucket == null) {_                    return newBucketNotFoundError(request.getId(), bucketName)__                }__                final String objectName = objectName(request.getParameters())__                bucket.objects.remove(objectName)__                return new Response(RestStatus.NO_CONTENT.getStatus(), TEXT_PLAIN_CONTENT_TYPE, EMPTY_BYTE)__            })_        )___        _        _        _        objectsPaths("GET /{bucket}").forEach(path ->_            handlers.insert(path, (request) -> {_                final String bucketName = request.getParam("bucket")___                final Bucket bucket = buckets.get(bucketName)__                if (bucket == null) {_                    return newBucketNotFoundError(request.getId(), bucketName)__                }__                final String objectName = objectName(request.getParameters())__                if (bucket.objects.containsKey(objectName)) {_                    return new Response(RestStatus.OK.getStatus(), contentType("application/octet-stream"), bucket.objects.get(objectName))___                }_                return newObjectNotFoundError(request.getId(), objectName)__            })_        )___        _        _        _        handlers.insert("HEAD /{bucket}", (request) -> {_            String bucket = request.getParam("bucket")__            if (Strings.hasText(bucket) && buckets.containsKey(bucket)) {_                return new Response(RestStatus.OK.getStatus(), TEXT_PLAIN_CONTENT_TYPE, EMPTY_BYTE)__            } else {_                return newBucketNotFoundError(request.getId(), bucket)__            }_        })___        _        _        _        handlers.insert("GET /{bucket}/", (request) -> {_            final String bucketName = request.getParam("bucket")___            final Bucket bucket = buckets.get(bucketName)__            if (bucket == null) {_                return newBucketNotFoundError(request.getId(), bucketName)__            }__            String prefix = request.getParam("prefix")__            if (prefix == null) {_                prefix = request.getHeader("Prefix")__            }_            return newListBucketResultResponse(request.getId(), bucket, prefix)__        })___        _        _        _        handlers.insert("POST /", (request) -> {_            final List<String> deletes = new ArrayList<>()__            final List<String> errors = new ArrayList<>()___            if (request.getParam("delete") != null) {_                _                _                String requestBody = Streams.copyToString(new InputStreamReader(new ByteArrayInputStream(request.getBody()), UTF_8))__                if (requestBody.startsWith("<Delete>")) {_                    final String startMarker = "<Key>"__                    final String endMarker = "</Key>"___                    int offset = 0__                    while (offset != -1) {_                        offset = requestBody.indexOf(startMarker, offset)__                        if (offset > 0) {_                            int closingOffset = requestBody.indexOf(endMarker, offset)__                            if (closingOffset != -1) {_                                offset = offset + startMarker.length()__                                final String objectName = requestBody.substring(offset, closingOffset)___                                boolean found = false__                                for (Bucket bucket : buckets.values()) {_                                    if (bucket.objects.remove(objectName) != null) {_                                        found = true__                                    }_                                }__                                if (found) {_                                    deletes.add(objectName)__                                } else {_                                    errors.add(objectName)__                                }_                            }_                        }_                    }_                    return newDeleteResultResponse(request.getId(), deletes, errors)__                }_            }_            return newInternalError(request.getId(), "Something is wrong with this POST multiple deletes request")__        })___        return handlers__    };builds,the,default,request,handlers;private,static,path,trie,request,handler,default,handlers,final,map,string,bucket,buckets,final,path,trie,request,handler,handlers,new,path,trie,rest,utils,objects,paths,head,bucket,for,each,path,handlers,insert,path,request,final,string,bucket,name,request,get,param,bucket,final,bucket,bucket,buckets,get,bucket,name,if,bucket,null,return,new,bucket,not,found,error,request,get,id,bucket,name,final,string,object,name,object,name,request,get,parameters,for,map,entry,string,byte,object,bucket,objects,entry,set,if,object,get,key,equals,object,name,return,new,response,rest,status,ok,get,status,return,new,object,not,found,error,request,get,id,object,name,objects,paths,put,bucket,for,each,path,handlers,insert,path,request,final,string,dest,bucket,name,request,get,param,bucket,final,bucket,dest,bucket,buckets,get,dest,bucket,name,if,dest,bucket,null,return,new,bucket,not,found,error,request,get,id,dest,bucket,name,final,string,dest,object,name,object,name,request,get,parameters,string,header,decoded,content,length,request,get,header,x,amz,decoded,content,length,if,header,decoded,content,length,null,int,content,length,integer,value,of,header,decoded,content,length,try,buffered,input,stream,input,stream,new,buffered,input,stream,new,byte,array,input,stream,request,get,body,int,b,while,b,input,stream,read,1,if,b,n,break,final,byte,bytes,new,byte,content,length,input,stream,read,bytes,0,content,length,dest,bucket,objects,put,dest,object,name,bytes,return,new,response,rest,status,ok,get,status,return,new,internal,error,request,get,id,something,is,wrong,with,this,put,request,objects,paths,delete,bucket,for,each,path,handlers,insert,path,request,final,string,bucket,name,request,get,param,bucket,final,bucket,bucket,buckets,get,bucket,name,if,bucket,null,return,new,bucket,not,found,error,request,get,id,bucket,name,final,string,object,name,object,name,request,get,parameters,bucket,objects,remove,object,name,return,new,response,rest,status,get,status,objects,paths,get,bucket,for,each,path,handlers,insert,path,request,final,string,bucket,name,request,get,param,bucket,final,bucket,bucket,buckets,get,bucket,name,if,bucket,null,return,new,bucket,not,found,error,request,get,id,bucket,name,final,string,object,name,object,name,request,get,parameters,if,bucket,objects,contains,key,object,name,return,new,response,rest,status,ok,get,status,content,type,application,octet,stream,bucket,objects,get,object,name,return,new,object,not,found,error,request,get,id,object,name,handlers,insert,head,bucket,request,string,bucket,request,get,param,bucket,if,strings,has,text,bucket,buckets,contains,key,bucket,return,new,response,rest,status,ok,get,status,else,return,new,bucket,not,found,error,request,get,id,bucket,handlers,insert,get,bucket,request,final,string,bucket,name,request,get,param,bucket,final,bucket,bucket,buckets,get,bucket,name,if,bucket,null,return,new,bucket,not,found,error,request,get,id,bucket,name,string,prefix,request,get,param,prefix,if,prefix,null,prefix,request,get,header,prefix,return,new,list,bucket,result,response,request,get,id,bucket,prefix,handlers,insert,post,request,final,list,string,deletes,new,array,list,final,list,string,errors,new,array,list,if,request,get,param,delete,null,string,request,body,streams,copy,to,string,new,input,stream,reader,new,byte,array,input,stream,request,get,body,if,request,body,starts,with,delete,final,string,start,marker,key,final,string,end,marker,key,int,offset,0,while,offset,1,offset,request,body,index,of,start,marker,offset,if,offset,0,int,closing,offset,request,body,index,of,end,marker,offset,if,closing,offset,1,offset,offset,start,marker,length,final,string,object,name,request,body,substring,offset,closing,offset,boolean,found,false,for,bucket,bucket,buckets,values,if,bucket,objects,remove,object,name,null,found,true,if,found,deletes,add,object,name,else,errors,add,object,name,return,new,delete,result,response,request,get,id,deletes,errors,return,new,internal,error,request,get,id,something,is,wrong,with,this,post,multiple,deletes,request,return,handlers
AmazonS3Fixture -> private static Response newError(final long requestId,                                      final RestStatus status,                                      final String code,                                      final String message,                                      final String resource);1531179852;S3 Error__https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html;private static Response newError(final long requestId,_                                     final RestStatus status,_                                     final String code,_                                     final String message,_                                     final String resource) {_        final String id = Long.toString(requestId)__        final StringBuilder response = new StringBuilder()__        response.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")__        response.append("<Error>")__        response.append("<Code>").append(code).append("</Code>")__        response.append("<Message>").append(message).append("</Message>")__        response.append("<Resource>").append(resource).append("</Resource>")__        response.append("<RequestId>").append(id).append("</RequestId>")__        response.append("</Error>")___        final Map<String, String> headers = new HashMap<>(contentType("application/xml"))__        headers.put("x-amz-request-id", id)___        return new Response(status.getStatus(), headers, response.toString().getBytes(UTF_8))__    };s3,error,https,docs,aws,amazon,com,amazon,s3,latest,api,error,responses,html;private,static,response,new,error,final,long,request,id,final,rest,status,status,final,string,code,final,string,message,final,string,resource,final,string,id,long,to,string,request,id,final,string,builder,response,new,string,builder,response,append,xml,version,1,0,encoding,utf,8,response,append,error,response,append,code,append,code,append,code,response,append,message,append,message,append,message,response,append,resource,append,resource,append,resource,response,append,request,id,append,id,append,request,id,response,append,error,final,map,string,string,headers,new,hash,map,content,type,application,xml,headers,put,x,amz,request,id,id,return,new,response,status,get,status,headers,response,to,string,get,bytes
AmazonS3Fixture -> private static Response newError(final long requestId,                                      final RestStatus status,                                      final String code,                                      final String message,                                      final String resource);1531729807;S3 Error__https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html;private static Response newError(final long requestId,_                                     final RestStatus status,_                                     final String code,_                                     final String message,_                                     final String resource) {_        final String id = Long.toString(requestId)__        final StringBuilder response = new StringBuilder()__        response.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")__        response.append("<Error>")__        response.append("<Code>").append(code).append("</Code>")__        response.append("<Message>").append(message).append("</Message>")__        response.append("<Resource>").append(resource).append("</Resource>")__        response.append("<RequestId>").append(id).append("</RequestId>")__        response.append("</Error>")___        final Map<String, String> headers = new HashMap<>(contentType("application/xml"))__        headers.put("x-amz-request-id", id)___        return new Response(status.getStatus(), headers, response.toString().getBytes(UTF_8))__    };s3,error,https,docs,aws,amazon,com,amazon,s3,latest,api,error,responses,html;private,static,response,new,error,final,long,request,id,final,rest,status,status,final,string,code,final,string,message,final,string,resource,final,string,id,long,to,string,request,id,final,string,builder,response,new,string,builder,response,append,xml,version,1,0,encoding,utf,8,response,append,error,response,append,code,append,code,append,code,response,append,message,append,message,append,message,response,append,resource,append,resource,append,resource,response,append,request,id,append,id,append,request,id,response,append,error,final,map,string,string,headers,new,hash,map,content,type,application,xml,headers,put,x,amz,request,id,id,return,new,response,status,get,status,headers,response,to,string,get,bytes
AmazonS3Fixture -> private static Response newError(final long requestId,                                      final RestStatus status,                                      final String code,                                      final String message,                                      final String resource);1531910483;S3 Error__https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html;private static Response newError(final long requestId,_                                     final RestStatus status,_                                     final String code,_                                     final String message,_                                     final String resource) {_        final String id = Long.toString(requestId)__        final StringBuilder response = new StringBuilder()__        response.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")__        response.append("<Error>")__        response.append("<Code>").append(code).append("</Code>")__        response.append("<Message>").append(message).append("</Message>")__        response.append("<Resource>").append(resource).append("</Resource>")__        response.append("<RequestId>").append(id).append("</RequestId>")__        response.append("</Error>")___        final Map<String, String> headers = new HashMap<>(contentType("application/xml"))__        headers.put("x-amz-request-id", id)___        return new Response(status.getStatus(), headers, response.toString().getBytes(UTF_8))__    };s3,error,https,docs,aws,amazon,com,amazon,s3,latest,api,error,responses,html;private,static,response,new,error,final,long,request,id,final,rest,status,status,final,string,code,final,string,message,final,string,resource,final,string,id,long,to,string,request,id,final,string,builder,response,new,string,builder,response,append,xml,version,1,0,encoding,utf,8,response,append,error,response,append,code,append,code,append,code,response,append,message,append,message,append,message,response,append,resource,append,resource,append,resource,response,append,request,id,append,id,append,request,id,response,append,error,final,map,string,string,headers,new,hash,map,content,type,application,xml,headers,put,x,amz,request,id,id,return,new,response,status,get,status,headers,response,to,string,get,bytes
AmazonS3Fixture -> private static Response newError(final long requestId,                                      final RestStatus status,                                      final String code,                                      final String message,                                      final String resource);1532028790;S3 Error__https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html;private static Response newError(final long requestId,_                                     final RestStatus status,_                                     final String code,_                                     final String message,_                                     final String resource) {_        final String id = Long.toString(requestId)__        final StringBuilder response = new StringBuilder()__        response.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")__        response.append("<Error>")__        response.append("<Code>").append(code).append("</Code>")__        response.append("<Message>").append(message).append("</Message>")__        response.append("<Resource>").append(resource).append("</Resource>")__        response.append("<RequestId>").append(id).append("</RequestId>")__        response.append("</Error>")___        final Map<String, String> headers = new HashMap<>(contentType("application/xml"))__        headers.put("x-amz-request-id", id)___        return new Response(status.getStatus(), headers, response.toString().getBytes(UTF_8))__    };s3,error,https,docs,aws,amazon,com,amazon,s3,latest,api,error,responses,html;private,static,response,new,error,final,long,request,id,final,rest,status,status,final,string,code,final,string,message,final,string,resource,final,string,id,long,to,string,request,id,final,string,builder,response,new,string,builder,response,append,xml,version,1,0,encoding,utf,8,response,append,error,response,append,code,append,code,append,code,response,append,message,append,message,append,message,response,append,resource,append,resource,append,resource,response,append,request,id,append,id,append,request,id,response,append,error,final,map,string,string,headers,new,hash,map,content,type,application,xml,headers,put,x,amz,request,id,id,return,new,response,status,get,status,headers,response,to,string,get,bytes
AmazonS3Fixture -> private AmazonS3Fixture(final String workingDir, final String permanentBucketName, final String temporaryBucketName);1531179852;Creates a {@link AmazonS3Fixture};private AmazonS3Fixture(final String workingDir, final String permanentBucketName, final String temporaryBucketName) {_        super(workingDir)__        this.permanentBucketName = permanentBucketName__        this.temporaryBucketName = temporaryBucketName___        this.buckets.put(permanentBucketName, new Bucket(permanentBucketName))__        this.buckets.put(temporaryBucketName, new Bucket(temporaryBucketName))__        this.handlers = defaultHandlers(buckets)__    };creates,a,link,amazon,s3fixture;private,amazon,s3fixture,final,string,working,dir,final,string,permanent,bucket,name,final,string,temporary,bucket,name,super,working,dir,this,permanent,bucket,name,permanent,bucket,name,this,temporary,bucket,name,temporary,bucket,name,this,buckets,put,permanent,bucket,name,new,bucket,permanent,bucket,name,this,buckets,put,temporary,bucket,name,new,bucket,temporary,bucket,name,this,handlers,default,handlers,buckets
AmazonS3Fixture -> private AmazonS3Fixture(final String workingDir, final String permanentBucketName, final String temporaryBucketName);1531729807;Creates a {@link AmazonS3Fixture};private AmazonS3Fixture(final String workingDir, final String permanentBucketName, final String temporaryBucketName) {_        super(workingDir)__        this.permanentBucketName = permanentBucketName__        this.temporaryBucketName = temporaryBucketName___        this.buckets.put(permanentBucketName, new Bucket(permanentBucketName))__        this.buckets.put(temporaryBucketName, new Bucket(temporaryBucketName))__        this.handlers = defaultHandlers(buckets)__    };creates,a,link,amazon,s3fixture;private,amazon,s3fixture,final,string,working,dir,final,string,permanent,bucket,name,final,string,temporary,bucket,name,super,working,dir,this,permanent,bucket,name,permanent,bucket,name,this,temporary,bucket,name,temporary,bucket,name,this,buckets,put,permanent,bucket,name,new,bucket,permanent,bucket,name,this,buckets,put,temporary,bucket,name,new,bucket,temporary,bucket,name,this,handlers,default,handlers,buckets
AmazonS3Fixture -> private static Response newListBucketResultResponse(final long requestId, final Bucket bucket, final String prefix);1531179852;S3 ListBucketResult Response;private static Response newListBucketResultResponse(final long requestId, final Bucket bucket, final String prefix) {_        final String id = Long.toString(requestId)__        final StringBuilder response = new StringBuilder()__        response.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")__        response.append("<ListBucketResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">")__        response.append("<Prefix>")__        if (prefix != null) {_            response.append(prefix)__        }_        response.append("</Prefix>")__        response.append("<Marker/>")__        response.append("<MaxKeys>1000</MaxKeys>")__        response.append("<IsTruncated>false</IsTruncated>")___        int count = 0__        for (Map.Entry<String, byte[]> object : bucket.objects.entrySet()) {_            String objectName = object.getKey()__            if (prefix == null || objectName.startsWith(prefix)) {_                response.append("<Contents>")__                response.append("<Key>").append(objectName).append("</Key>")__                response.append("<LastModified>").append(DateUtils.formatISO8601Date(new Date())).append("</LastModified>")__                response.append("<ETag>&quot_").append(count++).append("&quot_</ETag>")__                response.append("<Size>").append(object.getValue().length).append("</Size>")__                response.append("</Contents>")__            }_        }_        response.append("</ListBucketResult>")___        final Map<String, String> headers = new HashMap<>(contentType("application/xml"))__        headers.put("x-amz-request-id", id)___        return new Response(RestStatus.OK.getStatus(), headers, response.toString().getBytes(UTF_8))__    };s3,list,bucket,result,response;private,static,response,new,list,bucket,result,response,final,long,request,id,final,bucket,bucket,final,string,prefix,final,string,id,long,to,string,request,id,final,string,builder,response,new,string,builder,response,append,xml,version,1,0,encoding,utf,8,response,append,list,bucket,result,xmlns,http,s3,amazonaws,com,doc,2006,03,01,response,append,prefix,if,prefix,null,response,append,prefix,response,append,prefix,response,append,marker,response,append,max,keys,1000,max,keys,response,append,is,truncated,false,is,truncated,int,count,0,for,map,entry,string,byte,object,bucket,objects,entry,set,string,object,name,object,get,key,if,prefix,null,object,name,starts,with,prefix,response,append,contents,response,append,key,append,object,name,append,key,response,append,last,modified,append,date,utils,format,iso8601date,new,date,append,last,modified,response,append,etag,quot,append,count,append,quot,etag,response,append,size,append,object,get,value,length,append,size,response,append,contents,response,append,list,bucket,result,final,map,string,string,headers,new,hash,map,content,type,application,xml,headers,put,x,amz,request,id,id,return,new,response,rest,status,ok,get,status,headers,response,to,string,get,bytes
AmazonS3Fixture -> private static Response newListBucketResultResponse(final long requestId, final Bucket bucket, final String prefix);1531729807;S3 ListBucketResult Response;private static Response newListBucketResultResponse(final long requestId, final Bucket bucket, final String prefix) {_        final String id = Long.toString(requestId)__        final StringBuilder response = new StringBuilder()__        response.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")__        response.append("<ListBucketResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">")__        response.append("<Prefix>")__        if (prefix != null) {_            response.append(prefix)__        }_        response.append("</Prefix>")__        response.append("<Marker/>")__        response.append("<MaxKeys>1000</MaxKeys>")__        response.append("<IsTruncated>false</IsTruncated>")___        int count = 0__        for (Map.Entry<String, byte[]> object : bucket.objects.entrySet()) {_            String objectName = object.getKey()__            if (prefix == null || objectName.startsWith(prefix)) {_                response.append("<Contents>")__                response.append("<Key>").append(objectName).append("</Key>")__                response.append("<LastModified>").append(DateUtils.formatISO8601Date(new Date())).append("</LastModified>")__                response.append("<ETag>&quot_").append(count++).append("&quot_</ETag>")__                response.append("<Size>").append(object.getValue().length).append("</Size>")__                response.append("</Contents>")__            }_        }_        response.append("</ListBucketResult>")___        final Map<String, String> headers = new HashMap<>(contentType("application/xml"))__        headers.put("x-amz-request-id", id)___        return new Response(RestStatus.OK.getStatus(), headers, response.toString().getBytes(UTF_8))__    };s3,list,bucket,result,response;private,static,response,new,list,bucket,result,response,final,long,request,id,final,bucket,bucket,final,string,prefix,final,string,id,long,to,string,request,id,final,string,builder,response,new,string,builder,response,append,xml,version,1,0,encoding,utf,8,response,append,list,bucket,result,xmlns,http,s3,amazonaws,com,doc,2006,03,01,response,append,prefix,if,prefix,null,response,append,prefix,response,append,prefix,response,append,marker,response,append,max,keys,1000,max,keys,response,append,is,truncated,false,is,truncated,int,count,0,for,map,entry,string,byte,object,bucket,objects,entry,set,string,object,name,object,get,key,if,prefix,null,object,name,starts,with,prefix,response,append,contents,response,append,key,append,object,name,append,key,response,append,last,modified,append,date,utils,format,iso8601date,new,date,append,last,modified,response,append,etag,quot,append,count,append,quot,etag,response,append,size,append,object,get,value,length,append,size,response,append,contents,response,append,list,bucket,result,final,map,string,string,headers,new,hash,map,content,type,application,xml,headers,put,x,amz,request,id,id,return,new,response,rest,status,ok,get,status,headers,response,to,string,get,bytes
AmazonS3Fixture -> private static Response newListBucketResultResponse(final long requestId, final Bucket bucket, final String prefix);1531910483;S3 ListBucketResult Response;private static Response newListBucketResultResponse(final long requestId, final Bucket bucket, final String prefix) {_        final String id = Long.toString(requestId)__        final StringBuilder response = new StringBuilder()__        response.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")__        response.append("<ListBucketResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">")__        response.append("<Prefix>")__        if (prefix != null) {_            response.append(prefix)__        }_        response.append("</Prefix>")__        response.append("<Marker/>")__        response.append("<MaxKeys>1000</MaxKeys>")__        response.append("<IsTruncated>false</IsTruncated>")___        int count = 0__        for (Map.Entry<String, byte[]> object : bucket.objects.entrySet()) {_            String objectName = object.getKey()__            if (prefix == null || objectName.startsWith(prefix)) {_                response.append("<Contents>")__                response.append("<Key>").append(objectName).append("</Key>")__                response.append("<LastModified>").append(DateUtils.formatISO8601Date(new Date())).append("</LastModified>")__                response.append("<ETag>&quot_").append(count++).append("&quot_</ETag>")__                response.append("<Size>").append(object.getValue().length).append("</Size>")__                response.append("</Contents>")__            }_        }_        response.append("</ListBucketResult>")___        final Map<String, String> headers = new HashMap<>(contentType("application/xml"))__        headers.put("x-amz-request-id", id)___        return new Response(RestStatus.OK.getStatus(), headers, response.toString().getBytes(UTF_8))__    };s3,list,bucket,result,response;private,static,response,new,list,bucket,result,response,final,long,request,id,final,bucket,bucket,final,string,prefix,final,string,id,long,to,string,request,id,final,string,builder,response,new,string,builder,response,append,xml,version,1,0,encoding,utf,8,response,append,list,bucket,result,xmlns,http,s3,amazonaws,com,doc,2006,03,01,response,append,prefix,if,prefix,null,response,append,prefix,response,append,prefix,response,append,marker,response,append,max,keys,1000,max,keys,response,append,is,truncated,false,is,truncated,int,count,0,for,map,entry,string,byte,object,bucket,objects,entry,set,string,object,name,object,get,key,if,prefix,null,object,name,starts,with,prefix,response,append,contents,response,append,key,append,object,name,append,key,response,append,last,modified,append,date,utils,format,iso8601date,new,date,append,last,modified,response,append,etag,quot,append,count,append,quot,etag,response,append,size,append,object,get,value,length,append,size,response,append,contents,response,append,list,bucket,result,final,map,string,string,headers,new,hash,map,content,type,application,xml,headers,put,x,amz,request,id,id,return,new,response,rest,status,ok,get,status,headers,response,to,string,get,bytes
AmazonS3Fixture -> private static Response newListBucketResultResponse(final long requestId, final Bucket bucket, final String prefix);1532028790;S3 ListBucketResult Response;private static Response newListBucketResultResponse(final long requestId, final Bucket bucket, final String prefix) {_        final String id = Long.toString(requestId)__        final StringBuilder response = new StringBuilder()__        response.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")__        response.append("<ListBucketResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">")__        response.append("<Prefix>")__        if (prefix != null) {_            response.append(prefix)__        }_        response.append("</Prefix>")__        response.append("<Marker/>")__        response.append("<MaxKeys>1000</MaxKeys>")__        response.append("<IsTruncated>false</IsTruncated>")___        int count = 0__        for (Map.Entry<String, byte[]> object : bucket.objects.entrySet()) {_            String objectName = object.getKey()__            if (prefix == null || objectName.startsWith(prefix)) {_                response.append("<Contents>")__                response.append("<Key>").append(objectName).append("</Key>")__                response.append("<LastModified>").append(DateUtils.formatISO8601Date(new Date())).append("</LastModified>")__                response.append("<ETag>&quot_").append(count++).append("&quot_</ETag>")__                response.append("<Size>").append(object.getValue().length).append("</Size>")__                response.append("</Contents>")__            }_        }_        response.append("</ListBucketResult>")___        final Map<String, String> headers = new HashMap<>(contentType("application/xml"))__        headers.put("x-amz-request-id", id)___        return new Response(RestStatus.OK.getStatus(), headers, response.toString().getBytes(UTF_8))__    };s3,list,bucket,result,response;private,static,response,new,list,bucket,result,response,final,long,request,id,final,bucket,bucket,final,string,prefix,final,string,id,long,to,string,request,id,final,string,builder,response,new,string,builder,response,append,xml,version,1,0,encoding,utf,8,response,append,list,bucket,result,xmlns,http,s3,amazonaws,com,doc,2006,03,01,response,append,prefix,if,prefix,null,response,append,prefix,response,append,prefix,response,append,marker,response,append,max,keys,1000,max,keys,response,append,is,truncated,false,is,truncated,int,count,0,for,map,entry,string,byte,object,bucket,objects,entry,set,string,object,name,object,get,key,if,prefix,null,object,name,starts,with,prefix,response,append,contents,response,append,key,append,object,name,append,key,response,append,last,modified,append,date,utils,format,iso8601date,new,date,append,last,modified,response,append,etag,quot,append,count,append,quot,etag,response,append,size,append,object,get,value,length,append,size,response,append,contents,response,append,list,bucket,result,final,map,string,string,headers,new,hash,map,content,type,application,xml,headers,put,x,amz,request,id,id,return,new,response,rest,status,ok,get,status,headers,response,to,string,get,bytes
AmazonS3Fixture -> private static List<String> objectsPaths(final String path);1531179852;Decline a path like "http://host:port/{bucket}" into 10 derived paths like:_- http://host:port/{bucket}/{path0}_- http://host:port/{bucket}/{path0}/{path1}_- http://host:port/{bucket}/{path0}/{path1}/{path2}_- etc;private static List<String> objectsPaths(final String path) {_        final List<String> paths = new ArrayList<>()__        String p = path__        for (int i = 0_ i < 10_ i++) {_            p = p + "/{path" + i + "}"__            paths.add(p)__        }_        return paths__    };decline,a,path,like,http,host,port,bucket,into,10,derived,paths,like,http,host,port,bucket,path0,http,host,port,bucket,path0,path1,http,host,port,bucket,path0,path1,path2,etc;private,static,list,string,objects,paths,final,string,path,final,list,string,paths,new,array,list,string,p,path,for,int,i,0,i,10,i,p,p,path,i,paths,add,p,return,paths
AmazonS3Fixture -> private static List<String> objectsPaths(final String path);1531729807;Decline a path like "http://host:port/{bucket}" into 10 derived paths like:_- http://host:port/{bucket}/{path0}_- http://host:port/{bucket}/{path0}/{path1}_- http://host:port/{bucket}/{path0}/{path1}/{path2}_- etc;private static List<String> objectsPaths(final String path) {_        final List<String> paths = new ArrayList<>()__        String p = path__        for (int i = 0_ i < 10_ i++) {_            p = p + "/{path" + i + "}"__            paths.add(p)__        }_        return paths__    };decline,a,path,like,http,host,port,bucket,into,10,derived,paths,like,http,host,port,bucket,path0,http,host,port,bucket,path0,path1,http,host,port,bucket,path0,path1,path2,etc;private,static,list,string,objects,paths,final,string,path,final,list,string,paths,new,array,list,string,p,path,for,int,i,0,i,10,i,p,p,path,i,paths,add,p,return,paths
AmazonS3Fixture -> private static List<String> objectsPaths(final String path);1531910483;Decline a path like "http://host:port/{bucket}" into 10 derived paths like:_- http://host:port/{bucket}/{path0}_- http://host:port/{bucket}/{path0}/{path1}_- http://host:port/{bucket}/{path0}/{path1}/{path2}_- etc;private static List<String> objectsPaths(final String path) {_        final List<String> paths = new ArrayList<>()__        String p = path__        for (int i = 0_ i < 10_ i++) {_            p = p + "/{path" + i + "}"__            paths.add(p)__        }_        return paths__    };decline,a,path,like,http,host,port,bucket,into,10,derived,paths,like,http,host,port,bucket,path0,http,host,port,bucket,path0,path1,http,host,port,bucket,path0,path1,path2,etc;private,static,list,string,objects,paths,final,string,path,final,list,string,paths,new,array,list,string,p,path,for,int,i,0,i,10,i,p,p,path,i,paths,add,p,return,paths
AmazonS3Fixture -> private static List<String> objectsPaths(final String path);1532028790;Decline a path like "http://host:port/{bucket}" into 10 derived paths like:_- http://host:port/{bucket}/{path0}_- http://host:port/{bucket}/{path0}/{path1}_- http://host:port/{bucket}/{path0}/{path1}/{path2}_- etc;private static List<String> objectsPaths(final String path) {_        final List<String> paths = new ArrayList<>()__        String p = path__        for (int i = 0_ i < 10_ i++) {_            p = p + "/{path" + i + "}"__            paths.add(p)__        }_        return paths__    };decline,a,path,like,http,host,port,bucket,into,10,derived,paths,like,http,host,port,bucket,path0,http,host,port,bucket,path0,path1,http,host,port,bucket,path0,path1,path2,etc;private,static,list,string,objects,paths,final,string,path,final,list,string,paths,new,array,list,string,p,path,for,int,i,0,i,10,i,p,p,path,i,paths,add,p,return,paths
AmazonS3Fixture -> private static String objectName(final Map<String, String> params);1531179852;Retrieves the object name from all derives paths named {pathX} where 0 &lt_= X &lt_ 10.__This is the counterpart of {@link #objectsPaths(String)};private static String objectName(final Map<String, String> params) {_        final StringBuilder name = new StringBuilder()__        for (int i = 0_ i < 10_ i++) {_            String value = params.getOrDefault("path" + i, null)__            if (value != null) {_                if (name.length() > 0) {_                    name.append('/')__                }_                name.append(value)__            }_        }_        return name.toString()__    };retrieves,the,object,name,from,all,derives,paths,named,path,x,where,0,lt,x,lt,10,this,is,the,counterpart,of,link,objects,paths,string;private,static,string,object,name,final,map,string,string,params,final,string,builder,name,new,string,builder,for,int,i,0,i,10,i,string,value,params,get,or,default,path,i,null,if,value,null,if,name,length,0,name,append,name,append,value,return,name,to,string
AmazonS3Fixture -> private static String objectName(final Map<String, String> params);1531729807;Retrieves the object name from all derives paths named {pathX} where 0 &lt_= X &lt_ 10.__This is the counterpart of {@link #objectsPaths(String)};private static String objectName(final Map<String, String> params) {_        final StringBuilder name = new StringBuilder()__        for (int i = 0_ i < 10_ i++) {_            String value = params.getOrDefault("path" + i, null)__            if (value != null) {_                if (name.length() > 0) {_                    name.append('/')__                }_                name.append(value)__            }_        }_        return name.toString()__    };retrieves,the,object,name,from,all,derives,paths,named,path,x,where,0,lt,x,lt,10,this,is,the,counterpart,of,link,objects,paths,string;private,static,string,object,name,final,map,string,string,params,final,string,builder,name,new,string,builder,for,int,i,0,i,10,i,string,value,params,get,or,default,path,i,null,if,value,null,if,name,length,0,name,append,name,append,value,return,name,to,string
AmazonS3Fixture -> private static String objectName(final Map<String, String> params);1531910483;Retrieves the object name from all derives paths named {pathX} where 0 &lt_= X &lt_ 10.__This is the counterpart of {@link #objectsPaths(String)};private static String objectName(final Map<String, String> params) {_        final StringBuilder name = new StringBuilder()__        for (int i = 0_ i < 10_ i++) {_            String value = params.getOrDefault("path" + i, null)__            if (value != null) {_                if (name.length() > 0) {_                    name.append('/')__                }_                name.append(value)__            }_        }_        return name.toString()__    };retrieves,the,object,name,from,all,derives,paths,named,path,x,where,0,lt,x,lt,10,this,is,the,counterpart,of,link,objects,paths,string;private,static,string,object,name,final,map,string,string,params,final,string,builder,name,new,string,builder,for,int,i,0,i,10,i,string,value,params,get,or,default,path,i,null,if,value,null,if,name,length,0,name,append,name,append,value,return,name,to,string
AmazonS3Fixture -> private static String objectName(final Map<String, String> params);1532028790;Retrieves the object name from all derives paths named {pathX} where 0 &lt_= X &lt_ 10.__This is the counterpart of {@link #objectsPaths(String)};private static String objectName(final Map<String, String> params) {_        final StringBuilder name = new StringBuilder()__        for (int i = 0_ i < 10_ i++) {_            String value = params.getOrDefault("path" + i, null)__            if (value != null) {_                if (name.length() > 0) {_                    name.append('/')__                }_                name.append(value)__            }_        }_        return name.toString()__    };retrieves,the,object,name,from,all,derives,paths,named,path,x,where,0,lt,x,lt,10,this,is,the,counterpart,of,link,objects,paths,string;private,static,string,object,name,final,map,string,string,params,final,string,builder,name,new,string,builder,for,int,i,0,i,10,i,string,value,params,get,or,default,path,i,null,if,value,null,if,name,length,0,name,append,name,append,value,return,name,to,string
AmazonS3Fixture -> private static Response newDeleteResultResponse(final long requestId,                                                     final List<String> deletedObjects,                                                     final List<String> ignoredObjects);1531179852;S3 DeleteResult Response;private static Response newDeleteResultResponse(final long requestId,_                                                    final List<String> deletedObjects,_                                                    final List<String> ignoredObjects) {_        final String id = Long.toString(requestId)___        final StringBuilder response = new StringBuilder()__        response.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")__        response.append("<DeleteResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">")__        for (String deletedObject : deletedObjects) {_            response.append("<Deleted>")__            response.append("<Key>").append(deletedObject).append("</Key>")__            response.append("</Deleted>")__        }_        for (String ignoredObject : ignoredObjects) {_            response.append("<Error>")__            response.append("<Key>").append(ignoredObject).append("</Key>")__            response.append("<Code>NoSuchKey</Code>")__            response.append("</Error>")__        }_        response.append("</DeleteResult>")___        final Map<String, String> headers = new HashMap<>(contentType("application/xml"))__        headers.put("x-amz-request-id", id)___        return new Response(RestStatus.OK.getStatus(), headers, response.toString().getBytes(UTF_8))__    };s3,delete,result,response;private,static,response,new,delete,result,response,final,long,request,id,final,list,string,deleted,objects,final,list,string,ignored,objects,final,string,id,long,to,string,request,id,final,string,builder,response,new,string,builder,response,append,xml,version,1,0,encoding,utf,8,response,append,delete,result,xmlns,http,s3,amazonaws,com,doc,2006,03,01,for,string,deleted,object,deleted,objects,response,append,deleted,response,append,key,append,deleted,object,append,key,response,append,deleted,for,string,ignored,object,ignored,objects,response,append,error,response,append,key,append,ignored,object,append,key,response,append,code,no,such,key,code,response,append,error,response,append,delete,result,final,map,string,string,headers,new,hash,map,content,type,application,xml,headers,put,x,amz,request,id,id,return,new,response,rest,status,ok,get,status,headers,response,to,string,get,bytes
AmazonS3Fixture -> private static Response newDeleteResultResponse(final long requestId,                                                     final List<String> deletedObjects,                                                     final List<String> ignoredObjects);1531729807;S3 DeleteResult Response;private static Response newDeleteResultResponse(final long requestId,_                                                    final List<String> deletedObjects,_                                                    final List<String> ignoredObjects) {_        final String id = Long.toString(requestId)___        final StringBuilder response = new StringBuilder()__        response.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")__        response.append("<DeleteResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">")__        for (String deletedObject : deletedObjects) {_            response.append("<Deleted>")__            response.append("<Key>").append(deletedObject).append("</Key>")__            response.append("</Deleted>")__        }_        for (String ignoredObject : ignoredObjects) {_            response.append("<Error>")__            response.append("<Key>").append(ignoredObject).append("</Key>")__            response.append("<Code>NoSuchKey</Code>")__            response.append("</Error>")__        }_        response.append("</DeleteResult>")___        final Map<String, String> headers = new HashMap<>(contentType("application/xml"))__        headers.put("x-amz-request-id", id)___        return new Response(RestStatus.OK.getStatus(), headers, response.toString().getBytes(UTF_8))__    };s3,delete,result,response;private,static,response,new,delete,result,response,final,long,request,id,final,list,string,deleted,objects,final,list,string,ignored,objects,final,string,id,long,to,string,request,id,final,string,builder,response,new,string,builder,response,append,xml,version,1,0,encoding,utf,8,response,append,delete,result,xmlns,http,s3,amazonaws,com,doc,2006,03,01,for,string,deleted,object,deleted,objects,response,append,deleted,response,append,key,append,deleted,object,append,key,response,append,deleted,for,string,ignored,object,ignored,objects,response,append,error,response,append,key,append,ignored,object,append,key,response,append,code,no,such,key,code,response,append,error,response,append,delete,result,final,map,string,string,headers,new,hash,map,content,type,application,xml,headers,put,x,amz,request,id,id,return,new,response,rest,status,ok,get,status,headers,response,to,string,get,bytes
AmazonS3Fixture -> private static Response newDeleteResultResponse(final long requestId,                                                     final List<String> deletedObjects,                                                     final List<String> ignoredObjects);1531910483;S3 DeleteResult Response;private static Response newDeleteResultResponse(final long requestId,_                                                    final List<String> deletedObjects,_                                                    final List<String> ignoredObjects) {_        final String id = Long.toString(requestId)___        final StringBuilder response = new StringBuilder()__        response.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")__        response.append("<DeleteResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">")__        for (String deletedObject : deletedObjects) {_            response.append("<Deleted>")__            response.append("<Key>").append(deletedObject).append("</Key>")__            response.append("</Deleted>")__        }_        for (String ignoredObject : ignoredObjects) {_            response.append("<Error>")__            response.append("<Key>").append(ignoredObject).append("</Key>")__            response.append("<Code>NoSuchKey</Code>")__            response.append("</Error>")__        }_        response.append("</DeleteResult>")___        final Map<String, String> headers = new HashMap<>(contentType("application/xml"))__        headers.put("x-amz-request-id", id)___        return new Response(RestStatus.OK.getStatus(), headers, response.toString().getBytes(UTF_8))__    };s3,delete,result,response;private,static,response,new,delete,result,response,final,long,request,id,final,list,string,deleted,objects,final,list,string,ignored,objects,final,string,id,long,to,string,request,id,final,string,builder,response,new,string,builder,response,append,xml,version,1,0,encoding,utf,8,response,append,delete,result,xmlns,http,s3,amazonaws,com,doc,2006,03,01,for,string,deleted,object,deleted,objects,response,append,deleted,response,append,key,append,deleted,object,append,key,response,append,deleted,for,string,ignored,object,ignored,objects,response,append,error,response,append,key,append,ignored,object,append,key,response,append,code,no,such,key,code,response,append,error,response,append,delete,result,final,map,string,string,headers,new,hash,map,content,type,application,xml,headers,put,x,amz,request,id,id,return,new,response,rest,status,ok,get,status,headers,response,to,string,get,bytes
AmazonS3Fixture -> private static Response newDeleteResultResponse(final long requestId,                                                     final List<String> deletedObjects,                                                     final List<String> ignoredObjects);1532028790;S3 DeleteResult Response;private static Response newDeleteResultResponse(final long requestId,_                                                    final List<String> deletedObjects,_                                                    final List<String> ignoredObjects) {_        final String id = Long.toString(requestId)___        final StringBuilder response = new StringBuilder()__        response.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")__        response.append("<DeleteResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">")__        for (String deletedObject : deletedObjects) {_            response.append("<Deleted>")__            response.append("<Key>").append(deletedObject).append("</Key>")__            response.append("</Deleted>")__        }_        for (String ignoredObject : ignoredObjects) {_            response.append("<Error>")__            response.append("<Key>").append(ignoredObject).append("</Key>")__            response.append("<Code>NoSuchKey</Code>")__            response.append("</Error>")__        }_        response.append("</DeleteResult>")___        final Map<String, String> headers = new HashMap<>(contentType("application/xml"))__        headers.put("x-amz-request-id", id)___        return new Response(RestStatus.OK.getStatus(), headers, response.toString().getBytes(UTF_8))__    };s3,delete,result,response;private,static,response,new,delete,result,response,final,long,request,id,final,list,string,deleted,objects,final,list,string,ignored,objects,final,string,id,long,to,string,request,id,final,string,builder,response,new,string,builder,response,append,xml,version,1,0,encoding,utf,8,response,append,delete,result,xmlns,http,s3,amazonaws,com,doc,2006,03,01,for,string,deleted,object,deleted,objects,response,append,deleted,response,append,key,append,deleted,object,append,key,response,append,deleted,for,string,ignored,object,ignored,objects,response,append,error,response,append,key,append,ignored,object,append,key,response,append,code,no,such,key,code,response,append,error,response,append,delete,result,final,map,string,string,headers,new,hash,map,content,type,application,xml,headers,put,x,amz,request,id,id,return,new,response,rest,status,ok,get,status,headers,response,to,string,get,bytes
AmazonS3Fixture -> private AmazonS3Fixture(final String workingDir, Properties properties);1531910483;Creates a {@link AmazonS3Fixture};private AmazonS3Fixture(final String workingDir, Properties properties) {_        super(workingDir)__        this.properties = properties__        this.random = new Random(Long.parseUnsignedLong(requireNonNull(properties.getProperty("tests.seed")), 16))___        new Bucket("s3Fixture.permanent", false)__        new Bucket("s3Fixture.temporary", true)__        final Bucket ec2Bucket = new Bucket("s3Fixture.ec2",_            randomAsciiAlphanumOfLength(random, 10), randomAsciiAlphanumOfLength(random, 10))___        this.handlers = defaultHandlers(buckets, ec2Bucket)__    };creates,a,link,amazon,s3fixture;private,amazon,s3fixture,final,string,working,dir,properties,properties,super,working,dir,this,properties,properties,this,random,new,random,long,parse,unsigned,long,require,non,null,properties,get,property,tests,seed,16,new,bucket,s3fixture,permanent,false,new,bucket,s3fixture,temporary,true,final,bucket,ec2bucket,new,bucket,s3fixture,ec2,random,ascii,alphanum,of,length,random,10,random,ascii,alphanum,of,length,random,10,this,handlers,default,handlers,buckets,ec2bucket
AmazonS3Fixture -> private AmazonS3Fixture(final String workingDir, Properties properties);1532028790;Creates a {@link AmazonS3Fixture};private AmazonS3Fixture(final String workingDir, Properties properties) {_        super(workingDir)__        this.properties = properties__        this.random = new Random(Long.parseUnsignedLong(requireNonNull(properties.getProperty("tests.seed")), 16))___        new Bucket("s3Fixture.permanent", false)__        new Bucket("s3Fixture.temporary", true)__        final Bucket ec2Bucket = new Bucket("s3Fixture.ec2",_            randomAsciiAlphanumOfLength(random, 10), randomAsciiAlphanumOfLength(random, 10))___        final Bucket ecsBucket = new Bucket("s3Fixture.ecs",_            randomAsciiAlphanumOfLength(random, 10), randomAsciiAlphanumOfLength(random, 10))___        this.handlers = defaultHandlers(buckets, ec2Bucket, ecsBucket)__    };creates,a,link,amazon,s3fixture;private,amazon,s3fixture,final,string,working,dir,properties,properties,super,working,dir,this,properties,properties,this,random,new,random,long,parse,unsigned,long,require,non,null,properties,get,property,tests,seed,16,new,bucket,s3fixture,permanent,false,new,bucket,s3fixture,temporary,true,final,bucket,ec2bucket,new,bucket,s3fixture,ec2,random,ascii,alphanum,of,length,random,10,random,ascii,alphanum,of,length,random,10,final,bucket,ecs,bucket,new,bucket,s3fixture,ecs,random,ascii,alphanum,of,length,random,10,random,ascii,alphanum,of,length,random,10,this,handlers,default,handlers,buckets,ec2bucket,ecs,bucket
