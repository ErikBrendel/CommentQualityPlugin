commented;modifiers;parameterAmount;loc;comment;code
false;public;2;5;;@Override public boolean doesObjectExist(final String bucketName, final String objectName) throws SdkClientException {     assertThat(bucketName, equalTo(bucket)).     return blobs.containsKey(objectName). }
false;public;1;19;;@Override public PutObjectResult putObject(final PutObjectRequest request) throws AmazonClientException {     assertThat(request.getBucketName(), equalTo(bucket)).     assertThat(request.getMetadata().getSSEAlgorithm(), serverSideEncryption ? equalTo("AES256") : nullValue()).     assertThat(request.getCannedAcl(), notNullValue()).     assertThat(request.getCannedAcl().toString(), cannedACL != null ? equalTo(cannedACL) : equalTo("private")).     assertThat(request.getStorageClass(), storageClass != null ? equalTo(storageClass) : equalTo("STANDARD")).     final String blobName = request.getKey().     final ByteArrayOutputStream out = new ByteArrayOutputStream().     try {         Streams.copy(request.getInputStream(), out).         blobs.put(blobName, out.toByteArray()).     } catch (IOException e) {         throw new AmazonClientException(e).     }     return new PutObjectResult(). }
false;public;1;22;;@Override public S3Object getObject(final GetObjectRequest request) throws AmazonClientException {     assertThat(request.getBucketName(), equalTo(bucket)).     final String blobName = request.getKey().     final byte[] content = blobs.get(blobName).     if (content == null) {         AmazonS3Exception exception = new AmazonS3Exception("[" + blobName + "] does not exist.").         exception.setStatusCode(404).         throw exception.     }     ObjectMetadata metadata = new ObjectMetadata().     metadata.setContentLength(content.length).     S3Object s3Object = new S3Object().     s3Object.setObjectContent(new S3ObjectInputStream(new ByteArrayInputStream(content), null, false)).     s3Object.setKey(blobName).     s3Object.setObjectMetadata(metadata).     return s3Object. }
false;public;1;19;;@Override public ObjectListing listObjects(final ListObjectsRequest request) throws AmazonClientException {     assertThat(request.getBucketName(), equalTo(bucket)).     final ObjectListing listing = new ObjectListing().     listing.setBucketName(request.getBucketName()).     listing.setPrefix(request.getPrefix()).     for (Map.Entry<String, byte[]> blob : blobs.entrySet()) {         if (Strings.isEmpty(request.getPrefix()) || blob.getKey().startsWith(request.getPrefix())) {             S3ObjectSummary summary = new S3ObjectSummary().             summary.setBucketName(request.getBucketName()).             summary.setKey(blob.getKey()).             summary.setSize(blob.getValue().length).             listing.getObjectSummaries().add(summary).         }     }     return listing. }
false;public;1;5;;@Override public void deleteObject(final DeleteObjectRequest request) throws AmazonClientException {     assertThat(request.getBucketName(), equalTo(bucket)).     blobs.remove(request.getKey()). }
false;public;0;4;;@Override public void shutdown() { // TODO check close }
false;public;1;18;;@Override public DeleteObjectsResult deleteObjects(DeleteObjectsRequest request) throws SdkClientException {     assertThat(request.getBucketName(), equalTo(bucket)).     final List<DeleteObjectsResult.DeletedObject> deletions = new ArrayList<>().     for (DeleteObjectsRequest.KeyVersion key : request.getKeys()) {         if (blobs.remove(key.getKey()) == null) {             AmazonS3Exception exception = new AmazonS3Exception("[" + key + "] does not exist.").             exception.setStatusCode(404).             throw exception.         } else {             DeleteObjectsResult.DeletedObject deletion = new DeleteObjectsResult.DeletedObject().             deletion.setKey(key.getKey()).             deletions.add(deletion).         }     }     return new DeleteObjectsResult(deletions). }
