commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void shutdown() { // TODO check is closed }
false;public;1;4;;@Override public AmazonS3Reference client(RepositoryMetaData repositoryMetaData) {     return new AmazonS3Reference(new DummyS3Client()). }
false;public;1;3;;@Override public void refreshAndClearCache(Map<String, S3ClientSettings> clientsSettings) { }
false;public;0;3;;@Override public void close() { }
false;public;0;24;;public void testInvalidChunkBufferSizeSettings() {     // chunk < buffer should fail     final Settings s1 = bufferAndChunkSettings(10, 5).     final Exception e1 = expectThrows(RepositoryException.class, () -> createS3Repo(getRepositoryMetaData(s1))).     assertThat(e1.getMessage(), containsString("chunk_size (5mb) can't be lower than buffer_size (10mb)")).     // chunk > buffer should pass     final Settings s2 = bufferAndChunkSettings(5, 10).     createS3Repo(getRepositoryMetaData(s2)).close().     // chunk = buffer should pass     final Settings s3 = bufferAndChunkSettings(5, 5).     createS3Repo(getRepositoryMetaData(s3)).close().     // buffer < 5mb should fail     final Settings s4 = bufferAndChunkSettings(4, 10).     final IllegalArgumentException e2 = expectThrows(IllegalArgumentException.class, () -> createS3Repo(getRepositoryMetaData(s4)).close()).     assertThat(e2.getMessage(), containsString("failed to parse value [4mb] for setting [buffer_size], must be >= [5mb]")).     final Settings s5 = bufferAndChunkSettings(5, 6000000).     final IllegalArgumentException e3 = expectThrows(IllegalArgumentException.class, () -> createS3Repo(getRepositoryMetaData(s5)).close()).     assertThat(e3.getMessage(), containsString("failed to parse value [6000000mb] for setting [chunk_size], must be <= [5tb]")). }
false;private;2;6;;private Settings bufferAndChunkSettings(long buffer, long chunk) {     return Settings.builder().put(S3Repository.BUFFER_SIZE_SETTING.getKey(), new ByteSizeValue(buffer, ByteSizeUnit.MB).getStringRep()).put(S3Repository.CHUNK_SIZE_SETTING.getKey(), new ByteSizeValue(chunk, ByteSizeUnit.MB).getStringRep()).build(). }
false;private;1;3;;private RepositoryMetaData getRepositoryMetaData(Settings settings) {     return new RepositoryMetaData("dummy-repo", "mock", Settings.builder().put(settings).build()). }
false;public;0;7;;public void testBasePathSetting() {     final RepositoryMetaData metadata = new RepositoryMetaData("dummy-repo", "mock", Settings.builder().put(S3Repository.BASE_PATH_SETTING.getKey(), "foo/bar").build()).     try (S3Repository s3repo = createS3Repo(metadata)) {         assertEquals("foo/bar/", s3repo.basePath().buildAsString()).     } }
false;public;0;11;;public void testDefaultBufferSize() {     final RepositoryMetaData metadata = new RepositoryMetaData("dummy-repo", "mock", Settings.EMPTY).     try (S3Repository s3repo = createS3Repo(metadata)) {         assertThat(s3repo.getBlobStore(), is(nullValue())).         s3repo.start().         final long defaultBufferSize = ((S3BlobStore) s3repo.blobStore()).bufferSizeInBytes().         assertThat(s3repo.getBlobStore(), not(nullValue())).         assertThat(defaultBufferSize, Matchers.lessThanOrEqualTo(100L * 1024 * 1024)).         assertThat(defaultBufferSize, Matchers.greaterThanOrEqualTo(5L * 1024 * 1024)).     } }
false;protected;0;4;;@Override protected void assertSnapshotOrGenericThread() { // eliminate thread name check as we create repo manually on test/main threads }
false;private;1;8;;private S3Repository createS3Repo(RepositoryMetaData metadata) {     return new S3Repository(metadata, Settings.EMPTY, NamedXContentRegistry.EMPTY, new DummyS3Service()) {          @Override         protected void assertSnapshotOrGenericThread() {         // eliminate thread name check as we create repo manually on test/main threads         }     }. }
