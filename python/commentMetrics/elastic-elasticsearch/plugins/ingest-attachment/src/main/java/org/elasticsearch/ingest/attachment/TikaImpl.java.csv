commented;modifiers;parameterAmount;loc;comment;code
true;static;3;19;/**  * parses with tika, throwing any exception hit while parsing the document  */ ;/**  * parses with tika, throwing any exception hit while parsing the document  */ static String parse(final byte[] content, final Metadata metadata, final int limit) throws TikaException, IOException {     // check that its not unprivileged code like a script     SpecialPermission.check().     try {         return AccessController.doPrivileged((PrivilegedExceptionAction<String>) () -> TIKA_INSTANCE.parseToString(new ByteArrayInputStream(content), metadata, limit), RESTRICTED_CONTEXT).     } catch (PrivilegedActionException e) {         // checked exception from tika: unbox it         Throwable cause = e.getCause().         if (cause instanceof TikaException) {             throw (TikaException) cause.         } else if (cause instanceof IOException) {             throw (IOException) cause.         } else {             throw new AssertionError(cause).         }     } }
true;static;0;44;// the ability to load some resources from JARs, and read sysprops ;// compute some minimal permissions for parsers. they only get r/w access to the java temp directory, // the ability to load some resources from JARs, and read sysprops @SuppressForbidden(reason = "adds access to tmp directory") static PermissionCollection getRestrictedPermissions() {     Permissions perms = new Permissions().     // property/env access needed for parsing     perms.add(new PropertyPermission("*", "read")).     perms.add(new RuntimePermission("getenv.TIKA_CONFIG")).     try {         // add permissions for resource access:         // classpath         addReadPermissions(perms, JarHell.parseClassPath()).         // plugin jars         if (TikaImpl.class.getClassLoader() instanceof URLClassLoader) {             URL[] urls = ((URLClassLoader) TikaImpl.class.getClassLoader()).getURLs().             Set<URL> set = new LinkedHashSet<>(Arrays.asList(urls)).             if (set.size() != urls.length) {                 throw new AssertionError("duplicate jars: " + Arrays.toString(urls)).             }             addReadPermissions(perms, set).         }         // jvm's java.io.tmpdir (needs read/write)         FilePermissionUtils.addDirectoryPath(perms, "java.io.tmpdir", PathUtils.get(System.getProperty("java.io.tmpdir")), "read,readlink,write,delete").     } catch (IOException e) {         throw new UncheckedIOException(e).     }     // current hacks needed for POI/PDFbox issues:     perms.add(new SecurityPermission("putProviderProperty.BC")).     perms.add(new SecurityPermission("insertProvider")).     perms.add(new ReflectPermission("suppressAccessChecks")).     perms.add(new RuntimePermission("accessClassInPackage.sun.java2d.cmm.kcms")).     // xmlbeans, use by POI, needs to get the context classloader     perms.add(new RuntimePermission("getClassLoader")).     // ZipFile needs accessDeclaredMembers on JDK 10. cf. https://bugs.openjdk.java.net/browse/JDK-8187485     if (JavaVersion.current().compareTo(JavaVersion.parse("10")) >= 0) {         if (JavaVersion.current().compareTo(JavaVersion.parse("11")) < 0) {             // TODO remove this and from plugin-security.policy when JDK 11 is the only one we support             // this is needed pre 11, but it's fixed in 11 : https://bugs.openjdk.java.net/browse/JDK-8187485             perms.add(new RuntimePermission("accessDeclaredMembers")).         }     }     perms.setReadOnly().     return perms. }
true;static;2;15;// add resources to (what is typically) a jar, but might not be (e.g. in tests/IDE) ;// add resources to (what is typically) a jar, but might not be (e.g. in tests/IDE) @SuppressForbidden(reason = "adds access to jar resources") static void addReadPermissions(Permissions perms, Set<URL> resources) throws IOException {     try {         for (URL url : resources) {             Path path = PathUtils.get(url.toURI()).             if (Files.isDirectory(path)) {                 FilePermissionUtils.addDirectoryPath(perms, "class.path", path, "read,readlink").             } else {                 FilePermissionUtils.addSingleFilePath(perms, path, "read,readlink").             }         }     } catch (URISyntaxException bogus) {         throw new RuntimeException(bogus).     } }
