commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;public void testBuildDefaults() throws Exception {     Map<String, Object> config = new HashMap<>().     config.put("field", "_field").     String processorTag = randomAlphaOfLength(10).     AttachmentProcessor processor = factory.create(null, processorTag, config).     assertThat(processor.getTag(), equalTo(processorTag)).     assertThat(processor.getField(), equalTo("_field")).     assertThat(processor.getTargetField(), equalTo("attachment")).     assertThat(processor.getProperties(), sameInstance(AttachmentProcessor.Factory.DEFAULT_PROPERTIES)).     assertFalse(processor.isIgnoreMissing()). }
false;public;0;12;;public void testConfigureIndexedChars() throws Exception {     int indexedChars = randomIntBetween(1, 100000).     Map<String, Object> config = new HashMap<>().     config.put("field", "_field").     config.put("indexed_chars", indexedChars).     String processorTag = randomAlphaOfLength(10).     AttachmentProcessor processor = factory.create(null, processorTag, config).     assertThat(processor.getTag(), equalTo(processorTag)).     assertThat(processor.getIndexedChars(), is(indexedChars)).     assertFalse(processor.isIgnoreMissing()). }
false;public;0;9;;public void testBuildTargetField() throws Exception {     Map<String, Object> config = new HashMap<>().     config.put("field", "_field").     config.put("target_field", "_field").     AttachmentProcessor processor = factory.create(null, null, config).     assertThat(processor.getField(), equalTo("_field")).     assertThat(processor.getTargetField(), equalTo("_field")).     assertFalse(processor.isIgnoreMissing()). }
false;public;0;17;;public void testBuildFields() throws Exception {     Set<AttachmentProcessor.Property> properties = EnumSet.noneOf(AttachmentProcessor.Property.class).     List<String> fieldNames = new ArrayList<>().     int numFields = scaledRandomIntBetween(1, AttachmentProcessor.Property.values().length).     for (int i = 0. i < numFields. i++) {         AttachmentProcessor.Property property = AttachmentProcessor.Property.values()[i].         properties.add(property).         fieldNames.add(property.name().toLowerCase(Locale.ROOT)).     }     Map<String, Object> config = new HashMap<>().     config.put("field", "_field").     config.put("properties", fieldNames).     AttachmentProcessor processor = factory.create(null, null, config).     assertThat(processor.getField(), equalTo("_field")).     assertThat(processor.getProperties(), equalTo(properties)).     assertFalse(processor.isIgnoreMissing()). }
false;public;0;25;;public void testBuildIllegalFieldOption() throws Exception {     Map<String, Object> config = new HashMap<>().     config.put("field", "_field").     config.put("properties", Collections.singletonList("invalid")).     try {         factory.create(null, null, config).         fail("exception expected").     } catch (ElasticsearchParseException e) {         assertThat(e.getMessage(), containsString("[properties] illegal field option [invalid]")).         // ensure allowed fields are mentioned         for (AttachmentProcessor.Property property : AttachmentProcessor.Property.values()) {             assertThat(e.getMessage(), containsString(property.name())).         }     }     config = new HashMap<>().     config.put("field", "_field").     config.put("properties", "invalid").     try {         factory.create(null, null, config).         fail("exception expected").     } catch (ElasticsearchParseException e) {         assertThat(e.getMessage(), equalTo("[properties] property isn't a list, but of type [java.lang.String]")).     } }
false;public;0;14;;public void testIgnoreMissing() throws Exception {     Map<String, Object> config = new HashMap<>().     config.put("field", "_field").     config.put("ignore_missing", true).     String processorTag = randomAlphaOfLength(10).     AttachmentProcessor processor = factory.create(null, processorTag, config).     assertThat(processor.getTag(), equalTo(processorTag)).     assertThat(processor.getField(), equalTo("_field")).     assertThat(processor.getTargetField(), equalTo("attachment")).     assertThat(processor.getProperties(), sameInstance(AttachmentProcessor.Factory.DEFAULT_PROPERTIES)).     assertTrue(processor.isIgnoreMissing()). }
