commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override public Tokenizer create() {     if (config == null) {         return new ICUTokenizer().     } else {         return new ICUTokenizer(config).     } }
false;public;1;8;;@Override public RuleBasedBreakIterator getBreakIterator(int script) {     if (breakers[script] != null) {         return (RuleBasedBreakIterator) breakers[script].clone().     } else {         return super.getBreakIterator(script).     } }
false;private;2;43;;private ICUTokenizerConfig getIcuConfig(Environment env, Settings settings) {     Map<Integer, String> tailored = new HashMap<>().     try {         List<String> ruleFiles = settings.getAsList(RULE_FILES).         for (String scriptAndResourcePath : ruleFiles) {             int colonPos = scriptAndResourcePath.indexOf(":").             if (colonPos == -1 || colonPos == scriptAndResourcePath.length() - 1) {                 throw new IllegalArgumentException(RULE_FILES + " should contain comma-separated \"code:rulefile\" pairs").             }             String scriptCode = scriptAndResourcePath.substring(0, colonPos).trim().             String resourcePath = scriptAndResourcePath.substring(colonPos + 1).trim().             tailored.put(UCharacter.getPropertyValueEnum(UProperty.SCRIPT, scriptCode), resourcePath).         }         if (tailored.isEmpty()) {             return null.         } else {             final BreakIterator[] breakers = new BreakIterator[UScript.CODE_LIMIT].             for (Map.Entry<Integer, String> entry : tailored.entrySet()) {                 int code = entry.getKey().                 String resourcePath = entry.getValue().                 breakers[code] = parseRules(resourcePath, env).             }             // cjkAsWords nor myanmarAsWords are not configurable yet.             ICUTokenizerConfig config = new DefaultICUTokenizerConfig(true, true) {                  @Override                 public RuleBasedBreakIterator getBreakIterator(int script) {                     if (breakers[script] != null) {                         return (RuleBasedBreakIterator) breakers[script].clone().                     } else {                         return super.getBreakIterator(script).                     }                 }             }.             return config.         }     } catch (Exception e) {         throw new ElasticsearchException("failed to load ICU rule files", e).     } }
true;private;2;10;// parse a single RBBi rule file ;// parse a single RBBi rule file private BreakIterator parseRules(String filename, Environment env) throws IOException {     final Path path = env.configFile().resolve(filename).     String rules = Files.readAllLines(path).stream().filter((v) -> v.startsWith("#") == false).collect(Collectors.joining("\n")).     return new RuleBasedBreakIterator(rules.toString()). }
