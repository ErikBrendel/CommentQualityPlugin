commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected MappedFieldType createDefaultFieldType() {     return new CollationFieldType(). }
false;public;0;8;;public void testIsFieldWithinQuery() throws IOException {     CollationFieldType ft = new CollationFieldType().     // current impl ignores args and shourd always return INTERSECTS     assertEquals(Relation.INTERSECTS, ft.isFieldWithinQuery(null, RandomStrings.randomAsciiOfLengthBetween(random(), 0, 5), RandomStrings.randomAsciiOfLengthBetween(random(), 0, 5), randomBoolean(), randomBoolean(), null, null, null)). }
false;public;0;20;;public void testTermQuery() {     MappedFieldType ft = createDefaultFieldType().     ft.setName("field").     ft.setIndexOptions(IndexOptions.DOCS).     Collator collator = Collator.getInstance(new ULocale("tr")).     collator.setStrength(Collator.PRIMARY).     collator.freeze().     ((CollationFieldType) ft).setCollator(collator).     RawCollationKey key = collator.getRawCollationKey("ı will use turkish casıng", null).     BytesRef expected = new BytesRef(key.bytes, 0, key.size).     assertEquals(new TermQuery(new Term("field", expected)), ft.termQuery("I WİLL USE TURKİSH CASING", null)).     ft.setIndexOptions(IndexOptions.NONE).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> ft.termQuery("bar", null)).     assertEquals("Cannot search on field [field] since it is not indexed.", e.getMessage()). }
false;public;0;23;;public void testTermsQuery() {     MappedFieldType ft = createDefaultFieldType().     ft.setName("field").     ft.setIndexOptions(IndexOptions.DOCS).     Collator collator = Collator.getInstance(ULocale.ROOT).freeze().     ((CollationFieldType) ft).setCollator(collator).     RawCollationKey fooKey = collator.getRawCollationKey("foo", null).     RawCollationKey barKey = collator.getRawCollationKey("bar", null).     List<BytesRef> terms = new ArrayList<>().     terms.add(new BytesRef(fooKey.bytes, 0, fooKey.size)).     terms.add(new BytesRef(barKey.bytes, 0, barKey.size)).     assertEquals(new TermInSetQuery("field", terms), ft.termsQuery(Arrays.asList("foo", "bar"), null)).     ft.setIndexOptions(IndexOptions.NONE).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> ft.termsQuery(Arrays.asList("foo", "bar"), null)).     assertEquals("Cannot search on field [field] since it is not indexed.", e.getMessage()). }
false;public;0;7;;public void testRegexpQuery() {     MappedFieldType ft = createDefaultFieldType().     ft.setName("field").     ft.setIndexOptions(IndexOptions.DOCS).     expectThrows(UnsupportedOperationException.class, () -> ft.regexpQuery("foo.*", 0, 10, null, null)). }
false;public;0;7;;public void testFuzzyQuery() {     MappedFieldType ft = createDefaultFieldType().     ft.setName("field").     ft.setIndexOptions(IndexOptions.DOCS).     expectThrows(UnsupportedOperationException.class, () -> ft.fuzzyQuery("foo", Fuzziness.fromEdits(2), 1, 50, true)). }
false;public;0;7;;public void testPrefixQuery() {     MappedFieldType ft = createDefaultFieldType().     ft.setName("field").     ft.setIndexOptions(IndexOptions.DOCS).     expectThrows(UnsupportedOperationException.class, () -> ft.prefixQuery("prefix", null, null)). }
false;public;0;7;;public void testWildcardQuery() {     MappedFieldType ft = createDefaultFieldType().     ft.setName("field").     ft.setIndexOptions(IndexOptions.DOCS).     expectThrows(UnsupportedOperationException.class, () -> ft.wildcardQuery("foo*", null, null)). }
false;public;0;21;;public void testRangeQuery() {     MappedFieldType ft = createDefaultFieldType().     ft.setName("field").     ft.setIndexOptions(IndexOptions.DOCS).     Collator collator = Collator.getInstance(ULocale.ROOT).freeze().     ((CollationFieldType) ft).setCollator(collator).     RawCollationKey aKey = collator.getRawCollationKey("a", null).     RawCollationKey bKey = collator.getRawCollationKey("b", null).     TermRangeQuery expected = new TermRangeQuery("field", new BytesRef(aKey.bytes, 0, aKey.size), new BytesRef(bKey.bytes, 0, bKey.size), false, false).     assertEquals(expected, ft.rangeQuery("a", "b", false, false, null, null, null, null)).     ft.setIndexOptions(IndexOptions.NONE).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> ft.rangeQuery("a", "b", false, false, null, null, null, null)).     assertEquals("Cannot search on field [field] since it is not indexed.", e.getMessage()). }
