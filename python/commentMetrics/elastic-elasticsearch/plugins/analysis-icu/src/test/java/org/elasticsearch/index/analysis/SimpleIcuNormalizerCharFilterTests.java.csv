commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;public void testDefaultSetting() throws Exception {     Settings settings = Settings.builder().put("index.analysis.char_filter.myNormalizerChar.type", "icu_normalizer").build().     TestAnalysis analysis = createTestAnalysis(new Index("test", "_na_"), settings, new AnalysisICUPlugin()).     CharFilterFactory charFilterFactory = analysis.charFilter.get("myNormalizerChar").     String input = "ʰ㌰゙5℃№㈱㌘，バッファーの正規化のテスト．㋐㋑㋒㋓㋔ｶｷｸｹｺｻﾞｼﾞｽﾞｾﾞｿﾞg̈각/각நிเกषिchkʷक्षि".     Normalizer2 normalizer = Normalizer2.getInstance(null, "nfkc_cf", Normalizer2.Mode.COMPOSE).     String expectedOutput = normalizer.normalize(input).     CharFilter inputReader = (CharFilter) charFilterFactory.create(new StringReader(input)).     char[] tempBuff = new char[10].     StringBuilder output = new StringBuilder().     while (true) {         int length = inputReader.read(tempBuff).         if (length == -1)             break.         output.append(tempBuff, 0, length).         assertEquals(output.toString(), normalizer.normalize(input.substring(0, inputReader.correctOffset(output.length())))).     }     assertEquals(expectedOutput, output.toString()). }
false;public;0;23;;public void testNameAndModeSetting() throws Exception {     Settings settings = Settings.builder().put("index.analysis.char_filter.myNormalizerChar.type", "icu_normalizer").put("index.analysis.char_filter.myNormalizerChar.name", "nfkc").put("index.analysis.char_filter.myNormalizerChar.mode", "decompose").build().     TestAnalysis analysis = createTestAnalysis(new Index("test", "_na_"), settings, new AnalysisICUPlugin()).     CharFilterFactory charFilterFactory = analysis.charFilter.get("myNormalizerChar").     String input = "ʰ㌰゙5℃№㈱㌘，バッファーの正規化のテスト．㋐㋑㋒㋓㋔ｶｷｸｹｺｻﾞｼﾞｽﾞｾﾞｿﾞg̈각/각நிเกषिchkʷक्षि".     Normalizer2 normalizer = Normalizer2.getInstance(null, "nfkc", Normalizer2.Mode.DECOMPOSE).     String expectedOutput = normalizer.normalize(input).     CharFilter inputReader = (CharFilter) charFilterFactory.create(new StringReader(input)).     char[] tempBuff = new char[10].     StringBuilder output = new StringBuilder().     while (true) {         int length = inputReader.read(tempBuff).         if (length == -1)             break.         output.append(tempBuff, 0, length).         assertEquals(output.toString(), normalizer.normalize(input.substring(0, inputReader.correctOffset(output.length())))).     }     assertEquals(expectedOutput, output.toString()). }
