commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;public void testSimpleIcuTokenizer() throws IOException {     TestAnalysis analysis = createTestAnalysis().     TokenizerFactory tokenizerFactory = analysis.tokenizer.get("icu_tokenizer").     ICUTokenizer tokenizer = (ICUTokenizer) tokenizerFactory.create().     Reader reader = new StringReader("向日葵, one-two").     tokenizer.setReader(reader).     assertTokenStreamContents(tokenizer, new String[] { "向日葵", "one", "two" }). }
false;public;0;14;;public void testIcuCustomizeRuleFile() throws IOException {     TestAnalysis analysis = createTestAnalysis().     // test the tokenizer with single rule file     TokenizerFactory tokenizerFactory = analysis.tokenizer.get("user_rule_tokenizer").     ICUTokenizer tokenizer = (ICUTokenizer) tokenizerFactory.create().     Reader reader = new StringReader("One-two punch.  Brang-, not brung-it.  This one--not that one--is the right one, -ish.").     tokenizer.setReader(reader).     assertTokenStreamContents(tokenizer, new String[] { "One-two", "punch", "Brang", "not", "brung-it", "This", "one", "not", "that", "one", "is", "the", "right", "one", "ish" }). }
false;public;0;15;;public void testMultipleIcuCustomizeRuleFiles() throws IOException {     TestAnalysis analysis = createTestAnalysis().     // test the tokenizer with two rule files     TokenizerFactory tokenizerFactory = analysis.tokenizer.get("multi_rule_tokenizer").     ICUTokenizer tokenizer = (ICUTokenizer) tokenizerFactory.create().     StringReader reader = new StringReader("Some English.  Немного русский.  ข้อความภาษาไทยเล็ก ๆ น้อย ๆ  More English.").     tokenizer.setReader(reader).     assertTokenStreamContents(tokenizer, new String[] { "Some", "English", "Немного русский.  ", "ข้อความภาษาไทยเล็ก ๆ น้อย ๆ  ", "More", "English" }). }
false;private,static;0;20;;private static TestAnalysis createTestAnalysis() throws IOException {     InputStream keywords = IcuTokenizerFactoryTests.class.getResourceAsStream("KeywordTokenizer.rbbi").     InputStream latin = IcuTokenizerFactoryTests.class.getResourceAsStream("Latin-dont-break-on-hyphens.rbbi").     Path home = createTempDir().     Path config = home.resolve("config").     Files.createDirectory(config).     Files.copy(keywords, config.resolve("KeywordTokenizer.rbbi")).     Files.copy(latin, config.resolve("Latin-dont-break-on-hyphens.rbbi")).     String json = "/org/elasticsearch/index/analysis/icu_analysis.json".     Settings settings = Settings.builder().loadFromStream(json, IcuTokenizerFactoryTests.class.getResourceAsStream(json), false).put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build().     Settings nodeSettings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), home).build().     return createTestAnalysis(new Index("test", "_na_"), nodeSettings, settings, new AnalysisICUPlugin()). }
