commented;modifiers;parameterAmount;loc;comment;code
false;private;7;50;;private void assertHighlightOneDoc(String fieldName, String[] markedUpInputs, Query query, Locale locale, BreakIterator breakIterator, int noMatchSize, String[] expectedPassages) throws Exception {     // Annotated fields wrap the usual analyzer with one that injects extra tokens     Analyzer wrapperAnalyzer = new AnnotationAnalyzerWrapper(new StandardAnalyzer()).     AnnotatedHighlighterAnalyzer hiliteAnalyzer = new AnnotatedHighlighterAnalyzer(wrapperAnalyzer).     hiliteAnalyzer.init(markedUpInputs).     PassageFormatter passageFormatter = new AnnotatedPassageFormatter(hiliteAnalyzer, new DefaultEncoder()).     String[] plainTextForHighlighter = hiliteAnalyzer.getPlainTextValuesForHighlighter().     Directory dir = newDirectory().     IndexWriterConfig iwc = newIndexWriterConfig(wrapperAnalyzer).     iwc.setMergePolicy(newTieredMergePolicy(random())).     RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc).     FieldType ft = new FieldType(TextField.TYPE_STORED).     if (randomBoolean()) {         ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS).     } else {         ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS).     }     ft.freeze().     Document doc = new Document().     for (String input : markedUpInputs) {         Field field = new Field(fieldName, "", ft).         field.setStringValue(input).         doc.add(field).     }     iw.addDocument(doc).     DirectoryReader reader = iw.getReader().     IndexSearcher searcher = newSearcher(reader).     iw.close().     TopDocs topDocs = searcher.search(new MatchAllDocsQuery(), 1, Sort.INDEXORDER).     assertThat(topDocs.totalHits.value, equalTo(1L)).     String rawValue = Strings.arrayToDelimitedString(plainTextForHighlighter, String.valueOf(MULTIVAL_SEP_CHAR)).     CustomUnifiedHighlighter highlighter = new CustomUnifiedHighlighter(searcher, hiliteAnalyzer, null, passageFormatter, locale, breakIterator, rawValue, noMatchSize).     highlighter.setFieldMatcher((name) -> "text".equals(name)).     final Snippet[] snippets = highlighter.highlightField("text", query, topDocs.scoreDocs[0].doc, expectedPassages.length).     assertEquals(expectedPassages.length, snippets.length).     for (int i = 0. i < snippets.length. i++) {         assertEquals(expectedPassages[i], snippets[i].getText()).     }     reader.close().     dir.close(). }
false;public;0;20;;public void testAnnotatedTextStructuredMatch() throws Exception {     // Check that a structured token eg a URL can be highlighted in a query     // on marked-up     // content using an "annotated_text" type field.     String url = "https://en.wikipedia.org/wiki/Key_Word_in_Context".     String encodedUrl = URLEncoder.encode(url, "UTF-8").     String annotatedWord = "[highlighting](" + encodedUrl + ")".     String highlightedAnnotatedWord = "[highlighting](" + AnnotatedPassageFormatter.SEARCH_HIT_TYPE + "=" + encodedUrl + "&" + encodedUrl + ")".     final String[] markedUpInputs = { "This is a test. Just a test1 " + annotatedWord + " from [annotated](bar) highlighter.", "This is the second " + annotatedWord + " value to perform highlighting on a longer text that gets scored lower." }.     String[] expectedPassages = { "This is a test. Just a test1 " + highlightedAnnotatedWord + " from [annotated](bar) highlighter.", "This is the second " + highlightedAnnotatedWord + " value to perform highlighting on a" + " longer text that gets scored lower." }.     Query query = new TermQuery(new Term("text", url)).     BreakIterator breakIterator = new CustomSeparatorBreakIterator(MULTIVAL_SEP_CHAR).     assertHighlightOneDoc("text", markedUpInputs, query, Locale.ROOT, breakIterator, 0, expectedPassages). }
false;public;0;10;;public void testAnnotatedTextOverlapsWithUnstructuredSearchTerms() throws Exception {     final String[] markedUpInputs = { "[Donald Trump](Donald+Trump) visited Singapore", "Donald duck is a [Disney](Disney+Inc) invention" }.     String[] expectedPassages = { "[Donald](_hit_term=donald) Trump visited Singapore", "[Donald](_hit_term=donald) duck is a [Disney](Disney+Inc) invention" }.     Query query = new TermQuery(new Term("text", "donald")).     BreakIterator breakIterator = new CustomSeparatorBreakIterator(MULTIVAL_SEP_CHAR).     assertHighlightOneDoc("text", markedUpInputs, query, Locale.ROOT, breakIterator, 0, expectedPassages). }
false;public;0;11;;public void testAnnotatedTextMultiFieldWithBreakIterator() throws Exception {     final String[] markedUpInputs = { "[Donald Trump](Donald+Trump) visited Singapore. Kim shook hands with Donald", "Donald duck is a [Disney](Disney+Inc) invention" }.     String[] expectedPassages = { "[Donald](_hit_term=donald) Trump visited Singapore", "Kim shook hands with [Donald](_hit_term=donald)", "[Donald](_hit_term=donald) duck is a [Disney](Disney+Inc) invention" }.     Query query = new TermQuery(new Term("text", "donald")).     BreakIterator breakIterator = new CustomSeparatorBreakIterator(MULTIVAL_SEP_CHAR).     breakIterator = new SplittingBreakIterator(breakIterator, '.').     assertHighlightOneDoc("text", markedUpInputs, query, Locale.ROOT, breakIterator, 0, expectedPassages). }
false;public;0;9;;public void testAnnotatedTextSingleFieldWithBreakIterator() throws Exception {     final String[] markedUpInputs = { "[Donald Trump](Donald+Trump) visited Singapore. Kim shook hands with Donald" }.     String[] expectedPassages = { "[Donald](_hit_term=donald) Trump visited Singapore", "Kim shook hands with [Donald](_hit_term=donald)" }.     Query query = new TermQuery(new Term("text", "donald")).     BreakIterator breakIterator = new CustomSeparatorBreakIterator(MULTIVAL_SEP_CHAR).     breakIterator = new SplittingBreakIterator(breakIterator, '.').     assertHighlightOneDoc("text", markedUpInputs, query, Locale.ROOT, breakIterator, 0, expectedPassages). }
false;public;0;8;;public void testAnnotatedTextSingleFieldWithPhraseQuery() throws Exception {     final String[] markedUpInputs = { "[Donald Trump](Donald+Trump) visited Singapore", "Donald Jr was with Melania Trump" }.     String[] expectedPassages = { "[Donald](_hit_term=donald) [Trump](_hit_term=trump) visited Singapore" }.     Query query = new PhraseQuery("text", "donald", "trump").     BreakIterator breakIterator = new CustomSeparatorBreakIterator(MULTIVAL_SEP_CHAR).     assertHighlightOneDoc("text", markedUpInputs, query, Locale.ROOT, breakIterator, 0, expectedPassages). }
false;public;0;7;;public void testBadAnnotation() throws Exception {     final String[] markedUpInputs = { "Missing bracket for [Donald Trump](Donald+Trump visited Singapore" }.     String[] expectedPassages = { "Missing bracket for [Donald Trump](Donald+Trump visited [Singapore](_hit_term=singapore)" }.     Query query = new TermQuery(new Term("text", "singapore")).     BreakIterator breakIterator = new CustomSeparatorBreakIterator(MULTIVAL_SEP_CHAR).     assertHighlightOneDoc("text", markedUpInputs, query, Locale.ROOT, breakIterator, 0, expectedPassages). }
