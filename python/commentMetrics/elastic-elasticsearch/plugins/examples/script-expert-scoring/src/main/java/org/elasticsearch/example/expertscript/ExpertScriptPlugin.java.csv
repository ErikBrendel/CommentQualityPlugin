commented;modifiers;parameterAmount;loc;comment;code
false;public;2;4;;@Override public ScriptEngine getScriptEngine(Settings settings, Collection<ScriptContext<?>> contexts) {     return new MyExpertScriptEngine(). }
false;public;0;4;;@Override public String getType() {     return "expert_scripts". }
false;public;4;16;;@Override public <T> T compile(String scriptName, String scriptSource, ScriptContext<T> context, Map<String, String> params) {     if (context.equals(ScoreScript.CONTEXT) == false) {         throw new IllegalArgumentException(getType() + " scripts cannot be used for context [" + context.name + "]").     }     // we use the script "source" as the script identifier     if ("pure_df".equals(scriptSource)) {         ScoreScript.Factory factory = PureDfLeafFactory::new.         return context.factoryClazz.cast(factory).     }     throw new IllegalArgumentException("Unknown script name " + scriptSource). }
false;public;0;4;;@Override public void close() { // optionally close resources }
false;public;0;4;;@Override public boolean needs_score() {     // Return true if the script needs the score     return false. }
false;public;0;4;;@Override public double execute() {     return 0.0d. }
false;public;1;15;;@Override public void setDocument(int docid) {     /*                          * advance has undefined behavior calling with                          * a docid <= its current docid                          */     if (postings.docID() < docid) {         try {             postings.advance(docid).         } catch (IOException e) {             throw new UncheckedIOException(e).         }     }     currentDocid = docid. }
false;public;0;15;;@Override public double execute() {     if (postings.docID() != currentDocid) {         /*                              * advance moved past the current doc, so this doc                              * has no occurrences of the term                              */         return 0.0d.     }     try {         return postings.freq().     } catch (IOException e) {         throw new UncheckedIOException(e).     } }
false;public;1;51;;@Override public ScoreScript newInstance(LeafReaderContext context) throws IOException {     PostingsEnum postings = context.reader().postings(new Term(field, term)).     if (postings == null) {         /*                      * the field and/or term don't exist in this segment,                      * so always return 0                      */         return new ScoreScript(params, lookup, context) {              @Override             public double execute() {                 return 0.0d.             }         }.     }     return new ScoreScript(params, lookup, context) {          int currentDocid = -1.          @Override         public void setDocument(int docid) {             /*                          * advance has undefined behavior calling with                          * a docid <= its current docid                          */             if (postings.docID() < docid) {                 try {                     postings.advance(docid).                 } catch (IOException e) {                     throw new UncheckedIOException(e).                 }             }             currentDocid = docid.         }          @Override         public double execute() {             if (postings.docID() != currentDocid) {                 /*                              * advance moved past the current doc, so this doc                              * has no occurrences of the term                              */                 return 0.0d.             }             try {                 return postings.freq().             } catch (IOException e) {                 throw new UncheckedIOException(e).             }         }     }. }
