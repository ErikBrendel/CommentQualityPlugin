commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void doWriteTo(StreamOutput out) throws IOException {     out.writeString(randomSuffix). }
false;protected;2;5;;@Override protected XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException {     builder.field(RANDOM_SUFFIX_FIELD.getPreferredName(), randomSuffix).     return builder. }
false;public;0;4;;@Override public String getWriteableName() {     return SUGGESTION_NAME. }
false;protected;1;4;;@Override protected boolean doEquals(CustomSuggestionBuilder other) {     return Objects.equals(randomSuffix, other.randomSuffix). }
false;protected;0;4;;@Override protected int doHashCode() {     return Objects.hash(randomSuffix). }
false;public,static;1;45;;public static CustomSuggestionBuilder fromXContent(XContentParser parser) throws IOException {     XContentParser.Token token.     String currentFieldName = null.     String fieldname = null.     String suffix = null.     String analyzer = null.     int sizeField = -1.     int shardSize = -1.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (token.isValue()) {             if (SuggestionBuilder.ANALYZER_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 analyzer = parser.text().             } else if (SuggestionBuilder.FIELDNAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 fieldname = parser.text().             } else if (SuggestionBuilder.SIZE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 sizeField = parser.intValue().             } else if (SuggestionBuilder.SHARDSIZE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 shardSize = parser.intValue().             } else if (RANDOM_SUFFIX_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 suffix = parser.text().             }         } else {             throw new ParsingException(parser.getTokenLocation(), "suggester[custom] doesn't support field [" + currentFieldName + "]").         }     }     // now we should have field name, check and copy fields over to the suggestion builder we return     if (fieldname == null) {         throw new ParsingException(parser.getTokenLocation(), "the required field option is missing").     }     CustomSuggestionBuilder builder = new CustomSuggestionBuilder(fieldname, suffix).     if (analyzer != null) {         builder.analyzer(analyzer).     }     if (sizeField != -1) {         builder.size(sizeField).     }     if (shardSize != -1) {         builder.shardSize(shardSize).     }     return builder. }
false;public;1;11;;@Override public SuggestionSearchContext.SuggestionContext build(QueryShardContext context) throws IOException {     Map<String, Object> options = new HashMap<>().     options.put(FIELDNAME_FIELD.getPreferredName(), field()).     options.put(RANDOM_SUFFIX_FIELD.getPreferredName(), randomSuffix).     CustomSuggestionContext customSuggestionsContext = new CustomSuggestionContext(context, options).     customSuggestionsContext.setField(field()).     assert text != null.     customSuggestionsContext.setText(BytesRefs.toBytesRef(text)).     return customSuggestionsContext. }
