commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(dummy). }
false;public;0;4;;@Override public String getWriteableName() {     return CustomSuggestionBuilder.SUGGESTION_NAME. }
false;public;0;4;;@Override public int getWriteableType() {     return TYPE. }
true;public;0;3;/**  * A meaningless value used to test that plugin suggesters can add fields to their Suggestion types  *  * This can't be serialized to xcontent because Suggestions appear in xcontent as an array of entries, so there is no place  * to add a custom field. But we can still use a custom field internally and use it to define a Suggestion's behavior  */ ;/**  * A meaningless value used to test that plugin suggesters can add fields to their Suggestion types  *  * This can't be serialized to xcontent because Suggestions appear in xcontent as an array of entries, so there is no place  * to add a custom field. But we can still use a custom field internally and use it to define a Suggestion's behavior  */ public String getDummy() {     return dummy. }
false;protected;1;4;;@Override protected Entry newEntry(StreamInput in) throws IOException {     return new Entry(in). }
false;public,static;2;5;;public static CustomSuggestion fromXContent(XContentParser parser, String name) throws IOException {     CustomSuggestion suggestion = new CustomSuggestion(name, -1, null).     parseEntries(parser, suggestion, Entry::fromXContent).     return suggestion. }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(dummy). }
false;protected;1;4;;@Override protected Option newOption(StreamInput in) throws IOException {     return new Option(in). }
true;protected;1;4;/*          * the value of dummy will always be the same, so this just tests that we can merge entries with custom fields          */ ;/*          * the value of dummy will always be the same, so this just tests that we can merge entries with custom fields          */ @Override protected void merge(Suggest.Suggestion.Entry<Option> otherEntry) {     dummy = ((Entry) otherEntry).getDummy(). }
true;public;0;3;/**  * Meaningless field used to test that plugin suggesters can add fields to their entries  */ ;/**  * Meaningless field used to test that plugin suggesters can add fields to their entries  */ public String getDummy() {     return dummy. }
false;public;2;6;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder = super.toXContent(builder, params).     builder.field(DUMMY.getPreferredName(), getDummy()).     return builder. }
false;public,static;1;3;;public static Entry fromXContent(XContentParser parser) {     return PARSER.apply(parser, null). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(dummy). }
true;public;0;3;/**  * A meaningless value used to test that plugin suggesters can add fields to their options  */ ;/**  * A meaningless value used to test that plugin suggesters can add fields to their options  */ public String getDummy() {     return dummy. }
true;protected;1;5;/*              * the value of dummy will always be the same, so this just tests that we can merge options with custom fields              */ ;/*              * the value of dummy will always be the same, so this just tests that we can merge options with custom fields              */ @Override protected void mergeInto(Suggest.Suggestion.Entry.Option otherOption) {     super.mergeInto(otherOption).     dummy = ((Option) otherOption).getDummy(). }
false;public;2;6;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder = super.toXContent(builder, params).     builder.field(DUMMY.getPreferredName(), dummy).     return builder. }
false;public,static;1;3;;public static Option fromXContent(XContentParser parser) {     return PARSER.apply(parser, null). }
