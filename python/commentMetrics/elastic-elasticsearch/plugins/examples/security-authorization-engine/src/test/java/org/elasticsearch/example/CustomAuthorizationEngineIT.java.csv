commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;9;;@Override protected Settings externalClusterClientSettings() {     final String token = "Basic " + Base64.getEncoder().encodeToString(("test_user:x-pack-test-password").getBytes(StandardCharsets.UTF_8)).     return Settings.builder().put(ThreadContext.PREFIX + ".Authorization", token).put(NetworkModule.TRANSPORT_TYPE_KEY, "security4").build(). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> transportClientPlugins() {     return Collections.singleton(XPackClientPlugin.class). }
false;public;0;25;;public void testClusterAction() throws IOException {     SecurityClient securityClient = new SecurityClient(client()).     securityClient.preparePutUser("custom_user", "x-pack-test-password".toCharArray(), Hasher.BCRYPT, "custom_superuser").get().     {         RequestOptions.Builder options = RequestOptions.DEFAULT.toBuilder().         options.addHeader(UsernamePasswordToken.BASIC_AUTH_HEADER, basicAuthHeaderValue("custom_user", new SecureString("x-pack-test-password".toCharArray()))).         Request request = new Request("GET", "_cluster/health").         request.setOptions(options).         Response response = getRestClient().performRequest(request).         assertThat(response.getStatusLine().getStatusCode(), is(200)).     }     {         securityClient.preparePutUser("custom_user2", "x-pack-test-password".toCharArray(), Hasher.BCRYPT, "not_superuser").get().         RequestOptions.Builder options = RequestOptions.DEFAULT.toBuilder().         options.addHeader(UsernamePasswordToken.BASIC_AUTH_HEADER, basicAuthHeaderValue("custom_user2", new SecureString("x-pack-test-password".toCharArray()))).         Request request = new Request("GET", "_cluster/health").         request.setOptions(options).         ResponseException e = expectThrows(ResponseException.class, () -> getRestClient().performRequest(request)).         assertThat(e.getResponse().getStatusLine().getStatusCode(), is(403)).     } }
false;public;0;25;;public void testIndexAction() throws IOException {     SecurityClient securityClient = new SecurityClient(client()).     securityClient.preparePutUser("custom_user", "x-pack-test-password".toCharArray(), Hasher.BCRYPT, "custom_superuser").get().     {         RequestOptions.Builder options = RequestOptions.DEFAULT.toBuilder().         options.addHeader(UsernamePasswordToken.BASIC_AUTH_HEADER, basicAuthHeaderValue("custom_user", new SecureString("x-pack-test-password".toCharArray()))).         Request request = new Request("PUT", "/index").         request.setOptions(options).         Response response = getRestClient().performRequest(request).         assertThat(response.getStatusLine().getStatusCode(), is(200)).     }     {         securityClient.preparePutUser("custom_user2", "x-pack-test-password".toCharArray(), Hasher.BCRYPT, "not_superuser").get().         RequestOptions.Builder options = RequestOptions.DEFAULT.toBuilder().         options.addHeader(UsernamePasswordToken.BASIC_AUTH_HEADER, basicAuthHeaderValue("custom_user2", new SecureString("x-pack-test-password".toCharArray()))).         Request request = new Request("PUT", "/index").         request.setOptions(options).         ResponseException e = expectThrows(ResponseException.class, () -> getRestClient().performRequest(request)).         assertThat(e.getResponse().getStatusLine().getStatusCode(), is(403)).     } }
false;public;0;41;;public void testRunAs() throws IOException {     SecurityClient securityClient = new SecurityClient(client()).     securityClient.preparePutUser("custom_user", "x-pack-test-password".toCharArray(), Hasher.BCRYPT, "custom_superuser").get().     securityClient.preparePutUser("custom_user2", "x-pack-test-password".toCharArray(), Hasher.BCRYPT, "custom_superuser").get().     securityClient.preparePutUser("custom_user3", "x-pack-test-password".toCharArray(), Hasher.BCRYPT, "not_superuser").get().     {         RequestOptions.Builder options = RequestOptions.DEFAULT.toBuilder().         options.addHeader(UsernamePasswordToken.BASIC_AUTH_HEADER, basicAuthHeaderValue("custom_user", new SecureString("x-pack-test-password".toCharArray()))).         options.addHeader("es-security-runas-user", "custom_user2").         Request request = new Request("GET", "/_security/_authenticate").         request.setOptions(options).         Response response = getRestClient().performRequest(request).         assertThat(response.getStatusLine().getStatusCode(), is(200)).         String responseStr = EntityUtils.toString(response.getEntity()).         assertThat(responseStr, containsString("custom_user2")).     }     {         RequestOptions.Builder options = RequestOptions.DEFAULT.toBuilder().         options.addHeader(UsernamePasswordToken.BASIC_AUTH_HEADER, basicAuthHeaderValue("custom_user", new SecureString("x-pack-test-password".toCharArray()))).         options.addHeader("es-security-runas-user", "custom_user3").         Request request = new Request("PUT", "/index").         request.setOptions(options).         ResponseException e = expectThrows(ResponseException.class, () -> getRestClient().performRequest(request)).         assertThat(e.getResponse().getStatusLine().getStatusCode(), is(403)).     }     {         RequestOptions.Builder options = RequestOptions.DEFAULT.toBuilder().         options.addHeader(UsernamePasswordToken.BASIC_AUTH_HEADER, basicAuthHeaderValue("custom_user3", new SecureString("x-pack-test-password".toCharArray()))).         options.addHeader("es-security-runas-user", "custom_user2").         Request request = new Request("PUT", "/index").         request.setOptions(options).         ResponseException e = expectThrows(ResponseException.class, () -> getRestClient().performRequest(request)).         assertThat(e.getResponse().getStatusLine().getStatusCode(), is(403)).     } }
