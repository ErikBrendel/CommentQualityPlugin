commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;public void testGetAuthorizationInfo() {     PlainActionFuture<AuthorizationInfo> future = new PlainActionFuture<>().     CustomAuthorizationEngine engine = new CustomAuthorizationEngine().     engine.resolveAuthorizationInfo(getRequestInfo(), future).     assertNotNull(future.actionGet()). }
false;public;0;37;;public void testAuthorizeRunAs() {     final String action = "cluster:monitor/foo".     final TransportRequest request = new TransportRequest() {     }.     CustomAuthorizationEngine engine = new CustomAuthorizationEngine().     // unauthorized     {         Authentication authentication = new Authentication(new User("joe", new String[] { "custom_superuser" }, new User("bar", "not_superuser")), new RealmRef("test", "test", "node"), new RealmRef("test", "test", "node")).         RequestInfo info = new RequestInfo(authentication, request, action).         PlainActionFuture<AuthorizationInfo> future = new PlainActionFuture<>().         engine.resolveAuthorizationInfo(info, future).         AuthorizationInfo authzInfo = future.actionGet().         PlainActionFuture<AuthorizationResult> resultFuture = new PlainActionFuture<>().         engine.authorizeRunAs(info, authzInfo, resultFuture).         AuthorizationResult result = resultFuture.actionGet().         assertThat(result.isGranted(), is(false)).         assertThat(result.isAuditable(), is(true)).     }     // authorized     {         Authentication authentication = new Authentication(new User("joe", new String[] { "not_superuser" }, new User("bar", "custom_superuser")), new RealmRef("test", "test", "node"), new RealmRef("test", "test", "node")).         RequestInfo info = new RequestInfo(authentication, request, action).         PlainActionFuture<AuthorizationInfo> future = new PlainActionFuture<>().         engine.resolveAuthorizationInfo(info, future).         AuthorizationInfo authzInfo = future.actionGet().         PlainActionFuture<AuthorizationResult> resultFuture = new PlainActionFuture<>().         engine.authorizeRunAs(info, authzInfo, resultFuture).         AuthorizationResult result = resultFuture.actionGet().         assertThat(result.isGranted(), is(true)).         assertThat(result.isAuditable(), is(true)).     } }
false;public;0;32;;public void testAuthorizeClusterAction() {     CustomAuthorizationEngine engine = new CustomAuthorizationEngine().     RequestInfo requestInfo = getRequestInfo().     // authorized     {         PlainActionFuture<AuthorizationInfo> future = new PlainActionFuture<>().         engine.resolveAuthorizationInfo(requestInfo, future).         AuthorizationInfo authzInfo = future.actionGet().         PlainActionFuture<AuthorizationResult> resultFuture = new PlainActionFuture<>().         engine.authorizeClusterAction(requestInfo, authzInfo, resultFuture).         AuthorizationResult result = resultFuture.actionGet().         assertThat(result.isGranted(), is(true)).         assertThat(result.isAuditable(), is(true)).     }     // unauthorized     {         RequestInfo unauthReqInfo = new RequestInfo(new Authentication(new User("joe", "not_superuser"), new RealmRef("test", "test", "node"), null), requestInfo.getRequest(), requestInfo.getAction()).         PlainActionFuture<AuthorizationInfo> future = new PlainActionFuture<>().         engine.resolveAuthorizationInfo(unauthReqInfo, future).         AuthorizationInfo authzInfo = future.actionGet().         PlainActionFuture<AuthorizationResult> resultFuture = new PlainActionFuture<>().         engine.authorizeClusterAction(unauthReqInfo, authzInfo, resultFuture).         AuthorizationResult result = resultFuture.actionGet().         assertThat(result.isGranted(), is(false)).         assertThat(result.isAuditable(), is(true)).     } }
false;public;0;49;;public void testAuthorizeIndexAction() {     CustomAuthorizationEngine engine = new CustomAuthorizationEngine().     Map<String, AliasOrIndex> aliasOrIndexMap = new HashMap<>().     aliasOrIndexMap.put("index", new Index(IndexMetaData.builder("index").settings(Settings.builder().put("index.version.created", Version.CURRENT)).numberOfShards(1).numberOfReplicas(0).build())).     // authorized     {         RequestInfo requestInfo = new RequestInfo(new Authentication(new User("joe", "custom_superuser"), new RealmRef("test", "test", "node"), null), new SearchRequest(), "indices:data/read/search").         PlainActionFuture<AuthorizationInfo> future = new PlainActionFuture<>().         engine.resolveAuthorizationInfo(requestInfo, future).         AuthorizationInfo authzInfo = future.actionGet().         PlainActionFuture<IndexAuthorizationResult> resultFuture = new PlainActionFuture<>().         engine.authorizeIndexAction(requestInfo, authzInfo, listener -> listener.onResponse(new ResolvedIndices(Collections.singletonList("index"), Collections.emptyList())), aliasOrIndexMap, resultFuture).         IndexAuthorizationResult result = resultFuture.actionGet().         assertThat(result.isGranted(), is(true)).         assertThat(result.isAuditable(), is(true)).         IndicesAccessControl indicesAccessControl = result.getIndicesAccessControl().         assertNotNull(indicesAccessControl.getIndexPermissions("index")).         assertThat(indicesAccessControl.getIndexPermissions("index").isGranted(), is(true)).     }     // unauthorized     {         RequestInfo requestInfo = new RequestInfo(new Authentication(new User("joe", "not_superuser"), new RealmRef("test", "test", "node"), null), new SearchRequest(), "indices:data/read/search").         PlainActionFuture<AuthorizationInfo> future = new PlainActionFuture<>().         engine.resolveAuthorizationInfo(requestInfo, future).         AuthorizationInfo authzInfo = future.actionGet().         PlainActionFuture<IndexAuthorizationResult> resultFuture = new PlainActionFuture<>().         engine.authorizeIndexAction(requestInfo, authzInfo, listener -> listener.onResponse(new ResolvedIndices(Collections.singletonList("index"), Collections.emptyList())), aliasOrIndexMap, resultFuture).         IndexAuthorizationResult result = resultFuture.actionGet().         assertThat(result.isGranted(), is(false)).         assertThat(result.isAuditable(), is(true)).         IndicesAccessControl indicesAccessControl = result.getIndicesAccessControl().         assertNull(indicesAccessControl.getIndexPermissions("index")).     } }
false;private;0;7;;private RequestInfo getRequestInfo() {     final String action = "cluster:monitor/foo".     final TransportRequest request = new TransportRequest() {     }.     final Authentication authentication = new Authentication(new User("joe", "custom_superuser"), new RealmRef("test", "test", "node"), null).     return new RequestInfo(authentication, request, action). }
