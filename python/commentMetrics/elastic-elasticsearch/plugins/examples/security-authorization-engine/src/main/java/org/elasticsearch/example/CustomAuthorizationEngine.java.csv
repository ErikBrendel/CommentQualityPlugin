commented;modifiers;parameterAmount;loc;comment;code
false;public;2;11;;@Override public void resolveAuthorizationInfo(RequestInfo requestInfo, ActionListener<AuthorizationInfo> listener) {     final Authentication authentication = requestInfo.getAuthentication().     if (authentication.getUser().isRunAs()) {         final CustomAuthorizationInfo authenticatedUserAuthzInfo = new CustomAuthorizationInfo(authentication.getUser().authenticatedUser().roles(), null).         listener.onResponse(new CustomAuthorizationInfo(authentication.getUser().roles(), authenticatedUserAuthzInfo)).     } else {         listener.onResponse(new CustomAuthorizationInfo(authentication.getUser().roles(), null)).     } }
false;public;3;8;;@Override public void authorizeRunAs(RequestInfo requestInfo, AuthorizationInfo authorizationInfo, ActionListener<AuthorizationResult> listener) {     if (isSuperuser(requestInfo.getAuthentication().getUser().authenticatedUser())) {         listener.onResponse(AuthorizationResult.granted()).     } else {         listener.onResponse(AuthorizationResult.deny()).     } }
false;public;3;9;;@Override public void authorizeClusterAction(RequestInfo requestInfo, AuthorizationInfo authorizationInfo, ActionListener<AuthorizationResult> listener) {     if (isSuperuser(requestInfo.getAuthentication().getUser())) {         listener.onResponse(AuthorizationResult.granted()).     } else {         listener.onResponse(AuthorizationResult.deny()).     } }
false;public;5;19;;@Override public void authorizeIndexAction(RequestInfo requestInfo, AuthorizationInfo authorizationInfo, AsyncSupplier<ResolvedIndices> indicesAsyncSupplier, Map<String, AliasOrIndex> aliasOrIndexLookup, ActionListener<IndexAuthorizationResult> listener) {     if (isSuperuser(requestInfo.getAuthentication().getUser())) {         indicesAsyncSupplier.getAsync(ActionListener.wrap(resolvedIndices -> {             Map<String, IndexAccessControl> indexAccessControlMap = new HashMap<>().             for (String name : resolvedIndices.getLocal()) {                 indexAccessControlMap.put(name, new IndexAccessControl(true, FieldPermissions.DEFAULT, null)).             }             IndicesAccessControl indicesAccessControl = new IndicesAccessControl(true, Collections.unmodifiableMap(indexAccessControlMap)).             listener.onResponse(new IndexAuthorizationResult(true, indicesAccessControl)).         }, listener::onFailure)).     } else {         listener.onResponse(new IndexAuthorizationResult(true, IndicesAccessControl.DENIED)).     } }
false;public;4;9;;@Override public void loadAuthorizedIndices(RequestInfo requestInfo, AuthorizationInfo authorizationInfo, Map<String, AliasOrIndex> aliasOrIndexLookup, ActionListener<List<String>> listener) {     if (isSuperuser(requestInfo.getAuthentication().getUser())) {         listener.onResponse(new ArrayList<>(aliasOrIndexLookup.keySet())).     } else {         listener.onResponse(Collections.emptyList()).     } }
false;public;4;10;;@Override public void validateIndexPermissionsAreSubset(RequestInfo requestInfo, AuthorizationInfo authorizationInfo, Map<String, List<String>> indexNameToNewNames, ActionListener<AuthorizationResult> listener) {     if (isSuperuser(requestInfo.getAuthentication().getUser())) {         listener.onResponse(AuthorizationResult.granted()).     } else {         listener.onResponse(AuthorizationResult.deny()).     } }
false;public;5;11;;@Override public void checkPrivileges(Authentication authentication, AuthorizationInfo authorizationInfo, HasPrivilegesRequest hasPrivilegesRequest, Collection<ApplicationPrivilegeDescriptor> applicationPrivilegeDescriptors, ActionListener<HasPrivilegesResponse> listener) {     if (isSuperuser(authentication.getUser())) {         listener.onResponse(getHasPrivilegesResponse(authentication, hasPrivilegesRequest, true)).     } else {         listener.onResponse(getHasPrivilegesResponse(authentication, hasPrivilegesRequest, false)).     } }
false;public;4;9;;@Override public void getUserPrivileges(Authentication authentication, AuthorizationInfo authorizationInfo, GetUserPrivilegesRequest request, ActionListener<GetUserPrivilegesResponse> listener) {     if (isSuperuser(authentication.getUser())) {         listener.onResponse(getUserPrivilegesResponse(true)).     } else {         listener.onResponse(getUserPrivilegesResponse(false)).     } }
false;private;3;46;;private HasPrivilegesResponse getHasPrivilegesResponse(Authentication authentication, HasPrivilegesRequest hasPrivilegesRequest, boolean authorized) {     Map<String, Boolean> clusterPrivMap = new HashMap<>().     for (String clusterPriv : hasPrivilegesRequest.clusterPrivileges()) {         clusterPrivMap.put(clusterPriv, authorized).     }     final Map<String, ResourcePrivileges> indices = new LinkedHashMap<>().     for (IndicesPrivileges check : hasPrivilegesRequest.indexPrivileges()) {         for (String index : check.getIndices()) {             final Map<String, Boolean> privileges = new HashMap<>().             final ResourcePrivileges existing = indices.get(index).             if (existing != null) {                 privileges.putAll(existing.getPrivileges()).             }             for (String privilege : check.getPrivileges()) {                 privileges.put(privilege, authorized).             }             indices.put(index, ResourcePrivileges.builder(index).addPrivileges(privileges).build()).         }     }     final Map<String, Collection<ResourcePrivileges>> privilegesByApplication = new HashMap<>().     Set<String> applicationNames = Arrays.stream(hasPrivilegesRequest.applicationPrivileges()).map(RoleDescriptor.ApplicationResourcePrivileges::getApplication).collect(Collectors.toSet()).     for (String applicationName : applicationNames) {         final Map<String, ResourcePrivileges> appPrivilegesByResource = new LinkedHashMap<>().         for (RoleDescriptor.ApplicationResourcePrivileges p : hasPrivilegesRequest.applicationPrivileges()) {             if (applicationName.equals(p.getApplication())) {                 for (String resource : p.getResources()) {                     final Map<String, Boolean> privileges = new HashMap<>().                     final ResourcePrivileges existing = appPrivilegesByResource.get(resource).                     if (existing != null) {                         privileges.putAll(existing.getPrivileges()).                     }                     for (String privilege : p.getPrivileges()) {                         privileges.put(privilege, authorized).                     }                     appPrivilegesByResource.put(resource, ResourcePrivileges.builder(resource).addPrivileges(privileges).build()).                 }             }         }         privilegesByApplication.put(applicationName, appPrivilegesByResource.values()).     }     return new HasPrivilegesResponse(authentication.getUser().principal(), authorized, clusterPrivMap, indices.values(), privilegesByApplication). }
false;private;1;13;;private GetUserPrivilegesResponse getUserPrivilegesResponse(boolean isSuperuser) {     final Set<String> cluster = isSuperuser ? Collections.singleton("ALL") : Collections.emptySet().     final Set<ConditionalClusterPrivilege> conditionalCluster = Collections.emptySet().     final Set<GetUserPrivilegesResponse.Indices> indices = isSuperuser ? Collections.singleton(new Indices(Collections.singleton("*"), Collections.singleton("*"), Collections.emptySet(), Collections.emptySet(), true)) : Collections.emptySet().     final Set<RoleDescriptor.ApplicationResourcePrivileges> application = isSuperuser ? Collections.singleton(RoleDescriptor.ApplicationResourcePrivileges.builder().application("*").privileges("*").resources("*").build()) : Collections.emptySet().     final Set<String> runAs = isSuperuser ? Collections.singleton("*") : Collections.emptySet().     return new GetUserPrivilegesResponse(cluster, conditionalCluster, indices, application, runAs). }
false;public;0;4;;@Override public Map<String, Object> asMap() {     return Collections.singletonMap("roles", roles). }
false;public;0;4;;@Override public CustomAuthorizationInfo getAuthenticatedUserAuthorizationInfo() {     return authenticatedAuthzInfo. }
false;private;1;3;;private boolean isSuperuser(User user) {     return Arrays.asList(user.roles()).contains("custom_superuser"). }
