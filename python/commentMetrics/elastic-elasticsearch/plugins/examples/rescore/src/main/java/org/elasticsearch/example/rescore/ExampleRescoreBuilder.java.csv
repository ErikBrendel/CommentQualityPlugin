commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;5;;@Override protected void doWriteTo(StreamOutput out) throws IOException {     out.writeFloat(factor).     out.writeOptionalString(factorField). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;public;1;4;;@Override public RescorerBuilder<ExampleRescoreBuilder> rewrite(QueryRewriteContext ctx) throws IOException {     return this. }
false;protected;2;7;;@Override protected void doXContent(XContentBuilder builder, Params params) throws IOException {     builder.field(FACTOR.getPreferredName(), factor).     if (factorField != null) {         builder.field(FACTOR_FIELD.getPreferredName(), factorField).     } }
false;public,static;1;3;;public static ExampleRescoreBuilder fromXContent(XContentParser parser) {     return PARSER.apply(parser, null). }
false;public;2;6;;@Override public RescoreContext innerBuildContext(int windowSize, QueryShardContext context) throws IOException {     IndexFieldData<?> factorField = this.factorField == null ? null : context.getForField(context.fieldMapper(this.factorField)).     return new ExampleRescoreContext(windowSize, factor, factorField). }
false;public;1;9;;@Override public boolean equals(Object obj) {     if (false == super.equals(obj)) {         return false.     }     ExampleRescoreBuilder other = (ExampleRescoreBuilder) obj.     return factor == other.factor && Objects.equals(factorField, other.factorField). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(super.hashCode(), factor, factorField). }
false;;0;3;;float factor() {     return factor. }
false;;0;4;;@Nullable String factorField() {     return factorField. }
false;public;3;61;;@Override public TopDocs rescore(TopDocs topDocs, IndexSearcher searcher, RescoreContext rescoreContext) throws IOException {     ExampleRescoreContext context = (ExampleRescoreContext) rescoreContext.     int end = Math.min(topDocs.scoreDocs.length, rescoreContext.getWindowSize()).     for (int i = 0. i < end. i++) {         topDocs.scoreDocs[i].score *= context.factor.     }     if (context.factorField != null) {         /*                  * Since this example looks up a single field value it should                  * access them in docId order because that is the order in                  * which they are stored on disk and we want reads to be                  * forwards and close together if possible.                  *                  * If accessing multiple fields we'd be better off accessing                  * them in (reader, field, docId) order because that is the                  * order they are on disk.                  */         ScoreDoc[] sortedByDocId = new ScoreDoc[topDocs.scoreDocs.length].         System.arraycopy(topDocs.scoreDocs, 0, sortedByDocId, 0, topDocs.scoreDocs.length).         // Safe because doc ids >= 0         Arrays.sort(sortedByDocId, (a, b) -> a.doc - b.doc).         Iterator<LeafReaderContext> leaves = searcher.getIndexReader().leaves().iterator().         LeafReaderContext leaf = null.         SortedNumericDoubleValues data = null.         int endDoc = 0.         for (int i = 0. i < end. i++) {             if (topDocs.scoreDocs[i].doc >= endDoc) {                 do {                     leaf = leaves.next().                     endDoc = leaf.docBase + leaf.reader().maxDoc().                 } while (topDocs.scoreDocs[i].doc >= endDoc).                 AtomicFieldData fd = context.factorField.load(leaf).                 if (false == (fd instanceof AtomicNumericFieldData)) {                     throw new IllegalArgumentException("[" + context.factorField.getFieldName() + "] is not a number").                 }                 data = ((AtomicNumericFieldData) fd).getDoubleValues().             }             if (false == data.advanceExact(topDocs.scoreDocs[i].doc)) {                 throw new IllegalArgumentException("document [" + topDocs.scoreDocs[i].doc + "] does not have the field [" + context.factorField.getFieldName() + "]").             }             if (data.docValueCount() > 1) {                 throw new IllegalArgumentException("document [" + topDocs.scoreDocs[i].doc + "] has more than one value for [" + context.factorField.getFieldName() + "]").             }             topDocs.scoreDocs[i].score *= data.nextValue().         }     }     // Sort by score descending, then docID ascending, just like lucene's QueryRescorer     Arrays.sort(topDocs.scoreDocs, (a, b) -> {         if (a.score > b.score) {             return -1.         }         if (a.score < b.score) {             return 1.         }         // Safe because doc ids >= 0         return a.doc - b.doc.     }).     return topDocs. }
false;public;4;7;;@Override public Explanation explain(int topLevelDocId, IndexSearcher searcher, RescoreContext rescoreContext, Explanation sourceExplanation) throws IOException {     ExampleRescoreContext context = (ExampleRescoreContext) rescoreContext.     // Note that this is inaccurate because it ignores factor field     return Explanation.match(context.factor, "test", singletonList(sourceExplanation)). }
