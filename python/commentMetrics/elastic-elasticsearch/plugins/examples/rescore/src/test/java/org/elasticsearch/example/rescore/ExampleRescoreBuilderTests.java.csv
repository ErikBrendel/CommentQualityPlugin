commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;@Override protected ExampleRescoreBuilder createTestInstance() {     String factorField = randomBoolean() ? null : randomAlphaOfLength(5).     return new ExampleRescoreBuilder(randomFloat(), factorField).windowSize(between(0, Integer.MAX_VALUE)). }
false;protected;0;4;;@Override protected Reader<ExampleRescoreBuilder> instanceReader() {     return ExampleRescoreBuilder::new. }
false;protected;1;14;;@Override protected ExampleRescoreBuilder mutateInstance(ExampleRescoreBuilder instance) throws IOException {     @SuppressWarnings("unchecked")     Supplier<ExampleRescoreBuilder> supplier = randomFrom(() -> new ExampleRescoreBuilder(instance.factor(), instance.factorField()).windowSize(randomValueOtherThan(instance.windowSize(), () -> between(0, Integer.MAX_VALUE))), () -> new ExampleRescoreBuilder(randomValueOtherThan(instance.factor(), ESTestCase::randomFloat), instance.factorField()).windowSize(instance.windowSize()), () -> new ExampleRescoreBuilder(instance.factor(), randomValueOtherThan(instance.factorField(), () -> randomAlphaOfLength(5))).windowSize(instance.windowSize())).     return supplier.get(). }
false;public;0;4;;public void testRewrite() throws IOException {     ExampleRescoreBuilder builder = createTestInstance().     assertSame(builder, builder.rewrite(null)). }
false;public;0;16;;public void testRescore() throws IOException {     // Always use a factor > 1 so rescored fields are sorted in front of the unrescored fields.     float factor = (float) randomDoubleBetween(1.0d, Float.MAX_VALUE, false).     // Skipping factorField because it is much harder to mock. We'll catch it in an integration test.     String fieldFactor = null.     ExampleRescoreBuilder builder = new ExampleRescoreBuilder(factor, fieldFactor).windowSize(2).     RescoreContext context = builder.buildContext(null).     TopDocs docs = new TopDocs(new TotalHits(10, TotalHits.Relation.EQUAL_TO), new ScoreDoc[3]).     docs.scoreDocs[0] = new ScoreDoc(0, 1.0f).     docs.scoreDocs[1] = new ScoreDoc(1, 1.0f).     docs.scoreDocs[2] = new ScoreDoc(2, 1.0f).     context.rescorer().rescore(docs, null, context).     assertEquals(factor, docs.scoreDocs[0].score, 0.0f).     assertEquals(factor, docs.scoreDocs[1].score, 0.0f).     assertEquals(1.0f, docs.scoreDocs[2].score, 0.0f). }
