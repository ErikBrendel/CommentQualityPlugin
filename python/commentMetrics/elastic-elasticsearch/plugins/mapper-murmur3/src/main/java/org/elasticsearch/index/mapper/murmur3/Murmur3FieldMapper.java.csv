commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public Murmur3FieldMapper build(BuilderContext context) {     setupFieldType(context).     return new Murmur3FieldMapper(name, fieldType, defaultFieldType, context.indexSettings(), multiFieldsBuilder.build(this, context), copyTo). }
false;protected;1;8;;@Override protected void setupFieldType(BuilderContext context) {     super.setupFieldType(context).     fieldType.setIndexOptions(IndexOptions.NONE).     defaultFieldType.setIndexOptions(IndexOptions.NONE).     fieldType.setHasDocValues(true).     defaultFieldType.setHasDocValues(true). }
false;public;3;17;;@Override public Mapper.Builder<?, ?> parse(String name, Map<String, Object> node, ParserContext parserContext) throws MapperParsingException {     Builder builder = new Builder(name).     // tweaking these settings is no longer allowed, the entire purpose of murmur3 fields is to store a hash     if (node.get("doc_values") != null) {         throw new MapperParsingException("Setting [doc_values] cannot be modified for field [" + name + "]").     }     if (node.get("index") != null) {         throw new MapperParsingException("Setting [index] cannot be modified for field [" + name + "]").     }     TypeParsers.parseField(builder, name, node, parserContext).     return builder. }
false;public;0;4;;@Override public String typeName() {     return CONTENT_TYPE. }
false;public;0;4;;@Override public Murmur3FieldType clone() {     return new Murmur3FieldType(this). }
false;public;1;5;;@Override public IndexFieldData.Builder fielddataBuilder(String fullyQualifiedIndexName) {     failIfNoDocValues().     return new DocValuesIndexFieldData.Builder().numericType(NumericType.LONG). }
false;public;1;4;;@Override public Query existsQuery(QueryShardContext context) {     return new DocValuesFieldExistsQuery(name()). }
false;public;2;4;;@Override public Query termQuery(Object value, QueryShardContext context) {     throw new QueryShardException(context, "Murmur3 fields are not searchable: [" + name() + "]"). }
false;protected;0;4;;@Override protected String contentType() {     return CONTENT_TYPE. }
false;protected;2;18;;@Override protected void parseCreateField(ParseContext context, List<IndexableField> fields) throws IOException {     final Object value.     if (context.externalValueSet()) {         value = context.externalValue().     } else {         value = context.parser().textOrNull().     }     if (value != null) {         final BytesRef bytes = new BytesRef(value.toString()).         final long hash = MurmurHash3.hash128(bytes.bytes, bytes.offset, bytes.length, 0, new MurmurHash3.Hash128()).h1.         fields.add(new SortedNumericDocValuesField(fieldType().name(), hash)).         if (fieldType().stored()) {             fields.add(new StoredField(name(), hash)).         }     } }
