commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Before public void setup() {     indexService = createIndex("test").     mapperRegistry = new MapperRegistry(Collections.singletonMap(Murmur3FieldMapper.CONTENT_TYPE, new Murmur3FieldMapper.TypeParser()), Collections.emptyMap(), MapperPlugin.NOOP_FIELD_FILTER).     Supplier<QueryShardContext> queryShardContext = () -> {         return indexService.newQueryShardContext(0, null, () -> {             throw new UnsupportedOperationException().         }, null).     }.     parser = new DocumentMapperParser(indexService.getIndexSettings(), indexService.mapperService(), indexService.getIndexAnalyzers(), indexService.xContentRegistry(), indexService.similarityService(), mapperRegistry, queryShardContext). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> getPlugins() {     return pluginList(InternalSettingsPlugin.class). }
false;public;0;18;;public void testDefaults() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "murmur3").endObject().endObject().endObject().endObject()).     DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping)).     ParsedDocument parsedDoc = mapper.parse(new SourceToParse("test", "type", "1", BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", "value").endObject()), XContentType.JSON)).     IndexableField[] fields = parsedDoc.rootDoc().getFields("field").     assertNotNull(fields).     assertEquals(Arrays.toString(fields), 1, fields.length).     IndexableField field = fields[0].     assertEquals(IndexOptions.NONE, field.fieldType().indexOptions()).     assertEquals(DocValuesType.SORTED_NUMERIC, field.fieldType().docValuesType()). }
false;public;0;26;;public void testDocValuesSettingNotAllowed() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "murmur3").field("doc_values", false).endObject().endObject().endObject().endObject()).     try {         parser.parse("type", new CompressedXContent(mapping)).         fail("expected a mapper parsing exception").     } catch (MapperParsingException e) {         assertTrue(e.getMessage().contains("Setting [doc_values] cannot be modified")).     }     // even setting to the default is not allowed, the setting is invalid     mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "murmur3").field("doc_values", true).endObject().endObject().endObject().endObject()).     try {         parser.parse("type", new CompressedXContent(mapping)).         fail("expected a mapper parsing exception").     } catch (MapperParsingException e) {         assertTrue(e.getMessage().contains("Setting [doc_values] cannot be modified")).     } }
false;public;0;26;;public void testIndexSettingNotAllowed() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "murmur3").field("index", "not_analyzed").endObject().endObject().endObject().endObject()).     try {         parser.parse("type", new CompressedXContent(mapping)).         fail("expected a mapper parsing exception").     } catch (MapperParsingException e) {         assertTrue(e.getMessage().contains("Setting [index] cannot be modified")).     }     // even setting to the default is not allowed, the setting is invalid     mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "murmur3").field("index", "no").endObject().endObject().endObject().endObject()).     try {         parser.parse("type", new CompressedXContent(mapping)).         fail("expected a mapper parsing exception").     } catch (MapperParsingException e) {         assertTrue(e.getMessage().contains("Setting [index] cannot be modified")).     } }
false;public;0;11;;public void testEmptyName() throws Exception {     String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("").field("type", "murmur3").endObject().endObject().endObject().endObject()).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> parser.parse("type", new CompressedXContent(mapping))).     assertThat(e.getMessage(), containsString("name cannot be empty string")). }
