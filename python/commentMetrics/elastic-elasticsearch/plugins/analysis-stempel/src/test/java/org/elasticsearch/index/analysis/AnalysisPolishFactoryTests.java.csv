commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected Map<String, Class<?>> getTokenFilters() {     Map<String, Class<?>> filters = new HashMap<>(super.getTokenFilters()).     filters.put("stempelpolishstem", PolishStemTokenFilterFactory.class).     return filters. }
false;public;0;15;;public void testThreadSafety() throws IOException {     // TODO: is this the right boilerplate?  I forked this out of TransportAnalyzeAction.java:     Settings settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_INDEX_UUID, UUIDs.randomBase64UUID()).put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).build().     Environment environment = TestEnvironment.newEnvironment(settings).     IndexMetaData metaData = IndexMetaData.builder(IndexMetaData.INDEX_UUID_NA_VALUE).settings(settings).build().     IndexSettings indexSettings = new IndexSettings(metaData, Settings.EMPTY).     testThreadSafety(new PolishStemTokenFilterFactory(indexSettings, environment, "stempelpolishstem", settings)). }
false;protected;1;5;;@Override protected TokenStreamComponents createComponents(String fieldName) {     Tokenizer tokenizer = new MockTokenizer().     return new TokenStreamComponents(tokenizer, factory.create(tokenizer)). }
true;private;1;10;// TODO: move to AnalysisFactoryTestCase so we can more easily test thread safety for all factories ;// TODO: move to AnalysisFactoryTestCase so we can more easily test thread safety for all factories private void testThreadSafety(TokenFilterFactory factory) throws IOException {     final Analyzer analyzer = new Analyzer() {          @Override         protected TokenStreamComponents createComponents(String fieldName) {             Tokenizer tokenizer = new MockTokenizer().             return new TokenStreamComponents(tokenizer, factory.create(tokenizer)).         }     }.     BaseTokenStreamTestCase.checkRandomData(random(), analyzer, 100). }
