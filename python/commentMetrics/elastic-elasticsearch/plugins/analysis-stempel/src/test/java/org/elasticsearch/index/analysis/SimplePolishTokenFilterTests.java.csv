commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public void testBasicUsage() throws Exception {     testToken("kwiaty", "kwć").     testToken("canona", "ć").     testToken("wirtualna", "wirtualny").     testToken("polska", "polski").     testAnalyzer("wirtualna polska", "wirtualny", "polski"). }
false;private;2;19;;private void testToken(String source, String expected) throws IOException {     Index index = new Index("test", "_na_").     Settings settings = Settings.builder().put("index.analysis.filter.myStemmer.type", "polish_stem").build().     TestAnalysis analysis = createTestAnalysis(index, settings, new AnalysisStempelPlugin()).     TokenFilterFactory filterFactory = analysis.tokenFilter.get("myStemmer").     Tokenizer tokenizer = new KeywordTokenizer().     tokenizer.setReader(new StringReader(source)).     TokenStream ts = filterFactory.create(tokenizer).     CharTermAttribute term1 = ts.addAttribute(CharTermAttribute.class).     ts.reset().     assertThat(ts.incrementToken(), equalTo(true)).     assertThat(term1.toString(), equalTo(expected)). }
false;private;2;15;;private void testAnalyzer(String source, String... expected_terms) throws IOException {     TestAnalysis analysis = createTestAnalysis(new Index("test", "_na_"), Settings.EMPTY, new AnalysisStempelPlugin()).     Analyzer analyzer = analysis.indexAnalyzers.get("polish").analyzer().     TokenStream ts = analyzer.tokenStream("test", source).     CharTermAttribute term1 = ts.addAttribute(CharTermAttribute.class).     ts.reset().     for (String expected : expected_terms) {         assertThat(ts.incrementToken(), equalTo(true)).         assertThat(term1.toString(), equalTo(expected)).     } }
