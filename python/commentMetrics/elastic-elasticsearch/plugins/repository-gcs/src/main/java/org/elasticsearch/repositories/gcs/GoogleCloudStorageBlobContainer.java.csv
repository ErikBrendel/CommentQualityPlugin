commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public boolean blobExists(String blobName) {     try {         return blobStore.blobExists(buildKey(blobName)).     } catch (Exception e) {         throw new BlobStoreException("Failed to check if blob [" + blobName + "] exists", e).     } }
false;public;0;4;;@Override public Map<String, BlobMetaData> listBlobs() throws IOException {     return blobStore.listBlobs(path). }
false;public;1;4;;@Override public Map<String, BlobMetaData> listBlobsByPrefix(String prefix) throws IOException {     return blobStore.listBlobsByPrefix(path, prefix). }
false;public;1;4;;@Override public InputStream readBlob(String blobName) throws IOException {     return blobStore.readBlob(buildKey(blobName)). }
false;public;4;4;;@Override public void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException {     blobStore.writeBlob(buildKey(blobName), inputStream, blobSize, failIfAlreadyExists). }
false;public;4;4;;@Override public void writeBlobAtomic(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException {     writeBlob(blobName, inputStream, blobSize, failIfAlreadyExists). }
false;public;1;4;;@Override public void deleteBlob(String blobName) throws IOException {     blobStore.deleteBlob(buildKey(blobName)). }
false;protected;1;4;;protected String buildKey(String blobName) {     assert blobName != null.     return path + blobName. }
