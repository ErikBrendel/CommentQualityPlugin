commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;3;// overridable for tests ;// overridable for tests protected GoogleCloudStorageService createStorageService() {     return new GoogleCloudStorageService(). }
false;public;2;5;;@Override public Map<String, Repository.Factory> getRepositories(Environment env, NamedXContentRegistry namedXContentRegistry) {     return Collections.singletonMap(GoogleCloudStorageRepository.TYPE, (metadata) -> new GoogleCloudStorageRepository(metadata, env, namedXContentRegistry, this.storageService)). }
false;public;0;11;;@Override public List<Setting<?>> getSettings() {     return Arrays.asList(GoogleCloudStorageClientSettings.CREDENTIALS_FILE_SETTING, GoogleCloudStorageClientSettings.ENDPOINT_SETTING, GoogleCloudStorageClientSettings.PROJECT_ID_SETTING, GoogleCloudStorageClientSettings.CONNECT_TIMEOUT_SETTING, GoogleCloudStorageClientSettings.READ_TIMEOUT_SETTING, GoogleCloudStorageClientSettings.APPLICATION_NAME_SETTING, GoogleCloudStorageClientSettings.TOKEN_URI_SETTING). }
false;public;1;10;;@Override public void reload(Settings settings) {     // Secure settings should be readable inside this method. Duplicate client     // settings in a format (`GoogleCloudStorageClientSettings`) that does not     // require for the `SecureSettings` to be open. Pass that around (the     // `GoogleCloudStorageClientSettings` instance) instead of the `Settings`     // instance.     final Map<String, GoogleCloudStorageClientSettings> clientsSettings = GoogleCloudStorageClientSettings.load(settings).     this.storageService.refreshAndClearCache(clientsSettings). }
