commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public ServiceAccountCredentials getCredential() {     return credential. }
false;public;0;3;;public String getHost() {     return endpoint. }
false;public;0;3;;public String getProjectId() {     return Strings.hasLength(projectId) ? projectId : (credential != null ? credential.getProjectId() : null). }
false;public;0;3;;public TimeValue getConnectTimeout() {     return connectTimeout. }
false;public;0;3;;public TimeValue getReadTimeout() {     return readTimeout. }
false;public;0;3;;public String getApplicationName() {     return applicationName. }
false;public;0;3;;public URI getTokenUri() {     return tokenUri. }
false;public,static;1;12;;public static Map<String, GoogleCloudStorageClientSettings> load(final Settings settings) {     final Map<String, GoogleCloudStorageClientSettings> clients = new HashMap<>().     for (final String clientName : settings.getGroups(PREFIX).keySet()) {         clients.put(clientName, getClientSettings(settings, clientName)).     }     if (clients.containsKey("default") == false) {         // this won't find any settings under the default client,         // but it will pull all the fallback static settings         clients.put("default", getClientSettings(settings, "default")).     }     return Collections.unmodifiableMap(clients). }
false;static;2;11;;static GoogleCloudStorageClientSettings getClientSettings(final Settings settings, final String clientName) {     return new GoogleCloudStorageClientSettings(loadCredential(settings, clientName), getConfigValue(settings, clientName, ENDPOINT_SETTING), getConfigValue(settings, clientName, PROJECT_ID_SETTING), getConfigValue(settings, clientName, CONNECT_TIMEOUT_SETTING), getConfigValue(settings, clientName, READ_TIMEOUT_SETTING), getConfigValue(settings, clientName, APPLICATION_NAME_SETTING), getConfigValue(settings, clientName, TOKEN_URI_SETTING)). }
true;static;2;21;/**  * Loads the service account file corresponding to a given client name. If no  * file is defined for the client, a {@code null} credential is returned.  *  * @param settings  *            the {@link Settings}  * @param clientName  *            the client name  *  * @return the {@link ServiceAccountCredentials} to use for the given client,  *         {@code null} if no service account is defined.  */ ;/**  * Loads the service account file corresponding to a given client name. If no  * file is defined for the client, a {@code null} credential is returned.  *  * @param settings  *            the {@link Settings}  * @param clientName  *            the client name  *  * @return the {@link ServiceAccountCredentials} to use for the given client,  *         {@code null} if no service account is defined.  */ static ServiceAccountCredentials loadCredential(final Settings settings, final String clientName) {     try {         if (CREDENTIALS_FILE_SETTING.getConcreteSettingForNamespace(clientName).exists(settings) == false) {             // can be loaded later when creating the Storage client             return null.         }         try (InputStream credStream = CREDENTIALS_FILE_SETTING.getConcreteSettingForNamespace(clientName).get(settings)) {             final Collection<String> scopes = Collections.singleton(StorageScopes.DEVSTORAGE_FULL_CONTROL).             return SocketAccess.doPrivilegedIOException(() -> {                 final ServiceAccountCredentials credentials = ServiceAccountCredentials.fromStream(credStream).                 if (credentials.createScopedRequired()) {                     return (ServiceAccountCredentials) credentials.createScoped(scopes).                 }                 return credentials.             }).         }     } catch (final IOException e) {         throw new UncheckedIOException(e).     } }
false;private,static;3;4;;private static <T> T getConfigValue(final Settings settings, final String clientName, final Setting.AffixSetting<T> clientSetting) {     final Setting<T> concreteSetting = clientSetting.getConcreteSettingForNamespace(clientName).     return concreteSetting.get(settings). }
