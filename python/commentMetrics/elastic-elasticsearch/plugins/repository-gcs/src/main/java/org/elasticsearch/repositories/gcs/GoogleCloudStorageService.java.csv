# id;timestamp;commentText;codeText;commentWords;codeWords
GoogleCloudStorageService -> static Integer toTimeout(final TimeValue timeout);1524684173;Converts timeout values from the settings to a timeout value for the Google Cloud SDK *;static Integer toTimeout(final TimeValue timeout) {_        _        if (timeout == null || TimeValue.ZERO.equals(timeout)) {_            return null__        }_        _        if (TimeValue.MINUS_ONE.equals(timeout)) {_            _            return 0__        }_        return Math.toIntExact(timeout.getMillis())__    };converts,timeout,values,from,the,settings,to,a,timeout,value,for,the,google,cloud,sdk;static,integer,to,timeout,final,time,value,timeout,if,timeout,null,time,value,zero,equals,timeout,return,null,if,time,value,equals,timeout,return,0,return,math,to,int,exact,timeout,get,millis
GoogleCloudStorageService -> static Integer toTimeout(final TimeValue timeout);1526449283;Converts timeout values from the settings to a timeout value for the Google_Cloud SDK;static Integer toTimeout(final TimeValue timeout) {_        _        if (timeout == null || TimeValue.ZERO.equals(timeout)) {_            _            return -1__        }_        _        if (TimeValue.MINUS_ONE.equals(timeout)) {_            _            return 0__        }_        return Math.toIntExact(timeout.getMillis())__    };converts,timeout,values,from,the,settings,to,a,timeout,value,for,the,google,cloud,sdk;static,integer,to,timeout,final,time,value,timeout,if,timeout,null,time,value,zero,equals,timeout,return,1,if,time,value,equals,timeout,return,0,return,math,to,int,exact,timeout,get,millis
GoogleCloudStorageService -> static Integer toTimeout(final TimeValue timeout);1529341607;Converts timeout values from the settings to a timeout value for the Google_Cloud SDK;static Integer toTimeout(final TimeValue timeout) {_        _        if (timeout == null || TimeValue.ZERO.equals(timeout)) {_            _            return -1__        }_        _        if (TimeValue.MINUS_ONE.equals(timeout)) {_            _            return 0__        }_        return Math.toIntExact(timeout.getMillis())__    };converts,timeout,values,from,the,settings,to,a,timeout,value,for,the,google,cloud,sdk;static,integer,to,timeout,final,time,value,timeout,if,timeout,null,time,value,zero,equals,timeout,return,1,if,time,value,equals,timeout,return,0,return,math,to,int,exact,timeout,get,millis
GoogleCloudStorageService -> static Integer toTimeout(final TimeValue timeout);1541092382;Converts timeout values from the settings to a timeout value for the Google_Cloud SDK;static Integer toTimeout(final TimeValue timeout) {_        _        if (timeout == null || TimeValue.ZERO.equals(timeout)) {_            _            return -1__        }_        _        if (TimeValue.MINUS_ONE.equals(timeout)) {_            _            return 0__        }_        return Math.toIntExact(timeout.getMillis())__    };converts,timeout,values,from,the,settings,to,a,timeout,value,for,the,google,cloud,sdk;static,integer,to,timeout,final,time,value,timeout,if,timeout,null,time,value,zero,equals,timeout,return,1,if,time,value,equals,timeout,return,0,return,math,to,int,exact,timeout,get,millis
GoogleCloudStorageService -> static Integer toTimeout(final TimeValue timeout);1542397818;Converts timeout values from the settings to a timeout value for the Google_Cloud SDK;static Integer toTimeout(final TimeValue timeout) {_        _        if (timeout == null || TimeValue.ZERO.equals(timeout)) {_            _            return -1__        }_        _        if (TimeValue.MINUS_ONE.equals(timeout)) {_            _            return 0__        }_        return Math.toIntExact(timeout.getMillis())__    };converts,timeout,values,from,the,settings,to,a,timeout,value,for,the,google,cloud,sdk;static,integer,to,timeout,final,time,value,timeout,if,timeout,null,time,value,zero,equals,timeout,return,1,if,time,value,equals,timeout,return,0,return,math,to,int,exact,timeout,get,millis
GoogleCloudStorageService -> private static HttpTransport createHttpTransport(final String endpoint) throws Exception;1526449283;Pins the TLS trust certificates and, more importantly, overrides connection_URLs in the case of a custom endpoint setting because some connections don't_fully honor this setting (bugs in the SDK). The default connection factory_opens a new connection for each request. This is required for the storage_instance to be thread-safe.;private static HttpTransport createHttpTransport(final String endpoint) throws Exception {_        final NetHttpTransport.Builder builder = new NetHttpTransport.Builder()__        _        builder.trustCertificates(GoogleUtils.getCertificateTrustStore())__        if (Strings.hasLength(endpoint)) {_            final URL endpointUrl = URI.create(endpoint).toURL()__            builder.setConnectionFactory(new DefaultConnectionFactory() {_                @Override_                public HttpURLConnection openConnection(final URL originalUrl) throws IOException {_                    _                    if (originalUrl.getHost().equals(endpointUrl.getHost()) && originalUrl.getPort() == endpointUrl.getPort()_                            && originalUrl.getProtocol().equals(endpointUrl.getProtocol())) {_                        return super.openConnection(originalUrl)__                    }_                    _                    _                    _                    URI originalUri__                    try {_                        originalUri = originalUrl.toURI()__                    } catch (final URISyntaxException e) {_                        throw new RuntimeException(e)__                    }_                    String overridePath = "/"__                    if (originalUri.getRawPath() != null) {_                        overridePath = originalUri.getRawPath()__                    }_                    if (originalUri.getRawQuery() != null) {_                        overridePath += "?" + originalUri.getRawQuery()__                    }_                    return super.openConnection(_                            new URL(endpointUrl.getProtocol(), endpointUrl.getHost(), endpointUrl.getPort(), overridePath))__                }_            })__        }_        return builder.build()__    };pins,the,tls,trust,certificates,and,more,importantly,overrides,connection,urls,in,the,case,of,a,custom,endpoint,setting,because,some,connections,don,t,fully,honor,this,setting,bugs,in,the,sdk,the,default,connection,factory,opens,a,new,connection,for,each,request,this,is,required,for,the,storage,instance,to,be,thread,safe;private,static,http,transport,create,http,transport,final,string,endpoint,throws,exception,final,net,http,transport,builder,builder,new,net,http,transport,builder,builder,trust,certificates,google,utils,get,certificate,trust,store,if,strings,has,length,endpoint,final,url,endpoint,url,uri,create,endpoint,to,url,builder,set,connection,factory,new,default,connection,factory,override,public,http,urlconnection,open,connection,final,url,original,url,throws,ioexception,if,original,url,get,host,equals,endpoint,url,get,host,original,url,get,port,endpoint,url,get,port,original,url,get,protocol,equals,endpoint,url,get,protocol,return,super,open,connection,original,url,uri,original,uri,try,original,uri,original,url,to,uri,catch,final,urisyntax,exception,e,throw,new,runtime,exception,e,string,override,path,if,original,uri,get,raw,path,null,override,path,original,uri,get,raw,path,if,original,uri,get,raw,query,null,override,path,original,uri,get,raw,query,return,super,open,connection,new,url,endpoint,url,get,protocol,endpoint,url,get,host,endpoint,url,get,port,override,path,return,builder,build
GoogleCloudStorageService -> private static HttpTransport createHttpTransport(final String endpoint) throws Exception;1529341607;Pins the TLS trust certificates and, more importantly, overrides connection_URLs in the case of a custom endpoint setting because some connections don't_fully honor this setting (bugs in the SDK). The default connection factory_opens a new connection for each request. This is required for the storage_instance to be thread-safe.;private static HttpTransport createHttpTransport(final String endpoint) throws Exception {_        final NetHttpTransport.Builder builder = new NetHttpTransport.Builder()__        _        builder.trustCertificates(GoogleUtils.getCertificateTrustStore())__        if (Strings.hasLength(endpoint)) {_            final URL endpointUrl = URI.create(endpoint).toURL()__            _            _            _            builder.setConnectionFactory(new DefaultConnectionFactory() {_                @Override_                public HttpURLConnection openConnection(final URL originalUrl) throws IOException {_                    _                    if (originalUrl.getHost().equals(endpointUrl.getHost()) && originalUrl.getPort() == endpointUrl.getPort()_                            && originalUrl.getProtocol().equals(endpointUrl.getProtocol())) {_                        return super.openConnection(originalUrl)__                    }_                    _                    _                    _                    URI originalUri__                    try {_                        originalUri = originalUrl.toURI()__                    } catch (final URISyntaxException e) {_                        throw new RuntimeException(e)__                    }_                    String overridePath = "/"__                    if (originalUri.getRawPath() != null) {_                        overridePath = originalUri.getRawPath()__                    }_                    if (originalUri.getRawQuery() != null) {_                        overridePath += "?" + originalUri.getRawQuery()__                    }_                    return super.openConnection(_                            new URL(endpointUrl.getProtocol(), endpointUrl.getHost(), endpointUrl.getPort(), overridePath))__                }_            })__        }_        return builder.build()__    };pins,the,tls,trust,certificates,and,more,importantly,overrides,connection,urls,in,the,case,of,a,custom,endpoint,setting,because,some,connections,don,t,fully,honor,this,setting,bugs,in,the,sdk,the,default,connection,factory,opens,a,new,connection,for,each,request,this,is,required,for,the,storage,instance,to,be,thread,safe;private,static,http,transport,create,http,transport,final,string,endpoint,throws,exception,final,net,http,transport,builder,builder,new,net,http,transport,builder,builder,trust,certificates,google,utils,get,certificate,trust,store,if,strings,has,length,endpoint,final,url,endpoint,url,uri,create,endpoint,to,url,builder,set,connection,factory,new,default,connection,factory,override,public,http,urlconnection,open,connection,final,url,original,url,throws,ioexception,if,original,url,get,host,equals,endpoint,url,get,host,original,url,get,port,endpoint,url,get,port,original,url,get,protocol,equals,endpoint,url,get,protocol,return,super,open,connection,original,url,uri,original,uri,try,original,uri,original,url,to,uri,catch,final,urisyntax,exception,e,throw,new,runtime,exception,e,string,override,path,if,original,uri,get,raw,path,null,override,path,original,uri,get,raw,path,if,original,uri,get,raw,query,null,override,path,original,uri,get,raw,query,return,super,open,connection,new,url,endpoint,url,get,protocol,endpoint,url,get,host,endpoint,url,get,port,override,path,return,builder,build
GoogleCloudStorageService -> private static HttpTransport createHttpTransport(final String endpoint) throws Exception;1541092382;Pins the TLS trust certificates and, more importantly, overrides connection_URLs in the case of a custom endpoint setting because some connections don't_fully honor this setting (bugs in the SDK). The default connection factory_opens a new connection for each request. This is required for the storage_instance to be thread-safe.;private static HttpTransport createHttpTransport(final String endpoint) throws Exception {_        final NetHttpTransport.Builder builder = new NetHttpTransport.Builder()__        _        builder.trustCertificates(GoogleUtils.getCertificateTrustStore())__        if (Strings.hasLength(endpoint)) {_            final URL endpointUrl = URI.create(endpoint).toURL()__            _            _            _            builder.setConnectionFactory(new DefaultConnectionFactory() {_                @Override_                public HttpURLConnection openConnection(final URL originalUrl) throws IOException {_                    _                    if (originalUrl.getHost().equals(endpointUrl.getHost()) && originalUrl.getPort() == endpointUrl.getPort()_                            && originalUrl.getProtocol().equals(endpointUrl.getProtocol())) {_                        return super.openConnection(originalUrl)__                    }_                    _                    _                    _                    URI originalUri__                    try {_                        originalUri = originalUrl.toURI()__                    } catch (final URISyntaxException e) {_                        throw new RuntimeException(e)__                    }_                    String overridePath = "/"__                    if (originalUri.getRawPath() != null) {_                        overridePath = originalUri.getRawPath()__                    }_                    if (originalUri.getRawQuery() != null) {_                        overridePath += "?" + originalUri.getRawQuery()__                    }_                    return super.openConnection(_                            new URL(endpointUrl.getProtocol(), endpointUrl.getHost(), endpointUrl.getPort(), overridePath))__                }_            })__        }_        return builder.build()__    };pins,the,tls,trust,certificates,and,more,importantly,overrides,connection,urls,in,the,case,of,a,custom,endpoint,setting,because,some,connections,don,t,fully,honor,this,setting,bugs,in,the,sdk,the,default,connection,factory,opens,a,new,connection,for,each,request,this,is,required,for,the,storage,instance,to,be,thread,safe;private,static,http,transport,create,http,transport,final,string,endpoint,throws,exception,final,net,http,transport,builder,builder,new,net,http,transport,builder,builder,trust,certificates,google,utils,get,certificate,trust,store,if,strings,has,length,endpoint,final,url,endpoint,url,uri,create,endpoint,to,url,builder,set,connection,factory,new,default,connection,factory,override,public,http,urlconnection,open,connection,final,url,original,url,throws,ioexception,if,original,url,get,host,equals,endpoint,url,get,host,original,url,get,port,endpoint,url,get,port,original,url,get,protocol,equals,endpoint,url,get,protocol,return,super,open,connection,original,url,uri,original,uri,try,original,uri,original,url,to,uri,catch,final,urisyntax,exception,e,throw,new,runtime,exception,e,string,override,path,if,original,uri,get,raw,path,null,override,path,original,uri,get,raw,path,if,original,uri,get,raw,query,null,override,path,original,uri,get,raw,query,return,super,open,connection,new,url,endpoint,url,get,protocol,endpoint,url,get,host,endpoint,url,get,port,override,path,return,builder,build
GoogleCloudStorageService -> private static HttpTransport createHttpTransport(final String endpoint) throws Exception;1542397818;Pins the TLS trust certificates and, more importantly, overrides connection_URLs in the case of a custom endpoint setting because some connections don't_fully honor this setting (bugs in the SDK). The default connection factory_opens a new connection for each request. This is required for the storage_instance to be thread-safe.;private static HttpTransport createHttpTransport(final String endpoint) throws Exception {_        final NetHttpTransport.Builder builder = new NetHttpTransport.Builder()__        _        builder.trustCertificates(GoogleUtils.getCertificateTrustStore())__        if (Strings.hasLength(endpoint)) {_            final URL endpointUrl = URI.create(endpoint).toURL()__            _            _            _            builder.setConnectionFactory(new DefaultConnectionFactory() {_                @Override_                public HttpURLConnection openConnection(final URL originalUrl) throws IOException {_                    _                    if (originalUrl.getHost().equals(endpointUrl.getHost()) && originalUrl.getPort() == endpointUrl.getPort()_                            && originalUrl.getProtocol().equals(endpointUrl.getProtocol())) {_                        return super.openConnection(originalUrl)__                    }_                    _                    _                    _                    URI originalUri__                    try {_                        originalUri = originalUrl.toURI()__                    } catch (final URISyntaxException e) {_                        throw new RuntimeException(e)__                    }_                    String overridePath = "/"__                    if (originalUri.getRawPath() != null) {_                        overridePath = originalUri.getRawPath()__                    }_                    if (originalUri.getRawQuery() != null) {_                        overridePath += "?" + originalUri.getRawQuery()__                    }_                    return super.openConnection(_                            new URL(endpointUrl.getProtocol(), endpointUrl.getHost(), endpointUrl.getPort(), overridePath))__                }_            })__        }_        return builder.build()__    };pins,the,tls,trust,certificates,and,more,importantly,overrides,connection,urls,in,the,case,of,a,custom,endpoint,setting,because,some,connections,don,t,fully,honor,this,setting,bugs,in,the,sdk,the,default,connection,factory,opens,a,new,connection,for,each,request,this,is,required,for,the,storage,instance,to,be,thread,safe;private,static,http,transport,create,http,transport,final,string,endpoint,throws,exception,final,net,http,transport,builder,builder,new,net,http,transport,builder,builder,trust,certificates,google,utils,get,certificate,trust,store,if,strings,has,length,endpoint,final,url,endpoint,url,uri,create,endpoint,to,url,builder,set,connection,factory,new,default,connection,factory,override,public,http,urlconnection,open,connection,final,url,original,url,throws,ioexception,if,original,url,get,host,equals,endpoint,url,get,host,original,url,get,port,endpoint,url,get,port,original,url,get,protocol,equals,endpoint,url,get,protocol,return,super,open,connection,original,url,uri,original,uri,try,original,uri,original,url,to,uri,catch,final,urisyntax,exception,e,throw,new,runtime,exception,e,string,override,path,if,original,uri,get,raw,path,null,override,path,original,uri,get,raw,path,if,original,uri,get,raw,query,null,override,path,original,uri,get,raw,query,return,super,open,connection,new,url,endpoint,url,get,protocol,endpoint,url,get,host,endpoint,url,get,port,override,path,return,builder,build
GoogleCloudStorageService -> public Storage client(final String clientName) throws IOException;1529341607;Attempts to retrieve a client from the cache. If the client does not exist it_will be created from the latest settings and will populate the cache. The_returned instance should not be cached by the calling code. Instead, for each_use, the (possibly updated) instance should be requested by calling this_method.__@param clientName name of the client settings used to create the client_@return a cached client storage instance that can be used to manage objects_(blobs);public Storage client(final String clientName) throws IOException {_        final LazyInitializable<Storage, IOException> lazyClient = clientsCache.get().get(clientName)__        if (lazyClient == null) {_            throw new IllegalArgumentException("Unknown client name [" + clientName + "]. Existing client configs: "_                    + Strings.collectionToDelimitedString(clientsCache.get().keySet(), ","))__        }_        return lazyClient.getOrCompute()__    };attempts,to,retrieve,a,client,from,the,cache,if,the,client,does,not,exist,it,will,be,created,from,the,latest,settings,and,will,populate,the,cache,the,returned,instance,should,not,be,cached,by,the,calling,code,instead,for,each,use,the,possibly,updated,instance,should,be,requested,by,calling,this,method,param,client,name,name,of,the,client,settings,used,to,create,the,client,return,a,cached,client,storage,instance,that,can,be,used,to,manage,objects,blobs;public,storage,client,final,string,client,name,throws,ioexception,final,lazy,initializable,storage,ioexception,lazy,client,clients,cache,get,get,client,name,if,lazy,client,null,throw,new,illegal,argument,exception,unknown,client,name,client,name,existing,client,configs,strings,collection,to,delimited,string,clients,cache,get,key,set,return,lazy,client,get,or,compute
GoogleCloudStorageService -> public Storage client(final String clientName) throws IOException;1541092382;Attempts to retrieve a client from the cache. If the client does not exist it_will be created from the latest settings and will populate the cache. The_returned instance should not be cached by the calling code. Instead, for each_use, the (possibly updated) instance should be requested by calling this_method.__@param clientName name of the client settings used to create the client_@return a cached client storage instance that can be used to manage objects_(blobs);public Storage client(final String clientName) throws IOException {_        final LazyInitializable<Storage, IOException> lazyClient = clientsCache.get().get(clientName)__        if (lazyClient == null) {_            throw new IllegalArgumentException("Unknown client name [" + clientName + "]. Existing client configs: "_                    + Strings.collectionToDelimitedString(clientsCache.get().keySet(), ","))__        }_        return lazyClient.getOrCompute()__    };attempts,to,retrieve,a,client,from,the,cache,if,the,client,does,not,exist,it,will,be,created,from,the,latest,settings,and,will,populate,the,cache,the,returned,instance,should,not,be,cached,by,the,calling,code,instead,for,each,use,the,possibly,updated,instance,should,be,requested,by,calling,this,method,param,client,name,name,of,the,client,settings,used,to,create,the,client,return,a,cached,client,storage,instance,that,can,be,used,to,manage,objects,blobs;public,storage,client,final,string,client,name,throws,ioexception,final,lazy,initializable,storage,ioexception,lazy,client,clients,cache,get,get,client,name,if,lazy,client,null,throw,new,illegal,argument,exception,unknown,client,name,client,name,existing,client,configs,strings,collection,to,delimited,string,clients,cache,get,key,set,return,lazy,client,get,or,compute
GoogleCloudStorageService -> public Storage client(final String clientName) throws IOException;1542397818;Attempts to retrieve a client from the cache. If the client does not exist it_will be created from the latest settings and will populate the cache. The_returned instance should not be cached by the calling code. Instead, for each_use, the (possibly updated) instance should be requested by calling this_method.__@param clientName name of the client settings used to create the client_@return a cached client storage instance that can be used to manage objects_(blobs);public Storage client(final String clientName) throws IOException {_        final LazyInitializable<Storage, IOException> lazyClient = clientsCache.get().get(clientName)__        if (lazyClient == null) {_            throw new IllegalArgumentException("Unknown client name [" + clientName + "]. Existing client configs: "_                    + Strings.collectionToDelimitedString(clientsCache.get().keySet(), ","))__        }_        return lazyClient.getOrCompute()__    };attempts,to,retrieve,a,client,from,the,cache,if,the,client,does,not,exist,it,will,be,created,from,the,latest,settings,and,will,populate,the,cache,the,returned,instance,should,not,be,cached,by,the,calling,code,instead,for,each,use,the,possibly,updated,instance,should,be,requested,by,calling,this,method,param,client,name,name,of,the,client,settings,used,to,create,the,client,return,a,cached,client,storage,instance,that,can,be,used,to,manage,objects,blobs;public,storage,client,final,string,client,name,throws,ioexception,final,lazy,initializable,storage,ioexception,lazy,client,clients,cache,get,get,client,name,if,lazy,client,null,throw,new,illegal,argument,exception,unknown,client,name,client,name,existing,client,configs,strings,collection,to,delimited,string,clients,cache,get,key,set,return,lazy,client,get,or,compute
GoogleCloudStorageService -> public synchronized void refreshAndClearCache(Map<String, GoogleCloudStorageClientSettings> clientsSettings);1529341607;Refreshes the client settings and clears the client cache. Subsequent calls to_{@code GoogleCloudStorageService#client} will return new clients constructed_using the parameter settings.__@param clientsSettings the new settings used for building clients for subsequent requests;public synchronized void refreshAndClearCache(Map<String, GoogleCloudStorageClientSettings> clientsSettings) {_        _        final MapBuilder<String, LazyInitializable<Storage, IOException>> newClientsCache = MapBuilder.newMapBuilder()__        for (final Map.Entry<String, GoogleCloudStorageClientSettings> entry : clientsSettings.entrySet()) {_            newClientsCache.put(entry.getKey(),_                    new LazyInitializable<Storage, IOException>(() -> createClient(entry.getKey(), entry.getValue())))__        }_        _        final Map<String, LazyInitializable<Storage, IOException>> oldClientCache = clientsCache.getAndSet(newClientsCache.immutableMap())__        _        oldClientCache.values().forEach(LazyInitializable::reset)__    };refreshes,the,client,settings,and,clears,the,client,cache,subsequent,calls,to,code,google,cloud,storage,service,client,will,return,new,clients,constructed,using,the,parameter,settings,param,clients,settings,the,new,settings,used,for,building,clients,for,subsequent,requests;public,synchronized,void,refresh,and,clear,cache,map,string,google,cloud,storage,client,settings,clients,settings,final,map,builder,string,lazy,initializable,storage,ioexception,new,clients,cache,map,builder,new,map,builder,for,final,map,entry,string,google,cloud,storage,client,settings,entry,clients,settings,entry,set,new,clients,cache,put,entry,get,key,new,lazy,initializable,storage,ioexception,create,client,entry,get,key,entry,get,value,final,map,string,lazy,initializable,storage,ioexception,old,client,cache,clients,cache,get,and,set,new,clients,cache,immutable,map,old,client,cache,values,for,each,lazy,initializable,reset
GoogleCloudStorageService -> public synchronized void refreshAndClearCache(Map<String, GoogleCloudStorageClientSettings> clientsSettings);1541092382;Refreshes the client settings and clears the client cache. Subsequent calls to_{@code GoogleCloudStorageService#client} will return new clients constructed_using the parameter settings.__@param clientsSettings the new settings used for building clients for subsequent requests;public synchronized void refreshAndClearCache(Map<String, GoogleCloudStorageClientSettings> clientsSettings) {_        _        final MapBuilder<String, LazyInitializable<Storage, IOException>> newClientsCache = MapBuilder.newMapBuilder()__        for (final Map.Entry<String, GoogleCloudStorageClientSettings> entry : clientsSettings.entrySet()) {_            newClientsCache.put(entry.getKey(),_                    new LazyInitializable<Storage, IOException>(() -> createClient(entry.getKey(), entry.getValue())))__        }_        _        final Map<String, LazyInitializable<Storage, IOException>> oldClientCache = clientsCache.getAndSet(newClientsCache.immutableMap())__        _        oldClientCache.values().forEach(LazyInitializable::reset)__    };refreshes,the,client,settings,and,clears,the,client,cache,subsequent,calls,to,code,google,cloud,storage,service,client,will,return,new,clients,constructed,using,the,parameter,settings,param,clients,settings,the,new,settings,used,for,building,clients,for,subsequent,requests;public,synchronized,void,refresh,and,clear,cache,map,string,google,cloud,storage,client,settings,clients,settings,final,map,builder,string,lazy,initializable,storage,ioexception,new,clients,cache,map,builder,new,map,builder,for,final,map,entry,string,google,cloud,storage,client,settings,entry,clients,settings,entry,set,new,clients,cache,put,entry,get,key,new,lazy,initializable,storage,ioexception,create,client,entry,get,key,entry,get,value,final,map,string,lazy,initializable,storage,ioexception,old,client,cache,clients,cache,get,and,set,new,clients,cache,immutable,map,old,client,cache,values,for,each,lazy,initializable,reset
GoogleCloudStorageService -> public synchronized void refreshAndClearCache(Map<String, GoogleCloudStorageClientSettings> clientsSettings);1542397818;Refreshes the client settings and clears the client cache. Subsequent calls to_{@code GoogleCloudStorageService#client} will return new clients constructed_using the parameter settings.__@param clientsSettings the new settings used for building clients for subsequent requests;public synchronized void refreshAndClearCache(Map<String, GoogleCloudStorageClientSettings> clientsSettings) {_        _        final MapBuilder<String, LazyInitializable<Storage, IOException>> newClientsCache = MapBuilder.newMapBuilder()__        for (final Map.Entry<String, GoogleCloudStorageClientSettings> entry : clientsSettings.entrySet()) {_            newClientsCache.put(entry.getKey(),_                    new LazyInitializable<Storage, IOException>(() -> createClient(entry.getKey(), entry.getValue())))__        }_        _        final Map<String, LazyInitializable<Storage, IOException>> oldClientCache = clientsCache.getAndSet(newClientsCache.immutableMap())__        _        oldClientCache.values().forEach(LazyInitializable::reset)__    };refreshes,the,client,settings,and,clears,the,client,cache,subsequent,calls,to,code,google,cloud,storage,service,client,will,return,new,clients,constructed,using,the,parameter,settings,param,clients,settings,the,new,settings,used,for,building,clients,for,subsequent,requests;public,synchronized,void,refresh,and,clear,cache,map,string,google,cloud,storage,client,settings,clients,settings,final,map,builder,string,lazy,initializable,storage,ioexception,new,clients,cache,map,builder,new,map,builder,for,final,map,entry,string,google,cloud,storage,client,settings,entry,clients,settings,entry,set,new,clients,cache,put,entry,get,key,new,lazy,initializable,storage,ioexception,create,client,entry,get,key,entry,get,value,final,map,string,lazy,initializable,storage,ioexception,old,client,cache,clients,cache,get,and,set,new,clients,cache,immutable,map,old,client,cache,values,for,each,lazy,initializable,reset
GoogleCloudStorageService -> public Storage createClient(final String clientName) throws Exception;1524684173;Creates a client that can be used to manage Google Cloud Storage objects.__@param clientName name of client settings to use from secure settings_@return a Client instance that can be used to manage Storage objects;public Storage createClient(final String clientName) throws Exception {_        final GoogleCloudStorageClientSettings clientSettings = clientsSettings.get(clientName)__        if (clientSettings == null) {_            throw new IllegalArgumentException("Unknown client name [" + clientName + "]. Existing client configs: " +_                Strings.collectionToDelimitedString(clientsSettings.keySet(), ","))__        }__        HttpTransport transport = GoogleNetHttpTransport.newTrustedTransport()__        HttpRequestInitializer requestInitializer =  createRequestInitializer(clientSettings)___        Storage.Builder storage = new Storage.Builder(transport, JacksonFactory.getDefaultInstance(), requestInitializer)__        if (Strings.hasLength(clientSettings.getApplicationName())) {_            storage.setApplicationName(clientSettings.getApplicationName())__        }_        if (Strings.hasLength(clientSettings.getEndpoint())) {_            storage.setRootUrl(clientSettings.getEndpoint())__        }_        return storage.build()__    };creates,a,client,that,can,be,used,to,manage,google,cloud,storage,objects,param,client,name,name,of,client,settings,to,use,from,secure,settings,return,a,client,instance,that,can,be,used,to,manage,storage,objects;public,storage,create,client,final,string,client,name,throws,exception,final,google,cloud,storage,client,settings,client,settings,clients,settings,get,client,name,if,client,settings,null,throw,new,illegal,argument,exception,unknown,client,name,client,name,existing,client,configs,strings,collection,to,delimited,string,clients,settings,key,set,http,transport,transport,google,net,http,transport,new,trusted,transport,http,request,initializer,request,initializer,create,request,initializer,client,settings,storage,builder,storage,new,storage,builder,transport,jackson,factory,get,default,instance,request,initializer,if,strings,has,length,client,settings,get,application,name,storage,set,application,name,client,settings,get,application,name,if,strings,has,length,client,settings,get,endpoint,storage,set,root,url,client,settings,get,endpoint,return,storage,build
GoogleCloudStorageService -> public Storage createClient(final String clientName) throws Exception;1526449283;Creates a client that can be used to manage Google Cloud Storage objects.__@param clientName name of client settings to use, including secure settings_@return a Client instance that can be used to manage Storage objects;public Storage createClient(final String clientName) throws Exception {_        final GoogleCloudStorageClientSettings clientSettings = clientsSettings.get(clientName)__        if (clientSettings == null) {_            throw new IllegalArgumentException("Unknown client name [" + clientName + "]. Existing client configs: "_                    + Strings.collectionToDelimitedString(clientsSettings.keySet(), ","))__        }_        final HttpTransport httpTransport = createHttpTransport(clientSettings.getHost())__        final HttpTransportOptions httpTransportOptions = HttpTransportOptions.newBuilder()_                .setConnectTimeout(toTimeout(clientSettings.getConnectTimeout()))_                .setReadTimeout(toTimeout(clientSettings.getReadTimeout()))_                .setHttpTransportFactory(() -> httpTransport)_                .build()__        final StorageOptions.Builder storageOptionsBuilder = StorageOptions.newBuilder()_                .setTransportOptions(httpTransportOptions)_                .setHeaderProvider(() -> {_                    final MapBuilder<String, String> mapBuilder = MapBuilder.newMapBuilder()__                    if (Strings.hasLength(clientSettings.getApplicationName())) {_                        mapBuilder.put("user-agent", clientSettings.getApplicationName())__                    }_                    return mapBuilder.immutableMap()__                })__        if (Strings.hasLength(clientSettings.getHost())) {_            storageOptionsBuilder.setHost(clientSettings.getHost())__        }_        if (Strings.hasLength(clientSettings.getProjectId())) {_            storageOptionsBuilder.setProjectId(clientSettings.getProjectId())__        }_        if (clientSettings.getCredential() == null) {_            logger.warn("\"Application Default Credentials\" are not supported out of the box."_                    + " Additional file system permissions have to be granted to the plugin.")__        } else {_            ServiceAccountCredentials serviceAccountCredentials = clientSettings.getCredential()__            _            final URI tokenServerUri = clientSettings.getTokenUri()__            if (Strings.hasLength(tokenServerUri.toString())) {_                _                _                serviceAccountCredentials = serviceAccountCredentials.toBuilder().setTokenServerUri(tokenServerUri).build()__            }_            storageOptionsBuilder.setCredentials(serviceAccountCredentials)__        }_        return storageOptionsBuilder.build().getService()__    };creates,a,client,that,can,be,used,to,manage,google,cloud,storage,objects,param,client,name,name,of,client,settings,to,use,including,secure,settings,return,a,client,instance,that,can,be,used,to,manage,storage,objects;public,storage,create,client,final,string,client,name,throws,exception,final,google,cloud,storage,client,settings,client,settings,clients,settings,get,client,name,if,client,settings,null,throw,new,illegal,argument,exception,unknown,client,name,client,name,existing,client,configs,strings,collection,to,delimited,string,clients,settings,key,set,final,http,transport,http,transport,create,http,transport,client,settings,get,host,final,http,transport,options,http,transport,options,http,transport,options,new,builder,set,connect,timeout,to,timeout,client,settings,get,connect,timeout,set,read,timeout,to,timeout,client,settings,get,read,timeout,set,http,transport,factory,http,transport,build,final,storage,options,builder,storage,options,builder,storage,options,new,builder,set,transport,options,http,transport,options,set,header,provider,final,map,builder,string,string,map,builder,map,builder,new,map,builder,if,strings,has,length,client,settings,get,application,name,map,builder,put,user,agent,client,settings,get,application,name,return,map,builder,immutable,map,if,strings,has,length,client,settings,get,host,storage,options,builder,set,host,client,settings,get,host,if,strings,has,length,client,settings,get,project,id,storage,options,builder,set,project,id,client,settings,get,project,id,if,client,settings,get,credential,null,logger,warn,application,default,credentials,are,not,supported,out,of,the,box,additional,file,system,permissions,have,to,be,granted,to,the,plugin,else,service,account,credentials,service,account,credentials,client,settings,get,credential,final,uri,token,server,uri,client,settings,get,token,uri,if,strings,has,length,token,server,uri,to,string,service,account,credentials,service,account,credentials,to,builder,set,token,server,uri,token,server,uri,build,storage,options,builder,set,credentials,service,account,credentials,return,storage,options,builder,build,get,service
GoogleCloudStorageService -> private Storage createClient(final String clientName, final GoogleCloudStorageClientSettings clientSettings) throws IOException;1529341607;Creates a client that can be used to manage Google Cloud Storage objects. The client is thread-safe.__@param clientName name of client settings to use, including secure settings_@param clientSettings name of client settings to use, including secure settings_@return a new client storage instance that can be used to manage objects_(blobs);private Storage createClient(final String clientName, final GoogleCloudStorageClientSettings clientSettings) throws IOException {_        logger.debug(() -> new ParameterizedMessage("creating GCS client with client_name [{}], endpoint [{}]", clientName,_                clientSettings.getHost()))__        final HttpTransport httpTransport = SocketAccess.doPrivilegedIOException(() -> createHttpTransport(clientSettings.getHost()))__        final HttpTransportOptions httpTransportOptions = HttpTransportOptions.newBuilder()_                .setConnectTimeout(toTimeout(clientSettings.getConnectTimeout()))_                .setReadTimeout(toTimeout(clientSettings.getReadTimeout()))_                .setHttpTransportFactory(() -> httpTransport)_                .build()__        final StorageOptions.Builder storageOptionsBuilder = StorageOptions.newBuilder()_                .setTransportOptions(httpTransportOptions)_                .setHeaderProvider(() -> {_                    final MapBuilder<String, String> mapBuilder = MapBuilder.newMapBuilder()__                    if (Strings.hasLength(clientSettings.getApplicationName())) {_                        mapBuilder.put("user-agent", clientSettings.getApplicationName())__                    }_                    return mapBuilder.immutableMap()__                })__        if (Strings.hasLength(clientSettings.getHost())) {_            storageOptionsBuilder.setHost(clientSettings.getHost())__        }_        if (Strings.hasLength(clientSettings.getProjectId())) {_            storageOptionsBuilder.setProjectId(clientSettings.getProjectId())__        }_        if (clientSettings.getCredential() == null) {_            logger.warn("\"Application Default Credentials\" are not supported out of the box."_                    + " Additional file system permissions have to be granted to the plugin.")__        } else {_            ServiceAccountCredentials serviceAccountCredentials = clientSettings.getCredential()__            _            final URI tokenServerUri = clientSettings.getTokenUri()__            if (Strings.hasLength(tokenServerUri.toString())) {_                _                _                serviceAccountCredentials = serviceAccountCredentials.toBuilder().setTokenServerUri(tokenServerUri).build()__            }_            storageOptionsBuilder.setCredentials(serviceAccountCredentials)__        }_        return storageOptionsBuilder.build().getService()__    };creates,a,client,that,can,be,used,to,manage,google,cloud,storage,objects,the,client,is,thread,safe,param,client,name,name,of,client,settings,to,use,including,secure,settings,param,client,settings,name,of,client,settings,to,use,including,secure,settings,return,a,new,client,storage,instance,that,can,be,used,to,manage,objects,blobs;private,storage,create,client,final,string,client,name,final,google,cloud,storage,client,settings,client,settings,throws,ioexception,logger,debug,new,parameterized,message,creating,gcs,client,with,endpoint,client,name,client,settings,get,host,final,http,transport,http,transport,socket,access,do,privileged,ioexception,create,http,transport,client,settings,get,host,final,http,transport,options,http,transport,options,http,transport,options,new,builder,set,connect,timeout,to,timeout,client,settings,get,connect,timeout,set,read,timeout,to,timeout,client,settings,get,read,timeout,set,http,transport,factory,http,transport,build,final,storage,options,builder,storage,options,builder,storage,options,new,builder,set,transport,options,http,transport,options,set,header,provider,final,map,builder,string,string,map,builder,map,builder,new,map,builder,if,strings,has,length,client,settings,get,application,name,map,builder,put,user,agent,client,settings,get,application,name,return,map,builder,immutable,map,if,strings,has,length,client,settings,get,host,storage,options,builder,set,host,client,settings,get,host,if,strings,has,length,client,settings,get,project,id,storage,options,builder,set,project,id,client,settings,get,project,id,if,client,settings,get,credential,null,logger,warn,application,default,credentials,are,not,supported,out,of,the,box,additional,file,system,permissions,have,to,be,granted,to,the,plugin,else,service,account,credentials,service,account,credentials,client,settings,get,credential,final,uri,token,server,uri,client,settings,get,token,uri,if,strings,has,length,token,server,uri,to,string,service,account,credentials,service,account,credentials,to,builder,set,token,server,uri,token,server,uri,build,storage,options,builder,set,credentials,service,account,credentials,return,storage,options,builder,build,get,service
GoogleCloudStorageService -> private Storage createClient(final String clientName, final GoogleCloudStorageClientSettings clientSettings) throws IOException;1541092382;Creates a client that can be used to manage Google Cloud Storage objects. The client is thread-safe.__@param clientName name of client settings to use, including secure settings_@param clientSettings name of client settings to use, including secure settings_@return a new client storage instance that can be used to manage objects_(blobs);private Storage createClient(final String clientName, final GoogleCloudStorageClientSettings clientSettings) throws IOException {_        logger.debug(() -> new ParameterizedMessage("creating GCS client with client_name [{}], endpoint [{}]", clientName,_                clientSettings.getHost()))__        final HttpTransport httpTransport = SocketAccess.doPrivilegedIOException(() -> createHttpTransport(clientSettings.getHost()))__        final HttpTransportOptions httpTransportOptions = HttpTransportOptions.newBuilder()_                .setConnectTimeout(toTimeout(clientSettings.getConnectTimeout()))_                .setReadTimeout(toTimeout(clientSettings.getReadTimeout()))_                .setHttpTransportFactory(() -> httpTransport)_                .build()__        final StorageOptions.Builder storageOptionsBuilder = StorageOptions.newBuilder()_                .setTransportOptions(httpTransportOptions)_                .setHeaderProvider(() -> {_                    final MapBuilder<String, String> mapBuilder = MapBuilder.newMapBuilder()__                    if (Strings.hasLength(clientSettings.getApplicationName())) {_                        mapBuilder.put("user-agent", clientSettings.getApplicationName())__                    }_                    return mapBuilder.immutableMap()__                })__        if (Strings.hasLength(clientSettings.getHost())) {_            storageOptionsBuilder.setHost(clientSettings.getHost())__        }_        if (Strings.hasLength(clientSettings.getProjectId())) {_            storageOptionsBuilder.setProjectId(clientSettings.getProjectId())__        }_        if (clientSettings.getCredential() == null) {_            logger.warn("\"Application Default Credentials\" are not supported out of the box."_                    + " Additional file system permissions have to be granted to the plugin.")__        } else {_            ServiceAccountCredentials serviceAccountCredentials = clientSettings.getCredential()__            _            final URI tokenServerUri = clientSettings.getTokenUri()__            if (Strings.hasLength(tokenServerUri.toString())) {_                _                _                serviceAccountCredentials = serviceAccountCredentials.toBuilder().setTokenServerUri(tokenServerUri).build()__            }_            storageOptionsBuilder.setCredentials(serviceAccountCredentials)__        }_        return storageOptionsBuilder.build().getService()__    };creates,a,client,that,can,be,used,to,manage,google,cloud,storage,objects,the,client,is,thread,safe,param,client,name,name,of,client,settings,to,use,including,secure,settings,param,client,settings,name,of,client,settings,to,use,including,secure,settings,return,a,new,client,storage,instance,that,can,be,used,to,manage,objects,blobs;private,storage,create,client,final,string,client,name,final,google,cloud,storage,client,settings,client,settings,throws,ioexception,logger,debug,new,parameterized,message,creating,gcs,client,with,endpoint,client,name,client,settings,get,host,final,http,transport,http,transport,socket,access,do,privileged,ioexception,create,http,transport,client,settings,get,host,final,http,transport,options,http,transport,options,http,transport,options,new,builder,set,connect,timeout,to,timeout,client,settings,get,connect,timeout,set,read,timeout,to,timeout,client,settings,get,read,timeout,set,http,transport,factory,http,transport,build,final,storage,options,builder,storage,options,builder,storage,options,new,builder,set,transport,options,http,transport,options,set,header,provider,final,map,builder,string,string,map,builder,map,builder,new,map,builder,if,strings,has,length,client,settings,get,application,name,map,builder,put,user,agent,client,settings,get,application,name,return,map,builder,immutable,map,if,strings,has,length,client,settings,get,host,storage,options,builder,set,host,client,settings,get,host,if,strings,has,length,client,settings,get,project,id,storage,options,builder,set,project,id,client,settings,get,project,id,if,client,settings,get,credential,null,logger,warn,application,default,credentials,are,not,supported,out,of,the,box,additional,file,system,permissions,have,to,be,granted,to,the,plugin,else,service,account,credentials,service,account,credentials,client,settings,get,credential,final,uri,token,server,uri,client,settings,get,token,uri,if,strings,has,length,token,server,uri,to,string,service,account,credentials,service,account,credentials,to,builder,set,token,server,uri,token,server,uri,build,storage,options,builder,set,credentials,service,account,credentials,return,storage,options,builder,build,get,service
GoogleCloudStorageService -> private Storage createClient(final String clientName, final GoogleCloudStorageClientSettings clientSettings) throws IOException;1542397818;Creates a client that can be used to manage Google Cloud Storage objects. The client is thread-safe.__@param clientName name of client settings to use, including secure settings_@param clientSettings name of client settings to use, including secure settings_@return a new client storage instance that can be used to manage objects_(blobs);private Storage createClient(final String clientName, final GoogleCloudStorageClientSettings clientSettings) throws IOException {_        logger.debug(() -> new ParameterizedMessage("creating GCS client with client_name [{}], endpoint [{}]", clientName,_                clientSettings.getHost()))__        final HttpTransport httpTransport = SocketAccess.doPrivilegedIOException(() -> createHttpTransport(clientSettings.getHost()))__        final HttpTransportOptions httpTransportOptions = HttpTransportOptions.newBuilder()_                .setConnectTimeout(toTimeout(clientSettings.getConnectTimeout()))_                .setReadTimeout(toTimeout(clientSettings.getReadTimeout()))_                .setHttpTransportFactory(() -> httpTransport)_                .build()__        final StorageOptions.Builder storageOptionsBuilder = StorageOptions.newBuilder()_                .setTransportOptions(httpTransportOptions)_                .setHeaderProvider(() -> {_                    final MapBuilder<String, String> mapBuilder = MapBuilder.newMapBuilder()__                    if (Strings.hasLength(clientSettings.getApplicationName())) {_                        mapBuilder.put("user-agent", clientSettings.getApplicationName())__                    }_                    return mapBuilder.immutableMap()__                })__        if (Strings.hasLength(clientSettings.getHost())) {_            storageOptionsBuilder.setHost(clientSettings.getHost())__        }_        if (Strings.hasLength(clientSettings.getProjectId())) {_            storageOptionsBuilder.setProjectId(clientSettings.getProjectId())__        }_        if (clientSettings.getCredential() == null) {_            logger.warn("\"Application Default Credentials\" are not supported out of the box."_                    + " Additional file system permissions have to be granted to the plugin.")__        } else {_            ServiceAccountCredentials serviceAccountCredentials = clientSettings.getCredential()__            _            final URI tokenServerUri = clientSettings.getTokenUri()__            if (Strings.hasLength(tokenServerUri.toString())) {_                _                _                serviceAccountCredentials = serviceAccountCredentials.toBuilder().setTokenServerUri(tokenServerUri).build()__            }_            storageOptionsBuilder.setCredentials(serviceAccountCredentials)__        }_        return storageOptionsBuilder.build().getService()__    };creates,a,client,that,can,be,used,to,manage,google,cloud,storage,objects,the,client,is,thread,safe,param,client,name,name,of,client,settings,to,use,including,secure,settings,param,client,settings,name,of,client,settings,to,use,including,secure,settings,return,a,new,client,storage,instance,that,can,be,used,to,manage,objects,blobs;private,storage,create,client,final,string,client,name,final,google,cloud,storage,client,settings,client,settings,throws,ioexception,logger,debug,new,parameterized,message,creating,gcs,client,with,endpoint,client,name,client,settings,get,host,final,http,transport,http,transport,socket,access,do,privileged,ioexception,create,http,transport,client,settings,get,host,final,http,transport,options,http,transport,options,http,transport,options,new,builder,set,connect,timeout,to,timeout,client,settings,get,connect,timeout,set,read,timeout,to,timeout,client,settings,get,read,timeout,set,http,transport,factory,http,transport,build,final,storage,options,builder,storage,options,builder,storage,options,new,builder,set,transport,options,http,transport,options,set,header,provider,final,map,builder,string,string,map,builder,map,builder,new,map,builder,if,strings,has,length,client,settings,get,application,name,map,builder,put,user,agent,client,settings,get,application,name,return,map,builder,immutable,map,if,strings,has,length,client,settings,get,host,storage,options,builder,set,host,client,settings,get,host,if,strings,has,length,client,settings,get,project,id,storage,options,builder,set,project,id,client,settings,get,project,id,if,client,settings,get,credential,null,logger,warn,application,default,credentials,are,not,supported,out,of,the,box,additional,file,system,permissions,have,to,be,granted,to,the,plugin,else,service,account,credentials,service,account,credentials,client,settings,get,credential,final,uri,token,server,uri,client,settings,get,token,uri,if,strings,has,length,token,server,uri,to,string,service,account,credentials,service,account,credentials,to,builder,set,token,server,uri,token,server,uri,build,storage,options,builder,set,credentials,service,account,credentials,return,storage,options,builder,build,get,service
