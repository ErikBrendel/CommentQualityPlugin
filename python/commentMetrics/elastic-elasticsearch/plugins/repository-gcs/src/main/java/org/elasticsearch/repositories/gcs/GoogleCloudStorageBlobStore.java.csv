# id;timestamp;commentText;codeText;commentWords;codeWords
GoogleCloudStorageBlobStore -> Map<String, BlobMetaData> listBlobs(String path) throws IOException;1524684173;List all blobs in the bucket__@param path base path of the blobs to list_@return a map of blob names and their metadata;Map<String, BlobMetaData> listBlobs(String path) throws IOException {_        return SocketAccess.doPrivilegedIOException(() -> listBlobsByPath(bucket, path, path))__    };list,all,blobs,in,the,bucket,param,path,base,path,of,the,blobs,to,list,return,a,map,of,blob,names,and,their,metadata;map,string,blob,meta,data,list,blobs,string,path,throws,ioexception,return,socket,access,do,privileged,ioexception,list,blobs,by,path,bucket,path,path
GoogleCloudStorageBlobStore -> Map<String, BlobMetaData> listBlobs(String path) throws IOException;1526449283;List blobs in the bucket under the specified path. The path root is removed.__@param path_base path of the blobs to list_@return a map of blob names and their metadata;Map<String, BlobMetaData> listBlobs(String path) throws IOException {_        return listBlobsByPrefix(path, "")__    };list,blobs,in,the,bucket,under,the,specified,path,the,path,root,is,removed,param,path,base,path,of,the,blobs,to,list,return,a,map,of,blob,names,and,their,metadata;map,string,blob,meta,data,list,blobs,string,path,throws,ioexception,return,list,blobs,by,prefix,path
GoogleCloudStorageBlobStore -> Map<String, BlobMetaData> listBlobs(String path) throws IOException;1526574077;List blobs in the bucket under the specified path. The path root is removed.__@param path_base path of the blobs to list_@return a map of blob names and their metadata;Map<String, BlobMetaData> listBlobs(String path) throws IOException {_        return listBlobsByPrefix(path, "")__    };list,blobs,in,the,bucket,under,the,specified,path,the,path,root,is,removed,param,path,base,path,of,the,blobs,to,list,return,a,map,of,blob,names,and,their,metadata;map,string,blob,meta,data,list,blobs,string,path,throws,ioexception,return,list,blobs,by,prefix,path
GoogleCloudStorageBlobStore -> Map<String, BlobMetaData> listBlobs(String path) throws IOException;1528706846;List blobs in the bucket under the specified path. The path root is removed.__@param path_base path of the blobs to list_@return a map of blob names and their metadata;Map<String, BlobMetaData> listBlobs(String path) throws IOException {_        return listBlobsByPrefix(path, "")__    };list,blobs,in,the,bucket,under,the,specified,path,the,path,root,is,removed,param,path,base,path,of,the,blobs,to,list,return,a,map,of,blob,names,and,their,metadata;map,string,blob,meta,data,list,blobs,string,path,throws,ioexception,return,list,blobs,by,prefix,path
GoogleCloudStorageBlobStore -> Map<String, BlobMetaData> listBlobs(String path) throws IOException;1529341607;List blobs in the specific bucket under the specified path. The path root is removed.__@param path base path of the blobs to list_@return a map of blob names and their metadata;Map<String, BlobMetaData> listBlobs(String path) throws IOException {_        return listBlobsByPrefix(path, "")__    };list,blobs,in,the,specific,bucket,under,the,specified,path,the,path,root,is,removed,param,path,base,path,of,the,blobs,to,list,return,a,map,of,blob,names,and,their,metadata;map,string,blob,meta,data,list,blobs,string,path,throws,ioexception,return,list,blobs,by,prefix,path
GoogleCloudStorageBlobStore -> Map<String, BlobMetaData> listBlobs(String path) throws IOException;1531179852;List blobs in the specific bucket under the specified path. The path root is removed.__@param path base path of the blobs to list_@return a map of blob names and their metadata;Map<String, BlobMetaData> listBlobs(String path) throws IOException {_        return listBlobsByPrefix(path, "")__    };list,blobs,in,the,specific,bucket,under,the,specified,path,the,path,root,is,removed,param,path,base,path,of,the,blobs,to,list,return,a,map,of,blob,names,and,their,metadata;map,string,blob,meta,data,list,blobs,string,path,throws,ioexception,return,list,blobs,by,prefix,path
GoogleCloudStorageBlobStore -> Map<String, BlobMetaData> listBlobs(String path) throws IOException;1541092382;List blobs in the specific bucket under the specified path. The path root is removed.__@param path base path of the blobs to list_@return a map of blob names and their metadata;Map<String, BlobMetaData> listBlobs(String path) throws IOException {_        return listBlobsByPrefix(path, "")__    };list,blobs,in,the,specific,bucket,under,the,specified,path,the,path,root,is,removed,param,path,base,path,of,the,blobs,to,list,return,a,map,of,blob,names,and,their,metadata;map,string,blob,meta,data,list,blobs,string,path,throws,ioexception,return,list,blobs,by,prefix,path
GoogleCloudStorageBlobStore -> Map<String, BlobMetaData> listBlobs(String path) throws IOException;1542397818;List blobs in the specific bucket under the specified path. The path root is removed.__@param path base path of the blobs to list_@return a map of blob names and their metadata;Map<String, BlobMetaData> listBlobs(String path) throws IOException {_        return listBlobsByPrefix(path, "")__    };list,blobs,in,the,specific,bucket,under,the,specified,path,the,path,root,is,removed,param,path,base,path,of,the,blobs,to,list,return,a,map,of,blob,names,and,their,metadata;map,string,blob,meta,data,list,blobs,string,path,throws,ioexception,return,list,blobs,by,prefix,path
GoogleCloudStorageBlobStore -> private void writeBlobMultipart(BlobInfo blobInfo, InputStream inputStream, long blobSize) throws IOException;1526449283;Uploads a blob using the "multipart upload" method (a single_'multipart/related' request containing both data and metadata. The request is_gziped), see:_https://cloud.google.com/storage/docs/json_api/v1/how-tos/multipart-upload__@param blobInfo the info for the blob to be uploaded_@param inputStream the stream containing the blob data_@param blobSize the size;private void writeBlobMultipart(BlobInfo blobInfo, InputStream inputStream, long blobSize) throws IOException {_        assert blobSize <= LARGE_BLOB_THRESHOLD_BYTE_SIZE : "large blob uploads should use the resumable upload method"__        final ByteArrayOutputStream baos = new ByteArrayOutputStream(Math.toIntExact(blobSize))__        Streams.copy(inputStream, baos)__        SocketAccess.doPrivilegedVoidIOException(() -> storage.create(blobInfo, baos.toByteArray()))__    };uploads,a,blob,using,the,multipart,upload,method,a,single,multipart,related,request,containing,both,data,and,metadata,the,request,is,gziped,see,https,cloud,google,com,storage,docs,v1,how,tos,multipart,upload,param,blob,info,the,info,for,the,blob,to,be,uploaded,param,input,stream,the,stream,containing,the,blob,data,param,blob,size,the,size;private,void,write,blob,multipart,blob,info,blob,info,input,stream,input,stream,long,blob,size,throws,ioexception,assert,blob,size,large,blob,uploads,should,use,the,resumable,upload,method,final,byte,array,output,stream,baos,new,byte,array,output,stream,math,to,int,exact,blob,size,streams,copy,input,stream,baos,socket,access,do,privileged,void,ioexception,storage,create,blob,info,baos,to,byte,array
GoogleCloudStorageBlobStore -> private void writeBlobMultipart(BlobInfo blobInfo, InputStream inputStream, long blobSize) throws IOException;1526574077;Uploads a blob using the "multipart upload" method (a single_'multipart/related' request containing both data and metadata. The request is_gziped), see:_https://cloud.google.com/storage/docs/json_api/v1/how-tos/multipart-upload__@param blobInfo the info for the blob to be uploaded_@param inputStream the stream containing the blob data_@param blobSize the size;private void writeBlobMultipart(BlobInfo blobInfo, InputStream inputStream, long blobSize) throws IOException {_        assert blobSize <= LARGE_BLOB_THRESHOLD_BYTE_SIZE : "large blob uploads should use the resumable upload method"__        final ByteArrayOutputStream baos = new ByteArrayOutputStream(Math.toIntExact(blobSize))__        Streams.copy(inputStream, baos)__        SocketAccess.doPrivilegedVoidIOException(_            () -> {_                try {_                    storage.create(blobInfo, baos.toByteArray(), Storage.BlobTargetOption.doesNotExist())__                } catch (StorageException se) {_                    if (se.getCode() == HTTP_PRECON_FAILED) {_                        throw new FileAlreadyExistsException(blobInfo.getBlobId().getName(), null, se.getMessage())__                    }_                    throw se__                }_            })__    };uploads,a,blob,using,the,multipart,upload,method,a,single,multipart,related,request,containing,both,data,and,metadata,the,request,is,gziped,see,https,cloud,google,com,storage,docs,v1,how,tos,multipart,upload,param,blob,info,the,info,for,the,blob,to,be,uploaded,param,input,stream,the,stream,containing,the,blob,data,param,blob,size,the,size;private,void,write,blob,multipart,blob,info,blob,info,input,stream,input,stream,long,blob,size,throws,ioexception,assert,blob,size,large,blob,uploads,should,use,the,resumable,upload,method,final,byte,array,output,stream,baos,new,byte,array,output,stream,math,to,int,exact,blob,size,streams,copy,input,stream,baos,socket,access,do,privileged,void,ioexception,try,storage,create,blob,info,baos,to,byte,array,storage,blob,target,option,does,not,exist,catch,storage,exception,se,if,se,get,code,throw,new,file,already,exists,exception,blob,info,get,blob,id,get,name,null,se,get,message,throw,se
GoogleCloudStorageBlobStore -> private void writeBlobMultipart(BlobInfo blobInfo, InputStream inputStream, long blobSize) throws IOException;1528706846;Uploads a blob using the "multipart upload" method (a single_'multipart/related' request containing both data and metadata. The request is_gziped), see:_https://cloud.google.com/storage/docs/json_api/v1/how-tos/multipart-upload__@param blobInfo the info for the blob to be uploaded_@param inputStream the stream containing the blob data_@param blobSize the size;private void writeBlobMultipart(BlobInfo blobInfo, InputStream inputStream, long blobSize) throws IOException {_        assert blobSize <= LARGE_BLOB_THRESHOLD_BYTE_SIZE : "large blob uploads should use the resumable upload method"__        final ByteArrayOutputStream baos = new ByteArrayOutputStream(Math.toIntExact(blobSize))__        Streams.copy(inputStream, baos)__        SocketAccess.doPrivilegedVoidIOException(_            () -> {_                try {_                    storage.create(blobInfo, baos.toByteArray(), Storage.BlobTargetOption.doesNotExist())__                } catch (StorageException se) {_                    if (se.getCode() == HTTP_PRECON_FAILED) {_                        throw new FileAlreadyExistsException(blobInfo.getBlobId().getName(), null, se.getMessage())__                    }_                    throw se__                }_            })__    };uploads,a,blob,using,the,multipart,upload,method,a,single,multipart,related,request,containing,both,data,and,metadata,the,request,is,gziped,see,https,cloud,google,com,storage,docs,v1,how,tos,multipart,upload,param,blob,info,the,info,for,the,blob,to,be,uploaded,param,input,stream,the,stream,containing,the,blob,data,param,blob,size,the,size;private,void,write,blob,multipart,blob,info,blob,info,input,stream,input,stream,long,blob,size,throws,ioexception,assert,blob,size,large,blob,uploads,should,use,the,resumable,upload,method,final,byte,array,output,stream,baos,new,byte,array,output,stream,math,to,int,exact,blob,size,streams,copy,input,stream,baos,socket,access,do,privileged,void,ioexception,try,storage,create,blob,info,baos,to,byte,array,storage,blob,target,option,does,not,exist,catch,storage,exception,se,if,se,get,code,throw,new,file,already,exists,exception,blob,info,get,blob,id,get,name,null,se,get,message,throw,se
GoogleCloudStorageBlobStore -> private void writeBlobMultipart(BlobInfo blobInfo, InputStream inputStream, long blobSize) throws IOException;1529341607;Uploads a blob using the "multipart upload" method (a single_'multipart/related' request containing both data and metadata. The request is_gziped), see:_https://cloud.google.com/storage/docs/json_api/v1/how-tos/multipart-upload__@param blobInfo the info for the blob to be uploaded_@param inputStream the stream containing the blob data_@param blobSize the size;private void writeBlobMultipart(BlobInfo blobInfo, InputStream inputStream, long blobSize) throws IOException {_        assert blobSize <= LARGE_BLOB_THRESHOLD_BYTE_SIZE : "large blob uploads should use the resumable upload method"__        final ByteArrayOutputStream baos = new ByteArrayOutputStream(Math.toIntExact(blobSize))__        Streams.copy(inputStream, baos)__        try {_            SocketAccess.doPrivilegedVoidIOException(_                    () -> client().create(blobInfo, baos.toByteArray(), Storage.BlobTargetOption.doesNotExist()))__        } catch (final StorageException se) {_            if (se.getCode() == HTTP_PRECON_FAILED) {_                throw new FileAlreadyExistsException(blobInfo.getBlobId().getName(), null, se.getMessage())__            }_            throw se__        }_    };uploads,a,blob,using,the,multipart,upload,method,a,single,multipart,related,request,containing,both,data,and,metadata,the,request,is,gziped,see,https,cloud,google,com,storage,docs,v1,how,tos,multipart,upload,param,blob,info,the,info,for,the,blob,to,be,uploaded,param,input,stream,the,stream,containing,the,blob,data,param,blob,size,the,size;private,void,write,blob,multipart,blob,info,blob,info,input,stream,input,stream,long,blob,size,throws,ioexception,assert,blob,size,large,blob,uploads,should,use,the,resumable,upload,method,final,byte,array,output,stream,baos,new,byte,array,output,stream,math,to,int,exact,blob,size,streams,copy,input,stream,baos,try,socket,access,do,privileged,void,ioexception,client,create,blob,info,baos,to,byte,array,storage,blob,target,option,does,not,exist,catch,final,storage,exception,se,if,se,get,code,throw,new,file,already,exists,exception,blob,info,get,blob,id,get,name,null,se,get,message,throw,se
GoogleCloudStorageBlobStore -> Map<String, BlobMetaData> listBlobsByPrefix(String path, String prefix) throws IOException;1524684173;List all blobs in the bucket which have a prefix__@param path   base path of the blobs to list_@param prefix prefix of the blobs to list_@return a map of blob names and their metadata;Map<String, BlobMetaData> listBlobsByPrefix(String path, String prefix) throws IOException {_        return SocketAccess.doPrivilegedIOException(() -> listBlobsByPath(bucket, buildKey(path, prefix), path))__    };list,all,blobs,in,the,bucket,which,have,a,prefix,param,path,base,path,of,the,blobs,to,list,param,prefix,prefix,of,the,blobs,to,list,return,a,map,of,blob,names,and,their,metadata;map,string,blob,meta,data,list,blobs,by,prefix,string,path,string,prefix,throws,ioexception,return,socket,access,do,privileged,ioexception,list,blobs,by,path,bucket,build,key,path,prefix,path
GoogleCloudStorageBlobStore -> Map<String, BlobMetaData> listBlobsByPrefix(String path, String prefix) throws IOException;1526449283;List all blobs in the bucket which have a prefix__@param path_base path of the blobs to list. This path is removed from the_names of the blobs returned._@param prefix_prefix of the blobs to list._@return a map of blob names and their metadata.;Map<String, BlobMetaData> listBlobsByPrefix(String path, String prefix) throws IOException {_        final String pathPrefix = buildKey(path, prefix)__        final MapBuilder<String, BlobMetaData> mapBuilder = MapBuilder.newMapBuilder()__        SocketAccess.doPrivilegedVoidIOException(() -> {_            storage.get(bucket).list(BlobListOption.prefix(pathPrefix)).iterateAll().forEach(blob -> {_                assert blob.getName().startsWith(path)__                final String suffixName = blob.getName().substring(path.length())__                mapBuilder.put(suffixName, new PlainBlobMetaData(suffixName, blob.getSize()))__            })__        })__        return mapBuilder.immutableMap()__    };list,all,blobs,in,the,bucket,which,have,a,prefix,param,path,base,path,of,the,blobs,to,list,this,path,is,removed,from,the,names,of,the,blobs,returned,param,prefix,prefix,of,the,blobs,to,list,return,a,map,of,blob,names,and,their,metadata;map,string,blob,meta,data,list,blobs,by,prefix,string,path,string,prefix,throws,ioexception,final,string,path,prefix,build,key,path,prefix,final,map,builder,string,blob,meta,data,map,builder,map,builder,new,map,builder,socket,access,do,privileged,void,ioexception,storage,get,bucket,list,blob,list,option,prefix,path,prefix,iterate,all,for,each,blob,assert,blob,get,name,starts,with,path,final,string,suffix,name,blob,get,name,substring,path,length,map,builder,put,suffix,name,new,plain,blob,meta,data,suffix,name,blob,get,size,return,map,builder,immutable,map
GoogleCloudStorageBlobStore -> Map<String, BlobMetaData> listBlobsByPrefix(String path, String prefix) throws IOException;1526574077;List all blobs in the bucket which have a prefix__@param path_base path of the blobs to list. This path is removed from the_names of the blobs returned._@param prefix_prefix of the blobs to list._@return a map of blob names and their metadata.;Map<String, BlobMetaData> listBlobsByPrefix(String path, String prefix) throws IOException {_        final String pathPrefix = buildKey(path, prefix)__        final MapBuilder<String, BlobMetaData> mapBuilder = MapBuilder.newMapBuilder()__        SocketAccess.doPrivilegedVoidIOException(() -> {_            storage.get(bucket).list(BlobListOption.prefix(pathPrefix)).iterateAll().forEach(blob -> {_                assert blob.getName().startsWith(path)__                final String suffixName = blob.getName().substring(path.length())__                mapBuilder.put(suffixName, new PlainBlobMetaData(suffixName, blob.getSize()))__            })__        })__        return mapBuilder.immutableMap()__    };list,all,blobs,in,the,bucket,which,have,a,prefix,param,path,base,path,of,the,blobs,to,list,this,path,is,removed,from,the,names,of,the,blobs,returned,param,prefix,prefix,of,the,blobs,to,list,return,a,map,of,blob,names,and,their,metadata;map,string,blob,meta,data,list,blobs,by,prefix,string,path,string,prefix,throws,ioexception,final,string,path,prefix,build,key,path,prefix,final,map,builder,string,blob,meta,data,map,builder,map,builder,new,map,builder,socket,access,do,privileged,void,ioexception,storage,get,bucket,list,blob,list,option,prefix,path,prefix,iterate,all,for,each,blob,assert,blob,get,name,starts,with,path,final,string,suffix,name,blob,get,name,substring,path,length,map,builder,put,suffix,name,new,plain,blob,meta,data,suffix,name,blob,get,size,return,map,builder,immutable,map
GoogleCloudStorageBlobStore -> Map<String, BlobMetaData> listBlobsByPrefix(String path, String prefix) throws IOException;1528706846;List all blobs in the bucket which have a prefix__@param path_base path of the blobs to list. This path is removed from the_names of the blobs returned._@param prefix_prefix of the blobs to list._@return a map of blob names and their metadata.;Map<String, BlobMetaData> listBlobsByPrefix(String path, String prefix) throws IOException {_        final String pathPrefix = buildKey(path, prefix)__        final MapBuilder<String, BlobMetaData> mapBuilder = MapBuilder.newMapBuilder()__        SocketAccess.doPrivilegedVoidIOException(() -> {_            storage.get(bucket).list(BlobListOption.prefix(pathPrefix)).iterateAll().forEach(blob -> {_                assert blob.getName().startsWith(path)__                final String suffixName = blob.getName().substring(path.length())__                mapBuilder.put(suffixName, new PlainBlobMetaData(suffixName, blob.getSize()))__            })__        })__        return mapBuilder.immutableMap()__    };list,all,blobs,in,the,bucket,which,have,a,prefix,param,path,base,path,of,the,blobs,to,list,this,path,is,removed,from,the,names,of,the,blobs,returned,param,prefix,prefix,of,the,blobs,to,list,return,a,map,of,blob,names,and,their,metadata;map,string,blob,meta,data,list,blobs,by,prefix,string,path,string,prefix,throws,ioexception,final,string,path,prefix,build,key,path,prefix,final,map,builder,string,blob,meta,data,map,builder,map,builder,new,map,builder,socket,access,do,privileged,void,ioexception,storage,get,bucket,list,blob,list,option,prefix,path,prefix,iterate,all,for,each,blob,assert,blob,get,name,starts,with,path,final,string,suffix,name,blob,get,name,substring,path,length,map,builder,put,suffix,name,new,plain,blob,meta,data,suffix,name,blob,get,size,return,map,builder,immutable,map
GoogleCloudStorageBlobStore -> Map<String, BlobMetaData> listBlobsByPrefix(String path, String prefix) throws IOException;1529341607;List all blobs in the specific bucket with names prefixed__@param path_base path of the blobs to list. This path is removed from the_names of the blobs returned._@param prefix prefix of the blobs to list._@return a map of blob names and their metadata.;Map<String, BlobMetaData> listBlobsByPrefix(String path, String prefix) throws IOException {_        final String pathPrefix = buildKey(path, prefix)__        final MapBuilder<String, BlobMetaData> mapBuilder = MapBuilder.newMapBuilder()__        SocketAccess.doPrivilegedVoidIOException(() -> {_            client().get(bucketName).list(BlobListOption.prefix(pathPrefix)).iterateAll().forEach(blob -> {_                assert blob.getName().startsWith(path)__                final String suffixName = blob.getName().substring(path.length())__                mapBuilder.put(suffixName, new PlainBlobMetaData(suffixName, blob.getSize()))__            })__        })__        return mapBuilder.immutableMap()__    };list,all,blobs,in,the,specific,bucket,with,names,prefixed,param,path,base,path,of,the,blobs,to,list,this,path,is,removed,from,the,names,of,the,blobs,returned,param,prefix,prefix,of,the,blobs,to,list,return,a,map,of,blob,names,and,their,metadata;map,string,blob,meta,data,list,blobs,by,prefix,string,path,string,prefix,throws,ioexception,final,string,path,prefix,build,key,path,prefix,final,map,builder,string,blob,meta,data,map,builder,map,builder,new,map,builder,socket,access,do,privileged,void,ioexception,client,get,bucket,name,list,blob,list,option,prefix,path,prefix,iterate,all,for,each,blob,assert,blob,get,name,starts,with,path,final,string,suffix,name,blob,get,name,substring,path,length,map,builder,put,suffix,name,new,plain,blob,meta,data,suffix,name,blob,get,size,return,map,builder,immutable,map
GoogleCloudStorageBlobStore -> Map<String, BlobMetaData> listBlobsByPrefix(String path, String prefix) throws IOException;1531179852;List all blobs in the specific bucket with names prefixed__@param path_base path of the blobs to list. This path is removed from the_names of the blobs returned._@param prefix prefix of the blobs to list._@return a map of blob names and their metadata.;Map<String, BlobMetaData> listBlobsByPrefix(String path, String prefix) throws IOException {_        final String pathPrefix = buildKey(path, prefix)__        final MapBuilder<String, BlobMetaData> mapBuilder = MapBuilder.newMapBuilder()__        SocketAccess.doPrivilegedVoidIOException(() -> {_            client().get(bucketName).list(BlobListOption.prefix(pathPrefix)).iterateAll().forEach(blob -> {_                assert blob.getName().startsWith(path)__                final String suffixName = blob.getName().substring(path.length())__                mapBuilder.put(suffixName, new PlainBlobMetaData(suffixName, blob.getSize()))__            })__        })__        return mapBuilder.immutableMap()__    };list,all,blobs,in,the,specific,bucket,with,names,prefixed,param,path,base,path,of,the,blobs,to,list,this,path,is,removed,from,the,names,of,the,blobs,returned,param,prefix,prefix,of,the,blobs,to,list,return,a,map,of,blob,names,and,their,metadata;map,string,blob,meta,data,list,blobs,by,prefix,string,path,string,prefix,throws,ioexception,final,string,path,prefix,build,key,path,prefix,final,map,builder,string,blob,meta,data,map,builder,map,builder,new,map,builder,socket,access,do,privileged,void,ioexception,client,get,bucket,name,list,blob,list,option,prefix,path,prefix,iterate,all,for,each,blob,assert,blob,get,name,starts,with,path,final,string,suffix,name,blob,get,name,substring,path,length,map,builder,put,suffix,name,new,plain,blob,meta,data,suffix,name,blob,get,size,return,map,builder,immutable,map
GoogleCloudStorageBlobStore -> Map<String, BlobMetaData> listBlobsByPrefix(String path, String prefix) throws IOException;1541092382;List all blobs in the specific bucket with names prefixed__@param path_base path of the blobs to list. This path is removed from the_names of the blobs returned._@param prefix prefix of the blobs to list._@return a map of blob names and their metadata.;Map<String, BlobMetaData> listBlobsByPrefix(String path, String prefix) throws IOException {_        final String pathPrefix = buildKey(path, prefix)__        final MapBuilder<String, BlobMetaData> mapBuilder = MapBuilder.newMapBuilder()__        SocketAccess.doPrivilegedVoidIOException(() -> {_            client().get(bucketName).list(BlobListOption.prefix(pathPrefix)).iterateAll().forEach(blob -> {_                assert blob.getName().startsWith(path)__                final String suffixName = blob.getName().substring(path.length())__                mapBuilder.put(suffixName, new PlainBlobMetaData(suffixName, blob.getSize()))__            })__        })__        return mapBuilder.immutableMap()__    };list,all,blobs,in,the,specific,bucket,with,names,prefixed,param,path,base,path,of,the,blobs,to,list,this,path,is,removed,from,the,names,of,the,blobs,returned,param,prefix,prefix,of,the,blobs,to,list,return,a,map,of,blob,names,and,their,metadata;map,string,blob,meta,data,list,blobs,by,prefix,string,path,string,prefix,throws,ioexception,final,string,path,prefix,build,key,path,prefix,final,map,builder,string,blob,meta,data,map,builder,map,builder,new,map,builder,socket,access,do,privileged,void,ioexception,client,get,bucket,name,list,blob,list,option,prefix,path,prefix,iterate,all,for,each,blob,assert,blob,get,name,starts,with,path,final,string,suffix,name,blob,get,name,substring,path,length,map,builder,put,suffix,name,new,plain,blob,meta,data,suffix,name,blob,get,size,return,map,builder,immutable,map
GoogleCloudStorageBlobStore -> Map<String, BlobMetaData> listBlobsByPrefix(String path, String prefix) throws IOException;1542397818;List all blobs in the specific bucket with names prefixed__@param path_base path of the blobs to list. This path is removed from the_names of the blobs returned._@param prefix prefix of the blobs to list._@return a map of blob names and their metadata.;Map<String, BlobMetaData> listBlobsByPrefix(String path, String prefix) throws IOException {_        final String pathPrefix = buildKey(path, prefix)__        final MapBuilder<String, BlobMetaData> mapBuilder = MapBuilder.newMapBuilder()__        SocketAccess.doPrivilegedVoidIOException(() -> {_            client().get(bucketName).list(BlobListOption.prefix(pathPrefix)).iterateAll().forEach(blob -> {_                assert blob.getName().startsWith(path)__                final String suffixName = blob.getName().substring(path.length())__                mapBuilder.put(suffixName, new PlainBlobMetaData(suffixName, blob.getSize()))__            })__        })__        return mapBuilder.immutableMap()__    };list,all,blobs,in,the,specific,bucket,with,names,prefixed,param,path,base,path,of,the,blobs,to,list,this,path,is,removed,from,the,names,of,the,blobs,returned,param,prefix,prefix,of,the,blobs,to,list,return,a,map,of,blob,names,and,their,metadata;map,string,blob,meta,data,list,blobs,by,prefix,string,path,string,prefix,throws,ioexception,final,string,path,prefix,build,key,path,prefix,final,map,builder,string,blob,meta,data,map,builder,map,builder,new,map,builder,socket,access,do,privileged,void,ioexception,client,get,bucket,name,list,blob,list,option,prefix,path,prefix,iterate,all,for,each,blob,assert,blob,get,name,starts,with,path,final,string,suffix,name,blob,get,name,substring,path,length,map,builder,put,suffix,name,new,plain,blob,meta,data,suffix,name,blob,get,size,return,map,builder,immutable,map
GoogleCloudStorageBlobStore -> boolean blobExists(String blobName) throws IOException;1524684173;Returns true if the blob exists in the bucket__@param blobName name of the blob_@return true if the blob exists, false otherwise;boolean blobExists(String blobName) throws IOException {_        try {_            StorageObject blob = SocketAccess.doPrivilegedIOException(() -> client.objects().get(bucket, blobName).execute())__            if (blob != null) {_                return Strings.hasText(blob.getId())__            }_        } catch (GoogleJsonResponseException e) {_            GoogleJsonError error = e.getDetails()__            if ((e.getStatusCode() == HTTP_NOT_FOUND) || ((error != null) && (error.getCode() == HTTP_NOT_FOUND))) {_                return false__            }_            throw e__        }_        return false__    };returns,true,if,the,blob,exists,in,the,bucket,param,blob,name,name,of,the,blob,return,true,if,the,blob,exists,false,otherwise;boolean,blob,exists,string,blob,name,throws,ioexception,try,storage,object,blob,socket,access,do,privileged,ioexception,client,objects,get,bucket,blob,name,execute,if,blob,null,return,strings,has,text,blob,get,id,catch,google,json,response,exception,e,google,json,error,error,e,get,details,if,e,get,status,code,error,null,error,get,code,return,false,throw,e,return,false
GoogleCloudStorageBlobStore -> boolean blobExists(String blobName) throws IOException;1526449283;Returns true if the blob exists in the bucket__@param blobName name of the blob_@return true if the blob exists, false otherwise;boolean blobExists(String blobName) throws IOException {_        final BlobId blobId = BlobId.of(bucket, blobName)__        final Blob blob = SocketAccess.doPrivilegedIOException(() -> storage.get(blobId))__        return blob != null__    };returns,true,if,the,blob,exists,in,the,bucket,param,blob,name,name,of,the,blob,return,true,if,the,blob,exists,false,otherwise;boolean,blob,exists,string,blob,name,throws,ioexception,final,blob,id,blob,id,blob,id,of,bucket,blob,name,final,blob,blob,socket,access,do,privileged,ioexception,storage,get,blob,id,return,blob,null
GoogleCloudStorageBlobStore -> boolean blobExists(String blobName) throws IOException;1526574077;Returns true if the blob exists in the bucket__@param blobName name of the blob_@return true if the blob exists, false otherwise;boolean blobExists(String blobName) throws IOException {_        final BlobId blobId = BlobId.of(bucket, blobName)__        final Blob blob = SocketAccess.doPrivilegedIOException(() -> storage.get(blobId))__        return blob != null__    };returns,true,if,the,blob,exists,in,the,bucket,param,blob,name,name,of,the,blob,return,true,if,the,blob,exists,false,otherwise;boolean,blob,exists,string,blob,name,throws,ioexception,final,blob,id,blob,id,blob,id,of,bucket,blob,name,final,blob,blob,socket,access,do,privileged,ioexception,storage,get,blob,id,return,blob,null
GoogleCloudStorageBlobStore -> boolean blobExists(String blobName) throws IOException;1528706846;Returns true if the blob exists in the bucket__@param blobName name of the blob_@return true if the blob exists, false otherwise;boolean blobExists(String blobName) throws IOException {_        final BlobId blobId = BlobId.of(bucket, blobName)__        final Blob blob = SocketAccess.doPrivilegedIOException(() -> storage.get(blobId))__        return blob != null__    };returns,true,if,the,blob,exists,in,the,bucket,param,blob,name,name,of,the,blob,return,true,if,the,blob,exists,false,otherwise;boolean,blob,exists,string,blob,name,throws,ioexception,final,blob,id,blob,id,blob,id,of,bucket,blob,name,final,blob,blob,socket,access,do,privileged,ioexception,storage,get,blob,id,return,blob,null
GoogleCloudStorageBlobStore -> boolean blobExists(String blobName) throws IOException;1529341607;Returns true if the blob exists in the specific bucket__@param blobName name of the blob_@return true iff the blob exists;boolean blobExists(String blobName) throws IOException {_        final BlobId blobId = BlobId.of(bucketName, blobName)__        final Blob blob = SocketAccess.doPrivilegedIOException(() -> client().get(blobId))__        return blob != null__    };returns,true,if,the,blob,exists,in,the,specific,bucket,param,blob,name,name,of,the,blob,return,true,iff,the,blob,exists;boolean,blob,exists,string,blob,name,throws,ioexception,final,blob,id,blob,id,blob,id,of,bucket,name,blob,name,final,blob,blob,socket,access,do,privileged,ioexception,client,get,blob,id,return,blob,null
GoogleCloudStorageBlobStore -> boolean blobExists(String blobName) throws IOException;1531179852;Returns true if the blob exists in the specific bucket__@param blobName name of the blob_@return true iff the blob exists;boolean blobExists(String blobName) throws IOException {_        final BlobId blobId = BlobId.of(bucketName, blobName)__        final Blob blob = SocketAccess.doPrivilegedIOException(() -> client().get(blobId))__        return blob != null__    };returns,true,if,the,blob,exists,in,the,specific,bucket,param,blob,name,name,of,the,blob,return,true,iff,the,blob,exists;boolean,blob,exists,string,blob,name,throws,ioexception,final,blob,id,blob,id,blob,id,of,bucket,name,blob,name,final,blob,blob,socket,access,do,privileged,ioexception,client,get,blob,id,return,blob,null
GoogleCloudStorageBlobStore -> boolean blobExists(String blobName) throws IOException;1541092382;Returns true if the blob exists in the specific bucket__@param blobName name of the blob_@return true iff the blob exists;boolean blobExists(String blobName) throws IOException {_        final BlobId blobId = BlobId.of(bucketName, blobName)__        final Blob blob = SocketAccess.doPrivilegedIOException(() -> client().get(blobId))__        return blob != null__    };returns,true,if,the,blob,exists,in,the,specific,bucket,param,blob,name,name,of,the,blob,return,true,iff,the,blob,exists;boolean,blob,exists,string,blob,name,throws,ioexception,final,blob,id,blob,id,blob,id,of,bucket,name,blob,name,final,blob,blob,socket,access,do,privileged,ioexception,client,get,blob,id,return,blob,null
GoogleCloudStorageBlobStore -> boolean blobExists(String blobName) throws IOException;1542397818;Returns true if the blob exists in the specific bucket__@param blobName name of the blob_@return true iff the blob exists;boolean blobExists(String blobName) throws IOException {_        final BlobId blobId = BlobId.of(bucketName, blobName)__        final Blob blob = SocketAccess.doPrivilegedIOException(() -> client().get(blobId))__        return blob != null__    };returns,true,if,the,blob,exists,in,the,specific,bucket,param,blob,name,name,of,the,blob,return,true,iff,the,blob,exists;boolean,blob,exists,string,blob,name,throws,ioexception,final,blob,id,blob,id,blob,id,of,bucket,name,blob,name,final,blob,blob,socket,access,do,privileged,ioexception,client,get,blob,id,return,blob,null
GoogleCloudStorageBlobStore -> void deleteBlobsByPrefix(String prefix) throws IOException;1524684173;Deletes multiple blobs in the bucket that have a given prefix__@param prefix prefix of the buckets to delete;void deleteBlobsByPrefix(String prefix) throws IOException {_        deleteBlobs(listBlobsByPath(bucket, prefix, null).keySet())__    };deletes,multiple,blobs,in,the,bucket,that,have,a,given,prefix,param,prefix,prefix,of,the,buckets,to,delete;void,delete,blobs,by,prefix,string,prefix,throws,ioexception,delete,blobs,list,blobs,by,path,bucket,prefix,null,key,set
GoogleCloudStorageBlobStore -> void deleteBlobsByPrefix(String prefix) throws IOException;1526449283;Deletes multiple blobs in the bucket that have a given prefix__@param prefix prefix of the buckets to delete;void deleteBlobsByPrefix(String prefix) throws IOException {_        deleteBlobs(listBlobsByPrefix("", prefix).keySet())__    };deletes,multiple,blobs,in,the,bucket,that,have,a,given,prefix,param,prefix,prefix,of,the,buckets,to,delete;void,delete,blobs,by,prefix,string,prefix,throws,ioexception,delete,blobs,list,blobs,by,prefix,prefix,key,set
GoogleCloudStorageBlobStore -> void deleteBlobsByPrefix(String prefix) throws IOException;1526574077;Deletes multiple blobs in the bucket that have a given prefix__@param prefix prefix of the buckets to delete;void deleteBlobsByPrefix(String prefix) throws IOException {_        deleteBlobs(listBlobsByPrefix("", prefix).keySet())__    };deletes,multiple,blobs,in,the,bucket,that,have,a,given,prefix,param,prefix,prefix,of,the,buckets,to,delete;void,delete,blobs,by,prefix,string,prefix,throws,ioexception,delete,blobs,list,blobs,by,prefix,prefix,key,set
GoogleCloudStorageBlobStore -> void deleteBlobsByPrefix(String prefix) throws IOException;1528706846;Deletes multiple blobs in the bucket that have a given prefix__@param prefix prefix of the buckets to delete;void deleteBlobsByPrefix(String prefix) throws IOException {_        deleteBlobs(listBlobsByPrefix("", prefix).keySet())__    };deletes,multiple,blobs,in,the,bucket,that,have,a,given,prefix,param,prefix,prefix,of,the,buckets,to,delete;void,delete,blobs,by,prefix,string,prefix,throws,ioexception,delete,blobs,list,blobs,by,prefix,prefix,key,set
GoogleCloudStorageBlobStore -> void deleteBlobsByPrefix(String prefix) throws IOException;1529341607;Deletes multiple blobs from the specific bucket all of which have prefixed names__@param prefix prefix of the blobs to delete;void deleteBlobsByPrefix(String prefix) throws IOException {_        deleteBlobs(listBlobsByPrefix("", prefix).keySet())__    };deletes,multiple,blobs,from,the,specific,bucket,all,of,which,have,prefixed,names,param,prefix,prefix,of,the,blobs,to,delete;void,delete,blobs,by,prefix,string,prefix,throws,ioexception,delete,blobs,list,blobs,by,prefix,prefix,key,set
GoogleCloudStorageBlobStore -> void deleteBlobsByPrefix(String prefix) throws IOException;1531179852;Deletes multiple blobs from the specific bucket all of which have prefixed names__@param prefix prefix of the blobs to delete;void deleteBlobsByPrefix(String prefix) throws IOException {_        deleteBlobs(listBlobsByPrefix("", prefix).keySet())__    };deletes,multiple,blobs,from,the,specific,bucket,all,of,which,have,prefixed,names,param,prefix,prefix,of,the,blobs,to,delete;void,delete,blobs,by,prefix,string,prefix,throws,ioexception,delete,blobs,list,blobs,by,prefix,prefix,key,set
GoogleCloudStorageBlobStore -> void deleteBlobsByPrefix(String prefix) throws IOException;1541092382;Deletes multiple blobs from the specific bucket all of which have prefixed names__@param prefix prefix of the blobs to delete;void deleteBlobsByPrefix(String prefix) throws IOException {_        deleteBlobs(listBlobsByPrefix("", prefix).keySet())__    };deletes,multiple,blobs,from,the,specific,bucket,all,of,which,have,prefixed,names,param,prefix,prefix,of,the,blobs,to,delete;void,delete,blobs,by,prefix,string,prefix,throws,ioexception,delete,blobs,list,blobs,by,prefix,prefix,key,set
GoogleCloudStorageBlobStore -> void deleteBlobsByPrefix(String prefix) throws IOException;1542397818;Deletes multiple blobs from the specific bucket all of which have prefixed names__@param prefix prefix of the blobs to delete;void deleteBlobsByPrefix(String prefix) throws IOException {_        deleteBlobs(listBlobsByPrefix("", prefix).keySet())__    };deletes,multiple,blobs,from,the,specific,bucket,all,of,which,have,prefixed,names,param,prefix,prefix,of,the,blobs,to,delete;void,delete,blobs,by,prefix,string,prefix,throws,ioexception,delete,blobs,list,blobs,by,prefix,prefix,key,set
GoogleCloudStorageBlobStore -> void writeBlob(String blobName, InputStream inputStream, long blobSize) throws IOException;1524684173;Writes a blob in the bucket.__@param inputStream content of the blob to be written_@param blobSize    expected size of the blob to be written;void writeBlob(String blobName, InputStream inputStream, long blobSize) throws IOException {_        SocketAccess.doPrivilegedVoidIOException(() -> {_            InputStreamContent stream = new InputStreamContent(null, inputStream)__            stream.setLength(blobSize)___            Storage.Objects.Insert insert = client.objects().insert(bucket, null, stream)__            insert.setName(blobName)__            insert.execute()__        })__    };writes,a,blob,in,the,bucket,param,input,stream,content,of,the,blob,to,be,written,param,blob,size,expected,size,of,the,blob,to,be,written;void,write,blob,string,blob,name,input,stream,input,stream,long,blob,size,throws,ioexception,socket,access,do,privileged,void,ioexception,input,stream,content,stream,new,input,stream,content,null,input,stream,stream,set,length,blob,size,storage,objects,insert,insert,client,objects,insert,bucket,null,stream,insert,set,name,blob,name,insert,execute
GoogleCloudStorageBlobStore -> void writeBlob(String blobName, InputStream inputStream, long blobSize) throws IOException;1526449283;Writes a blob in the bucket.__@param inputStream content of the blob to be written_@param blobSize    expected size of the blob to be written;void writeBlob(String blobName, InputStream inputStream, long blobSize) throws IOException {_        final BlobInfo blobInfo = BlobInfo.newBuilder(bucket, blobName).build()__        if (blobSize > LARGE_BLOB_THRESHOLD_BYTE_SIZE) {_            writeBlobResumable(blobInfo, inputStream)__        } else {_            writeBlobMultipart(blobInfo, inputStream, blobSize)__        }_    };writes,a,blob,in,the,bucket,param,input,stream,content,of,the,blob,to,be,written,param,blob,size,expected,size,of,the,blob,to,be,written;void,write,blob,string,blob,name,input,stream,input,stream,long,blob,size,throws,ioexception,final,blob,info,blob,info,blob,info,new,builder,bucket,blob,name,build,if,blob,size,write,blob,resumable,blob,info,input,stream,else,write,blob,multipart,blob,info,input,stream,blob,size
GoogleCloudStorageBlobStore -> void writeBlob(String blobName, InputStream inputStream, long blobSize) throws IOException;1526574077;Writes a blob in the bucket.__@param inputStream content of the blob to be written_@param blobSize    expected size of the blob to be written;void writeBlob(String blobName, InputStream inputStream, long blobSize) throws IOException {_        final BlobInfo blobInfo = BlobInfo.newBuilder(bucket, blobName).build()__        if (blobSize > LARGE_BLOB_THRESHOLD_BYTE_SIZE) {_            writeBlobResumable(blobInfo, inputStream)__        } else {_            writeBlobMultipart(blobInfo, inputStream, blobSize)__        }_    };writes,a,blob,in,the,bucket,param,input,stream,content,of,the,blob,to,be,written,param,blob,size,expected,size,of,the,blob,to,be,written;void,write,blob,string,blob,name,input,stream,input,stream,long,blob,size,throws,ioexception,final,blob,info,blob,info,blob,info,new,builder,bucket,blob,name,build,if,blob,size,write,blob,resumable,blob,info,input,stream,else,write,blob,multipart,blob,info,input,stream,blob,size
GoogleCloudStorageBlobStore -> void writeBlob(String blobName, InputStream inputStream, long blobSize) throws IOException;1528706846;Writes a blob in the bucket.__@param inputStream content of the blob to be written_@param blobSize    expected size of the blob to be written;void writeBlob(String blobName, InputStream inputStream, long blobSize) throws IOException {_        final BlobInfo blobInfo = BlobInfo.newBuilder(bucket, blobName).build()__        if (blobSize > LARGE_BLOB_THRESHOLD_BYTE_SIZE) {_            writeBlobResumable(blobInfo, inputStream)__        } else {_            writeBlobMultipart(blobInfo, inputStream, blobSize)__        }_    };writes,a,blob,in,the,bucket,param,input,stream,content,of,the,blob,to,be,written,param,blob,size,expected,size,of,the,blob,to,be,written;void,write,blob,string,blob,name,input,stream,input,stream,long,blob,size,throws,ioexception,final,blob,info,blob,info,blob,info,new,builder,bucket,blob,name,build,if,blob,size,write,blob,resumable,blob,info,input,stream,else,write,blob,multipart,blob,info,input,stream,blob,size
GoogleCloudStorageBlobStore -> void writeBlob(String blobName, InputStream inputStream, long blobSize) throws IOException;1529341607;Writes a blob in the specific bucket__@param inputStream content of the blob to be written_@param blobSize    expected size of the blob to be written;void writeBlob(String blobName, InputStream inputStream, long blobSize) throws IOException {_        final BlobInfo blobInfo = BlobInfo.newBuilder(bucketName, blobName).build()__        if (blobSize > LARGE_BLOB_THRESHOLD_BYTE_SIZE) {_            writeBlobResumable(blobInfo, inputStream)__        } else {_            writeBlobMultipart(blobInfo, inputStream, blobSize)__        }_    };writes,a,blob,in,the,specific,bucket,param,input,stream,content,of,the,blob,to,be,written,param,blob,size,expected,size,of,the,blob,to,be,written;void,write,blob,string,blob,name,input,stream,input,stream,long,blob,size,throws,ioexception,final,blob,info,blob,info,blob,info,new,builder,bucket,name,blob,name,build,if,blob,size,write,blob,resumable,blob,info,input,stream,else,write,blob,multipart,blob,info,input,stream,blob,size
GoogleCloudStorageBlobStore -> void deleteBlob(String blobName) throws IOException;1524684173;Deletes a blob in the bucket__@param blobName name of the blob;void deleteBlob(String blobName) throws IOException {_        if (!blobExists(blobName)) {_            throw new NoSuchFileException("Blob [" + blobName + "] does not exist")__        }_        SocketAccess.doPrivilegedIOException(() -> client.objects().delete(bucket, blobName).execute())__    };deletes,a,blob,in,the,bucket,param,blob,name,name,of,the,blob;void,delete,blob,string,blob,name,throws,ioexception,if,blob,exists,blob,name,throw,new,no,such,file,exception,blob,blob,name,does,not,exist,socket,access,do,privileged,ioexception,client,objects,delete,bucket,blob,name,execute
GoogleCloudStorageBlobStore -> void deleteBlob(String blobName) throws IOException;1526449283;Deletes a blob in the bucket__@param blobName name of the blob;void deleteBlob(String blobName) throws IOException {_        final BlobId blobId = BlobId.of(bucket, blobName)__        final boolean deleted = SocketAccess.doPrivilegedIOException(() -> storage.delete(blobId))__        if (deleted == false) {_            throw new NoSuchFileException("Blob [" + blobName + "] does not exist")__        }_    };deletes,a,blob,in,the,bucket,param,blob,name,name,of,the,blob;void,delete,blob,string,blob,name,throws,ioexception,final,blob,id,blob,id,blob,id,of,bucket,blob,name,final,boolean,deleted,socket,access,do,privileged,ioexception,storage,delete,blob,id,if,deleted,false,throw,new,no,such,file,exception,blob,blob,name,does,not,exist
GoogleCloudStorageBlobStore -> void deleteBlob(String blobName) throws IOException;1526574077;Deletes a blob in the bucket__@param blobName name of the blob;void deleteBlob(String blobName) throws IOException {_        final BlobId blobId = BlobId.of(bucket, blobName)__        final boolean deleted = SocketAccess.doPrivilegedIOException(() -> storage.delete(blobId))__        if (deleted == false) {_            throw new NoSuchFileException("Blob [" + blobName + "] does not exist")__        }_    };deletes,a,blob,in,the,bucket,param,blob,name,name,of,the,blob;void,delete,blob,string,blob,name,throws,ioexception,final,blob,id,blob,id,blob,id,of,bucket,blob,name,final,boolean,deleted,socket,access,do,privileged,ioexception,storage,delete,blob,id,if,deleted,false,throw,new,no,such,file,exception,blob,blob,name,does,not,exist
GoogleCloudStorageBlobStore -> void deleteBlob(String blobName) throws IOException;1528706846;Deletes a blob in the bucket__@param blobName name of the blob;void deleteBlob(String blobName) throws IOException {_        final BlobId blobId = BlobId.of(bucket, blobName)__        final boolean deleted = SocketAccess.doPrivilegedIOException(() -> storage.delete(blobId))__        if (deleted == false) {_            throw new NoSuchFileException("Blob [" + blobName + "] does not exist")__        }_    };deletes,a,blob,in,the,bucket,param,blob,name,name,of,the,blob;void,delete,blob,string,blob,name,throws,ioexception,final,blob,id,blob,id,blob,id,of,bucket,blob,name,final,boolean,deleted,socket,access,do,privileged,ioexception,storage,delete,blob,id,if,deleted,false,throw,new,no,such,file,exception,blob,blob,name,does,not,exist
GoogleCloudStorageBlobStore -> void deleteBlob(String blobName) throws IOException;1529341607;Deletes the blob from the specific bucket__@param blobName name of the blob;void deleteBlob(String blobName) throws IOException {_        final BlobId blobId = BlobId.of(bucketName, blobName)__        final boolean deleted = SocketAccess.doPrivilegedIOException(() -> client().delete(blobId))__        if (deleted == false) {_            throw new NoSuchFileException("Blob [" + blobName + "] does not exist")__        }_    };deletes,the,blob,from,the,specific,bucket,param,blob,name,name,of,the,blob;void,delete,blob,string,blob,name,throws,ioexception,final,blob,id,blob,id,blob,id,of,bucket,name,blob,name,final,boolean,deleted,socket,access,do,privileged,ioexception,client,delete,blob,id,if,deleted,false,throw,new,no,such,file,exception,blob,blob,name,does,not,exist
GoogleCloudStorageBlobStore -> void deleteBlob(String blobName) throws IOException;1531179852;Deletes the blob from the specific bucket__@param blobName name of the blob;void deleteBlob(String blobName) throws IOException {_        final BlobId blobId = BlobId.of(bucketName, blobName)__        final boolean deleted = SocketAccess.doPrivilegedIOException(() -> client().delete(blobId))__        if (deleted == false) {_            throw new NoSuchFileException("Blob [" + blobName + "] does not exist")__        }_    };deletes,the,blob,from,the,specific,bucket,param,blob,name,name,of,the,blob;void,delete,blob,string,blob,name,throws,ioexception,final,blob,id,blob,id,blob,id,of,bucket,name,blob,name,final,boolean,deleted,socket,access,do,privileged,ioexception,client,delete,blob,id,if,deleted,false,throw,new,no,such,file,exception,blob,blob,name,does,not,exist
GoogleCloudStorageBlobStore -> void deleteBlob(String blobName) throws IOException;1541092382;Deletes the blob from the specific bucket__@param blobName name of the blob;void deleteBlob(String blobName) throws IOException {_        final BlobId blobId = BlobId.of(bucketName, blobName)__        final boolean deleted = SocketAccess.doPrivilegedIOException(() -> client().delete(blobId))__        if (deleted == false) {_            throw new NoSuchFileException("Blob [" + blobName + "] does not exist")__        }_    };deletes,the,blob,from,the,specific,bucket,param,blob,name,name,of,the,blob;void,delete,blob,string,blob,name,throws,ioexception,final,blob,id,blob,id,blob,id,of,bucket,name,blob,name,final,boolean,deleted,socket,access,do,privileged,ioexception,client,delete,blob,id,if,deleted,false,throw,new,no,such,file,exception,blob,blob,name,does,not,exist
GoogleCloudStorageBlobStore -> void deleteBlob(String blobName) throws IOException;1542397818;Deletes the blob from the specific bucket__@param blobName name of the blob;void deleteBlob(String blobName) throws IOException {_        final BlobId blobId = BlobId.of(bucketName, blobName)__        final boolean deleted = SocketAccess.doPrivilegedIOException(() -> client().delete(blobId))__        if (deleted == false) {_            throw new NoSuchFileException("Blob [" + blobName + "] does not exist")__        }_    };deletes,the,blob,from,the,specific,bucket,param,blob,name,name,of,the,blob;void,delete,blob,string,blob,name,throws,ioexception,final,blob,id,blob,id,blob,id,of,bucket,name,blob,name,final,boolean,deleted,socket,access,do,privileged,ioexception,client,delete,blob,id,if,deleted,false,throw,new,no,such,file,exception,blob,blob,name,does,not,exist
GoogleCloudStorageBlobStore -> private void writeBlobMultipart(BlobInfo blobInfo, InputStream inputStream, long blobSize, boolean failIfAlreadyExists)         throws IOException;1531179852;Uploads a blob using the "multipart upload" method (a single_'multipart/related' request containing both data and metadata. The request is_gziped), see:_https://cloud.google.com/storage/docs/json_api/v1/how-tos/multipart-upload_@param blobInfo the info for the blob to be uploaded_@param inputStream the stream containing the blob data_@param blobSize the size_@param failIfAlreadyExists whether to throw a FileAlreadyExistsException if the given blob already exists;private void writeBlobMultipart(BlobInfo blobInfo, InputStream inputStream, long blobSize, boolean failIfAlreadyExists)_        throws IOException {_        assert blobSize <= LARGE_BLOB_THRESHOLD_BYTE_SIZE : "large blob uploads should use the resumable upload method"__        final ByteArrayOutputStream baos = new ByteArrayOutputStream(Math.toIntExact(blobSize))__        Streams.copy(inputStream, baos)__        try {_            final Storage.BlobTargetOption[] targetOptions = failIfAlreadyExists ?_                new Storage.BlobTargetOption[] { Storage.BlobTargetOption.doesNotExist() } :_                new Storage.BlobTargetOption[0]__            SocketAccess.doPrivilegedVoidIOException(_                    () -> client().create(blobInfo, baos.toByteArray(), targetOptions))__        } catch (final StorageException se) {_            if (failIfAlreadyExists && se.getCode() == HTTP_PRECON_FAILED) {_                throw new FileAlreadyExistsException(blobInfo.getBlobId().getName(), null, se.getMessage())__            }_            throw se__        }_    };uploads,a,blob,using,the,multipart,upload,method,a,single,multipart,related,request,containing,both,data,and,metadata,the,request,is,gziped,see,https,cloud,google,com,storage,docs,v1,how,tos,multipart,upload,param,blob,info,the,info,for,the,blob,to,be,uploaded,param,input,stream,the,stream,containing,the,blob,data,param,blob,size,the,size,param,fail,if,already,exists,whether,to,throw,a,file,already,exists,exception,if,the,given,blob,already,exists;private,void,write,blob,multipart,blob,info,blob,info,input,stream,input,stream,long,blob,size,boolean,fail,if,already,exists,throws,ioexception,assert,blob,size,large,blob,uploads,should,use,the,resumable,upload,method,final,byte,array,output,stream,baos,new,byte,array,output,stream,math,to,int,exact,blob,size,streams,copy,input,stream,baos,try,final,storage,blob,target,option,target,options,fail,if,already,exists,new,storage,blob,target,option,storage,blob,target,option,does,not,exist,new,storage,blob,target,option,0,socket,access,do,privileged,void,ioexception,client,create,blob,info,baos,to,byte,array,target,options,catch,final,storage,exception,se,if,fail,if,already,exists,se,get,code,throw,new,file,already,exists,exception,blob,info,get,blob,id,get,name,null,se,get,message,throw,se
GoogleCloudStorageBlobStore -> private void writeBlobMultipart(BlobInfo blobInfo, InputStream inputStream, long blobSize, boolean failIfAlreadyExists)         throws IOException;1541092382;Uploads a blob using the "multipart upload" method (a single_'multipart/related' request containing both data and metadata. The request is_gziped), see:_https://cloud.google.com/storage/docs/json_api/v1/how-tos/multipart-upload_@param blobInfo the info for the blob to be uploaded_@param inputStream the stream containing the blob data_@param blobSize the size_@param failIfAlreadyExists whether to throw a FileAlreadyExistsException if the given blob already exists;private void writeBlobMultipart(BlobInfo blobInfo, InputStream inputStream, long blobSize, boolean failIfAlreadyExists)_        throws IOException {_        assert blobSize <= LARGE_BLOB_THRESHOLD_BYTE_SIZE : "large blob uploads should use the resumable upload method"__        final ByteArrayOutputStream baos = new ByteArrayOutputStream(Math.toIntExact(blobSize))__        Streams.copy(inputStream, baos)__        try {_            final Storage.BlobTargetOption[] targetOptions = failIfAlreadyExists ?_                new Storage.BlobTargetOption[] { Storage.BlobTargetOption.doesNotExist() } :_                new Storage.BlobTargetOption[0]__            SocketAccess.doPrivilegedVoidIOException(_                    () -> client().create(blobInfo, baos.toByteArray(), targetOptions))__        } catch (final StorageException se) {_            if (failIfAlreadyExists && se.getCode() == HTTP_PRECON_FAILED) {_                throw new FileAlreadyExistsException(blobInfo.getBlobId().getName(), null, se.getMessage())__            }_            throw se__        }_    };uploads,a,blob,using,the,multipart,upload,method,a,single,multipart,related,request,containing,both,data,and,metadata,the,request,is,gziped,see,https,cloud,google,com,storage,docs,v1,how,tos,multipart,upload,param,blob,info,the,info,for,the,blob,to,be,uploaded,param,input,stream,the,stream,containing,the,blob,data,param,blob,size,the,size,param,fail,if,already,exists,whether,to,throw,a,file,already,exists,exception,if,the,given,blob,already,exists;private,void,write,blob,multipart,blob,info,blob,info,input,stream,input,stream,long,blob,size,boolean,fail,if,already,exists,throws,ioexception,assert,blob,size,large,blob,uploads,should,use,the,resumable,upload,method,final,byte,array,output,stream,baos,new,byte,array,output,stream,math,to,int,exact,blob,size,streams,copy,input,stream,baos,try,final,storage,blob,target,option,target,options,fail,if,already,exists,new,storage,blob,target,option,storage,blob,target,option,does,not,exist,new,storage,blob,target,option,0,socket,access,do,privileged,void,ioexception,client,create,blob,info,baos,to,byte,array,target,options,catch,final,storage,exception,se,if,fail,if,already,exists,se,get,code,throw,new,file,already,exists,exception,blob,info,get,blob,id,get,name,null,se,get,message,throw,se
GoogleCloudStorageBlobStore -> private void writeBlobMultipart(BlobInfo blobInfo, InputStream inputStream, long blobSize, boolean failIfAlreadyExists)         throws IOException;1542397818;Uploads a blob using the "multipart upload" method (a single_'multipart/related' request containing both data and metadata. The request is_gziped), see:_https://cloud.google.com/storage/docs/json_api/v1/how-tos/multipart-upload_@param blobInfo the info for the blob to be uploaded_@param inputStream the stream containing the blob data_@param blobSize the size_@param failIfAlreadyExists whether to throw a FileAlreadyExistsException if the given blob already exists;private void writeBlobMultipart(BlobInfo blobInfo, InputStream inputStream, long blobSize, boolean failIfAlreadyExists)_        throws IOException {_        assert blobSize <= LARGE_BLOB_THRESHOLD_BYTE_SIZE : "large blob uploads should use the resumable upload method"__        final ByteArrayOutputStream baos = new ByteArrayOutputStream(Math.toIntExact(blobSize))__        Streams.copy(inputStream, baos)__        try {_            final Storage.BlobTargetOption[] targetOptions = failIfAlreadyExists ?_                new Storage.BlobTargetOption[] { Storage.BlobTargetOption.doesNotExist() } :_                new Storage.BlobTargetOption[0]__            SocketAccess.doPrivilegedVoidIOException(_                    () -> client().create(blobInfo, baos.toByteArray(), targetOptions))__        } catch (final StorageException se) {_            if (failIfAlreadyExists && se.getCode() == HTTP_PRECON_FAILED) {_                throw new FileAlreadyExistsException(blobInfo.getBlobId().getName(), null, se.getMessage())__            }_            throw se__        }_    };uploads,a,blob,using,the,multipart,upload,method,a,single,multipart,related,request,containing,both,data,and,metadata,the,request,is,gziped,see,https,cloud,google,com,storage,docs,v1,how,tos,multipart,upload,param,blob,info,the,info,for,the,blob,to,be,uploaded,param,input,stream,the,stream,containing,the,blob,data,param,blob,size,the,size,param,fail,if,already,exists,whether,to,throw,a,file,already,exists,exception,if,the,given,blob,already,exists;private,void,write,blob,multipart,blob,info,blob,info,input,stream,input,stream,long,blob,size,boolean,fail,if,already,exists,throws,ioexception,assert,blob,size,large,blob,uploads,should,use,the,resumable,upload,method,final,byte,array,output,stream,baos,new,byte,array,output,stream,math,to,int,exact,blob,size,streams,copy,input,stream,baos,try,final,storage,blob,target,option,target,options,fail,if,already,exists,new,storage,blob,target,option,storage,blob,target,option,does,not,exist,new,storage,blob,target,option,0,socket,access,do,privileged,void,ioexception,client,create,blob,info,baos,to,byte,array,target,options,catch,final,storage,exception,se,if,fail,if,already,exists,se,get,code,throw,new,file,already,exists,exception,blob,info,get,blob,id,get,name,null,se,get,message,throw,se
GoogleCloudStorageBlobStore -> void deleteBlobs(Collection<String> blobNames) throws IOException;1524684173;Deletes multiple blobs in the given bucket (uses a batch request to perform this)__@param blobNames names of the bucket to delete;void deleteBlobs(Collection<String> blobNames) throws IOException {_        if (blobNames == null || blobNames.isEmpty()) {_            return__        }__        if (blobNames.size() == 1) {_            deleteBlob(blobNames.iterator().next())__            return__        }_        final List<Storage.Objects.Delete> deletions = new ArrayList<>(Math.min(MAX_BATCHING_REQUESTS, blobNames.size()))__        final Iterator<String> blobs = blobNames.iterator()___        SocketAccess.doPrivilegedVoidIOException(() -> {_            while (blobs.hasNext()) {_                _                deletions.add(client.objects().delete(bucket, blobs.next()))___                if (blobs.hasNext() == false || deletions.size() == MAX_BATCHING_REQUESTS) {_                    try {_                        _                        BatchRequest batch = client.batch()___                        _                        CountDown countDown = new CountDown(deletions.size())___                        for (Storage.Objects.Delete delete : deletions) {_                            _                            delete.queue(batch, new JsonBatchCallback<Void>() {_                                @Override_                                public void onFailure(GoogleJsonError e, HttpHeaders responseHeaders) throws IOException {_                                    logger.error("failed to delete blob [{}] in bucket [{}]: {}", delete.getObject(), delete.getBucket(), e_                                        .getMessage())__                                }__                                @Override_                                public void onSuccess(Void aVoid, HttpHeaders responseHeaders) throws IOException {_                                    countDown.countDown()__                                }_                            })__                        }__                        batch.execute()___                        if (countDown.isCountedDown() == false) {_                            throw new IOException("Failed to delete all [" + deletions.size() + "] blobs")__                        }_                    } finally {_                        deletions.clear()__                    }_                }_            }_        })__    };deletes,multiple,blobs,in,the,given,bucket,uses,a,batch,request,to,perform,this,param,blob,names,names,of,the,bucket,to,delete;void,delete,blobs,collection,string,blob,names,throws,ioexception,if,blob,names,null,blob,names,is,empty,return,if,blob,names,size,1,delete,blob,blob,names,iterator,next,return,final,list,storage,objects,delete,deletions,new,array,list,math,min,blob,names,size,final,iterator,string,blobs,blob,names,iterator,socket,access,do,privileged,void,ioexception,while,blobs,has,next,deletions,add,client,objects,delete,bucket,blobs,next,if,blobs,has,next,false,deletions,size,try,batch,request,batch,client,batch,count,down,count,down,new,count,down,deletions,size,for,storage,objects,delete,delete,deletions,delete,queue,batch,new,json,batch,callback,void,override,public,void,on,failure,google,json,error,e,http,headers,response,headers,throws,ioexception,logger,error,failed,to,delete,blob,in,bucket,delete,get,object,delete,get,bucket,e,get,message,override,public,void,on,success,void,a,void,http,headers,response,headers,throws,ioexception,count,down,count,down,batch,execute,if,count,down,is,counted,down,false,throw,new,ioexception,failed,to,delete,all,deletions,size,blobs,finally,deletions,clear
GoogleCloudStorageBlobStore -> void deleteBlobs(Collection<String> blobNames) throws IOException;1526449283;Deletes multiple blobs in the given bucket (uses a batch request to perform this)__@param blobNames names of the bucket to delete;void deleteBlobs(Collection<String> blobNames) throws IOException {_        if (blobNames.isEmpty()) {_            return__        }_        _        if (blobNames.size() == 1) {_            deleteBlob(blobNames.iterator().next())__            return__        }_        final List<BlobId> blobIdsToDelete = blobNames.stream().map(blobName -> BlobId.of(bucket, blobName)).collect(Collectors.toList())__        final List<Boolean> deletedStatuses = SocketAccess.doPrivilegedIOException(() -> storage.delete(blobIdsToDelete))__        assert blobIdsToDelete.size() == deletedStatuses.size()__        boolean failed = false__        for (int i = 0_ i < blobIdsToDelete.size()_ i++) {_            if (deletedStatuses.get(i) == false) {_                logger.error("Failed to delete blob [{}] in bucket [{}]", blobIdsToDelete.get(i).getName(), bucket)__                failed = true__            }_        }_        if (failed) {_            throw new IOException("Failed to delete all [" + blobIdsToDelete.size() + "] blobs")__        }_    };deletes,multiple,blobs,in,the,given,bucket,uses,a,batch,request,to,perform,this,param,blob,names,names,of,the,bucket,to,delete;void,delete,blobs,collection,string,blob,names,throws,ioexception,if,blob,names,is,empty,return,if,blob,names,size,1,delete,blob,blob,names,iterator,next,return,final,list,blob,id,blob,ids,to,delete,blob,names,stream,map,blob,name,blob,id,of,bucket,blob,name,collect,collectors,to,list,final,list,boolean,deleted,statuses,socket,access,do,privileged,ioexception,storage,delete,blob,ids,to,delete,assert,blob,ids,to,delete,size,deleted,statuses,size,boolean,failed,false,for,int,i,0,i,blob,ids,to,delete,size,i,if,deleted,statuses,get,i,false,logger,error,failed,to,delete,blob,in,bucket,blob,ids,to,delete,get,i,get,name,bucket,failed,true,if,failed,throw,new,ioexception,failed,to,delete,all,blob,ids,to,delete,size,blobs
GoogleCloudStorageBlobStore -> void deleteBlobs(Collection<String> blobNames) throws IOException;1526574077;Deletes multiple blobs in the given bucket (uses a batch request to perform this)__@param blobNames names of the bucket to delete;void deleteBlobs(Collection<String> blobNames) throws IOException {_        if (blobNames.isEmpty()) {_            return__        }_        _        if (blobNames.size() == 1) {_            deleteBlob(blobNames.iterator().next())__            return__        }_        final List<BlobId> blobIdsToDelete = blobNames.stream().map(blobName -> BlobId.of(bucket, blobName)).collect(Collectors.toList())__        final List<Boolean> deletedStatuses = SocketAccess.doPrivilegedIOException(() -> storage.delete(blobIdsToDelete))__        assert blobIdsToDelete.size() == deletedStatuses.size()__        boolean failed = false__        for (int i = 0_ i < blobIdsToDelete.size()_ i++) {_            if (deletedStatuses.get(i) == false) {_                logger.error("Failed to delete blob [{}] in bucket [{}]", blobIdsToDelete.get(i).getName(), bucket)__                failed = true__            }_        }_        if (failed) {_            throw new IOException("Failed to delete all [" + blobIdsToDelete.size() + "] blobs")__        }_    };deletes,multiple,blobs,in,the,given,bucket,uses,a,batch,request,to,perform,this,param,blob,names,names,of,the,bucket,to,delete;void,delete,blobs,collection,string,blob,names,throws,ioexception,if,blob,names,is,empty,return,if,blob,names,size,1,delete,blob,blob,names,iterator,next,return,final,list,blob,id,blob,ids,to,delete,blob,names,stream,map,blob,name,blob,id,of,bucket,blob,name,collect,collectors,to,list,final,list,boolean,deleted,statuses,socket,access,do,privileged,ioexception,storage,delete,blob,ids,to,delete,assert,blob,ids,to,delete,size,deleted,statuses,size,boolean,failed,false,for,int,i,0,i,blob,ids,to,delete,size,i,if,deleted,statuses,get,i,false,logger,error,failed,to,delete,blob,in,bucket,blob,ids,to,delete,get,i,get,name,bucket,failed,true,if,failed,throw,new,ioexception,failed,to,delete,all,blob,ids,to,delete,size,blobs
GoogleCloudStorageBlobStore -> void deleteBlobs(Collection<String> blobNames) throws IOException;1528706846;Deletes multiple blobs in the given bucket (uses a batch request to perform this)__@param blobNames names of the bucket to delete;void deleteBlobs(Collection<String> blobNames) throws IOException {_        if (blobNames.isEmpty()) {_            return__        }_        _        if (blobNames.size() == 1) {_            deleteBlob(blobNames.iterator().next())__            return__        }_        final List<BlobId> blobIdsToDelete = blobNames.stream().map(blobName -> BlobId.of(bucket, blobName)).collect(Collectors.toList())__        final List<Boolean> deletedStatuses = SocketAccess.doPrivilegedIOException(() -> storage.delete(blobIdsToDelete))__        assert blobIdsToDelete.size() == deletedStatuses.size()__        boolean failed = false__        for (int i = 0_ i < blobIdsToDelete.size()_ i++) {_            if (deletedStatuses.get(i) == false) {_                logger.error("Failed to delete blob [{}] in bucket [{}]", blobIdsToDelete.get(i).getName(), bucket)__                failed = true__            }_        }_        if (failed) {_            throw new IOException("Failed to delete all [" + blobIdsToDelete.size() + "] blobs")__        }_    };deletes,multiple,blobs,in,the,given,bucket,uses,a,batch,request,to,perform,this,param,blob,names,names,of,the,bucket,to,delete;void,delete,blobs,collection,string,blob,names,throws,ioexception,if,blob,names,is,empty,return,if,blob,names,size,1,delete,blob,blob,names,iterator,next,return,final,list,blob,id,blob,ids,to,delete,blob,names,stream,map,blob,name,blob,id,of,bucket,blob,name,collect,collectors,to,list,final,list,boolean,deleted,statuses,socket,access,do,privileged,ioexception,storage,delete,blob,ids,to,delete,assert,blob,ids,to,delete,size,deleted,statuses,size,boolean,failed,false,for,int,i,0,i,blob,ids,to,delete,size,i,if,deleted,statuses,get,i,false,logger,error,failed,to,delete,blob,in,bucket,blob,ids,to,delete,get,i,get,name,bucket,failed,true,if,failed,throw,new,ioexception,failed,to,delete,all,blob,ids,to,delete,size,blobs
GoogleCloudStorageBlobStore -> void deleteBlobs(Collection<String> blobNames) throws IOException;1529341607;Deletes multiple blobs from the specific bucket using a batch request__@param blobNames names of the blobs to delete;void deleteBlobs(Collection<String> blobNames) throws IOException {_        if (blobNames.isEmpty()) {_            return__        }_        _        if (blobNames.size() == 1) {_            deleteBlob(blobNames.iterator().next())__            return__        }_        final List<BlobId> blobIdsToDelete = blobNames.stream().map(blob -> BlobId.of(bucketName, blob)).collect(Collectors.toList())__        final List<Boolean> deletedStatuses = SocketAccess.doPrivilegedIOException(() -> client().delete(blobIdsToDelete))__        assert blobIdsToDelete.size() == deletedStatuses.size()__        boolean failed = false__        for (int i = 0_ i < blobIdsToDelete.size()_ i++) {_            if (deletedStatuses.get(i) == false) {_                logger.error("Failed to delete blob [{}] in bucket [{}]", blobIdsToDelete.get(i).getName(), bucketName)__                failed = true__            }_        }_        if (failed) {_            throw new IOException("Failed to delete all [" + blobIdsToDelete.size() + "] blobs")__        }_    };deletes,multiple,blobs,from,the,specific,bucket,using,a,batch,request,param,blob,names,names,of,the,blobs,to,delete;void,delete,blobs,collection,string,blob,names,throws,ioexception,if,blob,names,is,empty,return,if,blob,names,size,1,delete,blob,blob,names,iterator,next,return,final,list,blob,id,blob,ids,to,delete,blob,names,stream,map,blob,blob,id,of,bucket,name,blob,collect,collectors,to,list,final,list,boolean,deleted,statuses,socket,access,do,privileged,ioexception,client,delete,blob,ids,to,delete,assert,blob,ids,to,delete,size,deleted,statuses,size,boolean,failed,false,for,int,i,0,i,blob,ids,to,delete,size,i,if,deleted,statuses,get,i,false,logger,error,failed,to,delete,blob,in,bucket,blob,ids,to,delete,get,i,get,name,bucket,name,failed,true,if,failed,throw,new,ioexception,failed,to,delete,all,blob,ids,to,delete,size,blobs
GoogleCloudStorageBlobStore -> void deleteBlobs(Collection<String> blobNames) throws IOException;1531179852;Deletes multiple blobs from the specific bucket using a batch request__@param blobNames names of the blobs to delete;void deleteBlobs(Collection<String> blobNames) throws IOException {_        if (blobNames.isEmpty()) {_            return__        }_        _        if (blobNames.size() == 1) {_            deleteBlob(blobNames.iterator().next())__            return__        }_        final List<BlobId> blobIdsToDelete = blobNames.stream().map(blob -> BlobId.of(bucketName, blob)).collect(Collectors.toList())__        final List<Boolean> deletedStatuses = SocketAccess.doPrivilegedIOException(() -> client().delete(blobIdsToDelete))__        assert blobIdsToDelete.size() == deletedStatuses.size()__        boolean failed = false__        for (int i = 0_ i < blobIdsToDelete.size()_ i++) {_            if (deletedStatuses.get(i) == false) {_                logger.error("Failed to delete blob [{}] in bucket [{}]", blobIdsToDelete.get(i).getName(), bucketName)__                failed = true__            }_        }_        if (failed) {_            throw new IOException("Failed to delete all [" + blobIdsToDelete.size() + "] blobs")__        }_    };deletes,multiple,blobs,from,the,specific,bucket,using,a,batch,request,param,blob,names,names,of,the,blobs,to,delete;void,delete,blobs,collection,string,blob,names,throws,ioexception,if,blob,names,is,empty,return,if,blob,names,size,1,delete,blob,blob,names,iterator,next,return,final,list,blob,id,blob,ids,to,delete,blob,names,stream,map,blob,blob,id,of,bucket,name,blob,collect,collectors,to,list,final,list,boolean,deleted,statuses,socket,access,do,privileged,ioexception,client,delete,blob,ids,to,delete,assert,blob,ids,to,delete,size,deleted,statuses,size,boolean,failed,false,for,int,i,0,i,blob,ids,to,delete,size,i,if,deleted,statuses,get,i,false,logger,error,failed,to,delete,blob,in,bucket,blob,ids,to,delete,get,i,get,name,bucket,name,failed,true,if,failed,throw,new,ioexception,failed,to,delete,all,blob,ids,to,delete,size,blobs
GoogleCloudStorageBlobStore -> void deleteBlobs(Collection<String> blobNames) throws IOException;1541092382;Deletes multiple blobs from the specific bucket using a batch request__@param blobNames names of the blobs to delete;void deleteBlobs(Collection<String> blobNames) throws IOException {_        if (blobNames.isEmpty()) {_            return__        }_        _        if (blobNames.size() == 1) {_            deleteBlob(blobNames.iterator().next())__            return__        }_        final List<BlobId> blobIdsToDelete = blobNames.stream().map(blob -> BlobId.of(bucketName, blob)).collect(Collectors.toList())__        final List<Boolean> deletedStatuses = SocketAccess.doPrivilegedIOException(() -> client().delete(blobIdsToDelete))__        assert blobIdsToDelete.size() == deletedStatuses.size()__        boolean failed = false__        for (int i = 0_ i < blobIdsToDelete.size()_ i++) {_            if (deletedStatuses.get(i) == false) {_                logger.error("Failed to delete blob [{}] in bucket [{}]", blobIdsToDelete.get(i).getName(), bucketName)__                failed = true__            }_        }_        if (failed) {_            throw new IOException("Failed to delete all [" + blobIdsToDelete.size() + "] blobs")__        }_    };deletes,multiple,blobs,from,the,specific,bucket,using,a,batch,request,param,blob,names,names,of,the,blobs,to,delete;void,delete,blobs,collection,string,blob,names,throws,ioexception,if,blob,names,is,empty,return,if,blob,names,size,1,delete,blob,blob,names,iterator,next,return,final,list,blob,id,blob,ids,to,delete,blob,names,stream,map,blob,blob,id,of,bucket,name,blob,collect,collectors,to,list,final,list,boolean,deleted,statuses,socket,access,do,privileged,ioexception,client,delete,blob,ids,to,delete,assert,blob,ids,to,delete,size,deleted,statuses,size,boolean,failed,false,for,int,i,0,i,blob,ids,to,delete,size,i,if,deleted,statuses,get,i,false,logger,error,failed,to,delete,blob,in,bucket,blob,ids,to,delete,get,i,get,name,bucket,name,failed,true,if,failed,throw,new,ioexception,failed,to,delete,all,blob,ids,to,delete,size,blobs
GoogleCloudStorageBlobStore -> void deleteBlobs(Collection<String> blobNames) throws IOException;1542397818;Deletes multiple blobs from the specific bucket using a batch request__@param blobNames names of the blobs to delete;void deleteBlobs(Collection<String> blobNames) throws IOException {_        if (blobNames.isEmpty()) {_            return__        }_        _        if (blobNames.size() == 1) {_            deleteBlob(blobNames.iterator().next())__            return__        }_        final List<BlobId> blobIdsToDelete = blobNames.stream().map(blob -> BlobId.of(bucketName, blob)).collect(Collectors.toList())__        final List<Boolean> deletedStatuses = SocketAccess.doPrivilegedIOException(() -> client().delete(blobIdsToDelete))__        assert blobIdsToDelete.size() == deletedStatuses.size()__        boolean failed = false__        for (int i = 0_ i < blobIdsToDelete.size()_ i++) {_            if (deletedStatuses.get(i) == false) {_                logger.error("Failed to delete blob [{}] in bucket [{}]", blobIdsToDelete.get(i).getName(), bucketName)__                failed = true__            }_        }_        if (failed) {_            throw new IOException("Failed to delete all [" + blobIdsToDelete.size() + "] blobs")__        }_    };deletes,multiple,blobs,from,the,specific,bucket,using,a,batch,request,param,blob,names,names,of,the,blobs,to,delete;void,delete,blobs,collection,string,blob,names,throws,ioexception,if,blob,names,is,empty,return,if,blob,names,size,1,delete,blob,blob,names,iterator,next,return,final,list,blob,id,blob,ids,to,delete,blob,names,stream,map,blob,blob,id,of,bucket,name,blob,collect,collectors,to,list,final,list,boolean,deleted,statuses,socket,access,do,privileged,ioexception,client,delete,blob,ids,to,delete,assert,blob,ids,to,delete,size,deleted,statuses,size,boolean,failed,false,for,int,i,0,i,blob,ids,to,delete,size,i,if,deleted,statuses,get,i,false,logger,error,failed,to,delete,blob,in,bucket,blob,ids,to,delete,get,i,get,name,bucket,name,failed,true,if,failed,throw,new,ioexception,failed,to,delete,all,blob,ids,to,delete,size,blobs
GoogleCloudStorageBlobStore -> private void writeBlobResumable(BlobInfo blobInfo, InputStream inputStream) throws IOException;1526449283;Uploads a blob using the "resumable upload" method (multiple requests, which_can be independently retried in case of failure, see_https://cloud.google.com/storage/docs/json_api/v1/how-tos/resumable-upload__@param blobInfo the info for the blob to be uploaded_@param inputStream the stream containing the blob data;private void writeBlobResumable(BlobInfo blobInfo, InputStream inputStream) throws IOException {_        final WriteChannel writeChannel = SocketAccess.doPrivilegedIOException(() -> storage.writer(blobInfo))__        Streams.copy(inputStream, Channels.newOutputStream(new WritableByteChannel() {_            @Override_            public boolean isOpen() {_                return writeChannel.isOpen()__            }__            @Override_            public void close() throws IOException {_                SocketAccess.doPrivilegedVoidIOException(writeChannel::close)__            }__            @SuppressForbidden(reason = "Channel is based of a socket not a file")_            @Override_            public int write(ByteBuffer src) throws IOException {_                return SocketAccess.doPrivilegedIOException(() -> writeChannel.write(src))__            }_        }))__    };uploads,a,blob,using,the,resumable,upload,method,multiple,requests,which,can,be,independently,retried,in,case,of,failure,see,https,cloud,google,com,storage,docs,v1,how,tos,resumable,upload,param,blob,info,the,info,for,the,blob,to,be,uploaded,param,input,stream,the,stream,containing,the,blob,data;private,void,write,blob,resumable,blob,info,blob,info,input,stream,input,stream,throws,ioexception,final,write,channel,write,channel,socket,access,do,privileged,ioexception,storage,writer,blob,info,streams,copy,input,stream,channels,new,output,stream,new,writable,byte,channel,override,public,boolean,is,open,return,write,channel,is,open,override,public,void,close,throws,ioexception,socket,access,do,privileged,void,ioexception,write,channel,close,suppress,forbidden,reason,channel,is,based,of,a,socket,not,a,file,override,public,int,write,byte,buffer,src,throws,ioexception,return,socket,access,do,privileged,ioexception,write,channel,write,src
GoogleCloudStorageBlobStore -> private void writeBlobResumable(BlobInfo blobInfo, InputStream inputStream) throws IOException;1526574077;Uploads a blob using the "resumable upload" method (multiple requests, which_can be independently retried in case of failure, see_https://cloud.google.com/storage/docs/json_api/v1/how-tos/resumable-upload__@param blobInfo the info for the blob to be uploaded_@param inputStream the stream containing the blob data;private void writeBlobResumable(BlobInfo blobInfo, InputStream inputStream) throws IOException {_        try {_            final WriteChannel writeChannel = SocketAccess.doPrivilegedIOException(_                () -> storage.writer(blobInfo, Storage.BlobWriteOption.doesNotExist()))__            Streams.copy(inputStream, Channels.newOutputStream(new WritableByteChannel() {_                @Override_                public boolean isOpen() {_                    return writeChannel.isOpen()__                }__                @Override_                public void close() throws IOException {_                    SocketAccess.doPrivilegedVoidIOException(writeChannel::close)__                }__                @SuppressForbidden(reason = "Channel is based of a socket not a file")_                @Override_                public int write(ByteBuffer src) throws IOException {_                    return SocketAccess.doPrivilegedIOException(() -> writeChannel.write(src))__                }_            }))__        } catch (StorageException se) {_            if (se.getCode() == HTTP_PRECON_FAILED) {_                throw new FileAlreadyExistsException(blobInfo.getBlobId().getName(), null, se.getMessage())__            }_            throw se__        }_    };uploads,a,blob,using,the,resumable,upload,method,multiple,requests,which,can,be,independently,retried,in,case,of,failure,see,https,cloud,google,com,storage,docs,v1,how,tos,resumable,upload,param,blob,info,the,info,for,the,blob,to,be,uploaded,param,input,stream,the,stream,containing,the,blob,data;private,void,write,blob,resumable,blob,info,blob,info,input,stream,input,stream,throws,ioexception,try,final,write,channel,write,channel,socket,access,do,privileged,ioexception,storage,writer,blob,info,storage,blob,write,option,does,not,exist,streams,copy,input,stream,channels,new,output,stream,new,writable,byte,channel,override,public,boolean,is,open,return,write,channel,is,open,override,public,void,close,throws,ioexception,socket,access,do,privileged,void,ioexception,write,channel,close,suppress,forbidden,reason,channel,is,based,of,a,socket,not,a,file,override,public,int,write,byte,buffer,src,throws,ioexception,return,socket,access,do,privileged,ioexception,write,channel,write,src,catch,storage,exception,se,if,se,get,code,throw,new,file,already,exists,exception,blob,info,get,blob,id,get,name,null,se,get,message,throw,se
GoogleCloudStorageBlobStore -> private void writeBlobResumable(BlobInfo blobInfo, InputStream inputStream) throws IOException;1528706846;Uploads a blob using the "resumable upload" method (multiple requests, which_can be independently retried in case of failure, see_https://cloud.google.com/storage/docs/json_api/v1/how-tos/resumable-upload__@param blobInfo the info for the blob to be uploaded_@param inputStream the stream containing the blob data;private void writeBlobResumable(BlobInfo blobInfo, InputStream inputStream) throws IOException {_        try {_            final WriteChannel writeChannel = SocketAccess.doPrivilegedIOException(_                () -> storage.writer(blobInfo, Storage.BlobWriteOption.doesNotExist()))__            Streams.copy(inputStream, Channels.newOutputStream(new WritableByteChannel() {_                @Override_                public boolean isOpen() {_                    return writeChannel.isOpen()__                }__                @Override_                public void close() throws IOException {_                    SocketAccess.doPrivilegedVoidIOException(writeChannel::close)__                }__                @SuppressForbidden(reason = "Channel is based of a socket not a file")_                @Override_                public int write(ByteBuffer src) throws IOException {_                    return SocketAccess.doPrivilegedIOException(() -> writeChannel.write(src))__                }_            }))__        } catch (StorageException se) {_            if (se.getCode() == HTTP_PRECON_FAILED) {_                throw new FileAlreadyExistsException(blobInfo.getBlobId().getName(), null, se.getMessage())__            }_            throw se__        }_    };uploads,a,blob,using,the,resumable,upload,method,multiple,requests,which,can,be,independently,retried,in,case,of,failure,see,https,cloud,google,com,storage,docs,v1,how,tos,resumable,upload,param,blob,info,the,info,for,the,blob,to,be,uploaded,param,input,stream,the,stream,containing,the,blob,data;private,void,write,blob,resumable,blob,info,blob,info,input,stream,input,stream,throws,ioexception,try,final,write,channel,write,channel,socket,access,do,privileged,ioexception,storage,writer,blob,info,storage,blob,write,option,does,not,exist,streams,copy,input,stream,channels,new,output,stream,new,writable,byte,channel,override,public,boolean,is,open,return,write,channel,is,open,override,public,void,close,throws,ioexception,socket,access,do,privileged,void,ioexception,write,channel,close,suppress,forbidden,reason,channel,is,based,of,a,socket,not,a,file,override,public,int,write,byte,buffer,src,throws,ioexception,return,socket,access,do,privileged,ioexception,write,channel,write,src,catch,storage,exception,se,if,se,get,code,throw,new,file,already,exists,exception,blob,info,get,blob,id,get,name,null,se,get,message,throw,se
GoogleCloudStorageBlobStore -> private void writeBlobResumable(BlobInfo blobInfo, InputStream inputStream) throws IOException;1529341607;Uploads a blob using the "resumable upload" method (multiple requests, which_can be independently retried in case of failure, see_https://cloud.google.com/storage/docs/json_api/v1/how-tos/resumable-upload__@param blobInfo the info for the blob to be uploaded_@param inputStream the stream containing the blob data;private void writeBlobResumable(BlobInfo blobInfo, InputStream inputStream) throws IOException {_        try {_            final WriteChannel writeChannel = SocketAccess_                    .doPrivilegedIOException(() -> client().writer(blobInfo, Storage.BlobWriteOption.doesNotExist()))__            Streams.copy(inputStream, Channels.newOutputStream(new WritableByteChannel() {_                @Override_                public boolean isOpen() {_                    return writeChannel.isOpen()__                }__                @Override_                public void close() throws IOException {_                    SocketAccess.doPrivilegedVoidIOException(writeChannel::close)__                }__                @SuppressForbidden(reason = "Channel is based of a socket not a file")_                @Override_                public int write(ByteBuffer src) throws IOException {_                    return SocketAccess.doPrivilegedIOException(() -> writeChannel.write(src))__                }_            }))__        } catch (final StorageException se) {_            if (se.getCode() == HTTP_PRECON_FAILED) {_                throw new FileAlreadyExistsException(blobInfo.getBlobId().getName(), null, se.getMessage())__            }_            throw se__        }_    };uploads,a,blob,using,the,resumable,upload,method,multiple,requests,which,can,be,independently,retried,in,case,of,failure,see,https,cloud,google,com,storage,docs,v1,how,tos,resumable,upload,param,blob,info,the,info,for,the,blob,to,be,uploaded,param,input,stream,the,stream,containing,the,blob,data;private,void,write,blob,resumable,blob,info,blob,info,input,stream,input,stream,throws,ioexception,try,final,write,channel,write,channel,socket,access,do,privileged,ioexception,client,writer,blob,info,storage,blob,write,option,does,not,exist,streams,copy,input,stream,channels,new,output,stream,new,writable,byte,channel,override,public,boolean,is,open,return,write,channel,is,open,override,public,void,close,throws,ioexception,socket,access,do,privileged,void,ioexception,write,channel,close,suppress,forbidden,reason,channel,is,based,of,a,socket,not,a,file,override,public,int,write,byte,buffer,src,throws,ioexception,return,socket,access,do,privileged,ioexception,write,channel,write,src,catch,final,storage,exception,se,if,se,get,code,throw,new,file,already,exists,exception,blob,info,get,blob,id,get,name,null,se,get,message,throw,se
GoogleCloudStorageBlobStore -> InputStream readBlob(String blobName) throws IOException;1524684173;Returns an {@link java.io.InputStream} for a given blob__@param blobName name of the blob_@return an InputStream;InputStream readBlob(String blobName) throws IOException {_        try {_            return SocketAccess.doPrivilegedIOException(() -> {_                Storage.Objects.Get object = client.objects().get(bucket, blobName)__                return object.executeMediaAsInputStream()__            })__        } catch (GoogleJsonResponseException e) {_            GoogleJsonError error = e.getDetails()__            if ((e.getStatusCode() == HTTP_NOT_FOUND) || ((error != null) && (error.getCode() == HTTP_NOT_FOUND))) {_                throw new NoSuchFileException(e.getMessage())__            }_            throw e__        }_    };returns,an,link,java,io,input,stream,for,a,given,blob,param,blob,name,name,of,the,blob,return,an,input,stream;input,stream,read,blob,string,blob,name,throws,ioexception,try,return,socket,access,do,privileged,ioexception,storage,objects,get,object,client,objects,get,bucket,blob,name,return,object,execute,media,as,input,stream,catch,google,json,response,exception,e,google,json,error,error,e,get,details,if,e,get,status,code,error,null,error,get,code,throw,new,no,such,file,exception,e,get,message,throw,e
GoogleCloudStorageBlobStore -> InputStream readBlob(String blobName) throws IOException;1526449283;Returns an {@link java.io.InputStream} for a given blob__@param blobName name of the blob_@return an InputStream;InputStream readBlob(String blobName) throws IOException {_        final BlobId blobId = BlobId.of(bucket, blobName)__        final Blob blob = SocketAccess.doPrivilegedIOException(() -> storage.get(blobId))__        if (blob == null) {_            throw new NoSuchFileException("Blob [" + blobName + "] does not exit")__        }_        final ReadChannel readChannel = SocketAccess.doPrivilegedIOException(blob::reader)__        return Channels.newInputStream(new ReadableByteChannel() {_            @SuppressForbidden(reason = "Channel is based of a socket not a file")_            @Override_            public int read(ByteBuffer dst) throws IOException {_                return SocketAccess.doPrivilegedIOException(() -> readChannel.read(dst))__            }__            @Override_            public boolean isOpen() {_                return readChannel.isOpen()__            }__            @Override_            public void close() throws IOException {_                SocketAccess.doPrivilegedVoidIOException(readChannel::close)__            }_        })__    };returns,an,link,java,io,input,stream,for,a,given,blob,param,blob,name,name,of,the,blob,return,an,input,stream;input,stream,read,blob,string,blob,name,throws,ioexception,final,blob,id,blob,id,blob,id,of,bucket,blob,name,final,blob,blob,socket,access,do,privileged,ioexception,storage,get,blob,id,if,blob,null,throw,new,no,such,file,exception,blob,blob,name,does,not,exit,final,read,channel,read,channel,socket,access,do,privileged,ioexception,blob,reader,return,channels,new,input,stream,new,readable,byte,channel,suppress,forbidden,reason,channel,is,based,of,a,socket,not,a,file,override,public,int,read,byte,buffer,dst,throws,ioexception,return,socket,access,do,privileged,ioexception,read,channel,read,dst,override,public,boolean,is,open,return,read,channel,is,open,override,public,void,close,throws,ioexception,socket,access,do,privileged,void,ioexception,read,channel,close
GoogleCloudStorageBlobStore -> InputStream readBlob(String blobName) throws IOException;1526574077;Returns an {@link java.io.InputStream} for a given blob__@param blobName name of the blob_@return an InputStream;InputStream readBlob(String blobName) throws IOException {_        final BlobId blobId = BlobId.of(bucket, blobName)__        final Blob blob = SocketAccess.doPrivilegedIOException(() -> storage.get(blobId))__        if (blob == null) {_            throw new NoSuchFileException("Blob [" + blobName + "] does not exit")__        }_        final ReadChannel readChannel = SocketAccess.doPrivilegedIOException(blob::reader)__        return Channels.newInputStream(new ReadableByteChannel() {_            @SuppressForbidden(reason = "Channel is based of a socket not a file")_            @Override_            public int read(ByteBuffer dst) throws IOException {_                return SocketAccess.doPrivilegedIOException(() -> readChannel.read(dst))__            }__            @Override_            public boolean isOpen() {_                return readChannel.isOpen()__            }__            @Override_            public void close() throws IOException {_                SocketAccess.doPrivilegedVoidIOException(readChannel::close)__            }_        })__    };returns,an,link,java,io,input,stream,for,a,given,blob,param,blob,name,name,of,the,blob,return,an,input,stream;input,stream,read,blob,string,blob,name,throws,ioexception,final,blob,id,blob,id,blob,id,of,bucket,blob,name,final,blob,blob,socket,access,do,privileged,ioexception,storage,get,blob,id,if,blob,null,throw,new,no,such,file,exception,blob,blob,name,does,not,exit,final,read,channel,read,channel,socket,access,do,privileged,ioexception,blob,reader,return,channels,new,input,stream,new,readable,byte,channel,suppress,forbidden,reason,channel,is,based,of,a,socket,not,a,file,override,public,int,read,byte,buffer,dst,throws,ioexception,return,socket,access,do,privileged,ioexception,read,channel,read,dst,override,public,boolean,is,open,return,read,channel,is,open,override,public,void,close,throws,ioexception,socket,access,do,privileged,void,ioexception,read,channel,close
GoogleCloudStorageBlobStore -> InputStream readBlob(String blobName) throws IOException;1528706846;Returns an {@link java.io.InputStream} for a given blob__@param blobName name of the blob_@return an InputStream;InputStream readBlob(String blobName) throws IOException {_        final BlobId blobId = BlobId.of(bucket, blobName)__        final Blob blob = SocketAccess.doPrivilegedIOException(() -> storage.get(blobId))__        if (blob == null) {_            throw new NoSuchFileException("Blob [" + blobName + "] does not exit")__        }_        final ReadChannel readChannel = SocketAccess.doPrivilegedIOException(blob::reader)__        return Channels.newInputStream(new ReadableByteChannel() {_            @SuppressForbidden(reason = "Channel is based of a socket not a file")_            @Override_            public int read(ByteBuffer dst) throws IOException {_                return SocketAccess.doPrivilegedIOException(() -> readChannel.read(dst))__            }__            @Override_            public boolean isOpen() {_                return readChannel.isOpen()__            }__            @Override_            public void close() throws IOException {_                SocketAccess.doPrivilegedVoidIOException(readChannel::close)__            }_        })__    };returns,an,link,java,io,input,stream,for,a,given,blob,param,blob,name,name,of,the,blob,return,an,input,stream;input,stream,read,blob,string,blob,name,throws,ioexception,final,blob,id,blob,id,blob,id,of,bucket,blob,name,final,blob,blob,socket,access,do,privileged,ioexception,storage,get,blob,id,if,blob,null,throw,new,no,such,file,exception,blob,blob,name,does,not,exit,final,read,channel,read,channel,socket,access,do,privileged,ioexception,blob,reader,return,channels,new,input,stream,new,readable,byte,channel,suppress,forbidden,reason,channel,is,based,of,a,socket,not,a,file,override,public,int,read,byte,buffer,dst,throws,ioexception,return,socket,access,do,privileged,ioexception,read,channel,read,dst,override,public,boolean,is,open,return,read,channel,is,open,override,public,void,close,throws,ioexception,socket,access,do,privileged,void,ioexception,read,channel,close
GoogleCloudStorageBlobStore -> InputStream readBlob(String blobName) throws IOException;1529341607;Returns an {@link java.io.InputStream} for the given blob name__@param blobName name of the blob_@return the InputStream used to read the blob's content;InputStream readBlob(String blobName) throws IOException {_        final BlobId blobId = BlobId.of(bucketName, blobName)__        final Blob blob = SocketAccess.doPrivilegedIOException(() -> client().get(blobId))__        if (blob == null) {_            throw new NoSuchFileException("Blob [" + blobName + "] does not exit")__        }_        final ReadChannel readChannel = SocketAccess.doPrivilegedIOException(blob::reader)__        return Channels.newInputStream(new ReadableByteChannel() {_            @SuppressForbidden(reason = "Channel is based of a socket not a file")_            @Override_            public int read(ByteBuffer dst) throws IOException {_                return SocketAccess.doPrivilegedIOException(() -> readChannel.read(dst))__            }__            @Override_            public boolean isOpen() {_                return readChannel.isOpen()__            }__            @Override_            public void close() throws IOException {_                SocketAccess.doPrivilegedVoidIOException(readChannel::close)__            }_        })__    };returns,an,link,java,io,input,stream,for,the,given,blob,name,param,blob,name,name,of,the,blob,return,the,input,stream,used,to,read,the,blob,s,content;input,stream,read,blob,string,blob,name,throws,ioexception,final,blob,id,blob,id,blob,id,of,bucket,name,blob,name,final,blob,blob,socket,access,do,privileged,ioexception,client,get,blob,id,if,blob,null,throw,new,no,such,file,exception,blob,blob,name,does,not,exit,final,read,channel,read,channel,socket,access,do,privileged,ioexception,blob,reader,return,channels,new,input,stream,new,readable,byte,channel,suppress,forbidden,reason,channel,is,based,of,a,socket,not,a,file,override,public,int,read,byte,buffer,dst,throws,ioexception,return,socket,access,do,privileged,ioexception,read,channel,read,dst,override,public,boolean,is,open,return,read,channel,is,open,override,public,void,close,throws,ioexception,socket,access,do,privileged,void,ioexception,read,channel,close
GoogleCloudStorageBlobStore -> InputStream readBlob(String blobName) throws IOException;1531179852;Returns an {@link java.io.InputStream} for the given blob name__@param blobName name of the blob_@return the InputStream used to read the blob's content;InputStream readBlob(String blobName) throws IOException {_        final BlobId blobId = BlobId.of(bucketName, blobName)__        final ReadChannel readChannel = SocketAccess.doPrivilegedIOException(() -> client().reader(blobId))__        return Channels.newInputStream(new ReadableByteChannel() {_            @SuppressForbidden(reason = "Channel is based of a socket not a file")_            @Override_            public int read(ByteBuffer dst) throws IOException {_                try {_                    return SocketAccess.doPrivilegedIOException(() -> readChannel.read(dst))__                } catch (StorageException e) {_                    if (e.getCode() == HTTP_NOT_FOUND) {_                        throw new NoSuchFileException("Blob [" + blobName + "] does not exist")__                    }_                    throw e__                }_            }__            @Override_            public boolean isOpen() {_                return readChannel.isOpen()__            }__            @Override_            public void close() throws IOException {_                SocketAccess.doPrivilegedVoidIOException(readChannel::close)__            }_        })__    };returns,an,link,java,io,input,stream,for,the,given,blob,name,param,blob,name,name,of,the,blob,return,the,input,stream,used,to,read,the,blob,s,content;input,stream,read,blob,string,blob,name,throws,ioexception,final,blob,id,blob,id,blob,id,of,bucket,name,blob,name,final,read,channel,read,channel,socket,access,do,privileged,ioexception,client,reader,blob,id,return,channels,new,input,stream,new,readable,byte,channel,suppress,forbidden,reason,channel,is,based,of,a,socket,not,a,file,override,public,int,read,byte,buffer,dst,throws,ioexception,try,return,socket,access,do,privileged,ioexception,read,channel,read,dst,catch,storage,exception,e,if,e,get,code,throw,new,no,such,file,exception,blob,blob,name,does,not,exist,throw,e,override,public,boolean,is,open,return,read,channel,is,open,override,public,void,close,throws,ioexception,socket,access,do,privileged,void,ioexception,read,channel,close
GoogleCloudStorageBlobStore -> InputStream readBlob(String blobName) throws IOException;1541092382;Returns an {@link java.io.InputStream} for the given blob name__@param blobName name of the blob_@return the InputStream used to read the blob's content;InputStream readBlob(String blobName) throws IOException {_        final BlobId blobId = BlobId.of(bucketName, blobName)__        final ReadChannel readChannel = SocketAccess.doPrivilegedIOException(() -> client().reader(blobId))__        return Channels.newInputStream(new ReadableByteChannel() {_            @SuppressForbidden(reason = "Channel is based of a socket not a file")_            @Override_            public int read(ByteBuffer dst) throws IOException {_                try {_                    return SocketAccess.doPrivilegedIOException(() -> readChannel.read(dst))__                } catch (StorageException e) {_                    if (e.getCode() == HTTP_NOT_FOUND) {_                        throw new NoSuchFileException("Blob [" + blobName + "] does not exist")__                    }_                    throw e__                }_            }__            @Override_            public boolean isOpen() {_                return readChannel.isOpen()__            }__            @Override_            public void close() throws IOException {_                SocketAccess.doPrivilegedVoidIOException(readChannel::close)__            }_        })__    };returns,an,link,java,io,input,stream,for,the,given,blob,name,param,blob,name,name,of,the,blob,return,the,input,stream,used,to,read,the,blob,s,content;input,stream,read,blob,string,blob,name,throws,ioexception,final,blob,id,blob,id,blob,id,of,bucket,name,blob,name,final,read,channel,read,channel,socket,access,do,privileged,ioexception,client,reader,blob,id,return,channels,new,input,stream,new,readable,byte,channel,suppress,forbidden,reason,channel,is,based,of,a,socket,not,a,file,override,public,int,read,byte,buffer,dst,throws,ioexception,try,return,socket,access,do,privileged,ioexception,read,channel,read,dst,catch,storage,exception,e,if,e,get,code,throw,new,no,such,file,exception,blob,blob,name,does,not,exist,throw,e,override,public,boolean,is,open,return,read,channel,is,open,override,public,void,close,throws,ioexception,socket,access,do,privileged,void,ioexception,read,channel,close
GoogleCloudStorageBlobStore -> InputStream readBlob(String blobName) throws IOException;1542397818;Returns an {@link java.io.InputStream} for the given blob name__@param blobName name of the blob_@return the InputStream used to read the blob's content;InputStream readBlob(String blobName) throws IOException {_        final BlobId blobId = BlobId.of(bucketName, blobName)__        final ReadChannel readChannel = SocketAccess.doPrivilegedIOException(() -> client().reader(blobId))__        return Channels.newInputStream(new ReadableByteChannel() {_            @SuppressForbidden(reason = "Channel is based of a socket not a file")_            @Override_            public int read(ByteBuffer dst) throws IOException {_                try {_                    return SocketAccess.doPrivilegedIOException(() -> readChannel.read(dst))__                } catch (StorageException e) {_                    if (e.getCode() == HTTP_NOT_FOUND) {_                        throw new NoSuchFileException("Blob [" + blobName + "] does not exist")__                    }_                    throw e__                }_            }__            @Override_            public boolean isOpen() {_                return readChannel.isOpen()__            }__            @Override_            public void close() throws IOException {_                SocketAccess.doPrivilegedVoidIOException(readChannel::close)__            }_        })__    };returns,an,link,java,io,input,stream,for,the,given,blob,name,param,blob,name,name,of,the,blob,return,the,input,stream,used,to,read,the,blob,s,content;input,stream,read,blob,string,blob,name,throws,ioexception,final,blob,id,blob,id,blob,id,of,bucket,name,blob,name,final,read,channel,read,channel,socket,access,do,privileged,ioexception,client,reader,blob,id,return,channels,new,input,stream,new,readable,byte,channel,suppress,forbidden,reason,channel,is,based,of,a,socket,not,a,file,override,public,int,read,byte,buffer,dst,throws,ioexception,try,return,socket,access,do,privileged,ioexception,read,channel,read,dst,catch,storage,exception,e,if,e,get,code,throw,new,no,such,file,exception,blob,blob,name,does,not,exist,throw,e,override,public,boolean,is,open,return,read,channel,is,open,override,public,void,close,throws,ioexception,socket,access,do,privileged,void,ioexception,read,channel,close
GoogleCloudStorageBlobStore -> void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException;1531179852;Writes a blob in the specific bucket_@param inputStream content of the blob to be written_@param blobSize    expected size of the blob to be written_@param failIfAlreadyExists whether to throw a FileAlreadyExistsException if the given blob already exists;void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException {_        final BlobInfo blobInfo = BlobInfo.newBuilder(bucketName, blobName).build()__        if (blobSize > LARGE_BLOB_THRESHOLD_BYTE_SIZE) {_            writeBlobResumable(blobInfo, inputStream, failIfAlreadyExists)__        } else {_            writeBlobMultipart(blobInfo, inputStream, blobSize, failIfAlreadyExists)__        }_    };writes,a,blob,in,the,specific,bucket,param,input,stream,content,of,the,blob,to,be,written,param,blob,size,expected,size,of,the,blob,to,be,written,param,fail,if,already,exists,whether,to,throw,a,file,already,exists,exception,if,the,given,blob,already,exists;void,write,blob,string,blob,name,input,stream,input,stream,long,blob,size,boolean,fail,if,already,exists,throws,ioexception,final,blob,info,blob,info,blob,info,new,builder,bucket,name,blob,name,build,if,blob,size,write,blob,resumable,blob,info,input,stream,fail,if,already,exists,else,write,blob,multipart,blob,info,input,stream,blob,size,fail,if,already,exists
GoogleCloudStorageBlobStore -> void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException;1541092382;Writes a blob in the specific bucket_@param inputStream content of the blob to be written_@param blobSize    expected size of the blob to be written_@param failIfAlreadyExists whether to throw a FileAlreadyExistsException if the given blob already exists;void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException {_        final BlobInfo blobInfo = BlobInfo.newBuilder(bucketName, blobName).build()__        if (blobSize > LARGE_BLOB_THRESHOLD_BYTE_SIZE) {_            writeBlobResumable(blobInfo, inputStream, failIfAlreadyExists)__        } else {_            writeBlobMultipart(blobInfo, inputStream, blobSize, failIfAlreadyExists)__        }_    };writes,a,blob,in,the,specific,bucket,param,input,stream,content,of,the,blob,to,be,written,param,blob,size,expected,size,of,the,blob,to,be,written,param,fail,if,already,exists,whether,to,throw,a,file,already,exists,exception,if,the,given,blob,already,exists;void,write,blob,string,blob,name,input,stream,input,stream,long,blob,size,boolean,fail,if,already,exists,throws,ioexception,final,blob,info,blob,info,blob,info,new,builder,bucket,name,blob,name,build,if,blob,size,write,blob,resumable,blob,info,input,stream,fail,if,already,exists,else,write,blob,multipart,blob,info,input,stream,blob,size,fail,if,already,exists
GoogleCloudStorageBlobStore -> void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException;1542397818;Writes a blob in the specific bucket_@param inputStream content of the blob to be written_@param blobSize    expected size of the blob to be written_@param failIfAlreadyExists whether to throw a FileAlreadyExistsException if the given blob already exists;void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException {_        final BlobInfo blobInfo = BlobInfo.newBuilder(bucketName, blobName).build()__        if (blobSize > LARGE_BLOB_THRESHOLD_BYTE_SIZE) {_            writeBlobResumable(blobInfo, inputStream, failIfAlreadyExists)__        } else {_            writeBlobMultipart(blobInfo, inputStream, blobSize, failIfAlreadyExists)__        }_    };writes,a,blob,in,the,specific,bucket,param,input,stream,content,of,the,blob,to,be,written,param,blob,size,expected,size,of,the,blob,to,be,written,param,fail,if,already,exists,whether,to,throw,a,file,already,exists,exception,if,the,given,blob,already,exists;void,write,blob,string,blob,name,input,stream,input,stream,long,blob,size,boolean,fail,if,already,exists,throws,ioexception,final,blob,info,blob,info,blob,info,new,builder,bucket,name,blob,name,build,if,blob,size,write,blob,resumable,blob,info,input,stream,fail,if,already,exists,else,write,blob,multipart,blob,info,input,stream,blob,size,fail,if,already,exists
GoogleCloudStorageBlobStore -> void moveBlob(String sourceBlobName, String targetBlobName) throws IOException;1526449283;Moves a blob within the same bucket__@param sourceBlob name of the blob to move_@param targetBlob new name of the blob in the same bucket;void moveBlob(String sourceBlobName, String targetBlobName) throws IOException {_        final BlobId sourceBlobId = BlobId.of(bucket, sourceBlobName)__        final BlobId targetBlobId = BlobId.of(bucket, targetBlobName)__        final CopyRequest request = CopyRequest.newBuilder()_                .setSource(sourceBlobId)_                .setTarget(targetBlobId)_                .build()__        SocketAccess.doPrivilegedVoidIOException(() -> {_            _            storage.copy(request).getResult()__            final boolean deleted = storage.delete(sourceBlobId)__            if (deleted == false) {_                throw new IOException("Failed to move source [" + sourceBlobName + "] to target [" + targetBlobName + "]")__            }_        })__    };moves,a,blob,within,the,same,bucket,param,source,blob,name,of,the,blob,to,move,param,target,blob,new,name,of,the,blob,in,the,same,bucket;void,move,blob,string,source,blob,name,string,target,blob,name,throws,ioexception,final,blob,id,source,blob,id,blob,id,of,bucket,source,blob,name,final,blob,id,target,blob,id,blob,id,of,bucket,target,blob,name,final,copy,request,request,copy,request,new,builder,set,source,source,blob,id,set,target,target,blob,id,build,socket,access,do,privileged,void,ioexception,storage,copy,request,get,result,final,boolean,deleted,storage,delete,source,blob,id,if,deleted,false,throw,new,ioexception,failed,to,move,source,source,blob,name,to,target,target,blob,name
GoogleCloudStorageBlobStore -> void moveBlob(String sourceBlobName, String targetBlobName) throws IOException;1526574077;Moves a blob within the same bucket__@param sourceBlobName name of the blob to move_@param targetBlobName new name of the blob in the same bucket;void moveBlob(String sourceBlobName, String targetBlobName) throws IOException {_        final BlobId sourceBlobId = BlobId.of(bucket, sourceBlobName)__        final BlobId targetBlobId = BlobId.of(bucket, targetBlobName)__        final CopyRequest request = CopyRequest.newBuilder()_                .setSource(sourceBlobId)_                .setTarget(targetBlobId)_                .build()__        SocketAccess.doPrivilegedVoidIOException(() -> {_            _            storage.copy(request).getResult()__            final boolean deleted = storage.delete(sourceBlobId)__            if (deleted == false) {_                throw new IOException("Failed to move source [" + sourceBlobName + "] to target [" + targetBlobName + "]")__            }_        })__    };moves,a,blob,within,the,same,bucket,param,source,blob,name,name,of,the,blob,to,move,param,target,blob,name,new,name,of,the,blob,in,the,same,bucket;void,move,blob,string,source,blob,name,string,target,blob,name,throws,ioexception,final,blob,id,source,blob,id,blob,id,of,bucket,source,blob,name,final,blob,id,target,blob,id,blob,id,of,bucket,target,blob,name,final,copy,request,request,copy,request,new,builder,set,source,source,blob,id,set,target,target,blob,id,build,socket,access,do,privileged,void,ioexception,storage,copy,request,get,result,final,boolean,deleted,storage,delete,source,blob,id,if,deleted,false,throw,new,ioexception,failed,to,move,source,source,blob,name,to,target,target,blob,name
GoogleCloudStorageBlobStore -> boolean doesBucketExist(String bucketName);1524684173;Return true if the given bucket exists__@param bucketName name of the bucket_@return true if the bucket exists, false otherwise;boolean doesBucketExist(String bucketName) {_        try {_            return SocketAccess.doPrivilegedIOException(() -> {_                try {_                    Bucket bucket = client.buckets().get(bucketName).execute()__                    if (bucket != null) {_                        return Strings.hasText(bucket.getId())__                    }_                } catch (GoogleJsonResponseException e) {_                    GoogleJsonError error = e.getDetails()__                    if ((e.getStatusCode() == HTTP_NOT_FOUND) || ((error != null) && (error.getCode() == HTTP_NOT_FOUND))) {_                        return false__                    }_                    throw e__                }_                return false__            })__        } catch (IOException e) {_            throw new BlobStoreException("Unable to check if bucket [" + bucketName + "] exists", e)__        }_    };return,true,if,the,given,bucket,exists,param,bucket,name,name,of,the,bucket,return,true,if,the,bucket,exists,false,otherwise;boolean,does,bucket,exist,string,bucket,name,try,return,socket,access,do,privileged,ioexception,try,bucket,bucket,client,buckets,get,bucket,name,execute,if,bucket,null,return,strings,has,text,bucket,get,id,catch,google,json,response,exception,e,google,json,error,error,e,get,details,if,e,get,status,code,error,null,error,get,code,return,false,throw,e,return,false,catch,ioexception,e,throw,new,blob,store,exception,unable,to,check,if,bucket,bucket,name,exists,e
GoogleCloudStorageBlobStore -> boolean doesBucketExist(String bucketName);1526449283;Return true if the given bucket exists__@param bucketName name of the bucket_@return true if the bucket exists, false otherwise;boolean doesBucketExist(String bucketName) {_        try {_            final Bucket bucket = SocketAccess.doPrivilegedIOException(() -> storage.get(bucketName))__            return bucket != null__        } catch (final Exception e) {_            throw new BlobStoreException("Unable to check if bucket [" + bucketName + "] exists", e)__        }_    };return,true,if,the,given,bucket,exists,param,bucket,name,name,of,the,bucket,return,true,if,the,bucket,exists,false,otherwise;boolean,does,bucket,exist,string,bucket,name,try,final,bucket,bucket,socket,access,do,privileged,ioexception,storage,get,bucket,name,return,bucket,null,catch,final,exception,e,throw,new,blob,store,exception,unable,to,check,if,bucket,bucket,name,exists,e
GoogleCloudStorageBlobStore -> boolean doesBucketExist(String bucketName);1526574077;Return true if the given bucket exists__@param bucketName name of the bucket_@return true if the bucket exists, false otherwise;boolean doesBucketExist(String bucketName) {_        try {_            final Bucket bucket = SocketAccess.doPrivilegedIOException(() -> storage.get(bucketName))__            return bucket != null__        } catch (final Exception e) {_            throw new BlobStoreException("Unable to check if bucket [" + bucketName + "] exists", e)__        }_    };return,true,if,the,given,bucket,exists,param,bucket,name,name,of,the,bucket,return,true,if,the,bucket,exists,false,otherwise;boolean,does,bucket,exist,string,bucket,name,try,final,bucket,bucket,socket,access,do,privileged,ioexception,storage,get,bucket,name,return,bucket,null,catch,final,exception,e,throw,new,blob,store,exception,unable,to,check,if,bucket,bucket,name,exists,e
GoogleCloudStorageBlobStore -> boolean doesBucketExist(String bucketName);1528706846;Return true if the given bucket exists__@param bucketName name of the bucket_@return true if the bucket exists, false otherwise;boolean doesBucketExist(String bucketName) {_        try {_            final Bucket bucket = SocketAccess.doPrivilegedIOException(() -> storage.get(bucketName))__            return bucket != null__        } catch (final Exception e) {_            throw new BlobStoreException("Unable to check if bucket [" + bucketName + "] exists", e)__        }_    };return,true,if,the,given,bucket,exists,param,bucket,name,name,of,the,bucket,return,true,if,the,bucket,exists,false,otherwise;boolean,does,bucket,exist,string,bucket,name,try,final,bucket,bucket,socket,access,do,privileged,ioexception,storage,get,bucket,name,return,bucket,null,catch,final,exception,e,throw,new,blob,store,exception,unable,to,check,if,bucket,bucket,name,exists,e
GoogleCloudStorageBlobStore -> boolean doesBucketExist(String bucketName);1529341607;Return true iff the given bucket exists__@param bucketName name of the bucket_@return true iff the bucket exists;boolean doesBucketExist(String bucketName) {_        try {_            final Bucket bucket = SocketAccess.doPrivilegedIOException(() -> client().get(bucketName))__            return bucket != null__        } catch (final Exception e) {_            throw new BlobStoreException("Unable to check if bucket [" + bucketName + "] exists", e)__        }_    };return,true,iff,the,given,bucket,exists,param,bucket,name,name,of,the,bucket,return,true,iff,the,bucket,exists;boolean,does,bucket,exist,string,bucket,name,try,final,bucket,bucket,socket,access,do,privileged,ioexception,client,get,bucket,name,return,bucket,null,catch,final,exception,e,throw,new,blob,store,exception,unable,to,check,if,bucket,bucket,name,exists,e
GoogleCloudStorageBlobStore -> boolean doesBucketExist(String bucketName);1531179852;Return true iff the given bucket exists__@param bucketName name of the bucket_@return true iff the bucket exists;boolean doesBucketExist(String bucketName) {_        try {_            final Bucket bucket = SocketAccess.doPrivilegedIOException(() -> client().get(bucketName))__            return bucket != null__        } catch (final Exception e) {_            throw new BlobStoreException("Unable to check if bucket [" + bucketName + "] exists", e)__        }_    };return,true,iff,the,given,bucket,exists,param,bucket,name,name,of,the,bucket,return,true,iff,the,bucket,exists;boolean,does,bucket,exist,string,bucket,name,try,final,bucket,bucket,socket,access,do,privileged,ioexception,client,get,bucket,name,return,bucket,null,catch,final,exception,e,throw,new,blob,store,exception,unable,to,check,if,bucket,bucket,name,exists,e
GoogleCloudStorageBlobStore -> boolean doesBucketExist(String bucketName);1541092382;Return true iff the given bucket exists__@param bucketName name of the bucket_@return true iff the bucket exists;boolean doesBucketExist(String bucketName) {_        try {_            final Bucket bucket = SocketAccess.doPrivilegedIOException(() -> client().get(bucketName))__            return bucket != null__        } catch (final Exception e) {_            throw new BlobStoreException("Unable to check if bucket [" + bucketName + "] exists", e)__        }_    };return,true,iff,the,given,bucket,exists,param,bucket,name,name,of,the,bucket,return,true,iff,the,bucket,exists;boolean,does,bucket,exist,string,bucket,name,try,final,bucket,bucket,socket,access,do,privileged,ioexception,client,get,bucket,name,return,bucket,null,catch,final,exception,e,throw,new,blob,store,exception,unable,to,check,if,bucket,bucket,name,exists,e
GoogleCloudStorageBlobStore -> boolean doesBucketExist(String bucketName);1542397818;Return true iff the given bucket exists__@param bucketName name of the bucket_@return true iff the bucket exists;boolean doesBucketExist(String bucketName) {_        try {_            final Bucket bucket = SocketAccess.doPrivilegedIOException(() -> client().get(bucketName))__            return bucket != null__        } catch (final Exception e) {_            throw new BlobStoreException("Unable to check if bucket [" + bucketName + "] exists", e)__        }_    };return,true,iff,the,given,bucket,exists,param,bucket,name,name,of,the,bucket,return,true,iff,the,bucket,exists;boolean,does,bucket,exist,string,bucket,name,try,final,bucket,bucket,socket,access,do,privileged,ioexception,client,get,bucket,name,return,bucket,null,catch,final,exception,e,throw,new,blob,store,exception,unable,to,check,if,bucket,bucket,name,exists,e
GoogleCloudStorageBlobStore -> private void writeBlobResumable(BlobInfo blobInfo, InputStream inputStream, boolean failIfAlreadyExists) throws IOException;1531179852;Uploads a blob using the "resumable upload" method (multiple requests, which_can be independently retried in case of failure, see_https://cloud.google.com/storage/docs/json_api/v1/how-tos/resumable-upload_@param blobInfo the info for the blob to be uploaded_@param inputStream the stream containing the blob data_@param failIfAlreadyExists whether to throw a FileAlreadyExistsException if the given blob already exists;private void writeBlobResumable(BlobInfo blobInfo, InputStream inputStream, boolean failIfAlreadyExists) throws IOException {_        try {_            final Storage.BlobWriteOption[] writeOptions = failIfAlreadyExists ?_                new Storage.BlobWriteOption[] { Storage.BlobWriteOption.doesNotExist() } :_                new Storage.BlobWriteOption[0]__            final WriteChannel writeChannel = SocketAccess_                    .doPrivilegedIOException(() -> client().writer(blobInfo, writeOptions))__            Streams.copy(inputStream, Channels.newOutputStream(new WritableByteChannel() {_                @Override_                public boolean isOpen() {_                    return writeChannel.isOpen()__                }__                @Override_                public void close() throws IOException {_                    SocketAccess.doPrivilegedVoidIOException(writeChannel::close)__                }__                @SuppressForbidden(reason = "Channel is based of a socket not a file")_                @Override_                public int write(ByteBuffer src) throws IOException {_                    return SocketAccess.doPrivilegedIOException(() -> writeChannel.write(src))__                }_            }))__        } catch (final StorageException se) {_            if (failIfAlreadyExists && se.getCode() == HTTP_PRECON_FAILED) {_                throw new FileAlreadyExistsException(blobInfo.getBlobId().getName(), null, se.getMessage())__            }_            throw se__        }_    };uploads,a,blob,using,the,resumable,upload,method,multiple,requests,which,can,be,independently,retried,in,case,of,failure,see,https,cloud,google,com,storage,docs,v1,how,tos,resumable,upload,param,blob,info,the,info,for,the,blob,to,be,uploaded,param,input,stream,the,stream,containing,the,blob,data,param,fail,if,already,exists,whether,to,throw,a,file,already,exists,exception,if,the,given,blob,already,exists;private,void,write,blob,resumable,blob,info,blob,info,input,stream,input,stream,boolean,fail,if,already,exists,throws,ioexception,try,final,storage,blob,write,option,write,options,fail,if,already,exists,new,storage,blob,write,option,storage,blob,write,option,does,not,exist,new,storage,blob,write,option,0,final,write,channel,write,channel,socket,access,do,privileged,ioexception,client,writer,blob,info,write,options,streams,copy,input,stream,channels,new,output,stream,new,writable,byte,channel,override,public,boolean,is,open,return,write,channel,is,open,override,public,void,close,throws,ioexception,socket,access,do,privileged,void,ioexception,write,channel,close,suppress,forbidden,reason,channel,is,based,of,a,socket,not,a,file,override,public,int,write,byte,buffer,src,throws,ioexception,return,socket,access,do,privileged,ioexception,write,channel,write,src,catch,final,storage,exception,se,if,fail,if,already,exists,se,get,code,throw,new,file,already,exists,exception,blob,info,get,blob,id,get,name,null,se,get,message,throw,se
GoogleCloudStorageBlobStore -> private void writeBlobResumable(BlobInfo blobInfo, InputStream inputStream, boolean failIfAlreadyExists) throws IOException;1541092382;Uploads a blob using the "resumable upload" method (multiple requests, which_can be independently retried in case of failure, see_https://cloud.google.com/storage/docs/json_api/v1/how-tos/resumable-upload_@param blobInfo the info for the blob to be uploaded_@param inputStream the stream containing the blob data_@param failIfAlreadyExists whether to throw a FileAlreadyExistsException if the given blob already exists;private void writeBlobResumable(BlobInfo blobInfo, InputStream inputStream, boolean failIfAlreadyExists) throws IOException {_        try {_            final Storage.BlobWriteOption[] writeOptions = failIfAlreadyExists ?_                new Storage.BlobWriteOption[] { Storage.BlobWriteOption.doesNotExist() } :_                new Storage.BlobWriteOption[0]__            final WriteChannel writeChannel = SocketAccess_                    .doPrivilegedIOException(() -> client().writer(blobInfo, writeOptions))__            Streams.copy(inputStream, Channels.newOutputStream(new WritableByteChannel() {_                @Override_                public boolean isOpen() {_                    return writeChannel.isOpen()__                }__                @Override_                public void close() throws IOException {_                    SocketAccess.doPrivilegedVoidIOException(writeChannel::close)__                }__                @SuppressForbidden(reason = "Channel is based of a socket not a file")_                @Override_                public int write(ByteBuffer src) throws IOException {_                    return SocketAccess.doPrivilegedIOException(() -> writeChannel.write(src))__                }_            }))__        } catch (final StorageException se) {_            if (failIfAlreadyExists && se.getCode() == HTTP_PRECON_FAILED) {_                throw new FileAlreadyExistsException(blobInfo.getBlobId().getName(), null, se.getMessage())__            }_            throw se__        }_    };uploads,a,blob,using,the,resumable,upload,method,multiple,requests,which,can,be,independently,retried,in,case,of,failure,see,https,cloud,google,com,storage,docs,v1,how,tos,resumable,upload,param,blob,info,the,info,for,the,blob,to,be,uploaded,param,input,stream,the,stream,containing,the,blob,data,param,fail,if,already,exists,whether,to,throw,a,file,already,exists,exception,if,the,given,blob,already,exists;private,void,write,blob,resumable,blob,info,blob,info,input,stream,input,stream,boolean,fail,if,already,exists,throws,ioexception,try,final,storage,blob,write,option,write,options,fail,if,already,exists,new,storage,blob,write,option,storage,blob,write,option,does,not,exist,new,storage,blob,write,option,0,final,write,channel,write,channel,socket,access,do,privileged,ioexception,client,writer,blob,info,write,options,streams,copy,input,stream,channels,new,output,stream,new,writable,byte,channel,override,public,boolean,is,open,return,write,channel,is,open,override,public,void,close,throws,ioexception,socket,access,do,privileged,void,ioexception,write,channel,close,suppress,forbidden,reason,channel,is,based,of,a,socket,not,a,file,override,public,int,write,byte,buffer,src,throws,ioexception,return,socket,access,do,privileged,ioexception,write,channel,write,src,catch,final,storage,exception,se,if,fail,if,already,exists,se,get,code,throw,new,file,already,exists,exception,blob,info,get,blob,id,get,name,null,se,get,message,throw,se
GoogleCloudStorageBlobStore -> private void writeBlobResumable(BlobInfo blobInfo, InputStream inputStream, boolean failIfAlreadyExists) throws IOException;1542397818;Uploads a blob using the "resumable upload" method (multiple requests, which_can be independently retried in case of failure, see_https://cloud.google.com/storage/docs/json_api/v1/how-tos/resumable-upload_@param blobInfo the info for the blob to be uploaded_@param inputStream the stream containing the blob data_@param failIfAlreadyExists whether to throw a FileAlreadyExistsException if the given blob already exists;private void writeBlobResumable(BlobInfo blobInfo, InputStream inputStream, boolean failIfAlreadyExists) throws IOException {_        try {_            final Storage.BlobWriteOption[] writeOptions = failIfAlreadyExists ?_                new Storage.BlobWriteOption[] { Storage.BlobWriteOption.doesNotExist() } :_                new Storage.BlobWriteOption[0]__            final WriteChannel writeChannel = SocketAccess_                    .doPrivilegedIOException(() -> client().writer(blobInfo, writeOptions))__            Streams.copy(inputStream, Channels.newOutputStream(new WritableByteChannel() {_                @Override_                public boolean isOpen() {_                    return writeChannel.isOpen()__                }__                @Override_                public void close() throws IOException {_                    SocketAccess.doPrivilegedVoidIOException(writeChannel::close)__                }__                @SuppressForbidden(reason = "Channel is based of a socket not a file")_                @Override_                public int write(ByteBuffer src) throws IOException {_                    return SocketAccess.doPrivilegedIOException(() -> writeChannel.write(src))__                }_            }))__        } catch (final StorageException se) {_            if (failIfAlreadyExists && se.getCode() == HTTP_PRECON_FAILED) {_                throw new FileAlreadyExistsException(blobInfo.getBlobId().getName(), null, se.getMessage())__            }_            throw se__        }_    };uploads,a,blob,using,the,resumable,upload,method,multiple,requests,which,can,be,independently,retried,in,case,of,failure,see,https,cloud,google,com,storage,docs,v1,how,tos,resumable,upload,param,blob,info,the,info,for,the,blob,to,be,uploaded,param,input,stream,the,stream,containing,the,blob,data,param,fail,if,already,exists,whether,to,throw,a,file,already,exists,exception,if,the,given,blob,already,exists;private,void,write,blob,resumable,blob,info,blob,info,input,stream,input,stream,boolean,fail,if,already,exists,throws,ioexception,try,final,storage,blob,write,option,write,options,fail,if,already,exists,new,storage,blob,write,option,storage,blob,write,option,does,not,exist,new,storage,blob,write,option,0,final,write,channel,write,channel,socket,access,do,privileged,ioexception,client,writer,blob,info,write,options,streams,copy,input,stream,channels,new,output,stream,new,writable,byte,channel,override,public,boolean,is,open,return,write,channel,is,open,override,public,void,close,throws,ioexception,socket,access,do,privileged,void,ioexception,write,channel,close,suppress,forbidden,reason,channel,is,based,of,a,socket,not,a,file,override,public,int,write,byte,buffer,src,throws,ioexception,return,socket,access,do,privileged,ioexception,write,channel,write,src,catch,final,storage,exception,se,if,fail,if,already,exists,se,get,code,throw,new,file,already,exists,exception,blob,info,get,blob,id,get,name,null,se,get,message,throw,se
