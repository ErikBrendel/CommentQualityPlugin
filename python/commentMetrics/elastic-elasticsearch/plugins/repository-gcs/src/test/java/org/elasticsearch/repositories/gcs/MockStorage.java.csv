commented;modifiers;parameterAmount;loc;comment;code
false;public;2;8;;@Override public Bucket get(String bucket, BucketGetOption... options) {     if (bucketName.equals(bucket)) {         return StorageTestUtils.createBucket(this, bucketName).     } else {         return null.     } }
false;public;2;4;;@Override public Bucket lockRetentionPolicy(final BucketInfo bucket, final BucketTargetOption... options) {     return null. }
false;public;1;10;;@Override public Blob get(BlobId blob) {     if (bucketName.equals(blob.getBucket())) {         final byte[] bytes = blobs.get(blob.getName()).         if (bytes != null) {             return StorageTestUtils.createBlob(this, bucketName, blob.getName(), bytes.length).         }     }     return null. }
false;public;1;7;;@Override public boolean delete(BlobId blob) {     if (bucketName.equals(blob.getBucket()) && blobs.containsKey(blob.getName())) {         return blobs.remove(blob.getName()) != null.     }     return false. }
false;public;1;8;;@Override public List<Boolean> delete(Iterable<BlobId> blobIds) {     final List<Boolean> ans = new ArrayList<>().     for (final BlobId blobId : blobIds) {         ans.add(delete(blobId)).     }     return ans. }
false;public;3;15;;@Override public Blob create(BlobInfo blobInfo, byte[] content, BlobTargetOption... options) {     if (bucketName.equals(blobInfo.getBucket()) == false) {         throw new StorageException(404, "Bucket not found").     }     if (Stream.of(options).anyMatch(option -> option.equals(BlobTargetOption.doesNotExist()))) {         byte[] existingBytes = blobs.putIfAbsent(blobInfo.getName(), content).         if (existingBytes != null) {             throw new StorageException(412, "Blob already exists").         }     } else {         blobs.put(blobInfo.getName(), content).     }     return get(BlobId.of(blobInfo.getBucket(), blobInfo.getName())). }
false;public;0;4;;@Override public boolean hasNextPage() {     return false. }
false;public;0;4;;@Override public String getNextPageToken() {     return null. }
false;public;0;4;;@Override public Page<Blob> getNextPage() {     throw new UnsupportedOperationException(). }
false;public;0;7;;@Override public Iterable<Blob> iterateAll() {     return blobs.entrySet().stream().filter(blob -> ((prefix == null) || blob.getKey().startsWith(prefix))).map(blob -> StorageTestUtils.createBlob(storage, bucketName, blob.getKey(), blob.getValue().length)).collect(Collectors.toList()). }
false;public;0;4;;@Override public Iterable<Blob> getValues() {     throw new UnsupportedOperationException(). }
false;public;2;38;;@Override public Page<Blob> list(String bucket, BlobListOption... options) {     if (bucketName.equals(bucket) == false) {         throw new StorageException(404, "Bucket not found").     }     final Storage storage = this.     final String prefix = StorageRpcOptionUtils.getPrefix(options).     return new Page<Blob>() {          @Override         public boolean hasNextPage() {             return false.         }          @Override         public String getNextPageToken() {             return null.         }          @Override         public Page<Blob> getNextPage() {             throw new UnsupportedOperationException().         }          @Override         public Iterable<Blob> iterateAll() {             return blobs.entrySet().stream().filter(blob -> ((prefix == null) || blob.getKey().startsWith(prefix))).map(blob -> StorageTestUtils.createBlob(storage, bucketName, blob.getKey(), blob.getValue().length)).collect(Collectors.toList()).         }          @Override         public Iterable<Blob> getValues() {             throw new UnsupportedOperationException().         }     }. }
false;public;1;4;;@Override public int read(ByteBuffer dst) throws IOException {     throw new StorageException(404, "Object not found"). }
false;public;0;4;;@Override public boolean isOpen() {     return false. }
false;public;0;3;;@Override public void close() throws IOException { }
false;public;0;4;;@Override public void close() {     IOUtils.closeWhileHandlingException(readableByteChannel). }
false;public;1;4;;@Override public void seek(long position) throws IOException {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public void setChunkSize(int chunkSize) {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public RestorableState<ReadChannel> capture() {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public int read(ByteBuffer dst) throws IOException {     return readableByteChannel.read(dst). }
false;public;0;4;;@Override public boolean isOpen() {     return readableByteChannel.isOpen(). }
false;public;2;59;;@Override public ReadChannel reader(BlobId blob, BlobSourceOption... options) {     if (bucketName.equals(blob.getBucket())) {         final byte[] bytes = blobs.get(blob.getName()).         final ReadableByteChannel readableByteChannel.         if (bytes != null) {             readableByteChannel = Channels.newChannel(new ByteArrayInputStream(bytes)).         } else {             readableByteChannel = new ReadableByteChannel() {                  @Override                 public int read(ByteBuffer dst) throws IOException {                     throw new StorageException(404, "Object not found").                 }                  @Override                 public boolean isOpen() {                     return false.                 }                  @Override                 public void close() throws IOException {                 }             }.         }         return new ReadChannel() {              @Override             public void close() {                 IOUtils.closeWhileHandlingException(readableByteChannel).             }              @Override             public void seek(long position) throws IOException {                 throw new UnsupportedOperationException().             }              @Override             public void setChunkSize(int chunkSize) {                 throw new UnsupportedOperationException().             }              @Override             public RestorableState<ReadChannel> capture() {                 throw new UnsupportedOperationException().             }              @Override             public int read(ByteBuffer dst) throws IOException {                 return readableByteChannel.read(dst).             }              @Override             public boolean isOpen() {                 return readableByteChannel.isOpen().             }         }.     }     return null. }
false;public;1;4;;@Override public void setChunkSize(int chunkSize) {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public RestorableState<WriteChannel> capture() {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public int write(ByteBuffer src) throws IOException {     return writableByteChannel.write(src). }
false;public;0;4;;@Override public boolean isOpen() {     return writableByteChannel.isOpen(). }
false;public;0;12;;@Override public void close() {     IOUtils.closeWhileHandlingException(writableByteChannel).     if (Stream.of(options).anyMatch(option -> option.equals(BlobWriteOption.doesNotExist()))) {         byte[] existingBytes = blobs.putIfAbsent(blobInfo.getName(), output.toByteArray()).         if (existingBytes != null) {             throw new StorageException(412, "Blob already exists").         }     } else {         blobs.put(blobInfo.getName(), output.toByteArray()).     } }
false;public;2;44;;@Override public WriteChannel writer(BlobInfo blobInfo, BlobWriteOption... options) {     if (bucketName.equals(blobInfo.getBucket())) {         final ByteArrayOutputStream output = new ByteArrayOutputStream().         return new WriteChannel() {              final WritableByteChannel writableByteChannel = Channels.newChannel(output).              @Override             public void setChunkSize(int chunkSize) {                 throw new UnsupportedOperationException().             }              @Override             public RestorableState<WriteChannel> capture() {                 throw new UnsupportedOperationException().             }              @Override             public int write(ByteBuffer src) throws IOException {                 return writableByteChannel.write(src).             }              @Override             public boolean isOpen() {                 return writableByteChannel.isOpen().             }              @Override             public void close() {                 IOUtils.closeWhileHandlingException(writableByteChannel).                 if (Stream.of(options).anyMatch(option -> option.equals(BlobWriteOption.doesNotExist()))) {                     byte[] existingBytes = blobs.putIfAbsent(blobInfo.getName(), output.toByteArray()).                     if (existingBytes != null) {                         throw new StorageException(412, "Blob already exists").                     }                 } else {                     blobs.put(blobInfo.getName(), output.toByteArray()).                 }             }         }.     }     return null. }
false;public;1;4;;// Everything below this line is not implemented. @Override public CopyWriter copy(CopyRequest copyRequest) {     return null. }
false;public;2;4;;@Override public Bucket create(BucketInfo bucketInfo, BucketTargetOption... options) {     return null. }
false;public;2;4;;@Override public Blob create(BlobInfo blobInfo, BlobTargetOption... options) {     return null. }
false;public;3;4;;@Override public Blob create(BlobInfo blobInfo, InputStream content, BlobWriteOption... options) {     return null. }
false;public;3;4;;@Override public Blob get(String bucket, String blob, BlobGetOption... options) {     return null. }
false;public;2;4;;@Override public Blob get(BlobId blob, BlobGetOption... options) {     return null. }
false;public;1;4;;@Override public Page<Bucket> list(BucketListOption... options) {     return null. }
false;public;2;4;;@Override public Bucket update(BucketInfo bucketInfo, BucketTargetOption... options) {     return null. }
false;public;2;4;;@Override public Blob update(BlobInfo blobInfo, BlobTargetOption... options) {     return null. }
false;public;1;4;;@Override public Blob update(BlobInfo blobInfo) {     return null. }
false;public;2;4;;@Override public boolean delete(String bucket, BucketSourceOption... options) {     return false. }
false;public;3;4;;@Override public boolean delete(String bucket, String blob, BlobSourceOption... options) {     return false. }
false;public;2;4;;@Override public boolean delete(BlobId blob, BlobSourceOption... options) {     return false. }
false;public;1;4;;@Override public Blob compose(ComposeRequest composeRequest) {     return null. }
false;public;3;4;;@Override public byte[] readAllBytes(String bucket, String blob, BlobSourceOption... options) {     return new byte[0]. }
false;public;2;4;;@Override public byte[] readAllBytes(BlobId blob, BlobSourceOption... options) {     return new byte[0]. }
false;public;0;4;;@Override public StorageBatch batch() {     return null. }
false;public;3;4;;@Override public ReadChannel reader(String bucket, String blob, BlobSourceOption... options) {     return null. }
false;public;4;4;;@Override public URL signUrl(BlobInfo blobInfo, long duration, TimeUnit unit, SignUrlOption... options) {     return null. }
false;public;1;4;;@Override public List<Blob> get(BlobId... blobIds) {     return null. }
false;public;1;4;;@Override public List<Blob> get(Iterable<BlobId> blobIds) {     return null. }
false;public;1;4;;@Override public List<Blob> update(BlobInfo... blobInfos) {     return null. }
false;public;1;4;;@Override public List<Blob> update(Iterable<BlobInfo> blobInfos) {     return null. }
false;public;1;4;;@Override public List<Boolean> delete(BlobId... blobIds) {     return null. }
false;public;3;4;;@Override public Acl getAcl(String bucket, Acl.Entity entity, BucketSourceOption... options) {     return null. }
false;public;2;4;;@Override public Acl getAcl(String bucket, Acl.Entity entity) {     return null. }
false;public;3;4;;@Override public boolean deleteAcl(String bucket, Acl.Entity entity, BucketSourceOption... options) {     return false. }
false;public;2;4;;@Override public boolean deleteAcl(String bucket, Acl.Entity entity) {     return false. }
false;public;3;4;;@Override public Acl createAcl(String bucket, Acl acl, BucketSourceOption... options) {     return null. }
false;public;2;4;;@Override public Acl createAcl(String bucket, Acl acl) {     return null. }
false;public;3;4;;@Override public Acl updateAcl(String bucket, Acl acl, BucketSourceOption... options) {     return null. }
false;public;2;4;;@Override public Acl updateAcl(String bucket, Acl acl) {     return null. }
false;public;2;4;;@Override public List<Acl> listAcls(String bucket, BucketSourceOption... options) {     return null. }
false;public;1;4;;@Override public List<Acl> listAcls(String bucket) {     return null. }
false;public;2;4;;@Override public Acl getDefaultAcl(String bucket, Acl.Entity entity) {     return null. }
false;public;2;4;;@Override public boolean deleteDefaultAcl(String bucket, Acl.Entity entity) {     return false. }
false;public;2;4;;@Override public Acl createDefaultAcl(String bucket, Acl acl) {     return null. }
false;public;2;4;;@Override public Acl updateDefaultAcl(String bucket, Acl acl) {     return null. }
false;public;1;4;;@Override public List<Acl> listDefaultAcls(String bucket) {     return null. }
false;public;2;4;;@Override public Acl getAcl(BlobId blob, Acl.Entity entity) {     return null. }
false;public;2;4;;@Override public boolean deleteAcl(BlobId blob, Acl.Entity entity) {     return false. }
false;public;2;4;;@Override public Acl createAcl(BlobId blob, Acl acl) {     return null. }
false;public;2;4;;@Override public Acl updateAcl(BlobId blob, Acl acl) {     return null. }
false;public;1;4;;@Override public List<Acl> listAcls(BlobId blob) {     return null. }
false;public;2;4;;@Override public Policy getIamPolicy(String bucket, BucketSourceOption... options) {     return null. }
false;public;3;4;;@Override public Policy setIamPolicy(String bucket, Policy policy, BucketSourceOption... options) {     return null. }
false;public;3;4;;@Override public List<Boolean> testIamPermissions(String bucket, List<String> permissions, BucketSourceOption... options) {     return null. }
false;public;1;4;;@Override public ServiceAccount getServiceAccount(String projectId) {     return null. }
false;public;0;4;;@Override public StorageOptions getOptions() {     return null. }
