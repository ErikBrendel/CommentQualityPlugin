commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Collections.singletonList(MockGoogleCloudStoragePlugin.class). }
false;protected;2;11;;@Override protected void createTestRepository(String name, boolean verify) {     assertAcked(client().admin().cluster().preparePutRepository(name).setType(GoogleCloudStorageRepository.TYPE).setVerify(verify).setSettings(Settings.builder().put("bucket", BUCKET).put("base_path", GoogleCloudStorageBlobStoreRepositoryTests.class.getSimpleName()).put("compress", randomBoolean()).put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES))). }
false;protected;1;4;;@Override protected void afterCreationCheck(Repository repository) {     assertThat(repository, instanceOf(GoogleCloudStorageRepository.class)). }
false;public,static;0;4;;@AfterClass public static void wipeRepository() {     blobs.clear(). }
false;protected;0;4;;@Override protected GoogleCloudStorageService createStorageService() {     return new MockGoogleCloudStorageService(). }
false;public;1;4;;@Override public Storage client(String clientName) {     return new MockStorage(BUCKET, blobs). }
false;public;0;37;;public void testChunkSize() {     // default chunk size     RepositoryMetaData repositoryMetaData = new RepositoryMetaData("repo", GoogleCloudStorageRepository.TYPE, Settings.EMPTY).     ByteSizeValue chunkSize = GoogleCloudStorageRepository.getSetting(GoogleCloudStorageRepository.CHUNK_SIZE, repositoryMetaData).     assertEquals(GoogleCloudStorageRepository.MAX_CHUNK_SIZE, chunkSize).     // chunk size in settings     final int size = randomIntBetween(1, 100).     repositoryMetaData = new RepositoryMetaData("repo", GoogleCloudStorageRepository.TYPE, Settings.builder().put("chunk_size", size + "mb").build()).     chunkSize = GoogleCloudStorageRepository.getSetting(GoogleCloudStorageRepository.CHUNK_SIZE, repositoryMetaData).     assertEquals(new ByteSizeValue(size, ByteSizeUnit.MB), chunkSize).     // zero bytes is not allowed     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> {         final RepositoryMetaData repoMetaData = new RepositoryMetaData("repo", GoogleCloudStorageRepository.TYPE, Settings.builder().put("chunk_size", "0").build()).         GoogleCloudStorageRepository.getSetting(GoogleCloudStorageRepository.CHUNK_SIZE, repoMetaData).     }).     assertEquals("failed to parse value [0] for setting [chunk_size], must be >= [1b]", e.getMessage()).     // negative bytes not allowed     e = expectThrows(IllegalArgumentException.class, () -> {         final RepositoryMetaData repoMetaData = new RepositoryMetaData("repo", GoogleCloudStorageRepository.TYPE, Settings.builder().put("chunk_size", "-1").build()).         GoogleCloudStorageRepository.getSetting(GoogleCloudStorageRepository.CHUNK_SIZE, repoMetaData).     }).     assertEquals("failed to parse value [-1] for setting [chunk_size], must be >= [1b]", e.getMessage()).     // greater than max chunk size not allowed     e = expectThrows(IllegalArgumentException.class, () -> {         final RepositoryMetaData repoMetaData = new RepositoryMetaData("repo", GoogleCloudStorageRepository.TYPE, Settings.builder().put("chunk_size", "101mb").build()).         GoogleCloudStorageRepository.getSetting(GoogleCloudStorageRepository.CHUNK_SIZE, repoMetaData).     }).     assertEquals("failed to parse value [101mb] for setting [chunk_size], must be <= [100mb]", e.getMessage()). }
