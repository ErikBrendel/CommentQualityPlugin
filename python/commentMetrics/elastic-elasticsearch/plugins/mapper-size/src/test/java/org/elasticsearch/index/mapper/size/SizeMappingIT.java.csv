commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Arrays.asList(MapperSizePlugin.class). }
true;public;0;22;// issue 5053 ;// issue 5053 public void testThatUpdatingMappingShouldNotRemoveSizeMappingConfiguration() throws Exception {     String index = "foo".     String type = "mytype".     XContentBuilder builder = jsonBuilder().startObject().startObject("_size").field("enabled", true).endObject().endObject().     assertAcked(client().admin().indices().prepareCreate(index).addMapping(type, builder)).     // check mapping again     assertSizeMappingEnabled(index, type, true).     // update some field in the mapping     XContentBuilder updateMappingBuilder = jsonBuilder().startObject().startObject("properties").startObject("otherField").field("type", "text").endObject().endObject().endObject().     AcknowledgedResponse putMappingResponse = client().admin().indices().preparePutMapping(index).setType(type).setSource(updateMappingBuilder).get().     assertAcked(putMappingResponse).     // make sure size field is still in mapping     assertSizeMappingEnabled(index, type, true). }
false;public;0;21;;public void testThatSizeCanBeSwitchedOnAndOff() throws Exception {     String index = "foo".     String type = "mytype".     XContentBuilder builder = jsonBuilder().startObject().startObject("_size").field("enabled", true).endObject().endObject().     assertAcked(client().admin().indices().prepareCreate(index).addMapping(type, builder)).     // check mapping again     assertSizeMappingEnabled(index, type, true).     // update some field in the mapping     XContentBuilder updateMappingBuilder = jsonBuilder().startObject().startObject("_size").field("enabled", false).endObject().endObject().     AcknowledgedResponse putMappingResponse = client().admin().indices().preparePutMapping(index).setType(type).setSource(updateMappingBuilder).get().     assertAcked(putMappingResponse).     // make sure size field is still in mapping     assertSizeMappingEnabled(index, type, false). }
false;private;3;11;;private void assertSizeMappingEnabled(String index, String type, boolean enabled) throws IOException {     String errMsg = String.format(Locale.ROOT, "Expected size field mapping to be " + (enabled ? "enabled" : "disabled") + " for %s/%s", index, type).     GetMappingsResponse getMappingsResponse = client().admin().indices().prepareGetMappings(index).addTypes(type).get().     Map<String, Object> mappingSource = getMappingsResponse.getMappings().get(index).get(type).getSourceAsMap().     assertThat(errMsg, mappingSource, hasKey("_size")).     String sizeAsString = mappingSource.get("_size").toString().     assertThat(sizeAsString, is(notNullValue())).     assertThat(errMsg, sizeAsString, is("{enabled=" + (enabled) + "}")). }
false;public;0;9;;public void testBasic() throws Exception {     assertAcked(prepareCreate("test").addMapping("type", "_size", "enabled=true")).     final String source = "{\"f\":10}".     indexRandom(true, client().prepareIndex("test", "type", "1").setSource(source, XContentType.JSON)).     GetResponse getResponse = client().prepareGet("test", "type", "1").setStoredFields("_size").get().     assertNotNull(getResponse.getField("_size")).     assertEquals(source.length(), (int) getResponse.getField("_size").getValue()). }
