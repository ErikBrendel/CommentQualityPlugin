commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> getPlugins() {     return pluginList(MapperSizePlugin.class, InternalSettingsPlugin.class). }
false;public;0;20;;public void testSizeEnabled() throws Exception {     IndexService service = createIndex("test", Settings.EMPTY, "type", "_size", "enabled=true").     DocumentMapper docMapper = service.mapperService().documentMapper("type").     BytesReference source = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", "value").endObject()).     ParsedDocument doc = docMapper.parse(new SourceToParse("test", "type", "1", source, XContentType.JSON)).     boolean stored = false.     boolean points = false.     for (IndexableField field : doc.rootDoc().getFields("_size")) {         stored |= field.fieldType().stored().         points |= field.fieldType().pointIndexDimensionCount() > 0.     }     assertTrue(stored).     assertTrue(points). }
false;public;0;13;;public void testSizeDisabled() throws Exception {     IndexService service = createIndex("test", Settings.EMPTY, "type", "_size", "enabled=false").     DocumentMapper docMapper = service.mapperService().documentMapper("type").     BytesReference source = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", "value").endObject()).     ParsedDocument doc = docMapper.parse(new SourceToParse("test", "type", "1", source, XContentType.JSON)).     assertThat(doc.rootDoc().getField("_size"), nullValue()). }
false;public;0;13;;public void testSizeNotSet() throws Exception {     IndexService service = createIndex("test", Settings.EMPTY, "type").     DocumentMapper docMapper = service.mapperService().documentMapper("type").     BytesReference source = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("field", "value").endObject()).     ParsedDocument doc = docMapper.parse(new SourceToParse("test", "type", "1", source, XContentType.JSON)).     assertThat(doc.rootDoc().getField("_size"), nullValue()). }
false;public;0;13;;public void testThatDisablingWorksWhenMerging() throws Exception {     IndexService service = createIndex("test", Settings.EMPTY, "type", "_size", "enabled=true").     DocumentMapper docMapper = service.mapperService().documentMapper("type").     assertThat(docMapper.metadataMapper(SizeFieldMapper.class).enabled(), is(true)).     String disabledMapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_size").field("enabled", false).endObject().endObject().endObject()).     docMapper = service.mapperService().merge("type", new CompressedXContent(disabledMapping), MapperService.MergeReason.MAPPING_UPDATE).     assertThat(docMapper.metadataMapper(SizeFieldMapper.class).enabled(), is(false)). }
