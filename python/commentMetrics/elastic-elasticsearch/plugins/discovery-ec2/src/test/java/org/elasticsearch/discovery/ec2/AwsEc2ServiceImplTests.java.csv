commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;public void testAWSCredentialsWithSystemProviders() {     final AWSCredentialsProvider credentialsProvider = AwsEc2ServiceImpl.buildCredentials(logger, Ec2ClientSettings.getClientSettings(Settings.EMPTY)).     assertThat(credentialsProvider, instanceOf(DefaultAWSCredentialsProviderChain.class)). }
false;public;0;9;;public void testAWSCredentialsWithElasticsearchAwsSettings() {     final MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString("discovery.ec2.access_key", "aws_key").     secureSettings.setString("discovery.ec2.secret_key", "aws_secret").     final AWSCredentials credentials = AwsEc2ServiceImpl.buildCredentials(logger, Ec2ClientSettings.getClientSettings(Settings.builder().setSecureSettings(secureSettings).build())).getCredentials().     assertThat(credentials.getAWSAccessKeyId(), is("aws_key")).     assertThat(credentials.getAWSSecretKey(), is("aws_secret")). }
false;public;0;11;;public void testAWSSessionCredentialsWithElasticsearchAwsSettings() {     final MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString("discovery.ec2.access_key", "aws_key").     secureSettings.setString("discovery.ec2.secret_key", "aws_secret").     secureSettings.setString("discovery.ec2.session_token", "aws_session_token").     final BasicSessionCredentials credentials = (BasicSessionCredentials) AwsEc2ServiceImpl.buildCredentials(logger, Ec2ClientSettings.getClientSettings(Settings.builder().setSecureSettings(secureSettings).build())).getCredentials().     assertThat(credentials.getAWSAccessKeyId(), is("aws_key")).     assertThat(credentials.getAWSSecretKey(), is("aws_secret")).     assertThat(credentials.getSessionToken(), is("aws_session_token")). }
false;public;0;10;;public void testDeprecationOfLoneAccessKey() {     final MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString("discovery.ec2.access_key", "aws_key").     final AWSCredentials credentials = AwsEc2ServiceImpl.buildCredentials(logger, Ec2ClientSettings.getClientSettings(Settings.builder().setSecureSettings(secureSettings).build())).getCredentials().     assertThat(credentials.getAWSAccessKeyId(), is("aws_key")).     assertThat(credentials.getAWSSecretKey(), is("")).     assertSettingDeprecationsAndWarnings(new String[] {}, "Setting [discovery.ec2.access_key] is set but [discovery.ec2.secret_key] is not, which will be unsupported in future"). }
false;public;0;10;;public void testDeprecationOfLoneSecretKey() {     final MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString("discovery.ec2.secret_key", "aws_secret").     final AWSCredentials credentials = AwsEc2ServiceImpl.buildCredentials(logger, Ec2ClientSettings.getClientSettings(Settings.builder().setSecureSettings(secureSettings).build())).getCredentials().     assertThat(credentials.getAWSAccessKeyId(), is("")).     assertThat(credentials.getAWSSecretKey(), is("aws_secret")).     assertSettingDeprecationsAndWarnings(new String[] {}, "Setting [discovery.ec2.secret_key] is set but [discovery.ec2.access_key] is not, which will be unsupported in future"). }
false;public;0;8;;public void testRejectionOfLoneSessionToken() {     final MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString("discovery.ec2.session_token", "aws_session_token").     SettingsException e = expectThrows(SettingsException.class, () -> AwsEc2ServiceImpl.buildCredentials(logger, Ec2ClientSettings.getClientSettings(Settings.builder().setSecureSettings(secureSettings).build()))).     assertThat(e.getMessage(), is("Setting [discovery.ec2.session_token] is set but [discovery.ec2.access_key] and [discovery.ec2.secret_key] are not")). }
false;public;0;4;;public void testAWSDefaultConfiguration() {     launchAWSConfigurationTest(Settings.EMPTY, Protocol.HTTPS, null, -1, null, null, ClientConfiguration.DEFAULT_SOCKET_TIMEOUT). }
false;public;0;13;;public void testAWSConfigurationWithAwsSettings() {     final MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString("discovery.ec2.proxy.username", "aws_proxy_username").     secureSettings.setString("discovery.ec2.proxy.password", "aws_proxy_password").     final Settings settings = Settings.builder().put("discovery.ec2.protocol", "http").put("discovery.ec2.proxy.host", "aws_proxy_host").put("discovery.ec2.proxy.port", 8080).put("discovery.ec2.read_timeout", "10s").setSecureSettings(secureSettings).build().     launchAWSConfigurationTest(settings, Protocol.HTTP, "aws_proxy_host", 8080, "aws_proxy_username", "aws_proxy_password", 10000). }
false;protected;7;18;;protected void launchAWSConfigurationTest(Settings settings, Protocol expectedProtocol, String expectedProxyHost, int expectedProxyPort, String expectedProxyUsername, String expectedProxyPassword, int expectedReadTimeout) {     final ClientConfiguration configuration = AwsEc2ServiceImpl.buildConfiguration(logger, Ec2ClientSettings.getClientSettings(settings)).     assertThat(configuration.getResponseMetadataCacheSize(), is(0)).     assertThat(configuration.getProtocol(), is(expectedProtocol)).     assertThat(configuration.getProxyHost(), is(expectedProxyHost)).     assertThat(configuration.getProxyPort(), is(expectedProxyPort)).     assertThat(configuration.getProxyUsername(), is(expectedProxyUsername)).     assertThat(configuration.getProxyPassword(), is(expectedProxyPassword)).     assertThat(configuration.getSocketTimeout(), is(expectedReadTimeout)). }
