# id;timestamp;commentText;codeText;commentWords;codeWords
Ec2NetworkTests -> public void testNetworkHostEc2PrivateIpv4() throws IOException;1524684173;Test for network.host: _ec2:privateIpv4_;public void testNetworkHostEc2PrivateIpv4() throws IOException {_        Settings nodeSettings = Settings.builder()_                .put("network.host", "_ec2:privateIpv4_")_                .build()___        NetworkService networkService = new NetworkService(Collections.singletonList(new Ec2NameResolver(nodeSettings)))__        _        try {_            networkService.resolveBindHostAddresses(null)__        } catch (IOException e) {_            assertThat(e.getMessage(), containsString("local-ipv4"))__        }_    };test,for,network,host;public,void,test,network,host,ec2private,ipv4,throws,ioexception,settings,node,settings,settings,builder,put,network,host,build,network,service,network,service,new,network,service,collections,singleton,list,new,ec2name,resolver,node,settings,try,network,service,resolve,bind,host,addresses,null,catch,ioexception,e,assert,that,e,get,message,contains,string,local,ipv4
Ec2NetworkTests -> public void testNetworkHostEc2PrivateIpv4() throws IOException;1541092382;Test for network.host: _ec2:privateIpv4_;public void testNetworkHostEc2PrivateIpv4() throws IOException {_        Settings nodeSettings = Settings.builder()_                .put("network.host", "_ec2:privateIpv4_")_                .build()___        NetworkService networkService = new NetworkService(Collections.singletonList(new Ec2NameResolver()))__        _        try {_            networkService.resolveBindHostAddresses(null)__            _        } catch (IOException e) {_            assertThat(e.getMessage(), containsString("local-ipv4"))__        }_    };test,for,network,host;public,void,test,network,host,ec2private,ipv4,throws,ioexception,settings,node,settings,settings,builder,put,network,host,build,network,service,network,service,new,network,service,collections,singleton,list,new,ec2name,resolver,try,network,service,resolve,bind,host,addresses,null,catch,ioexception,e,assert,that,e,get,message,contains,string,local,ipv4
Ec2NetworkTests -> public void testNetworkHostEc2PrivateIpv4() throws IOException;1541426529;Test for network.host: _ec2:privateIpv4_;public void testNetworkHostEc2PrivateIpv4() throws IOException {_        resolveEc2("_ec2:privateIpv4_", InetAddress.getByName("127.0.0.1"))__    };test,for,network,host;public,void,test,network,host,ec2private,ipv4,throws,ioexception,resolve,ec2,inet,address,get,by,name,127,0,0,1
Ec2NetworkTests -> public void testNetworkHostEc2PrivateIpv4() throws IOException;1544823664;Test for network.host: _ec2:privateIpv4_;public void testNetworkHostEc2PrivateIpv4() throws IOException {_        resolveEc2("_ec2:privateIpv4_", InetAddress.getByName("127.0.0.1"))__    };test,for,network,host;public,void,test,network,host,ec2private,ipv4,throws,ioexception,resolve,ec2,inet,address,get,by,name,127,0,0,1
Ec2NetworkTests -> public void testNetworkHostEc2PublicDns() throws IOException;1524684173;Test for network.host: _ec2:publicDns_;public void testNetworkHostEc2PublicDns() throws IOException {_        Settings nodeSettings = Settings.builder()_                .put("network.host", "_ec2:publicDns_")_                .build()___        NetworkService networkService = new NetworkService(Collections.singletonList(new Ec2NameResolver(nodeSettings)))__        _        try {_            networkService.resolveBindHostAddresses(null)__        } catch (IOException e) {_            assertThat(e.getMessage(), containsString("public-hostname"))__        }_    };test,for,network,host;public,void,test,network,host,ec2public,dns,throws,ioexception,settings,node,settings,settings,builder,put,network,host,build,network,service,network,service,new,network,service,collections,singleton,list,new,ec2name,resolver,node,settings,try,network,service,resolve,bind,host,addresses,null,catch,ioexception,e,assert,that,e,get,message,contains,string,public,hostname
Ec2NetworkTests -> public void testNetworkHostEc2PublicDns() throws IOException;1541092382;Test for network.host: _ec2:publicDns_;public void testNetworkHostEc2PublicDns() throws IOException {_        Settings nodeSettings = Settings.builder()_                .put("network.host", "_ec2:publicDns_")_                .build()___        NetworkService networkService = new NetworkService(Collections.singletonList(new Ec2NameResolver()))__        _        try {_            networkService.resolveBindHostAddresses(null)__            _        } catch (IOException e) {_            assertThat(e.getMessage(), containsString("public-hostname"))__        }_    };test,for,network,host;public,void,test,network,host,ec2public,dns,throws,ioexception,settings,node,settings,settings,builder,put,network,host,build,network,service,network,service,new,network,service,collections,singleton,list,new,ec2name,resolver,try,network,service,resolve,bind,host,addresses,null,catch,ioexception,e,assert,that,e,get,message,contains,string,public,hostname
Ec2NetworkTests -> public void testNetworkHostEc2PublicDns() throws IOException;1541426529;Test for network.host: _ec2:publicDns_;public void testNetworkHostEc2PublicDns() throws IOException {_        resolveEc2("_ec2:publicDns_", InetAddress.getByName("165.168.10.3"))__    };test,for,network,host;public,void,test,network,host,ec2public,dns,throws,ioexception,resolve,ec2,inet,address,get,by,name,165,168,10,3
Ec2NetworkTests -> public void testNetworkHostEc2PublicDns() throws IOException;1544823664;Test for network.host: _ec2:publicDns_;public void testNetworkHostEc2PublicDns() throws IOException {_        resolveEc2("_ec2:publicDns_", InetAddress.getByName("165.168.10.3"))__    };test,for,network,host;public,void,test,network,host,ec2public,dns,throws,ioexception,resolve,ec2,inet,address,get,by,name,165,168,10,3
Ec2NetworkTests -> public void testNetworkHostUnableToResolveEc2();1541426529;Test for network.host: _ec2_;public void testNetworkHostUnableToResolveEc2() {_        _        AccessController.doPrivileged((PrivilegedAction<String>) () -> System.setProperty(EC2_METADATA_SERVICE_OVERRIDE_SYSTEM_PROPERTY,_            "http://127.0.0.1/"))___        try {_            resolveEc2("_ec2_", (InetAddress[]) null)__        } catch (IOException e) {_            assertThat(e.getMessage(),_                equalTo("IOException caught when fetching InetAddress from [http://127.0.0.1//latest/meta-data/local-ipv4]"))__        }_    };test,for,network,host;public,void,test,network,host,unable,to,resolve,ec2,access,controller,do,privileged,privileged,action,string,system,set,property,http,127,0,0,1,try,resolve,ec2,inet,address,null,catch,ioexception,e,assert,that,e,get,message,equal,to,ioexception,caught,when,fetching,inet,address,from,http,127,0,0,1,latest,meta,data,local,ipv4
Ec2NetworkTests -> public void testNetworkHostUnableToResolveEc2();1544823664;Test for network.host: _ec2_;public void testNetworkHostUnableToResolveEc2() {_        _        AccessController.doPrivileged((PrivilegedAction<String>) () -> System.setProperty(EC2_METADATA_SERVICE_OVERRIDE_SYSTEM_PROPERTY,_            "http://127.0.0.1/"))___        try {_            resolveEc2("_ec2_", (InetAddress[]) null)__        } catch (IOException e) {_            assertThat(e.getMessage(),_                equalTo("IOException caught when fetching InetAddress from [http://127.0.0.1//latest/meta-data/local-ipv4]"))__        }_    };test,for,network,host;public,void,test,network,host,unable,to,resolve,ec2,access,controller,do,privileged,privileged,action,string,system,set,property,http,127,0,0,1,try,resolve,ec2,inet,address,null,catch,ioexception,e,assert,that,e,get,message,equal,to,ioexception,caught,when,fetching,inet,address,from,http,127,0,0,1,latest,meta,data,local,ipv4
Ec2NetworkTests -> public void testNetworkHostEc2PrivateIp() throws IOException;1524684173;Test for network.host: _ec2:privateIp_;public void testNetworkHostEc2PrivateIp() throws IOException {_        Settings nodeSettings = Settings.builder()_                .put("network.host", "_ec2:privateIp_")_                .build()___        NetworkService networkService = new NetworkService(Collections.singletonList(new Ec2NameResolver(nodeSettings)))__        _        try {_            networkService.resolveBindHostAddresses(null)__        } catch (IOException e) {_            assertThat(e.getMessage(), containsString("local-ipv4"))__        }_    };test,for,network,host;public,void,test,network,host,ec2private,ip,throws,ioexception,settings,node,settings,settings,builder,put,network,host,build,network,service,network,service,new,network,service,collections,singleton,list,new,ec2name,resolver,node,settings,try,network,service,resolve,bind,host,addresses,null,catch,ioexception,e,assert,that,e,get,message,contains,string,local,ipv4
Ec2NetworkTests -> public void testNetworkHostEc2PrivateIp() throws IOException;1541092382;Test for network.host: _ec2:privateIp_;public void testNetworkHostEc2PrivateIp() throws IOException {_        Settings nodeSettings = Settings.builder()_                .put("network.host", "_ec2:privateIp_")_                .build()___        NetworkService networkService = new NetworkService(Collections.singletonList(new Ec2NameResolver()))__        _        try {_            networkService.resolveBindHostAddresses(null)__            _        } catch (IOException e) {_            assertThat(e.getMessage(), containsString("local-ipv4"))__        }_    };test,for,network,host;public,void,test,network,host,ec2private,ip,throws,ioexception,settings,node,settings,settings,builder,put,network,host,build,network,service,network,service,new,network,service,collections,singleton,list,new,ec2name,resolver,try,network,service,resolve,bind,host,addresses,null,catch,ioexception,e,assert,that,e,get,message,contains,string,local,ipv4
Ec2NetworkTests -> public void testNetworkHostEc2PrivateIp() throws IOException;1541426529;Test for network.host: _ec2:privateIp_;public void testNetworkHostEc2PrivateIp() throws IOException {_        resolveEc2("_ec2:privateIp_", InetAddress.getByName("127.0.0.1"))__    };test,for,network,host;public,void,test,network,host,ec2private,ip,throws,ioexception,resolve,ec2,inet,address,get,by,name,127,0,0,1
Ec2NetworkTests -> public void testNetworkHostEc2PrivateIp() throws IOException;1544823664;Test for network.host: _ec2:privateIp_;public void testNetworkHostEc2PrivateIp() throws IOException {_        resolveEc2("_ec2:privateIp_", InetAddress.getByName("127.0.0.1"))__    };test,for,network,host;public,void,test,network,host,ec2private,ip,throws,ioexception,resolve,ec2,inet,address,get,by,name,127,0,0,1
Ec2NetworkTests -> public void testNetworkHostEc2PublicIpv4() throws IOException;1524684173;Test for network.host: _ec2:publicIpv4_;public void testNetworkHostEc2PublicIpv4() throws IOException {_        Settings nodeSettings = Settings.builder()_                .put("network.host", "_ec2:publicIpv4_")_                .build()___        NetworkService networkService = new NetworkService(Collections.singletonList(new Ec2NameResolver(nodeSettings)))__        _        try {_            networkService.resolveBindHostAddresses(null)__        } catch (IOException e) {_            assertThat(e.getMessage(), containsString("public-ipv4"))__        }_    };test,for,network,host;public,void,test,network,host,ec2public,ipv4,throws,ioexception,settings,node,settings,settings,builder,put,network,host,build,network,service,network,service,new,network,service,collections,singleton,list,new,ec2name,resolver,node,settings,try,network,service,resolve,bind,host,addresses,null,catch,ioexception,e,assert,that,e,get,message,contains,string,public,ipv4
Ec2NetworkTests -> public void testNetworkHostEc2PublicIpv4() throws IOException;1541092382;Test for network.host: _ec2:publicIpv4_;public void testNetworkHostEc2PublicIpv4() throws IOException {_        Settings nodeSettings = Settings.builder()_                .put("network.host", "_ec2:publicIpv4_")_                .build()___        NetworkService networkService = new NetworkService(Collections.singletonList(new Ec2NameResolver()))__        _        try {_            networkService.resolveBindHostAddresses(null)__            _        } catch (IOException e) {_            assertThat(e.getMessage(), containsString("public-ipv4"))__        }_    };test,for,network,host;public,void,test,network,host,ec2public,ipv4,throws,ioexception,settings,node,settings,settings,builder,put,network,host,build,network,service,network,service,new,network,service,collections,singleton,list,new,ec2name,resolver,try,network,service,resolve,bind,host,addresses,null,catch,ioexception,e,assert,that,e,get,message,contains,string,public,ipv4
Ec2NetworkTests -> public void testNetworkHostEc2PublicIpv4() throws IOException;1541426529;Test for network.host: _ec2:publicIpv4_;public void testNetworkHostEc2PublicIpv4() throws IOException {_        resolveEc2("_ec2:publicIpv4_", InetAddress.getByName("165.168.10.2"))__    };test,for,network,host;public,void,test,network,host,ec2public,ipv4,throws,ioexception,resolve,ec2,inet,address,get,by,name,165,168,10,2
Ec2NetworkTests -> public void testNetworkHostEc2PublicIpv4() throws IOException;1544823664;Test for network.host: _ec2:publicIpv4_;public void testNetworkHostEc2PublicIpv4() throws IOException {_        resolveEc2("_ec2:publicIpv4_", InetAddress.getByName("165.168.10.2"))__    };test,for,network,host;public,void,test,network,host,ec2public,ipv4,throws,ioexception,resolve,ec2,inet,address,get,by,name,165,168,10,2
Ec2NetworkTests -> public void testNetworkHostCoreLocal() throws IOException;1524684173;Test that we don't have any regression with network host core settings such as_network.host: _local_;public void testNetworkHostCoreLocal() throws IOException {_        Settings nodeSettings = Settings.builder()_                .put("network.host", "_local_")_                .build()___        NetworkService networkService = new NetworkService(Collections.singletonList(new Ec2NameResolver(nodeSettings)))__        InetAddress[] addresses = networkService.resolveBindHostAddresses(null)__        assertThat(addresses, arrayContaining(networkService.resolveBindHostAddresses(new String[] { "_local_" })))__    };test,that,we,don,t,have,any,regression,with,network,host,core,settings,such,as,network,host;public,void,test,network,host,core,local,throws,ioexception,settings,node,settings,settings,builder,put,network,host,build,network,service,network,service,new,network,service,collections,singleton,list,new,ec2name,resolver,node,settings,inet,address,addresses,network,service,resolve,bind,host,addresses,null,assert,that,addresses,array,containing,network,service,resolve,bind,host,addresses,new,string
Ec2NetworkTests -> public void testNetworkHostCoreLocal() throws IOException;1541092382;Test that we don't have any regression with network host core settings such as_network.host: _local_;public void testNetworkHostCoreLocal() throws IOException {_        NetworkService networkService = new NetworkService(Collections.singletonList(new Ec2NameResolver()))__        InetAddress[] addresses = networkService.resolveBindHostAddresses(null)__        assertThat(addresses, arrayContaining(networkService.resolveBindHostAddresses(new String[] { "_local_" })))__    };test,that,we,don,t,have,any,regression,with,network,host,core,settings,such,as,network,host;public,void,test,network,host,core,local,throws,ioexception,network,service,network,service,new,network,service,collections,singleton,list,new,ec2name,resolver,inet,address,addresses,network,service,resolve,bind,host,addresses,null,assert,that,addresses,array,containing,network,service,resolve,bind,host,addresses,new,string
Ec2NetworkTests -> public void testNetworkHostCoreLocal() throws IOException;1541426529;Test that we don't have any regression with network host core settings such as_network.host: _local_;public void testNetworkHostCoreLocal() throws IOException {_        NetworkService networkService = new NetworkService(Collections.singletonList(new Ec2NameResolver()))__        InetAddress[] addresses = networkService.resolveBindHostAddresses(null)__        assertThat(addresses, arrayContaining(networkService.resolveBindHostAddresses(new String[] { "_local_" })))__    };test,that,we,don,t,have,any,regression,with,network,host,core,settings,such,as,network,host;public,void,test,network,host,core,local,throws,ioexception,network,service,network,service,new,network,service,collections,singleton,list,new,ec2name,resolver,inet,address,addresses,network,service,resolve,bind,host,addresses,null,assert,that,addresses,array,containing,network,service,resolve,bind,host,addresses,new,string
Ec2NetworkTests -> public void testNetworkHostCoreLocal() throws IOException;1544823664;Test that we don't have any regression with network host core settings such as_network.host: _local_;public void testNetworkHostCoreLocal() throws IOException {_        NetworkService networkService = new NetworkService(Collections.singletonList(new Ec2NameResolver()))__        InetAddress[] addresses = networkService.resolveBindHostAddresses(null)__        assertThat(addresses, arrayContaining(networkService.resolveBindHostAddresses(new String[] { "_local_" })))__    };test,that,we,don,t,have,any,regression,with,network,host,core,settings,such,as,network,host;public,void,test,network,host,core,local,throws,ioexception,network,service,network,service,new,network,service,collections,singleton,list,new,ec2name,resolver,inet,address,addresses,network,service,resolve,bind,host,addresses,null,assert,that,addresses,array,containing,network,service,resolve,bind,host,addresses,new,string
Ec2NetworkTests -> public void testNetworkHostEc2() throws IOException;1524684173;Test for network.host: _ec2_;public void testNetworkHostEc2() throws IOException {_        Settings nodeSettings = Settings.builder()_                .put("network.host", "_ec2_")_                .build()___        NetworkService networkService = new NetworkService(Collections.singletonList(new Ec2NameResolver(nodeSettings)))__        _        try {_            networkService.resolveBindHostAddresses(null)__        } catch (IOException e) {_            assertThat(e.getMessage(), containsString("local-ipv4"))__        }_    };test,for,network,host;public,void,test,network,host,ec2,throws,ioexception,settings,node,settings,settings,builder,put,network,host,build,network,service,network,service,new,network,service,collections,singleton,list,new,ec2name,resolver,node,settings,try,network,service,resolve,bind,host,addresses,null,catch,ioexception,e,assert,that,e,get,message,contains,string,local,ipv4
Ec2NetworkTests -> public void testNetworkHostEc2() throws IOException;1541092382;Test for network.host: _ec2_;public void testNetworkHostEc2() throws IOException {_        Settings nodeSettings = Settings.builder()_                .put("network.host", "_ec2_")_                .build()___        NetworkService networkService = new NetworkService(Collections.singletonList(new Ec2NameResolver()))__        _        try {_            networkService.resolveBindHostAddresses(null)__            _        } catch (IOException e) {_            assertThat(e.getMessage(), containsString("local-ipv4"))__        }_    };test,for,network,host;public,void,test,network,host,ec2,throws,ioexception,settings,node,settings,settings,builder,put,network,host,build,network,service,network,service,new,network,service,collections,singleton,list,new,ec2name,resolver,try,network,service,resolve,bind,host,addresses,null,catch,ioexception,e,assert,that,e,get,message,contains,string,local,ipv4
Ec2NetworkTests -> public void testNetworkHostEc2() throws IOException;1541426529;Test for network.host: _ec2_;public void testNetworkHostEc2() throws IOException {_        resolveEc2("_ec2_", InetAddress.getByName("127.0.0.1"))__    };test,for,network,host;public,void,test,network,host,ec2,throws,ioexception,resolve,ec2,inet,address,get,by,name,127,0,0,1
Ec2NetworkTests -> public void testNetworkHostEc2() throws IOException;1544823664;Test for network.host: _ec2_;public void testNetworkHostEc2() throws IOException {_        resolveEc2("_ec2_", InetAddress.getByName("127.0.0.1"))__    };test,for,network,host;public,void,test,network,host,ec2,throws,ioexception,resolve,ec2,inet,address,get,by,name,127,0,0,1
Ec2NetworkTests -> public void testNetworkHostEc2PublicIp() throws IOException;1524684173;Test for network.host: _ec2:publicIp_;public void testNetworkHostEc2PublicIp() throws IOException {_        Settings nodeSettings = Settings.builder()_                .put("network.host", "_ec2:publicIp_")_                .build()___        NetworkService networkService = new NetworkService(Collections.singletonList(new Ec2NameResolver(nodeSettings)))__        _        try {_            networkService.resolveBindHostAddresses(null)__        } catch (IOException e) {_            assertThat(e.getMessage(), containsString("public-ipv4"))__        }_    };test,for,network,host;public,void,test,network,host,ec2public,ip,throws,ioexception,settings,node,settings,settings,builder,put,network,host,build,network,service,network,service,new,network,service,collections,singleton,list,new,ec2name,resolver,node,settings,try,network,service,resolve,bind,host,addresses,null,catch,ioexception,e,assert,that,e,get,message,contains,string,public,ipv4
Ec2NetworkTests -> public void testNetworkHostEc2PublicIp() throws IOException;1541092382;Test for network.host: _ec2:publicIp_;public void testNetworkHostEc2PublicIp() throws IOException {_        Settings nodeSettings = Settings.builder()_                .put("network.host", "_ec2:publicIp_")_                .build()___        NetworkService networkService = new NetworkService(Collections.singletonList(new Ec2NameResolver()))__        _        try {_            networkService.resolveBindHostAddresses(null)__            _        } catch (IOException e) {_            assertThat(e.getMessage(), containsString("public-ipv4"))__        }_    };test,for,network,host;public,void,test,network,host,ec2public,ip,throws,ioexception,settings,node,settings,settings,builder,put,network,host,build,network,service,network,service,new,network,service,collections,singleton,list,new,ec2name,resolver,try,network,service,resolve,bind,host,addresses,null,catch,ioexception,e,assert,that,e,get,message,contains,string,public,ipv4
Ec2NetworkTests -> public void testNetworkHostEc2PublicIp() throws IOException;1541426529;Test for network.host: _ec2:publicIp_;public void testNetworkHostEc2PublicIp() throws IOException {_        resolveEc2("_ec2:publicIp_", InetAddress.getByName("165.168.10.2"))__    };test,for,network,host;public,void,test,network,host,ec2public,ip,throws,ioexception,resolve,ec2,inet,address,get,by,name,165,168,10,2
Ec2NetworkTests -> public void testNetworkHostEc2PublicIp() throws IOException;1544823664;Test for network.host: _ec2:publicIp_;public void testNetworkHostEc2PublicIp() throws IOException {_        resolveEc2("_ec2:publicIp_", InetAddress.getByName("165.168.10.2"))__    };test,for,network,host;public,void,test,network,host,ec2public,ip,throws,ioexception,resolve,ec2,inet,address,get,by,name,165,168,10,2
Ec2NetworkTests -> public void testNetworkHostEc2PrivateDns() throws IOException;1524684173;Test for network.host: _ec2:privateDns_;public void testNetworkHostEc2PrivateDns() throws IOException {_        Settings nodeSettings = Settings.builder()_                .put("network.host", "_ec2:privateDns_")_                .build()___        NetworkService networkService = new NetworkService(Collections.singletonList(new Ec2NameResolver(nodeSettings)))__        _        try {_            networkService.resolveBindHostAddresses(null)__        } catch (IOException e) {_            assertThat(e.getMessage(), containsString("local-hostname"))__        }_    };test,for,network,host;public,void,test,network,host,ec2private,dns,throws,ioexception,settings,node,settings,settings,builder,put,network,host,build,network,service,network,service,new,network,service,collections,singleton,list,new,ec2name,resolver,node,settings,try,network,service,resolve,bind,host,addresses,null,catch,ioexception,e,assert,that,e,get,message,contains,string,local,hostname
Ec2NetworkTests -> public void testNetworkHostEc2PrivateDns() throws IOException;1541092382;Test for network.host: _ec2:privateDns_;public void testNetworkHostEc2PrivateDns() throws IOException {_        Settings nodeSettings = Settings.builder()_                .put("network.host", "_ec2:privateDns_")_                .build()___        NetworkService networkService = new NetworkService(Collections.singletonList(new Ec2NameResolver()))__        _        try {_            networkService.resolveBindHostAddresses(null)__            _        } catch (IOException e) {_            assertThat(e.getMessage(), containsString("local-hostname"))__        }_    };test,for,network,host;public,void,test,network,host,ec2private,dns,throws,ioexception,settings,node,settings,settings,builder,put,network,host,build,network,service,network,service,new,network,service,collections,singleton,list,new,ec2name,resolver,try,network,service,resolve,bind,host,addresses,null,catch,ioexception,e,assert,that,e,get,message,contains,string,local,hostname
Ec2NetworkTests -> public void testNetworkHostEc2PrivateDns() throws IOException;1541426529;Test for network.host: _ec2:privateDns_;public void testNetworkHostEc2PrivateDns() throws IOException {_        resolveEc2("_ec2:privateDns_", InetAddress.getByName("10.10.10.5"))__    };test,for,network,host;public,void,test,network,host,ec2private,dns,throws,ioexception,resolve,ec2,inet,address,get,by,name,10,10,10,5
Ec2NetworkTests -> public void testNetworkHostEc2PrivateDns() throws IOException;1544823664;Test for network.host: _ec2:privateDns_;public void testNetworkHostEc2PrivateDns() throws IOException {_        resolveEc2("_ec2:privateDns_", InetAddress.getByName("10.10.10.5"))__    };test,for,network,host;public,void,test,network,host,ec2private,dns,throws,ioexception,resolve,ec2,inet,address,get,by,name,10,10,10,5
