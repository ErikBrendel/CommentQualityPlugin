commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;20;;@BeforeClass public static void startHttp() throws Exception {     httpServer = MockHttpServer.createHttp(new InetSocketAddress(InetAddress.getLoopbackAddress().getHostAddress(), 0), 0).     BiConsumer<String, String> registerContext = (path, v) -> {         final byte[] message = v.getBytes(UTF_8).         httpServer.createContext(path, (s) -> {             s.sendResponseHeaders(RestStatus.OK.getStatus(), message.length).             OutputStream responseBody = s.getResponseBody().             responseBody.write(message).             responseBody.close().         }).     }.     registerContext.accept("/latest/meta-data/local-ipv4", "127.0.0.1").     registerContext.accept("/latest/meta-data/public-ipv4", "165.168.10.2").     registerContext.accept("/latest/meta-data/public-hostname", "165.168.10.3").     registerContext.accept("/latest/meta-data/local-hostname", "10.10.10.5").     httpServer.start(). }
false;public;0;6;;@Before public void setup() {     // redirect EC2 metadata service to httpServer     AccessController.doPrivileged((PrivilegedAction<String>) () -> System.setProperty(EC2_METADATA_SERVICE_OVERRIDE_SYSTEM_PROPERTY, "http://" + httpServer.getAddress().getHostName() + ":" + httpServer.getAddress().getPort())). }
false;public,static;0;5;;@AfterClass public static void stopHttp() {     httpServer.stop(0).     httpServer = null. }
true;public;0;3;/**  * Test for network.host: _ec2_  */ ;/**  * Test for network.host: _ec2_  */ public void testNetworkHostEc2() throws IOException {     resolveEc2("_ec2_", InetAddress.getByName("127.0.0.1")). }
true;public;0;12;/**  * Test for network.host: _ec2_  */ ;/**  * Test for network.host: _ec2_  */ public void testNetworkHostUnableToResolveEc2() {     // redirect EC2 metadata service to unknown location     AccessController.doPrivileged((PrivilegedAction<String>) () -> System.setProperty(EC2_METADATA_SERVICE_OVERRIDE_SYSTEM_PROPERTY, "http://127.0.0.1/")).     try {         resolveEc2("_ec2_", (InetAddress[]) null).     } catch (IOException e) {         assertThat(e.getMessage(), equalTo("IOException caught when fetching InetAddress from [http://127.0.0.1//latest/meta-data/local-ipv4]")).     } }
true;public;0;3;/**  * Test for network.host: _ec2:publicIp_  */ ;/**  * Test for network.host: _ec2:publicIp_  */ public void testNetworkHostEc2PublicIp() throws IOException {     resolveEc2("_ec2:publicIp_", InetAddress.getByName("165.168.10.2")). }
true;public;0;3;/**  * Test for network.host: _ec2:privateIp_  */ ;/**  * Test for network.host: _ec2:privateIp_  */ public void testNetworkHostEc2PrivateIp() throws IOException {     resolveEc2("_ec2:privateIp_", InetAddress.getByName("127.0.0.1")). }
true;public;0;3;/**  * Test for network.host: _ec2:privateIpv4_  */ ;/**  * Test for network.host: _ec2:privateIpv4_  */ public void testNetworkHostEc2PrivateIpv4() throws IOException {     resolveEc2("_ec2:privateIpv4_", InetAddress.getByName("127.0.0.1")). }
true;public;0;3;/**  * Test for network.host: _ec2:privateDns_  */ ;/**  * Test for network.host: _ec2:privateDns_  */ public void testNetworkHostEc2PrivateDns() throws IOException {     resolveEc2("_ec2:privateDns_", InetAddress.getByName("10.10.10.5")). }
true;public;0;3;/**  * Test for network.host: _ec2:publicIpv4_  */ ;/**  * Test for network.host: _ec2:publicIpv4_  */ public void testNetworkHostEc2PublicIpv4() throws IOException {     resolveEc2("_ec2:publicIpv4_", InetAddress.getByName("165.168.10.2")). }
true;public;0;3;/**  * Test for network.host: _ec2:publicDns_  */ ;/**  * Test for network.host: _ec2:publicDns_  */ public void testNetworkHostEc2PublicDns() throws IOException {     resolveEc2("_ec2:publicDns_", InetAddress.getByName("165.168.10.3")). }
false;private;2;15;;private InetAddress[] resolveEc2(String host, InetAddress... expected) throws IOException {     Settings nodeSettings = Settings.builder().put("network.host", host).build().     NetworkService networkService = new NetworkService(Collections.singletonList(new Ec2NameResolver())).     InetAddress[] addresses = networkService.resolveBindHostAddresses(NetworkService.GLOBAL_NETWORK_BIND_HOST_SETTING.get(nodeSettings).toArray(Strings.EMPTY_ARRAY)).     if (expected == null) {         fail("We should get an IOException, resolved addressed:" + Arrays.toString(addresses)).     }     assertThat(addresses, arrayContaining(expected)).     return addresses. }
true;public;0;5;/**  * Test that we don't have any regression with network host core settings such as  * network.host: _local_  */ ;/**  * Test that we don't have any regression with network host core settings such as  * network.host: _local_  */ public void testNetworkHostCoreLocal() throws IOException {     NetworkService networkService = new NetworkService(Collections.singletonList(new Ec2NameResolver())).     InetAddress[] addresses = networkService.resolveBindHostAddresses(null).     assertThat(addresses, arrayContaining(networkService.resolveBindHostAddresses(new String[] { "_local_" }))). }
