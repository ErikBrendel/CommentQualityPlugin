commented;modifiers;parameterAmount;loc;comment;code
false;static;1;34;;static AWSCredentials loadCredentials(Settings settings) {     try (SecureString key = ACCESS_KEY_SETTING.get(settings).         SecureString secret = SECRET_KEY_SETTING.get(settings).         SecureString sessionToken = SESSION_TOKEN_SETTING.get(settings)) {         if (key.length() == 0 && secret.length() == 0) {             if (sessionToken.length() > 0) {                 throw new SettingsException("Setting [{}] is set but [{}] and [{}] are not", SESSION_TOKEN_SETTING.getKey(), ACCESS_KEY_SETTING.getKey(), SECRET_KEY_SETTING.getKey()).             }             logger.debug("Using either environment variables, system properties or instance profile credentials").             return null.         } else {             if (key.length() == 0) {                 deprecationLogger.deprecated("Setting [{}] is set but [{}] is not, which will be unsupported in future", SECRET_KEY_SETTING.getKey(), ACCESS_KEY_SETTING.getKey()).             }             if (secret.length() == 0) {                 deprecationLogger.deprecated("Setting [{}] is set but [{}] is not, which will be unsupported in future", ACCESS_KEY_SETTING.getKey(), SECRET_KEY_SETTING.getKey()).             }             final AWSCredentials credentials.             if (sessionToken.length() == 0) {                 logger.debug("Using basic key/secret credentials").                 credentials = new BasicAWSCredentials(key.toString(), secret.toString()).             } else {                 logger.debug("Using basic session credentials").                 credentials = new BasicSessionCredentials(key.toString(), secret.toString(), sessionToken.toString()).             }             return credentials.         }     } }
true;static;1;15;/**  * Parse settings for a single client.  */ ;// pkg private for tests /**  * Parse settings for a single client.  */ static Ec2ClientSettings getClientSettings(Settings settings) {     final AWSCredentials credentials = loadCredentials(settings).     try (SecureString proxyUsername = PROXY_USERNAME_SETTING.get(settings).         SecureString proxyPassword = PROXY_PASSWORD_SETTING.get(settings)) {         return new Ec2ClientSettings(credentials, ENDPOINT_SETTING.get(settings), PROTOCOL_SETTING.get(settings), PROXY_HOST_SETTING.get(settings), PROXY_PORT_SETTING.get(settings), proxyUsername.toString(), proxyPassword.toString(), (int) READ_TIMEOUT_SETTING.get(settings).millis()).     } }
