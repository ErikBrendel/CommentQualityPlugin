commented;modifiers;parameterAmount;loc;comment;code
true;public;1;24;/**  * @param type the ec2 hostname type to discover.  * @return the appropriate host resolved from ec2 meta-data, or null if it cannot be obtained.  * @see CustomNameResolver#resolveIfPossible(String)  */ ;/**  * @param type the ec2 hostname type to discover.  * @return the appropriate host resolved from ec2 meta-data, or null if it cannot be obtained.  * @see CustomNameResolver#resolveIfPossible(String)  */ @SuppressForbidden(reason = "We call getInputStream in doPrivileged and provide SocketPermission") public InetAddress[] resolve(Ec2HostnameType type) throws IOException {     InputStream in = null.     String metadataUrl = EC2MetadataUtils.getHostAddressForEC2MetadataService() + "/latest/meta-data/" + type.ec2Name.     try {         URL url = new URL(metadataUrl).         logger.debug("obtaining ec2 hostname from ec2 meta-data url {}", url).         URLConnection urlConnection = SocketAccess.doPrivilegedIOException(url::openConnection).         urlConnection.setConnectTimeout(2000).         in = SocketAccess.doPrivilegedIOException(urlConnection::getInputStream).         BufferedReader urlReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8)).         String metadataResult = urlReader.readLine().         if (metadataResult == null || metadataResult.length() == 0) {             throw new IOException("no gce metadata returned from [" + url + "] for [" + type.configName + "]").         }         // only one address: because we explicitly ask for only one via the Ec2HostnameType         return new InetAddress[] { InetAddress.getByName(metadataResult) }.     } catch (IOException e) {         throw new IOException("IOException caught when fetching InetAddress from [" + metadataUrl + "]", e).     } finally {         IOUtils.closeWhileHandlingException(in).     } }
false;public;0;5;;@Override public InetAddress[] resolveDefault() {     // using this, one has to explicitly specify _ec2_ in network setting     return null. // return resolve(Ec2HostnameType.DEFAULT, false). }
false;public;1;9;;@Override public InetAddress[] resolveIfPossible(String value) throws IOException {     for (Ec2HostnameType type : Ec2HostnameType.values()) {         if (type.configName.equals(value)) {             return resolve(type).         }     }     return null. }
