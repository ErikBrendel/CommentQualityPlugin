# id;timestamp;commentText;codeText;commentWords;codeWords
Ec2NameResolver -> @SuppressForbidden(reason = "We call getInputStream in doPrivileged and provide SocketPermission")     public InetAddress[] resolve(Ec2HostnameType type) throws IOException;1524684173;@param type the ec2 hostname type to discover._@return the appropriate host resolved from ec2 meta-data, or null if it cannot be obtained._@see CustomNameResolver#resolveIfPossible(String);@SuppressForbidden(reason = "We call getInputStream in doPrivileged and provide SocketPermission")_    public InetAddress[] resolve(Ec2HostnameType type) throws IOException {_        InputStream in = null__        String metadataUrl = AwsEc2ServiceImpl.EC2_METADATA_URL + type.ec2Name__        try {_            URL url = new URL(metadataUrl)__            logger.debug("obtaining ec2 hostname from ec2 meta-data url {}", url)__            URLConnection urlConnection = SocketAccess.doPrivilegedIOException(url::openConnection)__            urlConnection.setConnectTimeout(2000)__            in = SocketAccess.doPrivilegedIOException(urlConnection::getInputStream)__            BufferedReader urlReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8))___            String metadataResult = urlReader.readLine()__            if (metadataResult == null || metadataResult.length() == 0) {_                throw new IOException("no gce metadata returned from [" + url + "] for [" + type.configName + "]")__            }_            _            return new InetAddress[] { InetAddress.getByName(metadataResult) }__        } catch (IOException e) {_            throw new IOException("IOException caught when fetching InetAddress from [" + metadataUrl + "]", e)__        } finally {_            IOUtils.closeWhileHandlingException(in)__        }_    };param,type,the,ec2,hostname,type,to,discover,return,the,appropriate,host,resolved,from,ec2,meta,data,or,null,if,it,cannot,be,obtained,see,custom,name,resolver,resolve,if,possible,string;suppress,forbidden,reason,we,call,get,input,stream,in,do,privileged,and,provide,socket,permission,public,inet,address,resolve,ec2hostname,type,type,throws,ioexception,input,stream,in,null,string,metadata,url,aws,ec2service,impl,type,ec2name,try,url,url,new,url,metadata,url,logger,debug,obtaining,ec2,hostname,from,ec2,meta,data,url,url,urlconnection,url,connection,socket,access,do,privileged,ioexception,url,open,connection,url,connection,set,connect,timeout,2000,in,socket,access,do,privileged,ioexception,url,connection,get,input,stream,buffered,reader,url,reader,new,buffered,reader,new,input,stream,reader,in,standard,charsets,string,metadata,result,url,reader,read,line,if,metadata,result,null,metadata,result,length,0,throw,new,ioexception,no,gce,metadata,returned,from,url,for,type,config,name,return,new,inet,address,inet,address,get,by,name,metadata,result,catch,ioexception,e,throw,new,ioexception,ioexception,caught,when,fetching,inet,address,from,metadata,url,e,finally,ioutils,close,while,handling,exception,in
Ec2NameResolver -> @SuppressForbidden(reason = "We call getInputStream in doPrivileged and provide SocketPermission")     public InetAddress[] resolve(Ec2HostnameType type) throws IOException;1541092382;@param type the ec2 hostname type to discover._@return the appropriate host resolved from ec2 meta-data, or null if it cannot be obtained._@see CustomNameResolver#resolveIfPossible(String);@SuppressForbidden(reason = "We call getInputStream in doPrivileged and provide SocketPermission")_    public InetAddress[] resolve(Ec2HostnameType type) throws IOException {_        InputStream in = null__        String metadataUrl = AwsEc2ServiceImpl.EC2_METADATA_URL + type.ec2Name__        try {_            URL url = new URL(metadataUrl)__            logger.debug("obtaining ec2 hostname from ec2 meta-data url {}", url)__            URLConnection urlConnection = SocketAccess.doPrivilegedIOException(url::openConnection)__            urlConnection.setConnectTimeout(2000)__            in = SocketAccess.doPrivilegedIOException(urlConnection::getInputStream)__            BufferedReader urlReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8))___            String metadataResult = urlReader.readLine()__            if (metadataResult == null || metadataResult.length() == 0) {_                throw new IOException("no gce metadata returned from [" + url + "] for [" + type.configName + "]")__            }_            _            return new InetAddress[] { InetAddress.getByName(metadataResult) }__        } catch (IOException e) {_            throw new IOException("IOException caught when fetching InetAddress from [" + metadataUrl + "]", e)__        } finally {_            IOUtils.closeWhileHandlingException(in)__        }_    };param,type,the,ec2,hostname,type,to,discover,return,the,appropriate,host,resolved,from,ec2,meta,data,or,null,if,it,cannot,be,obtained,see,custom,name,resolver,resolve,if,possible,string;suppress,forbidden,reason,we,call,get,input,stream,in,do,privileged,and,provide,socket,permission,public,inet,address,resolve,ec2hostname,type,type,throws,ioexception,input,stream,in,null,string,metadata,url,aws,ec2service,impl,type,ec2name,try,url,url,new,url,metadata,url,logger,debug,obtaining,ec2,hostname,from,ec2,meta,data,url,url,urlconnection,url,connection,socket,access,do,privileged,ioexception,url,open,connection,url,connection,set,connect,timeout,2000,in,socket,access,do,privileged,ioexception,url,connection,get,input,stream,buffered,reader,url,reader,new,buffered,reader,new,input,stream,reader,in,standard,charsets,string,metadata,result,url,reader,read,line,if,metadata,result,null,metadata,result,length,0,throw,new,ioexception,no,gce,metadata,returned,from,url,for,type,config,name,return,new,inet,address,inet,address,get,by,name,metadata,result,catch,ioexception,e,throw,new,ioexception,ioexception,caught,when,fetching,inet,address,from,metadata,url,e,finally,ioutils,close,while,handling,exception,in
Ec2NameResolver -> @SuppressForbidden(reason = "We call getInputStream in doPrivileged and provide SocketPermission")     public InetAddress[] resolve(Ec2HostnameType type) throws IOException;1541426529;@param type the ec2 hostname type to discover._@return the appropriate host resolved from ec2 meta-data, or null if it cannot be obtained._@see CustomNameResolver#resolveIfPossible(String);@SuppressForbidden(reason = "We call getInputStream in doPrivileged and provide SocketPermission")_    public InetAddress[] resolve(Ec2HostnameType type) throws IOException {_        InputStream in = null__        String metadataUrl = EC2MetadataUtils.getHostAddressForEC2MetadataService() + "/latest/meta-data/" + type.ec2Name__        try {_            URL url = new URL(metadataUrl)__            logger.debug("obtaining ec2 hostname from ec2 meta-data url {}", url)__            URLConnection urlConnection = SocketAccess.doPrivilegedIOException(url::openConnection)__            urlConnection.setConnectTimeout(2000)__            in = SocketAccess.doPrivilegedIOException(urlConnection::getInputStream)__            BufferedReader urlReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8))___            String metadataResult = urlReader.readLine()__            if (metadataResult == null || metadataResult.length() == 0) {_                throw new IOException("no gce metadata returned from [" + url + "] for [" + type.configName + "]")__            }_            _            return new InetAddress[] { InetAddress.getByName(metadataResult) }__        } catch (IOException e) {_            throw new IOException("IOException caught when fetching InetAddress from [" + metadataUrl + "]", e)__        } finally {_            IOUtils.closeWhileHandlingException(in)__        }_    };param,type,the,ec2,hostname,type,to,discover,return,the,appropriate,host,resolved,from,ec2,meta,data,or,null,if,it,cannot,be,obtained,see,custom,name,resolver,resolve,if,possible,string;suppress,forbidden,reason,we,call,get,input,stream,in,do,privileged,and,provide,socket,permission,public,inet,address,resolve,ec2hostname,type,type,throws,ioexception,input,stream,in,null,string,metadata,url,ec2metadata,utils,get,host,address,for,ec2metadata,service,latest,meta,data,type,ec2name,try,url,url,new,url,metadata,url,logger,debug,obtaining,ec2,hostname,from,ec2,meta,data,url,url,urlconnection,url,connection,socket,access,do,privileged,ioexception,url,open,connection,url,connection,set,connect,timeout,2000,in,socket,access,do,privileged,ioexception,url,connection,get,input,stream,buffered,reader,url,reader,new,buffered,reader,new,input,stream,reader,in,standard,charsets,string,metadata,result,url,reader,read,line,if,metadata,result,null,metadata,result,length,0,throw,new,ioexception,no,gce,metadata,returned,from,url,for,type,config,name,return,new,inet,address,inet,address,get,by,name,metadata,result,catch,ioexception,e,throw,new,ioexception,ioexception,caught,when,fetching,inet,address,from,metadata,url,e,finally,ioutils,close,while,handling,exception,in
Ec2NameResolver -> @SuppressForbidden(reason = "We call getInputStream in doPrivileged and provide SocketPermission")     public InetAddress[] resolve(Ec2HostnameType type) throws IOException;1542397818;@param type the ec2 hostname type to discover._@return the appropriate host resolved from ec2 meta-data, or null if it cannot be obtained._@see CustomNameResolver#resolveIfPossible(String);@SuppressForbidden(reason = "We call getInputStream in doPrivileged and provide SocketPermission")_    public InetAddress[] resolve(Ec2HostnameType type) throws IOException {_        InputStream in = null__        String metadataUrl = EC2MetadataUtils.getHostAddressForEC2MetadataService() + "/latest/meta-data/" + type.ec2Name__        try {_            URL url = new URL(metadataUrl)__            logger.debug("obtaining ec2 hostname from ec2 meta-data url {}", url)__            URLConnection urlConnection = SocketAccess.doPrivilegedIOException(url::openConnection)__            urlConnection.setConnectTimeout(2000)__            in = SocketAccess.doPrivilegedIOException(urlConnection::getInputStream)__            BufferedReader urlReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8))___            String metadataResult = urlReader.readLine()__            if (metadataResult == null || metadataResult.length() == 0) {_                throw new IOException("no gce metadata returned from [" + url + "] for [" + type.configName + "]")__            }_            _            return new InetAddress[] { InetAddress.getByName(metadataResult) }__        } catch (IOException e) {_            throw new IOException("IOException caught when fetching InetAddress from [" + metadataUrl + "]", e)__        } finally {_            IOUtils.closeWhileHandlingException(in)__        }_    };param,type,the,ec2,hostname,type,to,discover,return,the,appropriate,host,resolved,from,ec2,meta,data,or,null,if,it,cannot,be,obtained,see,custom,name,resolver,resolve,if,possible,string;suppress,forbidden,reason,we,call,get,input,stream,in,do,privileged,and,provide,socket,permission,public,inet,address,resolve,ec2hostname,type,type,throws,ioexception,input,stream,in,null,string,metadata,url,ec2metadata,utils,get,host,address,for,ec2metadata,service,latest,meta,data,type,ec2name,try,url,url,new,url,metadata,url,logger,debug,obtaining,ec2,hostname,from,ec2,meta,data,url,url,urlconnection,url,connection,socket,access,do,privileged,ioexception,url,open,connection,url,connection,set,connect,timeout,2000,in,socket,access,do,privileged,ioexception,url,connection,get,input,stream,buffered,reader,url,reader,new,buffered,reader,new,input,stream,reader,in,standard,charsets,string,metadata,result,url,reader,read,line,if,metadata,result,null,metadata,result,length,0,throw,new,ioexception,no,gce,metadata,returned,from,url,for,type,config,name,return,new,inet,address,inet,address,get,by,name,metadata,result,catch,ioexception,e,throw,new,ioexception,ioexception,caught,when,fetching,inet,address,from,metadata,url,e,finally,ioutils,close,while,handling,exception,in
