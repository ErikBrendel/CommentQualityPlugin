commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public NetworkService.CustomNameResolver getCustomNameResolver(Settings settings) {     logger.debug("Register _ec2_, _ec2:xxx_ network names").     return new Ec2NameResolver(). }
false;public;2;5;;@Override public Map<String, Supplier<SeedHostsProvider>> getSeedHostProviders(TransportService transportService, NetworkService networkService) {     return Collections.singletonMap(EC2, () -> new AwsEc2SeedHostsProvider(settings, transportService, ec2Service)). }
false;public;0;23;;@Override public List<Setting<?>> getSettings() {     return Arrays.asList(// Register EC2 discovery settings: discovery.ec2     Ec2ClientSettings.ACCESS_KEY_SETTING, Ec2ClientSettings.SECRET_KEY_SETTING, Ec2ClientSettings.SESSION_TOKEN_SETTING, Ec2ClientSettings.ENDPOINT_SETTING, Ec2ClientSettings.PROTOCOL_SETTING, Ec2ClientSettings.PROXY_HOST_SETTING, Ec2ClientSettings.PROXY_PORT_SETTING, Ec2ClientSettings.PROXY_USERNAME_SETTING, Ec2ClientSettings.PROXY_PASSWORD_SETTING, Ec2ClientSettings.READ_TIMEOUT_SETTING, AwsEc2Service.HOST_TYPE_SETTING, AwsEc2Service.ANY_GROUP_SETTING, AwsEc2Service.GROUPS_SETTING, AwsEc2Service.AVAILABILITY_ZONES_SETTING, AwsEc2Service.NODE_CACHE_TIME_SETTING, AwsEc2Service.TAG_SETTING, // Register cloud node settings: cloud.node     AwsEc2Service.AUTO_ATTRIBUTE_SETTING). }
false;public;0;10;;@Override public Settings additionalSettings() {     final Settings.Builder builder = Settings.builder().     // Adds a node attribute for the ec2 availability zone     final String azMetadataUrl = EC2MetadataUtils.getHostAddressForEC2MetadataService() + "/latest/meta-data/placement/availability-zone".     builder.put(getAvailabilityZoneNodeAttributes(settings, azMetadataUrl)).     return builder.build(). }
true;static;2;35;// pkg private for testing ;// pkg private for testing @SuppressForbidden(reason = "We call getInputStream in doPrivileged and provide SocketPermission") static Settings getAvailabilityZoneNodeAttributes(Settings settings, String azMetadataUrl) {     if (AwsEc2Service.AUTO_ATTRIBUTE_SETTING.get(settings) == false) {         return Settings.EMPTY.     }     final Settings.Builder attrs = Settings.builder().     final URL url.     final URLConnection urlConnection.     try {         url = new URL(azMetadataUrl).         logger.debug("obtaining ec2 [placement/availability-zone] from ec2 meta-data url {}", url).         urlConnection = SocketAccess.doPrivilegedIOException(url::openConnection).         urlConnection.setConnectTimeout(2000).     } catch (final IOException e) {         // should not happen, we know the url is not malformed, and openConnection does not actually hit network         throw new UncheckedIOException(e).     }     try (InputStream in = SocketAccess.doPrivilegedIOException(urlConnection::getInputStream).         BufferedReader urlReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8))) {         final String metadataResult = urlReader.readLine().         if ((metadataResult == null) || (metadataResult.length() == 0)) {             throw new IllegalStateException("no ec2 metadata returned from " + url).         } else {             attrs.put(Node.NODE_ATTRIBUTES.getKey() + "aws_availability_zone", metadataResult).         }     } catch (final IOException e) {         // this is lenient so the plugin does not fail when installed outside of ec2         logger.error("failed to get metadata for [placement/availability-zone]", e).     }     return attrs.build(). }
false;public;0;4;;@Override public void close() throws IOException {     ec2Service.close(). }
false;public;1;6;;@Override public void reload(Settings settings) {     // secure settings should be readable     final Ec2ClientSettings clientSettings = Ec2ClientSettings.getClientSettings(settings).     ec2Service.refreshAndClearCache(clientSettings). }
