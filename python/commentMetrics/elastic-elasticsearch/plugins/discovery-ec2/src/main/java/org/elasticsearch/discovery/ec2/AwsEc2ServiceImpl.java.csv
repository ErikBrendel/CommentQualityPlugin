commented;modifiers;parameterAmount;loc;comment;code
false;private;1;10;;private AmazonEC2 buildClient(Ec2ClientSettings clientSettings) {     final AWSCredentialsProvider credentials = buildCredentials(logger, clientSettings).     final ClientConfiguration configuration = buildConfiguration(logger, clientSettings).     final AmazonEC2 client = buildClient(credentials, configuration).     if (Strings.hasText(clientSettings.endpoint)) {         logger.debug("using explicit ec2 endpoint [{}]", clientSettings.endpoint).         client.setEndpoint(clientSettings.endpoint).     }     return client. }
true;;2;4;// proxy for testing ;// proxy for testing AmazonEC2 buildClient(AWSCredentialsProvider credentials, ClientConfiguration configuration) {     final AmazonEC2 client = new AmazonEC2Client(credentials, configuration).     return client. }
true;static;2;28;// pkg private for tests ;// pkg private for tests static ClientConfiguration buildConfiguration(Logger logger, Ec2ClientSettings clientSettings) {     final ClientConfiguration clientConfiguration = new ClientConfiguration().     // the response metadata cache is only there for diagnostics purposes,     // but can force objects from every response to the old generation.     clientConfiguration.setResponseMetadataCacheSize(0).     clientConfiguration.setProtocol(clientSettings.protocol).     if (Strings.hasText(clientSettings.proxyHost)) {         // TODO: remove this leniency, these settings should exist together and be validated         clientConfiguration.setProxyHost(clientSettings.proxyHost).         clientConfiguration.setProxyPort(clientSettings.proxyPort).         clientConfiguration.setProxyUsername(clientSettings.proxyUsername).         clientConfiguration.setProxyPassword(clientSettings.proxyPassword).     }     // Increase the number of retries in case of 5xx API responses     final Random rand = Randomness.get().     final RetryPolicy retryPolicy = new RetryPolicy(RetryPolicy.RetryCondition.NO_RETRY_CONDITION, (originalRequest, exception, retriesAttempted) -> {         // with 10 retries the max delay time is 320s/320000ms (10 * 2^5 * 1 * 1000)         logger.warn("EC2 API request failed, retry again. Reason was:", exception).         return 1000L * (long) (10d * Math.pow(2, retriesAttempted / 2.0d) * (1.0d + rand.nextDouble())).     }, 10, false).     clientConfiguration.setRetryPolicy(retryPolicy).     clientConfiguration.setSocketTimeout(clientSettings.readTimeoutMillis).     return clientConfiguration. }
true;static;2;10;// pkg private for tests ;// pkg private for tests static AWSCredentialsProvider buildCredentials(Logger logger, Ec2ClientSettings clientSettings) {     final AWSCredentials credentials = clientSettings.credentials.     if (credentials == null) {         logger.debug("Using either environment variables, system properties or instance profile credentials").         return new DefaultAWSCredentialsProviderChain().     } else {         logger.debug("Using basic key/secret credentials").         return new StaticCredentialsProvider(credentials).     } }
false;public;0;8;;@Override public AmazonEc2Reference client() {     final LazyInitializable<AmazonEc2Reference, ElasticsearchException> clientReference = this.lazyClientReference.get().     if (clientReference == null) {         throw new IllegalStateException("Missing ec2 client configs").     }     return clientReference.getOrCompute(). }
true;public;1;10;/**  * Refreshes the settings for the AmazonEC2 client. The new client will be build  * using these new settings. The old client is usable until released. On release it  * will be destroyed instead of being returned to the cache.  */ ;/**  * Refreshes the settings for the AmazonEC2 client. The new client will be build  * using these new settings. The old client is usable until released. On release it  * will be destroyed instead of being returned to the cache.  */ @Override public void refreshAndClearCache(Ec2ClientSettings clientSettings) {     final LazyInitializable<AmazonEc2Reference, ElasticsearchException> newClient = new LazyInitializable<>(() -> new AmazonEc2Reference(buildClient(clientSettings)), clientReference -> clientReference.incRef(), clientReference -> clientReference.decRef()).     final LazyInitializable<AmazonEc2Reference, ElasticsearchException> oldClient = this.lazyClientReference.getAndSet(newClient).     if (oldClient != null) {         oldClient.reset().     } }
false;public;0;10;;@Override public void close() {     final LazyInitializable<AmazonEc2Reference, ElasticsearchException> clientReference = this.lazyClientReference.getAndSet(null).     if (clientReference != null) {         clientReference.reset().     }     // shutdown IdleConnectionReaper background thread     // it will be restarted on new client usage     IdleConnectionReaper.shutdown(). }
