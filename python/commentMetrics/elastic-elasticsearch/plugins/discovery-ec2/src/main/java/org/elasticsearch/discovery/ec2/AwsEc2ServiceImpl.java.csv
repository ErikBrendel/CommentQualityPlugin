# id;timestamp;commentText;codeText;commentWords;codeWords
AwsEc2ServiceImpl -> @Override     public void refreshAndClearCache(Ec2ClientSettings clientSettings);1529341607;Refreshes the settings for the AmazonEC2 client. The new client will be build_using these new settings. The old client is usable until released. On release it_will be destroyed instead of being returned to the cache.;@Override_    public void refreshAndClearCache(Ec2ClientSettings clientSettings) {_        final LazyInitializable<AmazonEc2Reference, ElasticsearchException> newClient = new LazyInitializable<>(_                () -> new AmazonEc2Reference(buildClient(clientSettings)), clientReference -> clientReference.incRef(),_                clientReference -> clientReference.decRef())__        final LazyInitializable<AmazonEc2Reference, ElasticsearchException> oldClient = this.lazyClientReference.getAndSet(newClient)__        if (oldClient != null) {_            oldClient.reset()__        }_    };refreshes,the,settings,for,the,amazon,ec2,client,the,new,client,will,be,build,using,these,new,settings,the,old,client,is,usable,until,released,on,release,it,will,be,destroyed,instead,of,being,returned,to,the,cache;override,public,void,refresh,and,clear,cache,ec2client,settings,client,settings,final,lazy,initializable,amazon,ec2reference,elasticsearch,exception,new,client,new,lazy,initializable,new,amazon,ec2reference,build,client,client,settings,client,reference,client,reference,inc,ref,client,reference,client,reference,dec,ref,final,lazy,initializable,amazon,ec2reference,elasticsearch,exception,old,client,this,lazy,client,reference,get,and,set,new,client,if,old,client,null,old,client,reset
AwsEc2ServiceImpl -> @Override     public void refreshAndClearCache(Ec2ClientSettings clientSettings);1531179852;Refreshes the settings for the AmazonEC2 client. The new client will be build_using these new settings. The old client is usable until released. On release it_will be destroyed instead of being returned to the cache.;@Override_    public void refreshAndClearCache(Ec2ClientSettings clientSettings) {_        final LazyInitializable<AmazonEc2Reference, ElasticsearchException> newClient = new LazyInitializable<>(_                () -> new AmazonEc2Reference(buildClient(clientSettings)), clientReference -> clientReference.incRef(),_                clientReference -> clientReference.decRef())__        final LazyInitializable<AmazonEc2Reference, ElasticsearchException> oldClient = this.lazyClientReference.getAndSet(newClient)__        if (oldClient != null) {_            oldClient.reset()__        }_    };refreshes,the,settings,for,the,amazon,ec2,client,the,new,client,will,be,build,using,these,new,settings,the,old,client,is,usable,until,released,on,release,it,will,be,destroyed,instead,of,being,returned,to,the,cache;override,public,void,refresh,and,clear,cache,ec2client,settings,client,settings,final,lazy,initializable,amazon,ec2reference,elasticsearch,exception,new,client,new,lazy,initializable,new,amazon,ec2reference,build,client,client,settings,client,reference,client,reference,inc,ref,client,reference,client,reference,dec,ref,final,lazy,initializable,amazon,ec2reference,elasticsearch,exception,old,client,this,lazy,client,reference,get,and,set,new,client,if,old,client,null,old,client,reset
AwsEc2ServiceImpl -> @Override     public void refreshAndClearCache(Ec2ClientSettings clientSettings);1541092382;Refreshes the settings for the AmazonEC2 client. The new client will be build_using these new settings. The old client is usable until released. On release it_will be destroyed instead of being returned to the cache.;@Override_    public void refreshAndClearCache(Ec2ClientSettings clientSettings) {_        final LazyInitializable<AmazonEc2Reference, ElasticsearchException> newClient = new LazyInitializable<>(_                () -> new AmazonEc2Reference(buildClient(clientSettings)), clientReference -> clientReference.incRef(),_                clientReference -> clientReference.decRef())__        final LazyInitializable<AmazonEc2Reference, ElasticsearchException> oldClient = this.lazyClientReference.getAndSet(newClient)__        if (oldClient != null) {_            oldClient.reset()__        }_    };refreshes,the,settings,for,the,amazon,ec2,client,the,new,client,will,be,build,using,these,new,settings,the,old,client,is,usable,until,released,on,release,it,will,be,destroyed,instead,of,being,returned,to,the,cache;override,public,void,refresh,and,clear,cache,ec2client,settings,client,settings,final,lazy,initializable,amazon,ec2reference,elasticsearch,exception,new,client,new,lazy,initializable,new,amazon,ec2reference,build,client,client,settings,client,reference,client,reference,inc,ref,client,reference,client,reference,dec,ref,final,lazy,initializable,amazon,ec2reference,elasticsearch,exception,old,client,this,lazy,client,reference,get,and,set,new,client,if,old,client,null,old,client,reset
AwsEc2ServiceImpl -> @Override     public void refreshAndClearCache(Ec2ClientSettings clientSettings);1541426529;Refreshes the settings for the AmazonEC2 client. The new client will be build_using these new settings. The old client is usable until released. On release it_will be destroyed instead of being returned to the cache.;@Override_    public void refreshAndClearCache(Ec2ClientSettings clientSettings) {_        final LazyInitializable<AmazonEc2Reference, ElasticsearchException> newClient = new LazyInitializable<>(_                () -> new AmazonEc2Reference(buildClient(clientSettings)), clientReference -> clientReference.incRef(),_                clientReference -> clientReference.decRef())__        final LazyInitializable<AmazonEc2Reference, ElasticsearchException> oldClient = this.lazyClientReference.getAndSet(newClient)__        if (oldClient != null) {_            oldClient.reset()__        }_    };refreshes,the,settings,for,the,amazon,ec2,client,the,new,client,will,be,build,using,these,new,settings,the,old,client,is,usable,until,released,on,release,it,will,be,destroyed,instead,of,being,returned,to,the,cache;override,public,void,refresh,and,clear,cache,ec2client,settings,client,settings,final,lazy,initializable,amazon,ec2reference,elasticsearch,exception,new,client,new,lazy,initializable,new,amazon,ec2reference,build,client,client,settings,client,reference,client,reference,inc,ref,client,reference,client,reference,dec,ref,final,lazy,initializable,amazon,ec2reference,elasticsearch,exception,old,client,this,lazy,client,reference,get,and,set,new,client,if,old,client,null,old,client,reset
AwsEc2ServiceImpl -> @Override     public void refreshAndClearCache(Ec2ClientSettings clientSettings);1542397818;Refreshes the settings for the AmazonEC2 client. The new client will be build_using these new settings. The old client is usable until released. On release it_will be destroyed instead of being returned to the cache.;@Override_    public void refreshAndClearCache(Ec2ClientSettings clientSettings) {_        final LazyInitializable<AmazonEc2Reference, ElasticsearchException> newClient = new LazyInitializable<>(_                () -> new AmazonEc2Reference(buildClient(clientSettings)), clientReference -> clientReference.incRef(),_                clientReference -> clientReference.decRef())__        final LazyInitializable<AmazonEc2Reference, ElasticsearchException> oldClient = this.lazyClientReference.getAndSet(newClient)__        if (oldClient != null) {_            oldClient.reset()__        }_    };refreshes,the,settings,for,the,amazon,ec2,client,the,new,client,will,be,build,using,these,new,settings,the,old,client,is,usable,until,released,on,release,it,will,be,destroyed,instead,of,being,returned,to,the,cache;override,public,void,refresh,and,clear,cache,ec2client,settings,client,settings,final,lazy,initializable,amazon,ec2reference,elasticsearch,exception,new,client,new,lazy,initializable,new,amazon,ec2reference,build,client,client,settings,client,reference,client,reference,inc,ref,client,reference,client,reference,dec,ref,final,lazy,initializable,amazon,ec2reference,elasticsearch,exception,old,client,this,lazy,client,reference,get,and,set,new,client,if,old,client,null,old,client,reset
