commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;3;// overrideable for tests ;// overrideable for tests protected GceInstancesService createGceInstancesService() {     return new GceInstancesServiceImpl(settings). }
false;public;2;8;;@Override public Map<String, Supplier<SeedHostsProvider>> getSeedHostProviders(TransportService transportService, NetworkService networkService) {     return Collections.singletonMap(GCE, () -> {         gceInstancesService.set(createGceInstancesService()).         return new GceSeedHostsProvider(settings, gceInstancesService.get(), transportService, networkService).     }). }
false;public;1;5;;@Override public NetworkService.CustomNameResolver getCustomNameResolver(Settings settings) {     logger.debug("Register _gce_, _gce:xxx network names").     return new GceNameResolver(new GceMetadataService(settings)). }
false;public;0;19;;@Override public List<Setting<?>> getSettings() {     List<Setting<?>> settings = new ArrayList<>(Arrays.asList(// Register GCE settings     GceInstancesService.PROJECT_SETTING, GceInstancesService.ZONE_SETTING, GceSeedHostsProvider.TAGS_SETTING, GceInstancesService.REFRESH_SETTING, GceInstancesService.RETRY_SETTING, GceInstancesService.MAX_WAIT_SETTING)).     if (ALLOW_REROUTE_GCE_SETTINGS) {         settings.add(GceMetadataService.GCE_HOST).         settings.add(GceInstancesServiceImpl.GCE_ROOT_URL).     }     return Collections.unmodifiableList(settings). }
false;public;0;4;;@Override public void close() throws IOException {     IOUtils.close(gceInstancesService.get()). }
