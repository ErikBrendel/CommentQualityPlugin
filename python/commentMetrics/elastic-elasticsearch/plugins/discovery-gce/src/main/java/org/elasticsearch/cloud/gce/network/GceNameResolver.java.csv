# id;timestamp;commentText;codeText;commentWords;codeWords
GceNameResolver -> private InetAddress[] resolve(String value) throws IOException;1524684173;@param value the gce hostname type to discover._@return the appropriate host resolved from gce meta-data._@see CustomNameResolver#resolveIfPossible(String);private InetAddress[] resolve(String value) throws IOException {_        String gceMetadataPath__        if (value.equals(GceAddressResolverType.GCE.configName)) {_            _            gceMetadataPath = Strings.replace(GceAddressResolverType.GCE.gceName, "{{network}}", "0")__        } else if (value.equals(GceAddressResolverType.PRIVATE_DNS.configName)) {_            gceMetadataPath = GceAddressResolverType.PRIVATE_DNS.gceName__        } else if (value.startsWith(GceAddressResolverType.PRIVATE_IP.configName)) {_            _            String network = "0"__            String[] privateIpConfig = value.split(":")__            if (privateIpConfig.length == 3) {_                network = privateIpConfig[2]__            }__            _            gceMetadataPath = Strings.replace(GceAddressResolverType.PRIVATE_IP.gceName, "{{network}}", network)__        } else {_            throw new IllegalArgumentException("[" + value + "] is not one of the supported GCE network.host setting. " +_                    "Expecting _gce_, _gce:privateIp:X_, _gce:hostname_")__        }__        try {_            String metadataResult = Access.doPrivilegedIOException(() -> gceMetadataService.metadata(gceMetadataPath))__            if (metadataResult == null || metadataResult.length() == 0) {_                throw new IOException("no gce metadata returned from [" + gceMetadataPath + "] for [" + value + "]")__            }_            _            return new InetAddress[] { InetAddress.getByName(metadataResult) }__        } catch (IOException e) {_            throw new IOException("IOException caught when fetching InetAddress from [" + gceMetadataPath + "]", e)__        }_    };param,value,the,gce,hostname,type,to,discover,return,the,appropriate,host,resolved,from,gce,meta,data,see,custom,name,resolver,resolve,if,possible,string;private,inet,address,resolve,string,value,throws,ioexception,string,gce,metadata,path,if,value,equals,gce,address,resolver,type,gce,config,name,gce,metadata,path,strings,replace,gce,address,resolver,type,gce,gce,name,network,0,else,if,value,equals,gce,address,resolver,type,config,name,gce,metadata,path,gce,address,resolver,type,gce,name,else,if,value,starts,with,gce,address,resolver,type,config,name,string,network,0,string,private,ip,config,value,split,if,private,ip,config,length,3,network,private,ip,config,2,gce,metadata,path,strings,replace,gce,address,resolver,type,gce,name,network,network,else,throw,new,illegal,argument,exception,value,is,not,one,of,the,supported,gce,network,host,setting,expecting,private,ip,try,string,metadata,result,access,do,privileged,ioexception,gce,metadata,service,metadata,gce,metadata,path,if,metadata,result,null,metadata,result,length,0,throw,new,ioexception,no,gce,metadata,returned,from,gce,metadata,path,for,value,return,new,inet,address,inet,address,get,by,name,metadata,result,catch,ioexception,e,throw,new,ioexception,ioexception,caught,when,fetching,inet,address,from,gce,metadata,path,e
GceNameResolver -> private InetAddress[] resolve(String value) throws IOException;1528762805;@param value the gce hostname type to discover._@return the appropriate host resolved from gce meta-data._@see CustomNameResolver#resolveIfPossible(String);private InetAddress[] resolve(String value) throws IOException {_        String gceMetadataPath__        if (value.equals(GceAddressResolverType.GCE.configName)) {_            _            gceMetadataPath = Strings.replace(GceAddressResolverType.GCE.gceName, "{{network}}", "0")__        } else if (value.equals(GceAddressResolverType.PRIVATE_DNS.configName)) {_            gceMetadataPath = GceAddressResolverType.PRIVATE_DNS.gceName__        } else if (value.startsWith(GceAddressResolverType.PRIVATE_IP.configName)) {_            _            String network = "0"__            String[] privateIpConfig = value.split(":")__            if (privateIpConfig.length == 3) {_                network = privateIpConfig[2]__            }__            _            gceMetadataPath = Strings.replace(GceAddressResolverType.PRIVATE_IP.gceName, "{{network}}", network)__        } else {_            throw new IllegalArgumentException("[" + value + "] is not one of the supported GCE network.host setting. " +_                    "Expecting _gce_, _gce:privateIp:X_, _gce:hostname_")__        }__        try {_            String metadataResult = Access.doPrivilegedIOException(() -> gceMetadataService.metadata(gceMetadataPath))__            if (metadataResult == null || metadataResult.length() == 0) {_                throw new IOException("no gce metadata returned from [" + gceMetadataPath + "] for [" + value + "]")__            }_            _            return new InetAddress[] { InetAddress.getByName(metadataResult) }__        } catch (IOException e) {_            throw new IOException("IOException caught when fetching InetAddress from [" + gceMetadataPath + "]", e)__        }_    };param,value,the,gce,hostname,type,to,discover,return,the,appropriate,host,resolved,from,gce,meta,data,see,custom,name,resolver,resolve,if,possible,string;private,inet,address,resolve,string,value,throws,ioexception,string,gce,metadata,path,if,value,equals,gce,address,resolver,type,gce,config,name,gce,metadata,path,strings,replace,gce,address,resolver,type,gce,gce,name,network,0,else,if,value,equals,gce,address,resolver,type,config,name,gce,metadata,path,gce,address,resolver,type,gce,name,else,if,value,starts,with,gce,address,resolver,type,config,name,string,network,0,string,private,ip,config,value,split,if,private,ip,config,length,3,network,private,ip,config,2,gce,metadata,path,strings,replace,gce,address,resolver,type,gce,name,network,network,else,throw,new,illegal,argument,exception,value,is,not,one,of,the,supported,gce,network,host,setting,expecting,private,ip,try,string,metadata,result,access,do,privileged,ioexception,gce,metadata,service,metadata,gce,metadata,path,if,metadata,result,null,metadata,result,length,0,throw,new,ioexception,no,gce,metadata,returned,from,gce,metadata,path,for,value,return,new,inet,address,inet,address,get,by,name,metadata,result,catch,ioexception,e,throw,new,ioexception,ioexception,caught,when,fetching,inet,address,from,gce,metadata,path,e
GceNameResolver -> private InetAddress[] resolve(String value) throws IOException;1541092382;@param value the gce hostname type to discover._@return the appropriate host resolved from gce meta-data._@see CustomNameResolver#resolveIfPossible(String);private InetAddress[] resolve(String value) throws IOException {_        String gceMetadataPath__        if (value.equals(GceAddressResolverType.GCE.configName)) {_            _            gceMetadataPath = Strings.replace(GceAddressResolverType.GCE.gceName, "{{network}}", "0")__        } else if (value.equals(GceAddressResolverType.PRIVATE_DNS.configName)) {_            gceMetadataPath = GceAddressResolverType.PRIVATE_DNS.gceName__        } else if (value.startsWith(GceAddressResolverType.PRIVATE_IP.configName)) {_            _            String network = "0"__            String[] privateIpConfig = value.split(":")__            if (privateIpConfig.length == 3) {_                network = privateIpConfig[2]__            }__            _            gceMetadataPath = Strings.replace(GceAddressResolverType.PRIVATE_IP.gceName, "{{network}}", network)__        } else {_            throw new IllegalArgumentException("[" + value + "] is not one of the supported GCE network.host setting. " +_                    "Expecting _gce_, _gce:privateIp:X_, _gce:hostname_")__        }__        try {_            String metadataResult = Access.doPrivilegedIOException(() -> gceMetadataService.metadata(gceMetadataPath))__            if (metadataResult == null || metadataResult.length() == 0) {_                throw new IOException("no gce metadata returned from [" + gceMetadataPath + "] for [" + value + "]")__            }_            _            return new InetAddress[] { InetAddress.getByName(metadataResult) }__        } catch (IOException e) {_            throw new IOException("IOException caught when fetching InetAddress from [" + gceMetadataPath + "]", e)__        }_    };param,value,the,gce,hostname,type,to,discover,return,the,appropriate,host,resolved,from,gce,meta,data,see,custom,name,resolver,resolve,if,possible,string;private,inet,address,resolve,string,value,throws,ioexception,string,gce,metadata,path,if,value,equals,gce,address,resolver,type,gce,config,name,gce,metadata,path,strings,replace,gce,address,resolver,type,gce,gce,name,network,0,else,if,value,equals,gce,address,resolver,type,config,name,gce,metadata,path,gce,address,resolver,type,gce,name,else,if,value,starts,with,gce,address,resolver,type,config,name,string,network,0,string,private,ip,config,value,split,if,private,ip,config,length,3,network,private,ip,config,2,gce,metadata,path,strings,replace,gce,address,resolver,type,gce,name,network,network,else,throw,new,illegal,argument,exception,value,is,not,one,of,the,supported,gce,network,host,setting,expecting,private,ip,try,string,metadata,result,access,do,privileged,ioexception,gce,metadata,service,metadata,gce,metadata,path,if,metadata,result,null,metadata,result,length,0,throw,new,ioexception,no,gce,metadata,returned,from,gce,metadata,path,for,value,return,new,inet,address,inet,address,get,by,name,metadata,result,catch,ioexception,e,throw,new,ioexception,ioexception,caught,when,fetching,inet,address,from,gce,metadata,path,e
GceNameResolver -> public GceNameResolver(Settings settings, GceMetadataService gceMetadataService);1524684173;Construct a {@link CustomNameResolver}.;public GceNameResolver(Settings settings, GceMetadataService gceMetadataService) {_        super(settings)__        this.gceMetadataService = gceMetadataService__    };construct,a,link,custom,name,resolver;public,gce,name,resolver,settings,settings,gce,metadata,service,gce,metadata,service,super,settings,this,gce,metadata,service,gce,metadata,service
GceNameResolver -> public GceNameResolver(Settings settings, GceMetadataService gceMetadataService);1528762805;Construct a {@link CustomNameResolver}.;public GceNameResolver(Settings settings, GceMetadataService gceMetadataService) {_        super(settings)__        this.gceMetadataService = gceMetadataService__    };construct,a,link,custom,name,resolver;public,gce,name,resolver,settings,settings,gce,metadata,service,gce,metadata,service,super,settings,this,gce,metadata,service,gce,metadata,service
