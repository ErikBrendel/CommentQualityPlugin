commented;modifiers;parameterAmount;loc;comment;code
true;private;1;33;/**  * @param value the gce hostname type to discover.  * @return the appropriate host resolved from gce meta-data.  * @see CustomNameResolver#resolveIfPossible(String)  */ ;/**  * @param value the gce hostname type to discover.  * @return the appropriate host resolved from gce meta-data.  * @see CustomNameResolver#resolveIfPossible(String)  */ private InetAddress[] resolve(String value) throws IOException {     String gceMetadataPath.     if (value.equals(GceAddressResolverType.GCE.configName)) {         // We replace network placeholder with default network interface value: 0         gceMetadataPath = Strings.replace(GceAddressResolverType.GCE.gceName, "{{network}}", "0").     } else if (value.equals(GceAddressResolverType.PRIVATE_DNS.configName)) {         gceMetadataPath = GceAddressResolverType.PRIVATE_DNS.gceName.     } else if (value.startsWith(GceAddressResolverType.PRIVATE_IP.configName)) {         // We extract the network interface from gce:privateIp:XX         String network = "0".         String[] privateIpConfig = value.split(":").         if (privateIpConfig.length == 3) {             network = privateIpConfig[2].         }         // We replace network placeholder with network interface value         gceMetadataPath = Strings.replace(GceAddressResolverType.PRIVATE_IP.gceName, "{{network}}", network).     } else {         throw new IllegalArgumentException("[" + value + "] is not one of the supported GCE network.host setting. " + "Expecting _gce_, _gce:privateIp:X_, _gce:hostname_").     }     try {         String metadataResult = Access.doPrivilegedIOException(() -> gceMetadataService.metadata(gceMetadataPath)).         if (metadataResult == null || metadataResult.length() == 0) {             throw new IOException("no gce metadata returned from [" + gceMetadataPath + "] for [" + value + "]").         }         // only one address: because we explicitly ask for only one via the GceHostnameType         return new InetAddress[] { InetAddress.getByName(metadataResult) }.     } catch (IOException e) {         throw new IOException("IOException caught when fetching InetAddress from [" + gceMetadataPath + "]", e).     } }
false;public;0;4;;@Override public InetAddress[] resolveDefault() {     // using this, one has to explicitly specify _gce_ in network setting     return null. }
false;public;1;8;;@Override public InetAddress[] resolveIfPossible(String value) throws IOException {     // We only try to resolve network.host setting when it starts with _gce     if (value.startsWith("gce")) {         return resolve(value).     }     return null. }
