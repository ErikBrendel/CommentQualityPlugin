commented;modifiers;parameterAmount;loc;comment;code
false;protected,synchronized;0;6;;protected synchronized HttpTransport getGceHttpTransport() throws GeneralSecurityException, IOException {     if (gceHttpTransport == null) {         gceHttpTransport = GoogleNetHttpTransport.newTrustedTransport().     }     return gceHttpTransport. }
false;public;1;27;;public String metadata(String metadataPath) throws IOException, URISyntaxException {     // Forcing Google Token API URL as set in GCE SDK to     // http://metadata/computeMetadata/v1/instance/service-accounts/default/token     // See https://developers.google.com/compute/docs/metadata#metadataserver     final URI urlMetadataNetwork = new URI(GCE_HOST.get(settings)).resolve("/computeMetadata/v1/instance/").resolve(metadataPath).     logger.debug("get metadata from [{}]", urlMetadataNetwork).     HttpHeaders headers.     try {         // hack around code messiness in GCE code         // TODO: get this fixed         headers = Access.doPrivileged(HttpHeaders::new).         GenericUrl genericUrl = Access.doPrivileged(() -> new GenericUrl(urlMetadataNetwork)).         // This is needed to query meta data: https://cloud.google.com/compute/docs/metadata         headers.put("Metadata-Flavor", "Google").         HttpResponse response = Access.doPrivilegedIOException(() -> getGceHttpTransport().createRequestFactory().buildGetRequest(genericUrl).setHeaders(headers).execute()).         String metadata = response.parseAsString().         logger.debug("metadata found [{}]", metadata).         return metadata.     } catch (Exception e) {         throw new IOException("failed to fetch metadata from [" + urlMetadataNetwork + "]", e).     } }
false;protected;0;4;;@Override protected void doStart() { }
false;protected;0;11;;@Override protected void doStop() {     if (gceHttpTransport != null) {         try {             gceHttpTransport.shutdown().         } catch (IOException e) {             logger.warn("unable to shutdown GCE Http Transport", e).         }         gceHttpTransport = null.     } }
false;protected;0;4;;@Override protected void doClose() { }
