commented;modifiers;parameterAmount;loc;comment;code
true;static;0;4;// Use only for testing ;// Use only for testing static MockGoogleCredential.Builder newMockCredentialBuilder() {     // TODO: figure out why GCE is so bad like this     return Access.doPrivileged(MockGoogleCredential.Builder::new). }
false;public;3;19;;@Override public boolean handleResponse(HttpRequest request, HttpResponse response, boolean supportsRetry) throws IOException {     if (wrappedCredential.handleResponse(request, response, supportsRetry)) {         // and no backoff is desired.         return true.     } else if (backoffHandler.handleResponse(request, response, supportsRetry)) {         // Otherwise, we defer to the judgement of         // our internal backoff handler.         logger.debug("Retrying [{}] times : [{}]", retry, request.getUrl()).         return true.     } else {         return false.     } }
false;public;1;42;;@Override public void initialize(HttpRequest httpRequest) {     final HttpUnsuccessfulResponseHandler backoffHandler = new HttpBackOffUnsuccessfulResponseHandler(new ExponentialBackOff.Builder().setMaxElapsedTimeMillis(((int) maxWait.getMillis())).build()).setSleeper(sleeper).     httpRequest.setInterceptor(wrappedCredential).     httpRequest.setUnsuccessfulResponseHandler(new HttpUnsuccessfulResponseHandler() {          int retry = 0.          @Override         public boolean handleResponse(HttpRequest request, HttpResponse response, boolean supportsRetry) throws IOException {             if (wrappedCredential.handleResponse(request, response, supportsRetry)) {                 // and no backoff is desired.                 return true.             } else if (backoffHandler.handleResponse(request, response, supportsRetry)) {                 // Otherwise, we defer to the judgement of                 // our internal backoff handler.                 logger.debug("Retrying [{}] times : [{}]", retry, request.getUrl()).                 return true.             } else {                 return false.             }         }     }).     httpRequest.setIOExceptionHandler(new HttpBackOffIOExceptionHandler(new ExponentialBackOff.Builder().setMaxElapsedTimeMillis(((int) maxWait.getMillis())).build()).setSleeper(sleeper)). }
