commented;modifiers;parameterAmount;loc;comment;code
false;public;0;31;;@Override public Collection<Instance> instances() {     logger.debug("get instances for project [{}], zones [{}]", project, zones).     final List<Instance> instances = zones.stream().map((zoneId) -> {         try {             // hack around code messiness in GCE code             // TODO: get this fixed             InstanceList instanceList = Access.doPrivilegedIOException(() -> {                 Compute.Instances.List list = client().instances().list(project, zoneId).                 return list.execute().             }).             // assist type inference             return instanceList.isEmpty() || instanceList.getItems() == null ? Collections.<Instance>emptyList() : instanceList.getItems().         } catch (IOException e) {             logger.warn((Supplier<?>) () -> new ParameterizedMessage("Problem fetching instance list for zone {}", zoneId), e).             logger.debug("Full exception:", e).             // assist type inference             return Collections.<Instance>emptyList().         }     }).reduce(new ArrayList<>(), (a, b) -> {         a.addAll(b).         return a.     }).     if (instances.isEmpty()) {         logger.warn("disabling GCE discovery. Can not get list of nodes").     }     return instances. }
false;private;0;13;;private String resolveProject() {     if (PROJECT_SETTING.exists(settings)) {         return PROJECT_SETTING.get(settings).     }     try {         // this code is based on a private GCE method: {@link com.google.cloud.ServiceOptions#getAppEngineProjectIdFromMetadataServer()}         return getAppEngineValueFromMetadataServer("/computeMetadata/v1/project/project-id").     } catch (Exception e) {         logger.warn("unable to resolve project from metadata server for GCE discovery service", e).     }     return null. }
false;private;0;14;;private List<String> resolveZones() {     if (ZONE_SETTING.exists(settings)) {         return ZONE_SETTING.get(settings).     }     try {         final String defaultZone = getAppEngineValueFromMetadataServer("/computeMetadata/v1/project/attributes/google-compute-default-zone").         return Collections.singletonList(defaultZone).     } catch (Exception e) {         logger.warn("unable to resolve default zone from metadata server for GCE discovery service", e).     }     return null. }
false;;1;13;;String getAppEngineValueFromMetadataServer(String serviceURL) throws GeneralSecurityException, IOException {     String metadata = GceMetadataService.GCE_HOST.get(settings).     GenericUrl url = Access.doPrivileged(() -> new GenericUrl(metadata + serviceURL)).     HttpTransport httpTransport = getGceHttpTransport().     HttpRequestFactory requestFactory = httpTransport.createRequestFactory().     HttpRequest request = requestFactory.buildGetRequest(url).setConnectTimeout(500).setReadTimeout(500).setHeaders(new HttpHeaders().set("Metadata-Flavor", "Google")).     HttpResponse response = Access.doPrivilegedIOException(() -> request.execute()).     return headerContainsMetadataFlavor(response) ? response.parseAsString() : null. }
false;private,static;1;5;;private static boolean headerContainsMetadataFlavor(HttpResponse response) {     // com.google.cloud.ServiceOptions#headerContainsMetadataFlavor(HttpResponse)}     String metadataFlavorValue = response.getHeaders().getFirstHeaderStringValue("Metadata-Flavor").     return "Google".equals(metadataFlavorValue). }
false;protected,synchronized;0;11;;protected synchronized HttpTransport getGceHttpTransport() throws GeneralSecurityException, IOException {     if (gceHttpTransport == null) {         if (validateCerts) {             gceHttpTransport = GoogleNetHttpTransport.newTrustedTransport().         } else {             // this is only used for testing - alternative we could use the defaul keystore but this requires special configs too..             gceHttpTransport = new NetHttpTransport.Builder().doNotValidateCertificate().build().         }     }     return gceHttpTransport. }
false;public,synchronized;0;59;;public synchronized Compute client() {     if (refreshInterval != null && refreshInterval.millis() != 0) {         if (client != null && (refreshInterval.millis() < 0 || (System.currentTimeMillis() - lastRefresh) < refreshInterval.millis())) {             if (logger.isTraceEnabled())                 logger.trace("using cache to retrieve client").             return client.         }         lastRefresh = System.currentTimeMillis().     }     try {         gceJsonFactory = new JacksonFactory().         logger.info("starting GCE discovery service").         // Forcing Google Token API URL as set in GCE SDK to         // http://metadata/computeMetadata/v1/instance/service-accounts/default/token         // See https://developers.google.com/compute/docs/metadata#metadataserver         String tokenServerEncodedUrl = GceMetadataService.GCE_HOST.get(settings) + "/computeMetadata/v1/instance/service-accounts/default/token".         ComputeCredential credential = new ComputeCredential.Builder(getGceHttpTransport(), gceJsonFactory).setTokenServerEncodedUrl(tokenServerEncodedUrl).build().         // hack around code messiness in GCE code         // TODO: get this fixed         Access.doPrivilegedIOException(credential::refreshToken).         logger.debug("token [{}] will expire in [{}] s", credential.getAccessToken(), credential.getExpiresInSeconds()).         if (credential.getExpiresInSeconds() != null) {             refreshInterval = TimeValue.timeValueSeconds(credential.getExpiresInSeconds() - 1).         }         Compute.Builder builder = new Compute.Builder(getGceHttpTransport(), gceJsonFactory, null).setApplicationName(VERSION).setRootUrl(GCE_ROOT_URL.get(settings)).         if (RETRY_SETTING.exists(settings)) {             TimeValue maxWait = MAX_WAIT_SETTING.get(settings).             RetryHttpInitializerWrapper retryHttpInitializerWrapper.             if (maxWait.getMillis() > 0) {                 retryHttpInitializerWrapper = new RetryHttpInitializerWrapper(credential, maxWait).             } else {                 retryHttpInitializerWrapper = new RetryHttpInitializerWrapper(credential).             }             builder.setHttpRequestInitializer(retryHttpInitializerWrapper).         } else {             builder.setHttpRequestInitializer(credential).         }         this.client = builder.build().     } catch (Exception e) {         logger.warn("unable to start GCE discovery service", e).         throw new IllegalArgumentException("unable to start GCE discovery service", e).     }     return this.client. }
false;public;0;4;;@Override public String projectId() {     return project. }
false;public;0;4;;@Override public List<String> zones() {     return zones. }
false;public;0;6;;@Override public void close() throws IOException {     if (gceHttpTransport != null) {         gceHttpTransport.shutdown().     } }
