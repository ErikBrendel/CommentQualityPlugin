commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Override public LowLevelHttpResponse execute() throws IOException {     MockLowLevelHttpResponse response = new MockLowLevelHttpResponse().     response.setStatusCode(200).     response.setContentType(Json.MEDIA_TYPE).     if (url.startsWith(GCE_METADATA_URL)) {         logger.info("--> Simulate GCE Auth/Metadata response for [{}]", url).         response.setContent(readGoogleInternalJsonResponse(url)).         response.addHeader("Metadata-Flavor", "Google").     } else {         logger.info("--> Simulate GCE API response for [{}]", url).         response.setContent(readGoogleApiJsonResponse(url)).     }     return response. }
false;public;2;21;;@Override public LowLevelHttpRequest buildRequest(String method, final String url) throws IOException {     return new MockLowLevelHttpRequest() {          @Override         public LowLevelHttpResponse execute() throws IOException {             MockLowLevelHttpResponse response = new MockLowLevelHttpResponse().             response.setStatusCode(200).             response.setContentType(Json.MEDIA_TYPE).             if (url.startsWith(GCE_METADATA_URL)) {                 logger.info("--> Simulate GCE Auth/Metadata response for [{}]", url).                 response.setContent(readGoogleInternalJsonResponse(url)).                 response.addHeader("Metadata-Flavor", "Google").             } else {                 logger.info("--> Simulate GCE API response for [{}]", url).                 response.setContent(readGoogleApiJsonResponse(url)).             }             return response.         }     }. }
false;protected,static;0;25;;protected static HttpTransport configureMock() {     return new MockHttpTransport() {          @Override         public LowLevelHttpRequest buildRequest(String method, final String url) throws IOException {             return new MockLowLevelHttpRequest() {                  @Override                 public LowLevelHttpResponse execute() throws IOException {                     MockLowLevelHttpResponse response = new MockLowLevelHttpResponse().                     response.setStatusCode(200).                     response.setContentType(Json.MEDIA_TYPE).                     if (url.startsWith(GCE_METADATA_URL)) {                         logger.info("--> Simulate GCE Auth/Metadata response for [{}]", url).                         response.setContent(readGoogleInternalJsonResponse(url)).                         response.addHeader("Metadata-Flavor", "Google").                     } else {                         logger.info("--> Simulate GCE API response for [{}]", url).                         response.setContent(readGoogleApiJsonResponse(url)).                     }                     return response.                 }             }.         }     }. }
false;public,static;1;3;;public static String readGoogleInternalJsonResponse(String url) throws IOException {     return readJsonResponse(url, "http://metadata.google.internal/"). }
false;public,static;1;3;;public static String readGoogleApiJsonResponse(String url) throws IOException {     return readJsonResponse(url, "https://www.googleapis.com/"). }
false;private,static;2;14;;private static String readJsonResponse(String url, String urlRoot) throws IOException {     // We extract from the url the mock file path we want to use     String mockFileName = Strings.replace(url, urlRoot, "").     URL resource = GceMockUtils.class.getResource(mockFileName).     if (resource == null) {         throw new IOException("can't read [" + url + "] in src/test/resources/org/elasticsearch/discovery/gce").     }     try (InputStream is = FileSystemUtils.openFileURLStream(resource)) {         final StringBuilder sb = new StringBuilder().         Streams.readAllLines(is, sb::append).         return sb.toString().     } }
