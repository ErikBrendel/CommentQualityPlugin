# id;timestamp;commentText;codeText;commentWords;codeWords
GceNetworkTests -> private void resolveGce(String gceNetworkSetting, InetAddress[] expected) throws IOException;1524684173;Utility test method to test different settings_@param gceNetworkSetting tested network.host property_@param expected expected InetAddress, null if we expect an exception_@throws IOException Well... If something goes wrong :);private void resolveGce(String gceNetworkSetting, InetAddress[] expected) throws IOException {_        Settings nodeSettings = Settings.builder()_                .put("network.host", gceNetworkSetting)_                .build()___        GceMetadataServiceMock mock = new GceMetadataServiceMock(nodeSettings)__        NetworkService networkService = new NetworkService(Collections.singletonList(new GceNameResolver(nodeSettings, mock)))__        try {_            InetAddress[] addresses = networkService.resolveBindHostAddresses(_                NetworkService.GLOBAL_NETWORK_BINDHOST_SETTING.get(nodeSettings).toArray(Strings.EMPTY_ARRAY))__            if (expected == null) {_                fail("We should get a IllegalArgumentException when setting network.host: _gce:doesnotexist_")__            }_            assertThat(addresses, arrayContaining(expected))__        } catch (IllegalArgumentException e) {_            if (expected != null) {_                _                throw e__            }_            _            assertThat(e.getMessage(), containsString("is not one of the supported GCE network.host setting"))__        }_    };utility,test,method,to,test,different,settings,param,gce,network,setting,tested,network,host,property,param,expected,expected,inet,address,null,if,we,expect,an,exception,throws,ioexception,well,if,something,goes,wrong;private,void,resolve,gce,string,gce,network,setting,inet,address,expected,throws,ioexception,settings,node,settings,settings,builder,put,network,host,gce,network,setting,build,gce,metadata,service,mock,mock,new,gce,metadata,service,mock,node,settings,network,service,network,service,new,network,service,collections,singleton,list,new,gce,name,resolver,node,settings,mock,try,inet,address,addresses,network,service,resolve,bind,host,addresses,network,service,get,node,settings,to,array,strings,if,expected,null,fail,we,should,get,a,illegal,argument,exception,when,setting,network,host,assert,that,addresses,array,containing,expected,catch,illegal,argument,exception,e,if,expected,null,throw,e,assert,that,e,get,message,contains,string,is,not,one,of,the,supported,gce,network,host,setting
GceNetworkTests -> private void resolveGce(String gceNetworkSetting, InetAddress[] expected) throws IOException;1541092382;Utility test method to test different settings_@param gceNetworkSetting tested network.host property_@param expected expected InetAddress, null if we expect an exception_@throws IOException Well... If something goes wrong :);private void resolveGce(String gceNetworkSetting, InetAddress[] expected) throws IOException {_        Settings nodeSettings = Settings.builder()_                .put("network.host", gceNetworkSetting)_                .build()___        GceMetadataServiceMock mock = new GceMetadataServiceMock(nodeSettings)__        NetworkService networkService = new NetworkService(Collections.singletonList(new GceNameResolver(mock)))__        try {_            InetAddress[] addresses = networkService.resolveBindHostAddresses(_                NetworkService.GLOBAL_NETWORK_BINDHOST_SETTING.get(nodeSettings).toArray(Strings.EMPTY_ARRAY))__            if (expected == null) {_                fail("We should get a IllegalArgumentException when setting network.host: _gce:doesnotexist_")__            }_            assertThat(addresses, arrayContaining(expected))__        } catch (IllegalArgumentException e) {_            if (expected != null) {_                _                throw e__            }_            _            assertThat(e.getMessage(), containsString("is not one of the supported GCE network.host setting"))__        }_    };utility,test,method,to,test,different,settings,param,gce,network,setting,tested,network,host,property,param,expected,expected,inet,address,null,if,we,expect,an,exception,throws,ioexception,well,if,something,goes,wrong;private,void,resolve,gce,string,gce,network,setting,inet,address,expected,throws,ioexception,settings,node,settings,settings,builder,put,network,host,gce,network,setting,build,gce,metadata,service,mock,mock,new,gce,metadata,service,mock,node,settings,network,service,network,service,new,network,service,collections,singleton,list,new,gce,name,resolver,mock,try,inet,address,addresses,network,service,resolve,bind,host,addresses,network,service,get,node,settings,to,array,strings,if,expected,null,fail,we,should,get,a,illegal,argument,exception,when,setting,network,host,assert,that,addresses,array,containing,expected,catch,illegal,argument,exception,e,if,expected,null,throw,e,assert,that,e,get,message,contains,string,is,not,one,of,the,supported,gce,network,host,setting
GceNetworkTests -> private void resolveGce(String gceNetworkSetting, InetAddress[] expected) throws IOException;1544823664;Utility test method to test different settings_@param gceNetworkSetting tested network.host property_@param expected expected InetAddress, null if we expect an exception_@throws IOException Well... If something goes wrong :);private void resolveGce(String gceNetworkSetting, InetAddress[] expected) throws IOException {_        Settings nodeSettings = Settings.builder()_                .put("network.host", gceNetworkSetting)_                .build()___        GceMetadataServiceMock mock = new GceMetadataServiceMock(nodeSettings)__        NetworkService networkService = new NetworkService(Collections.singletonList(new GceNameResolver(mock)))__        try {_            InetAddress[] addresses = networkService.resolveBindHostAddresses(_                NetworkService.GLOBAL_NETWORK_BIND_HOST_SETTING.get(nodeSettings).toArray(Strings.EMPTY_ARRAY))__            if (expected == null) {_                fail("We should get a IllegalArgumentException when setting network.host: _gce:doesnotexist_")__            }_            assertThat(addresses, arrayContaining(expected))__        } catch (IllegalArgumentException e) {_            if (expected != null) {_                _                throw e__            }_            _            assertThat(e.getMessage(), containsString("is not one of the supported GCE network.host setting"))__        }_    };utility,test,method,to,test,different,settings,param,gce,network,setting,tested,network,host,property,param,expected,expected,inet,address,null,if,we,expect,an,exception,throws,ioexception,well,if,something,goes,wrong;private,void,resolve,gce,string,gce,network,setting,inet,address,expected,throws,ioexception,settings,node,settings,settings,builder,put,network,host,gce,network,setting,build,gce,metadata,service,mock,mock,new,gce,metadata,service,mock,node,settings,network,service,network,service,new,network,service,collections,singleton,list,new,gce,name,resolver,mock,try,inet,address,addresses,network,service,resolve,bind,host,addresses,network,service,get,node,settings,to,array,strings,if,expected,null,fail,we,should,get,a,illegal,argument,exception,when,setting,network,host,assert,that,addresses,array,containing,expected,catch,illegal,argument,exception,e,if,expected,null,throw,e,assert,that,e,get,message,contains,string,is,not,one,of,the,supported,gce,network,host,setting
GceNetworkTests -> public void testNetworkHostGceDefault() throws IOException;1524684173;Test for network.host: _gce_;public void testNetworkHostGceDefault() throws IOException {_        resolveGce("_gce_", InetAddress.getByName("10.240.0.2"))__    };test,for,network,host;public,void,test,network,host,gce,default,throws,ioexception,resolve,gce,inet,address,get,by,name,10,240,0,2
GceNetworkTests -> public void testNetworkHostGceDefault() throws IOException;1541092382;Test for network.host: _gce_;public void testNetworkHostGceDefault() throws IOException {_        resolveGce("_gce_", InetAddress.getByName("10.240.0.2"))__    };test,for,network,host;public,void,test,network,host,gce,default,throws,ioexception,resolve,gce,inet,address,get,by,name,10,240,0,2
GceNetworkTests -> public void testNetworkHostGceDefault() throws IOException;1544823664;Test for network.host: _gce_;public void testNetworkHostGceDefault() throws IOException {_        resolveGce("_gce_", InetAddress.getByName("10.240.0.2"))__    };test,for,network,host;public,void,test,network,host,gce,default,throws,ioexception,resolve,gce,inet,address,get,by,name,10,240,0,2
GceNetworkTests -> public void testNetworkHostPrivateDns() throws IOException;1524684173;Test for network.host: _gce:hostname_;public void testNetworkHostPrivateDns() throws IOException {_        resolveGce("_gce:hostname_", InetAddress.getByName("localhost"))__    };test,for,network,host;public,void,test,network,host,private,dns,throws,ioexception,resolve,gce,inet,address,get,by,name,localhost
GceNetworkTests -> public void testNetworkHostPrivateDns() throws IOException;1541092382;Test for network.host: _gce:hostname_;public void testNetworkHostPrivateDns() throws IOException {_        resolveGce("_gce:hostname_", InetAddress.getByName("localhost"))__    };test,for,network,host;public,void,test,network,host,private,dns,throws,ioexception,resolve,gce,inet,address,get,by,name,localhost
GceNetworkTests -> public void testNetworkHostPrivateDns() throws IOException;1544823664;Test for network.host: _gce:hostname_;public void testNetworkHostPrivateDns() throws IOException {_        resolveGce("_gce:hostname_", InetAddress.getByName("localhost"))__    };test,for,network,host;public,void,test,network,host,private,dns,throws,ioexception,resolve,gce,inet,address,get,by,name,localhost
GceNetworkTests -> public void testNetworkHostPrivateIpInterface() throws IOException;1524684173;Test with multiple network interfaces:_network.host: _gce:privateIp:0__network.host: _gce:privateIp:1_;public void testNetworkHostPrivateIpInterface() throws IOException {_        resolveGce("_gce:privateIp:0_", InetAddress.getByName("10.240.0.2"))__        resolveGce("_gce:privateIp:1_", InetAddress.getByName("10.150.0.1"))__    };test,with,multiple,network,interfaces,network,host,private,ip,network,host,private,ip;public,void,test,network,host,private,ip,interface,throws,ioexception,resolve,gce,private,ip,inet,address,get,by,name,10,240,0,2,resolve,gce,private,ip,inet,address,get,by,name,10,150,0,1
GceNetworkTests -> public void testNetworkHostPrivateIpInterface() throws IOException;1541092382;Test with multiple network interfaces:_network.host: _gce:privateIp:0__network.host: _gce:privateIp:1_;public void testNetworkHostPrivateIpInterface() throws IOException {_        resolveGce("_gce:privateIp:0_", InetAddress.getByName("10.240.0.2"))__        resolveGce("_gce:privateIp:1_", InetAddress.getByName("10.150.0.1"))__    };test,with,multiple,network,interfaces,network,host,private,ip,network,host,private,ip;public,void,test,network,host,private,ip,interface,throws,ioexception,resolve,gce,private,ip,inet,address,get,by,name,10,240,0,2,resolve,gce,private,ip,inet,address,get,by,name,10,150,0,1
GceNetworkTests -> public void testNetworkHostPrivateIpInterface() throws IOException;1544823664;Test with multiple network interfaces:_network.host: _gce:privateIp:0__network.host: _gce:privateIp:1_;public void testNetworkHostPrivateIpInterface() throws IOException {_        resolveGce("_gce:privateIp:0_", InetAddress.getByName("10.240.0.2"))__        resolveGce("_gce:privateIp:1_", InetAddress.getByName("10.150.0.1"))__    };test,with,multiple,network,interfaces,network,host,private,ip,network,host,private,ip;public,void,test,network,host,private,ip,interface,throws,ioexception,resolve,gce,private,ip,inet,address,get,by,name,10,240,0,2,resolve,gce,private,ip,inet,address,get,by,name,10,150,0,1
GceNetworkTests -> public void networkHostCoreLocal() throws IOException;1524684173;Test that we don't have any regression with network host core settings such as_network.host: _local_;public void networkHostCoreLocal() throws IOException {_        resolveGce("_local_", new NetworkService(Collections.emptyList())_            .resolveBindHostAddresses(new String[] { NetworkService.DEFAULT_NETWORK_HOST }))__    };test,that,we,don,t,have,any,regression,with,network,host,core,settings,such,as,network,host;public,void,network,host,core,local,throws,ioexception,resolve,gce,new,network,service,collections,empty,list,resolve,bind,host,addresses,new,string,network,service
GceNetworkTests -> public void networkHostCoreLocal() throws IOException;1541092382;Test that we don't have any regression with network host core settings such as_network.host: _local_;public void networkHostCoreLocal() throws IOException {_        resolveGce("_local_", new NetworkService(Collections.emptyList())_            .resolveBindHostAddresses(new String[] { NetworkService.DEFAULT_NETWORK_HOST }))__    };test,that,we,don,t,have,any,regression,with,network,host,core,settings,such,as,network,host;public,void,network,host,core,local,throws,ioexception,resolve,gce,new,network,service,collections,empty,list,resolve,bind,host,addresses,new,string,network,service
GceNetworkTests -> public void networkHostCoreLocal() throws IOException;1544823664;Test that we don't have any regression with network host core settings such as_network.host: _local_;public void networkHostCoreLocal() throws IOException {_        resolveGce("_local_", new NetworkService(Collections.emptyList())_            .resolveBindHostAddresses(new String[] { NetworkService.DEFAULT_NETWORK_HOST }))__    };test,that,we,don,t,have,any,regression,with,network,host,core,settings,such,as,network,host;public,void,network,host,core,local,throws,ioexception,resolve,gce,new,network,service,collections,empty,list,resolve,bind,host,addresses,new,string,network,service
GceNetworkTests -> public void testNetworkHostPrivateIp() throws IOException;1524684173;Test for network.host: _gce:privateIp_;public void testNetworkHostPrivateIp() throws IOException {_        resolveGce("_gce:privateIp_", InetAddress.getByName("10.240.0.2"))__    };test,for,network,host;public,void,test,network,host,private,ip,throws,ioexception,resolve,gce,inet,address,get,by,name,10,240,0,2
GceNetworkTests -> public void testNetworkHostPrivateIp() throws IOException;1541092382;Test for network.host: _gce:privateIp_;public void testNetworkHostPrivateIp() throws IOException {_        resolveGce("_gce:privateIp_", InetAddress.getByName("10.240.0.2"))__    };test,for,network,host;public,void,test,network,host,private,ip,throws,ioexception,resolve,gce,inet,address,get,by,name,10,240,0,2
GceNetworkTests -> public void testNetworkHostPrivateIp() throws IOException;1544823664;Test for network.host: _gce:privateIp_;public void testNetworkHostPrivateIp() throws IOException {_        resolveGce("_gce:privateIp_", InetAddress.getByName("10.240.0.2"))__    };test,for,network,host;public,void,test,network,host,private,ip,throws,ioexception,resolve,gce,inet,address,get,by,name,10,240,0,2
GceNetworkTests -> private void resolveGce(String gceNetworkSetting, InetAddress expected) throws IOException;1524684173;Utility test method to test different settings_@param gceNetworkSetting tested network.host property_@param expected expected InetAddress, null if we expect an exception_@throws IOException Well... If something goes wrong :);private void resolveGce(String gceNetworkSetting, InetAddress expected) throws IOException {_        resolveGce(gceNetworkSetting, expected == null ? null : new InetAddress [] { expected })__    };utility,test,method,to,test,different,settings,param,gce,network,setting,tested,network,host,property,param,expected,expected,inet,address,null,if,we,expect,an,exception,throws,ioexception,well,if,something,goes,wrong;private,void,resolve,gce,string,gce,network,setting,inet,address,expected,throws,ioexception,resolve,gce,gce,network,setting,expected,null,null,new,inet,address,expected
GceNetworkTests -> private void resolveGce(String gceNetworkSetting, InetAddress expected) throws IOException;1541092382;Utility test method to test different settings_@param gceNetworkSetting tested network.host property_@param expected expected InetAddress, null if we expect an exception_@throws IOException Well... If something goes wrong :);private void resolveGce(String gceNetworkSetting, InetAddress expected) throws IOException {_        resolveGce(gceNetworkSetting, expected == null ? null : new InetAddress [] { expected })__    };utility,test,method,to,test,different,settings,param,gce,network,setting,tested,network,host,property,param,expected,expected,inet,address,null,if,we,expect,an,exception,throws,ioexception,well,if,something,goes,wrong;private,void,resolve,gce,string,gce,network,setting,inet,address,expected,throws,ioexception,resolve,gce,gce,network,setting,expected,null,null,new,inet,address,expected
GceNetworkTests -> private void resolveGce(String gceNetworkSetting, InetAddress expected) throws IOException;1544823664;Utility test method to test different settings_@param gceNetworkSetting tested network.host property_@param expected expected InetAddress, null if we expect an exception_@throws IOException Well... If something goes wrong :);private void resolveGce(String gceNetworkSetting, InetAddress expected) throws IOException {_        resolveGce(gceNetworkSetting, expected == null ? null : new InetAddress [] { expected })__    };utility,test,method,to,test,different,settings,param,gce,network,setting,tested,network,host,property,param,expected,expected,inet,address,null,if,we,expect,an,exception,throws,ioexception,well,if,something,goes,wrong;private,void,resolve,gce,string,gce,network,setting,inet,address,expected,throws,ioexception,resolve,gce,gce,network,setting,expected,null,null,new,inet,address,expected
GceNetworkTests -> public void testNetworkHostWrongSetting() throws IOException;1524684173;Test for network.host: _gce:doesnotexist__This should raise an IllegalArgumentException as this setting does not exist;public void testNetworkHostWrongSetting() throws IOException {_        resolveGce("_gce:doesnotexist_", (InetAddress) null)__    };test,for,network,host,this,should,raise,an,illegal,argument,exception,as,this,setting,does,not,exist;public,void,test,network,host,wrong,setting,throws,ioexception,resolve,gce,inet,address,null
GceNetworkTests -> public void testNetworkHostWrongSetting() throws IOException;1541092382;Test for network.host: _gce:doesnotexist__This should raise an IllegalArgumentException as this setting does not exist;public void testNetworkHostWrongSetting() throws IOException {_        resolveGce("_gce:doesnotexist_", (InetAddress) null)__    };test,for,network,host,this,should,raise,an,illegal,argument,exception,as,this,setting,does,not,exist;public,void,test,network,host,wrong,setting,throws,ioexception,resolve,gce,inet,address,null
GceNetworkTests -> public void testNetworkHostWrongSetting() throws IOException;1544823664;Test for network.host: _gce:doesnotexist__This should raise an IllegalArgumentException as this setting does not exist;public void testNetworkHostWrongSetting() throws IOException {_        resolveGce("_gce:doesnotexist_", (InetAddress) null)__    };test,for,network,host,this,should,raise,an,illegal,argument,exception,as,this,setting,does,not,exist;public,void,test,network,host,wrong,setting,throws,ioexception,resolve,gce,inet,address,null
