commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void createThreadPool() {     threadPool = new TestThreadPool(GceDiscoveryTests.class.getName()). }
false;public,static;0;7;;@AfterClass public static void stopThreadPool() {     if (threadPool != null) {         threadPool.shutdownNow().         threadPool = null.     } }
false;public;0;8;;@Before public void setProjectName() {     projectName = getTestName().toLowerCase(Locale.ROOT).     // Slice off the "test" part of the method names so the project names     if (projectName.startsWith("test")) {         projectName = projectName.substring("test".length()).     } }
false;public;0;4;;@Before public void createTransportService() {     transportService = MockTransportService.createNewService(Settings.EMPTY, Version.CURRENT, threadPool, null). }
false;public;0;6;;@After public void stopGceComputeService() throws IOException {     if (mock != null) {         mock.close().     } }
false;protected;2;8;;protected List<TransportAddress> buildDynamicNodes(GceInstancesServiceImpl gceInstancesService, Settings nodeSettings) {     GceSeedHostsProvider provider = new GceSeedHostsProvider(nodeSettings, gceInstancesService, transportService, new NetworkService(Collections.emptyList())).     List<TransportAddress> dynamicHosts = provider.getSeedAddresses(null).     logger.info("--> addresses found: {}", dynamicHosts).     return dynamicHosts. }
false;public;0;9;;public void testNodesWithDifferentTagsAndNoTagSet() {     Settings nodeSettings = Settings.builder().put(GceInstancesServiceImpl.PROJECT_SETTING.getKey(), projectName).put(GceInstancesServiceImpl.ZONE_SETTING.getKey(), "europe-west1-b").build().     mock = new GceInstancesServiceMock(nodeSettings).     List<TransportAddress> dynamicHosts = buildDynamicNodes(mock, nodeSettings).     assertThat(dynamicHosts, hasSize(2)). }
false;public;0;10;;public void testNodesWithDifferentTagsAndOneTagSet() {     Settings nodeSettings = Settings.builder().put(GceInstancesServiceImpl.PROJECT_SETTING.getKey(), projectName).put(GceInstancesServiceImpl.ZONE_SETTING.getKey(), "europe-west1-b").putList(GceSeedHostsProvider.TAGS_SETTING.getKey(), "elasticsearch").build().     mock = new GceInstancesServiceMock(nodeSettings).     List<TransportAddress> dynamicHosts = buildDynamicNodes(mock, nodeSettings).     assertThat(dynamicHosts, hasSize(1)). }
false;public;0;10;;public void testNodesWithDifferentTagsAndTwoTagSet() {     Settings nodeSettings = Settings.builder().put(GceInstancesServiceImpl.PROJECT_SETTING.getKey(), projectName).put(GceInstancesServiceImpl.ZONE_SETTING.getKey(), "europe-west1-b").putList(GceSeedHostsProvider.TAGS_SETTING.getKey(), "elasticsearch", "dev").build().     mock = new GceInstancesServiceMock(nodeSettings).     List<TransportAddress> dynamicHosts = buildDynamicNodes(mock, nodeSettings).     assertThat(dynamicHosts, hasSize(1)). }
false;public;0;9;;public void testNodesWithSameTagsAndNoTagSet() {     Settings nodeSettings = Settings.builder().put(GceInstancesServiceImpl.PROJECT_SETTING.getKey(), projectName).put(GceInstancesServiceImpl.ZONE_SETTING.getKey(), "europe-west1-b").build().     mock = new GceInstancesServiceMock(nodeSettings).     List<TransportAddress> dynamicHosts = buildDynamicNodes(mock, nodeSettings).     assertThat(dynamicHosts, hasSize(2)). }
false;public;0;10;;public void testNodesWithSameTagsAndOneTagSet() {     Settings nodeSettings = Settings.builder().put(GceInstancesServiceImpl.PROJECT_SETTING.getKey(), projectName).put(GceInstancesServiceImpl.ZONE_SETTING.getKey(), "europe-west1-b").putList(GceSeedHostsProvider.TAGS_SETTING.getKey(), "elasticsearch").build().     mock = new GceInstancesServiceMock(nodeSettings).     List<TransportAddress> dynamicHosts = buildDynamicNodes(mock, nodeSettings).     assertThat(dynamicHosts, hasSize(2)). }
false;public;0;10;;public void testNodesWithSameTagsAndTwoTagsSet() {     Settings nodeSettings = Settings.builder().put(GceInstancesServiceImpl.PROJECT_SETTING.getKey(), projectName).put(GceInstancesServiceImpl.ZONE_SETTING.getKey(), "europe-west1-b").putList(GceSeedHostsProvider.TAGS_SETTING.getKey(), "elasticsearch", "dev").build().     mock = new GceInstancesServiceMock(nodeSettings).     List<TransportAddress> dynamicHosts = buildDynamicNodes(mock, nodeSettings).     assertThat(dynamicHosts, hasSize(2)). }
false;public;0;9;;public void testMultipleZonesAndTwoNodesInSameZone() {     Settings nodeSettings = Settings.builder().put(GceInstancesServiceImpl.PROJECT_SETTING.getKey(), projectName).putList(GceInstancesServiceImpl.ZONE_SETTING.getKey(), "us-central1-a", "europe-west1-b").build().     mock = new GceInstancesServiceMock(nodeSettings).     List<TransportAddress> dynamicHosts = buildDynamicNodes(mock, nodeSettings).     assertThat(dynamicHosts, hasSize(2)). }
false;public;0;9;;public void testMultipleZonesAndTwoNodesInDifferentZones() {     Settings nodeSettings = Settings.builder().put(GceInstancesServiceImpl.PROJECT_SETTING.getKey(), projectName).putList(GceInstancesServiceImpl.ZONE_SETTING.getKey(), "us-central1-a", "europe-west1-b").build().     mock = new GceInstancesServiceMock(nodeSettings).     List<TransportAddress> dynamicHosts = buildDynamicNodes(mock, nodeSettings).     assertThat(dynamicHosts, hasSize(2)). }
true;public;0;9;/**  * For issue https://github.com/elastic/elasticsearch-cloud-gce/issues/43  */ ;/**  * For issue https://github.com/elastic/elasticsearch-cloud-gce/issues/43  */ public void testZeroNode43() {     Settings nodeSettings = Settings.builder().put(GceInstancesServiceImpl.PROJECT_SETTING.getKey(), projectName).putList(GceInstancesServiceImpl.ZONE_SETTING.getKey(), "us-central1-a", "us-central1-b").build().     mock = new GceInstancesServiceMock(nodeSettings).     List<TransportAddress> dynamicHosts = buildDynamicNodes(mock, nodeSettings).     assertThat(dynamicHosts, hasSize(0)). }
false;public;0;13;;public void testIllegalSettingsMissingAllRequired() {     Settings nodeSettings = Settings.builder().put(GceMetadataService.GCE_HOST.getKey(), "http://internal").build().     mock = new GceInstancesServiceMock(nodeSettings).     try {         buildDynamicNodes(mock, nodeSettings).         fail("We expect an IllegalArgumentException for incomplete settings").     } catch (IllegalArgumentException expected) {         assertThat(expected.getMessage(), containsString("one or more gce discovery settings are missing.")).     } }
false;public;0;14;;public void testIllegalSettingsMissingProject() {     Settings nodeSettings = Settings.builder().put(GceMetadataService.GCE_HOST.getKey(), "http://internal").putList(GceInstancesServiceImpl.ZONE_SETTING.getKey(), "us-central1-a", "us-central1-b").build().     mock = new GceInstancesServiceMock(nodeSettings).     try {         buildDynamicNodes(mock, nodeSettings).         fail("We expect an IllegalArgumentException for incomplete settings").     } catch (IllegalArgumentException expected) {         assertThat(expected.getMessage(), containsString("one or more gce discovery settings are missing.")).     } }
false;public;0;14;;public void testIllegalSettingsMissingZone() {     Settings nodeSettings = Settings.builder().put(GceMetadataService.GCE_HOST.getKey(), "http://internal").put(GceInstancesServiceImpl.PROJECT_SETTING.getKey(), projectName).build().     mock = new GceInstancesServiceMock(nodeSettings).     try {         buildDynamicNodes(mock, nodeSettings).         fail("We expect an IllegalArgumentException for incomplete settings").     } catch (IllegalArgumentException expected) {         assertThat(expected.getMessage(), containsString("one or more gce discovery settings are missing.")).     } }
true;public;0;9;/**  * For issue https://github.com/elastic/elasticsearch/issues/16967:  * When using multiple regions and one of them has no instance at all, this  * was producing a NPE as a result.  */ ;/**  * For issue https://github.com/elastic/elasticsearch/issues/16967:  * When using multiple regions and one of them has no instance at all, this  * was producing a NPE as a result.  */ public void testNoRegionReturnsEmptyList() {     Settings nodeSettings = Settings.builder().put(GceInstancesServiceImpl.PROJECT_SETTING.getKey(), projectName).putList(GceInstancesServiceImpl.ZONE_SETTING.getKey(), "europe-west1-b", "us-central1-a").build().     mock = new GceInstancesServiceMock(nodeSettings).     List<TransportAddress> dynamicHosts = buildDynamicNodes(mock, nodeSettings).     assertThat(dynamicHosts, hasSize(1)). }
false;public;0;8;;public void testMetadataServerValues() {     Settings nodeSettings = Settings.EMPTY.     mock = new GceInstancesServiceMock(nodeSettings).     assertThat(mock.projectId(), not(projectName)).     List<TransportAddress> dynamicHosts = buildDynamicNodes(mock, nodeSettings).     assertThat(dynamicHosts, hasSize(1)). }
