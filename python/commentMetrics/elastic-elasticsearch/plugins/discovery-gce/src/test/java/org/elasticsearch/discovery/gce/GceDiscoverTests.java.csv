# id;timestamp;commentText;codeText;commentWords;codeWords
GceDiscoverTests -> private static void registerGceNode(final String nodeName);1524684173;Register an existing node as a GCE node__@param nodeName the name of the node;private static void registerGceNode(final String nodeName) {_        final TransportService transportService = internalCluster().getInstance(TransportService.class, nodeName)__        assertNotNull(transportService)__        final DiscoveryNode discoveryNode = transportService.getLocalNode()__        assertNotNull(discoveryNode)__        if (nodes.put(discoveryNode.getName(), discoveryNode) != null) {_            throw new IllegalArgumentException("Node [" + discoveryNode.getName() + "] cannot be registered twice")__        }_    };register,an,existing,node,as,a,gce,node,param,node,name,the,name,of,the,node;private,static,void,register,gce,node,final,string,node,name,final,transport,service,transport,service,internal,cluster,get,instance,transport,service,class,node,name,assert,not,null,transport,service,final,discovery,node,discovery,node,transport,service,get,local,node,assert,not,null,discovery,node,if,nodes,put,discovery,node,get,name,discovery,node,null,throw,new,illegal,argument,exception,node,discovery,node,get,name,cannot,be,registered,twice
GceDiscoverTests -> private static void registerGceNode(final String nodeName);1538579488;Register an existing node as a GCE node__@param nodeName the name of the node;private static void registerGceNode(final String nodeName) {_        final TransportService transportService = internalCluster().getInstance(TransportService.class, nodeName)__        assertNotNull(transportService)__        final DiscoveryNode discoveryNode = transportService.getLocalNode()__        assertNotNull(discoveryNode)__        if (nodes.put(discoveryNode.getName(), discoveryNode) != null) {_            throw new IllegalArgumentException("Node [" + discoveryNode.getName() + "] cannot be registered twice")__        }_    };register,an,existing,node,as,a,gce,node,param,node,name,the,name,of,the,node;private,static,void,register,gce,node,final,string,node,name,final,transport,service,transport,service,internal,cluster,get,instance,transport,service,class,node,name,assert,not,null,transport,service,final,discovery,node,discovery,node,transport,service,get,local,node,assert,not,null,discovery,node,if,nodes,put,discovery,node,get,name,discovery,node,null,throw,new,illegal,argument,exception,node,discovery,node,get,name,cannot,be,registered,twice
GceDiscoverTests -> private static void registerGceNode(final String nodeName);1544436057;Register an existing node as a GCE node__@param nodeName the name of the node;private static void registerGceNode(final String nodeName) {_        final TransportService transportService = internalCluster().getInstance(TransportService.class, nodeName)__        assertNotNull(transportService)__        final DiscoveryNode discoveryNode = transportService.getLocalNode()__        assertNotNull(discoveryNode)__        if (nodes.put(discoveryNode.getName(), discoveryNode) != null) {_            throw new IllegalArgumentException("Node [" + discoveryNode.getName() + "] cannot be registered twice")__        }_    };register,an,existing,node,as,a,gce,node,param,node,name,the,name,of,the,node;private,static,void,register,gce,node,final,string,node,name,final,transport,service,transport,service,internal,cluster,get,instance,transport,service,class,node,name,assert,not,null,transport,service,final,discovery,node,discovery,node,transport,service,get,local,node,assert,not,null,discovery,node,if,nodes,put,discovery,node,get,name,discovery,node,null,throw,new,illegal,argument,exception,node,discovery,node,get,name,cannot,be,registered,twice
GceDiscoverTests -> private static void registerGceNode(final String nodeName);1549270328;Register an existing node as a GCE node__@param nodeName the name of the node;private static void registerGceNode(final String nodeName) {_        final TransportService transportService = internalCluster().getInstance(TransportService.class, nodeName)__        assertNotNull(transportService)__        final DiscoveryNode discoveryNode = transportService.getLocalNode()__        assertNotNull(discoveryNode)__        if (nodes.put(discoveryNode.getName(), discoveryNode) != null) {_            throw new IllegalArgumentException("Node [" + discoveryNode.getName() + "] cannot be registered twice")__        }_    };register,an,existing,node,as,a,gce,node,param,node,name,the,name,of,the,node;private,static,void,register,gce,node,final,string,node,name,final,transport,service,transport,service,internal,cluster,get,instance,transport,service,class,node,name,assert,not,null,transport,service,final,discovery,node,discovery,node,transport,service,get,local,node,assert,not,null,discovery,node,if,nodes,put,discovery,node,get,name,discovery,node,null,throw,new,illegal,argument,exception,node,discovery,node,get,name,cannot,be,registered,twice
GceDiscoverTests -> private static void registerGceNode(final String nodeName);1549356412;Register an existing node as a GCE node__@param nodeName the name of the node;private static void registerGceNode(final String nodeName) {_        final TransportService transportService = internalCluster().getInstance(TransportService.class, nodeName)__        assertNotNull(transportService)__        final DiscoveryNode discoveryNode = transportService.getLocalNode()__        assertNotNull(discoveryNode)__        if (nodes.put(discoveryNode.getName(), discoveryNode) != null) {_            throw new IllegalArgumentException("Node [" + discoveryNode.getName() + "] cannot be registered twice")__        }_    };register,an,existing,node,as,a,gce,node,param,node,name,the,name,of,the,node;private,static,void,register,gce,node,final,string,node,name,final,transport,service,transport,service,internal,cluster,get,instance,transport,service,class,node,name,assert,not,null,transport,service,final,discovery,node,discovery,node,transport,service,get,local,node,assert,not,null,discovery,node,if,nodes,put,discovery,node,get,name,discovery,node,null,throw,new,illegal,argument,exception,node,discovery,node,get,name,cannot,be,registered,twice
GceDiscoverTests -> private static void assertNumberOfNodes(final int expected);1524684173;Asserts that the cluster nodes info contains an expected number of node__@param expected the expected number of nodes;private static void assertNumberOfNodes(final int expected) {_        assertEquals(expected, client().admin().cluster().prepareNodesInfo().clear().get().getNodes().size())__    };asserts,that,the,cluster,nodes,info,contains,an,expected,number,of,node,param,expected,the,expected,number,of,nodes;private,static,void,assert,number,of,nodes,final,int,expected,assert,equals,expected,client,admin,cluster,prepare,nodes,info,clear,get,get,nodes,size
GceDiscoverTests -> private static void assertNumberOfNodes(final int expected);1538579488;Asserts that the cluster nodes info contains an expected number of node__@param expected the expected number of nodes;private static void assertNumberOfNodes(final int expected) {_        assertEquals(expected, client().admin().cluster().prepareNodesInfo().clear().get().getNodes().size())__    };asserts,that,the,cluster,nodes,info,contains,an,expected,number,of,node,param,expected,the,expected,number,of,nodes;private,static,void,assert,number,of,nodes,final,int,expected,assert,equals,expected,client,admin,cluster,prepare,nodes,info,clear,get,get,nodes,size
GceDiscoverTests -> private static void assertNumberOfNodes(final int expected);1544436057;Asserts that the cluster nodes info contains an expected number of node__@param expected the expected number of nodes;private static void assertNumberOfNodes(final int expected) {_        assertEquals(expected, client().admin().cluster().prepareNodesInfo().clear().get().getNodes().size())__    };asserts,that,the,cluster,nodes,info,contains,an,expected,number,of,node,param,expected,the,expected,number,of,nodes;private,static,void,assert,number,of,nodes,final,int,expected,assert,equals,expected,client,admin,cluster,prepare,nodes,info,clear,get,get,nodes,size
GceDiscoverTests -> private static void assertNumberOfNodes(final int expected);1549270328;Asserts that the cluster nodes info contains an expected number of node__@param expected the expected number of nodes;private static void assertNumberOfNodes(final int expected) {_        assertEquals(expected, client().admin().cluster().prepareNodesInfo().clear().get().getNodes().size())__    };asserts,that,the,cluster,nodes,info,contains,an,expected,number,of,node,param,expected,the,expected,number,of,nodes;private,static,void,assert,number,of,nodes,final,int,expected,assert,equals,expected,client,admin,cluster,prepare,nodes,info,clear,get,get,nodes,size
GceDiscoverTests -> private static void assertNumberOfNodes(final int expected);1549356412;Asserts that the cluster nodes info contains an expected number of node__@param expected the expected number of nodes;private static void assertNumberOfNodes(final int expected) {_        assertEquals(expected, client().admin().cluster().prepareNodesInfo().clear().get().getNodes().size())__    };asserts,that,the,cluster,nodes,info,contains,an,expected,number,of,node,param,expected,the,expected,number,of,nodes;private,static,void,assert,number,of,nodes,final,int,expected,assert,equals,expected,client,admin,cluster,prepare,nodes,info,clear,get,get,nodes,size
