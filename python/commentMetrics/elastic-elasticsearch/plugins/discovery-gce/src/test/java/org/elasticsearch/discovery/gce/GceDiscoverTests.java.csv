commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@After public void clearGceNodes() {     nodes.clear(). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return singletonList(TestPlugin.class). }
false;protected;1;9;;@Override protected Settings nodeSettings(int nodeOrdinal) {     return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put(DISCOVERY_SEED_PROVIDERS_SETTING.getKey(), "gce").put("cloud.gce.project_id", "test").put("cloud.gce.zone", "test").build(). }
false;public;0;33;;public void testJoin() {     // start master node     final String masterNode = internalCluster().startMasterOnlyNode().     registerGceNode(masterNode).     ClusterStateResponse clusterStateResponse = client(masterNode).admin().cluster().prepareState().setMasterNodeTimeout("1s").clear().setNodes(true).get().     assertNotNull(clusterStateResponse.getState().nodes().getMasterNodeId()).     // start another node     final String secondNode = internalCluster().startNode().     registerGceNode(secondNode).     clusterStateResponse = client(secondNode).admin().cluster().prepareState().setMasterNodeTimeout("1s").clear().setNodes(true).setLocal(true).get().     assertNotNull(clusterStateResponse.getState().nodes().getMasterNodeId()).     // wait for the cluster to form     assertNoTimeout(client().admin().cluster().prepareHealth().setWaitForNodes(Integer.toString(2)).get()).     assertNumberOfNodes(2).     // add one more node and wait for it to join     final String thirdNode = internalCluster().startDataOnlyNode().     registerGceNode(thirdNode).     assertNoTimeout(client().admin().cluster().prepareHealth().setWaitForNodes(Integer.toString(3)).get()).     assertNumberOfNodes(3). }
true;private,static;1;9;/**  * Register an existing node as a GCE node  *  * @param nodeName the name of the node  */ ;/**  * Register an existing node as a GCE node  *  * @param nodeName the name of the node  */ private static void registerGceNode(final String nodeName) {     final TransportService transportService = internalCluster().getInstance(TransportService.class, nodeName).     assertNotNull(transportService).     final DiscoveryNode discoveryNode = transportService.getLocalNode().     assertNotNull(discoveryNode).     if (nodes.put(discoveryNode.getName(), discoveryNode) != null) {         throw new IllegalArgumentException("Node [" + discoveryNode.getName() + "] cannot be registered twice").     } }
true;private,static;1;3;/**  * Asserts that the cluster nodes info contains an expected number of node  *  * @param expected the expected number of nodes  */ ;/**  * Asserts that the cluster nodes info contains an expected number of node  *  * @param expected the expected number of nodes  */ private static void assertNumberOfNodes(final int expected) {     assertEquals(expected, client().admin().cluster().prepareNodesInfo().clear().get().getNodes().size()). }
false;public;0;20;;@Override public Collection<Instance> instances() {     return Access.doPrivileged(() -> {         final List<Instance> instances = new ArrayList<>().         for (DiscoveryNode discoveryNode : nodes.values()) {             Instance instance = new Instance().             instance.setName(discoveryNode.getName()).             instance.setStatus("STARTED").             NetworkInterface networkInterface = new NetworkInterface().             networkInterface.setNetworkIP(discoveryNode.getAddress().toString()).             instance.setNetworkInterfaces(singletonList(networkInterface)).             instances.add(instance).         }         return instances.     }). }
false;public;0;4;;@Override public String projectId() {     return PROJECT_SETTING.get(settings). }
false;public;0;4;;@Override public List<String> zones() {     return ZONE_SETTING.get(settings). }
false;public;0;3;;@Override public void close() throws IOException { }
false;protected;0;39;;@Override protected GceInstancesService createGceInstancesService() {     return new GceInstancesService() {          @Override         public Collection<Instance> instances() {             return Access.doPrivileged(() -> {                 final List<Instance> instances = new ArrayList<>().                 for (DiscoveryNode discoveryNode : nodes.values()) {                     Instance instance = new Instance().                     instance.setName(discoveryNode.getName()).                     instance.setStatus("STARTED").                     NetworkInterface networkInterface = new NetworkInterface().                     networkInterface.setNetworkIP(discoveryNode.getAddress().toString()).                     instance.setNetworkInterfaces(singletonList(networkInterface)).                     instances.add(instance).                 }                 return instances.             }).         }          @Override         public String projectId() {             return PROJECT_SETTING.get(settings).         }          @Override         public List<String> zones() {             return ZONE_SETTING.get(settings).         }          @Override         public void close() throws IOException {         }     }. }
