commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Override public LowLevelHttpResponse execute() {     MockLowLevelHttpResponse response = new MockLowLevelHttpResponse().     response.setStatusCode(200).     response.setContentType(Json.MEDIA_TYPE).     response.setContent("value").     if (addMetdataFlavor.get()) {         response.addHeader("Metadata-Flavor", "Google").     }     return response. }
false;public;2;16;;@Override public LowLevelHttpRequest buildRequest(String method, final String url) {     return new MockLowLevelHttpRequest() {          @Override         public LowLevelHttpResponse execute() {             MockLowLevelHttpResponse response = new MockLowLevelHttpResponse().             response.setStatusCode(200).             response.setContentType(Json.MEDIA_TYPE).             response.setContent("value").             if (addMetdataFlavor.get()) {                 response.addHeader("Metadata-Flavor", "Google").             }             return response.         }     }. }
false;protected,synchronized;0;4;;@Override protected synchronized HttpTransport getGceHttpTransport() {     return transport. }
false;public;0;34;;public void testHeaderContainsMetadataFlavor() throws Exception {     final AtomicBoolean addMetdataFlavor = new AtomicBoolean().     final MockHttpTransport transport = new MockHttpTransport() {          @Override         public LowLevelHttpRequest buildRequest(String method, final String url) {             return new MockLowLevelHttpRequest() {                  @Override                 public LowLevelHttpResponse execute() {                     MockLowLevelHttpResponse response = new MockLowLevelHttpResponse().                     response.setStatusCode(200).                     response.setContentType(Json.MEDIA_TYPE).                     response.setContent("value").                     if (addMetdataFlavor.get()) {                         response.addHeader("Metadata-Flavor", "Google").                     }                     return response.                 }             }.         }     }.     final GceInstancesServiceImpl service = new GceInstancesServiceImpl(Settings.EMPTY) {          @Override         protected synchronized HttpTransport getGceHttpTransport() {             return transport.         }     }.     final String serviceURL = "/computeMetadata/v1/project/project-id".     assertThat(service.getAppEngineValueFromMetadataServer(serviceURL), is(nullValue())).     addMetdataFlavor.set(true).     assertThat(service.getAppEngineValueFromMetadataServer(serviceURL), is("value")). }
