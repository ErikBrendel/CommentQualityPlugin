commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;8;;public static void main(String[] args) throws Exception {     if (args == null || args.length != 2) {         throw new IllegalArgumentException("GCEFixture <working directory> <nodes transport uri file>").     }     final GCEFixture fixture = new GCEFixture(args[0], args[1]).     fixture.listen(). }
false;private,static;1;3;;private static String nonAuthPath(Request request) {     return nonAuthPath(request.getMethod(), request.getPath()). }
false;private,static;2;3;;private static String nonAuthPath(String method, String path) {     return "NONAUTH " + method + " " + path. }
false;private,static;1;3;;private static String authPath(Request request) {     return authPath(request.getMethod(), request.getPath()). }
false;private,static;2;3;;private static String authPath(String method, String path) {     return "AUTH " + method + " " + path. }
true;private;0;73;/**  * Builds the default request handlers *  */ ;/**  * Builds the default request handlers *  */ private PathTrie<RequestHandler> defaultHandlers() {     final PathTrie<RequestHandler> handlers = new PathTrie<>(RestUtils.REST_DECODER).     final Consumer<Map<String, String>> commonHeaderConsumer = headers -> headers.put("Metadata-Flavor", "Google").     final Function<String, Response> simpleValue = value -> {         final Map<String, String> headers = new HashMap<>(TEXT_PLAIN_CONTENT_TYPE).         commonHeaderConsumer.accept(headers).         final byte[] responseAsBytes = value.getBytes(StandardCharsets.UTF_8).         return new Response(RestStatus.OK.getStatus(), headers, responseAsBytes).     }.     final Function<String, Response> jsonValue = value -> {         final Map<String, String> headers = new HashMap<>(JSON_CONTENT_TYPE).         commonHeaderConsumer.accept(headers).         final byte[] responseAsBytes = value.getBytes(StandardCharsets.UTF_8).         return new Response(RestStatus.OK.getStatus(), headers, responseAsBytes).     }.     // https://cloud.google.com/compute/docs/storing-retrieving-metadata     handlers.insert(nonAuthPath(HttpGet.METHOD_NAME, "/computeMetadata/v1/project/project-id"), request -> simpleValue.apply(PROJECT_ID)).     handlers.insert(nonAuthPath(HttpGet.METHOD_NAME, "/computeMetadata/v1/project/attributes/google-compute-default-zone"), request -> simpleValue.apply(ZONE)).     // https://cloud.google.com/compute/docs/access/create-enable-service-accounts-for-instances     handlers.insert(nonAuthPath(HttpGet.METHOD_NAME, "/computeMetadata/v1/instance/service-accounts/default/token"), request -> jsonValue.apply(Strings.toString(jsonBuilder().startObject().field("access_token", TOKEN).field("expires_in", TimeUnit.HOURS.toSeconds(1)).field("token_type", TOKEN_TYPE).endObject()))).     // https://cloud.google.com/compute/docs/reference/rest/v1/instances     handlers.insert(authPath(HttpGet.METHOD_NAME, "/compute/v1/projects/{project}/zones/{zone}/instances"), request -> {         final List items = new ArrayList().         int count = 0.         for (String address : Files.readAllLines(nodes)) {             count++.             items.add(MapBuilder.<String, Object>newMapBuilder().put("id", Long.toString(9309873766405L + count)).put("description", "ES node" + count).put("name", "test" + count).put("kind", "compute#instance").put("machineType", "n1-standard-1").put("networkInterfaces", Collections.singletonList(MapBuilder.<String, Object>newMapBuilder().put("accessConfigs", Collections.emptyList()).put("name", "nic0").put("network", "default").put("networkIP", address).immutableMap())).put("status", "RUNNING").put("zone", ZONE).immutableMap()).         }         final String json = Strings.toString(jsonBuilder().startObject().field("id", "test-instances").field("items", items).endObject()).         final byte[] responseAsBytes = json.getBytes(StandardCharsets.UTF_8).         final Map<String, String> headers = new HashMap<>(JSON_CONTENT_TYPE).         commonHeaderConsumer.accept(headers).         return new Response(RestStatus.OK.getStatus(), headers, responseAsBytes).     }).     return handlers. }
false;protected;1;20;;@Override protected Response handle(final Request request) throws IOException {     final String nonAuthorizedPath = nonAuthPath(request).     final RequestHandler nonAuthorizedHandler = handlers.retrieve(nonAuthorizedPath, request.getParameters()).     if (nonAuthorizedHandler != null) {         return nonAuthorizedHandler.handle(request).     }     final String authorizedPath = authPath(request).     final RequestHandler authorizedHandler = handlers.retrieve(authorizedPath, request.getParameters()).     if (authorizedHandler != null) {         final String authorization = request.getHeader("Authorization").         if ((TOKEN_TYPE + " " + TOKEN).equals(authorization) == false) {             return newError(RestStatus.UNAUTHORIZED, "Authorization", "Login Required").         }         return authorizedHandler.handle(request).     }     return null. }
false;private,static;3;20;;private static Response newError(final RestStatus status, final String code, final String message) throws IOException {     final String response = Strings.toString(jsonBuilder().startObject().field("error", MapBuilder.<String, Object>newMapBuilder().put("errors", Collections.singletonList(MapBuilder.<String, Object>newMapBuilder().put("domain", "global").put("reason", "required").put("message", message).put("locationType", "header").put("location", code).immutableMap())).put("code", status.getStatus()).put("message", message).immutableMap()).endObject()).     return new Response(status.getStatus(), JSON_CONTENT_TYPE, response.getBytes(UTF_8)). }
false;private,static;1;4;;@SuppressForbidden(reason = "Paths#get is fine - we don't have environment here") private static Path toPath(final String dir) {     return Paths.get(dir). }
