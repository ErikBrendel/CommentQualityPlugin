commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;public void testReplaceStashedValuesStashKeyInMapValue() throws IOException {     Stash stash = new Stash().     Map<String, Object> expected = new HashMap<>().     expected.put("key", singletonMap("a", "foobar")).     Map<String, Object> map = new HashMap<>().     Map<String, Object> map2 = new HashMap<>().     if (randomBoolean()) {         stash.stashValue("stashed", "bar").         map2.put("a", "foo${stashed}").     } else {         stash.stashValue("stashed", "foobar").         map2.put("a", "$stashed").     }     map.put("key", map2).     Map<String, Object> actual = stash.replaceStashedValues(map).     assertEquals(expected, actual).     assertThat(actual, not(sameInstance(map))). }
false;public;0;20;;public void testReplaceStashedValuesStashKeyInMapKey() throws IOException {     Stash stash = new Stash().     Map<String, Object> expected = new HashMap<>().     expected.put("key", singletonMap("foobar", "a")).     Map<String, Object> map = new HashMap<>().     Map<String, Object> map2 = new HashMap<>().     if (randomBoolean()) {         stash.stashValue("stashed", "bar").         map2.put("foo${stashed}", "a").     } else {         stash.stashValue("stashed", "foobar").         map2.put("$stashed", "a").     }     map.put("key", map2).     Map<String, Object> actual = stash.replaceStashedValues(map).     assertEquals(expected, actual).     assertThat(actual, not(sameInstance(map))). }
false;public;0;21;;public void testReplaceStashedValuesStashKeyInMapKeyConflicts() throws IOException {     Stash stash = new Stash().     Map<String, Object> map = new HashMap<>().     Map<String, Object> map2 = new HashMap<>().     String key.     if (randomBoolean()) {         stash.stashValue("stashed", "bar").         key = "foo${stashed}".     } else {         stash.stashValue("stashed", "foobar").         key = "$stashed".     }     map2.put(key, "a").     map2.put("foobar", "whatever").     map.put("key", map2).     Exception e = expectThrows(IllegalArgumentException.class, () -> stash.replaceStashedValues(map)).     assertEquals(e.getMessage(), "Unstashing has caused a key conflict! The map is [{foobar=whatever}] and the key is [" + key + "] which unstashes to [foobar]"). }
false;public;0;21;;public void testReplaceStashedValuesStashKeyInList() throws IOException {     Stash stash = new Stash().     stash.stashValue("stashed", "bar").     Map<String, Object> expected = new HashMap<>().     expected.put("key", Arrays.asList("foot", "foobar", 1)).     Map<String, Object> map = new HashMap<>().     Object value.     if (randomBoolean()) {         stash.stashValue("stashed", "bar").         value = "foo${stashed}".     } else {         stash.stashValue("stashed", "foobar").         value = "$stashed".     }     map.put("key", Arrays.asList("foot", value, 1)).     Map<String, Object> actual = stash.replaceStashedValues(map).     assertEquals(expected, actual).     assertThat(actual, not(sameInstance(map))). }
false;public;0;24;;public void testPathInList() throws IOException {     Stash stash = new Stash().     String topLevelKey.     if (randomBoolean()) {         topLevelKey = randomAlphaOfLength(2) + "." + randomAlphaOfLength(2).     } else {         topLevelKey = randomAlphaOfLength(5).     }     stash.stashValue("body", singletonMap(topLevelKey, Arrays.asList("a", "b"))).     Map<String, Object> expected.     Map<String, Object> map.     if (randomBoolean()) {         expected = singletonMap(topLevelKey, Arrays.asList("test", "boooooh!")).         map = singletonMap(topLevelKey, Arrays.asList("test", "${body.$_path}oooooh!")).     } else {         expected = singletonMap(topLevelKey, Arrays.asList("test", "b")).         map = singletonMap(topLevelKey, Arrays.asList("test", "$body.$_path")).     }     Map<String, Object> actual = stash.replaceStashedValues(map).     assertEquals(expected, actual).     assertThat(actual, not(sameInstance(map))). }
false;public;0;24;;public void testPathInMapValue() throws IOException {     Stash stash = new Stash().     String topLevelKey.     if (randomBoolean()) {         topLevelKey = randomAlphaOfLength(2) + "." + randomAlphaOfLength(2).     } else {         topLevelKey = randomAlphaOfLength(5).     }     stash.stashValue("body", singletonMap(topLevelKey, singletonMap("a", "b"))).     Map<String, Object> expected.     Map<String, Object> map.     if (randomBoolean()) {         expected = singletonMap(topLevelKey, singletonMap("a", "boooooh!")).         map = singletonMap(topLevelKey, singletonMap("a", "${body.$_path}oooooh!")).     } else {         expected = singletonMap(topLevelKey, singletonMap("a", "b")).         map = singletonMap(topLevelKey, singletonMap("a", "$body.$_path")).     }     Map<String, Object> actual = stash.replaceStashedValues(map).     assertEquals(expected, actual).     assertThat(actual, not(sameInstance(map))). }
