commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;public void testSkip() {     SkipSection section = new SkipSection("6.0.0 - 6.1.0", randomBoolean() ? Collections.emptyList() : Collections.singletonList("warnings"), "foobar").     assertFalse(section.skip(Version.CURRENT)).     assertTrue(section.skip(Version.V_6_0_0)).     section = new SkipSection(randomBoolean() ? null : "6.0.0 - 6.1.0", Collections.singletonList("boom"), "foobar").     assertTrue(section.skip(Version.CURRENT)). }
false;public;0;9;;public void testMessage() {     SkipSection section = new SkipSection("6.0.0 - 6.1.0", Collections.singletonList("warnings"), "foobar").     assertEquals("[FOOBAR] skipped, reason: [foobar] unsupported features [warnings]", section.getSkipMessage("FOOBAR")).     section = new SkipSection(null, Collections.singletonList("warnings"), "foobar").     assertEquals("[FOOBAR] skipped, reason: [foobar] unsupported features [warnings]", section.getSkipMessage("FOOBAR")).     section = new SkipSection(null, Collections.singletonList("warnings"), null).     assertEquals("[FOOBAR] skipped, unsupported features [warnings]", section.getSkipMessage("FOOBAR")). }
false;public;0;13;;public void testParseSkipSectionVersionNoFeature() throws Exception {     parser = createParser(YamlXContent.yamlXContent, "version:     \" - 6.1.1\"\n" + "reason:      Delete ignores the parent param").     SkipSection skipSection = SkipSection.parse(parser).     assertThat(skipSection, notNullValue()).     assertThat(skipSection.getLowerVersion(), equalTo(VersionUtils.getFirstVersion())).     assertThat(skipSection.getUpperVersion(), equalTo(Version.V_6_1_1)).     assertThat(skipSection.getFeatures().size(), equalTo(0)).     assertThat(skipSection.getReason(), equalTo("Delete ignores the parent param")). }
false;public;0;13;;public void testParseSkipSectionAllVersions() throws Exception {     parser = createParser(YamlXContent.yamlXContent, "version:     \" all \"\n" + "reason:      Delete ignores the parent param").     SkipSection skipSection = SkipSection.parse(parser).     assertThat(skipSection, notNullValue()).     assertThat(skipSection.getLowerVersion(), equalTo(VersionUtils.getFirstVersion())).     assertThat(skipSection.getUpperVersion(), equalTo(Version.CURRENT)).     assertThat(skipSection.getFeatures().size(), equalTo(0)).     assertThat(skipSection.getReason(), equalTo("Delete ignores the parent param")). }
false;public;0;12;;public void testParseSkipSectionFeatureNoVersion() throws Exception {     parser = createParser(YamlXContent.yamlXContent, "features:     regex").     SkipSection skipSection = SkipSection.parse(parser).     assertThat(skipSection, notNullValue()).     assertThat(skipSection.isVersionCheck(), equalTo(false)).     assertThat(skipSection.getFeatures().size(), equalTo(1)).     assertThat(skipSection.getFeatures().get(0), equalTo("regex")).     assertThat(skipSection.getReason(), nullValue()). }
false;public;0;14;;public void testParseSkipSectionFeaturesNoVersion() throws Exception {     parser = createParser(YamlXContent.yamlXContent, "features:     [regex1,regex2,regex3]").     SkipSection skipSection = SkipSection.parse(parser).     assertThat(skipSection, notNullValue()).     assertThat(skipSection.isVersionCheck(), equalTo(false)).     assertThat(skipSection.getFeatures().size(), equalTo(3)).     assertThat(skipSection.getFeatures().get(0), equalTo("regex1")).     assertThat(skipSection.getFeatures().get(1), equalTo("regex2")).     assertThat(skipSection.getFeatures().get(2), equalTo("regex3")).     assertThat(skipSection.getReason(), nullValue()). }
false;public;0;13;;public void testParseSkipSectionBothFeatureAndVersion() throws Exception {     parser = createParser(YamlXContent.yamlXContent, "version:     \" - 0.90.2\"\n" + "features:     regex\n" + "reason:      Delete ignores the parent param").     SkipSection skipSection = SkipSection.parse(parser).     assertEquals(VersionUtils.getFirstVersion(), skipSection.getLowerVersion()).     assertEquals(Version.fromString("0.90.2"), skipSection.getUpperVersion()).     assertEquals(Collections.singletonList("regex"), skipSection.getFeatures()).     assertEquals("Delete ignores the parent param", skipSection.getReason()). }
false;public;0;8;;public void testParseSkipSectionNoReason() throws Exception {     parser = createParser(YamlXContent.yamlXContent, "version:     \" - 0.90.2\"\n").     Exception e = expectThrows(ParsingException.class, () -> SkipSection.parse(parser)).     assertThat(e.getMessage(), is("reason is mandatory within skip version section")). }
false;public;0;8;;public void testParseSkipSectionNoVersionNorFeature() throws Exception {     parser = createParser(YamlXContent.yamlXContent, "reason:      Delete ignores the parent param\n").     Exception e = expectThrows(ParsingException.class, () -> SkipSection.parse(parser)).     assertThat(e.getMessage(), is("version or features is mandatory within skip section")). }
