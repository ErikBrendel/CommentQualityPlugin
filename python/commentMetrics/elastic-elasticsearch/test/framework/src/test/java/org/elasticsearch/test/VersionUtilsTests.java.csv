commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;public void testAllVersionsSorted() {     List<Version> allVersions = VersionUtils.allReleasedVersions().     for (int i = 0, j = 1. j < allVersions.size(). ++i, ++j) {         assertTrue(allVersions.get(i).before(allVersions.get(j))).     } }
false;public;0;58;;public void testRandomVersionBetween() {     // TODO: rework this test to use a dummy Version class so these don't need to change with each release     // full range     Version got = VersionUtils.randomVersionBetween(random(), VersionUtils.getFirstVersion(), Version.CURRENT).     assertTrue(got.onOrAfter(VersionUtils.getFirstVersion())).     assertTrue(got.onOrBefore(Version.CURRENT)).     got = VersionUtils.randomVersionBetween(random(), null, Version.CURRENT).     assertTrue(got.onOrAfter(VersionUtils.getFirstVersion())).     assertTrue(got.onOrBefore(Version.CURRENT)).     got = VersionUtils.randomVersionBetween(random(), VersionUtils.getFirstVersion(), null).     assertTrue(got.onOrAfter(VersionUtils.getFirstVersion())).     assertTrue(got.onOrBefore(Version.CURRENT)).     // sub range     got = VersionUtils.randomVersionBetween(random(), Version.V_6_0_0_alpha1, Version.V_6_2_4).     assertTrue(got.onOrAfter(Version.V_6_0_0_alpha1)).     assertTrue(got.onOrBefore(Version.V_6_2_4)).     // unbounded lower     got = VersionUtils.randomVersionBetween(random(), null, Version.V_6_0_0_beta1).     assertTrue(got.onOrAfter(VersionUtils.getFirstVersion())).     assertTrue(got.onOrBefore(Version.V_6_0_0_beta1)).     got = VersionUtils.randomVersionBetween(random(), null, VersionUtils.allReleasedVersions().get(0)).     assertTrue(got.onOrAfter(VersionUtils.getFirstVersion())).     assertTrue(got.onOrBefore(VersionUtils.allReleasedVersions().get(0))).     // unbounded upper     got = VersionUtils.randomVersionBetween(random(), Version.V_6_0_0, null).     assertTrue(got.onOrAfter(Version.V_6_0_0)).     assertTrue(got.onOrBefore(Version.CURRENT)).     got = VersionUtils.randomVersionBetween(random(), VersionUtils.getPreviousVersion(), null).     assertTrue(got.onOrAfter(VersionUtils.getPreviousVersion())).     assertTrue(got.onOrBefore(Version.CURRENT)).     // range of one     got = VersionUtils.randomVersionBetween(random(), VersionUtils.getFirstVersion(), VersionUtils.getFirstVersion()).     assertEquals(got, VersionUtils.getFirstVersion()).     got = VersionUtils.randomVersionBetween(random(), Version.CURRENT, Version.CURRENT).     assertEquals(got, Version.CURRENT).     got = VersionUtils.randomVersionBetween(random(), Version.V_6_0_0_beta1, Version.V_6_0_0_beta1).     assertEquals(got, Version.V_6_0_0_beta1).     // implicit range of one     got = VersionUtils.randomVersionBetween(random(), null, VersionUtils.getFirstVersion()).     assertEquals(got, VersionUtils.getFirstVersion()).     got = VersionUtils.randomVersionBetween(random(), Version.CURRENT, null).     assertEquals(got, Version.CURRENT).     if (Booleans.parseBoolean(System.getProperty("build.snapshot", "true"))) {         // max or min can be an unreleased version         final Version unreleased = randomFrom(VersionUtils.allUnreleasedVersions()).         assertThat(VersionUtils.randomVersionBetween(random(), null, unreleased), lessThanOrEqualTo(unreleased)).         assertThat(VersionUtils.randomVersionBetween(random(), unreleased, null), greaterThanOrEqualTo(unreleased)).         assertEquals(unreleased, VersionUtils.randomVersionBetween(random(), unreleased, unreleased)).     } }
false;public;0;15;;public void testResolveReleasedVersionsForReleaseBranch() {     Tuple<List<Version>, List<Version>> t = VersionUtils.resolveReleasedVersions(TestReleaseBranch.CURRENT, TestReleaseBranch.class).     List<Version> released = t.v1().     List<Version> unreleased = t.v2().     assertThat(released, equalTo(Arrays.asList(TestReleaseBranch.V_4_0_0, TestReleaseBranch.V_5_3_0, TestReleaseBranch.V_5_3_1, TestReleaseBranch.V_5_3_2, TestReleaseBranch.V_5_4_0))).     assertThat(unreleased, equalTo(Arrays.asList(TestReleaseBranch.V_4_0_1, TestReleaseBranch.V_5_4_1))). }
false;public;0;15;;public void testResolveReleasedVersionsForUnreleasedStableBranch() {     Tuple<List<Version>, List<Version>> t = VersionUtils.resolveReleasedVersions(TestStableBranch.CURRENT, TestStableBranch.class).     List<Version> released = t.v1().     List<Version> unreleased = t.v2().     assertThat(released, equalTo(Arrays.asList(TestStableBranch.V_4_0_0, TestStableBranch.V_5_0_0, TestStableBranch.V_5_0_1))).     assertThat(unreleased, equalTo(Arrays.asList(TestStableBranch.V_4_0_1, TestStableBranch.V_5_0_2, TestStableBranch.V_5_1_0))). }
false;public;0;16;;public void testResolveReleasedVersionsForStableBranchBehindStableBranch() {     Tuple<List<Version>, List<Version>> t = VersionUtils.resolveReleasedVersions(TestStableBranchBehindStableBranch.CURRENT, TestStableBranchBehindStableBranch.class).     List<Version> released = t.v1().     List<Version> unreleased = t.v2().     assertThat(released, equalTo(Arrays.asList(TestStableBranchBehindStableBranch.V_4_0_0, TestStableBranchBehindStableBranch.V_5_3_0, TestStableBranchBehindStableBranch.V_5_3_1))).     assertThat(unreleased, equalTo(Arrays.asList(TestStableBranchBehindStableBranch.V_4_0_1, TestStableBranchBehindStableBranch.V_5_3_2, TestStableBranchBehindStableBranch.V_5_4_0, TestStableBranchBehindStableBranch.V_5_5_0))). }
false;public;0;16;;public void testResolveReleasedVersionsForUnstableBranch() {     Tuple<List<Version>, List<Version>> t = VersionUtils.resolveReleasedVersions(TestUnstableBranch.CURRENT, TestUnstableBranch.class).     List<Version> released = t.v1().     List<Version> unreleased = t.v2().     assertThat(released, equalTo(Arrays.asList(TestUnstableBranch.V_5_3_0, TestUnstableBranch.V_5_3_1, TestUnstableBranch.V_6_0_0_alpha1, TestUnstableBranch.V_6_0_0_alpha2))).     assertThat(unreleased, equalTo(Arrays.asList(TestUnstableBranch.V_5_3_2, TestUnstableBranch.V_5_4_0, TestUnstableBranch.V_6_0_0_beta1))). }
false;public;0;18;;public void testResolveReleasedVersionsAtNewMajorRelease() {     Tuple<List<Version>, List<Version>> t = VersionUtils.resolveReleasedVersions(TestNewMajorRelease.CURRENT, TestNewMajorRelease.class).     List<Version> released = t.v1().     List<Version> unreleased = t.v2().     assertThat(released, equalTo(Arrays.asList(TestNewMajorRelease.V_5_6_0, TestNewMajorRelease.V_5_6_1, TestNewMajorRelease.V_6_0_0_alpha1, TestNewMajorRelease.V_6_0_0_alpha2, TestNewMajorRelease.V_6_0_0_beta1, TestNewMajorRelease.V_6_0_0_beta2, TestNewMajorRelease.V_6_0_0))).     assertThat(unreleased, equalTo(Arrays.asList(TestNewMajorRelease.V_5_6_2, TestNewMajorRelease.V_6_0_1))). }
false;public;0;19;;public void testResolveReleasedVersionsAtVersionBumpIn6x() {     Tuple<List<Version>, List<Version>> t = VersionUtils.resolveReleasedVersions(TestVersionBumpIn6x.CURRENT, TestVersionBumpIn6x.class).     List<Version> released = t.v1().     List<Version> unreleased = t.v2().     assertThat(released, equalTo(Arrays.asList(TestVersionBumpIn6x.V_5_6_0, TestVersionBumpIn6x.V_5_6_1, TestVersionBumpIn6x.V_6_0_0_alpha1, TestVersionBumpIn6x.V_6_0_0_alpha2, TestVersionBumpIn6x.V_6_0_0_beta1, TestVersionBumpIn6x.V_6_0_0_beta2, TestVersionBumpIn6x.V_6_0_0))).     assertThat(unreleased, equalTo(Arrays.asList(TestVersionBumpIn6x.V_5_6_2, TestVersionBumpIn6x.V_6_0_1, TestVersionBumpIn6x.V_6_1_0))). }
false;public;0;22;;public void testResolveReleasedVersionsAtNewMinorBranchIn6x() {     Tuple<List<Version>, List<Version>> t = VersionUtils.resolveReleasedVersions(TestNewMinorBranchIn6x.CURRENT, TestNewMinorBranchIn6x.class).     List<Version> released = t.v1().     List<Version> unreleased = t.v2().     assertThat(released, equalTo(Arrays.asList(TestNewMinorBranchIn6x.V_5_6_0, TestNewMinorBranchIn6x.V_5_6_1, TestNewMinorBranchIn6x.V_6_0_0_alpha1, TestNewMinorBranchIn6x.V_6_0_0_alpha2, TestNewMinorBranchIn6x.V_6_0_0_beta1, TestNewMinorBranchIn6x.V_6_0_0_beta2, TestNewMinorBranchIn6x.V_6_0_0, TestNewMinorBranchIn6x.V_6_0_1, TestNewMinorBranchIn6x.V_6_1_0, TestNewMinorBranchIn6x.V_6_1_1))).     assertThat(unreleased, equalTo(Arrays.asList(TestNewMinorBranchIn6x.V_5_6_2, TestNewMinorBranchIn6x.V_6_1_2, TestNewMinorBranchIn6x.V_6_2_0))). }
true;public;0;59;/**  * Tests that {@link Version#minimumCompatibilityVersion()} and {@link VersionUtils#allReleasedVersions()}  * agree with the list of wire and index compatible versions we build in gradle.  */ ;/**  * Tests that {@link Version#minimumCompatibilityVersion()} and {@link VersionUtils#allReleasedVersions()}  * agree with the list of wire and index compatible versions we build in gradle.  */ public void testGradleVersionsMatchVersionUtils() {     // First check the index compatible versions     VersionsFromProperty indexCompatible = new VersionsFromProperty("tests.gradle_index_compat_versions").     List<Version> released = VersionUtils.allReleasedVersions().stream().filter(v -> v.onOrAfter(Version.CURRENT.minimumIndexCompatibilityVersion())).filter(Version::isRelease).collect(toList()).     List<String> releasedIndexCompatible = released.stream().filter(v -> !Version.CURRENT.equals(v)).map(Object::toString).collect(toList()).     assertEquals(releasedIndexCompatible, indexCompatible.released).     List<String> unreleasedIndexCompatible = new ArrayList<>(VersionUtils.allUnreleasedVersions().stream().filter(v -> !Version.CURRENT.equals(v)).filter(v -> v.onOrAfter(Version.CURRENT.minimumIndexCompatibilityVersion())).filter(v -> false == v.isAlpha()).map(Object::toString).collect(toCollection(LinkedHashSet::new))).     assertEquals(unreleasedIndexCompatible, indexCompatible.unreleased).     // Now the wire compatible versions     VersionsFromProperty wireCompatible = new VersionsFromProperty("tests.gradle_wire_compat_versions").     Version minimumCompatibleVersion = Version.CURRENT.minimumCompatibilityVersion().     List<String> releasedWireCompatible = released.stream().filter(v -> !Version.CURRENT.equals(v)).filter(v -> v.onOrAfter(minimumCompatibleVersion)).map(Object::toString).collect(toList()).     assertEquals(releasedWireCompatible, wireCompatible.released).     List<String> unreleasedWireCompatible = VersionUtils.allUnreleasedVersions().stream().filter(v -> !Version.CURRENT.equals(v)).filter(v -> v.onOrAfter(minimumCompatibleVersion)).map(Object::toString).collect(toList()).     assertEquals(unreleasedWireCompatible, wireCompatible.unreleased). }
