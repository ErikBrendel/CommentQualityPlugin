commented;modifiers;parameterAmount;loc;comment;code
false;public;4;9;;@Override public void executeHandshake(DiscoveryNode node, TcpChannel channel, ConnectionProfile profile, ActionListener<Version> listener) {     if (doHandshake) {         super.executeHandshake(node, channel, profile, listener).     } else {         listener.onResponse(version.minimumCompatibilityVersion()).     } }
false;public,static;5;22;;public static MockTransportService nioFromThreadPool(Settings settings, ThreadPool threadPool, final Version version, ClusterSettings clusterSettings, boolean doHandshake) {     NamedWriteableRegistry namedWriteableRegistry = new NamedWriteableRegistry(Collections.emptyList()).     NetworkService networkService = new NetworkService(Collections.emptyList()).     Transport transport = new MockNioTransport(settings, version, threadPool, networkService, new MockPageCacheRecycler(settings), namedWriteableRegistry, new NoneCircuitBreakerService()) {          @Override         public void executeHandshake(DiscoveryNode node, TcpChannel channel, ConnectionProfile profile, ActionListener<Version> listener) {             if (doHandshake) {                 super.executeHandshake(node, channel, profile, listener).             } else {                 listener.onResponse(version.minimumCompatibilityVersion()).             }         }     }.     MockTransportService mockTransportService = MockTransportService.createNewService(settings, transport, version, threadPool, clusterSettings, Collections.emptySet()).     mockTransportService.start().     return mockTransportService. }
false;protected;4;9;;@Override protected MockTransportService build(Settings settings, Version version, ClusterSettings clusterSettings, boolean doHandshake) {     settings = Settings.builder().put(settings).put(TransportSettings.PORT.getKey(), "0").build().     MockTransportService transportService = nioFromThreadPool(settings, threadPool, version, clusterSettings, doHandshake).     transportService.start().     return transportService. }
false;protected;0;4;;@Override protected int channelsPerNodeConnection() {     return 3. }
false;public;0;12;;public void testConnectException() throws UnknownHostException {     try {         serviceA.connectToNode(new DiscoveryNode("C", new TransportAddress(InetAddress.getByName("localhost"), 9876), emptyMap(), emptySet(), Version.CURRENT)).         fail("Expected ConnectTransportException").     } catch (ConnectTransportException e) {         assertThat(e.getMessage(), containsString("connect_exception")).         assertThat(e.getMessage(), containsString("[127.0.0.1:9876]")).         Throwable cause = e.getCause().         assertThat(cause, instanceOf(IOException.class)).     } }
false;public;0;19;;public void testBindUnavailableAddress() {     // this is on a lower level since it needs access to the TransportService before it's started     int port = serviceA.boundAddress().publishAddress().getPort().     Settings settings = Settings.builder().put(Node.NODE_NAME_SETTING.getKey(), "foobar").put(TransportSettings.PORT.getKey(), port).build().     ClusterSettings clusterSettings = new ClusterSettings(settings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS).     BindTransportException bindTransportException = expectThrows(BindTransportException.class, () -> {         MockTransportService transportService = nioFromThreadPool(settings, threadPool, Version.CURRENT, clusterSettings, true).         try {             transportService.start().         } finally {             transportService.stop().             transportService.close().         }     }).     assertEquals("Failed to bind to [" + port + "]", bindTransportException.getMessage()). }
