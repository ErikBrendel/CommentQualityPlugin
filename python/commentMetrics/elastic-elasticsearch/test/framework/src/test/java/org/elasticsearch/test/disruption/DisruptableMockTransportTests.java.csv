commented;modifiers;parameterAmount;loc;comment;code
false;;2;11;;ConnectionStatus getConnectionStatus(DiscoveryNode sender, DiscoveryNode destination) {     Tuple<DiscoveryNode, DiscoveryNode> link = Tuple.tuple(sender, destination).     if (disconnectedLinks.contains(link)) {         assert blackholedLinks.contains(link) == false.         return ConnectionStatus.DISCONNECTED.     }     if (blackholedLinks.contains(link)) {         return ConnectionStatus.BLACK_HOLE.     }     return ConnectionStatus.CONNECTED. }
false;protected;1;4;;@Override protected ConnectionStatus getConnectionStatus(DiscoveryNode destination) {     return DisruptableMockTransportTests.this.getConnectionStatus(getLocalNode(), destination). }
false;protected;1;4;;@Override protected Optional<DisruptableMockTransport> getDisruptableMockTransport(TransportAddress address) {     return transports.stream().filter(t -> t.getLocalNode().getAddress().equals(address)).findAny(). }
false;protected;1;4;;@Override protected void execute(Runnable runnable) {     deterministicTaskQueue.scheduleNow(runnable). }
false;protected;1;4;;@Override protected ConnectionStatus getConnectionStatus(DiscoveryNode destination) {     return DisruptableMockTransportTests.this.getConnectionStatus(getLocalNode(), destination). }
false;protected;1;4;;@Override protected Optional<DisruptableMockTransport> getDisruptableMockTransport(TransportAddress address) {     return transports.stream().filter(t -> t.getLocalNode().getAddress().equals(address)).findAny(). }
false;protected;1;4;;@Override protected void execute(Runnable runnable) {     deterministicTaskQueue.scheduleNow(runnable). }
false;public;0;61;;@Before public void initTransports() {     node1 = new DiscoveryNode("node1", buildNewFakeTransportAddress(), Version.CURRENT).     node2 = new DiscoveryNode("node2", buildNewFakeTransportAddress(), Version.CURRENT).     disconnectedLinks = new HashSet<>().     blackholedLinks = new HashSet<>().     List<DisruptableMockTransport> transports = new ArrayList<>().     deterministicTaskQueue = new DeterministicTaskQueue(Settings.builder().put(Node.NODE_NAME_SETTING.getKey(), "dummy").build(), random()).     transport1 = new DisruptableMockTransport(node1, logger) {          @Override         protected ConnectionStatus getConnectionStatus(DiscoveryNode destination) {             return DisruptableMockTransportTests.this.getConnectionStatus(getLocalNode(), destination).         }          @Override         protected Optional<DisruptableMockTransport> getDisruptableMockTransport(TransportAddress address) {             return transports.stream().filter(t -> t.getLocalNode().getAddress().equals(address)).findAny().         }          @Override         protected void execute(Runnable runnable) {             deterministicTaskQueue.scheduleNow(runnable).         }     }.     transport2 = new DisruptableMockTransport(node2, logger) {          @Override         protected ConnectionStatus getConnectionStatus(DiscoveryNode destination) {             return DisruptableMockTransportTests.this.getConnectionStatus(getLocalNode(), destination).         }          @Override         protected Optional<DisruptableMockTransport> getDisruptableMockTransport(TransportAddress address) {             return transports.stream().filter(t -> t.getLocalNode().getAddress().equals(address)).findAny().         }          @Override         protected void execute(Runnable runnable) {             deterministicTaskQueue.scheduleNow(runnable).         }     }.     transports.add(transport1).     transports.add(transport2).     service1 = transport1.createTransportService(Settings.EMPTY, deterministicTaskQueue.getThreadPool(), NOOP_TRANSPORT_INTERCEPTOR, a -> node1, null, Collections.emptySet()).     service2 = transport2.createTransportService(Settings.EMPTY, deterministicTaskQueue.getThreadPool(), NOOP_TRANSPORT_INTERCEPTOR, a -> node2, null, Collections.emptySet()).     service1.start().     service2.start().     service1.connectToNode(node2).     service2.connectToNode(node1). }
false;private;0;5;;private TransportRequestHandler<TransportRequest.Empty> requestHandlerShouldNotBeCalled() {     return (request, channel, task) -> {         throw new AssertionError("should not be called").     }. }
false;private;0;6;;private TransportRequestHandler<TransportRequest.Empty> requestHandlerRepliesNormally() {     return (request, channel, task) -> {         logger.debug("got a dummy request, replying normally...").         channel.sendResponse(TransportResponse.Empty.INSTANCE).     }. }
false;private;1;6;;private TransportRequestHandler<TransportRequest.Empty> requestHandlerRepliesExceptionally(Exception e) {     return (request, channel, task) -> {         logger.debug("got a dummy request, replying exceptionally...").         channel.sendResponse(e).     }. }
false;private;1;6;;private TransportRequestHandler<TransportRequest.Empty> requestHandlerCaptures(Consumer<TransportChannel> channelConsumer) {     return (request, channel, task) -> {         logger.debug("got a dummy request...").         channelConsumer.accept(channel).     }. }
false;public;1;4;;@Override public TransportResponse read(StreamInput in) {     throw new AssertionError("should not be called"). }
false;public;1;4;;@Override public void handleResponse(TransportResponse response) {     throw new AssertionError("should not be called"). }
false;public;1;4;;@Override public void handleException(TransportException exp) {     throw new AssertionError("should not be called"). }
false;public;0;4;;@Override public String executor() {     return ThreadPool.Names.SAME. }
false;private;0;23;;private TransportResponseHandler<TransportResponse> responseHandlerShouldNotBeCalled() {     return new TransportResponseHandler<TransportResponse>() {          @Override         public TransportResponse read(StreamInput in) {             throw new AssertionError("should not be called").         }          @Override         public void handleResponse(TransportResponse response) {             throw new AssertionError("should not be called").         }          @Override         public void handleException(TransportException exp) {             throw new AssertionError("should not be called").         }          @Override         public String executor() {             return ThreadPool.Names.SAME.         }     }. }
false;public;1;4;;@Override public TransportResponse read(StreamInput in) {     return Empty.INSTANCE. }
false;public;1;4;;@Override public void handleResponse(TransportResponse response) {     onCalled.run(). }
false;public;1;4;;@Override public void handleException(TransportException exp) {     throw new AssertionError("should not be called"). }
false;public;0;4;;@Override public String executor() {     return ThreadPool.Names.SAME. }
false;private;1;23;;private TransportResponseHandler<TransportResponse> responseHandlerShouldBeCalledNormally(Runnable onCalled) {     return new TransportResponseHandler<TransportResponse>() {          @Override         public TransportResponse read(StreamInput in) {             return Empty.INSTANCE.         }          @Override         public void handleResponse(TransportResponse response) {             onCalled.run().         }          @Override         public void handleException(TransportException exp) {             throw new AssertionError("should not be called").         }          @Override         public String executor() {             return ThreadPool.Names.SAME.         }     }. }
false;public;1;4;;@Override public TransportResponse read(StreamInput in) {     throw new AssertionError("should not be called"). }
false;public;1;4;;@Override public void handleResponse(TransportResponse response) {     throw new AssertionError("should not be called"). }
false;public;1;4;;@Override public void handleException(TransportException exp) {     onCalled.accept(exp). }
false;public;0;4;;@Override public String executor() {     return ThreadPool.Names.SAME. }
false;private;1;23;;private TransportResponseHandler<TransportResponse> responseHandlerShouldBeCalledExceptionally(Consumer<TransportException> onCalled) {     return new TransportResponseHandler<TransportResponse>() {          @Override         public TransportResponse read(StreamInput in) {             throw new AssertionError("should not be called").         }          @Override         public void handleResponse(TransportResponse response) {             throw new AssertionError("should not be called").         }          @Override         public void handleException(TransportException exp) {             onCalled.accept(exp).         }          @Override         public String executor() {             return ThreadPool.Names.SAME.         }     }. }
false;private;2;3;;private void registerRequestHandler(TransportService transportService, TransportRequestHandler<TransportRequest.Empty> handler) {     transportService.registerRequestHandler("internal:dummy", () -> TransportRequest.Empty.INSTANCE, ThreadPool.Names.GENERIC, handler). }
false;private;3;4;;private void send(TransportService transportService, DiscoveryNode destinationNode, TransportResponseHandler<TransportResponse> responseHandler) {     transportService.sendRequest(destinationNode, "internal:dummy", TransportRequest.Empty.INSTANCE, responseHandler). }
false;public;0;8;;public void testSuccessfulResponse() {     registerRequestHandler(service1, requestHandlerShouldNotBeCalled()).     registerRequestHandler(service2, requestHandlerRepliesNormally()).     AtomicBoolean responseHandlerCalled = new AtomicBoolean().     send(service1, node2, responseHandlerShouldBeCalledNormally(() -> responseHandlerCalled.set(true))).     deterministicTaskQueue.runAllRunnableTasks().     assertTrue(responseHandlerCalled.get()). }
false;public;0;11;;public void testExceptionalResponse() {     registerRequestHandler(service1, requestHandlerShouldNotBeCalled()).     Exception e = new Exception("dummy exception").     registerRequestHandler(service2, requestHandlerRepliesExceptionally(e)).     AtomicReference<TransportException> responseHandlerException = new AtomicReference<>().     send(service1, node2, responseHandlerShouldBeCalledExceptionally(responseHandlerException::set)).     deterministicTaskQueue.runAllRunnableTasks().     assertNotNull(responseHandlerException.get()).     assertNotNull(responseHandlerException.get().getCause()).     assertThat(responseHandlerException.get().getCause().getMessage(), containsString("dummy exception")). }
false;public;0;10;;public void testDisconnectedOnRequest() {     registerRequestHandler(service1, requestHandlerShouldNotBeCalled()).     registerRequestHandler(service2, requestHandlerShouldNotBeCalled()).     disconnectedLinks.add(Tuple.tuple(node1, node2)).     AtomicReference<TransportException> responseHandlerException = new AtomicReference<>().     send(service1, node2, responseHandlerShouldBeCalledExceptionally(responseHandlerException::set)).     deterministicTaskQueue.runAllRunnableTasks().     assertNotNull(responseHandlerException.get()).     assertThat(responseHandlerException.get().getMessage(), containsString("disconnected")). }
false;public;0;7;;public void testUnavailableOnRequest() {     registerRequestHandler(service1, requestHandlerShouldNotBeCalled()).     registerRequestHandler(service2, requestHandlerShouldNotBeCalled()).     blackholedLinks.add(Tuple.tuple(node1, node2)).     send(service1, node2, responseHandlerShouldNotBeCalled()).     deterministicTaskQueue.runAllRunnableTasks(). }
false;public;0;15;;public void testDisconnectedOnSuccessfulResponse() throws IOException {     registerRequestHandler(service1, requestHandlerShouldNotBeCalled()).     AtomicReference<TransportChannel> responseHandlerChannel = new AtomicReference<>().     registerRequestHandler(service2, requestHandlerCaptures(responseHandlerChannel::set)).     AtomicReference<TransportException> responseHandlerException = new AtomicReference<>().     send(service1, node2, responseHandlerShouldNotBeCalled()).     deterministicTaskQueue.runAllRunnableTasks().     assertNull(responseHandlerException.get()).     assertNotNull(responseHandlerChannel.get()).     disconnectedLinks.add(Tuple.tuple(node2, node1)).     responseHandlerChannel.get().sendResponse(TransportResponse.Empty.INSTANCE).     deterministicTaskQueue.runAllRunnableTasks(). }
false;public;0;15;;public void testDisconnectedOnExceptionalResponse() throws IOException {     registerRequestHandler(service1, requestHandlerShouldNotBeCalled()).     AtomicReference<TransportChannel> responseHandlerChannel = new AtomicReference<>().     registerRequestHandler(service2, requestHandlerCaptures(responseHandlerChannel::set)).     AtomicReference<TransportException> responseHandlerException = new AtomicReference<>().     send(service1, node2, responseHandlerShouldNotBeCalled()).     deterministicTaskQueue.runAllRunnableTasks().     assertNull(responseHandlerException.get()).     assertNotNull(responseHandlerChannel.get()).     disconnectedLinks.add(Tuple.tuple(node2, node1)).     responseHandlerChannel.get().sendResponse(new Exception()).     deterministicTaskQueue.runAllRunnableTasks(). }
false;public;0;15;;public void testUnavailableOnSuccessfulResponse() throws IOException {     registerRequestHandler(service1, requestHandlerShouldNotBeCalled()).     AtomicReference<TransportChannel> responseHandlerChannel = new AtomicReference<>().     registerRequestHandler(service2, requestHandlerCaptures(responseHandlerChannel::set)).     AtomicReference<TransportException> responseHandlerException = new AtomicReference<>().     send(service1, node2, responseHandlerShouldNotBeCalled()).     deterministicTaskQueue.runAllRunnableTasks().     assertNull(responseHandlerException.get()).     assertNotNull(responseHandlerChannel.get()).     blackholedLinks.add(Tuple.tuple(node2, node1)).     responseHandlerChannel.get().sendResponse(TransportResponse.Empty.INSTANCE).     deterministicTaskQueue.runAllRunnableTasks(). }
false;public;0;15;;public void testUnavailableOnExceptionalResponse() throws IOException {     registerRequestHandler(service1, requestHandlerShouldNotBeCalled()).     AtomicReference<TransportChannel> responseHandlerChannel = new AtomicReference<>().     registerRequestHandler(service2, requestHandlerCaptures(responseHandlerChannel::set)).     AtomicReference<TransportException> responseHandlerException = new AtomicReference<>().     send(service1, node2, responseHandlerShouldNotBeCalled()).     deterministicTaskQueue.runAllRunnableTasks().     assertNull(responseHandlerException.get()).     assertNotNull(responseHandlerChannel.get()).     blackholedLinks.add(Tuple.tuple(node2, node1)).     responseHandlerChannel.get().sendResponse(new Exception()).     deterministicTaskQueue.runAllRunnableTasks(). }
