commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;public void testParseIsTrue() throws Exception {     parser = createParser(YamlXContent.yamlXContent, "get.fields._timestamp").     IsTrueAssertion trueAssertion = IsTrueAssertion.parse(parser).     assertThat(trueAssertion, notNullValue()).     assertThat(trueAssertion.getField(), equalTo("get.fields._timestamp")). }
false;public;0;10;;public void testParseIsFalse() throws Exception {     parser = createParser(YamlXContent.yamlXContent, "docs.1._source").     IsFalseAssertion falseAssertion = IsFalseAssertion.parse(parser).     assertThat(falseAssertion, notNullValue()).     assertThat(falseAssertion.getField(), equalTo("docs.1._source")). }
false;public;0;11;;public void testParseGreaterThan() throws Exception {     parser = createParser(YamlXContent.yamlXContent, "{ field: 3}").     GreaterThanAssertion greaterThanAssertion = GreaterThanAssertion.parse(parser).     assertThat(greaterThanAssertion, notNullValue()).     assertThat(greaterThanAssertion.getField(), equalTo("field")).     assertThat(greaterThanAssertion.getExpectedValue(), instanceOf(Integer.class)).     assertThat((Integer) greaterThanAssertion.getExpectedValue(), equalTo(3)). }
false;public;0;11;;public void testParseLessThan() throws Exception {     parser = createParser(YamlXContent.yamlXContent, "{ field: 3}").     LessThanAssertion lessThanAssertion = LessThanAssertion.parse(parser).     assertThat(lessThanAssertion, notNullValue()).     assertThat(lessThanAssertion.getField(), equalTo("field")).     assertThat(lessThanAssertion.getExpectedValue(), instanceOf(Integer.class)).     assertThat((Integer) lessThanAssertion.getExpectedValue(), equalTo(3)). }
false;public;0;11;;public void testParseLength() throws Exception {     parser = createParser(YamlXContent.yamlXContent, "{ _id: 22}").     LengthAssertion lengthAssertion = LengthAssertion.parse(parser).     assertThat(lengthAssertion, notNullValue()).     assertThat(lengthAssertion.getField(), equalTo("_id")).     assertThat(lengthAssertion.getExpectedValue(), instanceOf(Integer.class)).     assertThat((Integer) lengthAssertion.getExpectedValue(), equalTo(22)). }
false;public;0;12;;public void testParseMatchSimpleIntegerValue() throws Exception {     parser = createParser(YamlXContent.yamlXContent, "{ field: 10 }").     MatchAssertion matchAssertion = MatchAssertion.parse(parser).     assertThat(matchAssertion, notNullValue()).     assertThat(matchAssertion.getField(), equalTo("field")).     assertThat(matchAssertion.getExpectedValue(), instanceOf(Integer.class)).     assertThat((Integer) matchAssertion.getExpectedValue(), equalTo(10)). }
false;public;0;12;;public void testParseMatchSimpleStringValue() throws Exception {     parser = createParser(YamlXContent.yamlXContent, "{ foo: bar }").     MatchAssertion matchAssertion = MatchAssertion.parse(parser).     assertThat(matchAssertion, notNullValue()).     assertThat(matchAssertion.getField(), equalTo("foo")).     assertThat(matchAssertion.getExpectedValue(), instanceOf(String.class)).     assertThat(matchAssertion.getExpectedValue().toString(), equalTo("bar")). }
false;public;0;15;;public void testParseMatchArray() throws Exception {     parser = createParser(YamlXContent.yamlXContent, "{'matches': ['test_percolator_1', 'test_percolator_2']}").     MatchAssertion matchAssertion = MatchAssertion.parse(parser).     assertThat(matchAssertion, notNullValue()).     assertThat(matchAssertion.getField(), equalTo("matches")).     assertThat(matchAssertion.getExpectedValue(), instanceOf(List.class)).     List<?> strings = (List<?>) matchAssertion.getExpectedValue().     assertThat(strings.size(), equalTo(2)).     assertThat(strings.get(0).toString(), equalTo("test_percolator_1")).     assertThat(strings.get(1).toString(), equalTo("test_percolator_2")). }
false;public;0;15;;@SuppressWarnings("unchecked") public void testParseContains() throws Exception {     parser = createParser(YamlXContent.yamlXContent, "{testKey: { someKey: someValue } }").     ContainsAssertion containsAssertion = ContainsAssertion.parse(parser).     assertThat(containsAssertion, notNullValue()).     assertThat(containsAssertion.getField(), equalTo("testKey")).     assertThat(containsAssertion.getExpectedValue(), instanceOf(Map.class)).     assertThat(((Map<String, String>) containsAssertion.getExpectedValue()).get("someKey"), equalTo("someValue")). }
false;public;0;20;;@SuppressWarnings("unchecked") public void testParseMatchSourceValues() throws Exception {     parser = createParser(YamlXContent.yamlXContent, "{ _source: { responses.0.hits.total: 3, foo: bar  }}").     MatchAssertion matchAssertion = MatchAssertion.parse(parser).     assertThat(matchAssertion, notNullValue()).     assertThat(matchAssertion.getField(), equalTo("_source")).     assertThat(matchAssertion.getExpectedValue(), instanceOf(Map.class)).     Map<String, Object> expectedValue = (Map<String, Object>) matchAssertion.getExpectedValue().     assertThat(expectedValue.size(), equalTo(2)).     Object o = expectedValue.get("responses.0.hits.total").     assertThat(o, instanceOf(Integer.class)).     assertThat((Integer) o, equalTo(3)).     o = expectedValue.get("foo").     assertThat(o, instanceOf(String.class)).     assertThat(o.toString(), equalTo("bar")). }
