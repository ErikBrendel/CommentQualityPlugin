commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;public void testSameVersionCluster() throws IOException {     Set<Version> nodeVersions = new HashSet<>().     nodeVersions.add(Version.CURRENT).     WarningsHandler handler = expectVersionSpecificWarnings(nodeVersions, (v) -> {         v.current("expectedCurrent1").     }).     assertFalse(handler.warningsShouldFailRequest(Arrays.asList("expectedCurrent1"))).     assertTrue(handler.warningsShouldFailRequest(Arrays.asList("expectedCurrent1", "unexpected"))).     assertTrue(handler.warningsShouldFailRequest(Collections.emptyList())). }
false;public;0;15;;public void testMixedVersionCluster() throws IOException {     Set<Version> nodeVersions = new HashSet<>().     nodeVersions.add(Version.CURRENT).     nodeVersions.add(Version.CURRENT.minimumIndexCompatibilityVersion()).     WarningsHandler handler = expectVersionSpecificWarnings(nodeVersions, (v) -> {         v.current("expectedCurrent1").         v.compatible("Expected legacy warning").     }).     assertFalse(handler.warningsShouldFailRequest(Arrays.asList("expectedCurrent1"))).     assertFalse(handler.warningsShouldFailRequest(Arrays.asList("Expected legacy warning"))).     assertFalse(handler.warningsShouldFailRequest(Arrays.asList("expectedCurrent1", "Expected legacy warning"))).     assertTrue(handler.warningsShouldFailRequest(Arrays.asList("expectedCurrent1", "Unexpected legacy warning"))).     assertTrue(handler.warningsShouldFailRequest(Arrays.asList("Unexpected legacy warning"))).     assertFalse(handler.warningsShouldFailRequest(Collections.emptyList())). }
false;private,static;2;7;;private static WarningsHandler expectVersionSpecificWarnings(Set<Version> nodeVersions, Consumer<VersionSensitiveWarningsHandler> expectationsSetter) {     // Based on EsRestTestCase.expectVersionSpecificWarnings helper method but without ESRestTestCase dependency     VersionSensitiveWarningsHandler warningsHandler = new VersionSensitiveWarningsHandler(nodeVersions).     expectationsSetter.accept(warningsHandler).     return warningsHandler. }
