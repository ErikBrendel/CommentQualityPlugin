commented;modifiers;parameterAmount;loc;comment;code
false;;5;6;;@Override ClientYamlTestResponse callApiInternal(String apiName, Map<String, String> params, HttpEntity entity, Map<String, String> headers, NodeSelector nodeSelector) {     headersRef.set(headers).     return null. }
false;public;0;4;;@Override public Version esVersion() {     return version. }
false;public;0;32;;public void testHeadersSupportStashedValueReplacement() throws IOException {     final AtomicReference<Map<String, String>> headersRef = new AtomicReference<>().     final Version version = VersionUtils.randomVersion(random()).     final ClientYamlTestExecutionContext context = new ClientYamlTestExecutionContext(null, randomBoolean()) {          @Override         ClientYamlTestResponse callApiInternal(String apiName, Map<String, String> params, HttpEntity entity, Map<String, String> headers, NodeSelector nodeSelector) {             headersRef.set(headers).             return null.         }          @Override         public Version esVersion() {             return version.         }     }.     final Map<String, String> headers = new HashMap<>().     headers.put("foo", "$bar").     headers.put("foo1", "baz ${c}").     context.stash().stashValue("bar", "foo2").     context.stash().stashValue("c", "bar1").     assertNull(headersRef.get()).     context.callApi("test", Collections.emptyMap(), Collections.emptyList(), headers).     assertNotNull(headersRef.get()).     assertNotEquals(headers, headersRef.get()).     assertEquals("foo2", headersRef.get().get("foo")).     assertEquals("baz bar1", headersRef.get().get("foo1")). }
