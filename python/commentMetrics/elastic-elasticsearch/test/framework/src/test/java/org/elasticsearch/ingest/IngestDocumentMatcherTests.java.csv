commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public void testDifferentMapData() {     Map<String, Object> sourceAndMetadata1 = new HashMap<>().     sourceAndMetadata1.put("foo", "bar").     IngestDocument document1 = new IngestDocument(sourceAndMetadata1, new HashMap<>()).     IngestDocument document2 = new IngestDocument(new HashMap<>(), new HashMap<>()).     assertThrowsOnComparision(document1, document2). }
false;public;0;8;;public void testDifferentLengthListData() {     String rootKey = "foo".     IngestDocument document1 = new IngestDocument(Collections.singletonMap(rootKey, Arrays.asList("bar", "baz")), new HashMap<>()).     IngestDocument document2 = new IngestDocument(Collections.singletonMap(rootKey, Collections.emptyList()), new HashMap<>()).     assertThrowsOnComparision(document1, document2). }
false;public;0;8;;public void testDifferentNestedListFieldData() {     String rootKey = "foo".     IngestDocument document1 = new IngestDocument(Collections.singletonMap(rootKey, Arrays.asList("bar", "baz")), new HashMap<>()).     IngestDocument document2 = new IngestDocument(Collections.singletonMap(rootKey, Arrays.asList("bar", "blub")), new HashMap<>()).     assertThrowsOnComparision(document1, document2). }
false;public;0;8;;public void testDifferentNestedMapFieldData() {     String rootKey = "foo".     IngestDocument document1 = new IngestDocument(Collections.singletonMap(rootKey, Collections.singletonMap("bar", "baz")), new HashMap<>()).     IngestDocument document2 = new IngestDocument(Collections.singletonMap(rootKey, Collections.singletonMap("bar", "blub")), new HashMap<>()).     assertThrowsOnComparision(document1, document2). }
false;public;0;9;;public void testOnTypeConflict() {     String rootKey = "foo".     IngestDocument document1 = new IngestDocument(Collections.singletonMap(rootKey, Collections.singletonList("baz")), new HashMap<>()).     IngestDocument document2 = new IngestDocument(Collections.singletonMap(rootKey, Collections.singletonMap("blub", "blab")), new HashMap<>()).     assertThrowsOnComparision(document1, document2). }
false;private,static;2;4;;private static void assertThrowsOnComparision(IngestDocument document1, IngestDocument document2) {     expectThrows(AssertionError.class, () -> assertIngestDocument(document1, document2)).     expectThrows(AssertionError.class, () -> assertIngestDocument(document2, document1)). }
