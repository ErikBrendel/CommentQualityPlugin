commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;public void testDuplicateMethods() throws Exception {     parseAndExpectFailure("{\n" + "  \"ping\": {" + "    \"documentation\": \"http://www.elasticsearch.org/guide/\"," + "    \"methods\": [\"PUT\", \"PUT\"]," + "    \"url\": {" + "      \"path\": \"/\"," + "      \"paths\": [\"/\"]," + "      \"parts\": {" + "      }," + "      \"params\": {" + "        \"type\" : \"boolean\",\n" + "        \"description\" : \"Whether specified concrete indices should be ignored when unavailable (missing or closed)\"" + "      }" + "    }," + "    \"body\": null" + "  }" + "}", "ping.json", "Found duplicate method [PUT]"). }
false;public;0;19;;public void testDuplicatePaths() throws Exception {     parseAndExpectFailure("{\n" + "  \"ping\": {" + "    \"documentation\": \"http://www.elasticsearch.org/guide/\"," + "    \"methods\": [\"PUT\"]," + "    \"url\": {" + "      \"path\": \"/pingone\"," + "      \"paths\": [\"/pingone\", \"/pingtwo\", \"/pingtwo\"]," + "      \"parts\": {" + "      }," + "      \"params\": {" + "        \"type\" : \"boolean\",\n" + "        \"description\" : \"Whether specified concrete indices should be ignored when unavailable (missing or closed)\"" + "      }" + "    }," + "    \"body\": null" + "  }" + "}", "ping.json", "Found duplicate path [/pingtwo]"). }
false;public;0;3;;public void testBrokenSpecShouldThrowUsefulExceptionWhenParsingFailsOnParams() throws Exception {     parseAndExpectFailure(BROKEN_SPEC_PARAMS, "ping.json", "Expected params field in rest api definition to contain an object"). }
false;public;0;3;;public void testBrokenSpecShouldThrowUsefulExceptionWhenParsingFailsOnParts() throws Exception {     parseAndExpectFailure(BROKEN_SPEC_PARTS, "ping.json", "Expected parts field in rest api definition to contain an object"). }
false;public;0;3;;public void testSpecNameMatchesFilename() throws Exception {     parseAndExpectFailure("{\"ping\":{}}", "not_matching.json", "API [ping] should have the same name as its file [not_matching.json]"). }
false;private;3;7;;private void parseAndExpectFailure(String brokenJson, String location, String expectedErrorMessage) throws Exception {     XContentParser parser = createParser(YamlXContent.yamlXContent, brokenJson).     ClientYamlSuiteRestApiParser restApiParser = new ClientYamlSuiteRestApiParser().     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> restApiParser.parse(location, parser)).     assertThat(e.getMessage(), containsString(expectedErrorMessage)). }
