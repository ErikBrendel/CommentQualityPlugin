commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public void testTestRunStartedSupportsClassInDefaultPackage() throws Exception {     LoggingListener loggingListener = new LoggingListener().     Description description = Description.createTestDescription(Class.forName("Dummy"), "dummy").     // Will throw an exception without the check for testClassPackage != null in testRunStarted     loggingListener.testRunStarted(description). }
false;public;0;31;;public void testCustomLevelPerMethod() throws Exception {     LoggingListener loggingListener = new LoggingListener().     Description suiteDescription = Description.createSuiteDescription(TestClass.class).     Logger xyzLogger = LogManager.getLogger("xyz").     Logger abcLogger = LogManager.getLogger("abc").     final Level level = LogManager.getRootLogger().getLevel().     assertThat(xyzLogger.getLevel(), equalTo(level)).     assertThat(abcLogger.getLevel(), equalTo(level)).     loggingListener.testRunStarted(suiteDescription).     assertThat(xyzLogger.getLevel(), equalTo(level)).     assertThat(abcLogger.getLevel(), equalTo(level)).     Method method = TestClass.class.getMethod("annotatedTestMethod").     TestLogging annotation = method.getAnnotation(TestLogging.class).     Description testDescription = Description.createTestDescription(LoggingListenerTests.class, "annotatedTestMethod", annotation).     loggingListener.testStarted(testDescription).     assertThat(xyzLogger.getLevel(), equalTo(Level.TRACE)).     assertThat(abcLogger.getLevel(), equalTo(level)).     loggingListener.testFinished(testDescription).     assertThat(xyzLogger.getLevel(), equalTo(level)).     assertThat(abcLogger.getLevel(), equalTo(level)).     loggingListener.testRunFinished(new Result()).     assertThat(xyzLogger.getLevel(), equalTo(level)).     assertThat(abcLogger.getLevel(), equalTo(level)). }
false;public;0;44;;public void testCustomLevelPerClass() throws Exception {     LoggingListener loggingListener = new LoggingListener().     Description suiteDescription = Description.createSuiteDescription(AnnotatedTestClass.class).     Logger abcLogger = LogManager.getLogger("abc").     Logger xyzLogger = LogManager.getLogger("xyz").     // we include foo and foo.bar to maintain that logging levels are applied from the top of the hierarchy down. this ensures that     // setting the logging level for a parent logger and a child logger applies the parent level first and then the child as otherwise     // setting the parent level would overwrite the child level     Logger fooLogger = LogManager.getLogger("foo").     Logger fooBarLogger = LogManager.getLogger("foo.bar").     final Level level = LogManager.getRootLogger().getLevel().     assertThat(xyzLogger.getLevel(), equalTo(level)).     assertThat(abcLogger.getLevel(), equalTo(level)).     assertThat(fooLogger.getLevel(), equalTo(level)).     assertThat(fooBarLogger.getLevel(), equalTo(level)).     loggingListener.testRunStarted(suiteDescription).     assertThat(xyzLogger.getLevel(), equalTo(level)).     assertThat(abcLogger.getLevel(), equalTo(Level.WARN)).     assertThat(fooLogger.getLevel(), equalTo(Level.WARN)).     assertThat(fooBarLogger.getLevel(), equalTo(Level.ERROR)).     Description testDescription = Description.createTestDescription(LoggingListenerTests.class, "test").     loggingListener.testStarted(testDescription).     assertThat(xyzLogger.getLevel(), equalTo(level)).     assertThat(abcLogger.getLevel(), equalTo(Level.WARN)).     assertThat(fooLogger.getLevel(), equalTo(Level.WARN)).     assertThat(fooBarLogger.getLevel(), equalTo(Level.ERROR)).     loggingListener.testFinished(testDescription).     assertThat(xyzLogger.getLevel(), equalTo(level)).     assertThat(abcLogger.getLevel(), equalTo(Level.WARN)).     assertThat(fooLogger.getLevel(), equalTo(Level.WARN)).     assertThat(fooBarLogger.getLevel(), equalTo(Level.ERROR)).     loggingListener.testRunFinished(new Result()).     assertThat(xyzLogger.getLevel(), equalTo(level)).     assertThat(abcLogger.getLevel(), equalTo(level)).     assertThat(fooLogger.getLevel(), equalTo(level)).     assertThat(fooBarLogger.getLevel(), equalTo(level)). }
false;public;0;42;;public void testCustomLevelPerClassAndPerMethod() throws Exception {     LoggingListener loggingListener = new LoggingListener().     Description suiteDescription = Description.createSuiteDescription(AnnotatedTestClass.class).     Logger abcLogger = LogManager.getLogger("abc").     Logger xyzLogger = LogManager.getLogger("xyz").     final Level level = LogManager.getRootLogger().getLevel().     assertThat(xyzLogger.getLevel(), equalTo(level)).     assertThat(abcLogger.getLevel(), equalTo(level)).     loggingListener.testRunStarted(suiteDescription).     assertThat(xyzLogger.getLevel(), equalTo(level)).     assertThat(abcLogger.getLevel(), equalTo(Level.WARN)).     Method method = TestClass.class.getMethod("annotatedTestMethod").     TestLogging annotation = method.getAnnotation(TestLogging.class).     Description testDescription = Description.createTestDescription(LoggingListenerTests.class, "annotatedTestMethod", annotation).     loggingListener.testStarted(testDescription).     assertThat(xyzLogger.getLevel(), equalTo(Level.TRACE)).     assertThat(abcLogger.getLevel(), equalTo(Level.WARN)).     loggingListener.testFinished(testDescription).     assertThat(xyzLogger.getLevel(), equalTo(level)).     assertThat(abcLogger.getLevel(), equalTo(Level.WARN)).     Method method2 = TestClass.class.getMethod("annotatedTestMethod2").     TestLogging annotation2 = method2.getAnnotation(TestLogging.class).     Description testDescription2 = Description.createTestDescription(LoggingListenerTests.class, "annotatedTestMethod2", annotation2).     loggingListener.testStarted(testDescription2).     assertThat(xyzLogger.getLevel(), equalTo(Level.DEBUG)).     assertThat(abcLogger.getLevel(), equalTo(Level.TRACE)).     loggingListener.testFinished(testDescription2).     assertThat(xyzLogger.getLevel(), equalTo(level)).     assertThat(abcLogger.getLevel(), equalTo(Level.WARN)).     loggingListener.testRunFinished(new Result()).     assertThat(xyzLogger.getLevel(), equalTo(level)).     assertThat(abcLogger.getLevel(), equalTo(level)). }
false;public;0;9;;public void testInvalidClassTestLoggingAnnotation() throws Exception {     final LoggingListener loggingListener = new LoggingListener().     final Description suiteDescription = Description.createSuiteDescription(InvalidClass.class).     final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> loggingListener.testRunStarted(suiteDescription)).     assertThat(e.getMessage(), equalTo("invalid test logging annotation [abc]")). }
false;public;0;14;;public void testInvalidMethodTestLoggingAnnotation() throws Exception {     final LoggingListener loggingListener = new LoggingListener().     final Description suiteDescription = Description.createSuiteDescription(InvalidMethod.class).     loggingListener.testRunStarted(suiteDescription).     final Method method = InvalidMethod.class.getMethod("invalidMethod").     final TestLogging annotation = method.getAnnotation(TestLogging.class).     Description testDescription = Description.createTestDescription(InvalidMethod.class, "invalidMethod", annotation).     final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> loggingListener.testStarted(testDescription)).     assertThat(e.getMessage(), equalTo("invalid test logging annotation [abc:INFO:WARN]")). }
false;public;0;5;;@SuppressWarnings("unused") @TestLogging("xyz:TRACE,foo:WARN,foo.bar:ERROR") public void annotatedTestMethod() { }
false;public;0;5;;@SuppressWarnings("unused") @TestLogging("abc:TRACE,xyz:DEBUG") public void annotatedTestMethod2() { }
false;public;0;5;;@SuppressWarnings("unused") @TestLogging("abc:INFO:WARN") public void invalidMethod() { }
