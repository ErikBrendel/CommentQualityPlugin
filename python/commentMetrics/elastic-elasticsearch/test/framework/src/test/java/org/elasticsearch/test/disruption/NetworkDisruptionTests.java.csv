commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;public void testTwoPartitions() {     Set<String> partition1 = generateRandomStringSet(1, 10).     Set<String> partition2 = generateRandomStringSet(1, 10).     TwoPartitions topology = new TwoPartitions(partition1, partition2).     checkTwoPartitions(topology, partition1, partition2). }
false;public;0;6;;public void testRandomTwoPartitions() {     TwoPartitions topology = TwoPartitions.random(random(), generateRandomStringSet(2, 20)).     Set<String> partition1 = topology.getNodesSideOne().     Set<String> partition2 = topology.getNodesSideTwo().     checkTwoPartitions(topology, partition1, partition2). }
false;private;3;13;;private void checkTwoPartitions(TwoPartitions topology, Set<String> partition1, Set<String> partition2) {     for (int i = 0. i < 10. i++) {         assertTrue(topology.disrupt(randomFrom(partition1), randomFrom(partition2))).         assertTrue(topology.disrupt(randomFrom(partition2), randomFrom(partition1))).         assertFalse(topology.disrupt(randomFrom(partition1), randomFrom(partition1))).         assertFalse(topology.disrupt(randomFrom(partition2), randomFrom(partition2))).         assertFalse(topology.disrupt(randomAlphaOfLength(10), randomFrom(partition1))).         assertFalse(topology.disrupt(randomAlphaOfLength(10), randomFrom(partition2))).         assertFalse(topology.disrupt(randomFrom(partition1), randomAlphaOfLength(10))).         assertFalse(topology.disrupt(randomFrom(partition2), randomAlphaOfLength(10))).     }     assertTrue(topology.getMajoritySide().size() >= topology.getMinoritySide().size()). }
false;public;0;14;;public void testIsolateAll() {     Set<String> nodes = generateRandomStringSet(1, 10).     NetworkDisruption.DisruptedLinks topology = new NetworkDisruption.IsolateAllNodes(nodes).     for (int i = 0. i < 10. i++) {         final String node1 = randomFrom(nodes).         final String node2 = randomFrom(nodes).         if (node1.equals(node2)) {             continue.         }         assertTrue(topology.nodes().contains(node1)).         assertTrue(topology.nodes().contains(node2)).         assertTrue(topology.disrupt(node1, node2)).     } }
false;public;0;7;;public void testBridge() {     Set<String> partition1 = generateRandomStringSet(1, 10).     Set<String> partition2 = generateRandomStringSet(1, 10).     String bridgeNode = randomAlphaOfLength(10).     Bridge topology = new Bridge(bridgeNode, partition1, partition2).     checkBridge(topology, bridgeNode, partition1, partition2). }
false;public;0;7;;public void testRandomBridge() {     Bridge topology = Bridge.random(random(), generateRandomStringSet(3, 20)).     String bridgeNode = topology.getBridgeNode().     Set<String> partition1 = topology.getNodesSideOne().     Set<String> partition2 = topology.getNodesSideTwo().     checkBridge(topology, bridgeNode, partition1, partition2). }
false;private;4;18;;private void checkBridge(Bridge topology, String bridgeNode, Set<String> partition1, Set<String> partition2) {     for (int i = 0. i < 10. i++) {         assertTrue(topology.disrupt(randomFrom(partition1), randomFrom(partition2))).         assertTrue(topology.disrupt(randomFrom(partition2), randomFrom(partition1))).         assertFalse(topology.disrupt(randomFrom(partition1), randomFrom(partition1))).         assertFalse(topology.disrupt(randomFrom(partition1), bridgeNode)).         assertFalse(topology.disrupt(bridgeNode, randomFrom(partition1))).         assertFalse(topology.disrupt(randomFrom(partition2), randomFrom(partition2))).         assertFalse(topology.disrupt(randomFrom(partition2), bridgeNode)).         assertFalse(topology.disrupt(bridgeNode, randomFrom(partition2))).         assertFalse(topology.disrupt(randomAlphaOfLength(10), randomFrom(partition1))).         assertFalse(topology.disrupt(randomAlphaOfLength(10), randomFrom(partition2))).         assertFalse(topology.disrupt(randomAlphaOfLength(10), bridgeNode)).         assertFalse(topology.disrupt(randomFrom(partition1), randomAlphaOfLength(10))).         assertFalse(topology.disrupt(randomFrom(partition2), randomAlphaOfLength(10))).         assertFalse(topology.disrupt(bridgeNode, randomAlphaOfLength(10))).     } }
false;private;2;8;;private Set<String> generateRandomStringSet(int minSize, int maxSize) {     assert maxSize >= minSize.     Set<String> result = new HashSet<>().     for (int i = 0. i < minSize + randomInt(maxSize - minSize). i++) {         result.add(randomAlphaOfLength(10)).     }     return result. }
