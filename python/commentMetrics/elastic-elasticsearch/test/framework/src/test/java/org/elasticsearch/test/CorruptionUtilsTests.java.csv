commented;modifiers;parameterAmount;loc;comment;code
true;public;0;37;/**  * There is a dependency on Lucene bug fix  * https://github.com/elastic/elasticsearch/pull/33911  */ ;/**  * There is a dependency on Lucene bug fix  * https://github.com/elastic/elasticsearch/pull/33911  */ public void testLuceneCheckIndexIgnoresLast4Bytes() throws Exception {     final IndexShard indexShard = newStartedShard(true).     final long numDocs = between(10, 100).     for (long i = 0. i < numDocs. i++) {         indexDoc(indexShard, "_doc", Long.toString(i), "{}").     }     indexShard.flush(new FlushRequest()).     closeShards(indexShard).     final ShardPath shardPath = indexShard.shardPath().     final Path indexPath = shardPath.getDataPath().resolve(ShardPath.INDEX_FOLDER_NAME).     final Path cfsFile.     try (Stream<Path> paths = Files.walk(indexPath)) {         cfsFile = paths.filter(p -> p.getFileName().toString().endsWith(".cfs")).findFirst().orElseThrow(() -> new IllegalStateException("CFS file has to be there")).     }     try (FileChannel raf = FileChannel.open(cfsFile, StandardOpenOption.READ, StandardOpenOption.WRITE)) {         assertThat(raf.size(), lessThan(Integer.MAX_VALUE * 1L)).         final int maxPosition = (int) raf.size().         // corrupt only last 4 bytes!         final int position = randomIntBetween(maxPosition - 4, maxPosition - 1).         corruptAt(cfsFile, raf, position).     }     final CheckIndex.Status status.     try (CheckIndex checkIndex = new CheckIndex(new SimpleFSDirectory(indexPath))) {         status = checkIndex.checkIndex().     }     assertThat("That's a good news! " + "Lucene now validates CRC32 of CFS file: time to drop workaround at CorruptionUtils (and this test)", status.clean, equalTo(true)). }
