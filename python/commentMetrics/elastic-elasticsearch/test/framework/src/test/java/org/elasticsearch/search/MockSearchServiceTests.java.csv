commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public SearchShardTarget shardTarget() {     return new SearchShardTarget("node", new ShardId("idx", "ignored", 0), null, OriginalIndices.NONE). }
false;public;0;4;;@Override public SearchType searchType() {     return SearchType.DEFAULT. }
false;public;0;4;;@Override public Query query() {     return Queries.newMatchAllQuery(). }
false;public;0;35;;public void testAssertNoInFlightContext() {     final long nowInMillis = randomNonNegativeLong().     SearchContext s = new TestSearchContext(new QueryShardContext(0, new IndexSettings(EMPTY_INDEX_METADATA, Settings.EMPTY), null, null, null, null, null, xContentRegistry(), writableRegistry(), null, null, () -> nowInMillis, null)) {          @Override         public SearchShardTarget shardTarget() {             return new SearchShardTarget("node", new ShardId("idx", "ignored", 0), null, OriginalIndices.NONE).         }          @Override         public SearchType searchType() {             return SearchType.DEFAULT.         }          @Override         public Query query() {             return Queries.newMatchAllQuery().         }     }.     MockSearchService.addActiveContext(s).     try {         Throwable e = expectThrows(AssertionError.class, () -> MockSearchService.assertNoInFlightContext()).         assertEquals("There are still [1] in-flight contexts. The first one's creation site is listed as the cause of this exception.", e.getMessage()).         e = e.getCause().         // The next line with throw an exception if the date looks wrong         assertEquals("[node][idx][0] query=[*:*]", e.getMessage()).         assertEquals(MockSearchService.class.getName(), e.getStackTrace()[0].getClassName()).         assertEquals(MockSearchServiceTests.class.getName(), e.getStackTrace()[1].getClassName()).     } finally {         MockSearchService.removeActiveContext(s).     } }
