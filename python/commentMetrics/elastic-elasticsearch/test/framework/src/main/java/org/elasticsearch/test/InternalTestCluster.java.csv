# id;timestamp;commentText;codeText;commentWords;codeWords
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, long seed, Settings settings,                                     boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1536828374;builds a new node__@param nodeId                the node internal id (see {@link NodeAndClient#nodeAndClientId()}_@param seed                  the node's random seed_@param settings              the settings to use_@param reuseExisting         if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, long seed, Settings settings,_                                    boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        settings = getSettings(nodeId, seed, settings)__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = buildNodeName(nodeId, settings)__        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                "node name [" + name + "] already exists but not allowed to use it"__        }_        Settings.Builder finalSettings = Settings.builder()_            .put(Environment.PATH_HOME_SETTING.getKey(), baseDir) _            .put(settings)_            .put("node.name", name)_            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), seed)___        final boolean usingSingleNodeDiscovery = DiscoveryModule.DISCOVERY_TYPE_SETTING.get(finalSettings.build()).equals("single-node")__        if (!usingSingleNodeDiscovery && autoManageMinMasterNodes) {_            assert finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null :_                "min master nodes may not be set when auto managed"__            assert finalSettings.get(INITIAL_STATE_TIMEOUT_SETTING.getKey()) == null :_                "automatically managing min master nodes require nodes to complete a join cycle" +_                    " when starting"__            finalSettings_                _                .put(ZenDiscovery.MASTER_ELECTION_WAIT_FOR_JOINS_TIMEOUT_SETTING.getKey(), "5s")_                .put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), defaultMinMasterNodes)__        } else if (!usingSingleNodeDiscovery && finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null) {_            throw new IllegalArgumentException(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey() + " must be configured")__        }_        SecureSettings secureSettings = finalSettings.getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                finalSettings.build(),_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, nodeId)__    };builds,a,new,node,param,node,id,the,node,internal,id,see,link,node,and,client,node,and,client,id,param,seed,the,node,s,random,seed,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,long,seed,settings,settings,boolean,reuse,existing,int,default,min,master,nodes,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,settings,get,settings,node,id,seed,settings,collection,class,extends,plugin,plugins,get,plugins,string,name,build,node,name,node,id,settings,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,settings,builder,final,settings,settings,builder,put,environment,get,key,base,dir,put,settings,put,node,name,name,put,node,environment,get,key,seed,final,boolean,using,single,node,discovery,discovery,module,get,final,settings,build,equals,single,node,if,using,single,node,discovery,auto,manage,min,master,nodes,assert,final,settings,get,get,key,null,min,master,nodes,may,not,be,set,when,auto,managed,assert,final,settings,get,get,key,null,automatically,managing,min,master,nodes,require,nodes,to,complete,a,join,cycle,when,starting,final,settings,put,zen,discovery,get,key,5s,put,get,key,default,min,master,nodes,else,if,using,single,node,discovery,final,settings,get,get,key,null,throw,new,illegal,argument,exception,get,key,must,be,configured,secure,settings,secure,settings,final,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,final,settings,build,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, long seed, Settings settings,                                     boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1537806831;builds a new node__@param nodeId                the node internal id (see {@link NodeAndClient#nodeAndClientId()}_@param seed                  the node's random seed_@param settings              the settings to use_@param reuseExisting         if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, long seed, Settings settings,_                                    boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        settings = getSettings(nodeId, seed, settings)__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = buildNodeName(nodeId, settings)__        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                "node name [" + name + "] already exists but not allowed to use it"__        }_        Settings.Builder finalSettings = Settings.builder()_            .put(Environment.PATH_HOME_SETTING.getKey(), baseDir) _            .put(settings)_            .put("node.name", name)_            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), seed)___        final boolean usingSingleNodeDiscovery = DiscoveryModule.DISCOVERY_TYPE_SETTING.get(finalSettings.build()).equals("single-node")__        if (!usingSingleNodeDiscovery && autoManageMinMasterNodes) {_            assert finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null :_                "min master nodes may not be set when auto managed"__            assert finalSettings.get(INITIAL_STATE_TIMEOUT_SETTING.getKey()) == null :_                "automatically managing min master nodes require nodes to complete a join cycle" +_                    " when starting"__            finalSettings_                _                .put(ZenDiscovery.MASTER_ELECTION_WAIT_FOR_JOINS_TIMEOUT_SETTING.getKey(), "5s")_                .put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), defaultMinMasterNodes)__        } else if (!usingSingleNodeDiscovery && finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null) {_            throw new IllegalArgumentException(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey() + " must be configured")__        }_        SecureSettings secureSettings = finalSettings.getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                finalSettings.build(),_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, nodeId)__    };builds,a,new,node,param,node,id,the,node,internal,id,see,link,node,and,client,node,and,client,id,param,seed,the,node,s,random,seed,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,long,seed,settings,settings,boolean,reuse,existing,int,default,min,master,nodes,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,settings,get,settings,node,id,seed,settings,collection,class,extends,plugin,plugins,get,plugins,string,name,build,node,name,node,id,settings,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,settings,builder,final,settings,settings,builder,put,environment,get,key,base,dir,put,settings,put,node,name,name,put,node,environment,get,key,seed,final,boolean,using,single,node,discovery,discovery,module,get,final,settings,build,equals,single,node,if,using,single,node,discovery,auto,manage,min,master,nodes,assert,final,settings,get,get,key,null,min,master,nodes,may,not,be,set,when,auto,managed,assert,final,settings,get,get,key,null,automatically,managing,min,master,nodes,require,nodes,to,complete,a,join,cycle,when,starting,final,settings,put,zen,discovery,get,key,5s,put,get,key,default,min,master,nodes,else,if,using,single,node,discovery,final,settings,get,get,key,null,throw,new,illegal,argument,exception,get,key,must,be,configured,secure,settings,secure,settings,final,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,final,settings,build,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, long seed, Settings settings,                                     boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1538067637;builds a new node__@param nodeId                the node internal id (see {@link NodeAndClient#nodeAndClientId()}_@param seed                  the node's random seed_@param settings              the settings to use_@param reuseExisting         if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, long seed, Settings settings,_                                    boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        settings = getSettings(nodeId, seed, settings)__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = buildNodeName(nodeId, settings)__        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                "node name [" + name + "] already exists but not allowed to use it"__        }_        Settings.Builder finalSettings = Settings.builder()_            .put(Environment.PATH_HOME_SETTING.getKey(), baseDir) _            .put(settings)_            .put("node.name", name)_            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), seed)___        final boolean usingSingleNodeDiscovery = DiscoveryModule.DISCOVERY_TYPE_SETTING.get(finalSettings.build()).equals("single-node")__        if (!usingSingleNodeDiscovery && autoManageMinMasterNodes) {_            assert finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null :_                "min master nodes may not be set when auto managed"__            assert finalSettings.get(INITIAL_STATE_TIMEOUT_SETTING.getKey()) == null :_                "automatically managing min master nodes require nodes to complete a join cycle" +_                    " when starting"__            finalSettings_                _                .put(ZenDiscovery.MASTER_ELECTION_WAIT_FOR_JOINS_TIMEOUT_SETTING.getKey(), "5s")_                .put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), defaultMinMasterNodes)__        } else if (!usingSingleNodeDiscovery && finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null) {_            throw new IllegalArgumentException(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey() + " must be configured")__        }_        SecureSettings secureSettings = finalSettings.getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                finalSettings.build(),_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, nodeId)__    };builds,a,new,node,param,node,id,the,node,internal,id,see,link,node,and,client,node,and,client,id,param,seed,the,node,s,random,seed,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,long,seed,settings,settings,boolean,reuse,existing,int,default,min,master,nodes,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,settings,get,settings,node,id,seed,settings,collection,class,extends,plugin,plugins,get,plugins,string,name,build,node,name,node,id,settings,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,settings,builder,final,settings,settings,builder,put,environment,get,key,base,dir,put,settings,put,node,name,name,put,node,environment,get,key,seed,final,boolean,using,single,node,discovery,discovery,module,get,final,settings,build,equals,single,node,if,using,single,node,discovery,auto,manage,min,master,nodes,assert,final,settings,get,get,key,null,min,master,nodes,may,not,be,set,when,auto,managed,assert,final,settings,get,get,key,null,automatically,managing,min,master,nodes,require,nodes,to,complete,a,join,cycle,when,starting,final,settings,put,zen,discovery,get,key,5s,put,get,key,default,min,master,nodes,else,if,using,single,node,discovery,final,settings,get,get,key,null,throw,new,illegal,argument,exception,get,key,must,be,configured,secure,settings,secure,settings,final,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,final,settings,build,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, long seed, Settings settings,                                     boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1539723533;builds a new node__@param nodeId                the node internal id (see {@link NodeAndClient#nodeAndClientId()}_@param seed                  the node's random seed_@param settings              the settings to use_@param reuseExisting         if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, long seed, Settings settings,_                                    boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        settings = getSettings(nodeId, seed, settings)__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = buildNodeName(nodeId, settings)__        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                "node name [" + name + "] already exists but not allowed to use it"__        }_        Settings.Builder finalSettings = Settings.builder()_            .put(Environment.PATH_HOME_SETTING.getKey(), baseDir) _            .put(settings)_            .put("node.name", name)_            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), seed)___        final boolean usingSingleNodeDiscovery = DiscoveryModule.DISCOVERY_TYPE_SETTING.get(finalSettings.build()).equals("single-node")__        if (!usingSingleNodeDiscovery && autoManageMinMasterNodes) {_            assert finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null :_                "min master nodes may not be set when auto managed"__            assert finalSettings.get(INITIAL_STATE_TIMEOUT_SETTING.getKey()) == null :_                "automatically managing min master nodes require nodes to complete a join cycle" +_                    " when starting"__            finalSettings_                _                .put(ZenDiscovery.MASTER_ELECTION_WAIT_FOR_JOINS_TIMEOUT_SETTING.getKey(), "5s")_                .put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), defaultMinMasterNodes)__        } else if (!usingSingleNodeDiscovery && finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null) {_            throw new IllegalArgumentException(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey() + " must be configured")__        }_        SecureSettings secureSettings = finalSettings.getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                finalSettings.build(),_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, nodeId)__    };builds,a,new,node,param,node,id,the,node,internal,id,see,link,node,and,client,node,and,client,id,param,seed,the,node,s,random,seed,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,long,seed,settings,settings,boolean,reuse,existing,int,default,min,master,nodes,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,settings,get,settings,node,id,seed,settings,collection,class,extends,plugin,plugins,get,plugins,string,name,build,node,name,node,id,settings,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,settings,builder,final,settings,settings,builder,put,environment,get,key,base,dir,put,settings,put,node,name,name,put,node,environment,get,key,seed,final,boolean,using,single,node,discovery,discovery,module,get,final,settings,build,equals,single,node,if,using,single,node,discovery,auto,manage,min,master,nodes,assert,final,settings,get,get,key,null,min,master,nodes,may,not,be,set,when,auto,managed,assert,final,settings,get,get,key,null,automatically,managing,min,master,nodes,require,nodes,to,complete,a,join,cycle,when,starting,final,settings,put,zen,discovery,get,key,5s,put,get,key,default,min,master,nodes,else,if,using,single,node,discovery,final,settings,get,get,key,null,throw,new,illegal,argument,exception,get,key,must,be,configured,secure,settings,secure,settings,final,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,final,settings,build,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, long seed, Settings settings,                                     boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1539815831;builds a new node__@param nodeId                the node internal id (see {@link NodeAndClient#nodeAndClientId()}_@param seed                  the node's random seed_@param settings              the settings to use_@param reuseExisting         if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, long seed, Settings settings,_                                    boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        settings = getSettings(nodeId, seed, settings)__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = buildNodeName(nodeId, settings)__        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                "node name [" + name + "] already exists but not allowed to use it"__        }_        Settings.Builder finalSettings = Settings.builder()_            .put(Environment.PATH_HOME_SETTING.getKey(), baseDir) _            .put(settings)_            .put("node.name", name)_            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), seed)___        final boolean usingSingleNodeDiscovery = DiscoveryModule.DISCOVERY_TYPE_SETTING.get(finalSettings.build()).equals("single-node")__        if (!usingSingleNodeDiscovery && autoManageMinMasterNodes) {_            assert finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null :_                "min master nodes may not be set when auto managed"__            assert finalSettings.get(INITIAL_STATE_TIMEOUT_SETTING.getKey()) == null :_                "automatically managing min master nodes require nodes to complete a join cycle" +_                    " when starting"__            finalSettings_                _                .put(ZenDiscovery.MASTER_ELECTION_WAIT_FOR_JOINS_TIMEOUT_SETTING.getKey(), "5s")_                .put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), defaultMinMasterNodes)__        } else if (!usingSingleNodeDiscovery && finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null) {_            throw new IllegalArgumentException(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey() + " must be configured")__        }_        SecureSettings secureSettings = finalSettings.getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                finalSettings.build(),_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, nodeId)__    };builds,a,new,node,param,node,id,the,node,internal,id,see,link,node,and,client,node,and,client,id,param,seed,the,node,s,random,seed,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,long,seed,settings,settings,boolean,reuse,existing,int,default,min,master,nodes,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,settings,get,settings,node,id,seed,settings,collection,class,extends,plugin,plugins,get,plugins,string,name,build,node,name,node,id,settings,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,settings,builder,final,settings,settings,builder,put,environment,get,key,base,dir,put,settings,put,node,name,name,put,node,environment,get,key,seed,final,boolean,using,single,node,discovery,discovery,module,get,final,settings,build,equals,single,node,if,using,single,node,discovery,auto,manage,min,master,nodes,assert,final,settings,get,get,key,null,min,master,nodes,may,not,be,set,when,auto,managed,assert,final,settings,get,get,key,null,automatically,managing,min,master,nodes,require,nodes,to,complete,a,join,cycle,when,starting,final,settings,put,zen,discovery,get,key,5s,put,get,key,default,min,master,nodes,else,if,using,single,node,discovery,final,settings,get,get,key,null,throw,new,illegal,argument,exception,get,key,must,be,configured,secure,settings,secure,settings,final,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,final,settings,build,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, long seed, Settings settings,                                     boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1540486836;builds a new node__@param nodeId                the node internal id (see {@link NodeAndClient#nodeAndClientId()}_@param seed                  the node's random seed_@param settings              the settings to use_@param reuseExisting         if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, long seed, Settings settings,_                                    boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        settings = getSettings(nodeId, seed, settings)__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = buildNodeName(nodeId, settings)__        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                "node name [" + name + "] already exists but not allowed to use it"__        }_        Settings.Builder finalSettings = Settings.builder()_            .put(Environment.PATH_HOME_SETTING.getKey(), baseDir) _            .put(settings)_            .put("node.name", name)_            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), seed)___        final boolean usingSingleNodeDiscovery = DiscoveryModule.DISCOVERY_TYPE_SETTING.get(finalSettings.build()).equals("single-node")__        if (!usingSingleNodeDiscovery && autoManageMinMasterNodes) {_            assert finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null :_                "min master nodes may not be set when auto managed"__            assert finalSettings.get(INITIAL_STATE_TIMEOUT_SETTING.getKey()) == null :_                "automatically managing min master nodes require nodes to complete a join cycle" +_                    " when starting"__            finalSettings_                _                .put(ZenDiscovery.MASTER_ELECTION_WAIT_FOR_JOINS_TIMEOUT_SETTING.getKey(), "5s")_                .put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), defaultMinMasterNodes)__        } else if (!usingSingleNodeDiscovery && finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null) {_            throw new IllegalArgumentException(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey() + " must be configured")__        }_        SecureSettings secureSettings = finalSettings.getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                finalSettings.build(),_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, nodeId)__    };builds,a,new,node,param,node,id,the,node,internal,id,see,link,node,and,client,node,and,client,id,param,seed,the,node,s,random,seed,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,long,seed,settings,settings,boolean,reuse,existing,int,default,min,master,nodes,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,settings,get,settings,node,id,seed,settings,collection,class,extends,plugin,plugins,get,plugins,string,name,build,node,name,node,id,settings,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,settings,builder,final,settings,settings,builder,put,environment,get,key,base,dir,put,settings,put,node,name,name,put,node,environment,get,key,seed,final,boolean,using,single,node,discovery,discovery,module,get,final,settings,build,equals,single,node,if,using,single,node,discovery,auto,manage,min,master,nodes,assert,final,settings,get,get,key,null,min,master,nodes,may,not,be,set,when,auto,managed,assert,final,settings,get,get,key,null,automatically,managing,min,master,nodes,require,nodes,to,complete,a,join,cycle,when,starting,final,settings,put,zen,discovery,get,key,5s,put,get,key,default,min,master,nodes,else,if,using,single,node,discovery,final,settings,get,get,key,null,throw,new,illegal,argument,exception,get,key,must,be,configured,secure,settings,secure,settings,final,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,final,settings,build,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, long seed, Settings settings,                                     boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1541092382;builds a new node__@param nodeId                the node internal id (see {@link NodeAndClient#nodeAndClientId()}_@param seed                  the node's random seed_@param settings              the settings to use_@param reuseExisting         if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, long seed, Settings settings,_                                    boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        settings = getSettings(nodeId, seed, settings)__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = buildNodeName(nodeId, settings)__        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                "node name [" + name + "] already exists but not allowed to use it"__        }_        Settings.Builder finalSettings = Settings.builder()_            .put(Environment.PATH_HOME_SETTING.getKey(), baseDir) _            .put(settings)_            .put("node.name", name)_            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), seed)___        final boolean usingSingleNodeDiscovery = DiscoveryModule.DISCOVERY_TYPE_SETTING.get(finalSettings.build()).equals("single-node")__        if (!usingSingleNodeDiscovery && autoManageMinMasterNodes) {_            assert finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null :_                "min master nodes may not be set when auto managed"__            assert finalSettings.get(INITIAL_STATE_TIMEOUT_SETTING.getKey()) == null :_                "automatically managing min master nodes require nodes to complete a join cycle" +_                    " when starting"__            finalSettings_                _                .put(ZenDiscovery.MASTER_ELECTION_WAIT_FOR_JOINS_TIMEOUT_SETTING.getKey(), "5s")_                .put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), defaultMinMasterNodes)__        } else if (!usingSingleNodeDiscovery && finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null) {_            throw new IllegalArgumentException(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey() + " must be configured")__        }_        SecureSettings secureSettings = finalSettings.getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                finalSettings.build(),_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, nodeId)__    };builds,a,new,node,param,node,id,the,node,internal,id,see,link,node,and,client,node,and,client,id,param,seed,the,node,s,random,seed,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,long,seed,settings,settings,boolean,reuse,existing,int,default,min,master,nodes,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,settings,get,settings,node,id,seed,settings,collection,class,extends,plugin,plugins,get,plugins,string,name,build,node,name,node,id,settings,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,settings,builder,final,settings,settings,builder,put,environment,get,key,base,dir,put,settings,put,node,name,name,put,node,environment,get,key,seed,final,boolean,using,single,node,discovery,discovery,module,get,final,settings,build,equals,single,node,if,using,single,node,discovery,auto,manage,min,master,nodes,assert,final,settings,get,get,key,null,min,master,nodes,may,not,be,set,when,auto,managed,assert,final,settings,get,get,key,null,automatically,managing,min,master,nodes,require,nodes,to,complete,a,join,cycle,when,starting,final,settings,put,zen,discovery,get,key,5s,put,get,key,default,min,master,nodes,else,if,using,single,node,discovery,final,settings,get,get,key,null,throw,new,illegal,argument,exception,get,key,must,be,configured,secure,settings,secure,settings,final,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,final,settings,build,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, long seed, Settings settings,                                     boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1541208696;builds a new node__@param nodeId                the node internal id (see {@link NodeAndClient#nodeAndClientId()}_@param seed                  the node's random seed_@param settings              the settings to use_@param reuseExisting         if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, long seed, Settings settings,_                                    boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        settings = getSettings(nodeId, seed, settings)__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = buildNodeName(nodeId, settings)__        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                "node name [" + name + "] already exists but not allowed to use it"__        }_        Settings.Builder finalSettings = Settings.builder()_            .put(Environment.PATH_HOME_SETTING.getKey(), baseDir) _            .put(settings)_            .put("node.name", name)_            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), seed)___        final boolean usingSingleNodeDiscovery = DiscoveryModule.DISCOVERY_TYPE_SETTING.get(finalSettings.build()).equals("single-node")__        if (!usingSingleNodeDiscovery && autoManageMinMasterNodes) {_            assert finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null :_                "min master nodes may not be set when auto managed"__            assert finalSettings.get(INITIAL_STATE_TIMEOUT_SETTING.getKey()) == null :_                "automatically managing min master nodes require nodes to complete a join cycle" +_                    " when starting"__            finalSettings_                _                .put(ZenDiscovery.MASTER_ELECTION_WAIT_FOR_JOINS_TIMEOUT_SETTING.getKey(), "5s")_                .put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), defaultMinMasterNodes)__        } else if (!usingSingleNodeDiscovery && finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null) {_            throw new IllegalArgumentException(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey() + " must be configured")__        }_        SecureSettings secureSettings = finalSettings.getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                finalSettings.build(),_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, nodeId)__    };builds,a,new,node,param,node,id,the,node,internal,id,see,link,node,and,client,node,and,client,id,param,seed,the,node,s,random,seed,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,long,seed,settings,settings,boolean,reuse,existing,int,default,min,master,nodes,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,settings,get,settings,node,id,seed,settings,collection,class,extends,plugin,plugins,get,plugins,string,name,build,node,name,node,id,settings,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,settings,builder,final,settings,settings,builder,put,environment,get,key,base,dir,put,settings,put,node,name,name,put,node,environment,get,key,seed,final,boolean,using,single,node,discovery,discovery,module,get,final,settings,build,equals,single,node,if,using,single,node,discovery,auto,manage,min,master,nodes,assert,final,settings,get,get,key,null,min,master,nodes,may,not,be,set,when,auto,managed,assert,final,settings,get,get,key,null,automatically,managing,min,master,nodes,require,nodes,to,complete,a,join,cycle,when,starting,final,settings,put,zen,discovery,get,key,5s,put,get,key,default,min,master,nodes,else,if,using,single,node,discovery,final,settings,get,get,key,null,throw,new,illegal,argument,exception,get,key,must,be,configured,secure,settings,secure,settings,final,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,final,settings,build,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, long seed, Settings settings,                                     boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1542198296;builds a new node__@param nodeId                the node internal id (see {@link NodeAndClient#nodeAndClientId()}_@param seed                  the node's random seed_@param settings              the settings to use_@param reuseExisting         if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, long seed, Settings settings,_                                    boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        settings = getSettings(nodeId, seed, settings)__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = buildNodeName(nodeId, settings)__        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                "node name [" + name + "] already exists but not allowed to use it"__        }_        Settings.Builder finalSettings = Settings.builder()_            .put(Environment.PATH_HOME_SETTING.getKey(), baseDir) _            .put(settings)_            .put("node.name", name)_            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), seed)___        final boolean usingSingleNodeDiscovery = DiscoveryModule.DISCOVERY_TYPE_SETTING.get(finalSettings.build()).equals("single-node")__        if (!usingSingleNodeDiscovery && autoManageMinMasterNodes) {_            assert finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null :_                "min master nodes may not be set when auto managed"__            assert finalSettings.get(INITIAL_STATE_TIMEOUT_SETTING.getKey()) == null :_                "automatically managing min master nodes require nodes to complete a join cycle" +_                    " when starting"__            finalSettings_                _                .put(ZenDiscovery.MASTER_ELECTION_WAIT_FOR_JOINS_TIMEOUT_SETTING.getKey(), "5s")_                .put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), defaultMinMasterNodes)__        } else if (!usingSingleNodeDiscovery && finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null) {_            throw new IllegalArgumentException(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey() + " must be configured")__        }_        SecureSettings secureSettings = finalSettings.getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                finalSettings.build(),_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, nodeId)__    };builds,a,new,node,param,node,id,the,node,internal,id,see,link,node,and,client,node,and,client,id,param,seed,the,node,s,random,seed,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,long,seed,settings,settings,boolean,reuse,existing,int,default,min,master,nodes,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,settings,get,settings,node,id,seed,settings,collection,class,extends,plugin,plugins,get,plugins,string,name,build,node,name,node,id,settings,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,settings,builder,final,settings,settings,builder,put,environment,get,key,base,dir,put,settings,put,node,name,name,put,node,environment,get,key,seed,final,boolean,using,single,node,discovery,discovery,module,get,final,settings,build,equals,single,node,if,using,single,node,discovery,auto,manage,min,master,nodes,assert,final,settings,get,get,key,null,min,master,nodes,may,not,be,set,when,auto,managed,assert,final,settings,get,get,key,null,automatically,managing,min,master,nodes,require,nodes,to,complete,a,join,cycle,when,starting,final,settings,put,zen,discovery,get,key,5s,put,get,key,default,min,master,nodes,else,if,using,single,node,discovery,final,settings,get,get,key,null,throw,new,illegal,argument,exception,get,key,must,be,configured,secure,settings,secure,settings,final,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,final,settings,build,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, long seed, Settings settings,                                     boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1544081506;builds a new node__@param nodeId                the node internal id (see {@link NodeAndClient#nodeAndClientId()}_@param seed                  the node's random seed_@param settings              the settings to use_@param reuseExisting         if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, long seed, Settings settings,_                                    boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        settings = getSettings(nodeId, seed, settings)__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = buildNodeName(nodeId, settings)__        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                "node name [" + name + "] already exists but not allowed to use it"__        }_        Settings.Builder finalSettings = Settings.builder()_            .put(Environment.PATH_HOME_SETTING.getKey(), baseDir) _            .put(settings)_            .put("node.name", name)_            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), seed)___        final boolean usingSingleNodeDiscovery = DiscoveryModule.DISCOVERY_TYPE_SETTING.get(finalSettings.build()).equals("single-node")__        if (!usingSingleNodeDiscovery && autoManageMinMasterNodes) {_            assert finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null :_                "min master nodes may not be set when auto managed"__            assert finalSettings.get(INITIAL_STATE_TIMEOUT_SETTING.getKey()) == null :_                "automatically managing min master nodes require nodes to complete a join cycle" +_                    " when starting"__            finalSettings_                _                .put(ZenDiscovery.MASTER_ELECTION_WAIT_FOR_JOINS_TIMEOUT_SETTING.getKey(), "5s")_                .put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), defaultMinMasterNodes)__        } else if (!usingSingleNodeDiscovery && finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null) {_            throw new IllegalArgumentException(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey() + " must be configured")__        }_        SecureSettings secureSettings = finalSettings.getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                finalSettings.build(),_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, nodeId)__    };builds,a,new,node,param,node,id,the,node,internal,id,see,link,node,and,client,node,and,client,id,param,seed,the,node,s,random,seed,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,long,seed,settings,settings,boolean,reuse,existing,int,default,min,master,nodes,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,settings,get,settings,node,id,seed,settings,collection,class,extends,plugin,plugins,get,plugins,string,name,build,node,name,node,id,settings,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,settings,builder,final,settings,settings,builder,put,environment,get,key,base,dir,put,settings,put,node,name,name,put,node,environment,get,key,seed,final,boolean,using,single,node,discovery,discovery,module,get,final,settings,build,equals,single,node,if,using,single,node,discovery,auto,manage,min,master,nodes,assert,final,settings,get,get,key,null,min,master,nodes,may,not,be,set,when,auto,managed,assert,final,settings,get,get,key,null,automatically,managing,min,master,nodes,require,nodes,to,complete,a,join,cycle,when,starting,final,settings,put,zen,discovery,get,key,5s,put,get,key,default,min,master,nodes,else,if,using,single,node,discovery,final,settings,get,get,key,null,throw,new,illegal,argument,exception,get,key,must,be,configured,secure,settings,secure,settings,final,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,final,settings,build,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, long seed, Settings settings,                                     boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1544221624;builds a new node__@param nodeId                the node internal id (see {@link NodeAndClient#nodeAndClientId()}_@param seed                  the node's random seed_@param settings              the settings to use_@param reuseExisting         if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, long seed, Settings settings,_                                    boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        settings = getSettings(nodeId, seed, settings)__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = buildNodeName(nodeId, settings)__        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                "node name [" + name + "] already exists but not allowed to use it"__        }_        Settings.Builder finalSettings = Settings.builder()_            .put(Environment.PATH_HOME_SETTING.getKey(), baseDir) _            .put(settings)_            .put("node.name", name)_            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), seed)___        final boolean usingSingleNodeDiscovery = DiscoveryModule.DISCOVERY_TYPE_SETTING.get(finalSettings.build()).equals("single-node")__        if (!usingSingleNodeDiscovery && autoManageMinMasterNodes) {_            assert finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null :_                "min master nodes may not be set when auto managed"__            assert finalSettings.get(INITIAL_STATE_TIMEOUT_SETTING.getKey()) == null :_                "automatically managing min master nodes require nodes to complete a join cycle" +_                    " when starting"__            finalSettings_                _                .put(ZenDiscovery.MASTER_ELECTION_WAIT_FOR_JOINS_TIMEOUT_SETTING.getKey(), "5s")_                .put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), defaultMinMasterNodes)__        } else if (!usingSingleNodeDiscovery && finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null) {_            throw new IllegalArgumentException(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey() + " must be configured")__        }_        SecureSettings secureSettings = finalSettings.getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                finalSettings.build(),_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, nodeId)__    };builds,a,new,node,param,node,id,the,node,internal,id,see,link,node,and,client,node,and,client,id,param,seed,the,node,s,random,seed,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,long,seed,settings,settings,boolean,reuse,existing,int,default,min,master,nodes,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,settings,get,settings,node,id,seed,settings,collection,class,extends,plugin,plugins,get,plugins,string,name,build,node,name,node,id,settings,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,settings,builder,final,settings,settings,builder,put,environment,get,key,base,dir,put,settings,put,node,name,name,put,node,environment,get,key,seed,final,boolean,using,single,node,discovery,discovery,module,get,final,settings,build,equals,single,node,if,using,single,node,discovery,auto,manage,min,master,nodes,assert,final,settings,get,get,key,null,min,master,nodes,may,not,be,set,when,auto,managed,assert,final,settings,get,get,key,null,automatically,managing,min,master,nodes,require,nodes,to,complete,a,join,cycle,when,starting,final,settings,put,zen,discovery,get,key,5s,put,get,key,default,min,master,nodes,else,if,using,single,node,discovery,final,settings,get,get,key,null,throw,new,illegal,argument,exception,get,key,must,be,configured,secure,settings,secure,settings,final,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,final,settings,build,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, long seed, Settings settings,                                     boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1544254415;builds a new node__@param nodeId                the node internal id (see {@link NodeAndClient#nodeAndClientId()}_@param seed                  the node's random seed_@param settings              the settings to use_@param reuseExisting         if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, long seed, Settings settings,_                                    boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        settings = getSettings(nodeId, seed, settings)__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = buildNodeName(nodeId, settings)__        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                "node name [" + name + "] already exists but not allowed to use it"__        }_        Settings.Builder finalSettings = Settings.builder()_            .put(Environment.PATH_HOME_SETTING.getKey(), baseDir) _            .put(settings)_            .put("node.name", name)_            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), seed)___        final boolean usingSingleNodeDiscovery = DiscoveryModule.DISCOVERY_TYPE_SETTING.get(finalSettings.build()).equals("single-node")__        if (!usingSingleNodeDiscovery && autoManageMinMasterNodes) {_            assert finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null :_                "min master nodes may not be set when auto managed"__            assert finalSettings.get(INITIAL_STATE_TIMEOUT_SETTING.getKey()) == null :_                "automatically managing min master nodes require nodes to complete a join cycle" +_                    " when starting"__            finalSettings_                _                .put(ZenDiscovery.MASTER_ELECTION_WAIT_FOR_JOINS_TIMEOUT_SETTING.getKey(), "5s")_                .put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), defaultMinMasterNodes)__        } else if (!usingSingleNodeDiscovery && finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null) {_            throw new IllegalArgumentException(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey() + " must be configured")__        }_        SecureSettings secureSettings = finalSettings.getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                finalSettings.build(),_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, nodeId)__    };builds,a,new,node,param,node,id,the,node,internal,id,see,link,node,and,client,node,and,client,id,param,seed,the,node,s,random,seed,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,long,seed,settings,settings,boolean,reuse,existing,int,default,min,master,nodes,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,settings,get,settings,node,id,seed,settings,collection,class,extends,plugin,plugins,get,plugins,string,name,build,node,name,node,id,settings,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,settings,builder,final,settings,settings,builder,put,environment,get,key,base,dir,put,settings,put,node,name,name,put,node,environment,get,key,seed,final,boolean,using,single,node,discovery,discovery,module,get,final,settings,build,equals,single,node,if,using,single,node,discovery,auto,manage,min,master,nodes,assert,final,settings,get,get,key,null,min,master,nodes,may,not,be,set,when,auto,managed,assert,final,settings,get,get,key,null,automatically,managing,min,master,nodes,require,nodes,to,complete,a,join,cycle,when,starting,final,settings,put,zen,discovery,get,key,5s,put,get,key,default,min,master,nodes,else,if,using,single,node,discovery,final,settings,get,get,key,null,throw,new,illegal,argument,exception,get,key,must,be,configured,secure,settings,secure,settings,final,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,final,settings,build,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, long seed, Settings settings,                                     boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1544544737;builds a new node__@param nodeId                the node internal id (see {@link NodeAndClient#nodeAndClientId()}_@param seed                  the node's random seed_@param settings              the settings to use_@param reuseExisting         if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, long seed, Settings settings,_                                    boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        settings = getSettings(nodeId, seed, settings)__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = buildNodeName(nodeId, settings)__        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                "node name [" + name + "] already exists but not allowed to use it"__        }_        Settings.Builder finalSettings = Settings.builder()_            .put(Environment.PATH_HOME_SETTING.getKey(), baseDir) _            .put(settings)_            .put("node.name", name)_            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), seed)___        final boolean usingSingleNodeDiscovery = DiscoveryModule.DISCOVERY_TYPE_SETTING.get(finalSettings.build()).equals("single-node")__        if (!usingSingleNodeDiscovery && autoManageMinMasterNodes) {_            assert finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null :_                "min master nodes may not be set when auto managed"__            assert finalSettings.get(INITIAL_STATE_TIMEOUT_SETTING.getKey()) == null :_                "automatically managing min master nodes require nodes to complete a join cycle" +_                    " when starting"__            finalSettings_                _                .put(ZenDiscovery.MASTER_ELECTION_WAIT_FOR_JOINS_TIMEOUT_SETTING.getKey(), "5s")_                .put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), defaultMinMasterNodes)__        } else if (!usingSingleNodeDiscovery && finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null) {_            throw new IllegalArgumentException(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey() + " must be configured")__        }_        SecureSettings secureSettings = finalSettings.getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                finalSettings.build(),_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, nodeId)__    };builds,a,new,node,param,node,id,the,node,internal,id,see,link,node,and,client,node,and,client,id,param,seed,the,node,s,random,seed,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,long,seed,settings,settings,boolean,reuse,existing,int,default,min,master,nodes,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,settings,get,settings,node,id,seed,settings,collection,class,extends,plugin,plugins,get,plugins,string,name,build,node,name,node,id,settings,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,settings,builder,final,settings,settings,builder,put,environment,get,key,base,dir,put,settings,put,node,name,name,put,node,environment,get,key,seed,final,boolean,using,single,node,discovery,discovery,module,get,final,settings,build,equals,single,node,if,using,single,node,discovery,auto,manage,min,master,nodes,assert,final,settings,get,get,key,null,min,master,nodes,may,not,be,set,when,auto,managed,assert,final,settings,get,get,key,null,automatically,managing,min,master,nodes,require,nodes,to,complete,a,join,cycle,when,starting,final,settings,put,zen,discovery,get,key,5s,put,get,key,default,min,master,nodes,else,if,using,single,node,discovery,final,settings,get,get,key,null,throw,new,illegal,argument,exception,get,key,must,be,configured,secure,settings,secure,settings,final,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,final,settings,build,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, long seed, Settings settings,                                     boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1544823664;builds a new node__@param nodeId                the node internal id (see {@link NodeAndClient#nodeAndClientId()}_@param seed                  the node's random seed_@param settings              the settings to use_@param reuseExisting         if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, long seed, Settings settings,_                                    boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        settings = getSettings(nodeId, seed, settings)__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = buildNodeName(nodeId, settings)__        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                "node name [" + name + "] already exists but not allowed to use it"__        }_        Settings.Builder finalSettings = Settings.builder()_            .put(Environment.PATH_HOME_SETTING.getKey(), baseDir) _            .put(settings)_            .put("node.name", name)_            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), seed)___        final boolean usingSingleNodeDiscovery = DiscoveryModule.DISCOVERY_TYPE_SETTING.get(finalSettings.build()).equals("single-node")__        if (!usingSingleNodeDiscovery && autoManageMinMasterNodes) {_            assert finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null :_                "min master nodes may not be set when auto managed"__            assert finalSettings.get(INITIAL_STATE_TIMEOUT_SETTING.getKey()) == null :_                "automatically managing min master nodes require nodes to complete a join cycle" +_                    " when starting"__            finalSettings_                _                .put(ZenDiscovery.MASTER_ELECTION_WAIT_FOR_JOINS_TIMEOUT_SETTING.getKey(), "5s")_                .put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), defaultMinMasterNodes)__        } else if (!usingSingleNodeDiscovery && finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null) {_            throw new IllegalArgumentException(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey() + " must be configured")__        }_        SecureSettings secureSettings = finalSettings.getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                finalSettings.build(),_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, nodeId)__    };builds,a,new,node,param,node,id,the,node,internal,id,see,link,node,and,client,node,and,client,id,param,seed,the,node,s,random,seed,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,long,seed,settings,settings,boolean,reuse,existing,int,default,min,master,nodes,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,settings,get,settings,node,id,seed,settings,collection,class,extends,plugin,plugins,get,plugins,string,name,build,node,name,node,id,settings,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,settings,builder,final,settings,settings,builder,put,environment,get,key,base,dir,put,settings,put,node,name,name,put,node,environment,get,key,seed,final,boolean,using,single,node,discovery,discovery,module,get,final,settings,build,equals,single,node,if,using,single,node,discovery,auto,manage,min,master,nodes,assert,final,settings,get,get,key,null,min,master,nodes,may,not,be,set,when,auto,managed,assert,final,settings,get,get,key,null,automatically,managing,min,master,nodes,require,nodes,to,complete,a,join,cycle,when,starting,final,settings,put,zen,discovery,get,key,5s,put,get,key,default,min,master,nodes,else,if,using,single,node,discovery,final,settings,get,get,key,null,throw,new,illegal,argument,exception,get,key,must,be,configured,secure,settings,secure,settings,final,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,final,settings,build,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, long seed, Settings settings,                                     boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1545156327;builds a new node__@param nodeId                the node internal id (see {@link NodeAndClient#nodeAndClientId()}_@param seed                  the node's random seed_@param settings              the settings to use_@param reuseExisting         if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, long seed, Settings settings,_                                    boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        settings = getSettings(nodeId, seed, settings)__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = buildNodeName(nodeId, settings)__        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                "node name [" + name + "] already exists but not allowed to use it"__        }_        Settings.Builder finalSettings = Settings.builder()_            .put(Environment.PATH_HOME_SETTING.getKey(), baseDir) _            .put(settings)_            .put("node.name", name)_            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), seed)___        final boolean usingSingleNodeDiscovery = DiscoveryModule.DISCOVERY_TYPE_SETTING.get(finalSettings.build()).equals("single-node")__        if (!usingSingleNodeDiscovery && autoManageMinMasterNodes) {_            assert finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null :_                "min master nodes may not be set when auto managed"__            assert finalSettings.get(INITIAL_STATE_TIMEOUT_SETTING.getKey()) == null :_                "automatically managing min master nodes require nodes to complete a join cycle" +_                    " when starting"__            finalSettings_                _                .put(ZenDiscovery.MASTER_ELECTION_WAIT_FOR_JOINS_TIMEOUT_SETTING.getKey(), "5s")_                .put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), defaultMinMasterNodes)__        } else if (!usingSingleNodeDiscovery && finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null) {_            throw new IllegalArgumentException(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey() + " must be configured")__        }_        SecureSettings secureSettings = finalSettings.getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        final Settings nodeSettings = finalSettings.build()__        MockNode node = new MockNode(_                nodeSettings,_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, nodeSettings, nodeId)__    };builds,a,new,node,param,node,id,the,node,internal,id,see,link,node,and,client,node,and,client,id,param,seed,the,node,s,random,seed,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,long,seed,settings,settings,boolean,reuse,existing,int,default,min,master,nodes,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,settings,get,settings,node,id,seed,settings,collection,class,extends,plugin,plugins,get,plugins,string,name,build,node,name,node,id,settings,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,settings,builder,final,settings,settings,builder,put,environment,get,key,base,dir,put,settings,put,node,name,name,put,node,environment,get,key,seed,final,boolean,using,single,node,discovery,discovery,module,get,final,settings,build,equals,single,node,if,using,single,node,discovery,auto,manage,min,master,nodes,assert,final,settings,get,get,key,null,min,master,nodes,may,not,be,set,when,auto,managed,assert,final,settings,get,get,key,null,automatically,managing,min,master,nodes,require,nodes,to,complete,a,join,cycle,when,starting,final,settings,put,zen,discovery,get,key,5s,put,get,key,default,min,master,nodes,else,if,using,single,node,discovery,final,settings,get,get,key,null,throw,new,illegal,argument,exception,get,key,must,be,configured,secure,settings,secure,settings,final,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,final,settings,node,settings,final,settings,build,mock,node,node,new,mock,node,node,settings,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,node,settings,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, long seed, Settings settings,                                     boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1545222364;builds a new node__@param nodeId                the node internal id (see {@link NodeAndClient#nodeAndClientId()}_@param seed                  the node's random seed_@param settings              the settings to use_@param reuseExisting         if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, long seed, Settings settings,_                                    boolean reuseExisting, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        settings = getSettings(nodeId, seed, settings)__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = buildNodeName(nodeId, settings)__        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                "node name [" + name + "] already exists but not allowed to use it"__        }_        Settings.Builder finalSettings = Settings.builder()_            .put(Environment.PATH_HOME_SETTING.getKey(), baseDir) _            .put(settings)_            .put("node.name", name)_            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), seed)___        final boolean usingSingleNodeDiscovery = DiscoveryModule.DISCOVERY_TYPE_SETTING.get(finalSettings.build()).equals("single-node")__        if (!usingSingleNodeDiscovery && autoManageMinMasterNodes) {_            assert finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null :_                "min master nodes may not be set when auto managed"__            assert finalSettings.get(INITIAL_STATE_TIMEOUT_SETTING.getKey()) == null :_                "automatically managing min master nodes require nodes to complete a join cycle" +_                    " when starting"__            finalSettings_                _                .put(ZenDiscovery.MASTER_ELECTION_WAIT_FOR_JOINS_TIMEOUT_SETTING.getKey(), "5s")_                .put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), defaultMinMasterNodes)__        } else if (!usingSingleNodeDiscovery && finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null) {_            throw new IllegalArgumentException(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey() + " must be configured")__        }_        SecureSettings secureSettings = finalSettings.getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        final Settings nodeSettings = finalSettings.build()__        MockNode node = new MockNode(_                nodeSettings,_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, nodeSettings, nodeId)__    };builds,a,new,node,param,node,id,the,node,internal,id,see,link,node,and,client,node,and,client,id,param,seed,the,node,s,random,seed,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,long,seed,settings,settings,boolean,reuse,existing,int,default,min,master,nodes,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,settings,get,settings,node,id,seed,settings,collection,class,extends,plugin,plugins,get,plugins,string,name,build,node,name,node,id,settings,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,settings,builder,final,settings,settings,builder,put,environment,get,key,base,dir,put,settings,put,node,name,name,put,node,environment,get,key,seed,final,boolean,using,single,node,discovery,discovery,module,get,final,settings,build,equals,single,node,if,using,single,node,discovery,auto,manage,min,master,nodes,assert,final,settings,get,get,key,null,min,master,nodes,may,not,be,set,when,auto,managed,assert,final,settings,get,get,key,null,automatically,managing,min,master,nodes,require,nodes,to,complete,a,join,cycle,when,starting,final,settings,put,zen,discovery,get,key,5s,put,get,key,default,min,master,nodes,else,if,using,single,node,discovery,final,settings,get,get,key,null,throw,new,illegal,argument,exception,get,key,must,be,configured,secure,settings,secure,settings,final,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,final,settings,node,settings,final,settings,build,mock,node,node,new,mock,node,node,settings,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,node,settings,node,id
InternalTestCluster -> public ClusterService clusterService();1524684173;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1525162917;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1527096592;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1527152864;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1529916081;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1531179852;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1531729807;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1533738061;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1534362961;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1535723122;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1536137328;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1536828374;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1537806831;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1538067637;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1539723533;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1539815831;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1540486836;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1541092382;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1541208696;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1542198296;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1544081506;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1544221624;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1544254415;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1544544737;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1544823664;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1545156327;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1545222364;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1545315633;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1547245564;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1547496886;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1547497728;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1547825802;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1548160032;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1548878955;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1549017271;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1549094096;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1549291259;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1549386680;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1549388544;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1549452878;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1549898480;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1550570542;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1550755200;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public ClusterService clusterService();1550761203;Returns a reference to a random node's {@link ClusterService};public ClusterService clusterService() {_        return clusterService(null)__    };returns,a,reference,to,a,random,node,s,link,cluster,service;public,cluster,service,cluster,service,return,cluster,service,null
InternalTestCluster -> public <T> Iterable<T> getInstances(Class<T> clazz);1550755200;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public <T> Iterable<T> getInstances(Class<T> clazz) {_        return nodes.values().stream().map(node -> getInstanceFromNode(clazz, node.node)).collect(Collectors.toList())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,t,iterable,t,get,instances,class,t,clazz,return,nodes,values,stream,map,node,get,instance,from,node,clazz,node,node,collect,collectors,to,list
InternalTestCluster -> public <T> Iterable<T> getInstances(Class<T> clazz);1550761203;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public <T> Iterable<T> getInstances(Class<T> clazz) {_        return nodes.values().stream().map(node -> getInstanceFromNode(clazz, node.node)).collect(Collectors.toList())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,t,iterable,t,get,instances,class,t,clazz,return,nodes,values,stream,map,node,get,instance,from,node,clazz,node,node,collect,collectors,to,list
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1524684173;Starts a node with the given settings builder and returns it's name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,it,s,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1525162917;Starts a node with the given settings builder and returns it's name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,it,s,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1527096592;Starts a node with the given settings builder and returns it's name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,it,s,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1527152864;Starts a node with the given settings builder and returns it's name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,it,s,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1529916081;Starts a node with the given settings builder and returns it's name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,it,s,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1531179852;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1531729807;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1533738061;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1534362961;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1535723122;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1536137328;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1536828374;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1537806831;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1538067637;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1539723533;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1539815831;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1540486836;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1541092382;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1541208696;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1542198296;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1544081506;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1544221624;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1544254415;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1544544737;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1544823664;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1545156327;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1545222364;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1545315633;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1547245564;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1547496886;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1547497728;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1547825802;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1548160032;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1548878955;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1549017271;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1549094096;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1549291259;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1549386680;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1549388544;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1549452878;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1549898480;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized String startNode(Settings.Builder settings);1550570542;Starts a node with the given settings builder and returns its name.;public synchronized String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,synchronized,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public void restartRandomNode(RestartCallback callback) throws Exception;1524684173;Restarts a random node in the cluster and calls the callback during restart.;public void restartRandomNode(RestartCallback callback) throws Exception {_        restartRandomNode(nc -> true, callback)__    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,node,restart,callback,callback,throws,exception,restart,random,node,nc,true,callback
InternalTestCluster -> public void restartRandomNode(RestartCallback callback) throws Exception;1525162917;Restarts a random node in the cluster and calls the callback during restart.;public void restartRandomNode(RestartCallback callback) throws Exception {_        restartRandomNode(nc -> true, callback)__    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,node,restart,callback,callback,throws,exception,restart,random,node,nc,true,callback
InternalTestCluster -> public void restartRandomNode(RestartCallback callback) throws Exception;1527096592;Restarts a random node in the cluster and calls the callback during restart.;public void restartRandomNode(RestartCallback callback) throws Exception {_        restartRandomNode(nc -> true, callback)__    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,node,restart,callback,callback,throws,exception,restart,random,node,nc,true,callback
InternalTestCluster -> public void restartRandomNode(RestartCallback callback) throws Exception;1527152864;Restarts a random node in the cluster and calls the callback during restart.;public void restartRandomNode(RestartCallback callback) throws Exception {_        restartRandomNode(nc -> true, callback)__    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,node,restart,callback,callback,throws,exception,restart,random,node,nc,true,callback
InternalTestCluster -> public void restartRandomNode(RestartCallback callback) throws Exception;1529916081;Restarts a random node in the cluster and calls the callback during restart.;public void restartRandomNode(RestartCallback callback) throws Exception {_        restartRandomNode(nc -> true, callback)__    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,node,restart,callback,callback,throws,exception,restart,random,node,nc,true,callback
InternalTestCluster -> public void restartRandomNode(RestartCallback callback) throws Exception;1531179852;Restarts a random node in the cluster and calls the callback during restart.;public void restartRandomNode(RestartCallback callback) throws Exception {_        restartRandomNode(nc -> true, callback)__    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,node,restart,callback,callback,throws,exception,restart,random,node,nc,true,callback
InternalTestCluster -> public void restartRandomNode(RestartCallback callback) throws Exception;1531729807;Restarts a random node in the cluster and calls the callback during restart.;public void restartRandomNode(RestartCallback callback) throws Exception {_        restartRandomNode(nc -> true, callback)__    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,node,restart,callback,callback,throws,exception,restart,random,node,nc,true,callback
InternalTestCluster -> public void restartRandomNode(RestartCallback callback) throws Exception;1533738061;Restarts a random node in the cluster and calls the callback during restart.;public void restartRandomNode(RestartCallback callback) throws Exception {_        restartRandomNode(nc -> true, callback)__    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,node,restart,callback,callback,throws,exception,restart,random,node,nc,true,callback
InternalTestCluster -> public void restartRandomNode(RestartCallback callback) throws Exception;1534362961;Restarts a random node in the cluster and calls the callback during restart.;public void restartRandomNode(RestartCallback callback) throws Exception {_        restartRandomNode(nc -> true, callback)__    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,node,restart,callback,callback,throws,exception,restart,random,node,nc,true,callback
InternalTestCluster -> public void restartRandomNode(RestartCallback callback) throws Exception;1535723122;Restarts a random node in the cluster and calls the callback during restart.;public void restartRandomNode(RestartCallback callback) throws Exception {_        restartRandomNode(nc -> true, callback)__    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,node,restart,callback,callback,throws,exception,restart,random,node,nc,true,callback
InternalTestCluster -> public void restartRandomNode(RestartCallback callback) throws Exception;1536137328;Restarts a random node in the cluster and calls the callback during restart.;public void restartRandomNode(RestartCallback callback) throws Exception {_        restartRandomNode(nc -> true, callback)__    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,node,restart,callback,callback,throws,exception,restart,random,node,nc,true,callback
InternalTestCluster -> public void restartRandomNode(RestartCallback callback) throws Exception;1536828374;Restarts a random node in the cluster and calls the callback during restart.;public void restartRandomNode(RestartCallback callback) throws Exception {_        restartRandomNode(nc -> true, callback)__    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,node,restart,callback,callback,throws,exception,restart,random,node,nc,true,callback
InternalTestCluster -> public void restartRandomNode(RestartCallback callback) throws Exception;1537806831;Restarts a random node in the cluster and calls the callback during restart.;public void restartRandomNode(RestartCallback callback) throws Exception {_        restartRandomNode(nc -> true, callback)__    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,node,restart,callback,callback,throws,exception,restart,random,node,nc,true,callback
InternalTestCluster -> public void restartRandomNode(RestartCallback callback) throws Exception;1538067637;Restarts a random node in the cluster and calls the callback during restart.;public void restartRandomNode(RestartCallback callback) throws Exception {_        restartRandomNode(nc -> true, callback)__    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,node,restart,callback,callback,throws,exception,restart,random,node,nc,true,callback
InternalTestCluster -> public void restartRandomNode(RestartCallback callback) throws Exception;1539723533;Restarts a random node in the cluster and calls the callback during restart.;public void restartRandomNode(RestartCallback callback) throws Exception {_        restartRandomNode(nc -> true, callback)__    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,node,restart,callback,callback,throws,exception,restart,random,node,nc,true,callback
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1524684173;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1525162917;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1527096592;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1527152864;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1529916081;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1531179852;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1531729807;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1533738061;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1534362961;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1535723122;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1536137328;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1536828374;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1537806831;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1538067637;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1539723533;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1539815831;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1540486836;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1541092382;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1541208696;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1542198296;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1544081506;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1544221624;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1544254415;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1544544737;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1544823664;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1545156327;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1545222364;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1545315633;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1547245564;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1547496886;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1547497728;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1547825802;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1548160032;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1548878955;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1549017271;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1549094096;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1549291259;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1549386680;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1549388544;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1549452878;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1549898480;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized ClusterService clusterService(@Nullable String node);1550570542;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public synchronized ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,synchronized,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1524684173;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1525162917;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1527096592;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1527152864;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1529916081;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1531179852;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1531729807;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1533738061;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1534362961;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1535723122;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1536137328;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1536828374;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1537806831;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1538067637;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1539723533;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1539815831;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1540486836;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1541092382;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1541208696;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1542198296;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1544081506;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1544221624;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1544254415;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1544544737;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1544823664;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1545156327;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1545222364;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1545315633;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1547245564;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1547496886;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1547497728;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1547825802;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1548160032;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1548878955;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1549017271;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1549094096;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1549291259;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1549386680;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1549388544;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1549452878;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1549898480;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1550570542;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1550755200;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized Set<String> nodesInclude(String index);1550761203;Returns a set of nodes that have at least one shard of the given index.;public synchronized Set<String> nodesInclude(String index) {_        if (clusterService().state().routingTable().hasIndex(index)) {_            List<ShardRouting> allShards = clusterService().state().routingTable().allShards(index)__            DiscoveryNodes discoveryNodes = clusterService().state().getNodes()__            Set<String> nodes = new HashSet<>()__            for (ShardRouting shardRouting : allShards) {_                if (shardRouting.assignedToNode()) {_                    DiscoveryNode discoveryNode = discoveryNodes.get(shardRouting.currentNodeId())__                    nodes.add(discoveryNode.getName())__                }_            }_            return nodes__        }_        return Collections.emptySet()__    };returns,a,set,of,nodes,that,have,at,least,one,shard,of,the,given,index;public,synchronized,set,string,nodes,include,string,index,if,cluster,service,state,routing,table,has,index,index,list,shard,routing,all,shards,cluster,service,state,routing,table,all,shards,index,discovery,nodes,discovery,nodes,cluster,service,state,get,nodes,set,string,nodes,new,hash,set,for,shard,routing,shard,routing,all,shards,if,shard,routing,assigned,to,node,discovery,node,discovery,node,discovery,nodes,get,shard,routing,current,node,id,nodes,add,discovery,node,get,name,return,nodes,return,collections,empty,set
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1524684173;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1525162917;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1527096592;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1527152864;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1529916081;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1531179852;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1531729807;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1533738061;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1534362961;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1535723122;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1536137328;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1536828374;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1537806831;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1538067637;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1539723533;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1539815831;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1540486836;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1541092382;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1541208696;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1542198296;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1544081506;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1544221624;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1544254415;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1544544737;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1544823664;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1545156327;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1545222364;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1545315633;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1547245564;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1547496886;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1547497728;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1547825802;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1548160032;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1548878955;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1549017271;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1549094096;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1549291259;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1549386680;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1549388544;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1549452878;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1549898480;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes, Settings settings);1550570542;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).stream().toArray(Settings[]::new))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,stream,to,array,settings,new
InternalTestCluster -> public synchronized List<String> startNodes(Settings... settings);1524684173;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... settings) {_        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            int mastersDelta = (int) Stream.of(settings).filter(Node.NODE_MASTER_SETTING::get).count()__            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + mastersDelta)__        } else {_            defaultMinMasterNodes = -1__        }_        List<NodeAndClient> nodes = new ArrayList<>()__        for (Settings nodeSettings: settings) {_            nodes.add(buildNode(nodeSettings, defaultMinMasterNodes))__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }__        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,settings,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,int,masters,delta,int,stream,of,settings,filter,node,get,count,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,masters,delta,else,default,min,master,nodes,1,list,node,and,client,nodes,new,array,list,for,settings,node,settings,settings,nodes,add,build,node,node,settings,default,min,master,nodes,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... settings);1525162917;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... settings) {_        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            int mastersDelta = (int) Stream.of(settings).filter(Node.NODE_MASTER_SETTING::get).count()__            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + mastersDelta)__        } else {_            defaultMinMasterNodes = -1__        }_        List<NodeAndClient> nodes = new ArrayList<>()__        for (Settings nodeSettings: settings) {_            nodes.add(buildNode(nodeSettings, defaultMinMasterNodes))__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }__        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,settings,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,int,masters,delta,int,stream,of,settings,filter,node,get,count,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,masters,delta,else,default,min,master,nodes,1,list,node,and,client,nodes,new,array,list,for,settings,node,settings,settings,nodes,add,build,node,node,settings,default,min,master,nodes,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... settings);1527096592;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... settings) {_        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            int mastersDelta = (int) Stream.of(settings).filter(Node.NODE_MASTER_SETTING::get).count()__            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + mastersDelta)__        } else {_            defaultMinMasterNodes = -1__        }_        List<NodeAndClient> nodes = new ArrayList<>()__        for (Settings nodeSettings: settings) {_            nodes.add(buildNode(nodeSettings, defaultMinMasterNodes))__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }__        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,settings,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,int,masters,delta,int,stream,of,settings,filter,node,get,count,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,masters,delta,else,default,min,master,nodes,1,list,node,and,client,nodes,new,array,list,for,settings,node,settings,settings,nodes,add,build,node,node,settings,default,min,master,nodes,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... settings);1527152864;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... settings) {_        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            int mastersDelta = (int) Stream.of(settings).filter(Node.NODE_MASTER_SETTING::get).count()__            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + mastersDelta)__        } else {_            defaultMinMasterNodes = -1__        }_        List<NodeAndClient> nodes = new ArrayList<>()__        for (Settings nodeSettings: settings) {_            nodes.add(buildNode(nodeSettings, defaultMinMasterNodes))__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }__        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,settings,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,int,masters,delta,int,stream,of,settings,filter,node,get,count,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,masters,delta,else,default,min,master,nodes,1,list,node,and,client,nodes,new,array,list,for,settings,node,settings,settings,nodes,add,build,node,node,settings,default,min,master,nodes,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... settings);1529916081;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... settings) {_        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            int mastersDelta = (int) Stream.of(settings).filter(Node.NODE_MASTER_SETTING::get).count()__            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + mastersDelta)__        } else {_            defaultMinMasterNodes = -1__        }_        List<NodeAndClient> nodes = new ArrayList<>()__        for (Settings nodeSettings: settings) {_            nodes.add(buildNode(nodeSettings, defaultMinMasterNodes))__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }__        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,settings,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,int,masters,delta,int,stream,of,settings,filter,node,get,count,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,masters,delta,else,default,min,master,nodes,1,list,node,and,client,nodes,new,array,list,for,settings,node,settings,settings,nodes,add,build,node,node,settings,default,min,master,nodes,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... settings);1531179852;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... settings) {_        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            int mastersDelta = (int) Stream.of(settings).filter(Node.NODE_MASTER_SETTING::get).count()__            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + mastersDelta)__        } else {_            defaultMinMasterNodes = -1__        }_        List<NodeAndClient> nodes = new ArrayList<>()__        for (Settings nodeSettings: settings) {_            nodes.add(buildNode(nodeSettings, defaultMinMasterNodes))__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }__        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,settings,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,int,masters,delta,int,stream,of,settings,filter,node,get,count,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,masters,delta,else,default,min,master,nodes,1,list,node,and,client,nodes,new,array,list,for,settings,node,settings,settings,nodes,add,build,node,node,settings,default,min,master,nodes,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... settings);1531729807;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... settings) {_        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            int mastersDelta = (int) Stream.of(settings).filter(Node.NODE_MASTER_SETTING::get).count()__            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + mastersDelta)__        } else {_            defaultMinMasterNodes = -1__        }_        List<NodeAndClient> nodes = new ArrayList<>()__        for (Settings nodeSettings: settings) {_            nodes.add(buildNode(nodeSettings, defaultMinMasterNodes))__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }__        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,settings,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,int,masters,delta,int,stream,of,settings,filter,node,get,count,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,masters,delta,else,default,min,master,nodes,1,list,node,and,client,nodes,new,array,list,for,settings,node,settings,settings,nodes,add,build,node,node,settings,default,min,master,nodes,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... settings);1533738061;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... settings) {_        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            int mastersDelta = (int) Stream.of(settings).filter(Node.NODE_MASTER_SETTING::get).count()__            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + mastersDelta)__        } else {_            defaultMinMasterNodes = -1__        }_        List<NodeAndClient> nodes = new ArrayList<>()__        for (Settings nodeSettings: settings) {_            nodes.add(buildNode(nodeSettings, defaultMinMasterNodes))__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }__        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,settings,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,int,masters,delta,int,stream,of,settings,filter,node,get,count,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,masters,delta,else,default,min,master,nodes,1,list,node,and,client,nodes,new,array,list,for,settings,node,settings,settings,nodes,add,build,node,node,settings,default,min,master,nodes,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... settings);1534362961;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... settings) {_        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            int mastersDelta = (int) Stream.of(settings).filter(Node.NODE_MASTER_SETTING::get).count()__            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + mastersDelta)__        } else {_            defaultMinMasterNodes = -1__        }_        List<NodeAndClient> nodes = new ArrayList<>()__        for (Settings nodeSettings: settings) {_            nodes.add(buildNode(nodeSettings, defaultMinMasterNodes))__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }__        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,settings,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,int,masters,delta,int,stream,of,settings,filter,node,get,count,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,masters,delta,else,default,min,master,nodes,1,list,node,and,client,nodes,new,array,list,for,settings,node,settings,settings,nodes,add,build,node,node,settings,default,min,master,nodes,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... settings);1535723122;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... settings) {_        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            int mastersDelta = (int) Stream.of(settings).filter(Node.NODE_MASTER_SETTING::get).count()__            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + mastersDelta)__        } else {_            defaultMinMasterNodes = -1__        }_        List<NodeAndClient> nodes = new ArrayList<>()__        for (Settings nodeSettings: settings) {_            nodes.add(buildNode(nodeSettings, defaultMinMasterNodes))__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }__        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,settings,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,int,masters,delta,int,stream,of,settings,filter,node,get,count,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,masters,delta,else,default,min,master,nodes,1,list,node,and,client,nodes,new,array,list,for,settings,node,settings,settings,nodes,add,build,node,node,settings,default,min,master,nodes,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... settings);1536137328;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... settings) {_        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            int mastersDelta = (int) Stream.of(settings).filter(Node.NODE_MASTER_SETTING::get).count()__            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + mastersDelta)__        } else {_            defaultMinMasterNodes = -1__        }_        List<NodeAndClient> nodes = new ArrayList<>()__        for (Settings nodeSettings: settings) {_            nodes.add(buildNode(nodeSettings, defaultMinMasterNodes))__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }__        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,settings,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,int,masters,delta,int,stream,of,settings,filter,node,get,count,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,masters,delta,else,default,min,master,nodes,1,list,node,and,client,nodes,new,array,list,for,settings,node,settings,settings,nodes,add,build,node,node,settings,default,min,master,nodes,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... settings);1536828374;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... settings) {_        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            int mastersDelta = (int) Stream.of(settings).filter(Node.NODE_MASTER_SETTING::get).count()__            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + mastersDelta)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        for (Settings nodeSettings : settings) {_            nodes.add(buildNode(nodeSettings, defaultMinMasterNodes, () -> rebuildUnicastHostFiles(nodes)))__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }__        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,settings,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,int,masters,delta,int,stream,of,settings,filter,node,get,count,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,masters,delta,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,for,settings,node,settings,settings,nodes,add,build,node,node,settings,default,min,master,nodes,rebuild,unicast,host,files,nodes,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... settings);1537806831;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... settings) {_        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            int mastersDelta = (int) Stream.of(settings).filter(Node.NODE_MASTER_SETTING::get).count()__            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + mastersDelta)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        for (Settings nodeSettings : settings) {_            nodes.add(buildNode(nodeSettings, defaultMinMasterNodes, () -> rebuildUnicastHostFiles(nodes)))__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }__        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,settings,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,int,masters,delta,int,stream,of,settings,filter,node,get,count,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,masters,delta,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,for,settings,node,settings,settings,nodes,add,build,node,node,settings,default,min,master,nodes,rebuild,unicast,host,files,nodes,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... settings);1538067637;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... settings) {_        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            int mastersDelta = (int) Stream.of(settings).filter(Node.NODE_MASTER_SETTING::get).count()__            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + mastersDelta)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        for (Settings nodeSettings : settings) {_            nodes.add(buildNode(nodeSettings, defaultMinMasterNodes, () -> rebuildUnicastHostFiles(nodes)))__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }__        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,settings,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,int,masters,delta,int,stream,of,settings,filter,node,get,count,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,masters,delta,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,for,settings,node,settings,settings,nodes,add,build,node,node,settings,default,min,master,nodes,rebuild,unicast,host,files,nodes,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... settings);1539723533;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... settings) {_        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            int mastersDelta = (int) Stream.of(settings).filter(Node.NODE_MASTER_SETTING::get).count()__            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + mastersDelta)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        for (Settings nodeSettings : settings) {_            nodes.add(buildNode(nodeSettings, defaultMinMasterNodes, () -> rebuildUnicastHostFiles(nodes)))__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }__        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,settings,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,int,masters,delta,int,stream,of,settings,filter,node,get,count,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,masters,delta,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,for,settings,node,settings,settings,nodes,add,build,node,node,settings,default,min,master,nodes,rebuild,unicast,host,files,nodes,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... settings);1539815831;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... settings) {_        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            int mastersDelta = (int) Stream.of(settings).filter(Node.NODE_MASTER_SETTING::get).count()__            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + mastersDelta)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        for (Settings nodeSettings : settings) {_            nodes.add(buildNode(nodeSettings, defaultMinMasterNodes, () -> rebuildUnicastHostFiles(nodes)))__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }__        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,settings,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,int,masters,delta,int,stream,of,settings,filter,node,get,count,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,masters,delta,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,for,settings,node,settings,settings,nodes,add,build,node,node,settings,default,min,master,nodes,rebuild,unicast,host,files,nodes,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... settings);1540486836;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... settings) {_        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            int mastersDelta = (int) Stream.of(settings).filter(Node.NODE_MASTER_SETTING::get).count()__            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + mastersDelta)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        for (Settings nodeSettings : settings) {_            nodes.add(buildNode(nodeSettings, defaultMinMasterNodes, () -> rebuildUnicastHostFiles(nodes)))__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }__        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,settings,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,int,masters,delta,int,stream,of,settings,filter,node,get,count,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,masters,delta,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,for,settings,node,settings,settings,nodes,add,build,node,node,settings,default,min,master,nodes,rebuild,unicast,host,files,nodes,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... settings);1541092382;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... settings) {_        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            int mastersDelta = (int) Stream.of(settings).filter(Node.NODE_MASTER_SETTING::get).count()__            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + mastersDelta)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        for (Settings nodeSettings : settings) {_            nodes.add(buildNode(nodeSettings, defaultMinMasterNodes, () -> rebuildUnicastHostFiles(nodes)))__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }__        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,settings,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,int,masters,delta,int,stream,of,settings,filter,node,get,count,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,masters,delta,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,for,settings,node,settings,settings,nodes,add,build,node,node,settings,default,min,master,nodes,rebuild,unicast,host,files,nodes,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... settings);1541208696;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... settings) {_        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            int mastersDelta = (int) Stream.of(settings).filter(Node.NODE_MASTER_SETTING::get).count()__            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + mastersDelta)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        for (Settings nodeSettings : settings) {_            nodes.add(buildNode(nodeSettings, defaultMinMasterNodes, () -> rebuildUnicastHostFiles(nodes)))__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }__        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,settings,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,int,masters,delta,int,stream,of,settings,filter,node,get,count,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,masters,delta,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,for,settings,node,settings,settings,nodes,add,build,node,node,settings,default,min,master,nodes,rebuild,unicast,host,files,nodes,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... settings);1542198296;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... settings) {_        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            int mastersDelta = (int) Stream.of(settings).filter(Node.NODE_MASTER_SETTING::get).count()__            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + mastersDelta)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        for (Settings nodeSettings : settings) {_            nodes.add(buildNode(nodeSettings, defaultMinMasterNodes, () -> rebuildUnicastHostFiles(nodes)))__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }__        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,settings,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,int,masters,delta,int,stream,of,settings,filter,node,get,count,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,masters,delta,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,for,settings,node,settings,settings,nodes,add,build,node,node,settings,default,min,master,nodes,rebuild,unicast,host,files,nodes,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... settings);1544081506;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... settings) {_        final int newMasterCount = Math.toIntExact(Stream.of(settings).filter(Node.NODE_MASTER_SETTING::get).count())__        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + newMasterCount)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        final int prevMasterCount = getMasterNodesCount()__        int bootstrapMasterNodeIndex = prevMasterCount == 0 && autoManageMinMasterNodes && newMasterCount > 0_            ? RandomNumbers.randomIntBetween(random, 0, newMasterCount - 1) : -1___        for (Settings nodeSettings : settings) {_            final Builder builder = Settings.builder()__            if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                if (bootstrapMasterNodeIndex == 0) {_                    builder.put(INITIAL_MASTER_NODE_COUNT_SETTING.getKey(), newMasterCount)__                }_                bootstrapMasterNodeIndex -= 1__            }_            nodes.add(buildNode(builder.put(nodeSettings).build(), defaultMinMasterNodes, () -> rebuildUnicastHostFiles(nodes)))__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }_        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,settings,final,int,new,master,count,math,to,int,exact,stream,of,settings,filter,node,get,count,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,new,master,count,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,final,int,prev,master,count,get,master,nodes,count,int,bootstrap,master,node,index,prev,master,count,0,auto,manage,min,master,nodes,new,master,count,0,random,numbers,random,int,between,random,0,new,master,count,1,1,for,settings,node,settings,settings,final,builder,builder,settings,builder,if,node,get,node,settings,if,bootstrap,master,node,index,0,builder,put,get,key,new,master,count,bootstrap,master,node,index,1,nodes,add,build,node,builder,put,node,settings,build,default,min,master,nodes,rebuild,unicast,host,files,nodes,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... settings);1544221624;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... settings) {_        final int newMasterCount = Math.toIntExact(Stream.of(settings).filter(Node.NODE_MASTER_SETTING::get).count())__        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + newMasterCount)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        final int prevMasterCount = getMasterNodesCount()__        int bootstrapMasterNodeIndex = prevMasterCount == 0 && autoManageMinMasterNodes && newMasterCount > 0_            ? RandomNumbers.randomIntBetween(random, 0, newMasterCount - 1) : -1___        for (Settings nodeSettings : settings) {_            final Builder builder = Settings.builder()__            if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                if (bootstrapMasterNodeIndex == 0) {_                    builder.put(INITIAL_MASTER_NODE_COUNT_SETTING.getKey(), newMasterCount)__                }_                bootstrapMasterNodeIndex -= 1__            }_            nodes.add(buildNode(builder.put(nodeSettings).build(), defaultMinMasterNodes, () -> rebuildUnicastHostFiles(nodes)))__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }_        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,settings,final,int,new,master,count,math,to,int,exact,stream,of,settings,filter,node,get,count,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,new,master,count,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,final,int,prev,master,count,get,master,nodes,count,int,bootstrap,master,node,index,prev,master,count,0,auto,manage,min,master,nodes,new,master,count,0,random,numbers,random,int,between,random,0,new,master,count,1,1,for,settings,node,settings,settings,final,builder,builder,settings,builder,if,node,get,node,settings,if,bootstrap,master,node,index,0,builder,put,get,key,new,master,count,bootstrap,master,node,index,1,nodes,add,build,node,builder,put,node,settings,build,default,min,master,nodes,rebuild,unicast,host,files,nodes,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... settings);1544254415;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... settings) {_        final int newMasterCount = Math.toIntExact(Stream.of(settings).filter(Node.NODE_MASTER_SETTING::get).count())__        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + newMasterCount)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        final int prevMasterCount = getMasterNodesCount()__        int bootstrapMasterNodeIndex = prevMasterCount == 0 && autoManageMinMasterNodes && newMasterCount > 0 && Arrays.stream(settings)_            .allMatch(s -> Node.NODE_MASTER_SETTING.get(s) == false || TestZenDiscovery.USE_ZEN2.get(s) == true)_            ? RandomNumbers.randomIntBetween(random, 0, newMasterCount - 1) : -1___        for (Settings nodeSettings : settings) {_            final Builder builder = Settings.builder()__            if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                if (bootstrapMasterNodeIndex == 0) {_                    builder.put(INITIAL_MASTER_NODE_COUNT_SETTING.getKey(), newMasterCount)__                }_                bootstrapMasterNodeIndex -= 1__            }_            nodes.add(buildNode(builder.put(nodeSettings).build(), defaultMinMasterNodes, () -> rebuildUnicastHostFiles(nodes)))__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }_        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,settings,final,int,new,master,count,math,to,int,exact,stream,of,settings,filter,node,get,count,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,new,master,count,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,final,int,prev,master,count,get,master,nodes,count,int,bootstrap,master,node,index,prev,master,count,0,auto,manage,min,master,nodes,new,master,count,0,arrays,stream,settings,all,match,s,node,get,s,false,test,zen,discovery,get,s,true,random,numbers,random,int,between,random,0,new,master,count,1,1,for,settings,node,settings,settings,final,builder,builder,settings,builder,if,node,get,node,settings,if,bootstrap,master,node,index,0,builder,put,get,key,new,master,count,bootstrap,master,node,index,1,nodes,add,build,node,builder,put,node,settings,build,default,min,master,nodes,rebuild,unicast,host,files,nodes,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... settings);1544544737;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... settings) {_        final int newMasterCount = Math.toIntExact(Stream.of(settings).filter(Node.NODE_MASTER_SETTING::get).count())__        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + newMasterCount)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        final int prevMasterCount = getMasterNodesCount()__        int bootstrapMasterNodeIndex = prevMasterCount == 0 && autoManageMinMasterNodes && newMasterCount > 0 && Arrays.stream(settings)_            .allMatch(s -> Node.NODE_MASTER_SETTING.get(s) == false || TestZenDiscovery.USE_ZEN2.get(s) == true)_            ? RandomNumbers.randomIntBetween(random, 0, newMasterCount - 1) : -1___        for (Settings nodeSettings : settings) {_            final Builder builder = Settings.builder()__            if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                if (bootstrapMasterNodeIndex == 0) {_                    builder.put(INITIAL_MASTER_NODE_COUNT_SETTING.getKey(), newMasterCount)__                }_                bootstrapMasterNodeIndex -= 1__            }_            nodes.add(buildNode(builder.put(nodeSettings).build(), defaultMinMasterNodes, () -> rebuildUnicastHostFiles(nodes)))__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }_        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,settings,final,int,new,master,count,math,to,int,exact,stream,of,settings,filter,node,get,count,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,new,master,count,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,final,int,prev,master,count,get,master,nodes,count,int,bootstrap,master,node,index,prev,master,count,0,auto,manage,min,master,nodes,new,master,count,0,arrays,stream,settings,all,match,s,node,get,s,false,test,zen,discovery,get,s,true,random,numbers,random,int,between,random,0,new,master,count,1,1,for,settings,node,settings,settings,final,builder,builder,settings,builder,if,node,get,node,settings,if,bootstrap,master,node,index,0,builder,put,get,key,new,master,count,bootstrap,master,node,index,1,nodes,add,build,node,builder,put,node,settings,build,default,min,master,nodes,rebuild,unicast,host,files,nodes,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... settings);1544823664;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... settings) {_        final int newMasterCount = Math.toIntExact(Stream.of(settings).filter(Node.NODE_MASTER_SETTING::get).count())__        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + newMasterCount)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        final int prevMasterCount = getMasterNodesCount()__        int bootstrapMasterNodeIndex = prevMasterCount == 0 && autoManageMinMasterNodes && newMasterCount > 0 && Arrays.stream(settings)_            .allMatch(s -> Node.NODE_MASTER_SETTING.get(s) == false || TestZenDiscovery.USE_ZEN2.get(s) == true)_            ? RandomNumbers.randomIntBetween(random, 0, newMasterCount - 1) : -1___        for (Settings nodeSettings : settings) {_            final Builder builder = Settings.builder()__            if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                if (bootstrapMasterNodeIndex == 0) {_                    builder.put(INITIAL_MASTER_NODE_COUNT_SETTING.getKey(), newMasterCount)__                }_                bootstrapMasterNodeIndex -= 1__            }_            nodes.add(buildNode(builder.put(nodeSettings).build(), defaultMinMasterNodes, () -> rebuildUnicastHostFiles(nodes)))__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }_        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,settings,final,int,new,master,count,math,to,int,exact,stream,of,settings,filter,node,get,count,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,new,master,count,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,final,int,prev,master,count,get,master,nodes,count,int,bootstrap,master,node,index,prev,master,count,0,auto,manage,min,master,nodes,new,master,count,0,arrays,stream,settings,all,match,s,node,get,s,false,test,zen,discovery,get,s,true,random,numbers,random,int,between,random,0,new,master,count,1,1,for,settings,node,settings,settings,final,builder,builder,settings,builder,if,node,get,node,settings,if,bootstrap,master,node,index,0,builder,put,get,key,new,master,count,bootstrap,master,node,index,1,nodes,add,build,node,builder,put,node,settings,build,default,min,master,nodes,rebuild,unicast,host,files,nodes,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... settings);1545156327;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... settings) {_        final int newMasterCount = Math.toIntExact(Stream.of(settings).filter(Node.NODE_MASTER_SETTING::get).count())__        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + newMasterCount)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        final int prevMasterCount = getMasterNodesCount()__        int bootstrapMasterNodeIndex = prevMasterCount == 0 && autoManageMinMasterNodes && newMasterCount > 0 && Arrays.stream(settings)_            .allMatch(s -> Node.NODE_MASTER_SETTING.get(s) == false || TestZenDiscovery.USE_ZEN2.get(s) == true)_            ? RandomNumbers.randomIntBetween(random, 0, newMasterCount - 1) : -1___        for (Settings nodeSettings : settings) {_            final Builder builder = Settings.builder()__            if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                if (bootstrapMasterNodeIndex == 0) {_                    builder.put(INITIAL_MASTER_NODE_COUNT_SETTING.getKey(), newMasterCount)__                }_                bootstrapMasterNodeIndex -= 1__            }_            nodes.add(buildNode(builder.put(nodeSettings).build(), defaultMinMasterNodes, () -> rebuildUnicastHostFiles(nodes)))__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }_        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,settings,final,int,new,master,count,math,to,int,exact,stream,of,settings,filter,node,get,count,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,new,master,count,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,final,int,prev,master,count,get,master,nodes,count,int,bootstrap,master,node,index,prev,master,count,0,auto,manage,min,master,nodes,new,master,count,0,arrays,stream,settings,all,match,s,node,get,s,false,test,zen,discovery,get,s,true,random,numbers,random,int,between,random,0,new,master,count,1,1,for,settings,node,settings,settings,final,builder,builder,settings,builder,if,node,get,node,settings,if,bootstrap,master,node,index,0,builder,put,get,key,new,master,count,bootstrap,master,node,index,1,nodes,add,build,node,builder,put,node,settings,build,default,min,master,nodes,rebuild,unicast,host,files,nodes,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... settings);1545222364;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... settings) {_        final int newMasterCount = Math.toIntExact(Stream.of(settings).filter(Node.NODE_MASTER_SETTING::get).count())__        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + newMasterCount)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        final int prevMasterCount = getMasterNodesCount()__        int bootstrapMasterNodeIndex = prevMasterCount == 0 && autoManageMinMasterNodes && newMasterCount > 0 && Arrays.stream(settings)_            .allMatch(s -> Node.NODE_MASTER_SETTING.get(s) == false || TestZenDiscovery.USE_ZEN2.get(s) == true)_            ? RandomNumbers.randomIntBetween(random, 0, newMasterCount - 1) : -1___        for (Settings nodeSettings : settings) {_            final Builder builder = Settings.builder()__            if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                if (bootstrapMasterNodeIndex == 0) {_                    builder.put(INITIAL_MASTER_NODE_COUNT_SETTING.getKey(), newMasterCount)__                }_                bootstrapMasterNodeIndex -= 1__            }_            nodes.add(buildNode(builder.put(nodeSettings).build(), defaultMinMasterNodes, () -> rebuildUnicastHostFiles(nodes)))__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }_        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,settings,final,int,new,master,count,math,to,int,exact,stream,of,settings,filter,node,get,count,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,new,master,count,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,final,int,prev,master,count,get,master,nodes,count,int,bootstrap,master,node,index,prev,master,count,0,auto,manage,min,master,nodes,new,master,count,0,arrays,stream,settings,all,match,s,node,get,s,false,test,zen,discovery,get,s,true,random,numbers,random,int,between,random,0,new,master,count,1,1,for,settings,node,settings,settings,final,builder,builder,settings,builder,if,node,get,node,settings,if,bootstrap,master,node,index,0,builder,put,get,key,new,master,count,bootstrap,master,node,index,1,nodes,add,build,node,builder,put,node,settings,build,default,min,master,nodes,rebuild,unicast,host,files,nodes,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public Client masterClient();1550755200;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public Client masterClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        throw new AssertionError("No master client found")__    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,client,master,client,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,throw,new,assertion,error,no,master,client,found
InternalTestCluster -> public Client masterClient();1550761203;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public Client masterClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        throw new AssertionError("No master client found")__    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,client,master,client,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,throw,new,assertion,error,no,master,client,found
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1524684173;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1525162917;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1527096592;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1527152864;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1529916081;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1531179852;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1531729807;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1533738061;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1534362961;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1535723122;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1536137328;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1536828374;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1537806831;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1538067637;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1539723533;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1539815831;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1540486836;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1541092382;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1541208696;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1542198296;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1544081506;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1544221624;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1544254415;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1544544737;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1544823664;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1545156327;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1545222364;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1545315633;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1547245564;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1547496886;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1547497728;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1547825802;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1548160032;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1548878955;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1549017271;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1549094096;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1549291259;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1549386680;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1549388544;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1549452878;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1549898480;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1550570542;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(new DataNodePredicate())__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,new,data,node,predicate,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1550755200;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(DATA_NODE_PREDICATE)__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized boolean stopRandomDataNode() throws IOException;1550761203;Stops a random data node in the cluster. Returns true if a node was found to stop, false otherwise.;public synchronized boolean stopRandomDataNode() throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(DATA_NODE_PREDICATE)__        if (nodeAndClient != null) {_            logger.info("Closing random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__            return true__        }_        return false__    };stops,a,random,data,node,in,the,cluster,returns,true,if,a,node,was,found,to,stop,false,otherwise;public,synchronized,boolean,stop,random,data,node,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,if,node,and,client,null,logger,info,closing,random,node,node,and,client,name,stop,nodes,and,client,node,and,client,return,true,return,false
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1524684173;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        boolean added = false__        int size = numDataNodes()__        for (int i = size_ i < n_ i++) {_            logger.info("increasing cluster size from {} to {}", size, n)__            added = true__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNode(Settings.EMPTY)__            } else {_                startNode(Settings.EMPTY)__            }_        }_        if (added) {_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,boolean,added,false,int,size,num,data,nodes,for,int,i,size,i,n,i,logger,info,increasing,cluster,size,from,to,size,n,added,true,if,num,shared,dedicated,master,nodes,0,start,data,only,node,settings,empty,else,start,node,settings,empty,if,added,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1525162917;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        boolean added = false__        int size = numDataNodes()__        for (int i = size_ i < n_ i++) {_            logger.info("increasing cluster size from {} to {}", size, n)__            added = true__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNode(Settings.EMPTY)__            } else {_                startNode(Settings.EMPTY)__            }_        }_        if (added) {_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,boolean,added,false,int,size,num,data,nodes,for,int,i,size,i,n,i,logger,info,increasing,cluster,size,from,to,size,n,added,true,if,num,shared,dedicated,master,nodes,0,start,data,only,node,settings,empty,else,start,node,settings,empty,if,added,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1527096592;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        boolean added = false__        int size = numDataNodes()__        for (int i = size_ i < n_ i++) {_            logger.info("increasing cluster size from {} to {}", size, n)__            added = true__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNode(Settings.EMPTY)__            } else {_                startNode(Settings.EMPTY)__            }_        }_        if (added) {_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,boolean,added,false,int,size,num,data,nodes,for,int,i,size,i,n,i,logger,info,increasing,cluster,size,from,to,size,n,added,true,if,num,shared,dedicated,master,nodes,0,start,data,only,node,settings,empty,else,start,node,settings,empty,if,added,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1527152864;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        boolean added = false__        int size = numDataNodes()__        for (int i = size_ i < n_ i++) {_            logger.info("increasing cluster size from {} to {}", size, n)__            added = true__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNode(Settings.EMPTY)__            } else {_                startNode(Settings.EMPTY)__            }_        }_        if (added) {_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,boolean,added,false,int,size,num,data,nodes,for,int,i,size,i,n,i,logger,info,increasing,cluster,size,from,to,size,n,added,true,if,num,shared,dedicated,master,nodes,0,start,data,only,node,settings,empty,else,start,node,settings,empty,if,added,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1529916081;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        boolean added = false__        int size = numDataNodes()__        for (int i = size_ i < n_ i++) {_            logger.info("increasing cluster size from {} to {}", size, n)__            added = true__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNode(Settings.EMPTY)__            } else {_                startNode(Settings.EMPTY)__            }_        }_        if (added) {_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,boolean,added,false,int,size,num,data,nodes,for,int,i,size,i,n,i,logger,info,increasing,cluster,size,from,to,size,n,added,true,if,num,shared,dedicated,master,nodes,0,start,data,only,node,settings,empty,else,start,node,settings,empty,if,added,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1531179852;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1531729807;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1533738061;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1534362961;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1535723122;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1536137328;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1536828374;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1537806831;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1538067637;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1539723533;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1539815831;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1540486836;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1541092382;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1541208696;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1542198296;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1544081506;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1544221624;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1544254415;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1544544737;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1544823664;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1545156327;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1545222364;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1545315633;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1547245564;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1547496886;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1547497728;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1547825802;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1548160032;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1548878955;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1549017271;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1549094096;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1549291259;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1549386680;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1549388544;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1549452878;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1549898480;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1550570542;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1550755200;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtLeastNumDataNodes(int n);1550761203;Ensures that at least <code>n</code> data nodes are present in the cluster._if more nodes than <code>n</code> are present this method will not_stop any of the running nodes.;public synchronized void ensureAtLeastNumDataNodes(int n) {_        int size = numDataNodes()__        if (size < n) {_            logger.info("increasing cluster size from {} to {}", size, n)__            if (numSharedDedicatedMasterNodes > 0) {_                startDataOnlyNodes(n - size)__            } else {_                startNodes(n - size)__            }_            validateClusterFormed()__        }_    };ensures,that,at,least,code,n,code,data,nodes,are,present,in,the,cluster,if,more,nodes,than,code,n,code,are,present,this,method,will,not,stop,any,of,the,running,nodes;public,synchronized,void,ensure,at,least,num,data,nodes,int,n,int,size,num,data,nodes,if,size,n,logger,info,increasing,cluster,size,from,to,size,n,if,num,shared,dedicated,master,nodes,0,start,data,only,nodes,n,size,else,start,nodes,n,size,validate,cluster,formed
InternalTestCluster -> public synchronized Client client(final Predicate<Settings> filterPredicate);1524684173;Returns a random node that applies to the given predicate._The predicate can filter nodes based on the nodes settings._If all nodes are filtered out this method will return <code>null</code>;public synchronized Client client(final Predicate<Settings> filterPredicate) {_        ensureOpen()__        final NodeAndClient randomNodeAndClient = getRandomNodeAndClient(nodeAndClient -> filterPredicate.test(nodeAndClient.node.settings()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        return null__    };returns,a,random,node,that,applies,to,the,given,predicate,the,predicate,can,filter,nodes,based,on,the,nodes,settings,if,all,nodes,are,filtered,out,this,method,will,return,code,null,code;public,synchronized,client,client,final,predicate,settings,filter,predicate,ensure,open,final,node,and,client,random,node,and,client,get,random,node,and,client,node,and,client,filter,predicate,test,node,and,client,node,settings,if,random,node,and,client,null,return,random,node,and,client,client,random,return,null
InternalTestCluster -> public synchronized Client client(final Predicate<Settings> filterPredicate);1525162917;Returns a random node that applies to the given predicate._The predicate can filter nodes based on the nodes settings._If all nodes are filtered out this method will return <code>null</code>;public synchronized Client client(final Predicate<Settings> filterPredicate) {_        ensureOpen()__        final NodeAndClient randomNodeAndClient = getRandomNodeAndClient(nodeAndClient -> filterPredicate.test(nodeAndClient.node.settings()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        return null__    };returns,a,random,node,that,applies,to,the,given,predicate,the,predicate,can,filter,nodes,based,on,the,nodes,settings,if,all,nodes,are,filtered,out,this,method,will,return,code,null,code;public,synchronized,client,client,final,predicate,settings,filter,predicate,ensure,open,final,node,and,client,random,node,and,client,get,random,node,and,client,node,and,client,filter,predicate,test,node,and,client,node,settings,if,random,node,and,client,null,return,random,node,and,client,client,random,return,null
InternalTestCluster -> public synchronized Client client(final Predicate<Settings> filterPredicate);1527096592;Returns a random node that applies to the given predicate._The predicate can filter nodes based on the nodes settings._If all nodes are filtered out this method will return <code>null</code>;public synchronized Client client(final Predicate<Settings> filterPredicate) {_        ensureOpen()__        final NodeAndClient randomNodeAndClient = getRandomNodeAndClient(nodeAndClient -> filterPredicate.test(nodeAndClient.node.settings()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        return null__    };returns,a,random,node,that,applies,to,the,given,predicate,the,predicate,can,filter,nodes,based,on,the,nodes,settings,if,all,nodes,are,filtered,out,this,method,will,return,code,null,code;public,synchronized,client,client,final,predicate,settings,filter,predicate,ensure,open,final,node,and,client,random,node,and,client,get,random,node,and,client,node,and,client,filter,predicate,test,node,and,client,node,settings,if,random,node,and,client,null,return,random,node,and,client,client,random,return,null
InternalTestCluster -> public synchronized Client client(final Predicate<Settings> filterPredicate);1527152864;Returns a random node that applies to the given predicate._The predicate can filter nodes based on the nodes settings._If all nodes are filtered out this method will return <code>null</code>;public synchronized Client client(final Predicate<Settings> filterPredicate) {_        ensureOpen()__        final NodeAndClient randomNodeAndClient = getRandomNodeAndClient(nodeAndClient -> filterPredicate.test(nodeAndClient.node.settings()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        return null__    };returns,a,random,node,that,applies,to,the,given,predicate,the,predicate,can,filter,nodes,based,on,the,nodes,settings,if,all,nodes,are,filtered,out,this,method,will,return,code,null,code;public,synchronized,client,client,final,predicate,settings,filter,predicate,ensure,open,final,node,and,client,random,node,and,client,get,random,node,and,client,node,and,client,filter,predicate,test,node,and,client,node,settings,if,random,node,and,client,null,return,random,node,and,client,client,random,return,null
InternalTestCluster -> public synchronized Client client(final Predicate<Settings> filterPredicate);1529916081;Returns a random node that applies to the given predicate._The predicate can filter nodes based on the nodes settings._If all nodes are filtered out this method will return <code>null</code>;public synchronized Client client(final Predicate<Settings> filterPredicate) {_        ensureOpen()__        final NodeAndClient randomNodeAndClient = getRandomNodeAndClient(nodeAndClient -> filterPredicate.test(nodeAndClient.node.settings()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        return null__    };returns,a,random,node,that,applies,to,the,given,predicate,the,predicate,can,filter,nodes,based,on,the,nodes,settings,if,all,nodes,are,filtered,out,this,method,will,return,code,null,code;public,synchronized,client,client,final,predicate,settings,filter,predicate,ensure,open,final,node,and,client,random,node,and,client,get,random,node,and,client,node,and,client,filter,predicate,test,node,and,client,node,settings,if,random,node,and,client,null,return,random,node,and,client,client,random,return,null
InternalTestCluster -> public synchronized Client client(final Predicate<Settings> filterPredicate);1531179852;Returns a random node that applies to the given predicate._The predicate can filter nodes based on the nodes settings._If all nodes are filtered out this method will return <code>null</code>;public synchronized Client client(final Predicate<Settings> filterPredicate) {_        ensureOpen()__        final NodeAndClient randomNodeAndClient = getRandomNodeAndClient(nodeAndClient -> filterPredicate.test(nodeAndClient.node.settings()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        return null__    };returns,a,random,node,that,applies,to,the,given,predicate,the,predicate,can,filter,nodes,based,on,the,nodes,settings,if,all,nodes,are,filtered,out,this,method,will,return,code,null,code;public,synchronized,client,client,final,predicate,settings,filter,predicate,ensure,open,final,node,and,client,random,node,and,client,get,random,node,and,client,node,and,client,filter,predicate,test,node,and,client,node,settings,if,random,node,and,client,null,return,random,node,and,client,client,random,return,null
InternalTestCluster -> public synchronized Client client(final Predicate<Settings> filterPredicate);1531729807;Returns a random node that applies to the given predicate._The predicate can filter nodes based on the nodes settings._If all nodes are filtered out this method will return <code>null</code>;public synchronized Client client(final Predicate<Settings> filterPredicate) {_        ensureOpen()__        final NodeAndClient randomNodeAndClient = getRandomNodeAndClient(nodeAndClient -> filterPredicate.test(nodeAndClient.node.settings()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        return null__    };returns,a,random,node,that,applies,to,the,given,predicate,the,predicate,can,filter,nodes,based,on,the,nodes,settings,if,all,nodes,are,filtered,out,this,method,will,return,code,null,code;public,synchronized,client,client,final,predicate,settings,filter,predicate,ensure,open,final,node,and,client,random,node,and,client,get,random,node,and,client,node,and,client,filter,predicate,test,node,and,client,node,settings,if,random,node,and,client,null,return,random,node,and,client,client,random,return,null
InternalTestCluster -> public synchronized Client client(final Predicate<Settings> filterPredicate);1533738061;Returns a random node that applies to the given predicate._The predicate can filter nodes based on the nodes settings._If all nodes are filtered out this method will return <code>null</code>;public synchronized Client client(final Predicate<Settings> filterPredicate) {_        ensureOpen()__        final NodeAndClient randomNodeAndClient = getRandomNodeAndClient(nodeAndClient -> filterPredicate.test(nodeAndClient.node.settings()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        return null__    };returns,a,random,node,that,applies,to,the,given,predicate,the,predicate,can,filter,nodes,based,on,the,nodes,settings,if,all,nodes,are,filtered,out,this,method,will,return,code,null,code;public,synchronized,client,client,final,predicate,settings,filter,predicate,ensure,open,final,node,and,client,random,node,and,client,get,random,node,and,client,node,and,client,filter,predicate,test,node,and,client,node,settings,if,random,node,and,client,null,return,random,node,and,client,client,random,return,null
InternalTestCluster -> public synchronized Client client(final Predicate<Settings> filterPredicate);1534362961;Returns a random node that applies to the given predicate._The predicate can filter nodes based on the nodes settings._If all nodes are filtered out this method will return <code>null</code>;public synchronized Client client(final Predicate<Settings> filterPredicate) {_        ensureOpen()__        final NodeAndClient randomNodeAndClient = getRandomNodeAndClient(nodeAndClient -> filterPredicate.test(nodeAndClient.node.settings()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        return null__    };returns,a,random,node,that,applies,to,the,given,predicate,the,predicate,can,filter,nodes,based,on,the,nodes,settings,if,all,nodes,are,filtered,out,this,method,will,return,code,null,code;public,synchronized,client,client,final,predicate,settings,filter,predicate,ensure,open,final,node,and,client,random,node,and,client,get,random,node,and,client,node,and,client,filter,predicate,test,node,and,client,node,settings,if,random,node,and,client,null,return,random,node,and,client,client,random,return,null
InternalTestCluster -> public synchronized Client client(final Predicate<Settings> filterPredicate);1535723122;Returns a random node that applies to the given predicate._The predicate can filter nodes based on the nodes settings._If all nodes are filtered out this method will return <code>null</code>;public synchronized Client client(final Predicate<Settings> filterPredicate) {_        ensureOpen()__        final NodeAndClient randomNodeAndClient = getRandomNodeAndClient(nodeAndClient -> filterPredicate.test(nodeAndClient.node.settings()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        return null__    };returns,a,random,node,that,applies,to,the,given,predicate,the,predicate,can,filter,nodes,based,on,the,nodes,settings,if,all,nodes,are,filtered,out,this,method,will,return,code,null,code;public,synchronized,client,client,final,predicate,settings,filter,predicate,ensure,open,final,node,and,client,random,node,and,client,get,random,node,and,client,node,and,client,filter,predicate,test,node,and,client,node,settings,if,random,node,and,client,null,return,random,node,and,client,client,random,return,null
InternalTestCluster -> public synchronized Client client(final Predicate<Settings> filterPredicate);1536137328;Returns a random node that applies to the given predicate._The predicate can filter nodes based on the nodes settings._If all nodes are filtered out this method will return <code>null</code>;public synchronized Client client(final Predicate<Settings> filterPredicate) {_        ensureOpen()__        final NodeAndClient randomNodeAndClient = getRandomNodeAndClient(nodeAndClient -> filterPredicate.test(nodeAndClient.node.settings()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        return null__    };returns,a,random,node,that,applies,to,the,given,predicate,the,predicate,can,filter,nodes,based,on,the,nodes,settings,if,all,nodes,are,filtered,out,this,method,will,return,code,null,code;public,synchronized,client,client,final,predicate,settings,filter,predicate,ensure,open,final,node,and,client,random,node,and,client,get,random,node,and,client,node,and,client,filter,predicate,test,node,and,client,node,settings,if,random,node,and,client,null,return,random,node,and,client,client,random,return,null
InternalTestCluster -> public synchronized Client client(final Predicate<Settings> filterPredicate);1536828374;Returns a random node that applies to the given predicate._The predicate can filter nodes based on the nodes settings._If all nodes are filtered out this method will return <code>null</code>;public synchronized Client client(final Predicate<Settings> filterPredicate) {_        ensureOpen()__        final NodeAndClient randomNodeAndClient = getRandomNodeAndClient(nodeAndClient -> filterPredicate.test(nodeAndClient.node.settings()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        return null__    };returns,a,random,node,that,applies,to,the,given,predicate,the,predicate,can,filter,nodes,based,on,the,nodes,settings,if,all,nodes,are,filtered,out,this,method,will,return,code,null,code;public,synchronized,client,client,final,predicate,settings,filter,predicate,ensure,open,final,node,and,client,random,node,and,client,get,random,node,and,client,node,and,client,filter,predicate,test,node,and,client,node,settings,if,random,node,and,client,null,return,random,node,and,client,client,random,return,null
InternalTestCluster -> public synchronized Client client(final Predicate<Settings> filterPredicate);1537806831;Returns a random node that applies to the given predicate._The predicate can filter nodes based on the nodes settings._If all nodes are filtered out this method will return <code>null</code>;public synchronized Client client(final Predicate<Settings> filterPredicate) {_        ensureOpen()__        final NodeAndClient randomNodeAndClient =_                getRandomNodeAndClient(nodeAndClient -> filterPredicate.test(nodeAndClient.node.settings()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        return null__    };returns,a,random,node,that,applies,to,the,given,predicate,the,predicate,can,filter,nodes,based,on,the,nodes,settings,if,all,nodes,are,filtered,out,this,method,will,return,code,null,code;public,synchronized,client,client,final,predicate,settings,filter,predicate,ensure,open,final,node,and,client,random,node,and,client,get,random,node,and,client,node,and,client,filter,predicate,test,node,and,client,node,settings,if,random,node,and,client,null,return,random,node,and,client,client,random,return,null
InternalTestCluster -> public synchronized Client client(final Predicate<Settings> filterPredicate);1538067637;Returns a random node that applies to the given predicate._The predicate can filter nodes based on the nodes settings._If all nodes are filtered out this method will return <code>null</code>;public synchronized Client client(final Predicate<Settings> filterPredicate) {_        ensureOpen()__        final NodeAndClient randomNodeAndClient =_                getRandomNodeAndClient(nodeAndClient -> filterPredicate.test(nodeAndClient.node.settings()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        return null__    };returns,a,random,node,that,applies,to,the,given,predicate,the,predicate,can,filter,nodes,based,on,the,nodes,settings,if,all,nodes,are,filtered,out,this,method,will,return,code,null,code;public,synchronized,client,client,final,predicate,settings,filter,predicate,ensure,open,final,node,and,client,random,node,and,client,get,random,node,and,client,node,and,client,filter,predicate,test,node,and,client,node,settings,if,random,node,and,client,null,return,random,node,and,client,client,random,return,null
InternalTestCluster -> public synchronized Client client(final Predicate<Settings> filterPredicate);1539723533;Returns a random node that applies to the given predicate._The predicate can filter nodes based on the nodes settings._If all nodes are filtered out this method will return <code>null</code>;public synchronized Client client(final Predicate<Settings> filterPredicate) {_        ensureOpen()__        final NodeAndClient randomNodeAndClient =_                getRandomNodeAndClient(nodeAndClient -> filterPredicate.test(nodeAndClient.node.settings()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        return null__    };returns,a,random,node,that,applies,to,the,given,predicate,the,predicate,can,filter,nodes,based,on,the,nodes,settings,if,all,nodes,are,filtered,out,this,method,will,return,code,null,code;public,synchronized,client,client,final,predicate,settings,filter,predicate,ensure,open,final,node,and,client,random,node,and,client,get,random,node,and,client,node,and,client,filter,predicate,test,node,and,client,node,settings,if,random,node,and,client,null,return,random,node,and,client,client,random,return,null
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1524684173;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1525162917;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1527096592;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1527152864;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1529916081;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1531179852;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1531729807;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1533738061;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1534362961;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1535723122;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1536137328;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1536828374;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1537806831;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1538067637;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1539723533;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1539815831;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1540486836;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1541092382;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1541208696;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1542198296;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1544081506;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1544221624;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1544254415;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1544544737;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1544823664;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1545156327;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1545222364;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1545315633;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1547245564;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1547496886;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1547497728;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1547825802;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1548160032;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1548878955;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1549017271;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1549094096;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1549291259;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1549386680;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1549388544;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1549452878;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1549898480;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1550570542;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1550755200;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> RestartCallback -> public boolean clearData(String nodeName);1550761203;If this returns <code>true</code> all data for the node with the given node name will be cleared including_gateways and all index data. Returns <code>false</code> by default.;public boolean clearData(String nodeName) {_            return false__        };if,this,returns,code,true,code,all,data,for,the,node,with,the,given,node,name,will,be,cleared,including,gateways,and,all,index,data,returns,code,false,code,by,default;public,boolean,clear,data,string,node,name,return,false
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1524684173;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1525162917;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1527096592;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1527152864;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1529916081;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1531179852;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1531729807;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1533738061;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1534362961;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1535723122;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1536137328;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1536828374;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1537806831;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1538067637;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1539723533;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1539815831;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1540486836;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1541092382;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1541208696;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1542198296;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1544081506;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1544221624;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1544254415;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1544544737;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1544823664;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1545156327;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1545222364;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1545315633;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1547245564;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1547496886;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1547497728;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1547825802;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1548160032;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1548878955;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1549017271;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1549094096;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1549291259;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1549386680;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1549388544;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1549452878;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1549898480;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized <T> Iterable<T> getInstances(Class<T> clazz);1550570542;Returns an Iterable to all instances for the given class &gt_T&lt_ across all nodes in the cluster.;public synchronized <T> Iterable<T> getInstances(Class<T> clazz) {_        List<T> instances = new ArrayList<>(nodes.size())__        for (NodeAndClient nodeAndClient : nodes.values()) {_            instances.add(getInstanceFromNode(clazz, nodeAndClient.node))__        }_        return instances__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,instances,class,t,clazz,list,t,instances,new,array,list,nodes,size,for,node,and,client,node,and,client,nodes,values,instances,add,get,instance,from,node,clazz,node,and,client,node,return,instances
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1524684173;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            nodeAndClient.closeNode()__            _            nodeAndClient.clearDataIfNeeded(callback)__            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        _        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("resetting node [{}] ", nodeAndClient.name)__            _            nodeAndClient.recreateNodeOnRestart(callback, false, autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1)__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,node,and,client,close,node,node,and,client,clear,data,if,needed,callback,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,resetting,node,node,and,client,name,node,and,client,recreate,node,on,restart,callback,false,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1525162917;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            nodeAndClient.closeNode()__            _            nodeAndClient.clearDataIfNeeded(callback)__            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        _        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("resetting node [{}] ", nodeAndClient.name)__            _            nodeAndClient.recreateNodeOnRestart(callback, false, autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1)__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,node,and,client,close,node,node,and,client,clear,data,if,needed,callback,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,resetting,node,node,and,client,name,node,and,client,recreate,node,on,restart,callback,false,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1527096592;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            nodeAndClient.closeNode()__            _            nodeAndClient.clearDataIfNeeded(callback)__            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        _        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("resetting node [{}] ", nodeAndClient.name)__            _            nodeAndClient.recreateNodeOnRestart(callback, false, autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1)__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,node,and,client,close,node,node,and,client,clear,data,if,needed,callback,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,resetting,node,node,and,client,name,node,and,client,recreate,node,on,restart,callback,false,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1527152864;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            nodeAndClient.closeNode()__            _            nodeAndClient.clearDataIfNeeded(callback)__            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        _        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("resetting node [{}] ", nodeAndClient.name)__            _            nodeAndClient.recreateNodeOnRestart(callback, false, autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1)__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,node,and,client,close,node,node,and,client,clear,data,if,needed,callback,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,resetting,node,node,and,client,name,node,and,client,recreate,node,on,restart,callback,false,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1529916081;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            nodeAndClient.closeNode()__            _            nodeAndClient.clearDataIfNeeded(callback)__            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        _        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("resetting node [{}] ", nodeAndClient.name)__            _            nodeAndClient.recreateNodeOnRestart(callback, false, autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1)__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,node,and,client,close,node,node,and,client,clear,data,if,needed,callback,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,resetting,node,node,and,client,name,node,and,client,recreate,node,on,restart,callback,false,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1531179852;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            nodeAndClient.closeNode()__            _            nodeAndClient.clearDataIfNeeded(callback)__            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        _        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("resetting node [{}] ", nodeAndClient.name)__            _            nodeAndClient.recreateNodeOnRestart(callback, false, autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1)__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,node,and,client,close,node,node,and,client,clear,data,if,needed,callback,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,resetting,node,node,and,client,name,node,and,client,recreate,node,on,restart,callback,false,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1531729807;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            nodeAndClient.closeNode()__            _            nodeAndClient.clearDataIfNeeded(callback)__            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        _        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("resetting node [{}] ", nodeAndClient.name)__            _            nodeAndClient.recreateNodeOnRestart(callback, false, autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1)__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,node,and,client,close,node,node,and,client,clear,data,if,needed,callback,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,resetting,node,node,and,client,name,node,and,client,recreate,node,on,restart,callback,false,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1533738061;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            nodeAndClient.closeNode()__            _            nodeAndClient.clearDataIfNeeded(callback)__            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        _        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("resetting node [{}] ", nodeAndClient.name)__            _            nodeAndClient.recreateNodeOnRestart(callback, false, autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1)__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,node,and,client,close,node,node,and,client,clear,data,if,needed,callback,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,resetting,node,node,and,client,name,node,and,client,recreate,node,on,restart,callback,false,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1534362961;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            nodeAndClient.closeNode()__            _            nodeAndClient.clearDataIfNeeded(callback)__            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        _        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("resetting node [{}] ", nodeAndClient.name)__            _            nodeAndClient.recreateNodeOnRestart(callback, false, autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1)__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,node,and,client,close,node,node,and,client,clear,data,if,needed,callback,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,resetting,node,node,and,client,name,node,and,client,recreate,node,on,restart,callback,false,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1535723122;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            nodeAndClient.closeNode()__            _            nodeAndClient.clearDataIfNeeded(callback)__            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        _        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("resetting node [{}] ", nodeAndClient.name)__            _            nodeAndClient.recreateNodeOnRestart(callback, false, autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1)__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,node,and,client,close,node,node,and,client,clear,data,if,needed,callback,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,resetting,node,node,and,client,name,node,and,client,recreate,node,on,restart,callback,false,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1536137328;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            nodeAndClient.closeNode()__            _            nodeAndClient.clearDataIfNeeded(callback)__            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        _        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("resetting node [{}] ", nodeAndClient.name)__            _            nodeAndClient.recreateNodeOnRestart(callback, false, autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1)__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,node,and,client,close,node,node,and,client,clear,data,if,needed,callback,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,resetting,node,node,and,client,name,node,and,client,recreate,node,on,restart,callback,false,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1536828374;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            nodeAndClient.closeNode()__            _            nodeAndClient.clearDataIfNeeded(callback)__            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("resetting node [{}] ", nodeAndClient.name)__            _            nodeAndClient.recreateNodeOnRestart(callback, false, autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1,_                () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,node,and,client,close,node,node,and,client,clear,data,if,needed,callback,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,resetting,node,node,and,client,name,node,and,client,recreate,node,on,restart,callback,false,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1537806831;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            nodeAndClient.closeNode()__            _            nodeAndClient.clearDataIfNeeded(callback)__            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("resetting node [{}] ", nodeAndClient.name)__            _            nodeAndClient.recreateNodeOnRestart(callback, false, autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1,_                () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,node,and,client,close,node,node,and,client,clear,data,if,needed,callback,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,resetting,node,node,and,client,name,node,and,client,recreate,node,on,restart,callback,false,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1538067637;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            nodeAndClient.closeNode()__            _            nodeAndClient.clearDataIfNeeded(callback)__            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("resetting node [{}] ", nodeAndClient.name)__            _            nodeAndClient.recreateNodeOnRestart(callback, false, autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1,_                () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,node,and,client,close,node,node,and,client,clear,data,if,needed,callback,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,resetting,node,node,and,client,name,node,and,client,recreate,node,on,restart,callback,false,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1539723533;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            nodeAndClient.closeNode()__            _            nodeAndClient.clearDataIfNeeded(callback)__            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("resetting node [{}] ", nodeAndClient.name)__            _            nodeAndClient.recreateNodeOnRestart(callback, false, autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1,_                () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,node,and,client,close,node,node,and,client,clear,data,if,needed,callback,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,resetting,node,node,and,client,name,node,and,client,recreate,node,on,restart,callback,false,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1539815831;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            nodeAndClient.closeNode()__            _            nodeAndClient.clearDataIfNeeded(callback)__            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("resetting node [{}] ", nodeAndClient.name)__            _            nodeAndClient.recreateNodeOnRestart(callback, false, autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1,_                () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,node,and,client,close,node,node,and,client,clear,data,if,needed,callback,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,resetting,node,node,and,client,name,node,and,client,recreate,node,on,restart,callback,false,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1540486836;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            nodeAndClient.closeNode()__            _            nodeAndClient.clearDataIfNeeded(callback)__            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("resetting node [{}] ", nodeAndClient.name)__            _            nodeAndClient.recreateNodeOnRestart(callback, false, autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1,_                () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,node,and,client,close,node,node,and,client,clear,data,if,needed,callback,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,resetting,node,node,and,client,name,node,and,client,recreate,node,on,restart,callback,false,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1541092382;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            nodeAndClient.closeNode()__            _            nodeAndClient.clearDataIfNeeded(callback)__            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("resetting node [{}] ", nodeAndClient.name)__            _            nodeAndClient.recreateNodeOnRestart(callback, false, autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1,_                () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,node,and,client,close,node,node,and,client,clear,data,if,needed,callback,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,resetting,node,node,and,client,name,node,and,client,recreate,node,on,restart,callback,false,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1541208696;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            nodeAndClient.closeNode()__            _            nodeAndClient.clearDataIfNeeded(callback)__            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("resetting node [{}] ", nodeAndClient.name)__            _            nodeAndClient.recreateNodeOnRestart(callback, false, autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1,_                () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,node,and,client,close,node,node,and,client,clear,data,if,needed,callback,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,resetting,node,node,and,client,name,node,and,client,recreate,node,on,restart,callback,false,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1542198296;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        final Settings[] newNodeSettings = new Settings[nextNodeId.get()]__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        final int minMasterNodes = autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping and resetting node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            final Settings newSettings = nodeAndClient.closeForRestart(callback, minMasterNodes)__            newNodeSettings[nodeAndClient.nodeAndClientId()] = newSettings__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId()] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("creating node [{}] ", nodeAndClient.name)__            nodeAndClient.recreateNode(newNodeSettings[nodeAndClient.nodeAndClientId()], () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,final,settings,new,node,settings,new,settings,next,node,id,get,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,final,int,min,master,nodes,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,and,resetting,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,final,settings,new,settings,node,and,client,close,for,restart,callback,min,master,nodes,new,node,settings,node,and,client,node,and,client,id,new,settings,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,creating,node,node,and,client,name,node,and,client,recreate,node,new,node,settings,node,and,client,node,and,client,id,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1544081506;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        final Settings[] newNodeSettings = new Settings[nextNodeId.get()]__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        final int minMasterNodes = autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping and resetting node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            final Settings newSettings = nodeAndClient.closeForRestart(callback, minMasterNodes)__            newNodeSettings[nodeAndClient.nodeAndClientId()] = newSettings__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId()] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("creating node [{}] ", nodeAndClient.name)__            nodeAndClient.recreateNode(newNodeSettings[nodeAndClient.nodeAndClientId()], () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,final,settings,new,node,settings,new,settings,next,node,id,get,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,final,int,min,master,nodes,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,and,resetting,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,final,settings,new,settings,node,and,client,close,for,restart,callback,min,master,nodes,new,node,settings,node,and,client,node,and,client,id,new,settings,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,creating,node,node,and,client,name,node,and,client,recreate,node,new,node,settings,node,and,client,node,and,client,id,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1544221624;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        final Settings[] newNodeSettings = new Settings[nextNodeId.get()]__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        final int minMasterNodes = autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping and resetting node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            final Settings newSettings = nodeAndClient.closeForRestart(callback, minMasterNodes)__            newNodeSettings[nodeAndClient.nodeAndClientId()] = newSettings__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId()] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("creating node [{}] ", nodeAndClient.name)__            nodeAndClient.recreateNode(newNodeSettings[nodeAndClient.nodeAndClientId()], () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,final,settings,new,node,settings,new,settings,next,node,id,get,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,final,int,min,master,nodes,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,and,resetting,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,final,settings,new,settings,node,and,client,close,for,restart,callback,min,master,nodes,new,node,settings,node,and,client,node,and,client,id,new,settings,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,creating,node,node,and,client,name,node,and,client,recreate,node,new,node,settings,node,and,client,node,and,client,id,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1544254415;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        final Settings[] newNodeSettings = new Settings[nextNodeId.get()]__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        final int minMasterNodes = autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping and resetting node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            final Settings newSettings = nodeAndClient.closeForRestart(callback, minMasterNodes)__            newNodeSettings[nodeAndClient.nodeAndClientId()] = newSettings__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId()] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("creating node [{}] ", nodeAndClient.name)__            nodeAndClient.recreateNode(newNodeSettings[nodeAndClient.nodeAndClientId()], () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,final,settings,new,node,settings,new,settings,next,node,id,get,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,final,int,min,master,nodes,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,and,resetting,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,final,settings,new,settings,node,and,client,close,for,restart,callback,min,master,nodes,new,node,settings,node,and,client,node,and,client,id,new,settings,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,creating,node,node,and,client,name,node,and,client,recreate,node,new,node,settings,node,and,client,node,and,client,id,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1544544737;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        final Settings[] newNodeSettings = new Settings[nextNodeId.get()]__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        final int minMasterNodes = autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping and resetting node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            final Settings newSettings = nodeAndClient.closeForRestart(callback, minMasterNodes)__            newNodeSettings[nodeAndClient.nodeAndClientId()] = newSettings__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId()] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("creating node [{}] ", nodeAndClient.name)__            nodeAndClient.recreateNode(newNodeSettings[nodeAndClient.nodeAndClientId()], () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,final,settings,new,node,settings,new,settings,next,node,id,get,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,final,int,min,master,nodes,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,and,resetting,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,final,settings,new,settings,node,and,client,close,for,restart,callback,min,master,nodes,new,node,settings,node,and,client,node,and,client,id,new,settings,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,creating,node,node,and,client,name,node,and,client,recreate,node,new,node,settings,node,and,client,node,and,client,id,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1544823664;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        final Settings[] newNodeSettings = new Settings[nextNodeId.get()]__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        final int minMasterNodes = autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping and resetting node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            final Settings newSettings = nodeAndClient.closeForRestart(callback, minMasterNodes)__            newNodeSettings[nodeAndClient.nodeAndClientId()] = newSettings__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId()] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("creating node [{}] ", nodeAndClient.name)__            nodeAndClient.recreateNode(newNodeSettings[nodeAndClient.nodeAndClientId()], () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,final,settings,new,node,settings,new,settings,next,node,id,get,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,final,int,min,master,nodes,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,and,resetting,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,final,settings,new,settings,node,and,client,close,for,restart,callback,min,master,nodes,new,node,settings,node,and,client,node,and,client,id,new,settings,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,creating,node,node,and,client,name,node,and,client,recreate,node,new,node,settings,node,and,client,node,and,client,id,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1545156327;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        final Settings[] newNodeSettings = new Settings[nextNodeId.get()]__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        final int minMasterNodes = autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping and resetting node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            final Settings newSettings = nodeAndClient.closeForRestart(callback, minMasterNodes)__            newNodeSettings[nodeAndClient.nodeAndClientId()] = newSettings__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId()] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("creating node [{}] ", nodeAndClient.name)__            nodeAndClient.recreateNode(newNodeSettings[nodeAndClient.nodeAndClientId()], () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,final,settings,new,node,settings,new,settings,next,node,id,get,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,final,int,min,master,nodes,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,and,resetting,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,final,settings,new,settings,node,and,client,close,for,restart,callback,min,master,nodes,new,node,settings,node,and,client,node,and,client,id,new,settings,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,creating,node,node,and,client,name,node,and,client,recreate,node,new,node,settings,node,and,client,node,and,client,id,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1545222364;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        final Settings[] newNodeSettings = new Settings[nextNodeId.get()]__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        final int minMasterNodes = autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping and resetting node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            final Settings newSettings = nodeAndClient.closeForRestart(callback, minMasterNodes)__            newNodeSettings[nodeAndClient.nodeAndClientId()] = newSettings__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId()] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("creating node [{}] ", nodeAndClient.name)__            nodeAndClient.recreateNode(newNodeSettings[nodeAndClient.nodeAndClientId()], () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,final,settings,new,node,settings,new,settings,next,node,id,get,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,final,int,min,master,nodes,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,and,resetting,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,final,settings,new,settings,node,and,client,close,for,restart,callback,min,master,nodes,new,node,settings,node,and,client,node,and,client,id,new,settings,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,creating,node,node,and,client,name,node,and,client,recreate,node,new,node,settings,node,and,client,node,and,client,id,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1545315633;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        final Settings[] newNodeSettings = new Settings[nextNodeId.get()]__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        final int minMasterNodes = autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping and resetting node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            final Settings newSettings = nodeAndClient.closeForRestart(callback, minMasterNodes)__            newNodeSettings[nodeAndClient.nodeAndClientId()] = newSettings__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId()] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("creating node [{}] ", nodeAndClient.name)__            nodeAndClient.recreateNode(newNodeSettings[nodeAndClient.nodeAndClientId()], () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,final,settings,new,node,settings,new,settings,next,node,id,get,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,final,int,min,master,nodes,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,and,resetting,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,final,settings,new,settings,node,and,client,close,for,restart,callback,min,master,nodes,new,node,settings,node,and,client,node,and,client,id,new,settings,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,creating,node,node,and,client,name,node,and,client,recreate,node,new,node,settings,node,and,client,node,and,client,id,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1547245564;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        final Settings[] newNodeSettings = new Settings[nextNodeId.get()]__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        final int minMasterNodes = autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping and resetting node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            final Settings newSettings = nodeAndClient.closeForRestart(callback, minMasterNodes)__            newNodeSettings[nodeAndClient.nodeAndClientId()] = newSettings__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId()] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("creating node [{}] ", nodeAndClient.name)__            nodeAndClient.recreateNode(newNodeSettings[nodeAndClient.nodeAndClientId()], () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,final,settings,new,node,settings,new,settings,next,node,id,get,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,final,int,min,master,nodes,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,and,resetting,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,final,settings,new,settings,node,and,client,close,for,restart,callback,min,master,nodes,new,node,settings,node,and,client,node,and,client,id,new,settings,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,creating,node,node,and,client,name,node,and,client,recreate,node,new,node,settings,node,and,client,node,and,client,id,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1547496886;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        final Settings[] newNodeSettings = new Settings[nextNodeId.get()]__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        final int minMasterNodes = autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping and resetting node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            final Settings newSettings = nodeAndClient.closeForRestart(callback, minMasterNodes)__            newNodeSettings[nodeAndClient.nodeAndClientId()] = newSettings__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId()] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("creating node [{}] ", nodeAndClient.name)__            nodeAndClient.recreateNode(newNodeSettings[nodeAndClient.nodeAndClientId()], () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,final,settings,new,node,settings,new,settings,next,node,id,get,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,final,int,min,master,nodes,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,and,resetting,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,final,settings,new,settings,node,and,client,close,for,restart,callback,min,master,nodes,new,node,settings,node,and,client,node,and,client,id,new,settings,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,creating,node,node,and,client,name,node,and,client,recreate,node,new,node,settings,node,and,client,node,and,client,id,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1547497728;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        final Settings[] newNodeSettings = new Settings[nextNodeId.get()]__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        final int minMasterNodes = autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping and resetting node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            final Settings newSettings = nodeAndClient.closeForRestart(callback, minMasterNodes)__            newNodeSettings[nodeAndClient.nodeAndClientId()] = newSettings__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId()] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("creating node [{}] ", nodeAndClient.name)__            nodeAndClient.recreateNode(newNodeSettings[nodeAndClient.nodeAndClientId()], () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,final,settings,new,node,settings,new,settings,next,node,id,get,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,final,int,min,master,nodes,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,and,resetting,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,final,settings,new,settings,node,and,client,close,for,restart,callback,min,master,nodes,new,node,settings,node,and,client,node,and,client,id,new,settings,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,creating,node,node,and,client,name,node,and,client,recreate,node,new,node,settings,node,and,client,node,and,client,id,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1547825802;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        final Settings[] newNodeSettings = new Settings[nextNodeId.get()]__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        final int minMasterNodes = autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping and resetting node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            final Settings newSettings = nodeAndClient.closeForRestart(callback, minMasterNodes)__            newNodeSettings[nodeAndClient.nodeAndClientId()] = newSettings__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId()] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("creating node [{}] ", nodeAndClient.name)__            nodeAndClient.recreateNode(newNodeSettings[nodeAndClient.nodeAndClientId()], () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,final,settings,new,node,settings,new,settings,next,node,id,get,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,final,int,min,master,nodes,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,and,resetting,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,final,settings,new,settings,node,and,client,close,for,restart,callback,min,master,nodes,new,node,settings,node,and,client,node,and,client,id,new,settings,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,creating,node,node,and,client,name,node,and,client,recreate,node,new,node,settings,node,and,client,node,and,client,id,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1548160032;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        final Settings[] newNodeSettings = new Settings[nextNodeId.get()]__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        final int minMasterNodes = autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping and resetting node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            final Settings newSettings = nodeAndClient.closeForRestart(callback, minMasterNodes)__            newNodeSettings[nodeAndClient.nodeAndClientId()] = newSettings__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId()] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("creating node [{}] ", nodeAndClient.name)__            nodeAndClient.recreateNode(newNodeSettings[nodeAndClient.nodeAndClientId()], () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,final,settings,new,node,settings,new,settings,next,node,id,get,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,final,int,min,master,nodes,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,and,resetting,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,final,settings,new,settings,node,and,client,close,for,restart,callback,min,master,nodes,new,node,settings,node,and,client,node,and,client,id,new,settings,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,creating,node,node,and,client,name,node,and,client,recreate,node,new,node,settings,node,and,client,node,and,client,id,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1548878955;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        final Settings[] newNodeSettings = new Settings[nextNodeId.get()]__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        final int minMasterNodes = autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping and resetting node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            final Settings newSettings = nodeAndClient.closeForRestart(callback, minMasterNodes)__            newNodeSettings[nodeAndClient.nodeAndClientId()] = newSettings__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId()] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("creating node [{}] ", nodeAndClient.name)__            nodeAndClient.recreateNode(newNodeSettings[nodeAndClient.nodeAndClientId()], () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,final,settings,new,node,settings,new,settings,next,node,id,get,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,final,int,min,master,nodes,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,and,resetting,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,final,settings,new,settings,node,and,client,close,for,restart,callback,min,master,nodes,new,node,settings,node,and,client,node,and,client,id,new,settings,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,creating,node,node,and,client,name,node,and,client,recreate,node,new,node,settings,node,and,client,node,and,client,id,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1549017271;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        final Settings[] newNodeSettings = new Settings[nextNodeId.get()]__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        final int minMasterNodes = autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping and resetting node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            final Settings newSettings = nodeAndClient.closeForRestart(callback, minMasterNodes)__            newNodeSettings[nodeAndClient.nodeAndClientId()] = newSettings__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId()] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("creating node [{}] ", nodeAndClient.name)__            nodeAndClient.recreateNode(newNodeSettings[nodeAndClient.nodeAndClientId()], () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,final,settings,new,node,settings,new,settings,next,node,id,get,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,final,int,min,master,nodes,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,and,resetting,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,final,settings,new,settings,node,and,client,close,for,restart,callback,min,master,nodes,new,node,settings,node,and,client,node,and,client,id,new,settings,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,creating,node,node,and,client,name,node,and,client,recreate,node,new,node,settings,node,and,client,node,and,client,id,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1549094096;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        final Settings[] newNodeSettings = new Settings[nextNodeId.get()]__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        final int minMasterNodes = autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping and resetting node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            final Settings newSettings = nodeAndClient.closeForRestart(callback, minMasterNodes)__            newNodeSettings[nodeAndClient.nodeAndClientId()] = newSettings__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId()] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("creating node [{}] ", nodeAndClient.name)__            nodeAndClient.recreateNode(newNodeSettings[nodeAndClient.nodeAndClientId()], () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,final,settings,new,node,settings,new,settings,next,node,id,get,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,final,int,min,master,nodes,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,and,resetting,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,final,settings,new,settings,node,and,client,close,for,restart,callback,min,master,nodes,new,node,settings,node,and,client,node,and,client,id,new,settings,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,creating,node,node,and,client,name,node,and,client,recreate,node,new,node,settings,node,and,client,node,and,client,id,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1549291259;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        final Settings[] newNodeSettings = new Settings[nextNodeId.get()]__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        final int minMasterNodes = autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping and resetting node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            final Settings newSettings = nodeAndClient.closeForRestart(callback, minMasterNodes)__            newNodeSettings[nodeAndClient.nodeAndClientId()] = newSettings__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId()] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("creating node [{}] ", nodeAndClient.name)__            nodeAndClient.recreateNode(newNodeSettings[nodeAndClient.nodeAndClientId()], () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,final,settings,new,node,settings,new,settings,next,node,id,get,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,final,int,min,master,nodes,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,and,resetting,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,final,settings,new,settings,node,and,client,close,for,restart,callback,min,master,nodes,new,node,settings,node,and,client,node,and,client,id,new,settings,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,creating,node,node,and,client,name,node,and,client,recreate,node,new,node,settings,node,and,client,node,and,client,id,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1549386680;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        final Settings[] newNodeSettings = new Settings[nextNodeId.get()]__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        final int minMasterNodes = autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping and resetting node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            final Settings newSettings = nodeAndClient.closeForRestart(callback, minMasterNodes)__            newNodeSettings[nodeAndClient.nodeAndClientId()] = newSettings__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId()] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("creating node [{}] ", nodeAndClient.name)__            nodeAndClient.recreateNode(newNodeSettings[nodeAndClient.nodeAndClientId()], () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,final,settings,new,node,settings,new,settings,next,node,id,get,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,final,int,min,master,nodes,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,and,resetting,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,final,settings,new,settings,node,and,client,close,for,restart,callback,min,master,nodes,new,node,settings,node,and,client,node,and,client,id,new,settings,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,creating,node,node,and,client,name,node,and,client,recreate,node,new,node,settings,node,and,client,node,and,client,id,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1549388544;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        final Settings[] newNodeSettings = new Settings[nextNodeId.get()]__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        final int minMasterNodes = autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping and resetting node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            final Settings newSettings = nodeAndClient.closeForRestart(callback, minMasterNodes)__            newNodeSettings[nodeAndClient.nodeAndClientId()] = newSettings__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId()] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("creating node [{}] ", nodeAndClient.name)__            nodeAndClient.recreateNode(newNodeSettings[nodeAndClient.nodeAndClientId()], () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,final,settings,new,node,settings,new,settings,next,node,id,get,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,final,int,min,master,nodes,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,and,resetting,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,final,settings,new,settings,node,and,client,close,for,restart,callback,min,master,nodes,new,node,settings,node,and,client,node,and,client,id,new,settings,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,creating,node,node,and,client,name,node,and,client,recreate,node,new,node,settings,node,and,client,node,and,client,id,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1549452878;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        final Settings[] newNodeSettings = new Settings[nextNodeId.get()]__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        final int minMasterNodes = autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping and resetting node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            final Settings newSettings = nodeAndClient.closeForRestart(callback, minMasterNodes)__            newNodeSettings[nodeAndClient.nodeAndClientId()] = newSettings__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId()] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("creating node [{}] ", nodeAndClient.name)__            nodeAndClient.recreateNode(newNodeSettings[nodeAndClient.nodeAndClientId()], () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,final,settings,new,node,settings,new,settings,next,node,id,get,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,final,int,min,master,nodes,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,and,resetting,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,final,settings,new,settings,node,and,client,close,for,restart,callback,min,master,nodes,new,node,settings,node,and,client,node,and,client,id,new,settings,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,creating,node,node,and,client,name,node,and,client,recreate,node,new,node,settings,node,and,client,node,and,client,id,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1549898480;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        final Settings[] newNodeSettings = new Settings[nextNodeId.get()]__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        final int minMasterNodes = autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping and resetting node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            final Settings newSettings = nodeAndClient.closeForRestart(callback, minMasterNodes)__            newNodeSettings[nodeAndClient.nodeAndClientId()] = newSettings__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId()] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("creating node [{}] ", nodeAndClient.name)__            nodeAndClient.recreateNode(newNodeSettings[nodeAndClient.nodeAndClientId()], () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,final,settings,new,node,settings,new,settings,next,node,id,get,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,final,int,min,master,nodes,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,and,resetting,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,final,settings,new,settings,node,and,client,close,for,restart,callback,min,master,nodes,new,node,settings,node,and,client,node,and,client,id,new,settings,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,creating,node,node,and,client,name,node,and,client,recreate,node,new,node,settings,node,and,client,node,and,client,id,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1550570542;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        final Settings[] newNodeSettings = new Settings[nextNodeId.get()]__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder =  new Set[nextNodeId.get()]__        final int minMasterNodes = autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping and resetting node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            final Settings newSettings = nodeAndClient.closeForRestart(callback, minMasterNodes)__            newNodeSettings[nodeAndClient.nodeAndClientId()] = newSettings__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId()] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().collect(Collectors.summingInt(List::size)) == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("creating node [{}] ", nodeAndClient.name)__            nodeAndClient.recreateNode(newNodeSettings[nodeAndClient.nodeAndClientId()], () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,final,settings,new,node,settings,new,settings,next,node,id,get,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,final,int,min,master,nodes,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,and,resetting,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,final,settings,new,settings,node,and,client,close,for,restart,callback,min,master,nodes,new,node,settings,node,and,client,node,and,client,id,new,settings,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,collect,collectors,summing,int,list,size,0,for,node,and,client,node,and,client,start,up,order,logger,info,creating,node,node,and,client,name,node,and,client,recreate,node,new,node,settings,node,and,client,node,and,client,id,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1550755200;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        final Settings[] newNodeSettings = new Settings[nextNodeId.get()]__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder = new Set[nextNodeId.get()]__        final int minMasterNodes = autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping and resetting node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            final Settings newSettings = nodeAndClient.closeForRestart(callback, minMasterNodes)__            newNodeSettings[nodeAndClient.nodeAndClientId()] = newSettings__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId()] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().mapToInt(List::size).sum() == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().mapToInt(List::size).sum() == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("creating node [{}] ", nodeAndClient.name)__            nodeAndClient.recreateNode(newNodeSettings[nodeAndClient.nodeAndClientId()], () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,final,settings,new,node,settings,new,settings,next,node,id,get,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,final,int,min,master,nodes,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,and,resetting,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,final,settings,new,settings,node,and,client,close,for,restart,callback,min,master,nodes,new,node,settings,node,and,client,node,and,client,id,new,settings,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,map,to,int,list,size,sum,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,map,to,int,list,size,sum,0,for,node,and,client,node,and,client,start,up,order,logger,info,creating,node,node,and,client,name,node,and,client,recreate,node,new,node,settings,node,and,client,node,and,client,id,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public synchronized void fullRestart(RestartCallback callback) throws Exception;1550761203;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public synchronized void fullRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        final Settings[] newNodeSettings = new Settings[nextNodeId.get()]__        Map<Set<Role>, List<NodeAndClient>> nodesByRoles = new HashMap<>()__        Set[] rolesOrderedByOriginalStartupOrder = new Set[nextNodeId.get()]__        final int minMasterNodes = autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            logger.info("Stopping and resetting node [{}] ", nodeAndClient.name)__            if (activeDisruptionScheme != null) {_                activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)__            }_            DiscoveryNode discoveryNode = getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode()__            final Settings newSettings = nodeAndClient.closeForRestart(callback, minMasterNodes)__            newNodeSettings[nodeAndClient.nodeAndClientId()] = newSettings__            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId()] = discoveryNode.getRoles()__            nodesByRoles.computeIfAbsent(discoveryNode.getRoles(), k -> new ArrayList<>()).add(nodeAndClient)__        }__        assert nodesByRoles.values().stream().mapToInt(List::size).sum() == nodes.size()___        _        _        _        _        for (List<NodeAndClient> sameRoleNodes : nodesByRoles.values()) {_            Collections.shuffle(sameRoleNodes, random)__        }_        final List<NodeAndClient> startUpOrder = new ArrayList<>()__        for (Set roles : rolesOrderedByOriginalStartupOrder) {_            if (roles == null) {_                _                continue__            }_            final List<NodeAndClient> nodesByRole = nodesByRoles.get(roles)__            startUpOrder.add(nodesByRole.remove(0))__        }_        assert nodesByRoles.values().stream().mapToInt(List::size).sum() == 0___        for (NodeAndClient nodeAndClient : startUpOrder) {_            logger.info("creating node [{}] ", nodeAndClient.name)__            nodeAndClient.recreateNode(newNodeSettings[nodeAndClient.nodeAndClientId()], () -> rebuildUnicastHostFiles(startUpOrder))__        }__        startAndPublishNodesAndClients(startUpOrder)___        if (callback.validateClusterForming()) {_            validateClusterFormed()__        }_    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,synchronized,void,full,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,final,settings,new,node,settings,new,settings,next,node,id,get,map,set,role,list,node,and,client,nodes,by,roles,new,hash,map,set,roles,ordered,by,original,startup,order,new,set,next,node,id,get,final,int,min,master,nodes,auto,manage,min,master,nodes,get,min,master,nodes,get,master,nodes,count,1,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,logger,info,stopping,and,resetting,node,node,and,client,name,if,active,disruption,scheme,null,active,disruption,scheme,remove,from,node,node,and,client,name,this,discovery,node,discovery,node,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,final,settings,new,settings,node,and,client,close,for,restart,callback,min,master,nodes,new,node,settings,node,and,client,node,and,client,id,new,settings,roles,ordered,by,original,startup,order,node,and,client,node,and,client,id,discovery,node,get,roles,nodes,by,roles,compute,if,absent,discovery,node,get,roles,k,new,array,list,add,node,and,client,assert,nodes,by,roles,values,stream,map,to,int,list,size,sum,nodes,size,for,list,node,and,client,same,role,nodes,nodes,by,roles,values,collections,shuffle,same,role,nodes,random,final,list,node,and,client,start,up,order,new,array,list,for,set,roles,roles,ordered,by,original,startup,order,if,roles,null,continue,final,list,node,and,client,nodes,by,role,nodes,by,roles,get,roles,start,up,order,add,nodes,by,role,remove,0,assert,nodes,by,roles,values,stream,map,to,int,list,size,sum,0,for,node,and,client,node,and,client,start,up,order,logger,info,creating,node,node,and,client,name,node,and,client,recreate,node,new,node,settings,node,and,client,node,and,client,id,rebuild,unicast,host,files,start,up,order,start,and,publish,nodes,and,clients,start,up,order,if,callback,validate,cluster,forming,validate,cluster,formed
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1524684173;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1525162917;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1527096592;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1527152864;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1529916081;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1531179852;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1531729807;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1533738061;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1534362961;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1535723122;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1536137328;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1536828374;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1537806831;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1538067637;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1539723533;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1539815831;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1540486836;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1541092382;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1541208696;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1542198296;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1544081506;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1544221624;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1544254415;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1544544737;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1544823664;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1545156327;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1545222364;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1545315633;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1547245564;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1547496886;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1547497728;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1547825802;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1548160032;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1548878955;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1549017271;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1549094096;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1549291259;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1549386680;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1549388544;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1549452878;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1549898480;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1550570542;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1550755200;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public void restartRandomDataNode() throws Exception;1550761203;Restarts a random data node in the cluster;public void restartRandomDataNode() throws Exception {_        restartRandomDataNode(EMPTY_CALLBACK)__    };restarts,a,random,data,node,in,the,cluster;public,void,restart,random,data,node,throws,exception,restart,random,data,node
InternalTestCluster -> public <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1550755200;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, DATA_NODE_PREDICATE.or(MASTER_NODE_PREDICATE))__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,or
InternalTestCluster -> public <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1550761203;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, DATA_NODE_PREDICATE.or(MASTER_NODE_PREDICATE))__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,or
InternalTestCluster -> public synchronized Client client(String nodeName);1524684173;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1525162917;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1527096592;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1527152864;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1529916081;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1531179852;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1531729807;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1533738061;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1534362961;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1535723122;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1536137328;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1536828374;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1537806831;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1538067637;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1539723533;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1539815831;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1540486836;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1541092382;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1541208696;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1542198296;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1544081506;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1544221624;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1544254415;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1544544737;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1544823664;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1545156327;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1545222364;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1545315633;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1547245564;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1547496886;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1547497728;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1547825802;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1548160032;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1548878955;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1549017271;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1549094096;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1549291259;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1549386680;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1549388544;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1549452878;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1549898480;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public synchronized Client client(String nodeName);1550570542;Returns a node client to a given node.;public synchronized Client client(String nodeName) {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        Assert.fail("No node found with name: [" + nodeName + "]")__        return null_ _    };returns,a,node,client,to,a,given,node;public,synchronized,client,client,string,node,name,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,assert,fail,no,node,found,with,name,node,name,return,null
InternalTestCluster -> public void assertSameDocIdsOnShards() throws Exception;1539723533;Asserts that all shards with the same shardId should have document Ids.;public void assertSameDocIdsOnShards() throws Exception {_        assertBusy(() -> {_            ClusterState state = client().admin().cluster().prepareState().get().getState()__            for (ObjectObjectCursor<String, IndexRoutingTable> indexRoutingTable : state.routingTable().indicesRouting()) {_                for (IntObjectCursor<IndexShardRoutingTable> indexShardRoutingTable : indexRoutingTable.value.shards()) {_                    ShardRouting primaryShardRouting = indexShardRoutingTable.value.primaryShard()__                    if (primaryShardRouting == null || primaryShardRouting.assignedToNode() == false) {_                        continue__                    }_                    DiscoveryNode primaryNode = state.nodes().get(primaryShardRouting.currentNodeId())__                    IndexShard primaryShard = getInstance(IndicesService.class, primaryNode.getName())_                        .indexServiceSafe(primaryShardRouting.index()).getShard(primaryShardRouting.id())__                    final List<DocIdSeqNoAndTerm> docsOnPrimary__                    try {_                        docsOnPrimary = IndexShardTestCase.getDocIdAndSeqNos(primaryShard)__                    } catch (AlreadyClosedException ex) {_                        continue__                    }_                    for (ShardRouting replicaShardRouting : indexShardRoutingTable.value.replicaShards()) {_                        if (replicaShardRouting.assignedToNode() == false) {_                            continue__                        }_                        DiscoveryNode replicaNode = state.nodes().get(replicaShardRouting.currentNodeId())__                        IndexShard replicaShard = getInstance(IndicesService.class, replicaNode.getName())_                            .indexServiceSafe(replicaShardRouting.index()).getShard(replicaShardRouting.id())__                        final List<DocIdSeqNoAndTerm> docsOnReplica__                        try {_                            docsOnReplica = IndexShardTestCase.getDocIdAndSeqNos(replicaShard)__                        } catch (AlreadyClosedException ex) {_                            continue__                        }_                        assertThat("out of sync shards: primary=[" + primaryShardRouting + "] num_docs_on_primary=[" + docsOnPrimary.size()_                                + "] vs replica=[" + replicaShardRouting + "] num_docs_on_replica=[" + docsOnReplica.size() + "]",_                            docsOnReplica, equalTo(docsOnPrimary))__                    }_                }_            }_        })__    };asserts,that,all,shards,with,the,same,shard,id,should,have,document,ids;public,void,assert,same,doc,ids,on,shards,throws,exception,assert,busy,cluster,state,state,client,admin,cluster,prepare,state,get,get,state,for,object,object,cursor,string,index,routing,table,index,routing,table,state,routing,table,indices,routing,for,int,object,cursor,index,shard,routing,table,index,shard,routing,table,index,routing,table,value,shards,shard,routing,primary,shard,routing,index,shard,routing,table,value,primary,shard,if,primary,shard,routing,null,primary,shard,routing,assigned,to,node,false,continue,discovery,node,primary,node,state,nodes,get,primary,shard,routing,current,node,id,index,shard,primary,shard,get,instance,indices,service,class,primary,node,get,name,index,service,safe,primary,shard,routing,index,get,shard,primary,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,primary,try,docs,on,primary,index,shard,test,case,get,doc,id,and,seq,nos,primary,shard,catch,already,closed,exception,ex,continue,for,shard,routing,replica,shard,routing,index,shard,routing,table,value,replica,shards,if,replica,shard,routing,assigned,to,node,false,continue,discovery,node,replica,node,state,nodes,get,replica,shard,routing,current,node,id,index,shard,replica,shard,get,instance,indices,service,class,replica,node,get,name,index,service,safe,replica,shard,routing,index,get,shard,replica,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,replica,try,docs,on,replica,index,shard,test,case,get,doc,id,and,seq,nos,replica,shard,catch,already,closed,exception,ex,continue,assert,that,out,of,sync,shards,primary,primary,shard,routing,docs,on,primary,size,vs,replica,replica,shard,routing,docs,on,replica,size,docs,on,replica,equal,to,docs,on,primary
InternalTestCluster -> public void assertSameDocIdsOnShards() throws Exception;1539815831;Asserts that all shards with the same shardId should have document Ids.;public void assertSameDocIdsOnShards() throws Exception {_        assertBusy(() -> {_            ClusterState state = client().admin().cluster().prepareState().get().getState()__            for (ObjectObjectCursor<String, IndexRoutingTable> indexRoutingTable : state.routingTable().indicesRouting()) {_                for (IntObjectCursor<IndexShardRoutingTable> indexShardRoutingTable : indexRoutingTable.value.shards()) {_                    ShardRouting primaryShardRouting = indexShardRoutingTable.value.primaryShard()__                    if (primaryShardRouting == null || primaryShardRouting.assignedToNode() == false) {_                        continue__                    }_                    DiscoveryNode primaryNode = state.nodes().get(primaryShardRouting.currentNodeId())__                    IndexShard primaryShard = getInstance(IndicesService.class, primaryNode.getName())_                        .indexServiceSafe(primaryShardRouting.index()).getShard(primaryShardRouting.id())__                    final List<DocIdSeqNoAndTerm> docsOnPrimary__                    try {_                        docsOnPrimary = IndexShardTestCase.getDocIdAndSeqNos(primaryShard)__                    } catch (AlreadyClosedException ex) {_                        continue__                    }_                    for (ShardRouting replicaShardRouting : indexShardRoutingTable.value.replicaShards()) {_                        if (replicaShardRouting.assignedToNode() == false) {_                            continue__                        }_                        DiscoveryNode replicaNode = state.nodes().get(replicaShardRouting.currentNodeId())__                        IndexShard replicaShard = getInstance(IndicesService.class, replicaNode.getName())_                            .indexServiceSafe(replicaShardRouting.index()).getShard(replicaShardRouting.id())__                        final List<DocIdSeqNoAndTerm> docsOnReplica__                        try {_                            docsOnReplica = IndexShardTestCase.getDocIdAndSeqNos(replicaShard)__                        } catch (AlreadyClosedException ex) {_                            continue__                        }_                        assertThat("out of sync shards: primary=[" + primaryShardRouting + "] num_docs_on_primary=[" + docsOnPrimary.size()_                                + "] vs replica=[" + replicaShardRouting + "] num_docs_on_replica=[" + docsOnReplica.size() + "]",_                            docsOnReplica, equalTo(docsOnPrimary))__                    }_                }_            }_        })__    };asserts,that,all,shards,with,the,same,shard,id,should,have,document,ids;public,void,assert,same,doc,ids,on,shards,throws,exception,assert,busy,cluster,state,state,client,admin,cluster,prepare,state,get,get,state,for,object,object,cursor,string,index,routing,table,index,routing,table,state,routing,table,indices,routing,for,int,object,cursor,index,shard,routing,table,index,shard,routing,table,index,routing,table,value,shards,shard,routing,primary,shard,routing,index,shard,routing,table,value,primary,shard,if,primary,shard,routing,null,primary,shard,routing,assigned,to,node,false,continue,discovery,node,primary,node,state,nodes,get,primary,shard,routing,current,node,id,index,shard,primary,shard,get,instance,indices,service,class,primary,node,get,name,index,service,safe,primary,shard,routing,index,get,shard,primary,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,primary,try,docs,on,primary,index,shard,test,case,get,doc,id,and,seq,nos,primary,shard,catch,already,closed,exception,ex,continue,for,shard,routing,replica,shard,routing,index,shard,routing,table,value,replica,shards,if,replica,shard,routing,assigned,to,node,false,continue,discovery,node,replica,node,state,nodes,get,replica,shard,routing,current,node,id,index,shard,replica,shard,get,instance,indices,service,class,replica,node,get,name,index,service,safe,replica,shard,routing,index,get,shard,replica,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,replica,try,docs,on,replica,index,shard,test,case,get,doc,id,and,seq,nos,replica,shard,catch,already,closed,exception,ex,continue,assert,that,out,of,sync,shards,primary,primary,shard,routing,docs,on,primary,size,vs,replica,replica,shard,routing,docs,on,replica,size,docs,on,replica,equal,to,docs,on,primary
InternalTestCluster -> public void assertSameDocIdsOnShards() throws Exception;1540486836;Asserts that all shards with the same shardId should have document Ids.;public void assertSameDocIdsOnShards() throws Exception {_        assertBusy(() -> {_            ClusterState state = client().admin().cluster().prepareState().get().getState()__            for (ObjectObjectCursor<String, IndexRoutingTable> indexRoutingTable : state.routingTable().indicesRouting()) {_                for (IntObjectCursor<IndexShardRoutingTable> indexShardRoutingTable : indexRoutingTable.value.shards()) {_                    ShardRouting primaryShardRouting = indexShardRoutingTable.value.primaryShard()__                    if (primaryShardRouting == null || primaryShardRouting.assignedToNode() == false) {_                        continue__                    }_                    DiscoveryNode primaryNode = state.nodes().get(primaryShardRouting.currentNodeId())__                    IndexShard primaryShard = getInstance(IndicesService.class, primaryNode.getName())_                        .indexServiceSafe(primaryShardRouting.index()).getShard(primaryShardRouting.id())__                    final List<DocIdSeqNoAndTerm> docsOnPrimary__                    try {_                        docsOnPrimary = IndexShardTestCase.getDocIdAndSeqNos(primaryShard)__                    } catch (AlreadyClosedException ex) {_                        continue__                    }_                    for (ShardRouting replicaShardRouting : indexShardRoutingTable.value.replicaShards()) {_                        if (replicaShardRouting.assignedToNode() == false) {_                            continue__                        }_                        DiscoveryNode replicaNode = state.nodes().get(replicaShardRouting.currentNodeId())__                        IndexShard replicaShard = getInstance(IndicesService.class, replicaNode.getName())_                            .indexServiceSafe(replicaShardRouting.index()).getShard(replicaShardRouting.id())__                        final List<DocIdSeqNoAndTerm> docsOnReplica__                        try {_                            docsOnReplica = IndexShardTestCase.getDocIdAndSeqNos(replicaShard)__                        } catch (AlreadyClosedException ex) {_                            continue__                        }_                        assertThat("out of sync shards: primary=[" + primaryShardRouting + "] num_docs_on_primary=[" + docsOnPrimary.size()_                                + "] vs replica=[" + replicaShardRouting + "] num_docs_on_replica=[" + docsOnReplica.size() + "]",_                            docsOnReplica, equalTo(docsOnPrimary))__                    }_                }_            }_        })__    };asserts,that,all,shards,with,the,same,shard,id,should,have,document,ids;public,void,assert,same,doc,ids,on,shards,throws,exception,assert,busy,cluster,state,state,client,admin,cluster,prepare,state,get,get,state,for,object,object,cursor,string,index,routing,table,index,routing,table,state,routing,table,indices,routing,for,int,object,cursor,index,shard,routing,table,index,shard,routing,table,index,routing,table,value,shards,shard,routing,primary,shard,routing,index,shard,routing,table,value,primary,shard,if,primary,shard,routing,null,primary,shard,routing,assigned,to,node,false,continue,discovery,node,primary,node,state,nodes,get,primary,shard,routing,current,node,id,index,shard,primary,shard,get,instance,indices,service,class,primary,node,get,name,index,service,safe,primary,shard,routing,index,get,shard,primary,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,primary,try,docs,on,primary,index,shard,test,case,get,doc,id,and,seq,nos,primary,shard,catch,already,closed,exception,ex,continue,for,shard,routing,replica,shard,routing,index,shard,routing,table,value,replica,shards,if,replica,shard,routing,assigned,to,node,false,continue,discovery,node,replica,node,state,nodes,get,replica,shard,routing,current,node,id,index,shard,replica,shard,get,instance,indices,service,class,replica,node,get,name,index,service,safe,replica,shard,routing,index,get,shard,replica,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,replica,try,docs,on,replica,index,shard,test,case,get,doc,id,and,seq,nos,replica,shard,catch,already,closed,exception,ex,continue,assert,that,out,of,sync,shards,primary,primary,shard,routing,docs,on,primary,size,vs,replica,replica,shard,routing,docs,on,replica,size,docs,on,replica,equal,to,docs,on,primary
InternalTestCluster -> public void assertSameDocIdsOnShards() throws Exception;1541092382;Asserts that all shards with the same shardId should have document Ids.;public void assertSameDocIdsOnShards() throws Exception {_        assertBusy(() -> {_            ClusterState state = client().admin().cluster().prepareState().get().getState()__            for (ObjectObjectCursor<String, IndexRoutingTable> indexRoutingTable : state.routingTable().indicesRouting()) {_                for (IntObjectCursor<IndexShardRoutingTable> indexShardRoutingTable : indexRoutingTable.value.shards()) {_                    ShardRouting primaryShardRouting = indexShardRoutingTable.value.primaryShard()__                    if (primaryShardRouting == null || primaryShardRouting.assignedToNode() == false) {_                        continue__                    }_                    DiscoveryNode primaryNode = state.nodes().get(primaryShardRouting.currentNodeId())__                    IndexShard primaryShard = getInstance(IndicesService.class, primaryNode.getName())_                        .indexServiceSafe(primaryShardRouting.index()).getShard(primaryShardRouting.id())__                    final List<DocIdSeqNoAndTerm> docsOnPrimary__                    try {_                        docsOnPrimary = IndexShardTestCase.getDocIdAndSeqNos(primaryShard)__                    } catch (AlreadyClosedException ex) {_                        continue__                    }_                    for (ShardRouting replicaShardRouting : indexShardRoutingTable.value.replicaShards()) {_                        if (replicaShardRouting.assignedToNode() == false) {_                            continue__                        }_                        DiscoveryNode replicaNode = state.nodes().get(replicaShardRouting.currentNodeId())__                        IndexShard replicaShard = getInstance(IndicesService.class, replicaNode.getName())_                            .indexServiceSafe(replicaShardRouting.index()).getShard(replicaShardRouting.id())__                        final List<DocIdSeqNoAndTerm> docsOnReplica__                        try {_                            docsOnReplica = IndexShardTestCase.getDocIdAndSeqNos(replicaShard)__                        } catch (AlreadyClosedException ex) {_                            continue__                        }_                        assertThat("out of sync shards: primary=[" + primaryShardRouting + "] num_docs_on_primary=[" + docsOnPrimary.size()_                                + "] vs replica=[" + replicaShardRouting + "] num_docs_on_replica=[" + docsOnReplica.size() + "]",_                            docsOnReplica, equalTo(docsOnPrimary))__                    }_                }_            }_        })__    };asserts,that,all,shards,with,the,same,shard,id,should,have,document,ids;public,void,assert,same,doc,ids,on,shards,throws,exception,assert,busy,cluster,state,state,client,admin,cluster,prepare,state,get,get,state,for,object,object,cursor,string,index,routing,table,index,routing,table,state,routing,table,indices,routing,for,int,object,cursor,index,shard,routing,table,index,shard,routing,table,index,routing,table,value,shards,shard,routing,primary,shard,routing,index,shard,routing,table,value,primary,shard,if,primary,shard,routing,null,primary,shard,routing,assigned,to,node,false,continue,discovery,node,primary,node,state,nodes,get,primary,shard,routing,current,node,id,index,shard,primary,shard,get,instance,indices,service,class,primary,node,get,name,index,service,safe,primary,shard,routing,index,get,shard,primary,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,primary,try,docs,on,primary,index,shard,test,case,get,doc,id,and,seq,nos,primary,shard,catch,already,closed,exception,ex,continue,for,shard,routing,replica,shard,routing,index,shard,routing,table,value,replica,shards,if,replica,shard,routing,assigned,to,node,false,continue,discovery,node,replica,node,state,nodes,get,replica,shard,routing,current,node,id,index,shard,replica,shard,get,instance,indices,service,class,replica,node,get,name,index,service,safe,replica,shard,routing,index,get,shard,replica,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,replica,try,docs,on,replica,index,shard,test,case,get,doc,id,and,seq,nos,replica,shard,catch,already,closed,exception,ex,continue,assert,that,out,of,sync,shards,primary,primary,shard,routing,docs,on,primary,size,vs,replica,replica,shard,routing,docs,on,replica,size,docs,on,replica,equal,to,docs,on,primary
InternalTestCluster -> public void assertSameDocIdsOnShards() throws Exception;1541208696;Asserts that all shards with the same shardId should have document Ids.;public void assertSameDocIdsOnShards() throws Exception {_        assertBusy(() -> {_            ClusterState state = client().admin().cluster().prepareState().get().getState()__            for (ObjectObjectCursor<String, IndexRoutingTable> indexRoutingTable : state.routingTable().indicesRouting()) {_                for (IntObjectCursor<IndexShardRoutingTable> indexShardRoutingTable : indexRoutingTable.value.shards()) {_                    ShardRouting primaryShardRouting = indexShardRoutingTable.value.primaryShard()__                    if (primaryShardRouting == null || primaryShardRouting.assignedToNode() == false) {_                        continue__                    }_                    DiscoveryNode primaryNode = state.nodes().get(primaryShardRouting.currentNodeId())__                    IndexShard primaryShard = getInstance(IndicesService.class, primaryNode.getName())_                        .indexServiceSafe(primaryShardRouting.index()).getShard(primaryShardRouting.id())__                    final List<DocIdSeqNoAndTerm> docsOnPrimary__                    try {_                        docsOnPrimary = IndexShardTestCase.getDocIdAndSeqNos(primaryShard)__                    } catch (AlreadyClosedException ex) {_                        continue__                    }_                    for (ShardRouting replicaShardRouting : indexShardRoutingTable.value.replicaShards()) {_                        if (replicaShardRouting.assignedToNode() == false) {_                            continue__                        }_                        DiscoveryNode replicaNode = state.nodes().get(replicaShardRouting.currentNodeId())__                        IndexShard replicaShard = getInstance(IndicesService.class, replicaNode.getName())_                            .indexServiceSafe(replicaShardRouting.index()).getShard(replicaShardRouting.id())__                        final List<DocIdSeqNoAndTerm> docsOnReplica__                        try {_                            docsOnReplica = IndexShardTestCase.getDocIdAndSeqNos(replicaShard)__                        } catch (AlreadyClosedException ex) {_                            continue__                        }_                        assertThat("out of sync shards: primary=[" + primaryShardRouting + "] num_docs_on_primary=[" + docsOnPrimary.size()_                                + "] vs replica=[" + replicaShardRouting + "] num_docs_on_replica=[" + docsOnReplica.size() + "]",_                            docsOnReplica, equalTo(docsOnPrimary))__                    }_                }_            }_        })__    };asserts,that,all,shards,with,the,same,shard,id,should,have,document,ids;public,void,assert,same,doc,ids,on,shards,throws,exception,assert,busy,cluster,state,state,client,admin,cluster,prepare,state,get,get,state,for,object,object,cursor,string,index,routing,table,index,routing,table,state,routing,table,indices,routing,for,int,object,cursor,index,shard,routing,table,index,shard,routing,table,index,routing,table,value,shards,shard,routing,primary,shard,routing,index,shard,routing,table,value,primary,shard,if,primary,shard,routing,null,primary,shard,routing,assigned,to,node,false,continue,discovery,node,primary,node,state,nodes,get,primary,shard,routing,current,node,id,index,shard,primary,shard,get,instance,indices,service,class,primary,node,get,name,index,service,safe,primary,shard,routing,index,get,shard,primary,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,primary,try,docs,on,primary,index,shard,test,case,get,doc,id,and,seq,nos,primary,shard,catch,already,closed,exception,ex,continue,for,shard,routing,replica,shard,routing,index,shard,routing,table,value,replica,shards,if,replica,shard,routing,assigned,to,node,false,continue,discovery,node,replica,node,state,nodes,get,replica,shard,routing,current,node,id,index,shard,replica,shard,get,instance,indices,service,class,replica,node,get,name,index,service,safe,replica,shard,routing,index,get,shard,replica,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,replica,try,docs,on,replica,index,shard,test,case,get,doc,id,and,seq,nos,replica,shard,catch,already,closed,exception,ex,continue,assert,that,out,of,sync,shards,primary,primary,shard,routing,docs,on,primary,size,vs,replica,replica,shard,routing,docs,on,replica,size,docs,on,replica,equal,to,docs,on,primary
InternalTestCluster -> public void assertSameDocIdsOnShards() throws Exception;1542198296;Asserts that all shards with the same shardId should have document Ids.;public void assertSameDocIdsOnShards() throws Exception {_        assertBusy(() -> {_            ClusterState state = client().admin().cluster().prepareState().get().getState()__            for (ObjectObjectCursor<String, IndexRoutingTable> indexRoutingTable : state.routingTable().indicesRouting()) {_                for (IntObjectCursor<IndexShardRoutingTable> indexShardRoutingTable : indexRoutingTable.value.shards()) {_                    ShardRouting primaryShardRouting = indexShardRoutingTable.value.primaryShard()__                    if (primaryShardRouting == null || primaryShardRouting.assignedToNode() == false) {_                        continue__                    }_                    DiscoveryNode primaryNode = state.nodes().get(primaryShardRouting.currentNodeId())__                    IndexShard primaryShard = getInstance(IndicesService.class, primaryNode.getName())_                        .indexServiceSafe(primaryShardRouting.index()).getShard(primaryShardRouting.id())__                    final List<DocIdSeqNoAndTerm> docsOnPrimary__                    try {_                        docsOnPrimary = IndexShardTestCase.getDocIdAndSeqNos(primaryShard)__                    } catch (AlreadyClosedException ex) {_                        continue__                    }_                    for (ShardRouting replicaShardRouting : indexShardRoutingTable.value.replicaShards()) {_                        if (replicaShardRouting.assignedToNode() == false) {_                            continue__                        }_                        DiscoveryNode replicaNode = state.nodes().get(replicaShardRouting.currentNodeId())__                        IndexShard replicaShard = getInstance(IndicesService.class, replicaNode.getName())_                            .indexServiceSafe(replicaShardRouting.index()).getShard(replicaShardRouting.id())__                        final List<DocIdSeqNoAndTerm> docsOnReplica__                        try {_                            docsOnReplica = IndexShardTestCase.getDocIdAndSeqNos(replicaShard)__                        } catch (AlreadyClosedException ex) {_                            continue__                        }_                        assertThat("out of sync shards: primary=[" + primaryShardRouting + "] num_docs_on_primary=[" + docsOnPrimary.size()_                                + "] vs replica=[" + replicaShardRouting + "] num_docs_on_replica=[" + docsOnReplica.size() + "]",_                            docsOnReplica, equalTo(docsOnPrimary))__                    }_                }_            }_        })__    };asserts,that,all,shards,with,the,same,shard,id,should,have,document,ids;public,void,assert,same,doc,ids,on,shards,throws,exception,assert,busy,cluster,state,state,client,admin,cluster,prepare,state,get,get,state,for,object,object,cursor,string,index,routing,table,index,routing,table,state,routing,table,indices,routing,for,int,object,cursor,index,shard,routing,table,index,shard,routing,table,index,routing,table,value,shards,shard,routing,primary,shard,routing,index,shard,routing,table,value,primary,shard,if,primary,shard,routing,null,primary,shard,routing,assigned,to,node,false,continue,discovery,node,primary,node,state,nodes,get,primary,shard,routing,current,node,id,index,shard,primary,shard,get,instance,indices,service,class,primary,node,get,name,index,service,safe,primary,shard,routing,index,get,shard,primary,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,primary,try,docs,on,primary,index,shard,test,case,get,doc,id,and,seq,nos,primary,shard,catch,already,closed,exception,ex,continue,for,shard,routing,replica,shard,routing,index,shard,routing,table,value,replica,shards,if,replica,shard,routing,assigned,to,node,false,continue,discovery,node,replica,node,state,nodes,get,replica,shard,routing,current,node,id,index,shard,replica,shard,get,instance,indices,service,class,replica,node,get,name,index,service,safe,replica,shard,routing,index,get,shard,replica,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,replica,try,docs,on,replica,index,shard,test,case,get,doc,id,and,seq,nos,replica,shard,catch,already,closed,exception,ex,continue,assert,that,out,of,sync,shards,primary,primary,shard,routing,docs,on,primary,size,vs,replica,replica,shard,routing,docs,on,replica,size,docs,on,replica,equal,to,docs,on,primary
InternalTestCluster -> public void assertSameDocIdsOnShards() throws Exception;1544081506;Asserts that all shards with the same shardId should have document Ids.;public void assertSameDocIdsOnShards() throws Exception {_        assertBusy(() -> {_            ClusterState state = client().admin().cluster().prepareState().get().getState()__            for (ObjectObjectCursor<String, IndexRoutingTable> indexRoutingTable : state.routingTable().indicesRouting()) {_                for (IntObjectCursor<IndexShardRoutingTable> indexShardRoutingTable : indexRoutingTable.value.shards()) {_                    ShardRouting primaryShardRouting = indexShardRoutingTable.value.primaryShard()__                    if (primaryShardRouting == null || primaryShardRouting.assignedToNode() == false) {_                        continue__                    }_                    DiscoveryNode primaryNode = state.nodes().get(primaryShardRouting.currentNodeId())__                    IndexShard primaryShard = getInstance(IndicesService.class, primaryNode.getName())_                        .indexServiceSafe(primaryShardRouting.index()).getShard(primaryShardRouting.id())__                    final List<DocIdSeqNoAndTerm> docsOnPrimary__                    try {_                        docsOnPrimary = IndexShardTestCase.getDocIdAndSeqNos(primaryShard)__                    } catch (AlreadyClosedException ex) {_                        continue__                    }_                    for (ShardRouting replicaShardRouting : indexShardRoutingTable.value.replicaShards()) {_                        if (replicaShardRouting.assignedToNode() == false) {_                            continue__                        }_                        DiscoveryNode replicaNode = state.nodes().get(replicaShardRouting.currentNodeId())__                        IndexShard replicaShard = getInstance(IndicesService.class, replicaNode.getName())_                            .indexServiceSafe(replicaShardRouting.index()).getShard(replicaShardRouting.id())__                        final List<DocIdSeqNoAndTerm> docsOnReplica__                        try {_                            docsOnReplica = IndexShardTestCase.getDocIdAndSeqNos(replicaShard)__                        } catch (AlreadyClosedException ex) {_                            continue__                        }_                        assertThat("out of sync shards: primary=[" + primaryShardRouting + "] num_docs_on_primary=[" + docsOnPrimary.size()_                                + "] vs replica=[" + replicaShardRouting + "] num_docs_on_replica=[" + docsOnReplica.size() + "]",_                            docsOnReplica, equalTo(docsOnPrimary))__                    }_                }_            }_        })__    };asserts,that,all,shards,with,the,same,shard,id,should,have,document,ids;public,void,assert,same,doc,ids,on,shards,throws,exception,assert,busy,cluster,state,state,client,admin,cluster,prepare,state,get,get,state,for,object,object,cursor,string,index,routing,table,index,routing,table,state,routing,table,indices,routing,for,int,object,cursor,index,shard,routing,table,index,shard,routing,table,index,routing,table,value,shards,shard,routing,primary,shard,routing,index,shard,routing,table,value,primary,shard,if,primary,shard,routing,null,primary,shard,routing,assigned,to,node,false,continue,discovery,node,primary,node,state,nodes,get,primary,shard,routing,current,node,id,index,shard,primary,shard,get,instance,indices,service,class,primary,node,get,name,index,service,safe,primary,shard,routing,index,get,shard,primary,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,primary,try,docs,on,primary,index,shard,test,case,get,doc,id,and,seq,nos,primary,shard,catch,already,closed,exception,ex,continue,for,shard,routing,replica,shard,routing,index,shard,routing,table,value,replica,shards,if,replica,shard,routing,assigned,to,node,false,continue,discovery,node,replica,node,state,nodes,get,replica,shard,routing,current,node,id,index,shard,replica,shard,get,instance,indices,service,class,replica,node,get,name,index,service,safe,replica,shard,routing,index,get,shard,replica,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,replica,try,docs,on,replica,index,shard,test,case,get,doc,id,and,seq,nos,replica,shard,catch,already,closed,exception,ex,continue,assert,that,out,of,sync,shards,primary,primary,shard,routing,docs,on,primary,size,vs,replica,replica,shard,routing,docs,on,replica,size,docs,on,replica,equal,to,docs,on,primary
InternalTestCluster -> public void assertSameDocIdsOnShards() throws Exception;1544221624;Asserts that all shards with the same shardId should have document Ids.;public void assertSameDocIdsOnShards() throws Exception {_        assertBusy(() -> {_            ClusterState state = client().admin().cluster().prepareState().get().getState()__            for (ObjectObjectCursor<String, IndexRoutingTable> indexRoutingTable : state.routingTable().indicesRouting()) {_                for (IntObjectCursor<IndexShardRoutingTable> indexShardRoutingTable : indexRoutingTable.value.shards()) {_                    ShardRouting primaryShardRouting = indexShardRoutingTable.value.primaryShard()__                    if (primaryShardRouting == null || primaryShardRouting.assignedToNode() == false) {_                        continue__                    }_                    DiscoveryNode primaryNode = state.nodes().get(primaryShardRouting.currentNodeId())__                    IndexShard primaryShard = getInstance(IndicesService.class, primaryNode.getName())_                        .indexServiceSafe(primaryShardRouting.index()).getShard(primaryShardRouting.id())__                    final List<DocIdSeqNoAndTerm> docsOnPrimary__                    try {_                        docsOnPrimary = IndexShardTestCase.getDocIdAndSeqNos(primaryShard)__                    } catch (AlreadyClosedException ex) {_                        continue__                    }_                    for (ShardRouting replicaShardRouting : indexShardRoutingTable.value.replicaShards()) {_                        if (replicaShardRouting.assignedToNode() == false) {_                            continue__                        }_                        DiscoveryNode replicaNode = state.nodes().get(replicaShardRouting.currentNodeId())__                        IndexShard replicaShard = getInstance(IndicesService.class, replicaNode.getName())_                            .indexServiceSafe(replicaShardRouting.index()).getShard(replicaShardRouting.id())__                        final List<DocIdSeqNoAndTerm> docsOnReplica__                        try {_                            docsOnReplica = IndexShardTestCase.getDocIdAndSeqNos(replicaShard)__                        } catch (AlreadyClosedException ex) {_                            continue__                        }_                        assertThat("out of sync shards: primary=[" + primaryShardRouting + "] num_docs_on_primary=[" + docsOnPrimary.size()_                                + "] vs replica=[" + replicaShardRouting + "] num_docs_on_replica=[" + docsOnReplica.size() + "]",_                            docsOnReplica, equalTo(docsOnPrimary))__                    }_                }_            }_        })__    };asserts,that,all,shards,with,the,same,shard,id,should,have,document,ids;public,void,assert,same,doc,ids,on,shards,throws,exception,assert,busy,cluster,state,state,client,admin,cluster,prepare,state,get,get,state,for,object,object,cursor,string,index,routing,table,index,routing,table,state,routing,table,indices,routing,for,int,object,cursor,index,shard,routing,table,index,shard,routing,table,index,routing,table,value,shards,shard,routing,primary,shard,routing,index,shard,routing,table,value,primary,shard,if,primary,shard,routing,null,primary,shard,routing,assigned,to,node,false,continue,discovery,node,primary,node,state,nodes,get,primary,shard,routing,current,node,id,index,shard,primary,shard,get,instance,indices,service,class,primary,node,get,name,index,service,safe,primary,shard,routing,index,get,shard,primary,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,primary,try,docs,on,primary,index,shard,test,case,get,doc,id,and,seq,nos,primary,shard,catch,already,closed,exception,ex,continue,for,shard,routing,replica,shard,routing,index,shard,routing,table,value,replica,shards,if,replica,shard,routing,assigned,to,node,false,continue,discovery,node,replica,node,state,nodes,get,replica,shard,routing,current,node,id,index,shard,replica,shard,get,instance,indices,service,class,replica,node,get,name,index,service,safe,replica,shard,routing,index,get,shard,replica,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,replica,try,docs,on,replica,index,shard,test,case,get,doc,id,and,seq,nos,replica,shard,catch,already,closed,exception,ex,continue,assert,that,out,of,sync,shards,primary,primary,shard,routing,docs,on,primary,size,vs,replica,replica,shard,routing,docs,on,replica,size,docs,on,replica,equal,to,docs,on,primary
InternalTestCluster -> public void assertSameDocIdsOnShards() throws Exception;1544254415;Asserts that all shards with the same shardId should have document Ids.;public void assertSameDocIdsOnShards() throws Exception {_        assertBusy(() -> {_            ClusterState state = client().admin().cluster().prepareState().get().getState()__            for (ObjectObjectCursor<String, IndexRoutingTable> indexRoutingTable : state.routingTable().indicesRouting()) {_                for (IntObjectCursor<IndexShardRoutingTable> indexShardRoutingTable : indexRoutingTable.value.shards()) {_                    ShardRouting primaryShardRouting = indexShardRoutingTable.value.primaryShard()__                    if (primaryShardRouting == null || primaryShardRouting.assignedToNode() == false) {_                        continue__                    }_                    DiscoveryNode primaryNode = state.nodes().get(primaryShardRouting.currentNodeId())__                    IndexShard primaryShard = getInstance(IndicesService.class, primaryNode.getName())_                        .indexServiceSafe(primaryShardRouting.index()).getShard(primaryShardRouting.id())__                    final List<DocIdSeqNoAndTerm> docsOnPrimary__                    try {_                        docsOnPrimary = IndexShardTestCase.getDocIdAndSeqNos(primaryShard)__                    } catch (AlreadyClosedException ex) {_                        continue__                    }_                    for (ShardRouting replicaShardRouting : indexShardRoutingTable.value.replicaShards()) {_                        if (replicaShardRouting.assignedToNode() == false) {_                            continue__                        }_                        DiscoveryNode replicaNode = state.nodes().get(replicaShardRouting.currentNodeId())__                        IndexShard replicaShard = getInstance(IndicesService.class, replicaNode.getName())_                            .indexServiceSafe(replicaShardRouting.index()).getShard(replicaShardRouting.id())__                        final List<DocIdSeqNoAndTerm> docsOnReplica__                        try {_                            docsOnReplica = IndexShardTestCase.getDocIdAndSeqNos(replicaShard)__                        } catch (AlreadyClosedException ex) {_                            continue__                        }_                        assertThat("out of sync shards: primary=[" + primaryShardRouting + "] num_docs_on_primary=[" + docsOnPrimary.size()_                                + "] vs replica=[" + replicaShardRouting + "] num_docs_on_replica=[" + docsOnReplica.size() + "]",_                            docsOnReplica, equalTo(docsOnPrimary))__                    }_                }_            }_        })__    };asserts,that,all,shards,with,the,same,shard,id,should,have,document,ids;public,void,assert,same,doc,ids,on,shards,throws,exception,assert,busy,cluster,state,state,client,admin,cluster,prepare,state,get,get,state,for,object,object,cursor,string,index,routing,table,index,routing,table,state,routing,table,indices,routing,for,int,object,cursor,index,shard,routing,table,index,shard,routing,table,index,routing,table,value,shards,shard,routing,primary,shard,routing,index,shard,routing,table,value,primary,shard,if,primary,shard,routing,null,primary,shard,routing,assigned,to,node,false,continue,discovery,node,primary,node,state,nodes,get,primary,shard,routing,current,node,id,index,shard,primary,shard,get,instance,indices,service,class,primary,node,get,name,index,service,safe,primary,shard,routing,index,get,shard,primary,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,primary,try,docs,on,primary,index,shard,test,case,get,doc,id,and,seq,nos,primary,shard,catch,already,closed,exception,ex,continue,for,shard,routing,replica,shard,routing,index,shard,routing,table,value,replica,shards,if,replica,shard,routing,assigned,to,node,false,continue,discovery,node,replica,node,state,nodes,get,replica,shard,routing,current,node,id,index,shard,replica,shard,get,instance,indices,service,class,replica,node,get,name,index,service,safe,replica,shard,routing,index,get,shard,replica,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,replica,try,docs,on,replica,index,shard,test,case,get,doc,id,and,seq,nos,replica,shard,catch,already,closed,exception,ex,continue,assert,that,out,of,sync,shards,primary,primary,shard,routing,docs,on,primary,size,vs,replica,replica,shard,routing,docs,on,replica,size,docs,on,replica,equal,to,docs,on,primary
InternalTestCluster -> public void assertSameDocIdsOnShards() throws Exception;1544544737;Asserts that all shards with the same shardId should have document Ids.;public void assertSameDocIdsOnShards() throws Exception {_        assertBusy(() -> {_            ClusterState state = client().admin().cluster().prepareState().get().getState()__            for (ObjectObjectCursor<String, IndexRoutingTable> indexRoutingTable : state.routingTable().indicesRouting()) {_                for (IntObjectCursor<IndexShardRoutingTable> indexShardRoutingTable : indexRoutingTable.value.shards()) {_                    ShardRouting primaryShardRouting = indexShardRoutingTable.value.primaryShard()__                    if (primaryShardRouting == null || primaryShardRouting.assignedToNode() == false) {_                        continue__                    }_                    DiscoveryNode primaryNode = state.nodes().get(primaryShardRouting.currentNodeId())__                    IndexShard primaryShard = getInstance(IndicesService.class, primaryNode.getName())_                        .indexServiceSafe(primaryShardRouting.index()).getShard(primaryShardRouting.id())__                    final List<DocIdSeqNoAndTerm> docsOnPrimary__                    try {_                        docsOnPrimary = IndexShardTestCase.getDocIdAndSeqNos(primaryShard)__                    } catch (AlreadyClosedException ex) {_                        continue__                    }_                    for (ShardRouting replicaShardRouting : indexShardRoutingTable.value.replicaShards()) {_                        if (replicaShardRouting.assignedToNode() == false) {_                            continue__                        }_                        DiscoveryNode replicaNode = state.nodes().get(replicaShardRouting.currentNodeId())__                        IndexShard replicaShard = getInstance(IndicesService.class, replicaNode.getName())_                            .indexServiceSafe(replicaShardRouting.index()).getShard(replicaShardRouting.id())__                        final List<DocIdSeqNoAndTerm> docsOnReplica__                        try {_                            docsOnReplica = IndexShardTestCase.getDocIdAndSeqNos(replicaShard)__                        } catch (AlreadyClosedException ex) {_                            continue__                        }_                        assertThat("out of sync shards: primary=[" + primaryShardRouting + "] num_docs_on_primary=[" + docsOnPrimary.size()_                                + "] vs replica=[" + replicaShardRouting + "] num_docs_on_replica=[" + docsOnReplica.size() + "]",_                            docsOnReplica, equalTo(docsOnPrimary))__                    }_                }_            }_        })__    };asserts,that,all,shards,with,the,same,shard,id,should,have,document,ids;public,void,assert,same,doc,ids,on,shards,throws,exception,assert,busy,cluster,state,state,client,admin,cluster,prepare,state,get,get,state,for,object,object,cursor,string,index,routing,table,index,routing,table,state,routing,table,indices,routing,for,int,object,cursor,index,shard,routing,table,index,shard,routing,table,index,routing,table,value,shards,shard,routing,primary,shard,routing,index,shard,routing,table,value,primary,shard,if,primary,shard,routing,null,primary,shard,routing,assigned,to,node,false,continue,discovery,node,primary,node,state,nodes,get,primary,shard,routing,current,node,id,index,shard,primary,shard,get,instance,indices,service,class,primary,node,get,name,index,service,safe,primary,shard,routing,index,get,shard,primary,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,primary,try,docs,on,primary,index,shard,test,case,get,doc,id,and,seq,nos,primary,shard,catch,already,closed,exception,ex,continue,for,shard,routing,replica,shard,routing,index,shard,routing,table,value,replica,shards,if,replica,shard,routing,assigned,to,node,false,continue,discovery,node,replica,node,state,nodes,get,replica,shard,routing,current,node,id,index,shard,replica,shard,get,instance,indices,service,class,replica,node,get,name,index,service,safe,replica,shard,routing,index,get,shard,replica,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,replica,try,docs,on,replica,index,shard,test,case,get,doc,id,and,seq,nos,replica,shard,catch,already,closed,exception,ex,continue,assert,that,out,of,sync,shards,primary,primary,shard,routing,docs,on,primary,size,vs,replica,replica,shard,routing,docs,on,replica,size,docs,on,replica,equal,to,docs,on,primary
InternalTestCluster -> public void assertSameDocIdsOnShards() throws Exception;1544823664;Asserts that all shards with the same shardId should have document Ids.;public void assertSameDocIdsOnShards() throws Exception {_        assertBusy(() -> {_            ClusterState state = client().admin().cluster().prepareState().get().getState()__            for (ObjectObjectCursor<String, IndexRoutingTable> indexRoutingTable : state.routingTable().indicesRouting()) {_                for (IntObjectCursor<IndexShardRoutingTable> indexShardRoutingTable : indexRoutingTable.value.shards()) {_                    ShardRouting primaryShardRouting = indexShardRoutingTable.value.primaryShard()__                    if (primaryShardRouting == null || primaryShardRouting.assignedToNode() == false) {_                        continue__                    }_                    DiscoveryNode primaryNode = state.nodes().get(primaryShardRouting.currentNodeId())__                    IndexShard primaryShard = getInstance(IndicesService.class, primaryNode.getName())_                        .indexServiceSafe(primaryShardRouting.index()).getShard(primaryShardRouting.id())__                    final List<DocIdSeqNoAndTerm> docsOnPrimary__                    try {_                        docsOnPrimary = IndexShardTestCase.getDocIdAndSeqNos(primaryShard)__                    } catch (AlreadyClosedException ex) {_                        continue__                    }_                    for (ShardRouting replicaShardRouting : indexShardRoutingTable.value.replicaShards()) {_                        if (replicaShardRouting.assignedToNode() == false) {_                            continue__                        }_                        DiscoveryNode replicaNode = state.nodes().get(replicaShardRouting.currentNodeId())__                        IndexShard replicaShard = getInstance(IndicesService.class, replicaNode.getName())_                            .indexServiceSafe(replicaShardRouting.index()).getShard(replicaShardRouting.id())__                        final List<DocIdSeqNoAndTerm> docsOnReplica__                        try {_                            docsOnReplica = IndexShardTestCase.getDocIdAndSeqNos(replicaShard)__                        } catch (AlreadyClosedException ex) {_                            continue__                        }_                        assertThat("out of sync shards: primary=[" + primaryShardRouting + "] num_docs_on_primary=[" + docsOnPrimary.size()_                                + "] vs replica=[" + replicaShardRouting + "] num_docs_on_replica=[" + docsOnReplica.size() + "]",_                            docsOnReplica, equalTo(docsOnPrimary))__                    }_                }_            }_        })__    };asserts,that,all,shards,with,the,same,shard,id,should,have,document,ids;public,void,assert,same,doc,ids,on,shards,throws,exception,assert,busy,cluster,state,state,client,admin,cluster,prepare,state,get,get,state,for,object,object,cursor,string,index,routing,table,index,routing,table,state,routing,table,indices,routing,for,int,object,cursor,index,shard,routing,table,index,shard,routing,table,index,routing,table,value,shards,shard,routing,primary,shard,routing,index,shard,routing,table,value,primary,shard,if,primary,shard,routing,null,primary,shard,routing,assigned,to,node,false,continue,discovery,node,primary,node,state,nodes,get,primary,shard,routing,current,node,id,index,shard,primary,shard,get,instance,indices,service,class,primary,node,get,name,index,service,safe,primary,shard,routing,index,get,shard,primary,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,primary,try,docs,on,primary,index,shard,test,case,get,doc,id,and,seq,nos,primary,shard,catch,already,closed,exception,ex,continue,for,shard,routing,replica,shard,routing,index,shard,routing,table,value,replica,shards,if,replica,shard,routing,assigned,to,node,false,continue,discovery,node,replica,node,state,nodes,get,replica,shard,routing,current,node,id,index,shard,replica,shard,get,instance,indices,service,class,replica,node,get,name,index,service,safe,replica,shard,routing,index,get,shard,replica,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,replica,try,docs,on,replica,index,shard,test,case,get,doc,id,and,seq,nos,replica,shard,catch,already,closed,exception,ex,continue,assert,that,out,of,sync,shards,primary,primary,shard,routing,docs,on,primary,size,vs,replica,replica,shard,routing,docs,on,replica,size,docs,on,replica,equal,to,docs,on,primary
InternalTestCluster -> public void assertSameDocIdsOnShards() throws Exception;1545156327;Asserts that all shards with the same shardId should have document Ids.;public void assertSameDocIdsOnShards() throws Exception {_        assertBusy(() -> {_            ClusterState state = client().admin().cluster().prepareState().get().getState()__            for (ObjectObjectCursor<String, IndexRoutingTable> indexRoutingTable : state.routingTable().indicesRouting()) {_                for (IntObjectCursor<IndexShardRoutingTable> indexShardRoutingTable : indexRoutingTable.value.shards()) {_                    ShardRouting primaryShardRouting = indexShardRoutingTable.value.primaryShard()__                    if (primaryShardRouting == null || primaryShardRouting.assignedToNode() == false) {_                        continue__                    }_                    DiscoveryNode primaryNode = state.nodes().get(primaryShardRouting.currentNodeId())__                    IndexShard primaryShard = getInstance(IndicesService.class, primaryNode.getName())_                        .indexServiceSafe(primaryShardRouting.index()).getShard(primaryShardRouting.id())__                    final List<DocIdSeqNoAndTerm> docsOnPrimary__                    try {_                        docsOnPrimary = IndexShardTestCase.getDocIdAndSeqNos(primaryShard)__                    } catch (AlreadyClosedException ex) {_                        continue__                    }_                    for (ShardRouting replicaShardRouting : indexShardRoutingTable.value.replicaShards()) {_                        if (replicaShardRouting.assignedToNode() == false) {_                            continue__                        }_                        DiscoveryNode replicaNode = state.nodes().get(replicaShardRouting.currentNodeId())__                        IndexShard replicaShard = getInstance(IndicesService.class, replicaNode.getName())_                            .indexServiceSafe(replicaShardRouting.index()).getShard(replicaShardRouting.id())__                        final List<DocIdSeqNoAndTerm> docsOnReplica__                        try {_                            docsOnReplica = IndexShardTestCase.getDocIdAndSeqNos(replicaShard)__                        } catch (AlreadyClosedException ex) {_                            continue__                        }_                        assertThat("out of sync shards: primary=[" + primaryShardRouting + "] num_docs_on_primary=[" + docsOnPrimary.size()_                                + "] vs replica=[" + replicaShardRouting + "] num_docs_on_replica=[" + docsOnReplica.size() + "]",_                            docsOnReplica, equalTo(docsOnPrimary))__                    }_                }_            }_        })__    };asserts,that,all,shards,with,the,same,shard,id,should,have,document,ids;public,void,assert,same,doc,ids,on,shards,throws,exception,assert,busy,cluster,state,state,client,admin,cluster,prepare,state,get,get,state,for,object,object,cursor,string,index,routing,table,index,routing,table,state,routing,table,indices,routing,for,int,object,cursor,index,shard,routing,table,index,shard,routing,table,index,routing,table,value,shards,shard,routing,primary,shard,routing,index,shard,routing,table,value,primary,shard,if,primary,shard,routing,null,primary,shard,routing,assigned,to,node,false,continue,discovery,node,primary,node,state,nodes,get,primary,shard,routing,current,node,id,index,shard,primary,shard,get,instance,indices,service,class,primary,node,get,name,index,service,safe,primary,shard,routing,index,get,shard,primary,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,primary,try,docs,on,primary,index,shard,test,case,get,doc,id,and,seq,nos,primary,shard,catch,already,closed,exception,ex,continue,for,shard,routing,replica,shard,routing,index,shard,routing,table,value,replica,shards,if,replica,shard,routing,assigned,to,node,false,continue,discovery,node,replica,node,state,nodes,get,replica,shard,routing,current,node,id,index,shard,replica,shard,get,instance,indices,service,class,replica,node,get,name,index,service,safe,replica,shard,routing,index,get,shard,replica,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,replica,try,docs,on,replica,index,shard,test,case,get,doc,id,and,seq,nos,replica,shard,catch,already,closed,exception,ex,continue,assert,that,out,of,sync,shards,primary,primary,shard,routing,docs,on,primary,size,vs,replica,replica,shard,routing,docs,on,replica,size,docs,on,replica,equal,to,docs,on,primary
InternalTestCluster -> public void assertSameDocIdsOnShards() throws Exception;1545222364;Asserts that all shards with the same shardId should have document Ids.;public void assertSameDocIdsOnShards() throws Exception {_        assertBusy(() -> {_            ClusterState state = client().admin().cluster().prepareState().get().getState()__            for (ObjectObjectCursor<String, IndexRoutingTable> indexRoutingTable : state.routingTable().indicesRouting()) {_                for (IntObjectCursor<IndexShardRoutingTable> indexShardRoutingTable : indexRoutingTable.value.shards()) {_                    ShardRouting primaryShardRouting = indexShardRoutingTable.value.primaryShard()__                    if (primaryShardRouting == null || primaryShardRouting.assignedToNode() == false) {_                        continue__                    }_                    DiscoveryNode primaryNode = state.nodes().get(primaryShardRouting.currentNodeId())__                    IndexShard primaryShard = getInstance(IndicesService.class, primaryNode.getName())_                        .indexServiceSafe(primaryShardRouting.index()).getShard(primaryShardRouting.id())__                    final List<DocIdSeqNoAndTerm> docsOnPrimary__                    try {_                        docsOnPrimary = IndexShardTestCase.getDocIdAndSeqNos(primaryShard)__                    } catch (AlreadyClosedException ex) {_                        continue__                    }_                    for (ShardRouting replicaShardRouting : indexShardRoutingTable.value.replicaShards()) {_                        if (replicaShardRouting.assignedToNode() == false) {_                            continue__                        }_                        DiscoveryNode replicaNode = state.nodes().get(replicaShardRouting.currentNodeId())__                        IndexShard replicaShard = getInstance(IndicesService.class, replicaNode.getName())_                            .indexServiceSafe(replicaShardRouting.index()).getShard(replicaShardRouting.id())__                        final List<DocIdSeqNoAndTerm> docsOnReplica__                        try {_                            docsOnReplica = IndexShardTestCase.getDocIdAndSeqNos(replicaShard)__                        } catch (AlreadyClosedException ex) {_                            continue__                        }_                        assertThat("out of sync shards: primary=[" + primaryShardRouting + "] num_docs_on_primary=[" + docsOnPrimary.size()_                                + "] vs replica=[" + replicaShardRouting + "] num_docs_on_replica=[" + docsOnReplica.size() + "]",_                            docsOnReplica, equalTo(docsOnPrimary))__                    }_                }_            }_        })__    };asserts,that,all,shards,with,the,same,shard,id,should,have,document,ids;public,void,assert,same,doc,ids,on,shards,throws,exception,assert,busy,cluster,state,state,client,admin,cluster,prepare,state,get,get,state,for,object,object,cursor,string,index,routing,table,index,routing,table,state,routing,table,indices,routing,for,int,object,cursor,index,shard,routing,table,index,shard,routing,table,index,routing,table,value,shards,shard,routing,primary,shard,routing,index,shard,routing,table,value,primary,shard,if,primary,shard,routing,null,primary,shard,routing,assigned,to,node,false,continue,discovery,node,primary,node,state,nodes,get,primary,shard,routing,current,node,id,index,shard,primary,shard,get,instance,indices,service,class,primary,node,get,name,index,service,safe,primary,shard,routing,index,get,shard,primary,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,primary,try,docs,on,primary,index,shard,test,case,get,doc,id,and,seq,nos,primary,shard,catch,already,closed,exception,ex,continue,for,shard,routing,replica,shard,routing,index,shard,routing,table,value,replica,shards,if,replica,shard,routing,assigned,to,node,false,continue,discovery,node,replica,node,state,nodes,get,replica,shard,routing,current,node,id,index,shard,replica,shard,get,instance,indices,service,class,replica,node,get,name,index,service,safe,replica,shard,routing,index,get,shard,replica,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,replica,try,docs,on,replica,index,shard,test,case,get,doc,id,and,seq,nos,replica,shard,catch,already,closed,exception,ex,continue,assert,that,out,of,sync,shards,primary,primary,shard,routing,docs,on,primary,size,vs,replica,replica,shard,routing,docs,on,replica,size,docs,on,replica,equal,to,docs,on,primary
InternalTestCluster -> public void assertSameDocIdsOnShards() throws Exception;1545315633;Asserts that all shards with the same shardId should have document Ids.;public void assertSameDocIdsOnShards() throws Exception {_        assertBusy(() -> {_            ClusterState state = client().admin().cluster().prepareState().get().getState()__            for (ObjectObjectCursor<String, IndexRoutingTable> indexRoutingTable : state.routingTable().indicesRouting()) {_                for (IntObjectCursor<IndexShardRoutingTable> indexShardRoutingTable : indexRoutingTable.value.shards()) {_                    ShardRouting primaryShardRouting = indexShardRoutingTable.value.primaryShard()__                    if (primaryShardRouting == null || primaryShardRouting.assignedToNode() == false) {_                        continue__                    }_                    DiscoveryNode primaryNode = state.nodes().get(primaryShardRouting.currentNodeId())__                    IndexShard primaryShard = getInstance(IndicesService.class, primaryNode.getName())_                        .indexServiceSafe(primaryShardRouting.index()).getShard(primaryShardRouting.id())__                    final List<DocIdSeqNoAndTerm> docsOnPrimary__                    try {_                        docsOnPrimary = IndexShardTestCase.getDocIdAndSeqNos(primaryShard)__                    } catch (AlreadyClosedException ex) {_                        continue__                    }_                    for (ShardRouting replicaShardRouting : indexShardRoutingTable.value.replicaShards()) {_                        if (replicaShardRouting.assignedToNode() == false) {_                            continue__                        }_                        DiscoveryNode replicaNode = state.nodes().get(replicaShardRouting.currentNodeId())__                        IndexShard replicaShard = getInstance(IndicesService.class, replicaNode.getName())_                            .indexServiceSafe(replicaShardRouting.index()).getShard(replicaShardRouting.id())__                        final List<DocIdSeqNoAndTerm> docsOnReplica__                        try {_                            docsOnReplica = IndexShardTestCase.getDocIdAndSeqNos(replicaShard)__                        } catch (AlreadyClosedException ex) {_                            continue__                        }_                        assertThat("out of sync shards: primary=[" + primaryShardRouting + "] num_docs_on_primary=[" + docsOnPrimary.size()_                                + "] vs replica=[" + replicaShardRouting + "] num_docs_on_replica=[" + docsOnReplica.size() + "]",_                            docsOnReplica, equalTo(docsOnPrimary))__                    }_                }_            }_        })__    };asserts,that,all,shards,with,the,same,shard,id,should,have,document,ids;public,void,assert,same,doc,ids,on,shards,throws,exception,assert,busy,cluster,state,state,client,admin,cluster,prepare,state,get,get,state,for,object,object,cursor,string,index,routing,table,index,routing,table,state,routing,table,indices,routing,for,int,object,cursor,index,shard,routing,table,index,shard,routing,table,index,routing,table,value,shards,shard,routing,primary,shard,routing,index,shard,routing,table,value,primary,shard,if,primary,shard,routing,null,primary,shard,routing,assigned,to,node,false,continue,discovery,node,primary,node,state,nodes,get,primary,shard,routing,current,node,id,index,shard,primary,shard,get,instance,indices,service,class,primary,node,get,name,index,service,safe,primary,shard,routing,index,get,shard,primary,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,primary,try,docs,on,primary,index,shard,test,case,get,doc,id,and,seq,nos,primary,shard,catch,already,closed,exception,ex,continue,for,shard,routing,replica,shard,routing,index,shard,routing,table,value,replica,shards,if,replica,shard,routing,assigned,to,node,false,continue,discovery,node,replica,node,state,nodes,get,replica,shard,routing,current,node,id,index,shard,replica,shard,get,instance,indices,service,class,replica,node,get,name,index,service,safe,replica,shard,routing,index,get,shard,replica,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,replica,try,docs,on,replica,index,shard,test,case,get,doc,id,and,seq,nos,replica,shard,catch,already,closed,exception,ex,continue,assert,that,out,of,sync,shards,primary,primary,shard,routing,docs,on,primary,size,vs,replica,replica,shard,routing,docs,on,replica,size,docs,on,replica,equal,to,docs,on,primary
InternalTestCluster -> public void assertSameDocIdsOnShards() throws Exception;1547245564;Asserts that all shards with the same shardId should have document Ids.;public void assertSameDocIdsOnShards() throws Exception {_        assertBusy(() -> {_            ClusterState state = client().admin().cluster().prepareState().get().getState()__            for (ObjectObjectCursor<String, IndexRoutingTable> indexRoutingTable : state.routingTable().indicesRouting()) {_                for (IntObjectCursor<IndexShardRoutingTable> indexShardRoutingTable : indexRoutingTable.value.shards()) {_                    ShardRouting primaryShardRouting = indexShardRoutingTable.value.primaryShard()__                    if (primaryShardRouting == null || primaryShardRouting.assignedToNode() == false) {_                        continue__                    }_                    DiscoveryNode primaryNode = state.nodes().get(primaryShardRouting.currentNodeId())__                    IndexShard primaryShard = getInstance(IndicesService.class, primaryNode.getName())_                        .indexServiceSafe(primaryShardRouting.index()).getShard(primaryShardRouting.id())__                    final List<DocIdSeqNoAndTerm> docsOnPrimary__                    try {_                        docsOnPrimary = IndexShardTestCase.getDocIdAndSeqNos(primaryShard)__                    } catch (AlreadyClosedException ex) {_                        continue__                    }_                    for (ShardRouting replicaShardRouting : indexShardRoutingTable.value.replicaShards()) {_                        if (replicaShardRouting.assignedToNode() == false) {_                            continue__                        }_                        DiscoveryNode replicaNode = state.nodes().get(replicaShardRouting.currentNodeId())__                        IndexShard replicaShard = getInstance(IndicesService.class, replicaNode.getName())_                            .indexServiceSafe(replicaShardRouting.index()).getShard(replicaShardRouting.id())__                        final List<DocIdSeqNoAndTerm> docsOnReplica__                        try {_                            docsOnReplica = IndexShardTestCase.getDocIdAndSeqNos(replicaShard)__                        } catch (AlreadyClosedException ex) {_                            continue__                        }_                        assertThat("out of sync shards: primary=[" + primaryShardRouting + "] num_docs_on_primary=[" + docsOnPrimary.size()_                                + "] vs replica=[" + replicaShardRouting + "] num_docs_on_replica=[" + docsOnReplica.size() + "]",_                            docsOnReplica, equalTo(docsOnPrimary))__                    }_                }_            }_        })__    };asserts,that,all,shards,with,the,same,shard,id,should,have,document,ids;public,void,assert,same,doc,ids,on,shards,throws,exception,assert,busy,cluster,state,state,client,admin,cluster,prepare,state,get,get,state,for,object,object,cursor,string,index,routing,table,index,routing,table,state,routing,table,indices,routing,for,int,object,cursor,index,shard,routing,table,index,shard,routing,table,index,routing,table,value,shards,shard,routing,primary,shard,routing,index,shard,routing,table,value,primary,shard,if,primary,shard,routing,null,primary,shard,routing,assigned,to,node,false,continue,discovery,node,primary,node,state,nodes,get,primary,shard,routing,current,node,id,index,shard,primary,shard,get,instance,indices,service,class,primary,node,get,name,index,service,safe,primary,shard,routing,index,get,shard,primary,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,primary,try,docs,on,primary,index,shard,test,case,get,doc,id,and,seq,nos,primary,shard,catch,already,closed,exception,ex,continue,for,shard,routing,replica,shard,routing,index,shard,routing,table,value,replica,shards,if,replica,shard,routing,assigned,to,node,false,continue,discovery,node,replica,node,state,nodes,get,replica,shard,routing,current,node,id,index,shard,replica,shard,get,instance,indices,service,class,replica,node,get,name,index,service,safe,replica,shard,routing,index,get,shard,replica,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,replica,try,docs,on,replica,index,shard,test,case,get,doc,id,and,seq,nos,replica,shard,catch,already,closed,exception,ex,continue,assert,that,out,of,sync,shards,primary,primary,shard,routing,docs,on,primary,size,vs,replica,replica,shard,routing,docs,on,replica,size,docs,on,replica,equal,to,docs,on,primary
InternalTestCluster -> public void assertSameDocIdsOnShards() throws Exception;1547496886;Asserts that all shards with the same shardId should have document Ids.;public void assertSameDocIdsOnShards() throws Exception {_        assertBusy(() -> {_            ClusterState state = client().admin().cluster().prepareState().get().getState()__            for (ObjectObjectCursor<String, IndexRoutingTable> indexRoutingTable : state.routingTable().indicesRouting()) {_                for (IntObjectCursor<IndexShardRoutingTable> indexShardRoutingTable : indexRoutingTable.value.shards()) {_                    ShardRouting primaryShardRouting = indexShardRoutingTable.value.primaryShard()__                    if (primaryShardRouting == null || primaryShardRouting.assignedToNode() == false) {_                        continue__                    }_                    DiscoveryNode primaryNode = state.nodes().get(primaryShardRouting.currentNodeId())__                    IndexShard primaryShard = getInstance(IndicesService.class, primaryNode.getName())_                        .indexServiceSafe(primaryShardRouting.index()).getShard(primaryShardRouting.id())__                    final List<DocIdSeqNoAndTerm> docsOnPrimary__                    try {_                        docsOnPrimary = IndexShardTestCase.getDocIdAndSeqNos(primaryShard)__                    } catch (AlreadyClosedException ex) {_                        continue__                    }_                    for (ShardRouting replicaShardRouting : indexShardRoutingTable.value.replicaShards()) {_                        if (replicaShardRouting.assignedToNode() == false) {_                            continue__                        }_                        DiscoveryNode replicaNode = state.nodes().get(replicaShardRouting.currentNodeId())__                        IndexShard replicaShard = getInstance(IndicesService.class, replicaNode.getName())_                            .indexServiceSafe(replicaShardRouting.index()).getShard(replicaShardRouting.id())__                        final List<DocIdSeqNoAndTerm> docsOnReplica__                        try {_                            docsOnReplica = IndexShardTestCase.getDocIdAndSeqNos(replicaShard)__                        } catch (AlreadyClosedException ex) {_                            continue__                        }_                        assertThat("out of sync shards: primary=[" + primaryShardRouting + "] num_docs_on_primary=[" + docsOnPrimary.size()_                                + "] vs replica=[" + replicaShardRouting + "] num_docs_on_replica=[" + docsOnReplica.size() + "]",_                            docsOnReplica, equalTo(docsOnPrimary))__                    }_                }_            }_        })__    };asserts,that,all,shards,with,the,same,shard,id,should,have,document,ids;public,void,assert,same,doc,ids,on,shards,throws,exception,assert,busy,cluster,state,state,client,admin,cluster,prepare,state,get,get,state,for,object,object,cursor,string,index,routing,table,index,routing,table,state,routing,table,indices,routing,for,int,object,cursor,index,shard,routing,table,index,shard,routing,table,index,routing,table,value,shards,shard,routing,primary,shard,routing,index,shard,routing,table,value,primary,shard,if,primary,shard,routing,null,primary,shard,routing,assigned,to,node,false,continue,discovery,node,primary,node,state,nodes,get,primary,shard,routing,current,node,id,index,shard,primary,shard,get,instance,indices,service,class,primary,node,get,name,index,service,safe,primary,shard,routing,index,get,shard,primary,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,primary,try,docs,on,primary,index,shard,test,case,get,doc,id,and,seq,nos,primary,shard,catch,already,closed,exception,ex,continue,for,shard,routing,replica,shard,routing,index,shard,routing,table,value,replica,shards,if,replica,shard,routing,assigned,to,node,false,continue,discovery,node,replica,node,state,nodes,get,replica,shard,routing,current,node,id,index,shard,replica,shard,get,instance,indices,service,class,replica,node,get,name,index,service,safe,replica,shard,routing,index,get,shard,replica,shard,routing,id,final,list,doc,id,seq,no,and,term,docs,on,replica,try,docs,on,replica,index,shard,test,case,get,doc,id,and,seq,nos,replica,shard,catch,already,closed,exception,ex,continue,assert,that,out,of,sync,shards,primary,primary,shard,routing,docs,on,primary,size,vs,replica,replica,shard,routing,docs,on,replica,size,docs,on,replica,equal,to,docs,on,primary
InternalTestCluster -> public void assertSameDocIdsOnShards() throws Exception;1547497728;Asserts that all shards with the same shardId should have document Ids.;public void assertSameDocIdsOnShards() throws Exception {_        assertBusy(() -> {_            ClusterState state = client().admin().cluster().prepareState().get().getState()__            for (ObjectObjectCursor<String, IndexRoutingTable> indexRoutingTable : state.routingTable().indicesRouting()) {_                for (IntObjectCursor<IndexShardRoutingTable> indexShardRoutingTable : indexRoutingTable.value.shards()) {_                    ShardRouting primaryShardRouting = indexShardRoutingTable.value.primaryShard()__                    IndexShard primaryShard = getShardOrNull(state, primaryShardRouting)__                    if (primaryShard == null) {_                        continue__                    }_                    final List<DocIdSeqNoAndTerm> docsOnPrimary__                    try {_                        docsOnPrimary = IndexShardTestCase.getDocIdAndSeqNos(primaryShard)__                    } catch (AlreadyClosedException ex) {_                        continue__                    }_                    for (ShardRouting replicaShardRouting : indexShardRoutingTable.value.replicaShards()) {_                        IndexShard replicaShard = getShardOrNull(state, replicaShardRouting)__                        if (replicaShard == null) {_                            continue__                        }_                        final List<DocIdSeqNoAndTerm> docsOnReplica__                        try {_                            docsOnReplica = IndexShardTestCase.getDocIdAndSeqNos(replicaShard)__                        } catch (AlreadyClosedException ex) {_                            continue__                        }_                        assertThat("out of sync shards: primary=[" + primaryShardRouting + "] num_docs_on_primary=[" + docsOnPrimary.size()_                                + "] vs replica=[" + replicaShardRouting + "] num_docs_on_replica=[" + docsOnReplica.size() + "]",_                            docsOnReplica, equalTo(docsOnPrimary))__                    }_                }_            }_        })__    };asserts,that,all,shards,with,the,same,shard,id,should,have,document,ids;public,void,assert,same,doc,ids,on,shards,throws,exception,assert,busy,cluster,state,state,client,admin,cluster,prepare,state,get,get,state,for,object,object,cursor,string,index,routing,table,index,routing,table,state,routing,table,indices,routing,for,int,object,cursor,index,shard,routing,table,index,shard,routing,table,index,routing,table,value,shards,shard,routing,primary,shard,routing,index,shard,routing,table,value,primary,shard,index,shard,primary,shard,get,shard,or,null,state,primary,shard,routing,if,primary,shard,null,continue,final,list,doc,id,seq,no,and,term,docs,on,primary,try,docs,on,primary,index,shard,test,case,get,doc,id,and,seq,nos,primary,shard,catch,already,closed,exception,ex,continue,for,shard,routing,replica,shard,routing,index,shard,routing,table,value,replica,shards,index,shard,replica,shard,get,shard,or,null,state,replica,shard,routing,if,replica,shard,null,continue,final,list,doc,id,seq,no,and,term,docs,on,replica,try,docs,on,replica,index,shard,test,case,get,doc,id,and,seq,nos,replica,shard,catch,already,closed,exception,ex,continue,assert,that,out,of,sync,shards,primary,primary,shard,routing,docs,on,primary,size,vs,replica,replica,shard,routing,docs,on,replica,size,docs,on,replica,equal,to,docs,on,primary
InternalTestCluster -> public void assertSameDocIdsOnShards() throws Exception;1547825802;Asserts that all shards with the same shardId should have document Ids.;public void assertSameDocIdsOnShards() throws Exception {_        assertBusy(() -> {_            ClusterState state = client().admin().cluster().prepareState().get().getState()__            for (ObjectObjectCursor<String, IndexRoutingTable> indexRoutingTable : state.routingTable().indicesRouting()) {_                for (IntObjectCursor<IndexShardRoutingTable> indexShardRoutingTable : indexRoutingTable.value.shards()) {_                    ShardRouting primaryShardRouting = indexShardRoutingTable.value.primaryShard()__                    IndexShard primaryShard = getShardOrNull(state, primaryShardRouting)__                    if (primaryShard == null) {_                        continue__                    }_                    final List<DocIdSeqNoAndTerm> docsOnPrimary__                    try {_                        docsOnPrimary = IndexShardTestCase.getDocIdAndSeqNos(primaryShard)__                    } catch (AlreadyClosedException ex) {_                        continue__                    }_                    for (ShardRouting replicaShardRouting : indexShardRoutingTable.value.replicaShards()) {_                        IndexShard replicaShard = getShardOrNull(state, replicaShardRouting)__                        if (replicaShard == null) {_                            continue__                        }_                        final List<DocIdSeqNoAndTerm> docsOnReplica__                        try {_                            docsOnReplica = IndexShardTestCase.getDocIdAndSeqNos(replicaShard)__                        } catch (AlreadyClosedException ex) {_                            continue__                        }_                        assertThat("out of sync shards: primary=[" + primaryShardRouting + "] num_docs_on_primary=[" + docsOnPrimary.size()_                                + "] vs replica=[" + replicaShardRouting + "] num_docs_on_replica=[" + docsOnReplica.size() + "]",_                            docsOnReplica, equalTo(docsOnPrimary))__                    }_                }_            }_        })__    };asserts,that,all,shards,with,the,same,shard,id,should,have,document,ids;public,void,assert,same,doc,ids,on,shards,throws,exception,assert,busy,cluster,state,state,client,admin,cluster,prepare,state,get,get,state,for,object,object,cursor,string,index,routing,table,index,routing,table,state,routing,table,indices,routing,for,int,object,cursor,index,shard,routing,table,index,shard,routing,table,index,routing,table,value,shards,shard,routing,primary,shard,routing,index,shard,routing,table,value,primary,shard,index,shard,primary,shard,get,shard,or,null,state,primary,shard,routing,if,primary,shard,null,continue,final,list,doc,id,seq,no,and,term,docs,on,primary,try,docs,on,primary,index,shard,test,case,get,doc,id,and,seq,nos,primary,shard,catch,already,closed,exception,ex,continue,for,shard,routing,replica,shard,routing,index,shard,routing,table,value,replica,shards,index,shard,replica,shard,get,shard,or,null,state,replica,shard,routing,if,replica,shard,null,continue,final,list,doc,id,seq,no,and,term,docs,on,replica,try,docs,on,replica,index,shard,test,case,get,doc,id,and,seq,nos,replica,shard,catch,already,closed,exception,ex,continue,assert,that,out,of,sync,shards,primary,primary,shard,routing,docs,on,primary,size,vs,replica,replica,shard,routing,docs,on,replica,size,docs,on,replica,equal,to,docs,on,primary
InternalTestCluster -> public void assertSameDocIdsOnShards() throws Exception;1548160032;Asserts that all shards with the same shardId should have document Ids.;public void assertSameDocIdsOnShards() throws Exception {_        assertBusy(() -> {_            ClusterState state = client().admin().cluster().prepareState().get().getState()__            for (ObjectObjectCursor<String, IndexRoutingTable> indexRoutingTable : state.routingTable().indicesRouting()) {_                for (IntObjectCursor<IndexShardRoutingTable> indexShardRoutingTable : indexRoutingTable.value.shards()) {_                    ShardRouting primaryShardRouting = indexShardRoutingTable.value.primaryShard()__                    IndexShard primaryShard = getShardOrNull(state, primaryShardRouting)__                    if (primaryShard == null) {_                        continue__                    }_                    final List<DocIdSeqNoAndTerm> docsOnPrimary__                    try {_                        docsOnPrimary = IndexShardTestCase.getDocIdAndSeqNos(primaryShard)__                    } catch (AlreadyClosedException ex) {_                        continue__                    }_                    for (ShardRouting replicaShardRouting : indexShardRoutingTable.value.replicaShards()) {_                        IndexShard replicaShard = getShardOrNull(state, replicaShardRouting)__                        if (replicaShard == null) {_                            continue__                        }_                        final List<DocIdSeqNoAndTerm> docsOnReplica__                        try {_                            docsOnReplica = IndexShardTestCase.getDocIdAndSeqNos(replicaShard)__                        } catch (AlreadyClosedException ex) {_                            continue__                        }_                        assertThat("out of sync shards: primary=[" + primaryShardRouting + "] num_docs_on_primary=[" + docsOnPrimary.size()_                                + "] vs replica=[" + replicaShardRouting + "] num_docs_on_replica=[" + docsOnReplica.size() + "]",_                            docsOnReplica, equalTo(docsOnPrimary))__                    }_                }_            }_        })__    };asserts,that,all,shards,with,the,same,shard,id,should,have,document,ids;public,void,assert,same,doc,ids,on,shards,throws,exception,assert,busy,cluster,state,state,client,admin,cluster,prepare,state,get,get,state,for,object,object,cursor,string,index,routing,table,index,routing,table,state,routing,table,indices,routing,for,int,object,cursor,index,shard,routing,table,index,shard,routing,table,index,routing,table,value,shards,shard,routing,primary,shard,routing,index,shard,routing,table,value,primary,shard,index,shard,primary,shard,get,shard,or,null,state,primary,shard,routing,if,primary,shard,null,continue,final,list,doc,id,seq,no,and,term,docs,on,primary,try,docs,on,primary,index,shard,test,case,get,doc,id,and,seq,nos,primary,shard,catch,already,closed,exception,ex,continue,for,shard,routing,replica,shard,routing,index,shard,routing,table,value,replica,shards,index,shard,replica,shard,get,shard,or,null,state,replica,shard,routing,if,replica,shard,null,continue,final,list,doc,id,seq,no,and,term,docs,on,replica,try,docs,on,replica,index,shard,test,case,get,doc,id,and,seq,nos,replica,shard,catch,already,closed,exception,ex,continue,assert,that,out,of,sync,shards,primary,primary,shard,routing,docs,on,primary,size,vs,replica,replica,shard,routing,docs,on,replica,size,docs,on,replica,equal,to,docs,on,primary
InternalTestCluster -> public void assertSameDocIdsOnShards() throws Exception;1548878955;Asserts that all shards with the same shardId should have document Ids.;public void assertSameDocIdsOnShards() throws Exception {_        assertBusy(() -> {_            ClusterState state = client().admin().cluster().prepareState().get().getState()__            for (ObjectObjectCursor<String, IndexRoutingTable> indexRoutingTable : state.routingTable().indicesRouting()) {_                for (IntObjectCursor<IndexShardRoutingTable> indexShardRoutingTable : indexRoutingTable.value.shards()) {_                    ShardRouting primaryShardRouting = indexShardRoutingTable.value.primaryShard()__                    IndexShard primaryShard = getShardOrNull(state, primaryShardRouting)__                    if (primaryShard == null) {_                        continue__                    }_                    final List<DocIdSeqNoAndTerm> docsOnPrimary__                    try {_                        docsOnPrimary = IndexShardTestCase.getDocIdAndSeqNos(primaryShard)__                    } catch (AlreadyClosedException ex) {_                        continue__                    }_                    for (ShardRouting replicaShardRouting : indexShardRoutingTable.value.replicaShards()) {_                        IndexShard replicaShard = getShardOrNull(state, replicaShardRouting)__                        if (replicaShard == null) {_                            continue__                        }_                        final List<DocIdSeqNoAndTerm> docsOnReplica__                        try {_                            docsOnReplica = IndexShardTestCase.getDocIdAndSeqNos(replicaShard)__                        } catch (AlreadyClosedException ex) {_                            continue__                        }_                        assertThat("out of sync shards: primary=[" + primaryShardRouting + "] num_docs_on_primary=[" + docsOnPrimary.size()_                                + "] vs replica=[" + replicaShardRouting + "] num_docs_on_replica=[" + docsOnReplica.size() + "]",_                            docsOnReplica, equalTo(docsOnPrimary))__                    }_                }_            }_        })__    };asserts,that,all,shards,with,the,same,shard,id,should,have,document,ids;public,void,assert,same,doc,ids,on,shards,throws,exception,assert,busy,cluster,state,state,client,admin,cluster,prepare,state,get,get,state,for,object,object,cursor,string,index,routing,table,index,routing,table,state,routing,table,indices,routing,for,int,object,cursor,index,shard,routing,table,index,shard,routing,table,index,routing,table,value,shards,shard,routing,primary,shard,routing,index,shard,routing,table,value,primary,shard,index,shard,primary,shard,get,shard,or,null,state,primary,shard,routing,if,primary,shard,null,continue,final,list,doc,id,seq,no,and,term,docs,on,primary,try,docs,on,primary,index,shard,test,case,get,doc,id,and,seq,nos,primary,shard,catch,already,closed,exception,ex,continue,for,shard,routing,replica,shard,routing,index,shard,routing,table,value,replica,shards,index,shard,replica,shard,get,shard,or,null,state,replica,shard,routing,if,replica,shard,null,continue,final,list,doc,id,seq,no,and,term,docs,on,replica,try,docs,on,replica,index,shard,test,case,get,doc,id,and,seq,nos,replica,shard,catch,already,closed,exception,ex,continue,assert,that,out,of,sync,shards,primary,primary,shard,routing,docs,on,primary,size,vs,replica,replica,shard,routing,docs,on,replica,size,docs,on,replica,equal,to,docs,on,primary
InternalTestCluster -> public void assertSameDocIdsOnShards() throws Exception;1549017271;Asserts that all shards with the same shardId should have document Ids.;public void assertSameDocIdsOnShards() throws Exception {_        assertBusy(() -> {_            ClusterState state = client().admin().cluster().prepareState().get().getState()__            for (ObjectObjectCursor<String, IndexRoutingTable> indexRoutingTable : state.routingTable().indicesRouting()) {_                for (IntObjectCursor<IndexShardRoutingTable> indexShardRoutingTable : indexRoutingTable.value.shards()) {_                    ShardRouting primaryShardRouting = indexShardRoutingTable.value.primaryShard()__                    IndexShard primaryShard = getShardOrNull(state, primaryShardRouting)__                    if (primaryShard == null) {_                        continue__                    }_                    final List<DocIdSeqNoAndTerm> docsOnPrimary__                    try {_                        docsOnPrimary = IndexShardTestCase.getDocIdAndSeqNos(primaryShard)__                    } catch (AlreadyClosedException ex) {_                        continue__                    }_                    for (ShardRouting replicaShardRouting : indexShardRoutingTable.value.replicaShards()) {_                        IndexShard replicaShard = getShardOrNull(state, replicaShardRouting)__                        if (replicaShard == null) {_                            continue__                        }_                        final List<DocIdSeqNoAndTerm> docsOnReplica__                        try {_                            docsOnReplica = IndexShardTestCase.getDocIdAndSeqNos(replicaShard)__                        } catch (AlreadyClosedException ex) {_                            continue__                        }_                        assertThat("out of sync shards: primary=[" + primaryShardRouting + "] num_docs_on_primary=[" + docsOnPrimary.size()_                                + "] vs replica=[" + replicaShardRouting + "] num_docs_on_replica=[" + docsOnReplica.size() + "]",_                            docsOnReplica, equalTo(docsOnPrimary))__                    }_                }_            }_        })__    };asserts,that,all,shards,with,the,same,shard,id,should,have,document,ids;public,void,assert,same,doc,ids,on,shards,throws,exception,assert,busy,cluster,state,state,client,admin,cluster,prepare,state,get,get,state,for,object,object,cursor,string,index,routing,table,index,routing,table,state,routing,table,indices,routing,for,int,object,cursor,index,shard,routing,table,index,shard,routing,table,index,routing,table,value,shards,shard,routing,primary,shard,routing,index,shard,routing,table,value,primary,shard,index,shard,primary,shard,get,shard,or,null,state,primary,shard,routing,if,primary,shard,null,continue,final,list,doc,id,seq,no,and,term,docs,on,primary,try,docs,on,primary,index,shard,test,case,get,doc,id,and,seq,nos,primary,shard,catch,already,closed,exception,ex,continue,for,shard,routing,replica,shard,routing,index,shard,routing,table,value,replica,shards,index,shard,replica,shard,get,shard,or,null,state,replica,shard,routing,if,replica,shard,null,continue,final,list,doc,id,seq,no,and,term,docs,on,replica,try,docs,on,replica,index,shard,test,case,get,doc,id,and,seq,nos,replica,shard,catch,already,closed,exception,ex,continue,assert,that,out,of,sync,shards,primary,primary,shard,routing,docs,on,primary,size,vs,replica,replica,shard,routing,docs,on,replica,size,docs,on,replica,equal,to,docs,on,primary
InternalTestCluster -> public void assertSameDocIdsOnShards() throws Exception;1549094096;Asserts that all shards with the same shardId should have document Ids.;public void assertSameDocIdsOnShards() throws Exception {_        assertBusy(() -> {_            ClusterState state = client().admin().cluster().prepareState().get().getState()__            for (ObjectObjectCursor<String, IndexRoutingTable> indexRoutingTable : state.routingTable().indicesRouting()) {_                for (IntObjectCursor<IndexShardRoutingTable> indexShardRoutingTable : indexRoutingTable.value.shards()) {_                    ShardRouting primaryShardRouting = indexShardRoutingTable.value.primaryShard()__                    IndexShard primaryShard = getShardOrNull(state, primaryShardRouting)__                    if (primaryShard == null) {_                        continue__                    }_                    final List<DocIdSeqNoAndTerm> docsOnPrimary__                    try {_                        docsOnPrimary = IndexShardTestCase.getDocIdAndSeqNos(primaryShard)__                    } catch (AlreadyClosedException ex) {_                        continue__                    }_                    for (ShardRouting replicaShardRouting : indexShardRoutingTable.value.replicaShards()) {_                        IndexShard replicaShard = getShardOrNull(state, replicaShardRouting)__                        if (replicaShard == null) {_                            continue__                        }_                        final List<DocIdSeqNoAndTerm> docsOnReplica__                        try {_                            docsOnReplica = IndexShardTestCase.getDocIdAndSeqNos(replicaShard)__                        } catch (AlreadyClosedException ex) {_                            continue__                        }_                        assertThat("out of sync shards: primary=[" + primaryShardRouting + "] num_docs_on_primary=[" + docsOnPrimary.size()_                                + "] vs replica=[" + replicaShardRouting + "] num_docs_on_replica=[" + docsOnReplica.size() + "]",_                            docsOnReplica, equalTo(docsOnPrimary))__                    }_                }_            }_        })__    };asserts,that,all,shards,with,the,same,shard,id,should,have,document,ids;public,void,assert,same,doc,ids,on,shards,throws,exception,assert,busy,cluster,state,state,client,admin,cluster,prepare,state,get,get,state,for,object,object,cursor,string,index,routing,table,index,routing,table,state,routing,table,indices,routing,for,int,object,cursor,index,shard,routing,table,index,shard,routing,table,index,routing,table,value,shards,shard,routing,primary,shard,routing,index,shard,routing,table,value,primary,shard,index,shard,primary,shard,get,shard,or,null,state,primary,shard,routing,if,primary,shard,null,continue,final,list,doc,id,seq,no,and,term,docs,on,primary,try,docs,on,primary,index,shard,test,case,get,doc,id,and,seq,nos,primary,shard,catch,already,closed,exception,ex,continue,for,shard,routing,replica,shard,routing,index,shard,routing,table,value,replica,shards,index,shard,replica,shard,get,shard,or,null,state,replica,shard,routing,if,replica,shard,null,continue,final,list,doc,id,seq,no,and,term,docs,on,replica,try,docs,on,replica,index,shard,test,case,get,doc,id,and,seq,nos,replica,shard,catch,already,closed,exception,ex,continue,assert,that,out,of,sync,shards,primary,primary,shard,routing,docs,on,primary,size,vs,replica,replica,shard,routing,docs,on,replica,size,docs,on,replica,equal,to,docs,on,primary
InternalTestCluster -> public void assertSameDocIdsOnShards() throws Exception;1549291259;Asserts that all shards with the same shardId should have document Ids.;public void assertSameDocIdsOnShards() throws Exception {_        assertBusy(() -> {_            ClusterState state = client().admin().cluster().prepareState().get().getState()__            for (ObjectObjectCursor<String, IndexRoutingTable> indexRoutingTable : state.routingTable().indicesRouting()) {_                for (IntObjectCursor<IndexShardRoutingTable> indexShardRoutingTable : indexRoutingTable.value.shards()) {_                    ShardRouting primaryShardRouting = indexShardRoutingTable.value.primaryShard()__                    IndexShard primaryShard = getShardOrNull(state, primaryShardRouting)__                    if (primaryShard == null) {_                        continue__                    }_                    final List<DocIdSeqNoAndTerm> docsOnPrimary__                    try {_                        docsOnPrimary = IndexShardTestCase.getDocIdAndSeqNos(primaryShard)__                    } catch (AlreadyClosedException ex) {_                        continue__                    }_                    for (ShardRouting replicaShardRouting : indexShardRoutingTable.value.replicaShards()) {_                        IndexShard replicaShard = getShardOrNull(state, replicaShardRouting)__                        if (replicaShard == null) {_                            continue__                        }_                        final List<DocIdSeqNoAndTerm> docsOnReplica__                        try {_                            docsOnReplica = IndexShardTestCase.getDocIdAndSeqNos(replicaShard)__                        } catch (AlreadyClosedException ex) {_                            continue__                        }_                        assertThat("out of sync shards: primary=[" + primaryShardRouting + "] num_docs_on_primary=[" + docsOnPrimary.size()_                                + "] vs replica=[" + replicaShardRouting + "] num_docs_on_replica=[" + docsOnReplica.size() + "]",_                            docsOnReplica, equalTo(docsOnPrimary))__                    }_                }_            }_        })__    };asserts,that,all,shards,with,the,same,shard,id,should,have,document,ids;public,void,assert,same,doc,ids,on,shards,throws,exception,assert,busy,cluster,state,state,client,admin,cluster,prepare,state,get,get,state,for,object,object,cursor,string,index,routing,table,index,routing,table,state,routing,table,indices,routing,for,int,object,cursor,index,shard,routing,table,index,shard,routing,table,index,routing,table,value,shards,shard,routing,primary,shard,routing,index,shard,routing,table,value,primary,shard,index,shard,primary,shard,get,shard,or,null,state,primary,shard,routing,if,primary,shard,null,continue,final,list,doc,id,seq,no,and,term,docs,on,primary,try,docs,on,primary,index,shard,test,case,get,doc,id,and,seq,nos,primary,shard,catch,already,closed,exception,ex,continue,for,shard,routing,replica,shard,routing,index,shard,routing,table,value,replica,shards,index,shard,replica,shard,get,shard,or,null,state,replica,shard,routing,if,replica,shard,null,continue,final,list,doc,id,seq,no,and,term,docs,on,replica,try,docs,on,replica,index,shard,test,case,get,doc,id,and,seq,nos,replica,shard,catch,already,closed,exception,ex,continue,assert,that,out,of,sync,shards,primary,primary,shard,routing,docs,on,primary,size,vs,replica,replica,shard,routing,docs,on,replica,size,docs,on,replica,equal,to,docs,on,primary
InternalTestCluster -> public void assertSameDocIdsOnShards() throws Exception;1549386680;Asserts that all shards with the same shardId should have document Ids.;public void assertSameDocIdsOnShards() throws Exception {_        assertBusy(() -> {_            ClusterState state = client().admin().cluster().prepareState().get().getState()__            for (ObjectObjectCursor<String, IndexRoutingTable> indexRoutingTable : state.routingTable().indicesRouting()) {_                for (IntObjectCursor<IndexShardRoutingTable> indexShardRoutingTable : indexRoutingTable.value.shards()) {_                    ShardRouting primaryShardRouting = indexShardRoutingTable.value.primaryShard()__                    IndexShard primaryShard = getShardOrNull(state, primaryShardRouting)__                    if (primaryShard == null) {_                        continue__                    }_                    final List<DocIdSeqNoAndTerm> docsOnPrimary__                    try {_                        docsOnPrimary = IndexShardTestCase.getDocIdAndSeqNos(primaryShard)__                    } catch (AlreadyClosedException ex) {_                        continue__                    }_                    for (ShardRouting replicaShardRouting : indexShardRoutingTable.value.replicaShards()) {_                        IndexShard replicaShard = getShardOrNull(state, replicaShardRouting)__                        if (replicaShard == null) {_                            continue__                        }_                        final List<DocIdSeqNoAndTerm> docsOnReplica__                        try {_                            docsOnReplica = IndexShardTestCase.getDocIdAndSeqNos(replicaShard)__                        } catch (AlreadyClosedException ex) {_                            continue__                        }_                        assertThat("out of sync shards: primary=[" + primaryShardRouting + "] num_docs_on_primary=[" + docsOnPrimary.size()_                                + "] vs replica=[" + replicaShardRouting + "] num_docs_on_replica=[" + docsOnReplica.size() + "]",_                            docsOnReplica, equalTo(docsOnPrimary))__                    }_                }_            }_        })__    };asserts,that,all,shards,with,the,same,shard,id,should,have,document,ids;public,void,assert,same,doc,ids,on,shards,throws,exception,assert,busy,cluster,state,state,client,admin,cluster,prepare,state,get,get,state,for,object,object,cursor,string,index,routing,table,index,routing,table,state,routing,table,indices,routing,for,int,object,cursor,index,shard,routing,table,index,shard,routing,table,index,routing,table,value,shards,shard,routing,primary,shard,routing,index,shard,routing,table,value,primary,shard,index,shard,primary,shard,get,shard,or,null,state,primary,shard,routing,if,primary,shard,null,continue,final,list,doc,id,seq,no,and,term,docs,on,primary,try,docs,on,primary,index,shard,test,case,get,doc,id,and,seq,nos,primary,shard,catch,already,closed,exception,ex,continue,for,shard,routing,replica,shard,routing,index,shard,routing,table,value,replica,shards,index,shard,replica,shard,get,shard,or,null,state,replica,shard,routing,if,replica,shard,null,continue,final,list,doc,id,seq,no,and,term,docs,on,replica,try,docs,on,replica,index,shard,test,case,get,doc,id,and,seq,nos,replica,shard,catch,already,closed,exception,ex,continue,assert,that,out,of,sync,shards,primary,primary,shard,routing,docs,on,primary,size,vs,replica,replica,shard,routing,docs,on,replica,size,docs,on,replica,equal,to,docs,on,primary
InternalTestCluster -> public void assertSameDocIdsOnShards() throws Exception;1549388544;Asserts that all shards with the same shardId should have document Ids.;public void assertSameDocIdsOnShards() throws Exception {_        assertBusy(() -> {_            ClusterState state = client().admin().cluster().prepareState().get().getState()__            for (ObjectObjectCursor<String, IndexRoutingTable> indexRoutingTable : state.routingTable().indicesRouting()) {_                for (IntObjectCursor<IndexShardRoutingTable> indexShardRoutingTable : indexRoutingTable.value.shards()) {_                    ShardRouting primaryShardRouting = indexShardRoutingTable.value.primaryShard()__                    IndexShard primaryShard = getShardOrNull(state, primaryShardRouting)__                    if (primaryShard == null) {_                        continue__                    }_                    final List<DocIdSeqNoAndTerm> docsOnPrimary__                    try {_                        docsOnPrimary = IndexShardTestCase.getDocIdAndSeqNos(primaryShard)__                    } catch (AlreadyClosedException ex) {_                        continue__                    }_                    for (ShardRouting replicaShardRouting : indexShardRoutingTable.value.replicaShards()) {_                        IndexShard replicaShard = getShardOrNull(state, replicaShardRouting)__                        if (replicaShard == null) {_                            continue__                        }_                        final List<DocIdSeqNoAndTerm> docsOnReplica__                        try {_                            docsOnReplica = IndexShardTestCase.getDocIdAndSeqNos(replicaShard)__                        } catch (AlreadyClosedException ex) {_                            continue__                        }_                        assertThat("out of sync shards: primary=[" + primaryShardRouting + "] num_docs_on_primary=[" + docsOnPrimary.size()_                                + "] vs replica=[" + replicaShardRouting + "] num_docs_on_replica=[" + docsOnReplica.size() + "]",_                            docsOnReplica, equalTo(docsOnPrimary))__                    }_                }_            }_        })__    };asserts,that,all,shards,with,the,same,shard,id,should,have,document,ids;public,void,assert,same,doc,ids,on,shards,throws,exception,assert,busy,cluster,state,state,client,admin,cluster,prepare,state,get,get,state,for,object,object,cursor,string,index,routing,table,index,routing,table,state,routing,table,indices,routing,for,int,object,cursor,index,shard,routing,table,index,shard,routing,table,index,routing,table,value,shards,shard,routing,primary,shard,routing,index,shard,routing,table,value,primary,shard,index,shard,primary,shard,get,shard,or,null,state,primary,shard,routing,if,primary,shard,null,continue,final,list,doc,id,seq,no,and,term,docs,on,primary,try,docs,on,primary,index,shard,test,case,get,doc,id,and,seq,nos,primary,shard,catch,already,closed,exception,ex,continue,for,shard,routing,replica,shard,routing,index,shard,routing,table,value,replica,shards,index,shard,replica,shard,get,shard,or,null,state,replica,shard,routing,if,replica,shard,null,continue,final,list,doc,id,seq,no,and,term,docs,on,replica,try,docs,on,replica,index,shard,test,case,get,doc,id,and,seq,nos,replica,shard,catch,already,closed,exception,ex,continue,assert,that,out,of,sync,shards,primary,primary,shard,routing,docs,on,primary,size,vs,replica,replica,shard,routing,docs,on,replica,size,docs,on,replica,equal,to,docs,on,primary
InternalTestCluster -> public void assertSameDocIdsOnShards() throws Exception;1549452878;Asserts that all shards with the same shardId should have document Ids.;public void assertSameDocIdsOnShards() throws Exception {_        assertBusy(() -> {_            ClusterState state = client().admin().cluster().prepareState().get().getState()__            for (ObjectObjectCursor<String, IndexRoutingTable> indexRoutingTable : state.routingTable().indicesRouting()) {_                for (IntObjectCursor<IndexShardRoutingTable> indexShardRoutingTable : indexRoutingTable.value.shards()) {_                    ShardRouting primaryShardRouting = indexShardRoutingTable.value.primaryShard()__                    IndexShard primaryShard = getShardOrNull(state, primaryShardRouting)__                    if (primaryShard == null) {_                        continue__                    }_                    final List<DocIdSeqNoAndTerm> docsOnPrimary__                    try {_                        docsOnPrimary = IndexShardTestCase.getDocIdAndSeqNos(primaryShard)__                    } catch (AlreadyClosedException ex) {_                        continue__                    }_                    for (ShardRouting replicaShardRouting : indexShardRoutingTable.value.replicaShards()) {_                        IndexShard replicaShard = getShardOrNull(state, replicaShardRouting)__                        if (replicaShard == null) {_                            continue__                        }_                        final List<DocIdSeqNoAndTerm> docsOnReplica__                        try {_                            docsOnReplica = IndexShardTestCase.getDocIdAndSeqNos(replicaShard)__                        } catch (AlreadyClosedException ex) {_                            continue__                        }_                        assertThat("out of sync shards: primary=[" + primaryShardRouting + "] num_docs_on_primary=[" + docsOnPrimary.size()_                                + "] vs replica=[" + replicaShardRouting + "] num_docs_on_replica=[" + docsOnReplica.size() + "]",_                            docsOnReplica, equalTo(docsOnPrimary))__                    }_                }_            }_        })__    };asserts,that,all,shards,with,the,same,shard,id,should,have,document,ids;public,void,assert,same,doc,ids,on,shards,throws,exception,assert,busy,cluster,state,state,client,admin,cluster,prepare,state,get,get,state,for,object,object,cursor,string,index,routing,table,index,routing,table,state,routing,table,indices,routing,for,int,object,cursor,index,shard,routing,table,index,shard,routing,table,index,routing,table,value,shards,shard,routing,primary,shard,routing,index,shard,routing,table,value,primary,shard,index,shard,primary,shard,get,shard,or,null,state,primary,shard,routing,if,primary,shard,null,continue,final,list,doc,id,seq,no,and,term,docs,on,primary,try,docs,on,primary,index,shard,test,case,get,doc,id,and,seq,nos,primary,shard,catch,already,closed,exception,ex,continue,for,shard,routing,replica,shard,routing,index,shard,routing,table,value,replica,shards,index,shard,replica,shard,get,shard,or,null,state,replica,shard,routing,if,replica,shard,null,continue,final,list,doc,id,seq,no,and,term,docs,on,replica,try,docs,on,replica,index,shard,test,case,get,doc,id,and,seq,nos,replica,shard,catch,already,closed,exception,ex,continue,assert,that,out,of,sync,shards,primary,primary,shard,routing,docs,on,primary,size,vs,replica,replica,shard,routing,docs,on,replica,size,docs,on,replica,equal,to,docs,on,primary
InternalTestCluster -> public void assertSameDocIdsOnShards() throws Exception;1549898480;Asserts that all shards with the same shardId should have document Ids.;public void assertSameDocIdsOnShards() throws Exception {_        assertBusy(() -> {_            ClusterState state = client().admin().cluster().prepareState().get().getState()__            for (ObjectObjectCursor<String, IndexRoutingTable> indexRoutingTable : state.routingTable().indicesRouting()) {_                for (IntObjectCursor<IndexShardRoutingTable> indexShardRoutingTable : indexRoutingTable.value.shards()) {_                    ShardRouting primaryShardRouting = indexShardRoutingTable.value.primaryShard()__                    IndexShard primaryShard = getShardOrNull(state, primaryShardRouting)__                    if (primaryShard == null) {_                        continue__                    }_                    final List<DocIdSeqNoAndTerm> docsOnPrimary__                    try {_                        docsOnPrimary = IndexShardTestCase.getDocIdAndSeqNos(primaryShard)__                    } catch (AlreadyClosedException ex) {_                        continue__                    }_                    for (ShardRouting replicaShardRouting : indexShardRoutingTable.value.replicaShards()) {_                        IndexShard replicaShard = getShardOrNull(state, replicaShardRouting)__                        if (replicaShard == null) {_                            continue__                        }_                        final List<DocIdSeqNoAndTerm> docsOnReplica__                        try {_                            docsOnReplica = IndexShardTestCase.getDocIdAndSeqNos(replicaShard)__                        } catch (AlreadyClosedException ex) {_                            continue__                        }_                        assertThat("out of sync shards: primary=[" + primaryShardRouting + "] num_docs_on_primary=[" + docsOnPrimary.size()_                                + "] vs replica=[" + replicaShardRouting + "] num_docs_on_replica=[" + docsOnReplica.size() + "]",_                            docsOnReplica, equalTo(docsOnPrimary))__                    }_                }_            }_        })__    };asserts,that,all,shards,with,the,same,shard,id,should,have,document,ids;public,void,assert,same,doc,ids,on,shards,throws,exception,assert,busy,cluster,state,state,client,admin,cluster,prepare,state,get,get,state,for,object,object,cursor,string,index,routing,table,index,routing,table,state,routing,table,indices,routing,for,int,object,cursor,index,shard,routing,table,index,shard,routing,table,index,routing,table,value,shards,shard,routing,primary,shard,routing,index,shard,routing,table,value,primary,shard,index,shard,primary,shard,get,shard,or,null,state,primary,shard,routing,if,primary,shard,null,continue,final,list,doc,id,seq,no,and,term,docs,on,primary,try,docs,on,primary,index,shard,test,case,get,doc,id,and,seq,nos,primary,shard,catch,already,closed,exception,ex,continue,for,shard,routing,replica,shard,routing,index,shard,routing,table,value,replica,shards,index,shard,replica,shard,get,shard,or,null,state,replica,shard,routing,if,replica,shard,null,continue,final,list,doc,id,seq,no,and,term,docs,on,replica,try,docs,on,replica,index,shard,test,case,get,doc,id,and,seq,nos,replica,shard,catch,already,closed,exception,ex,continue,assert,that,out,of,sync,shards,primary,primary,shard,routing,docs,on,primary,size,vs,replica,replica,shard,routing,docs,on,replica,size,docs,on,replica,equal,to,docs,on,primary
InternalTestCluster -> public void assertSameDocIdsOnShards() throws Exception;1550570542;Asserts that all shards with the same shardId should have document Ids.;public void assertSameDocIdsOnShards() throws Exception {_        assertBusy(() -> {_            ClusterState state = client().admin().cluster().prepareState().get().getState()__            for (ObjectObjectCursor<String, IndexRoutingTable> indexRoutingTable : state.routingTable().indicesRouting()) {_                for (IntObjectCursor<IndexShardRoutingTable> indexShardRoutingTable : indexRoutingTable.value.shards()) {_                    ShardRouting primaryShardRouting = indexShardRoutingTable.value.primaryShard()__                    IndexShard primaryShard = getShardOrNull(state, primaryShardRouting)__                    if (primaryShard == null) {_                        continue__                    }_                    final List<DocIdSeqNoAndTerm> docsOnPrimary__                    try {_                        docsOnPrimary = IndexShardTestCase.getDocIdAndSeqNos(primaryShard)__                    } catch (AlreadyClosedException ex) {_                        continue__                    }_                    for (ShardRouting replicaShardRouting : indexShardRoutingTable.value.replicaShards()) {_                        IndexShard replicaShard = getShardOrNull(state, replicaShardRouting)__                        if (replicaShard == null) {_                            continue__                        }_                        final List<DocIdSeqNoAndTerm> docsOnReplica__                        try {_                            docsOnReplica = IndexShardTestCase.getDocIdAndSeqNos(replicaShard)__                        } catch (AlreadyClosedException ex) {_                            continue__                        }_                        assertThat("out of sync shards: primary=[" + primaryShardRouting + "] num_docs_on_primary=[" + docsOnPrimary.size()_                                + "] vs replica=[" + replicaShardRouting + "] num_docs_on_replica=[" + docsOnReplica.size() + "]",_                            docsOnReplica, equalTo(docsOnPrimary))__                    }_                }_            }_        })__    };asserts,that,all,shards,with,the,same,shard,id,should,have,document,ids;public,void,assert,same,doc,ids,on,shards,throws,exception,assert,busy,cluster,state,state,client,admin,cluster,prepare,state,get,get,state,for,object,object,cursor,string,index,routing,table,index,routing,table,state,routing,table,indices,routing,for,int,object,cursor,index,shard,routing,table,index,shard,routing,table,index,routing,table,value,shards,shard,routing,primary,shard,routing,index,shard,routing,table,value,primary,shard,index,shard,primary,shard,get,shard,or,null,state,primary,shard,routing,if,primary,shard,null,continue,final,list,doc,id,seq,no,and,term,docs,on,primary,try,docs,on,primary,index,shard,test,case,get,doc,id,and,seq,nos,primary,shard,catch,already,closed,exception,ex,continue,for,shard,routing,replica,shard,routing,index,shard,routing,table,value,replica,shards,index,shard,replica,shard,get,shard,or,null,state,replica,shard,routing,if,replica,shard,null,continue,final,list,doc,id,seq,no,and,term,docs,on,replica,try,docs,on,replica,index,shard,test,case,get,doc,id,and,seq,nos,replica,shard,catch,already,closed,exception,ex,continue,assert,that,out,of,sync,shards,primary,primary,shard,routing,docs,on,primary,size,vs,replica,replica,shard,routing,docs,on,replica,size,docs,on,replica,equal,to,docs,on,primary
InternalTestCluster -> public void assertSameDocIdsOnShards() throws Exception;1550755200;Asserts that all shards with the same shardId should have document Ids.;public void assertSameDocIdsOnShards() throws Exception {_        assertBusy(() -> {_            ClusterState state = client().admin().cluster().prepareState().get().getState()__            for (ObjectObjectCursor<String, IndexRoutingTable> indexRoutingTable : state.routingTable().indicesRouting()) {_                for (IntObjectCursor<IndexShardRoutingTable> indexShardRoutingTable : indexRoutingTable.value.shards()) {_                    ShardRouting primaryShardRouting = indexShardRoutingTable.value.primaryShard()__                    IndexShard primaryShard = getShardOrNull(state, primaryShardRouting)__                    if (primaryShard == null) {_                        continue__                    }_                    final List<DocIdSeqNoAndTerm> docsOnPrimary__                    try {_                        docsOnPrimary = IndexShardTestCase.getDocIdAndSeqNos(primaryShard)__                    } catch (AlreadyClosedException ex) {_                        continue__                    }_                    for (ShardRouting replicaShardRouting : indexShardRoutingTable.value.replicaShards()) {_                        IndexShard replicaShard = getShardOrNull(state, replicaShardRouting)__                        if (replicaShard == null) {_                            continue__                        }_                        final List<DocIdSeqNoAndTerm> docsOnReplica__                        try {_                            docsOnReplica = IndexShardTestCase.getDocIdAndSeqNos(replicaShard)__                        } catch (AlreadyClosedException ex) {_                            continue__                        }_                        assertThat("out of sync shards: primary=[" + primaryShardRouting + "] num_docs_on_primary=[" + docsOnPrimary.size()_                                + "] vs replica=[" + replicaShardRouting + "] num_docs_on_replica=[" + docsOnReplica.size() + "]",_                            docsOnReplica, equalTo(docsOnPrimary))__                    }_                }_            }_        })__    };asserts,that,all,shards,with,the,same,shard,id,should,have,document,ids;public,void,assert,same,doc,ids,on,shards,throws,exception,assert,busy,cluster,state,state,client,admin,cluster,prepare,state,get,get,state,for,object,object,cursor,string,index,routing,table,index,routing,table,state,routing,table,indices,routing,for,int,object,cursor,index,shard,routing,table,index,shard,routing,table,index,routing,table,value,shards,shard,routing,primary,shard,routing,index,shard,routing,table,value,primary,shard,index,shard,primary,shard,get,shard,or,null,state,primary,shard,routing,if,primary,shard,null,continue,final,list,doc,id,seq,no,and,term,docs,on,primary,try,docs,on,primary,index,shard,test,case,get,doc,id,and,seq,nos,primary,shard,catch,already,closed,exception,ex,continue,for,shard,routing,replica,shard,routing,index,shard,routing,table,value,replica,shards,index,shard,replica,shard,get,shard,or,null,state,replica,shard,routing,if,replica,shard,null,continue,final,list,doc,id,seq,no,and,term,docs,on,replica,try,docs,on,replica,index,shard,test,case,get,doc,id,and,seq,nos,replica,shard,catch,already,closed,exception,ex,continue,assert,that,out,of,sync,shards,primary,primary,shard,routing,docs,on,primary,size,vs,replica,replica,shard,routing,docs,on,replica,size,docs,on,replica,equal,to,docs,on,primary
InternalTestCluster -> public void assertSameDocIdsOnShards() throws Exception;1550761203;Asserts that all shards with the same shardId should have document Ids.;public void assertSameDocIdsOnShards() throws Exception {_        assertBusy(() -> {_            ClusterState state = client().admin().cluster().prepareState().get().getState()__            for (ObjectObjectCursor<String, IndexRoutingTable> indexRoutingTable : state.routingTable().indicesRouting()) {_                for (IntObjectCursor<IndexShardRoutingTable> indexShardRoutingTable : indexRoutingTable.value.shards()) {_                    ShardRouting primaryShardRouting = indexShardRoutingTable.value.primaryShard()__                    IndexShard primaryShard = getShardOrNull(state, primaryShardRouting)__                    if (primaryShard == null) {_                        continue__                    }_                    final List<DocIdSeqNoAndTerm> docsOnPrimary__                    try {_                        docsOnPrimary = IndexShardTestCase.getDocIdAndSeqNos(primaryShard)__                    } catch (AlreadyClosedException ex) {_                        continue__                    }_                    for (ShardRouting replicaShardRouting : indexShardRoutingTable.value.replicaShards()) {_                        IndexShard replicaShard = getShardOrNull(state, replicaShardRouting)__                        if (replicaShard == null) {_                            continue__                        }_                        final List<DocIdSeqNoAndTerm> docsOnReplica__                        try {_                            docsOnReplica = IndexShardTestCase.getDocIdAndSeqNos(replicaShard)__                        } catch (AlreadyClosedException ex) {_                            continue__                        }_                        assertThat("out of sync shards: primary=[" + primaryShardRouting + "] num_docs_on_primary=[" + docsOnPrimary.size()_                                + "] vs replica=[" + replicaShardRouting + "] num_docs_on_replica=[" + docsOnReplica.size() + "]",_                            docsOnReplica, equalTo(docsOnPrimary))__                    }_                }_            }_        })__    };asserts,that,all,shards,with,the,same,shard,id,should,have,document,ids;public,void,assert,same,doc,ids,on,shards,throws,exception,assert,busy,cluster,state,state,client,admin,cluster,prepare,state,get,get,state,for,object,object,cursor,string,index,routing,table,index,routing,table,state,routing,table,indices,routing,for,int,object,cursor,index,shard,routing,table,index,shard,routing,table,index,routing,table,value,shards,shard,routing,primary,shard,routing,index,shard,routing,table,value,primary,shard,index,shard,primary,shard,get,shard,or,null,state,primary,shard,routing,if,primary,shard,null,continue,final,list,doc,id,seq,no,and,term,docs,on,primary,try,docs,on,primary,index,shard,test,case,get,doc,id,and,seq,nos,primary,shard,catch,already,closed,exception,ex,continue,for,shard,routing,replica,shard,routing,index,shard,routing,table,value,replica,shards,index,shard,replica,shard,get,shard,or,null,state,replica,shard,routing,if,replica,shard,null,continue,final,list,doc,id,seq,no,and,term,docs,on,replica,try,docs,on,replica,index,shard,test,case,get,doc,id,and,seq,nos,replica,shard,catch,already,closed,exception,ex,continue,assert,that,out,of,sync,shards,primary,primary,shard,routing,docs,on,primary,size,vs,replica,replica,shard,routing,docs,on,replica,size,docs,on,replica,equal,to,docs,on,primary
InternalTestCluster -> public <T> T getInstance(Class<T> clazz, final String node);1550755200;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public <T> T getInstance(Class<T> clazz, final String node);1550761203;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public void fullRestart() throws Exception;1524684173;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1525162917;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1527096592;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1527152864;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1529916081;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1531179852;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1531729807;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1533738061;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1534362961;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1535723122;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1536137328;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1536828374;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1537806831;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1538067637;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1539723533;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1539815831;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1540486836;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1541092382;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1541208696;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1542198296;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1544081506;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1544221624;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1544254415;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1544544737;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1544823664;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1545156327;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1545222364;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1545315633;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1547245564;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1547496886;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1547497728;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1547825802;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1548160032;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1548878955;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1549017271;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1549094096;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1549291259;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1549386680;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1549388544;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1549452878;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1549898480;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1550570542;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1550755200;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public void fullRestart() throws Exception;1550761203;Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.;public void fullRestart() throws Exception {_        fullRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,the,cluster,it,first,stops,all,nodes,and,then,restarts,all,the,nodes,again;public,void,full,restart,throws,exception,full,restart
InternalTestCluster -> public <T> T getInstance(Class<T> clazz);1550755200;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public <T> T getInstance(Class<T> clazz);1550761203;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1536828374;builds a new node given the settings.__@param settings              the settings to use_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), settings, false, defaultMinMasterNodes, onTransportServiceStarted)__    };builds,a,new,node,given,the,settings,param,settings,the,settings,to,use,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,settings,settings,int,default,min,master,nodes,runnable,on,transport,service,started,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,settings,false,default,min,master,nodes,on,transport,service,started
InternalTestCluster -> private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1537806831;builds a new node given the settings.__@param settings              the settings to use_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), settings, false, defaultMinMasterNodes, onTransportServiceStarted)__    };builds,a,new,node,given,the,settings,param,settings,the,settings,to,use,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,settings,settings,int,default,min,master,nodes,runnable,on,transport,service,started,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,settings,false,default,min,master,nodes,on,transport,service,started
InternalTestCluster -> private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1538067637;builds a new node given the settings.__@param settings              the settings to use_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), settings, false, defaultMinMasterNodes, onTransportServiceStarted)__    };builds,a,new,node,given,the,settings,param,settings,the,settings,to,use,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,settings,settings,int,default,min,master,nodes,runnable,on,transport,service,started,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,settings,false,default,min,master,nodes,on,transport,service,started
InternalTestCluster -> private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1539723533;builds a new node given the settings.__@param settings              the settings to use_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), settings, false, defaultMinMasterNodes, onTransportServiceStarted)__    };builds,a,new,node,given,the,settings,param,settings,the,settings,to,use,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,settings,settings,int,default,min,master,nodes,runnable,on,transport,service,started,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,settings,false,default,min,master,nodes,on,transport,service,started
InternalTestCluster -> private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1539815831;builds a new node given the settings.__@param settings              the settings to use_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), settings, false, defaultMinMasterNodes, onTransportServiceStarted)__    };builds,a,new,node,given,the,settings,param,settings,the,settings,to,use,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,settings,settings,int,default,min,master,nodes,runnable,on,transport,service,started,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,settings,false,default,min,master,nodes,on,transport,service,started
InternalTestCluster -> private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1540486836;builds a new node given the settings.__@param settings              the settings to use_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), settings, false, defaultMinMasterNodes, onTransportServiceStarted)__    };builds,a,new,node,given,the,settings,param,settings,the,settings,to,use,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,settings,settings,int,default,min,master,nodes,runnable,on,transport,service,started,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,settings,false,default,min,master,nodes,on,transport,service,started
InternalTestCluster -> private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1541092382;builds a new node given the settings.__@param settings              the settings to use_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), settings, false, defaultMinMasterNodes, onTransportServiceStarted)__    };builds,a,new,node,given,the,settings,param,settings,the,settings,to,use,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,settings,settings,int,default,min,master,nodes,runnable,on,transport,service,started,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,settings,false,default,min,master,nodes,on,transport,service,started
InternalTestCluster -> private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1541208696;builds a new node given the settings.__@param settings              the settings to use_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), settings, false, defaultMinMasterNodes, onTransportServiceStarted)__    };builds,a,new,node,given,the,settings,param,settings,the,settings,to,use,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,settings,settings,int,default,min,master,nodes,runnable,on,transport,service,started,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,settings,false,default,min,master,nodes,on,transport,service,started
InternalTestCluster -> private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1542198296;builds a new node given the settings.__@param settings              the settings to use_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), settings, false, defaultMinMasterNodes, onTransportServiceStarted)__    };builds,a,new,node,given,the,settings,param,settings,the,settings,to,use,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,settings,settings,int,default,min,master,nodes,runnable,on,transport,service,started,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,settings,false,default,min,master,nodes,on,transport,service,started
InternalTestCluster -> private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1544081506;builds a new node given the settings.__@param settings              the settings to use_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), settings, false, defaultMinMasterNodes, onTransportServiceStarted)__    };builds,a,new,node,given,the,settings,param,settings,the,settings,to,use,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,settings,settings,int,default,min,master,nodes,runnable,on,transport,service,started,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,settings,false,default,min,master,nodes,on,transport,service,started
InternalTestCluster -> private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1544221624;builds a new node given the settings.__@param settings              the settings to use_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), settings, false, defaultMinMasterNodes, onTransportServiceStarted)__    };builds,a,new,node,given,the,settings,param,settings,the,settings,to,use,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,settings,settings,int,default,min,master,nodes,runnable,on,transport,service,started,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,settings,false,default,min,master,nodes,on,transport,service,started
InternalTestCluster -> private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1544254415;builds a new node given the settings.__@param settings              the settings to use_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), settings, false, defaultMinMasterNodes, onTransportServiceStarted)__    };builds,a,new,node,given,the,settings,param,settings,the,settings,to,use,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,settings,settings,int,default,min,master,nodes,runnable,on,transport,service,started,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,settings,false,default,min,master,nodes,on,transport,service,started
InternalTestCluster -> private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1544544737;builds a new node given the settings.__@param settings              the settings to use_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), settings, false, defaultMinMasterNodes, onTransportServiceStarted)__    };builds,a,new,node,given,the,settings,param,settings,the,settings,to,use,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,settings,settings,int,default,min,master,nodes,runnable,on,transport,service,started,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,settings,false,default,min,master,nodes,on,transport,service,started
InternalTestCluster -> private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1544823664;builds a new node given the settings.__@param settings              the settings to use_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), settings, false, defaultMinMasterNodes, onTransportServiceStarted)__    };builds,a,new,node,given,the,settings,param,settings,the,settings,to,use,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,settings,settings,int,default,min,master,nodes,runnable,on,transport,service,started,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,settings,false,default,min,master,nodes,on,transport,service,started
InternalTestCluster -> private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1545156327;builds a new node given the settings.__@param settings              the settings to use_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), settings, false, defaultMinMasterNodes, onTransportServiceStarted)__    };builds,a,new,node,given,the,settings,param,settings,the,settings,to,use,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,settings,settings,int,default,min,master,nodes,runnable,on,transport,service,started,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,settings,false,default,min,master,nodes,on,transport,service,started
InternalTestCluster -> private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted);1545222364;builds a new node given the settings.__@param settings              the settings to use_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes, Runnable onTransportServiceStarted) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), settings, false, defaultMinMasterNodes, onTransportServiceStarted)__    };builds,a,new,node,given,the,settings,param,settings,the,settings,to,use,param,default,min,master,nodes,value,to,use,if,is,auto,managed,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,settings,settings,int,default,min,master,nodes,runnable,on,transport,service,started,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,settings,false,default,min,master,nodes,on,transport,service,started
InternalTestCluster -> public Client nonMasterClient();1550755200;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public Client nonMasterClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        throw new AssertionError("No non-master client found")__    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,client,non,master,client,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,throw,new,assertion,error,no,non,master,client,found
InternalTestCluster -> public Client nonMasterClient();1550761203;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public Client nonMasterClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        throw new AssertionError("No non-master client found")__    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,client,non,master,client,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,throw,new,assertion,error,no,non,master,client,found
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1524684173;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1525162917;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1527096592;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1527152864;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1529916081;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1531179852;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1531729807;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1533738061;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1534362961;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1535723122;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1536137328;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1536828374;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1537806831;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1538067637;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1539723533;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1539815831;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1540486836;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1541092382;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1541208696;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1542198296;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1544081506;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1544221624;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1544254415;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1544544737;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1544823664;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1545156327;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1545222364;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1545315633;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1547245564;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1547496886;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1547497728;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1547825802;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1548160032;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1548878955;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1549017271;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1549094096;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1549291259;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1549386680;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1549388544;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1549452878;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1549898480;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1550570542;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1550755200;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> RestartCallback -> public boolean validateClusterForming();1550761203;returns true if the restart should also validate the cluster has reformed;public boolean validateClusterForming() { return true_ };returns,true,if,the,restart,should,also,validate,the,cluster,has,reformed;public,boolean,validate,cluster,forming,return,true
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, Settings settings,                                     boolean reuseExisting, Runnable onTransportServiceStarted);1545315633;builds a new node__@param nodeId                    node ordinal_@param settings                  the settings to use_@param reuseExisting             if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, Settings settings,_                                    boolean reuseExisting, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = settings.get("node.name")___        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                    "node name [" + name + "] already exists but not allowed to use it"__        }__        SecureSettings secureSettings = Settings.builder().put(settings).getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                settings,_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, settings, nodeId)__    };builds,a,new,node,param,node,id,node,ordinal,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,settings,settings,boolean,reuse,existing,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,collection,class,extends,plugin,plugins,get,plugins,string,name,settings,get,node,name,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,secure,settings,secure,settings,settings,builder,put,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,settings,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,settings,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, Settings settings,                                     boolean reuseExisting, Runnable onTransportServiceStarted);1547245564;builds a new node__@param nodeId                    node ordinal_@param settings                  the settings to use_@param reuseExisting             if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, Settings settings,_                                    boolean reuseExisting, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = settings.get("node.name")___        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                    "node name [" + name + "] already exists but not allowed to use it"__        }__        SecureSettings secureSettings = Settings.builder().put(settings).getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                settings,_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, settings, nodeId)__    };builds,a,new,node,param,node,id,node,ordinal,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,settings,settings,boolean,reuse,existing,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,collection,class,extends,plugin,plugins,get,plugins,string,name,settings,get,node,name,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,secure,settings,secure,settings,settings,builder,put,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,settings,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,settings,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, Settings settings,                                     boolean reuseExisting, Runnable onTransportServiceStarted);1547496886;builds a new node__@param nodeId                    node ordinal_@param settings                  the settings to use_@param reuseExisting             if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, Settings settings,_                                    boolean reuseExisting, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = settings.get("node.name")___        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                    "node name [" + name + "] already exists but not allowed to use it"__        }__        SecureSettings secureSettings = Settings.builder().put(settings).getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                settings,_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, settings, nodeId)__    };builds,a,new,node,param,node,id,node,ordinal,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,settings,settings,boolean,reuse,existing,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,collection,class,extends,plugin,plugins,get,plugins,string,name,settings,get,node,name,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,secure,settings,secure,settings,settings,builder,put,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,settings,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,settings,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, Settings settings,                                     boolean reuseExisting, Runnable onTransportServiceStarted);1547497728;builds a new node__@param nodeId                    node ordinal_@param settings                  the settings to use_@param reuseExisting             if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, Settings settings,_                                    boolean reuseExisting, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = settings.get("node.name")___        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                    "node name [" + name + "] already exists but not allowed to use it"__        }__        SecureSettings secureSettings = Settings.builder().put(settings).getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                settings,_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, settings, nodeId)__    };builds,a,new,node,param,node,id,node,ordinal,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,settings,settings,boolean,reuse,existing,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,collection,class,extends,plugin,plugins,get,plugins,string,name,settings,get,node,name,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,secure,settings,secure,settings,settings,builder,put,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,settings,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,settings,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, Settings settings,                                     boolean reuseExisting, Runnable onTransportServiceStarted);1547825802;builds a new node__@param nodeId                    node ordinal_@param settings                  the settings to use_@param reuseExisting             if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, Settings settings,_                                    boolean reuseExisting, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = settings.get("node.name")___        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                    "node name [" + name + "] already exists but not allowed to use it"__        }__        SecureSettings secureSettings = Settings.builder().put(settings).getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                settings,_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, settings, nodeId)__    };builds,a,new,node,param,node,id,node,ordinal,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,settings,settings,boolean,reuse,existing,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,collection,class,extends,plugin,plugins,get,plugins,string,name,settings,get,node,name,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,secure,settings,secure,settings,settings,builder,put,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,settings,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,settings,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, Settings settings,                                     boolean reuseExisting, Runnable onTransportServiceStarted);1548160032;builds a new node__@param nodeId                    node ordinal_@param settings                  the settings to use_@param reuseExisting             if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, Settings settings,_                                    boolean reuseExisting, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = settings.get("node.name")___        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                    "node name [" + name + "] already exists but not allowed to use it"__        }__        SecureSettings secureSettings = Settings.builder().put(settings).getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                settings,_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, settings, nodeId)__    };builds,a,new,node,param,node,id,node,ordinal,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,settings,settings,boolean,reuse,existing,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,collection,class,extends,plugin,plugins,get,plugins,string,name,settings,get,node,name,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,secure,settings,secure,settings,settings,builder,put,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,settings,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,settings,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, Settings settings,                                     boolean reuseExisting, Runnable onTransportServiceStarted);1548878955;builds a new node__@param nodeId                    node ordinal_@param settings                  the settings to use_@param reuseExisting             if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, Settings settings,_                                    boolean reuseExisting, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = settings.get("node.name")___        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                    "node name [" + name + "] already exists but not allowed to use it"__        }__        SecureSettings secureSettings = Settings.builder().put(settings).getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                settings,_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, settings, nodeId)__    };builds,a,new,node,param,node,id,node,ordinal,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,settings,settings,boolean,reuse,existing,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,collection,class,extends,plugin,plugins,get,plugins,string,name,settings,get,node,name,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,secure,settings,secure,settings,settings,builder,put,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,settings,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,settings,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, Settings settings,                                     boolean reuseExisting, Runnable onTransportServiceStarted);1549017271;builds a new node__@param nodeId                    node ordinal_@param settings                  the settings to use_@param reuseExisting             if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, Settings settings,_                                    boolean reuseExisting, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = settings.get("node.name")___        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                    "node name [" + name + "] already exists but not allowed to use it"__        }__        SecureSettings secureSettings = Settings.builder().put(settings).getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                settings,_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, settings, nodeId)__    };builds,a,new,node,param,node,id,node,ordinal,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,settings,settings,boolean,reuse,existing,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,collection,class,extends,plugin,plugins,get,plugins,string,name,settings,get,node,name,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,secure,settings,secure,settings,settings,builder,put,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,settings,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,settings,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, Settings settings,                                     boolean reuseExisting, Runnable onTransportServiceStarted);1549094096;builds a new node__@param nodeId                    node ordinal_@param settings                  the settings to use_@param reuseExisting             if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, Settings settings,_                                    boolean reuseExisting, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = settings.get("node.name")___        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                    "node name [" + name + "] already exists but not allowed to use it"__        }__        SecureSettings secureSettings = Settings.builder().put(settings).getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                settings,_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, settings, nodeId)__    };builds,a,new,node,param,node,id,node,ordinal,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,settings,settings,boolean,reuse,existing,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,collection,class,extends,plugin,plugins,get,plugins,string,name,settings,get,node,name,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,secure,settings,secure,settings,settings,builder,put,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,settings,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,settings,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, Settings settings,                                     boolean reuseExisting, Runnable onTransportServiceStarted);1549291259;builds a new node__@param nodeId                    node ordinal_@param settings                  the settings to use_@param reuseExisting             if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, Settings settings,_                                    boolean reuseExisting, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = settings.get("node.name")___        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                    "node name [" + name + "] already exists but not allowed to use it"__        }__        SecureSettings secureSettings = Settings.builder().put(settings).getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                settings,_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, settings, nodeId)__    };builds,a,new,node,param,node,id,node,ordinal,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,settings,settings,boolean,reuse,existing,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,collection,class,extends,plugin,plugins,get,plugins,string,name,settings,get,node,name,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,secure,settings,secure,settings,settings,builder,put,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,settings,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,settings,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, Settings settings,                                     boolean reuseExisting, Runnable onTransportServiceStarted);1549386680;builds a new node__@param nodeId                    node ordinal_@param settings                  the settings to use_@param reuseExisting             if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, Settings settings,_                                    boolean reuseExisting, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = settings.get("node.name")___        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                    "node name [" + name + "] already exists but not allowed to use it"__        }__        SecureSettings secureSettings = Settings.builder().put(settings).getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                settings,_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, settings, nodeId)__    };builds,a,new,node,param,node,id,node,ordinal,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,settings,settings,boolean,reuse,existing,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,collection,class,extends,plugin,plugins,get,plugins,string,name,settings,get,node,name,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,secure,settings,secure,settings,settings,builder,put,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,settings,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,settings,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, Settings settings,                                     boolean reuseExisting, Runnable onTransportServiceStarted);1549388544;builds a new node__@param nodeId                    node ordinal_@param settings                  the settings to use_@param reuseExisting             if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, Settings settings,_                                    boolean reuseExisting, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = settings.get("node.name")___        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                    "node name [" + name + "] already exists but not allowed to use it"__        }__        SecureSettings secureSettings = Settings.builder().put(settings).getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                settings,_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, settings, nodeId)__    };builds,a,new,node,param,node,id,node,ordinal,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,settings,settings,boolean,reuse,existing,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,collection,class,extends,plugin,plugins,get,plugins,string,name,settings,get,node,name,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,secure,settings,secure,settings,settings,builder,put,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,settings,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,settings,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, Settings settings,                                     boolean reuseExisting, Runnable onTransportServiceStarted);1549452878;builds a new node__@param nodeId                    node ordinal_@param settings                  the settings to use_@param reuseExisting             if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, Settings settings,_                                    boolean reuseExisting, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = settings.get("node.name")___        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                    "node name [" + name + "] already exists but not allowed to use it"__        }__        SecureSettings secureSettings = Settings.builder().put(settings).getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                settings,_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, settings, nodeId)__    };builds,a,new,node,param,node,id,node,ordinal,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,settings,settings,boolean,reuse,existing,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,collection,class,extends,plugin,plugins,get,plugins,string,name,settings,get,node,name,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,secure,settings,secure,settings,settings,builder,put,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,settings,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,settings,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, Settings settings,                                     boolean reuseExisting, Runnable onTransportServiceStarted);1549898480;builds a new node__@param nodeId                    node ordinal_@param settings                  the settings to use_@param reuseExisting             if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, Settings settings,_                                    boolean reuseExisting, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = settings.get("node.name")___        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                    "node name [" + name + "] already exists but not allowed to use it"__        }__        SecureSettings secureSettings = Settings.builder().put(settings).getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                settings,_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, settings, nodeId)__    };builds,a,new,node,param,node,id,node,ordinal,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,settings,settings,boolean,reuse,existing,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,collection,class,extends,plugin,plugins,get,plugins,string,name,settings,get,node,name,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,secure,settings,secure,settings,settings,builder,put,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,settings,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,settings,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, Settings settings,                                     boolean reuseExisting, Runnable onTransportServiceStarted);1550570542;builds a new node__@param nodeId                    node ordinal_@param settings                  the settings to use_@param reuseExisting             if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param onTransportServiceStarted callback to run when transport service is started;private NodeAndClient buildNode(int nodeId, Settings settings,_                                    boolean reuseExisting, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = settings.get("node.name")___        if (reuseExisting && nodes.containsKey(name)) {_            onTransportServiceStarted.run()_ _            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                    "node name [" + name + "] already exists but not allowed to use it"__        }__        SecureSettings secureSettings = Settings.builder().put(settings).getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                settings,_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, settings, nodeId)__    };builds,a,new,node,param,node,id,node,ordinal,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,node,and,client,build,node,int,node,id,settings,settings,boolean,reuse,existing,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,collection,class,extends,plugin,plugins,get,plugins,string,name,settings,get,node,name,if,reuse,existing,nodes,contains,key,name,on,transport,service,started,run,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,secure,settings,secure,settings,settings,builder,put,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,settings,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,settings,node,id
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1524684173;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1525162917;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1527096592;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1527152864;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1529916081;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1531179852;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1531729807;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1533738061;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1534362961;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1535723122;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1536137328;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1536828374;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1537806831;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1538067637;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1539723533;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1539815831;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1540486836;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1541092382;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1541208696;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1542198296;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1544081506;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1544221624;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1544254415;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1544544737;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1544823664;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1545156327;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1545222364;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1545315633;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1547245564;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1547496886;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1547497728;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1547825802;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1548160032;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1548878955;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1549017271;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1549094096;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1549291259;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1549386680;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1549388544;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1549452878;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1549898480;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized List<String> startNodes(int numOfNodes);1550570542;Starts multiple nodes with default settings and returns their names;public synchronized List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1524684173;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection =_            n == 0 ? nodes.values().stream() : nodes.values().stream().filter(new DataNodePredicate().and(new MasterNodePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,master,node,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1525162917;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection =_            n == 0 ? nodes.values().stream() : nodes.values().stream().filter(new DataNodePredicate().and(new MasterNodePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,master,node,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1527096592;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection =_            n == 0 ? nodes.values().stream() : nodes.values().stream().filter(new DataNodePredicate().and(new MasterNodePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,master,node,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1527152864;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection =_            n == 0 ? nodes.values().stream() : nodes.values().stream().filter(new DataNodePredicate().and(new MasterNodePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,master,node,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1529916081;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection =_            n == 0 ? nodes.values().stream() : nodes.values().stream().filter(new DataNodePredicate().and(new MasterNodePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,master,node,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1531179852;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection =_            n == 0 ? nodes.values().stream() : nodes.values().stream().filter(new DataNodePredicate().and(new MasterNodePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,master,node,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1531729807;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection =_            n == 0 ? nodes.values().stream() : nodes.values().stream().filter(new DataNodePredicate().and(new MasterNodePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,master,node,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1533738061;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection =_            n == 0 ? nodes.values().stream() : nodes.values().stream().filter(new DataNodePredicate().and(new MasterNodePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,master,node,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1534362961;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection =_            n == 0 ? nodes.values().stream() : nodes.values().stream().filter(new DataNodePredicate().and(new MasterNodePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,master,node,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1535723122;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection =_            n == 0 ? nodes.values().stream() : nodes.values().stream().filter(new DataNodePredicate().and(new MasterNodePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,master,node,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1536137328;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection =_            n == 0 ? nodes.values().stream() : nodes.values().stream().filter(new DataNodePredicate().and(new MasterNodePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,master,node,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1536828374;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection =_            n == 0 ? nodes.values().stream() : nodes.values().stream().filter(new DataNodePredicate().and(new MasterNodePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,master,node,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1537806831;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(new DataNodePredicate().and(new MasterNodePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,master,node,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1538067637;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(new DataNodePredicate().and(new MasterNodePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,master,node,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1539723533;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(new DataNodePredicate().and(new MasterNodePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,master,node,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1539815831;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(new DataNodePredicate().and(new MasterNodePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,master,node,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1540486836;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(new DataNodePredicate().and(new MasterNodePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,master,node,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1541092382;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(new DataNodePredicate().and(new MasterNodePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,master,node,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1541208696;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(new DataNodePredicate().and(new MasterNodePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,master,node,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1542198296;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(new DataNodePredicate().and(new MasterNodePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,master,node,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1544081506;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(new DataNodePredicate().and(new NodeNamePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,node,name,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1544221624;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(new DataNodePredicate().and(new NodeNamePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,node,name,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1544254415;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(new DataNodePredicate().and(new NodeNamePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,node,name,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1544544737;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(new DataNodePredicate().and(new NodeNamePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,node,name,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1544823664;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(new DataNodePredicate().and(new NodeNamePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,node,name,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1545156327;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(new DataNodePredicate().and(new NodeNamePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,node,name,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1545222364;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(new DataNodePredicate().and(new NodeNamePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,node,name,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1545315633;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(new DataNodePredicate().and(new NodeNamePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,node,name,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1547245564;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(new DataNodePredicate().and(new NodeNamePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,node,name,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1547496886;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(new DataNodePredicate().and(new NodeNamePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,node,name,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1547497728;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(new DataNodePredicate().and(new NodeNamePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,node,name,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1547825802;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(new DataNodePredicate().and(new NodeNamePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,node,name,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1548160032;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(new DataNodePredicate().and(new NodeNamePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,node,name,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1548878955;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(new DataNodePredicate().and(new NodeNamePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,node,name,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1549017271;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(new DataNodePredicate().and(new NodeNamePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,node,name,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1549094096;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(new DataNodePredicate().and(new NodeNamePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,node,name,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1549291259;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(new DataNodePredicate().and(new NodeNamePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,node,name,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1549386680;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(new DataNodePredicate().and(new NodeNamePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,node,name,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1549388544;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(new DataNodePredicate().and(new NodeNamePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,node,name,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1549452878;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(new DataNodePredicate().and(new NodeNamePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,node,name,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1549898480;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(new DataNodePredicate().and(new NodeNamePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,node,name,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1550570542;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(new DataNodePredicate().and(new NodeNamePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,new,data,node,predicate,and,new,node,name,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1550755200;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(DATA_NODE_PREDICATE.and(new NodeNamePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,and,new,node,name,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized void ensureAtMostNumDataNodes(int n) throws IOException;1550761203;Ensures that at most <code>n</code> are up and running._If less nodes that <code>n</code> are running this method_will not start any additional nodes.;public synchronized void ensureAtMostNumDataNodes(int n) throws IOException {_        int size = numDataNodes()__        if (size <= n) {_            return__        }_        _        final Stream<NodeAndClient> collection = n == 0_                ? nodes.values().stream()_                : nodes.values().stream()_                        .filter(DATA_NODE_PREDICATE.and(new NodeNamePredicate(getMasterName()).negate()))__        final Iterator<NodeAndClient> values = collection.iterator()___        logger.info("changing cluster size from {} data nodes to {}", size, n)__        Set<NodeAndClient> nodesToRemove = new HashSet<>()__        int numNodesAndClients = 0__        while (values.hasNext() && numNodesAndClients++ < size - n) {_            NodeAndClient next = values.next()__            nodesToRemove.add(next)__        }__        stopNodesAndClients(nodesToRemove)__        if (!nodesToRemove.isEmpty() && size() > 0) {_            validateClusterFormed()__        }_    };ensures,that,at,most,code,n,code,are,up,and,running,if,less,nodes,that,code,n,code,are,running,this,method,will,not,start,any,additional,nodes;public,synchronized,void,ensure,at,most,num,data,nodes,int,n,throws,ioexception,int,size,num,data,nodes,if,size,n,return,final,stream,node,and,client,collection,n,0,nodes,values,stream,nodes,values,stream,filter,and,new,node,name,predicate,get,master,name,negate,final,iterator,node,and,client,values,collection,iterator,logger,info,changing,cluster,size,from,data,nodes,to,size,n,set,node,and,client,nodes,to,remove,new,hash,set,int,num,nodes,and,clients,0,while,values,has,next,num,nodes,and,clients,size,n,node,and,client,next,values,next,nodes,to,remove,add,next,stop,nodes,and,clients,nodes,to,remove,if,nodes,to,remove,is,empty,size,0,validate,cluster,formed
InternalTestCluster -> public synchronized String startNode();1524684173;Starts a node with default settings and returns it's name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,it,s,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1525162917;Starts a node with default settings and returns it's name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,it,s,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1527096592;Starts a node with default settings and returns it's name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,it,s,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1527152864;Starts a node with default settings and returns it's name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,it,s,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1529916081;Starts a node with default settings and returns it's name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,it,s,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1531179852;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1531729807;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1533738061;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1534362961;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1535723122;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1536137328;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1536828374;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1537806831;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1538067637;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1539723533;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1539815831;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1540486836;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1541092382;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1541208696;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1542198296;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1544081506;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1544221624;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1544254415;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1544544737;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1544823664;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1545156327;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1545222364;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1545315633;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1547245564;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1547496886;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1547497728;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1547825802;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1548160032;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1548878955;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1549017271;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1549094096;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1549291259;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1549386680;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1549388544;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1549452878;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1549898480;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public synchronized String startNode();1550570542;Starts a node with default settings and returns its name.;public synchronized String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,synchronized,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1535723122;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1536137328;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1536828374;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1537806831;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1538067637;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1539723533;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1539815831;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1540486836;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1541092382;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1541208696;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1542198296;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1544081506;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1544221624;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1544254415;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1544544737;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1544823664;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1545156327;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1545222364;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1545315633;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1547245564;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1547496886;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1547497728;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1547825802;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1548160032;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1548878955;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1549017271;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1549094096;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1549291259;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1549386680;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1549388544;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1549452878;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1549898480;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1550570542;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        final Collection<NodeAndClient> nodesAndClients = nodes.values()__        for (NodeAndClient nodeAndClient : nodesAndClients) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,final,collection,node,and,client,nodes,and,clients,nodes,values,for,node,and,client,node,and,client,nodes,and,clients,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1550755200;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        for (NodeAndClient nodeAndClient : nodes.values()) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,for,node,and,client,node,and,client,nodes,values,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException;1550761203;Asserts that the document history in Lucene index is consistent with Translog's on every index shard of the cluster._This assertion might be expensive, thus we prefer not to execute on every test but only interesting tests.;public void assertConsistentHistoryBetweenTranslogAndLuceneIndex() throws IOException {_        for (NodeAndClient nodeAndClient : nodes.values()) {_            IndicesService indexServices = getInstance(IndicesService.class, nodeAndClient.name)__            for (IndexService indexService : indexServices) {_                for (IndexShard indexShard : indexService) {_                    try {_                        IndexShardTestCase.assertConsistentHistoryBetweenTranslogAndLucene(indexShard)__                    } catch (AlreadyClosedException ignored) {_                        _                    }_                }_            }_        }_    };asserts,that,the,document,history,in,lucene,index,is,consistent,with,translog,s,on,every,index,shard,of,the,cluster,this,assertion,might,be,expensive,thus,we,prefer,not,to,execute,on,every,test,but,only,interesting,tests;public,void,assert,consistent,history,between,translog,and,lucene,index,throws,ioexception,for,node,and,client,node,and,client,nodes,values,indices,service,index,services,get,instance,indices,service,class,node,and,client,name,for,index,service,index,service,index,services,for,index,shard,index,shard,index,service,try,index,shard,test,case,assert,consistent,history,between,translog,and,lucene,index,shard,catch,already,closed,exception,ignored
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1524684173;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1525162917;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1527096592;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1527152864;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1529916081;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1531179852;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1531729807;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1533738061;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1534362961;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1535723122;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1536137328;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1536828374;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1537806831;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1538067637;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1539723533;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1539815831;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1540486836;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1541092382;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1541208696;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1542198296;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1544081506;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1544221624;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1544254415;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1544544737;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1544823664;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1545156327;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1545222364;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1545315633;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1547245564;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1547496886;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1547497728;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1547825802;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1548160032;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1548878955;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1549017271;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1549094096;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1549291259;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1549386680;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1549388544;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1549452878;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1549898480;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1550570542;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NoDataNoMasterNodePredicate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(new NoDataNoMasterNodePredicate()).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,no,data,no,master,node,predicate,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,new,no,data,no,master,node,predicate,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1550755200;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(NO_DATA_NO_MASTER_PREDICATE)__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(NO_DATA_NO_MASTER_PREDICATE).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,client,random
InternalTestCluster -> public synchronized Client coordOnlyNodeClient();1550761203;Returns a client to a coordinating only node;public synchronized Client coordOnlyNodeClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(NO_DATA_NO_MASTER_PREDICATE)__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.client(random)__        }_        int nodeId = nextNodeId.getAndIncrement()__        Settings settings = getSettings(nodeId, random.nextLong(), Settings.EMPTY)__        startCoordinatingOnlyNode(settings)__        return getRandomNodeAndClient(NO_DATA_NO_MASTER_PREDICATE).client(random)__    };returns,a,client,to,a,coordinating,only,node;public,synchronized,client,coord,only,node,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,client,random,int,node,id,next,node,id,get,and,increment,settings,settings,get,settings,node,id,random,next,long,settings,empty,start,coordinating,only,node,settings,return,get,random,node,and,client,client,random
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1524684173;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1525162917;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1527096592;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1527152864;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1529916081;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1531179852;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1531729807;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1533738061;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1534362961;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1535723122;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1536137328;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1536828374;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1537806831;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1538067637;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1539723533;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1539815831;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1540486836;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1541092382;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1541208696;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1542198296;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1544081506;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1544221624;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1544254415;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1544544737;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1544823664;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1545156327;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1545222364;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1545315633;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1547245564;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1547496886;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1547497728;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1547825802;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1548160032;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1548878955;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1549017271;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1549094096;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1549291259;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1549386680;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1549388544;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1549452878;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1549898480;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private int getMinMasterNodes(int eligibleMasterNodes);1550570542;calculates a min master nodes value based on the given number of master nodes;private int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1524684173;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1525162917;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1527096592;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1527152864;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1529916081;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1531179852;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1531729807;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1533738061;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1534362961;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1535723122;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1536137328;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1536828374;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1537806831;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1538067637;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1539723533;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1539815831;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1540486836;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1541092382;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1541208696;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1542198296;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1544081506;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1544221624;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1544254415;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1544544737;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1544823664;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1545156327;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1545222364;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1545315633;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1547245564;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1547496886;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1547497728;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1547825802;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1548160032;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1548878955;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1549017271;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1549094096;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1549291259;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1549386680;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1549388544;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1549452878;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1549898480;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1550570542;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1550755200;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> RestartCallback -> public Settings onNodeStopped(String nodeName) throws Exception;1550761203;Executed once the give node name has been stopped.;public Settings onNodeStopped(String nodeName) throws Exception {_            return Settings.EMPTY__        };executed,once,the,give,node,name,has,been,stopped;public,settings,on,node,stopped,string,node,name,throws,exception,return,settings,empty
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1524684173;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1525162917;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1527096592;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1527152864;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1529916081;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1531179852;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1531729807;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1533738061;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1534362961;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1535723122;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1536137328;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1536828374;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1537806831;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1538067637;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1539723533;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1539815831;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1540486836;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1541092382;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1541208696;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1542198296;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1544081506;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1544221624;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1544254415;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1544544737;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1544823664;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1545156327;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1545222364;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1545315633;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1547245564;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1547496886;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1547497728;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1547825802;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1548160032;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1548878955;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1549017271;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1549094096;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1549291259;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1549386680;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1549388544;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1549452878;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1549898480;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> private int updateMinMasterNodes(int eligibleMasterNodeCount);1550570542;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private int updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_        return minMasterNodes__    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,int,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count,return,min,master,nodes
InternalTestCluster -> public String nodePrefix();1524684173;Returns the common node name prefix for this test cluster.;public String nodePrefix() {_        return nodePrefix__    };returns,the,common,node,name,prefix,for,this,test,cluster;public,string,node,prefix,return,node,prefix
InternalTestCluster -> public String nodePrefix();1525162917;Returns the common node name prefix for this test cluster.;public String nodePrefix() {_        return nodePrefix__    };returns,the,common,node,name,prefix,for,this,test,cluster;public,string,node,prefix,return,node,prefix
InternalTestCluster -> public String nodePrefix();1527096592;Returns the common node name prefix for this test cluster.;public String nodePrefix() {_        return nodePrefix__    };returns,the,common,node,name,prefix,for,this,test,cluster;public,string,node,prefix,return,node,prefix
InternalTestCluster -> public String nodePrefix();1527152864;Returns the common node name prefix for this test cluster.;public String nodePrefix() {_        return nodePrefix__    };returns,the,common,node,name,prefix,for,this,test,cluster;public,string,node,prefix,return,node,prefix
InternalTestCluster -> public String nodePrefix();1529916081;Returns the common node name prefix for this test cluster.;public String nodePrefix() {_        return nodePrefix__    };returns,the,common,node,name,prefix,for,this,test,cluster;public,string,node,prefix,return,node,prefix
InternalTestCluster -> public String nodePrefix();1531179852;Returns the common node name prefix for this test cluster.;public String nodePrefix() {_        return nodePrefix__    };returns,the,common,node,name,prefix,for,this,test,cluster;public,string,node,prefix,return,node,prefix
InternalTestCluster -> public String nodePrefix();1531729807;Returns the common node name prefix for this test cluster.;public String nodePrefix() {_        return nodePrefix__    };returns,the,common,node,name,prefix,for,this,test,cluster;public,string,node,prefix,return,node,prefix
InternalTestCluster -> public String nodePrefix();1533738061;Returns the common node name prefix for this test cluster.;public String nodePrefix() {_        return nodePrefix__    };returns,the,common,node,name,prefix,for,this,test,cluster;public,string,node,prefix,return,node,prefix
InternalTestCluster -> public String nodePrefix();1534362961;Returns the common node name prefix for this test cluster.;public String nodePrefix() {_        return nodePrefix__    };returns,the,common,node,name,prefix,for,this,test,cluster;public,string,node,prefix,return,node,prefix
InternalTestCluster -> public String nodePrefix();1535723122;Returns the common node name prefix for this test cluster.;public String nodePrefix() {_        return nodePrefix__    };returns,the,common,node,name,prefix,for,this,test,cluster;public,string,node,prefix,return,node,prefix
InternalTestCluster -> public String nodePrefix();1536137328;Returns the common node name prefix for this test cluster.;public String nodePrefix() {_        return nodePrefix__    };returns,the,common,node,name,prefix,for,this,test,cluster;public,string,node,prefix,return,node,prefix
InternalTestCluster -> public String nodePrefix();1536828374;Returns the common node name prefix for this test cluster.;public String nodePrefix() {_        return nodePrefix__    };returns,the,common,node,name,prefix,for,this,test,cluster;public,string,node,prefix,return,node,prefix
InternalTestCluster -> public String nodePrefix();1537806831;Returns the common node name prefix for this test cluster.;public String nodePrefix() {_        return nodePrefix__    };returns,the,common,node,name,prefix,for,this,test,cluster;public,string,node,prefix,return,node,prefix
InternalTestCluster -> public String nodePrefix();1538067637;Returns the common node name prefix for this test cluster.;public String nodePrefix() {_        return nodePrefix__    };returns,the,common,node,name,prefix,for,this,test,cluster;public,string,node,prefix,return,node,prefix
InternalTestCluster -> public String nodePrefix();1539723533;Returns the common node name prefix for this test cluster.;public String nodePrefix() {_        return nodePrefix__    };returns,the,common,node,name,prefix,for,this,test,cluster;public,string,node,prefix,return,node,prefix
InternalTestCluster -> public ClusterService clusterService(@Nullable String node);1550755200;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> public ClusterService clusterService(@Nullable String node);1550761203;Returns a reference to a node's {@link ClusterService}. If the given node is null, a random node will be selected.;public ClusterService clusterService(@Nullable String node) {_        return getInstance(ClusterService.class, node)__    };returns,a,reference,to,a,node,s,link,cluster,service,if,the,given,node,is,null,a,random,node,will,be,selected;public,cluster,service,cluster,service,nullable,string,node,return,get,instance,cluster,service,class,node
InternalTestCluster -> private NodeAndClient buildNode(int defaultMinMasterNodes);1524684173;builds a new node with default settings__@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(int defaultMinMasterNodes) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), null, false, defaultMinMasterNodes)__    };builds,a,new,node,with,default,settings,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,int,default,min,master,nodes,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,null,false,default,min,master,nodes
InternalTestCluster -> private NodeAndClient buildNode(int defaultMinMasterNodes);1525162917;builds a new node with default settings__@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(int defaultMinMasterNodes) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), null, false, defaultMinMasterNodes)__    };builds,a,new,node,with,default,settings,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,int,default,min,master,nodes,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,null,false,default,min,master,nodes
InternalTestCluster -> private NodeAndClient buildNode(int defaultMinMasterNodes);1527096592;builds a new node with default settings__@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(int defaultMinMasterNodes) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), null, false, defaultMinMasterNodes)__    };builds,a,new,node,with,default,settings,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,int,default,min,master,nodes,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,null,false,default,min,master,nodes
InternalTestCluster -> private NodeAndClient buildNode(int defaultMinMasterNodes);1527152864;builds a new node with default settings__@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(int defaultMinMasterNodes) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), null, false, defaultMinMasterNodes)__    };builds,a,new,node,with,default,settings,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,int,default,min,master,nodes,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,null,false,default,min,master,nodes
InternalTestCluster -> private NodeAndClient buildNode(int defaultMinMasterNodes);1529916081;builds a new node with default settings__@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(int defaultMinMasterNodes) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), null, false, defaultMinMasterNodes)__    };builds,a,new,node,with,default,settings,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,int,default,min,master,nodes,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,null,false,default,min,master,nodes
InternalTestCluster -> private NodeAndClient buildNode(int defaultMinMasterNodes);1531179852;builds a new node with default settings__@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(int defaultMinMasterNodes) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), null, false, defaultMinMasterNodes)__    };builds,a,new,node,with,default,settings,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,int,default,min,master,nodes,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,null,false,default,min,master,nodes
InternalTestCluster -> private NodeAndClient buildNode(int defaultMinMasterNodes);1531729807;builds a new node with default settings__@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(int defaultMinMasterNodes) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), null, false, defaultMinMasterNodes)__    };builds,a,new,node,with,default,settings,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,int,default,min,master,nodes,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,null,false,default,min,master,nodes
InternalTestCluster -> private NodeAndClient buildNode(int defaultMinMasterNodes);1533738061;builds a new node with default settings__@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(int defaultMinMasterNodes) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), null, false, defaultMinMasterNodes)__    };builds,a,new,node,with,default,settings,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,int,default,min,master,nodes,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,null,false,default,min,master,nodes
InternalTestCluster -> private NodeAndClient buildNode(int defaultMinMasterNodes);1534362961;builds a new node with default settings__@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(int defaultMinMasterNodes) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), null, false, defaultMinMasterNodes)__    };builds,a,new,node,with,default,settings,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,int,default,min,master,nodes,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,null,false,default,min,master,nodes
InternalTestCluster -> private NodeAndClient buildNode(int defaultMinMasterNodes);1535723122;builds a new node with default settings__@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(int defaultMinMasterNodes) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), null, false, defaultMinMasterNodes)__    };builds,a,new,node,with,default,settings,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,int,default,min,master,nodes,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,null,false,default,min,master,nodes
InternalTestCluster -> private NodeAndClient buildNode(int defaultMinMasterNodes);1536137328;builds a new node with default settings__@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(int defaultMinMasterNodes) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), null, false, defaultMinMasterNodes)__    };builds,a,new,node,with,default,settings,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,int,default,min,master,nodes,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,null,false,default,min,master,nodes
InternalTestCluster -> public synchronized List<String> startNodes(Settings... extraSettings);1545315633;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... extraSettings) {_        final int newMasterCount = Math.toIntExact(Stream.of(extraSettings).filter(Node.NODE_MASTER_SETTING::get).count())__        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + newMasterCount)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        final int prevMasterCount = getMasterNodesCount()__        int bootstrapMasterNodeIndex =_                prevMasterCount == 0 && autoManageMinMasterNodes && newMasterCount > 0 && Arrays.stream(extraSettings)_            .allMatch(s -> Node.NODE_MASTER_SETTING.get(s) == false || TestZenDiscovery.USE_ZEN2.get(s) == true)_            ? RandomNumbers.randomIntBetween(random, 0, newMasterCount - 1) : -1___        final int numOfNodes = extraSettings.length__        final int firstNodeId = nextNodeId.getAndIncrement()__        final List<Settings> settings = new ArrayList<>()__        for (int i = 0_ i < numOfNodes_ i++) {_            settings.add(getNodeSettings(firstNodeId + i, random.nextLong(), extraSettings[i], defaultMinMasterNodes))__        }_        nextNodeId.set(firstNodeId + numOfNodes)___        final List<String> initialMasterNodes = settings.stream()_                .filter(Node.NODE_MASTER_SETTING::get)_                .map(Node.NODE_NAME_SETTING::get)_                .collect(Collectors.toList())___        final List<Settings> updatedSettings = nodeConfigurationSource.addExtraClusterBootstrapSettings(settings)___        for (int i = 0_ i < numOfNodes_ i++) {_            final Settings nodeSettings = updatedSettings.get(i)__            final Builder builder = Settings.builder()__            if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                if (bootstrapMasterNodeIndex == 0) {_                    builder.putList(INITIAL_MASTER_NODES_SETTING.getKey(), initialMasterNodes)__                }_                bootstrapMasterNodeIndex -= 1__            }__            final NodeAndClient nodeAndClient =_                    buildNode(firstNodeId + i, builder.put(nodeSettings).build(), false, () -> rebuildUnicastHostFiles(nodes))__            nodes.add(nodeAndClient)__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }_        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,extra,settings,final,int,new,master,count,math,to,int,exact,stream,of,extra,settings,filter,node,get,count,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,new,master,count,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,final,int,prev,master,count,get,master,nodes,count,int,bootstrap,master,node,index,prev,master,count,0,auto,manage,min,master,nodes,new,master,count,0,arrays,stream,extra,settings,all,match,s,node,get,s,false,test,zen,discovery,get,s,true,random,numbers,random,int,between,random,0,new,master,count,1,1,final,int,num,of,nodes,extra,settings,length,final,int,first,node,id,next,node,id,get,and,increment,final,list,settings,settings,new,array,list,for,int,i,0,i,num,of,nodes,i,settings,add,get,node,settings,first,node,id,i,random,next,long,extra,settings,i,default,min,master,nodes,next,node,id,set,first,node,id,num,of,nodes,final,list,string,initial,master,nodes,settings,stream,filter,node,get,map,node,get,collect,collectors,to,list,final,list,settings,updated,settings,node,configuration,source,add,extra,cluster,bootstrap,settings,settings,for,int,i,0,i,num,of,nodes,i,final,settings,node,settings,updated,settings,get,i,final,builder,builder,settings,builder,if,node,get,node,settings,if,bootstrap,master,node,index,0,builder,put,list,get,key,initial,master,nodes,bootstrap,master,node,index,1,final,node,and,client,node,and,client,build,node,first,node,id,i,builder,put,node,settings,build,false,rebuild,unicast,host,files,nodes,nodes,add,node,and,client,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... extraSettings);1547245564;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... extraSettings) {_        final int newMasterCount = Math.toIntExact(Stream.of(extraSettings).filter(Node.NODE_MASTER_SETTING::get).count())__        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + newMasterCount)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        final int prevMasterCount = getMasterNodesCount()__        int bootstrapMasterNodeIndex =_                prevMasterCount == 0 && autoManageMinMasterNodes && newMasterCount > 0 && Arrays.stream(extraSettings)_            .allMatch(s -> Node.NODE_MASTER_SETTING.get(s) == false || TestZenDiscovery.USE_ZEN2.get(s) == true)_            ? RandomNumbers.randomIntBetween(random, 0, newMasterCount - 1) : -1___        final int numOfNodes = extraSettings.length__        final int firstNodeId = nextNodeId.getAndIncrement()__        final List<Settings> settings = new ArrayList<>()__        for (int i = 0_ i < numOfNodes_ i++) {_            settings.add(getNodeSettings(firstNodeId + i, random.nextLong(), extraSettings[i], defaultMinMasterNodes))__        }_        nextNodeId.set(firstNodeId + numOfNodes)___        final List<String> initialMasterNodes = settings.stream()_                .filter(Node.NODE_MASTER_SETTING::get)_                .map(Node.NODE_NAME_SETTING::get)_                .collect(Collectors.toList())___        final List<Settings> updatedSettings = nodeConfigurationSource.addExtraClusterBootstrapSettings(settings)___        for (int i = 0_ i < numOfNodes_ i++) {_            final Settings nodeSettings = updatedSettings.get(i)__            final Builder builder = Settings.builder()__            if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                if (bootstrapMasterNodeIndex == 0) {_                    builder.putList(INITIAL_MASTER_NODES_SETTING.getKey(), initialMasterNodes)__                }_                bootstrapMasterNodeIndex -= 1__            }__            final NodeAndClient nodeAndClient =_                    buildNode(firstNodeId + i, builder.put(nodeSettings).build(), false, () -> rebuildUnicastHostFiles(nodes))__            nodes.add(nodeAndClient)__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }_        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,extra,settings,final,int,new,master,count,math,to,int,exact,stream,of,extra,settings,filter,node,get,count,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,new,master,count,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,final,int,prev,master,count,get,master,nodes,count,int,bootstrap,master,node,index,prev,master,count,0,auto,manage,min,master,nodes,new,master,count,0,arrays,stream,extra,settings,all,match,s,node,get,s,false,test,zen,discovery,get,s,true,random,numbers,random,int,between,random,0,new,master,count,1,1,final,int,num,of,nodes,extra,settings,length,final,int,first,node,id,next,node,id,get,and,increment,final,list,settings,settings,new,array,list,for,int,i,0,i,num,of,nodes,i,settings,add,get,node,settings,first,node,id,i,random,next,long,extra,settings,i,default,min,master,nodes,next,node,id,set,first,node,id,num,of,nodes,final,list,string,initial,master,nodes,settings,stream,filter,node,get,map,node,get,collect,collectors,to,list,final,list,settings,updated,settings,node,configuration,source,add,extra,cluster,bootstrap,settings,settings,for,int,i,0,i,num,of,nodes,i,final,settings,node,settings,updated,settings,get,i,final,builder,builder,settings,builder,if,node,get,node,settings,if,bootstrap,master,node,index,0,builder,put,list,get,key,initial,master,nodes,bootstrap,master,node,index,1,final,node,and,client,node,and,client,build,node,first,node,id,i,builder,put,node,settings,build,false,rebuild,unicast,host,files,nodes,nodes,add,node,and,client,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... extraSettings);1547496886;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... extraSettings) {_        final int newMasterCount = Math.toIntExact(Stream.of(extraSettings).filter(Node.NODE_MASTER_SETTING::get).count())__        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + newMasterCount)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        final int prevMasterCount = getMasterNodesCount()__        int bootstrapMasterNodeIndex =_                prevMasterCount == 0 && autoManageMinMasterNodes && newMasterCount > 0 && Arrays.stream(extraSettings)_            .allMatch(s -> Node.NODE_MASTER_SETTING.get(s) == false || TestZenDiscovery.USE_ZEN2.get(s) == true)_            ? RandomNumbers.randomIntBetween(random, 0, newMasterCount - 1) : -1___        final int numOfNodes = extraSettings.length__        final int firstNodeId = nextNodeId.getAndIncrement()__        final List<Settings> settings = new ArrayList<>()__        for (int i = 0_ i < numOfNodes_ i++) {_            settings.add(getNodeSettings(firstNodeId + i, random.nextLong(), extraSettings[i], defaultMinMasterNodes))__        }_        nextNodeId.set(firstNodeId + numOfNodes)___        final List<String> initialMasterNodes = settings.stream()_                .filter(Node.NODE_MASTER_SETTING::get)_                .map(Node.NODE_NAME_SETTING::get)_                .collect(Collectors.toList())___        final List<Settings> updatedSettings = nodeConfigurationSource.addExtraClusterBootstrapSettings(settings)___        for (int i = 0_ i < numOfNodes_ i++) {_            final Settings nodeSettings = updatedSettings.get(i)__            final Builder builder = Settings.builder()__            if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                if (bootstrapMasterNodeIndex == 0) {_                    builder.putList(INITIAL_MASTER_NODES_SETTING.getKey(), initialMasterNodes)__                }_                bootstrapMasterNodeIndex -= 1__            }__            final NodeAndClient nodeAndClient =_                    buildNode(firstNodeId + i, builder.put(nodeSettings).build(), false, () -> rebuildUnicastHostFiles(nodes))__            nodes.add(nodeAndClient)__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }_        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,extra,settings,final,int,new,master,count,math,to,int,exact,stream,of,extra,settings,filter,node,get,count,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,new,master,count,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,final,int,prev,master,count,get,master,nodes,count,int,bootstrap,master,node,index,prev,master,count,0,auto,manage,min,master,nodes,new,master,count,0,arrays,stream,extra,settings,all,match,s,node,get,s,false,test,zen,discovery,get,s,true,random,numbers,random,int,between,random,0,new,master,count,1,1,final,int,num,of,nodes,extra,settings,length,final,int,first,node,id,next,node,id,get,and,increment,final,list,settings,settings,new,array,list,for,int,i,0,i,num,of,nodes,i,settings,add,get,node,settings,first,node,id,i,random,next,long,extra,settings,i,default,min,master,nodes,next,node,id,set,first,node,id,num,of,nodes,final,list,string,initial,master,nodes,settings,stream,filter,node,get,map,node,get,collect,collectors,to,list,final,list,settings,updated,settings,node,configuration,source,add,extra,cluster,bootstrap,settings,settings,for,int,i,0,i,num,of,nodes,i,final,settings,node,settings,updated,settings,get,i,final,builder,builder,settings,builder,if,node,get,node,settings,if,bootstrap,master,node,index,0,builder,put,list,get,key,initial,master,nodes,bootstrap,master,node,index,1,final,node,and,client,node,and,client,build,node,first,node,id,i,builder,put,node,settings,build,false,rebuild,unicast,host,files,nodes,nodes,add,node,and,client,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... extraSettings);1547497728;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... extraSettings) {_        final int newMasterCount = Math.toIntExact(Stream.of(extraSettings).filter(Node.NODE_MASTER_SETTING::get).count())__        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + newMasterCount)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        final int prevMasterCount = getMasterNodesCount()__        int bootstrapMasterNodeIndex =_                prevMasterCount == 0 && autoManageMinMasterNodes && newMasterCount > 0 && Arrays.stream(extraSettings)_            .allMatch(s -> Node.NODE_MASTER_SETTING.get(s) == false || TestZenDiscovery.USE_ZEN2.get(s) == true)_            ? RandomNumbers.randomIntBetween(random, 0, newMasterCount - 1) : -1___        final int numOfNodes = extraSettings.length__        final int firstNodeId = nextNodeId.getAndIncrement()__        final List<Settings> settings = new ArrayList<>()__        for (int i = 0_ i < numOfNodes_ i++) {_            settings.add(getNodeSettings(firstNodeId + i, random.nextLong(), extraSettings[i], defaultMinMasterNodes))__        }_        nextNodeId.set(firstNodeId + numOfNodes)___        final List<String> initialMasterNodes = settings.stream()_                .filter(Node.NODE_MASTER_SETTING::get)_                .map(Node.NODE_NAME_SETTING::get)_                .collect(Collectors.toList())___        final List<Settings> updatedSettings = nodeConfigurationSource.addExtraClusterBootstrapSettings(settings)___        for (int i = 0_ i < numOfNodes_ i++) {_            final Settings nodeSettings = updatedSettings.get(i)__            final Builder builder = Settings.builder()__            if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                if (bootstrapMasterNodeIndex == 0) {_                    builder.putList(INITIAL_MASTER_NODES_SETTING.getKey(), initialMasterNodes)__                }_                bootstrapMasterNodeIndex -= 1__            }__            final NodeAndClient nodeAndClient =_                    buildNode(firstNodeId + i, builder.put(nodeSettings).build(), false, () -> rebuildUnicastHostFiles(nodes))__            nodes.add(nodeAndClient)__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }_        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,extra,settings,final,int,new,master,count,math,to,int,exact,stream,of,extra,settings,filter,node,get,count,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,new,master,count,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,final,int,prev,master,count,get,master,nodes,count,int,bootstrap,master,node,index,prev,master,count,0,auto,manage,min,master,nodes,new,master,count,0,arrays,stream,extra,settings,all,match,s,node,get,s,false,test,zen,discovery,get,s,true,random,numbers,random,int,between,random,0,new,master,count,1,1,final,int,num,of,nodes,extra,settings,length,final,int,first,node,id,next,node,id,get,and,increment,final,list,settings,settings,new,array,list,for,int,i,0,i,num,of,nodes,i,settings,add,get,node,settings,first,node,id,i,random,next,long,extra,settings,i,default,min,master,nodes,next,node,id,set,first,node,id,num,of,nodes,final,list,string,initial,master,nodes,settings,stream,filter,node,get,map,node,get,collect,collectors,to,list,final,list,settings,updated,settings,node,configuration,source,add,extra,cluster,bootstrap,settings,settings,for,int,i,0,i,num,of,nodes,i,final,settings,node,settings,updated,settings,get,i,final,builder,builder,settings,builder,if,node,get,node,settings,if,bootstrap,master,node,index,0,builder,put,list,get,key,initial,master,nodes,bootstrap,master,node,index,1,final,node,and,client,node,and,client,build,node,first,node,id,i,builder,put,node,settings,build,false,rebuild,unicast,host,files,nodes,nodes,add,node,and,client,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... extraSettings);1547825802;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... extraSettings) {_        final int newMasterCount = Math.toIntExact(Stream.of(extraSettings).filter(Node.NODE_MASTER_SETTING::get).count())__        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + newMasterCount)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        final int prevMasterCount = getMasterNodesCount()__        int bootstrapMasterNodeIndex =_                prevMasterCount == 0 && autoManageMinMasterNodes && newMasterCount > 0 && Arrays.stream(extraSettings)_            .allMatch(s -> Node.NODE_MASTER_SETTING.get(s) == false || TestZenDiscovery.USE_ZEN2.get(s) == true)_            ? RandomNumbers.randomIntBetween(random, 0, newMasterCount - 1) : -1___        final int numOfNodes = extraSettings.length__        final int firstNodeId = nextNodeId.getAndIncrement()__        final List<Settings> settings = new ArrayList<>()__        for (int i = 0_ i < numOfNodes_ i++) {_            settings.add(getNodeSettings(firstNodeId + i, random.nextLong(), extraSettings[i], defaultMinMasterNodes))__        }_        nextNodeId.set(firstNodeId + numOfNodes)___        final List<String> initialMasterNodes = settings.stream()_                .filter(Node.NODE_MASTER_SETTING::get)_                .map(Node.NODE_NAME_SETTING::get)_                .collect(Collectors.toList())___        final List<Settings> updatedSettings = nodeConfigurationSource.addExtraClusterBootstrapSettings(settings)___        for (int i = 0_ i < numOfNodes_ i++) {_            final Settings nodeSettings = updatedSettings.get(i)__            final Builder builder = Settings.builder()__            if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                if (bootstrapMasterNodeIndex == 0) {_                    builder.putList(INITIAL_MASTER_NODES_SETTING.getKey(), initialMasterNodes)__                }_                bootstrapMasterNodeIndex -= 1__            }__            final NodeAndClient nodeAndClient =_                    buildNode(firstNodeId + i, builder.put(nodeSettings).build(), false, () -> rebuildUnicastHostFiles(nodes))__            nodes.add(nodeAndClient)__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }_        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,extra,settings,final,int,new,master,count,math,to,int,exact,stream,of,extra,settings,filter,node,get,count,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,new,master,count,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,final,int,prev,master,count,get,master,nodes,count,int,bootstrap,master,node,index,prev,master,count,0,auto,manage,min,master,nodes,new,master,count,0,arrays,stream,extra,settings,all,match,s,node,get,s,false,test,zen,discovery,get,s,true,random,numbers,random,int,between,random,0,new,master,count,1,1,final,int,num,of,nodes,extra,settings,length,final,int,first,node,id,next,node,id,get,and,increment,final,list,settings,settings,new,array,list,for,int,i,0,i,num,of,nodes,i,settings,add,get,node,settings,first,node,id,i,random,next,long,extra,settings,i,default,min,master,nodes,next,node,id,set,first,node,id,num,of,nodes,final,list,string,initial,master,nodes,settings,stream,filter,node,get,map,node,get,collect,collectors,to,list,final,list,settings,updated,settings,node,configuration,source,add,extra,cluster,bootstrap,settings,settings,for,int,i,0,i,num,of,nodes,i,final,settings,node,settings,updated,settings,get,i,final,builder,builder,settings,builder,if,node,get,node,settings,if,bootstrap,master,node,index,0,builder,put,list,get,key,initial,master,nodes,bootstrap,master,node,index,1,final,node,and,client,node,and,client,build,node,first,node,id,i,builder,put,node,settings,build,false,rebuild,unicast,host,files,nodes,nodes,add,node,and,client,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... extraSettings);1548160032;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... extraSettings) {_        final int newMasterCount = Math.toIntExact(Stream.of(extraSettings).filter(Node.NODE_MASTER_SETTING::get).count())__        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + newMasterCount)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        final int prevMasterCount = getMasterNodesCount()__        int bootstrapMasterNodeIndex =_                prevMasterCount == 0 && autoManageMinMasterNodes && newMasterCount > 0 && Arrays.stream(extraSettings)_            .allMatch(s -> Node.NODE_MASTER_SETTING.get(s) == false || TestZenDiscovery.USE_ZEN2.get(s) == true)_            ? RandomNumbers.randomIntBetween(random, 0, newMasterCount - 1) : -1___        final int numOfNodes = extraSettings.length__        final int firstNodeId = nextNodeId.getAndIncrement()__        final List<Settings> settings = new ArrayList<>()__        for (int i = 0_ i < numOfNodes_ i++) {_            settings.add(getNodeSettings(firstNodeId + i, random.nextLong(), extraSettings[i], defaultMinMasterNodes))__        }_        nextNodeId.set(firstNodeId + numOfNodes)___        final List<String> initialMasterNodes = settings.stream()_                .filter(Node.NODE_MASTER_SETTING::get)_                .map(Node.NODE_NAME_SETTING::get)_                .collect(Collectors.toList())___        final List<Settings> updatedSettings = nodeConfigurationSource.addExtraClusterBootstrapSettings(settings)___        for (int i = 0_ i < numOfNodes_ i++) {_            final Settings nodeSettings = updatedSettings.get(i)__            final Builder builder = Settings.builder()__            if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                if (bootstrapMasterNodeIndex == 0) {_                    builder.putList(INITIAL_MASTER_NODES_SETTING.getKey(), initialMasterNodes)__                }_                bootstrapMasterNodeIndex -= 1__            }__            final NodeAndClient nodeAndClient =_                    buildNode(firstNodeId + i, builder.put(nodeSettings).build(), false, () -> rebuildUnicastHostFiles(nodes))__            nodes.add(nodeAndClient)__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }_        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,extra,settings,final,int,new,master,count,math,to,int,exact,stream,of,extra,settings,filter,node,get,count,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,new,master,count,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,final,int,prev,master,count,get,master,nodes,count,int,bootstrap,master,node,index,prev,master,count,0,auto,manage,min,master,nodes,new,master,count,0,arrays,stream,extra,settings,all,match,s,node,get,s,false,test,zen,discovery,get,s,true,random,numbers,random,int,between,random,0,new,master,count,1,1,final,int,num,of,nodes,extra,settings,length,final,int,first,node,id,next,node,id,get,and,increment,final,list,settings,settings,new,array,list,for,int,i,0,i,num,of,nodes,i,settings,add,get,node,settings,first,node,id,i,random,next,long,extra,settings,i,default,min,master,nodes,next,node,id,set,first,node,id,num,of,nodes,final,list,string,initial,master,nodes,settings,stream,filter,node,get,map,node,get,collect,collectors,to,list,final,list,settings,updated,settings,node,configuration,source,add,extra,cluster,bootstrap,settings,settings,for,int,i,0,i,num,of,nodes,i,final,settings,node,settings,updated,settings,get,i,final,builder,builder,settings,builder,if,node,get,node,settings,if,bootstrap,master,node,index,0,builder,put,list,get,key,initial,master,nodes,bootstrap,master,node,index,1,final,node,and,client,node,and,client,build,node,first,node,id,i,builder,put,node,settings,build,false,rebuild,unicast,host,files,nodes,nodes,add,node,and,client,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... extraSettings);1548878955;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... extraSettings) {_        final int newMasterCount = Math.toIntExact(Stream.of(extraSettings).filter(Node.NODE_MASTER_SETTING::get).count())__        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + newMasterCount)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        final int prevMasterCount = getMasterNodesCount()__        int bootstrapMasterNodeIndex =_                prevMasterCount == 0 && autoManageMinMasterNodes && newMasterCount > 0 && Arrays.stream(extraSettings)_            .allMatch(s -> Node.NODE_MASTER_SETTING.get(s) == false || TestZenDiscovery.USE_ZEN2.get(s) == true)_            ? RandomNumbers.randomIntBetween(random, 0, newMasterCount - 1) : -1___        final int numOfNodes = extraSettings.length__        final int firstNodeId = nextNodeId.getAndIncrement()__        final List<Settings> settings = new ArrayList<>()__        for (int i = 0_ i < numOfNodes_ i++) {_            settings.add(getNodeSettings(firstNodeId + i, random.nextLong(), extraSettings[i], defaultMinMasterNodes))__        }_        nextNodeId.set(firstNodeId + numOfNodes)___        final List<String> initialMasterNodes = settings.stream()_                .filter(Node.NODE_MASTER_SETTING::get)_                .map(Node.NODE_NAME_SETTING::get)_                .collect(Collectors.toList())___        final List<Settings> updatedSettings = nodeConfigurationSource.addExtraClusterBootstrapSettings(settings)___        for (int i = 0_ i < numOfNodes_ i++) {_            final Settings nodeSettings = updatedSettings.get(i)__            final Builder builder = Settings.builder()__            if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                if (bootstrapMasterNodeIndex == 0) {_                    builder.putList(INITIAL_MASTER_NODES_SETTING.getKey(), initialMasterNodes)__                }_                bootstrapMasterNodeIndex -= 1__            }__            final NodeAndClient nodeAndClient =_                    buildNode(firstNodeId + i, builder.put(nodeSettings).build(), false, () -> rebuildUnicastHostFiles(nodes))__            nodes.add(nodeAndClient)__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }_        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,extra,settings,final,int,new,master,count,math,to,int,exact,stream,of,extra,settings,filter,node,get,count,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,new,master,count,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,final,int,prev,master,count,get,master,nodes,count,int,bootstrap,master,node,index,prev,master,count,0,auto,manage,min,master,nodes,new,master,count,0,arrays,stream,extra,settings,all,match,s,node,get,s,false,test,zen,discovery,get,s,true,random,numbers,random,int,between,random,0,new,master,count,1,1,final,int,num,of,nodes,extra,settings,length,final,int,first,node,id,next,node,id,get,and,increment,final,list,settings,settings,new,array,list,for,int,i,0,i,num,of,nodes,i,settings,add,get,node,settings,first,node,id,i,random,next,long,extra,settings,i,default,min,master,nodes,next,node,id,set,first,node,id,num,of,nodes,final,list,string,initial,master,nodes,settings,stream,filter,node,get,map,node,get,collect,collectors,to,list,final,list,settings,updated,settings,node,configuration,source,add,extra,cluster,bootstrap,settings,settings,for,int,i,0,i,num,of,nodes,i,final,settings,node,settings,updated,settings,get,i,final,builder,builder,settings,builder,if,node,get,node,settings,if,bootstrap,master,node,index,0,builder,put,list,get,key,initial,master,nodes,bootstrap,master,node,index,1,final,node,and,client,node,and,client,build,node,first,node,id,i,builder,put,node,settings,build,false,rebuild,unicast,host,files,nodes,nodes,add,node,and,client,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... extraSettings);1549017271;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... extraSettings) {_        final int newMasterCount = Math.toIntExact(Stream.of(extraSettings).filter(Node.NODE_MASTER_SETTING::get).count())__        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + newMasterCount)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        final int prevMasterCount = getMasterNodesCount()__        int autoBootstrapMasterNodeIndex =_                prevMasterCount == 0 && autoManageMinMasterNodes && newMasterCount > 0 && Arrays.stream(extraSettings)_            .allMatch(s -> Node.NODE_MASTER_SETTING.get(s) == false || TestZenDiscovery.USE_ZEN2.get(s) == true)_            ? RandomNumbers.randomIntBetween(random, 0, newMasterCount - 1) : -1___        final int numOfNodes = extraSettings.length__        final int firstNodeId = nextNodeId.getAndIncrement()__        final List<Settings> settings = new ArrayList<>()__        for (int i = 0_ i < numOfNodes_ i++) {_            settings.add(getNodeSettings(firstNodeId + i, random.nextLong(), extraSettings[i], defaultMinMasterNodes))__        }_        nextNodeId.set(firstNodeId + numOfNodes)___        final List<String> initialMasterNodes = settings.stream()_                .filter(Node.NODE_MASTER_SETTING::get)_                .map(Node.NODE_NAME_SETTING::get)_                .collect(Collectors.toList())___        final List<Settings> updatedSettings = bootstrapMasterNodeWithSpecifiedIndex(settings)___        for (int i = 0_ i < numOfNodes_ i++) {_            final Settings nodeSettings = updatedSettings.get(i)__            final Builder builder = Settings.builder()__            if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                if (autoBootstrapMasterNodeIndex == 0) {_                    builder.putList(INITIAL_MASTER_NODES_SETTING.getKey(), initialMasterNodes)__                }_                autoBootstrapMasterNodeIndex -= 1__            }__            final NodeAndClient nodeAndClient =_                    buildNode(firstNodeId + i, builder.put(nodeSettings).build(), false, () -> rebuildUnicastHostFiles(nodes))__            nodes.add(nodeAndClient)__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }_        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,extra,settings,final,int,new,master,count,math,to,int,exact,stream,of,extra,settings,filter,node,get,count,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,new,master,count,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,final,int,prev,master,count,get,master,nodes,count,int,auto,bootstrap,master,node,index,prev,master,count,0,auto,manage,min,master,nodes,new,master,count,0,arrays,stream,extra,settings,all,match,s,node,get,s,false,test,zen,discovery,get,s,true,random,numbers,random,int,between,random,0,new,master,count,1,1,final,int,num,of,nodes,extra,settings,length,final,int,first,node,id,next,node,id,get,and,increment,final,list,settings,settings,new,array,list,for,int,i,0,i,num,of,nodes,i,settings,add,get,node,settings,first,node,id,i,random,next,long,extra,settings,i,default,min,master,nodes,next,node,id,set,first,node,id,num,of,nodes,final,list,string,initial,master,nodes,settings,stream,filter,node,get,map,node,get,collect,collectors,to,list,final,list,settings,updated,settings,bootstrap,master,node,with,specified,index,settings,for,int,i,0,i,num,of,nodes,i,final,settings,node,settings,updated,settings,get,i,final,builder,builder,settings,builder,if,node,get,node,settings,if,auto,bootstrap,master,node,index,0,builder,put,list,get,key,initial,master,nodes,auto,bootstrap,master,node,index,1,final,node,and,client,node,and,client,build,node,first,node,id,i,builder,put,node,settings,build,false,rebuild,unicast,host,files,nodes,nodes,add,node,and,client,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... extraSettings);1549094096;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... extraSettings) {_        final int newMasterCount = Math.toIntExact(Stream.of(extraSettings).filter(Node.NODE_MASTER_SETTING::get).count())__        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + newMasterCount)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        final int prevMasterCount = getMasterNodesCount()__        int autoBootstrapMasterNodeIndex =_                prevMasterCount == 0 && autoManageMinMasterNodes && newMasterCount > 0 && Arrays.stream(extraSettings)_            .allMatch(s -> Node.NODE_MASTER_SETTING.get(s) == false || TestZenDiscovery.USE_ZEN2.get(s) == true)_            ? RandomNumbers.randomIntBetween(random, 0, newMasterCount - 1) : -1___        final int numOfNodes = extraSettings.length__        final int firstNodeId = nextNodeId.getAndIncrement()__        final List<Settings> settings = new ArrayList<>()__        for (int i = 0_ i < numOfNodes_ i++) {_            settings.add(getNodeSettings(firstNodeId + i, random.nextLong(), extraSettings[i], defaultMinMasterNodes))__        }_        nextNodeId.set(firstNodeId + numOfNodes)___        final List<String> initialMasterNodes = settings.stream()_                .filter(Node.NODE_MASTER_SETTING::get)_                .map(Node.NODE_NAME_SETTING::get)_                .collect(Collectors.toList())___        final List<Settings> updatedSettings = bootstrapMasterNodeWithSpecifiedIndex(settings)___        for (int i = 0_ i < numOfNodes_ i++) {_            final Settings nodeSettings = updatedSettings.get(i)__            final Builder builder = Settings.builder()__            if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                if (autoBootstrapMasterNodeIndex == 0) {_                    builder.putList(INITIAL_MASTER_NODES_SETTING.getKey(), initialMasterNodes)__                }_                autoBootstrapMasterNodeIndex -= 1__            }__            final NodeAndClient nodeAndClient =_                    buildNode(firstNodeId + i, builder.put(nodeSettings).build(), false, () -> rebuildUnicastHostFiles(nodes))__            nodes.add(nodeAndClient)__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }_        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,extra,settings,final,int,new,master,count,math,to,int,exact,stream,of,extra,settings,filter,node,get,count,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,new,master,count,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,final,int,prev,master,count,get,master,nodes,count,int,auto,bootstrap,master,node,index,prev,master,count,0,auto,manage,min,master,nodes,new,master,count,0,arrays,stream,extra,settings,all,match,s,node,get,s,false,test,zen,discovery,get,s,true,random,numbers,random,int,between,random,0,new,master,count,1,1,final,int,num,of,nodes,extra,settings,length,final,int,first,node,id,next,node,id,get,and,increment,final,list,settings,settings,new,array,list,for,int,i,0,i,num,of,nodes,i,settings,add,get,node,settings,first,node,id,i,random,next,long,extra,settings,i,default,min,master,nodes,next,node,id,set,first,node,id,num,of,nodes,final,list,string,initial,master,nodes,settings,stream,filter,node,get,map,node,get,collect,collectors,to,list,final,list,settings,updated,settings,bootstrap,master,node,with,specified,index,settings,for,int,i,0,i,num,of,nodes,i,final,settings,node,settings,updated,settings,get,i,final,builder,builder,settings,builder,if,node,get,node,settings,if,auto,bootstrap,master,node,index,0,builder,put,list,get,key,initial,master,nodes,auto,bootstrap,master,node,index,1,final,node,and,client,node,and,client,build,node,first,node,id,i,builder,put,node,settings,build,false,rebuild,unicast,host,files,nodes,nodes,add,node,and,client,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... extraSettings);1549291259;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... extraSettings) {_        final int newMasterCount = Math.toIntExact(Stream.of(extraSettings).filter(Node.NODE_MASTER_SETTING::get).count())__        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + newMasterCount)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        final int prevMasterCount = getMasterNodesCount()__        int autoBootstrapMasterNodeIndex =_                prevMasterCount == 0 && autoManageMinMasterNodes && newMasterCount > 0 && Arrays.stream(extraSettings)_            .allMatch(s -> Node.NODE_MASTER_SETTING.get(s) == false || TestZenDiscovery.USE_ZEN2.get(s) == true)_            ? RandomNumbers.randomIntBetween(random, 0, newMasterCount - 1) : -1___        final int numOfNodes = extraSettings.length__        final int firstNodeId = nextNodeId.getAndIncrement()__        final List<Settings> settings = new ArrayList<>()__        for (int i = 0_ i < numOfNodes_ i++) {_            settings.add(getNodeSettings(firstNodeId + i, random.nextLong(), extraSettings[i], defaultMinMasterNodes))__        }_        nextNodeId.set(firstNodeId + numOfNodes)___        final List<String> initialMasterNodes = settings.stream()_                .filter(Node.NODE_MASTER_SETTING::get)_                .map(Node.NODE_NAME_SETTING::get)_                .collect(Collectors.toList())___        final List<Settings> updatedSettings = bootstrapMasterNodeWithSpecifiedIndex(settings)___        for (int i = 0_ i < numOfNodes_ i++) {_            final Settings nodeSettings = updatedSettings.get(i)__            final Builder builder = Settings.builder()__            if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                if (autoBootstrapMasterNodeIndex == 0) {_                    builder.putList(INITIAL_MASTER_NODES_SETTING.getKey(), initialMasterNodes)__                }_                autoBootstrapMasterNodeIndex -= 1__            }__            final NodeAndClient nodeAndClient =_                    buildNode(firstNodeId + i, builder.put(nodeSettings).build(), false, () -> rebuildUnicastHostFiles(nodes))__            nodes.add(nodeAndClient)__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }_        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,extra,settings,final,int,new,master,count,math,to,int,exact,stream,of,extra,settings,filter,node,get,count,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,new,master,count,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,final,int,prev,master,count,get,master,nodes,count,int,auto,bootstrap,master,node,index,prev,master,count,0,auto,manage,min,master,nodes,new,master,count,0,arrays,stream,extra,settings,all,match,s,node,get,s,false,test,zen,discovery,get,s,true,random,numbers,random,int,between,random,0,new,master,count,1,1,final,int,num,of,nodes,extra,settings,length,final,int,first,node,id,next,node,id,get,and,increment,final,list,settings,settings,new,array,list,for,int,i,0,i,num,of,nodes,i,settings,add,get,node,settings,first,node,id,i,random,next,long,extra,settings,i,default,min,master,nodes,next,node,id,set,first,node,id,num,of,nodes,final,list,string,initial,master,nodes,settings,stream,filter,node,get,map,node,get,collect,collectors,to,list,final,list,settings,updated,settings,bootstrap,master,node,with,specified,index,settings,for,int,i,0,i,num,of,nodes,i,final,settings,node,settings,updated,settings,get,i,final,builder,builder,settings,builder,if,node,get,node,settings,if,auto,bootstrap,master,node,index,0,builder,put,list,get,key,initial,master,nodes,auto,bootstrap,master,node,index,1,final,node,and,client,node,and,client,build,node,first,node,id,i,builder,put,node,settings,build,false,rebuild,unicast,host,files,nodes,nodes,add,node,and,client,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... extraSettings);1549386680;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... extraSettings) {_        final int newMasterCount = Math.toIntExact(Stream.of(extraSettings).filter(Node.NODE_MASTER_SETTING::get).count())__        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + newMasterCount)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        final int prevMasterCount = getMasterNodesCount()__        int autoBootstrapMasterNodeIndex =_                prevMasterCount == 0 && autoManageMinMasterNodes && newMasterCount > 0 && Arrays.stream(extraSettings)_            .allMatch(s -> Node.NODE_MASTER_SETTING.get(s) == false || TestZenDiscovery.USE_ZEN2.get(s) == true)_            ? RandomNumbers.randomIntBetween(random, 0, newMasterCount - 1) : -1___        final int numOfNodes = extraSettings.length__        final int firstNodeId = nextNodeId.getAndIncrement()__        final List<Settings> settings = new ArrayList<>()__        for (int i = 0_ i < numOfNodes_ i++) {_            settings.add(getNodeSettings(firstNodeId + i, random.nextLong(), extraSettings[i], defaultMinMasterNodes))__        }_        nextNodeId.set(firstNodeId + numOfNodes)___        final List<String> initialMasterNodes = settings.stream()_                .filter(Node.NODE_MASTER_SETTING::get)_                .map(Node.NODE_NAME_SETTING::get)_                .collect(Collectors.toList())___        final List<Settings> updatedSettings = bootstrapMasterNodeWithSpecifiedIndex(settings)___        for (int i = 0_ i < numOfNodes_ i++) {_            final Settings nodeSettings = updatedSettings.get(i)__            final Builder builder = Settings.builder()__            if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                if (autoBootstrapMasterNodeIndex == 0) {_                    builder.putList(INITIAL_MASTER_NODES_SETTING.getKey(), initialMasterNodes)__                }_                autoBootstrapMasterNodeIndex -= 1__            }__            final NodeAndClient nodeAndClient =_                    buildNode(firstNodeId + i, builder.put(nodeSettings).build(), false, () -> rebuildUnicastHostFiles(nodes))__            nodes.add(nodeAndClient)__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }_        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,extra,settings,final,int,new,master,count,math,to,int,exact,stream,of,extra,settings,filter,node,get,count,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,new,master,count,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,final,int,prev,master,count,get,master,nodes,count,int,auto,bootstrap,master,node,index,prev,master,count,0,auto,manage,min,master,nodes,new,master,count,0,arrays,stream,extra,settings,all,match,s,node,get,s,false,test,zen,discovery,get,s,true,random,numbers,random,int,between,random,0,new,master,count,1,1,final,int,num,of,nodes,extra,settings,length,final,int,first,node,id,next,node,id,get,and,increment,final,list,settings,settings,new,array,list,for,int,i,0,i,num,of,nodes,i,settings,add,get,node,settings,first,node,id,i,random,next,long,extra,settings,i,default,min,master,nodes,next,node,id,set,first,node,id,num,of,nodes,final,list,string,initial,master,nodes,settings,stream,filter,node,get,map,node,get,collect,collectors,to,list,final,list,settings,updated,settings,bootstrap,master,node,with,specified,index,settings,for,int,i,0,i,num,of,nodes,i,final,settings,node,settings,updated,settings,get,i,final,builder,builder,settings,builder,if,node,get,node,settings,if,auto,bootstrap,master,node,index,0,builder,put,list,get,key,initial,master,nodes,auto,bootstrap,master,node,index,1,final,node,and,client,node,and,client,build,node,first,node,id,i,builder,put,node,settings,build,false,rebuild,unicast,host,files,nodes,nodes,add,node,and,client,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... extraSettings);1549388544;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... extraSettings) {_        final int newMasterCount = Math.toIntExact(Stream.of(extraSettings).filter(Node.NODE_MASTER_SETTING::get).count())__        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + newMasterCount)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        final int prevMasterCount = getMasterNodesCount()__        int autoBootstrapMasterNodeIndex =_                prevMasterCount == 0 && autoManageMinMasterNodes && newMasterCount > 0 && Arrays.stream(extraSettings)_            .allMatch(s -> Node.NODE_MASTER_SETTING.get(s) == false_                || ZEN2_DISCOVERY_TYPE.equals(DISCOVERY_TYPE_SETTING.get(s)))_            ? RandomNumbers.randomIntBetween(random, 0, newMasterCount - 1) : -1___        final int numOfNodes = extraSettings.length__        final int firstNodeId = nextNodeId.getAndIncrement()__        final List<Settings> settings = new ArrayList<>()__        for (int i = 0_ i < numOfNodes_ i++) {_            settings.add(getNodeSettings(firstNodeId + i, random.nextLong(), extraSettings[i], defaultMinMasterNodes))__        }_        nextNodeId.set(firstNodeId + numOfNodes)___        final List<String> initialMasterNodes = settings.stream()_                .filter(Node.NODE_MASTER_SETTING::get)_                .map(Node.NODE_NAME_SETTING::get)_                .collect(Collectors.toList())___        final List<Settings> updatedSettings = bootstrapMasterNodeWithSpecifiedIndex(settings)___        for (int i = 0_ i < numOfNodes_ i++) {_            final Settings nodeSettings = updatedSettings.get(i)__            final Builder builder = Settings.builder()__            if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                if (autoBootstrapMasterNodeIndex == 0) {_                    builder.putList(INITIAL_MASTER_NODES_SETTING.getKey(), initialMasterNodes)__                }_                autoBootstrapMasterNodeIndex -= 1__            }__            final NodeAndClient nodeAndClient =_                    buildNode(firstNodeId + i, builder.put(nodeSettings).build(), false, () -> rebuildUnicastHostFiles(nodes))__            nodes.add(nodeAndClient)__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }_        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,extra,settings,final,int,new,master,count,math,to,int,exact,stream,of,extra,settings,filter,node,get,count,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,new,master,count,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,final,int,prev,master,count,get,master,nodes,count,int,auto,bootstrap,master,node,index,prev,master,count,0,auto,manage,min,master,nodes,new,master,count,0,arrays,stream,extra,settings,all,match,s,node,get,s,false,equals,get,s,random,numbers,random,int,between,random,0,new,master,count,1,1,final,int,num,of,nodes,extra,settings,length,final,int,first,node,id,next,node,id,get,and,increment,final,list,settings,settings,new,array,list,for,int,i,0,i,num,of,nodes,i,settings,add,get,node,settings,first,node,id,i,random,next,long,extra,settings,i,default,min,master,nodes,next,node,id,set,first,node,id,num,of,nodes,final,list,string,initial,master,nodes,settings,stream,filter,node,get,map,node,get,collect,collectors,to,list,final,list,settings,updated,settings,bootstrap,master,node,with,specified,index,settings,for,int,i,0,i,num,of,nodes,i,final,settings,node,settings,updated,settings,get,i,final,builder,builder,settings,builder,if,node,get,node,settings,if,auto,bootstrap,master,node,index,0,builder,put,list,get,key,initial,master,nodes,auto,bootstrap,master,node,index,1,final,node,and,client,node,and,client,build,node,first,node,id,i,builder,put,node,settings,build,false,rebuild,unicast,host,files,nodes,nodes,add,node,and,client,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... extraSettings);1549452878;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... extraSettings) {_        final int newMasterCount = Math.toIntExact(Stream.of(extraSettings).filter(Node.NODE_MASTER_SETTING::get).count())__        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + newMasterCount)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        final int prevMasterCount = getMasterNodesCount()__        int autoBootstrapMasterNodeIndex =_                prevMasterCount == 0 && autoManageMinMasterNodes && newMasterCount > 0 && Arrays.stream(extraSettings)_            .allMatch(s -> Node.NODE_MASTER_SETTING.get(s) == false_                || ZEN2_DISCOVERY_TYPE.equals(DISCOVERY_TYPE_SETTING.get(s)))_            ? RandomNumbers.randomIntBetween(random, 0, newMasterCount - 1) : -1___        final int numOfNodes = extraSettings.length__        final int firstNodeId = nextNodeId.getAndIncrement()__        final List<Settings> settings = new ArrayList<>()__        for (int i = 0_ i < numOfNodes_ i++) {_            settings.add(getNodeSettings(firstNodeId + i, random.nextLong(), extraSettings[i], defaultMinMasterNodes))__        }_        nextNodeId.set(firstNodeId + numOfNodes)___        final List<String> initialMasterNodes = settings.stream()_                .filter(Node.NODE_MASTER_SETTING::get)_                .map(Node.NODE_NAME_SETTING::get)_                .collect(Collectors.toList())___        final List<Settings> updatedSettings = bootstrapMasterNodeWithSpecifiedIndex(settings)___        for (int i = 0_ i < numOfNodes_ i++) {_            final Settings nodeSettings = updatedSettings.get(i)__            final Builder builder = Settings.builder()__            if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                if (autoBootstrapMasterNodeIndex == 0) {_                    builder.putList(INITIAL_MASTER_NODES_SETTING.getKey(), initialMasterNodes)__                }_                autoBootstrapMasterNodeIndex -= 1__            }__            final NodeAndClient nodeAndClient =_                    buildNode(firstNodeId + i, builder.put(nodeSettings).build(), false, () -> rebuildUnicastHostFiles(nodes))__            nodes.add(nodeAndClient)__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }_        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,extra,settings,final,int,new,master,count,math,to,int,exact,stream,of,extra,settings,filter,node,get,count,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,new,master,count,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,final,int,prev,master,count,get,master,nodes,count,int,auto,bootstrap,master,node,index,prev,master,count,0,auto,manage,min,master,nodes,new,master,count,0,arrays,stream,extra,settings,all,match,s,node,get,s,false,equals,get,s,random,numbers,random,int,between,random,0,new,master,count,1,1,final,int,num,of,nodes,extra,settings,length,final,int,first,node,id,next,node,id,get,and,increment,final,list,settings,settings,new,array,list,for,int,i,0,i,num,of,nodes,i,settings,add,get,node,settings,first,node,id,i,random,next,long,extra,settings,i,default,min,master,nodes,next,node,id,set,first,node,id,num,of,nodes,final,list,string,initial,master,nodes,settings,stream,filter,node,get,map,node,get,collect,collectors,to,list,final,list,settings,updated,settings,bootstrap,master,node,with,specified,index,settings,for,int,i,0,i,num,of,nodes,i,final,settings,node,settings,updated,settings,get,i,final,builder,builder,settings,builder,if,node,get,node,settings,if,auto,bootstrap,master,node,index,0,builder,put,list,get,key,initial,master,nodes,auto,bootstrap,master,node,index,1,final,node,and,client,node,and,client,build,node,first,node,id,i,builder,put,node,settings,build,false,rebuild,unicast,host,files,nodes,nodes,add,node,and,client,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... extraSettings);1549898480;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... extraSettings) {_        final int newMasterCount = Math.toIntExact(Stream.of(extraSettings).filter(Node.NODE_MASTER_SETTING::get).count())__        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + newMasterCount)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        final int prevMasterCount = getMasterNodesCount()__        int autoBootstrapMasterNodeIndex =_                prevMasterCount == 0 && autoManageMinMasterNodes && newMasterCount > 0 && Arrays.stream(extraSettings)_            .allMatch(s -> Node.NODE_MASTER_SETTING.get(s) == false_                || ZEN2_DISCOVERY_TYPE.equals(DISCOVERY_TYPE_SETTING.get(s)))_            ? RandomNumbers.randomIntBetween(random, 0, newMasterCount - 1) : -1___        final int numOfNodes = extraSettings.length__        final int firstNodeId = nextNodeId.getAndIncrement()__        final List<Settings> settings = new ArrayList<>()__        for (int i = 0_ i < numOfNodes_ i++) {_            settings.add(getNodeSettings(firstNodeId + i, random.nextLong(), extraSettings[i], defaultMinMasterNodes))__        }_        nextNodeId.set(firstNodeId + numOfNodes)___        final List<String> initialMasterNodes = settings.stream()_                .filter(Node.NODE_MASTER_SETTING::get)_                .map(Node.NODE_NAME_SETTING::get)_                .collect(Collectors.toList())___        final List<Settings> updatedSettings = bootstrapMasterNodeWithSpecifiedIndex(settings)___        for (int i = 0_ i < numOfNodes_ i++) {_            final Settings nodeSettings = updatedSettings.get(i)__            final Builder builder = Settings.builder()__            if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                if (autoBootstrapMasterNodeIndex == 0) {_                    builder.putList(INITIAL_MASTER_NODES_SETTING.getKey(), initialMasterNodes)__                }_                autoBootstrapMasterNodeIndex -= 1__            }__            final NodeAndClient nodeAndClient =_                    buildNode(firstNodeId + i, builder.put(nodeSettings).build(), false, () -> rebuildUnicastHostFiles(nodes))__            nodes.add(nodeAndClient)__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }_        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,extra,settings,final,int,new,master,count,math,to,int,exact,stream,of,extra,settings,filter,node,get,count,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,new,master,count,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,final,int,prev,master,count,get,master,nodes,count,int,auto,bootstrap,master,node,index,prev,master,count,0,auto,manage,min,master,nodes,new,master,count,0,arrays,stream,extra,settings,all,match,s,node,get,s,false,equals,get,s,random,numbers,random,int,between,random,0,new,master,count,1,1,final,int,num,of,nodes,extra,settings,length,final,int,first,node,id,next,node,id,get,and,increment,final,list,settings,settings,new,array,list,for,int,i,0,i,num,of,nodes,i,settings,add,get,node,settings,first,node,id,i,random,next,long,extra,settings,i,default,min,master,nodes,next,node,id,set,first,node,id,num,of,nodes,final,list,string,initial,master,nodes,settings,stream,filter,node,get,map,node,get,collect,collectors,to,list,final,list,settings,updated,settings,bootstrap,master,node,with,specified,index,settings,for,int,i,0,i,num,of,nodes,i,final,settings,node,settings,updated,settings,get,i,final,builder,builder,settings,builder,if,node,get,node,settings,if,auto,bootstrap,master,node,index,0,builder,put,list,get,key,initial,master,nodes,auto,bootstrap,master,node,index,1,final,node,and,client,node,and,client,build,node,first,node,id,i,builder,put,node,settings,build,false,rebuild,unicast,host,files,nodes,nodes,add,node,and,client,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... extraSettings);1550570542;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... extraSettings) {_        final int newMasterCount = Math.toIntExact(Stream.of(extraSettings).filter(Node.NODE_MASTER_SETTING::get).count())__        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + newMasterCount)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        final int prevMasterCount = getMasterNodesCount()__        int autoBootstrapMasterNodeIndex =_                prevMasterCount == 0 && autoManageMinMasterNodes && newMasterCount > 0 && Arrays.stream(extraSettings)_            .allMatch(s -> Node.NODE_MASTER_SETTING.get(s) == false_                || ZEN2_DISCOVERY_TYPE.equals(DISCOVERY_TYPE_SETTING.get(s)))_            ? RandomNumbers.randomIntBetween(random, 0, newMasterCount - 1) : -1___        final int numOfNodes = extraSettings.length__        final int firstNodeId = nextNodeId.getAndIncrement()__        final List<Settings> settings = new ArrayList<>()__        for (int i = 0_ i < numOfNodes_ i++) {_            settings.add(getNodeSettings(firstNodeId + i, random.nextLong(), extraSettings[i], defaultMinMasterNodes))__        }_        nextNodeId.set(firstNodeId + numOfNodes)___        final List<String> initialMasterNodes = settings.stream()_                .filter(Node.NODE_MASTER_SETTING::get)_                .map(Node.NODE_NAME_SETTING::get)_                .collect(Collectors.toList())___        final List<Settings> updatedSettings = bootstrapMasterNodeWithSpecifiedIndex(settings)___        for (int i = 0_ i < numOfNodes_ i++) {_            final Settings nodeSettings = updatedSettings.get(i)__            final Builder builder = Settings.builder()__            if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                if (autoBootstrapMasterNodeIndex == 0) {_                    builder.putList(INITIAL_MASTER_NODES_SETTING.getKey(), initialMasterNodes)__                }_                autoBootstrapMasterNodeIndex -= 1__            }__            final NodeAndClient nodeAndClient =_                    buildNode(firstNodeId + i, builder.put(nodeSettings).build(), false, () -> rebuildUnicastHostFiles(nodes))__            nodes.add(nodeAndClient)__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }_        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,extra,settings,final,int,new,master,count,math,to,int,exact,stream,of,extra,settings,filter,node,get,count,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,new,master,count,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,final,int,prev,master,count,get,master,nodes,count,int,auto,bootstrap,master,node,index,prev,master,count,0,auto,manage,min,master,nodes,new,master,count,0,arrays,stream,extra,settings,all,match,s,node,get,s,false,equals,get,s,random,numbers,random,int,between,random,0,new,master,count,1,1,final,int,num,of,nodes,extra,settings,length,final,int,first,node,id,next,node,id,get,and,increment,final,list,settings,settings,new,array,list,for,int,i,0,i,num,of,nodes,i,settings,add,get,node,settings,first,node,id,i,random,next,long,extra,settings,i,default,min,master,nodes,next,node,id,set,first,node,id,num,of,nodes,final,list,string,initial,master,nodes,settings,stream,filter,node,get,map,node,get,collect,collectors,to,list,final,list,settings,updated,settings,bootstrap,master,node,with,specified,index,settings,for,int,i,0,i,num,of,nodes,i,final,settings,node,settings,updated,settings,get,i,final,builder,builder,settings,builder,if,node,get,node,settings,if,auto,bootstrap,master,node,index,0,builder,put,list,get,key,initial,master,nodes,auto,bootstrap,master,node,index,1,final,node,and,client,node,and,client,build,node,first,node,id,i,builder,put,node,settings,build,false,rebuild,unicast,host,files,nodes,nodes,add,node,and,client,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... extraSettings);1550755200;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... extraSettings) {_        final int newMasterCount = Math.toIntExact(Stream.of(extraSettings).filter(Node.NODE_MASTER_SETTING::get).count())__        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + newMasterCount)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        final int prevMasterCount = getMasterNodesCount()__        int autoBootstrapMasterNodeIndex =_                prevMasterCount == 0 && autoManageMinMasterNodes && newMasterCount > 0 && Arrays.stream(extraSettings)_            .allMatch(s -> Node.NODE_MASTER_SETTING.get(s) == false_                || ZEN2_DISCOVERY_TYPE.equals(DISCOVERY_TYPE_SETTING.get(s)))_            ? RandomNumbers.randomIntBetween(random, 0, newMasterCount - 1) : -1___        final int numOfNodes = extraSettings.length__        final int firstNodeId = nextNodeId.getAndIncrement()__        final List<Settings> settings = new ArrayList<>()__        for (int i = 0_ i < numOfNodes_ i++) {_            settings.add(getNodeSettings(firstNodeId + i, random.nextLong(), extraSettings[i], defaultMinMasterNodes))__        }_        nextNodeId.set(firstNodeId + numOfNodes)___        final List<String> initialMasterNodes = settings.stream()_                .filter(Node.NODE_MASTER_SETTING::get)_                .map(Node.NODE_NAME_SETTING::get)_                .collect(Collectors.toList())___        final List<Settings> updatedSettings = bootstrapMasterNodeWithSpecifiedIndex(settings)___        for (int i = 0_ i < numOfNodes_ i++) {_            final Settings nodeSettings = updatedSettings.get(i)__            final Builder builder = Settings.builder()__            if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                if (autoBootstrapMasterNodeIndex == 0) {_                    builder.putList(INITIAL_MASTER_NODES_SETTING.getKey(), initialMasterNodes)__                }_                autoBootstrapMasterNodeIndex -= 1__            }__            final NodeAndClient nodeAndClient =_                    buildNode(firstNodeId + i, builder.put(nodeSettings).build(), false, () -> rebuildUnicastHostFiles(nodes))__            nodes.add(nodeAndClient)__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }_        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,extra,settings,final,int,new,master,count,math,to,int,exact,stream,of,extra,settings,filter,node,get,count,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,new,master,count,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,final,int,prev,master,count,get,master,nodes,count,int,auto,bootstrap,master,node,index,prev,master,count,0,auto,manage,min,master,nodes,new,master,count,0,arrays,stream,extra,settings,all,match,s,node,get,s,false,equals,get,s,random,numbers,random,int,between,random,0,new,master,count,1,1,final,int,num,of,nodes,extra,settings,length,final,int,first,node,id,next,node,id,get,and,increment,final,list,settings,settings,new,array,list,for,int,i,0,i,num,of,nodes,i,settings,add,get,node,settings,first,node,id,i,random,next,long,extra,settings,i,default,min,master,nodes,next,node,id,set,first,node,id,num,of,nodes,final,list,string,initial,master,nodes,settings,stream,filter,node,get,map,node,get,collect,collectors,to,list,final,list,settings,updated,settings,bootstrap,master,node,with,specified,index,settings,for,int,i,0,i,num,of,nodes,i,final,settings,node,settings,updated,settings,get,i,final,builder,builder,settings,builder,if,node,get,node,settings,if,auto,bootstrap,master,node,index,0,builder,put,list,get,key,initial,master,nodes,auto,bootstrap,master,node,index,1,final,node,and,client,node,and,client,build,node,first,node,id,i,builder,put,node,settings,build,false,rebuild,unicast,host,files,nodes,nodes,add,node,and,client,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> public synchronized List<String> startNodes(Settings... extraSettings);1550761203;Starts multiple nodes with the given settings and returns their names;public synchronized List<String> startNodes(Settings... extraSettings) {_        final int newMasterCount = Math.toIntExact(Stream.of(extraSettings).filter(Node.NODE_MASTER_SETTING::get).count())__        final int defaultMinMasterNodes__        if (autoManageMinMasterNodes) {_            defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + newMasterCount)__        } else {_            defaultMinMasterNodes = -1__        }_        final List<NodeAndClient> nodes = new ArrayList<>()__        final int prevMasterCount = getMasterNodesCount()__        int autoBootstrapMasterNodeIndex =_                prevMasterCount == 0 && autoManageMinMasterNodes && newMasterCount > 0 && Arrays.stream(extraSettings)_            .allMatch(s -> Node.NODE_MASTER_SETTING.get(s) == false_                || ZEN2_DISCOVERY_TYPE.equals(DISCOVERY_TYPE_SETTING.get(s)))_            ? RandomNumbers.randomIntBetween(random, 0, newMasterCount - 1) : -1___        final int numOfNodes = extraSettings.length__        final int firstNodeId = nextNodeId.getAndIncrement()__        final List<Settings> settings = new ArrayList<>()__        for (int i = 0_ i < numOfNodes_ i++) {_            settings.add(getNodeSettings(firstNodeId + i, random.nextLong(), extraSettings[i], defaultMinMasterNodes))__        }_        nextNodeId.set(firstNodeId + numOfNodes)___        final List<String> initialMasterNodes = settings.stream()_                .filter(Node.NODE_MASTER_SETTING::get)_                .map(Node.NODE_NAME_SETTING::get)_                .collect(Collectors.toList())___        final List<Settings> updatedSettings = bootstrapMasterNodeWithSpecifiedIndex(settings)___        for (int i = 0_ i < numOfNodes_ i++) {_            final Settings nodeSettings = updatedSettings.get(i)__            final Builder builder = Settings.builder()__            if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                if (autoBootstrapMasterNodeIndex == 0) {_                    builder.putList(INITIAL_MASTER_NODES_SETTING.getKey(), initialMasterNodes)__                }_                autoBootstrapMasterNodeIndex -= 1__            }__            final NodeAndClient nodeAndClient =_                    buildNode(firstNodeId + i, builder.put(nodeSettings).build(), false, () -> rebuildUnicastHostFiles(nodes))__            nodes.add(nodeAndClient)__        }_        startAndPublishNodesAndClients(nodes)__        if (autoManageMinMasterNodes) {_            validateClusterFormed()__        }_        return nodes.stream().map(NodeAndClient::getName).collect(Collectors.toList())__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,synchronized,list,string,start,nodes,settings,extra,settings,final,int,new,master,count,math,to,int,exact,stream,of,extra,settings,filter,node,get,count,final,int,default,min,master,nodes,if,auto,manage,min,master,nodes,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,new,master,count,else,default,min,master,nodes,1,final,list,node,and,client,nodes,new,array,list,final,int,prev,master,count,get,master,nodes,count,int,auto,bootstrap,master,node,index,prev,master,count,0,auto,manage,min,master,nodes,new,master,count,0,arrays,stream,extra,settings,all,match,s,node,get,s,false,equals,get,s,random,numbers,random,int,between,random,0,new,master,count,1,1,final,int,num,of,nodes,extra,settings,length,final,int,first,node,id,next,node,id,get,and,increment,final,list,settings,settings,new,array,list,for,int,i,0,i,num,of,nodes,i,settings,add,get,node,settings,first,node,id,i,random,next,long,extra,settings,i,default,min,master,nodes,next,node,id,set,first,node,id,num,of,nodes,final,list,string,initial,master,nodes,settings,stream,filter,node,get,map,node,get,collect,collectors,to,list,final,list,settings,updated,settings,bootstrap,master,node,with,specified,index,settings,for,int,i,0,i,num,of,nodes,i,final,settings,node,settings,updated,settings,get,i,final,builder,builder,settings,builder,if,node,get,node,settings,if,auto,bootstrap,master,node,index,0,builder,put,list,get,key,initial,master,nodes,auto,bootstrap,master,node,index,1,final,node,and,client,node,and,client,build,node,first,node,id,i,builder,put,node,settings,build,false,rebuild,unicast,host,files,nodes,nodes,add,node,and,client,start,and,publish,nodes,and,clients,nodes,if,auto,manage,min,master,nodes,validate,cluster,formed,return,nodes,stream,map,node,and,client,get,name,collect,collectors,to,list
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1524684173;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1525162917;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1527096592;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1527152864;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1529916081;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1531179852;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1531729807;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1533738061;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1534362961;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1535723122;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1536137328;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1536828374;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1537806831;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1538067637;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1539723533;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1539815831;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1540486836;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1541092382;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1541208696;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1542198296;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1544081506;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1544221624;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1544254415;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1544544737;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1544823664;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1545156327;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1545222364;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1545315633;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1547245564;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1547496886;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1547497728;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1547825802;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1548160032;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1548878955;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1549017271;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1549094096;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1549291259;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1549386680;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1549388544;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1549452878;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1549898480;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception;1550570542;Restarts a random node in the cluster and calls the callback during restart.;private synchronized void restartRandomNode(Predicate<NodeAndClient> predicate, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(predicate)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,node,in,the,cluster,and,calls,the,callback,during,restart;private,synchronized,void,restart,random,node,predicate,node,and,client,predicate,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,predicate,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes);1524684173;builds a new node given the settings.__@param settings              the settings to use_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), settings, false, defaultMinMasterNodes)__    };builds,a,new,node,given,the,settings,param,settings,the,settings,to,use,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,settings,settings,int,default,min,master,nodes,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,settings,false,default,min,master,nodes
InternalTestCluster -> private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes);1525162917;builds a new node given the settings.__@param settings              the settings to use_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), settings, false, defaultMinMasterNodes)__    };builds,a,new,node,given,the,settings,param,settings,the,settings,to,use,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,settings,settings,int,default,min,master,nodes,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,settings,false,default,min,master,nodes
InternalTestCluster -> private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes);1527096592;builds a new node given the settings.__@param settings              the settings to use_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), settings, false, defaultMinMasterNodes)__    };builds,a,new,node,given,the,settings,param,settings,the,settings,to,use,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,settings,settings,int,default,min,master,nodes,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,settings,false,default,min,master,nodes
InternalTestCluster -> private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes);1527152864;builds a new node given the settings.__@param settings              the settings to use_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), settings, false, defaultMinMasterNodes)__    };builds,a,new,node,given,the,settings,param,settings,the,settings,to,use,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,settings,settings,int,default,min,master,nodes,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,settings,false,default,min,master,nodes
InternalTestCluster -> private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes);1529916081;builds a new node given the settings.__@param settings              the settings to use_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), settings, false, defaultMinMasterNodes)__    };builds,a,new,node,given,the,settings,param,settings,the,settings,to,use,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,settings,settings,int,default,min,master,nodes,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,settings,false,default,min,master,nodes
InternalTestCluster -> private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes);1531179852;builds a new node given the settings.__@param settings              the settings to use_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), settings, false, defaultMinMasterNodes)__    };builds,a,new,node,given,the,settings,param,settings,the,settings,to,use,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,settings,settings,int,default,min,master,nodes,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,settings,false,default,min,master,nodes
InternalTestCluster -> private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes);1531729807;builds a new node given the settings.__@param settings              the settings to use_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), settings, false, defaultMinMasterNodes)__    };builds,a,new,node,given,the,settings,param,settings,the,settings,to,use,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,settings,settings,int,default,min,master,nodes,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,settings,false,default,min,master,nodes
InternalTestCluster -> private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes);1533738061;builds a new node given the settings.__@param settings              the settings to use_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), settings, false, defaultMinMasterNodes)__    };builds,a,new,node,given,the,settings,param,settings,the,settings,to,use,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,settings,settings,int,default,min,master,nodes,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,settings,false,default,min,master,nodes
InternalTestCluster -> private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes);1534362961;builds a new node given the settings.__@param settings              the settings to use_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), settings, false, defaultMinMasterNodes)__    };builds,a,new,node,given,the,settings,param,settings,the,settings,to,use,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,settings,settings,int,default,min,master,nodes,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,settings,false,default,min,master,nodes
InternalTestCluster -> private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes);1535723122;builds a new node given the settings.__@param settings              the settings to use_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), settings, false, defaultMinMasterNodes)__    };builds,a,new,node,given,the,settings,param,settings,the,settings,to,use,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,settings,settings,int,default,min,master,nodes,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,settings,false,default,min,master,nodes
InternalTestCluster -> private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes);1536137328;builds a new node given the settings.__@param settings              the settings to use_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(Settings settings, int defaultMinMasterNodes) {_        int ord = nextNodeId.getAndIncrement()__        return buildNode(ord, random.nextLong(), settings, false, defaultMinMasterNodes)__    };builds,a,new,node,given,the,settings,param,settings,the,settings,to,use,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,settings,settings,int,default,min,master,nodes,int,ord,next,node,id,get,and,increment,return,build,node,ord,random,next,long,settings,false,default,min,master,nodes
InternalTestCluster -> private List<Settings> bootstrapMasterNodeWithSpecifiedIndex(List<Settings> allNodesSettings);1549017271;Performs cluster bootstrap when node with index {@link #bootstrapMasterNodeIndex} is started_with the names of all existing and new master-eligible nodes._Indexing starts from 0._If {@link #bootstrapMasterNodeIndex} is -1 (default), this method does nothing.;private List<Settings> bootstrapMasterNodeWithSpecifiedIndex(List<Settings> allNodesSettings) {_        if (getBootstrapMasterNodeIndex() == -1) { _            return allNodesSettings__        }__        int currentNodeId = numMasterNodes() - 1__        List<Settings> newSettings = new ArrayList<>()___        for (Settings settings : allNodesSettings) {_            if (Node.NODE_MASTER_SETTING.get(settings) == false) {_                newSettings.add(settings)__            } else {_                currentNodeId++__                if (currentNodeId != bootstrapMasterNodeIndex) {_                    newSettings.add(settings)__                } else {_                    List<String> nodeNames = new ArrayList<>()___                    for (Settings nodeSettings : getDataOrMasterNodeInstances(Settings.class)) {_                        if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                            nodeNames.add(Node.NODE_NAME_SETTING.get(nodeSettings))__                        }_                    }__                    for (Settings nodeSettings : allNodesSettings) {_                        if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                            nodeNames.add(Node.NODE_NAME_SETTING.get(nodeSettings))__                        }_                    }__                    newSettings.add(Settings.builder().put(settings)_                            .putList(ClusterBootstrapService.INITIAL_MASTER_NODES_SETTING.getKey(), nodeNames)_                            .build())___                    setBootstrapMasterNodeIndex(-1)__                }_            }_        }__        return newSettings__    };performs,cluster,bootstrap,when,node,with,index,link,bootstrap,master,node,index,is,started,with,the,names,of,all,existing,and,new,master,eligible,nodes,indexing,starts,from,0,if,link,bootstrap,master,node,index,is,1,default,this,method,does,nothing;private,list,settings,bootstrap,master,node,with,specified,index,list,settings,all,nodes,settings,if,get,bootstrap,master,node,index,1,return,all,nodes,settings,int,current,node,id,num,master,nodes,1,list,settings,new,settings,new,array,list,for,settings,settings,all,nodes,settings,if,node,get,settings,false,new,settings,add,settings,else,current,node,id,if,current,node,id,bootstrap,master,node,index,new,settings,add,settings,else,list,string,node,names,new,array,list,for,settings,node,settings,get,data,or,master,node,instances,settings,class,if,node,get,node,settings,node,names,add,node,get,node,settings,for,settings,node,settings,all,nodes,settings,if,node,get,node,settings,node,names,add,node,get,node,settings,new,settings,add,settings,builder,put,settings,put,list,cluster,bootstrap,service,get,key,node,names,build,set,bootstrap,master,node,index,1,return,new,settings
InternalTestCluster -> private List<Settings> bootstrapMasterNodeWithSpecifiedIndex(List<Settings> allNodesSettings);1549094096;Performs cluster bootstrap when node with index {@link #bootstrapMasterNodeIndex} is started_with the names of all existing and new master-eligible nodes._Indexing starts from 0._If {@link #bootstrapMasterNodeIndex} is -1 (default), this method does nothing.;private List<Settings> bootstrapMasterNodeWithSpecifiedIndex(List<Settings> allNodesSettings) {_        if (getBootstrapMasterNodeIndex() == -1) { _            return allNodesSettings__        }__        int currentNodeId = numMasterNodes() - 1__        List<Settings> newSettings = new ArrayList<>()___        for (Settings settings : allNodesSettings) {_            if (Node.NODE_MASTER_SETTING.get(settings) == false) {_                newSettings.add(settings)__            } else {_                currentNodeId++__                if (currentNodeId != bootstrapMasterNodeIndex) {_                    newSettings.add(settings)__                } else {_                    List<String> nodeNames = new ArrayList<>()___                    for (Settings nodeSettings : getDataOrMasterNodeInstances(Settings.class)) {_                        if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                            nodeNames.add(Node.NODE_NAME_SETTING.get(nodeSettings))__                        }_                    }__                    for (Settings nodeSettings : allNodesSettings) {_                        if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                            nodeNames.add(Node.NODE_NAME_SETTING.get(nodeSettings))__                        }_                    }__                    newSettings.add(Settings.builder().put(settings)_                            .putList(ClusterBootstrapService.INITIAL_MASTER_NODES_SETTING.getKey(), nodeNames)_                            .build())___                    setBootstrapMasterNodeIndex(-1)__                }_            }_        }__        return newSettings__    };performs,cluster,bootstrap,when,node,with,index,link,bootstrap,master,node,index,is,started,with,the,names,of,all,existing,and,new,master,eligible,nodes,indexing,starts,from,0,if,link,bootstrap,master,node,index,is,1,default,this,method,does,nothing;private,list,settings,bootstrap,master,node,with,specified,index,list,settings,all,nodes,settings,if,get,bootstrap,master,node,index,1,return,all,nodes,settings,int,current,node,id,num,master,nodes,1,list,settings,new,settings,new,array,list,for,settings,settings,all,nodes,settings,if,node,get,settings,false,new,settings,add,settings,else,current,node,id,if,current,node,id,bootstrap,master,node,index,new,settings,add,settings,else,list,string,node,names,new,array,list,for,settings,node,settings,get,data,or,master,node,instances,settings,class,if,node,get,node,settings,node,names,add,node,get,node,settings,for,settings,node,settings,all,nodes,settings,if,node,get,node,settings,node,names,add,node,get,node,settings,new,settings,add,settings,builder,put,settings,put,list,cluster,bootstrap,service,get,key,node,names,build,set,bootstrap,master,node,index,1,return,new,settings
InternalTestCluster -> private List<Settings> bootstrapMasterNodeWithSpecifiedIndex(List<Settings> allNodesSettings);1549291259;Performs cluster bootstrap when node with index {@link #bootstrapMasterNodeIndex} is started_with the names of all existing and new master-eligible nodes._Indexing starts from 0._If {@link #bootstrapMasterNodeIndex} is -1 (default), this method does nothing.;private List<Settings> bootstrapMasterNodeWithSpecifiedIndex(List<Settings> allNodesSettings) {_        if (getBootstrapMasterNodeIndex() == -1) { _            return allNodesSettings__        }__        int currentNodeId = numMasterNodes() - 1__        List<Settings> newSettings = new ArrayList<>()___        for (Settings settings : allNodesSettings) {_            if (Node.NODE_MASTER_SETTING.get(settings) == false) {_                newSettings.add(settings)__            } else {_                currentNodeId++__                if (currentNodeId != bootstrapMasterNodeIndex) {_                    newSettings.add(settings)__                } else {_                    List<String> nodeNames = new ArrayList<>()___                    for (Settings nodeSettings : getDataOrMasterNodeInstances(Settings.class)) {_                        if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                            nodeNames.add(Node.NODE_NAME_SETTING.get(nodeSettings))__                        }_                    }__                    for (Settings nodeSettings : allNodesSettings) {_                        if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                            nodeNames.add(Node.NODE_NAME_SETTING.get(nodeSettings))__                        }_                    }__                    newSettings.add(Settings.builder().put(settings)_                            .putList(ClusterBootstrapService.INITIAL_MASTER_NODES_SETTING.getKey(), nodeNames)_                            .build())___                    setBootstrapMasterNodeIndex(-1)__                }_            }_        }__        return newSettings__    };performs,cluster,bootstrap,when,node,with,index,link,bootstrap,master,node,index,is,started,with,the,names,of,all,existing,and,new,master,eligible,nodes,indexing,starts,from,0,if,link,bootstrap,master,node,index,is,1,default,this,method,does,nothing;private,list,settings,bootstrap,master,node,with,specified,index,list,settings,all,nodes,settings,if,get,bootstrap,master,node,index,1,return,all,nodes,settings,int,current,node,id,num,master,nodes,1,list,settings,new,settings,new,array,list,for,settings,settings,all,nodes,settings,if,node,get,settings,false,new,settings,add,settings,else,current,node,id,if,current,node,id,bootstrap,master,node,index,new,settings,add,settings,else,list,string,node,names,new,array,list,for,settings,node,settings,get,data,or,master,node,instances,settings,class,if,node,get,node,settings,node,names,add,node,get,node,settings,for,settings,node,settings,all,nodes,settings,if,node,get,node,settings,node,names,add,node,get,node,settings,new,settings,add,settings,builder,put,settings,put,list,cluster,bootstrap,service,get,key,node,names,build,set,bootstrap,master,node,index,1,return,new,settings
InternalTestCluster -> private List<Settings> bootstrapMasterNodeWithSpecifiedIndex(List<Settings> allNodesSettings);1549386680;Performs cluster bootstrap when node with index {@link #bootstrapMasterNodeIndex} is started_with the names of all existing and new master-eligible nodes._Indexing starts from 0._If {@link #bootstrapMasterNodeIndex} is -1 (default), this method does nothing.;private List<Settings> bootstrapMasterNodeWithSpecifiedIndex(List<Settings> allNodesSettings) {_        if (getBootstrapMasterNodeIndex() == -1) { _            return allNodesSettings__        }__        int currentNodeId = numMasterNodes() - 1__        List<Settings> newSettings = new ArrayList<>()___        for (Settings settings : allNodesSettings) {_            if (Node.NODE_MASTER_SETTING.get(settings) == false) {_                newSettings.add(settings)__            } else {_                currentNodeId++__                if (currentNodeId != bootstrapMasterNodeIndex) {_                    newSettings.add(settings)__                } else {_                    List<String> nodeNames = new ArrayList<>()___                    for (Settings nodeSettings : getDataOrMasterNodeInstances(Settings.class)) {_                        if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                            nodeNames.add(Node.NODE_NAME_SETTING.get(nodeSettings))__                        }_                    }__                    for (Settings nodeSettings : allNodesSettings) {_                        if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                            nodeNames.add(Node.NODE_NAME_SETTING.get(nodeSettings))__                        }_                    }__                    newSettings.add(Settings.builder().put(settings)_                            .putList(ClusterBootstrapService.INITIAL_MASTER_NODES_SETTING.getKey(), nodeNames)_                            .build())___                    setBootstrapMasterNodeIndex(-1)__                }_            }_        }__        return newSettings__    };performs,cluster,bootstrap,when,node,with,index,link,bootstrap,master,node,index,is,started,with,the,names,of,all,existing,and,new,master,eligible,nodes,indexing,starts,from,0,if,link,bootstrap,master,node,index,is,1,default,this,method,does,nothing;private,list,settings,bootstrap,master,node,with,specified,index,list,settings,all,nodes,settings,if,get,bootstrap,master,node,index,1,return,all,nodes,settings,int,current,node,id,num,master,nodes,1,list,settings,new,settings,new,array,list,for,settings,settings,all,nodes,settings,if,node,get,settings,false,new,settings,add,settings,else,current,node,id,if,current,node,id,bootstrap,master,node,index,new,settings,add,settings,else,list,string,node,names,new,array,list,for,settings,node,settings,get,data,or,master,node,instances,settings,class,if,node,get,node,settings,node,names,add,node,get,node,settings,for,settings,node,settings,all,nodes,settings,if,node,get,node,settings,node,names,add,node,get,node,settings,new,settings,add,settings,builder,put,settings,put,list,cluster,bootstrap,service,get,key,node,names,build,set,bootstrap,master,node,index,1,return,new,settings
InternalTestCluster -> private List<Settings> bootstrapMasterNodeWithSpecifiedIndex(List<Settings> allNodesSettings);1549388544;Performs cluster bootstrap when node with index {@link #bootstrapMasterNodeIndex} is started_with the names of all existing and new master-eligible nodes._Indexing starts from 0._If {@link #bootstrapMasterNodeIndex} is -1 (default), this method does nothing.;private List<Settings> bootstrapMasterNodeWithSpecifiedIndex(List<Settings> allNodesSettings) {_        if (getBootstrapMasterNodeIndex() == -1) { _            return allNodesSettings__        }__        int currentNodeId = numMasterNodes() - 1__        List<Settings> newSettings = new ArrayList<>()___        for (Settings settings : allNodesSettings) {_            if (Node.NODE_MASTER_SETTING.get(settings) == false) {_                newSettings.add(settings)__            } else {_                currentNodeId++__                if (currentNodeId != bootstrapMasterNodeIndex) {_                    newSettings.add(settings)__                } else {_                    List<String> nodeNames = new ArrayList<>()___                    for (Settings nodeSettings : getDataOrMasterNodeInstances(Settings.class)) {_                        if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                            nodeNames.add(Node.NODE_NAME_SETTING.get(nodeSettings))__                        }_                    }__                    for (Settings nodeSettings : allNodesSettings) {_                        if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                            nodeNames.add(Node.NODE_NAME_SETTING.get(nodeSettings))__                        }_                    }__                    newSettings.add(Settings.builder().put(settings)_                            .putList(ClusterBootstrapService.INITIAL_MASTER_NODES_SETTING.getKey(), nodeNames)_                            .build())___                    setBootstrapMasterNodeIndex(-1)__                }_            }_        }__        return newSettings__    };performs,cluster,bootstrap,when,node,with,index,link,bootstrap,master,node,index,is,started,with,the,names,of,all,existing,and,new,master,eligible,nodes,indexing,starts,from,0,if,link,bootstrap,master,node,index,is,1,default,this,method,does,nothing;private,list,settings,bootstrap,master,node,with,specified,index,list,settings,all,nodes,settings,if,get,bootstrap,master,node,index,1,return,all,nodes,settings,int,current,node,id,num,master,nodes,1,list,settings,new,settings,new,array,list,for,settings,settings,all,nodes,settings,if,node,get,settings,false,new,settings,add,settings,else,current,node,id,if,current,node,id,bootstrap,master,node,index,new,settings,add,settings,else,list,string,node,names,new,array,list,for,settings,node,settings,get,data,or,master,node,instances,settings,class,if,node,get,node,settings,node,names,add,node,get,node,settings,for,settings,node,settings,all,nodes,settings,if,node,get,node,settings,node,names,add,node,get,node,settings,new,settings,add,settings,builder,put,settings,put,list,cluster,bootstrap,service,get,key,node,names,build,set,bootstrap,master,node,index,1,return,new,settings
InternalTestCluster -> private List<Settings> bootstrapMasterNodeWithSpecifiedIndex(List<Settings> allNodesSettings);1549452878;Performs cluster bootstrap when node with index {@link #bootstrapMasterNodeIndex} is started_with the names of all existing and new master-eligible nodes._Indexing starts from 0._If {@link #bootstrapMasterNodeIndex} is -1 (default), this method does nothing.;private List<Settings> bootstrapMasterNodeWithSpecifiedIndex(List<Settings> allNodesSettings) {_        if (getBootstrapMasterNodeIndex() == -1) { _            return allNodesSettings__        }__        int currentNodeId = numMasterNodes() - 1__        List<Settings> newSettings = new ArrayList<>()___        for (Settings settings : allNodesSettings) {_            if (Node.NODE_MASTER_SETTING.get(settings) == false) {_                newSettings.add(settings)__            } else {_                currentNodeId++__                if (currentNodeId != bootstrapMasterNodeIndex) {_                    newSettings.add(settings)__                } else {_                    List<String> nodeNames = new ArrayList<>()___                    for (Settings nodeSettings : getDataOrMasterNodeInstances(Settings.class)) {_                        if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                            nodeNames.add(Node.NODE_NAME_SETTING.get(nodeSettings))__                        }_                    }__                    for (Settings nodeSettings : allNodesSettings) {_                        if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                            nodeNames.add(Node.NODE_NAME_SETTING.get(nodeSettings))__                        }_                    }__                    newSettings.add(Settings.builder().put(settings)_                            .putList(ClusterBootstrapService.INITIAL_MASTER_NODES_SETTING.getKey(), nodeNames)_                            .build())___                    setBootstrapMasterNodeIndex(-1)__                }_            }_        }__        return newSettings__    };performs,cluster,bootstrap,when,node,with,index,link,bootstrap,master,node,index,is,started,with,the,names,of,all,existing,and,new,master,eligible,nodes,indexing,starts,from,0,if,link,bootstrap,master,node,index,is,1,default,this,method,does,nothing;private,list,settings,bootstrap,master,node,with,specified,index,list,settings,all,nodes,settings,if,get,bootstrap,master,node,index,1,return,all,nodes,settings,int,current,node,id,num,master,nodes,1,list,settings,new,settings,new,array,list,for,settings,settings,all,nodes,settings,if,node,get,settings,false,new,settings,add,settings,else,current,node,id,if,current,node,id,bootstrap,master,node,index,new,settings,add,settings,else,list,string,node,names,new,array,list,for,settings,node,settings,get,data,or,master,node,instances,settings,class,if,node,get,node,settings,node,names,add,node,get,node,settings,for,settings,node,settings,all,nodes,settings,if,node,get,node,settings,node,names,add,node,get,node,settings,new,settings,add,settings,builder,put,settings,put,list,cluster,bootstrap,service,get,key,node,names,build,set,bootstrap,master,node,index,1,return,new,settings
InternalTestCluster -> private List<Settings> bootstrapMasterNodeWithSpecifiedIndex(List<Settings> allNodesSettings);1549898480;Performs cluster bootstrap when node with index {@link #bootstrapMasterNodeIndex} is started_with the names of all existing and new master-eligible nodes._Indexing starts from 0._If {@link #bootstrapMasterNodeIndex} is -1 (default), this method does nothing.;private List<Settings> bootstrapMasterNodeWithSpecifiedIndex(List<Settings> allNodesSettings) {_        if (getBootstrapMasterNodeIndex() == -1) { _            return allNodesSettings__        }__        int currentNodeId = numMasterNodes() - 1__        List<Settings> newSettings = new ArrayList<>()___        for (Settings settings : allNodesSettings) {_            if (Node.NODE_MASTER_SETTING.get(settings) == false) {_                newSettings.add(settings)__            } else {_                currentNodeId++__                if (currentNodeId != bootstrapMasterNodeIndex) {_                    newSettings.add(settings)__                } else {_                    List<String> nodeNames = new ArrayList<>()___                    for (Settings nodeSettings : getDataOrMasterNodeInstances(Settings.class)) {_                        if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                            nodeNames.add(Node.NODE_NAME_SETTING.get(nodeSettings))__                        }_                    }__                    for (Settings nodeSettings : allNodesSettings) {_                        if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                            nodeNames.add(Node.NODE_NAME_SETTING.get(nodeSettings))__                        }_                    }__                    newSettings.add(Settings.builder().put(settings)_                            .putList(ClusterBootstrapService.INITIAL_MASTER_NODES_SETTING.getKey(), nodeNames)_                            .build())___                    setBootstrapMasterNodeIndex(-1)__                }_            }_        }__        return newSettings__    };performs,cluster,bootstrap,when,node,with,index,link,bootstrap,master,node,index,is,started,with,the,names,of,all,existing,and,new,master,eligible,nodes,indexing,starts,from,0,if,link,bootstrap,master,node,index,is,1,default,this,method,does,nothing;private,list,settings,bootstrap,master,node,with,specified,index,list,settings,all,nodes,settings,if,get,bootstrap,master,node,index,1,return,all,nodes,settings,int,current,node,id,num,master,nodes,1,list,settings,new,settings,new,array,list,for,settings,settings,all,nodes,settings,if,node,get,settings,false,new,settings,add,settings,else,current,node,id,if,current,node,id,bootstrap,master,node,index,new,settings,add,settings,else,list,string,node,names,new,array,list,for,settings,node,settings,get,data,or,master,node,instances,settings,class,if,node,get,node,settings,node,names,add,node,get,node,settings,for,settings,node,settings,all,nodes,settings,if,node,get,node,settings,node,names,add,node,get,node,settings,new,settings,add,settings,builder,put,settings,put,list,cluster,bootstrap,service,get,key,node,names,build,set,bootstrap,master,node,index,1,return,new,settings
InternalTestCluster -> private List<Settings> bootstrapMasterNodeWithSpecifiedIndex(List<Settings> allNodesSettings);1550570542;Performs cluster bootstrap when node with index {@link #bootstrapMasterNodeIndex} is started_with the names of all existing and new master-eligible nodes._Indexing starts from 0._If {@link #bootstrapMasterNodeIndex} is -1 (default), this method does nothing.;private List<Settings> bootstrapMasterNodeWithSpecifiedIndex(List<Settings> allNodesSettings) {_        if (getBootstrapMasterNodeIndex() == -1) { _            return allNodesSettings__        }__        int currentNodeId = numMasterNodes() - 1__        List<Settings> newSettings = new ArrayList<>()___        for (Settings settings : allNodesSettings) {_            if (Node.NODE_MASTER_SETTING.get(settings) == false) {_                newSettings.add(settings)__            } else {_                currentNodeId++__                if (currentNodeId != bootstrapMasterNodeIndex) {_                    newSettings.add(settings)__                } else {_                    List<String> nodeNames = new ArrayList<>()___                    for (Settings nodeSettings : getDataOrMasterNodeInstances(Settings.class)) {_                        if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                            nodeNames.add(Node.NODE_NAME_SETTING.get(nodeSettings))__                        }_                    }__                    for (Settings nodeSettings : allNodesSettings) {_                        if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                            nodeNames.add(Node.NODE_NAME_SETTING.get(nodeSettings))__                        }_                    }__                    newSettings.add(Settings.builder().put(settings)_                            .putList(ClusterBootstrapService.INITIAL_MASTER_NODES_SETTING.getKey(), nodeNames)_                            .build())___                    setBootstrapMasterNodeIndex(-1)__                }_            }_        }__        return newSettings__    };performs,cluster,bootstrap,when,node,with,index,link,bootstrap,master,node,index,is,started,with,the,names,of,all,existing,and,new,master,eligible,nodes,indexing,starts,from,0,if,link,bootstrap,master,node,index,is,1,default,this,method,does,nothing;private,list,settings,bootstrap,master,node,with,specified,index,list,settings,all,nodes,settings,if,get,bootstrap,master,node,index,1,return,all,nodes,settings,int,current,node,id,num,master,nodes,1,list,settings,new,settings,new,array,list,for,settings,settings,all,nodes,settings,if,node,get,settings,false,new,settings,add,settings,else,current,node,id,if,current,node,id,bootstrap,master,node,index,new,settings,add,settings,else,list,string,node,names,new,array,list,for,settings,node,settings,get,data,or,master,node,instances,settings,class,if,node,get,node,settings,node,names,add,node,get,node,settings,for,settings,node,settings,all,nodes,settings,if,node,get,node,settings,node,names,add,node,get,node,settings,new,settings,add,settings,builder,put,settings,put,list,cluster,bootstrap,service,get,key,node,names,build,set,bootstrap,master,node,index,1,return,new,settings
InternalTestCluster -> private List<Settings> bootstrapMasterNodeWithSpecifiedIndex(List<Settings> allNodesSettings);1550755200;Performs cluster bootstrap when node with index {@link #bootstrapMasterNodeIndex} is started_with the names of all existing and new master-eligible nodes._Indexing starts from 0._If {@link #bootstrapMasterNodeIndex} is -1 (default), this method does nothing.;private List<Settings> bootstrapMasterNodeWithSpecifiedIndex(List<Settings> allNodesSettings) {_        assert Thread.holdsLock(this)__        if (bootstrapMasterNodeIndex == -1) { _            return allNodesSettings__        }__        int currentNodeId = numMasterNodes() - 1__        List<Settings> newSettings = new ArrayList<>()___        for (Settings settings : allNodesSettings) {_            if (Node.NODE_MASTER_SETTING.get(settings) == false) {_                newSettings.add(settings)__            } else {_                currentNodeId++__                if (currentNodeId != bootstrapMasterNodeIndex) {_                    newSettings.add(settings)__                } else {_                    List<String> nodeNames = new ArrayList<>()___                    for (Settings nodeSettings : getDataOrMasterNodeInstances(Settings.class)) {_                        if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                            nodeNames.add(Node.NODE_NAME_SETTING.get(nodeSettings))__                        }_                    }__                    for (Settings nodeSettings : allNodesSettings) {_                        if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                            nodeNames.add(Node.NODE_NAME_SETTING.get(nodeSettings))__                        }_                    }__                    newSettings.add(Settings.builder().put(settings)_                            .putList(ClusterBootstrapService.INITIAL_MASTER_NODES_SETTING.getKey(), nodeNames)_                            .build())___                    setBootstrapMasterNodeIndex(-1)__                }_            }_        }__        return newSettings__    };performs,cluster,bootstrap,when,node,with,index,link,bootstrap,master,node,index,is,started,with,the,names,of,all,existing,and,new,master,eligible,nodes,indexing,starts,from,0,if,link,bootstrap,master,node,index,is,1,default,this,method,does,nothing;private,list,settings,bootstrap,master,node,with,specified,index,list,settings,all,nodes,settings,assert,thread,holds,lock,this,if,bootstrap,master,node,index,1,return,all,nodes,settings,int,current,node,id,num,master,nodes,1,list,settings,new,settings,new,array,list,for,settings,settings,all,nodes,settings,if,node,get,settings,false,new,settings,add,settings,else,current,node,id,if,current,node,id,bootstrap,master,node,index,new,settings,add,settings,else,list,string,node,names,new,array,list,for,settings,node,settings,get,data,or,master,node,instances,settings,class,if,node,get,node,settings,node,names,add,node,get,node,settings,for,settings,node,settings,all,nodes,settings,if,node,get,node,settings,node,names,add,node,get,node,settings,new,settings,add,settings,builder,put,settings,put,list,cluster,bootstrap,service,get,key,node,names,build,set,bootstrap,master,node,index,1,return,new,settings
InternalTestCluster -> private List<Settings> bootstrapMasterNodeWithSpecifiedIndex(List<Settings> allNodesSettings);1550761203;Performs cluster bootstrap when node with index {@link #bootstrapMasterNodeIndex} is started_with the names of all existing and new master-eligible nodes._Indexing starts from 0._If {@link #bootstrapMasterNodeIndex} is -1 (default), this method does nothing.;private List<Settings> bootstrapMasterNodeWithSpecifiedIndex(List<Settings> allNodesSettings) {_        assert Thread.holdsLock(this)__        if (bootstrapMasterNodeIndex == -1) { _            return allNodesSettings__        }__        int currentNodeId = numMasterNodes() - 1__        List<Settings> newSettings = new ArrayList<>()___        for (Settings settings : allNodesSettings) {_            if (Node.NODE_MASTER_SETTING.get(settings) == false) {_                newSettings.add(settings)__            } else {_                currentNodeId++__                if (currentNodeId != bootstrapMasterNodeIndex) {_                    newSettings.add(settings)__                } else {_                    List<String> nodeNames = new ArrayList<>()___                    for (Settings nodeSettings : getDataOrMasterNodeInstances(Settings.class)) {_                        if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                            nodeNames.add(Node.NODE_NAME_SETTING.get(nodeSettings))__                        }_                    }__                    for (Settings nodeSettings : allNodesSettings) {_                        if (Node.NODE_MASTER_SETTING.get(nodeSettings)) {_                            nodeNames.add(Node.NODE_NAME_SETTING.get(nodeSettings))__                        }_                    }__                    newSettings.add(Settings.builder().put(settings)_                            .putList(ClusterBootstrapService.INITIAL_MASTER_NODES_SETTING.getKey(), nodeNames)_                            .build())___                    setBootstrapMasterNodeIndex(-1)__                }_            }_        }__        return newSettings__    };performs,cluster,bootstrap,when,node,with,index,link,bootstrap,master,node,index,is,started,with,the,names,of,all,existing,and,new,master,eligible,nodes,indexing,starts,from,0,if,link,bootstrap,master,node,index,is,1,default,this,method,does,nothing;private,list,settings,bootstrap,master,node,with,specified,index,list,settings,all,nodes,settings,assert,thread,holds,lock,this,if,bootstrap,master,node,index,1,return,all,nodes,settings,int,current,node,id,num,master,nodes,1,list,settings,new,settings,new,array,list,for,settings,settings,all,nodes,settings,if,node,get,settings,false,new,settings,add,settings,else,current,node,id,if,current,node,id,bootstrap,master,node,index,new,settings,add,settings,else,list,string,node,names,new,array,list,for,settings,node,settings,get,data,or,master,node,instances,settings,class,if,node,get,node,settings,node,names,add,node,get,node,settings,for,settings,node,settings,all,nodes,settings,if,node,get,node,settings,node,names,add,node,get,node,settings,new,settings,add,settings,builder,put,settings,put,list,cluster,bootstrap,service,get,key,node,names,build,set,bootstrap,master,node,index,1,return,new,settings
InternalTestCluster -> public List<String> startNodes(int numOfNodes);1550755200;Starts multiple nodes with default settings and returns their names;public List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public List<String> startNodes(int numOfNodes);1550761203;Starts multiple nodes with default settings and returns their names;public List<String> startNodes(int numOfNodes) {_        return startNodes(numOfNodes, Settings.EMPTY)__    };starts,multiple,nodes,with,default,settings,and,returns,their,names;public,list,string,start,nodes,int,num,of,nodes,return,start,nodes,num,of,nodes,settings,empty
InternalTestCluster -> public synchronized Client masterClient();1524684173;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1525162917;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1527096592;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1527152864;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1529916081;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1531179852;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1531729807;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1533738061;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1534362961;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1535723122;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1536137328;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1536828374;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1537806831;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1538067637;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1539723533;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1539815831;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1540486836;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1541092382;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1541208696;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1542198296;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1544081506;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1544221624;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1544254415;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1544544737;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1544823664;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1545156327;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1545222364;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1545315633;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1547245564;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1547496886;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1547497728;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1547825802;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1548160032;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1548878955;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1549017271;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1549094096;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1549291259;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1549386680;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1549388544;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1549452878;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1549898480;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> public synchronized Client masterClient();1550570542;Returns a node client to the current master node._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client masterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()))__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No master client found")__        return null_ _    };returns,a,node,client,to,the,current,master,node,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,master,client,found,return,null
InternalTestCluster -> private synchronized void validateClusterFormed(String viaNode);1550755200;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;private synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;private,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> private synchronized void validateClusterFormed(String viaNode);1550761203;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;private synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;private,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public List<String> startNodes(int numOfNodes, Settings settings);1550755200;Starts multiple nodes with the given settings and returns their names;public List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).toArray(new Settings[0]))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,to,array,new,settings,0
InternalTestCluster -> public List<String> startNodes(int numOfNodes, Settings settings);1550761203;Starts multiple nodes with the given settings and returns their names;public List<String> startNodes(int numOfNodes, Settings settings) {_        return startNodes(Collections.nCopies(numOfNodes, settings).toArray(new Settings[0]))__    };starts,multiple,nodes,with,the,given,settings,and,returns,their,names;public,list,string,start,nodes,int,num,of,nodes,settings,settings,return,start,nodes,collections,n,copies,num,of,nodes,settings,to,array,new,settings,0
InternalTestCluster -> public synchronized Client transportClient();1524684173;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1525162917;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1527096592;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1527152864;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1529916081;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1531179852;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1531729807;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1533738061;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1534362961;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1535723122;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1536137328;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1536828374;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1537806831;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1538067637;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1539723533;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1539815831;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1540486836;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1541092382;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1541208696;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1542198296;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1544081506;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1544221624;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1544254415;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1544544737;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1544823664;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1545156327;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1545222364;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1545315633;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1547245564;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1547496886;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1547497728;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1547825802;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1548160032;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1548878955;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1549017271;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1549094096;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1549291259;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1549386680;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1549388544;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1549452878;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1549898480;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1550570542;Returns a transport client;public synchronized Client transportClient() {_        ensureOpen()__        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,ensure,open,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1550755200;Returns a transport client;public synchronized Client transportClient() {_        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,return,get,or,build,random,node,transport,client
InternalTestCluster -> public synchronized Client transportClient();1550761203;Returns a transport client;public synchronized Client transportClient() {_        _        return getOrBuildRandomNode().transportClient()__    };returns,a,transport,client;public,synchronized,client,transport,client,return,get,or,build,random,node,transport,client
InternalTestCluster -> public String startNode();1550755200;Starts a node with default settings and returns its name.;public String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,string,start,node,return,start,node,settings,empty
InternalTestCluster -> public String startNode();1550761203;Starts a node with default settings and returns its name.;public String startNode() {_        return startNode(Settings.EMPTY)__    };starts,a,node,with,default,settings,and,returns,its,name;public,string,start,node,return,start,node,settings,empty
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1524684173;Executed for each node before the <tt>n+1</tt> node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,tt,n,1,tt,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1525162917;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1527096592;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1527152864;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1529916081;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1531179852;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1531729807;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1533738061;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1534362961;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1535723122;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1536137328;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1536828374;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1537806831;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1538067637;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1539723533;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1539815831;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1540486836;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1541092382;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1541208696;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1542198296;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1544081506;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1544221624;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1544254415;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1544544737;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1544823664;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1545156327;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1545222364;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1545315633;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1547245564;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1547496886;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1547497728;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1547825802;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1548160032;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1548878955;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1549017271;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1549094096;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1549291259;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1549386680;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1549388544;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1549452878;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1549898480;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1550570542;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1550755200;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> RestartCallback -> public void doAfterNodes(int n, Client client) throws Exception;1550761203;Executed for each node before the {@code n + 1} node is restarted. The given client is_an active client to the node that will be restarted next.;public void doAfterNodes(int n, Client client) throws Exception {_        };executed,for,each,node,before,the,code,n,1,node,is,restarted,the,given,client,is,an,active,client,to,the,node,that,will,be,restarted,next;public,void,do,after,nodes,int,n,client,client,throws,exception
InternalTestCluster -> public Client dataNodeClient();1550755200;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public Client dataNodeClient() {_        _        return getRandomNodeAndClient(DATA_NODE_PREDICATE).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,client,data,node,client,return,get,random,node,and,client,client,random
InternalTestCluster -> public Client dataNodeClient();1550761203;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public Client dataNodeClient() {_        _        return getRandomNodeAndClient(DATA_NODE_PREDICATE).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,client,data,node,client,return,get,random,node,and,client,client,random
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1524684173;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1525162917;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1527096592;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1527152864;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1529916081;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1531179852;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1531729807;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1533738061;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1534362961;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1535723122;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1536137328;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1536828374;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1537806831;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1538067637;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1539723533;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1539815831;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1540486836;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1541092382;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1541208696;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1542198296;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1544081506;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1544221624;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1544254415;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1544544737;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1544823664;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1545156327;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1545222364;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1545315633;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1547245564;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1547496886;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1547497728;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1547825802;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1548160032;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1548878955;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1549017271;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1549094096;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1549291259;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1549386680;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1549388544;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1549452878;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1549898480;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1550570542;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1550755200;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public boolean getAutoManageMinMasterNode();1550761203;returns true if the {@link ElectMasterService#DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING} setting is auto managed by this cluster;public boolean getAutoManageMinMasterNode() {_        return autoManageMinMasterNodes__    };returns,true,if,the,link,elect,master,service,setting,is,auto,managed,by,this,cluster;public,boolean,get,auto,manage,min,master,node,return,auto,manage,min,master,nodes
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1524684173;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1525162917;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1527096592;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1527152864;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1529916081;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1531179852;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1531729807;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1533738061;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1534362961;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1535723122;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1536137328;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1536828374;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1537806831;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1538067637;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1539723533;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1539815831;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1540486836;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1541092382;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1541208696;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1542198296;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1544081506;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1544221624;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1544254415;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1544544737;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1544823664;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1545156327;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1545222364;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1545315633;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1547245564;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1547496886;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1547497728;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1547825802;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1548160032;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1548878955;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1549017271;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1549094096;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1549291259;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1549386680;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1549388544;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1549452878;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1549898480;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1550570542;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        assert nodes.containsKey(masterNodeName)__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(nodes.get(masterNodeName))__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,assert,nodes,contains,key,master,node,name,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,nodes,get,master,node,name
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1550755200;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        final NodeAndClient masterNode = nodes.get(masterNodeName)__        assert masterNode != null__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(masterNode)__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,final,node,and,client,master,node,nodes,get,master,node,name,assert,master,node,null,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,master,node
InternalTestCluster -> public synchronized void stopCurrentMasterNode() throws IOException;1550761203;Stops the current master node forcefully;public synchronized void stopCurrentMasterNode() throws IOException {_        ensureOpen()__        assert size() > 0__        String masterNodeName = getMasterName()__        final NodeAndClient masterNode = nodes.get(masterNodeName)__        assert masterNode != null__        logger.info("Closing master node [{}] ", masterNodeName)__        stopNodesAndClient(masterNode)__    };stops,the,current,master,node,forcefully;public,synchronized,void,stop,current,master,node,throws,ioexception,ensure,open,assert,size,0,string,master,node,name,get,master,name,final,node,and,client,master,node,nodes,get,master,node,name,assert,master,node,null,logger,info,closing,master,node,master,node,name,stop,nodes,and,client,master,node
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeNames);1544081506;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeNames) {_        final Set<String> nodes = Sets.newHashSet(nodeNames)__        return settings -> nodes.contains(settings.get("node.name"))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,names,final,set,string,nodes,sets,new,hash,set,node,names,return,settings,nodes,contains,settings,get,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeNames);1544221624;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeNames) {_        final Set<String> nodes = Sets.newHashSet(nodeNames)__        return settings -> nodes.contains(settings.get("node.name"))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,names,final,set,string,nodes,sets,new,hash,set,node,names,return,settings,nodes,contains,settings,get,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeNames);1544254415;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeNames) {_        final Set<String> nodes = Sets.newHashSet(nodeNames)__        return settings -> nodes.contains(settings.get("node.name"))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,names,final,set,string,nodes,sets,new,hash,set,node,names,return,settings,nodes,contains,settings,get,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeNames);1544544737;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeNames) {_        final Set<String> nodes = Sets.newHashSet(nodeNames)__        return settings -> nodes.contains(settings.get("node.name"))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,names,final,set,string,nodes,sets,new,hash,set,node,names,return,settings,nodes,contains,settings,get,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeNames);1544823664;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeNames) {_        final Set<String> nodes = Sets.newHashSet(nodeNames)__        return settings -> nodes.contains(settings.get("node.name"))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,names,final,set,string,nodes,sets,new,hash,set,node,names,return,settings,nodes,contains,settings,get,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeNames);1545156327;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeNames) {_        final Set<String> nodes = Sets.newHashSet(nodeNames)__        return settings -> nodes.contains(settings.get("node.name"))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,names,final,set,string,nodes,sets,new,hash,set,node,names,return,settings,nodes,contains,settings,get,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeNames);1545222364;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeNames) {_        final Set<String> nodes = Sets.newHashSet(nodeNames)__        return settings -> nodes.contains(settings.get("node.name"))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,names,final,set,string,nodes,sets,new,hash,set,node,names,return,settings,nodes,contains,settings,get,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeNames);1545315633;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeNames) {_        final Set<String> nodes = Sets.newHashSet(nodeNames)__        return settings -> nodes.contains(settings.get("node.name"))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,names,final,set,string,nodes,sets,new,hash,set,node,names,return,settings,nodes,contains,settings,get,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeNames);1547245564;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeNames) {_        final Set<String> nodes = Sets.newHashSet(nodeNames)__        return settings -> nodes.contains(settings.get("node.name"))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,names,final,set,string,nodes,sets,new,hash,set,node,names,return,settings,nodes,contains,settings,get,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeNames);1547496886;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeNames) {_        final Set<String> nodes = Sets.newHashSet(nodeNames)__        return settings -> nodes.contains(settings.get("node.name"))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,names,final,set,string,nodes,sets,new,hash,set,node,names,return,settings,nodes,contains,settings,get,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeNames);1547497728;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeNames) {_        final Set<String> nodes = Sets.newHashSet(nodeNames)__        return settings -> nodes.contains(settings.get("node.name"))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,names,final,set,string,nodes,sets,new,hash,set,node,names,return,settings,nodes,contains,settings,get,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeNames);1547825802;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeNames) {_        final Set<String> nodes = Sets.newHashSet(nodeNames)__        return settings -> nodes.contains(settings.get("node.name"))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,names,final,set,string,nodes,sets,new,hash,set,node,names,return,settings,nodes,contains,settings,get,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeNames);1548160032;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeNames) {_        final Set<String> nodes = Sets.newHashSet(nodeNames)__        return settings -> nodes.contains(settings.get("node.name"))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,names,final,set,string,nodes,sets,new,hash,set,node,names,return,settings,nodes,contains,settings,get,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeNames);1548878955;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeNames) {_        final Set<String> nodes = Sets.newHashSet(nodeNames)__        return settings -> nodes.contains(settings.get("node.name"))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,names,final,set,string,nodes,sets,new,hash,set,node,names,return,settings,nodes,contains,settings,get,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeNames);1549017271;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeNames) {_        final Set<String> nodes = Sets.newHashSet(nodeNames)__        return settings -> nodes.contains(settings.get("node.name"))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,names,final,set,string,nodes,sets,new,hash,set,node,names,return,settings,nodes,contains,settings,get,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeNames);1549094096;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeNames) {_        final Set<String> nodes = Sets.newHashSet(nodeNames)__        return settings -> nodes.contains(settings.get("node.name"))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,names,final,set,string,nodes,sets,new,hash,set,node,names,return,settings,nodes,contains,settings,get,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeNames);1549291259;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeNames) {_        final Set<String> nodes = Sets.newHashSet(nodeNames)__        return settings -> nodes.contains(settings.get("node.name"))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,names,final,set,string,nodes,sets,new,hash,set,node,names,return,settings,nodes,contains,settings,get,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeNames);1549386680;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeNames) {_        final Set<String> nodes = Sets.newHashSet(nodeNames)__        return settings -> nodes.contains(settings.get("node.name"))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,names,final,set,string,nodes,sets,new,hash,set,node,names,return,settings,nodes,contains,settings,get,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeNames);1549388544;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeNames) {_        final Set<String> nodes = Sets.newHashSet(nodeNames)__        return settings -> nodes.contains(settings.get("node.name"))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,names,final,set,string,nodes,sets,new,hash,set,node,names,return,settings,nodes,contains,settings,get,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeNames);1549452878;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeNames) {_        final Set<String> nodes = Sets.newHashSet(nodeNames)__        return settings -> nodes.contains(settings.get("node.name"))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,names,final,set,string,nodes,sets,new,hash,set,node,names,return,settings,nodes,contains,settings,get,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeNames);1549898480;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeNames) {_        final Set<String> nodes = Sets.newHashSet(nodeNames)__        return settings -> nodes.contains(settings.get("node.name"))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,names,final,set,string,nodes,sets,new,hash,set,node,names,return,settings,nodes,contains,settings,get,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeNames);1550570542;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeNames) {_        final Set<String> nodes = Sets.newHashSet(nodeNames)__        return settings -> nodes.contains(settings.get("node.name"))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,names,final,set,string,nodes,sets,new,hash,set,node,names,return,settings,nodes,contains,settings,get,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeNames);1550755200;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeNames) {_        final Set<String> nodes = Sets.newHashSet(nodeNames)__        return settings -> nodes.contains(settings.get("node.name"))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,names,final,set,string,nodes,sets,new,hash,set,node,names,return,settings,nodes,contains,settings,get,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeNames);1550761203;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeNames) {_        final Set<String> nodes = Sets.newHashSet(nodeNames)__        return settings -> nodes.contains(settings.get("node.name"))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,names,final,set,string,nodes,sets,new,hash,set,node,names,return,settings,nodes,contains,settings,get,node,name
InternalTestCluster -> NodeAndClient -> void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception;1524684173;rebuilds a new node object using the current node settings and starts it;void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception {_            assert callback != null__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            if (clearDataIfNeeded) {_                clearDataIfNeeded(callback)__            }_            createNewNode(newSettings.build())__            _            resetClient()__        };rebuilds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,recreate,node,on,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,throws,exception,assert,callback,null,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,if,clear,data,if,needed,clear,data,if,needed,callback,create,new,node,new,settings,build,reset,client
InternalTestCluster -> NodeAndClient -> void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception;1525162917;rebuilds a new node object using the current node settings and starts it;void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception {_            assert callback != null__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            if (clearDataIfNeeded) {_                clearDataIfNeeded(callback)__            }_            createNewNode(newSettings.build())__            _            resetClient()__        };rebuilds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,recreate,node,on,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,throws,exception,assert,callback,null,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,if,clear,data,if,needed,clear,data,if,needed,callback,create,new,node,new,settings,build,reset,client
InternalTestCluster -> NodeAndClient -> void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception;1527096592;rebuilds a new node object using the current node settings and starts it;void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception {_            assert callback != null__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            if (clearDataIfNeeded) {_                clearDataIfNeeded(callback)__            }_            createNewNode(newSettings.build())__            _            resetClient()__        };rebuilds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,recreate,node,on,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,throws,exception,assert,callback,null,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,if,clear,data,if,needed,clear,data,if,needed,callback,create,new,node,new,settings,build,reset,client
InternalTestCluster -> NodeAndClient -> void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception;1527152864;rebuilds a new node object using the current node settings and starts it;void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception {_            assert callback != null__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            if (clearDataIfNeeded) {_                clearDataIfNeeded(callback)__            }_            createNewNode(newSettings.build())__            _            resetClient()__        };rebuilds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,recreate,node,on,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,throws,exception,assert,callback,null,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,if,clear,data,if,needed,clear,data,if,needed,callback,create,new,node,new,settings,build,reset,client
InternalTestCluster -> NodeAndClient -> void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception;1529916081;rebuilds a new node object using the current node settings and starts it;void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception {_            assert callback != null__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            if (clearDataIfNeeded) {_                clearDataIfNeeded(callback)__            }_            createNewNode(newSettings.build())__            _            resetClient()__        };rebuilds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,recreate,node,on,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,throws,exception,assert,callback,null,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,if,clear,data,if,needed,clear,data,if,needed,callback,create,new,node,new,settings,build,reset,client
InternalTestCluster -> NodeAndClient -> void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception;1531179852;rebuilds a new node object using the current node settings and starts it;void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception {_            assert callback != null__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            if (clearDataIfNeeded) {_                clearDataIfNeeded(callback)__            }_            createNewNode(newSettings.build())__            _            resetClient()__        };rebuilds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,recreate,node,on,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,throws,exception,assert,callback,null,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,if,clear,data,if,needed,clear,data,if,needed,callback,create,new,node,new,settings,build,reset,client
InternalTestCluster -> NodeAndClient -> void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception;1531729807;rebuilds a new node object using the current node settings and starts it;void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception {_            assert callback != null__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            if (clearDataIfNeeded) {_                clearDataIfNeeded(callback)__            }_            createNewNode(newSettings.build())__            _            resetClient()__        };rebuilds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,recreate,node,on,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,throws,exception,assert,callback,null,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,if,clear,data,if,needed,clear,data,if,needed,callback,create,new,node,new,settings,build,reset,client
InternalTestCluster -> NodeAndClient -> void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception;1533738061;rebuilds a new node object using the current node settings and starts it;void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception {_            assert callback != null__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            if (clearDataIfNeeded) {_                clearDataIfNeeded(callback)__            }_            createNewNode(newSettings.build())__            _            resetClient()__        };rebuilds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,recreate,node,on,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,throws,exception,assert,callback,null,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,if,clear,data,if,needed,clear,data,if,needed,callback,create,new,node,new,settings,build,reset,client
InternalTestCluster -> NodeAndClient -> void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception;1534362961;rebuilds a new node object using the current node settings and starts it;void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception {_            assert callback != null__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            if (clearDataIfNeeded) {_                clearDataIfNeeded(callback)__            }_            createNewNode(newSettings.build())__            _            resetClient()__        };rebuilds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,recreate,node,on,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,throws,exception,assert,callback,null,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,if,clear,data,if,needed,clear,data,if,needed,callback,create,new,node,new,settings,build,reset,client
InternalTestCluster -> NodeAndClient -> void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception;1535723122;rebuilds a new node object using the current node settings and starts it;void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception {_            assert callback != null__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            if (clearDataIfNeeded) {_                clearDataIfNeeded(callback)__            }_            createNewNode(newSettings.build())__            _            resetClient()__        };rebuilds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,recreate,node,on,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,throws,exception,assert,callback,null,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,if,clear,data,if,needed,clear,data,if,needed,callback,create,new,node,new,settings,build,reset,client
InternalTestCluster -> NodeAndClient -> void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception;1536137328;rebuilds a new node object using the current node settings and starts it;void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception {_            assert callback != null__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            if (clearDataIfNeeded) {_                clearDataIfNeeded(callback)__            }_            createNewNode(newSettings.build())__            _            resetClient()__        };rebuilds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,recreate,node,on,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,throws,exception,assert,callback,null,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,if,clear,data,if,needed,clear,data,if,needed,callback,create,new,node,new,settings,build,reset,client
InternalTestCluster -> public <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1550755200;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, DATA_NODE_PREDICATE)__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz
InternalTestCluster -> public <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1550761203;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, DATA_NODE_PREDICATE)__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz
InternalTestCluster -> private void updateMinMasterNodes(int eligibleMasterNodeCount);1550755200;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private void updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,void,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count
InternalTestCluster -> private void updateMinMasterNodes(int eligibleMasterNodeCount);1550761203;updates the min master nodes setting in the current running cluster.__@param eligibleMasterNodeCount the number of master eligible nodes to use as basis for the min master node setting;private void updateMinMasterNodes(int eligibleMasterNodeCount) {_        assert autoManageMinMasterNodes__        final int minMasterNodes = getMinMasterNodes(eligibleMasterNodeCount)__        if (getMasterNodesCount() > 0) {_            _            logger.debug("updating min_master_nodes to [{}]", minMasterNodes)__            try {_                assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(_                    Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)_                ))__            } catch (Exception e) {_                throw new ElasticsearchException("failed to update minimum master node to [{}] (current masters [{}])", e,_                    minMasterNodes, getMasterNodesCount())__            }_        }_    };updates,the,min,master,nodes,setting,in,the,current,running,cluster,param,eligible,master,node,count,the,number,of,master,eligible,nodes,to,use,as,basis,for,the,min,master,node,setting;private,void,update,min,master,nodes,int,eligible,master,node,count,assert,auto,manage,min,master,nodes,final,int,min,master,nodes,get,min,master,nodes,eligible,master,node,count,if,get,master,nodes,count,0,logger,debug,updating,to,min,master,nodes,try,assert,acked,client,admin,cluster,prepare,update,settings,set,transient,settings,settings,builder,put,get,key,min,master,nodes,catch,exception,e,throw,new,elasticsearch,exception,failed,to,update,minimum,master,node,to,current,masters,e,min,master,nodes,get,master,nodes,count
InternalTestCluster -> private static int getMinMasterNodes(int eligibleMasterNodes);1550755200;calculates a min master nodes value based on the given number of master nodes;private static int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,static,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> private static int getMinMasterNodes(int eligibleMasterNodes);1550761203;calculates a min master nodes value based on the given number of master nodes;private static int getMinMasterNodes(int eligibleMasterNodes) {_        return eligibleMasterNodes / 2 + 1__    };calculates,a,min,master,nodes,value,based,on,the,given,number,of,master,nodes;private,static,int,get,min,master,nodes,int,eligible,master,nodes,return,eligible,master,nodes,2,1
InternalTestCluster -> public String getMasterName();1524684173;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1525162917;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1527096592;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1527152864;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1529916081;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1531179852;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1531729807;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1533738061;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1534362961;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1535723122;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1536137328;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1536828374;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1537806831;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1538067637;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1539723533;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1539815831;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1540486836;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1541092382;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1541208696;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1542198296;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1544081506;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1544221624;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1544254415;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1544544737;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1544823664;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1545156327;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1545222364;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1545315633;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1547245564;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1547496886;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1547497728;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1547825802;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1548160032;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1548878955;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1549017271;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1549094096;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1549291259;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1549386680;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1549388544;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1549452878;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1549898480;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1550570542;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1550755200;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public String getMasterName();1550761203;Returns the name of the current master node in the cluster.;public String getMasterName() {_        return getMasterName(null)__    };returns,the,name,of,the,current,master,node,in,the,cluster;public,string,get,master,name,return,get,master,name,null
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1524684173;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1525162917;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1527096592;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1527152864;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1529916081;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1531179852;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1531729807;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1533738061;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1534362961;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1535723122;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1536137328;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1536828374;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1537806831;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1538067637;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1539723533;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1539815831;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1540486836;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1541092382;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1541208696;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1542198296;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1544081506;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1544221624;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1544254415;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1544544737;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1544823664;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1545156327;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1545222364;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1545315633;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1547245564;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1547496886;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1547497728;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1547825802;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1548160032;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1548878955;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1549017271;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1549094096;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1549291259;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1549386680;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1549388544;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1549452878;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1549898480;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz, final String node);1550570542;Returns a reference to the given nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz, final String node) {_        return getInstance(clazz, nc -> node == null || node.equals(nc.name))__    };returns,a,reference,to,the,given,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,final,string,node,return,get,instance,clazz,nc,node,null,node,equals,nc,name
InternalTestCluster -> public void rollingRestart() throws Exception;1524684173;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public void rollingRestart() throws Exception {_        rollingRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,void,rolling,restart,throws,exception,rolling,restart
InternalTestCluster -> public void rollingRestart() throws Exception;1525162917;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public void rollingRestart() throws Exception {_        rollingRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,void,rolling,restart,throws,exception,rolling,restart
InternalTestCluster -> public void rollingRestart() throws Exception;1527096592;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public void rollingRestart() throws Exception {_        rollingRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,void,rolling,restart,throws,exception,rolling,restart
InternalTestCluster -> public void rollingRestart() throws Exception;1527152864;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public void rollingRestart() throws Exception {_        rollingRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,void,rolling,restart,throws,exception,rolling,restart
InternalTestCluster -> public void rollingRestart() throws Exception;1529916081;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public void rollingRestart() throws Exception {_        rollingRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,void,rolling,restart,throws,exception,rolling,restart
InternalTestCluster -> public void rollingRestart() throws Exception;1531179852;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public void rollingRestart() throws Exception {_        rollingRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,void,rolling,restart,throws,exception,rolling,restart
InternalTestCluster -> public void rollingRestart() throws Exception;1531729807;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public void rollingRestart() throws Exception {_        rollingRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,void,rolling,restart,throws,exception,rolling,restart
InternalTestCluster -> public void rollingRestart() throws Exception;1533738061;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public void rollingRestart() throws Exception {_        rollingRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,void,rolling,restart,throws,exception,rolling,restart
InternalTestCluster -> public void rollingRestart() throws Exception;1534362961;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public void rollingRestart() throws Exception {_        rollingRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,void,rolling,restart,throws,exception,rolling,restart
InternalTestCluster -> public void rollingRestart() throws Exception;1535723122;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public void rollingRestart() throws Exception {_        rollingRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,void,rolling,restart,throws,exception,rolling,restart
InternalTestCluster -> public void rollingRestart() throws Exception;1536137328;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public void rollingRestart() throws Exception {_        rollingRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,void,rolling,restart,throws,exception,rolling,restart
InternalTestCluster -> public void rollingRestart() throws Exception;1536828374;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public void rollingRestart() throws Exception {_        rollingRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,void,rolling,restart,throws,exception,rolling,restart
InternalTestCluster -> public void rollingRestart() throws Exception;1537806831;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public void rollingRestart() throws Exception {_        rollingRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,void,rolling,restart,throws,exception,rolling,restart
InternalTestCluster -> public void rollingRestart() throws Exception;1538067637;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public void rollingRestart() throws Exception {_        rollingRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,void,rolling,restart,throws,exception,rolling,restart
InternalTestCluster -> public void rollingRestart() throws Exception;1539723533;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public void rollingRestart() throws Exception {_        rollingRestart(EMPTY_CALLBACK)__    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,void,rolling,restart,throws,exception,rolling,restart
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1524684173;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1525162917;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1527096592;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1527152864;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1529916081;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1531179852;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1531729807;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1533738061;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1534362961;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1535723122;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1536137328;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1536828374;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1537806831;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1538067637;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1539723533;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1539815831;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1540486836;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1541092382;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1541208696;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1542198296;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1544081506;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1544221624;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1544254415;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1544544737;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1544823664;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1545156327;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1545222364;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1545315633;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1547245564;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1547496886;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1547497728;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1547825802;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1548160032;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1548878955;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1549017271;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1549094096;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1549291259;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1549386680;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1549388544;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1549452878;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1549898480;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> public void restartRandomDataNode(RestartCallback callback) throws Exception;1550570542;Restarts a random data node in the cluster and calls the callback during restart.;public void restartRandomDataNode(RestartCallback callback) throws Exception {_        restartRandomNode(new DataNodePredicate(), callback)__    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,void,restart,random,data,node,restart,callback,callback,throws,exception,restart,random,node,new,data,node,predicate,callback
InternalTestCluster -> private static String getRoleSuffix(Settings settings);1550755200;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private static String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,static,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private static String getRoleSuffix(Settings settings);1550761203;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private static String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,static,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> public void restartRandomNode() throws Exception;1524684173;Restarts a random node in the cluster;public void restartRandomNode() throws Exception {_        restartRandomNode(EMPTY_CALLBACK)__    };restarts,a,random,node,in,the,cluster;public,void,restart,random,node,throws,exception,restart,random,node
InternalTestCluster -> public void restartRandomNode() throws Exception;1525162917;Restarts a random node in the cluster;public void restartRandomNode() throws Exception {_        restartRandomNode(EMPTY_CALLBACK)__    };restarts,a,random,node,in,the,cluster;public,void,restart,random,node,throws,exception,restart,random,node
InternalTestCluster -> public void restartRandomNode() throws Exception;1527096592;Restarts a random node in the cluster;public void restartRandomNode() throws Exception {_        restartRandomNode(EMPTY_CALLBACK)__    };restarts,a,random,node,in,the,cluster;public,void,restart,random,node,throws,exception,restart,random,node
InternalTestCluster -> public void restartRandomNode() throws Exception;1527152864;Restarts a random node in the cluster;public void restartRandomNode() throws Exception {_        restartRandomNode(EMPTY_CALLBACK)__    };restarts,a,random,node,in,the,cluster;public,void,restart,random,node,throws,exception,restart,random,node
InternalTestCluster -> public void restartRandomNode() throws Exception;1529916081;Restarts a random node in the cluster;public void restartRandomNode() throws Exception {_        restartRandomNode(EMPTY_CALLBACK)__    };restarts,a,random,node,in,the,cluster;public,void,restart,random,node,throws,exception,restart,random,node
InternalTestCluster -> public void restartRandomNode() throws Exception;1531179852;Restarts a random node in the cluster;public void restartRandomNode() throws Exception {_        restartRandomNode(EMPTY_CALLBACK)__    };restarts,a,random,node,in,the,cluster;public,void,restart,random,node,throws,exception,restart,random,node
InternalTestCluster -> public void restartRandomNode() throws Exception;1531729807;Restarts a random node in the cluster;public void restartRandomNode() throws Exception {_        restartRandomNode(EMPTY_CALLBACK)__    };restarts,a,random,node,in,the,cluster;public,void,restart,random,node,throws,exception,restart,random,node
InternalTestCluster -> public void restartRandomNode() throws Exception;1533738061;Restarts a random node in the cluster;public void restartRandomNode() throws Exception {_        restartRandomNode(EMPTY_CALLBACK)__    };restarts,a,random,node,in,the,cluster;public,void,restart,random,node,throws,exception,restart,random,node
InternalTestCluster -> public void restartRandomNode() throws Exception;1534362961;Restarts a random node in the cluster;public void restartRandomNode() throws Exception {_        restartRandomNode(EMPTY_CALLBACK)__    };restarts,a,random,node,in,the,cluster;public,void,restart,random,node,throws,exception,restart,random,node
InternalTestCluster -> public void restartRandomNode() throws Exception;1535723122;Restarts a random node in the cluster;public void restartRandomNode() throws Exception {_        restartRandomNode(EMPTY_CALLBACK)__    };restarts,a,random,node,in,the,cluster;public,void,restart,random,node,throws,exception,restart,random,node
InternalTestCluster -> public void restartRandomNode() throws Exception;1536137328;Restarts a random node in the cluster;public void restartRandomNode() throws Exception {_        restartRandomNode(EMPTY_CALLBACK)__    };restarts,a,random,node,in,the,cluster;public,void,restart,random,node,throws,exception,restart,random,node
InternalTestCluster -> public void restartRandomNode() throws Exception;1536828374;Restarts a random node in the cluster;public void restartRandomNode() throws Exception {_        restartRandomNode(EMPTY_CALLBACK)__    };restarts,a,random,node,in,the,cluster;public,void,restart,random,node,throws,exception,restart,random,node
InternalTestCluster -> public void restartRandomNode() throws Exception;1537806831;Restarts a random node in the cluster;public void restartRandomNode() throws Exception {_        restartRandomNode(EMPTY_CALLBACK)__    };restarts,a,random,node,in,the,cluster;public,void,restart,random,node,throws,exception,restart,random,node
InternalTestCluster -> public void restartRandomNode() throws Exception;1538067637;Restarts a random node in the cluster;public void restartRandomNode() throws Exception {_        restartRandomNode(EMPTY_CALLBACK)__    };restarts,a,random,node,in,the,cluster;public,void,restart,random,node,throws,exception,restart,random,node
InternalTestCluster -> public void restartRandomNode() throws Exception;1539723533;Restarts a random node in the cluster;public void restartRandomNode() throws Exception {_        restartRandomNode(EMPTY_CALLBACK)__    };restarts,a,random,node,in,the,cluster;public,void,restart,random,node,throws,exception,restart,random,node
InternalTestCluster -> private synchronized NodeAndClient buildNode(int nodeId, Settings settings,                                     boolean reuseExisting, Runnable onTransportServiceStarted);1550755200;builds a new node__@param nodeId                    node ordinal_@param settings                  the settings to use_@param reuseExisting             if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param onTransportServiceStarted callback to run when transport service is started;private synchronized NodeAndClient buildNode(int nodeId, Settings settings,_                                    boolean reuseExisting, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = settings.get("node.name")___        final NodeAndClient nodeAndClient = nodes.get(name)__        if (reuseExisting && nodeAndClient != null) {_            onTransportServiceStarted.run()_ _            return nodeAndClient__        }_        assert reuseExisting == true || nodeAndClient == null : "node name [" + name + "] already exists but not allowed to use it"___        SecureSettings secureSettings = Settings.builder().put(settings).getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                settings,_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, settings, nodeId)__    };builds,a,new,node,param,node,id,node,ordinal,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,synchronized,node,and,client,build,node,int,node,id,settings,settings,boolean,reuse,existing,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,collection,class,extends,plugin,plugins,get,plugins,string,name,settings,get,node,name,final,node,and,client,node,and,client,nodes,get,name,if,reuse,existing,node,and,client,null,on,transport,service,started,run,return,node,and,client,assert,reuse,existing,true,node,and,client,null,node,name,name,already,exists,but,not,allowed,to,use,it,secure,settings,secure,settings,settings,builder,put,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,settings,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,settings,node,id
InternalTestCluster -> private synchronized NodeAndClient buildNode(int nodeId, Settings settings,                                     boolean reuseExisting, Runnable onTransportServiceStarted);1550761203;builds a new node__@param nodeId                    node ordinal_@param settings                  the settings to use_@param reuseExisting             if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param onTransportServiceStarted callback to run when transport service is started;private synchronized NodeAndClient buildNode(int nodeId, Settings settings,_                                    boolean reuseExisting, Runnable onTransportServiceStarted) {_        assert Thread.holdsLock(this)__        ensureOpen()__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = settings.get("node.name")___        final NodeAndClient nodeAndClient = nodes.get(name)__        if (reuseExisting && nodeAndClient != null) {_            onTransportServiceStarted.run()_ _            return nodeAndClient__        }_        assert reuseExisting == true || nodeAndClient == null : "node name [" + name + "] already exists but not allowed to use it"___        SecureSettings secureSettings = Settings.builder().put(settings).getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                settings,_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        node.injector().getInstance(TransportService.class).addLifecycleListener(new LifecycleListener() {_            @Override_            public void afterStart() {_                onTransportServiceStarted.run()__            }_        })__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, settings, nodeId)__    };builds,a,new,node,param,node,id,node,ordinal,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,on,transport,service,started,callback,to,run,when,transport,service,is,started;private,synchronized,node,and,client,build,node,int,node,id,settings,settings,boolean,reuse,existing,runnable,on,transport,service,started,assert,thread,holds,lock,this,ensure,open,collection,class,extends,plugin,plugins,get,plugins,string,name,settings,get,node,name,final,node,and,client,node,and,client,nodes,get,name,if,reuse,existing,node,and,client,null,on,transport,service,started,run,return,node,and,client,assert,reuse,existing,true,node,and,client,null,node,name,name,already,exists,but,not,allowed,to,use,it,secure,settings,secure,settings,settings,builder,put,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,settings,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,node,injector,get,instance,transport,service,class,add,lifecycle,listener,new,lifecycle,listener,override,public,void,after,start,on,transport,service,started,run,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,settings,node,id
InternalTestCluster -> public String startNode(Settings.Builder settings);1550755200;Starts a node with the given settings builder and returns its name.;public String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public String startNode(Settings.Builder settings);1550761203;Starts a node with the given settings builder and returns its name.;public String startNode(Settings.Builder settings) {_        return startNode(settings.build())__    };starts,a,node,with,the,given,settings,builder,and,returns,its,name;public,string,start,node,settings,builder,settings,return,start,node,settings,build
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1524684173;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1525162917;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1527096592;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1527152864;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1529916081;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1531179852;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1531729807;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1533738061;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1534362961;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1535723122;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1536137328;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1536828374;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1537806831;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1538067637;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1539723533;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1539815831;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1540486836;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1541092382;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1541208696;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1542198296;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1544081506;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1544221624;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1544254415;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1544544737;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1544823664;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1545156327;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1545222364;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1545315633;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1547245564;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1547496886;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1547497728;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1547825802;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1548160032;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1548878955;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1549017271;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1549094096;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1549291259;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1549386680;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1549388544;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1549452878;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1549898480;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz);1550570542;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data nodes in the cluster.;public synchronized <T> Iterable<T> getDataNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1524684173;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1525162917;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1527096592;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1527152864;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1529916081;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1531179852;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1531729807;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1533738061;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1534362961;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1535723122;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1536137328;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1536828374;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1537806831;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1538067637;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1539723533;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1539815831;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1540486836;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1541092382;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1541208696;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1542198296;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1544081506;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1544221624;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1544254415;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1544544737;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1544823664;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1545156327;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1545222364;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1545315633;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1547245564;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1547496886;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1547497728;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1547825802;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1548160032;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1548878955;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1549017271;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1549094096;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1549291259;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1549386680;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1549388544;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1549452878;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1549898480;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> public synchronized <T> T getInstance(Class<T> clazz);1550570542;Returns a reference to a random nodes instances of the given class &gt_T&lt_;public synchronized <T> T getInstance(Class<T> clazz) {_        return getInstance(clazz, nc -> true)__    };returns,a,reference,to,a,random,nodes,instances,of,the,given,class,gt,t,lt;public,synchronized,t,t,get,instance,class,t,clazz,return,get,instance,clazz,nc,true
InternalTestCluster -> private String getRoleSuffix(Settings settings);1524684173;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1525162917;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1527096592;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1527152864;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1529916081;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1531179852;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1531729807;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1533738061;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1534362961;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1535723122;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1536137328;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1536828374;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1537806831;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1538067637;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1539723533;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1539815831;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1540486836;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1541092382;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1541208696;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1542198296;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1544081506;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1544221624;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1544254415;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1544544737;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1544823664;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1545156327;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1545222364;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1545315633;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1547245564;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1547496886;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1547497728;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1547825802;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1548160032;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1548878955;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1549017271;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1549094096;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1549291259;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1549386680;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1549388544;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1549452878;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1549898480;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> private String getRoleSuffix(Settings settings);1550570542;returns a suffix string based on the node role. If no explicit role is defined, the suffix will be empty;private String getRoleSuffix(Settings settings) {_        String suffix = ""__        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings)) {_            suffix = suffix + Role.MASTER.getAbbreviation()__        }_        if (Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings)) {_            suffix = suffix + Role.DATA.getAbbreviation()__        }_        if (Node.NODE_MASTER_SETTING.exists(settings) && Node.NODE_MASTER_SETTING.get(settings) == false &&_            Node.NODE_DATA_SETTING.exists(settings) && Node.NODE_DATA_SETTING.get(settings) == false_            ) {_            suffix = suffix + "c"__        }_        return suffix__    };returns,a,suffix,string,based,on,the,node,role,if,no,explicit,role,is,defined,the,suffix,will,be,empty;private,string,get,role,suffix,settings,settings,string,suffix,if,node,exists,settings,node,get,settings,suffix,suffix,role,master,get,abbreviation,if,node,exists,settings,node,get,settings,suffix,suffix,role,data,get,abbreviation,if,node,exists,settings,node,get,settings,false,node,exists,settings,node,get,settings,false,suffix,suffix,c,return,suffix
InternalTestCluster -> public synchronized Client smartClient();1524684173;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1525162917;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1527096592;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1527152864;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1529916081;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1531179852;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1531729807;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1533738061;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1534362961;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1535723122;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1536137328;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1536828374;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1537806831;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1538067637;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1539723533;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1539815831;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1540486836;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1541092382;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1541208696;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1542198296;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1544081506;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1544221624;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1544254415;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1544544737;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1544823664;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1545156327;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1545222364;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1545315633;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1547245564;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1547496886;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1547497728;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1547825802;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1548160032;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1548878955;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1549017271;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1549094096;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1549291259;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1549386680;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1549388544;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1549452878;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1549898480;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized Client smartClient();1550570542;Returns a "smart" node client to a random node in the cluster;public synchronized Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        Assert.fail("No smart client found")__        return null_ _    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,synchronized,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,smart,client,found,return,null
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1524684173;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1525162917;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1527096592;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1527152864;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1529916081;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1531179852;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1531729807;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1533738061;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1534362961;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1535723122;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1536137328;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1536828374;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1537806831;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1538067637;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1539723533;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1539815831;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1540486836;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1541092382;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1541208696;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1542198296;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1544081506;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1544221624;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1544254415;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1544544737;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1544823664;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1545156327;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1545222364;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1545315633;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1547245564;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1547496886;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1547497728;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1547825802;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1548160032;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1548878955;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1549017271;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1549094096;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1549291259;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1549386680;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1549388544;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1549452878;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1549898480;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void validateClusterFormed(String viaNode);1550570542;ensure a cluster is formed with all published nodes, but do so by using the client of the specified node;public synchronized void validateClusterFormed(String viaNode) {_        Set<DiscoveryNode> expectedNodes = new HashSet<>()__        for (NodeAndClient nodeAndClient : nodes.values()) {_            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode())__        }_        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes)__        final Client client = client(viaNode)__        try {_            if (awaitBusy(() -> {_                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes()__                if (discoveryNodes.getSize() != expectedNodes.size()) {_                    return false__                }_                for (DiscoveryNode expectedNode : expectedNodes) {_                    if (discoveryNodes.nodeExists(expectedNode) == false) {_                        return false__                    }_                }_                return true__            }, 30, TimeUnit.SECONDS) == false) {_                throw new IllegalStateException("cluster failed to form with expected nodes " + expectedNodes + " and actual nodes " +_                    client.admin().cluster().prepareState().get().getState().nodes())__            }_        } catch (InterruptedException e) {_            throw new IllegalStateException(e)__        }_    };ensure,a,cluster,is,formed,with,all,published,nodes,but,do,so,by,using,the,client,of,the,specified,node;public,synchronized,void,validate,cluster,formed,string,via,node,set,discovery,node,expected,nodes,new,hash,set,for,node,and,client,node,and,client,nodes,values,expected,nodes,add,get,instance,from,node,cluster,service,class,node,and,client,node,local,node,logger,trace,validating,cluster,formed,via,expecting,via,node,expected,nodes,final,client,client,client,via,node,try,if,await,busy,discovery,nodes,discovery,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,if,discovery,nodes,get,size,expected,nodes,size,return,false,for,discovery,node,expected,node,expected,nodes,if,discovery,nodes,node,exists,expected,node,false,return,false,return,true,30,time,unit,seconds,false,throw,new,illegal,state,exception,cluster,failed,to,form,with,expected,nodes,expected,nodes,and,actual,nodes,client,admin,cluster,prepare,state,get,get,state,nodes,catch,interrupted,exception,e,throw,new,illegal,state,exception,e
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1524684173;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1525162917;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1527096592;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1527152864;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1529916081;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1531179852;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1531729807;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1533738061;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1534362961;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1535723122;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1536137328;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1536828374;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1537806831;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1538067637;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1539723533;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1539815831;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1540486836;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1541092382;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1541208696;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1542198296;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1544081506;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1544221624;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1544254415;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1544544737;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1544823664;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1545156327;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1545222364;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1545315633;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1547245564;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1547496886;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1547497728;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1547825802;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1548160032;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1548878955;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1549017271;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1549094096;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1549291259;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1549386680;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1549388544;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1549452878;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1549898480;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1550570542;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1550755200;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException;1550761203;Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the_filter.;public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(nc -> filter.test(nc.node.settings()))__        if (nodeAndClient != null) {_            logger.info("Closing filtered random node [{}] ", nodeAndClient.name)__            stopNodesAndClient(nodeAndClient)__        }_    };stops,a,random,node,in,the,cluster,that,applies,to,the,given,filter,or,non,if,the,non,of,the,nodes,applies,to,the,filter;public,synchronized,void,stop,random,node,final,predicate,settings,filter,throws,ioexception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,nc,filter,test,nc,node,settings,if,node,and,client,null,logger,info,closing,filtered,random,node,node,and,client,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void restartRandomDataNode(RestartCallback callback) throws Exception;1550755200;Restarts a random data node in the cluster and calls the callback during restart.;public synchronized void restartRandomDataNode(RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(InternalTestCluster.DATA_NODE_PREDICATE)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,synchronized,void,restart,random,data,node,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,internal,test,cluster,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartRandomDataNode(RestartCallback callback) throws Exception;1550761203;Restarts a random data node in the cluster and calls the callback during restart.;public synchronized void restartRandomDataNode(RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = getRandomNodeAndClient(InternalTestCluster.DATA_NODE_PREDICATE)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,random,data,node,in,the,cluster,and,calls,the,callback,during,restart;public,synchronized,void,restart,random,data,node,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,get,random,node,and,client,internal,test,cluster,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1524684173;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1525162917;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1527096592;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1527152864;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1529916081;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1531179852;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1531729807;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1533738061;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1534362961;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1535723122;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1536137328;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1536828374;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1537806831;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1538067637;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1539723533;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1539815831;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1540486836;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1541092382;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1541208696;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1542198296;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1544081506;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1544221624;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1544254415;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1544544737;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1544823664;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1545156327;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1545222364;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1545315633;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1547245564;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1547496886;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1547497728;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1547825802;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1548160032;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1548878955;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1549017271;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1549094096;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1549291259;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            ClusterState state = client.admin().cluster().prepareState().execute().actionGet().getState()__            return state.nodes().getMasterNode().getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,cluster,state,state,client,admin,cluster,prepare,state,execute,action,get,get,state,return,state,nodes,get,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1549386680;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            final DiscoveryNode masterNode = client.admin().cluster().prepareState().get().getState().nodes().getMasterNode()__            assertNotNull(masterNode)__            return masterNode.getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,final,discovery,node,master,node,client,admin,cluster,prepare,state,get,get,state,nodes,get,master,node,assert,not,null,master,node,return,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1549388544;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            final DiscoveryNode masterNode = client.admin().cluster().prepareState().get().getState().nodes().getMasterNode()__            assertNotNull(masterNode)__            return masterNode.getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,final,discovery,node,master,node,client,admin,cluster,prepare,state,get,get,state,nodes,get,master,node,assert,not,null,master,node,return,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1549452878;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            final DiscoveryNode masterNode = client.admin().cluster().prepareState().get().getState().nodes().getMasterNode()__            assertNotNull(masterNode)__            return masterNode.getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,final,discovery,node,master,node,client,admin,cluster,prepare,state,get,get,state,nodes,get,master,node,assert,not,null,master,node,return,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1549898480;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            final DiscoveryNode masterNode = client.admin().cluster().prepareState().get().getState().nodes().getMasterNode()__            assertNotNull(masterNode)__            return masterNode.getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,final,discovery,node,master,node,client,admin,cluster,prepare,state,get,get,state,nodes,get,master,node,assert,not,null,master,node,return,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1550570542;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            final DiscoveryNode masterNode = client.admin().cluster().prepareState().get().getState().nodes().getMasterNode()__            assertNotNull(masterNode)__            return masterNode.getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,final,discovery,node,master,node,client,admin,cluster,prepare,state,get,get,state,nodes,get,master,node,assert,not,null,master,node,return,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1550755200;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            final DiscoveryNode masterNode = client.admin().cluster().prepareState().get().getState().nodes().getMasterNode()__            assertNotNull(masterNode)__            return masterNode.getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,final,discovery,node,master,node,client,admin,cluster,prepare,state,get,get,state,nodes,get,master,node,assert,not,null,master,node,return,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> public String getMasterName(@Nullable String viaNode);1550761203;Returns the name of the current master node in the cluster and executes the request via the node specified_in the viaNode parameter. If viaNode isn't specified a random node will be picked to the send the request to.;public String getMasterName(@Nullable String viaNode) {_        try {_            Client client = viaNode != null ? client(viaNode) : client()__            final DiscoveryNode masterNode = client.admin().cluster().prepareState().get().getState().nodes().getMasterNode()__            assertNotNull(masterNode)__            return masterNode.getName()__        } catch (Exception e) {_            logger.warn("Can't fetch cluster state", e)__            throw new RuntimeException("Can't get master node " + e.getMessage(), e)__        }_    };returns,the,name,of,the,current,master,node,in,the,cluster,and,executes,the,request,via,the,node,specified,in,the,via,node,parameter,if,via,node,isn,t,specified,a,random,node,will,be,picked,to,the,send,the,request,to;public,string,get,master,name,nullable,string,via,node,try,client,client,via,node,null,client,via,node,client,final,discovery,node,master,node,client,admin,cluster,prepare,state,get,get,state,nodes,get,master,node,assert,not,null,master,node,return,master,node,get,name,catch,exception,e,logger,warn,can,t,fetch,cluster,state,e,throw,new,runtime,exception,can,t,get,master,node,e,get,message,e
InternalTestCluster -> NodeAndClient -> void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes,                                    Runnable onTransportServiceStarted) throws Exception;1536828374;rebuilds a new node object using the current node settings and starts it;void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes,_                                   Runnable onTransportServiceStarted) throws Exception {_            assert callback != null__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            if (clearDataIfNeeded) {_                clearDataIfNeeded(callback)__            }_            createNewNode(newSettings.build(), onTransportServiceStarted)__            _            resetClient()__        };rebuilds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,recreate,node,on,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,runnable,on,transport,service,started,throws,exception,assert,callback,null,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,if,clear,data,if,needed,clear,data,if,needed,callback,create,new,node,new,settings,build,on,transport,service,started,reset,client
InternalTestCluster -> NodeAndClient -> void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes,                                    Runnable onTransportServiceStarted) throws Exception;1537806831;rebuilds a new node object using the current node settings and starts it;void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes,_                                   Runnable onTransportServiceStarted) throws Exception {_            assert callback != null__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            if (clearDataIfNeeded) {_                clearDataIfNeeded(callback)__            }_            createNewNode(newSettings.build(), onTransportServiceStarted)__            _            resetClient()__        };rebuilds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,recreate,node,on,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,runnable,on,transport,service,started,throws,exception,assert,callback,null,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,if,clear,data,if,needed,clear,data,if,needed,callback,create,new,node,new,settings,build,on,transport,service,started,reset,client
InternalTestCluster -> NodeAndClient -> void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes,                                    Runnable onTransportServiceStarted) throws Exception;1538067637;rebuilds a new node object using the current node settings and starts it;void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes,_                                   Runnable onTransportServiceStarted) throws Exception {_            assert callback != null__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            if (clearDataIfNeeded) {_                clearDataIfNeeded(callback)__            }_            createNewNode(newSettings.build(), onTransportServiceStarted)__            _            resetClient()__        };rebuilds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,recreate,node,on,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,runnable,on,transport,service,started,throws,exception,assert,callback,null,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,if,clear,data,if,needed,clear,data,if,needed,callback,create,new,node,new,settings,build,on,transport,service,started,reset,client
InternalTestCluster -> NodeAndClient -> void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes,                                    Runnable onTransportServiceStarted) throws Exception;1539723533;rebuilds a new node object using the current node settings and starts it;void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes,_                                   Runnable onTransportServiceStarted) throws Exception {_            assert callback != null__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            if (clearDataIfNeeded) {_                clearDataIfNeeded(callback)__            }_            createNewNode(newSettings.build(), onTransportServiceStarted)__            _            resetClient()__        };rebuilds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,recreate,node,on,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,runnable,on,transport,service,started,throws,exception,assert,callback,null,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,if,clear,data,if,needed,clear,data,if,needed,callback,create,new,node,new,settings,build,on,transport,service,started,reset,client
InternalTestCluster -> NodeAndClient -> void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes,                                    Runnable onTransportServiceStarted) throws Exception;1539815831;rebuilds a new node object using the current node settings and starts it;void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes,_                                   Runnable onTransportServiceStarted) throws Exception {_            assert callback != null__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            if (clearDataIfNeeded) {_                clearDataIfNeeded(callback)__            }_            createNewNode(newSettings.build(), onTransportServiceStarted)__            _            resetClient()__        };rebuilds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,recreate,node,on,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,runnable,on,transport,service,started,throws,exception,assert,callback,null,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,if,clear,data,if,needed,clear,data,if,needed,callback,create,new,node,new,settings,build,on,transport,service,started,reset,client
InternalTestCluster -> NodeAndClient -> void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes,                                    Runnable onTransportServiceStarted) throws Exception;1540486836;rebuilds a new node object using the current node settings and starts it;void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes,_                                   Runnable onTransportServiceStarted) throws Exception {_            assert callback != null__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            if (clearDataIfNeeded) {_                clearDataIfNeeded(callback)__            }_            createNewNode(newSettings.build(), onTransportServiceStarted)__            _            resetClient()__        };rebuilds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,recreate,node,on,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,runnable,on,transport,service,started,throws,exception,assert,callback,null,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,if,clear,data,if,needed,clear,data,if,needed,callback,create,new,node,new,settings,build,on,transport,service,started,reset,client
InternalTestCluster -> NodeAndClient -> void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes,                                    Runnable onTransportServiceStarted) throws Exception;1541092382;rebuilds a new node object using the current node settings and starts it;void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes,_                                   Runnable onTransportServiceStarted) throws Exception {_            assert callback != null__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            if (clearDataIfNeeded) {_                clearDataIfNeeded(callback)__            }_            createNewNode(newSettings.build(), onTransportServiceStarted)__            _            resetClient()__        };rebuilds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,recreate,node,on,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,runnable,on,transport,service,started,throws,exception,assert,callback,null,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,if,clear,data,if,needed,clear,data,if,needed,callback,create,new,node,new,settings,build,on,transport,service,started,reset,client
InternalTestCluster -> NodeAndClient -> void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes,                                    Runnable onTransportServiceStarted) throws Exception;1541208696;rebuilds a new node object using the current node settings and starts it;void recreateNodeOnRestart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes,_                                   Runnable onTransportServiceStarted) throws Exception {_            assert callback != null__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            if (clearDataIfNeeded) {_                clearDataIfNeeded(callback)__            }_            createNewNode(newSettings.build(), onTransportServiceStarted)__            _            resetClient()__        };rebuilds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,recreate,node,on,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,runnable,on,transport,service,started,throws,exception,assert,callback,null,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,if,clear,data,if,needed,clear,data,if,needed,callback,create,new,node,new,settings,build,on,transport,service,started,reset,client
InternalTestCluster -> public synchronized Client nonMasterClient();1524684173;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1525162917;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1527096592;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1527152864;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1529916081;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1531179852;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1531729807;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1533738061;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1534362961;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1535723122;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1536137328;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1536828374;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1537806831;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1538067637;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1539723533;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1539815831;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1540486836;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1541092382;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1541208696;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1542198296;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1544081506;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1544221624;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1544254415;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1544544737;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1544823664;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1545156327;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1545222364;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1545315633;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1547245564;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1547496886;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1547497728;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1547825802;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1548160032;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1548878955;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1549017271;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1549094096;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1549291259;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1549386680;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1549388544;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1549452878;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1549898480;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized Client nonMasterClient();1550570542;Returns a node client to random node but not the master. This method will fail if no non-master client is available.;public synchronized Client nonMasterClient() {_        ensureOpen()__        NodeAndClient randomNodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()_ _        }_        Assert.fail("No non-master client found")__        return null_ _    };returns,a,node,client,to,random,node,but,not,the,master,this,method,will,fail,if,no,non,master,client,is,available;public,synchronized,client,non,master,client,ensure,open,node,and,client,random,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,random,node,and,client,null,return,random,node,and,client,node,client,assert,fail,no,non,master,client,found,return,null
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1524684173;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1525162917;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1527096592;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1527152864;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1529916081;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1531179852;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1531729807;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1533738061;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1534362961;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1535723122;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1536137328;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1536828374;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1537806831;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1538067637;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1539723533;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1539815831;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1540486836;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1541092382;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1541208696;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1542198296;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1544081506;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1544221624;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1544254415;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1544544737;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1544823664;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1545156327;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1545222364;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1545315633;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1547245564;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1547496886;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1547497728;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1547825802;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1548160032;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1548878955;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1549017271;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1549094096;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1549291259;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1549386680;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1549388544;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1549452878;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1549898480;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1550570542;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1550755200;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception;1550761203;Restarts a node and calls the callback during restart.;public synchronized void restartNode(String nodeName, RestartCallback callback) throws Exception {_        ensureOpen()__        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            restartNode(nodeAndClient, callback)__        }_    };restarts,a,node,and,calls,the,callback,during,restart;public,synchronized,void,restart,node,string,node,name,restart,callback,callback,throws,exception,ensure,open,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,restart,node,node,and,client,callback
InternalTestCluster -> public String startNode(Settings settings);1550755200;Starts a node with the given settings and returns its name.;public String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public String startNode(Settings settings);1550761203;Starts a node with the given settings and returns its name.;public String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized void validateClusterFormed();1524684173;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1525162917;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1527096592;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1527152864;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1529916081;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1531179852;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1531729807;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1533738061;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1534362961;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1535723122;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1536137328;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1536828374;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1537806831;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1538067637;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1539723533;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1539815831;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1540486836;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1541092382;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1541208696;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1542198296;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1544081506;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1544221624;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1544254415;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1544544737;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1544823664;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1545156327;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1545222364;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1545315633;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1547245564;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1547496886;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1547497728;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1547825802;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1548160032;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1548878955;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1549017271;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1549094096;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1549291259;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1549386680;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1549388544;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1549452878;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1549898480;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1550570542;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1550755200;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public synchronized void validateClusterFormed();1550761203;ensure a cluster is formed with all published nodes.;public synchronized void validateClusterFormed() {_        String name = randomFrom(random, getNodeNames())__        validateClusterFormed(name)__    };ensure,a,cluster,is,formed,with,all,published,nodes;public,synchronized,void,validate,cluster,formed,string,name,random,from,random,get,node,names,validate,cluster,formed,name
InternalTestCluster -> public void setBootstrapMasterNodeIndex(int bootstrapMasterNodeIndex);1549017271;Sets {@link #bootstrapMasterNodeIndex} to the given value, see {@link #bootstrapMasterNodeWithSpecifiedIndex(List)}_for the description of how this field is used._It's only possible to change {@link #bootstrapMasterNodeIndex} value if autoManageMinMasterNodes is false.;public void setBootstrapMasterNodeIndex(int bootstrapMasterNodeIndex) {_        if (autoManageMinMasterNodes && bootstrapMasterNodeIndex != -1) {_            throw new AssertionError("bootstrapMasterNodeIndex should be -1 if autoManageMinMasterNodes is true")__        }_        this.bootstrapMasterNodeIndex = bootstrapMasterNodeIndex__    };sets,link,bootstrap,master,node,index,to,the,given,value,see,link,bootstrap,master,node,with,specified,index,list,for,the,description,of,how,this,field,is,used,it,s,only,possible,to,change,link,bootstrap,master,node,index,value,if,auto,manage,min,master,nodes,is,false;public,void,set,bootstrap,master,node,index,int,bootstrap,master,node,index,if,auto,manage,min,master,nodes,bootstrap,master,node,index,1,throw,new,assertion,error,bootstrap,master,node,index,should,be,1,if,auto,manage,min,master,nodes,is,true,this,bootstrap,master,node,index,bootstrap,master,node,index
InternalTestCluster -> public void setBootstrapMasterNodeIndex(int bootstrapMasterNodeIndex);1549094096;Sets {@link #bootstrapMasterNodeIndex} to the given value, see {@link #bootstrapMasterNodeWithSpecifiedIndex(List)}_for the description of how this field is used._It's only possible to change {@link #bootstrapMasterNodeIndex} value if autoManageMinMasterNodes is false.;public void setBootstrapMasterNodeIndex(int bootstrapMasterNodeIndex) {_        if (autoManageMinMasterNodes && bootstrapMasterNodeIndex != -1) {_            throw new AssertionError("bootstrapMasterNodeIndex should be -1 if autoManageMinMasterNodes is true")__        }_        this.bootstrapMasterNodeIndex = bootstrapMasterNodeIndex__    };sets,link,bootstrap,master,node,index,to,the,given,value,see,link,bootstrap,master,node,with,specified,index,list,for,the,description,of,how,this,field,is,used,it,s,only,possible,to,change,link,bootstrap,master,node,index,value,if,auto,manage,min,master,nodes,is,false;public,void,set,bootstrap,master,node,index,int,bootstrap,master,node,index,if,auto,manage,min,master,nodes,bootstrap,master,node,index,1,throw,new,assertion,error,bootstrap,master,node,index,should,be,1,if,auto,manage,min,master,nodes,is,true,this,bootstrap,master,node,index,bootstrap,master,node,index
InternalTestCluster -> public void setBootstrapMasterNodeIndex(int bootstrapMasterNodeIndex);1549291259;Sets {@link #bootstrapMasterNodeIndex} to the given value, see {@link #bootstrapMasterNodeWithSpecifiedIndex(List)}_for the description of how this field is used._It's only possible to change {@link #bootstrapMasterNodeIndex} value if autoManageMinMasterNodes is false.;public void setBootstrapMasterNodeIndex(int bootstrapMasterNodeIndex) {_        if (autoManageMinMasterNodes && bootstrapMasterNodeIndex != -1) {_            throw new AssertionError("bootstrapMasterNodeIndex should be -1 if autoManageMinMasterNodes is true")__        }_        this.bootstrapMasterNodeIndex = bootstrapMasterNodeIndex__    };sets,link,bootstrap,master,node,index,to,the,given,value,see,link,bootstrap,master,node,with,specified,index,list,for,the,description,of,how,this,field,is,used,it,s,only,possible,to,change,link,bootstrap,master,node,index,value,if,auto,manage,min,master,nodes,is,false;public,void,set,bootstrap,master,node,index,int,bootstrap,master,node,index,if,auto,manage,min,master,nodes,bootstrap,master,node,index,1,throw,new,assertion,error,bootstrap,master,node,index,should,be,1,if,auto,manage,min,master,nodes,is,true,this,bootstrap,master,node,index,bootstrap,master,node,index
InternalTestCluster -> public void setBootstrapMasterNodeIndex(int bootstrapMasterNodeIndex);1549386680;Sets {@link #bootstrapMasterNodeIndex} to the given value, see {@link #bootstrapMasterNodeWithSpecifiedIndex(List)}_for the description of how this field is used._It's only possible to change {@link #bootstrapMasterNodeIndex} value if autoManageMinMasterNodes is false.;public void setBootstrapMasterNodeIndex(int bootstrapMasterNodeIndex) {_        if (autoManageMinMasterNodes && bootstrapMasterNodeIndex != -1) {_            throw new AssertionError("bootstrapMasterNodeIndex should be -1 if autoManageMinMasterNodes is true")__        }_        this.bootstrapMasterNodeIndex = bootstrapMasterNodeIndex__    };sets,link,bootstrap,master,node,index,to,the,given,value,see,link,bootstrap,master,node,with,specified,index,list,for,the,description,of,how,this,field,is,used,it,s,only,possible,to,change,link,bootstrap,master,node,index,value,if,auto,manage,min,master,nodes,is,false;public,void,set,bootstrap,master,node,index,int,bootstrap,master,node,index,if,auto,manage,min,master,nodes,bootstrap,master,node,index,1,throw,new,assertion,error,bootstrap,master,node,index,should,be,1,if,auto,manage,min,master,nodes,is,true,this,bootstrap,master,node,index,bootstrap,master,node,index
InternalTestCluster -> public void setBootstrapMasterNodeIndex(int bootstrapMasterNodeIndex);1549388544;Sets {@link #bootstrapMasterNodeIndex} to the given value, see {@link #bootstrapMasterNodeWithSpecifiedIndex(List)}_for the description of how this field is used._It's only possible to change {@link #bootstrapMasterNodeIndex} value if autoManageMinMasterNodes is false.;public void setBootstrapMasterNodeIndex(int bootstrapMasterNodeIndex) {_        if (autoManageMinMasterNodes && bootstrapMasterNodeIndex != -1) {_            throw new AssertionError("bootstrapMasterNodeIndex should be -1 if autoManageMinMasterNodes is true")__        }_        this.bootstrapMasterNodeIndex = bootstrapMasterNodeIndex__    };sets,link,bootstrap,master,node,index,to,the,given,value,see,link,bootstrap,master,node,with,specified,index,list,for,the,description,of,how,this,field,is,used,it,s,only,possible,to,change,link,bootstrap,master,node,index,value,if,auto,manage,min,master,nodes,is,false;public,void,set,bootstrap,master,node,index,int,bootstrap,master,node,index,if,auto,manage,min,master,nodes,bootstrap,master,node,index,1,throw,new,assertion,error,bootstrap,master,node,index,should,be,1,if,auto,manage,min,master,nodes,is,true,this,bootstrap,master,node,index,bootstrap,master,node,index
InternalTestCluster -> public void setBootstrapMasterNodeIndex(int bootstrapMasterNodeIndex);1549452878;Sets {@link #bootstrapMasterNodeIndex} to the given value, see {@link #bootstrapMasterNodeWithSpecifiedIndex(List)}_for the description of how this field is used._It's only possible to change {@link #bootstrapMasterNodeIndex} value if autoManageMinMasterNodes is false.;public void setBootstrapMasterNodeIndex(int bootstrapMasterNodeIndex) {_        if (autoManageMinMasterNodes && bootstrapMasterNodeIndex != -1) {_            throw new AssertionError("bootstrapMasterNodeIndex should be -1 if autoManageMinMasterNodes is true")__        }_        this.bootstrapMasterNodeIndex = bootstrapMasterNodeIndex__    };sets,link,bootstrap,master,node,index,to,the,given,value,see,link,bootstrap,master,node,with,specified,index,list,for,the,description,of,how,this,field,is,used,it,s,only,possible,to,change,link,bootstrap,master,node,index,value,if,auto,manage,min,master,nodes,is,false;public,void,set,bootstrap,master,node,index,int,bootstrap,master,node,index,if,auto,manage,min,master,nodes,bootstrap,master,node,index,1,throw,new,assertion,error,bootstrap,master,node,index,should,be,1,if,auto,manage,min,master,nodes,is,true,this,bootstrap,master,node,index,bootstrap,master,node,index
InternalTestCluster -> public void setBootstrapMasterNodeIndex(int bootstrapMasterNodeIndex);1549898480;Sets {@link #bootstrapMasterNodeIndex} to the given value, see {@link #bootstrapMasterNodeWithSpecifiedIndex(List)}_for the description of how this field is used._It's only possible to change {@link #bootstrapMasterNodeIndex} value if autoManageMinMasterNodes is false.;public void setBootstrapMasterNodeIndex(int bootstrapMasterNodeIndex) {_        if (autoManageMinMasterNodes && bootstrapMasterNodeIndex != -1) {_            throw new AssertionError("bootstrapMasterNodeIndex should be -1 if autoManageMinMasterNodes is true")__        }_        this.bootstrapMasterNodeIndex = bootstrapMasterNodeIndex__    };sets,link,bootstrap,master,node,index,to,the,given,value,see,link,bootstrap,master,node,with,specified,index,list,for,the,description,of,how,this,field,is,used,it,s,only,possible,to,change,link,bootstrap,master,node,index,value,if,auto,manage,min,master,nodes,is,false;public,void,set,bootstrap,master,node,index,int,bootstrap,master,node,index,if,auto,manage,min,master,nodes,bootstrap,master,node,index,1,throw,new,assertion,error,bootstrap,master,node,index,should,be,1,if,auto,manage,min,master,nodes,is,true,this,bootstrap,master,node,index,bootstrap,master,node,index
InternalTestCluster -> public void setBootstrapMasterNodeIndex(int bootstrapMasterNodeIndex);1550570542;Sets {@link #bootstrapMasterNodeIndex} to the given value, see {@link #bootstrapMasterNodeWithSpecifiedIndex(List)}_for the description of how this field is used._It's only possible to change {@link #bootstrapMasterNodeIndex} value if autoManageMinMasterNodes is false.;public void setBootstrapMasterNodeIndex(int bootstrapMasterNodeIndex) {_        if (autoManageMinMasterNodes && bootstrapMasterNodeIndex != -1) {_            throw new AssertionError("bootstrapMasterNodeIndex should be -1 if autoManageMinMasterNodes is true")__        }_        this.bootstrapMasterNodeIndex = bootstrapMasterNodeIndex__    };sets,link,bootstrap,master,node,index,to,the,given,value,see,link,bootstrap,master,node,with,specified,index,list,for,the,description,of,how,this,field,is,used,it,s,only,possible,to,change,link,bootstrap,master,node,index,value,if,auto,manage,min,master,nodes,is,false;public,void,set,bootstrap,master,node,index,int,bootstrap,master,node,index,if,auto,manage,min,master,nodes,bootstrap,master,node,index,1,throw,new,assertion,error,bootstrap,master,node,index,should,be,1,if,auto,manage,min,master,nodes,is,true,this,bootstrap,master,node,index,bootstrap,master,node,index
InternalTestCluster -> public void setBootstrapMasterNodeIndex(int bootstrapMasterNodeIndex);1550755200;Sets {@link #bootstrapMasterNodeIndex} to the given value, see {@link #bootstrapMasterNodeWithSpecifiedIndex(List)}_for the description of how this field is used._It's only possible to change {@link #bootstrapMasterNodeIndex} value if autoManageMinMasterNodes is false.;public void setBootstrapMasterNodeIndex(int bootstrapMasterNodeIndex) {_        if (autoManageMinMasterNodes && bootstrapMasterNodeIndex != -1) {_            throw new AssertionError("bootstrapMasterNodeIndex should be -1 if autoManageMinMasterNodes is true")__        }_        this.bootstrapMasterNodeIndex = bootstrapMasterNodeIndex__    };sets,link,bootstrap,master,node,index,to,the,given,value,see,link,bootstrap,master,node,with,specified,index,list,for,the,description,of,how,this,field,is,used,it,s,only,possible,to,change,link,bootstrap,master,node,index,value,if,auto,manage,min,master,nodes,is,false;public,void,set,bootstrap,master,node,index,int,bootstrap,master,node,index,if,auto,manage,min,master,nodes,bootstrap,master,node,index,1,throw,new,assertion,error,bootstrap,master,node,index,should,be,1,if,auto,manage,min,master,nodes,is,true,this,bootstrap,master,node,index,bootstrap,master,node,index
InternalTestCluster -> public void setBootstrapMasterNodeIndex(int bootstrapMasterNodeIndex);1550761203;Sets {@link #bootstrapMasterNodeIndex} to the given value, see {@link #bootstrapMasterNodeWithSpecifiedIndex(List)}_for the description of how this field is used._It's only possible to change {@link #bootstrapMasterNodeIndex} value if autoManageMinMasterNodes is false.;public void setBootstrapMasterNodeIndex(int bootstrapMasterNodeIndex) {_        if (autoManageMinMasterNodes && bootstrapMasterNodeIndex != -1) {_            throw new AssertionError("bootstrapMasterNodeIndex should be -1 if autoManageMinMasterNodes is true")__        }_        this.bootstrapMasterNodeIndex = bootstrapMasterNodeIndex__    };sets,link,bootstrap,master,node,index,to,the,given,value,see,link,bootstrap,master,node,with,specified,index,list,for,the,description,of,how,this,field,is,used,it,s,only,possible,to,change,link,bootstrap,master,node,index,value,if,auto,manage,min,master,nodes,is,false;public,void,set,bootstrap,master,node,index,int,bootstrap,master,node,index,if,auto,manage,min,master,nodes,bootstrap,master,node,index,1,throw,new,assertion,error,bootstrap,master,node,index,should,be,1,if,auto,manage,min,master,nodes,is,true,this,bootstrap,master,node,index,bootstrap,master,node,index
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, long seed, Settings settings,                                     boolean reuseExisting, int defaultMinMasterNodes);1524684173;builds a new node__@param nodeId                the node internal id (see {@link NodeAndClient#nodeAndClientId()}_@param seed                  the node's random seed_@param settings              the settings to use_@param reuseExisting         if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(int nodeId, long seed, Settings settings,_                                    boolean reuseExisting, int defaultMinMasterNodes) {_        assert Thread.holdsLock(this)__        ensureOpen()__        settings = getSettings(nodeId, seed, settings)__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = buildNodeName(nodeId, settings)__        if (reuseExisting && nodes.containsKey(name)) {_            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                "node name [" + name + "] already exists but not allowed to use it"__        }_        Settings.Builder finalSettings = Settings.builder()_            .put(Environment.PATH_HOME_SETTING.getKey(), baseDir) _            .put(settings)_            .put("node.name", name)_            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), seed)___        final boolean usingSingleNodeDiscovery = DiscoveryModule.DISCOVERY_TYPE_SETTING.get(finalSettings.build()).equals("single-node")__        if (!usingSingleNodeDiscovery && autoManageMinMasterNodes) {_            assert finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null :_                "min master nodes may not be set when auto managed"__            assert finalSettings.get(INITIAL_STATE_TIMEOUT_SETTING.getKey()) == null :_                "automatically managing min master nodes require nodes to complete a join cycle" +_                    " when starting"__            finalSettings_                _                .put(ZenDiscovery.MASTER_ELECTION_WAIT_FOR_JOINS_TIMEOUT_SETTING.getKey(), "5s")_                .put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), defaultMinMasterNodes)__        } else if (!usingSingleNodeDiscovery && finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null) {_            throw new IllegalArgumentException(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey() + " must be configured")__        }_        SecureSettings secureSettings = finalSettings.getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(finalSettings.build(), plugins, nodeConfigurationSource.nodeConfigPath(nodeId))__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, nodeId)__    };builds,a,new,node,param,node,id,the,node,internal,id,see,link,node,and,client,node,and,client,id,param,seed,the,node,s,random,seed,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,int,node,id,long,seed,settings,settings,boolean,reuse,existing,int,default,min,master,nodes,assert,thread,holds,lock,this,ensure,open,settings,get,settings,node,id,seed,settings,collection,class,extends,plugin,plugins,get,plugins,string,name,build,node,name,node,id,settings,if,reuse,existing,nodes,contains,key,name,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,settings,builder,final,settings,settings,builder,put,environment,get,key,base,dir,put,settings,put,node,name,name,put,node,environment,get,key,seed,final,boolean,using,single,node,discovery,discovery,module,get,final,settings,build,equals,single,node,if,using,single,node,discovery,auto,manage,min,master,nodes,assert,final,settings,get,get,key,null,min,master,nodes,may,not,be,set,when,auto,managed,assert,final,settings,get,get,key,null,automatically,managing,min,master,nodes,require,nodes,to,complete,a,join,cycle,when,starting,final,settings,put,zen,discovery,get,key,5s,put,get,key,default,min,master,nodes,else,if,using,single,node,discovery,final,settings,get,get,key,null,throw,new,illegal,argument,exception,get,key,must,be,configured,secure,settings,secure,settings,final,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,final,settings,build,plugins,node,configuration,source,node,config,path,node,id,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, long seed, Settings settings,                                     boolean reuseExisting, int defaultMinMasterNodes);1525162917;builds a new node__@param nodeId                the node internal id (see {@link NodeAndClient#nodeAndClientId()}_@param seed                  the node's random seed_@param settings              the settings to use_@param reuseExisting         if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(int nodeId, long seed, Settings settings,_                                    boolean reuseExisting, int defaultMinMasterNodes) {_        assert Thread.holdsLock(this)__        ensureOpen()__        settings = getSettings(nodeId, seed, settings)__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = buildNodeName(nodeId, settings)__        if (reuseExisting && nodes.containsKey(name)) {_            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                "node name [" + name + "] already exists but not allowed to use it"__        }_        Settings.Builder finalSettings = Settings.builder()_            .put(Environment.PATH_HOME_SETTING.getKey(), baseDir) _            .put(settings)_            .put("node.name", name)_            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), seed)___        final boolean usingSingleNodeDiscovery = DiscoveryModule.DISCOVERY_TYPE_SETTING.get(finalSettings.build()).equals("single-node")__        if (!usingSingleNodeDiscovery && autoManageMinMasterNodes) {_            assert finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null :_                "min master nodes may not be set when auto managed"__            assert finalSettings.get(INITIAL_STATE_TIMEOUT_SETTING.getKey()) == null :_                "automatically managing min master nodes require nodes to complete a join cycle" +_                    " when starting"__            finalSettings_                _                .put(ZenDiscovery.MASTER_ELECTION_WAIT_FOR_JOINS_TIMEOUT_SETTING.getKey(), "5s")_                .put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), defaultMinMasterNodes)__        } else if (!usingSingleNodeDiscovery && finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null) {_            throw new IllegalArgumentException(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey() + " must be configured")__        }_        SecureSettings secureSettings = finalSettings.getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(finalSettings.build(), plugins, nodeConfigurationSource.nodeConfigPath(nodeId))__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, nodeId)__    };builds,a,new,node,param,node,id,the,node,internal,id,see,link,node,and,client,node,and,client,id,param,seed,the,node,s,random,seed,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,int,node,id,long,seed,settings,settings,boolean,reuse,existing,int,default,min,master,nodes,assert,thread,holds,lock,this,ensure,open,settings,get,settings,node,id,seed,settings,collection,class,extends,plugin,plugins,get,plugins,string,name,build,node,name,node,id,settings,if,reuse,existing,nodes,contains,key,name,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,settings,builder,final,settings,settings,builder,put,environment,get,key,base,dir,put,settings,put,node,name,name,put,node,environment,get,key,seed,final,boolean,using,single,node,discovery,discovery,module,get,final,settings,build,equals,single,node,if,using,single,node,discovery,auto,manage,min,master,nodes,assert,final,settings,get,get,key,null,min,master,nodes,may,not,be,set,when,auto,managed,assert,final,settings,get,get,key,null,automatically,managing,min,master,nodes,require,nodes,to,complete,a,join,cycle,when,starting,final,settings,put,zen,discovery,get,key,5s,put,get,key,default,min,master,nodes,else,if,using,single,node,discovery,final,settings,get,get,key,null,throw,new,illegal,argument,exception,get,key,must,be,configured,secure,settings,secure,settings,final,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,final,settings,build,plugins,node,configuration,source,node,config,path,node,id,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, long seed, Settings settings,                                     boolean reuseExisting, int defaultMinMasterNodes);1527096592;builds a new node__@param nodeId                the node internal id (see {@link NodeAndClient#nodeAndClientId()}_@param seed                  the node's random seed_@param settings              the settings to use_@param reuseExisting         if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(int nodeId, long seed, Settings settings,_                                    boolean reuseExisting, int defaultMinMasterNodes) {_        assert Thread.holdsLock(this)__        ensureOpen()__        settings = getSettings(nodeId, seed, settings)__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = buildNodeName(nodeId, settings)__        if (reuseExisting && nodes.containsKey(name)) {_            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                "node name [" + name + "] already exists but not allowed to use it"__        }_        Settings.Builder finalSettings = Settings.builder()_            .put(Environment.PATH_HOME_SETTING.getKey(), baseDir) _            .put(settings)_            .put("node.name", name)_            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), seed)___        final boolean usingSingleNodeDiscovery = DiscoveryModule.DISCOVERY_TYPE_SETTING.get(finalSettings.build()).equals("single-node")__        if (!usingSingleNodeDiscovery && autoManageMinMasterNodes) {_            assert finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null :_                "min master nodes may not be set when auto managed"__            assert finalSettings.get(INITIAL_STATE_TIMEOUT_SETTING.getKey()) == null :_                "automatically managing min master nodes require nodes to complete a join cycle" +_                    " when starting"__            finalSettings_                _                .put(ZenDiscovery.MASTER_ELECTION_WAIT_FOR_JOINS_TIMEOUT_SETTING.getKey(), "5s")_                .put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), defaultMinMasterNodes)__        } else if (!usingSingleNodeDiscovery && finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null) {_            throw new IllegalArgumentException(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey() + " must be configured")__        }_        SecureSettings secureSettings = finalSettings.getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(finalSettings.build(), plugins, nodeConfigurationSource.nodeConfigPath(nodeId))__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, nodeId)__    };builds,a,new,node,param,node,id,the,node,internal,id,see,link,node,and,client,node,and,client,id,param,seed,the,node,s,random,seed,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,int,node,id,long,seed,settings,settings,boolean,reuse,existing,int,default,min,master,nodes,assert,thread,holds,lock,this,ensure,open,settings,get,settings,node,id,seed,settings,collection,class,extends,plugin,plugins,get,plugins,string,name,build,node,name,node,id,settings,if,reuse,existing,nodes,contains,key,name,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,settings,builder,final,settings,settings,builder,put,environment,get,key,base,dir,put,settings,put,node,name,name,put,node,environment,get,key,seed,final,boolean,using,single,node,discovery,discovery,module,get,final,settings,build,equals,single,node,if,using,single,node,discovery,auto,manage,min,master,nodes,assert,final,settings,get,get,key,null,min,master,nodes,may,not,be,set,when,auto,managed,assert,final,settings,get,get,key,null,automatically,managing,min,master,nodes,require,nodes,to,complete,a,join,cycle,when,starting,final,settings,put,zen,discovery,get,key,5s,put,get,key,default,min,master,nodes,else,if,using,single,node,discovery,final,settings,get,get,key,null,throw,new,illegal,argument,exception,get,key,must,be,configured,secure,settings,secure,settings,final,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,final,settings,build,plugins,node,configuration,source,node,config,path,node,id,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, long seed, Settings settings,                                     boolean reuseExisting, int defaultMinMasterNodes);1527152864;builds a new node__@param nodeId                the node internal id (see {@link NodeAndClient#nodeAndClientId()}_@param seed                  the node's random seed_@param settings              the settings to use_@param reuseExisting         if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(int nodeId, long seed, Settings settings,_                                    boolean reuseExisting, int defaultMinMasterNodes) {_        assert Thread.holdsLock(this)__        ensureOpen()__        settings = getSettings(nodeId, seed, settings)__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = buildNodeName(nodeId, settings)__        if (reuseExisting && nodes.containsKey(name)) {_            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                "node name [" + name + "] already exists but not allowed to use it"__        }_        Settings.Builder finalSettings = Settings.builder()_            .put(Environment.PATH_HOME_SETTING.getKey(), baseDir) _            .put(settings)_            .put("node.name", name)_            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), seed)___        final boolean usingSingleNodeDiscovery = DiscoveryModule.DISCOVERY_TYPE_SETTING.get(finalSettings.build()).equals("single-node")__        if (!usingSingleNodeDiscovery && autoManageMinMasterNodes) {_            assert finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null :_                "min master nodes may not be set when auto managed"__            assert finalSettings.get(INITIAL_STATE_TIMEOUT_SETTING.getKey()) == null :_                "automatically managing min master nodes require nodes to complete a join cycle" +_                    " when starting"__            finalSettings_                _                .put(ZenDiscovery.MASTER_ELECTION_WAIT_FOR_JOINS_TIMEOUT_SETTING.getKey(), "5s")_                .put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), defaultMinMasterNodes)__        } else if (!usingSingleNodeDiscovery && finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null) {_            throw new IllegalArgumentException(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey() + " must be configured")__        }_        SecureSettings secureSettings = finalSettings.getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(finalSettings.build(), plugins, nodeConfigurationSource.nodeConfigPath(nodeId))__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, nodeId)__    };builds,a,new,node,param,node,id,the,node,internal,id,see,link,node,and,client,node,and,client,id,param,seed,the,node,s,random,seed,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,int,node,id,long,seed,settings,settings,boolean,reuse,existing,int,default,min,master,nodes,assert,thread,holds,lock,this,ensure,open,settings,get,settings,node,id,seed,settings,collection,class,extends,plugin,plugins,get,plugins,string,name,build,node,name,node,id,settings,if,reuse,existing,nodes,contains,key,name,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,settings,builder,final,settings,settings,builder,put,environment,get,key,base,dir,put,settings,put,node,name,name,put,node,environment,get,key,seed,final,boolean,using,single,node,discovery,discovery,module,get,final,settings,build,equals,single,node,if,using,single,node,discovery,auto,manage,min,master,nodes,assert,final,settings,get,get,key,null,min,master,nodes,may,not,be,set,when,auto,managed,assert,final,settings,get,get,key,null,automatically,managing,min,master,nodes,require,nodes,to,complete,a,join,cycle,when,starting,final,settings,put,zen,discovery,get,key,5s,put,get,key,default,min,master,nodes,else,if,using,single,node,discovery,final,settings,get,get,key,null,throw,new,illegal,argument,exception,get,key,must,be,configured,secure,settings,secure,settings,final,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,final,settings,build,plugins,node,configuration,source,node,config,path,node,id,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, long seed, Settings settings,                                     boolean reuseExisting, int defaultMinMasterNodes);1529916081;builds a new node__@param nodeId                the node internal id (see {@link NodeAndClient#nodeAndClientId()}_@param seed                  the node's random seed_@param settings              the settings to use_@param reuseExisting         if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(int nodeId, long seed, Settings settings,_                                    boolean reuseExisting, int defaultMinMasterNodes) {_        assert Thread.holdsLock(this)__        ensureOpen()__        settings = getSettings(nodeId, seed, settings)__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = buildNodeName(nodeId, settings)__        if (reuseExisting && nodes.containsKey(name)) {_            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                "node name [" + name + "] already exists but not allowed to use it"__        }_        Settings.Builder finalSettings = Settings.builder()_            .put(Environment.PATH_HOME_SETTING.getKey(), baseDir) _            .put(settings)_            .put("node.name", name)_            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), seed)___        final boolean usingSingleNodeDiscovery = DiscoveryModule.DISCOVERY_TYPE_SETTING.get(finalSettings.build()).equals("single-node")__        if (!usingSingleNodeDiscovery && autoManageMinMasterNodes) {_            assert finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null :_                "min master nodes may not be set when auto managed"__            assert finalSettings.get(INITIAL_STATE_TIMEOUT_SETTING.getKey()) == null :_                "automatically managing min master nodes require nodes to complete a join cycle" +_                    " when starting"__            finalSettings_                _                .put(ZenDiscovery.MASTER_ELECTION_WAIT_FOR_JOINS_TIMEOUT_SETTING.getKey(), "5s")_                .put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), defaultMinMasterNodes)__        } else if (!usingSingleNodeDiscovery && finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null) {_            throw new IllegalArgumentException(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey() + " must be configured")__        }_        SecureSettings secureSettings = finalSettings.getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(finalSettings.build(), plugins, nodeConfigurationSource.nodeConfigPath(nodeId))__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, nodeId)__    };builds,a,new,node,param,node,id,the,node,internal,id,see,link,node,and,client,node,and,client,id,param,seed,the,node,s,random,seed,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,int,node,id,long,seed,settings,settings,boolean,reuse,existing,int,default,min,master,nodes,assert,thread,holds,lock,this,ensure,open,settings,get,settings,node,id,seed,settings,collection,class,extends,plugin,plugins,get,plugins,string,name,build,node,name,node,id,settings,if,reuse,existing,nodes,contains,key,name,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,settings,builder,final,settings,settings,builder,put,environment,get,key,base,dir,put,settings,put,node,name,name,put,node,environment,get,key,seed,final,boolean,using,single,node,discovery,discovery,module,get,final,settings,build,equals,single,node,if,using,single,node,discovery,auto,manage,min,master,nodes,assert,final,settings,get,get,key,null,min,master,nodes,may,not,be,set,when,auto,managed,assert,final,settings,get,get,key,null,automatically,managing,min,master,nodes,require,nodes,to,complete,a,join,cycle,when,starting,final,settings,put,zen,discovery,get,key,5s,put,get,key,default,min,master,nodes,else,if,using,single,node,discovery,final,settings,get,get,key,null,throw,new,illegal,argument,exception,get,key,must,be,configured,secure,settings,secure,settings,final,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,final,settings,build,plugins,node,configuration,source,node,config,path,node,id,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, long seed, Settings settings,                                     boolean reuseExisting, int defaultMinMasterNodes);1531179852;builds a new node__@param nodeId                the node internal id (see {@link NodeAndClient#nodeAndClientId()}_@param seed                  the node's random seed_@param settings              the settings to use_@param reuseExisting         if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(int nodeId, long seed, Settings settings,_                                    boolean reuseExisting, int defaultMinMasterNodes) {_        assert Thread.holdsLock(this)__        ensureOpen()__        settings = getSettings(nodeId, seed, settings)__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = buildNodeName(nodeId, settings)__        if (reuseExisting && nodes.containsKey(name)) {_            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                "node name [" + name + "] already exists but not allowed to use it"__        }_        Settings.Builder finalSettings = Settings.builder()_            .put(Environment.PATH_HOME_SETTING.getKey(), baseDir) _            .put(settings)_            .put("node.name", name)_            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), seed)___        final boolean usingSingleNodeDiscovery = DiscoveryModule.DISCOVERY_TYPE_SETTING.get(finalSettings.build()).equals("single-node")__        if (!usingSingleNodeDiscovery && autoManageMinMasterNodes) {_            assert finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null :_                "min master nodes may not be set when auto managed"__            assert finalSettings.get(INITIAL_STATE_TIMEOUT_SETTING.getKey()) == null :_                "automatically managing min master nodes require nodes to complete a join cycle" +_                    " when starting"__            finalSettings_                _                .put(ZenDiscovery.MASTER_ELECTION_WAIT_FOR_JOINS_TIMEOUT_SETTING.getKey(), "5s")_                .put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), defaultMinMasterNodes)__        } else if (!usingSingleNodeDiscovery && finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null) {_            throw new IllegalArgumentException(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey() + " must be configured")__        }_        SecureSettings secureSettings = finalSettings.getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(finalSettings.build(), plugins, nodeConfigurationSource.nodeConfigPath(nodeId))__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, nodeId)__    };builds,a,new,node,param,node,id,the,node,internal,id,see,link,node,and,client,node,and,client,id,param,seed,the,node,s,random,seed,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,int,node,id,long,seed,settings,settings,boolean,reuse,existing,int,default,min,master,nodes,assert,thread,holds,lock,this,ensure,open,settings,get,settings,node,id,seed,settings,collection,class,extends,plugin,plugins,get,plugins,string,name,build,node,name,node,id,settings,if,reuse,existing,nodes,contains,key,name,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,settings,builder,final,settings,settings,builder,put,environment,get,key,base,dir,put,settings,put,node,name,name,put,node,environment,get,key,seed,final,boolean,using,single,node,discovery,discovery,module,get,final,settings,build,equals,single,node,if,using,single,node,discovery,auto,manage,min,master,nodes,assert,final,settings,get,get,key,null,min,master,nodes,may,not,be,set,when,auto,managed,assert,final,settings,get,get,key,null,automatically,managing,min,master,nodes,require,nodes,to,complete,a,join,cycle,when,starting,final,settings,put,zen,discovery,get,key,5s,put,get,key,default,min,master,nodes,else,if,using,single,node,discovery,final,settings,get,get,key,null,throw,new,illegal,argument,exception,get,key,must,be,configured,secure,settings,secure,settings,final,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,final,settings,build,plugins,node,configuration,source,node,config,path,node,id,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, long seed, Settings settings,                                     boolean reuseExisting, int defaultMinMasterNodes);1531729807;builds a new node__@param nodeId                the node internal id (see {@link NodeAndClient#nodeAndClientId()}_@param seed                  the node's random seed_@param settings              the settings to use_@param reuseExisting         if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(int nodeId, long seed, Settings settings,_                                    boolean reuseExisting, int defaultMinMasterNodes) {_        assert Thread.holdsLock(this)__        ensureOpen()__        settings = getSettings(nodeId, seed, settings)__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = buildNodeName(nodeId, settings)__        if (reuseExisting && nodes.containsKey(name)) {_            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                "node name [" + name + "] already exists but not allowed to use it"__        }_        Settings.Builder finalSettings = Settings.builder()_            .put(Environment.PATH_HOME_SETTING.getKey(), baseDir) _            .put(settings)_            .put("node.name", name)_            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), seed)___        final boolean usingSingleNodeDiscovery = DiscoveryModule.DISCOVERY_TYPE_SETTING.get(finalSettings.build()).equals("single-node")__        if (!usingSingleNodeDiscovery && autoManageMinMasterNodes) {_            assert finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null :_                "min master nodes may not be set when auto managed"__            assert finalSettings.get(INITIAL_STATE_TIMEOUT_SETTING.getKey()) == null :_                "automatically managing min master nodes require nodes to complete a join cycle" +_                    " when starting"__            finalSettings_                _                .put(ZenDiscovery.MASTER_ELECTION_WAIT_FOR_JOINS_TIMEOUT_SETTING.getKey(), "5s")_                .put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), defaultMinMasterNodes)__        } else if (!usingSingleNodeDiscovery && finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null) {_            throw new IllegalArgumentException(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey() + " must be configured")__        }_        SecureSettings secureSettings = finalSettings.getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(finalSettings.build(), plugins, nodeConfigurationSource.nodeConfigPath(nodeId))__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, nodeId)__    };builds,a,new,node,param,node,id,the,node,internal,id,see,link,node,and,client,node,and,client,id,param,seed,the,node,s,random,seed,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,int,node,id,long,seed,settings,settings,boolean,reuse,existing,int,default,min,master,nodes,assert,thread,holds,lock,this,ensure,open,settings,get,settings,node,id,seed,settings,collection,class,extends,plugin,plugins,get,plugins,string,name,build,node,name,node,id,settings,if,reuse,existing,nodes,contains,key,name,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,settings,builder,final,settings,settings,builder,put,environment,get,key,base,dir,put,settings,put,node,name,name,put,node,environment,get,key,seed,final,boolean,using,single,node,discovery,discovery,module,get,final,settings,build,equals,single,node,if,using,single,node,discovery,auto,manage,min,master,nodes,assert,final,settings,get,get,key,null,min,master,nodes,may,not,be,set,when,auto,managed,assert,final,settings,get,get,key,null,automatically,managing,min,master,nodes,require,nodes,to,complete,a,join,cycle,when,starting,final,settings,put,zen,discovery,get,key,5s,put,get,key,default,min,master,nodes,else,if,using,single,node,discovery,final,settings,get,get,key,null,throw,new,illegal,argument,exception,get,key,must,be,configured,secure,settings,secure,settings,final,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,final,settings,build,plugins,node,configuration,source,node,config,path,node,id,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, long seed, Settings settings,                                     boolean reuseExisting, int defaultMinMasterNodes);1533738061;builds a new node__@param nodeId                the node internal id (see {@link NodeAndClient#nodeAndClientId()}_@param seed                  the node's random seed_@param settings              the settings to use_@param reuseExisting         if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(int nodeId, long seed, Settings settings,_                                    boolean reuseExisting, int defaultMinMasterNodes) {_        assert Thread.holdsLock(this)__        ensureOpen()__        settings = getSettings(nodeId, seed, settings)__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = buildNodeName(nodeId, settings)__        if (reuseExisting && nodes.containsKey(name)) {_            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                "node name [" + name + "] already exists but not allowed to use it"__        }_        Settings.Builder finalSettings = Settings.builder()_            .put(Environment.PATH_HOME_SETTING.getKey(), baseDir) _            .put(settings)_            .put("node.name", name)_            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), seed)___        final boolean usingSingleNodeDiscovery = DiscoveryModule.DISCOVERY_TYPE_SETTING.get(finalSettings.build()).equals("single-node")__        if (!usingSingleNodeDiscovery && autoManageMinMasterNodes) {_            assert finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null :_                "min master nodes may not be set when auto managed"__            assert finalSettings.get(INITIAL_STATE_TIMEOUT_SETTING.getKey()) == null :_                "automatically managing min master nodes require nodes to complete a join cycle" +_                    " when starting"__            finalSettings_                _                .put(ZenDiscovery.MASTER_ELECTION_WAIT_FOR_JOINS_TIMEOUT_SETTING.getKey(), "5s")_                .put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), defaultMinMasterNodes)__        } else if (!usingSingleNodeDiscovery && finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null) {_            throw new IllegalArgumentException(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey() + " must be configured")__        }_        SecureSettings secureSettings = finalSettings.getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(finalSettings.build(), plugins, nodeConfigurationSource.nodeConfigPath(nodeId))__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, nodeId)__    };builds,a,new,node,param,node,id,the,node,internal,id,see,link,node,and,client,node,and,client,id,param,seed,the,node,s,random,seed,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,int,node,id,long,seed,settings,settings,boolean,reuse,existing,int,default,min,master,nodes,assert,thread,holds,lock,this,ensure,open,settings,get,settings,node,id,seed,settings,collection,class,extends,plugin,plugins,get,plugins,string,name,build,node,name,node,id,settings,if,reuse,existing,nodes,contains,key,name,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,settings,builder,final,settings,settings,builder,put,environment,get,key,base,dir,put,settings,put,node,name,name,put,node,environment,get,key,seed,final,boolean,using,single,node,discovery,discovery,module,get,final,settings,build,equals,single,node,if,using,single,node,discovery,auto,manage,min,master,nodes,assert,final,settings,get,get,key,null,min,master,nodes,may,not,be,set,when,auto,managed,assert,final,settings,get,get,key,null,automatically,managing,min,master,nodes,require,nodes,to,complete,a,join,cycle,when,starting,final,settings,put,zen,discovery,get,key,5s,put,get,key,default,min,master,nodes,else,if,using,single,node,discovery,final,settings,get,get,key,null,throw,new,illegal,argument,exception,get,key,must,be,configured,secure,settings,secure,settings,final,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,final,settings,build,plugins,node,configuration,source,node,config,path,node,id,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, long seed, Settings settings,                                     boolean reuseExisting, int defaultMinMasterNodes);1534362961;builds a new node__@param nodeId                the node internal id (see {@link NodeAndClient#nodeAndClientId()}_@param seed                  the node's random seed_@param settings              the settings to use_@param reuseExisting         if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(int nodeId, long seed, Settings settings,_                                    boolean reuseExisting, int defaultMinMasterNodes) {_        assert Thread.holdsLock(this)__        ensureOpen()__        settings = getSettings(nodeId, seed, settings)__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = buildNodeName(nodeId, settings)__        if (reuseExisting && nodes.containsKey(name)) {_            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                "node name [" + name + "] already exists but not allowed to use it"__        }_        Settings.Builder finalSettings = Settings.builder()_            .put(Environment.PATH_HOME_SETTING.getKey(), baseDir) _            .put(settings)_            .put("node.name", name)_            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), seed)___        final boolean usingSingleNodeDiscovery = DiscoveryModule.DISCOVERY_TYPE_SETTING.get(finalSettings.build()).equals("single-node")__        if (!usingSingleNodeDiscovery && autoManageMinMasterNodes) {_            assert finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null :_                "min master nodes may not be set when auto managed"__            assert finalSettings.get(INITIAL_STATE_TIMEOUT_SETTING.getKey()) == null :_                "automatically managing min master nodes require nodes to complete a join cycle" +_                    " when starting"__            finalSettings_                _                .put(ZenDiscovery.MASTER_ELECTION_WAIT_FOR_JOINS_TIMEOUT_SETTING.getKey(), "5s")_                .put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), defaultMinMasterNodes)__        } else if (!usingSingleNodeDiscovery && finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null) {_            throw new IllegalArgumentException(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey() + " must be configured")__        }_        SecureSettings secureSettings = finalSettings.getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(finalSettings.build(), plugins, nodeConfigurationSource.nodeConfigPath(nodeId))__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, nodeId)__    };builds,a,new,node,param,node,id,the,node,internal,id,see,link,node,and,client,node,and,client,id,param,seed,the,node,s,random,seed,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,int,node,id,long,seed,settings,settings,boolean,reuse,existing,int,default,min,master,nodes,assert,thread,holds,lock,this,ensure,open,settings,get,settings,node,id,seed,settings,collection,class,extends,plugin,plugins,get,plugins,string,name,build,node,name,node,id,settings,if,reuse,existing,nodes,contains,key,name,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,settings,builder,final,settings,settings,builder,put,environment,get,key,base,dir,put,settings,put,node,name,name,put,node,environment,get,key,seed,final,boolean,using,single,node,discovery,discovery,module,get,final,settings,build,equals,single,node,if,using,single,node,discovery,auto,manage,min,master,nodes,assert,final,settings,get,get,key,null,min,master,nodes,may,not,be,set,when,auto,managed,assert,final,settings,get,get,key,null,automatically,managing,min,master,nodes,require,nodes,to,complete,a,join,cycle,when,starting,final,settings,put,zen,discovery,get,key,5s,put,get,key,default,min,master,nodes,else,if,using,single,node,discovery,final,settings,get,get,key,null,throw,new,illegal,argument,exception,get,key,must,be,configured,secure,settings,secure,settings,final,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,final,settings,build,plugins,node,configuration,source,node,config,path,node,id,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, long seed, Settings settings,                                     boolean reuseExisting, int defaultMinMasterNodes);1535723122;builds a new node__@param nodeId                the node internal id (see {@link NodeAndClient#nodeAndClientId()}_@param seed                  the node's random seed_@param settings              the settings to use_@param reuseExisting         if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(int nodeId, long seed, Settings settings,_                                    boolean reuseExisting, int defaultMinMasterNodes) {_        assert Thread.holdsLock(this)__        ensureOpen()__        settings = getSettings(nodeId, seed, settings)__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = buildNodeName(nodeId, settings)__        if (reuseExisting && nodes.containsKey(name)) {_            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                "node name [" + name + "] already exists but not allowed to use it"__        }_        Settings.Builder finalSettings = Settings.builder()_            .put(Environment.PATH_HOME_SETTING.getKey(), baseDir) _            .put(settings)_            .put("node.name", name)_            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), seed)___        final boolean usingSingleNodeDiscovery = DiscoveryModule.DISCOVERY_TYPE_SETTING.get(finalSettings.build()).equals("single-node")__        if (!usingSingleNodeDiscovery && autoManageMinMasterNodes) {_            assert finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null :_                "min master nodes may not be set when auto managed"__            assert finalSettings.get(INITIAL_STATE_TIMEOUT_SETTING.getKey()) == null :_                "automatically managing min master nodes require nodes to complete a join cycle" +_                    " when starting"__            finalSettings_                _                .put(ZenDiscovery.MASTER_ELECTION_WAIT_FOR_JOINS_TIMEOUT_SETTING.getKey(), "5s")_                .put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), defaultMinMasterNodes)__        } else if (!usingSingleNodeDiscovery && finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null) {_            throw new IllegalArgumentException(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey() + " must be configured")__        }_        SecureSettings secureSettings = finalSettings.getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(finalSettings.build(), plugins, nodeConfigurationSource.nodeConfigPath(nodeId))__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, nodeId)__    };builds,a,new,node,param,node,id,the,node,internal,id,see,link,node,and,client,node,and,client,id,param,seed,the,node,s,random,seed,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,int,node,id,long,seed,settings,settings,boolean,reuse,existing,int,default,min,master,nodes,assert,thread,holds,lock,this,ensure,open,settings,get,settings,node,id,seed,settings,collection,class,extends,plugin,plugins,get,plugins,string,name,build,node,name,node,id,settings,if,reuse,existing,nodes,contains,key,name,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,settings,builder,final,settings,settings,builder,put,environment,get,key,base,dir,put,settings,put,node,name,name,put,node,environment,get,key,seed,final,boolean,using,single,node,discovery,discovery,module,get,final,settings,build,equals,single,node,if,using,single,node,discovery,auto,manage,min,master,nodes,assert,final,settings,get,get,key,null,min,master,nodes,may,not,be,set,when,auto,managed,assert,final,settings,get,get,key,null,automatically,managing,min,master,nodes,require,nodes,to,complete,a,join,cycle,when,starting,final,settings,put,zen,discovery,get,key,5s,put,get,key,default,min,master,nodes,else,if,using,single,node,discovery,final,settings,get,get,key,null,throw,new,illegal,argument,exception,get,key,must,be,configured,secure,settings,secure,settings,final,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,final,settings,build,plugins,node,configuration,source,node,config,path,node,id,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,node,id
InternalTestCluster -> private NodeAndClient buildNode(int nodeId, long seed, Settings settings,                                     boolean reuseExisting, int defaultMinMasterNodes);1536137328;builds a new node__@param nodeId                the node internal id (see {@link NodeAndClient#nodeAndClientId()}_@param seed                  the node's random seed_@param settings              the settings to use_@param reuseExisting         if a node with the same name is already part of {@link #nodes}, no new node will be built and_the method will return the existing one_@param defaultMinMasterNodes min_master_nodes value to use if min_master_nodes is auto managed;private NodeAndClient buildNode(int nodeId, long seed, Settings settings,_                                    boolean reuseExisting, int defaultMinMasterNodes) {_        assert Thread.holdsLock(this)__        ensureOpen()__        settings = getSettings(nodeId, seed, settings)__        Collection<Class<? extends Plugin>> plugins = getPlugins()__        String name = buildNodeName(nodeId, settings)__        if (reuseExisting && nodes.containsKey(name)) {_            return nodes.get(name)__        } else {_            assert reuseExisting == true || nodes.containsKey(name) == false :_                "node name [" + name + "] already exists but not allowed to use it"__        }_        Settings.Builder finalSettings = Settings.builder()_            .put(Environment.PATH_HOME_SETTING.getKey(), baseDir) _            .put(settings)_            .put("node.name", name)_            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), seed)___        final boolean usingSingleNodeDiscovery = DiscoveryModule.DISCOVERY_TYPE_SETTING.get(finalSettings.build()).equals("single-node")__        if (!usingSingleNodeDiscovery && autoManageMinMasterNodes) {_            assert finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null :_                "min master nodes may not be set when auto managed"__            assert finalSettings.get(INITIAL_STATE_TIMEOUT_SETTING.getKey()) == null :_                "automatically managing min master nodes require nodes to complete a join cycle" +_                    " when starting"__            finalSettings_                _                .put(ZenDiscovery.MASTER_ELECTION_WAIT_FOR_JOINS_TIMEOUT_SETTING.getKey(), "5s")_                .put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), defaultMinMasterNodes)__        } else if (!usingSingleNodeDiscovery && finalSettings.get(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey()) == null) {_            throw new IllegalArgumentException(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey() + " must be configured")__        }_        SecureSettings secureSettings = finalSettings.getSecureSettings()__        if (secureSettings instanceof MockSecureSettings) {_            _            secureSettings = ((MockSecureSettings) secureSettings).clone()__        }_        MockNode node = new MockNode(_                finalSettings.build(),_                plugins,_                nodeConfigurationSource.nodeConfigPath(nodeId),_                forbidPrivateIndexSettings)__        try {_            IOUtils.close(secureSettings)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }_        return new NodeAndClient(name, node, nodeId)__    };builds,a,new,node,param,node,id,the,node,internal,id,see,link,node,and,client,node,and,client,id,param,seed,the,node,s,random,seed,param,settings,the,settings,to,use,param,reuse,existing,if,a,node,with,the,same,name,is,already,part,of,link,nodes,no,new,node,will,be,built,and,the,method,will,return,the,existing,one,param,default,min,master,nodes,value,to,use,if,is,auto,managed;private,node,and,client,build,node,int,node,id,long,seed,settings,settings,boolean,reuse,existing,int,default,min,master,nodes,assert,thread,holds,lock,this,ensure,open,settings,get,settings,node,id,seed,settings,collection,class,extends,plugin,plugins,get,plugins,string,name,build,node,name,node,id,settings,if,reuse,existing,nodes,contains,key,name,return,nodes,get,name,else,assert,reuse,existing,true,nodes,contains,key,name,false,node,name,name,already,exists,but,not,allowed,to,use,it,settings,builder,final,settings,settings,builder,put,environment,get,key,base,dir,put,settings,put,node,name,name,put,node,environment,get,key,seed,final,boolean,using,single,node,discovery,discovery,module,get,final,settings,build,equals,single,node,if,using,single,node,discovery,auto,manage,min,master,nodes,assert,final,settings,get,get,key,null,min,master,nodes,may,not,be,set,when,auto,managed,assert,final,settings,get,get,key,null,automatically,managing,min,master,nodes,require,nodes,to,complete,a,join,cycle,when,starting,final,settings,put,zen,discovery,get,key,5s,put,get,key,default,min,master,nodes,else,if,using,single,node,discovery,final,settings,get,get,key,null,throw,new,illegal,argument,exception,get,key,must,be,configured,secure,settings,secure,settings,final,settings,get,secure,settings,if,secure,settings,instanceof,mock,secure,settings,secure,settings,mock,secure,settings,secure,settings,clone,mock,node,node,new,mock,node,final,settings,build,plugins,node,configuration,source,node,config,path,node,id,forbid,private,index,settings,try,ioutils,close,secure,settings,catch,ioexception,e,throw,new,unchecked,ioexception,e,return,new,node,and,client,name,node,node,id
InternalTestCluster -> public Client client(String nodeName);1550755200;Returns a node client to a given node.;public Client client(String nodeName) {_        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        throw new AssertionError("No node found with name: [" + nodeName + "]")__    };returns,a,node,client,to,a,given,node;public,client,client,string,node,name,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,throw,new,assertion,error,no,node,found,with,name,node,name
InternalTestCluster -> public Client client(String nodeName);1550761203;Returns a node client to a given node.;public Client client(String nodeName) {_        NodeAndClient nodeAndClient = nodes.get(nodeName)__        if (nodeAndClient != null) {_            return nodeAndClient.client(random)__        }_        throw new AssertionError("No node found with name: [" + nodeName + "]")__    };returns,a,node,client,to,a,given,node;public,client,client,string,node,name,node,and,client,node,and,client,nodes,get,node,name,if,node,and,client,null,return,node,and,client,client,random,throw,new,assertion,error,no,node,found,with,name,node,name
InternalTestCluster -> public Client smartClient();1550755200;Returns a "smart" node client to a random node in the cluster;public Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        throw new AssertionError("No smart client found")__    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,throw,new,assertion,error,no,smart,client,found
InternalTestCluster -> public Client smartClient();1550761203;Returns a "smart" node client to a random node in the cluster;public Client smartClient() {_        NodeAndClient randomNodeAndClient = getRandomNodeAndClient()__        if (randomNodeAndClient != null) {_            return randomNodeAndClient.nodeClient()__        }_        throw new AssertionError("No smart client found")__    };returns,a,smart,node,client,to,a,random,node,in,the,cluster;public,client,smart,client,node,and,client,random,node,and,client,get,random,node,and,client,if,random,node,and,client,null,return,random,node,and,client,node,client,throw,new,assertion,error,no,smart,client,found
InternalTestCluster -> public synchronized Client dataNodeClient();1524684173;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1525162917;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1527096592;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1527152864;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1529916081;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1531179852;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1531729807;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1533738061;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1534362961;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1535723122;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1536137328;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1536828374;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1537806831;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1538067637;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1539723533;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1539815831;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1540486836;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1541092382;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1541208696;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1542198296;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1544081506;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1544221624;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1544254415;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1544544737;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1544823664;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1545156327;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1545222364;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1545315633;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1547245564;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1547496886;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1547497728;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1547825802;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1548160032;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1548878955;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1549017271;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1549094096;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1549291259;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1549386680;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1549388544;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1549452878;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1549898480;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public synchronized Client dataNodeClient();1550570542;Returns a node client to a data node in the cluster._Note: use this with care tests should not rely on a certain nodes client.;public synchronized Client dataNodeClient() {_        ensureOpen()__        _        return getRandomNodeAndClient(new DataNodePredicate()).client(random)__    };returns,a,node,client,to,a,data,node,in,the,cluster,note,use,this,with,care,tests,should,not,rely,on,a,certain,nodes,client;public,synchronized,client,data,node,client,ensure,open,return,get,random,node,and,client,new,data,node,predicate,client,random
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeName);1524684173;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeName) {_        return new NodeNamePredicate(new HashSet<>(Arrays.asList(nodeName)))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,name,return,new,node,name,predicate,new,hash,set,arrays,as,list,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeName);1525162917;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeName) {_        return new NodeNamePredicate(new HashSet<>(Arrays.asList(nodeName)))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,name,return,new,node,name,predicate,new,hash,set,arrays,as,list,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeName);1527096592;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeName) {_        return new NodeNamePredicate(new HashSet<>(Arrays.asList(nodeName)))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,name,return,new,node,name,predicate,new,hash,set,arrays,as,list,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeName);1527152864;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeName) {_        return new NodeNamePredicate(new HashSet<>(Arrays.asList(nodeName)))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,name,return,new,node,name,predicate,new,hash,set,arrays,as,list,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeName);1529916081;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeName) {_        return new NodeNamePredicate(new HashSet<>(Arrays.asList(nodeName)))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,name,return,new,node,name,predicate,new,hash,set,arrays,as,list,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeName);1531179852;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeName) {_        return new NodeNamePredicate(new HashSet<>(Arrays.asList(nodeName)))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,name,return,new,node,name,predicate,new,hash,set,arrays,as,list,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeName);1531729807;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeName) {_        return new NodeNamePredicate(new HashSet<>(Arrays.asList(nodeName)))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,name,return,new,node,name,predicate,new,hash,set,arrays,as,list,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeName);1533738061;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeName) {_        return new NodeNamePredicate(new HashSet<>(Arrays.asList(nodeName)))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,name,return,new,node,name,predicate,new,hash,set,arrays,as,list,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeName);1534362961;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeName) {_        return new NodeNamePredicate(new HashSet<>(Arrays.asList(nodeName)))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,name,return,new,node,name,predicate,new,hash,set,arrays,as,list,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeName);1535723122;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeName) {_        return new NodeNamePredicate(new HashSet<>(Arrays.asList(nodeName)))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,name,return,new,node,name,predicate,new,hash,set,arrays,as,list,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeName);1536137328;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeName) {_        return new NodeNamePredicate(new HashSet<>(Arrays.asList(nodeName)))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,name,return,new,node,name,predicate,new,hash,set,arrays,as,list,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeName);1536828374;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeName) {_        return new NodeNamePredicate(new HashSet<>(Arrays.asList(nodeName)))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,name,return,new,node,name,predicate,new,hash,set,arrays,as,list,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeName);1537806831;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeName) {_        return new NodeNamePredicate(new HashSet<>(Arrays.asList(nodeName)))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,name,return,new,node,name,predicate,new,hash,set,arrays,as,list,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeName);1538067637;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeName) {_        return new NodeNamePredicate(new HashSet<>(Arrays.asList(nodeName)))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,name,return,new,node,name,predicate,new,hash,set,arrays,as,list,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeName);1539723533;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeName) {_        return new NodeNamePredicate(new HashSet<>(Arrays.asList(nodeName)))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,name,return,new,node,name,predicate,new,hash,set,arrays,as,list,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeName);1539815831;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeName) {_        return new NodeNamePredicate(new HashSet<>(Arrays.asList(nodeName)))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,name,return,new,node,name,predicate,new,hash,set,arrays,as,list,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeName);1540486836;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeName) {_        return new NodeNamePredicate(new HashSet<>(Arrays.asList(nodeName)))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,name,return,new,node,name,predicate,new,hash,set,arrays,as,list,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeName);1541092382;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeName) {_        return new NodeNamePredicate(new HashSet<>(Arrays.asList(nodeName)))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,name,return,new,node,name,predicate,new,hash,set,arrays,as,list,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeName);1541208696;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeName) {_        return new NodeNamePredicate(new HashSet<>(Arrays.asList(nodeName)))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,name,return,new,node,name,predicate,new,hash,set,arrays,as,list,node,name
InternalTestCluster -> public static Predicate<Settings> nameFilter(String... nodeName);1542198296;Returns a predicate that only accepts settings of nodes with one of the given names.;public static Predicate<Settings> nameFilter(String... nodeName) {_        return new NodeNamePredicate(new HashSet<>(Arrays.asList(nodeName)))__    };returns,a,predicate,that,only,accepts,settings,of,nodes,with,one,of,the,given,names;public,static,predicate,settings,name,filter,string,node,name,return,new,node,name,predicate,new,hash,set,arrays,as,list,node,name
InternalTestCluster -> NodeAndClient -> void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception;1524684173;closes the current node if not already closed, builds a new node object using the current node settings and starts it;void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception {_            if (!node.isClosed()) {_                closeNode()__            }_            recreateNodeOnRestart(callback, clearDataIfNeeded, minMasterNodes)__            startNode()__        };closes,the,current,node,if,not,already,closed,builds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,throws,exception,if,node,is,closed,close,node,recreate,node,on,restart,callback,clear,data,if,needed,min,master,nodes,start,node
InternalTestCluster -> NodeAndClient -> void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception;1525162917;closes the current node if not already closed, builds a new node object using the current node settings and starts it;void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception {_            if (!node.isClosed()) {_                closeNode()__            }_            recreateNodeOnRestart(callback, clearDataIfNeeded, minMasterNodes)__            startNode()__        };closes,the,current,node,if,not,already,closed,builds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,throws,exception,if,node,is,closed,close,node,recreate,node,on,restart,callback,clear,data,if,needed,min,master,nodes,start,node
InternalTestCluster -> NodeAndClient -> void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception;1527096592;closes the current node if not already closed, builds a new node object using the current node settings and starts it;void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception {_            if (!node.isClosed()) {_                closeNode()__            }_            recreateNodeOnRestart(callback, clearDataIfNeeded, minMasterNodes)__            startNode()__        };closes,the,current,node,if,not,already,closed,builds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,throws,exception,if,node,is,closed,close,node,recreate,node,on,restart,callback,clear,data,if,needed,min,master,nodes,start,node
InternalTestCluster -> NodeAndClient -> void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception;1527152864;closes the current node if not already closed, builds a new node object using the current node settings and starts it;void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception {_            if (!node.isClosed()) {_                closeNode()__            }_            recreateNodeOnRestart(callback, clearDataIfNeeded, minMasterNodes)__            startNode()__        };closes,the,current,node,if,not,already,closed,builds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,throws,exception,if,node,is,closed,close,node,recreate,node,on,restart,callback,clear,data,if,needed,min,master,nodes,start,node
InternalTestCluster -> NodeAndClient -> void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception;1529916081;closes the current node if not already closed, builds a new node object using the current node settings and starts it;void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception {_            if (!node.isClosed()) {_                closeNode()__            }_            recreateNodeOnRestart(callback, clearDataIfNeeded, minMasterNodes)__            startNode()__        };closes,the,current,node,if,not,already,closed,builds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,throws,exception,if,node,is,closed,close,node,recreate,node,on,restart,callback,clear,data,if,needed,min,master,nodes,start,node
InternalTestCluster -> NodeAndClient -> void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception;1531179852;closes the current node if not already closed, builds a new node object using the current node settings and starts it;void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception {_            if (!node.isClosed()) {_                closeNode()__            }_            recreateNodeOnRestart(callback, clearDataIfNeeded, minMasterNodes)__            startNode()__        };closes,the,current,node,if,not,already,closed,builds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,throws,exception,if,node,is,closed,close,node,recreate,node,on,restart,callback,clear,data,if,needed,min,master,nodes,start,node
InternalTestCluster -> NodeAndClient -> void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception;1531729807;closes the current node if not already closed, builds a new node object using the current node settings and starts it;void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception {_            if (!node.isClosed()) {_                closeNode()__            }_            recreateNodeOnRestart(callback, clearDataIfNeeded, minMasterNodes)__            startNode()__        };closes,the,current,node,if,not,already,closed,builds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,throws,exception,if,node,is,closed,close,node,recreate,node,on,restart,callback,clear,data,if,needed,min,master,nodes,start,node
InternalTestCluster -> NodeAndClient -> void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception;1533738061;closes the current node if not already closed, builds a new node object using the current node settings and starts it;void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception {_            if (!node.isClosed()) {_                closeNode()__            }_            recreateNodeOnRestart(callback, clearDataIfNeeded, minMasterNodes)__            startNode()__        };closes,the,current,node,if,not,already,closed,builds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,throws,exception,if,node,is,closed,close,node,recreate,node,on,restart,callback,clear,data,if,needed,min,master,nodes,start,node
InternalTestCluster -> NodeAndClient -> void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception;1534362961;closes the current node if not already closed, builds a new node object using the current node settings and starts it;void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception {_            if (!node.isClosed()) {_                closeNode()__            }_            recreateNodeOnRestart(callback, clearDataIfNeeded, minMasterNodes)__            startNode()__        };closes,the,current,node,if,not,already,closed,builds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,throws,exception,if,node,is,closed,close,node,recreate,node,on,restart,callback,clear,data,if,needed,min,master,nodes,start,node
InternalTestCluster -> NodeAndClient -> void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception;1535723122;closes the current node if not already closed, builds a new node object using the current node settings and starts it;void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception {_            if (!node.isClosed()) {_                closeNode()__            }_            recreateNodeOnRestart(callback, clearDataIfNeeded, minMasterNodes)__            startNode()__        };closes,the,current,node,if,not,already,closed,builds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,throws,exception,if,node,is,closed,close,node,recreate,node,on,restart,callback,clear,data,if,needed,min,master,nodes,start,node
InternalTestCluster -> NodeAndClient -> void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception;1536137328;closes the current node if not already closed, builds a new node object using the current node settings and starts it;void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception {_            if (!node.isClosed()) {_                closeNode()__            }_            recreateNodeOnRestart(callback, clearDataIfNeeded, minMasterNodes)__            startNode()__        };closes,the,current,node,if,not,already,closed,builds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,throws,exception,if,node,is,closed,close,node,recreate,node,on,restart,callback,clear,data,if,needed,min,master,nodes,start,node
InternalTestCluster -> NodeAndClient -> void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception;1536828374;closes the current node if not already closed, builds a new node object using the current node settings and starts it;void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception {_            if (!node.isClosed()) {_                closeNode()__            }_            recreateNodeOnRestart(callback, clearDataIfNeeded, minMasterNodes, () -> rebuildUnicastHostFiles(emptyList()))__            startNode()__        };closes,the,current,node,if,not,already,closed,builds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,throws,exception,if,node,is,closed,close,node,recreate,node,on,restart,callback,clear,data,if,needed,min,master,nodes,rebuild,unicast,host,files,empty,list,start,node
InternalTestCluster -> NodeAndClient -> void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception;1537806831;closes the current node if not already closed, builds a new node object using the current node settings and starts it;void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception {_            if (!node.isClosed()) {_                closeNode()__            }_            recreateNodeOnRestart(callback, clearDataIfNeeded, minMasterNodes, () -> rebuildUnicastHostFiles(emptyList()))__            startNode()__        };closes,the,current,node,if,not,already,closed,builds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,throws,exception,if,node,is,closed,close,node,recreate,node,on,restart,callback,clear,data,if,needed,min,master,nodes,rebuild,unicast,host,files,empty,list,start,node
InternalTestCluster -> NodeAndClient -> void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception;1538067637;closes the current node if not already closed, builds a new node object using the current node settings and starts it;void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception {_            if (!node.isClosed()) {_                closeNode()__            }_            recreateNodeOnRestart(callback, clearDataIfNeeded, minMasterNodes, () -> rebuildUnicastHostFiles(emptyList()))__            startNode()__        };closes,the,current,node,if,not,already,closed,builds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,throws,exception,if,node,is,closed,close,node,recreate,node,on,restart,callback,clear,data,if,needed,min,master,nodes,rebuild,unicast,host,files,empty,list,start,node
InternalTestCluster -> NodeAndClient -> void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception;1539723533;closes the current node if not already closed, builds a new node object using the current node settings and starts it;void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception {_            if (!node.isClosed()) {_                closeNode()__            }_            recreateNodeOnRestart(callback, clearDataIfNeeded, minMasterNodes, () -> rebuildUnicastHostFiles(emptyList()))__            startNode()__        };closes,the,current,node,if,not,already,closed,builds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,throws,exception,if,node,is,closed,close,node,recreate,node,on,restart,callback,clear,data,if,needed,min,master,nodes,rebuild,unicast,host,files,empty,list,start,node
InternalTestCluster -> NodeAndClient -> void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception;1539815831;closes the current node if not already closed, builds a new node object using the current node settings and starts it;void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception {_            if (!node.isClosed()) {_                closeNode()__            }_            recreateNodeOnRestart(callback, clearDataIfNeeded, minMasterNodes, () -> rebuildUnicastHostFiles(emptyList()))__            startNode()__        };closes,the,current,node,if,not,already,closed,builds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,throws,exception,if,node,is,closed,close,node,recreate,node,on,restart,callback,clear,data,if,needed,min,master,nodes,rebuild,unicast,host,files,empty,list,start,node
InternalTestCluster -> NodeAndClient -> void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception;1540486836;closes the current node if not already closed, builds a new node object using the current node settings and starts it;void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception {_            if (!node.isClosed()) {_                closeNode()__            }_            recreateNodeOnRestart(callback, clearDataIfNeeded, minMasterNodes, () -> rebuildUnicastHostFiles(emptyList()))__            startNode()__        };closes,the,current,node,if,not,already,closed,builds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,throws,exception,if,node,is,closed,close,node,recreate,node,on,restart,callback,clear,data,if,needed,min,master,nodes,rebuild,unicast,host,files,empty,list,start,node
InternalTestCluster -> NodeAndClient -> void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception;1541092382;closes the current node if not already closed, builds a new node object using the current node settings and starts it;void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception {_            if (!node.isClosed()) {_                closeNode()__            }_            recreateNodeOnRestart(callback, clearDataIfNeeded, minMasterNodes, () -> rebuildUnicastHostFiles(emptyList()))__            startNode()__        };closes,the,current,node,if,not,already,closed,builds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,throws,exception,if,node,is,closed,close,node,recreate,node,on,restart,callback,clear,data,if,needed,min,master,nodes,rebuild,unicast,host,files,empty,list,start,node
InternalTestCluster -> NodeAndClient -> void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception;1541208696;closes the current node if not already closed, builds a new node object using the current node settings and starts it;void restart(RestartCallback callback, boolean clearDataIfNeeded, int minMasterNodes) throws Exception {_            if (!node.isClosed()) {_                closeNode()__            }_            recreateNodeOnRestart(callback, clearDataIfNeeded, minMasterNodes, () -> rebuildUnicastHostFiles(emptyList()))__            startNode()__        };closes,the,current,node,if,not,already,closed,builds,a,new,node,object,using,the,current,node,settings,and,starts,it;void,restart,restart,callback,callback,boolean,clear,data,if,needed,int,min,master,nodes,throws,exception,if,node,is,closed,close,node,recreate,node,on,restart,callback,clear,data,if,needed,min,master,nodes,rebuild,unicast,host,files,empty,list,start,node
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1524684173;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataOrMasterNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,or,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1525162917;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataOrMasterNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,or,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1527096592;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataOrMasterNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,or,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1527152864;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataOrMasterNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,or,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1529916081;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataOrMasterNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,or,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1531179852;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataOrMasterNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,or,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1531729807;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataOrMasterNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,or,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1533738061;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataOrMasterNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,or,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1534362961;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataOrMasterNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,or,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1535723122;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataOrMasterNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,or,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1536137328;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataOrMasterNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,or,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1536828374;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataOrMasterNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,or,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1537806831;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataOrMasterNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,or,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1538067637;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataOrMasterNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,or,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1539723533;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataOrMasterNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,or,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1539815831;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataOrMasterNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,or,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1540486836;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataOrMasterNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,or,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1541092382;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataOrMasterNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,or,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1541208696;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataOrMasterNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,or,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1542198296;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataOrMasterNodePredicate())__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,or,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1544081506;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate().or(new MasterNodePredicate()))__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate,or,new,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1544221624;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate().or(new MasterNodePredicate()))__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate,or,new,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1544254415;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate().or(new MasterNodePredicate()))__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate,or,new,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1544544737;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate().or(new MasterNodePredicate()))__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate,or,new,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1544823664;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate().or(new MasterNodePredicate()))__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate,or,new,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1545156327;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate().or(new MasterNodePredicate()))__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate,or,new,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1545222364;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate().or(new MasterNodePredicate()))__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate,or,new,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1545315633;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate().or(new MasterNodePredicate()))__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate,or,new,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1547245564;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate().or(new MasterNodePredicate()))__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate,or,new,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1547496886;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate().or(new MasterNodePredicate()))__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate,or,new,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1547497728;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate().or(new MasterNodePredicate()))__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate,or,new,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1547825802;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate().or(new MasterNodePredicate()))__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate,or,new,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1548160032;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate().or(new MasterNodePredicate()))__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate,or,new,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1548878955;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate().or(new MasterNodePredicate()))__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate,or,new,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1549017271;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate().or(new MasterNodePredicate()))__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate,or,new,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1549094096;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate().or(new MasterNodePredicate()))__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate,or,new,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1549291259;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate().or(new MasterNodePredicate()))__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate,or,new,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1549386680;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate().or(new MasterNodePredicate()))__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate,or,new,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1549388544;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate().or(new MasterNodePredicate()))__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate,or,new,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1549452878;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate().or(new MasterNodePredicate()))__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate,or,new,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1549898480;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate().or(new MasterNodePredicate()))__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate,or,new,master,node,predicate
InternalTestCluster -> public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz);1550570542;Returns an Iterable to all instances for the given class &gt_T&lt_ across all data and master nodes_in the cluster.;public synchronized <T> Iterable<T> getDataOrMasterNodeInstances(Class<T> clazz) {_        return getInstances(clazz, new DataNodePredicate().or(new MasterNodePredicate()))__    };returns,an,iterable,to,all,instances,for,the,given,class,gt,t,lt,across,all,data,and,master,nodes,in,the,cluster;public,synchronized,t,iterable,t,get,data,or,master,node,instances,class,t,clazz,return,get,instances,clazz,new,data,node,predicate,or,new,master,node,predicate
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1524684173;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1525162917;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1527096592;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1527152864;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1529916081;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1531179852;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1531729807;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1533738061;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1534362961;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1535723122;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1536137328;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1536828374;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1537806831;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1538067637;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1539723533;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1539815831;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1540486836;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1541092382;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1541208696;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1542198296;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new MasterNodePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,master,node,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1544081506;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1544221624;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1544254415;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1544544737;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1544823664;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1545156327;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1545222364;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1545315633;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1547245564;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1547496886;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1547497728;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1547825802;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1548160032;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1548878955;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1549017271;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1549094096;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1549291259;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1549386680;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1549388544;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1549452878;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1549898480;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1550570542;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1550755200;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> public synchronized void stopRandomNonMasterNode() throws IOException;1550761203;Stops any of the current nodes but not the master node.;public synchronized void stopRandomNonMasterNode() throws IOException {_        NodeAndClient nodeAndClient = getRandomNodeAndClient(new NodeNamePredicate(getMasterName()).negate())__        if (nodeAndClient != null) {_            logger.info("Closing random non master node [{}] current master [{}] ", nodeAndClient.name, getMasterName())__            stopNodesAndClient(nodeAndClient)__        }_    };stops,any,of,the,current,nodes,but,not,the,master,node;public,synchronized,void,stop,random,non,master,node,throws,ioexception,node,and,client,node,and,client,get,random,node,and,client,new,node,name,predicate,get,master,name,negate,if,node,and,client,null,logger,info,closing,random,non,master,node,current,master,node,and,client,name,get,master,name,stop,nodes,and,client,node,and,client
InternalTestCluster -> NodeAndClient -> Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception;1542198296;closes the node and prepares it to be restarted;Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception {_            assert callback != null__            close()__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            _            clearDataIfNeeded(callback)__            return newSettings.build()__        };closes,the,node,and,prepares,it,to,be,restarted;settings,close,for,restart,restart,callback,callback,int,min,master,nodes,throws,exception,assert,callback,null,close,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,clear,data,if,needed,callback,return,new,settings,build
InternalTestCluster -> NodeAndClient -> Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception;1544081506;closes the node and prepares it to be restarted;Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception {_            assert callback != null__            close()__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            _            clearDataIfNeeded(callback)__            return newSettings.build()__        };closes,the,node,and,prepares,it,to,be,restarted;settings,close,for,restart,restart,callback,callback,int,min,master,nodes,throws,exception,assert,callback,null,close,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,clear,data,if,needed,callback,return,new,settings,build
InternalTestCluster -> NodeAndClient -> Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception;1544221624;closes the node and prepares it to be restarted;Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception {_            assert callback != null__            close()__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            _            clearDataIfNeeded(callback)__            return newSettings.build()__        };closes,the,node,and,prepares,it,to,be,restarted;settings,close,for,restart,restart,callback,callback,int,min,master,nodes,throws,exception,assert,callback,null,close,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,clear,data,if,needed,callback,return,new,settings,build
InternalTestCluster -> NodeAndClient -> Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception;1544254415;closes the node and prepares it to be restarted;Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception {_            assert callback != null__            close()__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            _            clearDataIfNeeded(callback)__            return newSettings.build()__        };closes,the,node,and,prepares,it,to,be,restarted;settings,close,for,restart,restart,callback,callback,int,min,master,nodes,throws,exception,assert,callback,null,close,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,clear,data,if,needed,callback,return,new,settings,build
InternalTestCluster -> NodeAndClient -> Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception;1544544737;closes the node and prepares it to be restarted;Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception {_            assert callback != null__            close()__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            _            clearDataIfNeeded(callback)__            return newSettings.build()__        };closes,the,node,and,prepares,it,to,be,restarted;settings,close,for,restart,restart,callback,callback,int,min,master,nodes,throws,exception,assert,callback,null,close,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,clear,data,if,needed,callback,return,new,settings,build
InternalTestCluster -> NodeAndClient -> Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception;1544823664;closes the node and prepares it to be restarted;Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception {_            assert callback != null__            close()__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            _            clearDataIfNeeded(callback)__            return newSettings.build()__        };closes,the,node,and,prepares,it,to,be,restarted;settings,close,for,restart,restart,callback,callback,int,min,master,nodes,throws,exception,assert,callback,null,close,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,clear,data,if,needed,callback,return,new,settings,build
InternalTestCluster -> NodeAndClient -> Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception;1545156327;closes the node and prepares it to be restarted;Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception {_            assert callback != null__            close()__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            _            clearDataIfNeeded(callback)__            return newSettings.build()__        };closes,the,node,and,prepares,it,to,be,restarted;settings,close,for,restart,restart,callback,callback,int,min,master,nodes,throws,exception,assert,callback,null,close,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,clear,data,if,needed,callback,return,new,settings,build
InternalTestCluster -> NodeAndClient -> Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception;1545222364;closes the node and prepares it to be restarted;Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception {_            assert callback != null__            close()__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            _            clearDataIfNeeded(callback)__            return newSettings.build()__        };closes,the,node,and,prepares,it,to,be,restarted;settings,close,for,restart,restart,callback,callback,int,min,master,nodes,throws,exception,assert,callback,null,close,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,clear,data,if,needed,callback,return,new,settings,build
InternalTestCluster -> NodeAndClient -> Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception;1545315633;closes the node and prepares it to be restarted;Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception {_            assert callback != null__            close()__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            _            clearDataIfNeeded(callback)__            return newSettings.build()__        };closes,the,node,and,prepares,it,to,be,restarted;settings,close,for,restart,restart,callback,callback,int,min,master,nodes,throws,exception,assert,callback,null,close,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,clear,data,if,needed,callback,return,new,settings,build
InternalTestCluster -> NodeAndClient -> Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception;1547245564;closes the node and prepares it to be restarted;Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception {_            assert callback != null__            close()__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            _            clearDataIfNeeded(callback)__            return newSettings.build()__        };closes,the,node,and,prepares,it,to,be,restarted;settings,close,for,restart,restart,callback,callback,int,min,master,nodes,throws,exception,assert,callback,null,close,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,clear,data,if,needed,callback,return,new,settings,build
InternalTestCluster -> NodeAndClient -> Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception;1547496886;closes the node and prepares it to be restarted;Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception {_            assert callback != null__            close()__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            _            clearDataIfNeeded(callback)__            return newSettings.build()__        };closes,the,node,and,prepares,it,to,be,restarted;settings,close,for,restart,restart,callback,callback,int,min,master,nodes,throws,exception,assert,callback,null,close,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,clear,data,if,needed,callback,return,new,settings,build
InternalTestCluster -> NodeAndClient -> Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception;1547497728;closes the node and prepares it to be restarted;Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception {_            assert callback != null__            close()__            Settings callbackSettings = callback.onNodeStopped(name)__            Settings.Builder newSettings = Settings.builder()__            if (callbackSettings != null) {_                newSettings.put(callbackSettings)__            }_            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes).build()__            }_            _            clearDataIfNeeded(callback)__            return newSettings.build()__        };closes,the,node,and,prepares,it,to,be,restarted;settings,close,for,restart,restart,callback,callback,int,min,master,nodes,throws,exception,assert,callback,null,close,settings,callback,settings,callback,on,node,stopped,name,settings,builder,new,settings,settings,builder,if,callback,settings,null,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,build,clear,data,if,needed,callback,return,new,settings,build
InternalTestCluster -> NodeAndClient -> Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception;1547825802;closes the node and prepares it to be restarted;Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception {_            assert callback != null__            close()__            Settings callbackSettings = callback.onNodeStopped(name)__            assert callbackSettings != null__            Settings.Builder newSettings = Settings.builder()__            newSettings.put(callbackSettings)__            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)__                if (INITIAL_MASTER_NODES_SETTING.exists(callbackSettings) == false) {_                    newSettings.putList(INITIAL_MASTER_NODES_SETTING.getKey())__                }_            }_            _            clearDataIfNeeded(callback)__            return newSettings.build()__        };closes,the,node,and,prepares,it,to,be,restarted;settings,close,for,restart,restart,callback,callback,int,min,master,nodes,throws,exception,assert,callback,null,close,settings,callback,settings,callback,on,node,stopped,name,assert,callback,settings,null,settings,builder,new,settings,settings,builder,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,if,exists,callback,settings,false,new,settings,put,list,get,key,clear,data,if,needed,callback,return,new,settings,build
InternalTestCluster -> NodeAndClient -> Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception;1548160032;closes the node and prepares it to be restarted;Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception {_            assert callback != null__            close()__            Settings callbackSettings = callback.onNodeStopped(name)__            assert callbackSettings != null__            Settings.Builder newSettings = Settings.builder()__            newSettings.put(callbackSettings)__            if (minMasterNodes >= 0) {_                assert DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()) == false : "min master nodes is auto managed"__                newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)__                if (INITIAL_MASTER_NODES_SETTING.exists(callbackSettings) == false) {_                    newSettings.putList(INITIAL_MASTER_NODES_SETTING.getKey())__                }_            }_            _            clearDataIfNeeded(callback)__            return newSettings.build()__        };closes,the,node,and,prepares,it,to,be,restarted;settings,close,for,restart,restart,callback,callback,int,min,master,nodes,throws,exception,assert,callback,null,close,settings,callback,settings,callback,on,node,stopped,name,assert,callback,settings,null,settings,builder,new,settings,settings,builder,new,settings,put,callback,settings,if,min,master,nodes,0,assert,exists,new,settings,build,false,min,master,nodes,is,auto,managed,new,settings,put,get,key,min,master,nodes,if,exists,callback,settings,false,new,settings,put,list,get,key,clear,data,if,needed,callback,return,new,settings,build
InternalTestCluster -> NodeAndClient -> Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception;1548878955;closes the node and prepares it to be restarted;Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception {_            assert callback != null__            close()__            Settings callbackSettings = callback.onNodeStopped(name)__            assert callbackSettings != null__            Settings.Builder newSettings = Settings.builder()__            newSettings.put(callbackSettings)__            if (minMasterNodes >= 0) {_                if (usingZen1(newSettings.build())) {_                    assertFalse("min master nodes is auto managed", DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()))__                    newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)__                }_                if (INITIAL_MASTER_NODES_SETTING.exists(callbackSettings) == false) {_                    newSettings.putList(INITIAL_MASTER_NODES_SETTING.getKey())__                }_            }_            _            clearDataIfNeeded(callback)__            return newSettings.build()__        };closes,the,node,and,prepares,it,to,be,restarted;settings,close,for,restart,restart,callback,callback,int,min,master,nodes,throws,exception,assert,callback,null,close,settings,callback,settings,callback,on,node,stopped,name,assert,callback,settings,null,settings,builder,new,settings,settings,builder,new,settings,put,callback,settings,if,min,master,nodes,0,if,using,zen1,new,settings,build,assert,false,min,master,nodes,is,auto,managed,exists,new,settings,build,new,settings,put,get,key,min,master,nodes,if,exists,callback,settings,false,new,settings,put,list,get,key,clear,data,if,needed,callback,return,new,settings,build
InternalTestCluster -> NodeAndClient -> Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception;1549017271;closes the node and prepares it to be restarted;Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception {_            assert callback != null__            close()__            Settings callbackSettings = callback.onNodeStopped(name)__            assert callbackSettings != null__            Settings.Builder newSettings = Settings.builder()__            newSettings.put(callbackSettings)__            if (minMasterNodes >= 0) {_                if (usingZen1(newSettings.build())) {_                    assertFalse("min master nodes is auto managed", DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()))__                    newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)__                }_                if (INITIAL_MASTER_NODES_SETTING.exists(callbackSettings) == false) {_                    newSettings.putList(INITIAL_MASTER_NODES_SETTING.getKey())__                }_            }_            _            clearDataIfNeeded(callback)__            return newSettings.build()__        };closes,the,node,and,prepares,it,to,be,restarted;settings,close,for,restart,restart,callback,callback,int,min,master,nodes,throws,exception,assert,callback,null,close,settings,callback,settings,callback,on,node,stopped,name,assert,callback,settings,null,settings,builder,new,settings,settings,builder,new,settings,put,callback,settings,if,min,master,nodes,0,if,using,zen1,new,settings,build,assert,false,min,master,nodes,is,auto,managed,exists,new,settings,build,new,settings,put,get,key,min,master,nodes,if,exists,callback,settings,false,new,settings,put,list,get,key,clear,data,if,needed,callback,return,new,settings,build
InternalTestCluster -> NodeAndClient -> Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception;1549094096;closes the node and prepares it to be restarted;Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception {_            assert callback != null__            close()__            Settings callbackSettings = callback.onNodeStopped(name)__            assert callbackSettings != null__            Settings.Builder newSettings = Settings.builder()__            newSettings.put(callbackSettings)__            if (minMasterNodes >= 0) {_                if (usingZen1(newSettings.build())) {_                    assertFalse("min master nodes is auto managed", DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()))__                    newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)__                }_                if (INITIAL_MASTER_NODES_SETTING.exists(callbackSettings) == false) {_                    newSettings.putList(INITIAL_MASTER_NODES_SETTING.getKey())__                }_            }_            _            clearDataIfNeeded(callback)__            return newSettings.build()__        };closes,the,node,and,prepares,it,to,be,restarted;settings,close,for,restart,restart,callback,callback,int,min,master,nodes,throws,exception,assert,callback,null,close,settings,callback,settings,callback,on,node,stopped,name,assert,callback,settings,null,settings,builder,new,settings,settings,builder,new,settings,put,callback,settings,if,min,master,nodes,0,if,using,zen1,new,settings,build,assert,false,min,master,nodes,is,auto,managed,exists,new,settings,build,new,settings,put,get,key,min,master,nodes,if,exists,callback,settings,false,new,settings,put,list,get,key,clear,data,if,needed,callback,return,new,settings,build
InternalTestCluster -> NodeAndClient -> Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception;1549291259;closes the node and prepares it to be restarted;Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception {_            assert callback != null__            close()__            Settings callbackSettings = callback.onNodeStopped(name)__            assert callbackSettings != null__            Settings.Builder newSettings = Settings.builder()__            newSettings.put(callbackSettings)__            if (minMasterNodes >= 0) {_                if (usingZen1(newSettings.build())) {_                    assertFalse("min master nodes is auto managed", DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()))__                    newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)__                }_                if (INITIAL_MASTER_NODES_SETTING.exists(callbackSettings) == false) {_                    newSettings.putList(INITIAL_MASTER_NODES_SETTING.getKey())__                }_            }_            _            clearDataIfNeeded(callback)__            return newSettings.build()__        };closes,the,node,and,prepares,it,to,be,restarted;settings,close,for,restart,restart,callback,callback,int,min,master,nodes,throws,exception,assert,callback,null,close,settings,callback,settings,callback,on,node,stopped,name,assert,callback,settings,null,settings,builder,new,settings,settings,builder,new,settings,put,callback,settings,if,min,master,nodes,0,if,using,zen1,new,settings,build,assert,false,min,master,nodes,is,auto,managed,exists,new,settings,build,new,settings,put,get,key,min,master,nodes,if,exists,callback,settings,false,new,settings,put,list,get,key,clear,data,if,needed,callback,return,new,settings,build
InternalTestCluster -> NodeAndClient -> Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception;1549386680;closes the node and prepares it to be restarted;Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception {_            assert callback != null__            close()__            Settings callbackSettings = callback.onNodeStopped(name)__            assert callbackSettings != null__            Settings.Builder newSettings = Settings.builder()__            newSettings.put(callbackSettings)__            if (minMasterNodes >= 0) {_                if (usingZen1(newSettings.build())) {_                    assertFalse("min master nodes is auto managed", DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()))__                    newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)__                }_                if (INITIAL_MASTER_NODES_SETTING.exists(callbackSettings) == false) {_                    newSettings.putList(INITIAL_MASTER_NODES_SETTING.getKey())__                }_            }_            _            clearDataIfNeeded(callback)__            return newSettings.build()__        };closes,the,node,and,prepares,it,to,be,restarted;settings,close,for,restart,restart,callback,callback,int,min,master,nodes,throws,exception,assert,callback,null,close,settings,callback,settings,callback,on,node,stopped,name,assert,callback,settings,null,settings,builder,new,settings,settings,builder,new,settings,put,callback,settings,if,min,master,nodes,0,if,using,zen1,new,settings,build,assert,false,min,master,nodes,is,auto,managed,exists,new,settings,build,new,settings,put,get,key,min,master,nodes,if,exists,callback,settings,false,new,settings,put,list,get,key,clear,data,if,needed,callback,return,new,settings,build
InternalTestCluster -> NodeAndClient -> Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception;1549388544;closes the node and prepares it to be restarted;Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception {_            assert callback != null__            close()__            Settings callbackSettings = callback.onNodeStopped(name)__            assert callbackSettings != null__            Settings.Builder newSettings = Settings.builder()__            newSettings.put(callbackSettings)__            if (minMasterNodes >= 0) {_                if (usingZen1(newSettings.build())) {_                    assertFalse("min master nodes is auto managed", DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()))__                    newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)__                }_                if (INITIAL_MASTER_NODES_SETTING.exists(callbackSettings) == false) {_                    newSettings.putList(INITIAL_MASTER_NODES_SETTING.getKey())__                }_            }_            _            clearDataIfNeeded(callback)__            return newSettings.build()__        };closes,the,node,and,prepares,it,to,be,restarted;settings,close,for,restart,restart,callback,callback,int,min,master,nodes,throws,exception,assert,callback,null,close,settings,callback,settings,callback,on,node,stopped,name,assert,callback,settings,null,settings,builder,new,settings,settings,builder,new,settings,put,callback,settings,if,min,master,nodes,0,if,using,zen1,new,settings,build,assert,false,min,master,nodes,is,auto,managed,exists,new,settings,build,new,settings,put,get,key,min,master,nodes,if,exists,callback,settings,false,new,settings,put,list,get,key,clear,data,if,needed,callback,return,new,settings,build
InternalTestCluster -> NodeAndClient -> Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception;1549452878;closes the node and prepares it to be restarted;Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception {_            assert callback != null__            close()__            Settings callbackSettings = callback.onNodeStopped(name)__            assert callbackSettings != null__            Settings.Builder newSettings = Settings.builder()__            newSettings.put(callbackSettings)__            if (minMasterNodes >= 0) {_                if (usingZen1(newSettings.build())) {_                    assertFalse("min master nodes is auto managed", DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()))__                    newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)__                }_                if (INITIAL_MASTER_NODES_SETTING.exists(callbackSettings) == false) {_                    newSettings.putList(INITIAL_MASTER_NODES_SETTING.getKey())__                }_            }_            _            clearDataIfNeeded(callback)__            return newSettings.build()__        };closes,the,node,and,prepares,it,to,be,restarted;settings,close,for,restart,restart,callback,callback,int,min,master,nodes,throws,exception,assert,callback,null,close,settings,callback,settings,callback,on,node,stopped,name,assert,callback,settings,null,settings,builder,new,settings,settings,builder,new,settings,put,callback,settings,if,min,master,nodes,0,if,using,zen1,new,settings,build,assert,false,min,master,nodes,is,auto,managed,exists,new,settings,build,new,settings,put,get,key,min,master,nodes,if,exists,callback,settings,false,new,settings,put,list,get,key,clear,data,if,needed,callback,return,new,settings,build
InternalTestCluster -> NodeAndClient -> Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception;1549898480;closes the node and prepares it to be restarted;Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception {_            assert callback != null__            close()__            Settings callbackSettings = callback.onNodeStopped(name)__            assert callbackSettings != null__            Settings.Builder newSettings = Settings.builder()__            newSettings.put(callbackSettings)__            if (minMasterNodes >= 0) {_                if (usingZen1(newSettings.build())) {_                    assertFalse("min master nodes is auto managed", DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()))__                    newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)__                }_                if (INITIAL_MASTER_NODES_SETTING.exists(callbackSettings) == false) {_                    newSettings.putList(INITIAL_MASTER_NODES_SETTING.getKey())__                }_            }_            _            clearDataIfNeeded(callback)__            return newSettings.build()__        };closes,the,node,and,prepares,it,to,be,restarted;settings,close,for,restart,restart,callback,callback,int,min,master,nodes,throws,exception,assert,callback,null,close,settings,callback,settings,callback,on,node,stopped,name,assert,callback,settings,null,settings,builder,new,settings,settings,builder,new,settings,put,callback,settings,if,min,master,nodes,0,if,using,zen1,new,settings,build,assert,false,min,master,nodes,is,auto,managed,exists,new,settings,build,new,settings,put,get,key,min,master,nodes,if,exists,callback,settings,false,new,settings,put,list,get,key,clear,data,if,needed,callback,return,new,settings,build
InternalTestCluster -> NodeAndClient -> Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception;1550570542;closes the node and prepares it to be restarted;Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception {_            assert callback != null__            close()__            Settings callbackSettings = callback.onNodeStopped(name)__            assert callbackSettings != null__            Settings.Builder newSettings = Settings.builder()__            newSettings.put(callbackSettings)__            if (minMasterNodes >= 0) {_                if (usingZen1(newSettings.build())) {_                    assertFalse("min master nodes is auto managed", DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()))__                    newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)__                }_                if (INITIAL_MASTER_NODES_SETTING.exists(callbackSettings) == false) {_                    newSettings.putList(INITIAL_MASTER_NODES_SETTING.getKey())__                }_            }_            _            clearDataIfNeeded(callback)__            return newSettings.build()__        };closes,the,node,and,prepares,it,to,be,restarted;settings,close,for,restart,restart,callback,callback,int,min,master,nodes,throws,exception,assert,callback,null,close,settings,callback,settings,callback,on,node,stopped,name,assert,callback,settings,null,settings,builder,new,settings,settings,builder,new,settings,put,callback,settings,if,min,master,nodes,0,if,using,zen1,new,settings,build,assert,false,min,master,nodes,is,auto,managed,exists,new,settings,build,new,settings,put,get,key,min,master,nodes,if,exists,callback,settings,false,new,settings,put,list,get,key,clear,data,if,needed,callback,return,new,settings,build
InternalTestCluster -> NodeAndClient -> Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception;1550755200;closes the node and prepares it to be restarted;Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception {_            assert callback != null__            close()__            Settings callbackSettings = callback.onNodeStopped(name)__            assert callbackSettings != null__            Settings.Builder newSettings = Settings.builder()__            newSettings.put(callbackSettings)__            if (minMasterNodes >= 0) {_                if (usingZen1(newSettings.build())) {_                    assertFalse("min master nodes is auto managed", DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()))__                    newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)__                }_                if (INITIAL_MASTER_NODES_SETTING.exists(callbackSettings) == false) {_                    newSettings.putList(INITIAL_MASTER_NODES_SETTING.getKey())__                }_            }_            _            clearDataIfNeeded(callback)__            return newSettings.build()__        };closes,the,node,and,prepares,it,to,be,restarted;settings,close,for,restart,restart,callback,callback,int,min,master,nodes,throws,exception,assert,callback,null,close,settings,callback,settings,callback,on,node,stopped,name,assert,callback,settings,null,settings,builder,new,settings,settings,builder,new,settings,put,callback,settings,if,min,master,nodes,0,if,using,zen1,new,settings,build,assert,false,min,master,nodes,is,auto,managed,exists,new,settings,build,new,settings,put,get,key,min,master,nodes,if,exists,callback,settings,false,new,settings,put,list,get,key,clear,data,if,needed,callback,return,new,settings,build
InternalTestCluster -> NodeAndClient -> Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception;1550761203;closes the node and prepares it to be restarted;Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception {_            assert callback != null__            close()__            Settings callbackSettings = callback.onNodeStopped(name)__            assert callbackSettings != null__            Settings.Builder newSettings = Settings.builder()__            newSettings.put(callbackSettings)__            if (minMasterNodes >= 0) {_                if (usingZen1(newSettings.build())) {_                    assertFalse("min master nodes is auto managed", DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(newSettings.build()))__                    newSettings.put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), minMasterNodes)__                }_                if (INITIAL_MASTER_NODES_SETTING.exists(callbackSettings) == false) {_                    newSettings.putList(INITIAL_MASTER_NODES_SETTING.getKey())__                }_            }_            _            clearDataIfNeeded(callback)__            return newSettings.build()__        };closes,the,node,and,prepares,it,to,be,restarted;settings,close,for,restart,restart,callback,callback,int,min,master,nodes,throws,exception,assert,callback,null,close,settings,callback,settings,callback,on,node,stopped,name,assert,callback,settings,null,settings,builder,new,settings,settings,builder,new,settings,put,callback,settings,if,min,master,nodes,0,if,using,zen1,new,settings,build,assert,false,min,master,nodes,is,auto,managed,exists,new,settings,build,new,settings,put,get,key,min,master,nodes,if,exists,callback,settings,false,new,settings,put,list,get,key,clear,data,if,needed,callback,return,new,settings,build
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1524684173;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1525162917;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1527096592;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1527152864;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1529916081;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1531179852;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1531729807;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1533738061;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1534362961;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1535723122;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1536137328;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1536828374;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1537806831;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1538067637;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1539723533;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1539815831;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1540486836;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1541092382;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1541208696;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1542198296;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1544081506;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1544221624;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1544254415;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1544544737;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1544823664;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1545156327;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1545222364;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1545315633;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1547245564;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1547496886;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1547497728;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1547825802;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1548160032;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1548878955;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1549017271;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1549094096;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1549291259;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1549386680;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1549388544;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1549452878;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1549898480;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1550570542;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1550755200;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized void rollingRestart(RestartCallback callback) throws Exception;1550761203;Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.;public synchronized void rollingRestart(RestartCallback callback) throws Exception {_        int numNodesRestarted = 0__        for (NodeAndClient nodeAndClient : nodes.values()) {_            callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())__            restartNode(nodeAndClient, callback)__        }_    };restarts,all,nodes,in,a,rolling,restart,fashion,ie,only,restarts,on,node,a,time;public,synchronized,void,rolling,restart,restart,callback,callback,throws,exception,int,num,nodes,restarted,0,for,node,and,client,node,and,client,nodes,values,callback,do,after,nodes,num,nodes,restarted,node,and,client,node,client,restart,node,node,and,client,callback
InternalTestCluster -> public synchronized String startNode(Settings settings);1524684173;Starts a node with the given settings and returns it's name.;public synchronized String startNode(Settings settings) {_        final int defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + (Node.NODE_MASTER_SETTING.get(settings) ? 1 : 0))__        NodeAndClient buildNode = buildNode(settings, defaultMinMasterNodes)__        startAndPublishNodesAndClients(Collections.singletonList(buildNode))__        return buildNode.name__    };starts,a,node,with,the,given,settings,and,returns,it,s,name;public,synchronized,string,start,node,settings,settings,final,int,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,node,get,settings,1,0,node,and,client,build,node,build,node,settings,default,min,master,nodes,start,and,publish,nodes,and,clients,collections,singleton,list,build,node,return,build,node,name
InternalTestCluster -> public synchronized String startNode(Settings settings);1525162917;Starts a node with the given settings and returns it's name.;public synchronized String startNode(Settings settings) {_        final int defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + (Node.NODE_MASTER_SETTING.get(settings) ? 1 : 0))__        NodeAndClient buildNode = buildNode(settings, defaultMinMasterNodes)__        startAndPublishNodesAndClients(Collections.singletonList(buildNode))__        return buildNode.name__    };starts,a,node,with,the,given,settings,and,returns,it,s,name;public,synchronized,string,start,node,settings,settings,final,int,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,node,get,settings,1,0,node,and,client,build,node,build,node,settings,default,min,master,nodes,start,and,publish,nodes,and,clients,collections,singleton,list,build,node,return,build,node,name
InternalTestCluster -> public synchronized String startNode(Settings settings);1527096592;Starts a node with the given settings and returns it's name.;public synchronized String startNode(Settings settings) {_        final int defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + (Node.NODE_MASTER_SETTING.get(settings) ? 1 : 0))__        NodeAndClient buildNode = buildNode(settings, defaultMinMasterNodes)__        startAndPublishNodesAndClients(Collections.singletonList(buildNode))__        return buildNode.name__    };starts,a,node,with,the,given,settings,and,returns,it,s,name;public,synchronized,string,start,node,settings,settings,final,int,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,node,get,settings,1,0,node,and,client,build,node,build,node,settings,default,min,master,nodes,start,and,publish,nodes,and,clients,collections,singleton,list,build,node,return,build,node,name
InternalTestCluster -> public synchronized String startNode(Settings settings);1527152864;Starts a node with the given settings and returns it's name.;public synchronized String startNode(Settings settings) {_        final int defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + (Node.NODE_MASTER_SETTING.get(settings) ? 1 : 0))__        NodeAndClient buildNode = buildNode(settings, defaultMinMasterNodes)__        startAndPublishNodesAndClients(Collections.singletonList(buildNode))__        return buildNode.name__    };starts,a,node,with,the,given,settings,and,returns,it,s,name;public,synchronized,string,start,node,settings,settings,final,int,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,node,get,settings,1,0,node,and,client,build,node,build,node,settings,default,min,master,nodes,start,and,publish,nodes,and,clients,collections,singleton,list,build,node,return,build,node,name
InternalTestCluster -> public synchronized String startNode(Settings settings);1529916081;Starts a node with the given settings and returns it's name.;public synchronized String startNode(Settings settings) {_        final int defaultMinMasterNodes = getMinMasterNodes(getMasterNodesCount() + (Node.NODE_MASTER_SETTING.get(settings) ? 1 : 0))__        NodeAndClient buildNode = buildNode(settings, defaultMinMasterNodes)__        startAndPublishNodesAndClients(Collections.singletonList(buildNode))__        return buildNode.name__    };starts,a,node,with,the,given,settings,and,returns,it,s,name;public,synchronized,string,start,node,settings,settings,final,int,default,min,master,nodes,get,min,master,nodes,get,master,nodes,count,node,get,settings,1,0,node,and,client,build,node,build,node,settings,default,min,master,nodes,start,and,publish,nodes,and,clients,collections,singleton,list,build,node,return,build,node,name
InternalTestCluster -> public synchronized String startNode(Settings settings);1531179852;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1531729807;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1533738061;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1534362961;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1535723122;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1536137328;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1536828374;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1537806831;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1538067637;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1539723533;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1539815831;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1540486836;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1541092382;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1541208696;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1542198296;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1544081506;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1544221624;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1544254415;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1544544737;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1544823664;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1545156327;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1545222364;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1545315633;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1547245564;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1547496886;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1547497728;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1547825802;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1548160032;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1548878955;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1549017271;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1549094096;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1549291259;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1549386680;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1549388544;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1549452878;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1549898480;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
InternalTestCluster -> public synchronized String startNode(Settings settings);1550570542;Starts a node with the given settings and returns its name.;public synchronized String startNode(Settings settings) {_        return startNodes(settings).get(0)__    };starts,a,node,with,the,given,settings,and,returns,its,name;public,synchronized,string,start,node,settings,settings,return,start,nodes,settings,get,0
