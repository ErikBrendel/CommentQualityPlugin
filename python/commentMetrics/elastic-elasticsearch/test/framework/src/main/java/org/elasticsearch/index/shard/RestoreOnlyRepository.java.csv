commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;@Override protected void doStart() { }
false;protected;0;3;;@Override protected void doStop() { }
false;protected;0;3;;@Override protected void doClose() { }
false;public;0;4;;@Override public RepositoryMetaData getMetadata() {     return null. }
false;public;1;4;;@Override public SnapshotInfo getSnapshotInfo(SnapshotId snapshotId) {     return null. }
false;public;1;4;;@Override public MetaData getSnapshotGlobalMetaData(SnapshotId snapshotId) {     return null. }
false;public;2;4;;@Override public IndexMetaData getSnapshotIndexMetaData(SnapshotId snapshotId, IndexId index) throws IOException {     return null. }
false;public;0;6;;@Override public RepositoryData getRepositoryData() {     Map<IndexId, Set<SnapshotId>> map = new HashMap<>().     map.put(new IndexId(indexName, "blah"), emptySet()).     return new RepositoryData(EMPTY_REPO_GEN, Collections.emptyMap(), Collections.emptyMap(), map, Collections.emptyList()). }
false;public;3;3;;@Override public void initializeSnapshot(SnapshotId snapshotId, List<IndexId> indices, MetaData metaData) { }
false;public;8;6;;@Override public SnapshotInfo finalizeSnapshot(SnapshotId snapshotId, List<IndexId> indices, long startTime, String failure, int totalShards, List<SnapshotShardFailure> shardFailures, long repositoryStateId, boolean includeGlobalState) {     return null. }
false;public;2;3;;@Override public void deleteSnapshot(SnapshotId snapshotId, long repositoryStateId) { }
false;public;0;4;;@Override public long getSnapshotThrottleTimeInNanos() {     return 0. }
false;public;0;4;;@Override public long getRestoreThrottleTimeInNanos() {     return 0. }
false;public;0;4;;@Override public String startVerification() {     return null. }
false;public;1;3;;@Override public void endVerification(String verificationToken) { }
false;public;0;4;;@Override public boolean isReadOnly() {     return false. }
false;public;6;4;;@Override public void snapshotShard(IndexShard shard, Store store, SnapshotId snapshotId, IndexId indexId, IndexCommit snapshotIndexCommit, IndexShardSnapshotStatus snapshotStatus) { }
false;public;4;4;;@Override public IndexShardSnapshotStatus getShardSnapshotStatus(SnapshotId snapshotId, Version version, IndexId indexId, ShardId shardId) {     return null. }
false;public;2;3;;@Override public void verify(String verificationToken, DiscoveryNode localNode) { }
