commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getName() {     return name. }
false;public;0;3;;public String getLocation() {     return location. }
false;public;0;3;;public List<String> getMethods() {     return methods. }
true;public;1;22;/**  * Returns the supported http methods given the rest parameters provided  */ ;/**  * Returns the supported http methods given the rest parameters provided  */ public List<String> getSupportedMethods(Set<String> restParams) {     // we try to avoid hardcoded mappings but the index api is the exception     if ("index".equals(name) || "create".equals(name)) {         List<String> indexMethods = new ArrayList<>().         for (String method : methods) {             if (restParams.contains("id")) {                 // PUT when the id is provided                 if (HttpPut.METHOD_NAME.equals(method)) {                     indexMethods.add(method).                 }             } else {                 // POST without id                 if (HttpPost.METHOD_NAME.equals(method)) {                     indexMethods.add(method).                 }             }         }         return indexMethods.     }     return methods. }
false;;1;3;;void addMethod(String method) {     this.methods.add(method). }
false;public;0;3;;public List<String> getPaths() {     return paths. }
false;;1;3;;void addPath(String path) {     this.paths.add(path). }
true;public;0;3;/**  * Gets all path parts supported by the api. For every path part defines if it  * is required or optional.  */ ;/**  * Gets all path parts supported by the api. For every path part defines if it  * is required or optional.  */ public Map<String, Boolean> getPathParts() {     return pathParts. }
false;;2;3;;void addPathPart(String pathPart, boolean required) {     this.pathParts.put(pathPart, required). }
true;public;0;3;/**  * Gets all parameters supported by the api. For every parameter defines if it  * is required or optional.  */ ;/**  * Gets all parameters supported by the api. For every parameter defines if it  * is required or optional.  */ public Map<String, Boolean> getParams() {     return params. }
false;;2;3;;void addParam(String param, boolean required) {     this.params.put(param, required). }
false;;0;3;;void setBodyOptional() {     this.body = Body.OPTIONAL. }
false;;0;3;;void setBodyRequired() {     this.body = Body.REQUIRED. }
false;public;0;3;;public boolean isBodySupported() {     return body != Body.NOT_SUPPORTED. }
false;public;0;3;;public boolean isBodyRequired() {     return body == Body.REQUIRED. }
true;public;1;13;/**  * Finds the best matching rest path given the current parameters and replaces  * placeholders with their corresponding values received as arguments  */ ;/**  * Finds the best matching rest path given the current parameters and replaces  * placeholders with their corresponding values received as arguments  */ public ClientYamlSuiteRestPath[] getFinalPaths(Map<String, String> pathParams) {     List<ClientYamlSuiteRestPath> matchingRestPaths = findMatchingRestPaths(pathParams.keySet()).     if (matchingRestPaths == null || matchingRestPaths.isEmpty()) {         throw new IllegalArgumentException("unable to find matching rest path for api [" + name + "] and path params " + pathParams).     }     ClientYamlSuiteRestPath[] restPaths = new ClientYamlSuiteRestPath[matchingRestPaths.size()].     for (int i = 0. i < matchingRestPaths.size(). i++) {         ClientYamlSuiteRestPath restPath = matchingRestPaths.get(i).         restPaths[i] = restPath.replacePlaceholders(pathParams).     }     return restPaths. }
true;private;1;11;/**  * Finds the matching rest paths out of the available ones with the current api (based on REST spec).  *  * The best path is the one that has exactly the same number of placeholders to replace  * (e.g. /{index}/{type}/{id} when the path params are exactly index, type and id).  */ ;/**  * Finds the matching rest paths out of the available ones with the current api (based on REST spec).  *  * The best path is the one that has exactly the same number of placeholders to replace  * (e.g. /{index}/{type}/{id} when the path params are exactly index, type and id).  */ private List<ClientYamlSuiteRestPath> findMatchingRestPaths(Set<String> restParams) {     List<ClientYamlSuiteRestPath> matchingRestPaths = new ArrayList<>().     ClientYamlSuiteRestPath[] restPaths = buildRestPaths().     for (ClientYamlSuiteRestPath restPath : restPaths) {         if (restPath.matches(restParams)) {             matchingRestPaths.add(restPath).         }     }     return matchingRestPaths. }
false;private;0;7;;private ClientYamlSuiteRestPath[] buildRestPaths() {     ClientYamlSuiteRestPath[] restPaths = new ClientYamlSuiteRestPath[paths.size()].     for (int i = 0. i < restPaths.length. i++) {         restPaths[i] = new ClientYamlSuiteRestPath(paths.get(i)).     }     return restPaths. }
