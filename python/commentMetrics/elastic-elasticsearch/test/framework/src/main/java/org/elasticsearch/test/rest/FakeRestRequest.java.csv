commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Method method() {     return method. }
false;public;0;4;;@Override public String uri() {     return uri. }
false;public;0;4;;@Override public BytesReference content() {     return content. }
false;public;0;4;;@Override public Map<String, List<String>> getHeaders() {     return headers. }
false;public;0;4;;@Override public List<String> strictCookies() {     return Collections.emptyList(). }
false;public;0;4;;@Override public HttpVersion protocolVersion() {     return HttpVersion.HTTP_1_1. }
false;public;1;5;;@Override public HttpRequest removeHeader(String header) {     headers.remove(header).     return this. }
false;public;2;4;;@Override public void addHeader(String name, String value) {     headers.put(name, value). }
false;public;1;4;;@Override public boolean containsHeader(String name) {     return headers.containsKey(name). }
false;public;2;15;;@Override public HttpResponse createResponse(RestStatus status, BytesReference content) {     Map<String, String> headers = new HashMap<>().     return new HttpResponse() {          @Override         public void addHeader(String name, String value) {             headers.put(name, value).         }          @Override         public boolean containsHeader(String name) {             return headers.containsKey(name).         }     }. }
false;public;2;4;;@Override public void sendResponse(HttpResponse response, ActionListener<Void> listener) { }
false;public;0;4;;@Override public InetSocketAddress getLocalAddress() {     return null. }
false;public;0;4;;@Override public InetSocketAddress getRemoteAddress() {     return remoteAddress. }
false;public;1;4;;@Override public void addCloseListener(ActionListener<Void> listener) { }
false;public;0;4;;@Override public boolean isOpen() {     return true. }
false;public;0;4;;@Override public void close() { }
false;public;1;4;;public Builder withHeaders(Map<String, List<String>> headers) {     this.headers = headers.     return this. }
false;public;1;4;;public Builder withParams(Map<String, String> params) {     this.params = params.     return this. }
false;public;2;7;;public Builder withContent(BytesReference content, XContentType xContentType) {     this.content = content.     if (xContentType != null) {         headers.put("Content-Type", Collections.singletonList(xContentType.mediaType())).     }     return this. }
false;public;1;4;;public Builder withPath(String path) {     this.path = path.     return this. }
false;public;1;4;;public Builder withMethod(Method method) {     this.method = method.     return this. }
false;public;1;4;;public Builder withRemoteAddress(InetSocketAddress address) {     this.address = address.     return this. }
false;public;0;4;;public FakeRestRequest build() {     FakeHttpRequest fakeHttpRequest = new FakeHttpRequest(method, path, content, headers).     return new FakeRestRequest(xContentRegistry, fakeHttpRequest, params, new FakeHttpChannel(address)). }
