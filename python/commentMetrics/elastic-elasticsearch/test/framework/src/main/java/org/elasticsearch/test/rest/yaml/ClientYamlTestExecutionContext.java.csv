commented;modifiers;parameterAmount;loc;comment;code
true;public;4;4;/**  * Calls an elasticsearch api with the parameters and request body provided as arguments.  * Saves the obtained response in the execution context.  */ ;/**  * Calls an elasticsearch api with the parameters and request body provided as arguments.  * Saves the obtained response in the execution context.  */ public ClientYamlTestResponse callApi(String apiName, Map<String, String> params, List<Map<String, Object>> bodies, Map<String, String> headers) throws IOException {     return callApi(apiName, params, bodies, headers, NodeSelector.ANY). }
true;public;5;33;/**  * Calls an elasticsearch api with the parameters and request body provided as arguments.  * Saves the obtained response in the execution context.  */ ;/**  * Calls an elasticsearch api with the parameters and request body provided as arguments.  * Saves the obtained response in the execution context.  */ public ClientYamlTestResponse callApi(String apiName, Map<String, String> params, List<Map<String, Object>> bodies, Map<String, String> headers, NodeSelector nodeSelector) throws IOException {     // makes a copy of the parameters before modifying them for this specific request     Map<String, String> requestParams = new HashMap<>(params).     // By default ask for error traces, this my be overridden by params     requestParams.putIfAbsent("error_trace", "true").     for (Map.Entry<String, String> entry : requestParams.entrySet()) {         if (stash.containsStashedValue(entry.getValue())) {             entry.setValue(stash.getValue(entry.getValue()).toString()).         }     }     // make a copy of the headers before modifying them for this specific request     Map<String, String> requestHeaders = new HashMap<>(headers).     for (Map.Entry<String, String> entry : requestHeaders.entrySet()) {         if (stash.containsStashedValue(entry.getValue())) {             entry.setValue(stash.getValue(entry.getValue()).toString()).         }     }     HttpEntity entity = createEntity(bodies, requestHeaders).     try {         response = callApiInternal(apiName, requestParams, entity, requestHeaders, nodeSelector).         return response.     } catch (ClientYamlTestResponseException e) {         response = e.getRestTestResponse().         throw e.     } finally {         // if we hit a bad exception the response is null         Object responseBody = response != null ? response.getBody() : null.         // we always stash the last response body         stash.stashValue("body", responseBody).     } }
false;private;2;29;;private HttpEntity createEntity(List<Map<String, Object>> bodies, Map<String, String> headers) throws IOException {     if (bodies.isEmpty()) {         return null.     }     if (bodies.size() == 1) {         XContentType xContentType = getContentType(headers, XContentType.values()).         BytesRef bytesRef = bodyAsBytesRef(bodies.get(0), xContentType).         return new ByteArrayEntity(bytesRef.bytes, bytesRef.offset, bytesRef.length, ContentType.create(xContentType.mediaTypeWithoutParameters(), StandardCharsets.UTF_8)).     } else {         XContentType xContentType = getContentType(headers, STREAMING_CONTENT_TYPES).         List<BytesRef> bytesRefList = new ArrayList<>(bodies.size()).         int totalBytesLength = 0.         for (Map<String, Object> body : bodies) {             BytesRef bytesRef = bodyAsBytesRef(body, xContentType).             bytesRefList.add(bytesRef).             totalBytesLength += bytesRef.length - bytesRef.offset + 1.         }         byte[] bytes = new byte[totalBytesLength].         int position = 0.         for (BytesRef bytesRef : bytesRefList) {             for (int i = bytesRef.offset. i < bytesRef.length. i++) {                 bytes[position++] = bytesRef.bytes[i].             }             bytes[position++] = xContentType.xContent().streamSeparator().         }         return new ByteArrayEntity(bytes, ContentType.create(xContentType.mediaTypeWithoutParameters(), StandardCharsets.UTF_8)).     } }
false;private;2;14;;private XContentType getContentType(Map<String, String> headers, XContentType[] supportedContentTypes) {     XContentType xContentType = null.     String contentType = headers.get("Content-Type").     if (contentType != null) {         xContentType = XContentType.fromMediaType(contentType).     }     if (xContentType != null) {         return xContentType.     }     if (randomizeContentType) {         return RandomizedTest.randomFrom(supportedContentTypes).     }     return XContentType.JSON. }
false;private;2;6;;private BytesRef bodyAsBytesRef(Map<String, Object> bodyAsMap, XContentType xContentType) throws IOException {     Map<String, Object> finalBodyAsMap = stash.replaceStashedValues(bodyAsMap).     try (XContentBuilder builder = XContentFactory.contentBuilder(xContentType)) {         return BytesReference.bytes(builder.map(finalBodyAsMap)).toBytesRef().     } }
true;;5;4;// pkg-private for testing ;// pkg-private for testing ClientYamlTestResponse callApiInternal(String apiName, Map<String, String> params, HttpEntity entity, Map<String, String> headers, NodeSelector nodeSelector) throws IOException {     return clientYamlTestClient.callApi(apiName, params, entity, headers, nodeSelector). }
true;public;1;3;/**  * Extracts a specific value from the last saved response  */ ;/**  * Extracts a specific value from the last saved response  */ public Object response(String path) throws IOException {     return response.evaluate(path, stash). }
true;public;0;5;/**  * Clears the last obtained response and the stashed fields  */ ;/**  * Clears the last obtained response and the stashed fields  */ public void clear() {     logger.debug("resetting client, response and stash").     response = null.     stash.clear(). }
false;public;0;3;;public Stash stash() {     return stash. }
true;public;0;3;/**  * Returns the current es version as a string  */ ;/**  * Returns the current es version as a string  */ public Version esVersion() {     return clientYamlTestClient.getEsVersion(). }
false;public;0;3;;public Version masterVersion() {     return clientYamlTestClient.getMasterVersion(). }
