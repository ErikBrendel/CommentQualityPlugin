commented;modifiers;parameterAmount;loc;comment;code
false;protected,static;0;3;;protected static Index getIndex() {     return index. }
false;protected;0;3;;protected Collection<Class<? extends Plugin>> getPlugins() {     return Collections.emptyList(). }
false;protected;1;2;;protected void initializeAdditionalMappings(MapperService mapperService) throws IOException { }
false;public,static;0;10;;@BeforeClass public static void beforeClass() {     nodeSettings = Settings.builder().put("node.name", AbstractQueryTestCase.class.toString()).put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()).build().     index = new Index(randomAlphaOfLengthBetween(1, 10), randomAlphaOfLength(10)).     nowInMillis = randomNonNegativeLong(). }
false;protected;0;4;;@Override protected NamedXContentRegistry xContentRegistry() {     return serviceHolder.xContentRegistry. }
false;protected;0;3;;protected NamedWriteableRegistry namedWriteableRegistry() {     return serviceHolder.namedWriteableRegistry. }
true;protected,static;0;5;/**  * make sure query names are unique by suffixing them with increasing counter  */ ;/**  * make sure query names are unique by suffixing them with increasing counter  */ protected static String createUniqueRandomName() {     String queryName = randomAlphaOfLengthBetween(1, 10) + queryNameId.     queryNameId++.     return queryName. }
false;protected;0;8;;protected Settings createTestIndexSettings() {     // we have to prefer CURRENT since with the range of versions we support it's rather unlikely to get the current actually.     Version indexVersionCreated = randomBoolean() ? Version.CURRENT : VersionUtils.randomVersionBetween(random(), Version.V_6_0_0, Version.CURRENT).     return Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, indexVersionCreated).build(). }
false;protected,static;0;3;;protected static IndexSettings indexSettings() {     return serviceHolder.idxSettings. }
false;protected,static;1;3;;protected static String expectedFieldName(String builderFieldName) {     return ALIAS_TO_CONCRETE_FIELD_NAME.getOrDefault(builderFieldName, builderFieldName). }
false;public,static;0;7;;@AfterClass public static void afterClass() throws Exception {     IOUtils.close(serviceHolder).     IOUtils.close(serviceHolderWithNoType).     serviceHolder = null.     serviceHolderWithNoType = null. }
false;public;0;21;;@Before public void beforeTest() throws Exception {     if (serviceHolder == null) {         assert serviceHolderWithNoType == null.         // we initialize the serviceHolder and serviceHolderWithNoType just once, but need some         // calls to the randomness source during its setup. In order to not mix these calls with         // the randomness source that is later used in the test method, we use the master seed during         // this setup         long masterSeed = SeedUtils.parseSeed(RandomizedTest.getContext().getRunnerSeedAsString()).         RandomizedTest.getContext().runWithPrivateRandomness(masterSeed, (Callable<Void>) () -> {             serviceHolder = new ServiceHolder(nodeSettings, createTestIndexSettings(), getPlugins(), nowInMillis, AbstractBuilderTestCase.this, true).             serviceHolderWithNoType = new ServiceHolder(nodeSettings, createTestIndexSettings(), getPlugins(), nowInMillis, AbstractBuilderTestCase.this, false).             return null.         }).     }     serviceHolder.clientInvocationHandler.delegate = this.     serviceHolderWithNoType.clientInvocationHandler.delegate = this. }
false;public;0;4;;@Override public MapperService mapperService() {     // need to build / parse inner hits sort fields     return serviceHolder.mapperService. }
false;public;1;4;;@Override public <IFD extends IndexFieldData<?>> IFD getForField(MappedFieldType fieldType) {     // need to build / parse inner hits sort fields     return serviceHolder.indexFieldDataService.getForField(fieldType). }
false;protected,static;1;15;;protected static SearchContext getSearchContext(QueryShardContext context) {     TestSearchContext testSearchContext = new TestSearchContext(context) {          @Override         public MapperService mapperService() {             // need to build / parse inner hits sort fields             return serviceHolder.mapperService.         }          @Override         public <IFD extends IndexFieldData<?>> IFD getForField(MappedFieldType fieldType) {             // need to build / parse inner hits sort fields             return serviceHolder.indexFieldDataService.getForField(fieldType).         }     }.     return testSearchContext. }
false;public;0;5;;@After public void afterTest() {     serviceHolder.clientInvocationHandler.delegate = null.     serviceHolderWithNoType.clientInvocationHandler.delegate = null. }
true;protected;1;3;/**  * Override this to handle {@link Client#get(GetRequest)} calls from parsers / builders  */ ;/**  * Override this to handle {@link Client#get(GetRequest)} calls from parsers / builders  */ protected GetResponse executeGet(GetRequest getRequest) {     throw new UnsupportedOperationException("this test can't handle GET requests"). }
true;protected;1;3;/**  * Override this to handle {@link Client#get(GetRequest)} calls from parsers / builders  */ ;/**  * Override this to handle {@link Client#get(GetRequest)} calls from parsers / builders  */ protected MultiTermVectorsResponse executeMultiTermVectors(MultiTermVectorsRequest mtvRequest) {     throw new UnsupportedOperationException("this test can't handle MultiTermVector requests"). }
true;protected,static;1;3;/**  * @return a new {@link QueryShardContext} with the provided reader  */ ;/**  * @return a new {@link QueryShardContext} with the provided reader  */ protected static QueryShardContext createShardContext(IndexReader reader) {     return serviceHolder.createShardContext(reader). }
true;protected,static;0;3;/**  * @return a new {@link QueryShardContext} based on an index with no type registered  */ ;/**  * @return a new {@link QueryShardContext} based on an index with no type registered  */ protected static QueryShardContext createShardContextWithNoType() {     return serviceHolderWithNoType.createShardContext(null). }
true;protected,static;0;3;/**  * @return a new {@link QueryShardContext} based on the base test index and queryParserService  */ ;/**  * @return a new {@link QueryShardContext} based on the base test index and queryParserService  */ protected static QueryShardContext createShardContext() {     return createShardContext(null). }
false;public;0;4;;@Override public MultiTermVectorsResponse get() throws InterruptedException, ExecutionException {     return delegate.executeMultiTermVectors((MultiTermVectorsRequest) args[0]). }
false;public;3;24;;@Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {     if (method.equals(Client.class.getMethod("get", GetRequest.class, ActionListener.class))) {         GetResponse getResponse = delegate.executeGet((GetRequest) args[0]).         ActionListener<GetResponse> listener = (ActionListener<GetResponse>) args[1].         if (randomBoolean()) {             listener.onResponse(getResponse).         } else {             new Thread(() -> listener.onResponse(getResponse)).start().         }         return null.     } else if (method.equals(Client.class.getMethod("multiTermVectors", MultiTermVectorsRequest.class))) {         return new PlainActionFuture<MultiTermVectorsResponse>() {              @Override             public MultiTermVectorsResponse get() throws InterruptedException, ExecutionException {                 return delegate.executeMultiTermVectors((MultiTermVectorsRequest) args[0]).             }         }.     } else if (method.equals(Object.class.getMethod("toString"))) {         return "MockClient".     }     throw new UnsupportedOperationException("this test can't handle calls to: " + method). }
false;public;2;4;;@Override public void onCache(ShardId shardId, Accountable accountable) { }
false;public;2;4;;@Override public void onRemoval(ShardId shardId, Accountable accountable) { }
false;public;0;3;;@Override public void close() throws IOException { }
false;;1;4;;QueryShardContext createShardContext(IndexReader reader) {     return new QueryShardContext(0, idxSettings, bitsetFilterCache, indexFieldDataService::getForField, mapperService, similarityService, scriptService, xContentRegistry, namedWriteableRegistry, this.client, reader, () -> nowInMillis, null). }
false;;1;6;;ScriptModule createScriptModule(List<ScriptPlugin> scriptPlugins) {     if (scriptPlugins == null || scriptPlugins.isEmpty()) {         return newTestScriptModule().     }     return new ScriptModule(Settings.EMPTY, scriptPlugins). }
