commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;9;;public static GreaterThanAssertion parse(XContentParser parser) throws IOException {     XContentLocation location = parser.getTokenLocation().     Tuple<String, Object> stringObjectTuple = ParserUtils.parseTuple(parser).     if (!(stringObjectTuple.v2() instanceof Comparable)) {         throw new IllegalArgumentException("gt section can only be used with objects that support natural ordering, found " + stringObjectTuple.v2().getClass().getSimpleName()).     }     return new GreaterThanAssertion(location, stringObjectTuple.v1(), stringObjectTuple.v2()). }
false;protected;2;13;;@Override protected void doAssert(Object actualValue, Object expectedValue) {     logger.trace("assert that [{}] is greater than [{}] (field: [{}])", actualValue, expectedValue, getField()).     assertThat("value of [" + getField() + "] is not comparable (got [" + safeClass(actualValue) + "])", actualValue, instanceOf(Comparable.class)).     assertThat("expected value of [" + getField() + "] is not comparable (got [" + expectedValue.getClass() + "])", expectedValue, instanceOf(Comparable.class)).     try {         assertThat(errorMessage(), (Comparable) actualValue, greaterThan((Comparable) expectedValue)).     } catch (ClassCastException e) {         fail("cast error while checking (" + errorMessage() + "): " + e).     } }
false;private;0;3;;private String errorMessage() {     return "field [" + getField() + "] is not greater than [" + getExpectedValue() + "]". }
