commented;modifiers;parameterAmount;loc;comment;code
false;private;1;7;;private void addApi(ClientYamlSuiteRestApi restApi) {     ClientYamlSuiteRestApi previous = restApiMap.putIfAbsent(restApi.getName(), restApi).     if (previous != null) {         throw new IllegalArgumentException("cannot register api [" + restApi.getName() + "] found in [" + restApi.getLocation() + "]. " + "api with same name was already found in [" + previous.getLocation() + "]").     } }
false;public;1;3;;public ClientYamlSuiteRestApi getApi(String api) {     return restApiMap.get(api). }
false;public;0;3;;public Collection<ClientYamlSuiteRestApi> getApis() {     return restApiMap.values(). }
true;public;1;3;/**  * Returns whether the provided parameter is one of those parameters that are supported by all Elasticsearch api  */ ;/**  * Returns whether the provided parameter is one of those parameters that are supported by all Elasticsearch api  */ public boolean isGlobalParameter(String param) {     return globalParameters.contains(param). }
true;public;1;3;/**  * Returns whether the provided parameter is one of those parameters that are supported by the Elasticsearch language clients, meaning  * that they influence the client behaviour and don't get sent to Elasticsearch  */ ;/**  * Returns whether the provided parameter is one of those parameters that are supported by the Elasticsearch language clients, meaning  * that they influence the client behaviour and don't get sent to Elasticsearch  */ public boolean isClientParameter(String name) {     return "ignore".equals(name). }
true;public,static;1;13;/**  * Parses the complete set of REST spec available under the provided directories  */ ;/**  * Parses the complete set of REST spec available under the provided directories  */ public static ClientYamlSuiteRestSpec load(String classpathPrefix) throws Exception {     Path dir = PathUtils.get(ClientYamlSuiteRestSpec.class.getResource(classpathPrefix).toURI()).     ClientYamlSuiteRestSpec restSpec = new ClientYamlSuiteRestSpec().     ClientYamlSuiteRestApiParser restApiParser = new ClientYamlSuiteRestApiParser().     try (Stream<Path> stream = Files.walk(dir)) {         stream.forEach(item -> {             if (item.toString().endsWith(".json")) {                 parseSpecFile(restApiParser, item, restSpec).             }         }).     }     return restSpec. }
false;private,static;3;41;;private static void parseSpecFile(ClientYamlSuiteRestApiParser restApiParser, Path jsonFile, ClientYamlSuiteRestSpec restSpec) {     try (InputStream stream = Files.newInputStream(jsonFile)) {         try (XContentParser parser = JsonXContent.jsonXContent.createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {             String filename = jsonFile.getFileName().toString().             if (filename.equals("_common.json")) {                 String currentFieldName = null.                 while (parser.nextToken() != XContentParser.Token.END_OBJECT) {                     if (parser.currentToken() == XContentParser.Token.FIELD_NAME) {                         currentFieldName = parser.currentName().                     } else if (parser.currentToken() == XContentParser.Token.START_OBJECT && "params".equals(currentFieldName)) {                         while (parser.nextToken() == XContentParser.Token.FIELD_NAME) {                             String param = parser.currentName().                             if (restSpec.globalParameters.contains(param)) {                                 throw new IllegalArgumentException("Found duplicate global param [" + param + "]").                             }                             restSpec.globalParameters.add(param).                             parser.nextToken().                             if (parser.currentToken() != XContentParser.Token.START_OBJECT) {                                 throw new IllegalArgumentException("Expected params field in rest api definition to " + "contain an object").                             }                             parser.skipChildren().                         }                     }                 }             } else {                 ClientYamlSuiteRestApi restApi = restApiParser.parse(jsonFile.toString(), parser).                 String expectedApiName = filename.substring(0, filename.lastIndexOf('.')).                 if (restApi.getName().equals(expectedApiName) == false) {                     throw new IllegalArgumentException("found api [" + restApi.getName() + "] in [" + jsonFile.toString() + "]. " + "Each api is expected to have the same name as the file that defines it.").                 }                 restSpec.addApi(restApi).             }         }     } catch (IOException ex) {         throw new UncheckedIOException("Can't parse rest spec file: [" + jsonFile + "]", ex).     } }
