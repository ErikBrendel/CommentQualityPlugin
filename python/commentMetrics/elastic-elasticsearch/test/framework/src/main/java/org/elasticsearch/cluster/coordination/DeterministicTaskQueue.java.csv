# id;timestamp;commentText;codeText;commentWords;codeWords
DeterministicTaskQueue -> public void scheduleNow(final Runnable task);1544081506;Schedule a task for immediate execution.;public void scheduleNow(final Runnable task) {_        if (executionDelayVariabilityMillis > 0 && random.nextBoolean()) {_            final long executionDelay = RandomNumbers.randomLongBetween(random, 1, executionDelayVariabilityMillis)__            final DeferredTask deferredTask = new DeferredTask(currentTimeMillis + executionDelay, task)__            logger.trace("scheduleNow: delaying [{}ms], scheduling {}", executionDelay, deferredTask)__            scheduleDeferredTask(deferredTask)__        } else {_            logger.trace("scheduleNow: adding runnable {}", task)__            runnableTasks.add(task)__        }_    };schedule,a,task,for,immediate,execution;public,void,schedule,now,final,runnable,task,if,execution,delay,variability,millis,0,random,next,boolean,final,long,execution,delay,random,numbers,random,long,between,random,1,execution,delay,variability,millis,final,deferred,task,deferred,task,new,deferred,task,current,time,millis,execution,delay,task,logger,trace,schedule,now,delaying,ms,scheduling,execution,delay,deferred,task,schedule,deferred,task,deferred,task,else,logger,trace,schedule,now,adding,runnable,task,runnable,tasks,add,task
DeterministicTaskQueue -> public void scheduleNow(final Runnable task);1546251441;Schedule a task for immediate execution.;public void scheduleNow(final Runnable task) {_        if (executionDelayVariabilityMillis > 0 && random.nextBoolean()) {_            final long executionDelay = RandomNumbers.randomLongBetween(random, 1, executionDelayVariabilityMillis)__            final DeferredTask deferredTask = new DeferredTask(currentTimeMillis + executionDelay, task)__            logger.trace("scheduleNow: delaying [{}ms], scheduling {}", executionDelay, deferredTask)__            scheduleDeferredTask(deferredTask)__        } else {_            logger.trace("scheduleNow: adding runnable {}", task)__            runnableTasks.add(task)__        }_    };schedule,a,task,for,immediate,execution;public,void,schedule,now,final,runnable,task,if,execution,delay,variability,millis,0,random,next,boolean,final,long,execution,delay,random,numbers,random,long,between,random,1,execution,delay,variability,millis,final,deferred,task,deferred,task,new,deferred,task,current,time,millis,execution,delay,task,logger,trace,schedule,now,delaying,ms,scheduling,execution,delay,deferred,task,schedule,deferred,task,deferred,task,else,logger,trace,schedule,now,adding,runnable,task,runnable,tasks,add,task
DeterministicTaskQueue -> public void scheduleNow(final Runnable task);1548953505;Schedule a task for immediate execution.;public void scheduleNow(final Runnable task) {_        if (executionDelayVariabilityMillis > 0 && random.nextBoolean()) {_            final long executionDelay = RandomNumbers.randomLongBetween(random, 1, executionDelayVariabilityMillis)__            final DeferredTask deferredTask = new DeferredTask(currentTimeMillis + executionDelay, task)__            logger.trace("scheduleNow: delaying [{}ms], scheduling {}", executionDelay, deferredTask)__            scheduleDeferredTask(deferredTask)__        } else {_            logger.trace("scheduleNow: adding runnable {}", task)__            runnableTasks.add(task)__        }_    };schedule,a,task,for,immediate,execution;public,void,schedule,now,final,runnable,task,if,execution,delay,variability,millis,0,random,next,boolean,final,long,execution,delay,random,numbers,random,long,between,random,1,execution,delay,variability,millis,final,deferred,task,deferred,task,new,deferred,task,current,time,millis,execution,delay,task,logger,trace,schedule,now,delaying,ms,scheduling,execution,delay,deferred,task,schedule,deferred,task,deferred,task,else,logger,trace,schedule,now,adding,runnable,task,runnable,tasks,add,task
DeterministicTaskQueue -> public void scheduleNow(final Runnable task);1550737421;Schedule a task for immediate execution.;public void scheduleNow(final Runnable task) {_        if (executionDelayVariabilityMillis > 0 && random.nextBoolean()) {_            final long executionDelay = RandomNumbers.randomLongBetween(random, 1, executionDelayVariabilityMillis)__            final DeferredTask deferredTask = new DeferredTask(currentTimeMillis + executionDelay, task)__            logger.trace("scheduleNow: delaying [{}ms], scheduling {}", executionDelay, deferredTask)__            scheduleDeferredTask(deferredTask)__        } else {_            logger.trace("scheduleNow: adding runnable {}", task)__            runnableTasks.add(task)__        }_    };schedule,a,task,for,immediate,execution;public,void,schedule,now,final,runnable,task,if,execution,delay,variability,millis,0,random,next,boolean,final,long,execution,delay,random,numbers,random,long,between,random,1,execution,delay,variability,millis,final,deferred,task,deferred,task,new,deferred,task,current,time,millis,execution,delay,task,logger,trace,schedule,now,delaying,ms,scheduling,execution,delay,deferred,task,schedule,deferred,task,deferred,task,else,logger,trace,schedule,now,adding,runnable,task,runnable,tasks,add,task
DeterministicTaskQueue -> public boolean hasDeferredTasks();1544081506;@return whether there are any deferred tasks, i.e. tasks that are scheduled for the future.;public boolean hasDeferredTasks() {_        return deferredTasks.isEmpty() == false__    };return,whether,there,are,any,deferred,tasks,i,e,tasks,that,are,scheduled,for,the,future;public,boolean,has,deferred,tasks,return,deferred,tasks,is,empty,false
DeterministicTaskQueue -> public boolean hasDeferredTasks();1546251441;@return whether there are any deferred tasks, i.e. tasks that are scheduled for the future.;public boolean hasDeferredTasks() {_        return deferredTasks.isEmpty() == false__    };return,whether,there,are,any,deferred,tasks,i,e,tasks,that,are,scheduled,for,the,future;public,boolean,has,deferred,tasks,return,deferred,tasks,is,empty,false
DeterministicTaskQueue -> public boolean hasDeferredTasks();1548953505;@return whether there are any deferred tasks, i.e. tasks that are scheduled for the future.;public boolean hasDeferredTasks() {_        return deferredTasks.isEmpty() == false__    };return,whether,there,are,any,deferred,tasks,i,e,tasks,that,are,scheduled,for,the,future;public,boolean,has,deferred,tasks,return,deferred,tasks,is,empty,false
DeterministicTaskQueue -> public boolean hasDeferredTasks();1550737421;@return whether there are any deferred tasks, i.e. tasks that are scheduled for the future.;public boolean hasDeferredTasks() {_        return deferredTasks.isEmpty() == false__    };return,whether,there,are,any,deferred,tasks,i,e,tasks,that,are,scheduled,for,the,future;public,boolean,has,deferred,tasks,return,deferred,tasks,is,empty,false
DeterministicTaskQueue -> public long getCurrentTimeMillis();1544081506;@return the current (simulated) time, in milliseconds.;public long getCurrentTimeMillis() {_        return currentTimeMillis__    };return,the,current,simulated,time,in,milliseconds;public,long,get,current,time,millis,return,current,time,millis
DeterministicTaskQueue -> public long getCurrentTimeMillis();1546251441;@return the current (simulated) time, in milliseconds.;public long getCurrentTimeMillis() {_        return currentTimeMillis__    };return,the,current,simulated,time,in,milliseconds;public,long,get,current,time,millis,return,current,time,millis
DeterministicTaskQueue -> public long getCurrentTimeMillis();1548953505;@return the current (simulated) time, in milliseconds.;public long getCurrentTimeMillis() {_        return currentTimeMillis__    };return,the,current,simulated,time,in,milliseconds;public,long,get,current,time,millis,return,current,time,millis
DeterministicTaskQueue -> public long getCurrentTimeMillis();1550737421;@return the current (simulated) time, in milliseconds.;public long getCurrentTimeMillis() {_        return currentTimeMillis__    };return,the,current,simulated,time,in,milliseconds;public,long,get,current,time,millis,return,current,time,millis
DeterministicTaskQueue -> public ExecutorService getExecutorService(Function<Runnable, Runnable> runnableWrapper);1544081506;@return A <code>ExecutorService</code> that uses this task queue and wraps <code>Runnable</code>s in the given wrapper.;public ExecutorService getExecutorService(Function<Runnable, Runnable> runnableWrapper) {_        return new ExecutorService() {__            @Override_            public void shutdown() {_                throw new UnsupportedOperationException()__            }__            @Override_            public List<Runnable> shutdownNow() {_                throw new UnsupportedOperationException()__            }__            @Override_            public boolean isShutdown() {_                throw new UnsupportedOperationException()__            }__            @Override_            public boolean isTerminated() {_                throw new UnsupportedOperationException()__            }__            @Override_            public boolean awaitTermination(long timeout, TimeUnit unit) {_                throw new UnsupportedOperationException()__            }__            @Override_            public <T> Future<T> submit(Callable<T> task) {_                throw new UnsupportedOperationException()__            }__            @Override_            public <T> Future<T> submit(Runnable task, T result) {_                throw new UnsupportedOperationException()__            }__            @Override_            public Future<?> submit(Runnable task) {_                throw new UnsupportedOperationException()__            }__            @Override_            public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) {_                throw new UnsupportedOperationException()__            }__            @Override_            public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) {_                throw new UnsupportedOperationException()__            }__            @Override_            public <T> T invokeAny(Collection<? extends Callable<T>> tasks) {_                throw new UnsupportedOperationException()__            }__            @Override_            public <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) {_                throw new UnsupportedOperationException()__            }__            @Override_            public void execute(Runnable command) {_                scheduleNow(runnableWrapper.apply(command))__            }_        }__    };return,a,code,executor,service,code,that,uses,this,task,queue,and,wraps,code,runnable,code,s,in,the,given,wrapper;public,executor,service,get,executor,service,function,runnable,runnable,runnable,wrapper,return,new,executor,service,override,public,void,shutdown,throw,new,unsupported,operation,exception,override,public,list,runnable,shutdown,now,throw,new,unsupported,operation,exception,override,public,boolean,is,shutdown,throw,new,unsupported,operation,exception,override,public,boolean,is,terminated,throw,new,unsupported,operation,exception,override,public,boolean,await,termination,long,timeout,time,unit,unit,throw,new,unsupported,operation,exception,override,public,t,future,t,submit,callable,t,task,throw,new,unsupported,operation,exception,override,public,t,future,t,submit,runnable,task,t,result,throw,new,unsupported,operation,exception,override,public,future,submit,runnable,task,throw,new,unsupported,operation,exception,override,public,t,list,future,t,invoke,all,collection,extends,callable,t,tasks,throw,new,unsupported,operation,exception,override,public,t,list,future,t,invoke,all,collection,extends,callable,t,tasks,long,timeout,time,unit,unit,throw,new,unsupported,operation,exception,override,public,t,t,invoke,any,collection,extends,callable,t,tasks,throw,new,unsupported,operation,exception,override,public,t,t,invoke,any,collection,extends,callable,t,tasks,long,timeout,time,unit,unit,throw,new,unsupported,operation,exception,override,public,void,execute,runnable,command,schedule,now,runnable,wrapper,apply,command
DeterministicTaskQueue -> public ExecutorService getExecutorService(Function<Runnable, Runnable> runnableWrapper);1546251441;@return A <code>ExecutorService</code> that uses this task queue and wraps <code>Runnable</code>s in the given wrapper.;public ExecutorService getExecutorService(Function<Runnable, Runnable> runnableWrapper) {_        return new ExecutorService() {__            @Override_            public void shutdown() {_                throw new UnsupportedOperationException()__            }__            @Override_            public List<Runnable> shutdownNow() {_                throw new UnsupportedOperationException()__            }__            @Override_            public boolean isShutdown() {_                throw new UnsupportedOperationException()__            }__            @Override_            public boolean isTerminated() {_                throw new UnsupportedOperationException()__            }__            @Override_            public boolean awaitTermination(long timeout, TimeUnit unit) {_                throw new UnsupportedOperationException()__            }__            @Override_            public <T> Future<T> submit(Callable<T> task) {_                throw new UnsupportedOperationException()__            }__            @Override_            public <T> Future<T> submit(Runnable task, T result) {_                throw new UnsupportedOperationException()__            }__            @Override_            public Future<?> submit(Runnable task) {_                throw new UnsupportedOperationException()__            }__            @Override_            public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) {_                throw new UnsupportedOperationException()__            }__            @Override_            public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) {_                throw new UnsupportedOperationException()__            }__            @Override_            public <T> T invokeAny(Collection<? extends Callable<T>> tasks) {_                throw new UnsupportedOperationException()__            }__            @Override_            public <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) {_                throw new UnsupportedOperationException()__            }__            @Override_            public void execute(Runnable command) {_                scheduleNow(runnableWrapper.apply(command))__            }_        }__    };return,a,code,executor,service,code,that,uses,this,task,queue,and,wraps,code,runnable,code,s,in,the,given,wrapper;public,executor,service,get,executor,service,function,runnable,runnable,runnable,wrapper,return,new,executor,service,override,public,void,shutdown,throw,new,unsupported,operation,exception,override,public,list,runnable,shutdown,now,throw,new,unsupported,operation,exception,override,public,boolean,is,shutdown,throw,new,unsupported,operation,exception,override,public,boolean,is,terminated,throw,new,unsupported,operation,exception,override,public,boolean,await,termination,long,timeout,time,unit,unit,throw,new,unsupported,operation,exception,override,public,t,future,t,submit,callable,t,task,throw,new,unsupported,operation,exception,override,public,t,future,t,submit,runnable,task,t,result,throw,new,unsupported,operation,exception,override,public,future,submit,runnable,task,throw,new,unsupported,operation,exception,override,public,t,list,future,t,invoke,all,collection,extends,callable,t,tasks,throw,new,unsupported,operation,exception,override,public,t,list,future,t,invoke,all,collection,extends,callable,t,tasks,long,timeout,time,unit,unit,throw,new,unsupported,operation,exception,override,public,t,t,invoke,any,collection,extends,callable,t,tasks,throw,new,unsupported,operation,exception,override,public,t,t,invoke,any,collection,extends,callable,t,tasks,long,timeout,time,unit,unit,throw,new,unsupported,operation,exception,override,public,void,execute,runnable,command,schedule,now,runnable,wrapper,apply,command
DeterministicTaskQueue -> public ExecutorService getExecutorService(Function<Runnable, Runnable> runnableWrapper);1548953505;@return A <code>ExecutorService</code> that uses this task queue and wraps <code>Runnable</code>s in the given wrapper.;public ExecutorService getExecutorService(Function<Runnable, Runnable> runnableWrapper) {_        return new ExecutorService() {__            @Override_            public void shutdown() {_                throw new UnsupportedOperationException()__            }__            @Override_            public List<Runnable> shutdownNow() {_                throw new UnsupportedOperationException()__            }__            @Override_            public boolean isShutdown() {_                throw new UnsupportedOperationException()__            }__            @Override_            public boolean isTerminated() {_                throw new UnsupportedOperationException()__            }__            @Override_            public boolean awaitTermination(long timeout, TimeUnit unit) {_                throw new UnsupportedOperationException()__            }__            @Override_            public <T> Future<T> submit(Callable<T> task) {_                throw new UnsupportedOperationException()__            }__            @Override_            public <T> Future<T> submit(Runnable task, T result) {_                throw new UnsupportedOperationException()__            }__            @Override_            public Future<?> submit(Runnable task) {_                throw new UnsupportedOperationException()__            }__            @Override_            public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) {_                throw new UnsupportedOperationException()__            }__            @Override_            public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) {_                throw new UnsupportedOperationException()__            }__            @Override_            public <T> T invokeAny(Collection<? extends Callable<T>> tasks) {_                throw new UnsupportedOperationException()__            }__            @Override_            public <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) {_                throw new UnsupportedOperationException()__            }__            @Override_            public void execute(Runnable command) {_                scheduleNow(runnableWrapper.apply(command))__            }_        }__    };return,a,code,executor,service,code,that,uses,this,task,queue,and,wraps,code,runnable,code,s,in,the,given,wrapper;public,executor,service,get,executor,service,function,runnable,runnable,runnable,wrapper,return,new,executor,service,override,public,void,shutdown,throw,new,unsupported,operation,exception,override,public,list,runnable,shutdown,now,throw,new,unsupported,operation,exception,override,public,boolean,is,shutdown,throw,new,unsupported,operation,exception,override,public,boolean,is,terminated,throw,new,unsupported,operation,exception,override,public,boolean,await,termination,long,timeout,time,unit,unit,throw,new,unsupported,operation,exception,override,public,t,future,t,submit,callable,t,task,throw,new,unsupported,operation,exception,override,public,t,future,t,submit,runnable,task,t,result,throw,new,unsupported,operation,exception,override,public,future,submit,runnable,task,throw,new,unsupported,operation,exception,override,public,t,list,future,t,invoke,all,collection,extends,callable,t,tasks,throw,new,unsupported,operation,exception,override,public,t,list,future,t,invoke,all,collection,extends,callable,t,tasks,long,timeout,time,unit,unit,throw,new,unsupported,operation,exception,override,public,t,t,invoke,any,collection,extends,callable,t,tasks,throw,new,unsupported,operation,exception,override,public,t,t,invoke,any,collection,extends,callable,t,tasks,long,timeout,time,unit,unit,throw,new,unsupported,operation,exception,override,public,void,execute,runnable,command,schedule,now,runnable,wrapper,apply,command
DeterministicTaskQueue -> public ExecutorService getExecutorService(Function<Runnable, Runnable> runnableWrapper);1550737421;@return A <code>ExecutorService</code> that uses this task queue and wraps <code>Runnable</code>s in the given wrapper.;public ExecutorService getExecutorService(Function<Runnable, Runnable> runnableWrapper) {_        return new ExecutorService() {__            @Override_            public void shutdown() {_                throw new UnsupportedOperationException()__            }__            @Override_            public List<Runnable> shutdownNow() {_                throw new UnsupportedOperationException()__            }__            @Override_            public boolean isShutdown() {_                throw new UnsupportedOperationException()__            }__            @Override_            public boolean isTerminated() {_                throw new UnsupportedOperationException()__            }__            @Override_            public boolean awaitTermination(long timeout, TimeUnit unit) {_                throw new UnsupportedOperationException()__            }__            @Override_            public <T> Future<T> submit(Callable<T> task) {_                throw new UnsupportedOperationException()__            }__            @Override_            public <T> Future<T> submit(Runnable task, T result) {_                throw new UnsupportedOperationException()__            }__            @Override_            public Future<?> submit(Runnable task) {_                throw new UnsupportedOperationException()__            }__            @Override_            public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) {_                throw new UnsupportedOperationException()__            }__            @Override_            public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) {_                throw new UnsupportedOperationException()__            }__            @Override_            public <T> T invokeAny(Collection<? extends Callable<T>> tasks) {_                throw new UnsupportedOperationException()__            }__            @Override_            public <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) {_                throw new UnsupportedOperationException()__            }__            @Override_            public void execute(Runnable command) {_                scheduleNow(runnableWrapper.apply(command))__            }_        }__    };return,a,code,executor,service,code,that,uses,this,task,queue,and,wraps,code,runnable,code,s,in,the,given,wrapper;public,executor,service,get,executor,service,function,runnable,runnable,runnable,wrapper,return,new,executor,service,override,public,void,shutdown,throw,new,unsupported,operation,exception,override,public,list,runnable,shutdown,now,throw,new,unsupported,operation,exception,override,public,boolean,is,shutdown,throw,new,unsupported,operation,exception,override,public,boolean,is,terminated,throw,new,unsupported,operation,exception,override,public,boolean,await,termination,long,timeout,time,unit,unit,throw,new,unsupported,operation,exception,override,public,t,future,t,submit,callable,t,task,throw,new,unsupported,operation,exception,override,public,t,future,t,submit,runnable,task,t,result,throw,new,unsupported,operation,exception,override,public,future,submit,runnable,task,throw,new,unsupported,operation,exception,override,public,t,list,future,t,invoke,all,collection,extends,callable,t,tasks,throw,new,unsupported,operation,exception,override,public,t,list,future,t,invoke,all,collection,extends,callable,t,tasks,long,timeout,time,unit,unit,throw,new,unsupported,operation,exception,override,public,t,t,invoke,any,collection,extends,callable,t,tasks,throw,new,unsupported,operation,exception,override,public,t,t,invoke,any,collection,extends,callable,t,tasks,long,timeout,time,unit,unit,throw,new,unsupported,operation,exception,override,public,void,execute,runnable,command,schedule,now,runnable,wrapper,apply,command
DeterministicTaskQueue -> public ThreadPool getThreadPool();1544081506;@return A <code>ThreadPool</code> that uses this task queue.;public ThreadPool getThreadPool() {_        return getThreadPool(Function.identity())__    };return,a,code,thread,pool,code,that,uses,this,task,queue;public,thread,pool,get,thread,pool,return,get,thread,pool,function,identity
DeterministicTaskQueue -> public ThreadPool getThreadPool();1546251441;@return A <code>ThreadPool</code> that uses this task queue.;public ThreadPool getThreadPool() {_        return getThreadPool(Function.identity())__    };return,a,code,thread,pool,code,that,uses,this,task,queue;public,thread,pool,get,thread,pool,return,get,thread,pool,function,identity
DeterministicTaskQueue -> public ThreadPool getThreadPool();1548953505;@return A <code>ThreadPool</code> that uses this task queue.;public ThreadPool getThreadPool() {_        return getThreadPool(Function.identity())__    };return,a,code,thread,pool,code,that,uses,this,task,queue;public,thread,pool,get,thread,pool,return,get,thread,pool,function,identity
DeterministicTaskQueue -> public ThreadPool getThreadPool();1550737421;@return A <code>ThreadPool</code> that uses this task queue.;public ThreadPool getThreadPool() {_        return getThreadPool(Function.identity())__    };return,a,code,thread,pool,code,that,uses,this,task,queue;public,thread,pool,get,thread,pool,return,get,thread,pool,function,identity
DeterministicTaskQueue -> public void advanceTime();1544081506;Advance the current time to the time of the next deferred task, and update the sets of deferred and runnable tasks accordingly.;public void advanceTime() {_        assert hasDeferredTasks()__        assert currentTimeMillis < nextDeferredTaskExecutionTimeMillis___        logger.trace("advanceTime: from [{}ms] to [{}ms]", currentTimeMillis, nextDeferredTaskExecutionTimeMillis)__        currentTimeMillis = nextDeferredTaskExecutionTimeMillis__        assert currentTimeMillis <= latestDeferredExecutionTime : latestDeferredExecutionTime + " < " + currentTimeMillis___        nextDeferredTaskExecutionTimeMillis = Long.MAX_VALUE__        List<DeferredTask> remainingDeferredTasks = new ArrayList<>()__        for (final DeferredTask deferredTask : deferredTasks) {_            assert currentTimeMillis <= deferredTask.getExecutionTimeMillis()__            if (deferredTask.getExecutionTimeMillis() == currentTimeMillis) {_                logger.trace("advanceTime: no longer deferred: {}", deferredTask)__                runnableTasks.add(deferredTask.getTask())__            } else {_                remainingDeferredTasks.add(deferredTask)__                nextDeferredTaskExecutionTimeMillis = Math.min(nextDeferredTaskExecutionTimeMillis, deferredTask.getExecutionTimeMillis())__            }_        }_        deferredTasks = remainingDeferredTasks___        assert deferredTasks.isEmpty() == (nextDeferredTaskExecutionTimeMillis == Long.MAX_VALUE)__    };advance,the,current,time,to,the,time,of,the,next,deferred,task,and,update,the,sets,of,deferred,and,runnable,tasks,accordingly;public,void,advance,time,assert,has,deferred,tasks,assert,current,time,millis,next,deferred,task,execution,time,millis,logger,trace,advance,time,from,ms,to,ms,current,time,millis,next,deferred,task,execution,time,millis,current,time,millis,next,deferred,task,execution,time,millis,assert,current,time,millis,latest,deferred,execution,time,latest,deferred,execution,time,current,time,millis,next,deferred,task,execution,time,millis,long,list,deferred,task,remaining,deferred,tasks,new,array,list,for,final,deferred,task,deferred,task,deferred,tasks,assert,current,time,millis,deferred,task,get,execution,time,millis,if,deferred,task,get,execution,time,millis,current,time,millis,logger,trace,advance,time,no,longer,deferred,deferred,task,runnable,tasks,add,deferred,task,get,task,else,remaining,deferred,tasks,add,deferred,task,next,deferred,task,execution,time,millis,math,min,next,deferred,task,execution,time,millis,deferred,task,get,execution,time,millis,deferred,tasks,remaining,deferred,tasks,assert,deferred,tasks,is,empty,next,deferred,task,execution,time,millis,long
DeterministicTaskQueue -> public void advanceTime();1546251441;Advance the current time to the time of the next deferred task, and update the sets of deferred and runnable tasks accordingly.;public void advanceTime() {_        assert hasDeferredTasks()__        assert currentTimeMillis < nextDeferredTaskExecutionTimeMillis___        logger.trace("advanceTime: from [{}ms] to [{}ms]", currentTimeMillis, nextDeferredTaskExecutionTimeMillis)__        currentTimeMillis = nextDeferredTaskExecutionTimeMillis__        assert currentTimeMillis <= latestDeferredExecutionTime : latestDeferredExecutionTime + " < " + currentTimeMillis___        nextDeferredTaskExecutionTimeMillis = Long.MAX_VALUE__        List<DeferredTask> remainingDeferredTasks = new ArrayList<>()__        for (final DeferredTask deferredTask : deferredTasks) {_            assert currentTimeMillis <= deferredTask.getExecutionTimeMillis()__            if (deferredTask.getExecutionTimeMillis() == currentTimeMillis) {_                logger.trace("advanceTime: no longer deferred: {}", deferredTask)__                runnableTasks.add(deferredTask.getTask())__            } else {_                remainingDeferredTasks.add(deferredTask)__                nextDeferredTaskExecutionTimeMillis = Math.min(nextDeferredTaskExecutionTimeMillis, deferredTask.getExecutionTimeMillis())__            }_        }_        deferredTasks = remainingDeferredTasks___        assert deferredTasks.isEmpty() == (nextDeferredTaskExecutionTimeMillis == Long.MAX_VALUE)__    };advance,the,current,time,to,the,time,of,the,next,deferred,task,and,update,the,sets,of,deferred,and,runnable,tasks,accordingly;public,void,advance,time,assert,has,deferred,tasks,assert,current,time,millis,next,deferred,task,execution,time,millis,logger,trace,advance,time,from,ms,to,ms,current,time,millis,next,deferred,task,execution,time,millis,current,time,millis,next,deferred,task,execution,time,millis,assert,current,time,millis,latest,deferred,execution,time,latest,deferred,execution,time,current,time,millis,next,deferred,task,execution,time,millis,long,list,deferred,task,remaining,deferred,tasks,new,array,list,for,final,deferred,task,deferred,task,deferred,tasks,assert,current,time,millis,deferred,task,get,execution,time,millis,if,deferred,task,get,execution,time,millis,current,time,millis,logger,trace,advance,time,no,longer,deferred,deferred,task,runnable,tasks,add,deferred,task,get,task,else,remaining,deferred,tasks,add,deferred,task,next,deferred,task,execution,time,millis,math,min,next,deferred,task,execution,time,millis,deferred,task,get,execution,time,millis,deferred,tasks,remaining,deferred,tasks,assert,deferred,tasks,is,empty,next,deferred,task,execution,time,millis,long
DeterministicTaskQueue -> public void advanceTime();1548953505;Advance the current time to the time of the next deferred task, and update the sets of deferred and runnable tasks accordingly.;public void advanceTime() {_        assert hasDeferredTasks()__        assert currentTimeMillis < nextDeferredTaskExecutionTimeMillis___        logger.trace("advanceTime: from [{}ms] to [{}ms]", currentTimeMillis, nextDeferredTaskExecutionTimeMillis)__        currentTimeMillis = nextDeferredTaskExecutionTimeMillis__        assert currentTimeMillis <= latestDeferredExecutionTime : latestDeferredExecutionTime + " < " + currentTimeMillis___        nextDeferredTaskExecutionTimeMillis = Long.MAX_VALUE__        List<DeferredTask> remainingDeferredTasks = new ArrayList<>()__        for (final DeferredTask deferredTask : deferredTasks) {_            assert currentTimeMillis <= deferredTask.getExecutionTimeMillis()__            if (deferredTask.getExecutionTimeMillis() == currentTimeMillis) {_                logger.trace("advanceTime: no longer deferred: {}", deferredTask)__                runnableTasks.add(deferredTask.getTask())__            } else {_                remainingDeferredTasks.add(deferredTask)__                nextDeferredTaskExecutionTimeMillis = Math.min(nextDeferredTaskExecutionTimeMillis, deferredTask.getExecutionTimeMillis())__            }_        }_        deferredTasks = remainingDeferredTasks___        assert deferredTasks.isEmpty() == (nextDeferredTaskExecutionTimeMillis == Long.MAX_VALUE)__    };advance,the,current,time,to,the,time,of,the,next,deferred,task,and,update,the,sets,of,deferred,and,runnable,tasks,accordingly;public,void,advance,time,assert,has,deferred,tasks,assert,current,time,millis,next,deferred,task,execution,time,millis,logger,trace,advance,time,from,ms,to,ms,current,time,millis,next,deferred,task,execution,time,millis,current,time,millis,next,deferred,task,execution,time,millis,assert,current,time,millis,latest,deferred,execution,time,latest,deferred,execution,time,current,time,millis,next,deferred,task,execution,time,millis,long,list,deferred,task,remaining,deferred,tasks,new,array,list,for,final,deferred,task,deferred,task,deferred,tasks,assert,current,time,millis,deferred,task,get,execution,time,millis,if,deferred,task,get,execution,time,millis,current,time,millis,logger,trace,advance,time,no,longer,deferred,deferred,task,runnable,tasks,add,deferred,task,get,task,else,remaining,deferred,tasks,add,deferred,task,next,deferred,task,execution,time,millis,math,min,next,deferred,task,execution,time,millis,deferred,task,get,execution,time,millis,deferred,tasks,remaining,deferred,tasks,assert,deferred,tasks,is,empty,next,deferred,task,execution,time,millis,long
DeterministicTaskQueue -> public void advanceTime();1550737421;Advance the current time to the time of the next deferred task, and update the sets of deferred and runnable tasks accordingly.;public void advanceTime() {_        assert hasDeferredTasks()__        assert currentTimeMillis < nextDeferredTaskExecutionTimeMillis___        logger.trace("advanceTime: from [{}ms] to [{}ms]", currentTimeMillis, nextDeferredTaskExecutionTimeMillis)__        currentTimeMillis = nextDeferredTaskExecutionTimeMillis__        assert currentTimeMillis <= latestDeferredExecutionTime : latestDeferredExecutionTime + " < " + currentTimeMillis___        nextDeferredTaskExecutionTimeMillis = Long.MAX_VALUE__        List<DeferredTask> remainingDeferredTasks = new ArrayList<>()__        for (final DeferredTask deferredTask : deferredTasks) {_            assert currentTimeMillis <= deferredTask.getExecutionTimeMillis()__            if (deferredTask.getExecutionTimeMillis() == currentTimeMillis) {_                logger.trace("advanceTime: no longer deferred: {}", deferredTask)__                runnableTasks.add(deferredTask.getTask())__            } else {_                remainingDeferredTasks.add(deferredTask)__                nextDeferredTaskExecutionTimeMillis = Math.min(nextDeferredTaskExecutionTimeMillis, deferredTask.getExecutionTimeMillis())__            }_        }_        deferredTasks = remainingDeferredTasks___        assert deferredTasks.isEmpty() == (nextDeferredTaskExecutionTimeMillis == Long.MAX_VALUE)__    };advance,the,current,time,to,the,time,of,the,next,deferred,task,and,update,the,sets,of,deferred,and,runnable,tasks,accordingly;public,void,advance,time,assert,has,deferred,tasks,assert,current,time,millis,next,deferred,task,execution,time,millis,logger,trace,advance,time,from,ms,to,ms,current,time,millis,next,deferred,task,execution,time,millis,current,time,millis,next,deferred,task,execution,time,millis,assert,current,time,millis,latest,deferred,execution,time,latest,deferred,execution,time,current,time,millis,next,deferred,task,execution,time,millis,long,list,deferred,task,remaining,deferred,tasks,new,array,list,for,final,deferred,task,deferred,task,deferred,tasks,assert,current,time,millis,deferred,task,get,execution,time,millis,if,deferred,task,get,execution,time,millis,current,time,millis,logger,trace,advance,time,no,longer,deferred,deferred,task,runnable,tasks,add,deferred,task,get,task,else,remaining,deferred,tasks,add,deferred,task,next,deferred,task,execution,time,millis,math,min,next,deferred,task,execution,time,millis,deferred,task,get,execution,time,millis,deferred,tasks,remaining,deferred,tasks,assert,deferred,tasks,is,empty,next,deferred,task,execution,time,millis,long
DeterministicTaskQueue -> public boolean hasRunnableTasks();1544081506;@return whether there are any runnable tasks.;public boolean hasRunnableTasks() {_        return runnableTasks.isEmpty() == false__    };return,whether,there,are,any,runnable,tasks;public,boolean,has,runnable,tasks,return,runnable,tasks,is,empty,false
DeterministicTaskQueue -> public boolean hasRunnableTasks();1546251441;@return whether there are any runnable tasks.;public boolean hasRunnableTasks() {_        return runnableTasks.isEmpty() == false__    };return,whether,there,are,any,runnable,tasks;public,boolean,has,runnable,tasks,return,runnable,tasks,is,empty,false
DeterministicTaskQueue -> public boolean hasRunnableTasks();1548953505;@return whether there are any runnable tasks.;public boolean hasRunnableTasks() {_        return runnableTasks.isEmpty() == false__    };return,whether,there,are,any,runnable,tasks;public,boolean,has,runnable,tasks,return,runnable,tasks,is,empty,false
DeterministicTaskQueue -> public boolean hasRunnableTasks();1550737421;@return whether there are any runnable tasks.;public boolean hasRunnableTasks() {_        return runnableTasks.isEmpty() == false__    };return,whether,there,are,any,runnable,tasks;public,boolean,has,runnable,tasks,return,runnable,tasks,is,empty,false
DeterministicTaskQueue -> public void runRandomTask();1544081506;Runs an arbitrary runnable task.;public void runRandomTask() {_        assert hasRunnableTasks()__        runTask(RandomNumbers.randomIntBetween(random, 0, runnableTasks.size() - 1))__    };runs,an,arbitrary,runnable,task;public,void,run,random,task,assert,has,runnable,tasks,run,task,random,numbers,random,int,between,random,0,runnable,tasks,size,1
DeterministicTaskQueue -> public void runRandomTask();1546251441;Runs an arbitrary runnable task.;public void runRandomTask() {_        assert hasRunnableTasks()__        runTask(RandomNumbers.randomIntBetween(random, 0, runnableTasks.size() - 1))__    };runs,an,arbitrary,runnable,task;public,void,run,random,task,assert,has,runnable,tasks,run,task,random,numbers,random,int,between,random,0,runnable,tasks,size,1
DeterministicTaskQueue -> public void runRandomTask();1548953505;Runs an arbitrary runnable task.;public void runRandomTask() {_        assert hasRunnableTasks()__        runTask(RandomNumbers.randomIntBetween(random, 0, runnableTasks.size() - 1))__    };runs,an,arbitrary,runnable,task;public,void,run,random,task,assert,has,runnable,tasks,run,task,random,numbers,random,int,between,random,0,runnable,tasks,size,1
DeterministicTaskQueue -> public void runRandomTask();1550737421;Runs an arbitrary runnable task.;public void runRandomTask() {_        assert hasRunnableTasks()__        runTask(RandomNumbers.randomIntBetween(random, 0, runnableTasks.size() - 1))__    };runs,an,arbitrary,runnable,task;public,void,run,random,task,assert,has,runnable,tasks,run,task,random,numbers,random,int,between,random,0,runnable,tasks,size,1
DeterministicTaskQueue -> public void scheduleAt(final long executionTimeMillis, final Runnable task);1544081506;Schedule a task for future execution.;public void scheduleAt(final long executionTimeMillis, final Runnable task) {_        final long extraDelayMillis = RandomNumbers.randomLongBetween(random, 0, executionDelayVariabilityMillis)__        final long actualExecutionTimeMillis = executionTimeMillis + extraDelayMillis__        if (actualExecutionTimeMillis <= currentTimeMillis) {_            logger.trace("scheduleAt: [{}ms] is not in the future, adding runnable {}", executionTimeMillis, task)__            runnableTasks.add(task)__        } else {_            final DeferredTask deferredTask = new DeferredTask(actualExecutionTimeMillis, task)__            logger.trace("scheduleAt: adding {} with extra delay of [{}ms]", deferredTask, extraDelayMillis)__            scheduleDeferredTask(deferredTask)__        }_    };schedule,a,task,for,future,execution;public,void,schedule,at,final,long,execution,time,millis,final,runnable,task,final,long,extra,delay,millis,random,numbers,random,long,between,random,0,execution,delay,variability,millis,final,long,actual,execution,time,millis,execution,time,millis,extra,delay,millis,if,actual,execution,time,millis,current,time,millis,logger,trace,schedule,at,ms,is,not,in,the,future,adding,runnable,execution,time,millis,task,runnable,tasks,add,task,else,final,deferred,task,deferred,task,new,deferred,task,actual,execution,time,millis,task,logger,trace,schedule,at,adding,with,extra,delay,of,ms,deferred,task,extra,delay,millis,schedule,deferred,task,deferred,task
DeterministicTaskQueue -> public void scheduleAt(final long executionTimeMillis, final Runnable task);1546251441;Schedule a task for future execution.;public void scheduleAt(final long executionTimeMillis, final Runnable task) {_        final long extraDelayMillis = RandomNumbers.randomLongBetween(random, 0, executionDelayVariabilityMillis)__        final long actualExecutionTimeMillis = executionTimeMillis + extraDelayMillis__        if (actualExecutionTimeMillis <= currentTimeMillis) {_            logger.trace("scheduleAt: [{}ms] is not in the future, adding runnable {}", executionTimeMillis, task)__            runnableTasks.add(task)__        } else {_            final DeferredTask deferredTask = new DeferredTask(actualExecutionTimeMillis, task)__            logger.trace("scheduleAt: adding {} with extra delay of [{}ms]", deferredTask, extraDelayMillis)__            scheduleDeferredTask(deferredTask)__        }_    };schedule,a,task,for,future,execution;public,void,schedule,at,final,long,execution,time,millis,final,runnable,task,final,long,extra,delay,millis,random,numbers,random,long,between,random,0,execution,delay,variability,millis,final,long,actual,execution,time,millis,execution,time,millis,extra,delay,millis,if,actual,execution,time,millis,current,time,millis,logger,trace,schedule,at,ms,is,not,in,the,future,adding,runnable,execution,time,millis,task,runnable,tasks,add,task,else,final,deferred,task,deferred,task,new,deferred,task,actual,execution,time,millis,task,logger,trace,schedule,at,adding,with,extra,delay,of,ms,deferred,task,extra,delay,millis,schedule,deferred,task,deferred,task
DeterministicTaskQueue -> public void scheduleAt(final long executionTimeMillis, final Runnable task);1548953505;Schedule a task for future execution.;public void scheduleAt(final long executionTimeMillis, final Runnable task) {_        final long extraDelayMillis = RandomNumbers.randomLongBetween(random, 0, executionDelayVariabilityMillis)__        final long actualExecutionTimeMillis = executionTimeMillis + extraDelayMillis__        if (actualExecutionTimeMillis <= currentTimeMillis) {_            logger.trace("scheduleAt: [{}ms] is not in the future, adding runnable {}", executionTimeMillis, task)__            runnableTasks.add(task)__        } else {_            final DeferredTask deferredTask = new DeferredTask(actualExecutionTimeMillis, task)__            logger.trace("scheduleAt: adding {} with extra delay of [{}ms]", deferredTask, extraDelayMillis)__            scheduleDeferredTask(deferredTask)__        }_    };schedule,a,task,for,future,execution;public,void,schedule,at,final,long,execution,time,millis,final,runnable,task,final,long,extra,delay,millis,random,numbers,random,long,between,random,0,execution,delay,variability,millis,final,long,actual,execution,time,millis,execution,time,millis,extra,delay,millis,if,actual,execution,time,millis,current,time,millis,logger,trace,schedule,at,ms,is,not,in,the,future,adding,runnable,execution,time,millis,task,runnable,tasks,add,task,else,final,deferred,task,deferred,task,new,deferred,task,actual,execution,time,millis,task,logger,trace,schedule,at,adding,with,extra,delay,of,ms,deferred,task,extra,delay,millis,schedule,deferred,task,deferred,task
DeterministicTaskQueue -> public void scheduleAt(final long executionTimeMillis, final Runnable task);1550737421;Schedule a task for future execution.;public void scheduleAt(final long executionTimeMillis, final Runnable task) {_        final long extraDelayMillis = RandomNumbers.randomLongBetween(random, 0, executionDelayVariabilityMillis)__        final long actualExecutionTimeMillis = executionTimeMillis + extraDelayMillis__        if (actualExecutionTimeMillis <= currentTimeMillis) {_            logger.trace("scheduleAt: [{}ms] is not in the future, adding runnable {}", executionTimeMillis, task)__            runnableTasks.add(task)__        } else {_            final DeferredTask deferredTask = new DeferredTask(actualExecutionTimeMillis, task)__            logger.trace("scheduleAt: adding {} with extra delay of [{}ms]", deferredTask, extraDelayMillis)__            scheduleDeferredTask(deferredTask)__        }_    };schedule,a,task,for,future,execution;public,void,schedule,at,final,long,execution,time,millis,final,runnable,task,final,long,extra,delay,millis,random,numbers,random,long,between,random,0,execution,delay,variability,millis,final,long,actual,execution,time,millis,execution,time,millis,extra,delay,millis,if,actual,execution,time,millis,current,time,millis,logger,trace,schedule,at,ms,is,not,in,the,future,adding,runnable,execution,time,millis,task,runnable,tasks,add,task,else,final,deferred,task,deferred,task,new,deferred,task,actual,execution,time,millis,task,logger,trace,schedule,at,adding,with,extra,delay,of,ms,deferred,task,extra,delay,millis,schedule,deferred,task,deferred,task
DeterministicTaskQueue -> public ThreadPool getThreadPool(Function<Runnable, Runnable> runnableWrapper);1544081506;@return A <code>ThreadPool</code> that uses this task queue and wraps <code>Runnable</code>s in the given wrapper.;public ThreadPool getThreadPool(Function<Runnable, Runnable> runnableWrapper) {_        return new ThreadPool(settings) {__            {_                stopCachedTimeThread()__            }__            @Override_            public long relativeTimeInMillis() {_                return currentTimeMillis__            }__            @Override_            public long absoluteTimeInMillis() {_                return currentTimeMillis__            }__            @Override_            public Counter estimatedTimeInMillisCounter() {_                return new Counter() {_                    @Override_                    public long addAndGet(long delta) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public long get() {_                        return currentTimeMillis__                    }_                }__            }__            @Override_            public ThreadPoolInfo info() {_                throw new UnsupportedOperationException()__            }__            @Override_            public Info info(String name) {_                throw new UnsupportedOperationException()__            }__            @Override_            public ThreadPoolStats stats() {_                throw new UnsupportedOperationException()__            }__            @Override_            public ExecutorService generic() {_                return getExecutorService(runnableWrapper)__            }__            @Override_            public ExecutorService executor(String name) {_                return getExecutorService(runnableWrapper)__            }__            @Override_            public ScheduledFuture<?> schedule(TimeValue delay, String executor, Runnable command) {_                final int NOT_STARTED = 0__                final int STARTED = 1__                final int CANCELLED = 2__                final AtomicInteger taskState = new AtomicInteger(NOT_STARTED)___                scheduleAt(currentTimeMillis + delay.millis(), runnableWrapper.apply(new Runnable() {_                    @Override_                    public void run() {_                        if (taskState.compareAndSet(NOT_STARTED, STARTED)) {_                            command.run()__                        }_                    }__                    @Override_                    public String toString() {_                        return command.toString()__                    }_                }))___                return new ScheduledFuture<Object>() {_                    @Override_                    public long getDelay(TimeUnit unit) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public int compareTo(Delayed o) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public boolean cancel(boolean mayInterruptIfRunning) {_                        assert mayInterruptIfRunning == false__                        return taskState.compareAndSet(NOT_STARTED, CANCELLED)__                    }__                    @Override_                    public boolean isCancelled() {_                        return taskState.get() == CANCELLED__                    }__                    @Override_                    public boolean isDone() {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public Object get() {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public Object get(long timeout, TimeUnit unit) {_                        throw new UnsupportedOperationException()__                    }_                }__            }__            @Override_            public Cancellable scheduleWithFixedDelay(Runnable command, TimeValue interval, String executor) {_                throw new UnsupportedOperationException()__            }__            @Override_            public Runnable preserveContext(Runnable command) {_                throw new UnsupportedOperationException()__            }__            @Override_            public void shutdown() {_                throw new UnsupportedOperationException()__            }__            @Override_            public void shutdownNow() {_                throw new UnsupportedOperationException()__            }__            @Override_            public boolean awaitTermination(long timeout, TimeUnit unit) {_                throw new UnsupportedOperationException()__            }__            @Override_            public ScheduledExecutorService scheduler() {_                throw new UnsupportedOperationException()__            }_        }__    };return,a,code,thread,pool,code,that,uses,this,task,queue,and,wraps,code,runnable,code,s,in,the,given,wrapper;public,thread,pool,get,thread,pool,function,runnable,runnable,runnable,wrapper,return,new,thread,pool,settings,stop,cached,time,thread,override,public,long,relative,time,in,millis,return,current,time,millis,override,public,long,absolute,time,in,millis,return,current,time,millis,override,public,counter,estimated,time,in,millis,counter,return,new,counter,override,public,long,add,and,get,long,delta,throw,new,unsupported,operation,exception,override,public,long,get,return,current,time,millis,override,public,thread,pool,info,info,throw,new,unsupported,operation,exception,override,public,info,info,string,name,throw,new,unsupported,operation,exception,override,public,thread,pool,stats,stats,throw,new,unsupported,operation,exception,override,public,executor,service,generic,return,get,executor,service,runnable,wrapper,override,public,executor,service,executor,string,name,return,get,executor,service,runnable,wrapper,override,public,scheduled,future,schedule,time,value,delay,string,executor,runnable,command,final,int,0,final,int,started,1,final,int,cancelled,2,final,atomic,integer,task,state,new,atomic,integer,schedule,at,current,time,millis,delay,millis,runnable,wrapper,apply,new,runnable,override,public,void,run,if,task,state,compare,and,set,started,command,run,override,public,string,to,string,return,command,to,string,return,new,scheduled,future,object,override,public,long,get,delay,time,unit,unit,throw,new,unsupported,operation,exception,override,public,int,compare,to,delayed,o,throw,new,unsupported,operation,exception,override,public,boolean,cancel,boolean,may,interrupt,if,running,assert,may,interrupt,if,running,false,return,task,state,compare,and,set,cancelled,override,public,boolean,is,cancelled,return,task,state,get,cancelled,override,public,boolean,is,done,throw,new,unsupported,operation,exception,override,public,object,get,throw,new,unsupported,operation,exception,override,public,object,get,long,timeout,time,unit,unit,throw,new,unsupported,operation,exception,override,public,cancellable,schedule,with,fixed,delay,runnable,command,time,value,interval,string,executor,throw,new,unsupported,operation,exception,override,public,runnable,preserve,context,runnable,command,throw,new,unsupported,operation,exception,override,public,void,shutdown,throw,new,unsupported,operation,exception,override,public,void,shutdown,now,throw,new,unsupported,operation,exception,override,public,boolean,await,termination,long,timeout,time,unit,unit,throw,new,unsupported,operation,exception,override,public,scheduled,executor,service,scheduler,throw,new,unsupported,operation,exception
DeterministicTaskQueue -> public ThreadPool getThreadPool(Function<Runnable, Runnable> runnableWrapper);1546251441;@return A <code>ThreadPool</code> that uses this task queue and wraps <code>Runnable</code>s in the given wrapper.;public ThreadPool getThreadPool(Function<Runnable, Runnable> runnableWrapper) {_        return new ThreadPool(settings) {__            {_                stopCachedTimeThread()__            }__            @Override_            public long relativeTimeInMillis() {_                return currentTimeMillis__            }__            @Override_            public long absoluteTimeInMillis() {_                return currentTimeMillis__            }__            @Override_            public Counter estimatedTimeInMillisCounter() {_                return new Counter() {_                    @Override_                    public long addAndGet(long delta) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public long get() {_                        return currentTimeMillis__                    }_                }__            }__            @Override_            public ThreadPoolInfo info() {_                throw new UnsupportedOperationException()__            }__            @Override_            public Info info(String name) {_                throw new UnsupportedOperationException()__            }__            @Override_            public ThreadPoolStats stats() {_                throw new UnsupportedOperationException()__            }__            @Override_            public ExecutorService generic() {_                return getExecutorService(runnableWrapper)__            }__            @Override_            public ExecutorService executor(String name) {_                return getExecutorService(runnableWrapper)__            }__            @Override_            public ScheduledFuture<?> schedule(TimeValue delay, String executor, Runnable command) {_                final int NOT_STARTED = 0__                final int STARTED = 1__                final int CANCELLED = 2__                final AtomicInteger taskState = new AtomicInteger(NOT_STARTED)___                scheduleAt(currentTimeMillis + delay.millis(), runnableWrapper.apply(new Runnable() {_                    @Override_                    public void run() {_                        if (taskState.compareAndSet(NOT_STARTED, STARTED)) {_                            command.run()__                        }_                    }__                    @Override_                    public String toString() {_                        return command.toString()__                    }_                }))___                return new ScheduledFuture<Object>() {_                    @Override_                    public long getDelay(TimeUnit unit) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public int compareTo(Delayed o) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public boolean cancel(boolean mayInterruptIfRunning) {_                        assert mayInterruptIfRunning == false__                        return taskState.compareAndSet(NOT_STARTED, CANCELLED)__                    }__                    @Override_                    public boolean isCancelled() {_                        return taskState.get() == CANCELLED__                    }__                    @Override_                    public boolean isDone() {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public Object get() {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public Object get(long timeout, TimeUnit unit) {_                        throw new UnsupportedOperationException()__                    }_                }__            }__            @Override_            public Cancellable scheduleWithFixedDelay(Runnable command, TimeValue interval, String executor) {_                return super.scheduleWithFixedDelay(command, interval, executor)__            }__            @Override_            public Runnable preserveContext(Runnable command) {_                throw new UnsupportedOperationException()__            }__            @Override_            public void shutdown() {_                throw new UnsupportedOperationException()__            }__            @Override_            public void shutdownNow() {_                throw new UnsupportedOperationException()__            }__            @Override_            public boolean awaitTermination(long timeout, TimeUnit unit) {_                throw new UnsupportedOperationException()__            }__            @Override_            public ScheduledExecutorService scheduler() {_                return new ScheduledExecutorService() {_                    @Override_                    public ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public <V> ScheduledFuture<V> schedule(Callable<V> callable, long delay, TimeUnit unit) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public ScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public void shutdown() {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public List<Runnable> shutdownNow() {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public boolean isShutdown() {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public boolean isTerminated() {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public boolean awaitTermination(long timeout, TimeUnit unit) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public <T> Future<T> submit(Callable<T> task) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public <T> Future<T> submit(Runnable task, T result) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public Future<?> submit(Runnable task) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public <T> T invokeAny(Collection<? extends Callable<T>> tasks) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public void execute(Runnable command) {_                        throw new UnsupportedOperationException()__                    }_                }__            }_        }__    };return,a,code,thread,pool,code,that,uses,this,task,queue,and,wraps,code,runnable,code,s,in,the,given,wrapper;public,thread,pool,get,thread,pool,function,runnable,runnable,runnable,wrapper,return,new,thread,pool,settings,stop,cached,time,thread,override,public,long,relative,time,in,millis,return,current,time,millis,override,public,long,absolute,time,in,millis,return,current,time,millis,override,public,counter,estimated,time,in,millis,counter,return,new,counter,override,public,long,add,and,get,long,delta,throw,new,unsupported,operation,exception,override,public,long,get,return,current,time,millis,override,public,thread,pool,info,info,throw,new,unsupported,operation,exception,override,public,info,info,string,name,throw,new,unsupported,operation,exception,override,public,thread,pool,stats,stats,throw,new,unsupported,operation,exception,override,public,executor,service,generic,return,get,executor,service,runnable,wrapper,override,public,executor,service,executor,string,name,return,get,executor,service,runnable,wrapper,override,public,scheduled,future,schedule,time,value,delay,string,executor,runnable,command,final,int,0,final,int,started,1,final,int,cancelled,2,final,atomic,integer,task,state,new,atomic,integer,schedule,at,current,time,millis,delay,millis,runnable,wrapper,apply,new,runnable,override,public,void,run,if,task,state,compare,and,set,started,command,run,override,public,string,to,string,return,command,to,string,return,new,scheduled,future,object,override,public,long,get,delay,time,unit,unit,throw,new,unsupported,operation,exception,override,public,int,compare,to,delayed,o,throw,new,unsupported,operation,exception,override,public,boolean,cancel,boolean,may,interrupt,if,running,assert,may,interrupt,if,running,false,return,task,state,compare,and,set,cancelled,override,public,boolean,is,cancelled,return,task,state,get,cancelled,override,public,boolean,is,done,throw,new,unsupported,operation,exception,override,public,object,get,throw,new,unsupported,operation,exception,override,public,object,get,long,timeout,time,unit,unit,throw,new,unsupported,operation,exception,override,public,cancellable,schedule,with,fixed,delay,runnable,command,time,value,interval,string,executor,return,super,schedule,with,fixed,delay,command,interval,executor,override,public,runnable,preserve,context,runnable,command,throw,new,unsupported,operation,exception,override,public,void,shutdown,throw,new,unsupported,operation,exception,override,public,void,shutdown,now,throw,new,unsupported,operation,exception,override,public,boolean,await,termination,long,timeout,time,unit,unit,throw,new,unsupported,operation,exception,override,public,scheduled,executor,service,scheduler,return,new,scheduled,executor,service,override,public,scheduled,future,schedule,runnable,command,long,delay,time,unit,unit,throw,new,unsupported,operation,exception,override,public,v,scheduled,future,v,schedule,callable,v,callable,long,delay,time,unit,unit,throw,new,unsupported,operation,exception,override,public,scheduled,future,schedule,at,fixed,rate,runnable,command,long,initial,delay,long,period,time,unit,unit,throw,new,unsupported,operation,exception,override,public,scheduled,future,schedule,with,fixed,delay,runnable,command,long,initial,delay,long,delay,time,unit,unit,throw,new,unsupported,operation,exception,override,public,void,shutdown,throw,new,unsupported,operation,exception,override,public,list,runnable,shutdown,now,throw,new,unsupported,operation,exception,override,public,boolean,is,shutdown,throw,new,unsupported,operation,exception,override,public,boolean,is,terminated,throw,new,unsupported,operation,exception,override,public,boolean,await,termination,long,timeout,time,unit,unit,throw,new,unsupported,operation,exception,override,public,t,future,t,submit,callable,t,task,throw,new,unsupported,operation,exception,override,public,t,future,t,submit,runnable,task,t,result,throw,new,unsupported,operation,exception,override,public,future,submit,runnable,task,throw,new,unsupported,operation,exception,override,public,t,list,future,t,invoke,all,collection,extends,callable,t,tasks,throw,new,unsupported,operation,exception,override,public,t,list,future,t,invoke,all,collection,extends,callable,t,tasks,long,timeout,time,unit,unit,throw,new,unsupported,operation,exception,override,public,t,t,invoke,any,collection,extends,callable,t,tasks,throw,new,unsupported,operation,exception,override,public,t,t,invoke,any,collection,extends,callable,t,tasks,long,timeout,time,unit,unit,throw,new,unsupported,operation,exception,override,public,void,execute,runnable,command,throw,new,unsupported,operation,exception
DeterministicTaskQueue -> public ThreadPool getThreadPool(Function<Runnable, Runnable> runnableWrapper);1548953505;@return A <code>ThreadPool</code> that uses this task queue and wraps <code>Runnable</code>s in the given wrapper.;public ThreadPool getThreadPool(Function<Runnable, Runnable> runnableWrapper) {_        return new ThreadPool(settings) {__            {_                stopCachedTimeThread()__            }__            @Override_            public long relativeTimeInMillis() {_                return currentTimeMillis__            }__            @Override_            public long absoluteTimeInMillis() {_                return currentTimeMillis__            }__            @Override_            public Counter estimatedTimeInMillisCounter() {_                return new Counter() {_                    @Override_                    public long addAndGet(long delta) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public long get() {_                        return currentTimeMillis__                    }_                }__            }__            @Override_            public ThreadPoolInfo info() {_                throw new UnsupportedOperationException()__            }__            @Override_            public Info info(String name) {_                throw new UnsupportedOperationException()__            }__            @Override_            public ThreadPoolStats stats() {_                throw new UnsupportedOperationException()__            }__            @Override_            public ExecutorService generic() {_                return getExecutorService(runnableWrapper)__            }__            @Override_            public ExecutorService executor(String name) {_                return getExecutorService(runnableWrapper)__            }__            @Override_            public ScheduledCancellable schedule(Runnable command, TimeValue delay, String executor) {_                final int NOT_STARTED = 0__                final int STARTED = 1__                final int CANCELLED = 2__                final AtomicInteger taskState = new AtomicInteger(NOT_STARTED)___                scheduleAt(currentTimeMillis + delay.millis(), runnableWrapper.apply(new Runnable() {_                    @Override_                    public void run() {_                        if (taskState.compareAndSet(NOT_STARTED, STARTED)) {_                            command.run()__                        }_                    }__                    @Override_                    public String toString() {_                        return command.toString()__                    }_                }))___                return new ScheduledCancellable() {_                    @Override_                    public long getDelay(TimeUnit unit) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public int compareTo(Delayed o) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public boolean cancel() {_                        return taskState.compareAndSet(NOT_STARTED, CANCELLED)__                    }__                    @Override_                    public boolean isCancelled() {_                        return taskState.get() == CANCELLED__                    }__                }__            }__            @Override_            public Cancellable scheduleWithFixedDelay(Runnable command, TimeValue interval, String executor) {_                return super.scheduleWithFixedDelay(command, interval, executor)__            }__            @Override_            public Runnable preserveContext(Runnable command) {_                throw new UnsupportedOperationException()__            }__            @Override_            public void shutdown() {_                throw new UnsupportedOperationException()__            }__            @Override_            public void shutdownNow() {_                throw new UnsupportedOperationException()__            }__            @Override_            public boolean awaitTermination(long timeout, TimeUnit unit) {_                throw new UnsupportedOperationException()__            }__            @Override_            public ScheduledExecutorService scheduler() {_                return new ScheduledExecutorService() {_                    @Override_                    public ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public <V> ScheduledFuture<V> schedule(Callable<V> callable, long delay, TimeUnit unit) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public ScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public void shutdown() {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public List<Runnable> shutdownNow() {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public boolean isShutdown() {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public boolean isTerminated() {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public boolean awaitTermination(long timeout, TimeUnit unit) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public <T> Future<T> submit(Callable<T> task) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public <T> Future<T> submit(Runnable task, T result) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public Future<?> submit(Runnable task) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public <T> T invokeAny(Collection<? extends Callable<T>> tasks) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public void execute(Runnable command) {_                        throw new UnsupportedOperationException()__                    }_                }__            }_        }__    };return,a,code,thread,pool,code,that,uses,this,task,queue,and,wraps,code,runnable,code,s,in,the,given,wrapper;public,thread,pool,get,thread,pool,function,runnable,runnable,runnable,wrapper,return,new,thread,pool,settings,stop,cached,time,thread,override,public,long,relative,time,in,millis,return,current,time,millis,override,public,long,absolute,time,in,millis,return,current,time,millis,override,public,counter,estimated,time,in,millis,counter,return,new,counter,override,public,long,add,and,get,long,delta,throw,new,unsupported,operation,exception,override,public,long,get,return,current,time,millis,override,public,thread,pool,info,info,throw,new,unsupported,operation,exception,override,public,info,info,string,name,throw,new,unsupported,operation,exception,override,public,thread,pool,stats,stats,throw,new,unsupported,operation,exception,override,public,executor,service,generic,return,get,executor,service,runnable,wrapper,override,public,executor,service,executor,string,name,return,get,executor,service,runnable,wrapper,override,public,scheduled,cancellable,schedule,runnable,command,time,value,delay,string,executor,final,int,0,final,int,started,1,final,int,cancelled,2,final,atomic,integer,task,state,new,atomic,integer,schedule,at,current,time,millis,delay,millis,runnable,wrapper,apply,new,runnable,override,public,void,run,if,task,state,compare,and,set,started,command,run,override,public,string,to,string,return,command,to,string,return,new,scheduled,cancellable,override,public,long,get,delay,time,unit,unit,throw,new,unsupported,operation,exception,override,public,int,compare,to,delayed,o,throw,new,unsupported,operation,exception,override,public,boolean,cancel,return,task,state,compare,and,set,cancelled,override,public,boolean,is,cancelled,return,task,state,get,cancelled,override,public,cancellable,schedule,with,fixed,delay,runnable,command,time,value,interval,string,executor,return,super,schedule,with,fixed,delay,command,interval,executor,override,public,runnable,preserve,context,runnable,command,throw,new,unsupported,operation,exception,override,public,void,shutdown,throw,new,unsupported,operation,exception,override,public,void,shutdown,now,throw,new,unsupported,operation,exception,override,public,boolean,await,termination,long,timeout,time,unit,unit,throw,new,unsupported,operation,exception,override,public,scheduled,executor,service,scheduler,return,new,scheduled,executor,service,override,public,scheduled,future,schedule,runnable,command,long,delay,time,unit,unit,throw,new,unsupported,operation,exception,override,public,v,scheduled,future,v,schedule,callable,v,callable,long,delay,time,unit,unit,throw,new,unsupported,operation,exception,override,public,scheduled,future,schedule,at,fixed,rate,runnable,command,long,initial,delay,long,period,time,unit,unit,throw,new,unsupported,operation,exception,override,public,scheduled,future,schedule,with,fixed,delay,runnable,command,long,initial,delay,long,delay,time,unit,unit,throw,new,unsupported,operation,exception,override,public,void,shutdown,throw,new,unsupported,operation,exception,override,public,list,runnable,shutdown,now,throw,new,unsupported,operation,exception,override,public,boolean,is,shutdown,throw,new,unsupported,operation,exception,override,public,boolean,is,terminated,throw,new,unsupported,operation,exception,override,public,boolean,await,termination,long,timeout,time,unit,unit,throw,new,unsupported,operation,exception,override,public,t,future,t,submit,callable,t,task,throw,new,unsupported,operation,exception,override,public,t,future,t,submit,runnable,task,t,result,throw,new,unsupported,operation,exception,override,public,future,submit,runnable,task,throw,new,unsupported,operation,exception,override,public,t,list,future,t,invoke,all,collection,extends,callable,t,tasks,throw,new,unsupported,operation,exception,override,public,t,list,future,t,invoke,all,collection,extends,callable,t,tasks,long,timeout,time,unit,unit,throw,new,unsupported,operation,exception,override,public,t,t,invoke,any,collection,extends,callable,t,tasks,throw,new,unsupported,operation,exception,override,public,t,t,invoke,any,collection,extends,callable,t,tasks,long,timeout,time,unit,unit,throw,new,unsupported,operation,exception,override,public,void,execute,runnable,command,throw,new,unsupported,operation,exception
DeterministicTaskQueue -> public ThreadPool getThreadPool(Function<Runnable, Runnable> runnableWrapper);1550737421;@return A <code>ThreadPool</code> that uses this task queue and wraps <code>Runnable</code>s in the given wrapper.;public ThreadPool getThreadPool(Function<Runnable, Runnable> runnableWrapper) {_        return new ThreadPool(settings) {__            {_                stopCachedTimeThread()__            }__            @Override_            public long relativeTimeInMillis() {_                return currentTimeMillis__            }__            @Override_            public long absoluteTimeInMillis() {_                return currentTimeMillis__            }__            @Override_            public ThreadPoolInfo info() {_                throw new UnsupportedOperationException()__            }__            @Override_            public Info info(String name) {_                throw new UnsupportedOperationException()__            }__            @Override_            public ThreadPoolStats stats() {_                throw new UnsupportedOperationException()__            }__            @Override_            public ExecutorService generic() {_                return getExecutorService(runnableWrapper)__            }__            @Override_            public ExecutorService executor(String name) {_                return getExecutorService(runnableWrapper)__            }__            @Override_            public ScheduledCancellable schedule(Runnable command, TimeValue delay, String executor) {_                final int NOT_STARTED = 0__                final int STARTED = 1__                final int CANCELLED = 2__                final AtomicInteger taskState = new AtomicInteger(NOT_STARTED)___                scheduleAt(currentTimeMillis + delay.millis(), runnableWrapper.apply(new Runnable() {_                    @Override_                    public void run() {_                        if (taskState.compareAndSet(NOT_STARTED, STARTED)) {_                            command.run()__                        }_                    }__                    @Override_                    public String toString() {_                        return command.toString()__                    }_                }))___                return new ScheduledCancellable() {_                    @Override_                    public long getDelay(TimeUnit unit) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public int compareTo(Delayed o) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public boolean cancel() {_                        return taskState.compareAndSet(NOT_STARTED, CANCELLED)__                    }__                    @Override_                    public boolean isCancelled() {_                        return taskState.get() == CANCELLED__                    }__                }__            }__            @Override_            public Cancellable scheduleWithFixedDelay(Runnable command, TimeValue interval, String executor) {_                return super.scheduleWithFixedDelay(command, interval, executor)__            }__            @Override_            public Runnable preserveContext(Runnable command) {_                throw new UnsupportedOperationException()__            }__            @Override_            public void shutdown() {_                throw new UnsupportedOperationException()__            }__            @Override_            public void shutdownNow() {_                throw new UnsupportedOperationException()__            }__            @Override_            public boolean awaitTermination(long timeout, TimeUnit unit) {_                throw new UnsupportedOperationException()__            }__            @Override_            public ScheduledExecutorService scheduler() {_                return new ScheduledExecutorService() {_                    @Override_                    public ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public <V> ScheduledFuture<V> schedule(Callable<V> callable, long delay, TimeUnit unit) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public ScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public void shutdown() {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public List<Runnable> shutdownNow() {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public boolean isShutdown() {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public boolean isTerminated() {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public boolean awaitTermination(long timeout, TimeUnit unit) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public <T> Future<T> submit(Callable<T> task) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public <T> Future<T> submit(Runnable task, T result) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public Future<?> submit(Runnable task) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public <T> T invokeAny(Collection<? extends Callable<T>> tasks) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) {_                        throw new UnsupportedOperationException()__                    }__                    @Override_                    public void execute(Runnable command) {_                        throw new UnsupportedOperationException()__                    }_                }__            }_        }__    };return,a,code,thread,pool,code,that,uses,this,task,queue,and,wraps,code,runnable,code,s,in,the,given,wrapper;public,thread,pool,get,thread,pool,function,runnable,runnable,runnable,wrapper,return,new,thread,pool,settings,stop,cached,time,thread,override,public,long,relative,time,in,millis,return,current,time,millis,override,public,long,absolute,time,in,millis,return,current,time,millis,override,public,thread,pool,info,info,throw,new,unsupported,operation,exception,override,public,info,info,string,name,throw,new,unsupported,operation,exception,override,public,thread,pool,stats,stats,throw,new,unsupported,operation,exception,override,public,executor,service,generic,return,get,executor,service,runnable,wrapper,override,public,executor,service,executor,string,name,return,get,executor,service,runnable,wrapper,override,public,scheduled,cancellable,schedule,runnable,command,time,value,delay,string,executor,final,int,0,final,int,started,1,final,int,cancelled,2,final,atomic,integer,task,state,new,atomic,integer,schedule,at,current,time,millis,delay,millis,runnable,wrapper,apply,new,runnable,override,public,void,run,if,task,state,compare,and,set,started,command,run,override,public,string,to,string,return,command,to,string,return,new,scheduled,cancellable,override,public,long,get,delay,time,unit,unit,throw,new,unsupported,operation,exception,override,public,int,compare,to,delayed,o,throw,new,unsupported,operation,exception,override,public,boolean,cancel,return,task,state,compare,and,set,cancelled,override,public,boolean,is,cancelled,return,task,state,get,cancelled,override,public,cancellable,schedule,with,fixed,delay,runnable,command,time,value,interval,string,executor,return,super,schedule,with,fixed,delay,command,interval,executor,override,public,runnable,preserve,context,runnable,command,throw,new,unsupported,operation,exception,override,public,void,shutdown,throw,new,unsupported,operation,exception,override,public,void,shutdown,now,throw,new,unsupported,operation,exception,override,public,boolean,await,termination,long,timeout,time,unit,unit,throw,new,unsupported,operation,exception,override,public,scheduled,executor,service,scheduler,return,new,scheduled,executor,service,override,public,scheduled,future,schedule,runnable,command,long,delay,time,unit,unit,throw,new,unsupported,operation,exception,override,public,v,scheduled,future,v,schedule,callable,v,callable,long,delay,time,unit,unit,throw,new,unsupported,operation,exception,override,public,scheduled,future,schedule,at,fixed,rate,runnable,command,long,initial,delay,long,period,time,unit,unit,throw,new,unsupported,operation,exception,override,public,scheduled,future,schedule,with,fixed,delay,runnable,command,long,initial,delay,long,delay,time,unit,unit,throw,new,unsupported,operation,exception,override,public,void,shutdown,throw,new,unsupported,operation,exception,override,public,list,runnable,shutdown,now,throw,new,unsupported,operation,exception,override,public,boolean,is,shutdown,throw,new,unsupported,operation,exception,override,public,boolean,is,terminated,throw,new,unsupported,operation,exception,override,public,boolean,await,termination,long,timeout,time,unit,unit,throw,new,unsupported,operation,exception,override,public,t,future,t,submit,callable,t,task,throw,new,unsupported,operation,exception,override,public,t,future,t,submit,runnable,task,t,result,throw,new,unsupported,operation,exception,override,public,future,submit,runnable,task,throw,new,unsupported,operation,exception,override,public,t,list,future,t,invoke,all,collection,extends,callable,t,tasks,throw,new,unsupported,operation,exception,override,public,t,list,future,t,invoke,all,collection,extends,callable,t,tasks,long,timeout,time,unit,unit,throw,new,unsupported,operation,exception,override,public,t,t,invoke,any,collection,extends,callable,t,tasks,throw,new,unsupported,operation,exception,override,public,t,t,invoke,any,collection,extends,callable,t,tasks,long,timeout,time,unit,unit,throw,new,unsupported,operation,exception,override,public,void,execute,runnable,command,throw,new,unsupported,operation,exception
DeterministicTaskQueue -> public ExecutorService getExecutorService();1544081506;@return A <code>ExecutorService</code> that uses this task queue.;public ExecutorService getExecutorService() {_        return getExecutorService(Function.identity())__    };return,a,code,executor,service,code,that,uses,this,task,queue;public,executor,service,get,executor,service,return,get,executor,service,function,identity
DeterministicTaskQueue -> public ExecutorService getExecutorService();1546251441;@return A <code>ExecutorService</code> that uses this task queue.;public ExecutorService getExecutorService() {_        return getExecutorService(Function.identity())__    };return,a,code,executor,service,code,that,uses,this,task,queue;public,executor,service,get,executor,service,return,get,executor,service,function,identity
DeterministicTaskQueue -> public ExecutorService getExecutorService();1548953505;@return A <code>ExecutorService</code> that uses this task queue.;public ExecutorService getExecutorService() {_        return getExecutorService(Function.identity())__    };return,a,code,executor,service,code,that,uses,this,task,queue;public,executor,service,get,executor,service,return,get,executor,service,function,identity
DeterministicTaskQueue -> public ExecutorService getExecutorService();1550737421;@return A <code>ExecutorService</code> that uses this task queue.;public ExecutorService getExecutorService() {_        return getExecutorService(Function.identity())__    };return,a,code,executor,service,code,that,uses,this,task,queue;public,executor,service,get,executor,service,return,get,executor,service,function,identity
