# id;timestamp;commentText;codeText;commentWords;codeWords
MockTransport -> public void handleError(final long requestId, final TransportException e);1544081506;simulate an error for the given requestId, unlike_{@link #handleLocalError(long, Throwable)} and_{@link #handleRemoteError(long, Throwable)}, the provided_exception will not be wrapped but will be delivered to the_transport layer as is__@param requestId the id corresponding to the captured send_request_@param e         the failure;public void handleError(final long requestId, final TransportException e) {_        final TransportResponseHandler transportResponseHandler = responseHandlers.onResponseReceived(requestId, listener)__        if (transportResponseHandler != null) {_            transportResponseHandler.handleException(e)__        }_    };simulate,an,error,for,the,given,request,id,unlike,link,handle,local,error,long,throwable,and,link,handle,remote,error,long,throwable,the,provided,exception,will,not,be,wrapped,but,will,be,delivered,to,the,transport,layer,as,is,param,request,id,the,id,corresponding,to,the,captured,send,request,param,e,the,failure;public,void,handle,error,final,long,request,id,final,transport,exception,e,final,transport,response,handler,transport,response,handler,response,handlers,on,response,received,request,id,listener,if,transport,response,handler,null,transport,response,handler,handle,exception,e
MockTransport -> public void handleError(final long requestId, final TransportException e);1548996340;simulate an error for the given requestId, unlike_{@link #handleLocalError(long, Throwable)} and_{@link #handleRemoteError(long, Throwable)}, the provided_exception will not be wrapped but will be delivered to the_transport layer as is__@param requestId the id corresponding to the captured send_request_@param e         the failure;public void handleError(final long requestId, final TransportException e) {_        final TransportResponseHandler transportResponseHandler = responseHandlers.onResponseReceived(requestId, listener)__        if (transportResponseHandler != null) {_            transportResponseHandler.handleException(e)__        }_    };simulate,an,error,for,the,given,request,id,unlike,link,handle,local,error,long,throwable,and,link,handle,remote,error,long,throwable,the,provided,exception,will,not,be,wrapped,but,will,be,delivered,to,the,transport,layer,as,is,param,request,id,the,id,corresponding,to,the,captured,send,request,param,e,the,failure;public,void,handle,error,final,long,request,id,final,transport,exception,e,final,transport,response,handler,transport,response,handler,response,handlers,on,response,received,request,id,listener,if,transport,response,handler,null,transport,response,handler,handle,exception,e
MockTransport -> public void handleError(final long requestId, final TransportException e);1550601141;simulate an error for the given requestId, unlike_{@link #handleLocalError(long, Throwable)} and_{@link #handleRemoteError(long, Throwable)}, the provided_exception will not be wrapped but will be delivered to the_transport layer as is__@param requestId the id corresponding to the captured send_request_@param e         the failure;public void handleError(final long requestId, final TransportException e) {_        final TransportResponseHandler transportResponseHandler = responseHandlers.onResponseReceived(requestId, listener)__        if (transportResponseHandler != null) {_            transportResponseHandler.handleException(e)__        }_    };simulate,an,error,for,the,given,request,id,unlike,link,handle,local,error,long,throwable,and,link,handle,remote,error,long,throwable,the,provided,exception,will,not,be,wrapped,but,will,be,delivered,to,the,transport,layer,as,is,param,request,id,the,id,corresponding,to,the,captured,send,request,param,e,the,failure;public,void,handle,error,final,long,request,id,final,transport,exception,e,final,transport,response,handler,transport,response,handler,response,handlers,on,response,received,request,id,listener,if,transport,response,handler,null,transport,response,handler,handle,exception,e
MockTransport -> public void handleError(final long requestId, final TransportException e);1551176390;simulate an error for the given requestId, unlike_{@link #handleLocalError(long, Throwable)} and_{@link #handleRemoteError(long, Throwable)}, the provided_exception will not be wrapped but will be delivered to the_transport layer as is__@param requestId the id corresponding to the captured send_request_@param e         the failure;public void handleError(final long requestId, final TransportException e) {_        final TransportResponseHandler transportResponseHandler = responseHandlers.onResponseReceived(requestId, listener)__        if (transportResponseHandler != null) {_            transportResponseHandler.handleException(e)__        }_    };simulate,an,error,for,the,given,request,id,unlike,link,handle,local,error,long,throwable,and,link,handle,remote,error,long,throwable,the,provided,exception,will,not,be,wrapped,but,will,be,delivered,to,the,transport,layer,as,is,param,request,id,the,id,corresponding,to,the,captured,send,request,param,e,the,failure;public,void,handle,error,final,long,request,id,final,transport,exception,e,final,transport,response,handler,transport,response,handler,response,handlers,on,response,received,request,id,listener,if,transport,response,handler,null,transport,response,handler,handle,exception,e
MockTransport -> public void handleRemoteError(final long requestId, final Throwable t);1544081506;simulate a remote error for the given requestId, will be wrapped_by a {@link RemoteTransportException}__@param requestId the id corresponding to the captured send_request_@param t         the failure to wrap;public void handleRemoteError(final long requestId, final Throwable t) {_        final RemoteTransportException remoteException__        if (rarely(Randomness.get())) {_            remoteException = new RemoteTransportException("remote failure, coming from local node", t)__        } else {_            try (BytesStreamOutput output = new BytesStreamOutput()) {_                output.writeException(t)__                remoteException = new RemoteTransportException("remote failure", output.bytes().streamInput().readException())__            } catch (IOException ioException) {_                throw new AssertionError("failed to serialize/deserialize supplied exception " + t, ioException)__            }_        }_        this.handleError(requestId, remoteException)__    };simulate,a,remote,error,for,the,given,request,id,will,be,wrapped,by,a,link,remote,transport,exception,param,request,id,the,id,corresponding,to,the,captured,send,request,param,t,the,failure,to,wrap;public,void,handle,remote,error,final,long,request,id,final,throwable,t,final,remote,transport,exception,remote,exception,if,rarely,randomness,get,remote,exception,new,remote,transport,exception,remote,failure,coming,from,local,node,t,else,try,bytes,stream,output,output,new,bytes,stream,output,output,write,exception,t,remote,exception,new,remote,transport,exception,remote,failure,output,bytes,stream,input,read,exception,catch,ioexception,io,exception,throw,new,assertion,error,failed,to,serialize,deserialize,supplied,exception,t,io,exception,this,handle,error,request,id,remote,exception
MockTransport -> public void handleRemoteError(final long requestId, final Throwable t);1548996340;simulate a remote error for the given requestId, will be wrapped_by a {@link RemoteTransportException}__@param requestId the id corresponding to the captured send_request_@param t         the failure to wrap;public void handleRemoteError(final long requestId, final Throwable t) {_        final RemoteTransportException remoteException__        if (rarely(Randomness.get())) {_            remoteException = new RemoteTransportException("remote failure, coming from local node", t)__        } else {_            try (BytesStreamOutput output = new BytesStreamOutput()) {_                output.writeException(t)__                remoteException = new RemoteTransportException("remote failure", output.bytes().streamInput().readException())__            } catch (IOException ioException) {_                throw new AssertionError("failed to serialize/deserialize supplied exception " + t, ioException)__            }_        }_        this.handleError(requestId, remoteException)__    };simulate,a,remote,error,for,the,given,request,id,will,be,wrapped,by,a,link,remote,transport,exception,param,request,id,the,id,corresponding,to,the,captured,send,request,param,t,the,failure,to,wrap;public,void,handle,remote,error,final,long,request,id,final,throwable,t,final,remote,transport,exception,remote,exception,if,rarely,randomness,get,remote,exception,new,remote,transport,exception,remote,failure,coming,from,local,node,t,else,try,bytes,stream,output,output,new,bytes,stream,output,output,write,exception,t,remote,exception,new,remote,transport,exception,remote,failure,output,bytes,stream,input,read,exception,catch,ioexception,io,exception,throw,new,assertion,error,failed,to,serialize,deserialize,supplied,exception,t,io,exception,this,handle,error,request,id,remote,exception
MockTransport -> public void handleRemoteError(final long requestId, final Throwable t);1550601141;simulate a remote error for the given requestId, will be wrapped_by a {@link RemoteTransportException}__@param requestId the id corresponding to the captured send_request_@param t         the failure to wrap;public void handleRemoteError(final long requestId, final Throwable t) {_        final RemoteTransportException remoteException__        if (rarely(Randomness.get())) {_            remoteException = new RemoteTransportException("remote failure, coming from local node", t)__        } else {_            try (BytesStreamOutput output = new BytesStreamOutput()) {_                output.writeException(t)__                remoteException = new RemoteTransportException("remote failure", output.bytes().streamInput().readException())__            } catch (IOException ioException) {_                throw new AssertionError("failed to serialize/deserialize supplied exception " + t, ioException)__            }_        }_        this.handleError(requestId, remoteException)__    };simulate,a,remote,error,for,the,given,request,id,will,be,wrapped,by,a,link,remote,transport,exception,param,request,id,the,id,corresponding,to,the,captured,send,request,param,t,the,failure,to,wrap;public,void,handle,remote,error,final,long,request,id,final,throwable,t,final,remote,transport,exception,remote,exception,if,rarely,randomness,get,remote,exception,new,remote,transport,exception,remote,failure,coming,from,local,node,t,else,try,bytes,stream,output,output,new,bytes,stream,output,output,write,exception,t,remote,exception,new,remote,transport,exception,remote,failure,output,bytes,stream,input,read,exception,catch,ioexception,io,exception,throw,new,assertion,error,failed,to,serialize,deserialize,supplied,exception,t,io,exception,this,handle,error,request,id,remote,exception
MockTransport -> public void handleRemoteError(final long requestId, final Throwable t);1551176390;simulate a remote error for the given requestId, will be wrapped_by a {@link RemoteTransportException}__@param requestId the id corresponding to the captured send_request_@param t         the failure to wrap;public void handleRemoteError(final long requestId, final Throwable t) {_        final RemoteTransportException remoteException__        if (rarely(Randomness.get())) {_            remoteException = new RemoteTransportException("remote failure, coming from local node", t)__        } else {_            try (BytesStreamOutput output = new BytesStreamOutput()) {_                output.writeException(t)__                remoteException = new RemoteTransportException("remote failure", output.bytes().streamInput().readException())__            } catch (IOException ioException) {_                throw new AssertionError("failed to serialize/deserialize supplied exception " + t, ioException)__            }_        }_        this.handleError(requestId, remoteException)__    };simulate,a,remote,error,for,the,given,request,id,will,be,wrapped,by,a,link,remote,transport,exception,param,request,id,the,id,corresponding,to,the,captured,send,request,param,t,the,failure,to,wrap;public,void,handle,remote,error,final,long,request,id,final,throwable,t,final,remote,transport,exception,remote,exception,if,rarely,randomness,get,remote,exception,new,remote,transport,exception,remote,failure,coming,from,local,node,t,else,try,bytes,stream,output,output,new,bytes,stream,output,output,write,exception,t,remote,exception,new,remote,transport,exception,remote,failure,output,bytes,stream,input,read,exception,catch,ioexception,io,exception,throw,new,assertion,error,failed,to,serialize,deserialize,supplied,exception,t,io,exception,this,handle,error,request,id,remote,exception
MockTransport -> @SuppressWarnings("unchecked")     public <Response extends TransportResponse> void handleResponse(final long requestId, final Response response);1544081506;simulate a response for the given requestId;@SuppressWarnings("unchecked")_    public <Response extends TransportResponse> void handleResponse(final long requestId, final Response response) {_        final TransportResponseHandler<Response> transportResponseHandler =_            (TransportResponseHandler<Response>) responseHandlers.onResponseReceived(requestId, listener)__        if (transportResponseHandler != null) {_            final Response deliveredResponse__            try (BytesStreamOutput output = new BytesStreamOutput()) {_                response.writeTo(output)__                deliveredResponse = transportResponseHandler.read(output.bytes().streamInput())__            } catch (IOException | UnsupportedOperationException e) {_                throw new AssertionError("failed to serialize/deserialize response " + response, e)__            }_            transportResponseHandler.handleResponse(deliveredResponse)__        }_    };simulate,a,response,for,the,given,request,id;suppress,warnings,unchecked,public,response,extends,transport,response,void,handle,response,final,long,request,id,final,response,response,final,transport,response,handler,response,transport,response,handler,transport,response,handler,response,response,handlers,on,response,received,request,id,listener,if,transport,response,handler,null,final,response,delivered,response,try,bytes,stream,output,output,new,bytes,stream,output,response,write,to,output,delivered,response,transport,response,handler,read,output,bytes,stream,input,catch,ioexception,unsupported,operation,exception,e,throw,new,assertion,error,failed,to,serialize,deserialize,response,response,e,transport,response,handler,handle,response,delivered,response
MockTransport -> @SuppressWarnings("unchecked")     public <Response extends TransportResponse> void handleResponse(final long requestId, final Response response);1548996340;simulate a response for the given requestId;@SuppressWarnings("unchecked")_    public <Response extends TransportResponse> void handleResponse(final long requestId, final Response response) {_        final TransportResponseHandler<Response> transportResponseHandler =_            (TransportResponseHandler<Response>) responseHandlers.onResponseReceived(requestId, listener)__        if (transportResponseHandler != null) {_            final Response deliveredResponse__            try (BytesStreamOutput output = new BytesStreamOutput()) {_                response.writeTo(output)__                deliveredResponse = transportResponseHandler.read(_                    new NamedWriteableAwareStreamInput(output.bytes().streamInput(), writeableRegistry()))__            } catch (IOException | UnsupportedOperationException e) {_                throw new AssertionError("failed to serialize/deserialize response " + response, e)__            }_            transportResponseHandler.handleResponse(deliveredResponse)__        }_    };simulate,a,response,for,the,given,request,id;suppress,warnings,unchecked,public,response,extends,transport,response,void,handle,response,final,long,request,id,final,response,response,final,transport,response,handler,response,transport,response,handler,transport,response,handler,response,response,handlers,on,response,received,request,id,listener,if,transport,response,handler,null,final,response,delivered,response,try,bytes,stream,output,output,new,bytes,stream,output,response,write,to,output,delivered,response,transport,response,handler,read,new,named,writeable,aware,stream,input,output,bytes,stream,input,writeable,registry,catch,ioexception,unsupported,operation,exception,e,throw,new,assertion,error,failed,to,serialize,deserialize,response,response,e,transport,response,handler,handle,response,delivered,response
MockTransport -> @SuppressWarnings("unchecked")     public <Response extends TransportResponse> void handleResponse(final long requestId, final Response response);1550601141;simulate a response for the given requestId;@SuppressWarnings("unchecked")_    public <Response extends TransportResponse> void handleResponse(final long requestId, final Response response) {_        final TransportResponseHandler<Response> transportResponseHandler =_            (TransportResponseHandler<Response>) responseHandlers.onResponseReceived(requestId, listener)__        if (transportResponseHandler != null) {_            final Response deliveredResponse__            try (BytesStreamOutput output = new BytesStreamOutput()) {_                response.writeTo(output)__                deliveredResponse = transportResponseHandler.read(_                    new NamedWriteableAwareStreamInput(output.bytes().streamInput(), writeableRegistry()))__            } catch (IOException | UnsupportedOperationException e) {_                throw new AssertionError("failed to serialize/deserialize response " + response, e)__            }_            transportResponseHandler.handleResponse(deliveredResponse)__        }_    };simulate,a,response,for,the,given,request,id;suppress,warnings,unchecked,public,response,extends,transport,response,void,handle,response,final,long,request,id,final,response,response,final,transport,response,handler,response,transport,response,handler,transport,response,handler,response,response,handlers,on,response,received,request,id,listener,if,transport,response,handler,null,final,response,delivered,response,try,bytes,stream,output,output,new,bytes,stream,output,response,write,to,output,delivered,response,transport,response,handler,read,new,named,writeable,aware,stream,input,output,bytes,stream,input,writeable,registry,catch,ioexception,unsupported,operation,exception,e,throw,new,assertion,error,failed,to,serialize,deserialize,response,response,e,transport,response,handler,handle,response,delivered,response
MockTransport -> @SuppressWarnings("unchecked")     public <Response extends TransportResponse> void handleResponse(final long requestId, final Response response);1551176390;simulate a response for the given requestId;@SuppressWarnings("unchecked")_    public <Response extends TransportResponse> void handleResponse(final long requestId, final Response response) {_        final TransportResponseHandler<Response> transportResponseHandler =_            (TransportResponseHandler<Response>) responseHandlers.onResponseReceived(requestId, listener)__        if (transportResponseHandler != null) {_            final Response deliveredResponse__            try (BytesStreamOutput output = new BytesStreamOutput()) {_                response.writeTo(output)__                deliveredResponse = transportResponseHandler.read(_                    new NamedWriteableAwareStreamInput(output.bytes().streamInput(), writeableRegistry()))__            } catch (IOException | UnsupportedOperationException e) {_                throw new AssertionError("failed to serialize/deserialize response " + response, e)__            }_            transportResponseHandler.handleResponse(deliveredResponse)__        }_    };simulate,a,response,for,the,given,request,id;suppress,warnings,unchecked,public,response,extends,transport,response,void,handle,response,final,long,request,id,final,response,response,final,transport,response,handler,response,transport,response,handler,transport,response,handler,response,response,handlers,on,response,received,request,id,listener,if,transport,response,handler,null,final,response,delivered,response,try,bytes,stream,output,output,new,bytes,stream,output,response,write,to,output,delivered,response,transport,response,handler,read,new,named,writeable,aware,stream,input,output,bytes,stream,input,writeable,registry,catch,ioexception,unsupported,operation,exception,e,throw,new,assertion,error,failed,to,serialize,deserialize,response,response,e,transport,response,handler,handle,response,delivered,response
MockTransport -> public void handleLocalError(final long requestId, final Throwable t);1544081506;simulate a local error for the given requestId, will be wrapped_by a {@link SendRequestTransportException}__@param requestId the id corresponding to the captured send_request_@param t         the failure to wrap;public void handleLocalError(final long requestId, final Throwable t) {_        Tuple<DiscoveryNode, String> request = requests.get(requestId)__        assert request != null__        this.handleError(requestId, new SendRequestTransportException(request.v1(), request.v2(), t))__    };simulate,a,local,error,for,the,given,request,id,will,be,wrapped,by,a,link,send,request,transport,exception,param,request,id,the,id,corresponding,to,the,captured,send,request,param,t,the,failure,to,wrap;public,void,handle,local,error,final,long,request,id,final,throwable,t,tuple,discovery,node,string,request,requests,get,request,id,assert,request,null,this,handle,error,request,id,new,send,request,transport,exception,request,v1,request,v2,t
MockTransport -> public void handleLocalError(final long requestId, final Throwable t);1548996340;simulate a local error for the given requestId, will be wrapped_by a {@link SendRequestTransportException}__@param requestId the id corresponding to the captured send_request_@param t         the failure to wrap;public void handleLocalError(final long requestId, final Throwable t) {_        Tuple<DiscoveryNode, String> request = requests.get(requestId)__        assert request != null__        this.handleError(requestId, new SendRequestTransportException(request.v1(), request.v2(), t))__    };simulate,a,local,error,for,the,given,request,id,will,be,wrapped,by,a,link,send,request,transport,exception,param,request,id,the,id,corresponding,to,the,captured,send,request,param,t,the,failure,to,wrap;public,void,handle,local,error,final,long,request,id,final,throwable,t,tuple,discovery,node,string,request,requests,get,request,id,assert,request,null,this,handle,error,request,id,new,send,request,transport,exception,request,v1,request,v2,t
MockTransport -> public void handleLocalError(final long requestId, final Throwable t);1550601141;simulate a local error for the given requestId, will be wrapped_by a {@link SendRequestTransportException}__@param requestId the id corresponding to the captured send_request_@param t         the failure to wrap;public void handleLocalError(final long requestId, final Throwable t) {_        Tuple<DiscoveryNode, String> request = requests.get(requestId)__        assert request != null__        this.handleError(requestId, new SendRequestTransportException(request.v1(), request.v2(), t))__    };simulate,a,local,error,for,the,given,request,id,will,be,wrapped,by,a,link,send,request,transport,exception,param,request,id,the,id,corresponding,to,the,captured,send,request,param,t,the,failure,to,wrap;public,void,handle,local,error,final,long,request,id,final,throwable,t,tuple,discovery,node,string,request,requests,get,request,id,assert,request,null,this,handle,error,request,id,new,send,request,transport,exception,request,v1,request,v2,t
MockTransport -> public void handleLocalError(final long requestId, final Throwable t);1551176390;simulate a local error for the given requestId, will be wrapped_by a {@link SendRequestTransportException}__@param requestId the id corresponding to the captured send_request_@param t         the failure to wrap;public void handleLocalError(final long requestId, final Throwable t) {_        Tuple<DiscoveryNode, String> request = requests.get(requestId)__        assert request != null__        this.handleError(requestId, new SendRequestTransportException(request.v1(), request.v2(), t))__    };simulate,a,local,error,for,the,given,request,id,will,be,wrapped,by,a,link,send,request,transport,exception,param,request,id,the,id,corresponding,to,the,captured,send,request,param,t,the,failure,to,wrap;public,void,handle,local,error,final,long,request,id,final,throwable,t,tuple,discovery,node,string,request,requests,get,request,id,assert,request,null,this,handle,error,request,id,new,send,request,transport,exception,request,v1,request,v2,t
