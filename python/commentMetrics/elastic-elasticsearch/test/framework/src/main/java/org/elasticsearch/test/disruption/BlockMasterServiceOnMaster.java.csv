commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Priority priority() {     return Priority.IMMEDIATE. }
false;public;1;13;;@Override public ClusterState execute(ClusterState currentState) throws Exception {     started.countDown().     CountDownLatch latch = disruptionLatch.get().     if (latch != null) {         try {             latch.await().         } catch (InterruptedException e) {             Throwables.rethrow(e).         }     }     return currentState. }
false;public;2;4;;@Override public void onFailure(String source, Exception e) {     logger.error("unexpected error during disruption", e). }
false;public;0;45;;@Override public void startDisrupting() {     disruptedNode = cluster.getMasterName().     final String disruptionNodeCopy = disruptedNode.     if (disruptionNodeCopy == null) {         return.     }     ClusterService clusterService = cluster.getInstance(ClusterService.class, disruptionNodeCopy).     if (clusterService == null) {         return.     }     logger.info("blocking master service on node [{}]", disruptionNodeCopy).     boolean success = disruptionLatch.compareAndSet(null, new CountDownLatch(1)).     assert success : "startDisrupting called without waiting on stopDisrupting to complete".     final CountDownLatch started = new CountDownLatch(1).     clusterService.getMasterService().submitStateUpdateTask("service_disruption_block", new ClusterStateUpdateTask() {          @Override         public Priority priority() {             return Priority.IMMEDIATE.         }          @Override         public ClusterState execute(ClusterState currentState) throws Exception {             started.countDown().             CountDownLatch latch = disruptionLatch.get().             if (latch != null) {                 try {                     latch.await().                 } catch (InterruptedException e) {                     Throwables.rethrow(e).                 }             }             return currentState.         }          @Override         public void onFailure(String source, Exception e) {             logger.error("unexpected error during disruption", e).         }     }).     try {         started.await().     } catch (InterruptedException e) {     } }
false;public;0;8;;@Override public void stopDisrupting() {     CountDownLatch latch = disruptionLatch.get().     if (latch != null) {         latch.countDown().     } }
false;public;1;4;;@Override public void removeAndEnsureHealthy(InternalTestCluster cluster) {     removeFromCluster(cluster). }
false;public;0;4;;@Override public TimeValue expectedTimeToHeal() {     return TimeValue.timeValueMinutes(0). }
