commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static Stream<JsonLogLine> from(BufferedReader reader) throws IOException {     return new JsonLogsStream(reader).stream(). }
false;public,static;1;3;;public static Stream<JsonLogLine> from(Path path) throws IOException {     return from(Files.newBufferedReader(path)). }
false;private;0;5;;private Stream<JsonLogLine> stream() {     Spliterator<JsonLogLine> spliterator = Spliterators.spliteratorUnknownSize(new JsonIterator(), Spliterator.ORDERED).     return StreamSupport.stream(spliterator, false).onClose(this::close). }
false;private;0;8;;private void close() {     try {         parser.close().         reader.close().     } catch (IOException e) {         throw new UncheckedIOException(e).     } }
false;public;0;4;;@Override public boolean hasNext() {     return parser.isClosed() == false. }
false;public;0;6;;@Override public JsonLogLine next() {     JsonLogLine apply = JsonLogLine.PARSER.apply(parser, null).     nextToken().     return apply. }
false;private;0;7;;private void nextToken() {     try {         parser.nextToken().     } catch (IOException e) {         throw new UncheckedIOException(e).     } }
