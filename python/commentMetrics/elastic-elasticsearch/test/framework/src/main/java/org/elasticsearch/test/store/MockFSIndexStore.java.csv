commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Settings additionalSettings() {     return Settings.builder().put(IndexModule.INDEX_STORE_TYPE_SETTING.getKey(), "mock").build(). }
false;public;0;7;;@Override public List<Setting<?>> getSettings() {     return Arrays.asList(INDEX_CHECK_INDEX_ON_CLOSE_SETTING, MockFSDirectoryService.CRASH_INDEX_SETTING, MockFSDirectoryService.RANDOM_IO_EXCEPTION_RATE_SETTING, MockFSDirectoryService.RANDOM_IO_EXCEPTION_RATE_ON_OPEN_SETTING). }
false;public;0;4;;@Override public Map<String, Function<IndexSettings, IndexStore>> getIndexStoreFactories() {     return Collections.singletonMap("mock", MockFSIndexStore::new). }
false;public;1;9;;@Override public void onIndexModule(IndexModule indexModule) {     Settings indexSettings = indexModule.getSettings().     if ("mock".equals(indexSettings.get(IndexModule.INDEX_STORE_TYPE_SETTING.getKey()))) {         if (INDEX_CHECK_INDEX_ON_CLOSE_SETTING.get(indexSettings)) {             indexModule.addIndexEventListener(new Listener()).         }     } }
false;public;1;4;;@Override public DirectoryService newDirectoryService(ShardPath path) {     return new MockFSDirectoryService(indexSettings, path). }
false;public;3;10;;@Override public void afterIndexShardClosed(ShardId shardId, @Nullable IndexShard indexShard, Settings indexSettings) {     if (indexShard != null) {         Boolean remove = shardSet.remove(indexShard).         if (remove == Boolean.TRUE) {             Logger logger = Loggers.getLogger(getClass(), indexShard.shardId()).             MockFSDirectoryService.checkIndex(logger, indexShard.store(), indexShard.shardId()).         }     } }
false;public;4;8;;@Override public void indexShardStateChanged(IndexShard indexShard, @Nullable IndexShardState previousState, IndexShardState currentState, @Nullable String reason) {     if (currentState == IndexShardState.CLOSED && validCheckIndexStates.contains(previousState)) {         shardSet.put(indexShard, Boolean.TRUE).     } }
