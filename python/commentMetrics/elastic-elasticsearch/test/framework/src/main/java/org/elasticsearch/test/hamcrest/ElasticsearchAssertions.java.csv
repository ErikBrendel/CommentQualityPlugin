# id;timestamp;commentText;codeText;commentWords;codeWords
ElasticsearchAssertions -> private static void assertMapEquals(Map<String, Object> expected, Map<String, Object> actual);1524684173;Compares two maps recursively, using arrays comparisons for byte[] through Arrays.equals(byte[], byte[]);private static void assertMapEquals(Map<String, Object> expected, Map<String, Object> actual) {_        assertEquals(expected.size(), actual.size())__        for (Map.Entry<String, Object> expectedEntry : expected.entrySet()) {_            String expectedKey = expectedEntry.getKey()__            Object expectedValue = expectedEntry.getValue()__            if (expectedValue == null) {_                assertTrue(actual.get(expectedKey) == null && actual.containsKey(expectedKey))__            } else {_                Object actualValue = actual.get(expectedKey)__                assertObjectEquals(expectedValue, actualValue)__            }_        }_    };compares,two,maps,recursively,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;private,static,void,assert,map,equals,map,string,object,expected,map,string,object,actual,assert,equals,expected,size,actual,size,for,map,entry,string,object,expected,entry,expected,entry,set,string,expected,key,expected,entry,get,key,object,expected,value,expected,entry,get,value,if,expected,value,null,assert,true,actual,get,expected,key,null,actual,contains,key,expected,key,else,object,actual,value,actual,get,expected,key,assert,object,equals,expected,value,actual,value
ElasticsearchAssertions -> private static void assertMapEquals(Map<String, Object> expected, Map<String, Object> actual);1527840262;Compares two maps recursively, using arrays comparisons for byte[] through Arrays.equals(byte[], byte[]);private static void assertMapEquals(Map<String, Object> expected, Map<String, Object> actual) {_        assertEquals(expected.size(), actual.size())__        for (Map.Entry<String, Object> expectedEntry : expected.entrySet()) {_            String expectedKey = expectedEntry.getKey()__            Object expectedValue = expectedEntry.getValue()__            if (expectedValue == null) {_                assertTrue(actual.get(expectedKey) == null && actual.containsKey(expectedKey))__            } else {_                Object actualValue = actual.get(expectedKey)__                assertObjectEquals(expectedValue, actualValue)__            }_        }_    };compares,two,maps,recursively,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;private,static,void,assert,map,equals,map,string,object,expected,map,string,object,actual,assert,equals,expected,size,actual,size,for,map,entry,string,object,expected,entry,expected,entry,set,string,expected,key,expected,entry,get,key,object,expected,value,expected,entry,get,value,if,expected,value,null,assert,true,actual,get,expected,key,null,actual,contains,key,expected,key,else,object,actual,value,actual,get,expected,key,assert,object,equals,expected,value,actual,value
ElasticsearchAssertions -> private static void assertMapEquals(Map<String, Object> expected, Map<String, Object> actual);1528762805;Compares two maps recursively, using arrays comparisons for byte[] through Arrays.equals(byte[], byte[]);private static void assertMapEquals(Map<String, Object> expected, Map<String, Object> actual) {_        assertEquals(expected.size(), actual.size())__        for (Map.Entry<String, Object> expectedEntry : expected.entrySet()) {_            String expectedKey = expectedEntry.getKey()__            Object expectedValue = expectedEntry.getValue()__            if (expectedValue == null) {_                assertTrue(actual.get(expectedKey) == null && actual.containsKey(expectedKey))__            } else {_                Object actualValue = actual.get(expectedKey)__                assertObjectEquals(expectedValue, actualValue)__            }_        }_    };compares,two,maps,recursively,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;private,static,void,assert,map,equals,map,string,object,expected,map,string,object,actual,assert,equals,expected,size,actual,size,for,map,entry,string,object,expected,entry,expected,entry,set,string,expected,key,expected,entry,get,key,object,expected,value,expected,entry,get,value,if,expected,value,null,assert,true,actual,get,expected,key,null,actual,contains,key,expected,key,else,object,actual,value,actual,get,expected,key,assert,object,equals,expected,value,actual,value
ElasticsearchAssertions -> private static void assertMapEquals(Map<String, Object> expected, Map<String, Object> actual);1532353780;Compares two maps recursively, using arrays comparisons for byte[] through Arrays.equals(byte[], byte[]);private static void assertMapEquals(Map<String, Object> expected, Map<String, Object> actual) {_        assertEquals(expected.size(), actual.size())__        for (Map.Entry<String, Object> expectedEntry : expected.entrySet()) {_            String expectedKey = expectedEntry.getKey()__            Object expectedValue = expectedEntry.getValue()__            if (expectedValue == null) {_                assertTrue(actual.get(expectedKey) == null && actual.containsKey(expectedKey))__            } else {_                Object actualValue = actual.get(expectedKey)__                assertObjectEquals(expectedValue, actualValue)__            }_        }_    };compares,two,maps,recursively,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;private,static,void,assert,map,equals,map,string,object,expected,map,string,object,actual,assert,equals,expected,size,actual,size,for,map,entry,string,object,expected,entry,expected,entry,set,string,expected,key,expected,entry,get,key,object,expected,value,expected,entry,get,value,if,expected,value,null,assert,true,actual,get,expected,key,null,actual,contains,key,expected,key,else,object,actual,value,actual,get,expected,key,assert,object,equals,expected,value,actual,value
ElasticsearchAssertions -> private static void assertMapEquals(Map<String, Object> expected, Map<String, Object> actual);1534362961;Compares two maps recursively, using arrays comparisons for byte[] through Arrays.equals(byte[], byte[]);private static void assertMapEquals(Map<String, Object> expected, Map<String, Object> actual) {_        assertEquals(expected.size(), actual.size())__        for (Map.Entry<String, Object> expectedEntry : expected.entrySet()) {_            String expectedKey = expectedEntry.getKey()__            Object expectedValue = expectedEntry.getValue()__            if (expectedValue == null) {_                assertTrue(actual.get(expectedKey) == null && actual.containsKey(expectedKey))__            } else {_                Object actualValue = actual.get(expectedKey)__                assertObjectEquals(expectedValue, actualValue)__            }_        }_    };compares,two,maps,recursively,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;private,static,void,assert,map,equals,map,string,object,expected,map,string,object,actual,assert,equals,expected,size,actual,size,for,map,entry,string,object,expected,entry,expected,entry,set,string,expected,key,expected,entry,get,key,object,expected,value,expected,entry,get,value,if,expected,value,null,assert,true,actual,get,expected,key,null,actual,contains,key,expected,key,else,object,actual,value,actual,get,expected,key,assert,object,equals,expected,value,actual,value
ElasticsearchAssertions -> private static void assertMapEquals(Map<String, Object> expected, Map<String, Object> actual);1537806831;Compares two maps recursively, using arrays comparisons for byte[] through Arrays.equals(byte[], byte[]);private static void assertMapEquals(Map<String, Object> expected, Map<String, Object> actual) {_        assertEquals(expected.size(), actual.size())__        for (Map.Entry<String, Object> expectedEntry : expected.entrySet()) {_            String expectedKey = expectedEntry.getKey()__            Object expectedValue = expectedEntry.getValue()__            if (expectedValue == null) {_                assertTrue(actual.get(expectedKey) == null && actual.containsKey(expectedKey))__            } else {_                Object actualValue = actual.get(expectedKey)__                assertObjectEquals(expectedValue, actualValue)__            }_        }_    };compares,two,maps,recursively,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;private,static,void,assert,map,equals,map,string,object,expected,map,string,object,actual,assert,equals,expected,size,actual,size,for,map,entry,string,object,expected,entry,expected,entry,set,string,expected,key,expected,entry,get,key,object,expected,value,expected,entry,get,value,if,expected,value,null,assert,true,actual,get,expected,key,null,actual,contains,key,expected,key,else,object,actual,value,actual,get,expected,key,assert,object,equals,expected,value,actual,value
ElasticsearchAssertions -> private static void assertMapEquals(Map<String, Object> expected, Map<String, Object> actual);1540912197;Compares two maps recursively, using arrays comparisons for byte[] through Arrays.equals(byte[], byte[]);private static void assertMapEquals(Map<String, Object> expected, Map<String, Object> actual) {_        assertEquals(expected.size(), actual.size())__        for (Map.Entry<String, Object> expectedEntry : expected.entrySet()) {_            String expectedKey = expectedEntry.getKey()__            Object expectedValue = expectedEntry.getValue()__            if (expectedValue == null) {_                assertTrue(actual.get(expectedKey) == null && actual.containsKey(expectedKey))__            } else {_                Object actualValue = actual.get(expectedKey)__                assertObjectEquals(expectedValue, actualValue)__            }_        }_    };compares,two,maps,recursively,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;private,static,void,assert,map,equals,map,string,object,expected,map,string,object,actual,assert,equals,expected,size,actual,size,for,map,entry,string,object,expected,entry,expected,entry,set,string,expected,key,expected,entry,get,key,object,expected,value,expected,entry,get,value,if,expected,value,null,assert,true,actual,get,expected,key,null,actual,contains,key,expected,key,else,object,actual,value,actual,get,expected,key,assert,object,equals,expected,value,actual,value
ElasticsearchAssertions -> private static void assertMapEquals(Map<String, Object> expected, Map<String, Object> actual);1544035746;Compares two maps recursively, using arrays comparisons for byte[] through Arrays.equals(byte[], byte[]);private static void assertMapEquals(Map<String, Object> expected, Map<String, Object> actual) {_        assertEquals(expected.size(), actual.size())__        for (Map.Entry<String, Object> expectedEntry : expected.entrySet()) {_            String expectedKey = expectedEntry.getKey()__            Object expectedValue = expectedEntry.getValue()__            if (expectedValue == null) {_                assertTrue(actual.get(expectedKey) == null && actual.containsKey(expectedKey))__            } else {_                Object actualValue = actual.get(expectedKey)__                assertObjectEquals(expectedValue, actualValue)__            }_        }_    };compares,two,maps,recursively,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;private,static,void,assert,map,equals,map,string,object,expected,map,string,object,actual,assert,equals,expected,size,actual,size,for,map,entry,string,object,expected,entry,expected,entry,set,string,expected,key,expected,entry,get,key,object,expected,value,expected,entry,get,value,if,expected,value,null,assert,true,actual,get,expected,key,null,actual,contains,key,expected,key,else,object,actual,value,actual,get,expected,key,assert,object,equals,expected,value,actual,value
ElasticsearchAssertions -> private static void assertMapEquals(Map<String, Object> expected, Map<String, Object> actual);1547030937;Compares two maps recursively, using arrays comparisons for byte[] through Arrays.equals(byte[], byte[]);private static void assertMapEquals(Map<String, Object> expected, Map<String, Object> actual) {_        assertEquals(expected.size(), actual.size())__        for (Map.Entry<String, Object> expectedEntry : expected.entrySet()) {_            String expectedKey = expectedEntry.getKey()__            Object expectedValue = expectedEntry.getValue()__            if (expectedValue == null) {_                assertTrue(actual.get(expectedKey) == null && actual.containsKey(expectedKey))__            } else {_                Object actualValue = actual.get(expectedKey)__                assertObjectEquals(expectedValue, actualValue)__            }_        }_    };compares,two,maps,recursively,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;private,static,void,assert,map,equals,map,string,object,expected,map,string,object,actual,assert,equals,expected,size,actual,size,for,map,entry,string,object,expected,entry,expected,entry,set,string,expected,key,expected,entry,get,key,object,expected,value,expected,entry,get,value,if,expected,value,null,assert,true,actual,get,expected,key,null,actual,contains,key,expected,key,else,object,actual,value,actual,get,expected,key,assert,object,equals,expected,value,actual,value
ElasticsearchAssertions -> private static void assertMapEquals(Map<String, Object> expected, Map<String, Object> actual);1547108736;Compares two maps recursively, using arrays comparisons for byte[] through Arrays.equals(byte[], byte[]);private static void assertMapEquals(Map<String, Object> expected, Map<String, Object> actual) {_        assertEquals(expected.size(), actual.size())__        for (Map.Entry<String, Object> expectedEntry : expected.entrySet()) {_            String expectedKey = expectedEntry.getKey()__            Object expectedValue = expectedEntry.getValue()__            if (expectedValue == null) {_                assertTrue(actual.get(expectedKey) == null && actual.containsKey(expectedKey))__            } else {_                Object actualValue = actual.get(expectedKey)__                assertObjectEquals(expectedValue, actualValue)__            }_        }_    };compares,two,maps,recursively,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;private,static,void,assert,map,equals,map,string,object,expected,map,string,object,actual,assert,equals,expected,size,actual,size,for,map,entry,string,object,expected,entry,expected,entry,set,string,expected,key,expected,entry,get,key,object,expected,value,expected,entry,get,value,if,expected,value,null,assert,true,actual,get,expected,key,null,actual,contains,key,expected,key,else,object,actual,value,actual,get,expected,key,assert,object,equals,expected,value,actual,value
ElasticsearchAssertions -> private static void assertMapEquals(Map<String, Object> expected, Map<String, Object> actual);1551176390;Compares two maps recursively, using arrays comparisons for byte[] through Arrays.equals(byte[], byte[]);private static void assertMapEquals(Map<String, Object> expected, Map<String, Object> actual) {_        assertEquals(expected.size(), actual.size())__        for (Map.Entry<String, Object> expectedEntry : expected.entrySet()) {_            String expectedKey = expectedEntry.getKey()__            Object expectedValue = expectedEntry.getValue()__            if (expectedValue == null) {_                assertTrue(actual.get(expectedKey) == null && actual.containsKey(expectedKey))__            } else {_                Object actualValue = actual.get(expectedKey)__                assertObjectEquals(expectedValue, actualValue)__            }_        }_    };compares,two,maps,recursively,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;private,static,void,assert,map,equals,map,string,object,expected,map,string,object,actual,assert,equals,expected,size,actual,size,for,map,entry,string,object,expected,entry,expected,entry,set,string,expected,key,expected,entry,get,key,object,expected,value,expected,entry,get,value,if,expected,value,null,assert,true,actual,get,expected,key,null,actual,contains,key,expected,key,else,object,actual,value,actual,get,expected,key,assert,object,equals,expected,value,actual,value
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, RestStatus status);1524684173;Run future.actionGet() and check that it throws an exception of the right type, with a given {@link org.elasticsearch.rest.RestStatus};public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, RestStatus status) {_        assertThrows(future, exceptionClass, status, null)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,with,a,given,link,org,elasticsearch,rest,rest,status;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,rest,status,status,assert,throws,future,exception,class,status,null
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, RestStatus status);1527840262;Run future.actionGet() and check that it throws an exception of the right type, with a given {@link org.elasticsearch.rest.RestStatus};public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, RestStatus status) {_        assertThrows(future, exceptionClass, status, null)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,with,a,given,link,org,elasticsearch,rest,rest,status;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,rest,status,status,assert,throws,future,exception,class,status,null
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, RestStatus status);1528762805;Run future.actionGet() and check that it throws an exception of the right type, with a given {@link org.elasticsearch.rest.RestStatus};public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, RestStatus status) {_        assertThrows(future, exceptionClass, status, null)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,with,a,given,link,org,elasticsearch,rest,rest,status;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,rest,status,status,assert,throws,future,exception,class,status,null
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, RestStatus status);1532353780;Run future.actionGet() and check that it throws an exception of the right type, with a given {@link org.elasticsearch.rest.RestStatus};public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, RestStatus status) {_        assertThrows(future, exceptionClass, status, null)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,with,a,given,link,org,elasticsearch,rest,rest,status;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,rest,status,status,assert,throws,future,exception,class,status,null
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, RestStatus status);1534362961;Run future.actionGet() and check that it throws an exception of the right type, with a given {@link org.elasticsearch.rest.RestStatus};public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, RestStatus status) {_        assertThrows(future, exceptionClass, status, null)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,with,a,given,link,org,elasticsearch,rest,rest,status;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,rest,status,status,assert,throws,future,exception,class,status,null
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, RestStatus status);1537806831;Run future.actionGet() and check that it throws an exception of the right type, with a given {@link RestStatus};public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, RestStatus status) {_        assertThrows(future, exceptionClass, status, null)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,with,a,given,link,rest,status;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,rest,status,status,assert,throws,future,exception,class,status,null
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, RestStatus status);1540912197;Run future.actionGet() and check that it throws an exception of the right type, with a given {@link RestStatus};public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, RestStatus status) {_        assertThrows(future, exceptionClass, status, null)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,with,a,given,link,rest,status;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,rest,status,status,assert,throws,future,exception,class,status,null
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, RestStatus status);1544035746;Run future.actionGet() and check that it throws an exception of the right type, with a given {@link RestStatus};public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, RestStatus status) {_        assertThrows(future, exceptionClass, status, null)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,with,a,given,link,rest,status;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,rest,status,status,assert,throws,future,exception,class,status,null
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, RestStatus status);1547030937;Run future.actionGet() and check that it throws an exception of the right type, with a given {@link RestStatus};public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, RestStatus status) {_        assertThrows(future, exceptionClass, status, null)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,with,a,given,link,rest,status;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,rest,status,status,assert,throws,future,exception,class,status,null
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, RestStatus status);1547108736;Run future.actionGet() and check that it throws an exception of the right type, with a given {@link RestStatus};public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, RestStatus status) {_        assertThrows(future, exceptionClass, status, null)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,with,a,given,link,rest,status;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,rest,status,status,assert,throws,future,exception,class,status,null
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, RestStatus status);1551176390;Run future.actionGet() and check that it throws an exception of the right type, with a given {@link RestStatus};public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, RestStatus status) {_        assertThrows(future, exceptionClass, status, null)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,with,a,given,link,rest,status;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,rest,status,status,assert,throws,future,exception,class,status,null
ElasticsearchAssertions -> public static void assertIndexTemplateMissing(GetIndexTemplatesResponse templatesResponse, String name);1524684173;Assert that an index template is missing;public static void assertIndexTemplateMissing(GetIndexTemplatesResponse templatesResponse, String name) {_        List<String> templateNames = new ArrayList<>()__        for (IndexTemplateMetaData indexTemplateMetaData : templatesResponse.getIndexTemplates()) {_            templateNames.add(indexTemplateMetaData.name())__        }_        assertThat(templateNames, not(hasItem(name)))__    };assert,that,an,index,template,is,missing;public,static,void,assert,index,template,missing,get,index,templates,response,templates,response,string,name,list,string,template,names,new,array,list,for,index,template,meta,data,index,template,meta,data,templates,response,get,index,templates,template,names,add,index,template,meta,data,name,assert,that,template,names,not,has,item,name
ElasticsearchAssertions -> public static void assertIndexTemplateMissing(GetIndexTemplatesResponse templatesResponse, String name);1527840262;Assert that an index template is missing;public static void assertIndexTemplateMissing(GetIndexTemplatesResponse templatesResponse, String name) {_        List<String> templateNames = new ArrayList<>()__        for (IndexTemplateMetaData indexTemplateMetaData : templatesResponse.getIndexTemplates()) {_            templateNames.add(indexTemplateMetaData.name())__        }_        assertThat(templateNames, not(hasItem(name)))__    };assert,that,an,index,template,is,missing;public,static,void,assert,index,template,missing,get,index,templates,response,templates,response,string,name,list,string,template,names,new,array,list,for,index,template,meta,data,index,template,meta,data,templates,response,get,index,templates,template,names,add,index,template,meta,data,name,assert,that,template,names,not,has,item,name
ElasticsearchAssertions -> public static void assertIndexTemplateMissing(GetIndexTemplatesResponse templatesResponse, String name);1528762805;Assert that an index template is missing;public static void assertIndexTemplateMissing(GetIndexTemplatesResponse templatesResponse, String name) {_        List<String> templateNames = new ArrayList<>()__        for (IndexTemplateMetaData indexTemplateMetaData : templatesResponse.getIndexTemplates()) {_            templateNames.add(indexTemplateMetaData.name())__        }_        assertThat(templateNames, not(hasItem(name)))__    };assert,that,an,index,template,is,missing;public,static,void,assert,index,template,missing,get,index,templates,response,templates,response,string,name,list,string,template,names,new,array,list,for,index,template,meta,data,index,template,meta,data,templates,response,get,index,templates,template,names,add,index,template,meta,data,name,assert,that,template,names,not,has,item,name
ElasticsearchAssertions -> public static void assertIndexTemplateMissing(GetIndexTemplatesResponse templatesResponse, String name);1532353780;Assert that an index template is missing;public static void assertIndexTemplateMissing(GetIndexTemplatesResponse templatesResponse, String name) {_        List<String> templateNames = new ArrayList<>()__        for (IndexTemplateMetaData indexTemplateMetaData : templatesResponse.getIndexTemplates()) {_            templateNames.add(indexTemplateMetaData.name())__        }_        assertThat(templateNames, not(hasItem(name)))__    };assert,that,an,index,template,is,missing;public,static,void,assert,index,template,missing,get,index,templates,response,templates,response,string,name,list,string,template,names,new,array,list,for,index,template,meta,data,index,template,meta,data,templates,response,get,index,templates,template,names,add,index,template,meta,data,name,assert,that,template,names,not,has,item,name
ElasticsearchAssertions -> public static void assertIndexTemplateMissing(GetIndexTemplatesResponse templatesResponse, String name);1534362961;Assert that an index template is missing;public static void assertIndexTemplateMissing(GetIndexTemplatesResponse templatesResponse, String name) {_        List<String> templateNames = new ArrayList<>()__        for (IndexTemplateMetaData indexTemplateMetaData : templatesResponse.getIndexTemplates()) {_            templateNames.add(indexTemplateMetaData.name())__        }_        assertThat(templateNames, not(hasItem(name)))__    };assert,that,an,index,template,is,missing;public,static,void,assert,index,template,missing,get,index,templates,response,templates,response,string,name,list,string,template,names,new,array,list,for,index,template,meta,data,index,template,meta,data,templates,response,get,index,templates,template,names,add,index,template,meta,data,name,assert,that,template,names,not,has,item,name
ElasticsearchAssertions -> public static void assertIndexTemplateMissing(GetIndexTemplatesResponse templatesResponse, String name);1537806831;Assert that an index template is missing;public static void assertIndexTemplateMissing(GetIndexTemplatesResponse templatesResponse, String name) {_        List<String> templateNames = new ArrayList<>()__        for (IndexTemplateMetaData indexTemplateMetaData : templatesResponse.getIndexTemplates()) {_            templateNames.add(indexTemplateMetaData.name())__        }_        assertThat(templateNames, not(hasItem(name)))__    };assert,that,an,index,template,is,missing;public,static,void,assert,index,template,missing,get,index,templates,response,templates,response,string,name,list,string,template,names,new,array,list,for,index,template,meta,data,index,template,meta,data,templates,response,get,index,templates,template,names,add,index,template,meta,data,name,assert,that,template,names,not,has,item,name
ElasticsearchAssertions -> public static void assertIndexTemplateMissing(GetIndexTemplatesResponse templatesResponse, String name);1540912197;Assert that an index template is missing;public static void assertIndexTemplateMissing(GetIndexTemplatesResponse templatesResponse, String name) {_        List<String> templateNames = new ArrayList<>()__        for (IndexTemplateMetaData indexTemplateMetaData : templatesResponse.getIndexTemplates()) {_            templateNames.add(indexTemplateMetaData.name())__        }_        assertThat(templateNames, not(hasItem(name)))__    };assert,that,an,index,template,is,missing;public,static,void,assert,index,template,missing,get,index,templates,response,templates,response,string,name,list,string,template,names,new,array,list,for,index,template,meta,data,index,template,meta,data,templates,response,get,index,templates,template,names,add,index,template,meta,data,name,assert,that,template,names,not,has,item,name
ElasticsearchAssertions -> public static void assertIndexTemplateMissing(GetIndexTemplatesResponse templatesResponse, String name);1544035746;Assert that an index template is missing;public static void assertIndexTemplateMissing(GetIndexTemplatesResponse templatesResponse, String name) {_        List<String> templateNames = new ArrayList<>()__        for (IndexTemplateMetaData indexTemplateMetaData : templatesResponse.getIndexTemplates()) {_            templateNames.add(indexTemplateMetaData.name())__        }_        assertThat(templateNames, not(hasItem(name)))__    };assert,that,an,index,template,is,missing;public,static,void,assert,index,template,missing,get,index,templates,response,templates,response,string,name,list,string,template,names,new,array,list,for,index,template,meta,data,index,template,meta,data,templates,response,get,index,templates,template,names,add,index,template,meta,data,name,assert,that,template,names,not,has,item,name
ElasticsearchAssertions -> public static void assertIndexTemplateMissing(GetIndexTemplatesResponse templatesResponse, String name);1547030937;Assert that an index template is missing;public static void assertIndexTemplateMissing(GetIndexTemplatesResponse templatesResponse, String name) {_        List<String> templateNames = new ArrayList<>()__        for (IndexTemplateMetaData indexTemplateMetaData : templatesResponse.getIndexTemplates()) {_            templateNames.add(indexTemplateMetaData.name())__        }_        assertThat(templateNames, not(hasItem(name)))__    };assert,that,an,index,template,is,missing;public,static,void,assert,index,template,missing,get,index,templates,response,templates,response,string,name,list,string,template,names,new,array,list,for,index,template,meta,data,index,template,meta,data,templates,response,get,index,templates,template,names,add,index,template,meta,data,name,assert,that,template,names,not,has,item,name
ElasticsearchAssertions -> public static void assertIndexTemplateMissing(GetIndexTemplatesResponse templatesResponse, String name);1547108736;Assert that an index template is missing;public static void assertIndexTemplateMissing(GetIndexTemplatesResponse templatesResponse, String name) {_        List<String> templateNames = new ArrayList<>()__        for (IndexTemplateMetaData indexTemplateMetaData : templatesResponse.getIndexTemplates()) {_            templateNames.add(indexTemplateMetaData.name())__        }_        assertThat(templateNames, not(hasItem(name)))__    };assert,that,an,index,template,is,missing;public,static,void,assert,index,template,missing,get,index,templates,response,templates,response,string,name,list,string,template,names,new,array,list,for,index,template,meta,data,index,template,meta,data,templates,response,get,index,templates,template,names,add,index,template,meta,data,name,assert,that,template,names,not,has,item,name
ElasticsearchAssertions -> public static void assertIndexTemplateMissing(GetIndexTemplatesResponse templatesResponse, String name);1551176390;Assert that an index template is missing;public static void assertIndexTemplateMissing(GetIndexTemplatesResponse templatesResponse, String name) {_        List<String> templateNames = new ArrayList<>()__        for (IndexTemplateMetaData indexTemplateMetaData : templatesResponse.getIndexTemplates()) {_            templateNames.add(indexTemplateMetaData.name())__        }_        assertThat(templateNames, not(hasItem(name)))__    };assert,that,an,index,template,is,missing;public,static,void,assert,index,template,missing,get,index,templates,response,templates,response,string,name,list,string,template,names,new,array,list,for,index,template,meta,data,index,template,meta,data,templates,response,get,index,templates,template,names,add,index,template,meta,data,name,assert,that,template,names,not,has,item,name
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, RestStatus status);1527840262;Run the request from a given builder and check that it throws an exception of the right type, with a given {@link org.elasticsearch.rest.RestStatus};public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, RestStatus status) {_        assertThrows(builder.execute(), exceptionClass, status)__    };run,the,request,from,a,given,builder,and,check,that,it,throws,an,exception,of,the,right,type,with,a,given,link,org,elasticsearch,rest,rest,status;public,static,e,extends,throwable,void,assert,throws,action,request,builder,builder,class,e,exception,class,rest,status,status,assert,throws,builder,execute,exception,class,status
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, RestStatus status);1528762805;Run the request from a given builder and check that it throws an exception of the right type, with a given {@link org.elasticsearch.rest.RestStatus};public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, RestStatus status) {_        assertThrows(builder.execute(), exceptionClass, status)__    };run,the,request,from,a,given,builder,and,check,that,it,throws,an,exception,of,the,right,type,with,a,given,link,org,elasticsearch,rest,rest,status;public,static,e,extends,throwable,void,assert,throws,action,request,builder,builder,class,e,exception,class,rest,status,status,assert,throws,builder,execute,exception,class,status
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, RestStatus status);1532353780;Run the request from a given builder and check that it throws an exception of the right type, with a given {@link org.elasticsearch.rest.RestStatus};public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, RestStatus status) {_        assertThrows(builder.execute(), exceptionClass, status)__    };run,the,request,from,a,given,builder,and,check,that,it,throws,an,exception,of,the,right,type,with,a,given,link,org,elasticsearch,rest,rest,status;public,static,e,extends,throwable,void,assert,throws,action,request,builder,builder,class,e,exception,class,rest,status,status,assert,throws,builder,execute,exception,class,status
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, RestStatus status);1534362961;Run the request from a given builder and check that it throws an exception of the right type, with a given {@link org.elasticsearch.rest.RestStatus};public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, RestStatus status) {_        assertThrows(builder.execute(), exceptionClass, status)__    };run,the,request,from,a,given,builder,and,check,that,it,throws,an,exception,of,the,right,type,with,a,given,link,org,elasticsearch,rest,rest,status;public,static,e,extends,throwable,void,assert,throws,action,request,builder,builder,class,e,exception,class,rest,status,status,assert,throws,builder,execute,exception,class,status
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, RestStatus status);1537806831;Run the request from a given builder and check that it throws an exception of the right type, with a given {@link RestStatus};public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, RestStatus status) {_        assertThrows(builder.execute(), exceptionClass, status)__    };run,the,request,from,a,given,builder,and,check,that,it,throws,an,exception,of,the,right,type,with,a,given,link,rest,status;public,static,e,extends,throwable,void,assert,throws,action,request,builder,builder,class,e,exception,class,rest,status,status,assert,throws,builder,execute,exception,class,status
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, RestStatus status);1540912197;Run the request from a given builder and check that it throws an exception of the right type, with a given {@link RestStatus};public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, RestStatus status) {_        assertThrows(builder.execute(), exceptionClass, status)__    };run,the,request,from,a,given,builder,and,check,that,it,throws,an,exception,of,the,right,type,with,a,given,link,rest,status;public,static,e,extends,throwable,void,assert,throws,action,request,builder,builder,class,e,exception,class,rest,status,status,assert,throws,builder,execute,exception,class,status
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, RestStatus status);1544035746;Run the request from a given builder and check that it throws an exception of the right type, with a given {@link RestStatus};public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, RestStatus status) {_        assertThrows(builder.execute(), exceptionClass, status)__    };run,the,request,from,a,given,builder,and,check,that,it,throws,an,exception,of,the,right,type,with,a,given,link,rest,status;public,static,e,extends,throwable,void,assert,throws,action,request,builder,builder,class,e,exception,class,rest,status,status,assert,throws,builder,execute,exception,class,status
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, RestStatus status);1547030937;Run the request from a given builder and check that it throws an exception of the right type, with a given {@link RestStatus};public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, RestStatus status) {_        assertThrows(builder.execute(), exceptionClass, status)__    };run,the,request,from,a,given,builder,and,check,that,it,throws,an,exception,of,the,right,type,with,a,given,link,rest,status;public,static,e,extends,throwable,void,assert,throws,action,request,builder,builder,class,e,exception,class,rest,status,status,assert,throws,builder,execute,exception,class,status
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, RestStatus status);1547108736;Run the request from a given builder and check that it throws an exception of the right type, with a given {@link RestStatus};public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, RestStatus status) {_        assertThrows(builder.execute(), exceptionClass, status)__    };run,the,request,from,a,given,builder,and,check,that,it,throws,an,exception,of,the,right,type,with,a,given,link,rest,status;public,static,e,extends,throwable,void,assert,throws,action,request,builder,builder,class,e,exception,class,rest,status,status,assert,throws,builder,execute,exception,class,status
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, RestStatus status);1551176390;Run the request from a given builder and check that it throws an exception of the right type, with a given {@link RestStatus};public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, RestStatus status) {_        assertThrows(builder.execute(), exceptionClass, status)__    };run,the,request,from,a,given,builder,and,check,that,it,throws,an,exception,of,the,right,type,with,a,given,link,rest,status;public,static,e,extends,throwable,void,assert,throws,action,request,builder,builder,class,e,exception,class,rest,status,status,assert,throws,builder,execute,exception,class,status
ElasticsearchAssertions -> public static void assertSuggestion(Suggest searchSuggest, int entry, String key, int size, String... text);1524684173;Assert suggestion returns size suggestions and the first are the provided_text.;public static void assertSuggestion(Suggest searchSuggest, int entry, String key, int size, String... text) {_        assertSuggestionSize(searchSuggest, entry, size, key)__        for (int i = 0_ i < text.length_ i++) {_            assertSuggestion(searchSuggest, entry, i, key, text[i])__        }_    };assert,suggestion,returns,size,suggestions,and,the,first,are,the,provided,text;public,static,void,assert,suggestion,suggest,search,suggest,int,entry,string,key,int,size,string,text,assert,suggestion,size,search,suggest,entry,size,key,for,int,i,0,i,text,length,i,assert,suggestion,search,suggest,entry,i,key,text,i
ElasticsearchAssertions -> public static void assertSuggestion(Suggest searchSuggest, int entry, String key, int size, String... text);1527840262;Assert suggestion returns size suggestions and the first are the provided_text.;public static void assertSuggestion(Suggest searchSuggest, int entry, String key, int size, String... text) {_        assertSuggestionSize(searchSuggest, entry, size, key)__        for (int i = 0_ i < text.length_ i++) {_            assertSuggestion(searchSuggest, entry, i, key, text[i])__        }_    };assert,suggestion,returns,size,suggestions,and,the,first,are,the,provided,text;public,static,void,assert,suggestion,suggest,search,suggest,int,entry,string,key,int,size,string,text,assert,suggestion,size,search,suggest,entry,size,key,for,int,i,0,i,text,length,i,assert,suggestion,search,suggest,entry,i,key,text,i
ElasticsearchAssertions -> public static void assertSuggestion(Suggest searchSuggest, int entry, String key, int size, String... text);1528762805;Assert suggestion returns size suggestions and the first are the provided_text.;public static void assertSuggestion(Suggest searchSuggest, int entry, String key, int size, String... text) {_        assertSuggestionSize(searchSuggest, entry, size, key)__        for (int i = 0_ i < text.length_ i++) {_            assertSuggestion(searchSuggest, entry, i, key, text[i])__        }_    };assert,suggestion,returns,size,suggestions,and,the,first,are,the,provided,text;public,static,void,assert,suggestion,suggest,search,suggest,int,entry,string,key,int,size,string,text,assert,suggestion,size,search,suggest,entry,size,key,for,int,i,0,i,text,length,i,assert,suggestion,search,suggest,entry,i,key,text,i
ElasticsearchAssertions -> public static void assertSuggestion(Suggest searchSuggest, int entry, String key, int size, String... text);1532353780;Assert suggestion returns size suggestions and the first are the provided_text.;public static void assertSuggestion(Suggest searchSuggest, int entry, String key, int size, String... text) {_        assertSuggestionSize(searchSuggest, entry, size, key)__        for (int i = 0_ i < text.length_ i++) {_            assertSuggestion(searchSuggest, entry, i, key, text[i])__        }_    };assert,suggestion,returns,size,suggestions,and,the,first,are,the,provided,text;public,static,void,assert,suggestion,suggest,search,suggest,int,entry,string,key,int,size,string,text,assert,suggestion,size,search,suggest,entry,size,key,for,int,i,0,i,text,length,i,assert,suggestion,search,suggest,entry,i,key,text,i
ElasticsearchAssertions -> public static void assertSuggestion(Suggest searchSuggest, int entry, String key, int size, String... text);1534362961;Assert suggestion returns size suggestions and the first are the provided_text.;public static void assertSuggestion(Suggest searchSuggest, int entry, String key, int size, String... text) {_        assertSuggestionSize(searchSuggest, entry, size, key)__        for (int i = 0_ i < text.length_ i++) {_            assertSuggestion(searchSuggest, entry, i, key, text[i])__        }_    };assert,suggestion,returns,size,suggestions,and,the,first,are,the,provided,text;public,static,void,assert,suggestion,suggest,search,suggest,int,entry,string,key,int,size,string,text,assert,suggestion,size,search,suggest,entry,size,key,for,int,i,0,i,text,length,i,assert,suggestion,search,suggest,entry,i,key,text,i
ElasticsearchAssertions -> public static void assertSuggestion(Suggest searchSuggest, int entry, String key, int size, String... text);1537806831;Assert suggestion returns size suggestions and the first are the provided_text.;public static void assertSuggestion(Suggest searchSuggest, int entry, String key, int size, String... text) {_        assertSuggestionSize(searchSuggest, entry, size, key)__        for (int i = 0_ i < text.length_ i++) {_            assertSuggestion(searchSuggest, entry, i, key, text[i])__        }_    };assert,suggestion,returns,size,suggestions,and,the,first,are,the,provided,text;public,static,void,assert,suggestion,suggest,search,suggest,int,entry,string,key,int,size,string,text,assert,suggestion,size,search,suggest,entry,size,key,for,int,i,0,i,text,length,i,assert,suggestion,search,suggest,entry,i,key,text,i
ElasticsearchAssertions -> public static void assertSuggestion(Suggest searchSuggest, int entry, String key, int size, String... text);1540912197;Assert suggestion returns size suggestions and the first are the provided_text.;public static void assertSuggestion(Suggest searchSuggest, int entry, String key, int size, String... text) {_        assertSuggestionSize(searchSuggest, entry, size, key)__        for (int i = 0_ i < text.length_ i++) {_            assertSuggestion(searchSuggest, entry, i, key, text[i])__        }_    };assert,suggestion,returns,size,suggestions,and,the,first,are,the,provided,text;public,static,void,assert,suggestion,suggest,search,suggest,int,entry,string,key,int,size,string,text,assert,suggestion,size,search,suggest,entry,size,key,for,int,i,0,i,text,length,i,assert,suggestion,search,suggest,entry,i,key,text,i
ElasticsearchAssertions -> public static void assertSuggestion(Suggest searchSuggest, int entry, String key, int size, String... text);1544035746;Assert suggestion returns size suggestions and the first are the provided_text.;public static void assertSuggestion(Suggest searchSuggest, int entry, String key, int size, String... text) {_        assertSuggestionSize(searchSuggest, entry, size, key)__        for (int i = 0_ i < text.length_ i++) {_            assertSuggestion(searchSuggest, entry, i, key, text[i])__        }_    };assert,suggestion,returns,size,suggestions,and,the,first,are,the,provided,text;public,static,void,assert,suggestion,suggest,search,suggest,int,entry,string,key,int,size,string,text,assert,suggestion,size,search,suggest,entry,size,key,for,int,i,0,i,text,length,i,assert,suggestion,search,suggest,entry,i,key,text,i
ElasticsearchAssertions -> public static void assertSuggestion(Suggest searchSuggest, int entry, String key, int size, String... text);1547030937;Assert suggestion returns size suggestions and the first are the provided_text.;public static void assertSuggestion(Suggest searchSuggest, int entry, String key, int size, String... text) {_        assertSuggestionSize(searchSuggest, entry, size, key)__        for (int i = 0_ i < text.length_ i++) {_            assertSuggestion(searchSuggest, entry, i, key, text[i])__        }_    };assert,suggestion,returns,size,suggestions,and,the,first,are,the,provided,text;public,static,void,assert,suggestion,suggest,search,suggest,int,entry,string,key,int,size,string,text,assert,suggestion,size,search,suggest,entry,size,key,for,int,i,0,i,text,length,i,assert,suggestion,search,suggest,entry,i,key,text,i
ElasticsearchAssertions -> public static void assertSuggestion(Suggest searchSuggest, int entry, String key, int size, String... text);1547108736;Assert suggestion returns size suggestions and the first are the provided_text.;public static void assertSuggestion(Suggest searchSuggest, int entry, String key, int size, String... text) {_        assertSuggestionSize(searchSuggest, entry, size, key)__        for (int i = 0_ i < text.length_ i++) {_            assertSuggestion(searchSuggest, entry, i, key, text[i])__        }_    };assert,suggestion,returns,size,suggestions,and,the,first,are,the,provided,text;public,static,void,assert,suggestion,suggest,search,suggest,int,entry,string,key,int,size,string,text,assert,suggestion,size,search,suggest,entry,size,key,for,int,i,0,i,text,length,i,assert,suggestion,search,suggest,entry,i,key,text,i
ElasticsearchAssertions -> public static void assertSuggestion(Suggest searchSuggest, int entry, String key, int size, String... text);1551176390;Assert suggestion returns size suggestions and the first are the provided_text.;public static void assertSuggestion(Suggest searchSuggest, int entry, String key, int size, String... text) {_        assertSuggestionSize(searchSuggest, entry, size, key)__        for (int i = 0_ i < text.length_ i++) {_            assertSuggestion(searchSuggest, entry, i, key, text[i])__        }_    };assert,suggestion,returns,size,suggestions,and,the,first,are,the,provided,text;public,static,void,assert,suggestion,suggest,search,suggest,int,entry,string,key,int,size,string,text,assert,suggestion,size,search,suggest,entry,size,key,for,int,i,0,i,text,length,i,assert,suggestion,search,suggest,entry,i,key,text,i
ElasticsearchAssertions -> public static void assertAliasesMissing(AliasesExistResponse aliasesExistResponse);1524684173;Assert that aliases are missing;public static void assertAliasesMissing(AliasesExistResponse aliasesExistResponse) {_        assertFalse("Aliases shouldn't exist", aliasesExistResponse.exists())__    };assert,that,aliases,are,missing;public,static,void,assert,aliases,missing,aliases,exist,response,aliases,exist,response,assert,false,aliases,shouldn,t,exist,aliases,exist,response,exists
ElasticsearchAssertions -> public static void assertAliasesMissing(AliasesExistResponse aliasesExistResponse);1527840262;Assert that aliases are missing;public static void assertAliasesMissing(AliasesExistResponse aliasesExistResponse) {_        assertFalse("Aliases shouldn't exist", aliasesExistResponse.exists())__    };assert,that,aliases,are,missing;public,static,void,assert,aliases,missing,aliases,exist,response,aliases,exist,response,assert,false,aliases,shouldn,t,exist,aliases,exist,response,exists
ElasticsearchAssertions -> public static void assertAliasesMissing(AliasesExistResponse aliasesExistResponse);1528762805;Assert that aliases are missing;public static void assertAliasesMissing(AliasesExistResponse aliasesExistResponse) {_        assertFalse("Aliases shouldn't exist", aliasesExistResponse.exists())__    };assert,that,aliases,are,missing;public,static,void,assert,aliases,missing,aliases,exist,response,aliases,exist,response,assert,false,aliases,shouldn,t,exist,aliases,exist,response,exists
ElasticsearchAssertions -> public static void assertAliasesMissing(AliasesExistResponse aliasesExistResponse);1532353780;Assert that aliases are missing;public static void assertAliasesMissing(AliasesExistResponse aliasesExistResponse) {_        assertFalse("Aliases shouldn't exist", aliasesExistResponse.exists())__    };assert,that,aliases,are,missing;public,static,void,assert,aliases,missing,aliases,exist,response,aliases,exist,response,assert,false,aliases,shouldn,t,exist,aliases,exist,response,exists
ElasticsearchAssertions -> public static void assertAliasesMissing(AliasesExistResponse aliasesExistResponse);1534362961;Assert that aliases are missing;public static void assertAliasesMissing(AliasesExistResponse aliasesExistResponse) {_        assertFalse("Aliases shouldn't exist", aliasesExistResponse.exists())__    };assert,that,aliases,are,missing;public,static,void,assert,aliases,missing,aliases,exist,response,aliases,exist,response,assert,false,aliases,shouldn,t,exist,aliases,exist,response,exists
ElasticsearchAssertions -> public static void assertAliasesMissing(AliasesExistResponse aliasesExistResponse);1537806831;Assert that aliases are missing;public static void assertAliasesMissing(AliasesExistResponse aliasesExistResponse) {_        assertFalse("Aliases shouldn't exist", aliasesExistResponse.exists())__    };assert,that,aliases,are,missing;public,static,void,assert,aliases,missing,aliases,exist,response,aliases,exist,response,assert,false,aliases,shouldn,t,exist,aliases,exist,response,exists
ElasticsearchAssertions -> public static void assertAliasesMissing(AliasesExistResponse aliasesExistResponse);1540912197;Assert that aliases are missing;public static void assertAliasesMissing(AliasesExistResponse aliasesExistResponse) {_        assertFalse("Aliases shouldn't exist", aliasesExistResponse.exists())__    };assert,that,aliases,are,missing;public,static,void,assert,aliases,missing,aliases,exist,response,aliases,exist,response,assert,false,aliases,shouldn,t,exist,aliases,exist,response,exists
ElasticsearchAssertions -> public static void assertAliasesMissing(AliasesExistResponse aliasesExistResponse);1544035746;Assert that aliases are missing;public static void assertAliasesMissing(AliasesExistResponse aliasesExistResponse) {_        assertFalse("Aliases shouldn't exist", aliasesExistResponse.exists())__    };assert,that,aliases,are,missing;public,static,void,assert,aliases,missing,aliases,exist,response,aliases,exist,response,assert,false,aliases,shouldn,t,exist,aliases,exist,response,exists
ElasticsearchAssertions -> public static void assertAliasesMissing(AliasesExistResponse aliasesExistResponse);1547030937;Assert that aliases are missing;public static void assertAliasesMissing(AliasesExistResponse aliasesExistResponse) {_        assertFalse("Aliases shouldn't exist", aliasesExistResponse.exists())__    };assert,that,aliases,are,missing;public,static,void,assert,aliases,missing,aliases,exist,response,aliases,exist,response,assert,false,aliases,shouldn,t,exist,aliases,exist,response,exists
ElasticsearchAssertions -> public static void assertAliasesMissing(AliasesExistResponse aliasesExistResponse);1547108736;Assert that aliases are missing;public static void assertAliasesMissing(AliasesExistResponse aliasesExistResponse) {_        assertFalse("Aliases shouldn't exist", aliasesExistResponse.exists())__    };assert,that,aliases,are,missing;public,static,void,assert,aliases,missing,aliases,exist,response,aliases,exist,response,assert,false,aliases,shouldn,t,exist,aliases,exist,response,exists
ElasticsearchAssertions -> public static void assertAliasesMissing(AliasesExistResponse aliasesExistResponse);1551176390;Assert that aliases are missing;public static void assertAliasesMissing(AliasesExistResponse aliasesExistResponse) {_        assertFalse("Aliases shouldn't exist", aliasesExistResponse.exists())__    };assert,that,aliases,are,missing;public,static,void,assert,aliases,missing,aliases,exist,response,aliases,exist,response,assert,false,aliases,shouldn,t,exist,aliases,exist,response,exists
ElasticsearchAssertions -> public static void assertFileExists(Path file);1524684173;Check if a file exists;public static void assertFileExists(Path file) {_        assertThat("file/dir [" + file + "] should exist.", Files.exists(file), is(true))__    };check,if,a,file,exists;public,static,void,assert,file,exists,path,file,assert,that,file,dir,file,should,exist,files,exists,file,is,true
ElasticsearchAssertions -> public static void assertFileExists(Path file);1527840262;Check if a file exists;public static void assertFileExists(Path file) {_        assertThat("file/dir [" + file + "] should exist.", Files.exists(file), is(true))__    };check,if,a,file,exists;public,static,void,assert,file,exists,path,file,assert,that,file,dir,file,should,exist,files,exists,file,is,true
ElasticsearchAssertions -> public static void assertFileExists(Path file);1528762805;Check if a file exists;public static void assertFileExists(Path file) {_        assertThat("file/dir [" + file + "] should exist.", Files.exists(file), is(true))__    };check,if,a,file,exists;public,static,void,assert,file,exists,path,file,assert,that,file,dir,file,should,exist,files,exists,file,is,true
ElasticsearchAssertions -> public static void assertFileExists(Path file);1532353780;Check if a file exists;public static void assertFileExists(Path file) {_        assertThat("file/dir [" + file + "] should exist.", Files.exists(file), is(true))__    };check,if,a,file,exists;public,static,void,assert,file,exists,path,file,assert,that,file,dir,file,should,exist,files,exists,file,is,true
ElasticsearchAssertions -> public static void assertFileExists(Path file);1534362961;Check if a file exists;public static void assertFileExists(Path file) {_        assertThat("file/dir [" + file + "] should exist.", Files.exists(file), is(true))__    };check,if,a,file,exists;public,static,void,assert,file,exists,path,file,assert,that,file,dir,file,should,exist,files,exists,file,is,true
ElasticsearchAssertions -> public static void assertFileExists(Path file);1537806831;Check if a file exists;public static void assertFileExists(Path file) {_        assertThat("file/dir [" + file + "] should exist.", Files.exists(file), is(true))__    };check,if,a,file,exists;public,static,void,assert,file,exists,path,file,assert,that,file,dir,file,should,exist,files,exists,file,is,true
ElasticsearchAssertions -> public static void assertFileExists(Path file);1540912197;Check if a file exists;public static void assertFileExists(Path file) {_        assertThat("file/dir [" + file + "] should exist.", Files.exists(file), is(true))__    };check,if,a,file,exists;public,static,void,assert,file,exists,path,file,assert,that,file,dir,file,should,exist,files,exists,file,is,true
ElasticsearchAssertions -> public static void assertFileExists(Path file);1544035746;Check if a file exists;public static void assertFileExists(Path file) {_        assertThat("file/dir [" + file + "] should exist.", Files.exists(file), is(true))__    };check,if,a,file,exists;public,static,void,assert,file,exists,path,file,assert,that,file,dir,file,should,exist,files,exists,file,is,true
ElasticsearchAssertions -> public static void assertFileExists(Path file);1547030937;Check if a file exists;public static void assertFileExists(Path file) {_        assertThat("file/dir [" + file + "] should exist.", Files.exists(file), is(true))__    };check,if,a,file,exists;public,static,void,assert,file,exists,path,file,assert,that,file,dir,file,should,exist,files,exists,file,is,true
ElasticsearchAssertions -> public static void assertFileExists(Path file);1547108736;Check if a file exists;public static void assertFileExists(Path file) {_        assertThat("file/dir [" + file + "] should exist.", Files.exists(file), is(true))__    };check,if,a,file,exists;public,static,void,assert,file,exists,path,file,assert,that,file,dir,file,should,exist,files,exists,file,is,true
ElasticsearchAssertions -> public static void assertFileExists(Path file);1551176390;Check if a file exists;public static void assertFileExists(Path file) {_        assertThat("file/dir [" + file + "] should exist.", Files.exists(file), is(true))__    };check,if,a,file,exists;public,static,void,assert,file,exists,path,file,assert,that,file,dir,file,should,exist,files,exists,file,is,true
ElasticsearchAssertions -> public static void assertSuggestion(Suggest searchSuggest, int entry, String key, String... text);1524684173;Assert suggestion returns exactly the provided text.;public static void assertSuggestion(Suggest searchSuggest, int entry, String key, String... text) {_        assertSuggestion(searchSuggest, entry, key, text.length, text)__    };assert,suggestion,returns,exactly,the,provided,text;public,static,void,assert,suggestion,suggest,search,suggest,int,entry,string,key,string,text,assert,suggestion,search,suggest,entry,key,text,length,text
ElasticsearchAssertions -> public static void assertSuggestion(Suggest searchSuggest, int entry, String key, String... text);1527840262;Assert suggestion returns exactly the provided text.;public static void assertSuggestion(Suggest searchSuggest, int entry, String key, String... text) {_        assertSuggestion(searchSuggest, entry, key, text.length, text)__    };assert,suggestion,returns,exactly,the,provided,text;public,static,void,assert,suggestion,suggest,search,suggest,int,entry,string,key,string,text,assert,suggestion,search,suggest,entry,key,text,length,text
ElasticsearchAssertions -> public static void assertSuggestion(Suggest searchSuggest, int entry, String key, String... text);1528762805;Assert suggestion returns exactly the provided text.;public static void assertSuggestion(Suggest searchSuggest, int entry, String key, String... text) {_        assertSuggestion(searchSuggest, entry, key, text.length, text)__    };assert,suggestion,returns,exactly,the,provided,text;public,static,void,assert,suggestion,suggest,search,suggest,int,entry,string,key,string,text,assert,suggestion,search,suggest,entry,key,text,length,text
ElasticsearchAssertions -> public static void assertSuggestion(Suggest searchSuggest, int entry, String key, String... text);1532353780;Assert suggestion returns exactly the provided text.;public static void assertSuggestion(Suggest searchSuggest, int entry, String key, String... text) {_        assertSuggestion(searchSuggest, entry, key, text.length, text)__    };assert,suggestion,returns,exactly,the,provided,text;public,static,void,assert,suggestion,suggest,search,suggest,int,entry,string,key,string,text,assert,suggestion,search,suggest,entry,key,text,length,text
ElasticsearchAssertions -> public static void assertSuggestion(Suggest searchSuggest, int entry, String key, String... text);1534362961;Assert suggestion returns exactly the provided text.;public static void assertSuggestion(Suggest searchSuggest, int entry, String key, String... text) {_        assertSuggestion(searchSuggest, entry, key, text.length, text)__    };assert,suggestion,returns,exactly,the,provided,text;public,static,void,assert,suggestion,suggest,search,suggest,int,entry,string,key,string,text,assert,suggestion,search,suggest,entry,key,text,length,text
ElasticsearchAssertions -> public static void assertSuggestion(Suggest searchSuggest, int entry, String key, String... text);1537806831;Assert suggestion returns exactly the provided text.;public static void assertSuggestion(Suggest searchSuggest, int entry, String key, String... text) {_        assertSuggestion(searchSuggest, entry, key, text.length, text)__    };assert,suggestion,returns,exactly,the,provided,text;public,static,void,assert,suggestion,suggest,search,suggest,int,entry,string,key,string,text,assert,suggestion,search,suggest,entry,key,text,length,text
ElasticsearchAssertions -> public static void assertSuggestion(Suggest searchSuggest, int entry, String key, String... text);1540912197;Assert suggestion returns exactly the provided text.;public static void assertSuggestion(Suggest searchSuggest, int entry, String key, String... text) {_        assertSuggestion(searchSuggest, entry, key, text.length, text)__    };assert,suggestion,returns,exactly,the,provided,text;public,static,void,assert,suggestion,suggest,search,suggest,int,entry,string,key,string,text,assert,suggestion,search,suggest,entry,key,text,length,text
ElasticsearchAssertions -> public static void assertSuggestion(Suggest searchSuggest, int entry, String key, String... text);1544035746;Assert suggestion returns exactly the provided text.;public static void assertSuggestion(Suggest searchSuggest, int entry, String key, String... text) {_        assertSuggestion(searchSuggest, entry, key, text.length, text)__    };assert,suggestion,returns,exactly,the,provided,text;public,static,void,assert,suggestion,suggest,search,suggest,int,entry,string,key,string,text,assert,suggestion,search,suggest,entry,key,text,length,text
ElasticsearchAssertions -> public static void assertSuggestion(Suggest searchSuggest, int entry, String key, String... text);1547030937;Assert suggestion returns exactly the provided text.;public static void assertSuggestion(Suggest searchSuggest, int entry, String key, String... text) {_        assertSuggestion(searchSuggest, entry, key, text.length, text)__    };assert,suggestion,returns,exactly,the,provided,text;public,static,void,assert,suggestion,suggest,search,suggest,int,entry,string,key,string,text,assert,suggestion,search,suggest,entry,key,text,length,text
ElasticsearchAssertions -> public static void assertSuggestion(Suggest searchSuggest, int entry, String key, String... text);1547108736;Assert suggestion returns exactly the provided text.;public static void assertSuggestion(Suggest searchSuggest, int entry, String key, String... text) {_        assertSuggestion(searchSuggest, entry, key, text.length, text)__    };assert,suggestion,returns,exactly,the,provided,text;public,static,void,assert,suggestion,suggest,search,suggest,int,entry,string,key,string,text,assert,suggestion,search,suggest,entry,key,text,length,text
ElasticsearchAssertions -> public static void assertSuggestion(Suggest searchSuggest, int entry, String key, String... text);1551176390;Assert suggestion returns exactly the provided text.;public static void assertSuggestion(Suggest searchSuggest, int entry, String key, String... text) {_        assertSuggestion(searchSuggest, entry, key, text.length, text)__    };assert,suggestion,returns,exactly,the,provided,text;public,static,void,assert,suggestion,suggest,search,suggest,int,entry,string,key,string,text,assert,suggestion,search,suggest,entry,key,text,length,text
ElasticsearchAssertions -> public static void awaitLatch(CountDownLatch latch, long timeout, TimeUnit unit) throws InterruptedException;1547108736;Wait for a latch to countdown and provide a useful error message if it does not_Often latches are called as <code>assertTrue(latch.await(1, TimeUnit.SECONDS))_</code>_In case of a failure this will just throw an assertion error without any further message__@param latch    The latch to wait for_@param timeout  The value of the timeout_@param unit     The unit of the timeout_@throws InterruptedException An exception if the waiting is interrupted;public static void awaitLatch(CountDownLatch latch, long timeout, TimeUnit unit) throws InterruptedException {_        TimeValue timeValue = new TimeValue(timeout, unit)__        String message = String.format(Locale.ROOT, "expected latch to be counted down after %s, but was not", timeValue)__        boolean isCountedDown = latch.await(timeout, unit)__        assertThat(message, isCountedDown, is(true))__    };wait,for,a,latch,to,countdown,and,provide,a,useful,error,message,if,it,does,not,often,latches,are,called,as,code,assert,true,latch,await,1,time,unit,seconds,code,in,case,of,a,failure,this,will,just,throw,an,assertion,error,without,any,further,message,param,latch,the,latch,to,wait,for,param,timeout,the,value,of,the,timeout,param,unit,the,unit,of,the,timeout,throws,interrupted,exception,an,exception,if,the,waiting,is,interrupted;public,static,void,await,latch,count,down,latch,latch,long,timeout,time,unit,unit,throws,interrupted,exception,time,value,time,value,new,time,value,timeout,unit,string,message,string,format,locale,root,expected,latch,to,be,counted,down,after,s,but,was,not,time,value,boolean,is,counted,down,latch,await,timeout,unit,assert,that,message,is,counted,down,is,true
ElasticsearchAssertions -> public static void awaitLatch(CountDownLatch latch, long timeout, TimeUnit unit) throws InterruptedException;1551176390;Wait for a latch to countdown and provide a useful error message if it does not_Often latches are called as <code>assertTrue(latch.await(1, TimeUnit.SECONDS))_</code>_In case of a failure this will just throw an assertion error without any further message__@param latch    The latch to wait for_@param timeout  The value of the timeout_@param unit     The unit of the timeout_@throws InterruptedException An exception if the waiting is interrupted;public static void awaitLatch(CountDownLatch latch, long timeout, TimeUnit unit) throws InterruptedException {_        TimeValue timeValue = new TimeValue(timeout, unit)__        String message = String.format(Locale.ROOT, "expected latch to be counted down after %s, but was not", timeValue)__        boolean isCountedDown = latch.await(timeout, unit)__        assertThat(message, isCountedDown, is(true))__    };wait,for,a,latch,to,countdown,and,provide,a,useful,error,message,if,it,does,not,often,latches,are,called,as,code,assert,true,latch,await,1,time,unit,seconds,code,in,case,of,a,failure,this,will,just,throw,an,assertion,error,without,any,further,message,param,latch,the,latch,to,wait,for,param,timeout,the,value,of,the,timeout,param,unit,the,unit,of,the,timeout,throws,interrupted,exception,an,exception,if,the,waiting,is,interrupted;public,static,void,await,latch,count,down,latch,latch,long,timeout,time,unit,unit,throws,interrupted,exception,time,value,time,value,new,time,value,timeout,unit,string,message,string,format,locale,root,expected,latch,to,be,counted,down,after,s,but,was,not,time,value,boolean,is,counted,down,latch,await,timeout,unit,assert,that,message,is,counted,down,is,true
ElasticsearchAssertions -> public static void assertToXContentEquivalent(BytesReference expected, BytesReference actual, XContentType xContentType)             throws IOException;1524684173;Asserts that the provided {@link BytesReference}s created through_{@link org.elasticsearch.common.xcontent.ToXContent#toXContent(XContentBuilder, ToXContent.Params)} hold the same content._The comparison is done by parsing both into a map and comparing those two, so that keys ordering doesn't matter._Also binary values (byte[]) are properly compared through arrays comparisons.;public static void assertToXContentEquivalent(BytesReference expected, BytesReference actual, XContentType xContentType)_            throws IOException {_        _        _        _        _        Map<String, Object> actualMap = null__        Map<String, Object> expectedMap = null__        try (XContentParser actualParser = xContentType.xContent()_                .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, actual.streamInput())) {_            actualMap = actualParser.map()__            try (XContentParser expectedParser = xContentType.xContent()_                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, expected.streamInput())) {_                expectedMap = expectedParser.map()__                try {_                    assertMapEquals(expectedMap, actualMap)__                } catch (AssertionError error) {_                    NotEqualMessageBuilder message = new NotEqualMessageBuilder()__                    message.compareMaps(actualMap, expectedMap)__                    throw new AssertionError("Error when comparing xContent.\n" + message.toString(), error)__                }_            }_        }_    };asserts,that,the,provided,link,bytes,reference,s,created,through,link,org,elasticsearch,common,xcontent,to,xcontent,to,xcontent,xcontent,builder,to,xcontent,params,hold,the,same,content,the,comparison,is,done,by,parsing,both,into,a,map,and,comparing,those,two,so,that,keys,ordering,doesn,t,matter,also,binary,values,byte,are,properly,compared,through,arrays,comparisons;public,static,void,assert,to,xcontent,equivalent,bytes,reference,expected,bytes,reference,actual,xcontent,type,x,content,type,throws,ioexception,map,string,object,actual,map,null,map,string,object,expected,map,null,try,xcontent,parser,actual,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,deprecation,handler,actual,stream,input,actual,map,actual,parser,map,try,xcontent,parser,expected,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,deprecation,handler,expected,stream,input,expected,map,expected,parser,map,try,assert,map,equals,expected,map,actual,map,catch,assertion,error,error,not,equal,message,builder,message,new,not,equal,message,builder,message,compare,maps,actual,map,expected,map,throw,new,assertion,error,error,when,comparing,x,content,n,message,to,string,error
ElasticsearchAssertions -> public static void assertToXContentEquivalent(BytesReference expected, BytesReference actual, XContentType xContentType)             throws IOException;1527840262;Asserts that the provided {@link BytesReference}s created through_{@link org.elasticsearch.common.xcontent.ToXContent#toXContent(XContentBuilder, ToXContent.Params)} hold the same content._The comparison is done by parsing both into a map and comparing those two, so that keys ordering doesn't matter._Also binary values (byte[]) are properly compared through arrays comparisons.;public static void assertToXContentEquivalent(BytesReference expected, BytesReference actual, XContentType xContentType)_            throws IOException {_        _        _        _        _        Map<String, Object> actualMap = null__        Map<String, Object> expectedMap = null__        try (XContentParser actualParser = xContentType.xContent()_                .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, actual.streamInput())) {_            actualMap = actualParser.map()__            try (XContentParser expectedParser = xContentType.xContent()_                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, expected.streamInput())) {_                expectedMap = expectedParser.map()__                try {_                    assertMapEquals(expectedMap, actualMap)__                } catch (AssertionError error) {_                    NotEqualMessageBuilder message = new NotEqualMessageBuilder()__                    message.compareMaps(actualMap, expectedMap)__                    throw new AssertionError("Error when comparing xContent.\n" + message.toString(), error)__                }_            }_        }_    };asserts,that,the,provided,link,bytes,reference,s,created,through,link,org,elasticsearch,common,xcontent,to,xcontent,to,xcontent,xcontent,builder,to,xcontent,params,hold,the,same,content,the,comparison,is,done,by,parsing,both,into,a,map,and,comparing,those,two,so,that,keys,ordering,doesn,t,matter,also,binary,values,byte,are,properly,compared,through,arrays,comparisons;public,static,void,assert,to,xcontent,equivalent,bytes,reference,expected,bytes,reference,actual,xcontent,type,x,content,type,throws,ioexception,map,string,object,actual,map,null,map,string,object,expected,map,null,try,xcontent,parser,actual,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,deprecation,handler,actual,stream,input,actual,map,actual,parser,map,try,xcontent,parser,expected,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,deprecation,handler,expected,stream,input,expected,map,expected,parser,map,try,assert,map,equals,expected,map,actual,map,catch,assertion,error,error,not,equal,message,builder,message,new,not,equal,message,builder,message,compare,maps,actual,map,expected,map,throw,new,assertion,error,error,when,comparing,x,content,n,message,to,string,error
ElasticsearchAssertions -> public static void assertToXContentEquivalent(BytesReference expected, BytesReference actual, XContentType xContentType)             throws IOException;1528762805;Asserts that the provided {@link BytesReference}s created through_{@link org.elasticsearch.common.xcontent.ToXContent#toXContent(XContentBuilder, ToXContent.Params)} hold the same content._The comparison is done by parsing both into a map and comparing those two, so that keys ordering doesn't matter._Also binary values (byte[]) are properly compared through arrays comparisons.;public static void assertToXContentEquivalent(BytesReference expected, BytesReference actual, XContentType xContentType)_            throws IOException {_        _        _        _        _        Map<String, Object> actualMap = null__        Map<String, Object> expectedMap = null__        try (XContentParser actualParser = xContentType.xContent()_                .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, actual.streamInput())) {_            actualMap = actualParser.map()__            try (XContentParser expectedParser = xContentType.xContent()_                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, expected.streamInput())) {_                expectedMap = expectedParser.map()__                try {_                    assertMapEquals(expectedMap, actualMap)__                } catch (AssertionError error) {_                    NotEqualMessageBuilder message = new NotEqualMessageBuilder()__                    message.compareMaps(actualMap, expectedMap)__                    throw new AssertionError("Error when comparing xContent.\n" + message.toString(), error)__                }_            }_        }_    };asserts,that,the,provided,link,bytes,reference,s,created,through,link,org,elasticsearch,common,xcontent,to,xcontent,to,xcontent,xcontent,builder,to,xcontent,params,hold,the,same,content,the,comparison,is,done,by,parsing,both,into,a,map,and,comparing,those,two,so,that,keys,ordering,doesn,t,matter,also,binary,values,byte,are,properly,compared,through,arrays,comparisons;public,static,void,assert,to,xcontent,equivalent,bytes,reference,expected,bytes,reference,actual,xcontent,type,x,content,type,throws,ioexception,map,string,object,actual,map,null,map,string,object,expected,map,null,try,xcontent,parser,actual,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,deprecation,handler,actual,stream,input,actual,map,actual,parser,map,try,xcontent,parser,expected,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,deprecation,handler,expected,stream,input,expected,map,expected,parser,map,try,assert,map,equals,expected,map,actual,map,catch,assertion,error,error,not,equal,message,builder,message,new,not,equal,message,builder,message,compare,maps,actual,map,expected,map,throw,new,assertion,error,error,when,comparing,x,content,n,message,to,string,error
ElasticsearchAssertions -> public static void assertToXContentEquivalent(BytesReference expected, BytesReference actual, XContentType xContentType)             throws IOException;1532353780;Asserts that the provided {@link BytesReference}s created through_{@link org.elasticsearch.common.xcontent.ToXContent#toXContent(XContentBuilder, ToXContent.Params)} hold the same content._The comparison is done by parsing both into a map and comparing those two, so that keys ordering doesn't matter._Also binary values (byte[]) are properly compared through arrays comparisons.;public static void assertToXContentEquivalent(BytesReference expected, BytesReference actual, XContentType xContentType)_            throws IOException {_        _        _        _        _        Map<String, Object> actualMap = null__        Map<String, Object> expectedMap = null__        try (XContentParser actualParser = xContentType.xContent()_                .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, actual.streamInput())) {_            actualMap = actualParser.map()__            try (XContentParser expectedParser = xContentType.xContent()_                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, expected.streamInput())) {_                expectedMap = expectedParser.map()__                try {_                    assertMapEquals(expectedMap, actualMap)__                } catch (AssertionError error) {_                    NotEqualMessageBuilder message = new NotEqualMessageBuilder()__                    message.compareMaps(actualMap, expectedMap)__                    throw new AssertionError("Error when comparing xContent.\n" + message.toString(), error)__                }_            }_        }_    };asserts,that,the,provided,link,bytes,reference,s,created,through,link,org,elasticsearch,common,xcontent,to,xcontent,to,xcontent,xcontent,builder,to,xcontent,params,hold,the,same,content,the,comparison,is,done,by,parsing,both,into,a,map,and,comparing,those,two,so,that,keys,ordering,doesn,t,matter,also,binary,values,byte,are,properly,compared,through,arrays,comparisons;public,static,void,assert,to,xcontent,equivalent,bytes,reference,expected,bytes,reference,actual,xcontent,type,x,content,type,throws,ioexception,map,string,object,actual,map,null,map,string,object,expected,map,null,try,xcontent,parser,actual,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,deprecation,handler,actual,stream,input,actual,map,actual,parser,map,try,xcontent,parser,expected,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,deprecation,handler,expected,stream,input,expected,map,expected,parser,map,try,assert,map,equals,expected,map,actual,map,catch,assertion,error,error,not,equal,message,builder,message,new,not,equal,message,builder,message,compare,maps,actual,map,expected,map,throw,new,assertion,error,error,when,comparing,x,content,n,message,to,string,error
ElasticsearchAssertions -> public static void assertToXContentEquivalent(BytesReference expected, BytesReference actual, XContentType xContentType)             throws IOException;1534362961;Asserts that the provided {@link BytesReference}s created through_{@link org.elasticsearch.common.xcontent.ToXContent#toXContent(XContentBuilder, ToXContent.Params)} hold the same content._The comparison is done by parsing both into a map and comparing those two, so that keys ordering doesn't matter._Also binary values (byte[]) are properly compared through arrays comparisons.;public static void assertToXContentEquivalent(BytesReference expected, BytesReference actual, XContentType xContentType)_            throws IOException {_        _        _        _        _        Map<String, Object> actualMap = null__        Map<String, Object> expectedMap = null__        try (XContentParser actualParser = xContentType.xContent()_                .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, actual.streamInput())) {_            actualMap = actualParser.map()__            try (XContentParser expectedParser = xContentType.xContent()_                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, expected.streamInput())) {_                expectedMap = expectedParser.map()__                try {_                    assertMapEquals(expectedMap, actualMap)__                } catch (AssertionError error) {_                    NotEqualMessageBuilder message = new NotEqualMessageBuilder()__                    message.compareMaps(actualMap, expectedMap)__                    throw new AssertionError("Error when comparing xContent.\n" + message.toString(), error)__                }_            }_        }_    };asserts,that,the,provided,link,bytes,reference,s,created,through,link,org,elasticsearch,common,xcontent,to,xcontent,to,xcontent,xcontent,builder,to,xcontent,params,hold,the,same,content,the,comparison,is,done,by,parsing,both,into,a,map,and,comparing,those,two,so,that,keys,ordering,doesn,t,matter,also,binary,values,byte,are,properly,compared,through,arrays,comparisons;public,static,void,assert,to,xcontent,equivalent,bytes,reference,expected,bytes,reference,actual,xcontent,type,x,content,type,throws,ioexception,map,string,object,actual,map,null,map,string,object,expected,map,null,try,xcontent,parser,actual,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,deprecation,handler,actual,stream,input,actual,map,actual,parser,map,try,xcontent,parser,expected,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,deprecation,handler,expected,stream,input,expected,map,expected,parser,map,try,assert,map,equals,expected,map,actual,map,catch,assertion,error,error,not,equal,message,builder,message,new,not,equal,message,builder,message,compare,maps,actual,map,expected,map,throw,new,assertion,error,error,when,comparing,x,content,n,message,to,string,error
ElasticsearchAssertions -> public static void assertToXContentEquivalent(BytesReference expected, BytesReference actual, XContentType xContentType)             throws IOException;1537806831;Asserts that the provided {@link BytesReference}s created through_{@link org.elasticsearch.common.xcontent.ToXContent#toXContent(XContentBuilder, ToXContent.Params)} hold the same content._The comparison is done by parsing both into a map and comparing those two, so that keys ordering doesn't matter._Also binary values (byte[]) are properly compared through arrays comparisons.;public static void assertToXContentEquivalent(BytesReference expected, BytesReference actual, XContentType xContentType)_            throws IOException {_        _        _        _        _        Map<String, Object> actualMap = null__        Map<String, Object> expectedMap = null__        try (XContentParser actualParser = xContentType.xContent()_                .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, actual.streamInput())) {_            actualMap = actualParser.map()__            try (XContentParser expectedParser = xContentType.xContent()_                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, expected.streamInput())) {_                expectedMap = expectedParser.map()__                try {_                    assertMapEquals(expectedMap, actualMap)__                } catch (AssertionError error) {_                    NotEqualMessageBuilder message = new NotEqualMessageBuilder()__                    message.compareMaps(actualMap, expectedMap)__                    throw new AssertionError("Error when comparing xContent.\n" + message.toString(), error)__                }_            }_        }_    };asserts,that,the,provided,link,bytes,reference,s,created,through,link,org,elasticsearch,common,xcontent,to,xcontent,to,xcontent,xcontent,builder,to,xcontent,params,hold,the,same,content,the,comparison,is,done,by,parsing,both,into,a,map,and,comparing,those,two,so,that,keys,ordering,doesn,t,matter,also,binary,values,byte,are,properly,compared,through,arrays,comparisons;public,static,void,assert,to,xcontent,equivalent,bytes,reference,expected,bytes,reference,actual,xcontent,type,x,content,type,throws,ioexception,map,string,object,actual,map,null,map,string,object,expected,map,null,try,xcontent,parser,actual,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,deprecation,handler,actual,stream,input,actual,map,actual,parser,map,try,xcontent,parser,expected,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,deprecation,handler,expected,stream,input,expected,map,expected,parser,map,try,assert,map,equals,expected,map,actual,map,catch,assertion,error,error,not,equal,message,builder,message,new,not,equal,message,builder,message,compare,maps,actual,map,expected,map,throw,new,assertion,error,error,when,comparing,x,content,n,message,to,string,error
ElasticsearchAssertions -> public static void assertToXContentEquivalent(BytesReference expected, BytesReference actual, XContentType xContentType)             throws IOException;1540912197;Asserts that the provided {@link BytesReference}s created through_{@link org.elasticsearch.common.xcontent.ToXContent#toXContent(XContentBuilder, ToXContent.Params)} hold the same content._The comparison is done by parsing both into a map and comparing those two, so that keys ordering doesn't matter._Also binary values (byte[]) are properly compared through arrays comparisons.;public static void assertToXContentEquivalent(BytesReference expected, BytesReference actual, XContentType xContentType)_            throws IOException {_        _        _        _        _        Map<String, Object> actualMap = null__        Map<String, Object> expectedMap = null__        try (XContentParser actualParser = xContentType.xContent()_                .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, actual.streamInput())) {_            actualMap = actualParser.map()__            try (XContentParser expectedParser = xContentType.xContent()_                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, expected.streamInput())) {_                expectedMap = expectedParser.map()__                try {_                    assertMapEquals(expectedMap, actualMap)__                } catch (AssertionError error) {_                    NotEqualMessageBuilder message = new NotEqualMessageBuilder()__                    message.compareMaps(actualMap, expectedMap)__                    throw new AssertionError("Error when comparing xContent.\n" + message.toString(), error)__                }_            }_        }_    };asserts,that,the,provided,link,bytes,reference,s,created,through,link,org,elasticsearch,common,xcontent,to,xcontent,to,xcontent,xcontent,builder,to,xcontent,params,hold,the,same,content,the,comparison,is,done,by,parsing,both,into,a,map,and,comparing,those,two,so,that,keys,ordering,doesn,t,matter,also,binary,values,byte,are,properly,compared,through,arrays,comparisons;public,static,void,assert,to,xcontent,equivalent,bytes,reference,expected,bytes,reference,actual,xcontent,type,x,content,type,throws,ioexception,map,string,object,actual,map,null,map,string,object,expected,map,null,try,xcontent,parser,actual,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,deprecation,handler,actual,stream,input,actual,map,actual,parser,map,try,xcontent,parser,expected,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,deprecation,handler,expected,stream,input,expected,map,expected,parser,map,try,assert,map,equals,expected,map,actual,map,catch,assertion,error,error,not,equal,message,builder,message,new,not,equal,message,builder,message,compare,maps,actual,map,expected,map,throw,new,assertion,error,error,when,comparing,x,content,n,message,to,string,error
ElasticsearchAssertions -> public static void assertToXContentEquivalent(BytesReference expected, BytesReference actual, XContentType xContentType)             throws IOException;1544035746;Asserts that the provided {@link BytesReference}s created through_{@link org.elasticsearch.common.xcontent.ToXContent#toXContent(XContentBuilder, ToXContent.Params)} hold the same content._The comparison is done by parsing both into a map and comparing those two, so that keys ordering doesn't matter._Also binary values (byte[]) are properly compared through arrays comparisons.;public static void assertToXContentEquivalent(BytesReference expected, BytesReference actual, XContentType xContentType)_            throws IOException {_        _        _        _        _        Map<String, Object> actualMap = null__        Map<String, Object> expectedMap = null__        try (XContentParser actualParser = xContentType.xContent()_                .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, actual.streamInput())) {_            actualMap = actualParser.map()__            try (XContentParser expectedParser = xContentType.xContent()_                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, expected.streamInput())) {_                expectedMap = expectedParser.map()__                try {_                    assertMapEquals(expectedMap, actualMap)__                } catch (AssertionError error) {_                    NotEqualMessageBuilder message = new NotEqualMessageBuilder()__                    message.compareMaps(actualMap, expectedMap)__                    throw new AssertionError("Error when comparing xContent.\n" + message.toString(), error)__                }_            }_        }_    };asserts,that,the,provided,link,bytes,reference,s,created,through,link,org,elasticsearch,common,xcontent,to,xcontent,to,xcontent,xcontent,builder,to,xcontent,params,hold,the,same,content,the,comparison,is,done,by,parsing,both,into,a,map,and,comparing,those,two,so,that,keys,ordering,doesn,t,matter,also,binary,values,byte,are,properly,compared,through,arrays,comparisons;public,static,void,assert,to,xcontent,equivalent,bytes,reference,expected,bytes,reference,actual,xcontent,type,x,content,type,throws,ioexception,map,string,object,actual,map,null,map,string,object,expected,map,null,try,xcontent,parser,actual,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,deprecation,handler,actual,stream,input,actual,map,actual,parser,map,try,xcontent,parser,expected,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,deprecation,handler,expected,stream,input,expected,map,expected,parser,map,try,assert,map,equals,expected,map,actual,map,catch,assertion,error,error,not,equal,message,builder,message,new,not,equal,message,builder,message,compare,maps,actual,map,expected,map,throw,new,assertion,error,error,when,comparing,x,content,n,message,to,string,error
ElasticsearchAssertions -> public static void assertToXContentEquivalent(BytesReference expected, BytesReference actual, XContentType xContentType)             throws IOException;1547030937;Asserts that the provided {@link BytesReference}s created through_{@link org.elasticsearch.common.xcontent.ToXContent#toXContent(XContentBuilder, ToXContent.Params)} hold the same content._The comparison is done by parsing both into a map and comparing those two, so that keys ordering doesn't matter._Also binary values (byte[]) are properly compared through arrays comparisons.;public static void assertToXContentEquivalent(BytesReference expected, BytesReference actual, XContentType xContentType)_            throws IOException {_        _        _        _        _        Map<String, Object> actualMap = null__        Map<String, Object> expectedMap = null__        try (XContentParser actualParser = xContentType.xContent()_                .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, actual.streamInput())) {_            actualMap = actualParser.map()__            try (XContentParser expectedParser = xContentType.xContent()_                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, expected.streamInput())) {_                expectedMap = expectedParser.map()__                try {_                    assertMapEquals(expectedMap, actualMap)__                } catch (AssertionError error) {_                    NotEqualMessageBuilder message = new NotEqualMessageBuilder()__                    message.compareMaps(actualMap, expectedMap)__                    throw new AssertionError("Error when comparing xContent.\n" + message.toString(), error)__                }_            }_        }_    };asserts,that,the,provided,link,bytes,reference,s,created,through,link,org,elasticsearch,common,xcontent,to,xcontent,to,xcontent,xcontent,builder,to,xcontent,params,hold,the,same,content,the,comparison,is,done,by,parsing,both,into,a,map,and,comparing,those,two,so,that,keys,ordering,doesn,t,matter,also,binary,values,byte,are,properly,compared,through,arrays,comparisons;public,static,void,assert,to,xcontent,equivalent,bytes,reference,expected,bytes,reference,actual,xcontent,type,x,content,type,throws,ioexception,map,string,object,actual,map,null,map,string,object,expected,map,null,try,xcontent,parser,actual,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,deprecation,handler,actual,stream,input,actual,map,actual,parser,map,try,xcontent,parser,expected,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,deprecation,handler,expected,stream,input,expected,map,expected,parser,map,try,assert,map,equals,expected,map,actual,map,catch,assertion,error,error,not,equal,message,builder,message,new,not,equal,message,builder,message,compare,maps,actual,map,expected,map,throw,new,assertion,error,error,when,comparing,x,content,n,message,to,string,error
ElasticsearchAssertions -> public static void assertToXContentEquivalent(BytesReference expected, BytesReference actual, XContentType xContentType)             throws IOException;1547108736;Asserts that the provided {@link BytesReference}s created through_{@link org.elasticsearch.common.xcontent.ToXContent#toXContent(XContentBuilder, ToXContent.Params)} hold the same content._The comparison is done by parsing both into a map and comparing those two, so that keys ordering doesn't matter._Also binary values (byte[]) are properly compared through arrays comparisons.;public static void assertToXContentEquivalent(BytesReference expected, BytesReference actual, XContentType xContentType)_            throws IOException {_        _        _        _        _        Map<String, Object> actualMap = null__        Map<String, Object> expectedMap = null__        try (XContentParser actualParser = xContentType.xContent()_                .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, actual.streamInput())) {_            actualMap = actualParser.map()__            try (XContentParser expectedParser = xContentType.xContent()_                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, expected.streamInput())) {_                expectedMap = expectedParser.map()__                try {_                    assertMapEquals(expectedMap, actualMap)__                } catch (AssertionError error) {_                    NotEqualMessageBuilder message = new NotEqualMessageBuilder()__                    message.compareMaps(actualMap, expectedMap)__                    throw new AssertionError("Error when comparing xContent.\n" + message.toString(), error)__                }_            }_        }_    };asserts,that,the,provided,link,bytes,reference,s,created,through,link,org,elasticsearch,common,xcontent,to,xcontent,to,xcontent,xcontent,builder,to,xcontent,params,hold,the,same,content,the,comparison,is,done,by,parsing,both,into,a,map,and,comparing,those,two,so,that,keys,ordering,doesn,t,matter,also,binary,values,byte,are,properly,compared,through,arrays,comparisons;public,static,void,assert,to,xcontent,equivalent,bytes,reference,expected,bytes,reference,actual,xcontent,type,x,content,type,throws,ioexception,map,string,object,actual,map,null,map,string,object,expected,map,null,try,xcontent,parser,actual,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,deprecation,handler,actual,stream,input,actual,map,actual,parser,map,try,xcontent,parser,expected,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,deprecation,handler,expected,stream,input,expected,map,expected,parser,map,try,assert,map,equals,expected,map,actual,map,catch,assertion,error,error,not,equal,message,builder,message,new,not,equal,message,builder,message,compare,maps,actual,map,expected,map,throw,new,assertion,error,error,when,comparing,x,content,n,message,to,string,error
ElasticsearchAssertions -> public static void assertToXContentEquivalent(BytesReference expected, BytesReference actual, XContentType xContentType)             throws IOException;1551176390;Asserts that the provided {@link BytesReference}s created through_{@link org.elasticsearch.common.xcontent.ToXContent#toXContent(XContentBuilder, ToXContent.Params)} hold the same content._The comparison is done by parsing both into a map and comparing those two, so that keys ordering doesn't matter._Also binary values (byte[]) are properly compared through arrays comparisons.;public static void assertToXContentEquivalent(BytesReference expected, BytesReference actual, XContentType xContentType)_            throws IOException {_        _        _        _        _        Map<String, Object> actualMap = null__        Map<String, Object> expectedMap = null__        try (XContentParser actualParser = xContentType.xContent()_                .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, actual.streamInput())) {_            actualMap = actualParser.map()__            try (XContentParser expectedParser = xContentType.xContent()_                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, expected.streamInput())) {_                expectedMap = expectedParser.map()__                try {_                    assertMapEquals(expectedMap, actualMap)__                } catch (AssertionError error) {_                    NotEqualMessageBuilder message = new NotEqualMessageBuilder()__                    message.compareMaps(actualMap, expectedMap)__                    throw new AssertionError("Error when comparing xContent.\n" + message.toString(), error)__                }_            }_        }_    };asserts,that,the,provided,link,bytes,reference,s,created,through,link,org,elasticsearch,common,xcontent,to,xcontent,to,xcontent,xcontent,builder,to,xcontent,params,hold,the,same,content,the,comparison,is,done,by,parsing,both,into,a,map,and,comparing,those,two,so,that,keys,ordering,doesn,t,matter,also,binary,values,byte,are,properly,compared,through,arrays,comparisons;public,static,void,assert,to,xcontent,equivalent,bytes,reference,expected,bytes,reference,actual,xcontent,type,x,content,type,throws,ioexception,map,string,object,actual,map,null,map,string,object,expected,map,null,try,xcontent,parser,actual,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,deprecation,handler,actual,stream,input,actual,map,actual,parser,map,try,xcontent,parser,expected,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,deprecation,handler,expected,stream,input,expected,map,expected,parser,map,try,assert,map,equals,expected,map,actual,map,catch,assertion,error,error,not,equal,message,builder,message,new,not,equal,message,builder,message,compare,maps,actual,map,expected,map,throw,new,assertion,error,error,when,comparing,x,content,n,message,to,string,error
ElasticsearchAssertions -> @SuppressWarnings("unchecked")     private static void assertObjectEquals(Object expected, Object actual);1524684173;Compares two objects, recursively walking eventual maps and lists encountered, and using arrays comparisons_for byte[] through Arrays.equals(byte[], byte[]);@SuppressWarnings("unchecked")_    private static void assertObjectEquals(Object expected, Object actual) {_        if (expected instanceof Map) {_            assertThat(actual, instanceOf(Map.class))__            assertMapEquals((Map<String, Object>) expected, (Map<String, Object>) actual)__        } else if (expected instanceof List) {_            assertListEquals((List<Object>) expected, (List<Object>) actual)__        } else if (expected instanceof byte[]) {_            _            _            assertArrayEquals((byte[]) expected, (byte[]) actual)__        } else {_            assertEquals(expected, actual)__        }_    };compares,two,objects,recursively,walking,eventual,maps,and,lists,encountered,and,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;suppress,warnings,unchecked,private,static,void,assert,object,equals,object,expected,object,actual,if,expected,instanceof,map,assert,that,actual,instance,of,map,class,assert,map,equals,map,string,object,expected,map,string,object,actual,else,if,expected,instanceof,list,assert,list,equals,list,object,expected,list,object,actual,else,if,expected,instanceof,byte,assert,array,equals,byte,expected,byte,actual,else,assert,equals,expected,actual
ElasticsearchAssertions -> @SuppressWarnings("unchecked")     private static void assertObjectEquals(Object expected, Object actual);1527840262;Compares two objects, recursively walking eventual maps and lists encountered, and using arrays comparisons_for byte[] through Arrays.equals(byte[], byte[]);@SuppressWarnings("unchecked")_    private static void assertObjectEquals(Object expected, Object actual) {_        if (expected instanceof Map) {_            assertThat(actual, instanceOf(Map.class))__            assertMapEquals((Map<String, Object>) expected, (Map<String, Object>) actual)__        } else if (expected instanceof List) {_            assertListEquals((List<Object>) expected, (List<Object>) actual)__        } else if (expected instanceof byte[]) {_            _            _            assertArrayEquals((byte[]) expected, (byte[]) actual)__        } else {_            assertEquals(expected, actual)__        }_    };compares,two,objects,recursively,walking,eventual,maps,and,lists,encountered,and,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;suppress,warnings,unchecked,private,static,void,assert,object,equals,object,expected,object,actual,if,expected,instanceof,map,assert,that,actual,instance,of,map,class,assert,map,equals,map,string,object,expected,map,string,object,actual,else,if,expected,instanceof,list,assert,list,equals,list,object,expected,list,object,actual,else,if,expected,instanceof,byte,assert,array,equals,byte,expected,byte,actual,else,assert,equals,expected,actual
ElasticsearchAssertions -> @SuppressWarnings("unchecked")     private static void assertObjectEquals(Object expected, Object actual);1528762805;Compares two objects, recursively walking eventual maps and lists encountered, and using arrays comparisons_for byte[] through Arrays.equals(byte[], byte[]);@SuppressWarnings("unchecked")_    private static void assertObjectEquals(Object expected, Object actual) {_        if (expected instanceof Map) {_            assertThat(actual, instanceOf(Map.class))__            assertMapEquals((Map<String, Object>) expected, (Map<String, Object>) actual)__        } else if (expected instanceof List) {_            assertListEquals((List<Object>) expected, (List<Object>) actual)__        } else if (expected instanceof byte[]) {_            _            _            assertArrayEquals((byte[]) expected, (byte[]) actual)__        } else {_            assertEquals(expected, actual)__        }_    };compares,two,objects,recursively,walking,eventual,maps,and,lists,encountered,and,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;suppress,warnings,unchecked,private,static,void,assert,object,equals,object,expected,object,actual,if,expected,instanceof,map,assert,that,actual,instance,of,map,class,assert,map,equals,map,string,object,expected,map,string,object,actual,else,if,expected,instanceof,list,assert,list,equals,list,object,expected,list,object,actual,else,if,expected,instanceof,byte,assert,array,equals,byte,expected,byte,actual,else,assert,equals,expected,actual
ElasticsearchAssertions -> @SuppressWarnings("unchecked")     private static void assertObjectEquals(Object expected, Object actual);1532353780;Compares two objects, recursively walking eventual maps and lists encountered, and using arrays comparisons_for byte[] through Arrays.equals(byte[], byte[]);@SuppressWarnings("unchecked")_    private static void assertObjectEquals(Object expected, Object actual) {_        if (expected instanceof Map) {_            assertThat(actual, instanceOf(Map.class))__            assertMapEquals((Map<String, Object>) expected, (Map<String, Object>) actual)__        } else if (expected instanceof List) {_            assertListEquals((List<Object>) expected, (List<Object>) actual)__        } else if (expected instanceof byte[]) {_            _            _            assertArrayEquals((byte[]) expected, (byte[]) actual)__        } else {_            assertEquals(expected, actual)__        }_    };compares,two,objects,recursively,walking,eventual,maps,and,lists,encountered,and,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;suppress,warnings,unchecked,private,static,void,assert,object,equals,object,expected,object,actual,if,expected,instanceof,map,assert,that,actual,instance,of,map,class,assert,map,equals,map,string,object,expected,map,string,object,actual,else,if,expected,instanceof,list,assert,list,equals,list,object,expected,list,object,actual,else,if,expected,instanceof,byte,assert,array,equals,byte,expected,byte,actual,else,assert,equals,expected,actual
ElasticsearchAssertions -> @SuppressWarnings("unchecked")     private static void assertObjectEquals(Object expected, Object actual);1534362961;Compares two objects, recursively walking eventual maps and lists encountered, and using arrays comparisons_for byte[] through Arrays.equals(byte[], byte[]);@SuppressWarnings("unchecked")_    private static void assertObjectEquals(Object expected, Object actual) {_        if (expected instanceof Map) {_            assertThat(actual, instanceOf(Map.class))__            assertMapEquals((Map<String, Object>) expected, (Map<String, Object>) actual)__        } else if (expected instanceof List) {_            assertListEquals((List<Object>) expected, (List<Object>) actual)__        } else if (expected instanceof byte[]) {_            _            _            assertArrayEquals((byte[]) expected, (byte[]) actual)__        } else {_            assertEquals(expected, actual)__        }_    };compares,two,objects,recursively,walking,eventual,maps,and,lists,encountered,and,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;suppress,warnings,unchecked,private,static,void,assert,object,equals,object,expected,object,actual,if,expected,instanceof,map,assert,that,actual,instance,of,map,class,assert,map,equals,map,string,object,expected,map,string,object,actual,else,if,expected,instanceof,list,assert,list,equals,list,object,expected,list,object,actual,else,if,expected,instanceof,byte,assert,array,equals,byte,expected,byte,actual,else,assert,equals,expected,actual
ElasticsearchAssertions -> @SuppressWarnings("unchecked")     private static void assertObjectEquals(Object expected, Object actual);1537806831;Compares two objects, recursively walking eventual maps and lists encountered, and using arrays comparisons_for byte[] through Arrays.equals(byte[], byte[]);@SuppressWarnings("unchecked")_    private static void assertObjectEquals(Object expected, Object actual) {_        if (expected instanceof Map) {_            assertThat(actual, instanceOf(Map.class))__            assertMapEquals((Map<String, Object>) expected, (Map<String, Object>) actual)__        } else if (expected instanceof List) {_            assertListEquals((List<Object>) expected, (List<Object>) actual)__        } else if (expected instanceof byte[]) {_            _            _            assertArrayEquals((byte[]) expected, (byte[]) actual)__        } else {_            assertEquals(expected, actual)__        }_    };compares,two,objects,recursively,walking,eventual,maps,and,lists,encountered,and,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;suppress,warnings,unchecked,private,static,void,assert,object,equals,object,expected,object,actual,if,expected,instanceof,map,assert,that,actual,instance,of,map,class,assert,map,equals,map,string,object,expected,map,string,object,actual,else,if,expected,instanceof,list,assert,list,equals,list,object,expected,list,object,actual,else,if,expected,instanceof,byte,assert,array,equals,byte,expected,byte,actual,else,assert,equals,expected,actual
ElasticsearchAssertions -> @SuppressWarnings("unchecked")     private static void assertObjectEquals(Object expected, Object actual);1540912197;Compares two objects, recursively walking eventual maps and lists encountered, and using arrays comparisons_for byte[] through Arrays.equals(byte[], byte[]);@SuppressWarnings("unchecked")_    private static void assertObjectEquals(Object expected, Object actual) {_        if (expected instanceof Map) {_            assertThat(actual, instanceOf(Map.class))__            assertMapEquals((Map<String, Object>) expected, (Map<String, Object>) actual)__        } else if (expected instanceof List) {_            assertListEquals((List<Object>) expected, (List<Object>) actual)__        } else if (expected instanceof byte[]) {_            _            _            assertArrayEquals((byte[]) expected, (byte[]) actual)__        } else {_            assertEquals(expected, actual)__        }_    };compares,two,objects,recursively,walking,eventual,maps,and,lists,encountered,and,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;suppress,warnings,unchecked,private,static,void,assert,object,equals,object,expected,object,actual,if,expected,instanceof,map,assert,that,actual,instance,of,map,class,assert,map,equals,map,string,object,expected,map,string,object,actual,else,if,expected,instanceof,list,assert,list,equals,list,object,expected,list,object,actual,else,if,expected,instanceof,byte,assert,array,equals,byte,expected,byte,actual,else,assert,equals,expected,actual
ElasticsearchAssertions -> @SuppressWarnings("unchecked")     private static void assertObjectEquals(Object expected, Object actual);1544035746;Compares two objects, recursively walking eventual maps and lists encountered, and using arrays comparisons_for byte[] through Arrays.equals(byte[], byte[]);@SuppressWarnings("unchecked")_    private static void assertObjectEquals(Object expected, Object actual) {_        if (expected instanceof Map) {_            assertThat(actual, instanceOf(Map.class))__            assertMapEquals((Map<String, Object>) expected, (Map<String, Object>) actual)__        } else if (expected instanceof List) {_            assertListEquals((List<Object>) expected, (List<Object>) actual)__        } else if (expected instanceof byte[]) {_            _            _            assertArrayEquals((byte[]) expected, (byte[]) actual)__        } else {_            assertEquals(expected, actual)__        }_    };compares,two,objects,recursively,walking,eventual,maps,and,lists,encountered,and,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;suppress,warnings,unchecked,private,static,void,assert,object,equals,object,expected,object,actual,if,expected,instanceof,map,assert,that,actual,instance,of,map,class,assert,map,equals,map,string,object,expected,map,string,object,actual,else,if,expected,instanceof,list,assert,list,equals,list,object,expected,list,object,actual,else,if,expected,instanceof,byte,assert,array,equals,byte,expected,byte,actual,else,assert,equals,expected,actual
ElasticsearchAssertions -> @SuppressWarnings("unchecked")     private static void assertObjectEquals(Object expected, Object actual);1547030937;Compares two objects, recursively walking eventual maps and lists encountered, and using arrays comparisons_for byte[] through Arrays.equals(byte[], byte[]);@SuppressWarnings("unchecked")_    private static void assertObjectEquals(Object expected, Object actual) {_        if (expected instanceof Map) {_            assertThat(actual, instanceOf(Map.class))__            assertMapEquals((Map<String, Object>) expected, (Map<String, Object>) actual)__        } else if (expected instanceof List) {_            assertListEquals((List<Object>) expected, (List<Object>) actual)__        } else if (expected instanceof byte[]) {_            _            _            assertArrayEquals((byte[]) expected, (byte[]) actual)__        } else {_            assertEquals(expected, actual)__        }_    };compares,two,objects,recursively,walking,eventual,maps,and,lists,encountered,and,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;suppress,warnings,unchecked,private,static,void,assert,object,equals,object,expected,object,actual,if,expected,instanceof,map,assert,that,actual,instance,of,map,class,assert,map,equals,map,string,object,expected,map,string,object,actual,else,if,expected,instanceof,list,assert,list,equals,list,object,expected,list,object,actual,else,if,expected,instanceof,byte,assert,array,equals,byte,expected,byte,actual,else,assert,equals,expected,actual
ElasticsearchAssertions -> @SuppressWarnings("unchecked")     private static void assertObjectEquals(Object expected, Object actual);1547108736;Compares two objects, recursively walking eventual maps and lists encountered, and using arrays comparisons_for byte[] through Arrays.equals(byte[], byte[]);@SuppressWarnings("unchecked")_    private static void assertObjectEquals(Object expected, Object actual) {_        if (expected instanceof Map) {_            assertThat(actual, instanceOf(Map.class))__            assertMapEquals((Map<String, Object>) expected, (Map<String, Object>) actual)__        } else if (expected instanceof List) {_            assertListEquals((List<Object>) expected, (List<Object>) actual)__        } else if (expected instanceof byte[]) {_            _            _            assertArrayEquals((byte[]) expected, (byte[]) actual)__        } else {_            assertEquals(expected, actual)__        }_    };compares,two,objects,recursively,walking,eventual,maps,and,lists,encountered,and,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;suppress,warnings,unchecked,private,static,void,assert,object,equals,object,expected,object,actual,if,expected,instanceof,map,assert,that,actual,instance,of,map,class,assert,map,equals,map,string,object,expected,map,string,object,actual,else,if,expected,instanceof,list,assert,list,equals,list,object,expected,list,object,actual,else,if,expected,instanceof,byte,assert,array,equals,byte,expected,byte,actual,else,assert,equals,expected,actual
ElasticsearchAssertions -> @SuppressWarnings("unchecked")     private static void assertObjectEquals(Object expected, Object actual);1551176390;Compares two objects, recursively walking eventual maps and lists encountered, and using arrays comparisons_for byte[] through Arrays.equals(byte[], byte[]);@SuppressWarnings("unchecked")_    private static void assertObjectEquals(Object expected, Object actual) {_        if (expected instanceof Map) {_            assertThat(actual, instanceOf(Map.class))__            assertMapEquals((Map<String, Object>) expected, (Map<String, Object>) actual)__        } else if (expected instanceof List) {_            assertListEquals((List<Object>) expected, (List<Object>) actual)__        } else if (expected instanceof byte[]) {_            _            _            assertArrayEquals((byte[]) expected, (byte[]) actual)__        } else {_            assertEquals(expected, actual)__        }_    };compares,two,objects,recursively,walking,eventual,maps,and,lists,encountered,and,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;suppress,warnings,unchecked,private,static,void,assert,object,equals,object,expected,object,actual,if,expected,instanceof,map,assert,that,actual,instance,of,map,class,assert,map,equals,map,string,object,expected,map,string,object,actual,else,if,expected,instanceof,list,assert,list,equals,list,object,expected,list,object,actual,else,if,expected,instanceof,byte,assert,array,equals,byte,expected,byte,actual,else,assert,equals,expected,actual
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, @Nullable RestStatus status, @Nullable String extraInfo);1524684173;Run future.actionGet() and check that it throws an exception of the right type, optionally checking the exception's rest status__@param exceptionClass expected exception class_@param status         {@link org.elasticsearch.rest.RestStatus} to check for. Can be null to disable the check_@param extraInfo      extra information to add to the failure message. Can be null.;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, @Nullable RestStatus status, @Nullable String extraInfo) {_        boolean fail = false__        extraInfo = extraInfo == null || extraInfo.isEmpty() ? "" : extraInfo + ": "__        extraInfo += "expected a " + exceptionClass + " exception to be thrown"___        if (status != null) {_            extraInfo += " with status [" + status + "]"__        }__        try {_            future.actionGet()__            fail = true___        } catch (ElasticsearchException esException) {_            assertThat(extraInfo, esException.unwrapCause(), instanceOf(exceptionClass))__            if (status != null) {_                assertThat(extraInfo, ExceptionsHelper.status(esException), equalTo(status))__            }_        } catch (Exception e) {_            assertThat(extraInfo, e, instanceOf(exceptionClass))__            if (status != null) {_                assertThat(extraInfo, ExceptionsHelper.status(e), equalTo(status))__            }_        }_        _        if (fail) {_            throw new AssertionError(extraInfo)__        }_    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,optionally,checking,the,exception,s,rest,status,param,exception,class,expected,exception,class,param,status,link,org,elasticsearch,rest,rest,status,to,check,for,can,be,null,to,disable,the,check,param,extra,info,extra,information,to,add,to,the,failure,message,can,be,null;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,nullable,rest,status,status,nullable,string,extra,info,boolean,fail,false,extra,info,extra,info,null,extra,info,is,empty,extra,info,extra,info,expected,a,exception,class,exception,to,be,thrown,if,status,null,extra,info,with,status,status,try,future,action,get,fail,true,catch,elasticsearch,exception,es,exception,assert,that,extra,info,es,exception,unwrap,cause,instance,of,exception,class,if,status,null,assert,that,extra,info,exceptions,helper,status,es,exception,equal,to,status,catch,exception,e,assert,that,extra,info,e,instance,of,exception,class,if,status,null,assert,that,extra,info,exceptions,helper,status,e,equal,to,status,if,fail,throw,new,assertion,error,extra,info
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, @Nullable RestStatus status, @Nullable String extraInfo);1527840262;Run future.actionGet() and check that it throws an exception of the right type, optionally checking the exception's rest status__@param exceptionClass expected exception class_@param status         {@link org.elasticsearch.rest.RestStatus} to check for. Can be null to disable the check_@param extraInfo      extra information to add to the failure message. Can be null.;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, @Nullable RestStatus status, @Nullable String extraInfo) {_        boolean fail = false__        extraInfo = extraInfo == null || extraInfo.isEmpty() ? "" : extraInfo + ": "__        extraInfo += "expected a " + exceptionClass + " exception to be thrown"___        if (status != null) {_            extraInfo += " with status [" + status + "]"__        }__        try {_            future.actionGet()__            fail = true___        } catch (ElasticsearchException esException) {_            assertThat(extraInfo, esException.unwrapCause(), instanceOf(exceptionClass))__            if (status != null) {_                assertThat(extraInfo, ExceptionsHelper.status(esException), equalTo(status))__            }_        } catch (Exception e) {_            assertThat(extraInfo, e, instanceOf(exceptionClass))__            if (status != null) {_                assertThat(extraInfo, ExceptionsHelper.status(e), equalTo(status))__            }_        }_        _        if (fail) {_            throw new AssertionError(extraInfo)__        }_    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,optionally,checking,the,exception,s,rest,status,param,exception,class,expected,exception,class,param,status,link,org,elasticsearch,rest,rest,status,to,check,for,can,be,null,to,disable,the,check,param,extra,info,extra,information,to,add,to,the,failure,message,can,be,null;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,nullable,rest,status,status,nullable,string,extra,info,boolean,fail,false,extra,info,extra,info,null,extra,info,is,empty,extra,info,extra,info,expected,a,exception,class,exception,to,be,thrown,if,status,null,extra,info,with,status,status,try,future,action,get,fail,true,catch,elasticsearch,exception,es,exception,assert,that,extra,info,es,exception,unwrap,cause,instance,of,exception,class,if,status,null,assert,that,extra,info,exceptions,helper,status,es,exception,equal,to,status,catch,exception,e,assert,that,extra,info,e,instance,of,exception,class,if,status,null,assert,that,extra,info,exceptions,helper,status,e,equal,to,status,if,fail,throw,new,assertion,error,extra,info
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, @Nullable RestStatus status, @Nullable String extraInfo);1528762805;Run future.actionGet() and check that it throws an exception of the right type, optionally checking the exception's rest status__@param exceptionClass expected exception class_@param status         {@link org.elasticsearch.rest.RestStatus} to check for. Can be null to disable the check_@param extraInfo      extra information to add to the failure message. Can be null.;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, @Nullable RestStatus status, @Nullable String extraInfo) {_        boolean fail = false__        extraInfo = extraInfo == null || extraInfo.isEmpty() ? "" : extraInfo + ": "__        extraInfo += "expected a " + exceptionClass + " exception to be thrown"___        if (status != null) {_            extraInfo += " with status [" + status + "]"__        }__        try {_            future.actionGet()__            fail = true___        } catch (ElasticsearchException esException) {_            assertThat(extraInfo, esException.unwrapCause(), instanceOf(exceptionClass))__            if (status != null) {_                assertThat(extraInfo, ExceptionsHelper.status(esException), equalTo(status))__            }_        } catch (Exception e) {_            assertThat(extraInfo, e, instanceOf(exceptionClass))__            if (status != null) {_                assertThat(extraInfo, ExceptionsHelper.status(e), equalTo(status))__            }_        }_        _        if (fail) {_            throw new AssertionError(extraInfo)__        }_    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,optionally,checking,the,exception,s,rest,status,param,exception,class,expected,exception,class,param,status,link,org,elasticsearch,rest,rest,status,to,check,for,can,be,null,to,disable,the,check,param,extra,info,extra,information,to,add,to,the,failure,message,can,be,null;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,nullable,rest,status,status,nullable,string,extra,info,boolean,fail,false,extra,info,extra,info,null,extra,info,is,empty,extra,info,extra,info,expected,a,exception,class,exception,to,be,thrown,if,status,null,extra,info,with,status,status,try,future,action,get,fail,true,catch,elasticsearch,exception,es,exception,assert,that,extra,info,es,exception,unwrap,cause,instance,of,exception,class,if,status,null,assert,that,extra,info,exceptions,helper,status,es,exception,equal,to,status,catch,exception,e,assert,that,extra,info,e,instance,of,exception,class,if,status,null,assert,that,extra,info,exceptions,helper,status,e,equal,to,status,if,fail,throw,new,assertion,error,extra,info
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, @Nullable RestStatus status, @Nullable String extraInfo);1532353780;Run future.actionGet() and check that it throws an exception of the right type, optionally checking the exception's rest status__@param exceptionClass expected exception class_@param status         {@link org.elasticsearch.rest.RestStatus} to check for. Can be null to disable the check_@param extraInfo      extra information to add to the failure message. Can be null.;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, @Nullable RestStatus status, @Nullable String extraInfo) {_        boolean fail = false__        extraInfo = extraInfo == null || extraInfo.isEmpty() ? "" : extraInfo + ": "__        extraInfo += "expected a " + exceptionClass + " exception to be thrown"___        if (status != null) {_            extraInfo += " with status [" + status + "]"__        }__        try {_            future.actionGet()__            fail = true___        } catch (ElasticsearchException esException) {_            assertThat(extraInfo, esException.unwrapCause(), instanceOf(exceptionClass))__            if (status != null) {_                assertThat(extraInfo, ExceptionsHelper.status(esException), equalTo(status))__            }_        } catch (Exception e) {_            assertThat(extraInfo, e, instanceOf(exceptionClass))__            if (status != null) {_                assertThat(extraInfo, ExceptionsHelper.status(e), equalTo(status))__            }_        }_        _        if (fail) {_            throw new AssertionError(extraInfo)__        }_    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,optionally,checking,the,exception,s,rest,status,param,exception,class,expected,exception,class,param,status,link,org,elasticsearch,rest,rest,status,to,check,for,can,be,null,to,disable,the,check,param,extra,info,extra,information,to,add,to,the,failure,message,can,be,null;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,nullable,rest,status,status,nullable,string,extra,info,boolean,fail,false,extra,info,extra,info,null,extra,info,is,empty,extra,info,extra,info,expected,a,exception,class,exception,to,be,thrown,if,status,null,extra,info,with,status,status,try,future,action,get,fail,true,catch,elasticsearch,exception,es,exception,assert,that,extra,info,es,exception,unwrap,cause,instance,of,exception,class,if,status,null,assert,that,extra,info,exceptions,helper,status,es,exception,equal,to,status,catch,exception,e,assert,that,extra,info,e,instance,of,exception,class,if,status,null,assert,that,extra,info,exceptions,helper,status,e,equal,to,status,if,fail,throw,new,assertion,error,extra,info
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, @Nullable RestStatus status, @Nullable String extraInfo);1534362961;Run future.actionGet() and check that it throws an exception of the right type, optionally checking the exception's rest status__@param exceptionClass expected exception class_@param status         {@link org.elasticsearch.rest.RestStatus} to check for. Can be null to disable the check_@param extraInfo      extra information to add to the failure message. Can be null.;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, @Nullable RestStatus status, @Nullable String extraInfo) {_        boolean fail = false__        extraInfo = extraInfo == null || extraInfo.isEmpty() ? "" : extraInfo + ": "__        extraInfo += "expected a " + exceptionClass + " exception to be thrown"___        if (status != null) {_            extraInfo += " with status [" + status + "]"__        }__        try {_            future.actionGet()__            fail = true___        } catch (ElasticsearchException esException) {_            assertThat(extraInfo, esException.unwrapCause(), instanceOf(exceptionClass))__            if (status != null) {_                assertThat(extraInfo, ExceptionsHelper.status(esException), equalTo(status))__            }_        } catch (Exception e) {_            assertThat(extraInfo, e, instanceOf(exceptionClass))__            if (status != null) {_                assertThat(extraInfo, ExceptionsHelper.status(e), equalTo(status))__            }_        }_        _        if (fail) {_            throw new AssertionError(extraInfo)__        }_    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,optionally,checking,the,exception,s,rest,status,param,exception,class,expected,exception,class,param,status,link,org,elasticsearch,rest,rest,status,to,check,for,can,be,null,to,disable,the,check,param,extra,info,extra,information,to,add,to,the,failure,message,can,be,null;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,nullable,rest,status,status,nullable,string,extra,info,boolean,fail,false,extra,info,extra,info,null,extra,info,is,empty,extra,info,extra,info,expected,a,exception,class,exception,to,be,thrown,if,status,null,extra,info,with,status,status,try,future,action,get,fail,true,catch,elasticsearch,exception,es,exception,assert,that,extra,info,es,exception,unwrap,cause,instance,of,exception,class,if,status,null,assert,that,extra,info,exceptions,helper,status,es,exception,equal,to,status,catch,exception,e,assert,that,extra,info,e,instance,of,exception,class,if,status,null,assert,that,extra,info,exceptions,helper,status,e,equal,to,status,if,fail,throw,new,assertion,error,extra,info
ElasticsearchAssertions -> @SuppressWarnings("unchecked")     private static void assertListEquals(List<Object> expected, List<Object> actual);1524684173;Compares two lists recursively, but using arrays comparisons for byte[] through Arrays.equals(byte[], byte[]);@SuppressWarnings("unchecked")_    private static void assertListEquals(List<Object> expected, List<Object> actual) {_        assertEquals(expected.size(), actual.size())__        Iterator<Object> actualIterator = actual.iterator()__        for (Object expectedValue : expected) {_            Object actualValue = actualIterator.next()__            assertObjectEquals(expectedValue, actualValue)__        }_    };compares,two,lists,recursively,but,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;suppress,warnings,unchecked,private,static,void,assert,list,equals,list,object,expected,list,object,actual,assert,equals,expected,size,actual,size,iterator,object,actual,iterator,actual,iterator,for,object,expected,value,expected,object,actual,value,actual,iterator,next,assert,object,equals,expected,value,actual,value
ElasticsearchAssertions -> @SuppressWarnings("unchecked")     private static void assertListEquals(List<Object> expected, List<Object> actual);1527840262;Compares two lists recursively, but using arrays comparisons for byte[] through Arrays.equals(byte[], byte[]);@SuppressWarnings("unchecked")_    private static void assertListEquals(List<Object> expected, List<Object> actual) {_        assertEquals(expected.size(), actual.size())__        Iterator<Object> actualIterator = actual.iterator()__        for (Object expectedValue : expected) {_            Object actualValue = actualIterator.next()__            assertObjectEquals(expectedValue, actualValue)__        }_    };compares,two,lists,recursively,but,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;suppress,warnings,unchecked,private,static,void,assert,list,equals,list,object,expected,list,object,actual,assert,equals,expected,size,actual,size,iterator,object,actual,iterator,actual,iterator,for,object,expected,value,expected,object,actual,value,actual,iterator,next,assert,object,equals,expected,value,actual,value
ElasticsearchAssertions -> @SuppressWarnings("unchecked")     private static void assertListEquals(List<Object> expected, List<Object> actual);1528762805;Compares two lists recursively, but using arrays comparisons for byte[] through Arrays.equals(byte[], byte[]);@SuppressWarnings("unchecked")_    private static void assertListEquals(List<Object> expected, List<Object> actual) {_        assertEquals(expected.size(), actual.size())__        Iterator<Object> actualIterator = actual.iterator()__        for (Object expectedValue : expected) {_            Object actualValue = actualIterator.next()__            assertObjectEquals(expectedValue, actualValue)__        }_    };compares,two,lists,recursively,but,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;suppress,warnings,unchecked,private,static,void,assert,list,equals,list,object,expected,list,object,actual,assert,equals,expected,size,actual,size,iterator,object,actual,iterator,actual,iterator,for,object,expected,value,expected,object,actual,value,actual,iterator,next,assert,object,equals,expected,value,actual,value
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass);1524684173;Run future.actionGet() and check that it throws an exception of the right type;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass) {_        assertThrows(future, exceptionClass, null, null)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,assert,throws,future,exception,class,null,null
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass);1527840262;Run future.actionGet() and check that it throws an exception of the right type;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass) {_        assertThrows(future, exceptionClass, null, null)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,assert,throws,future,exception,class,null,null
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass);1528762805;Run future.actionGet() and check that it throws an exception of the right type;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass) {_        assertThrows(future, exceptionClass, null, null)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,assert,throws,future,exception,class,null,null
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass);1532353780;Run future.actionGet() and check that it throws an exception of the right type;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass) {_        assertThrows(future, exceptionClass, null, null)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,assert,throws,future,exception,class,null,null
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass);1534362961;Run future.actionGet() and check that it throws an exception of the right type;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass) {_        assertThrows(future, exceptionClass, null, null)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,assert,throws,future,exception,class,null,null
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass);1537806831;Run future.actionGet() and check that it throws an exception of the right type;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass) {_        assertThrows(future, exceptionClass, null, null)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,assert,throws,future,exception,class,null,null
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass);1540912197;Run future.actionGet() and check that it throws an exception of the right type;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass) {_        assertThrows(future, exceptionClass, null, null)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,assert,throws,future,exception,class,null,null
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass);1544035746;Run future.actionGet() and check that it throws an exception of the right type;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass) {_        assertThrows(future, exceptionClass, null, null)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,assert,throws,future,exception,class,null,null
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass);1547030937;Run future.actionGet() and check that it throws an exception of the right type;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass) {_        assertThrows(future, exceptionClass, null, null)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,assert,throws,future,exception,class,null,null
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass);1547108736;Run future.actionGet() and check that it throws an exception of the right type;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass) {_        assertThrows(future, exceptionClass, null, null)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,assert,throws,future,exception,class,null,null
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass);1551176390;Run future.actionGet() and check that it throws an exception of the right type;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass) {_        assertThrows(future, exceptionClass, null, null)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,assert,throws,future,exception,class,null,null
ElasticsearchAssertions -> public static void assertAliasesExist(AliasesExistResponse aliasesExistResponse);1524684173;Assert that aliases exist;public static void assertAliasesExist(AliasesExistResponse aliasesExistResponse) {_        assertTrue("Aliases should exist", aliasesExistResponse.exists())__    };assert,that,aliases,exist;public,static,void,assert,aliases,exist,aliases,exist,response,aliases,exist,response,assert,true,aliases,should,exist,aliases,exist,response,exists
ElasticsearchAssertions -> public static void assertAliasesExist(AliasesExistResponse aliasesExistResponse);1527840262;Assert that aliases exist;public static void assertAliasesExist(AliasesExistResponse aliasesExistResponse) {_        assertTrue("Aliases should exist", aliasesExistResponse.exists())__    };assert,that,aliases,exist;public,static,void,assert,aliases,exist,aliases,exist,response,aliases,exist,response,assert,true,aliases,should,exist,aliases,exist,response,exists
ElasticsearchAssertions -> public static void assertAliasesExist(AliasesExistResponse aliasesExistResponse);1528762805;Assert that aliases exist;public static void assertAliasesExist(AliasesExistResponse aliasesExistResponse) {_        assertTrue("Aliases should exist", aliasesExistResponse.exists())__    };assert,that,aliases,exist;public,static,void,assert,aliases,exist,aliases,exist,response,aliases,exist,response,assert,true,aliases,should,exist,aliases,exist,response,exists
ElasticsearchAssertions -> public static void assertAliasesExist(AliasesExistResponse aliasesExistResponse);1532353780;Assert that aliases exist;public static void assertAliasesExist(AliasesExistResponse aliasesExistResponse) {_        assertTrue("Aliases should exist", aliasesExistResponse.exists())__    };assert,that,aliases,exist;public,static,void,assert,aliases,exist,aliases,exist,response,aliases,exist,response,assert,true,aliases,should,exist,aliases,exist,response,exists
ElasticsearchAssertions -> public static void assertAliasesExist(AliasesExistResponse aliasesExistResponse);1534362961;Assert that aliases exist;public static void assertAliasesExist(AliasesExistResponse aliasesExistResponse) {_        assertTrue("Aliases should exist", aliasesExistResponse.exists())__    };assert,that,aliases,exist;public,static,void,assert,aliases,exist,aliases,exist,response,aliases,exist,response,assert,true,aliases,should,exist,aliases,exist,response,exists
ElasticsearchAssertions -> public static void assertAliasesExist(AliasesExistResponse aliasesExistResponse);1537806831;Assert that aliases exist;public static void assertAliasesExist(AliasesExistResponse aliasesExistResponse) {_        assertTrue("Aliases should exist", aliasesExistResponse.exists())__    };assert,that,aliases,exist;public,static,void,assert,aliases,exist,aliases,exist,response,aliases,exist,response,assert,true,aliases,should,exist,aliases,exist,response,exists
ElasticsearchAssertions -> public static void assertAliasesExist(AliasesExistResponse aliasesExistResponse);1540912197;Assert that aliases exist;public static void assertAliasesExist(AliasesExistResponse aliasesExistResponse) {_        assertTrue("Aliases should exist", aliasesExistResponse.exists())__    };assert,that,aliases,exist;public,static,void,assert,aliases,exist,aliases,exist,response,aliases,exist,response,assert,true,aliases,should,exist,aliases,exist,response,exists
ElasticsearchAssertions -> public static void assertAliasesExist(AliasesExistResponse aliasesExistResponse);1544035746;Assert that aliases exist;public static void assertAliasesExist(AliasesExistResponse aliasesExistResponse) {_        assertTrue("Aliases should exist", aliasesExistResponse.exists())__    };assert,that,aliases,exist;public,static,void,assert,aliases,exist,aliases,exist,response,aliases,exist,response,assert,true,aliases,should,exist,aliases,exist,response,exists
ElasticsearchAssertions -> public static void assertAliasesExist(AliasesExistResponse aliasesExistResponse);1547030937;Assert that aliases exist;public static void assertAliasesExist(AliasesExistResponse aliasesExistResponse) {_        assertTrue("Aliases should exist", aliasesExistResponse.exists())__    };assert,that,aliases,exist;public,static,void,assert,aliases,exist,aliases,exist,response,aliases,exist,response,assert,true,aliases,should,exist,aliases,exist,response,exists
ElasticsearchAssertions -> public static void assertAliasesExist(AliasesExistResponse aliasesExistResponse);1547108736;Assert that aliases exist;public static void assertAliasesExist(AliasesExistResponse aliasesExistResponse) {_        assertTrue("Aliases should exist", aliasesExistResponse.exists())__    };assert,that,aliases,exist;public,static,void,assert,aliases,exist,aliases,exist,response,aliases,exist,response,assert,true,aliases,should,exist,aliases,exist,response,exists
ElasticsearchAssertions -> public static void assertAliasesExist(AliasesExistResponse aliasesExistResponse);1551176390;Assert that aliases exist;public static void assertAliasesExist(AliasesExistResponse aliasesExistResponse) {_        assertTrue("Aliases should exist", aliasesExistResponse.exists())__    };assert,that,aliases,exist;public,static,void,assert,aliases,exist,aliases,exist,response,aliases,exist,response,assert,true,aliases,should,exist,aliases,exist,response,exists
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, String extraInfo);1527840262;Run the request from a given builder and check that it throws an exception of the right type__@param extraInfo extra information to add to the failure message;public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, String extraInfo) {_        assertThrows(builder.execute(), exceptionClass, extraInfo)__    };run,the,request,from,a,given,builder,and,check,that,it,throws,an,exception,of,the,right,type,param,extra,info,extra,information,to,add,to,the,failure,message;public,static,e,extends,throwable,void,assert,throws,action,request,builder,builder,class,e,exception,class,string,extra,info,assert,throws,builder,execute,exception,class,extra,info
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, String extraInfo);1528762805;Run the request from a given builder and check that it throws an exception of the right type__@param extraInfo extra information to add to the failure message;public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, String extraInfo) {_        assertThrows(builder.execute(), exceptionClass, extraInfo)__    };run,the,request,from,a,given,builder,and,check,that,it,throws,an,exception,of,the,right,type,param,extra,info,extra,information,to,add,to,the,failure,message;public,static,e,extends,throwable,void,assert,throws,action,request,builder,builder,class,e,exception,class,string,extra,info,assert,throws,builder,execute,exception,class,extra,info
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, String extraInfo);1532353780;Run the request from a given builder and check that it throws an exception of the right type__@param extraInfo extra information to add to the failure message;public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, String extraInfo) {_        assertThrows(builder.execute(), exceptionClass, extraInfo)__    };run,the,request,from,a,given,builder,and,check,that,it,throws,an,exception,of,the,right,type,param,extra,info,extra,information,to,add,to,the,failure,message;public,static,e,extends,throwable,void,assert,throws,action,request,builder,builder,class,e,exception,class,string,extra,info,assert,throws,builder,execute,exception,class,extra,info
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, String extraInfo);1534362961;Run the request from a given builder and check that it throws an exception of the right type__@param extraInfo extra information to add to the failure message;public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, String extraInfo) {_        assertThrows(builder.execute(), exceptionClass, extraInfo)__    };run,the,request,from,a,given,builder,and,check,that,it,throws,an,exception,of,the,right,type,param,extra,info,extra,information,to,add,to,the,failure,message;public,static,e,extends,throwable,void,assert,throws,action,request,builder,builder,class,e,exception,class,string,extra,info,assert,throws,builder,execute,exception,class,extra,info
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, String extraInfo);1537806831;Run the request from a given builder and check that it throws an exception of the right type__@param extraInfo extra information to add to the failure message;public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, String extraInfo) {_        assertThrows(builder.execute(), exceptionClass, extraInfo)__    };run,the,request,from,a,given,builder,and,check,that,it,throws,an,exception,of,the,right,type,param,extra,info,extra,information,to,add,to,the,failure,message;public,static,e,extends,throwable,void,assert,throws,action,request,builder,builder,class,e,exception,class,string,extra,info,assert,throws,builder,execute,exception,class,extra,info
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, String extraInfo);1540912197;Run the request from a given builder and check that it throws an exception of the right type__@param extraInfo extra information to add to the failure message;public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, String extraInfo) {_        assertThrows(builder.execute(), exceptionClass, extraInfo)__    };run,the,request,from,a,given,builder,and,check,that,it,throws,an,exception,of,the,right,type,param,extra,info,extra,information,to,add,to,the,failure,message;public,static,e,extends,throwable,void,assert,throws,action,request,builder,builder,class,e,exception,class,string,extra,info,assert,throws,builder,execute,exception,class,extra,info
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, String extraInfo);1544035746;Run the request from a given builder and check that it throws an exception of the right type__@param extraInfo extra information to add to the failure message;public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, String extraInfo) {_        assertThrows(builder.execute(), exceptionClass, extraInfo)__    };run,the,request,from,a,given,builder,and,check,that,it,throws,an,exception,of,the,right,type,param,extra,info,extra,information,to,add,to,the,failure,message;public,static,e,extends,throwable,void,assert,throws,action,request,builder,builder,class,e,exception,class,string,extra,info,assert,throws,builder,execute,exception,class,extra,info
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, String extraInfo);1547030937;Run the request from a given builder and check that it throws an exception of the right type__@param extraInfo extra information to add to the failure message;public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, String extraInfo) {_        assertThrows(builder.execute(), exceptionClass, extraInfo)__    };run,the,request,from,a,given,builder,and,check,that,it,throws,an,exception,of,the,right,type,param,extra,info,extra,information,to,add,to,the,failure,message;public,static,e,extends,throwable,void,assert,throws,action,request,builder,builder,class,e,exception,class,string,extra,info,assert,throws,builder,execute,exception,class,extra,info
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, String extraInfo);1547108736;Run the request from a given builder and check that it throws an exception of the right type__@param extraInfo extra information to add to the failure message;public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, String extraInfo) {_        assertThrows(builder.execute(), exceptionClass, extraInfo)__    };run,the,request,from,a,given,builder,and,check,that,it,throws,an,exception,of,the,right,type,param,extra,info,extra,information,to,add,to,the,failure,message;public,static,e,extends,throwable,void,assert,throws,action,request,builder,builder,class,e,exception,class,string,extra,info,assert,throws,builder,execute,exception,class,extra,info
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, String extraInfo);1551176390;Run the request from a given builder and check that it throws an exception of the right type__@param extraInfo extra information to add to the failure message;public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass, String extraInfo) {_        assertThrows(builder.execute(), exceptionClass, extraInfo)__    };run,the,request,from,a,given,builder,and,check,that,it,throws,an,exception,of,the,right,type,param,extra,info,extra,information,to,add,to,the,failure,message;public,static,e,extends,throwable,void,assert,throws,action,request,builder,builder,class,e,exception,class,string,extra,info,assert,throws,builder,execute,exception,class,extra,info
ElasticsearchAssertions -> public static void assertIndexTemplateExists(GetIndexTemplatesResponse templatesResponse, String name);1524684173;Assert that an index template exists;public static void assertIndexTemplateExists(GetIndexTemplatesResponse templatesResponse, String name) {_        List<String> templateNames = new ArrayList<>()__        for (IndexTemplateMetaData indexTemplateMetaData : templatesResponse.getIndexTemplates()) {_            templateNames.add(indexTemplateMetaData.name())__        }_        assertThat(templateNames, hasItem(name))__    };assert,that,an,index,template,exists;public,static,void,assert,index,template,exists,get,index,templates,response,templates,response,string,name,list,string,template,names,new,array,list,for,index,template,meta,data,index,template,meta,data,templates,response,get,index,templates,template,names,add,index,template,meta,data,name,assert,that,template,names,has,item,name
ElasticsearchAssertions -> public static void assertIndexTemplateExists(GetIndexTemplatesResponse templatesResponse, String name);1527840262;Assert that an index template exists;public static void assertIndexTemplateExists(GetIndexTemplatesResponse templatesResponse, String name) {_        List<String> templateNames = new ArrayList<>()__        for (IndexTemplateMetaData indexTemplateMetaData : templatesResponse.getIndexTemplates()) {_            templateNames.add(indexTemplateMetaData.name())__        }_        assertThat(templateNames, hasItem(name))__    };assert,that,an,index,template,exists;public,static,void,assert,index,template,exists,get,index,templates,response,templates,response,string,name,list,string,template,names,new,array,list,for,index,template,meta,data,index,template,meta,data,templates,response,get,index,templates,template,names,add,index,template,meta,data,name,assert,that,template,names,has,item,name
ElasticsearchAssertions -> public static void assertIndexTemplateExists(GetIndexTemplatesResponse templatesResponse, String name);1528762805;Assert that an index template exists;public static void assertIndexTemplateExists(GetIndexTemplatesResponse templatesResponse, String name) {_        List<String> templateNames = new ArrayList<>()__        for (IndexTemplateMetaData indexTemplateMetaData : templatesResponse.getIndexTemplates()) {_            templateNames.add(indexTemplateMetaData.name())__        }_        assertThat(templateNames, hasItem(name))__    };assert,that,an,index,template,exists;public,static,void,assert,index,template,exists,get,index,templates,response,templates,response,string,name,list,string,template,names,new,array,list,for,index,template,meta,data,index,template,meta,data,templates,response,get,index,templates,template,names,add,index,template,meta,data,name,assert,that,template,names,has,item,name
ElasticsearchAssertions -> public static void assertIndexTemplateExists(GetIndexTemplatesResponse templatesResponse, String name);1532353780;Assert that an index template exists;public static void assertIndexTemplateExists(GetIndexTemplatesResponse templatesResponse, String name) {_        List<String> templateNames = new ArrayList<>()__        for (IndexTemplateMetaData indexTemplateMetaData : templatesResponse.getIndexTemplates()) {_            templateNames.add(indexTemplateMetaData.name())__        }_        assertThat(templateNames, hasItem(name))__    };assert,that,an,index,template,exists;public,static,void,assert,index,template,exists,get,index,templates,response,templates,response,string,name,list,string,template,names,new,array,list,for,index,template,meta,data,index,template,meta,data,templates,response,get,index,templates,template,names,add,index,template,meta,data,name,assert,that,template,names,has,item,name
ElasticsearchAssertions -> public static void assertIndexTemplateExists(GetIndexTemplatesResponse templatesResponse, String name);1534362961;Assert that an index template exists;public static void assertIndexTemplateExists(GetIndexTemplatesResponse templatesResponse, String name) {_        List<String> templateNames = new ArrayList<>()__        for (IndexTemplateMetaData indexTemplateMetaData : templatesResponse.getIndexTemplates()) {_            templateNames.add(indexTemplateMetaData.name())__        }_        assertThat(templateNames, hasItem(name))__    };assert,that,an,index,template,exists;public,static,void,assert,index,template,exists,get,index,templates,response,templates,response,string,name,list,string,template,names,new,array,list,for,index,template,meta,data,index,template,meta,data,templates,response,get,index,templates,template,names,add,index,template,meta,data,name,assert,that,template,names,has,item,name
ElasticsearchAssertions -> public static void assertIndexTemplateExists(GetIndexTemplatesResponse templatesResponse, String name);1537806831;Assert that an index template exists;public static void assertIndexTemplateExists(GetIndexTemplatesResponse templatesResponse, String name) {_        List<String> templateNames = new ArrayList<>()__        for (IndexTemplateMetaData indexTemplateMetaData : templatesResponse.getIndexTemplates()) {_            templateNames.add(indexTemplateMetaData.name())__        }_        assertThat(templateNames, hasItem(name))__    };assert,that,an,index,template,exists;public,static,void,assert,index,template,exists,get,index,templates,response,templates,response,string,name,list,string,template,names,new,array,list,for,index,template,meta,data,index,template,meta,data,templates,response,get,index,templates,template,names,add,index,template,meta,data,name,assert,that,template,names,has,item,name
ElasticsearchAssertions -> public static void assertIndexTemplateExists(GetIndexTemplatesResponse templatesResponse, String name);1540912197;Assert that an index template exists;public static void assertIndexTemplateExists(GetIndexTemplatesResponse templatesResponse, String name) {_        List<String> templateNames = new ArrayList<>()__        for (IndexTemplateMetaData indexTemplateMetaData : templatesResponse.getIndexTemplates()) {_            templateNames.add(indexTemplateMetaData.name())__        }_        assertThat(templateNames, hasItem(name))__    };assert,that,an,index,template,exists;public,static,void,assert,index,template,exists,get,index,templates,response,templates,response,string,name,list,string,template,names,new,array,list,for,index,template,meta,data,index,template,meta,data,templates,response,get,index,templates,template,names,add,index,template,meta,data,name,assert,that,template,names,has,item,name
ElasticsearchAssertions -> public static void assertIndexTemplateExists(GetIndexTemplatesResponse templatesResponse, String name);1544035746;Assert that an index template exists;public static void assertIndexTemplateExists(GetIndexTemplatesResponse templatesResponse, String name) {_        List<String> templateNames = new ArrayList<>()__        for (IndexTemplateMetaData indexTemplateMetaData : templatesResponse.getIndexTemplates()) {_            templateNames.add(indexTemplateMetaData.name())__        }_        assertThat(templateNames, hasItem(name))__    };assert,that,an,index,template,exists;public,static,void,assert,index,template,exists,get,index,templates,response,templates,response,string,name,list,string,template,names,new,array,list,for,index,template,meta,data,index,template,meta,data,templates,response,get,index,templates,template,names,add,index,template,meta,data,name,assert,that,template,names,has,item,name
ElasticsearchAssertions -> public static void assertIndexTemplateExists(GetIndexTemplatesResponse templatesResponse, String name);1547030937;Assert that an index template exists;public static void assertIndexTemplateExists(GetIndexTemplatesResponse templatesResponse, String name) {_        List<String> templateNames = new ArrayList<>()__        for (IndexTemplateMetaData indexTemplateMetaData : templatesResponse.getIndexTemplates()) {_            templateNames.add(indexTemplateMetaData.name())__        }_        assertThat(templateNames, hasItem(name))__    };assert,that,an,index,template,exists;public,static,void,assert,index,template,exists,get,index,templates,response,templates,response,string,name,list,string,template,names,new,array,list,for,index,template,meta,data,index,template,meta,data,templates,response,get,index,templates,template,names,add,index,template,meta,data,name,assert,that,template,names,has,item,name
ElasticsearchAssertions -> public static void assertIndexTemplateExists(GetIndexTemplatesResponse templatesResponse, String name);1547108736;Assert that an index template exists;public static void assertIndexTemplateExists(GetIndexTemplatesResponse templatesResponse, String name) {_        List<String> templateNames = new ArrayList<>()__        for (IndexTemplateMetaData indexTemplateMetaData : templatesResponse.getIndexTemplates()) {_            templateNames.add(indexTemplateMetaData.name())__        }_        assertThat(templateNames, hasItem(name))__    };assert,that,an,index,template,exists;public,static,void,assert,index,template,exists,get,index,templates,response,templates,response,string,name,list,string,template,names,new,array,list,for,index,template,meta,data,index,template,meta,data,templates,response,get,index,templates,template,names,add,index,template,meta,data,name,assert,that,template,names,has,item,name
ElasticsearchAssertions -> public static void assertIndexTemplateExists(GetIndexTemplatesResponse templatesResponse, String name);1551176390;Assert that an index template exists;public static void assertIndexTemplateExists(GetIndexTemplatesResponse templatesResponse, String name) {_        List<String> templateNames = new ArrayList<>()__        for (IndexTemplateMetaData indexTemplateMetaData : templatesResponse.getIndexTemplates()) {_            templateNames.add(indexTemplateMetaData.name())__        }_        assertThat(templateNames, hasItem(name))__    };assert,that,an,index,template,exists;public,static,void,assert,index,template,exists,get,index,templates,response,templates,response,string,name,list,string,template,names,new,array,list,for,index,template,meta,data,index,template,meta,data,templates,response,get,index,templates,template,names,add,index,template,meta,data,name,assert,that,template,names,has,item,name
ElasticsearchAssertions -> public static void assertDirectoryExists(Path dir);1524684173;Check if a directory exists;public static void assertDirectoryExists(Path dir) {_        assertFileExists(dir)__        assertThat("file [" + dir + "] should be a directory.", Files.isDirectory(dir), is(true))__    };check,if,a,directory,exists;public,static,void,assert,directory,exists,path,dir,assert,file,exists,dir,assert,that,file,dir,should,be,a,directory,files,is,directory,dir,is,true
ElasticsearchAssertions -> public static void assertDirectoryExists(Path dir);1527840262;Check if a directory exists;public static void assertDirectoryExists(Path dir) {_        assertFileExists(dir)__        assertThat("file [" + dir + "] should be a directory.", Files.isDirectory(dir), is(true))__    };check,if,a,directory,exists;public,static,void,assert,directory,exists,path,dir,assert,file,exists,dir,assert,that,file,dir,should,be,a,directory,files,is,directory,dir,is,true
ElasticsearchAssertions -> public static void assertDirectoryExists(Path dir);1528762805;Check if a directory exists;public static void assertDirectoryExists(Path dir) {_        assertFileExists(dir)__        assertThat("file [" + dir + "] should be a directory.", Files.isDirectory(dir), is(true))__    };check,if,a,directory,exists;public,static,void,assert,directory,exists,path,dir,assert,file,exists,dir,assert,that,file,dir,should,be,a,directory,files,is,directory,dir,is,true
ElasticsearchAssertions -> public static void assertDirectoryExists(Path dir);1532353780;Check if a directory exists;public static void assertDirectoryExists(Path dir) {_        assertFileExists(dir)__        assertThat("file [" + dir + "] should be a directory.", Files.isDirectory(dir), is(true))__    };check,if,a,directory,exists;public,static,void,assert,directory,exists,path,dir,assert,file,exists,dir,assert,that,file,dir,should,be,a,directory,files,is,directory,dir,is,true
ElasticsearchAssertions -> public static void assertDirectoryExists(Path dir);1534362961;Check if a directory exists;public static void assertDirectoryExists(Path dir) {_        assertFileExists(dir)__        assertThat("file [" + dir + "] should be a directory.", Files.isDirectory(dir), is(true))__    };check,if,a,directory,exists;public,static,void,assert,directory,exists,path,dir,assert,file,exists,dir,assert,that,file,dir,should,be,a,directory,files,is,directory,dir,is,true
ElasticsearchAssertions -> public static void assertDirectoryExists(Path dir);1537806831;Check if a directory exists;public static void assertDirectoryExists(Path dir) {_        assertFileExists(dir)__        assertThat("file [" + dir + "] should be a directory.", Files.isDirectory(dir), is(true))__    };check,if,a,directory,exists;public,static,void,assert,directory,exists,path,dir,assert,file,exists,dir,assert,that,file,dir,should,be,a,directory,files,is,directory,dir,is,true
ElasticsearchAssertions -> public static void assertDirectoryExists(Path dir);1540912197;Check if a directory exists;public static void assertDirectoryExists(Path dir) {_        assertFileExists(dir)__        assertThat("file [" + dir + "] should be a directory.", Files.isDirectory(dir), is(true))__    };check,if,a,directory,exists;public,static,void,assert,directory,exists,path,dir,assert,file,exists,dir,assert,that,file,dir,should,be,a,directory,files,is,directory,dir,is,true
ElasticsearchAssertions -> public static void assertDirectoryExists(Path dir);1544035746;Check if a directory exists;public static void assertDirectoryExists(Path dir) {_        assertFileExists(dir)__        assertThat("file [" + dir + "] should be a directory.", Files.isDirectory(dir), is(true))__    };check,if,a,directory,exists;public,static,void,assert,directory,exists,path,dir,assert,file,exists,dir,assert,that,file,dir,should,be,a,directory,files,is,directory,dir,is,true
ElasticsearchAssertions -> public static void assertDirectoryExists(Path dir);1547030937;Check if a directory exists;public static void assertDirectoryExists(Path dir) {_        assertFileExists(dir)__        assertThat("file [" + dir + "] should be a directory.", Files.isDirectory(dir), is(true))__    };check,if,a,directory,exists;public,static,void,assert,directory,exists,path,dir,assert,file,exists,dir,assert,that,file,dir,should,be,a,directory,files,is,directory,dir,is,true
ElasticsearchAssertions -> public static void assertDirectoryExists(Path dir);1547108736;Check if a directory exists;public static void assertDirectoryExists(Path dir) {_        assertFileExists(dir)__        assertThat("file [" + dir + "] should be a directory.", Files.isDirectory(dir), is(true))__    };check,if,a,directory,exists;public,static,void,assert,directory,exists,path,dir,assert,file,exists,dir,assert,that,file,dir,should,be,a,directory,files,is,directory,dir,is,true
ElasticsearchAssertions -> public static void assertBlocked(final ActionRequestBuilder builder, @Nullable final Integer expectedBlockId);1547030937;Executes the request and fails if the request has not been blocked by a specific {@link ClusterBlock}.__@param builder the request builder_@param expectedBlockId the expected block id;public static void assertBlocked(final ActionRequestBuilder builder, @Nullable final Integer expectedBlockId) {_        try {_            builder.get()__            fail("Request executed with success but a ClusterBlockException was expected")__        } catch (ClusterBlockException e) {_            assertThat(e.blocks().size(), greaterThan(0))__            assertThat(e.status(), equalTo(RestStatus.FORBIDDEN))___            if (expectedBlockId != null) {_                boolean found = false__                for (ClusterBlock clusterBlock : e.blocks()) {_                    if (clusterBlock.id() == expectedBlockId) {_                        found = true__                        break__                    }_                }_                assertThat("Request should have been blocked by [" + expectedBlockId + "] instead of " + e.blocks(), found, equalTo(true))__            }_        }_    };executes,the,request,and,fails,if,the,request,has,not,been,blocked,by,a,specific,link,cluster,block,param,builder,the,request,builder,param,expected,block,id,the,expected,block,id;public,static,void,assert,blocked,final,action,request,builder,builder,nullable,final,integer,expected,block,id,try,builder,get,fail,request,executed,with,success,but,a,cluster,block,exception,was,expected,catch,cluster,block,exception,e,assert,that,e,blocks,size,greater,than,0,assert,that,e,status,equal,to,rest,status,forbidden,if,expected,block,id,null,boolean,found,false,for,cluster,block,cluster,block,e,blocks,if,cluster,block,id,expected,block,id,found,true,break,assert,that,request,should,have,been,blocked,by,expected,block,id,instead,of,e,blocks,found,equal,to,true
ElasticsearchAssertions -> public static void assertBlocked(final ActionRequestBuilder builder, @Nullable final Integer expectedBlockId);1547108736;Executes the request and fails if the request has not been blocked by a specific {@link ClusterBlock}.__@param builder the request builder_@param expectedBlockId the expected block id;public static void assertBlocked(final ActionRequestBuilder builder, @Nullable final Integer expectedBlockId) {_        try {_            builder.get()__            fail("Request executed with success but a ClusterBlockException was expected")__        } catch (ClusterBlockException e) {_            assertThat(e.blocks().size(), greaterThan(0))__            assertThat(e.status(), equalTo(RestStatus.FORBIDDEN))___            if (expectedBlockId != null) {_                boolean found = false__                for (ClusterBlock clusterBlock : e.blocks()) {_                    if (clusterBlock.id() == expectedBlockId) {_                        found = true__                        break__                    }_                }_                assertThat("Request should have been blocked by [" + expectedBlockId + "] instead of " + e.blocks(), found, equalTo(true))__            }_        }_    };executes,the,request,and,fails,if,the,request,has,not,been,blocked,by,a,specific,link,cluster,block,param,builder,the,request,builder,param,expected,block,id,the,expected,block,id;public,static,void,assert,blocked,final,action,request,builder,builder,nullable,final,integer,expected,block,id,try,builder,get,fail,request,executed,with,success,but,a,cluster,block,exception,was,expected,catch,cluster,block,exception,e,assert,that,e,blocks,size,greater,than,0,assert,that,e,status,equal,to,rest,status,forbidden,if,expected,block,id,null,boolean,found,false,for,cluster,block,cluster,block,e,blocks,if,cluster,block,id,expected,block,id,found,true,break,assert,that,request,should,have,been,blocked,by,expected,block,id,instead,of,e,blocks,found,equal,to,true
ElasticsearchAssertions -> public static void assertBlocked(final ActionRequestBuilder builder, @Nullable final Integer expectedBlockId);1551176390;Executes the request and fails if the request has not been blocked by a specific {@link ClusterBlock}.__@param builder the request builder_@param expectedBlockId the expected block id;public static void assertBlocked(final ActionRequestBuilder builder, @Nullable final Integer expectedBlockId) {_        try {_            builder.get()__            fail("Request executed with success but a ClusterBlockException was expected")__        } catch (ClusterBlockException e) {_            assertThat(e.blocks().size(), greaterThan(0))__            assertThat(e.status(), equalTo(RestStatus.FORBIDDEN))___            if (expectedBlockId != null) {_                boolean found = false__                for (ClusterBlock clusterBlock : e.blocks()) {_                    if (clusterBlock.id() == expectedBlockId) {_                        found = true__                        break__                    }_                }_                assertThat("Request should have been blocked by [" + expectedBlockId + "] instead of " + e.blocks(), found, equalTo(true))__            }_        }_    };executes,the,request,and,fails,if,the,request,has,not,been,blocked,by,a,specific,link,cluster,block,param,builder,the,request,builder,param,expected,block,id,the,expected,block,id;public,static,void,assert,blocked,final,action,request,builder,builder,nullable,final,integer,expected,block,id,try,builder,get,fail,request,executed,with,success,but,a,cluster,block,exception,was,expected,catch,cluster,block,exception,e,assert,that,e,blocks,size,greater,than,0,assert,that,e,status,equal,to,rest,status,forbidden,if,expected,block,id,null,boolean,found,false,for,cluster,block,cluster,block,e,blocks,if,cluster,block,id,expected,block,id,found,true,break,assert,that,request,should,have,been,blocked,by,expected,block,id,instead,of,e,blocks,found,equal,to,true
ElasticsearchAssertions -> public static void assertBlocked(BroadcastResponse replicatedBroadcastResponse);1524684173;Checks that all shard requests of a replicated broadcast request failed due to a cluster block__@param replicatedBroadcastResponse the response that should only contain failed shard responses;public static void assertBlocked(BroadcastResponse replicatedBroadcastResponse) {_        assertThat("all shard requests should have failed", replicatedBroadcastResponse.getFailedShards(), Matchers.equalTo(replicatedBroadcastResponse.getTotalShards()))__        for (DefaultShardOperationFailedException exception : replicatedBroadcastResponse.getShardFailures()) {_            ClusterBlockException clusterBlockException = (ClusterBlockException) ExceptionsHelper.unwrap(exception.getCause(), ClusterBlockException.class)__            assertNotNull("expected the cause of failure to be a ClusterBlockException but got " + exception.getCause().getMessage(), clusterBlockException)__            assertThat(clusterBlockException.blocks().size(), greaterThan(0))__            assertThat(clusterBlockException.status(), CoreMatchers.equalTo(RestStatus.FORBIDDEN))__        }_    };checks,that,all,shard,requests,of,a,replicated,broadcast,request,failed,due,to,a,cluster,block,param,replicated,broadcast,response,the,response,that,should,only,contain,failed,shard,responses;public,static,void,assert,blocked,broadcast,response,replicated,broadcast,response,assert,that,all,shard,requests,should,have,failed,replicated,broadcast,response,get,failed,shards,matchers,equal,to,replicated,broadcast,response,get,total,shards,for,default,shard,operation,failed,exception,exception,replicated,broadcast,response,get,shard,failures,cluster,block,exception,cluster,block,exception,cluster,block,exception,exceptions,helper,unwrap,exception,get,cause,cluster,block,exception,class,assert,not,null,expected,the,cause,of,failure,to,be,a,cluster,block,exception,but,got,exception,get,cause,get,message,cluster,block,exception,assert,that,cluster,block,exception,blocks,size,greater,than,0,assert,that,cluster,block,exception,status,core,matchers,equal,to,rest,status,forbidden
ElasticsearchAssertions -> public static void assertBlocked(BroadcastResponse replicatedBroadcastResponse);1527840262;Checks that all shard requests of a replicated broadcast request failed due to a cluster block__@param replicatedBroadcastResponse the response that should only contain failed shard responses;public static void assertBlocked(BroadcastResponse replicatedBroadcastResponse) {_        assertThat("all shard requests should have failed", replicatedBroadcastResponse.getFailedShards(), Matchers.equalTo(replicatedBroadcastResponse.getTotalShards()))__        for (DefaultShardOperationFailedException exception : replicatedBroadcastResponse.getShardFailures()) {_            ClusterBlockException clusterBlockException = (ClusterBlockException) ExceptionsHelper.unwrap(exception.getCause(), ClusterBlockException.class)__            assertNotNull("expected the cause of failure to be a ClusterBlockException but got " + exception.getCause().getMessage(), clusterBlockException)__            assertThat(clusterBlockException.blocks().size(), greaterThan(0))__            assertThat(clusterBlockException.status(), CoreMatchers.equalTo(RestStatus.FORBIDDEN))__        }_    };checks,that,all,shard,requests,of,a,replicated,broadcast,request,failed,due,to,a,cluster,block,param,replicated,broadcast,response,the,response,that,should,only,contain,failed,shard,responses;public,static,void,assert,blocked,broadcast,response,replicated,broadcast,response,assert,that,all,shard,requests,should,have,failed,replicated,broadcast,response,get,failed,shards,matchers,equal,to,replicated,broadcast,response,get,total,shards,for,default,shard,operation,failed,exception,exception,replicated,broadcast,response,get,shard,failures,cluster,block,exception,cluster,block,exception,cluster,block,exception,exceptions,helper,unwrap,exception,get,cause,cluster,block,exception,class,assert,not,null,expected,the,cause,of,failure,to,be,a,cluster,block,exception,but,got,exception,get,cause,get,message,cluster,block,exception,assert,that,cluster,block,exception,blocks,size,greater,than,0,assert,that,cluster,block,exception,status,core,matchers,equal,to,rest,status,forbidden
ElasticsearchAssertions -> public static void assertBlocked(BroadcastResponse replicatedBroadcastResponse);1528762805;Checks that all shard requests of a replicated broadcast request failed due to a cluster block__@param replicatedBroadcastResponse the response that should only contain failed shard responses;public static void assertBlocked(BroadcastResponse replicatedBroadcastResponse) {_        assertThat("all shard requests should have failed", replicatedBroadcastResponse.getFailedShards(), Matchers.equalTo(replicatedBroadcastResponse.getTotalShards()))__        for (DefaultShardOperationFailedException exception : replicatedBroadcastResponse.getShardFailures()) {_            ClusterBlockException clusterBlockException = (ClusterBlockException) ExceptionsHelper.unwrap(exception.getCause(), ClusterBlockException.class)__            assertNotNull("expected the cause of failure to be a ClusterBlockException but got " + exception.getCause().getMessage(), clusterBlockException)__            assertThat(clusterBlockException.blocks().size(), greaterThan(0))__            assertThat(clusterBlockException.status(), CoreMatchers.equalTo(RestStatus.FORBIDDEN))__        }_    };checks,that,all,shard,requests,of,a,replicated,broadcast,request,failed,due,to,a,cluster,block,param,replicated,broadcast,response,the,response,that,should,only,contain,failed,shard,responses;public,static,void,assert,blocked,broadcast,response,replicated,broadcast,response,assert,that,all,shard,requests,should,have,failed,replicated,broadcast,response,get,failed,shards,matchers,equal,to,replicated,broadcast,response,get,total,shards,for,default,shard,operation,failed,exception,exception,replicated,broadcast,response,get,shard,failures,cluster,block,exception,cluster,block,exception,cluster,block,exception,exceptions,helper,unwrap,exception,get,cause,cluster,block,exception,class,assert,not,null,expected,the,cause,of,failure,to,be,a,cluster,block,exception,but,got,exception,get,cause,get,message,cluster,block,exception,assert,that,cluster,block,exception,blocks,size,greater,than,0,assert,that,cluster,block,exception,status,core,matchers,equal,to,rest,status,forbidden
ElasticsearchAssertions -> public static void assertBlocked(BroadcastResponse replicatedBroadcastResponse);1532353780;Checks that all shard requests of a replicated broadcast request failed due to a cluster block__@param replicatedBroadcastResponse the response that should only contain failed shard responses;public static void assertBlocked(BroadcastResponse replicatedBroadcastResponse) {_        assertThat("all shard requests should have failed", replicatedBroadcastResponse.getFailedShards(), Matchers.equalTo(replicatedBroadcastResponse.getTotalShards()))__        for (DefaultShardOperationFailedException exception : replicatedBroadcastResponse.getShardFailures()) {_            ClusterBlockException clusterBlockException = (ClusterBlockException) ExceptionsHelper.unwrap(exception.getCause(), ClusterBlockException.class)__            assertNotNull("expected the cause of failure to be a ClusterBlockException but got " + exception.getCause().getMessage(), clusterBlockException)__            assertThat(clusterBlockException.blocks().size(), greaterThan(0))__            assertThat(clusterBlockException.status(), CoreMatchers.equalTo(RestStatus.FORBIDDEN))__        }_    };checks,that,all,shard,requests,of,a,replicated,broadcast,request,failed,due,to,a,cluster,block,param,replicated,broadcast,response,the,response,that,should,only,contain,failed,shard,responses;public,static,void,assert,blocked,broadcast,response,replicated,broadcast,response,assert,that,all,shard,requests,should,have,failed,replicated,broadcast,response,get,failed,shards,matchers,equal,to,replicated,broadcast,response,get,total,shards,for,default,shard,operation,failed,exception,exception,replicated,broadcast,response,get,shard,failures,cluster,block,exception,cluster,block,exception,cluster,block,exception,exceptions,helper,unwrap,exception,get,cause,cluster,block,exception,class,assert,not,null,expected,the,cause,of,failure,to,be,a,cluster,block,exception,but,got,exception,get,cause,get,message,cluster,block,exception,assert,that,cluster,block,exception,blocks,size,greater,than,0,assert,that,cluster,block,exception,status,core,matchers,equal,to,rest,status,forbidden
ElasticsearchAssertions -> public static void assertBlocked(BroadcastResponse replicatedBroadcastResponse);1534362961;Checks that all shard requests of a replicated broadcast request failed due to a cluster block__@param replicatedBroadcastResponse the response that should only contain failed shard responses;public static void assertBlocked(BroadcastResponse replicatedBroadcastResponse) {_        assertThat("all shard requests should have failed", replicatedBroadcastResponse.getFailedShards(), Matchers.equalTo(replicatedBroadcastResponse.getTotalShards()))__        for (DefaultShardOperationFailedException exception : replicatedBroadcastResponse.getShardFailures()) {_            ClusterBlockException clusterBlockException = (ClusterBlockException) ExceptionsHelper.unwrap(exception.getCause(), ClusterBlockException.class)__            assertNotNull("expected the cause of failure to be a ClusterBlockException but got " + exception.getCause().getMessage(), clusterBlockException)__            assertThat(clusterBlockException.blocks().size(), greaterThan(0))__            assertThat(clusterBlockException.status(), CoreMatchers.equalTo(RestStatus.FORBIDDEN))__        }_    };checks,that,all,shard,requests,of,a,replicated,broadcast,request,failed,due,to,a,cluster,block,param,replicated,broadcast,response,the,response,that,should,only,contain,failed,shard,responses;public,static,void,assert,blocked,broadcast,response,replicated,broadcast,response,assert,that,all,shard,requests,should,have,failed,replicated,broadcast,response,get,failed,shards,matchers,equal,to,replicated,broadcast,response,get,total,shards,for,default,shard,operation,failed,exception,exception,replicated,broadcast,response,get,shard,failures,cluster,block,exception,cluster,block,exception,cluster,block,exception,exceptions,helper,unwrap,exception,get,cause,cluster,block,exception,class,assert,not,null,expected,the,cause,of,failure,to,be,a,cluster,block,exception,but,got,exception,get,cause,get,message,cluster,block,exception,assert,that,cluster,block,exception,blocks,size,greater,than,0,assert,that,cluster,block,exception,status,core,matchers,equal,to,rest,status,forbidden
ElasticsearchAssertions -> public static void assertBlocked(BroadcastResponse replicatedBroadcastResponse);1537806831;Checks that all shard requests of a replicated broadcast request failed due to a cluster block__@param replicatedBroadcastResponse the response that should only contain failed shard responses;public static void assertBlocked(BroadcastResponse replicatedBroadcastResponse) {_        assertThat("all shard requests should have failed",_                replicatedBroadcastResponse.getFailedShards(), equalTo(replicatedBroadcastResponse.getTotalShards()))__        for (DefaultShardOperationFailedException exception : replicatedBroadcastResponse.getShardFailures()) {_            ClusterBlockException clusterBlockException =_                    (ClusterBlockException) ExceptionsHelper.unwrap(exception.getCause(), ClusterBlockException.class)__            assertNotNull("expected the cause of failure to be a ClusterBlockException but got " + exception.getCause().getMessage(),_                    clusterBlockException)__            assertThat(clusterBlockException.blocks().size(), greaterThan(0))__            assertThat(clusterBlockException.status(), CoreMatchers.equalTo(RestStatus.FORBIDDEN))__        }_    };checks,that,all,shard,requests,of,a,replicated,broadcast,request,failed,due,to,a,cluster,block,param,replicated,broadcast,response,the,response,that,should,only,contain,failed,shard,responses;public,static,void,assert,blocked,broadcast,response,replicated,broadcast,response,assert,that,all,shard,requests,should,have,failed,replicated,broadcast,response,get,failed,shards,equal,to,replicated,broadcast,response,get,total,shards,for,default,shard,operation,failed,exception,exception,replicated,broadcast,response,get,shard,failures,cluster,block,exception,cluster,block,exception,cluster,block,exception,exceptions,helper,unwrap,exception,get,cause,cluster,block,exception,class,assert,not,null,expected,the,cause,of,failure,to,be,a,cluster,block,exception,but,got,exception,get,cause,get,message,cluster,block,exception,assert,that,cluster,block,exception,blocks,size,greater,than,0,assert,that,cluster,block,exception,status,core,matchers,equal,to,rest,status,forbidden
ElasticsearchAssertions -> public static void assertBlocked(BroadcastResponse replicatedBroadcastResponse);1540912197;Checks that all shard requests of a replicated broadcast request failed due to a cluster block__@param replicatedBroadcastResponse the response that should only contain failed shard responses;public static void assertBlocked(BroadcastResponse replicatedBroadcastResponse) {_        assertThat("all shard requests should have failed",_                replicatedBroadcastResponse.getFailedShards(), equalTo(replicatedBroadcastResponse.getTotalShards()))__        for (DefaultShardOperationFailedException exception : replicatedBroadcastResponse.getShardFailures()) {_            ClusterBlockException clusterBlockException =_                    (ClusterBlockException) ExceptionsHelper.unwrap(exception.getCause(), ClusterBlockException.class)__            assertNotNull("expected the cause of failure to be a ClusterBlockException but got " + exception.getCause().getMessage(),_                    clusterBlockException)__            assertThat(clusterBlockException.blocks().size(), greaterThan(0))__            assertThat(clusterBlockException.status(), CoreMatchers.equalTo(RestStatus.FORBIDDEN))__        }_    };checks,that,all,shard,requests,of,a,replicated,broadcast,request,failed,due,to,a,cluster,block,param,replicated,broadcast,response,the,response,that,should,only,contain,failed,shard,responses;public,static,void,assert,blocked,broadcast,response,replicated,broadcast,response,assert,that,all,shard,requests,should,have,failed,replicated,broadcast,response,get,failed,shards,equal,to,replicated,broadcast,response,get,total,shards,for,default,shard,operation,failed,exception,exception,replicated,broadcast,response,get,shard,failures,cluster,block,exception,cluster,block,exception,cluster,block,exception,exceptions,helper,unwrap,exception,get,cause,cluster,block,exception,class,assert,not,null,expected,the,cause,of,failure,to,be,a,cluster,block,exception,but,got,exception,get,cause,get,message,cluster,block,exception,assert,that,cluster,block,exception,blocks,size,greater,than,0,assert,that,cluster,block,exception,status,core,matchers,equal,to,rest,status,forbidden
ElasticsearchAssertions -> public static void assertBlocked(BroadcastResponse replicatedBroadcastResponse);1544035746;Checks that all shard requests of a replicated broadcast request failed due to a cluster block__@param replicatedBroadcastResponse the response that should only contain failed shard responses;public static void assertBlocked(BroadcastResponse replicatedBroadcastResponse) {_        assertThat("all shard requests should have failed",_                replicatedBroadcastResponse.getFailedShards(), equalTo(replicatedBroadcastResponse.getTotalShards()))__        for (DefaultShardOperationFailedException exception : replicatedBroadcastResponse.getShardFailures()) {_            ClusterBlockException clusterBlockException =_                    (ClusterBlockException) ExceptionsHelper.unwrap(exception.getCause(), ClusterBlockException.class)__            assertNotNull("expected the cause of failure to be a ClusterBlockException but got " + exception.getCause().getMessage(),_                    clusterBlockException)__            assertThat(clusterBlockException.blocks().size(), greaterThan(0))__            assertThat(clusterBlockException.status(), CoreMatchers.equalTo(RestStatus.FORBIDDEN))__        }_    };checks,that,all,shard,requests,of,a,replicated,broadcast,request,failed,due,to,a,cluster,block,param,replicated,broadcast,response,the,response,that,should,only,contain,failed,shard,responses;public,static,void,assert,blocked,broadcast,response,replicated,broadcast,response,assert,that,all,shard,requests,should,have,failed,replicated,broadcast,response,get,failed,shards,equal,to,replicated,broadcast,response,get,total,shards,for,default,shard,operation,failed,exception,exception,replicated,broadcast,response,get,shard,failures,cluster,block,exception,cluster,block,exception,cluster,block,exception,exceptions,helper,unwrap,exception,get,cause,cluster,block,exception,class,assert,not,null,expected,the,cause,of,failure,to,be,a,cluster,block,exception,but,got,exception,get,cause,get,message,cluster,block,exception,assert,that,cluster,block,exception,blocks,size,greater,than,0,assert,that,cluster,block,exception,status,core,matchers,equal,to,rest,status,forbidden
ElasticsearchAssertions -> public static void assertBlocked(BroadcastResponse replicatedBroadcastResponse);1547030937;Checks that all shard requests of a replicated broadcast request failed due to a cluster block__@param replicatedBroadcastResponse the response that should only contain failed shard responses;public static void assertBlocked(BroadcastResponse replicatedBroadcastResponse) {_        assertThat("all shard requests should have failed",_                replicatedBroadcastResponse.getFailedShards(), equalTo(replicatedBroadcastResponse.getTotalShards()))__        for (DefaultShardOperationFailedException exception : replicatedBroadcastResponse.getShardFailures()) {_            ClusterBlockException clusterBlockException =_                    (ClusterBlockException) ExceptionsHelper.unwrap(exception.getCause(), ClusterBlockException.class)__            assertNotNull("expected the cause of failure to be a ClusterBlockException but got " + exception.getCause().getMessage(),_                    clusterBlockException)__            assertThat(clusterBlockException.blocks().size(), greaterThan(0))__            assertThat(clusterBlockException.status(), CoreMatchers.equalTo(RestStatus.FORBIDDEN))__        }_    };checks,that,all,shard,requests,of,a,replicated,broadcast,request,failed,due,to,a,cluster,block,param,replicated,broadcast,response,the,response,that,should,only,contain,failed,shard,responses;public,static,void,assert,blocked,broadcast,response,replicated,broadcast,response,assert,that,all,shard,requests,should,have,failed,replicated,broadcast,response,get,failed,shards,equal,to,replicated,broadcast,response,get,total,shards,for,default,shard,operation,failed,exception,exception,replicated,broadcast,response,get,shard,failures,cluster,block,exception,cluster,block,exception,cluster,block,exception,exceptions,helper,unwrap,exception,get,cause,cluster,block,exception,class,assert,not,null,expected,the,cause,of,failure,to,be,a,cluster,block,exception,but,got,exception,get,cause,get,message,cluster,block,exception,assert,that,cluster,block,exception,blocks,size,greater,than,0,assert,that,cluster,block,exception,status,core,matchers,equal,to,rest,status,forbidden
ElasticsearchAssertions -> public static void assertBlocked(BroadcastResponse replicatedBroadcastResponse);1547108736;Checks that all shard requests of a replicated broadcast request failed due to a cluster block__@param replicatedBroadcastResponse the response that should only contain failed shard responses;public static void assertBlocked(BroadcastResponse replicatedBroadcastResponse) {_        assertThat("all shard requests should have failed",_                replicatedBroadcastResponse.getFailedShards(), equalTo(replicatedBroadcastResponse.getTotalShards()))__        for (DefaultShardOperationFailedException exception : replicatedBroadcastResponse.getShardFailures()) {_            ClusterBlockException clusterBlockException =_                    (ClusterBlockException) ExceptionsHelper.unwrap(exception.getCause(), ClusterBlockException.class)__            assertNotNull("expected the cause of failure to be a ClusterBlockException but got " + exception.getCause().getMessage(),_                    clusterBlockException)__            assertThat(clusterBlockException.blocks().size(), greaterThan(0))__            assertThat(clusterBlockException.status(), CoreMatchers.equalTo(RestStatus.FORBIDDEN))__        }_    };checks,that,all,shard,requests,of,a,replicated,broadcast,request,failed,due,to,a,cluster,block,param,replicated,broadcast,response,the,response,that,should,only,contain,failed,shard,responses;public,static,void,assert,blocked,broadcast,response,replicated,broadcast,response,assert,that,all,shard,requests,should,have,failed,replicated,broadcast,response,get,failed,shards,equal,to,replicated,broadcast,response,get,total,shards,for,default,shard,operation,failed,exception,exception,replicated,broadcast,response,get,shard,failures,cluster,block,exception,cluster,block,exception,cluster,block,exception,exceptions,helper,unwrap,exception,get,cause,cluster,block,exception,class,assert,not,null,expected,the,cause,of,failure,to,be,a,cluster,block,exception,but,got,exception,get,cause,get,message,cluster,block,exception,assert,that,cluster,block,exception,blocks,size,greater,than,0,assert,that,cluster,block,exception,status,core,matchers,equal,to,rest,status,forbidden
ElasticsearchAssertions -> public static void assertBlocked(BroadcastResponse replicatedBroadcastResponse);1551176390;Checks that all shard requests of a replicated broadcast request failed due to a cluster block__@param replicatedBroadcastResponse the response that should only contain failed shard responses;public static void assertBlocked(BroadcastResponse replicatedBroadcastResponse) {_        assertThat("all shard requests should have failed",_                replicatedBroadcastResponse.getFailedShards(), equalTo(replicatedBroadcastResponse.getTotalShards()))__        for (DefaultShardOperationFailedException exception : replicatedBroadcastResponse.getShardFailures()) {_            ClusterBlockException clusterBlockException =_                    (ClusterBlockException) ExceptionsHelper.unwrap(exception.getCause(), ClusterBlockException.class)__            assertNotNull("expected the cause of failure to be a ClusterBlockException but got " + exception.getCause().getMessage(),_                    clusterBlockException)__            assertThat(clusterBlockException.blocks().size(), greaterThan(0))__            assertThat(clusterBlockException.status(), CoreMatchers.equalTo(RestStatus.FORBIDDEN))__        }_    };checks,that,all,shard,requests,of,a,replicated,broadcast,request,failed,due,to,a,cluster,block,param,replicated,broadcast,response,the,response,that,should,only,contain,failed,shard,responses;public,static,void,assert,blocked,broadcast,response,replicated,broadcast,response,assert,that,all,shard,requests,should,have,failed,replicated,broadcast,response,get,failed,shards,equal,to,replicated,broadcast,response,get,total,shards,for,default,shard,operation,failed,exception,exception,replicated,broadcast,response,get,shard,failures,cluster,block,exception,cluster,block,exception,cluster,block,exception,exceptions,helper,unwrap,exception,get,cause,cluster,block,exception,class,assert,not,null,expected,the,cause,of,failure,to,be,a,cluster,block,exception,but,got,exception,get,cause,get,message,cluster,block,exception,assert,that,cluster,block,exception,blocks,size,greater,than,0,assert,that,cluster,block,exception,status,core,matchers,equal,to,rest,status,forbidden
ElasticsearchAssertions -> public static void assertFileNotExists(Path file);1524684173;Check if a file does not exist;public static void assertFileNotExists(Path file) {_        assertThat("file/dir [" + file + "] should not exist.", Files.exists(file), is(false))__    };check,if,a,file,does,not,exist;public,static,void,assert,file,not,exists,path,file,assert,that,file,dir,file,should,not,exist,files,exists,file,is,false
ElasticsearchAssertions -> public static void assertFileNotExists(Path file);1527840262;Check if a file does not exist;public static void assertFileNotExists(Path file) {_        assertThat("file/dir [" + file + "] should not exist.", Files.exists(file), is(false))__    };check,if,a,file,does,not,exist;public,static,void,assert,file,not,exists,path,file,assert,that,file,dir,file,should,not,exist,files,exists,file,is,false
ElasticsearchAssertions -> public static void assertFileNotExists(Path file);1528762805;Check if a file does not exist;public static void assertFileNotExists(Path file) {_        assertThat("file/dir [" + file + "] should not exist.", Files.exists(file), is(false))__    };check,if,a,file,does,not,exist;public,static,void,assert,file,not,exists,path,file,assert,that,file,dir,file,should,not,exist,files,exists,file,is,false
ElasticsearchAssertions -> public static void assertFileNotExists(Path file);1532353780;Check if a file does not exist;public static void assertFileNotExists(Path file) {_        assertThat("file/dir [" + file + "] should not exist.", Files.exists(file), is(false))__    };check,if,a,file,does,not,exist;public,static,void,assert,file,not,exists,path,file,assert,that,file,dir,file,should,not,exist,files,exists,file,is,false
ElasticsearchAssertions -> public static void assertFileNotExists(Path file);1534362961;Check if a file does not exist;public static void assertFileNotExists(Path file) {_        assertThat("file/dir [" + file + "] should not exist.", Files.exists(file), is(false))__    };check,if,a,file,does,not,exist;public,static,void,assert,file,not,exists,path,file,assert,that,file,dir,file,should,not,exist,files,exists,file,is,false
ElasticsearchAssertions -> public static void assertFileNotExists(Path file);1537806831;Check if a file does not exist;public static void assertFileNotExists(Path file) {_        assertThat("file/dir [" + file + "] should not exist.", Files.exists(file), is(false))__    };check,if,a,file,does,not,exist;public,static,void,assert,file,not,exists,path,file,assert,that,file,dir,file,should,not,exist,files,exists,file,is,false
ElasticsearchAssertions -> public static void assertFileNotExists(Path file);1540912197;Check if a file does not exist;public static void assertFileNotExists(Path file) {_        assertThat("file/dir [" + file + "] should not exist.", Files.exists(file), is(false))__    };check,if,a,file,does,not,exist;public,static,void,assert,file,not,exists,path,file,assert,that,file,dir,file,should,not,exist,files,exists,file,is,false
ElasticsearchAssertions -> public static void assertFileNotExists(Path file);1544035746;Check if a file does not exist;public static void assertFileNotExists(Path file) {_        assertThat("file/dir [" + file + "] should not exist.", Files.exists(file), is(false))__    };check,if,a,file,does,not,exist;public,static,void,assert,file,not,exists,path,file,assert,that,file,dir,file,should,not,exist,files,exists,file,is,false
ElasticsearchAssertions -> public static void assertFileNotExists(Path file);1547030937;Check if a file does not exist;public static void assertFileNotExists(Path file) {_        assertThat("file/dir [" + file + "] should not exist.", Files.exists(file), is(false))__    };check,if,a,file,does,not,exist;public,static,void,assert,file,not,exists,path,file,assert,that,file,dir,file,should,not,exist,files,exists,file,is,false
ElasticsearchAssertions -> public static void assertFileNotExists(Path file);1547108736;Check if a file does not exist;public static void assertFileNotExists(Path file) {_        assertThat("file/dir [" + file + "] should not exist.", Files.exists(file), is(false))__    };check,if,a,file,does,not,exist;public,static,void,assert,file,not,exists,path,file,assert,that,file,dir,file,should,not,exist,files,exists,file,is,false
ElasticsearchAssertions -> public static void assertFileNotExists(Path file);1551176390;Check if a file does not exist;public static void assertFileNotExists(Path file) {_        assertThat("file/dir [" + file + "] should not exist.", Files.exists(file), is(false))__    };check,if,a,file,does,not,exist;public,static,void,assert,file,not,exists,path,file,assert,that,file,dir,file,should,not,exist,files,exists,file,is,false
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass,             @Nullable RestStatus status, @Nullable String extraInfo);1537806831;Run future.actionGet() and check that it throws an exception of the right type, optionally checking the exception's rest status__@param exceptionClass expected exception class_@param status         {@link org.elasticsearch.rest.RestStatus} to check for. Can be null to disable the check_@param extraInfo      extra information to add to the failure message. Can be null.;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass,_            @Nullable RestStatus status, @Nullable String extraInfo) {_        boolean fail = false__        extraInfo = extraInfo == null || extraInfo.isEmpty() ? "" : extraInfo + ": "__        extraInfo += "expected a " + exceptionClass + " exception to be thrown"___        if (status != null) {_            extraInfo += " with status [" + status + "]"__        }__        try {_            future.actionGet()__            fail = true___        } catch (ElasticsearchException esException) {_            assertThat(extraInfo, esException.unwrapCause(), instanceOf(exceptionClass))__            if (status != null) {_                assertThat(extraInfo, ExceptionsHelper.status(esException), equalTo(status))__            }_        } catch (Exception e) {_            assertThat(extraInfo, e, instanceOf(exceptionClass))__            if (status != null) {_                assertThat(extraInfo, ExceptionsHelper.status(e), equalTo(status))__            }_        }_        _        if (fail) {_            throw new AssertionError(extraInfo)__        }_    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,optionally,checking,the,exception,s,rest,status,param,exception,class,expected,exception,class,param,status,link,org,elasticsearch,rest,rest,status,to,check,for,can,be,null,to,disable,the,check,param,extra,info,extra,information,to,add,to,the,failure,message,can,be,null;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,nullable,rest,status,status,nullable,string,extra,info,boolean,fail,false,extra,info,extra,info,null,extra,info,is,empty,extra,info,extra,info,expected,a,exception,class,exception,to,be,thrown,if,status,null,extra,info,with,status,status,try,future,action,get,fail,true,catch,elasticsearch,exception,es,exception,assert,that,extra,info,es,exception,unwrap,cause,instance,of,exception,class,if,status,null,assert,that,extra,info,exceptions,helper,status,es,exception,equal,to,status,catch,exception,e,assert,that,extra,info,e,instance,of,exception,class,if,status,null,assert,that,extra,info,exceptions,helper,status,e,equal,to,status,if,fail,throw,new,assertion,error,extra,info
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass,             @Nullable RestStatus status, @Nullable String extraInfo);1540912197;Run future.actionGet() and check that it throws an exception of the right type, optionally checking the exception's rest status__@param exceptionClass expected exception class_@param status         {@link org.elasticsearch.rest.RestStatus} to check for. Can be null to disable the check_@param extraInfo      extra information to add to the failure message. Can be null.;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass,_            @Nullable RestStatus status, @Nullable String extraInfo) {_        boolean fail = false__        extraInfo = extraInfo == null || extraInfo.isEmpty() ? "" : extraInfo + ": "__        extraInfo += "expected a " + exceptionClass + " exception to be thrown"___        if (status != null) {_            extraInfo += " with status [" + status + "]"__        }__        try {_            future.actionGet()__            fail = true___        } catch (ElasticsearchException esException) {_            assertThat(extraInfo, esException.unwrapCause(), instanceOf(exceptionClass))__            if (status != null) {_                assertThat(extraInfo, ExceptionsHelper.status(esException), equalTo(status))__            }_        } catch (Exception e) {_            assertThat(extraInfo, e, instanceOf(exceptionClass))__            if (status != null) {_                assertThat(extraInfo, ExceptionsHelper.status(e), equalTo(status))__            }_        }_        _        if (fail) {_            throw new AssertionError(extraInfo)__        }_    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,optionally,checking,the,exception,s,rest,status,param,exception,class,expected,exception,class,param,status,link,org,elasticsearch,rest,rest,status,to,check,for,can,be,null,to,disable,the,check,param,extra,info,extra,information,to,add,to,the,failure,message,can,be,null;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,nullable,rest,status,status,nullable,string,extra,info,boolean,fail,false,extra,info,extra,info,null,extra,info,is,empty,extra,info,extra,info,expected,a,exception,class,exception,to,be,thrown,if,status,null,extra,info,with,status,status,try,future,action,get,fail,true,catch,elasticsearch,exception,es,exception,assert,that,extra,info,es,exception,unwrap,cause,instance,of,exception,class,if,status,null,assert,that,extra,info,exceptions,helper,status,es,exception,equal,to,status,catch,exception,e,assert,that,extra,info,e,instance,of,exception,class,if,status,null,assert,that,extra,info,exceptions,helper,status,e,equal,to,status,if,fail,throw,new,assertion,error,extra,info
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass,             @Nullable RestStatus status, @Nullable String extraInfo);1544035746;Run future.actionGet() and check that it throws an exception of the right type, optionally checking the exception's rest status__@param exceptionClass expected exception class_@param status         {@link org.elasticsearch.rest.RestStatus} to check for. Can be null to disable the check_@param extraInfo      extra information to add to the failure message. Can be null.;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass,_            @Nullable RestStatus status, @Nullable String extraInfo) {_        boolean fail = false__        extraInfo = extraInfo == null || extraInfo.isEmpty() ? "" : extraInfo + ": "__        extraInfo += "expected a " + exceptionClass + " exception to be thrown"___        if (status != null) {_            extraInfo += " with status [" + status + "]"__        }__        try {_            future.actionGet()__            fail = true___        } catch (ElasticsearchException esException) {_            assertThat(extraInfo, esException.unwrapCause(), instanceOf(exceptionClass))__            if (status != null) {_                assertThat(extraInfo, ExceptionsHelper.status(esException), equalTo(status))__            }_        } catch (Exception e) {_            assertThat(extraInfo, e, instanceOf(exceptionClass))__            if (status != null) {_                assertThat(extraInfo, ExceptionsHelper.status(e), equalTo(status))__            }_        }_        _        if (fail) {_            throw new AssertionError(extraInfo)__        }_    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,optionally,checking,the,exception,s,rest,status,param,exception,class,expected,exception,class,param,status,link,org,elasticsearch,rest,rest,status,to,check,for,can,be,null,to,disable,the,check,param,extra,info,extra,information,to,add,to,the,failure,message,can,be,null;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,nullable,rest,status,status,nullable,string,extra,info,boolean,fail,false,extra,info,extra,info,null,extra,info,is,empty,extra,info,extra,info,expected,a,exception,class,exception,to,be,thrown,if,status,null,extra,info,with,status,status,try,future,action,get,fail,true,catch,elasticsearch,exception,es,exception,assert,that,extra,info,es,exception,unwrap,cause,instance,of,exception,class,if,status,null,assert,that,extra,info,exceptions,helper,status,es,exception,equal,to,status,catch,exception,e,assert,that,extra,info,e,instance,of,exception,class,if,status,null,assert,that,extra,info,exceptions,helper,status,e,equal,to,status,if,fail,throw,new,assertion,error,extra,info
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass,             @Nullable RestStatus status, @Nullable String extraInfo);1547030937;Run future.actionGet() and check that it throws an exception of the right type, optionally checking the exception's rest status__@param exceptionClass expected exception class_@param status         {@link org.elasticsearch.rest.RestStatus} to check for. Can be null to disable the check_@param extraInfo      extra information to add to the failure message. Can be null.;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass,_            @Nullable RestStatus status, @Nullable String extraInfo) {_        boolean fail = false__        extraInfo = extraInfo == null || extraInfo.isEmpty() ? "" : extraInfo + ": "__        extraInfo += "expected a " + exceptionClass + " exception to be thrown"___        if (status != null) {_            extraInfo += " with status [" + status + "]"__        }__        try {_            future.actionGet()__            fail = true___        } catch (ElasticsearchException esException) {_            assertThat(extraInfo, esException.unwrapCause(), instanceOf(exceptionClass))__            if (status != null) {_                assertThat(extraInfo, ExceptionsHelper.status(esException), equalTo(status))__            }_        } catch (Exception e) {_            assertThat(extraInfo, e, instanceOf(exceptionClass))__            if (status != null) {_                assertThat(extraInfo, ExceptionsHelper.status(e), equalTo(status))__            }_        }_        _        if (fail) {_            throw new AssertionError(extraInfo)__        }_    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,optionally,checking,the,exception,s,rest,status,param,exception,class,expected,exception,class,param,status,link,org,elasticsearch,rest,rest,status,to,check,for,can,be,null,to,disable,the,check,param,extra,info,extra,information,to,add,to,the,failure,message,can,be,null;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,nullable,rest,status,status,nullable,string,extra,info,boolean,fail,false,extra,info,extra,info,null,extra,info,is,empty,extra,info,extra,info,expected,a,exception,class,exception,to,be,thrown,if,status,null,extra,info,with,status,status,try,future,action,get,fail,true,catch,elasticsearch,exception,es,exception,assert,that,extra,info,es,exception,unwrap,cause,instance,of,exception,class,if,status,null,assert,that,extra,info,exceptions,helper,status,es,exception,equal,to,status,catch,exception,e,assert,that,extra,info,e,instance,of,exception,class,if,status,null,assert,that,extra,info,exceptions,helper,status,e,equal,to,status,if,fail,throw,new,assertion,error,extra,info
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass,             @Nullable RestStatus status, @Nullable String extraInfo);1547108736;Run future.actionGet() and check that it throws an exception of the right type, optionally checking the exception's rest status__@param exceptionClass expected exception class_@param status         {@link org.elasticsearch.rest.RestStatus} to check for. Can be null to disable the check_@param extraInfo      extra information to add to the failure message. Can be null.;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass,_            @Nullable RestStatus status, @Nullable String extraInfo) {_        boolean fail = false__        extraInfo = extraInfo == null || extraInfo.isEmpty() ? "" : extraInfo + ": "__        extraInfo += "expected a " + exceptionClass + " exception to be thrown"___        if (status != null) {_            extraInfo += " with status [" + status + "]"__        }__        try {_            future.actionGet()__            fail = true___        } catch (ElasticsearchException esException) {_            assertThat(extraInfo, esException.unwrapCause(), instanceOf(exceptionClass))__            if (status != null) {_                assertThat(extraInfo, ExceptionsHelper.status(esException), equalTo(status))__            }_        } catch (Exception e) {_            assertThat(extraInfo, e, instanceOf(exceptionClass))__            if (status != null) {_                assertThat(extraInfo, ExceptionsHelper.status(e), equalTo(status))__            }_        }_        _        if (fail) {_            throw new AssertionError(extraInfo)__        }_    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,optionally,checking,the,exception,s,rest,status,param,exception,class,expected,exception,class,param,status,link,org,elasticsearch,rest,rest,status,to,check,for,can,be,null,to,disable,the,check,param,extra,info,extra,information,to,add,to,the,failure,message,can,be,null;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,nullable,rest,status,status,nullable,string,extra,info,boolean,fail,false,extra,info,extra,info,null,extra,info,is,empty,extra,info,extra,info,expected,a,exception,class,exception,to,be,thrown,if,status,null,extra,info,with,status,status,try,future,action,get,fail,true,catch,elasticsearch,exception,es,exception,assert,that,extra,info,es,exception,unwrap,cause,instance,of,exception,class,if,status,null,assert,that,extra,info,exceptions,helper,status,es,exception,equal,to,status,catch,exception,e,assert,that,extra,info,e,instance,of,exception,class,if,status,null,assert,that,extra,info,exceptions,helper,status,e,equal,to,status,if,fail,throw,new,assertion,error,extra,info
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass,             @Nullable RestStatus status, @Nullable String extraInfo);1551176390;Run future.actionGet() and check that it throws an exception of the right type, optionally checking the exception's rest status__@param exceptionClass expected exception class_@param status         {@link org.elasticsearch.rest.RestStatus} to check for. Can be null to disable the check_@param extraInfo      extra information to add to the failure message. Can be null.;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass,_            @Nullable RestStatus status, @Nullable String extraInfo) {_        boolean fail = false__        extraInfo = extraInfo == null || extraInfo.isEmpty() ? "" : extraInfo + ": "__        extraInfo += "expected a " + exceptionClass + " exception to be thrown"___        if (status != null) {_            extraInfo += " with status [" + status + "]"__        }__        try {_            future.actionGet()__            fail = true___        } catch (ElasticsearchException esException) {_            assertThat(extraInfo, esException.unwrapCause(), instanceOf(exceptionClass))__            if (status != null) {_                assertThat(extraInfo, ExceptionsHelper.status(esException), equalTo(status))__            }_        } catch (Exception e) {_            assertThat(extraInfo, e, instanceOf(exceptionClass))__            if (status != null) {_                assertThat(extraInfo, ExceptionsHelper.status(e), equalTo(status))__            }_        }_        _        if (fail) {_            throw new AssertionError(extraInfo)__        }_    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,optionally,checking,the,exception,s,rest,status,param,exception,class,expected,exception,class,param,status,link,org,elasticsearch,rest,rest,status,to,check,for,can,be,null,to,disable,the,check,param,extra,info,extra,information,to,add,to,the,failure,message,can,be,null;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,nullable,rest,status,status,nullable,string,extra,info,boolean,fail,false,extra,info,extra,info,null,extra,info,is,empty,extra,info,extra,info,expected,a,exception,class,exception,to,be,thrown,if,status,null,extra,info,with,status,status,try,future,action,get,fail,true,catch,elasticsearch,exception,es,exception,assert,that,extra,info,es,exception,unwrap,cause,instance,of,exception,class,if,status,null,assert,that,extra,info,exceptions,helper,status,es,exception,equal,to,status,catch,exception,e,assert,that,extra,info,e,instance,of,exception,class,if,status,null,assert,that,extra,info,exceptions,helper,status,e,equal,to,status,if,fail,throw,new,assertion,error,extra,info
ElasticsearchAssertions -> public static SearchResponse assertSearchResponse(SearchRequestBuilder request);1524684173;Applies basic assertions on the SearchResponse. This method checks if all shards were successful, if_any of the shards threw an exception and if the response is serializable.;public static SearchResponse assertSearchResponse(SearchRequestBuilder request) {_        return assertSearchResponse(request.get())__    };applies,basic,assertions,on,the,search,response,this,method,checks,if,all,shards,were,successful,if,any,of,the,shards,threw,an,exception,and,if,the,response,is,serializable;public,static,search,response,assert,search,response,search,request,builder,request,return,assert,search,response,request,get
ElasticsearchAssertions -> public static SearchResponse assertSearchResponse(SearchRequestBuilder request);1527840262;Applies basic assertions on the SearchResponse. This method checks if all shards were successful, if_any of the shards threw an exception and if the response is serializable.;public static SearchResponse assertSearchResponse(SearchRequestBuilder request) {_        return assertSearchResponse(request.get())__    };applies,basic,assertions,on,the,search,response,this,method,checks,if,all,shards,were,successful,if,any,of,the,shards,threw,an,exception,and,if,the,response,is,serializable;public,static,search,response,assert,search,response,search,request,builder,request,return,assert,search,response,request,get
ElasticsearchAssertions -> public static SearchResponse assertSearchResponse(SearchRequestBuilder request);1528762805;Applies basic assertions on the SearchResponse. This method checks if all shards were successful, if_any of the shards threw an exception and if the response is serializable.;public static SearchResponse assertSearchResponse(SearchRequestBuilder request) {_        return assertSearchResponse(request.get())__    };applies,basic,assertions,on,the,search,response,this,method,checks,if,all,shards,were,successful,if,any,of,the,shards,threw,an,exception,and,if,the,response,is,serializable;public,static,search,response,assert,search,response,search,request,builder,request,return,assert,search,response,request,get
ElasticsearchAssertions -> public static SearchResponse assertSearchResponse(SearchRequestBuilder request);1532353780;Applies basic assertions on the SearchResponse. This method checks if all shards were successful, if_any of the shards threw an exception and if the response is serializable.;public static SearchResponse assertSearchResponse(SearchRequestBuilder request) {_        return assertSearchResponse(request.get())__    };applies,basic,assertions,on,the,search,response,this,method,checks,if,all,shards,were,successful,if,any,of,the,shards,threw,an,exception,and,if,the,response,is,serializable;public,static,search,response,assert,search,response,search,request,builder,request,return,assert,search,response,request,get
ElasticsearchAssertions -> public static SearchResponse assertSearchResponse(SearchRequestBuilder request);1534362961;Applies basic assertions on the SearchResponse. This method checks if all shards were successful, if_any of the shards threw an exception and if the response is serializable.;public static SearchResponse assertSearchResponse(SearchRequestBuilder request) {_        return assertSearchResponse(request.get())__    };applies,basic,assertions,on,the,search,response,this,method,checks,if,all,shards,were,successful,if,any,of,the,shards,threw,an,exception,and,if,the,response,is,serializable;public,static,search,response,assert,search,response,search,request,builder,request,return,assert,search,response,request,get
ElasticsearchAssertions -> public static SearchResponse assertSearchResponse(SearchRequestBuilder request);1537806831;Applies basic assertions on the SearchResponse. This method checks if all shards were successful, if_any of the shards threw an exception and if the response is serializable.;public static SearchResponse assertSearchResponse(SearchRequestBuilder request) {_        return assertSearchResponse(request.get())__    };applies,basic,assertions,on,the,search,response,this,method,checks,if,all,shards,were,successful,if,any,of,the,shards,threw,an,exception,and,if,the,response,is,serializable;public,static,search,response,assert,search,response,search,request,builder,request,return,assert,search,response,request,get
ElasticsearchAssertions -> public static SearchResponse assertSearchResponse(SearchRequestBuilder request);1540912197;Applies basic assertions on the SearchResponse. This method checks if all shards were successful, if_any of the shards threw an exception and if the response is serializable.;public static SearchResponse assertSearchResponse(SearchRequestBuilder request) {_        return assertSearchResponse(request.get())__    };applies,basic,assertions,on,the,search,response,this,method,checks,if,all,shards,were,successful,if,any,of,the,shards,threw,an,exception,and,if,the,response,is,serializable;public,static,search,response,assert,search,response,search,request,builder,request,return,assert,search,response,request,get
ElasticsearchAssertions -> public static SearchResponse assertSearchResponse(SearchRequestBuilder request);1544035746;Applies basic assertions on the SearchResponse. This method checks if all shards were successful, if_any of the shards threw an exception and if the response is serializable.;public static SearchResponse assertSearchResponse(SearchRequestBuilder request) {_        return assertSearchResponse(request.get())__    };applies,basic,assertions,on,the,search,response,this,method,checks,if,all,shards,were,successful,if,any,of,the,shards,threw,an,exception,and,if,the,response,is,serializable;public,static,search,response,assert,search,response,search,request,builder,request,return,assert,search,response,request,get
ElasticsearchAssertions -> public static SearchResponse assertSearchResponse(SearchRequestBuilder request);1547030937;Applies basic assertions on the SearchResponse. This method checks if all shards were successful, if_any of the shards threw an exception and if the response is serializable.;public static SearchResponse assertSearchResponse(SearchRequestBuilder request) {_        return assertSearchResponse(request.get())__    };applies,basic,assertions,on,the,search,response,this,method,checks,if,all,shards,were,successful,if,any,of,the,shards,threw,an,exception,and,if,the,response,is,serializable;public,static,search,response,assert,search,response,search,request,builder,request,return,assert,search,response,request,get
ElasticsearchAssertions -> public static SearchResponse assertSearchResponse(SearchRequestBuilder request);1547108736;Applies basic assertions on the SearchResponse. This method checks if all shards were successful, if_any of the shards threw an exception and if the response is serializable.;public static SearchResponse assertSearchResponse(SearchRequestBuilder request) {_        return assertSearchResponse(request.get())__    };applies,basic,assertions,on,the,search,response,this,method,checks,if,all,shards,were,successful,if,any,of,the,shards,threw,an,exception,and,if,the,response,is,serializable;public,static,search,response,assert,search,response,search,request,builder,request,return,assert,search,response,request,get
ElasticsearchAssertions -> public static SearchResponse assertSearchResponse(SearchRequestBuilder request);1551176390;Applies basic assertions on the SearchResponse. This method checks if all shards were successful, if_any of the shards threw an exception and if the response is serializable.;public static SearchResponse assertSearchResponse(SearchRequestBuilder request) {_        return assertSearchResponse(request.get())__    };applies,basic,assertions,on,the,search,response,this,method,checks,if,all,shards,were,successful,if,any,of,the,shards,threw,an,exception,and,if,the,response,is,serializable;public,static,search,response,assert,search,response,search,request,builder,request,return,assert,search,response,request,get
ElasticsearchAssertions -> public static void assertBlocked(ActionRequestBuilder builder, ClusterBlock expectedBlock);1524684173;Executes the request and fails if the request has not been blocked by a specific {@link ClusterBlock}.__@param builder the request builder_@param expectedBlock the expected block;public static void assertBlocked(ActionRequestBuilder builder, ClusterBlock expectedBlock) {_        try {_            builder.get()__            fail("Request executed with success but a ClusterBlockException was expected")__        } catch (ClusterBlockException e) {_            assertThat(e.blocks().size(), greaterThan(0))__            assertThat(e.status(), equalTo(RestStatus.FORBIDDEN))___            if (expectedBlock != null) {_                boolean found = false__                for (ClusterBlock clusterBlock : e.blocks()) {_                    if (clusterBlock.id() == expectedBlock.id()) {_                        found = true__                        break__                    }_                }_                assertThat("Request should have been blocked by [" + expectedBlock + "] instead of " + e.blocks(), found, equalTo(true))__            }_        }_    };executes,the,request,and,fails,if,the,request,has,not,been,blocked,by,a,specific,link,cluster,block,param,builder,the,request,builder,param,expected,block,the,expected,block;public,static,void,assert,blocked,action,request,builder,builder,cluster,block,expected,block,try,builder,get,fail,request,executed,with,success,but,a,cluster,block,exception,was,expected,catch,cluster,block,exception,e,assert,that,e,blocks,size,greater,than,0,assert,that,e,status,equal,to,rest,status,forbidden,if,expected,block,null,boolean,found,false,for,cluster,block,cluster,block,e,blocks,if,cluster,block,id,expected,block,id,found,true,break,assert,that,request,should,have,been,blocked,by,expected,block,instead,of,e,blocks,found,equal,to,true
ElasticsearchAssertions -> public static void assertBlocked(ActionRequestBuilder builder, ClusterBlock expectedBlock);1527840262;Executes the request and fails if the request has not been blocked by a specific {@link ClusterBlock}.__@param builder the request builder_@param expectedBlock the expected block;public static void assertBlocked(ActionRequestBuilder builder, ClusterBlock expectedBlock) {_        try {_            builder.get()__            fail("Request executed with success but a ClusterBlockException was expected")__        } catch (ClusterBlockException e) {_            assertThat(e.blocks().size(), greaterThan(0))__            assertThat(e.status(), equalTo(RestStatus.FORBIDDEN))___            if (expectedBlock != null) {_                boolean found = false__                for (ClusterBlock clusterBlock : e.blocks()) {_                    if (clusterBlock.id() == expectedBlock.id()) {_                        found = true__                        break__                    }_                }_                assertThat("Request should have been blocked by [" + expectedBlock + "] instead of " + e.blocks(), found, equalTo(true))__            }_        }_    };executes,the,request,and,fails,if,the,request,has,not,been,blocked,by,a,specific,link,cluster,block,param,builder,the,request,builder,param,expected,block,the,expected,block;public,static,void,assert,blocked,action,request,builder,builder,cluster,block,expected,block,try,builder,get,fail,request,executed,with,success,but,a,cluster,block,exception,was,expected,catch,cluster,block,exception,e,assert,that,e,blocks,size,greater,than,0,assert,that,e,status,equal,to,rest,status,forbidden,if,expected,block,null,boolean,found,false,for,cluster,block,cluster,block,e,blocks,if,cluster,block,id,expected,block,id,found,true,break,assert,that,request,should,have,been,blocked,by,expected,block,instead,of,e,blocks,found,equal,to,true
ElasticsearchAssertions -> public static void assertBlocked(ActionRequestBuilder builder, ClusterBlock expectedBlock);1528762805;Executes the request and fails if the request has not been blocked by a specific {@link ClusterBlock}.__@param builder the request builder_@param expectedBlock the expected block;public static void assertBlocked(ActionRequestBuilder builder, ClusterBlock expectedBlock) {_        try {_            builder.get()__            fail("Request executed with success but a ClusterBlockException was expected")__        } catch (ClusterBlockException e) {_            assertThat(e.blocks().size(), greaterThan(0))__            assertThat(e.status(), equalTo(RestStatus.FORBIDDEN))___            if (expectedBlock != null) {_                boolean found = false__                for (ClusterBlock clusterBlock : e.blocks()) {_                    if (clusterBlock.id() == expectedBlock.id()) {_                        found = true__                        break__                    }_                }_                assertThat("Request should have been blocked by [" + expectedBlock + "] instead of " + e.blocks(), found, equalTo(true))__            }_        }_    };executes,the,request,and,fails,if,the,request,has,not,been,blocked,by,a,specific,link,cluster,block,param,builder,the,request,builder,param,expected,block,the,expected,block;public,static,void,assert,blocked,action,request,builder,builder,cluster,block,expected,block,try,builder,get,fail,request,executed,with,success,but,a,cluster,block,exception,was,expected,catch,cluster,block,exception,e,assert,that,e,blocks,size,greater,than,0,assert,that,e,status,equal,to,rest,status,forbidden,if,expected,block,null,boolean,found,false,for,cluster,block,cluster,block,e,blocks,if,cluster,block,id,expected,block,id,found,true,break,assert,that,request,should,have,been,blocked,by,expected,block,instead,of,e,blocks,found,equal,to,true
ElasticsearchAssertions -> public static void assertBlocked(ActionRequestBuilder builder, ClusterBlock expectedBlock);1532353780;Executes the request and fails if the request has not been blocked by a specific {@link ClusterBlock}.__@param builder the request builder_@param expectedBlock the expected block;public static void assertBlocked(ActionRequestBuilder builder, ClusterBlock expectedBlock) {_        try {_            builder.get()__            fail("Request executed with success but a ClusterBlockException was expected")__        } catch (ClusterBlockException e) {_            assertThat(e.blocks().size(), greaterThan(0))__            assertThat(e.status(), equalTo(RestStatus.FORBIDDEN))___            if (expectedBlock != null) {_                boolean found = false__                for (ClusterBlock clusterBlock : e.blocks()) {_                    if (clusterBlock.id() == expectedBlock.id()) {_                        found = true__                        break__                    }_                }_                assertThat("Request should have been blocked by [" + expectedBlock + "] instead of " + e.blocks(), found, equalTo(true))__            }_        }_    };executes,the,request,and,fails,if,the,request,has,not,been,blocked,by,a,specific,link,cluster,block,param,builder,the,request,builder,param,expected,block,the,expected,block;public,static,void,assert,blocked,action,request,builder,builder,cluster,block,expected,block,try,builder,get,fail,request,executed,with,success,but,a,cluster,block,exception,was,expected,catch,cluster,block,exception,e,assert,that,e,blocks,size,greater,than,0,assert,that,e,status,equal,to,rest,status,forbidden,if,expected,block,null,boolean,found,false,for,cluster,block,cluster,block,e,blocks,if,cluster,block,id,expected,block,id,found,true,break,assert,that,request,should,have,been,blocked,by,expected,block,instead,of,e,blocks,found,equal,to,true
ElasticsearchAssertions -> public static void assertBlocked(ActionRequestBuilder builder, ClusterBlock expectedBlock);1534362961;Executes the request and fails if the request has not been blocked by a specific {@link ClusterBlock}.__@param builder the request builder_@param expectedBlock the expected block;public static void assertBlocked(ActionRequestBuilder builder, ClusterBlock expectedBlock) {_        try {_            builder.get()__            fail("Request executed with success but a ClusterBlockException was expected")__        } catch (ClusterBlockException e) {_            assertThat(e.blocks().size(), greaterThan(0))__            assertThat(e.status(), equalTo(RestStatus.FORBIDDEN))___            if (expectedBlock != null) {_                boolean found = false__                for (ClusterBlock clusterBlock : e.blocks()) {_                    if (clusterBlock.id() == expectedBlock.id()) {_                        found = true__                        break__                    }_                }_                assertThat("Request should have been blocked by [" + expectedBlock + "] instead of " + e.blocks(), found, equalTo(true))__            }_        }_    };executes,the,request,and,fails,if,the,request,has,not,been,blocked,by,a,specific,link,cluster,block,param,builder,the,request,builder,param,expected,block,the,expected,block;public,static,void,assert,blocked,action,request,builder,builder,cluster,block,expected,block,try,builder,get,fail,request,executed,with,success,but,a,cluster,block,exception,was,expected,catch,cluster,block,exception,e,assert,that,e,blocks,size,greater,than,0,assert,that,e,status,equal,to,rest,status,forbidden,if,expected,block,null,boolean,found,false,for,cluster,block,cluster,block,e,blocks,if,cluster,block,id,expected,block,id,found,true,break,assert,that,request,should,have,been,blocked,by,expected,block,instead,of,e,blocks,found,equal,to,true
ElasticsearchAssertions -> public static void assertBlocked(ActionRequestBuilder builder, ClusterBlock expectedBlock);1537806831;Executes the request and fails if the request has not been blocked by a specific {@link ClusterBlock}.__@param builder the request builder_@param expectedBlock the expected block;public static void assertBlocked(ActionRequestBuilder builder, ClusterBlock expectedBlock) {_        try {_            builder.get()__            fail("Request executed with success but a ClusterBlockException was expected")__        } catch (ClusterBlockException e) {_            assertThat(e.blocks().size(), greaterThan(0))__            assertThat(e.status(), equalTo(RestStatus.FORBIDDEN))___            if (expectedBlock != null) {_                boolean found = false__                for (ClusterBlock clusterBlock : e.blocks()) {_                    if (clusterBlock.id() == expectedBlock.id()) {_                        found = true__                        break__                    }_                }_                assertThat("Request should have been blocked by [" + expectedBlock + "] instead of " + e.blocks(), found, equalTo(true))__            }_        }_    };executes,the,request,and,fails,if,the,request,has,not,been,blocked,by,a,specific,link,cluster,block,param,builder,the,request,builder,param,expected,block,the,expected,block;public,static,void,assert,blocked,action,request,builder,builder,cluster,block,expected,block,try,builder,get,fail,request,executed,with,success,but,a,cluster,block,exception,was,expected,catch,cluster,block,exception,e,assert,that,e,blocks,size,greater,than,0,assert,that,e,status,equal,to,rest,status,forbidden,if,expected,block,null,boolean,found,false,for,cluster,block,cluster,block,e,blocks,if,cluster,block,id,expected,block,id,found,true,break,assert,that,request,should,have,been,blocked,by,expected,block,instead,of,e,blocks,found,equal,to,true
ElasticsearchAssertions -> public static void assertBlocked(ActionRequestBuilder builder, ClusterBlock expectedBlock);1540912197;Executes the request and fails if the request has not been blocked by a specific {@link ClusterBlock}.__@param builder the request builder_@param expectedBlock the expected block;public static void assertBlocked(ActionRequestBuilder builder, ClusterBlock expectedBlock) {_        try {_            builder.get()__            fail("Request executed with success but a ClusterBlockException was expected")__        } catch (ClusterBlockException e) {_            assertThat(e.blocks().size(), greaterThan(0))__            assertThat(e.status(), equalTo(RestStatus.FORBIDDEN))___            if (expectedBlock != null) {_                boolean found = false__                for (ClusterBlock clusterBlock : e.blocks()) {_                    if (clusterBlock.id() == expectedBlock.id()) {_                        found = true__                        break__                    }_                }_                assertThat("Request should have been blocked by [" + expectedBlock + "] instead of " + e.blocks(), found, equalTo(true))__            }_        }_    };executes,the,request,and,fails,if,the,request,has,not,been,blocked,by,a,specific,link,cluster,block,param,builder,the,request,builder,param,expected,block,the,expected,block;public,static,void,assert,blocked,action,request,builder,builder,cluster,block,expected,block,try,builder,get,fail,request,executed,with,success,but,a,cluster,block,exception,was,expected,catch,cluster,block,exception,e,assert,that,e,blocks,size,greater,than,0,assert,that,e,status,equal,to,rest,status,forbidden,if,expected,block,null,boolean,found,false,for,cluster,block,cluster,block,e,blocks,if,cluster,block,id,expected,block,id,found,true,break,assert,that,request,should,have,been,blocked,by,expected,block,instead,of,e,blocks,found,equal,to,true
ElasticsearchAssertions -> public static void assertBlocked(ActionRequestBuilder builder, ClusterBlock expectedBlock);1544035746;Executes the request and fails if the request has not been blocked by a specific {@link ClusterBlock}.__@param builder the request builder_@param expectedBlock the expected block;public static void assertBlocked(ActionRequestBuilder builder, ClusterBlock expectedBlock) {_        try {_            builder.get()__            fail("Request executed with success but a ClusterBlockException was expected")__        } catch (ClusterBlockException e) {_            assertThat(e.blocks().size(), greaterThan(0))__            assertThat(e.status(), equalTo(RestStatus.FORBIDDEN))___            if (expectedBlock != null) {_                boolean found = false__                for (ClusterBlock clusterBlock : e.blocks()) {_                    if (clusterBlock.id() == expectedBlock.id()) {_                        found = true__                        break__                    }_                }_                assertThat("Request should have been blocked by [" + expectedBlock + "] instead of " + e.blocks(), found, equalTo(true))__            }_        }_    };executes,the,request,and,fails,if,the,request,has,not,been,blocked,by,a,specific,link,cluster,block,param,builder,the,request,builder,param,expected,block,the,expected,block;public,static,void,assert,blocked,action,request,builder,builder,cluster,block,expected,block,try,builder,get,fail,request,executed,with,success,but,a,cluster,block,exception,was,expected,catch,cluster,block,exception,e,assert,that,e,blocks,size,greater,than,0,assert,that,e,status,equal,to,rest,status,forbidden,if,expected,block,null,boolean,found,false,for,cluster,block,cluster,block,e,blocks,if,cluster,block,id,expected,block,id,found,true,break,assert,that,request,should,have,been,blocked,by,expected,block,instead,of,e,blocks,found,equal,to,true
ElasticsearchAssertions -> public static SearchResponse assertSearchResponse(SearchResponse response);1524684173;Applies basic assertions on the SearchResponse. This method checks if all shards were successful, if_any of the shards threw an exception and if the response is serializable.;public static SearchResponse assertSearchResponse(SearchResponse response) {_        assertNoFailures(response)__        return response__    };applies,basic,assertions,on,the,search,response,this,method,checks,if,all,shards,were,successful,if,any,of,the,shards,threw,an,exception,and,if,the,response,is,serializable;public,static,search,response,assert,search,response,search,response,response,assert,no,failures,response,return,response
ElasticsearchAssertions -> public static SearchResponse assertSearchResponse(SearchResponse response);1527840262;Applies basic assertions on the SearchResponse. This method checks if all shards were successful, if_any of the shards threw an exception and if the response is serializable.;public static SearchResponse assertSearchResponse(SearchResponse response) {_        assertNoFailures(response)__        return response__    };applies,basic,assertions,on,the,search,response,this,method,checks,if,all,shards,were,successful,if,any,of,the,shards,threw,an,exception,and,if,the,response,is,serializable;public,static,search,response,assert,search,response,search,response,response,assert,no,failures,response,return,response
ElasticsearchAssertions -> public static SearchResponse assertSearchResponse(SearchResponse response);1528762805;Applies basic assertions on the SearchResponse. This method checks if all shards were successful, if_any of the shards threw an exception and if the response is serializable.;public static SearchResponse assertSearchResponse(SearchResponse response) {_        assertNoFailures(response)__        return response__    };applies,basic,assertions,on,the,search,response,this,method,checks,if,all,shards,were,successful,if,any,of,the,shards,threw,an,exception,and,if,the,response,is,serializable;public,static,search,response,assert,search,response,search,response,response,assert,no,failures,response,return,response
ElasticsearchAssertions -> public static SearchResponse assertSearchResponse(SearchResponse response);1532353780;Applies basic assertions on the SearchResponse. This method checks if all shards were successful, if_any of the shards threw an exception and if the response is serializable.;public static SearchResponse assertSearchResponse(SearchResponse response) {_        assertNoFailures(response)__        return response__    };applies,basic,assertions,on,the,search,response,this,method,checks,if,all,shards,were,successful,if,any,of,the,shards,threw,an,exception,and,if,the,response,is,serializable;public,static,search,response,assert,search,response,search,response,response,assert,no,failures,response,return,response
ElasticsearchAssertions -> public static SearchResponse assertSearchResponse(SearchResponse response);1534362961;Applies basic assertions on the SearchResponse. This method checks if all shards were successful, if_any of the shards threw an exception and if the response is serializable.;public static SearchResponse assertSearchResponse(SearchResponse response) {_        assertNoFailures(response)__        return response__    };applies,basic,assertions,on,the,search,response,this,method,checks,if,all,shards,were,successful,if,any,of,the,shards,threw,an,exception,and,if,the,response,is,serializable;public,static,search,response,assert,search,response,search,response,response,assert,no,failures,response,return,response
ElasticsearchAssertions -> public static SearchResponse assertSearchResponse(SearchResponse response);1537806831;Applies basic assertions on the SearchResponse. This method checks if all shards were successful, if_any of the shards threw an exception and if the response is serializable.;public static SearchResponse assertSearchResponse(SearchResponse response) {_        assertNoFailures(response)__        return response__    };applies,basic,assertions,on,the,search,response,this,method,checks,if,all,shards,were,successful,if,any,of,the,shards,threw,an,exception,and,if,the,response,is,serializable;public,static,search,response,assert,search,response,search,response,response,assert,no,failures,response,return,response
ElasticsearchAssertions -> public static SearchResponse assertSearchResponse(SearchResponse response);1540912197;Applies basic assertions on the SearchResponse. This method checks if all shards were successful, if_any of the shards threw an exception and if the response is serializable.;public static SearchResponse assertSearchResponse(SearchResponse response) {_        assertNoFailures(response)__        return response__    };applies,basic,assertions,on,the,search,response,this,method,checks,if,all,shards,were,successful,if,any,of,the,shards,threw,an,exception,and,if,the,response,is,serializable;public,static,search,response,assert,search,response,search,response,response,assert,no,failures,response,return,response
ElasticsearchAssertions -> public static SearchResponse assertSearchResponse(SearchResponse response);1544035746;Applies basic assertions on the SearchResponse. This method checks if all shards were successful, if_any of the shards threw an exception and if the response is serializable.;public static SearchResponse assertSearchResponse(SearchResponse response) {_        assertNoFailures(response)__        return response__    };applies,basic,assertions,on,the,search,response,this,method,checks,if,all,shards,were,successful,if,any,of,the,shards,threw,an,exception,and,if,the,response,is,serializable;public,static,search,response,assert,search,response,search,response,response,assert,no,failures,response,return,response
ElasticsearchAssertions -> public static SearchResponse assertSearchResponse(SearchResponse response);1547030937;Applies basic assertions on the SearchResponse. This method checks if all shards were successful, if_any of the shards threw an exception and if the response is serializable.;public static SearchResponse assertSearchResponse(SearchResponse response) {_        assertNoFailures(response)__        return response__    };applies,basic,assertions,on,the,search,response,this,method,checks,if,all,shards,were,successful,if,any,of,the,shards,threw,an,exception,and,if,the,response,is,serializable;public,static,search,response,assert,search,response,search,response,response,assert,no,failures,response,return,response
ElasticsearchAssertions -> public static SearchResponse assertSearchResponse(SearchResponse response);1547108736;Applies basic assertions on the SearchResponse. This method checks if all shards were successful, if_any of the shards threw an exception and if the response is serializable.;public static SearchResponse assertSearchResponse(SearchResponse response) {_        assertNoFailures(response)__        return response__    };applies,basic,assertions,on,the,search,response,this,method,checks,if,all,shards,were,successful,if,any,of,the,shards,threw,an,exception,and,if,the,response,is,serializable;public,static,search,response,assert,search,response,search,response,response,assert,no,failures,response,return,response
ElasticsearchAssertions -> public static SearchResponse assertSearchResponse(SearchResponse response);1551176390;Applies basic assertions on the SearchResponse. This method checks if all shards were successful, if_any of the shards threw an exception and if the response is serializable.;public static SearchResponse assertSearchResponse(SearchResponse response) {_        assertNoFailures(response)__        return response__    };applies,basic,assertions,on,the,search,response,this,method,checks,if,all,shards,were,successful,if,any,of,the,shards,threw,an,exception,and,if,the,response,is,serializable;public,static,search,response,assert,search,response,search,response,response,assert,no,failures,response,return,response
ElasticsearchAssertions -> public static void assertBlocked(final ActionRequestBuilder builder, @Nullable final ClusterBlock expectedBlock);1547030937;Executes the request and fails if the request has not been blocked by a specific {@link ClusterBlock}.__@param builder the request builder_@param expectedBlock the expected block;public static void assertBlocked(final ActionRequestBuilder builder, @Nullable final ClusterBlock expectedBlock) {_        assertBlocked(builder, expectedBlock != null ? expectedBlock.id() : null)__    };executes,the,request,and,fails,if,the,request,has,not,been,blocked,by,a,specific,link,cluster,block,param,builder,the,request,builder,param,expected,block,the,expected,block;public,static,void,assert,blocked,final,action,request,builder,builder,nullable,final,cluster,block,expected,block,assert,blocked,builder,expected,block,null,expected,block,id,null
ElasticsearchAssertions -> public static void assertBlocked(final ActionRequestBuilder builder, @Nullable final ClusterBlock expectedBlock);1547108736;Executes the request and fails if the request has not been blocked by a specific {@link ClusterBlock}.__@param builder the request builder_@param expectedBlock the expected block;public static void assertBlocked(final ActionRequestBuilder builder, @Nullable final ClusterBlock expectedBlock) {_        assertBlocked(builder, expectedBlock != null ? expectedBlock.id() : null)__    };executes,the,request,and,fails,if,the,request,has,not,been,blocked,by,a,specific,link,cluster,block,param,builder,the,request,builder,param,expected,block,the,expected,block;public,static,void,assert,blocked,final,action,request,builder,builder,nullable,final,cluster,block,expected,block,assert,blocked,builder,expected,block,null,expected,block,id,null
ElasticsearchAssertions -> public static void assertBlocked(final ActionRequestBuilder builder, @Nullable final ClusterBlock expectedBlock);1551176390;Executes the request and fails if the request has not been blocked by a specific {@link ClusterBlock}.__@param builder the request builder_@param expectedBlock the expected block;public static void assertBlocked(final ActionRequestBuilder builder, @Nullable final ClusterBlock expectedBlock) {_        assertBlocked(builder, expectedBlock != null ? expectedBlock.id() : null)__    };executes,the,request,and,fails,if,the,request,has,not,been,blocked,by,a,specific,link,cluster,block,param,builder,the,request,builder,param,expected,block,the,expected,block;public,static,void,assert,blocked,final,action,request,builder,builder,nullable,final,cluster,block,expected,block,assert,blocked,builder,expected,block,null,expected,block,id,null
ElasticsearchAssertions -> public static void assertAcked(CreateIndexResponse response);1524684173;Assert that an index creation was fully acknowledged, meaning that both the index creation cluster_state update was successful and that the requisite number of shard copies were started before returning.;public static void assertAcked(CreateIndexResponse response) {_        assertThat(response.getClass().getSimpleName() + " failed - not acked", response.isAcknowledged(), equalTo(true))__        assertTrue(response.getClass().getSimpleName() + " failed - index creation acked but not all shards were started",_            response.isShardsAcknowledged())__    };assert,that,an,index,creation,was,fully,acknowledged,meaning,that,both,the,index,creation,cluster,state,update,was,successful,and,that,the,requisite,number,of,shard,copies,were,started,before,returning;public,static,void,assert,acked,create,index,response,response,assert,that,response,get,class,get,simple,name,failed,not,acked,response,is,acknowledged,equal,to,true,assert,true,response,get,class,get,simple,name,failed,index,creation,acked,but,not,all,shards,were,started,response,is,shards,acknowledged
ElasticsearchAssertions -> public static void assertAcked(CreateIndexResponse response);1527840262;Assert that an index creation was fully acknowledged, meaning that both the index creation cluster_state update was successful and that the requisite number of shard copies were started before returning.;public static void assertAcked(CreateIndexResponse response) {_        assertThat(response.getClass().getSimpleName() + " failed - not acked", response.isAcknowledged(), equalTo(true))__        assertTrue(response.getClass().getSimpleName() + " failed - index creation acked but not all shards were started",_            response.isShardsAcknowledged())__    };assert,that,an,index,creation,was,fully,acknowledged,meaning,that,both,the,index,creation,cluster,state,update,was,successful,and,that,the,requisite,number,of,shard,copies,were,started,before,returning;public,static,void,assert,acked,create,index,response,response,assert,that,response,get,class,get,simple,name,failed,not,acked,response,is,acknowledged,equal,to,true,assert,true,response,get,class,get,simple,name,failed,index,creation,acked,but,not,all,shards,were,started,response,is,shards,acknowledged
ElasticsearchAssertions -> public static void assertAcked(CreateIndexResponse response);1528762805;Assert that an index creation was fully acknowledged, meaning that both the index creation cluster_state update was successful and that the requisite number of shard copies were started before returning.;public static void assertAcked(CreateIndexResponse response) {_        assertThat(response.getClass().getSimpleName() + " failed - not acked", response.isAcknowledged(), equalTo(true))__        assertTrue(response.getClass().getSimpleName() + " failed - index creation acked but not all shards were started",_            response.isShardsAcknowledged())__    };assert,that,an,index,creation,was,fully,acknowledged,meaning,that,both,the,index,creation,cluster,state,update,was,successful,and,that,the,requisite,number,of,shard,copies,were,started,before,returning;public,static,void,assert,acked,create,index,response,response,assert,that,response,get,class,get,simple,name,failed,not,acked,response,is,acknowledged,equal,to,true,assert,true,response,get,class,get,simple,name,failed,index,creation,acked,but,not,all,shards,were,started,response,is,shards,acknowledged
ElasticsearchAssertions -> public static void assertAcked(CreateIndexResponse response);1532353780;Assert that an index creation was fully acknowledged, meaning that both the index creation cluster_state update was successful and that the requisite number of shard copies were started before returning.;public static void assertAcked(CreateIndexResponse response) {_        assertThat(response.getClass().getSimpleName() + " failed - not acked", response.isAcknowledged(), equalTo(true))__        assertTrue(response.getClass().getSimpleName() + " failed - index creation acked but not all shards were started",_            response.isShardsAcknowledged())__    };assert,that,an,index,creation,was,fully,acknowledged,meaning,that,both,the,index,creation,cluster,state,update,was,successful,and,that,the,requisite,number,of,shard,copies,were,started,before,returning;public,static,void,assert,acked,create,index,response,response,assert,that,response,get,class,get,simple,name,failed,not,acked,response,is,acknowledged,equal,to,true,assert,true,response,get,class,get,simple,name,failed,index,creation,acked,but,not,all,shards,were,started,response,is,shards,acknowledged
ElasticsearchAssertions -> public static void assertAcked(CreateIndexResponse response);1534362961;Assert that an index creation was fully acknowledged, meaning that both the index creation cluster_state update was successful and that the requisite number of shard copies were started before returning.;public static void assertAcked(CreateIndexResponse response) {_        assertThat(response.getClass().getSimpleName() + " failed - not acked", response.isAcknowledged(), equalTo(true))__        assertTrue(response.getClass().getSimpleName() + " failed - index creation acked but not all shards were started",_            response.isShardsAcknowledged())__    };assert,that,an,index,creation,was,fully,acknowledged,meaning,that,both,the,index,creation,cluster,state,update,was,successful,and,that,the,requisite,number,of,shard,copies,were,started,before,returning;public,static,void,assert,acked,create,index,response,response,assert,that,response,get,class,get,simple,name,failed,not,acked,response,is,acknowledged,equal,to,true,assert,true,response,get,class,get,simple,name,failed,index,creation,acked,but,not,all,shards,were,started,response,is,shards,acknowledged
ElasticsearchAssertions -> public static void assertAcked(CreateIndexResponse response);1537806831;Assert that an index creation was fully acknowledged, meaning that both the index creation cluster_state update was successful and that the requisite number of shard copies were started before returning.;public static void assertAcked(CreateIndexResponse response) {_        assertThat(response.getClass().getSimpleName() + " failed - not acked", response.isAcknowledged(), equalTo(true))__        assertTrue(response.getClass().getSimpleName() + " failed - index creation acked but not all shards were started",_            response.isShardsAcknowledged())__    };assert,that,an,index,creation,was,fully,acknowledged,meaning,that,both,the,index,creation,cluster,state,update,was,successful,and,that,the,requisite,number,of,shard,copies,were,started,before,returning;public,static,void,assert,acked,create,index,response,response,assert,that,response,get,class,get,simple,name,failed,not,acked,response,is,acknowledged,equal,to,true,assert,true,response,get,class,get,simple,name,failed,index,creation,acked,but,not,all,shards,were,started,response,is,shards,acknowledged
ElasticsearchAssertions -> public static void assertAcked(CreateIndexResponse response);1540912197;Assert that an index creation was fully acknowledged, meaning that both the index creation cluster_state update was successful and that the requisite number of shard copies were started before returning.;public static void assertAcked(CreateIndexResponse response) {_        assertThat(response.getClass().getSimpleName() + " failed - not acked", response.isAcknowledged(), equalTo(true))__        assertTrue(response.getClass().getSimpleName() + " failed - index creation acked but not all shards were started",_            response.isShardsAcknowledged())__    };assert,that,an,index,creation,was,fully,acknowledged,meaning,that,both,the,index,creation,cluster,state,update,was,successful,and,that,the,requisite,number,of,shard,copies,were,started,before,returning;public,static,void,assert,acked,create,index,response,response,assert,that,response,get,class,get,simple,name,failed,not,acked,response,is,acknowledged,equal,to,true,assert,true,response,get,class,get,simple,name,failed,index,creation,acked,but,not,all,shards,were,started,response,is,shards,acknowledged
ElasticsearchAssertions -> public static void assertAcked(CreateIndexResponse response);1544035746;Assert that an index creation was fully acknowledged, meaning that both the index creation cluster_state update was successful and that the requisite number of shard copies were started before returning.;public static void assertAcked(CreateIndexResponse response) {_        assertThat(response.getClass().getSimpleName() + " failed - not acked", response.isAcknowledged(), equalTo(true))__        assertTrue(response.getClass().getSimpleName() + " failed - index creation acked but not all shards were started",_            response.isShardsAcknowledged())__    };assert,that,an,index,creation,was,fully,acknowledged,meaning,that,both,the,index,creation,cluster,state,update,was,successful,and,that,the,requisite,number,of,shard,copies,were,started,before,returning;public,static,void,assert,acked,create,index,response,response,assert,that,response,get,class,get,simple,name,failed,not,acked,response,is,acknowledged,equal,to,true,assert,true,response,get,class,get,simple,name,failed,index,creation,acked,but,not,all,shards,were,started,response,is,shards,acknowledged
ElasticsearchAssertions -> public static void assertAcked(CreateIndexResponse response);1547030937;Assert that an index creation was fully acknowledged, meaning that both the index creation cluster_state update was successful and that the requisite number of shard copies were started before returning.;public static void assertAcked(CreateIndexResponse response) {_        assertThat(response.getClass().getSimpleName() + " failed - not acked", response.isAcknowledged(), equalTo(true))__        assertTrue(response.getClass().getSimpleName() + " failed - index creation acked but not all shards were started",_            response.isShardsAcknowledged())__    };assert,that,an,index,creation,was,fully,acknowledged,meaning,that,both,the,index,creation,cluster,state,update,was,successful,and,that,the,requisite,number,of,shard,copies,were,started,before,returning;public,static,void,assert,acked,create,index,response,response,assert,that,response,get,class,get,simple,name,failed,not,acked,response,is,acknowledged,equal,to,true,assert,true,response,get,class,get,simple,name,failed,index,creation,acked,but,not,all,shards,were,started,response,is,shards,acknowledged
ElasticsearchAssertions -> public static void assertAcked(CreateIndexResponse response);1547108736;Assert that an index creation was fully acknowledged, meaning that both the index creation cluster_state update was successful and that the requisite number of shard copies were started before returning.;public static void assertAcked(CreateIndexResponse response) {_        assertThat(response.getClass().getSimpleName() + " failed - not acked", response.isAcknowledged(), equalTo(true))__        assertTrue(response.getClass().getSimpleName() + " failed - index creation acked but not all shards were started",_            response.isShardsAcknowledged())__    };assert,that,an,index,creation,was,fully,acknowledged,meaning,that,both,the,index,creation,cluster,state,update,was,successful,and,that,the,requisite,number,of,shard,copies,were,started,before,returning;public,static,void,assert,acked,create,index,response,response,assert,that,response,get,class,get,simple,name,failed,not,acked,response,is,acknowledged,equal,to,true,assert,true,response,get,class,get,simple,name,failed,index,creation,acked,but,not,all,shards,were,started,response,is,shards,acknowledged
ElasticsearchAssertions -> public static void assertAcked(CreateIndexResponse response);1551176390;Assert that an index creation was fully acknowledged, meaning that both the index creation cluster_state update was successful and that the requisite number of shard copies were started before returning.;public static void assertAcked(CreateIndexResponse response) {_        assertThat(response.getClass().getSimpleName() + " failed - not acked", response.isAcknowledged(), equalTo(true))__        assertTrue(response.getClass().getSimpleName() + " failed - index creation acked but not all shards were started",_            response.isShardsAcknowledged())__    };assert,that,an,index,creation,was,fully,acknowledged,meaning,that,both,the,index,creation,cluster,state,update,was,successful,and,that,the,requisite,number,of,shard,copies,were,started,before,returning;public,static,void,assert,acked,create,index,response,response,assert,that,response,get,class,get,simple,name,failed,not,acked,response,is,acknowledged,equal,to,true,assert,true,response,get,class,get,simple,name,failed,index,creation,acked,but,not,all,shards,were,started,response,is,shards,acknowledged
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, String extraInfo);1524684173;Run future.actionGet() and check that it throws an exception of the right type__@param extraInfo extra information to add to the failure message;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, String extraInfo) {_        assertThrows(future, exceptionClass, null, extraInfo)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,param,extra,info,extra,information,to,add,to,the,failure,message;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,string,extra,info,assert,throws,future,exception,class,null,extra,info
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, String extraInfo);1527840262;Run future.actionGet() and check that it throws an exception of the right type__@param extraInfo extra information to add to the failure message;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, String extraInfo) {_        assertThrows(future, exceptionClass, null, extraInfo)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,param,extra,info,extra,information,to,add,to,the,failure,message;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,string,extra,info,assert,throws,future,exception,class,null,extra,info
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, String extraInfo);1528762805;Run future.actionGet() and check that it throws an exception of the right type__@param extraInfo extra information to add to the failure message;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, String extraInfo) {_        assertThrows(future, exceptionClass, null, extraInfo)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,param,extra,info,extra,information,to,add,to,the,failure,message;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,string,extra,info,assert,throws,future,exception,class,null,extra,info
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, String extraInfo);1532353780;Run future.actionGet() and check that it throws an exception of the right type__@param extraInfo extra information to add to the failure message;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, String extraInfo) {_        assertThrows(future, exceptionClass, null, extraInfo)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,param,extra,info,extra,information,to,add,to,the,failure,message;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,string,extra,info,assert,throws,future,exception,class,null,extra,info
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, String extraInfo);1534362961;Run future.actionGet() and check that it throws an exception of the right type__@param extraInfo extra information to add to the failure message;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, String extraInfo) {_        assertThrows(future, exceptionClass, null, extraInfo)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,param,extra,info,extra,information,to,add,to,the,failure,message;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,string,extra,info,assert,throws,future,exception,class,null,extra,info
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, String extraInfo);1537806831;Run future.actionGet() and check that it throws an exception of the right type__@param extraInfo extra information to add to the failure message;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, String extraInfo) {_        assertThrows(future, exceptionClass, null, extraInfo)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,param,extra,info,extra,information,to,add,to,the,failure,message;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,string,extra,info,assert,throws,future,exception,class,null,extra,info
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, String extraInfo);1540912197;Run future.actionGet() and check that it throws an exception of the right type__@param extraInfo extra information to add to the failure message;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, String extraInfo) {_        assertThrows(future, exceptionClass, null, extraInfo)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,param,extra,info,extra,information,to,add,to,the,failure,message;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,string,extra,info,assert,throws,future,exception,class,null,extra,info
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, String extraInfo);1544035746;Run future.actionGet() and check that it throws an exception of the right type__@param extraInfo extra information to add to the failure message;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, String extraInfo) {_        assertThrows(future, exceptionClass, null, extraInfo)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,param,extra,info,extra,information,to,add,to,the,failure,message;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,string,extra,info,assert,throws,future,exception,class,null,extra,info
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, String extraInfo);1547030937;Run future.actionGet() and check that it throws an exception of the right type__@param extraInfo extra information to add to the failure message;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, String extraInfo) {_        assertThrows(future, exceptionClass, null, extraInfo)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,param,extra,info,extra,information,to,add,to,the,failure,message;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,string,extra,info,assert,throws,future,exception,class,null,extra,info
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, String extraInfo);1547108736;Run future.actionGet() and check that it throws an exception of the right type__@param extraInfo extra information to add to the failure message;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, String extraInfo) {_        assertThrows(future, exceptionClass, null, extraInfo)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,param,extra,info,extra,information,to,add,to,the,failure,message;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,string,extra,info,assert,throws,future,exception,class,null,extra,info
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, String extraInfo);1551176390;Run future.actionGet() and check that it throws an exception of the right type__@param extraInfo extra information to add to the failure message;public static <E extends Throwable> void assertThrows(ActionFuture future, Class<E> exceptionClass, String extraInfo) {_        assertThrows(future, exceptionClass, null, extraInfo)__    };run,future,action,get,and,check,that,it,throws,an,exception,of,the,right,type,param,extra,info,extra,information,to,add,to,the,failure,message;public,static,e,extends,throwable,void,assert,throws,action,future,future,class,e,exception,class,string,extra,info,assert,throws,future,exception,class,null,extra,info
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass);1527840262;Run the request from a given builder and check that it throws an exception of the right type;public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass) {_        assertThrows(builder.execute(), exceptionClass)__    };run,the,request,from,a,given,builder,and,check,that,it,throws,an,exception,of,the,right,type;public,static,e,extends,throwable,void,assert,throws,action,request,builder,builder,class,e,exception,class,assert,throws,builder,execute,exception,class
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass);1528762805;Run the request from a given builder and check that it throws an exception of the right type;public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass) {_        assertThrows(builder.execute(), exceptionClass)__    };run,the,request,from,a,given,builder,and,check,that,it,throws,an,exception,of,the,right,type;public,static,e,extends,throwable,void,assert,throws,action,request,builder,builder,class,e,exception,class,assert,throws,builder,execute,exception,class
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass);1532353780;Run the request from a given builder and check that it throws an exception of the right type;public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass) {_        assertThrows(builder.execute(), exceptionClass)__    };run,the,request,from,a,given,builder,and,check,that,it,throws,an,exception,of,the,right,type;public,static,e,extends,throwable,void,assert,throws,action,request,builder,builder,class,e,exception,class,assert,throws,builder,execute,exception,class
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass);1534362961;Run the request from a given builder and check that it throws an exception of the right type;public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass) {_        assertThrows(builder.execute(), exceptionClass)__    };run,the,request,from,a,given,builder,and,check,that,it,throws,an,exception,of,the,right,type;public,static,e,extends,throwable,void,assert,throws,action,request,builder,builder,class,e,exception,class,assert,throws,builder,execute,exception,class
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass);1537806831;Run the request from a given builder and check that it throws an exception of the right type;public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass) {_        assertThrows(builder.execute(), exceptionClass)__    };run,the,request,from,a,given,builder,and,check,that,it,throws,an,exception,of,the,right,type;public,static,e,extends,throwable,void,assert,throws,action,request,builder,builder,class,e,exception,class,assert,throws,builder,execute,exception,class
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass);1540912197;Run the request from a given builder and check that it throws an exception of the right type;public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass) {_        assertThrows(builder.execute(), exceptionClass)__    };run,the,request,from,a,given,builder,and,check,that,it,throws,an,exception,of,the,right,type;public,static,e,extends,throwable,void,assert,throws,action,request,builder,builder,class,e,exception,class,assert,throws,builder,execute,exception,class
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass);1544035746;Run the request from a given builder and check that it throws an exception of the right type;public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass) {_        assertThrows(builder.execute(), exceptionClass)__    };run,the,request,from,a,given,builder,and,check,that,it,throws,an,exception,of,the,right,type;public,static,e,extends,throwable,void,assert,throws,action,request,builder,builder,class,e,exception,class,assert,throws,builder,execute,exception,class
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass);1547030937;Run the request from a given builder and check that it throws an exception of the right type;public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass) {_        assertThrows(builder.execute(), exceptionClass)__    };run,the,request,from,a,given,builder,and,check,that,it,throws,an,exception,of,the,right,type;public,static,e,extends,throwable,void,assert,throws,action,request,builder,builder,class,e,exception,class,assert,throws,builder,execute,exception,class
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass);1547108736;Run the request from a given builder and check that it throws an exception of the right type;public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass) {_        assertThrows(builder.execute(), exceptionClass)__    };run,the,request,from,a,given,builder,and,check,that,it,throws,an,exception,of,the,right,type;public,static,e,extends,throwable,void,assert,throws,action,request,builder,builder,class,e,exception,class,assert,throws,builder,execute,exception,class
ElasticsearchAssertions -> public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass);1551176390;Run the request from a given builder and check that it throws an exception of the right type;public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?> builder, Class<E> exceptionClass) {_        assertThrows(builder.execute(), exceptionClass)__    };run,the,request,from,a,given,builder,and,check,that,it,throws,an,exception,of,the,right,type;public,static,e,extends,throwable,void,assert,throws,action,request,builder,builder,class,e,exception,class,assert,throws,builder,execute,exception,class
ElasticsearchAssertions -> public static void assertBlocked(ActionRequestBuilder builder);1524684173;Executes the request and fails if the request has not been blocked.__@param builder the request builder;public static void assertBlocked(ActionRequestBuilder builder) {_        assertBlocked(builder, null)__    };executes,the,request,and,fails,if,the,request,has,not,been,blocked,param,builder,the,request,builder;public,static,void,assert,blocked,action,request,builder,builder,assert,blocked,builder,null
ElasticsearchAssertions -> public static void assertBlocked(ActionRequestBuilder builder);1527840262;Executes the request and fails if the request has not been blocked.__@param builder the request builder;public static void assertBlocked(ActionRequestBuilder builder) {_        assertBlocked(builder, null)__    };executes,the,request,and,fails,if,the,request,has,not,been,blocked,param,builder,the,request,builder;public,static,void,assert,blocked,action,request,builder,builder,assert,blocked,builder,null
ElasticsearchAssertions -> public static void assertBlocked(ActionRequestBuilder builder);1528762805;Executes the request and fails if the request has not been blocked.__@param builder the request builder;public static void assertBlocked(ActionRequestBuilder builder) {_        assertBlocked(builder, null)__    };executes,the,request,and,fails,if,the,request,has,not,been,blocked,param,builder,the,request,builder;public,static,void,assert,blocked,action,request,builder,builder,assert,blocked,builder,null
ElasticsearchAssertions -> public static void assertBlocked(ActionRequestBuilder builder);1532353780;Executes the request and fails if the request has not been blocked.__@param builder the request builder;public static void assertBlocked(ActionRequestBuilder builder) {_        assertBlocked(builder, null)__    };executes,the,request,and,fails,if,the,request,has,not,been,blocked,param,builder,the,request,builder;public,static,void,assert,blocked,action,request,builder,builder,assert,blocked,builder,null
ElasticsearchAssertions -> public static void assertBlocked(ActionRequestBuilder builder);1534362961;Executes the request and fails if the request has not been blocked.__@param builder the request builder;public static void assertBlocked(ActionRequestBuilder builder) {_        assertBlocked(builder, null)__    };executes,the,request,and,fails,if,the,request,has,not,been,blocked,param,builder,the,request,builder;public,static,void,assert,blocked,action,request,builder,builder,assert,blocked,builder,null
ElasticsearchAssertions -> public static void assertBlocked(ActionRequestBuilder builder);1537806831;Executes the request and fails if the request has not been blocked.__@param builder the request builder;public static void assertBlocked(ActionRequestBuilder builder) {_        assertBlocked(builder, null)__    };executes,the,request,and,fails,if,the,request,has,not,been,blocked,param,builder,the,request,builder;public,static,void,assert,blocked,action,request,builder,builder,assert,blocked,builder,null
ElasticsearchAssertions -> public static void assertBlocked(ActionRequestBuilder builder);1540912197;Executes the request and fails if the request has not been blocked.__@param builder the request builder;public static void assertBlocked(ActionRequestBuilder builder) {_        assertBlocked(builder, null)__    };executes,the,request,and,fails,if,the,request,has,not,been,blocked,param,builder,the,request,builder;public,static,void,assert,blocked,action,request,builder,builder,assert,blocked,builder,null
ElasticsearchAssertions -> public static void assertBlocked(ActionRequestBuilder builder);1544035746;Executes the request and fails if the request has not been blocked.__@param builder the request builder;public static void assertBlocked(ActionRequestBuilder builder) {_        assertBlocked(builder, null)__    };executes,the,request,and,fails,if,the,request,has,not,been,blocked,param,builder,the,request,builder;public,static,void,assert,blocked,action,request,builder,builder,assert,blocked,builder,null
ElasticsearchAssertions -> public static void assertBlocked(ActionRequestBuilder builder);1547030937;Executes the request and fails if the request has not been blocked.__@param builder the request builder;public static void assertBlocked(ActionRequestBuilder builder) {_        assertBlocked(builder, (ClusterBlock) null)__    };executes,the,request,and,fails,if,the,request,has,not,been,blocked,param,builder,the,request,builder;public,static,void,assert,blocked,action,request,builder,builder,assert,blocked,builder,cluster,block,null
ElasticsearchAssertions -> public static void assertBlocked(ActionRequestBuilder builder);1547108736;Executes the request and fails if the request has not been blocked.__@param builder the request builder;public static void assertBlocked(ActionRequestBuilder builder) {_        assertBlocked(builder, (ClusterBlock) null)__    };executes,the,request,and,fails,if,the,request,has,not,been,blocked,param,builder,the,request,builder;public,static,void,assert,blocked,action,request,builder,builder,assert,blocked,builder,cluster,block,null
ElasticsearchAssertions -> public static void assertBlocked(ActionRequestBuilder builder);1551176390;Executes the request and fails if the request has not been blocked.__@param builder the request builder;public static void assertBlocked(ActionRequestBuilder builder) {_        assertBlocked(builder, (ClusterBlock) null)__    };executes,the,request,and,fails,if,the,request,has,not,been,blocked,param,builder,the,request,builder;public,static,void,assert,blocked,action,request,builder,builder,assert,blocked,builder,cluster,block,null
ElasticsearchAssertions -> private static void assertListEquals(List<Object> expected, List<Object> actual);1532353780;Compares two lists recursively, but using arrays comparisons for byte[] through Arrays.equals(byte[], byte[]);private static void assertListEquals(List<Object> expected, List<Object> actual) {_        assertEquals(expected.size(), actual.size())__        Iterator<Object> actualIterator = actual.iterator()__        for (Object expectedValue : expected) {_            Object actualValue = actualIterator.next()__            assertObjectEquals(expectedValue, actualValue)__        }_    };compares,two,lists,recursively,but,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;private,static,void,assert,list,equals,list,object,expected,list,object,actual,assert,equals,expected,size,actual,size,iterator,object,actual,iterator,actual,iterator,for,object,expected,value,expected,object,actual,value,actual,iterator,next,assert,object,equals,expected,value,actual,value
ElasticsearchAssertions -> private static void assertListEquals(List<Object> expected, List<Object> actual);1534362961;Compares two lists recursively, but using arrays comparisons for byte[] through Arrays.equals(byte[], byte[]);private static void assertListEquals(List<Object> expected, List<Object> actual) {_        assertEquals(expected.size(), actual.size())__        Iterator<Object> actualIterator = actual.iterator()__        for (Object expectedValue : expected) {_            Object actualValue = actualIterator.next()__            assertObjectEquals(expectedValue, actualValue)__        }_    };compares,two,lists,recursively,but,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;private,static,void,assert,list,equals,list,object,expected,list,object,actual,assert,equals,expected,size,actual,size,iterator,object,actual,iterator,actual,iterator,for,object,expected,value,expected,object,actual,value,actual,iterator,next,assert,object,equals,expected,value,actual,value
ElasticsearchAssertions -> private static void assertListEquals(List<Object> expected, List<Object> actual);1537806831;Compares two lists recursively, but using arrays comparisons for byte[] through Arrays.equals(byte[], byte[]);private static void assertListEquals(List<Object> expected, List<Object> actual) {_        assertEquals(expected.size(), actual.size())__        Iterator<Object> actualIterator = actual.iterator()__        for (Object expectedValue : expected) {_            Object actualValue = actualIterator.next()__            assertObjectEquals(expectedValue, actualValue)__        }_    };compares,two,lists,recursively,but,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;private,static,void,assert,list,equals,list,object,expected,list,object,actual,assert,equals,expected,size,actual,size,iterator,object,actual,iterator,actual,iterator,for,object,expected,value,expected,object,actual,value,actual,iterator,next,assert,object,equals,expected,value,actual,value
ElasticsearchAssertions -> private static void assertListEquals(List<Object> expected, List<Object> actual);1540912197;Compares two lists recursively, but using arrays comparisons for byte[] through Arrays.equals(byte[], byte[]);private static void assertListEquals(List<Object> expected, List<Object> actual) {_        assertEquals(expected.size(), actual.size())__        Iterator<Object> actualIterator = actual.iterator()__        for (Object expectedValue : expected) {_            Object actualValue = actualIterator.next()__            assertObjectEquals(expectedValue, actualValue)__        }_    };compares,two,lists,recursively,but,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;private,static,void,assert,list,equals,list,object,expected,list,object,actual,assert,equals,expected,size,actual,size,iterator,object,actual,iterator,actual,iterator,for,object,expected,value,expected,object,actual,value,actual,iterator,next,assert,object,equals,expected,value,actual,value
ElasticsearchAssertions -> private static void assertListEquals(List<Object> expected, List<Object> actual);1544035746;Compares two lists recursively, but using arrays comparisons for byte[] through Arrays.equals(byte[], byte[]);private static void assertListEquals(List<Object> expected, List<Object> actual) {_        assertEquals(expected.size(), actual.size())__        Iterator<Object> actualIterator = actual.iterator()__        for (Object expectedValue : expected) {_            Object actualValue = actualIterator.next()__            assertObjectEquals(expectedValue, actualValue)__        }_    };compares,two,lists,recursively,but,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;private,static,void,assert,list,equals,list,object,expected,list,object,actual,assert,equals,expected,size,actual,size,iterator,object,actual,iterator,actual,iterator,for,object,expected,value,expected,object,actual,value,actual,iterator,next,assert,object,equals,expected,value,actual,value
ElasticsearchAssertions -> private static void assertListEquals(List<Object> expected, List<Object> actual);1547030937;Compares two lists recursively, but using arrays comparisons for byte[] through Arrays.equals(byte[], byte[]);private static void assertListEquals(List<Object> expected, List<Object> actual) {_        assertEquals(expected.size(), actual.size())__        Iterator<Object> actualIterator = actual.iterator()__        for (Object expectedValue : expected) {_            Object actualValue = actualIterator.next()__            assertObjectEquals(expectedValue, actualValue)__        }_    };compares,two,lists,recursively,but,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;private,static,void,assert,list,equals,list,object,expected,list,object,actual,assert,equals,expected,size,actual,size,iterator,object,actual,iterator,actual,iterator,for,object,expected,value,expected,object,actual,value,actual,iterator,next,assert,object,equals,expected,value,actual,value
ElasticsearchAssertions -> private static void assertListEquals(List<Object> expected, List<Object> actual);1547108736;Compares two lists recursively, but using arrays comparisons for byte[] through Arrays.equals(byte[], byte[]);private static void assertListEquals(List<Object> expected, List<Object> actual) {_        assertEquals(expected.size(), actual.size())__        Iterator<Object> actualIterator = actual.iterator()__        for (Object expectedValue : expected) {_            Object actualValue = actualIterator.next()__            assertObjectEquals(expectedValue, actualValue)__        }_    };compares,two,lists,recursively,but,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;private,static,void,assert,list,equals,list,object,expected,list,object,actual,assert,equals,expected,size,actual,size,iterator,object,actual,iterator,actual,iterator,for,object,expected,value,expected,object,actual,value,actual,iterator,next,assert,object,equals,expected,value,actual,value
ElasticsearchAssertions -> private static void assertListEquals(List<Object> expected, List<Object> actual);1551176390;Compares two lists recursively, but using arrays comparisons for byte[] through Arrays.equals(byte[], byte[]);private static void assertListEquals(List<Object> expected, List<Object> actual) {_        assertEquals(expected.size(), actual.size())__        Iterator<Object> actualIterator = actual.iterator()__        for (Object expectedValue : expected) {_            Object actualValue = actualIterator.next()__            assertObjectEquals(expectedValue, actualValue)__        }_    };compares,two,lists,recursively,but,using,arrays,comparisons,for,byte,through,arrays,equals,byte,byte;private,static,void,assert,list,equals,list,object,expected,list,object,actual,assert,equals,expected,size,actual,size,iterator,object,actual,iterator,actual,iterator,for,object,expected,value,expected,object,actual,value,actual,iterator,next,assert,object,equals,expected,value,actual,value
