# id;timestamp;commentText;codeText;commentWords;codeWords
ModuleTestCase -> public <T> void assertInstanceBinding(Module module, Class<T> to, Predicate<T> tester);1524684173;Configures the module, and ensures an instance is bound to the "to" class, and the_provided tester returns true on the instance.;public <T> void assertInstanceBinding(Module module, Class<T> to, Predicate<T> tester) {_        assertInstanceBindingWithAnnotation(module, to, tester, null)__    };configures,the,module,and,ensures,an,instance,is,bound,to,the,to,class,and,the,provided,tester,returns,true,on,the,instance;public,t,void,assert,instance,binding,module,module,class,t,to,predicate,t,tester,assert,instance,binding,with,annotation,module,to,tester,null
ModuleTestCase -> public <T> void assertInstanceBinding(Module module, Class<T> to, Predicate<T> tester);1531179852;Configures the module, and ensures an instance is bound to the "to" class, and the_provided tester returns true on the instance.;public <T> void assertInstanceBinding(Module module, Class<T> to, Predicate<T> tester) {_        assertInstanceBindingWithAnnotation(module, to, tester, null)__    };configures,the,module,and,ensures,an,instance,is,bound,to,the,to,class,and,the,provided,tester,returns,true,on,the,instance;public,t,void,assert,instance,binding,module,module,class,t,to,predicate,t,tester,assert,instance,binding,with,annotation,module,to,tester,null
ModuleTestCase -> public <T> void assertInstanceBinding(Module module, Class<T> to, Predicate<T> tester);1537806831;Configures the module, and ensures an instance is bound to the "to" class, and the_provided tester returns true on the instance.;public <T> void assertInstanceBinding(Module module, Class<T> to, Predicate<T> tester) {_        assertInstanceBindingWithAnnotation(module, to, tester, null)__    };configures,the,module,and,ensures,an,instance,is,bound,to,the,to,class,and,the,provided,tester,returns,true,on,the,instance;public,t,void,assert,instance,binding,module,module,class,t,to,predicate,t,tester,assert,instance,binding,with,annotation,module,to,tester,null
ModuleTestCase -> @SuppressWarnings("unchecked")     public <K, V> void assertMapInstanceBinding(Module module, Class<K> keyType, Class<V> valueType, Map<K, V> expected) throws Exception;1524684173;Configures the module, and ensures a map exists between the "keyType" and "valueType",_and that all of the "expected" values are bound.;@SuppressWarnings("unchecked")_    public <K, V> void assertMapInstanceBinding(Module module, Class<K> keyType, Class<V> valueType, Map<K, V> expected) throws Exception {_        _        Map<K, Key> keys = new HashMap<>()__        Map<Key, V> values = new HashMap<>()__        List<Element> elements = Elements.getElements(module)__        for (Element element : elements) {_            if (element instanceof InstanceBinding) {_                InstanceBinding binding = (InstanceBinding) element__                if (binding.getKey().getRawType().equals(valueType)) {_                    values.put(binding.getKey(), (V) binding.getInstance())__                } else if (binding.getInstance() instanceof Map.Entry) {_                    Map.Entry entry = (Map.Entry) binding.getInstance()__                    Object key = entry.getKey()__                    Object providerValue = entry.getValue()__                    if (key.getClass().equals(keyType) && providerValue instanceof ProviderLookup.ProviderImpl) {_                        ProviderLookup.ProviderImpl provider = (ProviderLookup.ProviderImpl) providerValue__                        keys.put((K) key, provider.getKey())__                    }_                }_            }_        }_        for (Map.Entry<K, V> entry : expected.entrySet()) {_            Key valueKey = keys.get(entry.getKey())__            assertNotNull("Could not find binding for key [" + entry.getKey() + "], found these keys:\n" + keys.keySet(), valueKey)__            V value = values.get(valueKey)__            assertNotNull("Could not find value for instance key [" + valueKey + "], found these bindings:\n" + elements)__            assertEquals(entry.getValue(), value)__        }_    };configures,the,module,and,ensures,a,map,exists,between,the,key,type,and,value,type,and,that,all,of,the,expected,values,are,bound;suppress,warnings,unchecked,public,k,v,void,assert,map,instance,binding,module,module,class,k,key,type,class,v,value,type,map,k,v,expected,throws,exception,map,k,key,keys,new,hash,map,map,key,v,values,new,hash,map,list,element,elements,elements,get,elements,module,for,element,element,elements,if,element,instanceof,instance,binding,instance,binding,binding,instance,binding,element,if,binding,get,key,get,raw,type,equals,value,type,values,put,binding,get,key,v,binding,get,instance,else,if,binding,get,instance,instanceof,map,entry,map,entry,entry,map,entry,binding,get,instance,object,key,entry,get,key,object,provider,value,entry,get,value,if,key,get,class,equals,key,type,provider,value,instanceof,provider,lookup,provider,impl,provider,lookup,provider,impl,provider,provider,lookup,provider,impl,provider,value,keys,put,k,key,provider,get,key,for,map,entry,k,v,entry,expected,entry,set,key,value,key,keys,get,entry,get,key,assert,not,null,could,not,find,binding,for,key,entry,get,key,found,these,keys,n,keys,key,set,value,key,v,value,values,get,value,key,assert,not,null,could,not,find,value,for,instance,key,value,key,found,these,bindings,n,elements,assert,equals,entry,get,value,value
ModuleTestCase -> @SuppressWarnings("unchecked")     public <K, V> void assertMapInstanceBinding(Module module, Class<K> keyType, Class<V> valueType, Map<K, V> expected) throws Exception;1531179852;Configures the module, and ensures a map exists between the "keyType" and "valueType",_and that all of the "expected" values are bound.;@SuppressWarnings("unchecked")_    public <K, V> void assertMapInstanceBinding(Module module, Class<K> keyType, Class<V> valueType, Map<K, V> expected) throws Exception {_        _        Map<K, Key<?>> keys = new HashMap<>()__        Map<Key<?>, V> values = new HashMap<>()__        List<Element> elements = Elements.getElements(module)__        for (Element element : elements) {_            if (element instanceof InstanceBinding) {_                InstanceBinding<?> binding = (InstanceBinding<?>) element__                if (binding.getKey().getRawType().equals(valueType)) {_                    values.put(binding.getKey(), (V) binding.getInstance())__                } else if (binding.getInstance() instanceof Map.Entry) {_                    Map.Entry<?, ?> entry = (Map.Entry<?, ?>) binding.getInstance()__                    Object key = entry.getKey()__                    Object providerValue = entry.getValue()__                    if (key.getClass().equals(keyType) && providerValue instanceof ProviderLookup.ProviderImpl) {_                        ProviderLookup.ProviderImpl<?> provider = (ProviderLookup.ProviderImpl<?>) providerValue__                        keys.put((K) key, provider.getKey())__                    }_                }_            }_        }_        for (Map.Entry<K, V> entry : expected.entrySet()) {_            Key<?> valueKey = keys.get(entry.getKey())__            assertNotNull("Could not find binding for key [" + entry.getKey() + "], found these keys:\n" + keys.keySet(), valueKey)__            V value = values.get(valueKey)__            assertNotNull("Could not find value for instance key [" + valueKey + "], found these bindings:\n" + elements)__            assertEquals(entry.getValue(), value)__        }_    };configures,the,module,and,ensures,a,map,exists,between,the,key,type,and,value,type,and,that,all,of,the,expected,values,are,bound;suppress,warnings,unchecked,public,k,v,void,assert,map,instance,binding,module,module,class,k,key,type,class,v,value,type,map,k,v,expected,throws,exception,map,k,key,keys,new,hash,map,map,key,v,values,new,hash,map,list,element,elements,elements,get,elements,module,for,element,element,elements,if,element,instanceof,instance,binding,instance,binding,binding,instance,binding,element,if,binding,get,key,get,raw,type,equals,value,type,values,put,binding,get,key,v,binding,get,instance,else,if,binding,get,instance,instanceof,map,entry,map,entry,entry,map,entry,binding,get,instance,object,key,entry,get,key,object,provider,value,entry,get,value,if,key,get,class,equals,key,type,provider,value,instanceof,provider,lookup,provider,impl,provider,lookup,provider,impl,provider,provider,lookup,provider,impl,provider,value,keys,put,k,key,provider,get,key,for,map,entry,k,v,entry,expected,entry,set,key,value,key,keys,get,entry,get,key,assert,not,null,could,not,find,binding,for,key,entry,get,key,found,these,keys,n,keys,key,set,value,key,v,value,values,get,value,key,assert,not,null,could,not,find,value,for,instance,key,value,key,found,these,bindings,n,elements,assert,equals,entry,get,value,value
ModuleTestCase -> public static <T> T bindAndGetInstance(Module module, Class<T> to);1524684173;Configures the module, and returns an instance  bound to the "to" class.;public static <T> T bindAndGetInstance(Module module, Class<T> to) {_        List<Element> elements = Elements.getElements(module)__        for (Element element : elements) {_            if (element instanceof InstanceBinding) {_                InstanceBinding binding = (InstanceBinding) element__                if (to.equals(binding.getKey().getTypeLiteral().getType())) {_                    return to.cast(binding.getInstance())__                }_            } else  if (element instanceof ProviderInstanceBinding) {_                ProviderInstanceBinding binding = (ProviderInstanceBinding) element__                if (to.equals(binding.getKey().getTypeLiteral().getType())) {_                    return to.cast(binding.getProviderInstance().get())__                }_            }_        }_        fail("can't get instance for class " + to)__        return null_ _    };configures,the,module,and,returns,an,instance,bound,to,the,to,class;public,static,t,t,bind,and,get,instance,module,module,class,t,to,list,element,elements,elements,get,elements,module,for,element,element,elements,if,element,instanceof,instance,binding,instance,binding,binding,instance,binding,element,if,to,equals,binding,get,key,get,type,literal,get,type,return,to,cast,binding,get,instance,else,if,element,instanceof,provider,instance,binding,provider,instance,binding,binding,provider,instance,binding,element,if,to,equals,binding,get,key,get,type,literal,get,type,return,to,cast,binding,get,provider,instance,get,fail,can,t,get,instance,for,class,to,return,null
ModuleTestCase -> public static <T> T bindAndGetInstance(Module module, Class<T> to);1531179852;Configures the module, and returns an instance  bound to the "to" class.;public static <T> T bindAndGetInstance(Module module, Class<T> to) {_        List<Element> elements = Elements.getElements(module)__        for (Element element : elements) {_            if (element instanceof InstanceBinding) {_                InstanceBinding<?> binding = (InstanceBinding<?>) element__                if (to.equals(binding.getKey().getTypeLiteral().getType())) {_                    return to.cast(binding.getInstance())__                }_            } else  if (element instanceof ProviderInstanceBinding) {_                ProviderInstanceBinding<?> binding = (ProviderInstanceBinding<?>) element__                if (to.equals(binding.getKey().getTypeLiteral().getType())) {_                    return to.cast(binding.getProviderInstance().get())__                }_            }_        }_        fail("can't get instance for class " + to)__        return null_ _    };configures,the,module,and,returns,an,instance,bound,to,the,to,class;public,static,t,t,bind,and,get,instance,module,module,class,t,to,list,element,elements,elements,get,elements,module,for,element,element,elements,if,element,instanceof,instance,binding,instance,binding,binding,instance,binding,element,if,to,equals,binding,get,key,get,type,literal,get,type,return,to,cast,binding,get,instance,else,if,element,instanceof,provider,instance,binding,provider,instance,binding,binding,provider,instance,binding,element,if,to,equals,binding,get,key,get,type,literal,get,type,return,to,cast,binding,get,provider,instance,get,fail,can,t,get,instance,for,class,to,return,null
ModuleTestCase -> public <T> void assertInstanceBindingWithAnnotation(Module module, Class<T> to, Predicate<T> tester, Class<? extends Annotation> annotation);1524684173;Like {@link #assertInstanceBinding(Module, Class, Predicate)}, but filters the_classes checked by the given annotation.;public <T> void assertInstanceBindingWithAnnotation(Module module, Class<T> to, Predicate<T> tester, Class<? extends Annotation> annotation) {_        List<Element> elements = Elements.getElements(module)__        for (Element element : elements) {_            if (element instanceof InstanceBinding) {_                InstanceBinding binding = (InstanceBinding) element__                if (to.equals(binding.getKey().getTypeLiteral().getType())) {_                    if (annotation == null || annotation.equals(binding.getKey().getAnnotationType())) {_                        assertTrue(tester.test(to.cast(binding.getInstance())))__                        return__                    }_                }_            } else  if (element instanceof ProviderInstanceBinding) {_                ProviderInstanceBinding binding = (ProviderInstanceBinding) element__                if (to.equals(binding.getKey().getTypeLiteral().getType())) {_                    assertTrue(tester.test(to.cast(binding.getProviderInstance().get())))__                    return__                }_            }_        }_        StringBuilder s = new StringBuilder()__        for (Element element : elements) {_            s.append(element).append("\n")__        }_        fail("Did not find any instance binding to " + to.getName() + ". Found these bindings:\n" + s)__    };like,link,assert,instance,binding,module,class,predicate,but,filters,the,classes,checked,by,the,given,annotation;public,t,void,assert,instance,binding,with,annotation,module,module,class,t,to,predicate,t,tester,class,extends,annotation,annotation,list,element,elements,elements,get,elements,module,for,element,element,elements,if,element,instanceof,instance,binding,instance,binding,binding,instance,binding,element,if,to,equals,binding,get,key,get,type,literal,get,type,if,annotation,null,annotation,equals,binding,get,key,get,annotation,type,assert,true,tester,test,to,cast,binding,get,instance,return,else,if,element,instanceof,provider,instance,binding,provider,instance,binding,binding,provider,instance,binding,element,if,to,equals,binding,get,key,get,type,literal,get,type,assert,true,tester,test,to,cast,binding,get,provider,instance,get,return,string,builder,s,new,string,builder,for,element,element,elements,s,append,element,append,n,fail,did,not,find,any,instance,binding,to,to,get,name,found,these,bindings,n,s
ModuleTestCase -> public <T> void assertInstanceBindingWithAnnotation(Module module, Class<T> to, Predicate<T> tester, Class<? extends Annotation> annotation);1531179852;Like {@link #assertInstanceBinding(Module, Class, Predicate)}, but filters the_classes checked by the given annotation.;public <T> void assertInstanceBindingWithAnnotation(Module module, Class<T> to, Predicate<T> tester, Class<? extends Annotation> annotation) {_        List<Element> elements = Elements.getElements(module)__        for (Element element : elements) {_            if (element instanceof InstanceBinding) {_                InstanceBinding<?> binding = (InstanceBinding<?>) element__                if (to.equals(binding.getKey().getTypeLiteral().getType())) {_                    if (annotation == null || annotation.equals(binding.getKey().getAnnotationType())) {_                        assertTrue(tester.test(to.cast(binding.getInstance())))__                        return__                    }_                }_            } else  if (element instanceof ProviderInstanceBinding) {_                ProviderInstanceBinding<?> binding = (ProviderInstanceBinding<?>) element__                if (to.equals(binding.getKey().getTypeLiteral().getType())) {_                    assertTrue(tester.test(to.cast(binding.getProviderInstance().get())))__                    return__                }_            }_        }_        StringBuilder s = new StringBuilder()__        for (Element element : elements) {_            s.append(element).append("\n")__        }_        fail("Did not find any instance binding to " + to.getName() + ". Found these bindings:\n" + s)__    };like,link,assert,instance,binding,module,class,predicate,but,filters,the,classes,checked,by,the,given,annotation;public,t,void,assert,instance,binding,with,annotation,module,module,class,t,to,predicate,t,tester,class,extends,annotation,annotation,list,element,elements,elements,get,elements,module,for,element,element,elements,if,element,instanceof,instance,binding,instance,binding,binding,instance,binding,element,if,to,equals,binding,get,key,get,type,literal,get,type,if,annotation,null,annotation,equals,binding,get,key,get,annotation,type,assert,true,tester,test,to,cast,binding,get,instance,return,else,if,element,instanceof,provider,instance,binding,provider,instance,binding,binding,provider,instance,binding,element,if,to,equals,binding,get,key,get,type,literal,get,type,assert,true,tester,test,to,cast,binding,get,provider,instance,get,return,string,builder,s,new,string,builder,for,element,element,elements,s,append,element,append,n,fail,did,not,find,any,instance,binding,to,to,get,name,found,these,bindings,n,s
ModuleTestCase -> public void assertBindingFailure(Module module, String... msgs);1524684173;Attempts to configure the module, and asserts an {@link IllegalArgumentException} is_caught, containing the given messages;public void assertBindingFailure(Module module, String... msgs) {_        try {_            List<Element> elements = Elements.getElements(module)__            StringBuilder s = new StringBuilder()__            for (Element element : elements) {_                s.append(element).append("\n")__            }_            fail("Expected exception from configuring module. Found these bindings:\n" + s)__        } catch (IllegalArgumentException e) {_            for (String msg : msgs) {_                assertTrue(e.getMessage() + " didn't contain: " + msg, e.getMessage().contains(msg))__            }_        }_    };attempts,to,configure,the,module,and,asserts,an,link,illegal,argument,exception,is,caught,containing,the,given,messages;public,void,assert,binding,failure,module,module,string,msgs,try,list,element,elements,elements,get,elements,module,string,builder,s,new,string,builder,for,element,element,elements,s,append,element,append,n,fail,expected,exception,from,configuring,module,found,these,bindings,n,s,catch,illegal,argument,exception,e,for,string,msg,msgs,assert,true,e,get,message,didn,t,contain,msg,e,get,message,contains,msg
ModuleTestCase -> public void assertBindingFailure(Module module, String... msgs);1531179852;Attempts to configure the module, and asserts an {@link IllegalArgumentException} is_caught, containing the given messages;public void assertBindingFailure(Module module, String... msgs) {_        try {_            List<Element> elements = Elements.getElements(module)__            StringBuilder s = new StringBuilder()__            for (Element element : elements) {_                s.append(element).append("\n")__            }_            fail("Expected exception from configuring module. Found these bindings:\n" + s)__        } catch (IllegalArgumentException e) {_            for (String msg : msgs) {_                assertTrue(e.getMessage() + " didn't contain: " + msg, e.getMessage().contains(msg))__            }_        }_    };attempts,to,configure,the,module,and,asserts,an,link,illegal,argument,exception,is,caught,containing,the,given,messages;public,void,assert,binding,failure,module,module,string,msgs,try,list,element,elements,elements,get,elements,module,string,builder,s,new,string,builder,for,element,element,elements,s,append,element,append,n,fail,expected,exception,from,configuring,module,found,these,bindings,n,s,catch,illegal,argument,exception,e,for,string,msg,msgs,assert,true,e,get,message,didn,t,contain,msg,e,get,message,contains,msg
