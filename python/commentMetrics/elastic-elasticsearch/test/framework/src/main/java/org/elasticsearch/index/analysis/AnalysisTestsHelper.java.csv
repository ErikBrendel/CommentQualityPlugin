commented;modifiers;parameterAmount;loc;comment;code
false;public,static;3;10;;public static ESTestCase.TestAnalysis createTestAnalysisFromClassPath(final Path baseDir, final String resource, final AnalysisPlugin... plugins) throws IOException {     final Settings settings = Settings.builder().loadFromStream(resource, AnalysisTestsHelper.class.getResourceAsStream(resource), false).put(Environment.PATH_HOME_SETTING.getKey(), baseDir.toString()).build().     return createTestAnalysisFromSettings(settings, plugins). }
false;public,static;2;4;;public static ESTestCase.TestAnalysis createTestAnalysisFromSettings(final Settings settings, final AnalysisPlugin... plugins) throws IOException {     return createTestAnalysisFromSettings(settings, null, plugins). }
false;public,static;3;18;;public static ESTestCase.TestAnalysis createTestAnalysisFromSettings(final Settings settings, final Path configPath, final AnalysisPlugin... plugins) throws IOException {     final Settings actualSettings.     if (settings.get(IndexMetaData.SETTING_VERSION_CREATED) == null) {         actualSettings = Settings.builder().put(settings).put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build().     } else {         actualSettings = settings.     }     final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings("test", actualSettings).     final AnalysisRegistry analysisRegistry = new AnalysisModule(new Environment(actualSettings, configPath), Arrays.asList(plugins)).getAnalysisRegistry().     return new ESTestCase.TestAnalysis(analysisRegistry.build(indexSettings), analysisRegistry.buildTokenFilterFactories(indexSettings), analysisRegistry.buildTokenizerFactories(indexSettings), analysisRegistry.buildCharFilterFactories(indexSettings)). }
