commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String randomExecutionHint() {     return randomBoolean() ? null : randomFrom(ExecutionMode.values()).toString(). }
false;private,static;1;7;;private static long sumOfDocCounts(Terms terms) {     long sumOfDocCounts = terms.getSumOfOtherDocCounts().     for (Terms.Bucket b : terms.getBuckets()) {         sumOfDocCounts += b.getDocCount().     }     return sumOfDocCounts. }
false;public;1;34;;public void testOtherDocCount(String... fieldNames) {     for (String fieldName : fieldNames) {         SearchResponse allTerms = client().prepareSearch("idx").addAggregation(terms("terms").executionHint(randomExecutionHint()).field(fieldName).size(10000).collectMode(randomFrom(SubAggCollectionMode.values()))).get().         assertSearchResponse(allTerms).         Terms terms = allTerms.getAggregations().get("terms").         // size is 0         assertEquals(0, terms.getSumOfOtherDocCounts()).         final long sumOfDocCounts = sumOfDocCounts(terms).         final int totalNumTerms = terms.getBuckets().size().         for (int size = 1. size < totalNumTerms + 2. size += randomIntBetween(1, 5)) {             for (int shardSize = size. shardSize <= totalNumTerms + 2. shardSize += randomIntBetween(1, 5)) {                 SearchResponse resp = client().prepareSearch("idx").addAggregation(terms("terms").executionHint(randomExecutionHint()).field(fieldName).size(size).shardSize(shardSize).collectMode(randomFrom(SubAggCollectionMode.values()))).get().                 assertSearchResponse(resp).                 terms = resp.getAggregations().get("terms").                 assertEquals(Math.min(size, totalNumTerms), terms.getBuckets().size()).                 assertEquals(sumOfDocCounts, sumOfDocCounts(terms)).             }         }     } }
