commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;9;/**  * Throw an {@link AssertionError} if there are still in-flight contexts.  */ ;/**  * Throw an {@link AssertionError} if there are still in-flight contexts.  */ public static void assertNoInFlightContext() {     final Map<SearchContext, Throwable> copy = new HashMap<>(ACTIVE_SEARCH_CONTEXTS).     if (copy.isEmpty() == false) {         throw new AssertionError("There are still [" + copy.size() + "] in-flight contexts. The first one's creation site is listed as the cause of this exception.", copy.values().iterator().next()).     } }
true;static;1;3;/**  * Add an active search context to the list of tracked contexts. Package private for testing.  */ ;/**  * Add an active search context to the list of tracked contexts. Package private for testing.  */ static void addActiveContext(SearchContext context) {     ACTIVE_SEARCH_CONTEXTS.put(context, new RuntimeException(context.toString())). }
true;static;1;3;/**  * Clear an active search context from the list of tracked contexts. Package private for testing.  */ ;/**  * Clear an active search context from the list of tracked contexts. Package private for testing.  */ static void removeActiveContext(SearchContext context) {     ACTIVE_SEARCH_CONTEXTS.remove(context). }
false;protected;1;5;;@Override protected void putContext(SearchContext context) {     super.putContext(context).     addActiveContext(context). }
false;protected;1;8;;@Override protected SearchContext removeContext(long id) {     final SearchContext removed = super.removeContext(id).     if (removed != null) {         removeActiveContext(removed).     }     return removed. }
