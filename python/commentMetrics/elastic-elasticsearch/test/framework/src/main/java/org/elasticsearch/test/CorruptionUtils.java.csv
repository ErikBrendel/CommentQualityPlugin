# id;timestamp;commentText;codeText;commentWords;codeWords
CorruptionUtils -> public static void corruptFile(Random random, Path... files) throws IOException;1524684173;Corrupts a random file at a random position;public static void corruptFile(Random random, Path... files) throws IOException {_        assertTrue("files must be non-empty", files.length > 0)__        final Path fileToCorrupt = RandomPicks.randomFrom(random, files)__        assertTrue(fileToCorrupt + " is not a file", Files.isRegularFile(fileToCorrupt))__        try (Directory dir = FSDirectory.open(fileToCorrupt.toAbsolutePath().getParent())) {_            long checksumBeforeCorruption__            try (IndexInput input = dir.openInput(fileToCorrupt.getFileName().toString(), IOContext.DEFAULT)) {_                checksumBeforeCorruption = CodecUtil.retrieveChecksum(input)__            }_            try (FileChannel raf = FileChannel.open(fileToCorrupt, StandardOpenOption.READ, StandardOpenOption.WRITE)) {_                _                raf.position(random.nextInt((int) Math.min(Integer.MAX_VALUE, raf.size())))__                long filePointer = raf.position()__                ByteBuffer bb = ByteBuffer.wrap(new byte[1])__                raf.read(bb)__                bb.flip()___                _                byte oldValue = bb.get(0)__                byte newValue = (byte) (oldValue + 1)__                bb.put(0, newValue)___                _                raf.position(filePointer)__                raf.write(bb)__                logger.info("Corrupting file --  flipping at position {} from {} to {} file: {}", filePointer, Integer.toHexString(oldValue), Integer.toHexString(newValue), fileToCorrupt.getFileName())__            }_            long checksumAfterCorruption__            long actualChecksumAfterCorruption__            try (ChecksumIndexInput input = dir.openChecksumInput(fileToCorrupt.getFileName().toString(), IOContext.DEFAULT)) {_                assertThat(input.getFilePointer(), is(0L))__                input.seek(input.length() - 8)_ _                checksumAfterCorruption = input.getChecksum()__                actualChecksumAfterCorruption = input.readLong()__            }_            _            _            StringBuilder msg = new StringBuilder()__            msg.append("before: [").append(checksumBeforeCorruption).append("] ")__            msg.append("after: [").append(checksumAfterCorruption).append("] ")__            msg.append("checksum value after corruption: ").append(actualChecksumAfterCorruption).append("] ")__            msg.append("file: ").append(fileToCorrupt.getFileName()).append(" length: ").append(dir.fileLength(fileToCorrupt.getFileName().toString()))__            logger.info("Checksum {}", msg)__            assumeTrue("Checksum collision - " + msg.toString(),_                    checksumAfterCorruption != checksumBeforeCorruption _                            || actualChecksumAfterCorruption != checksumBeforeCorruption)_ _            assertThat("no file corrupted", fileToCorrupt, notNullValue())__        }_    };corrupts,a,random,file,at,a,random,position;public,static,void,corrupt,file,random,random,path,files,throws,ioexception,assert,true,files,must,be,non,empty,files,length,0,final,path,file,to,corrupt,random,picks,random,from,random,files,assert,true,file,to,corrupt,is,not,a,file,files,is,regular,file,file,to,corrupt,try,directory,dir,fsdirectory,open,file,to,corrupt,to,absolute,path,get,parent,long,checksum,before,corruption,try,index,input,input,dir,open,input,file,to,corrupt,get,file,name,to,string,iocontext,default,checksum,before,corruption,codec,util,retrieve,checksum,input,try,file,channel,raf,file,channel,open,file,to,corrupt,standard,open,option,read,standard,open,option,write,raf,position,random,next,int,int,math,min,integer,raf,size,long,file,pointer,raf,position,byte,buffer,bb,byte,buffer,wrap,new,byte,1,raf,read,bb,bb,flip,byte,old,value,bb,get,0,byte,new,value,byte,old,value,1,bb,put,0,new,value,raf,position,file,pointer,raf,write,bb,logger,info,corrupting,file,flipping,at,position,from,to,file,file,pointer,integer,to,hex,string,old,value,integer,to,hex,string,new,value,file,to,corrupt,get,file,name,long,checksum,after,corruption,long,actual,checksum,after,corruption,try,checksum,index,input,input,dir,open,checksum,input,file,to,corrupt,get,file,name,to,string,iocontext,default,assert,that,input,get,file,pointer,is,0l,input,seek,input,length,8,checksum,after,corruption,input,get,checksum,actual,checksum,after,corruption,input,read,long,string,builder,msg,new,string,builder,msg,append,before,append,checksum,before,corruption,append,msg,append,after,append,checksum,after,corruption,append,msg,append,checksum,value,after,corruption,append,actual,checksum,after,corruption,append,msg,append,file,append,file,to,corrupt,get,file,name,append,length,append,dir,file,length,file,to,corrupt,get,file,name,to,string,logger,info,checksum,msg,assume,true,checksum,collision,msg,to,string,checksum,after,corruption,checksum,before,corruption,actual,checksum,after,corruption,checksum,before,corruption,assert,that,no,file,corrupted,file,to,corrupt,not,null,value
CorruptionUtils -> public static void corruptFile(Random random, Path... files) throws IOException;1537371806;Corrupts a random file at a random position;public static void corruptFile(Random random, Path... files) throws IOException {_        assertTrue("files must be non-empty", files.length > 0)__        final Path fileToCorrupt = RandomPicks.randomFrom(random, files)__        assertTrue(fileToCorrupt + " is not a file", Files.isRegularFile(fileToCorrupt))__        try (Directory dir = FSDirectory.open(fileToCorrupt.toAbsolutePath().getParent())) {_            long checksumBeforeCorruption__            try (IndexInput input = dir.openInput(fileToCorrupt.getFileName().toString(), IOContext.DEFAULT)) {_                checksumBeforeCorruption = CodecUtil.retrieveChecksum(input)__            }_            try (FileChannel raf = FileChannel.open(fileToCorrupt, StandardOpenOption.READ, StandardOpenOption.WRITE)) {_                _                raf.position(random.nextInt((int) Math.min(Integer.MAX_VALUE, raf.size())))__                long filePointer = raf.position()__                ByteBuffer bb = ByteBuffer.wrap(new byte[1])__                raf.read(bb)__                bb.flip()___                _                byte oldValue = bb.get(0)__                byte newValue = (byte) (oldValue + 1)__                bb.put(0, newValue)___                _                raf.position(filePointer)__                raf.write(bb)__                logger.info("Corrupting file --  flipping at position {} from {} to {} file: {}", filePointer, Integer.toHexString(oldValue), Integer.toHexString(newValue), fileToCorrupt.getFileName())__            }_            long checksumAfterCorruption__            long actualChecksumAfterCorruption__            try (ChecksumIndexInput input = dir.openChecksumInput(fileToCorrupt.getFileName().toString(), IOContext.DEFAULT)) {_                assertThat(input.getFilePointer(), is(0L))__                input.seek(input.length() - 8)_ _                checksumAfterCorruption = input.getChecksum()__                actualChecksumAfterCorruption = input.readLong()__            }_            _            _            StringBuilder msg = new StringBuilder()__            msg.append("before: [").append(checksumBeforeCorruption).append("] ")__            msg.append("after: [").append(checksumAfterCorruption).append("] ")__            msg.append("checksum value after corruption: ").append(actualChecksumAfterCorruption).append("] ")__            msg.append("file: ").append(fileToCorrupt.getFileName()).append(" length: ").append(dir.fileLength(fileToCorrupt.getFileName().toString()))__            logger.info("Checksum {}", msg)__            assumeTrue("Checksum collision - " + msg.toString(),_                    checksumAfterCorruption != checksumBeforeCorruption _                            || actualChecksumAfterCorruption != checksumBeforeCorruption)_ _            assertThat("no file corrupted", fileToCorrupt, notNullValue())__        }_    };corrupts,a,random,file,at,a,random,position;public,static,void,corrupt,file,random,random,path,files,throws,ioexception,assert,true,files,must,be,non,empty,files,length,0,final,path,file,to,corrupt,random,picks,random,from,random,files,assert,true,file,to,corrupt,is,not,a,file,files,is,regular,file,file,to,corrupt,try,directory,dir,fsdirectory,open,file,to,corrupt,to,absolute,path,get,parent,long,checksum,before,corruption,try,index,input,input,dir,open,input,file,to,corrupt,get,file,name,to,string,iocontext,default,checksum,before,corruption,codec,util,retrieve,checksum,input,try,file,channel,raf,file,channel,open,file,to,corrupt,standard,open,option,read,standard,open,option,write,raf,position,random,next,int,int,math,min,integer,raf,size,long,file,pointer,raf,position,byte,buffer,bb,byte,buffer,wrap,new,byte,1,raf,read,bb,bb,flip,byte,old,value,bb,get,0,byte,new,value,byte,old,value,1,bb,put,0,new,value,raf,position,file,pointer,raf,write,bb,logger,info,corrupting,file,flipping,at,position,from,to,file,file,pointer,integer,to,hex,string,old,value,integer,to,hex,string,new,value,file,to,corrupt,get,file,name,long,checksum,after,corruption,long,actual,checksum,after,corruption,try,checksum,index,input,input,dir,open,checksum,input,file,to,corrupt,get,file,name,to,string,iocontext,default,assert,that,input,get,file,pointer,is,0l,input,seek,input,length,8,checksum,after,corruption,input,get,checksum,actual,checksum,after,corruption,input,read,long,string,builder,msg,new,string,builder,msg,append,before,append,checksum,before,corruption,append,msg,append,after,append,checksum,after,corruption,append,msg,append,checksum,value,after,corruption,append,actual,checksum,after,corruption,append,msg,append,file,append,file,to,corrupt,get,file,name,append,length,append,dir,file,length,file,to,corrupt,get,file,name,to,string,logger,info,checksum,msg,assume,true,checksum,collision,msg,to,string,checksum,after,corruption,checksum,before,corruption,actual,checksum,after,corruption,checksum,before,corruption,assert,that,no,file,corrupted,file,to,corrupt,not,null,value
CorruptionUtils -> public static void corruptFile(Random random, Path... files) throws IOException;1537806831;Corrupts a random file at a random position;public static void corruptFile(Random random, Path... files) throws IOException {_        assertTrue("files must be non-empty", files.length > 0)__        final Path fileToCorrupt = RandomPicks.randomFrom(random, files)__        assertTrue(fileToCorrupt + " is not a file", Files.isRegularFile(fileToCorrupt))__        try (Directory dir = FSDirectory.open(fileToCorrupt.toAbsolutePath().getParent())) {_            long checksumBeforeCorruption__            try (IndexInput input = dir.openInput(fileToCorrupt.getFileName().toString(), IOContext.DEFAULT)) {_                checksumBeforeCorruption = CodecUtil.retrieveChecksum(input)__            }_            try (FileChannel raf = FileChannel.open(fileToCorrupt, StandardOpenOption.READ, StandardOpenOption.WRITE)) {_                long maxPosition = raf.size()___                if (fileToCorrupt.getFileName().toString().endsWith(".cfs") && maxPosition > 4) {_                    _                    _                    _                    _                    maxPosition -= 4__                }_                final int position = random.nextInt((int) Math.min(Integer.MAX_VALUE, maxPosition))__                corruptAt(fileToCorrupt, raf, position)__            }__            long checksumAfterCorruption__            long actualChecksumAfterCorruption__            try (ChecksumIndexInput input = dir.openChecksumInput(fileToCorrupt.getFileName().toString(), IOContext.DEFAULT)) {_                assertThat(input.getFilePointer(), is(0L))__                input.seek(input.length() - 8)_ _                checksumAfterCorruption = input.getChecksum()__                actualChecksumAfterCorruption = input.readLong()__            }_            _            _            StringBuilder msg = new StringBuilder()__            msg.append("before: [").append(checksumBeforeCorruption).append("] ")__            msg.append("after: [").append(checksumAfterCorruption).append("] ")__            msg.append("checksum value after corruption: ").append(actualChecksumAfterCorruption).append("] ")__            msg.append("file: ").append(fileToCorrupt.getFileName()).append(" length: ")__            msg.append(dir.fileLength(fileToCorrupt.getFileName().toString()))__            logger.info("Checksum {}", msg)__            assumeTrue("Checksum collision - " + msg.toString(),_                    checksumAfterCorruption != checksumBeforeCorruption _                            || actualChecksumAfterCorruption != checksumBeforeCorruption)_ _            assertThat("no file corrupted", fileToCorrupt, notNullValue())__        }_    };corrupts,a,random,file,at,a,random,position;public,static,void,corrupt,file,random,random,path,files,throws,ioexception,assert,true,files,must,be,non,empty,files,length,0,final,path,file,to,corrupt,random,picks,random,from,random,files,assert,true,file,to,corrupt,is,not,a,file,files,is,regular,file,file,to,corrupt,try,directory,dir,fsdirectory,open,file,to,corrupt,to,absolute,path,get,parent,long,checksum,before,corruption,try,index,input,input,dir,open,input,file,to,corrupt,get,file,name,to,string,iocontext,default,checksum,before,corruption,codec,util,retrieve,checksum,input,try,file,channel,raf,file,channel,open,file,to,corrupt,standard,open,option,read,standard,open,option,write,long,max,position,raf,size,if,file,to,corrupt,get,file,name,to,string,ends,with,cfs,max,position,4,max,position,4,final,int,position,random,next,int,int,math,min,integer,max,position,corrupt,at,file,to,corrupt,raf,position,long,checksum,after,corruption,long,actual,checksum,after,corruption,try,checksum,index,input,input,dir,open,checksum,input,file,to,corrupt,get,file,name,to,string,iocontext,default,assert,that,input,get,file,pointer,is,0l,input,seek,input,length,8,checksum,after,corruption,input,get,checksum,actual,checksum,after,corruption,input,read,long,string,builder,msg,new,string,builder,msg,append,before,append,checksum,before,corruption,append,msg,append,after,append,checksum,after,corruption,append,msg,append,checksum,value,after,corruption,append,actual,checksum,after,corruption,append,msg,append,file,append,file,to,corrupt,get,file,name,append,length,msg,append,dir,file,length,file,to,corrupt,get,file,name,to,string,logger,info,checksum,msg,assume,true,checksum,collision,msg,to,string,checksum,after,corruption,checksum,before,corruption,actual,checksum,after,corruption,checksum,before,corruption,assert,that,no,file,corrupted,file,to,corrupt,not,null,value
CorruptionUtils -> public static void corruptFile(Random random, Path... files) throws IOException;1538067637;Corrupts a random file at a random position;public static void corruptFile(Random random, Path... files) throws IOException {_        assertTrue("files must be non-empty", files.length > 0)__        final Path fileToCorrupt = RandomPicks.randomFrom(random, files)__        assertTrue(fileToCorrupt + " is not a file", Files.isRegularFile(fileToCorrupt))__        try (Directory dir = FSDirectory.open(fileToCorrupt.toAbsolutePath().getParent())) {_            long checksumBeforeCorruption__            try (IndexInput input = dir.openInput(fileToCorrupt.getFileName().toString(), IOContext.DEFAULT)) {_                checksumBeforeCorruption = CodecUtil.retrieveChecksum(input)__            }_            try (FileChannel raf = FileChannel.open(fileToCorrupt, StandardOpenOption.READ, StandardOpenOption.WRITE)) {_                long maxPosition = raf.size()___                if (fileToCorrupt.getFileName().toString().endsWith(".cfs") && maxPosition > 4) {_                    _                    _                    _                    _                    maxPosition -= 4__                }_                final int position = random.nextInt((int) Math.min(Integer.MAX_VALUE, maxPosition))__                corruptAt(fileToCorrupt, raf, position)__            }__            long checksumAfterCorruption__            long actualChecksumAfterCorruption__            try (ChecksumIndexInput input = dir.openChecksumInput(fileToCorrupt.getFileName().toString(), IOContext.DEFAULT)) {_                assertThat(input.getFilePointer(), is(0L))__                input.seek(input.length() - 8)_ _                checksumAfterCorruption = input.getChecksum()__                actualChecksumAfterCorruption = input.readLong()__            }_            _            _            StringBuilder msg = new StringBuilder()__            msg.append("before: [").append(checksumBeforeCorruption).append("] ")__            msg.append("after: [").append(checksumAfterCorruption).append("] ")__            msg.append("checksum value after corruption: ").append(actualChecksumAfterCorruption).append("] ")__            msg.append("file: ").append(fileToCorrupt.getFileName()).append(" length: ")__            msg.append(dir.fileLength(fileToCorrupt.getFileName().toString()))__            logger.info("Checksum {}", msg)__            assumeTrue("Checksum collision - " + msg.toString(),_                    checksumAfterCorruption != checksumBeforeCorruption _                            || actualChecksumAfterCorruption != checksumBeforeCorruption)_ _            assertThat("no file corrupted", fileToCorrupt, notNullValue())__        }_    };corrupts,a,random,file,at,a,random,position;public,static,void,corrupt,file,random,random,path,files,throws,ioexception,assert,true,files,must,be,non,empty,files,length,0,final,path,file,to,corrupt,random,picks,random,from,random,files,assert,true,file,to,corrupt,is,not,a,file,files,is,regular,file,file,to,corrupt,try,directory,dir,fsdirectory,open,file,to,corrupt,to,absolute,path,get,parent,long,checksum,before,corruption,try,index,input,input,dir,open,input,file,to,corrupt,get,file,name,to,string,iocontext,default,checksum,before,corruption,codec,util,retrieve,checksum,input,try,file,channel,raf,file,channel,open,file,to,corrupt,standard,open,option,read,standard,open,option,write,long,max,position,raf,size,if,file,to,corrupt,get,file,name,to,string,ends,with,cfs,max,position,4,max,position,4,final,int,position,random,next,int,int,math,min,integer,max,position,corrupt,at,file,to,corrupt,raf,position,long,checksum,after,corruption,long,actual,checksum,after,corruption,try,checksum,index,input,input,dir,open,checksum,input,file,to,corrupt,get,file,name,to,string,iocontext,default,assert,that,input,get,file,pointer,is,0l,input,seek,input,length,8,checksum,after,corruption,input,get,checksum,actual,checksum,after,corruption,input,read,long,string,builder,msg,new,string,builder,msg,append,before,append,checksum,before,corruption,append,msg,append,after,append,checksum,after,corruption,append,msg,append,checksum,value,after,corruption,append,actual,checksum,after,corruption,append,msg,append,file,append,file,to,corrupt,get,file,name,append,length,msg,append,dir,file,length,file,to,corrupt,get,file,name,to,string,logger,info,checksum,msg,assume,true,checksum,collision,msg,to,string,checksum,after,corruption,checksum,before,corruption,actual,checksum,after,corruption,checksum,before,corruption,assert,that,no,file,corrupted,file,to,corrupt,not,null,value
CorruptionUtils -> public static void corruptFile(Random random, Path... files) throws IOException;1544628062;Corrupts a random file at a random position;public static void corruptFile(Random random, Path... files) throws IOException {_        assertTrue("files must be non-empty", files.length > 0)__        final Path fileToCorrupt = RandomPicks.randomFrom(random, files)__        assertTrue(fileToCorrupt + " is not a file", Files.isRegularFile(fileToCorrupt))__        try (Directory dir = FSDirectory.open(fileToCorrupt.toAbsolutePath().getParent())) {_            long checksumBeforeCorruption__            try (IndexInput input = dir.openInput(fileToCorrupt.getFileName().toString(), IOContext.DEFAULT)) {_                checksumBeforeCorruption = CodecUtil.retrieveChecksum(input)__            }_            try (FileChannel raf = FileChannel.open(fileToCorrupt, StandardOpenOption.READ, StandardOpenOption.WRITE)) {_                long maxPosition = raf.size()___                if (fileToCorrupt.getFileName().toString().endsWith(".cfs") && maxPosition > 4) {_                    _                    _                    _                    _                    maxPosition -= 4__                }_                final int position = random.nextInt((int) Math.min(Integer.MAX_VALUE, maxPosition))__                corruptAt(fileToCorrupt, raf, position)__            }__            long checksumAfterCorruption__            long actualChecksumAfterCorruption___            try (ChecksumIndexInput input = dir.openChecksumInput(fileToCorrupt.getFileName().toString(), IOContext.DEFAULT)) {_                assertThat(input.getFilePointer(), is(0L))__                input.seek(input.length() - CodecUtil.footerLength())__                checksumAfterCorruption = input.getChecksum()__                input.seek(input.length() - 8)__                actualChecksumAfterCorruption = input.readLong()__            }_            _            _            StringBuilder msg = new StringBuilder()__            msg.append("before: [").append(checksumBeforeCorruption).append("] ")__            msg.append("after: [").append(checksumAfterCorruption).append("] ")__            msg.append("checksum value after corruption: ").append(actualChecksumAfterCorruption).append("] ")__            msg.append("file: ").append(fileToCorrupt.getFileName()).append(" length: ")__            msg.append(dir.fileLength(fileToCorrupt.getFileName().toString()))__            logger.info("Checksum {}", msg)__            assumeTrue("Checksum collision - " + msg.toString(),_                    checksumAfterCorruption != checksumBeforeCorruption _                            || actualChecksumAfterCorruption != checksumBeforeCorruption)_ _            assertThat("no file corrupted", fileToCorrupt, notNullValue())__        }_    };corrupts,a,random,file,at,a,random,position;public,static,void,corrupt,file,random,random,path,files,throws,ioexception,assert,true,files,must,be,non,empty,files,length,0,final,path,file,to,corrupt,random,picks,random,from,random,files,assert,true,file,to,corrupt,is,not,a,file,files,is,regular,file,file,to,corrupt,try,directory,dir,fsdirectory,open,file,to,corrupt,to,absolute,path,get,parent,long,checksum,before,corruption,try,index,input,input,dir,open,input,file,to,corrupt,get,file,name,to,string,iocontext,default,checksum,before,corruption,codec,util,retrieve,checksum,input,try,file,channel,raf,file,channel,open,file,to,corrupt,standard,open,option,read,standard,open,option,write,long,max,position,raf,size,if,file,to,corrupt,get,file,name,to,string,ends,with,cfs,max,position,4,max,position,4,final,int,position,random,next,int,int,math,min,integer,max,position,corrupt,at,file,to,corrupt,raf,position,long,checksum,after,corruption,long,actual,checksum,after,corruption,try,checksum,index,input,input,dir,open,checksum,input,file,to,corrupt,get,file,name,to,string,iocontext,default,assert,that,input,get,file,pointer,is,0l,input,seek,input,length,codec,util,footer,length,checksum,after,corruption,input,get,checksum,input,seek,input,length,8,actual,checksum,after,corruption,input,read,long,string,builder,msg,new,string,builder,msg,append,before,append,checksum,before,corruption,append,msg,append,after,append,checksum,after,corruption,append,msg,append,checksum,value,after,corruption,append,actual,checksum,after,corruption,append,msg,append,file,append,file,to,corrupt,get,file,name,append,length,msg,append,dir,file,length,file,to,corrupt,get,file,name,to,string,logger,info,checksum,msg,assume,true,checksum,collision,msg,to,string,checksum,after,corruption,checksum,before,corruption,actual,checksum,after,corruption,checksum,before,corruption,assert,that,no,file,corrupted,file,to,corrupt,not,null,value
