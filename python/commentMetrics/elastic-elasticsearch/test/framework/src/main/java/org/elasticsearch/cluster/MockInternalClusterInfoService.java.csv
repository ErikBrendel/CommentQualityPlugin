commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;14;/**  * Create a fake NodeStats for the given node and usage  */ ;/**  * Create a fake NodeStats for the given node and usage  */ public static NodeStats makeStats(String nodeName, DiskUsage usage) {     FsInfo.Path[] paths = new FsInfo.Path[1].     FsInfo.Path path = new FsInfo.Path("/dev/null", null, usage.getTotalBytes(), usage.getFreeBytes(), usage.getFreeBytes()).     paths[0] = path.     FsInfo fsInfo = new FsInfo(System.currentTimeMillis(), null, paths).     return new NodeStats(new DiscoveryNode(nodeName, ESTestCase.buildNewFakeTransportAddress(), emptyMap(), emptySet(), Version.CURRENT), System.currentTimeMillis(), null, null, null, null, null, fsInfo, null, null, null, null, null, null, null). }
false;public;2;3;;public void setN1Usage(String nodeName, DiskUsage newUsage) {     stats[0] = makeStats(nodeName, newUsage). }
false;public;2;3;;public void setN2Usage(String nodeName, DiskUsage newUsage) {     stats[1] = makeStats(nodeName, newUsage). }
false;public;2;3;;public void setN3Usage(String nodeName, DiskUsage newUsage) {     stats[2] = makeStats(nodeName, newUsage). }
false;public;1;6;;@Override public CountDownLatch updateNodeStats(final ActionListener<NodesStatsResponse> listener) {     NodesStatsResponse response = new NodesStatsResponse(clusterName, Arrays.asList(stats), Collections.emptyList()).     listener.onResponse(response).     return new CountDownLatch(0). }
false;public;1;5;;@Override public CountDownLatch updateIndicesStats(final ActionListener<IndicesStatsResponse> listener) {     // Not used, so noop     return new CountDownLatch(0). }
false;public;0;6;;@Override public ClusterInfo getClusterInfo() {     ClusterInfo clusterInfo = super.getClusterInfo().     return new DevNullClusterInfo(clusterInfo.getNodeLeastAvailableDiskUsages(), clusterInfo.getNodeMostAvailableDiskUsages(), clusterInfo.shardSizes). }
false;public;1;4;;@Override public String getDataPath(ShardRouting shardRouting) {     return "/dev/null". }
false;public;1;4;;@Override public void setUpdateFrequency(TimeValue updateFrequency) {     super.setUpdateFrequency(updateFrequency). }
