commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Maybe throws an exception .)  */ ;/**  * Maybe throws an exception .)  */ void maybeThrow(Flags flag) throws IOException.
true;;1;1;/**  * If this method returns true the {@link Terms} instance for the given field  * is wrapped with Thrower support otherwise no exception will be thrown for  * the current {@link Terms} instance or any other instance obtained from it.  */ ;/**  * If this method returns true the {@link Terms} instance for the given field  * is wrapped with Thrower support otherwise no exception will be thrown for  * the current {@link Terms} instance or any other instance obtained from it.  */ boolean wrapTerms(String field).
false;public;1;9;;@Override public Terms terms(String field) throws IOException {     Terms terms = super.terms(field).     if (thrower.wrapTerms(field)) {         thrower.maybeThrow(Flags.Terms).         return terms == null ? null : new ThrowingTerms(terms, thrower).     }     return terms. }
false;public;1;6;;@Override public Fields getTermVectors(int docID) throws IOException {     Fields fields = super.getTermVectors(docID).     thrower.maybeThrow(Flags.TermVectors).     return fields == null ? null : new ThrowingFields(fields, thrower). }
false;public;1;9;;@Override public Terms terms(String field) throws IOException {     Terms terms = super.terms(field).     if (thrower.wrapTerms(field)) {         thrower.maybeThrow(Flags.Terms).         return terms == null ? null : new ThrowingTerms(terms, thrower).     }     return terms. }
false;public;2;6;;@Override public TermsEnum intersect(CompiledAutomaton automaton, BytesRef bytes) throws IOException {     TermsEnum termsEnum = in.intersect(automaton, bytes).     thrower.maybeThrow(Flags.Intersect).     return new ThrowingTermsEnum(termsEnum, thrower). }
false;public;0;6;;@Override public TermsEnum iterator() throws IOException {     TermsEnum termsEnum = super.iterator().     thrower.maybeThrow(Flags.TermsEnum).     return new ThrowingTermsEnum(termsEnum, thrower). }
false;public;2;9;;@Override public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {     if ((flags & PostingsEnum.POSITIONS) != 0) {         thrower.maybeThrow(Flags.DocsAndPositionsEnum).     } else {         thrower.maybeThrow(Flags.DocsEnum).     }     return super.postings(reuse, flags). }
false;public;1;6;;@Override public NumericDocValues getNumericDocValues(String field) throws IOException {     thrower.maybeThrow(Flags.NumericDocValues).     return super.getNumericDocValues(field). }
false;public;1;5;;@Override public BinaryDocValues getBinaryDocValues(String field) throws IOException {     thrower.maybeThrow(Flags.BinaryDocValues).     return super.getBinaryDocValues(field). }
false;public;1;5;;@Override public SortedDocValues getSortedDocValues(String field) throws IOException {     thrower.maybeThrow(Flags.SortedDocValues).     return super.getSortedDocValues(field). }
false;public;1;5;;@Override public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {     thrower.maybeThrow(Flags.SortedSetDocValues).     return super.getSortedSetDocValues(field). }
false;public;1;5;;@Override public NumericDocValues getNormValues(String field) throws IOException {     thrower.maybeThrow(Flags.Norms).     return super.getNormValues(field). }
false;public;0;4;;@Override public CacheHelper getCoreCacheHelper() {     return in.getCoreCacheHelper(). }
false;public;0;4;;@Override public CacheHelper getReaderCacheHelper() {     return in.getReaderCacheHelper(). }
