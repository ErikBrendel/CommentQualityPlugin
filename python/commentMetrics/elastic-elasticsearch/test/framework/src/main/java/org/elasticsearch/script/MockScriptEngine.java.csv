commented;modifiers;parameterAmount;loc;comment;code
false;;2;1;;Object compile(Function<Map<String, Object>, Object> script, Map<String, String> params).
false;public;0;4;;@Override public String getType() {     return type. }
false;public;0;4;;@Override public String execute() {     return (String) script.apply(varsWithParams). }
false;public;1;4;;@Override public double execute(Map<String, Object> vars) {     return ((Number) script.apply(vars)).doubleValue(). }
false;public;0;4;;@Override public boolean execute() {     return (boolean) script.apply(getParams()). }
false;public;0;9;;@Override public Double execute() {     Object ret = script.apply(getParams()).     if (ret == null) {         return null.     } else {         return ((Number) ret).doubleValue().     } }
false;public;0;8;;@Override public void execute() {     final Map<String, Object> vars = new HashMap<>().     vars.put("ctx", ctx).     vars.put("params", parameters).     vars.putAll(parameters).     script.apply(vars). }
false;public;1;4;;@Override public boolean execute(Map<String, Object> ctx) {     return (boolean) script.apply(ctx). }
false;public;1;4;;@Override public void execute(Map<String, Object> ctx) {     script.apply(ctx). }
false;public;0;9;;@Override public Object execute() {     Map<String, Object> vars = new HashMap<>(parameters).     vars.put("params", parameters).     vars.put("doc", getDoc()).     vars.put("_score", get_score()).     vars.put("_value", get_value()).     return script.apply(vars). }
false;public;1;14;;@Override public AggregationScript newInstance(final LeafReaderContext ctx) {     return new AggregationScript(parameters, lookup, ctx) {          @Override         public Object execute() {             Map<String, Object> vars = new HashMap<>(parameters).             vars.put("params", parameters).             vars.put("doc", getDoc()).             vars.put("_score", get_score()).             vars.put("_value", get_value()).             return script.apply(vars).         }     }. }
false;public;0;4;;@Override public boolean needs_score() {     return true. }
false;public;1;4;;@Override public void execute(Map<String, Object> ctx) {     script.apply(ctx). }
false;public;0;7;;@Override public String execute() {     Map<String, Object> vars = new HashMap<>(parameters).     vars.put("params", parameters).     vars.put("doc", getDoc()).     return String.valueOf(script.apply(vars)). }
false;public;0;7;;@Override public double execute() {     Map<String, Object> vars = new HashMap<>(parameters).     vars.put("params", parameters).     vars.put("doc", getDoc()).     return ((Number) script.apply(vars)).doubleValue(). }
false;public;1;12;;@Override public NumberSortScript newInstance(final LeafReaderContext ctx) {     return new NumberSortScript(parameters, lookup, ctx) {          @Override         public double execute() {             Map<String, Object> vars = new HashMap<>(parameters).             vars.put("params", parameters).             vars.put("doc", getDoc()).             return ((Number) script.apply(vars)).doubleValue().         }     }. }
false;public;0;4;;@Override public boolean needs_score() {     return false. }
false;public;0;7;;@Override public Number execute() {     Map<String, Object> vars = new HashMap<>(parameters).     vars.put("params", parameters).     vars.put("doc", getDoc()).     return (Number) script.apply(vars). }
false;public;0;6;;@Override public Object execute() {     Map<String, Object> vars = createVars(parameters).     vars.putAll(getLeafLookup().asMap()).     return script.apply(vars). }
false;public;0;6;;@Override public Object execute() {     Map<String, Object> vars = createVars(parameters).     vars.putAll(getLeafLookup().asMap()).     return script.apply(vars). }
false;public;4;217;;@Override public <T> T compile(String name, String source, ScriptContext<T> context, Map<String, String> params) {     // Scripts are always resolved using the script's source. For inline scripts, it's easy because they don't have names and the     // source is always provided. For stored and file scripts, the source of the script must match the key of a predefined script.     Function<Map<String, Object>, Object> script = scripts.get(source).     if (script == null) {         throw new IllegalArgumentException("No pre defined script matching [" + source + "] for script with name [" + name + "], " + "did you declare the mocked script?").     }     MockCompiledScript mockCompiled = new MockCompiledScript(name, params, source, script).     if (context.instanceClazz.equals(FieldScript.class)) {         FieldScript.Factory factory = (parameters, lookup) -> ctx -> new FieldScript(parameters, lookup, ctx) {              @Override             public Object execute() {                 Map<String, Object> vars = createVars(parameters).                 vars.putAll(getLeafLookup().asMap()).                 return script.apply(vars).             }         }.         return context.factoryClazz.cast(factory).     } else if (context.instanceClazz.equals(FieldScript.class)) {         FieldScript.Factory factory = (parameters, lookup) -> ctx -> new FieldScript(parameters, lookup, ctx) {              @Override             public Object execute() {                 Map<String, Object> vars = createVars(parameters).                 vars.putAll(getLeafLookup().asMap()).                 return script.apply(vars).             }         }.         return context.factoryClazz.cast(factory).     } else if (context.instanceClazz.equals(TermsSetQueryScript.class)) {         TermsSetQueryScript.Factory factory = (parameters, lookup) -> (TermsSetQueryScript.LeafFactory) ctx -> new TermsSetQueryScript(parameters, lookup, ctx) {              @Override             public Number execute() {                 Map<String, Object> vars = new HashMap<>(parameters).                 vars.put("params", parameters).                 vars.put("doc", getDoc()).                 return (Number) script.apply(vars).             }         }.         return context.factoryClazz.cast(factory).     } else if (context.instanceClazz.equals(NumberSortScript.class)) {         NumberSortScript.Factory factory = (parameters, lookup) -> new NumberSortScript.LeafFactory() {              @Override             public NumberSortScript newInstance(final LeafReaderContext ctx) {                 return new NumberSortScript(parameters, lookup, ctx) {                      @Override                     public double execute() {                         Map<String, Object> vars = new HashMap<>(parameters).                         vars.put("params", parameters).                         vars.put("doc", getDoc()).                         return ((Number) script.apply(vars)).doubleValue().                     }                 }.             }              @Override             public boolean needs_score() {                 return false.             }         }.         return context.factoryClazz.cast(factory).     } else if (context.instanceClazz.equals(StringSortScript.class)) {         StringSortScript.Factory factory = (parameters, lookup) -> (StringSortScript.LeafFactory) ctx -> new StringSortScript(parameters, lookup, ctx) {              @Override             public String execute() {                 Map<String, Object> vars = new HashMap<>(parameters).                 vars.put("params", parameters).                 vars.put("doc", getDoc()).                 return String.valueOf(script.apply(vars)).             }         }.         return context.factoryClazz.cast(factory).     } else if (context.instanceClazz.equals(IngestScript.class)) {         IngestScript.Factory factory = vars -> new IngestScript(vars) {              @Override             public void execute(Map<String, Object> ctx) {                 script.apply(ctx).             }         }.         return context.factoryClazz.cast(factory).     } else if (context.instanceClazz.equals(AggregationScript.class)) {         AggregationScript.Factory factory = (parameters, lookup) -> new AggregationScript.LeafFactory() {              @Override             public AggregationScript newInstance(final LeafReaderContext ctx) {                 return new AggregationScript(parameters, lookup, ctx) {                      @Override                     public Object execute() {                         Map<String, Object> vars = new HashMap<>(parameters).                         vars.put("params", parameters).                         vars.put("doc", getDoc()).                         vars.put("_score", get_score()).                         vars.put("_value", get_value()).                         return script.apply(vars).                     }                 }.             }              @Override             public boolean needs_score() {                 return true.             }         }.         return context.factoryClazz.cast(factory).     } else if (context.instanceClazz.equals(IngestScript.class)) {         IngestScript.Factory factory = vars -> new IngestScript(vars) {              @Override             public void execute(Map<String, Object> ctx) {                 script.apply(ctx).             }         }.         return context.factoryClazz.cast(factory).     } else if (context.instanceClazz.equals(IngestConditionalScript.class)) {         IngestConditionalScript.Factory factory = parameters -> new IngestConditionalScript(parameters) {              @Override             public boolean execute(Map<String, Object> ctx) {                 return (boolean) script.apply(ctx).             }         }.         return context.factoryClazz.cast(factory).     } else if (context.instanceClazz.equals(UpdateScript.class)) {         UpdateScript.Factory factory = (parameters, ctx) -> new UpdateScript(parameters, ctx) {              @Override             public void execute() {                 final Map<String, Object> vars = new HashMap<>().                 vars.put("ctx", ctx).                 vars.put("params", parameters).                 vars.putAll(parameters).                 script.apply(vars).             }         }.         return context.factoryClazz.cast(factory).     } else if (context.instanceClazz.equals(BucketAggregationScript.class)) {         BucketAggregationScript.Factory factory = parameters -> new BucketAggregationScript(parameters) {              @Override             public Double execute() {                 Object ret = script.apply(getParams()).                 if (ret == null) {                     return null.                 } else {                     return ((Number) ret).doubleValue().                 }             }         }.         return context.factoryClazz.cast(factory).     } else if (context.instanceClazz.equals(BucketAggregationSelectorScript.class)) {         BucketAggregationSelectorScript.Factory factory = parameters -> new BucketAggregationSelectorScript(parameters) {              @Override             public boolean execute() {                 return (boolean) script.apply(getParams()).             }         }.         return context.factoryClazz.cast(factory).     } else if (context.instanceClazz.equals(SignificantTermsHeuristicScoreScript.class)) {         SignificantTermsHeuristicScoreScript.Factory factory = () -> new SignificantTermsHeuristicScoreScript() {              @Override             public double execute(Map<String, Object> vars) {                 return ((Number) script.apply(vars)).doubleValue().             }         }.         return context.factoryClazz.cast(factory).     } else if (context.instanceClazz.equals(TemplateScript.class)) {         TemplateScript.Factory factory = vars -> {             Map<String, Object> varsWithParams = new HashMap<>().             if (vars != null) {                 varsWithParams.put("params", vars).             }             return new TemplateScript(vars) {                  @Override                 public String execute() {                     return (String) script.apply(varsWithParams).                 }             }.         }.         return context.factoryClazz.cast(factory).     } else if (context.instanceClazz.equals(FilterScript.class)) {         FilterScript.Factory factory = mockCompiled::createFilterScript.         return context.factoryClazz.cast(factory).     } else if (context.instanceClazz.equals(SimilarityScript.class)) {         SimilarityScript.Factory factory = mockCompiled::createSimilarityScript.         return context.factoryClazz.cast(factory).     } else if (context.instanceClazz.equals(SimilarityWeightScript.class)) {         SimilarityWeightScript.Factory factory = mockCompiled::createSimilarityWeightScript.         return context.factoryClazz.cast(factory).     } else if (context.instanceClazz.equals(MovingFunctionScript.class)) {         MovingFunctionScript.Factory factory = mockCompiled::createMovingFunctionScript.         return context.factoryClazz.cast(factory).     } else if (context.instanceClazz.equals(ScoreScript.class)) {         ScoreScript.Factory factory = new MockScoreScript(script).         return context.factoryClazz.cast(factory).     } else if (context.instanceClazz.equals(ScriptedMetricAggContexts.InitScript.class)) {         ScriptedMetricAggContexts.InitScript.Factory factory = mockCompiled::createMetricAggInitScript.         return context.factoryClazz.cast(factory).     } else if (context.instanceClazz.equals(ScriptedMetricAggContexts.MapScript.class)) {         ScriptedMetricAggContexts.MapScript.Factory factory = mockCompiled::createMetricAggMapScript.         return context.factoryClazz.cast(factory).     } else if (context.instanceClazz.equals(ScriptedMetricAggContexts.CombineScript.class)) {         ScriptedMetricAggContexts.CombineScript.Factory factory = mockCompiled::createMetricAggCombineScript.         return context.factoryClazz.cast(factory).     } else if (context.instanceClazz.equals(ScriptedMetricAggContexts.ReduceScript.class)) {         ScriptedMetricAggContexts.ReduceScript.Factory factory = mockCompiled::createMetricAggReduceScript.         return context.factoryClazz.cast(factory).     } else if (context.instanceClazz.equals(IntervalFilterScript.class)) {         IntervalFilterScript.Factory factory = mockCompiled::createIntervalFilterScript.         return context.factoryClazz.cast(factory).     }     ContextCompiler compiler = contexts.get(context).     if (compiler != null) {         return context.factoryClazz.cast(compiler.compile(script, params)).     }     throw new IllegalArgumentException("mock script engine does not know how to handle context [" + context.name + "]"). }
false;private;1;5;;private Map<String, Object> createVars(Map<String, Object> params) {     Map<String, Object> vars = new HashMap<>().     vars.put("params", params).     return vars. }
false;public;0;3;;public String getName() {     return name. }
false;public;2;3;;public FilterScript.LeafFactory createFilterScript(Map<String, Object> params, SearchLookup lookup) {     return new MockFilterScript(lookup, params, script). }
false;public;0;3;;public SimilarityScript createSimilarityScript() {     return new MockSimilarityScript(script != null ? script : ctx -> 42d). }
false;public;0;3;;public SimilarityWeightScript createSimilarityWeightScript() {     return new MockSimilarityWeightScript(script != null ? script : ctx -> 42d). }
false;public;0;3;;public MovingFunctionScript createMovingFunctionScript() {     return new MockMovingFunctionScript(). }
false;public;2;3;;public ScriptedMetricAggContexts.InitScript createMetricAggInitScript(Map<String, Object> params, Map<String, Object> state) {     return new MockMetricAggInitScript(params, state, script != null ? script : ctx -> 42d). }
false;public;3;5;;public ScriptedMetricAggContexts.MapScript.LeafFactory createMetricAggMapScript(Map<String, Object> params, Map<String, Object> state, SearchLookup lookup) {     return new MockMetricAggMapScript(params, state, lookup, script != null ? script : ctx -> 42d). }
false;public;2;4;;public ScriptedMetricAggContexts.CombineScript createMetricAggCombineScript(Map<String, Object> params, Map<String, Object> state) {     return new MockMetricAggCombineScript(params, state, script != null ? script : ctx -> 42d). }
false;public;2;3;;public ScriptedMetricAggContexts.ReduceScript createMetricAggReduceScript(Map<String, Object> params, List<Object> states) {     return new MockMetricAggReduceScript(params, states, script != null ? script : ctx -> 42d). }
false;public;1;4;;@Override public boolean execute(Interval interval) {     return false. }
false;public;0;8;;public IntervalFilterScript createIntervalFilterScript() {     return new IntervalFilterScript() {          @Override         public boolean execute(Interval interval) {             return false.         }     }. }
false;public;0;4;;@Override public boolean execute() {     return (boolean) script.apply(ctx). }
false;public;1;4;;@Override public void setDocument(int doc) {     leafLookup.setDocument(doc). }
false;public;1;18;;public FilterScript newInstance(LeafReaderContext context) throws IOException {     LeafSearchLookup leafLookup = lookup.getLeafSearchLookup(context).     Map<String, Object> ctx = new HashMap<>(leafLookup.asMap()).     if (vars != null) {         ctx.putAll(vars).     }     return new FilterScript(ctx, lookup, context) {          @Override         public boolean execute() {             return (boolean) script.apply(ctx).         }          @Override         public void setDocument(int doc) {             leafLookup.setDocument(doc).         }     }. }
false;public;5;10;;@Override public double execute(double weight, Query query, Field field, Term term, Doc doc) {     Map<String, Object> map = new HashMap<>().     map.put("weight", weight).     map.put("query", query).     map.put("field", field).     map.put("term", term).     map.put("doc", doc).     return ((Number) script.apply(map)).doubleValue(). }
false;public;3;8;;@Override public double execute(Query query, Field field, Term term) {     Map<String, Object> map = new HashMap<>().     map.put("query", query).     map.put("field", field).     map.put("term", term).     return ((Number) script.apply(map)).doubleValue(). }
false;public;0;11;;public void execute() {     Map<String, Object> map = new HashMap<>().     if (getParams() != null) {         // TODO: remove this once scripts know to look for params under params key         map.putAll(getParams()).         map.put("params", getParams()).     }     map.put("state", getState()).     script.apply(map). }
false;public;0;15;;@Override public void execute() {     Map<String, Object> map = new HashMap<>().     if (getParams() != null) {         // TODO: remove this once scripts know to look for params under params key         map.putAll(getParams()).         map.put("params", getParams()).     }     map.put("state", getState()).     map.put("doc", getDoc()).     map.put("_score", get_score()).     script.apply(map). }
false;public;1;20;;@Override public ScriptedMetricAggContexts.MapScript newInstance(LeafReaderContext context) {     return new ScriptedMetricAggContexts.MapScript(params, state, lookup, context) {          @Override         public void execute() {             Map<String, Object> map = new HashMap<>().             if (getParams() != null) {                 // TODO: remove this once scripts know to look for params under params key                 map.putAll(getParams()).                 map.put("params", getParams()).             }             map.put("state", getState()).             map.put("doc", getDoc()).             map.put("_score", get_score()).             script.apply(map).         }     }. }
false;public;0;11;;public Object execute() {     Map<String, Object> map = new HashMap<>().     if (getParams() != null) {         // TODO: remove this once scripts know to look for params under params key         map.putAll(getParams()).         map.put("params", getParams()).     }     map.put("state", getState()).     return script.apply(map). }
false;public;0;11;;public Object execute() {     Map<String, Object> map = new HashMap<>().     if (getParams() != null) {         // TODO: remove this once scripts know to look for params under params key         map.putAll(getParams()).         map.put("params", getParams()).     }     map.put("states", getStates()).     return script.apply(map). }
false;public,static;1;3;;public static Script mockInlineScript(final String script) {     return new Script(ScriptType.INLINE, "mock", script, emptyMap()). }
false;public;2;4;;@Override public double execute(Map<String, Object> params, double[] values) {     return MovingFunctions.unweightedAvg(values). }
false;public;0;4;;@Override public boolean needs_score() {     return true. }
false;public;0;9;;@Override public double execute() {     Map<String, Object> vars = new HashMap<>(getParams()).     vars.put("doc", getDoc()).     if (scorerHolder[0] != null) {         vars.put("_score", new ScoreAccessor(scorerHolder[0])).     }     return ((Number) script.apply(vars)).doubleValue(). }
false;public;1;4;;@Override public void setScorer(Scorable scorer) {     scorerHolder[0] = scorer. }
false;public;1;20;;@Override public ScoreScript newInstance(LeafReaderContext ctx) throws IOException {     Scorable[] scorerHolder = new Scorable[1].     return new ScoreScript(params, lookup, ctx) {          @Override         public double execute() {             Map<String, Object> vars = new HashMap<>(getParams()).             vars.put("doc", getDoc()).             if (scorerHolder[0] != null) {                 vars.put("_score", new ScoreAccessor(scorerHolder[0])).             }             return ((Number) script.apply(vars)).doubleValue().         }          @Override         public void setScorer(Scorable scorer) {             scorerHolder[0] = scorer.         }     }. }
false;public;2;30;;@Override public ScoreScript.LeafFactory newFactory(Map<String, Object> params, SearchLookup lookup) {     return new ScoreScript.LeafFactory() {          @Override         public boolean needs_score() {             return true.         }          @Override         public ScoreScript newInstance(LeafReaderContext ctx) throws IOException {             Scorable[] scorerHolder = new Scorable[1].             return new ScoreScript(params, lookup, ctx) {                  @Override                 public double execute() {                     Map<String, Object> vars = new HashMap<>(getParams()).                     vars.put("doc", getDoc()).                     if (scorerHolder[0] != null) {                         vars.put("_score", new ScoreAccessor(scorerHolder[0])).                     }                     return ((Number) script.apply(vars)).doubleValue().                 }                  @Override                 public void setScorer(Scorable scorer) {                     scorerHolder[0] = scorer.                 }             }.         }     }. }
