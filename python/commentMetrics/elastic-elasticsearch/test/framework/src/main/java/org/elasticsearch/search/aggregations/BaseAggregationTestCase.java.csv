# id;timestamp;commentText;codeText;commentWords;codeWords
BaseAggregationTestCase -> public void testFromXContentMulti() throws IOException;1538170812;Create at least 2 aggregations and test equality and hash;public void testFromXContentMulti() throws IOException {_        AggregatorFactories.Builder factoriesBuilder = AggregatorFactories.builder()__        List<AB> testAggs = createTestAggregatorBuilders()___        for (AB testAgg : testAggs) {_            factoriesBuilder.addAggregator(testAgg)__        }__        XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__        if (randomBoolean()) {_            builder.prettyPrint()__        }_        factoriesBuilder.toXContent(builder, ToXContent.EMPTY_PARAMS)__        XContentBuilder shuffled = shuffleXContent(builder)__        XContentParser parser = createParser(shuffled)___        assertSame(XContentParser.Token.START_OBJECT, parser.nextToken())__        AggregatorFactories.Builder parsed = AggregatorFactories.parseAggregators(parser)___        assertThat(parsed.getAggregatorFactories(), hasSize(testAggs.size()))__        assertThat(parsed.getPipelineAggregatorFactories(), hasSize(0))__        assertEquals(factoriesBuilder, parsed)__        assertEquals(factoriesBuilder.hashCode(), parsed.hashCode())__    };create,at,least,2,aggregations,and,test,equality,and,hash;public,void,test,from,xcontent,multi,throws,ioexception,aggregator,factories,builder,factories,builder,aggregator,factories,builder,list,ab,test,aggs,create,test,aggregator,builders,for,ab,test,agg,test,aggs,factories,builder,add,aggregator,test,agg,xcontent,builder,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,builder,pretty,print,factories,builder,to,xcontent,builder,to,xcontent,xcontent,builder,shuffled,shuffle,xcontent,builder,xcontent,parser,parser,create,parser,shuffled,assert,same,xcontent,parser,token,parser,next,token,aggregator,factories,builder,parsed,aggregator,factories,parse,aggregators,parser,assert,that,parsed,get,aggregator,factories,has,size,test,aggs,size,assert,that,parsed,get,pipeline,aggregator,factories,has,size,0,assert,equals,factories,builder,parsed,assert,equals,factories,builder,hash,code,parsed,hash,code
BaseAggregationTestCase -> public void testFromXContentMulti() throws IOException;1546446782;Create at least 2 aggregations and test equality and hash;public void testFromXContentMulti() throws IOException {_        AggregatorFactories.Builder factoriesBuilder = AggregatorFactories.builder()__        List<AB> testAggs = createTestAggregatorBuilders()___        for (AB testAgg : testAggs) {_            factoriesBuilder.addAggregator(testAgg)__        }__        XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__        if (randomBoolean()) {_            builder.prettyPrint()__        }_        factoriesBuilder.toXContent(builder, ToXContent.EMPTY_PARAMS)__        XContentBuilder shuffled = shuffleXContent(builder)__        XContentParser parser = createParser(shuffled)___        assertSame(XContentParser.Token.START_OBJECT, parser.nextToken())__        AggregatorFactories.Builder parsed = AggregatorFactories.parseAggregators(parser)___        assertThat(parsed.getAggregatorFactories(), hasSize(testAggs.size()))__        assertThat(parsed.getPipelineAggregatorFactories(), hasSize(0))__        assertEquals(factoriesBuilder, parsed)__        assertEquals(factoriesBuilder.hashCode(), parsed.hashCode())__    };create,at,least,2,aggregations,and,test,equality,and,hash;public,void,test,from,xcontent,multi,throws,ioexception,aggregator,factories,builder,factories,builder,aggregator,factories,builder,list,ab,test,aggs,create,test,aggregator,builders,for,ab,test,agg,test,aggs,factories,builder,add,aggregator,test,agg,xcontent,builder,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,builder,pretty,print,factories,builder,to,xcontent,builder,to,xcontent,xcontent,builder,shuffled,shuffle,xcontent,builder,xcontent,parser,parser,create,parser,shuffled,assert,same,xcontent,parser,token,parser,next,token,aggregator,factories,builder,parsed,aggregator,factories,parse,aggregators,parser,assert,that,parsed,get,aggregator,factories,has,size,test,aggs,size,assert,that,parsed,get,pipeline,aggregator,factories,has,size,0,assert,equals,factories,builder,parsed,assert,equals,factories,builder,hash,code,parsed,hash,code
BaseAggregationTestCase -> public void testToString() throws IOException;1524684173;Generic test that checks that the toString method renders the XContent_correctly.;public void testToString() throws IOException {_        AB testAgg = createTestAggregatorBuilder()__        String toString = randomBoolean() ? Strings.toString(testAgg) : testAgg.toString()__        XContentParser parser = createParser(XContentType.JSON.xContent(), toString)__        AggregationBuilder newAgg = parse(parser)__        assertNotSame(newAgg, testAgg)__        assertEquals(testAgg, newAgg)__        assertEquals(testAgg.hashCode(), newAgg.hashCode())__    };generic,test,that,checks,that,the,to,string,method,renders,the,xcontent,correctly;public,void,test,to,string,throws,ioexception,ab,test,agg,create,test,aggregator,builder,string,to,string,random,boolean,strings,to,string,test,agg,test,agg,to,string,xcontent,parser,parser,create,parser,xcontent,type,json,x,content,to,string,aggregation,builder,new,agg,parse,parser,assert,not,same,new,agg,test,agg,assert,equals,test,agg,new,agg,assert,equals,test,agg,hash,code,new,agg,hash,code
BaseAggregationTestCase -> public void testToString() throws IOException;1526510804;Generic test that checks that the toString method renders the XContent_correctly.;public void testToString() throws IOException {_        AB testAgg = createTestAggregatorBuilder()__        String toString = randomBoolean() ? Strings.toString(testAgg) : testAgg.toString()__        XContentParser parser = createParser(XContentType.JSON.xContent(), toString)__        AggregationBuilder newAgg = parse(parser)__        assertNotSame(newAgg, testAgg)__        assertEquals(testAgg, newAgg)__        assertEquals(testAgg.hashCode(), newAgg.hashCode())__    };generic,test,that,checks,that,the,to,string,method,renders,the,xcontent,correctly;public,void,test,to,string,throws,ioexception,ab,test,agg,create,test,aggregator,builder,string,to,string,random,boolean,strings,to,string,test,agg,test,agg,to,string,xcontent,parser,parser,create,parser,xcontent,type,json,x,content,to,string,aggregation,builder,new,agg,parse,parser,assert,not,same,new,agg,test,agg,assert,equals,test,agg,new,agg,assert,equals,test,agg,hash,code,new,agg,hash,code
BaseAggregationTestCase -> public void testToString() throws IOException;1528762805;Generic test that checks that the toString method renders the XContent_correctly.;public void testToString() throws IOException {_        AB testAgg = createTestAggregatorBuilder()__        String toString = randomBoolean() ? Strings.toString(testAgg) : testAgg.toString()__        XContentParser parser = createParser(XContentType.JSON.xContent(), toString)__        AggregationBuilder newAgg = parse(parser)__        assertNotSame(newAgg, testAgg)__        assertEquals(testAgg, newAgg)__        assertEquals(testAgg.hashCode(), newAgg.hashCode())__    };generic,test,that,checks,that,the,to,string,method,renders,the,xcontent,correctly;public,void,test,to,string,throws,ioexception,ab,test,agg,create,test,aggregator,builder,string,to,string,random,boolean,strings,to,string,test,agg,test,agg,to,string,xcontent,parser,parser,create,parser,xcontent,type,json,x,content,to,string,aggregation,builder,new,agg,parse,parser,assert,not,same,new,agg,test,agg,assert,equals,test,agg,new,agg,assert,equals,test,agg,hash,code,new,agg,hash,code
BaseAggregationTestCase -> public void testToString() throws IOException;1538170812;Generic test that checks that the toString method renders the XContent_correctly.;public void testToString() throws IOException {_        AB testAgg = createTestAggregatorBuilder()__        String toString = randomBoolean() ? Strings.toString(testAgg) : testAgg.toString()__        XContentParser parser = createParser(XContentType.JSON.xContent(), toString)__        AggregationBuilder newAgg = parse(parser)__        assertNotSame(newAgg, testAgg)__        assertEquals(testAgg, newAgg)__        assertEquals(testAgg.hashCode(), newAgg.hashCode())__    };generic,test,that,checks,that,the,to,string,method,renders,the,xcontent,correctly;public,void,test,to,string,throws,ioexception,ab,test,agg,create,test,aggregator,builder,string,to,string,random,boolean,strings,to,string,test,agg,test,agg,to,string,xcontent,parser,parser,create,parser,xcontent,type,json,x,content,to,string,aggregation,builder,new,agg,parse,parser,assert,not,same,new,agg,test,agg,assert,equals,test,agg,new,agg,assert,equals,test,agg,hash,code,new,agg,hash,code
BaseAggregationTestCase -> public void testToString() throws IOException;1546446782;Generic test that checks that the toString method renders the XContent_correctly.;public void testToString() throws IOException {_        AB testAgg = createTestAggregatorBuilder()__        String toString = randomBoolean() ? Strings.toString(testAgg) : testAgg.toString()__        XContentParser parser = createParser(XContentType.JSON.xContent(), toString)__        AggregationBuilder newAgg = parse(parser)__        assertNotSame(newAgg, testAgg)__        assertEquals(testAgg, newAgg)__        assertEquals(testAgg.hashCode(), newAgg.hashCode())__    };generic,test,that,checks,that,the,to,string,method,renders,the,xcontent,correctly;public,void,test,to,string,throws,ioexception,ab,test,agg,create,test,aggregator,builder,string,to,string,random,boolean,strings,to,string,test,agg,test,agg,to,string,xcontent,parser,parser,create,parser,xcontent,type,json,x,content,to,string,aggregation,builder,new,agg,parse,parser,assert,not,same,new,agg,test,agg,assert,equals,test,agg,new,agg,assert,equals,test,agg,hash,code,new,agg,hash,code
BaseAggregationTestCase -> public void testFromXContent() throws IOException;1524684173;Generic test that creates new AggregatorFactory from the test_AggregatorFactory and checks both for equality and asserts equality on_the two queries.;public void testFromXContent() throws IOException {_        AB testAgg = createTestAggregatorBuilder()__        AggregatorFactories.Builder factoriesBuilder = AggregatorFactories.builder().addAggregator(testAgg)__        XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__        if (randomBoolean()) {_            builder.prettyPrint()__        }_        factoriesBuilder.toXContent(builder, ToXContent.EMPTY_PARAMS)__        XContentBuilder shuffled = shuffleXContent(builder)__        XContentParser parser = createParser(shuffled)__        AggregationBuilder newAgg = parse(parser)__        assertNotSame(newAgg, testAgg)__        assertEquals(testAgg, newAgg)__        assertEquals(testAgg.hashCode(), newAgg.hashCode())__    };generic,test,that,creates,new,aggregator,factory,from,the,test,aggregator,factory,and,checks,both,for,equality,and,asserts,equality,on,the,two,queries;public,void,test,from,xcontent,throws,ioexception,ab,test,agg,create,test,aggregator,builder,aggregator,factories,builder,factories,builder,aggregator,factories,builder,add,aggregator,test,agg,xcontent,builder,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,builder,pretty,print,factories,builder,to,xcontent,builder,to,xcontent,xcontent,builder,shuffled,shuffle,xcontent,builder,xcontent,parser,parser,create,parser,shuffled,aggregation,builder,new,agg,parse,parser,assert,not,same,new,agg,test,agg,assert,equals,test,agg,new,agg,assert,equals,test,agg,hash,code,new,agg,hash,code
BaseAggregationTestCase -> public void testFromXContent() throws IOException;1526510804;Generic test that creates new AggregatorFactory from the test_AggregatorFactory and checks both for equality and asserts equality on_the two queries.;public void testFromXContent() throws IOException {_        AB testAgg = createTestAggregatorBuilder()__        AggregatorFactories.Builder factoriesBuilder = AggregatorFactories.builder().addAggregator(testAgg)__        XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__        if (randomBoolean()) {_            builder.prettyPrint()__        }_        factoriesBuilder.toXContent(builder, ToXContent.EMPTY_PARAMS)__        XContentBuilder shuffled = shuffleXContent(builder)__        XContentParser parser = createParser(shuffled)__        AggregationBuilder newAgg = parse(parser)__        assertNotSame(newAgg, testAgg)__        assertEquals(testAgg, newAgg)__        assertEquals(testAgg.hashCode(), newAgg.hashCode())__    };generic,test,that,creates,new,aggregator,factory,from,the,test,aggregator,factory,and,checks,both,for,equality,and,asserts,equality,on,the,two,queries;public,void,test,from,xcontent,throws,ioexception,ab,test,agg,create,test,aggregator,builder,aggregator,factories,builder,factories,builder,aggregator,factories,builder,add,aggregator,test,agg,xcontent,builder,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,builder,pretty,print,factories,builder,to,xcontent,builder,to,xcontent,xcontent,builder,shuffled,shuffle,xcontent,builder,xcontent,parser,parser,create,parser,shuffled,aggregation,builder,new,agg,parse,parser,assert,not,same,new,agg,test,agg,assert,equals,test,agg,new,agg,assert,equals,test,agg,hash,code,new,agg,hash,code
BaseAggregationTestCase -> public void testFromXContent() throws IOException;1528762805;Generic test that creates new AggregatorFactory from the test_AggregatorFactory and checks both for equality and asserts equality on_the two queries.;public void testFromXContent() throws IOException {_        AB testAgg = createTestAggregatorBuilder()__        AggregatorFactories.Builder factoriesBuilder = AggregatorFactories.builder().addAggregator(testAgg)__        XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__        if (randomBoolean()) {_            builder.prettyPrint()__        }_        factoriesBuilder.toXContent(builder, ToXContent.EMPTY_PARAMS)__        XContentBuilder shuffled = shuffleXContent(builder)__        XContentParser parser = createParser(shuffled)__        AggregationBuilder newAgg = parse(parser)__        assertNotSame(newAgg, testAgg)__        assertEquals(testAgg, newAgg)__        assertEquals(testAgg.hashCode(), newAgg.hashCode())__    };generic,test,that,creates,new,aggregator,factory,from,the,test,aggregator,factory,and,checks,both,for,equality,and,asserts,equality,on,the,two,queries;public,void,test,from,xcontent,throws,ioexception,ab,test,agg,create,test,aggregator,builder,aggregator,factories,builder,factories,builder,aggregator,factories,builder,add,aggregator,test,agg,xcontent,builder,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,builder,pretty,print,factories,builder,to,xcontent,builder,to,xcontent,xcontent,builder,shuffled,shuffle,xcontent,builder,xcontent,parser,parser,create,parser,shuffled,aggregation,builder,new,agg,parse,parser,assert,not,same,new,agg,test,agg,assert,equals,test,agg,new,agg,assert,equals,test,agg,hash,code,new,agg,hash,code
BaseAggregationTestCase -> public void testFromXContent() throws IOException;1538170812;Generic test that creates new AggregatorFactory from the test_AggregatorFactory and checks both for equality and asserts equality on_the two queries.;public void testFromXContent() throws IOException {_        AB testAgg = createTestAggregatorBuilder()__        AggregatorFactories.Builder factoriesBuilder = AggregatorFactories.builder().addAggregator(testAgg)__        XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__        if (randomBoolean()) {_            builder.prettyPrint()__        }_        factoriesBuilder.toXContent(builder, ToXContent.EMPTY_PARAMS)__        XContentBuilder shuffled = shuffleXContent(builder)__        XContentParser parser = createParser(shuffled)__        AggregationBuilder newAgg = parse(parser)__        assertNotSame(newAgg, testAgg)__        assertEquals(testAgg, newAgg)__        assertEquals(testAgg.hashCode(), newAgg.hashCode())__    };generic,test,that,creates,new,aggregator,factory,from,the,test,aggregator,factory,and,checks,both,for,equality,and,asserts,equality,on,the,two,queries;public,void,test,from,xcontent,throws,ioexception,ab,test,agg,create,test,aggregator,builder,aggregator,factories,builder,factories,builder,aggregator,factories,builder,add,aggregator,test,agg,xcontent,builder,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,builder,pretty,print,factories,builder,to,xcontent,builder,to,xcontent,xcontent,builder,shuffled,shuffle,xcontent,builder,xcontent,parser,parser,create,parser,shuffled,aggregation,builder,new,agg,parse,parser,assert,not,same,new,agg,test,agg,assert,equals,test,agg,new,agg,assert,equals,test,agg,hash,code,new,agg,hash,code
BaseAggregationTestCase -> public void testFromXContent() throws IOException;1546446782;Generic test that creates new AggregatorFactory from the test_AggregatorFactory and checks both for equality and asserts equality on_the two queries.;public void testFromXContent() throws IOException {_        AB testAgg = createTestAggregatorBuilder()__        AggregatorFactories.Builder factoriesBuilder = AggregatorFactories.builder().addAggregator(testAgg)__        XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()))__        if (randomBoolean()) {_            builder.prettyPrint()__        }_        factoriesBuilder.toXContent(builder, ToXContent.EMPTY_PARAMS)__        XContentBuilder shuffled = shuffleXContent(builder)__        XContentParser parser = createParser(shuffled)__        AggregationBuilder newAgg = parse(parser)__        assertNotSame(newAgg, testAgg)__        assertEquals(testAgg, newAgg)__        assertEquals(testAgg.hashCode(), newAgg.hashCode())__    };generic,test,that,creates,new,aggregator,factory,from,the,test,aggregator,factory,and,checks,both,for,equality,and,asserts,equality,on,the,two,queries;public,void,test,from,xcontent,throws,ioexception,ab,test,agg,create,test,aggregator,builder,aggregator,factories,builder,factories,builder,aggregator,factories,builder,add,aggregator,test,agg,xcontent,builder,builder,xcontent,factory,content,builder,random,from,xcontent,type,values,if,random,boolean,builder,pretty,print,factories,builder,to,xcontent,builder,to,xcontent,xcontent,builder,shuffled,shuffle,xcontent,builder,xcontent,parser,parser,create,parser,shuffled,aggregation,builder,new,agg,parse,parser,assert,not,same,new,agg,test,agg,assert,equals,test,agg,new,agg,assert,equals,test,agg,hash,code,new,agg,hash,code
BaseAggregationTestCase -> public void testSerialization() throws IOException;1524684173;Test serialization and deserialization of the test AggregatorFactory.;public void testSerialization() throws IOException {_        AB testAgg = createTestAggregatorBuilder()__        try (BytesStreamOutput output = new BytesStreamOutput()) {_            output.writeNamedWriteable(testAgg)__            try (StreamInput in = new NamedWriteableAwareStreamInput(output.bytes().streamInput(), namedWriteableRegistry)) {_                AggregationBuilder deserialized = in.readNamedWriteable(AggregationBuilder.class)__                assertEquals(testAgg, deserialized)__                assertEquals(testAgg.hashCode(), deserialized.hashCode())__                assertNotSame(testAgg, deserialized)__            }_        }_    };test,serialization,and,deserialization,of,the,test,aggregator,factory;public,void,test,serialization,throws,ioexception,ab,test,agg,create,test,aggregator,builder,try,bytes,stream,output,output,new,bytes,stream,output,output,write,named,writeable,test,agg,try,stream,input,in,new,named,writeable,aware,stream,input,output,bytes,stream,input,named,writeable,registry,aggregation,builder,deserialized,in,read,named,writeable,aggregation,builder,class,assert,equals,test,agg,deserialized,assert,equals,test,agg,hash,code,deserialized,hash,code,assert,not,same,test,agg,deserialized
BaseAggregationTestCase -> public void testSerialization() throws IOException;1526510804;Test serialization and deserialization of the test AggregatorFactory.;public void testSerialization() throws IOException {_        AB testAgg = createTestAggregatorBuilder()__        try (BytesStreamOutput output = new BytesStreamOutput()) {_            output.writeNamedWriteable(testAgg)__            try (StreamInput in = new NamedWriteableAwareStreamInput(output.bytes().streamInput(), namedWriteableRegistry())) {_                AggregationBuilder deserialized = in.readNamedWriteable(AggregationBuilder.class)__                assertEquals(testAgg, deserialized)__                assertEquals(testAgg.hashCode(), deserialized.hashCode())__                assertNotSame(testAgg, deserialized)__            }_        }_    };test,serialization,and,deserialization,of,the,test,aggregator,factory;public,void,test,serialization,throws,ioexception,ab,test,agg,create,test,aggregator,builder,try,bytes,stream,output,output,new,bytes,stream,output,output,write,named,writeable,test,agg,try,stream,input,in,new,named,writeable,aware,stream,input,output,bytes,stream,input,named,writeable,registry,aggregation,builder,deserialized,in,read,named,writeable,aggregation,builder,class,assert,equals,test,agg,deserialized,assert,equals,test,agg,hash,code,deserialized,hash,code,assert,not,same,test,agg,deserialized
BaseAggregationTestCase -> public void testSerialization() throws IOException;1528762805;Test serialization and deserialization of the test AggregatorFactory.;public void testSerialization() throws IOException {_        AB testAgg = createTestAggregatorBuilder()__        try (BytesStreamOutput output = new BytesStreamOutput()) {_            output.writeNamedWriteable(testAgg)__            try (StreamInput in = new NamedWriteableAwareStreamInput(output.bytes().streamInput(), namedWriteableRegistry())) {_                AggregationBuilder deserialized = in.readNamedWriteable(AggregationBuilder.class)__                assertEquals(testAgg, deserialized)__                assertEquals(testAgg.hashCode(), deserialized.hashCode())__                assertNotSame(testAgg, deserialized)__            }_        }_    };test,serialization,and,deserialization,of,the,test,aggregator,factory;public,void,test,serialization,throws,ioexception,ab,test,agg,create,test,aggregator,builder,try,bytes,stream,output,output,new,bytes,stream,output,output,write,named,writeable,test,agg,try,stream,input,in,new,named,writeable,aware,stream,input,output,bytes,stream,input,named,writeable,registry,aggregation,builder,deserialized,in,read,named,writeable,aggregation,builder,class,assert,equals,test,agg,deserialized,assert,equals,test,agg,hash,code,deserialized,hash,code,assert,not,same,test,agg,deserialized
BaseAggregationTestCase -> public void testSerialization() throws IOException;1538170812;Test serialization and deserialization of the test AggregatorFactory.;public void testSerialization() throws IOException {_        AB testAgg = createTestAggregatorBuilder()__        try (BytesStreamOutput output = new BytesStreamOutput()) {_            output.writeNamedWriteable(testAgg)__            try (StreamInput in = new NamedWriteableAwareStreamInput(output.bytes().streamInput(), namedWriteableRegistry())) {_                AggregationBuilder deserialized = in.readNamedWriteable(AggregationBuilder.class)__                assertEquals(testAgg, deserialized)__                assertEquals(testAgg.hashCode(), deserialized.hashCode())__                assertNotSame(testAgg, deserialized)__            }_        }_    };test,serialization,and,deserialization,of,the,test,aggregator,factory;public,void,test,serialization,throws,ioexception,ab,test,agg,create,test,aggregator,builder,try,bytes,stream,output,output,new,bytes,stream,output,output,write,named,writeable,test,agg,try,stream,input,in,new,named,writeable,aware,stream,input,output,bytes,stream,input,named,writeable,registry,aggregation,builder,deserialized,in,read,named,writeable,aggregation,builder,class,assert,equals,test,agg,deserialized,assert,equals,test,agg,hash,code,deserialized,hash,code,assert,not,same,test,agg,deserialized
BaseAggregationTestCase -> public void testSerialization() throws IOException;1546446782;Test serialization and deserialization of the test AggregatorFactory.;public void testSerialization() throws IOException {_        AB testAgg = createTestAggregatorBuilder()__        try (BytesStreamOutput output = new BytesStreamOutput()) {_            output.writeNamedWriteable(testAgg)__            try (StreamInput in = new NamedWriteableAwareStreamInput(output.bytes().streamInput(), namedWriteableRegistry())) {_                AggregationBuilder deserialized = in.readNamedWriteable(AggregationBuilder.class)__                assertEquals(testAgg, deserialized)__                assertEquals(testAgg.hashCode(), deserialized.hashCode())__                assertNotSame(testAgg, deserialized)__            }_        }_    };test,serialization,and,deserialization,of,the,test,aggregator,factory;public,void,test,serialization,throws,ioexception,ab,test,agg,create,test,aggregator,builder,try,bytes,stream,output,output,new,bytes,stream,output,output,write,named,writeable,test,agg,try,stream,input,in,new,named,writeable,aware,stream,input,output,bytes,stream,input,named,writeable,registry,aggregation,builder,deserialized,in,read,named,writeable,aggregation,builder,class,assert,equals,test,agg,deserialized,assert,equals,test,agg,hash,code,deserialized,hash,code,assert,not,same,test,agg,deserialized
BaseAggregationTestCase -> public void testSerializationMulti() throws IOException;1538170812;Create at least 2 aggregations and test equality and hash;public void testSerializationMulti() throws IOException {_        AggregatorFactories.Builder builder = AggregatorFactories.builder()__        List<AB> testAggs = createTestAggregatorBuilders()___        for (AB testAgg : testAggs) {_            builder.addAggregator(testAgg)__        }__        try (BytesStreamOutput output = new BytesStreamOutput()) {_            builder.writeTo(output)___            try (StreamInput in = new NamedWriteableAwareStreamInput(output.bytes().streamInput(), namedWriteableRegistry())) {_                AggregatorFactories.Builder newBuilder = new AggregatorFactories.Builder(in)___                assertEquals(builder, newBuilder)__                assertEquals(builder.hashCode(), newBuilder.hashCode())__                assertNotSame(builder, newBuilder)__            }_        }_    };create,at,least,2,aggregations,and,test,equality,and,hash;public,void,test,serialization,multi,throws,ioexception,aggregator,factories,builder,builder,aggregator,factories,builder,list,ab,test,aggs,create,test,aggregator,builders,for,ab,test,agg,test,aggs,builder,add,aggregator,test,agg,try,bytes,stream,output,output,new,bytes,stream,output,builder,write,to,output,try,stream,input,in,new,named,writeable,aware,stream,input,output,bytes,stream,input,named,writeable,registry,aggregator,factories,builder,new,builder,new,aggregator,factories,builder,in,assert,equals,builder,new,builder,assert,equals,builder,hash,code,new,builder,hash,code,assert,not,same,builder,new,builder
BaseAggregationTestCase -> public void testSerializationMulti() throws IOException;1546446782;Create at least 2 aggregations and test equality and hash;public void testSerializationMulti() throws IOException {_        AggregatorFactories.Builder builder = AggregatorFactories.builder()__        List<AB> testAggs = createTestAggregatorBuilders()___        for (AB testAgg : testAggs) {_            builder.addAggregator(testAgg)__        }__        try (BytesStreamOutput output = new BytesStreamOutput()) {_            builder.writeTo(output)___            try (StreamInput in = new NamedWriteableAwareStreamInput(output.bytes().streamInput(), namedWriteableRegistry())) {_                AggregatorFactories.Builder newBuilder = new AggregatorFactories.Builder(in)___                assertEquals(builder, newBuilder)__                assertEquals(builder.hashCode(), newBuilder.hashCode())__                assertNotSame(builder, newBuilder)__            }_        }_    };create,at,least,2,aggregations,and,test,equality,and,hash;public,void,test,serialization,multi,throws,ioexception,aggregator,factories,builder,builder,aggregator,factories,builder,list,ab,test,aggs,create,test,aggregator,builders,for,ab,test,agg,test,aggs,builder,add,aggregator,test,agg,try,bytes,stream,output,output,new,bytes,stream,output,builder,write,to,output,try,stream,input,in,new,named,writeable,aware,stream,input,output,bytes,stream,input,named,writeable,registry,aggregator,factories,builder,new,builder,new,aggregator,factories,builder,in,assert,equals,builder,new,builder,assert,equals,builder,hash,code,new,builder,hash,code,assert,not,same,builder,new,builder
