commented;modifiers;parameterAmount;loc;comment;code
true;static;1;12;/**  * Parse a {@link SetupSection} if the next field is {@code skip}, otherwise returns {@link SetupSection#EMPTY}.  */ ;/**  * Parse a {@link SetupSection} if the next field is {@code skip}, otherwise returns {@link SetupSection#EMPTY}.  */ static SetupSection parseIfNext(XContentParser parser) throws IOException {     ParserUtils.advanceToFieldName(parser).     if ("setup".equals(parser.currentName())) {         parser.nextToken().         SetupSection section = parse(parser).         parser.nextToken().         return section.     }     return EMPTY. }
false;public,static;1;18;;public static SetupSection parse(XContentParser parser) throws IOException {     SkipSection skipSection = SkipSection.parseIfNext(parser).     List<ExecutableSection> executableSections = new ArrayList<>().     while (parser.currentToken() != XContentParser.Token.END_ARRAY) {         ParserUtils.advanceToFieldName(parser).         if ("do".equals(parser.currentName())) {             executableSections.add(DoSection.parse(parser)).         } else if ("set".equals(parser.currentName())) {             executableSections.add(SetSection.parse(parser)).         } else {             throw new IllegalArgumentException("section [" + parser.currentName() + "] not supported within setup section").         }         parser.nextToken().     }     parser.nextToken().     return new SetupSection(skipSection, executableSections). }
false;public;0;3;;public SkipSection getSkipSection() {     return skipSection. }
false;public;0;3;;public List<ExecutableSection> getExecutableSections() {     return executableSections. }
false;public;0;3;;public boolean isEmpty() {     return EMPTY.equals(this). }
