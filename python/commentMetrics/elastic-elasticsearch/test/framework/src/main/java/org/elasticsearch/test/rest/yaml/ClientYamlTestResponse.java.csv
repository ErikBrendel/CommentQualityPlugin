commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public int getStatusCode() {     return response.getStatusLine().getStatusCode(). }
false;public;0;3;;public String getReasonPhrase() {     return response.getStatusLine().getReasonPhrase(). }
true;public;0;9;/**  * Get a list of all of the values of all warning headers returned in the response.  */ ;/**  * Get a list of all of the values of all warning headers returned in the response.  */ public List<String> getWarningHeaders() {     List<String> warningHeaders = new ArrayList<>().     for (Header header : response.getHeaders()) {         if (header.getName().equals("Warning")) {             warningHeaders.add(header.getValue()).         }     }     return warningHeaders. }
true;public;0;8;/**  * Returns the body properly parsed depending on the content type.  * Might be a string or a json object parsed as a map.  */ ;/**  * Returns the body properly parsed depending on the content type.  * Might be a string or a json object parsed as a map.  */ public Object getBody() throws IOException {     if (parsedResponse != null) {         return parsedResponse.evaluate("").     }     // we only get here if there is no response body or the body is text     assert bodyContentType == null.     return getBodyAsString(). }
true;public;0;20;/**  * Returns the body as a string  */ ;/**  * Returns the body as a string  */ public String getBodyAsString() {     if (bodyAsString == null && body != null) {         // content-type null means that text was returned         if (bodyContentType == null || bodyContentType == XContentType.JSON || bodyContentType == XContentType.YAML) {             bodyAsString = new String(body, StandardCharsets.UTF_8).         } else {             // if the body is in a binary format and gets requested as a string (e.g. to log a test failure), we convert it to json             try (XContentBuilder jsonBuilder = XContentFactory.jsonBuilder()) {                 try (XContentParser parser = bodyContentType.xContent().createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, body)) {                     jsonBuilder.copyCurrentStructure(parser).                 }                 bodyAsString = Strings.toString(jsonBuilder).             } catch (IOException e) {                 throw new UncheckedIOException("unable to convert response body to a string format", e).             }         }     }     return bodyAsString. }
false;public;0;3;;public boolean isError() {     return response.getStatusLine().getStatusCode() >= 400. }
true;public;1;3;/**  * Parses the response body and extracts a specific value from it (identified by the provided path)  */ ;/**  * Parses the response body and extracts a specific value from it (identified by the provided path)  */ public Object evaluate(String path) throws IOException {     return evaluate(path, Stash.EMPTY). }
true;public;2;17;/**  * Parses the response body and extracts a specific value from it (identified by the provided path)  */ ;/**  * Parses the response body and extracts a specific value from it (identified by the provided path)  */ public Object evaluate(String path, Stash stash) throws IOException {     if (response == null) {         return null.     }     if (parsedResponse == null) {         // is_false: '' means the response had no body but the client returned false (caused by 404)         if ("".equals(path) && HttpHead.METHOD_NAME.equals(response.getRequestLine().getMethod())) {             return isError() == false.         }         return null.     }     return parsedResponse.evaluate(path, stash). }
