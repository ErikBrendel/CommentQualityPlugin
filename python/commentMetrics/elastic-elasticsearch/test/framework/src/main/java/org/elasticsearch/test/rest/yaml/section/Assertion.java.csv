commented;modifiers;parameterAmount;loc;comment;code
false;public,final;0;3;;public final String getField() {     return field. }
false;public,final;0;3;;public final Object getExpectedValue() {     return expectedValue. }
false;protected,final;1;12;;protected final Object resolveExpectedValue(ClientYamlTestExecutionContext executionContext) throws IOException {     if (expectedValue instanceof Map) {         @SuppressWarnings("unchecked")         Map<String, Object> map = (Map<String, Object>) expectedValue.         return executionContext.stash().replaceStashedValues(map).     }     if (executionContext.stash().containsStashedValue(expectedValue)) {         return executionContext.stash().getValue(expectedValue.toString()).     }     return expectedValue. }
false;protected,final;1;6;;protected final Object getActualValue(ClientYamlTestExecutionContext executionContext) throws IOException {     if (executionContext.stash().containsStashedValue(field)) {         return executionContext.stash().getValue(field).     }     return executionContext.response(field). }
false;public;0;4;;@Override public XContentLocation getLocation() {     return location. }
false;public,final;1;4;;@Override public final void execute(ClientYamlTestExecutionContext executionContext) throws IOException {     doAssert(getActualValue(executionContext), resolveExpectedValue(executionContext)). }
true;protected,abstract;2;1;/**  * Executes the assertion comparing the actual value (parsed from the response) with the expected one  */ ;/**  * Executes the assertion comparing the actual value (parsed from the response) with the expected one  */ protected abstract void doAssert(Object actualValue, Object expectedValue).
true;protected;1;3;/**  * a utility to get the class of an object, protecting for null (i.e., returning null if the input is null)  */ ;/**  * a utility to get the class of an object, protecting for null (i.e., returning null if the input is null)  */ protected Class<?> safeClass(Object o) {     return o == null ? null : o.getClass(). }
