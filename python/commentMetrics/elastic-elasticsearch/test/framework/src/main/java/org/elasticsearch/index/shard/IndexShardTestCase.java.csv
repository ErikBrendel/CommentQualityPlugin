# id;timestamp;commentText;codeText;commentWords;codeWords
IndexShardTestCase -> protected void allowShardFailures();1531910483;by default, tests will fail if any shard created by this class fails. Tests that cause failures by design_can call this method to ignore those failures;protected void allowShardFailures() {_        failOnShardFailures.set(false)__    };by,default,tests,will,fail,if,any,shard,created,by,this,class,fails,tests,that,cause,failures,by,design,can,call,this,method,to,ignore,those,failures;protected,void,allow,shard,failures,fail,on,shard,failures,set,false
IndexShardTestCase -> protected void allowShardFailures();1532434432;by default, tests will fail if any shard created by this class fails. Tests that cause failures by design_can call this method to ignore those failures;protected void allowShardFailures() {_        failOnShardFailures.set(false)__    };by,default,tests,will,fail,if,any,shard,created,by,this,class,fails,tests,that,cause,failures,by,design,can,call,this,method,to,ignore,those,failures;protected,void,allow,shard,failures,fail,on,shard,failures,set,false
IndexShardTestCase -> protected void allowShardFailures();1533295538;by default, tests will fail if any shard created by this class fails. Tests that cause failures by design_can call this method to ignore those failures;protected void allowShardFailures() {_        failOnShardFailures.set(false)__    };by,default,tests,will,fail,if,any,shard,created,by,this,class,fails,tests,that,cause,failures,by,design,can,call,this,method,to,ignore,those,failures;protected,void,allow,shard,failures,fail,on,shard,failures,set,false
IndexShardTestCase -> protected void allowShardFailures();1535723122;by default, tests will fail if any shard created by this class fails. Tests that cause failures by design_can call this method to ignore those failures;protected void allowShardFailures() {_        failOnShardFailures.set(false)__    };by,default,tests,will,fail,if,any,shard,created,by,this,class,fails,tests,that,cause,failures,by,design,can,call,this,method,to,ignore,those,failures;protected,void,allow,shard,failures,fail,on,shard,failures,set,false
IndexShardTestCase -> protected void allowShardFailures();1535965276;by default, tests will fail if any shard created by this class fails. Tests that cause failures by design_can call this method to ignore those failures;protected void allowShardFailures() {_        failOnShardFailures.set(false)__    };by,default,tests,will,fail,if,any,shard,created,by,this,class,fails,tests,that,cause,failures,by,design,can,call,this,method,to,ignore,those,failures;protected,void,allow,shard,failures,fail,on,shard,failures,set,false
IndexShardTestCase -> protected void allowShardFailures();1536611444;by default, tests will fail if any shard created by this class fails. Tests that cause failures by design_can call this method to ignore those failures;protected void allowShardFailures() {_        failOnShardFailures.set(false)__    };by,default,tests,will,fail,if,any,shard,created,by,this,class,fails,tests,that,cause,failures,by,design,can,call,this,method,to,ignore,those,failures;protected,void,allow,shard,failures,fail,on,shard,failures,set,false
IndexShardTestCase -> protected void allowShardFailures();1536828374;by default, tests will fail if any shard created by this class fails. Tests that cause failures by design_can call this method to ignore those failures;protected void allowShardFailures() {_        failOnShardFailures.set(false)__    };by,default,tests,will,fail,if,any,shard,created,by,this,class,fails,tests,that,cause,failures,by,design,can,call,this,method,to,ignore,those,failures;protected,void,allow,shard,failures,fail,on,shard,failures,set,false
IndexShardTestCase -> protected void allowShardFailures();1537371806;by default, tests will fail if any shard created by this class fails. Tests that cause failures by design_can call this method to ignore those failures;protected void allowShardFailures() {_        failOnShardFailures.set(false)__    };by,default,tests,will,fail,if,any,shard,created,by,this,class,fails,tests,that,cause,failures,by,design,can,call,this,method,to,ignore,those,failures;protected,void,allow,shard,failures,fail,on,shard,failures,set,false
IndexShardTestCase -> protected void allowShardFailures();1537806831;by default, tests will fail if any shard created by this class fails. Tests that cause failures by design_can call this method to ignore those failures;protected void allowShardFailures() {_        failOnShardFailures.set(false)__    };by,default,tests,will,fail,if,any,shard,created,by,this,class,fails,tests,that,cause,failures,by,design,can,call,this,method,to,ignore,those,failures;protected,void,allow,shard,failures,fail,on,shard,failures,set,false
IndexShardTestCase -> protected void allowShardFailures();1538067637;by default, tests will fail if any shard created by this class fails. Tests that cause failures by design_can call this method to ignore those failures;protected void allowShardFailures() {_        failOnShardFailures.set(false)__    };by,default,tests,will,fail,if,any,shard,created,by,this,class,fails,tests,that,cause,failures,by,design,can,call,this,method,to,ignore,those,failures;protected,void,allow,shard,failures,fail,on,shard,failures,set,false
IndexShardTestCase -> protected void allowShardFailures();1542697404;by default, tests will fail if any shard created by this class fails. Tests that cause failures by design_can call this method to ignore those failures;protected void allowShardFailures() {_        failOnShardFailures.set(false)__    };by,default,tests,will,fail,if,any,shard,created,by,this,class,fails,tests,that,cause,failures,by,design,can,call,this,method,to,ignore,those,failures;protected,void,allow,shard,failures,fail,on,shard,failures,set,false
IndexShardTestCase -> protected void allowShardFailures();1544783963;by default, tests will fail if any shard created by this class fails. Tests that cause failures by design_can call this method to ignore those failures;protected void allowShardFailures() {_        failOnShardFailures.set(false)__    };by,default,tests,will,fail,if,any,shard,created,by,this,class,fails,tests,that,cause,failures,by,design,can,call,this,method,to,ignore,those,failures;protected,void,allow,shard,failures,fail,on,shard,failures,set,false
IndexShardTestCase -> protected void allowShardFailures();1544893197;by default, tests will fail if any shard created by this class fails. Tests that cause failures by design_can call this method to ignore those failures;protected void allowShardFailures() {_        failOnShardFailures.set(false)__    };by,default,tests,will,fail,if,any,shard,created,by,this,class,fails,tests,that,cause,failures,by,design,can,call,this,method,to,ignore,those,failures;protected,void,allow,shard,failures,fail,on,shard,failures,set,false
IndexShardTestCase -> protected void allowShardFailures();1545678410;by default, tests will fail if any shard created by this class fails. Tests that cause failures by design_can call this method to ignore those failures;protected void allowShardFailures() {_        failOnShardFailures.set(false)__    };by,default,tests,will,fail,if,any,shard,created,by,this,class,fails,tests,that,cause,failures,by,design,can,call,this,method,to,ignore,those,failures;protected,void,allow,shard,failures,fail,on,shard,failures,set,false
IndexShardTestCase -> protected void allowShardFailures();1546927432;by default, tests will fail if any shard created by this class fails. Tests that cause failures by design_can call this method to ignore those failures;protected void allowShardFailures() {_        failOnShardFailures.set(false)__    };by,default,tests,will,fail,if,any,shard,created,by,this,class,fails,tests,that,cause,failures,by,design,can,call,this,method,to,ignore,those,failures;protected,void,allow,shard,failures,fail,on,shard,failures,set,false
IndexShardTestCase -> protected void allowShardFailures();1547315388;by default, tests will fail if any shard created by this class fails. Tests that cause failures by design_can call this method to ignore those failures;protected void allowShardFailures() {_        failOnShardFailures.set(false)__    };by,default,tests,will,fail,if,any,shard,created,by,this,class,fails,tests,that,cause,failures,by,design,can,call,this,method,to,ignore,those,failures;protected,void,allow,shard,failures,fail,on,shard,failures,set,false
IndexShardTestCase -> protected void allowShardFailures();1547496475;by default, tests will fail if any shard created by this class fails. Tests that cause failures by design_can call this method to ignore those failures;protected void allowShardFailures() {_        failOnShardFailures.set(false)__    };by,default,tests,will,fail,if,any,shard,created,by,this,class,fails,tests,that,cause,failures,by,design,can,call,this,method,to,ignore,those,failures;protected,void,allow,shard,failures,fail,on,shard,failures,set,false
IndexShardTestCase -> protected void allowShardFailures();1547496886;by default, tests will fail if any shard created by this class fails. Tests that cause failures by design_can call this method to ignore those failures;protected void allowShardFailures() {_        failOnShardFailures.set(false)__    };by,default,tests,will,fail,if,any,shard,created,by,this,class,fails,tests,that,cause,failures,by,design,can,call,this,method,to,ignore,those,failures;protected,void,allow,shard,failures,fail,on,shard,failures,set,false
IndexShardTestCase -> protected void allowShardFailures();1547520324;by default, tests will fail if any shard created by this class fails. Tests that cause failures by design_can call this method to ignore those failures;protected void allowShardFailures() {_        failOnShardFailures.set(false)__    };by,default,tests,will,fail,if,any,shard,created,by,this,class,fails,tests,that,cause,failures,by,design,can,call,this,method,to,ignore,those,failures;protected,void,allow,shard,failures,fail,on,shard,failures,set,false
IndexShardTestCase -> protected void allowShardFailures();1547552901;by default, tests will fail if any shard created by this class fails. Tests that cause failures by design_can call this method to ignore those failures;protected void allowShardFailures() {_        failOnShardFailures.set(false)__    };by,default,tests,will,fail,if,any,shard,created,by,this,class,fails,tests,that,cause,failures,by,design,can,call,this,method,to,ignore,those,failures;protected,void,allow,shard,failures,fail,on,shard,failures,set,false
IndexShardTestCase -> protected void allowShardFailures();1548593396;by default, tests will fail if any shard created by this class fails. Tests that cause failures by design_can call this method to ignore those failures;protected void allowShardFailures() {_        failOnShardFailures.set(false)__    };by,default,tests,will,fail,if,any,shard,created,by,this,class,fails,tests,that,cause,failures,by,design,can,call,this,method,to,ignore,those,failures;protected,void,allow,shard,failures,fail,on,shard,failures,set,false
IndexShardTestCase -> protected void allowShardFailures();1549294529;by default, tests will fail if any shard created by this class fails. Tests that cause failures by design_can call this method to ignore those failures;protected void allowShardFailures() {_        failOnShardFailures.set(false)__    };by,default,tests,will,fail,if,any,shard,created,by,this,class,fails,tests,that,cause,failures,by,design,can,call,this,method,to,ignore,those,failures;protected,void,allow,shard,failures,fail,on,shard,failures,set,false
IndexShardTestCase -> protected void allowShardFailures();1550668107;by default, tests will fail if any shard created by this class fails. Tests that cause failures by design_can call this method to ignore those failures;protected void allowShardFailures() {_        failOnShardFailures.set(false)__    };by,default,tests,will,fail,if,any,shard,created,by,this,class,fails,tests,that,cause,failures,by,design,can,call,this,method,to,ignore,those,failures;protected,void,allow,shard,failures,fail,on,shard,failures,set,false
IndexShardTestCase -> public static Engine getEngine(IndexShard indexShard);1524684173;Helper method to access (package-protected) engine from tests;public static Engine getEngine(IndexShard indexShard) {_        return indexShard.getEngine()__    };helper,method,to,access,package,protected,engine,from,tests;public,static,engine,get,engine,index,shard,index,shard,return,index,shard,get,engine
IndexShardTestCase -> public static Engine getEngine(IndexShard indexShard);1525162917;Helper method to access (package-protected) engine from tests;public static Engine getEngine(IndexShard indexShard) {_        return indexShard.getEngine()__    };helper,method,to,access,package,protected,engine,from,tests;public,static,engine,get,engine,index,shard,index,shard,return,index,shard,get,engine
IndexShardTestCase -> public static Engine getEngine(IndexShard indexShard);1527583663;Helper method to access (package-protected) engine from tests;public static Engine getEngine(IndexShard indexShard) {_        return indexShard.getEngine()__    };helper,method,to,access,package,protected,engine,from,tests;public,static,engine,get,engine,index,shard,index,shard,return,index,shard,get,engine
IndexShardTestCase -> public static Engine getEngine(IndexShard indexShard);1528706846;Helper method to access (package-protected) engine from tests;public static Engine getEngine(IndexShard indexShard) {_        return indexShard.getEngine()__    };helper,method,to,access,package,protected,engine,from,tests;public,static,engine,get,engine,index,shard,index,shard,return,index,shard,get,engine
IndexShardTestCase -> public static Engine getEngine(IndexShard indexShard);1531179852;Helper method to access (package-protected) engine from tests;public static Engine getEngine(IndexShard indexShard) {_        return indexShard.getEngine()__    };helper,method,to,access,package,protected,engine,from,tests;public,static,engine,get,engine,index,shard,index,shard,return,index,shard,get,engine
IndexShardTestCase -> public static Engine getEngine(IndexShard indexShard);1531910483;Helper method to access (package-protected) engine from tests;public static Engine getEngine(IndexShard indexShard) {_        return indexShard.getEngine()__    };helper,method,to,access,package,protected,engine,from,tests;public,static,engine,get,engine,index,shard,index,shard,return,index,shard,get,engine
IndexShardTestCase -> public static Engine getEngine(IndexShard indexShard);1532434432;Helper method to access (package-protected) engine from tests;public static Engine getEngine(IndexShard indexShard) {_        return indexShard.getEngine()__    };helper,method,to,access,package,protected,engine,from,tests;public,static,engine,get,engine,index,shard,index,shard,return,index,shard,get,engine
IndexShardTestCase -> public static Engine getEngine(IndexShard indexShard);1533295538;Helper method to access (package-protected) engine from tests;public static Engine getEngine(IndexShard indexShard) {_        return indexShard.getEngine()__    };helper,method,to,access,package,protected,engine,from,tests;public,static,engine,get,engine,index,shard,index,shard,return,index,shard,get,engine
IndexShardTestCase -> public static Engine getEngine(IndexShard indexShard);1535723122;Helper method to access (package-protected) engine from tests;public static Engine getEngine(IndexShard indexShard) {_        return indexShard.getEngine()__    };helper,method,to,access,package,protected,engine,from,tests;public,static,engine,get,engine,index,shard,index,shard,return,index,shard,get,engine
IndexShardTestCase -> public static Engine getEngine(IndexShard indexShard);1535965276;Helper method to access (package-protected) engine from tests;public static Engine getEngine(IndexShard indexShard) {_        return indexShard.getEngine()__    };helper,method,to,access,package,protected,engine,from,tests;public,static,engine,get,engine,index,shard,index,shard,return,index,shard,get,engine
IndexShardTestCase -> public static Engine getEngine(IndexShard indexShard);1536611444;Helper method to access (package-protected) engine from tests;public static Engine getEngine(IndexShard indexShard) {_        return indexShard.getEngine()__    };helper,method,to,access,package,protected,engine,from,tests;public,static,engine,get,engine,index,shard,index,shard,return,index,shard,get,engine
IndexShardTestCase -> public static Engine getEngine(IndexShard indexShard);1536828374;Helper method to access (package-protected) engine from tests;public static Engine getEngine(IndexShard indexShard) {_        return indexShard.getEngine()__    };helper,method,to,access,package,protected,engine,from,tests;public,static,engine,get,engine,index,shard,index,shard,return,index,shard,get,engine
IndexShardTestCase -> public static Engine getEngine(IndexShard indexShard);1537371806;Helper method to access (package-protected) engine from tests;public static Engine getEngine(IndexShard indexShard) {_        return indexShard.getEngine()__    };helper,method,to,access,package,protected,engine,from,tests;public,static,engine,get,engine,index,shard,index,shard,return,index,shard,get,engine
IndexShardTestCase -> public static Engine getEngine(IndexShard indexShard);1537806831;Helper method to access (package-protected) engine from tests;public static Engine getEngine(IndexShard indexShard) {_        return indexShard.getEngine()__    };helper,method,to,access,package,protected,engine,from,tests;public,static,engine,get,engine,index,shard,index,shard,return,index,shard,get,engine
IndexShardTestCase -> public static Engine getEngine(IndexShard indexShard);1538067637;Helper method to access (package-protected) engine from tests;public static Engine getEngine(IndexShard indexShard) {_        return indexShard.getEngine()__    };helper,method,to,access,package,protected,engine,from,tests;public,static,engine,get,engine,index,shard,index,shard,return,index,shard,get,engine
IndexShardTestCase -> public static Engine getEngine(IndexShard indexShard);1542697404;Helper method to access (package-protected) engine from tests;public static Engine getEngine(IndexShard indexShard) {_        return indexShard.getEngine()__    };helper,method,to,access,package,protected,engine,from,tests;public,static,engine,get,engine,index,shard,index,shard,return,index,shard,get,engine
IndexShardTestCase -> public static Engine getEngine(IndexShard indexShard);1544783963;Helper method to access (package-protected) engine from tests;public static Engine getEngine(IndexShard indexShard) {_        return indexShard.getEngine()__    };helper,method,to,access,package,protected,engine,from,tests;public,static,engine,get,engine,index,shard,index,shard,return,index,shard,get,engine
IndexShardTestCase -> public static Engine getEngine(IndexShard indexShard);1544893197;Helper method to access (package-protected) engine from tests;public static Engine getEngine(IndexShard indexShard) {_        return indexShard.getEngine()__    };helper,method,to,access,package,protected,engine,from,tests;public,static,engine,get,engine,index,shard,index,shard,return,index,shard,get,engine
IndexShardTestCase -> public static Engine getEngine(IndexShard indexShard);1545678410;Helper method to access (package-protected) engine from tests;public static Engine getEngine(IndexShard indexShard) {_        return indexShard.getEngine()__    };helper,method,to,access,package,protected,engine,from,tests;public,static,engine,get,engine,index,shard,index,shard,return,index,shard,get,engine
IndexShardTestCase -> public static Engine getEngine(IndexShard indexShard);1546927432;Helper method to access (package-protected) engine from tests;public static Engine getEngine(IndexShard indexShard) {_        return indexShard.getEngine()__    };helper,method,to,access,package,protected,engine,from,tests;public,static,engine,get,engine,index,shard,index,shard,return,index,shard,get,engine
IndexShardTestCase -> public static Engine getEngine(IndexShard indexShard);1547315388;Helper method to access (package-protected) engine from tests;public static Engine getEngine(IndexShard indexShard) {_        return indexShard.getEngine()__    };helper,method,to,access,package,protected,engine,from,tests;public,static,engine,get,engine,index,shard,index,shard,return,index,shard,get,engine
IndexShardTestCase -> public static Engine getEngine(IndexShard indexShard);1547496475;Helper method to access (package-protected) engine from tests;public static Engine getEngine(IndexShard indexShard) {_        return indexShard.getEngine()__    };helper,method,to,access,package,protected,engine,from,tests;public,static,engine,get,engine,index,shard,index,shard,return,index,shard,get,engine
IndexShardTestCase -> public static Engine getEngine(IndexShard indexShard);1547496886;Helper method to access (package-protected) engine from tests;public static Engine getEngine(IndexShard indexShard) {_        return indexShard.getEngine()__    };helper,method,to,access,package,protected,engine,from,tests;public,static,engine,get,engine,index,shard,index,shard,return,index,shard,get,engine
IndexShardTestCase -> public static Engine getEngine(IndexShard indexShard);1547520324;Helper method to access (package-protected) engine from tests;public static Engine getEngine(IndexShard indexShard) {_        return indexShard.getEngine()__    };helper,method,to,access,package,protected,engine,from,tests;public,static,engine,get,engine,index,shard,index,shard,return,index,shard,get,engine
IndexShardTestCase -> public static Engine getEngine(IndexShard indexShard);1547552901;Helper method to access (package-protected) engine from tests;public static Engine getEngine(IndexShard indexShard) {_        return indexShard.getEngine()__    };helper,method,to,access,package,protected,engine,from,tests;public,static,engine,get,engine,index,shard,index,shard,return,index,shard,get,engine
IndexShardTestCase -> public static Engine getEngine(IndexShard indexShard);1548593396;Helper method to access (package-protected) engine from tests;public static Engine getEngine(IndexShard indexShard) {_        return indexShard.getEngine()__    };helper,method,to,access,package,protected,engine,from,tests;public,static,engine,get,engine,index,shard,index,shard,return,index,shard,get,engine
IndexShardTestCase -> public static Engine getEngine(IndexShard indexShard);1549294529;Helper method to access (package-protected) engine from tests;public static Engine getEngine(IndexShard indexShard) {_        return indexShard.getEngine()__    };helper,method,to,access,package,protected,engine,from,tests;public,static,engine,get,engine,index,shard,index,shard,return,index,shard,get,engine
IndexShardTestCase -> public static Engine getEngine(IndexShard indexShard);1550668107;Helper method to access (package-protected) engine from tests;public static Engine getEngine(IndexShard indexShard) {_        return indexShard.getEngine()__    };helper,method,to,access,package,protected,engine,from,tests;public,static,engine,get,engine,index,shard,index,shard,return,index,shard,get,engine
IndexShardTestCase -> protected IndexShard newStartedShard(boolean primary) throws IOException;1524684173;creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(boolean primary) throws IOException {_        IndexShard shard = newShard(primary)__        if (primary) {_            recoverShardFromStore(shard)__        } else {_            recoveryEmptyReplica(shard)__        }_        return shard__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,boolean,primary,throws,ioexception,index,shard,shard,new,shard,primary,if,primary,recover,shard,from,store,shard,else,recovery,empty,replica,shard,return,shard
IndexShardTestCase -> protected IndexShard newStartedShard(boolean primary) throws IOException;1525162917;creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(boolean primary) throws IOException {_        IndexShard shard = newShard(primary)__        if (primary) {_            recoverShardFromStore(shard)__        } else {_            recoveryEmptyReplica(shard)__        }_        return shard__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,boolean,primary,throws,ioexception,index,shard,shard,new,shard,primary,if,primary,recover,shard,from,store,shard,else,recovery,empty,replica,shard,return,shard
IndexShardTestCase -> protected IndexShard newStartedShard(boolean primary) throws IOException;1527583663;creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(boolean primary) throws IOException {_        IndexShard shard = newShard(primary)__        if (primary) {_            recoverShardFromStore(shard)__        } else {_            recoveryEmptyReplica(shard)__        }_        return shard__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,boolean,primary,throws,ioexception,index,shard,shard,new,shard,primary,if,primary,recover,shard,from,store,shard,else,recovery,empty,replica,shard,return,shard
IndexShardTestCase -> protected IndexShard newStartedShard(boolean primary) throws IOException;1528706846;creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(boolean primary) throws IOException {_        IndexShard shard = newShard(primary)__        if (primary) {_            recoverShardFromStore(shard)__        } else {_            recoveryEmptyReplica(shard)__        }_        return shard__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,boolean,primary,throws,ioexception,index,shard,shard,new,shard,primary,if,primary,recover,shard,from,store,shard,else,recovery,empty,replica,shard,return,shard
IndexShardTestCase -> protected IndexShard newStartedShard(boolean primary) throws IOException;1531179852;creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(boolean primary) throws IOException {_        IndexShard shard = newShard(primary)__        if (primary) {_            recoverShardFromStore(shard)__        } else {_            recoveryEmptyReplica(shard)__        }_        return shard__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,boolean,primary,throws,ioexception,index,shard,shard,new,shard,primary,if,primary,recover,shard,from,store,shard,else,recovery,empty,replica,shard,return,shard
IndexShardTestCase -> protected IndexShard newStartedShard(boolean primary) throws IOException;1531910483;creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(boolean primary) throws IOException {_        IndexShard shard = newShard(primary)__        if (primary) {_            recoverShardFromStore(shard)__        } else {_            recoveryEmptyReplica(shard, true)__        }_        return shard__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,boolean,primary,throws,ioexception,index,shard,shard,new,shard,primary,if,primary,recover,shard,from,store,shard,else,recovery,empty,replica,shard,true,return,shard
IndexShardTestCase -> protected IndexShard newStartedShard(boolean primary) throws IOException;1532434432;creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(boolean primary) throws IOException {_        IndexShard shard = newShard(primary)__        if (primary) {_            recoverShardFromStore(shard)__        } else {_            recoveryEmptyReplica(shard, true)__        }_        return shard__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,boolean,primary,throws,ioexception,index,shard,shard,new,shard,primary,if,primary,recover,shard,from,store,shard,else,recovery,empty,replica,shard,true,return,shard
IndexShardTestCase -> protected IndexShard newStartedShard(boolean primary) throws IOException;1533295538;creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(boolean primary) throws IOException {_        IndexShard shard = newShard(primary)__        if (primary) {_            recoverShardFromStore(shard)__        } else {_            recoveryEmptyReplica(shard, true)__        }_        return shard__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,boolean,primary,throws,ioexception,index,shard,shard,new,shard,primary,if,primary,recover,shard,from,store,shard,else,recovery,empty,replica,shard,true,return,shard
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException;1524684173;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException {_        closeShards(current)__        return newShard(_                routing,_                current.shardPath(),_                current.indexSettings().getIndexMetaData(),_                null,_                current.engineFactory,_                current.getGlobalCheckpointSyncer(),_            EMPTY_EVENT_LISTENER, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,indexing,operation,listener,listeners,throws,ioexception,close,shards,current,return,new,shard,routing,current,shard,path,current,index,settings,get,index,meta,data,null,current,engine,factory,current,get,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException;1525162917;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException {_        closeShards(current)__        return newShard(_                routing,_                current.shardPath(),_                current.indexSettings().getIndexMetaData(),_                null,_                current.engineFactory,_                current.getGlobalCheckpointSyncer(),_            EMPTY_EVENT_LISTENER, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,indexing,operation,listener,listeners,throws,ioexception,close,shards,current,return,new,shard,routing,current,shard,path,current,index,settings,get,index,meta,data,null,current,engine,factory,current,get,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException;1527583663;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException {_        closeShards(current)__        return newShard(_                routing,_                current.shardPath(),_                current.indexSettings().getIndexMetaData(),_                null,_                current.engineFactory,_                current.getGlobalCheckpointSyncer(),_            EMPTY_EVENT_LISTENER, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,indexing,operation,listener,listeners,throws,ioexception,close,shards,current,return,new,shard,routing,current,shard,path,current,index,settings,get,index,meta,data,null,current,engine,factory,current,get,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException;1528706846;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException {_        closeShards(current)__        return newShard(_                routing,_                current.shardPath(),_                current.indexSettings().getIndexMetaData(),_                null,_                current.engineFactory,_                current.getGlobalCheckpointSyncer(),_            EMPTY_EVENT_LISTENER, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,indexing,operation,listener,listeners,throws,ioexception,close,shards,current,return,new,shard,routing,current,shard,path,current,index,settings,get,index,meta,data,null,current,engine,factory,current,get,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException;1531179852;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException {_        closeShards(current)__        return newShard(_                routing,_                current.shardPath(),_                current.indexSettings().getIndexMetaData(),_                null,_                current.engineFactory,_                current.getGlobalCheckpointSyncer(),_            EMPTY_EVENT_LISTENER, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,indexing,operation,listener,listeners,throws,ioexception,close,shards,current,return,new,shard,routing,current,shard,path,current,index,settings,get,index,meta,data,null,current,engine,factory,current,get,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException;1531910483;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException {_        closeShards(current)__        return newShard(_                routing,_                current.shardPath(),_                current.indexSettings().getIndexMetaData(),_                null,_                current.engineFactory,_                current.getGlobalCheckpointSyncer(),_            EMPTY_EVENT_LISTENER, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,indexing,operation,listener,listeners,throws,ioexception,close,shards,current,return,new,shard,routing,current,shard,path,current,index,settings,get,index,meta,data,null,current,engine,factory,current,get,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException;1532434432;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException {_        closeShards(current)__        return newShard(_                routing,_                current.shardPath(),_                current.indexSettings().getIndexMetaData(),_                null,_                null,_                current.engineFactory,_                current.getGlobalCheckpointSyncer(),_            EMPTY_EVENT_LISTENER, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,indexing,operation,listener,listeners,throws,ioexception,close,shards,current,return,new,shard,routing,current,shard,path,current,index,settings,get,index,meta,data,null,null,current,engine,factory,current,get,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException;1533295538;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException {_        closeShards(current)__        return newShard(_                routing,_                current.shardPath(),_                current.indexSettings().getIndexMetaData(),_                null,_                null,_                current.engineFactory,_                current.getGlobalCheckpointSyncer(),_            EMPTY_EVENT_LISTENER, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,indexing,operation,listener,listeners,throws,ioexception,close,shards,current,return,new,shard,routing,current,shard,path,current,index,settings,get,index,meta,data,null,null,current,engine,factory,current,get,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException;1535723122;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException {_        closeShards(current)__        return newShard(_                routing,_                current.shardPath(),_                current.indexSettings().getIndexMetaData(),_                null,_                null,_                current.engineFactory,_                current.getGlobalCheckpointSyncer(),_            EMPTY_EVENT_LISTENER, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,indexing,operation,listener,listeners,throws,ioexception,close,shards,current,return,new,shard,routing,current,shard,path,current,index,settings,get,index,meta,data,null,null,current,engine,factory,current,get,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException;1535965276;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException {_        closeShards(current)__        return newShard(_                routing,_                current.shardPath(),_                current.indexSettings().getIndexMetaData(),_                null,_                null,_                current.engineFactory,_                current.getGlobalCheckpointSyncer(),_            EMPTY_EVENT_LISTENER, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,indexing,operation,listener,listeners,throws,ioexception,close,shards,current,return,new,shard,routing,current,shard,path,current,index,settings,get,index,meta,data,null,null,current,engine,factory,current,get,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException;1536611444;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException {_        closeShards(current)__        return newShard(_                routing,_                current.shardPath(),_                current.indexSettings().getIndexMetaData(),_                null,_                null,_                current.engineFactory,_                current.getGlobalCheckpointSyncer(),_            EMPTY_EVENT_LISTENER, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,indexing,operation,listener,listeners,throws,ioexception,close,shards,current,return,new,shard,routing,current,shard,path,current,index,settings,get,index,meta,data,null,null,current,engine,factory,current,get,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException;1536828374;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException {_        closeShards(current)__        return newShard(_                routing,_                current.shardPath(),_                current.indexSettings().getIndexMetaData(),_                null,_                null,_                current.engineFactory,_                current.getGlobalCheckpointSyncer(),_            EMPTY_EVENT_LISTENER, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,indexing,operation,listener,listeners,throws,ioexception,close,shards,current,return,new,shard,routing,current,shard,path,current,index,settings,get,index,meta,data,null,null,current,engine,factory,current,get,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException;1537371806;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException {_        closeShards(current)__        return newShard(_                routing,_                current.shardPath(),_                current.indexSettings().getIndexMetaData(),_                null,_                null,_                current.engineFactory,_                current.getGlobalCheckpointSyncer(),_            EMPTY_EVENT_LISTENER, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,indexing,operation,listener,listeners,throws,ioexception,close,shards,current,return,new,shard,routing,current,shard,path,current,index,settings,get,index,meta,data,null,null,current,engine,factory,current,get,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException;1537806831;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException {_        closeShards(current)__        return newShard(_                routing,_                current.shardPath(),_                current.indexSettings().getIndexMetaData(),_                null,_                null,_                current.engineFactory,_                current.getGlobalCheckpointSyncer(),_            EMPTY_EVENT_LISTENER, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,indexing,operation,listener,listeners,throws,ioexception,close,shards,current,return,new,shard,routing,current,shard,path,current,index,settings,get,index,meta,data,null,null,current,engine,factory,current,get,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException;1538067637;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException {_        closeShards(current)__        return newShard(_                routing,_                current.shardPath(),_                current.indexSettings().getIndexMetaData(),_                null,_                null,_                current.engineFactory,_                current.getGlobalCheckpointSyncer(),_            EMPTY_EVENT_LISTENER, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,indexing,operation,listener,listeners,throws,ioexception,close,shards,current,return,new,shard,routing,current,shard,path,current,index,settings,get,index,meta,data,null,null,current,engine,factory,current,get,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException;1542697404;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException {_        return reinitShard(current, routing, current.engineFactory, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,indexing,operation,listener,listeners,throws,ioexception,return,reinit,shard,current,routing,current,engine,factory,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException;1544783963;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException {_        return reinitShard(current, routing, current.engineFactory, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,indexing,operation,listener,listeners,throws,ioexception,return,reinit,shard,current,routing,current,engine,factory,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException;1544893197;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException {_        return reinitShard(current, routing, current.engineFactory, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,indexing,operation,listener,listeners,throws,ioexception,return,reinit,shard,current,routing,current,engine,factory,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException;1545678410;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException {_        return reinitShard(current, routing, current.engineFactory, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,indexing,operation,listener,listeners,throws,ioexception,return,reinit,shard,current,routing,current,engine,factory,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException;1546927432;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException {_        return reinitShard(current, routing, current.engineFactory, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,indexing,operation,listener,listeners,throws,ioexception,return,reinit,shard,current,routing,current,engine,factory,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException;1547315388;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException {_        return reinitShard(current, routing, current.engineFactory, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,indexing,operation,listener,listeners,throws,ioexception,return,reinit,shard,current,routing,current,engine,factory,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException;1547496475;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException {_        return reinitShard(current, routing, current.engineFactory, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,indexing,operation,listener,listeners,throws,ioexception,return,reinit,shard,current,routing,current,engine,factory,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException;1547496886;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException {_        return reinitShard(current, routing, current.engineFactory, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,indexing,operation,listener,listeners,throws,ioexception,return,reinit,shard,current,routing,current,engine,factory,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException;1547520324;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException {_        return reinitShard(current, routing, current.engineFactory, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,indexing,operation,listener,listeners,throws,ioexception,return,reinit,shard,current,routing,current,engine,factory,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException;1547552901;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException {_        return reinitShard(current, routing, current.engineFactory, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,indexing,operation,listener,listeners,throws,ioexception,return,reinit,shard,current,routing,current,engine,factory,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException;1548593396;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException {_        return reinitShard(current, routing, current.engineFactory, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,indexing,operation,listener,listeners,throws,ioexception,return,reinit,shard,current,routing,current,engine,factory,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException;1549294529;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException {_        return reinitShard(current, routing, current.engineFactory, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,indexing,operation,listener,listeners,throws,ioexception,return,reinit,shard,current,routing,current,engine,factory,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException;1550668107;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, IndexingOperationListener... listeners) throws IOException {_        return reinitShard(current, routing, current.engineFactory, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,indexing,operation,listener,listeners,throws,ioexception,return,reinit,shard,current,routing,current,engine,factory,listeners
IndexShardTestCase -> protected final void recoverUnstartedReplica(final IndexShard replica,                                                  final IndexShard primary,                                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                                  final boolean markAsRecovering,                                                  final Set<String> inSyncIds,                                                  final IndexShardRoutingTable routingTable) throws IOException;1531910483;Recovers a replica from the give primary, allow the user to supply a custom recovery target. A typical usage of a custom recovery_target is to assert things in the various stages of recovery.__Note: this method keeps the shard in {@link IndexShardState#POST_RECOVERY} and doesn't start it.__@param replica                the recovery target shard_@param primary                the recovery source shard_@param targetSupplier         supplies an instance of {@link RecoveryTarget}_@param markAsRecovering       set to {@code false} if the replica is marked as recovering;protected final void recoverUnstartedReplica(final IndexShard replica,_                                                 final IndexShard primary,_                                                 final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                                 final boolean markAsRecovering,_                                                 final Set<String> inSyncIds,_                                                 final IndexShardRoutingTable routingTable) throws IOException {_        final DiscoveryNode pNode = getFakeDiscoNode(primary.routingEntry().currentNodeId())__        final DiscoveryNode rNode = getFakeDiscoNode(replica.routingEntry().currentNodeId())__        if (markAsRecovering) {_            replica.markAsRecovering("remote", new RecoveryState(replica.routingEntry(), pNode, rNode))__        } else {_            assertEquals(replica.state(), IndexShardState.RECOVERING)__        }_        replica.prepareForIndexRecovery()__        final RecoveryTarget recoveryTarget = targetSupplier.apply(replica, pNode)__        final String targetAllocationId = recoveryTarget.indexShard().routingEntry().allocationId().getId()___        final Store.MetadataSnapshot snapshot = getMetadataSnapshotOrEmpty(replica)__        final long startingSeqNo__        if (snapshot.size() > 0) {_            startingSeqNo = PeerRecoveryTargetService.getStartingSeqNo(logger, recoveryTarget)__        } else {_            startingSeqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__        }__        final StartRecoveryRequest request = new StartRecoveryRequest(replica.shardId(), targetAllocationId,_            pNode, rNode, snapshot, replica.routingEntry().primary(), 0, startingSeqNo)__        final RecoverySourceHandler recovery = new RecoverySourceHandler(_            primary,_            recoveryTarget,_            request,_            (int) ByteSizeUnit.MB.toBytes(1),_            Settings.builder().put(Node.NODE_NAME_SETTING.getKey(), pNode.getName()).build())__        primary.updateShardState(primary.routingEntry(), primary.getPrimaryTerm(), null, currentClusterStateVersion.incrementAndGet(),_            inSyncIds, routingTable, Collections.emptySet())__        recovery.recoverToTarget()__        recoveryTarget.markAsDone()__    };recovers,a,replica,from,the,give,primary,allow,the,user,to,supply,a,custom,recovery,target,a,typical,usage,of,a,custom,recovery,target,is,to,assert,things,in,the,various,stages,of,recovery,note,this,method,keeps,the,shard,in,link,index,shard,state,and,doesn,t,start,it,param,replica,the,recovery,target,shard,param,primary,the,recovery,source,shard,param,target,supplier,supplies,an,instance,of,link,recovery,target,param,mark,as,recovering,set,to,code,false,if,the,replica,is,marked,as,recovering;protected,final,void,recover,unstarted,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,set,string,in,sync,ids,final,index,shard,routing,table,routing,table,throws,ioexception,final,discovery,node,p,node,get,fake,disco,node,primary,routing,entry,current,node,id,final,discovery,node,r,node,get,fake,disco,node,replica,routing,entry,current,node,id,if,mark,as,recovering,replica,mark,as,recovering,remote,new,recovery,state,replica,routing,entry,p,node,r,node,else,assert,equals,replica,state,index,shard,state,recovering,replica,prepare,for,index,recovery,final,recovery,target,recovery,target,target,supplier,apply,replica,p,node,final,string,target,allocation,id,recovery,target,index,shard,routing,entry,allocation,id,get,id,final,store,metadata,snapshot,snapshot,get,metadata,snapshot,or,empty,replica,final,long,starting,seq,no,if,snapshot,size,0,starting,seq,no,peer,recovery,target,service,get,starting,seq,no,logger,recovery,target,else,starting,seq,no,sequence,numbers,final,start,recovery,request,request,new,start,recovery,request,replica,shard,id,target,allocation,id,p,node,r,node,snapshot,replica,routing,entry,primary,0,starting,seq,no,final,recovery,source,handler,recovery,new,recovery,source,handler,primary,recovery,target,request,int,byte,size,unit,mb,to,bytes,1,settings,builder,put,node,get,key,p,node,get,name,build,primary,update,shard,state,primary,routing,entry,primary,get,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,routing,table,collections,empty,set,recovery,recover,to,target,recovery,target,mark,as,done
IndexShardTestCase -> protected final void recoverUnstartedReplica(final IndexShard replica,                                                  final IndexShard primary,                                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                                  final boolean markAsRecovering,                                                  final Set<String> inSyncIds,                                                  final IndexShardRoutingTable routingTable) throws IOException;1532434432;Recovers a replica from the give primary, allow the user to supply a custom recovery target. A typical usage of a custom recovery_target is to assert things in the various stages of recovery.__Note: this method keeps the shard in {@link IndexShardState#POST_RECOVERY} and doesn't start it.__@param replica                the recovery target shard_@param primary                the recovery source shard_@param targetSupplier         supplies an instance of {@link RecoveryTarget}_@param markAsRecovering       set to {@code false} if the replica is marked as recovering;protected final void recoverUnstartedReplica(final IndexShard replica,_                                                 final IndexShard primary,_                                                 final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                                 final boolean markAsRecovering,_                                                 final Set<String> inSyncIds,_                                                 final IndexShardRoutingTable routingTable) throws IOException {_        final DiscoveryNode pNode = getFakeDiscoNode(primary.routingEntry().currentNodeId())__        final DiscoveryNode rNode = getFakeDiscoNode(replica.routingEntry().currentNodeId())__        if (markAsRecovering) {_            replica.markAsRecovering("remote", new RecoveryState(replica.routingEntry(), pNode, rNode))__        } else {_            assertEquals(replica.state(), IndexShardState.RECOVERING)__        }_        replica.prepareForIndexRecovery()__        final RecoveryTarget recoveryTarget = targetSupplier.apply(replica, pNode)__        final String targetAllocationId = recoveryTarget.indexShard().routingEntry().allocationId().getId()___        final Store.MetadataSnapshot snapshot = getMetadataSnapshotOrEmpty(replica)__        final long startingSeqNo__        if (snapshot.size() > 0) {_            startingSeqNo = PeerRecoveryTargetService.getStartingSeqNo(logger, recoveryTarget)__        } else {_            startingSeqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__        }__        final StartRecoveryRequest request = new StartRecoveryRequest(replica.shardId(), targetAllocationId,_            pNode, rNode, snapshot, replica.routingEntry().primary(), 0, startingSeqNo)__        final RecoverySourceHandler recovery = new RecoverySourceHandler(_            primary,_            recoveryTarget,_            request,_            (int) ByteSizeUnit.MB.toBytes(1),_            Settings.builder().put(Node.NODE_NAME_SETTING.getKey(), pNode.getName()).build())__        primary.updateShardState(primary.routingEntry(), primary.getPrimaryTerm(), null, currentClusterStateVersion.incrementAndGet(),_            inSyncIds, routingTable, Collections.emptySet())__        recovery.recoverToTarget()__        recoveryTarget.markAsDone()__    };recovers,a,replica,from,the,give,primary,allow,the,user,to,supply,a,custom,recovery,target,a,typical,usage,of,a,custom,recovery,target,is,to,assert,things,in,the,various,stages,of,recovery,note,this,method,keeps,the,shard,in,link,index,shard,state,and,doesn,t,start,it,param,replica,the,recovery,target,shard,param,primary,the,recovery,source,shard,param,target,supplier,supplies,an,instance,of,link,recovery,target,param,mark,as,recovering,set,to,code,false,if,the,replica,is,marked,as,recovering;protected,final,void,recover,unstarted,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,set,string,in,sync,ids,final,index,shard,routing,table,routing,table,throws,ioexception,final,discovery,node,p,node,get,fake,disco,node,primary,routing,entry,current,node,id,final,discovery,node,r,node,get,fake,disco,node,replica,routing,entry,current,node,id,if,mark,as,recovering,replica,mark,as,recovering,remote,new,recovery,state,replica,routing,entry,p,node,r,node,else,assert,equals,replica,state,index,shard,state,recovering,replica,prepare,for,index,recovery,final,recovery,target,recovery,target,target,supplier,apply,replica,p,node,final,string,target,allocation,id,recovery,target,index,shard,routing,entry,allocation,id,get,id,final,store,metadata,snapshot,snapshot,get,metadata,snapshot,or,empty,replica,final,long,starting,seq,no,if,snapshot,size,0,starting,seq,no,peer,recovery,target,service,get,starting,seq,no,logger,recovery,target,else,starting,seq,no,sequence,numbers,final,start,recovery,request,request,new,start,recovery,request,replica,shard,id,target,allocation,id,p,node,r,node,snapshot,replica,routing,entry,primary,0,starting,seq,no,final,recovery,source,handler,recovery,new,recovery,source,handler,primary,recovery,target,request,int,byte,size,unit,mb,to,bytes,1,settings,builder,put,node,get,key,p,node,get,name,build,primary,update,shard,state,primary,routing,entry,primary,get,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,routing,table,collections,empty,set,recovery,recover,to,target,recovery,target,mark,as,done
IndexShardTestCase -> protected final void recoverUnstartedReplica(final IndexShard replica,                                                  final IndexShard primary,                                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                                  final boolean markAsRecovering,                                                  final Set<String> inSyncIds,                                                  final IndexShardRoutingTable routingTable) throws IOException;1533295538;Recovers a replica from the give primary, allow the user to supply a custom recovery target. A typical usage of a custom recovery_target is to assert things in the various stages of recovery.__Note: this method keeps the shard in {@link IndexShardState#POST_RECOVERY} and doesn't start it.__@param replica                the recovery target shard_@param primary                the recovery source shard_@param targetSupplier         supplies an instance of {@link RecoveryTarget}_@param markAsRecovering       set to {@code false} if the replica is marked as recovering;protected final void recoverUnstartedReplica(final IndexShard replica,_                                                 final IndexShard primary,_                                                 final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                                 final boolean markAsRecovering,_                                                 final Set<String> inSyncIds,_                                                 final IndexShardRoutingTable routingTable) throws IOException {_        final DiscoveryNode pNode = getFakeDiscoNode(primary.routingEntry().currentNodeId())__        final DiscoveryNode rNode = getFakeDiscoNode(replica.routingEntry().currentNodeId())__        if (markAsRecovering) {_            replica.markAsRecovering("remote", new RecoveryState(replica.routingEntry(), pNode, rNode))__        } else {_            assertEquals(replica.state(), IndexShardState.RECOVERING)__        }_        replica.prepareForIndexRecovery()__        final RecoveryTarget recoveryTarget = targetSupplier.apply(replica, pNode)__        final String targetAllocationId = recoveryTarget.indexShard().routingEntry().allocationId().getId()___        final Store.MetadataSnapshot snapshot = getMetadataSnapshotOrEmpty(replica)__        final long startingSeqNo__        if (snapshot.size() > 0) {_            startingSeqNo = PeerRecoveryTargetService.getStartingSeqNo(logger, recoveryTarget)__        } else {_            startingSeqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__        }__        final StartRecoveryRequest request = new StartRecoveryRequest(replica.shardId(), targetAllocationId,_            pNode, rNode, snapshot, replica.routingEntry().primary(), 0, startingSeqNo)__        final RecoverySourceHandler recovery = new RecoverySourceHandler(_            primary,_            recoveryTarget,_            request,_            (int) ByteSizeUnit.MB.toBytes(1),_            Settings.builder().put(Node.NODE_NAME_SETTING.getKey(), pNode.getName()).build())__        primary.updateShardState(primary.routingEntry(), primary.getPendingPrimaryTerm(), null,_            currentClusterStateVersion.incrementAndGet(), inSyncIds, routingTable, Collections.emptySet())__        recovery.recoverToTarget()__        recoveryTarget.markAsDone()__    };recovers,a,replica,from,the,give,primary,allow,the,user,to,supply,a,custom,recovery,target,a,typical,usage,of,a,custom,recovery,target,is,to,assert,things,in,the,various,stages,of,recovery,note,this,method,keeps,the,shard,in,link,index,shard,state,and,doesn,t,start,it,param,replica,the,recovery,target,shard,param,primary,the,recovery,source,shard,param,target,supplier,supplies,an,instance,of,link,recovery,target,param,mark,as,recovering,set,to,code,false,if,the,replica,is,marked,as,recovering;protected,final,void,recover,unstarted,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,set,string,in,sync,ids,final,index,shard,routing,table,routing,table,throws,ioexception,final,discovery,node,p,node,get,fake,disco,node,primary,routing,entry,current,node,id,final,discovery,node,r,node,get,fake,disco,node,replica,routing,entry,current,node,id,if,mark,as,recovering,replica,mark,as,recovering,remote,new,recovery,state,replica,routing,entry,p,node,r,node,else,assert,equals,replica,state,index,shard,state,recovering,replica,prepare,for,index,recovery,final,recovery,target,recovery,target,target,supplier,apply,replica,p,node,final,string,target,allocation,id,recovery,target,index,shard,routing,entry,allocation,id,get,id,final,store,metadata,snapshot,snapshot,get,metadata,snapshot,or,empty,replica,final,long,starting,seq,no,if,snapshot,size,0,starting,seq,no,peer,recovery,target,service,get,starting,seq,no,logger,recovery,target,else,starting,seq,no,sequence,numbers,final,start,recovery,request,request,new,start,recovery,request,replica,shard,id,target,allocation,id,p,node,r,node,snapshot,replica,routing,entry,primary,0,starting,seq,no,final,recovery,source,handler,recovery,new,recovery,source,handler,primary,recovery,target,request,int,byte,size,unit,mb,to,bytes,1,settings,builder,put,node,get,key,p,node,get,name,build,primary,update,shard,state,primary,routing,entry,primary,get,pending,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,routing,table,collections,empty,set,recovery,recover,to,target,recovery,target,mark,as,done
IndexShardTestCase -> protected final void recoverUnstartedReplica(final IndexShard replica,                                                  final IndexShard primary,                                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                                  final boolean markAsRecovering,                                                  final Set<String> inSyncIds,                                                  final IndexShardRoutingTable routingTable) throws IOException;1535723122;Recovers a replica from the give primary, allow the user to supply a custom recovery target. A typical usage of a custom recovery_target is to assert things in the various stages of recovery.__Note: this method keeps the shard in {@link IndexShardState#POST_RECOVERY} and doesn't start it.__@param replica                the recovery target shard_@param primary                the recovery source shard_@param targetSupplier         supplies an instance of {@link RecoveryTarget}_@param markAsRecovering       set to {@code false} if the replica is marked as recovering;protected final void recoverUnstartedReplica(final IndexShard replica,_                                                 final IndexShard primary,_                                                 final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                                 final boolean markAsRecovering,_                                                 final Set<String> inSyncIds,_                                                 final IndexShardRoutingTable routingTable) throws IOException {_        final DiscoveryNode pNode = getFakeDiscoNode(primary.routingEntry().currentNodeId())__        final DiscoveryNode rNode = getFakeDiscoNode(replica.routingEntry().currentNodeId())__        if (markAsRecovering) {_            replica.markAsRecovering("remote", new RecoveryState(replica.routingEntry(), pNode, rNode))__        } else {_            assertEquals(replica.state(), IndexShardState.RECOVERING)__        }_        replica.prepareForIndexRecovery()__        final RecoveryTarget recoveryTarget = targetSupplier.apply(replica, pNode)__        final String targetAllocationId = recoveryTarget.indexShard().routingEntry().allocationId().getId()___        final Store.MetadataSnapshot snapshot = getMetadataSnapshotOrEmpty(replica)__        final long startingSeqNo__        if (snapshot.size() > 0) {_            startingSeqNo = PeerRecoveryTargetService.getStartingSeqNo(logger, recoveryTarget)__        } else {_            startingSeqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__        }__        final StartRecoveryRequest request = new StartRecoveryRequest(replica.shardId(), targetAllocationId,_            pNode, rNode, snapshot, replica.routingEntry().primary(), 0, startingSeqNo)__        final RecoverySourceHandler recovery = new RecoverySourceHandler(_            primary,_            recoveryTarget,_            request,_            (int) ByteSizeUnit.MB.toBytes(1),_            Settings.builder().put(Node.NODE_NAME_SETTING.getKey(), pNode.getName()).build())__        primary.updateShardState(primary.routingEntry(), primary.getPendingPrimaryTerm(), null,_            currentClusterStateVersion.incrementAndGet(), inSyncIds, routingTable, Collections.emptySet())__        recovery.recoverToTarget()__        recoveryTarget.markAsDone()__    };recovers,a,replica,from,the,give,primary,allow,the,user,to,supply,a,custom,recovery,target,a,typical,usage,of,a,custom,recovery,target,is,to,assert,things,in,the,various,stages,of,recovery,note,this,method,keeps,the,shard,in,link,index,shard,state,and,doesn,t,start,it,param,replica,the,recovery,target,shard,param,primary,the,recovery,source,shard,param,target,supplier,supplies,an,instance,of,link,recovery,target,param,mark,as,recovering,set,to,code,false,if,the,replica,is,marked,as,recovering;protected,final,void,recover,unstarted,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,set,string,in,sync,ids,final,index,shard,routing,table,routing,table,throws,ioexception,final,discovery,node,p,node,get,fake,disco,node,primary,routing,entry,current,node,id,final,discovery,node,r,node,get,fake,disco,node,replica,routing,entry,current,node,id,if,mark,as,recovering,replica,mark,as,recovering,remote,new,recovery,state,replica,routing,entry,p,node,r,node,else,assert,equals,replica,state,index,shard,state,recovering,replica,prepare,for,index,recovery,final,recovery,target,recovery,target,target,supplier,apply,replica,p,node,final,string,target,allocation,id,recovery,target,index,shard,routing,entry,allocation,id,get,id,final,store,metadata,snapshot,snapshot,get,metadata,snapshot,or,empty,replica,final,long,starting,seq,no,if,snapshot,size,0,starting,seq,no,peer,recovery,target,service,get,starting,seq,no,logger,recovery,target,else,starting,seq,no,sequence,numbers,final,start,recovery,request,request,new,start,recovery,request,replica,shard,id,target,allocation,id,p,node,r,node,snapshot,replica,routing,entry,primary,0,starting,seq,no,final,recovery,source,handler,recovery,new,recovery,source,handler,primary,recovery,target,request,int,byte,size,unit,mb,to,bytes,1,settings,builder,put,node,get,key,p,node,get,name,build,primary,update,shard,state,primary,routing,entry,primary,get,pending,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,routing,table,collections,empty,set,recovery,recover,to,target,recovery,target,mark,as,done
IndexShardTestCase -> protected final void recoverUnstartedReplica(final IndexShard replica,                                                  final IndexShard primary,                                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                                  final boolean markAsRecovering,                                                  final Set<String> inSyncIds,                                                  final IndexShardRoutingTable routingTable) throws IOException;1535965276;Recovers a replica from the give primary, allow the user to supply a custom recovery target. A typical usage of a custom recovery_target is to assert things in the various stages of recovery.__Note: this method keeps the shard in {@link IndexShardState#POST_RECOVERY} and doesn't start it.__@param replica                the recovery target shard_@param primary                the recovery source shard_@param targetSupplier         supplies an instance of {@link RecoveryTarget}_@param markAsRecovering       set to {@code false} if the replica is marked as recovering;protected final void recoverUnstartedReplica(final IndexShard replica,_                                                 final IndexShard primary,_                                                 final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                                 final boolean markAsRecovering,_                                                 final Set<String> inSyncIds,_                                                 final IndexShardRoutingTable routingTable) throws IOException {_        final DiscoveryNode pNode = getFakeDiscoNode(primary.routingEntry().currentNodeId())__        final DiscoveryNode rNode = getFakeDiscoNode(replica.routingEntry().currentNodeId())__        if (markAsRecovering) {_            replica.markAsRecovering("remote", new RecoveryState(replica.routingEntry(), pNode, rNode))__        } else {_            assertEquals(replica.state(), IndexShardState.RECOVERING)__        }_        replica.prepareForIndexRecovery()__        final RecoveryTarget recoveryTarget = targetSupplier.apply(replica, pNode)__        final String targetAllocationId = recoveryTarget.indexShard().routingEntry().allocationId().getId()___        final Store.MetadataSnapshot snapshot = getMetadataSnapshotOrEmpty(replica)__        final long startingSeqNo__        if (snapshot.size() > 0) {_            startingSeqNo = PeerRecoveryTargetService.getStartingSeqNo(logger, recoveryTarget)__        } else {_            startingSeqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__        }__        final StartRecoveryRequest request = new StartRecoveryRequest(replica.shardId(), targetAllocationId,_            pNode, rNode, snapshot, replica.routingEntry().primary(), 0, startingSeqNo)__        final RecoverySourceHandler recovery = new RecoverySourceHandler(_                primary,_                recoveryTarget,_                request,_                (int) ByteSizeUnit.MB.toBytes(1))__        primary.updateShardState(primary.routingEntry(), primary.getPendingPrimaryTerm(), null,_            currentClusterStateVersion.incrementAndGet(), inSyncIds, routingTable, Collections.emptySet())__        recovery.recoverToTarget()__        recoveryTarget.markAsDone()__    };recovers,a,replica,from,the,give,primary,allow,the,user,to,supply,a,custom,recovery,target,a,typical,usage,of,a,custom,recovery,target,is,to,assert,things,in,the,various,stages,of,recovery,note,this,method,keeps,the,shard,in,link,index,shard,state,and,doesn,t,start,it,param,replica,the,recovery,target,shard,param,primary,the,recovery,source,shard,param,target,supplier,supplies,an,instance,of,link,recovery,target,param,mark,as,recovering,set,to,code,false,if,the,replica,is,marked,as,recovering;protected,final,void,recover,unstarted,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,set,string,in,sync,ids,final,index,shard,routing,table,routing,table,throws,ioexception,final,discovery,node,p,node,get,fake,disco,node,primary,routing,entry,current,node,id,final,discovery,node,r,node,get,fake,disco,node,replica,routing,entry,current,node,id,if,mark,as,recovering,replica,mark,as,recovering,remote,new,recovery,state,replica,routing,entry,p,node,r,node,else,assert,equals,replica,state,index,shard,state,recovering,replica,prepare,for,index,recovery,final,recovery,target,recovery,target,target,supplier,apply,replica,p,node,final,string,target,allocation,id,recovery,target,index,shard,routing,entry,allocation,id,get,id,final,store,metadata,snapshot,snapshot,get,metadata,snapshot,or,empty,replica,final,long,starting,seq,no,if,snapshot,size,0,starting,seq,no,peer,recovery,target,service,get,starting,seq,no,logger,recovery,target,else,starting,seq,no,sequence,numbers,final,start,recovery,request,request,new,start,recovery,request,replica,shard,id,target,allocation,id,p,node,r,node,snapshot,replica,routing,entry,primary,0,starting,seq,no,final,recovery,source,handler,recovery,new,recovery,source,handler,primary,recovery,target,request,int,byte,size,unit,mb,to,bytes,1,primary,update,shard,state,primary,routing,entry,primary,get,pending,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,routing,table,collections,empty,set,recovery,recover,to,target,recovery,target,mark,as,done
IndexShardTestCase -> protected final void recoverUnstartedReplica(final IndexShard replica,                                                  final IndexShard primary,                                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                                  final boolean markAsRecovering,                                                  final Set<String> inSyncIds,                                                  final IndexShardRoutingTable routingTable) throws IOException;1536611444;Recovers a replica from the give primary, allow the user to supply a custom recovery target. A typical usage of a custom recovery_target is to assert things in the various stages of recovery.__Note: this method keeps the shard in {@link IndexShardState#POST_RECOVERY} and doesn't start it.__@param replica                the recovery target shard_@param primary                the recovery source shard_@param targetSupplier         supplies an instance of {@link RecoveryTarget}_@param markAsRecovering       set to {@code false} if the replica is marked as recovering;protected final void recoverUnstartedReplica(final IndexShard replica,_                                                 final IndexShard primary,_                                                 final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                                 final boolean markAsRecovering,_                                                 final Set<String> inSyncIds,_                                                 final IndexShardRoutingTable routingTable) throws IOException {_        final DiscoveryNode pNode = getFakeDiscoNode(primary.routingEntry().currentNodeId())__        final DiscoveryNode rNode = getFakeDiscoNode(replica.routingEntry().currentNodeId())__        if (markAsRecovering) {_            replica.markAsRecovering("remote", new RecoveryState(replica.routingEntry(), pNode, rNode))__        } else {_            assertEquals(replica.state(), IndexShardState.RECOVERING)__        }_        replica.prepareForIndexRecovery()__        final RecoveryTarget recoveryTarget = targetSupplier.apply(replica, pNode)__        final String targetAllocationId = recoveryTarget.indexShard().routingEntry().allocationId().getId()___        final Store.MetadataSnapshot snapshot = getMetadataSnapshotOrEmpty(replica)__        final long startingSeqNo__        if (snapshot.size() > 0) {_            startingSeqNo = PeerRecoveryTargetService.getStartingSeqNo(logger, recoveryTarget)__        } else {_            startingSeqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__        }__        final StartRecoveryRequest request = new StartRecoveryRequest(replica.shardId(), targetAllocationId,_            pNode, rNode, snapshot, replica.routingEntry().primary(), 0, startingSeqNo)__        final RecoverySourceHandler recovery = new RecoverySourceHandler(_                primary,_                recoveryTarget,_                request,_                (int) ByteSizeUnit.MB.toBytes(1))__        primary.updateShardState(primary.routingEntry(), primary.getPendingPrimaryTerm(), null,_            currentClusterStateVersion.incrementAndGet(), inSyncIds, routingTable, Collections.emptySet())__        recovery.recoverToTarget()__        recoveryTarget.markAsDone()__    };recovers,a,replica,from,the,give,primary,allow,the,user,to,supply,a,custom,recovery,target,a,typical,usage,of,a,custom,recovery,target,is,to,assert,things,in,the,various,stages,of,recovery,note,this,method,keeps,the,shard,in,link,index,shard,state,and,doesn,t,start,it,param,replica,the,recovery,target,shard,param,primary,the,recovery,source,shard,param,target,supplier,supplies,an,instance,of,link,recovery,target,param,mark,as,recovering,set,to,code,false,if,the,replica,is,marked,as,recovering;protected,final,void,recover,unstarted,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,set,string,in,sync,ids,final,index,shard,routing,table,routing,table,throws,ioexception,final,discovery,node,p,node,get,fake,disco,node,primary,routing,entry,current,node,id,final,discovery,node,r,node,get,fake,disco,node,replica,routing,entry,current,node,id,if,mark,as,recovering,replica,mark,as,recovering,remote,new,recovery,state,replica,routing,entry,p,node,r,node,else,assert,equals,replica,state,index,shard,state,recovering,replica,prepare,for,index,recovery,final,recovery,target,recovery,target,target,supplier,apply,replica,p,node,final,string,target,allocation,id,recovery,target,index,shard,routing,entry,allocation,id,get,id,final,store,metadata,snapshot,snapshot,get,metadata,snapshot,or,empty,replica,final,long,starting,seq,no,if,snapshot,size,0,starting,seq,no,peer,recovery,target,service,get,starting,seq,no,logger,recovery,target,else,starting,seq,no,sequence,numbers,final,start,recovery,request,request,new,start,recovery,request,replica,shard,id,target,allocation,id,p,node,r,node,snapshot,replica,routing,entry,primary,0,starting,seq,no,final,recovery,source,handler,recovery,new,recovery,source,handler,primary,recovery,target,request,int,byte,size,unit,mb,to,bytes,1,primary,update,shard,state,primary,routing,entry,primary,get,pending,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,routing,table,collections,empty,set,recovery,recover,to,target,recovery,target,mark,as,done
IndexShardTestCase -> protected final void recoverUnstartedReplica(final IndexShard replica,                                                  final IndexShard primary,                                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                                  final boolean markAsRecovering,                                                  final Set<String> inSyncIds,                                                  final IndexShardRoutingTable routingTable) throws IOException;1536828374;Recovers a replica from the give primary, allow the user to supply a custom recovery target. A typical usage of a custom recovery_target is to assert things in the various stages of recovery.__Note: this method keeps the shard in {@link IndexShardState#POST_RECOVERY} and doesn't start it.__@param replica                the recovery target shard_@param primary                the recovery source shard_@param targetSupplier         supplies an instance of {@link RecoveryTarget}_@param markAsRecovering       set to {@code false} if the replica is marked as recovering;protected final void recoverUnstartedReplica(final IndexShard replica,_                                                 final IndexShard primary,_                                                 final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                                 final boolean markAsRecovering,_                                                 final Set<String> inSyncIds,_                                                 final IndexShardRoutingTable routingTable) throws IOException {_        final DiscoveryNode pNode = getFakeDiscoNode(primary.routingEntry().currentNodeId())__        final DiscoveryNode rNode = getFakeDiscoNode(replica.routingEntry().currentNodeId())__        if (markAsRecovering) {_            replica.markAsRecovering("remote", new RecoveryState(replica.routingEntry(), pNode, rNode))__        } else {_            assertEquals(replica.state(), IndexShardState.RECOVERING)__        }_        replica.prepareForIndexRecovery()__        final RecoveryTarget recoveryTarget = targetSupplier.apply(replica, pNode)__        final String targetAllocationId = recoveryTarget.indexShard().routingEntry().allocationId().getId()___        final Store.MetadataSnapshot snapshot = getMetadataSnapshotOrEmpty(replica)__        final long startingSeqNo__        if (snapshot.size() > 0) {_            startingSeqNo = PeerRecoveryTargetService.getStartingSeqNo(logger, recoveryTarget)__        } else {_            startingSeqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__        }__        final StartRecoveryRequest request = new StartRecoveryRequest(replica.shardId(), targetAllocationId,_            pNode, rNode, snapshot, replica.routingEntry().primary(), 0, startingSeqNo)__        final RecoverySourceHandler recovery = new RecoverySourceHandler(_                primary,_                recoveryTarget,_                request,_                (int) ByteSizeUnit.MB.toBytes(1))__        primary.updateShardState(primary.routingEntry(), primary.getPendingPrimaryTerm(), null,_            currentClusterStateVersion.incrementAndGet(), inSyncIds, routingTable, Collections.emptySet())__        recovery.recoverToTarget()__        recoveryTarget.markAsDone()__    };recovers,a,replica,from,the,give,primary,allow,the,user,to,supply,a,custom,recovery,target,a,typical,usage,of,a,custom,recovery,target,is,to,assert,things,in,the,various,stages,of,recovery,note,this,method,keeps,the,shard,in,link,index,shard,state,and,doesn,t,start,it,param,replica,the,recovery,target,shard,param,primary,the,recovery,source,shard,param,target,supplier,supplies,an,instance,of,link,recovery,target,param,mark,as,recovering,set,to,code,false,if,the,replica,is,marked,as,recovering;protected,final,void,recover,unstarted,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,set,string,in,sync,ids,final,index,shard,routing,table,routing,table,throws,ioexception,final,discovery,node,p,node,get,fake,disco,node,primary,routing,entry,current,node,id,final,discovery,node,r,node,get,fake,disco,node,replica,routing,entry,current,node,id,if,mark,as,recovering,replica,mark,as,recovering,remote,new,recovery,state,replica,routing,entry,p,node,r,node,else,assert,equals,replica,state,index,shard,state,recovering,replica,prepare,for,index,recovery,final,recovery,target,recovery,target,target,supplier,apply,replica,p,node,final,string,target,allocation,id,recovery,target,index,shard,routing,entry,allocation,id,get,id,final,store,metadata,snapshot,snapshot,get,metadata,snapshot,or,empty,replica,final,long,starting,seq,no,if,snapshot,size,0,starting,seq,no,peer,recovery,target,service,get,starting,seq,no,logger,recovery,target,else,starting,seq,no,sequence,numbers,final,start,recovery,request,request,new,start,recovery,request,replica,shard,id,target,allocation,id,p,node,r,node,snapshot,replica,routing,entry,primary,0,starting,seq,no,final,recovery,source,handler,recovery,new,recovery,source,handler,primary,recovery,target,request,int,byte,size,unit,mb,to,bytes,1,primary,update,shard,state,primary,routing,entry,primary,get,pending,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,routing,table,collections,empty,set,recovery,recover,to,target,recovery,target,mark,as,done
IndexShardTestCase -> protected final void recoverUnstartedReplica(final IndexShard replica,                                                  final IndexShard primary,                                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                                  final boolean markAsRecovering,                                                  final Set<String> inSyncIds,                                                  final IndexShardRoutingTable routingTable) throws IOException;1537371806;Recovers a replica from the give primary, allow the user to supply a custom recovery target. A typical usage of a custom recovery_target is to assert things in the various stages of recovery.__Note: this method keeps the shard in {@link IndexShardState#POST_RECOVERY} and doesn't start it.__@param replica                the recovery target shard_@param primary                the recovery source shard_@param targetSupplier         supplies an instance of {@link RecoveryTarget}_@param markAsRecovering       set to {@code false} if the replica is marked as recovering;protected final void recoverUnstartedReplica(final IndexShard replica,_                                                 final IndexShard primary,_                                                 final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                                 final boolean markAsRecovering,_                                                 final Set<String> inSyncIds,_                                                 final IndexShardRoutingTable routingTable) throws IOException {_        final DiscoveryNode pNode = getFakeDiscoNode(primary.routingEntry().currentNodeId())__        final DiscoveryNode rNode = getFakeDiscoNode(replica.routingEntry().currentNodeId())__        if (markAsRecovering) {_            replica.markAsRecovering("remote", new RecoveryState(replica.routingEntry(), pNode, rNode))__        } else {_            assertEquals(replica.state(), IndexShardState.RECOVERING)__        }_        replica.prepareForIndexRecovery()__        final RecoveryTarget recoveryTarget = targetSupplier.apply(replica, pNode)__        final String targetAllocationId = recoveryTarget.indexShard().routingEntry().allocationId().getId()___        final Store.MetadataSnapshot snapshot = getMetadataSnapshotOrEmpty(replica)__        final long startingSeqNo__        if (snapshot.size() > 0) {_            startingSeqNo = PeerRecoveryTargetService.getStartingSeqNo(logger, recoveryTarget)__        } else {_            startingSeqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__        }__        final StartRecoveryRequest request = new StartRecoveryRequest(replica.shardId(), targetAllocationId,_            pNode, rNode, snapshot, replica.routingEntry().primary(), 0, startingSeqNo)__        final RecoverySourceHandler recovery = new RecoverySourceHandler(_                primary,_                recoveryTarget,_                request,_                (int) ByteSizeUnit.MB.toBytes(1))__        primary.updateShardState(primary.routingEntry(), primary.getPendingPrimaryTerm(), null,_            currentClusterStateVersion.incrementAndGet(), inSyncIds, routingTable, Collections.emptySet())__        recovery.recoverToTarget()__        recoveryTarget.markAsDone()__    };recovers,a,replica,from,the,give,primary,allow,the,user,to,supply,a,custom,recovery,target,a,typical,usage,of,a,custom,recovery,target,is,to,assert,things,in,the,various,stages,of,recovery,note,this,method,keeps,the,shard,in,link,index,shard,state,and,doesn,t,start,it,param,replica,the,recovery,target,shard,param,primary,the,recovery,source,shard,param,target,supplier,supplies,an,instance,of,link,recovery,target,param,mark,as,recovering,set,to,code,false,if,the,replica,is,marked,as,recovering;protected,final,void,recover,unstarted,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,set,string,in,sync,ids,final,index,shard,routing,table,routing,table,throws,ioexception,final,discovery,node,p,node,get,fake,disco,node,primary,routing,entry,current,node,id,final,discovery,node,r,node,get,fake,disco,node,replica,routing,entry,current,node,id,if,mark,as,recovering,replica,mark,as,recovering,remote,new,recovery,state,replica,routing,entry,p,node,r,node,else,assert,equals,replica,state,index,shard,state,recovering,replica,prepare,for,index,recovery,final,recovery,target,recovery,target,target,supplier,apply,replica,p,node,final,string,target,allocation,id,recovery,target,index,shard,routing,entry,allocation,id,get,id,final,store,metadata,snapshot,snapshot,get,metadata,snapshot,or,empty,replica,final,long,starting,seq,no,if,snapshot,size,0,starting,seq,no,peer,recovery,target,service,get,starting,seq,no,logger,recovery,target,else,starting,seq,no,sequence,numbers,final,start,recovery,request,request,new,start,recovery,request,replica,shard,id,target,allocation,id,p,node,r,node,snapshot,replica,routing,entry,primary,0,starting,seq,no,final,recovery,source,handler,recovery,new,recovery,source,handler,primary,recovery,target,request,int,byte,size,unit,mb,to,bytes,1,primary,update,shard,state,primary,routing,entry,primary,get,pending,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,routing,table,collections,empty,set,recovery,recover,to,target,recovery,target,mark,as,done
IndexShardTestCase -> protected final void recoverUnstartedReplica(final IndexShard replica,                                                  final IndexShard primary,                                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                                  final boolean markAsRecovering,                                                  final Set<String> inSyncIds,                                                  final IndexShardRoutingTable routingTable) throws IOException;1537806831;Recovers a replica from the give primary, allow the user to supply a custom recovery target. A typical usage of a custom recovery_target is to assert things in the various stages of recovery.__Note: this method keeps the shard in {@link IndexShardState#POST_RECOVERY} and doesn't start it.__@param replica                the recovery target shard_@param primary                the recovery source shard_@param targetSupplier         supplies an instance of {@link RecoveryTarget}_@param markAsRecovering       set to {@code false} if the replica is marked as recovering;protected final void recoverUnstartedReplica(final IndexShard replica,_                                                 final IndexShard primary,_                                                 final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                                 final boolean markAsRecovering,_                                                 final Set<String> inSyncIds,_                                                 final IndexShardRoutingTable routingTable) throws IOException {_        final DiscoveryNode pNode = getFakeDiscoNode(primary.routingEntry().currentNodeId())__        final DiscoveryNode rNode = getFakeDiscoNode(replica.routingEntry().currentNodeId())__        if (markAsRecovering) {_            replica.markAsRecovering("remote", new RecoveryState(replica.routingEntry(), pNode, rNode))__        } else {_            assertEquals(replica.state(), IndexShardState.RECOVERING)__        }_        replica.prepareForIndexRecovery()__        final RecoveryTarget recoveryTarget = targetSupplier.apply(replica, pNode)__        final String targetAllocationId = recoveryTarget.indexShard().routingEntry().allocationId().getId()___        final Store.MetadataSnapshot snapshot = getMetadataSnapshotOrEmpty(replica)__        final long startingSeqNo__        if (snapshot.size() > 0) {_            startingSeqNo = PeerRecoveryTargetService.getStartingSeqNo(logger, recoveryTarget)__        } else {_            startingSeqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__        }__        final StartRecoveryRequest request = new StartRecoveryRequest(replica.shardId(), targetAllocationId,_            pNode, rNode, snapshot, replica.routingEntry().primary(), 0, startingSeqNo)__        final RecoverySourceHandler recovery = new RecoverySourceHandler(_                primary,_                recoveryTarget,_                request,_                (int) ByteSizeUnit.MB.toBytes(1))__        primary.updateShardState(primary.routingEntry(), primary.getPendingPrimaryTerm(), null,_            currentClusterStateVersion.incrementAndGet(), inSyncIds, routingTable, Collections.emptySet())__        recovery.recoverToTarget()__        recoveryTarget.markAsDone()__    };recovers,a,replica,from,the,give,primary,allow,the,user,to,supply,a,custom,recovery,target,a,typical,usage,of,a,custom,recovery,target,is,to,assert,things,in,the,various,stages,of,recovery,note,this,method,keeps,the,shard,in,link,index,shard,state,and,doesn,t,start,it,param,replica,the,recovery,target,shard,param,primary,the,recovery,source,shard,param,target,supplier,supplies,an,instance,of,link,recovery,target,param,mark,as,recovering,set,to,code,false,if,the,replica,is,marked,as,recovering;protected,final,void,recover,unstarted,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,set,string,in,sync,ids,final,index,shard,routing,table,routing,table,throws,ioexception,final,discovery,node,p,node,get,fake,disco,node,primary,routing,entry,current,node,id,final,discovery,node,r,node,get,fake,disco,node,replica,routing,entry,current,node,id,if,mark,as,recovering,replica,mark,as,recovering,remote,new,recovery,state,replica,routing,entry,p,node,r,node,else,assert,equals,replica,state,index,shard,state,recovering,replica,prepare,for,index,recovery,final,recovery,target,recovery,target,target,supplier,apply,replica,p,node,final,string,target,allocation,id,recovery,target,index,shard,routing,entry,allocation,id,get,id,final,store,metadata,snapshot,snapshot,get,metadata,snapshot,or,empty,replica,final,long,starting,seq,no,if,snapshot,size,0,starting,seq,no,peer,recovery,target,service,get,starting,seq,no,logger,recovery,target,else,starting,seq,no,sequence,numbers,final,start,recovery,request,request,new,start,recovery,request,replica,shard,id,target,allocation,id,p,node,r,node,snapshot,replica,routing,entry,primary,0,starting,seq,no,final,recovery,source,handler,recovery,new,recovery,source,handler,primary,recovery,target,request,int,byte,size,unit,mb,to,bytes,1,primary,update,shard,state,primary,routing,entry,primary,get,pending,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,routing,table,collections,empty,set,recovery,recover,to,target,recovery,target,mark,as,done
IndexShardTestCase -> protected final void recoverUnstartedReplica(final IndexShard replica,                                                  final IndexShard primary,                                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                                  final boolean markAsRecovering,                                                  final Set<String> inSyncIds,                                                  final IndexShardRoutingTable routingTable) throws IOException;1538067637;Recovers a replica from the give primary, allow the user to supply a custom recovery target. A typical usage of a custom recovery_target is to assert things in the various stages of recovery.__Note: this method keeps the shard in {@link IndexShardState#POST_RECOVERY} and doesn't start it.__@param replica                the recovery target shard_@param primary                the recovery source shard_@param targetSupplier         supplies an instance of {@link RecoveryTarget}_@param markAsRecovering       set to {@code false} if the replica is marked as recovering;protected final void recoverUnstartedReplica(final IndexShard replica,_                                                 final IndexShard primary,_                                                 final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                                 final boolean markAsRecovering,_                                                 final Set<String> inSyncIds,_                                                 final IndexShardRoutingTable routingTable) throws IOException {_        final DiscoveryNode pNode = getFakeDiscoNode(primary.routingEntry().currentNodeId())__        final DiscoveryNode rNode = getFakeDiscoNode(replica.routingEntry().currentNodeId())__        if (markAsRecovering) {_            replica.markAsRecovering("remote", new RecoveryState(replica.routingEntry(), pNode, rNode))__        } else {_            assertEquals(replica.state(), IndexShardState.RECOVERING)__        }_        replica.prepareForIndexRecovery()__        final RecoveryTarget recoveryTarget = targetSupplier.apply(replica, pNode)__        final String targetAllocationId = recoveryTarget.indexShard().routingEntry().allocationId().getId()___        final Store.MetadataSnapshot snapshot = getMetadataSnapshotOrEmpty(replica)__        final long startingSeqNo__        if (snapshot.size() > 0) {_            startingSeqNo = PeerRecoveryTargetService.getStartingSeqNo(logger, recoveryTarget)__        } else {_            startingSeqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__        }__        final StartRecoveryRequest request = new StartRecoveryRequest(replica.shardId(), targetAllocationId,_            pNode, rNode, snapshot, replica.routingEntry().primary(), 0, startingSeqNo)__        final RecoverySourceHandler recovery = new RecoverySourceHandler(_                primary,_                recoveryTarget,_                request,_                (int) ByteSizeUnit.MB.toBytes(1))__        primary.updateShardState(primary.routingEntry(), primary.getPendingPrimaryTerm(), null,_            currentClusterStateVersion.incrementAndGet(), inSyncIds, routingTable, Collections.emptySet())__        recovery.recoverToTarget()__        recoveryTarget.markAsDone()__    };recovers,a,replica,from,the,give,primary,allow,the,user,to,supply,a,custom,recovery,target,a,typical,usage,of,a,custom,recovery,target,is,to,assert,things,in,the,various,stages,of,recovery,note,this,method,keeps,the,shard,in,link,index,shard,state,and,doesn,t,start,it,param,replica,the,recovery,target,shard,param,primary,the,recovery,source,shard,param,target,supplier,supplies,an,instance,of,link,recovery,target,param,mark,as,recovering,set,to,code,false,if,the,replica,is,marked,as,recovering;protected,final,void,recover,unstarted,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,set,string,in,sync,ids,final,index,shard,routing,table,routing,table,throws,ioexception,final,discovery,node,p,node,get,fake,disco,node,primary,routing,entry,current,node,id,final,discovery,node,r,node,get,fake,disco,node,replica,routing,entry,current,node,id,if,mark,as,recovering,replica,mark,as,recovering,remote,new,recovery,state,replica,routing,entry,p,node,r,node,else,assert,equals,replica,state,index,shard,state,recovering,replica,prepare,for,index,recovery,final,recovery,target,recovery,target,target,supplier,apply,replica,p,node,final,string,target,allocation,id,recovery,target,index,shard,routing,entry,allocation,id,get,id,final,store,metadata,snapshot,snapshot,get,metadata,snapshot,or,empty,replica,final,long,starting,seq,no,if,snapshot,size,0,starting,seq,no,peer,recovery,target,service,get,starting,seq,no,logger,recovery,target,else,starting,seq,no,sequence,numbers,final,start,recovery,request,request,new,start,recovery,request,replica,shard,id,target,allocation,id,p,node,r,node,snapshot,replica,routing,entry,primary,0,starting,seq,no,final,recovery,source,handler,recovery,new,recovery,source,handler,primary,recovery,target,request,int,byte,size,unit,mb,to,bytes,1,primary,update,shard,state,primary,routing,entry,primary,get,pending,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,routing,table,collections,empty,set,recovery,recover,to,target,recovery,target,mark,as,done
IndexShardTestCase -> protected final void recoverUnstartedReplica(final IndexShard replica,                                                  final IndexShard primary,                                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                                  final boolean markAsRecovering,                                                  final Set<String> inSyncIds,                                                  final IndexShardRoutingTable routingTable) throws IOException;1542697404;Recovers a replica from the give primary, allow the user to supply a custom recovery target. A typical usage of a custom recovery_target is to assert things in the various stages of recovery.__Note: this method keeps the shard in {@link IndexShardState#POST_RECOVERY} and doesn't start it.__@param replica                the recovery target shard_@param primary                the recovery source shard_@param targetSupplier         supplies an instance of {@link RecoveryTarget}_@param markAsRecovering       set to {@code false} if the replica is marked as recovering;protected final void recoverUnstartedReplica(final IndexShard replica,_                                                 final IndexShard primary,_                                                 final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                                 final boolean markAsRecovering,_                                                 final Set<String> inSyncIds,_                                                 final IndexShardRoutingTable routingTable) throws IOException {_        final DiscoveryNode pNode = getFakeDiscoNode(primary.routingEntry().currentNodeId())__        final DiscoveryNode rNode = getFakeDiscoNode(replica.routingEntry().currentNodeId())__        if (markAsRecovering) {_            replica.markAsRecovering("remote", new RecoveryState(replica.routingEntry(), pNode, rNode))__        } else {_            assertEquals(replica.state(), IndexShardState.RECOVERING)__        }_        replica.prepareForIndexRecovery()__        final RecoveryTarget recoveryTarget = targetSupplier.apply(replica, pNode)__        final String targetAllocationId = recoveryTarget.indexShard().routingEntry().allocationId().getId()___        final Store.MetadataSnapshot snapshot = getMetadataSnapshotOrEmpty(replica)__        final long startingSeqNo__        if (snapshot.size() > 0) {_            startingSeqNo = PeerRecoveryTargetService.getStartingSeqNo(logger, recoveryTarget)__        } else {_            startingSeqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__        }__        final StartRecoveryRequest request = new StartRecoveryRequest(replica.shardId(), targetAllocationId,_            pNode, rNode, snapshot, replica.routingEntry().primary(), 0, startingSeqNo)__        final RecoverySourceHandler recovery = new RecoverySourceHandler(_                primary,_                recoveryTarget,_                request,_                (int) ByteSizeUnit.MB.toBytes(1))__        primary.updateShardState(primary.routingEntry(), primary.getPendingPrimaryTerm(), null,_            currentClusterStateVersion.incrementAndGet(), inSyncIds, routingTable, Collections.emptySet())__        recovery.recoverToTarget()__        recoveryTarget.markAsDone()__    };recovers,a,replica,from,the,give,primary,allow,the,user,to,supply,a,custom,recovery,target,a,typical,usage,of,a,custom,recovery,target,is,to,assert,things,in,the,various,stages,of,recovery,note,this,method,keeps,the,shard,in,link,index,shard,state,and,doesn,t,start,it,param,replica,the,recovery,target,shard,param,primary,the,recovery,source,shard,param,target,supplier,supplies,an,instance,of,link,recovery,target,param,mark,as,recovering,set,to,code,false,if,the,replica,is,marked,as,recovering;protected,final,void,recover,unstarted,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,set,string,in,sync,ids,final,index,shard,routing,table,routing,table,throws,ioexception,final,discovery,node,p,node,get,fake,disco,node,primary,routing,entry,current,node,id,final,discovery,node,r,node,get,fake,disco,node,replica,routing,entry,current,node,id,if,mark,as,recovering,replica,mark,as,recovering,remote,new,recovery,state,replica,routing,entry,p,node,r,node,else,assert,equals,replica,state,index,shard,state,recovering,replica,prepare,for,index,recovery,final,recovery,target,recovery,target,target,supplier,apply,replica,p,node,final,string,target,allocation,id,recovery,target,index,shard,routing,entry,allocation,id,get,id,final,store,metadata,snapshot,snapshot,get,metadata,snapshot,or,empty,replica,final,long,starting,seq,no,if,snapshot,size,0,starting,seq,no,peer,recovery,target,service,get,starting,seq,no,logger,recovery,target,else,starting,seq,no,sequence,numbers,final,start,recovery,request,request,new,start,recovery,request,replica,shard,id,target,allocation,id,p,node,r,node,snapshot,replica,routing,entry,primary,0,starting,seq,no,final,recovery,source,handler,recovery,new,recovery,source,handler,primary,recovery,target,request,int,byte,size,unit,mb,to,bytes,1,primary,update,shard,state,primary,routing,entry,primary,get,pending,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,routing,table,collections,empty,set,recovery,recover,to,target,recovery,target,mark,as,done
IndexShardTestCase -> protected final void recoverUnstartedReplica(final IndexShard replica,                                                  final IndexShard primary,                                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                                  final boolean markAsRecovering,                                                  final Set<String> inSyncIds,                                                  final IndexShardRoutingTable routingTable) throws IOException;1544783963;Recovers a replica from the give primary, allow the user to supply a custom recovery target. A typical usage of a custom recovery_target is to assert things in the various stages of recovery.__Note: this method keeps the shard in {@link IndexShardState#POST_RECOVERY} and doesn't start it.__@param replica                the recovery target shard_@param primary                the recovery source shard_@param targetSupplier         supplies an instance of {@link RecoveryTarget}_@param markAsRecovering       set to {@code false} if the replica is marked as recovering;protected final void recoverUnstartedReplica(final IndexShard replica,_                                                 final IndexShard primary,_                                                 final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                                 final boolean markAsRecovering,_                                                 final Set<String> inSyncIds,_                                                 final IndexShardRoutingTable routingTable) throws IOException {_        final DiscoveryNode pNode = getFakeDiscoNode(primary.routingEntry().currentNodeId())__        final DiscoveryNode rNode = getFakeDiscoNode(replica.routingEntry().currentNodeId())__        if (markAsRecovering) {_            replica.markAsRecovering("remote", new RecoveryState(replica.routingEntry(), pNode, rNode))__        } else {_            assertEquals(replica.state(), IndexShardState.RECOVERING)__        }_        replica.prepareForIndexRecovery()__        final RecoveryTarget recoveryTarget = targetSupplier.apply(replica, pNode)__        final String targetAllocationId = recoveryTarget.indexShard().routingEntry().allocationId().getId()___        final Store.MetadataSnapshot snapshot = getMetadataSnapshotOrEmpty(replica)__        final long startingSeqNo__        if (snapshot.size() > 0) {_            startingSeqNo = PeerRecoveryTargetService.getStartingSeqNo(logger, recoveryTarget)__        } else {_            startingSeqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__        }__        final StartRecoveryRequest request = new StartRecoveryRequest(replica.shardId(), targetAllocationId,_            pNode, rNode, snapshot, replica.routingEntry().primary(), 0, startingSeqNo)__        final RecoverySourceHandler recovery = new RecoverySourceHandler(_                primary,_                recoveryTarget,_                request,_                (int) ByteSizeUnit.MB.toBytes(1))__        primary.updateShardState(primary.routingEntry(), primary.getPendingPrimaryTerm(), null,_            currentClusterStateVersion.incrementAndGet(), inSyncIds, routingTable, Collections.emptySet())__        recovery.recoverToTarget()__        recoveryTarget.markAsDone()__    };recovers,a,replica,from,the,give,primary,allow,the,user,to,supply,a,custom,recovery,target,a,typical,usage,of,a,custom,recovery,target,is,to,assert,things,in,the,various,stages,of,recovery,note,this,method,keeps,the,shard,in,link,index,shard,state,and,doesn,t,start,it,param,replica,the,recovery,target,shard,param,primary,the,recovery,source,shard,param,target,supplier,supplies,an,instance,of,link,recovery,target,param,mark,as,recovering,set,to,code,false,if,the,replica,is,marked,as,recovering;protected,final,void,recover,unstarted,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,set,string,in,sync,ids,final,index,shard,routing,table,routing,table,throws,ioexception,final,discovery,node,p,node,get,fake,disco,node,primary,routing,entry,current,node,id,final,discovery,node,r,node,get,fake,disco,node,replica,routing,entry,current,node,id,if,mark,as,recovering,replica,mark,as,recovering,remote,new,recovery,state,replica,routing,entry,p,node,r,node,else,assert,equals,replica,state,index,shard,state,recovering,replica,prepare,for,index,recovery,final,recovery,target,recovery,target,target,supplier,apply,replica,p,node,final,string,target,allocation,id,recovery,target,index,shard,routing,entry,allocation,id,get,id,final,store,metadata,snapshot,snapshot,get,metadata,snapshot,or,empty,replica,final,long,starting,seq,no,if,snapshot,size,0,starting,seq,no,peer,recovery,target,service,get,starting,seq,no,logger,recovery,target,else,starting,seq,no,sequence,numbers,final,start,recovery,request,request,new,start,recovery,request,replica,shard,id,target,allocation,id,p,node,r,node,snapshot,replica,routing,entry,primary,0,starting,seq,no,final,recovery,source,handler,recovery,new,recovery,source,handler,primary,recovery,target,request,int,byte,size,unit,mb,to,bytes,1,primary,update,shard,state,primary,routing,entry,primary,get,pending,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,routing,table,collections,empty,set,recovery,recover,to,target,recovery,target,mark,as,done
IndexShardTestCase -> protected final void recoverUnstartedReplica(final IndexShard replica,                                                  final IndexShard primary,                                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                                  final boolean markAsRecovering,                                                  final Set<String> inSyncIds,                                                  final IndexShardRoutingTable routingTable) throws IOException;1544893197;Recovers a replica from the give primary, allow the user to supply a custom recovery target. A typical usage of a custom recovery_target is to assert things in the various stages of recovery.__Note: this method keeps the shard in {@link IndexShardState#POST_RECOVERY} and doesn't start it.__@param replica                the recovery target shard_@param primary                the recovery source shard_@param targetSupplier         supplies an instance of {@link RecoveryTarget}_@param markAsRecovering       set to {@code false} if the replica is marked as recovering;protected final void recoverUnstartedReplica(final IndexShard replica,_                                                 final IndexShard primary,_                                                 final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                                 final boolean markAsRecovering,_                                                 final Set<String> inSyncIds,_                                                 final IndexShardRoutingTable routingTable) throws IOException {_        final DiscoveryNode pNode = getFakeDiscoNode(primary.routingEntry().currentNodeId())__        final DiscoveryNode rNode = getFakeDiscoNode(replica.routingEntry().currentNodeId())__        if (markAsRecovering) {_            replica.markAsRecovering("remote", new RecoveryState(replica.routingEntry(), pNode, rNode))__        } else {_            assertEquals(replica.state(), IndexShardState.RECOVERING)__        }_        replica.prepareForIndexRecovery()__        final RecoveryTarget recoveryTarget = targetSupplier.apply(replica, pNode)__        final String targetAllocationId = recoveryTarget.indexShard().routingEntry().allocationId().getId()___        final Store.MetadataSnapshot snapshot = getMetadataSnapshotOrEmpty(replica)__        final long startingSeqNo__        if (snapshot.size() > 0) {_            startingSeqNo = PeerRecoveryTargetService.getStartingSeqNo(logger, recoveryTarget)__        } else {_            startingSeqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__        }__        final StartRecoveryRequest request = new StartRecoveryRequest(replica.shardId(), targetAllocationId,_            pNode, rNode, snapshot, replica.routingEntry().primary(), 0, startingSeqNo)__        final RecoverySourceHandler recovery = new RecoverySourceHandler(_                primary,_                recoveryTarget,_                request,_                (int) ByteSizeUnit.MB.toBytes(1))__        primary.updateShardState(primary.routingEntry(), primary.getPendingPrimaryTerm(), null,_            currentClusterStateVersion.incrementAndGet(), inSyncIds, routingTable, Collections.emptySet())__        recovery.recoverToTarget()__        recoveryTarget.markAsDone()__    };recovers,a,replica,from,the,give,primary,allow,the,user,to,supply,a,custom,recovery,target,a,typical,usage,of,a,custom,recovery,target,is,to,assert,things,in,the,various,stages,of,recovery,note,this,method,keeps,the,shard,in,link,index,shard,state,and,doesn,t,start,it,param,replica,the,recovery,target,shard,param,primary,the,recovery,source,shard,param,target,supplier,supplies,an,instance,of,link,recovery,target,param,mark,as,recovering,set,to,code,false,if,the,replica,is,marked,as,recovering;protected,final,void,recover,unstarted,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,set,string,in,sync,ids,final,index,shard,routing,table,routing,table,throws,ioexception,final,discovery,node,p,node,get,fake,disco,node,primary,routing,entry,current,node,id,final,discovery,node,r,node,get,fake,disco,node,replica,routing,entry,current,node,id,if,mark,as,recovering,replica,mark,as,recovering,remote,new,recovery,state,replica,routing,entry,p,node,r,node,else,assert,equals,replica,state,index,shard,state,recovering,replica,prepare,for,index,recovery,final,recovery,target,recovery,target,target,supplier,apply,replica,p,node,final,string,target,allocation,id,recovery,target,index,shard,routing,entry,allocation,id,get,id,final,store,metadata,snapshot,snapshot,get,metadata,snapshot,or,empty,replica,final,long,starting,seq,no,if,snapshot,size,0,starting,seq,no,peer,recovery,target,service,get,starting,seq,no,logger,recovery,target,else,starting,seq,no,sequence,numbers,final,start,recovery,request,request,new,start,recovery,request,replica,shard,id,target,allocation,id,p,node,r,node,snapshot,replica,routing,entry,primary,0,starting,seq,no,final,recovery,source,handler,recovery,new,recovery,source,handler,primary,recovery,target,request,int,byte,size,unit,mb,to,bytes,1,primary,update,shard,state,primary,routing,entry,primary,get,pending,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,routing,table,collections,empty,set,recovery,recover,to,target,recovery,target,mark,as,done
IndexShardTestCase -> protected final void recoverUnstartedReplica(final IndexShard replica,                                                  final IndexShard primary,                                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                                  final boolean markAsRecovering,                                                  final Set<String> inSyncIds,                                                  final IndexShardRoutingTable routingTable) throws IOException;1545678410;Recovers a replica from the give primary, allow the user to supply a custom recovery target. A typical usage of a custom recovery_target is to assert things in the various stages of recovery.__Note: this method keeps the shard in {@link IndexShardState#POST_RECOVERY} and doesn't start it.__@param replica                the recovery target shard_@param primary                the recovery source shard_@param targetSupplier         supplies an instance of {@link RecoveryTarget}_@param markAsRecovering       set to {@code false} if the replica is marked as recovering;protected final void recoverUnstartedReplica(final IndexShard replica,_                                                 final IndexShard primary,_                                                 final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                                 final boolean markAsRecovering,_                                                 final Set<String> inSyncIds,_                                                 final IndexShardRoutingTable routingTable) throws IOException {_        final DiscoveryNode pNode = getFakeDiscoNode(primary.routingEntry().currentNodeId())__        final DiscoveryNode rNode = getFakeDiscoNode(replica.routingEntry().currentNodeId())__        if (markAsRecovering) {_            replica.markAsRecovering("remote", new RecoveryState(replica.routingEntry(), pNode, rNode))__        } else {_            assertEquals(replica.state(), IndexShardState.RECOVERING)__        }_        replica.prepareForIndexRecovery()__        final RecoveryTarget recoveryTarget = targetSupplier.apply(replica, pNode)__        final String targetAllocationId = recoveryTarget.indexShard().routingEntry().allocationId().getId()___        final Store.MetadataSnapshot snapshot = getMetadataSnapshotOrEmpty(replica)__        final long startingSeqNo__        if (snapshot.size() > 0) {_            startingSeqNo = PeerRecoveryTargetService.getStartingSeqNo(logger, recoveryTarget)__        } else {_            startingSeqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__        }__        final StartRecoveryRequest request = new StartRecoveryRequest(replica.shardId(), targetAllocationId,_            pNode, rNode, snapshot, replica.routingEntry().primary(), 0, startingSeqNo)__        final RecoverySourceHandler recovery = new RecoverySourceHandler(_                primary,_                recoveryTarget,_                request,_                (int) ByteSizeUnit.MB.toBytes(1))__        primary.updateShardState(primary.routingEntry(), primary.getPendingPrimaryTerm(), null,_            currentClusterStateVersion.incrementAndGet(), inSyncIds, routingTable, Collections.emptySet())__        recovery.recoverToTarget()__        recoveryTarget.markAsDone()__    };recovers,a,replica,from,the,give,primary,allow,the,user,to,supply,a,custom,recovery,target,a,typical,usage,of,a,custom,recovery,target,is,to,assert,things,in,the,various,stages,of,recovery,note,this,method,keeps,the,shard,in,link,index,shard,state,and,doesn,t,start,it,param,replica,the,recovery,target,shard,param,primary,the,recovery,source,shard,param,target,supplier,supplies,an,instance,of,link,recovery,target,param,mark,as,recovering,set,to,code,false,if,the,replica,is,marked,as,recovering;protected,final,void,recover,unstarted,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,set,string,in,sync,ids,final,index,shard,routing,table,routing,table,throws,ioexception,final,discovery,node,p,node,get,fake,disco,node,primary,routing,entry,current,node,id,final,discovery,node,r,node,get,fake,disco,node,replica,routing,entry,current,node,id,if,mark,as,recovering,replica,mark,as,recovering,remote,new,recovery,state,replica,routing,entry,p,node,r,node,else,assert,equals,replica,state,index,shard,state,recovering,replica,prepare,for,index,recovery,final,recovery,target,recovery,target,target,supplier,apply,replica,p,node,final,string,target,allocation,id,recovery,target,index,shard,routing,entry,allocation,id,get,id,final,store,metadata,snapshot,snapshot,get,metadata,snapshot,or,empty,replica,final,long,starting,seq,no,if,snapshot,size,0,starting,seq,no,peer,recovery,target,service,get,starting,seq,no,logger,recovery,target,else,starting,seq,no,sequence,numbers,final,start,recovery,request,request,new,start,recovery,request,replica,shard,id,target,allocation,id,p,node,r,node,snapshot,replica,routing,entry,primary,0,starting,seq,no,final,recovery,source,handler,recovery,new,recovery,source,handler,primary,recovery,target,request,int,byte,size,unit,mb,to,bytes,1,primary,update,shard,state,primary,routing,entry,primary,get,pending,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,routing,table,collections,empty,set,recovery,recover,to,target,recovery,target,mark,as,done
IndexShardTestCase -> protected final void recoverUnstartedReplica(final IndexShard replica,                                                  final IndexShard primary,                                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                                  final boolean markAsRecovering,                                                  final Set<String> inSyncIds,                                                  final IndexShardRoutingTable routingTable) throws IOException;1546927432;Recovers a replica from the give primary, allow the user to supply a custom recovery target. A typical usage of a custom recovery_target is to assert things in the various stages of recovery.__Note: this method keeps the shard in {@link IndexShardState#POST_RECOVERY} and doesn't start it.__@param replica                the recovery target shard_@param primary                the recovery source shard_@param targetSupplier         supplies an instance of {@link RecoveryTarget}_@param markAsRecovering       set to {@code false} if the replica is marked as recovering;protected final void recoverUnstartedReplica(final IndexShard replica,_                                                 final IndexShard primary,_                                                 final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                                 final boolean markAsRecovering,_                                                 final Set<String> inSyncIds,_                                                 final IndexShardRoutingTable routingTable) throws IOException {_        final DiscoveryNode pNode = getFakeDiscoNode(primary.routingEntry().currentNodeId())__        final DiscoveryNode rNode = getFakeDiscoNode(replica.routingEntry().currentNodeId())__        if (markAsRecovering) {_            replica.markAsRecovering("remote", new RecoveryState(replica.routingEntry(), pNode, rNode))__        } else {_            assertEquals(replica.state(), IndexShardState.RECOVERING)__        }_        replica.prepareForIndexRecovery()__        final RecoveryTarget recoveryTarget = targetSupplier.apply(replica, pNode)__        final String targetAllocationId = recoveryTarget.indexShard().routingEntry().allocationId().getId()___        final Store.MetadataSnapshot snapshot = getMetadataSnapshotOrEmpty(replica)__        final long startingSeqNo__        if (snapshot.size() > 0) {_            startingSeqNo = PeerRecoveryTargetService.getStartingSeqNo(logger, recoveryTarget)__        } else {_            startingSeqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__        }__        final StartRecoveryRequest request = new StartRecoveryRequest(replica.shardId(), targetAllocationId,_            pNode, rNode, snapshot, replica.routingEntry().primary(), 0, startingSeqNo)__        final RecoverySourceHandler recovery = new RecoverySourceHandler(_                primary,_                recoveryTarget,_                request,_                (int) ByteSizeUnit.MB.toBytes(1))__        primary.updateShardState(primary.routingEntry(), primary.getPendingPrimaryTerm(), null,_            currentClusterStateVersion.incrementAndGet(), inSyncIds, routingTable, Collections.emptySet())__        recovery.recoverToTarget()__        recoveryTarget.markAsDone()__    };recovers,a,replica,from,the,give,primary,allow,the,user,to,supply,a,custom,recovery,target,a,typical,usage,of,a,custom,recovery,target,is,to,assert,things,in,the,various,stages,of,recovery,note,this,method,keeps,the,shard,in,link,index,shard,state,and,doesn,t,start,it,param,replica,the,recovery,target,shard,param,primary,the,recovery,source,shard,param,target,supplier,supplies,an,instance,of,link,recovery,target,param,mark,as,recovering,set,to,code,false,if,the,replica,is,marked,as,recovering;protected,final,void,recover,unstarted,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,set,string,in,sync,ids,final,index,shard,routing,table,routing,table,throws,ioexception,final,discovery,node,p,node,get,fake,disco,node,primary,routing,entry,current,node,id,final,discovery,node,r,node,get,fake,disco,node,replica,routing,entry,current,node,id,if,mark,as,recovering,replica,mark,as,recovering,remote,new,recovery,state,replica,routing,entry,p,node,r,node,else,assert,equals,replica,state,index,shard,state,recovering,replica,prepare,for,index,recovery,final,recovery,target,recovery,target,target,supplier,apply,replica,p,node,final,string,target,allocation,id,recovery,target,index,shard,routing,entry,allocation,id,get,id,final,store,metadata,snapshot,snapshot,get,metadata,snapshot,or,empty,replica,final,long,starting,seq,no,if,snapshot,size,0,starting,seq,no,peer,recovery,target,service,get,starting,seq,no,logger,recovery,target,else,starting,seq,no,sequence,numbers,final,start,recovery,request,request,new,start,recovery,request,replica,shard,id,target,allocation,id,p,node,r,node,snapshot,replica,routing,entry,primary,0,starting,seq,no,final,recovery,source,handler,recovery,new,recovery,source,handler,primary,recovery,target,request,int,byte,size,unit,mb,to,bytes,1,primary,update,shard,state,primary,routing,entry,primary,get,pending,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,routing,table,collections,empty,set,recovery,recover,to,target,recovery,target,mark,as,done
IndexShardTestCase -> protected final void recoverUnstartedReplica(final IndexShard replica,                                                  final IndexShard primary,                                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                                  final boolean markAsRecovering,                                                  final Set<String> inSyncIds,                                                  final IndexShardRoutingTable routingTable) throws IOException;1547315388;Recovers a replica from the give primary, allow the user to supply a custom recovery target. A typical usage of a custom recovery_target is to assert things in the various stages of recovery.__Note: this method keeps the shard in {@link IndexShardState#POST_RECOVERY} and doesn't start it.__@param replica                the recovery target shard_@param primary                the recovery source shard_@param targetSupplier         supplies an instance of {@link RecoveryTarget}_@param markAsRecovering       set to {@code false} if the replica is marked as recovering;protected final void recoverUnstartedReplica(final IndexShard replica,_                                                 final IndexShard primary,_                                                 final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                                 final boolean markAsRecovering,_                                                 final Set<String> inSyncIds,_                                                 final IndexShardRoutingTable routingTable) throws IOException {_        final DiscoveryNode pNode = getFakeDiscoNode(primary.routingEntry().currentNodeId())__        final DiscoveryNode rNode = getFakeDiscoNode(replica.routingEntry().currentNodeId())__        if (markAsRecovering) {_            replica.markAsRecovering("remote", new RecoveryState(replica.routingEntry(), pNode, rNode))__        } else {_            assertEquals(replica.state(), IndexShardState.RECOVERING)__        }_        replica.prepareForIndexRecovery()__        final RecoveryTarget recoveryTarget = targetSupplier.apply(replica, pNode)__        final String targetAllocationId = recoveryTarget.indexShard().routingEntry().allocationId().getId()___        final Store.MetadataSnapshot snapshot = getMetadataSnapshotOrEmpty(replica)__        final long startingSeqNo__        if (snapshot.size() > 0) {_            startingSeqNo = PeerRecoveryTargetService.getStartingSeqNo(logger, recoveryTarget)__        } else {_            startingSeqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__        }__        final StartRecoveryRequest request = new StartRecoveryRequest(replica.shardId(), targetAllocationId,_            pNode, rNode, snapshot, replica.routingEntry().primary(), 0, startingSeqNo)__        final RecoverySourceHandler recovery = new RecoverySourceHandler(_                primary,_                recoveryTarget,_                request,_                (int) ByteSizeUnit.MB.toBytes(1))__        primary.updateShardState(primary.routingEntry(), primary.getPendingPrimaryTerm(), null,_            currentClusterStateVersion.incrementAndGet(), inSyncIds, routingTable, Collections.emptySet())___        PlainActionFuture<RecoveryResponse> future = new PlainActionFuture<>()__        recovery.recoverToTarget(future)__        future.actionGet()__        recoveryTarget.markAsDone()__    };recovers,a,replica,from,the,give,primary,allow,the,user,to,supply,a,custom,recovery,target,a,typical,usage,of,a,custom,recovery,target,is,to,assert,things,in,the,various,stages,of,recovery,note,this,method,keeps,the,shard,in,link,index,shard,state,and,doesn,t,start,it,param,replica,the,recovery,target,shard,param,primary,the,recovery,source,shard,param,target,supplier,supplies,an,instance,of,link,recovery,target,param,mark,as,recovering,set,to,code,false,if,the,replica,is,marked,as,recovering;protected,final,void,recover,unstarted,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,set,string,in,sync,ids,final,index,shard,routing,table,routing,table,throws,ioexception,final,discovery,node,p,node,get,fake,disco,node,primary,routing,entry,current,node,id,final,discovery,node,r,node,get,fake,disco,node,replica,routing,entry,current,node,id,if,mark,as,recovering,replica,mark,as,recovering,remote,new,recovery,state,replica,routing,entry,p,node,r,node,else,assert,equals,replica,state,index,shard,state,recovering,replica,prepare,for,index,recovery,final,recovery,target,recovery,target,target,supplier,apply,replica,p,node,final,string,target,allocation,id,recovery,target,index,shard,routing,entry,allocation,id,get,id,final,store,metadata,snapshot,snapshot,get,metadata,snapshot,or,empty,replica,final,long,starting,seq,no,if,snapshot,size,0,starting,seq,no,peer,recovery,target,service,get,starting,seq,no,logger,recovery,target,else,starting,seq,no,sequence,numbers,final,start,recovery,request,request,new,start,recovery,request,replica,shard,id,target,allocation,id,p,node,r,node,snapshot,replica,routing,entry,primary,0,starting,seq,no,final,recovery,source,handler,recovery,new,recovery,source,handler,primary,recovery,target,request,int,byte,size,unit,mb,to,bytes,1,primary,update,shard,state,primary,routing,entry,primary,get,pending,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,routing,table,collections,empty,set,plain,action,future,recovery,response,future,new,plain,action,future,recovery,recover,to,target,future,future,action,get,recovery,target,mark,as,done
IndexShardTestCase -> protected final void recoverUnstartedReplica(final IndexShard replica,                                                  final IndexShard primary,                                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                                  final boolean markAsRecovering,                                                  final Set<String> inSyncIds,                                                  final IndexShardRoutingTable routingTable) throws IOException;1547496475;Recovers a replica from the give primary, allow the user to supply a custom recovery target. A typical usage of a custom recovery_target is to assert things in the various stages of recovery.__Note: this method keeps the shard in {@link IndexShardState#POST_RECOVERY} and doesn't start it.__@param replica                the recovery target shard_@param primary                the recovery source shard_@param targetSupplier         supplies an instance of {@link RecoveryTarget}_@param markAsRecovering       set to {@code false} if the replica is marked as recovering;protected final void recoverUnstartedReplica(final IndexShard replica,_                                                 final IndexShard primary,_                                                 final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                                 final boolean markAsRecovering,_                                                 final Set<String> inSyncIds,_                                                 final IndexShardRoutingTable routingTable) throws IOException {_        final DiscoveryNode pNode = getFakeDiscoNode(primary.routingEntry().currentNodeId())__        final DiscoveryNode rNode = getFakeDiscoNode(replica.routingEntry().currentNodeId())__        if (markAsRecovering) {_            replica.markAsRecovering("remote", new RecoveryState(replica.routingEntry(), pNode, rNode))__        } else {_            assertEquals(replica.state(), IndexShardState.RECOVERING)__        }_        replica.prepareForIndexRecovery()__        final RecoveryTarget recoveryTarget = targetSupplier.apply(replica, pNode)__        final String targetAllocationId = recoveryTarget.indexShard().routingEntry().allocationId().getId()___        final Store.MetadataSnapshot snapshot = getMetadataSnapshotOrEmpty(replica)__        final long startingSeqNo__        if (snapshot.size() > 0) {_            startingSeqNo = PeerRecoveryTargetService.getStartingSeqNo(logger, recoveryTarget)__        } else {_            startingSeqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__        }__        final StartRecoveryRequest request = new StartRecoveryRequest(replica.shardId(), targetAllocationId,_            pNode, rNode, snapshot, replica.routingEntry().primary(), 0, startingSeqNo)__        final RecoverySourceHandler recovery = new RecoverySourceHandler(_                primary,_                recoveryTarget,_                request,_                (int) ByteSizeUnit.MB.toBytes(1))__        primary.updateShardState(primary.routingEntry(), primary.getPendingPrimaryTerm(), null,_            currentClusterStateVersion.incrementAndGet(), inSyncIds, routingTable, Collections.emptySet())___        PlainActionFuture<RecoveryResponse> future = new PlainActionFuture<>()__        recovery.recoverToTarget(future)__        future.actionGet()__        recoveryTarget.markAsDone()__    };recovers,a,replica,from,the,give,primary,allow,the,user,to,supply,a,custom,recovery,target,a,typical,usage,of,a,custom,recovery,target,is,to,assert,things,in,the,various,stages,of,recovery,note,this,method,keeps,the,shard,in,link,index,shard,state,and,doesn,t,start,it,param,replica,the,recovery,target,shard,param,primary,the,recovery,source,shard,param,target,supplier,supplies,an,instance,of,link,recovery,target,param,mark,as,recovering,set,to,code,false,if,the,replica,is,marked,as,recovering;protected,final,void,recover,unstarted,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,set,string,in,sync,ids,final,index,shard,routing,table,routing,table,throws,ioexception,final,discovery,node,p,node,get,fake,disco,node,primary,routing,entry,current,node,id,final,discovery,node,r,node,get,fake,disco,node,replica,routing,entry,current,node,id,if,mark,as,recovering,replica,mark,as,recovering,remote,new,recovery,state,replica,routing,entry,p,node,r,node,else,assert,equals,replica,state,index,shard,state,recovering,replica,prepare,for,index,recovery,final,recovery,target,recovery,target,target,supplier,apply,replica,p,node,final,string,target,allocation,id,recovery,target,index,shard,routing,entry,allocation,id,get,id,final,store,metadata,snapshot,snapshot,get,metadata,snapshot,or,empty,replica,final,long,starting,seq,no,if,snapshot,size,0,starting,seq,no,peer,recovery,target,service,get,starting,seq,no,logger,recovery,target,else,starting,seq,no,sequence,numbers,final,start,recovery,request,request,new,start,recovery,request,replica,shard,id,target,allocation,id,p,node,r,node,snapshot,replica,routing,entry,primary,0,starting,seq,no,final,recovery,source,handler,recovery,new,recovery,source,handler,primary,recovery,target,request,int,byte,size,unit,mb,to,bytes,1,primary,update,shard,state,primary,routing,entry,primary,get,pending,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,routing,table,collections,empty,set,plain,action,future,recovery,response,future,new,plain,action,future,recovery,recover,to,target,future,future,action,get,recovery,target,mark,as,done
IndexShardTestCase -> protected final void recoverUnstartedReplica(final IndexShard replica,                                                  final IndexShard primary,                                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                                  final boolean markAsRecovering,                                                  final Set<String> inSyncIds,                                                  final IndexShardRoutingTable routingTable) throws IOException;1547496886;Recovers a replica from the give primary, allow the user to supply a custom recovery target. A typical usage of a custom recovery_target is to assert things in the various stages of recovery.__Note: this method keeps the shard in {@link IndexShardState#POST_RECOVERY} and doesn't start it.__@param replica                the recovery target shard_@param primary                the recovery source shard_@param targetSupplier         supplies an instance of {@link RecoveryTarget}_@param markAsRecovering       set to {@code false} if the replica is marked as recovering;protected final void recoverUnstartedReplica(final IndexShard replica,_                                                 final IndexShard primary,_                                                 final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                                 final boolean markAsRecovering,_                                                 final Set<String> inSyncIds,_                                                 final IndexShardRoutingTable routingTable) throws IOException {_        final DiscoveryNode pNode = getFakeDiscoNode(primary.routingEntry().currentNodeId())__        final DiscoveryNode rNode = getFakeDiscoNode(replica.routingEntry().currentNodeId())__        if (markAsRecovering) {_            replica.markAsRecovering("remote", new RecoveryState(replica.routingEntry(), pNode, rNode))__        } else {_            assertEquals(replica.state(), IndexShardState.RECOVERING)__        }_        replica.prepareForIndexRecovery()__        final RecoveryTarget recoveryTarget = targetSupplier.apply(replica, pNode)__        final String targetAllocationId = recoveryTarget.indexShard().routingEntry().allocationId().getId()___        final Store.MetadataSnapshot snapshot = getMetadataSnapshotOrEmpty(replica)__        final long startingSeqNo__        if (snapshot.size() > 0) {_            startingSeqNo = PeerRecoveryTargetService.getStartingSeqNo(logger, recoveryTarget)__        } else {_            startingSeqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__        }__        final StartRecoveryRequest request = new StartRecoveryRequest(replica.shardId(), targetAllocationId,_            pNode, rNode, snapshot, replica.routingEntry().primary(), 0, startingSeqNo)__        final RecoverySourceHandler recovery = new RecoverySourceHandler(_            primary, recoveryTarget, request, Math.toIntExact(ByteSizeUnit.MB.toBytes(1)), between(1, 8))__        primary.updateShardState(primary.routingEntry(), primary.getPendingPrimaryTerm(), null,_            currentClusterStateVersion.incrementAndGet(), inSyncIds, routingTable, Collections.emptySet())___        PlainActionFuture<RecoveryResponse> future = new PlainActionFuture<>()__        recovery.recoverToTarget(future)__        future.actionGet()__        recoveryTarget.markAsDone()__    };recovers,a,replica,from,the,give,primary,allow,the,user,to,supply,a,custom,recovery,target,a,typical,usage,of,a,custom,recovery,target,is,to,assert,things,in,the,various,stages,of,recovery,note,this,method,keeps,the,shard,in,link,index,shard,state,and,doesn,t,start,it,param,replica,the,recovery,target,shard,param,primary,the,recovery,source,shard,param,target,supplier,supplies,an,instance,of,link,recovery,target,param,mark,as,recovering,set,to,code,false,if,the,replica,is,marked,as,recovering;protected,final,void,recover,unstarted,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,set,string,in,sync,ids,final,index,shard,routing,table,routing,table,throws,ioexception,final,discovery,node,p,node,get,fake,disco,node,primary,routing,entry,current,node,id,final,discovery,node,r,node,get,fake,disco,node,replica,routing,entry,current,node,id,if,mark,as,recovering,replica,mark,as,recovering,remote,new,recovery,state,replica,routing,entry,p,node,r,node,else,assert,equals,replica,state,index,shard,state,recovering,replica,prepare,for,index,recovery,final,recovery,target,recovery,target,target,supplier,apply,replica,p,node,final,string,target,allocation,id,recovery,target,index,shard,routing,entry,allocation,id,get,id,final,store,metadata,snapshot,snapshot,get,metadata,snapshot,or,empty,replica,final,long,starting,seq,no,if,snapshot,size,0,starting,seq,no,peer,recovery,target,service,get,starting,seq,no,logger,recovery,target,else,starting,seq,no,sequence,numbers,final,start,recovery,request,request,new,start,recovery,request,replica,shard,id,target,allocation,id,p,node,r,node,snapshot,replica,routing,entry,primary,0,starting,seq,no,final,recovery,source,handler,recovery,new,recovery,source,handler,primary,recovery,target,request,math,to,int,exact,byte,size,unit,mb,to,bytes,1,between,1,8,primary,update,shard,state,primary,routing,entry,primary,get,pending,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,routing,table,collections,empty,set,plain,action,future,recovery,response,future,new,plain,action,future,recovery,recover,to,target,future,future,action,get,recovery,target,mark,as,done
IndexShardTestCase -> protected final void recoverUnstartedReplica(final IndexShard replica,                                                  final IndexShard primary,                                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                                  final boolean markAsRecovering,                                                  final Set<String> inSyncIds,                                                  final IndexShardRoutingTable routingTable) throws IOException;1547520324;Recovers a replica from the give primary, allow the user to supply a custom recovery target. A typical usage of a custom recovery_target is to assert things in the various stages of recovery.__Note: this method keeps the shard in {@link IndexShardState#POST_RECOVERY} and doesn't start it.__@param replica                the recovery target shard_@param primary                the recovery source shard_@param targetSupplier         supplies an instance of {@link RecoveryTarget}_@param markAsRecovering       set to {@code false} if the replica is marked as recovering;protected final void recoverUnstartedReplica(final IndexShard replica,_                                                 final IndexShard primary,_                                                 final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                                 final boolean markAsRecovering,_                                                 final Set<String> inSyncIds,_                                                 final IndexShardRoutingTable routingTable) throws IOException {_        final DiscoveryNode pNode = getFakeDiscoNode(primary.routingEntry().currentNodeId())__        final DiscoveryNode rNode = getFakeDiscoNode(replica.routingEntry().currentNodeId())__        if (markAsRecovering) {_            replica.markAsRecovering("remote", new RecoveryState(replica.routingEntry(), pNode, rNode))__        } else {_            assertEquals(replica.state(), IndexShardState.RECOVERING)__        }_        replica.prepareForIndexRecovery()__        final RecoveryTarget recoveryTarget = targetSupplier.apply(replica, pNode)__        final String targetAllocationId = recoveryTarget.indexShard().routingEntry().allocationId().getId()___        final Store.MetadataSnapshot snapshot = getMetadataSnapshotOrEmpty(replica)__        final long startingSeqNo__        if (snapshot.size() > 0) {_            startingSeqNo = PeerRecoveryTargetService.getStartingSeqNo(logger, recoveryTarget)__        } else {_            startingSeqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__        }__        final StartRecoveryRequest request = new StartRecoveryRequest(replica.shardId(), targetAllocationId,_            pNode, rNode, snapshot, replica.routingEntry().primary(), 0, startingSeqNo)__        final RecoverySourceHandler recovery = new RecoverySourceHandler(_            primary, recoveryTarget, request, Math.toIntExact(ByteSizeUnit.MB.toBytes(1)), between(1, 8))__        primary.updateShardState(primary.routingEntry(), primary.getPendingPrimaryTerm(), null,_            currentClusterStateVersion.incrementAndGet(), inSyncIds, routingTable, Collections.emptySet())___        PlainActionFuture<RecoveryResponse> future = new PlainActionFuture<>()__        recovery.recoverToTarget(future)__        future.actionGet()__        recoveryTarget.markAsDone()__    };recovers,a,replica,from,the,give,primary,allow,the,user,to,supply,a,custom,recovery,target,a,typical,usage,of,a,custom,recovery,target,is,to,assert,things,in,the,various,stages,of,recovery,note,this,method,keeps,the,shard,in,link,index,shard,state,and,doesn,t,start,it,param,replica,the,recovery,target,shard,param,primary,the,recovery,source,shard,param,target,supplier,supplies,an,instance,of,link,recovery,target,param,mark,as,recovering,set,to,code,false,if,the,replica,is,marked,as,recovering;protected,final,void,recover,unstarted,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,set,string,in,sync,ids,final,index,shard,routing,table,routing,table,throws,ioexception,final,discovery,node,p,node,get,fake,disco,node,primary,routing,entry,current,node,id,final,discovery,node,r,node,get,fake,disco,node,replica,routing,entry,current,node,id,if,mark,as,recovering,replica,mark,as,recovering,remote,new,recovery,state,replica,routing,entry,p,node,r,node,else,assert,equals,replica,state,index,shard,state,recovering,replica,prepare,for,index,recovery,final,recovery,target,recovery,target,target,supplier,apply,replica,p,node,final,string,target,allocation,id,recovery,target,index,shard,routing,entry,allocation,id,get,id,final,store,metadata,snapshot,snapshot,get,metadata,snapshot,or,empty,replica,final,long,starting,seq,no,if,snapshot,size,0,starting,seq,no,peer,recovery,target,service,get,starting,seq,no,logger,recovery,target,else,starting,seq,no,sequence,numbers,final,start,recovery,request,request,new,start,recovery,request,replica,shard,id,target,allocation,id,p,node,r,node,snapshot,replica,routing,entry,primary,0,starting,seq,no,final,recovery,source,handler,recovery,new,recovery,source,handler,primary,recovery,target,request,math,to,int,exact,byte,size,unit,mb,to,bytes,1,between,1,8,primary,update,shard,state,primary,routing,entry,primary,get,pending,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,routing,table,collections,empty,set,plain,action,future,recovery,response,future,new,plain,action,future,recovery,recover,to,target,future,future,action,get,recovery,target,mark,as,done
IndexShardTestCase -> protected final void recoverUnstartedReplica(final IndexShard replica,                                                  final IndexShard primary,                                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                                  final boolean markAsRecovering,                                                  final Set<String> inSyncIds,                                                  final IndexShardRoutingTable routingTable) throws IOException;1547552901;Recovers a replica from the give primary, allow the user to supply a custom recovery target. A typical usage of a custom recovery_target is to assert things in the various stages of recovery.__Note: this method keeps the shard in {@link IndexShardState#POST_RECOVERY} and doesn't start it.__@param replica                the recovery target shard_@param primary                the recovery source shard_@param targetSupplier         supplies an instance of {@link RecoveryTarget}_@param markAsRecovering       set to {@code false} if the replica is marked as recovering;protected final void recoverUnstartedReplica(final IndexShard replica,_                                                 final IndexShard primary,_                                                 final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                                 final boolean markAsRecovering,_                                                 final Set<String> inSyncIds,_                                                 final IndexShardRoutingTable routingTable) throws IOException {_        final DiscoveryNode pNode = getFakeDiscoNode(primary.routingEntry().currentNodeId())__        final DiscoveryNode rNode = getFakeDiscoNode(replica.routingEntry().currentNodeId())__        if (markAsRecovering) {_            replica.markAsRecovering("remote", new RecoveryState(replica.routingEntry(), pNode, rNode))__        } else {_            assertEquals(replica.state(), IndexShardState.RECOVERING)__        }_        replica.prepareForIndexRecovery()__        final RecoveryTarget recoveryTarget = targetSupplier.apply(replica, pNode)__        final String targetAllocationId = recoveryTarget.indexShard().routingEntry().allocationId().getId()___        final Store.MetadataSnapshot snapshot = getMetadataSnapshotOrEmpty(replica)__        final long startingSeqNo__        if (snapshot.size() > 0) {_            startingSeqNo = PeerRecoveryTargetService.getStartingSeqNo(logger, recoveryTarget)__        } else {_            startingSeqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__        }__        final StartRecoveryRequest request = new StartRecoveryRequest(replica.shardId(), targetAllocationId,_            pNode, rNode, snapshot, replica.routingEntry().primary(), 0, startingSeqNo)__        final RecoverySourceHandler recovery = new RecoverySourceHandler(_            primary, recoveryTarget, request, Math.toIntExact(ByteSizeUnit.MB.toBytes(1)), between(1, 8))__        primary.updateShardState(primary.routingEntry(), primary.getPendingPrimaryTerm(), null,_            currentClusterStateVersion.incrementAndGet(), inSyncIds, routingTable, Collections.emptySet())___        PlainActionFuture<RecoveryResponse> future = new PlainActionFuture<>()__        recovery.recoverToTarget(future)__        future.actionGet()__        recoveryTarget.markAsDone()__    };recovers,a,replica,from,the,give,primary,allow,the,user,to,supply,a,custom,recovery,target,a,typical,usage,of,a,custom,recovery,target,is,to,assert,things,in,the,various,stages,of,recovery,note,this,method,keeps,the,shard,in,link,index,shard,state,and,doesn,t,start,it,param,replica,the,recovery,target,shard,param,primary,the,recovery,source,shard,param,target,supplier,supplies,an,instance,of,link,recovery,target,param,mark,as,recovering,set,to,code,false,if,the,replica,is,marked,as,recovering;protected,final,void,recover,unstarted,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,set,string,in,sync,ids,final,index,shard,routing,table,routing,table,throws,ioexception,final,discovery,node,p,node,get,fake,disco,node,primary,routing,entry,current,node,id,final,discovery,node,r,node,get,fake,disco,node,replica,routing,entry,current,node,id,if,mark,as,recovering,replica,mark,as,recovering,remote,new,recovery,state,replica,routing,entry,p,node,r,node,else,assert,equals,replica,state,index,shard,state,recovering,replica,prepare,for,index,recovery,final,recovery,target,recovery,target,target,supplier,apply,replica,p,node,final,string,target,allocation,id,recovery,target,index,shard,routing,entry,allocation,id,get,id,final,store,metadata,snapshot,snapshot,get,metadata,snapshot,or,empty,replica,final,long,starting,seq,no,if,snapshot,size,0,starting,seq,no,peer,recovery,target,service,get,starting,seq,no,logger,recovery,target,else,starting,seq,no,sequence,numbers,final,start,recovery,request,request,new,start,recovery,request,replica,shard,id,target,allocation,id,p,node,r,node,snapshot,replica,routing,entry,primary,0,starting,seq,no,final,recovery,source,handler,recovery,new,recovery,source,handler,primary,recovery,target,request,math,to,int,exact,byte,size,unit,mb,to,bytes,1,between,1,8,primary,update,shard,state,primary,routing,entry,primary,get,pending,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,routing,table,collections,empty,set,plain,action,future,recovery,response,future,new,plain,action,future,recovery,recover,to,target,future,future,action,get,recovery,target,mark,as,done
IndexShardTestCase -> protected final void recoverUnstartedReplica(final IndexShard replica,                                                  final IndexShard primary,                                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                                  final boolean markAsRecovering,                                                  final Set<String> inSyncIds,                                                  final IndexShardRoutingTable routingTable) throws IOException;1548593396;Recovers a replica from the give primary, allow the user to supply a custom recovery target. A typical usage of a custom recovery_target is to assert things in the various stages of recovery.__Note: this method keeps the shard in {@link IndexShardState#POST_RECOVERY} and doesn't start it.__@param replica                the recovery target shard_@param primary                the recovery source shard_@param targetSupplier         supplies an instance of {@link RecoveryTarget}_@param markAsRecovering       set to {@code false} if the replica is marked as recovering;protected final void recoverUnstartedReplica(final IndexShard replica,_                                                 final IndexShard primary,_                                                 final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                                 final boolean markAsRecovering,_                                                 final Set<String> inSyncIds,_                                                 final IndexShardRoutingTable routingTable) throws IOException {_        final DiscoveryNode pNode = getFakeDiscoNode(primary.routingEntry().currentNodeId())__        final DiscoveryNode rNode = getFakeDiscoNode(replica.routingEntry().currentNodeId())__        if (markAsRecovering) {_            replica.markAsRecovering("remote", new RecoveryState(replica.routingEntry(), pNode, rNode))__        } else {_            assertEquals(replica.state(), IndexShardState.RECOVERING)__        }_        replica.prepareForIndexRecovery()__        final RecoveryTarget recoveryTarget = targetSupplier.apply(replica, pNode)__        final String targetAllocationId = recoveryTarget.indexShard().routingEntry().allocationId().getId()___        final Store.MetadataSnapshot snapshot = getMetadataSnapshotOrEmpty(replica)__        final long startingSeqNo__        if (snapshot.size() > 0) {_            startingSeqNo = PeerRecoveryTargetService.getStartingSeqNo(logger, recoveryTarget)__        } else {_            startingSeqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__        }__        final StartRecoveryRequest request = new StartRecoveryRequest(replica.shardId(), targetAllocationId,_            pNode, rNode, snapshot, replica.routingEntry().primary(), 0, startingSeqNo)__        final RecoverySourceHandler recovery = new RecoverySourceHandler(_            primary, recoveryTarget, request, Math.toIntExact(ByteSizeUnit.MB.toBytes(1)), between(1, 8))__        primary.updateShardState(primary.routingEntry(), primary.getPendingPrimaryTerm(), null,_            currentClusterStateVersion.incrementAndGet(), inSyncIds, routingTable, Collections.emptySet())___        PlainActionFuture<RecoveryResponse> future = new PlainActionFuture<>()__        recovery.recoverToTarget(future)__        future.actionGet()__        recoveryTarget.markAsDone()__    };recovers,a,replica,from,the,give,primary,allow,the,user,to,supply,a,custom,recovery,target,a,typical,usage,of,a,custom,recovery,target,is,to,assert,things,in,the,various,stages,of,recovery,note,this,method,keeps,the,shard,in,link,index,shard,state,and,doesn,t,start,it,param,replica,the,recovery,target,shard,param,primary,the,recovery,source,shard,param,target,supplier,supplies,an,instance,of,link,recovery,target,param,mark,as,recovering,set,to,code,false,if,the,replica,is,marked,as,recovering;protected,final,void,recover,unstarted,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,set,string,in,sync,ids,final,index,shard,routing,table,routing,table,throws,ioexception,final,discovery,node,p,node,get,fake,disco,node,primary,routing,entry,current,node,id,final,discovery,node,r,node,get,fake,disco,node,replica,routing,entry,current,node,id,if,mark,as,recovering,replica,mark,as,recovering,remote,new,recovery,state,replica,routing,entry,p,node,r,node,else,assert,equals,replica,state,index,shard,state,recovering,replica,prepare,for,index,recovery,final,recovery,target,recovery,target,target,supplier,apply,replica,p,node,final,string,target,allocation,id,recovery,target,index,shard,routing,entry,allocation,id,get,id,final,store,metadata,snapshot,snapshot,get,metadata,snapshot,or,empty,replica,final,long,starting,seq,no,if,snapshot,size,0,starting,seq,no,peer,recovery,target,service,get,starting,seq,no,logger,recovery,target,else,starting,seq,no,sequence,numbers,final,start,recovery,request,request,new,start,recovery,request,replica,shard,id,target,allocation,id,p,node,r,node,snapshot,replica,routing,entry,primary,0,starting,seq,no,final,recovery,source,handler,recovery,new,recovery,source,handler,primary,recovery,target,request,math,to,int,exact,byte,size,unit,mb,to,bytes,1,between,1,8,primary,update,shard,state,primary,routing,entry,primary,get,pending,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,routing,table,collections,empty,set,plain,action,future,recovery,response,future,new,plain,action,future,recovery,recover,to,target,future,future,action,get,recovery,target,mark,as,done
IndexShardTestCase -> protected final void recoverUnstartedReplica(final IndexShard replica,                                                  final IndexShard primary,                                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                                  final boolean markAsRecovering,                                                  final Set<String> inSyncIds,                                                  final IndexShardRoutingTable routingTable) throws IOException;1549294529;Recovers a replica from the give primary, allow the user to supply a custom recovery target. A typical usage of a custom recovery_target is to assert things in the various stages of recovery.__Note: this method keeps the shard in {@link IndexShardState#POST_RECOVERY} and doesn't start it.__@param replica                the recovery target shard_@param primary                the recovery source shard_@param targetSupplier         supplies an instance of {@link RecoveryTarget}_@param markAsRecovering       set to {@code false} if the replica is marked as recovering;protected final void recoverUnstartedReplica(final IndexShard replica,_                                                 final IndexShard primary,_                                                 final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                                 final boolean markAsRecovering,_                                                 final Set<String> inSyncIds,_                                                 final IndexShardRoutingTable routingTable) throws IOException {_        final DiscoveryNode pNode = getFakeDiscoNode(primary.routingEntry().currentNodeId())__        final DiscoveryNode rNode = getFakeDiscoNode(replica.routingEntry().currentNodeId())__        if (markAsRecovering) {_            replica.markAsRecovering("remote", new RecoveryState(replica.routingEntry(), pNode, rNode))__        } else {_            assertEquals(replica.state(), IndexShardState.RECOVERING)__        }_        replica.prepareForIndexRecovery()__        final RecoveryTarget recoveryTarget = targetSupplier.apply(replica, pNode)__        final String targetAllocationId = recoveryTarget.indexShard().routingEntry().allocationId().getId()___        final Store.MetadataSnapshot snapshot = getMetadataSnapshotOrEmpty(replica)__        final long startingSeqNo__        if (snapshot.size() > 0) {_            startingSeqNo = PeerRecoveryTargetService.getStartingSeqNo(logger, recoveryTarget)__        } else {_            startingSeqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__        }__        final StartRecoveryRequest request = new StartRecoveryRequest(replica.shardId(), targetAllocationId,_            pNode, rNode, snapshot, replica.routingEntry().primary(), 0, startingSeqNo)__        final RecoverySourceHandler recovery = new RecoverySourceHandler(_            primary, recoveryTarget, request, Math.toIntExact(ByteSizeUnit.MB.toBytes(1)), between(1, 8))__        primary.updateShardState(primary.routingEntry(), primary.getPendingPrimaryTerm(), null,_            currentClusterStateVersion.incrementAndGet(), inSyncIds, routingTable, Collections.emptySet())___        PlainActionFuture<RecoveryResponse> future = new PlainActionFuture<>()__        recovery.recoverToTarget(future)__        future.actionGet()__        recoveryTarget.markAsDone()__    };recovers,a,replica,from,the,give,primary,allow,the,user,to,supply,a,custom,recovery,target,a,typical,usage,of,a,custom,recovery,target,is,to,assert,things,in,the,various,stages,of,recovery,note,this,method,keeps,the,shard,in,link,index,shard,state,and,doesn,t,start,it,param,replica,the,recovery,target,shard,param,primary,the,recovery,source,shard,param,target,supplier,supplies,an,instance,of,link,recovery,target,param,mark,as,recovering,set,to,code,false,if,the,replica,is,marked,as,recovering;protected,final,void,recover,unstarted,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,set,string,in,sync,ids,final,index,shard,routing,table,routing,table,throws,ioexception,final,discovery,node,p,node,get,fake,disco,node,primary,routing,entry,current,node,id,final,discovery,node,r,node,get,fake,disco,node,replica,routing,entry,current,node,id,if,mark,as,recovering,replica,mark,as,recovering,remote,new,recovery,state,replica,routing,entry,p,node,r,node,else,assert,equals,replica,state,index,shard,state,recovering,replica,prepare,for,index,recovery,final,recovery,target,recovery,target,target,supplier,apply,replica,p,node,final,string,target,allocation,id,recovery,target,index,shard,routing,entry,allocation,id,get,id,final,store,metadata,snapshot,snapshot,get,metadata,snapshot,or,empty,replica,final,long,starting,seq,no,if,snapshot,size,0,starting,seq,no,peer,recovery,target,service,get,starting,seq,no,logger,recovery,target,else,starting,seq,no,sequence,numbers,final,start,recovery,request,request,new,start,recovery,request,replica,shard,id,target,allocation,id,p,node,r,node,snapshot,replica,routing,entry,primary,0,starting,seq,no,final,recovery,source,handler,recovery,new,recovery,source,handler,primary,recovery,target,request,math,to,int,exact,byte,size,unit,mb,to,bytes,1,between,1,8,primary,update,shard,state,primary,routing,entry,primary,get,pending,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,routing,table,collections,empty,set,plain,action,future,recovery,response,future,new,plain,action,future,recovery,recover,to,target,future,future,action,get,recovery,target,mark,as,done
IndexShardTestCase -> protected final void recoverUnstartedReplica(final IndexShard replica,                                                  final IndexShard primary,                                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                                  final boolean markAsRecovering,                                                  final Set<String> inSyncIds,                                                  final IndexShardRoutingTable routingTable) throws IOException;1550668107;Recovers a replica from the give primary, allow the user to supply a custom recovery target. A typical usage of a custom recovery_target is to assert things in the various stages of recovery.__Note: this method keeps the shard in {@link IndexShardState#POST_RECOVERY} and doesn't start it.__@param replica                the recovery target shard_@param primary                the recovery source shard_@param targetSupplier         supplies an instance of {@link RecoveryTarget}_@param markAsRecovering       set to {@code false} if the replica is marked as recovering;protected final void recoverUnstartedReplica(final IndexShard replica,_                                                 final IndexShard primary,_                                                 final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                                 final boolean markAsRecovering,_                                                 final Set<String> inSyncIds,_                                                 final IndexShardRoutingTable routingTable) throws IOException {_        final DiscoveryNode pNode = getFakeDiscoNode(primary.routingEntry().currentNodeId())__        final DiscoveryNode rNode = getFakeDiscoNode(replica.routingEntry().currentNodeId())__        if (markAsRecovering) {_            replica.markAsRecovering("remote", new RecoveryState(replica.routingEntry(), pNode, rNode))__        } else {_            assertEquals(replica.state(), IndexShardState.RECOVERING)__        }_        replica.prepareForIndexRecovery()__        final RecoveryTarget recoveryTarget = targetSupplier.apply(replica, pNode)__        final String targetAllocationId = recoveryTarget.indexShard().routingEntry().allocationId().getId()___        final Store.MetadataSnapshot snapshot = getMetadataSnapshotOrEmpty(replica)__        final long startingSeqNo__        if (snapshot.size() > 0) {_            startingSeqNo = PeerRecoveryTargetService.getStartingSeqNo(logger, recoveryTarget)__        } else {_            startingSeqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__        }__        final StartRecoveryRequest request = new StartRecoveryRequest(replica.shardId(), targetAllocationId,_            pNode, rNode, snapshot, replica.routingEntry().primary(), 0, startingSeqNo)__        final RecoverySourceHandler recovery = new RecoverySourceHandler(_            primary, recoveryTarget, request, Math.toIntExact(ByteSizeUnit.MB.toBytes(1)), between(1, 8))__        primary.updateShardState(primary.routingEntry(), primary.getPendingPrimaryTerm(), null,_            currentClusterStateVersion.incrementAndGet(), inSyncIds, routingTable, Collections.emptySet())___        PlainActionFuture<RecoveryResponse> future = new PlainActionFuture<>()__        recovery.recoverToTarget(future)__        future.actionGet()__        recoveryTarget.markAsDone()__    };recovers,a,replica,from,the,give,primary,allow,the,user,to,supply,a,custom,recovery,target,a,typical,usage,of,a,custom,recovery,target,is,to,assert,things,in,the,various,stages,of,recovery,note,this,method,keeps,the,shard,in,link,index,shard,state,and,doesn,t,start,it,param,replica,the,recovery,target,shard,param,primary,the,recovery,source,shard,param,target,supplier,supplies,an,instance,of,link,recovery,target,param,mark,as,recovering,set,to,code,false,if,the,replica,is,marked,as,recovering;protected,final,void,recover,unstarted,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,set,string,in,sync,ids,final,index,shard,routing,table,routing,table,throws,ioexception,final,discovery,node,p,node,get,fake,disco,node,primary,routing,entry,current,node,id,final,discovery,node,r,node,get,fake,disco,node,replica,routing,entry,current,node,id,if,mark,as,recovering,replica,mark,as,recovering,remote,new,recovery,state,replica,routing,entry,p,node,r,node,else,assert,equals,replica,state,index,shard,state,recovering,replica,prepare,for,index,recovery,final,recovery,target,recovery,target,target,supplier,apply,replica,p,node,final,string,target,allocation,id,recovery,target,index,shard,routing,entry,allocation,id,get,id,final,store,metadata,snapshot,snapshot,get,metadata,snapshot,or,empty,replica,final,long,starting,seq,no,if,snapshot,size,0,starting,seq,no,peer,recovery,target,service,get,starting,seq,no,logger,recovery,target,else,starting,seq,no,sequence,numbers,final,start,recovery,request,request,new,start,recovery,request,replica,shard,id,target,allocation,id,p,node,r,node,snapshot,replica,routing,entry,primary,0,starting,seq,no,final,recovery,source,handler,recovery,new,recovery,source,handler,primary,recovery,target,request,math,to,int,exact,byte,size,unit,mb,to,bytes,1,between,1,8,primary,update,shard,state,primary,routing,entry,primary,get,pending,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,routing,table,collections,empty,set,plain,action,future,recovery,response,future,new,plain,action,future,recovery,recover,to,target,future,future,action,get,recovery,target,mark,as,done
IndexShardTestCase -> protected void recoverReplica(final IndexShard replica,                                   final IndexShard primary,                                   final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                   final boolean markAsRecovering, final boolean markAsStarted) throws IOException;1531910483;recovers a replica from the given primary *;protected void recoverReplica(final IndexShard replica,_                                  final IndexShard primary,_                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                  final boolean markAsRecovering, final boolean markAsStarted) throws IOException {_        IndexShardRoutingTable.Builder newRoutingTable = new IndexShardRoutingTable.Builder(replica.shardId())__        newRoutingTable.addShard(primary.routingEntry())__        if (replica.routingEntry().isRelocationTarget() == false) {_            newRoutingTable.addShard(replica.routingEntry())__        }_        final Set<String> inSyncIds = Collections.singleton(primary.routingEntry().allocationId().getId())__        final IndexShardRoutingTable routingTable = newRoutingTable.build()__        recoverUnstartedReplica(replica, primary, targetSupplier, markAsRecovering, inSyncIds, routingTable)__        if (markAsStarted) {_            startReplicaAfterRecovery(replica, primary, inSyncIds, routingTable)__        }_    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,boolean,mark,as,started,throws,ioexception,index,shard,routing,table,builder,new,routing,table,new,index,shard,routing,table,builder,replica,shard,id,new,routing,table,add,shard,primary,routing,entry,if,replica,routing,entry,is,relocation,target,false,new,routing,table,add,shard,replica,routing,entry,final,set,string,in,sync,ids,collections,singleton,primary,routing,entry,allocation,id,get,id,final,index,shard,routing,table,routing,table,new,routing,table,build,recover,unstarted,replica,replica,primary,target,supplier,mark,as,recovering,in,sync,ids,routing,table,if,mark,as,started,start,replica,after,recovery,replica,primary,in,sync,ids,routing,table
IndexShardTestCase -> protected void recoverReplica(final IndexShard replica,                                   final IndexShard primary,                                   final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                   final boolean markAsRecovering, final boolean markAsStarted) throws IOException;1532434432;recovers a replica from the given primary *;protected void recoverReplica(final IndexShard replica,_                                  final IndexShard primary,_                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                  final boolean markAsRecovering, final boolean markAsStarted) throws IOException {_        IndexShardRoutingTable.Builder newRoutingTable = new IndexShardRoutingTable.Builder(replica.shardId())__        newRoutingTable.addShard(primary.routingEntry())__        if (replica.routingEntry().isRelocationTarget() == false) {_            newRoutingTable.addShard(replica.routingEntry())__        }_        final Set<String> inSyncIds = Collections.singleton(primary.routingEntry().allocationId().getId())__        final IndexShardRoutingTable routingTable = newRoutingTable.build()__        recoverUnstartedReplica(replica, primary, targetSupplier, markAsRecovering, inSyncIds, routingTable)__        if (markAsStarted) {_            startReplicaAfterRecovery(replica, primary, inSyncIds, routingTable)__        }_    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,boolean,mark,as,started,throws,ioexception,index,shard,routing,table,builder,new,routing,table,new,index,shard,routing,table,builder,replica,shard,id,new,routing,table,add,shard,primary,routing,entry,if,replica,routing,entry,is,relocation,target,false,new,routing,table,add,shard,replica,routing,entry,final,set,string,in,sync,ids,collections,singleton,primary,routing,entry,allocation,id,get,id,final,index,shard,routing,table,routing,table,new,routing,table,build,recover,unstarted,replica,replica,primary,target,supplier,mark,as,recovering,in,sync,ids,routing,table,if,mark,as,started,start,replica,after,recovery,replica,primary,in,sync,ids,routing,table
IndexShardTestCase -> protected void recoverReplica(final IndexShard replica,                                   final IndexShard primary,                                   final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                   final boolean markAsRecovering, final boolean markAsStarted) throws IOException;1533295538;recovers a replica from the given primary *;protected void recoverReplica(final IndexShard replica,_                                  final IndexShard primary,_                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                  final boolean markAsRecovering, final boolean markAsStarted) throws IOException {_        IndexShardRoutingTable.Builder newRoutingTable = new IndexShardRoutingTable.Builder(replica.shardId())__        newRoutingTable.addShard(primary.routingEntry())__        if (replica.routingEntry().isRelocationTarget() == false) {_            newRoutingTable.addShard(replica.routingEntry())__        }_        final Set<String> inSyncIds = Collections.singleton(primary.routingEntry().allocationId().getId())__        final IndexShardRoutingTable routingTable = newRoutingTable.build()__        recoverUnstartedReplica(replica, primary, targetSupplier, markAsRecovering, inSyncIds, routingTable)__        if (markAsStarted) {_            startReplicaAfterRecovery(replica, primary, inSyncIds, routingTable)__        }_    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,boolean,mark,as,started,throws,ioexception,index,shard,routing,table,builder,new,routing,table,new,index,shard,routing,table,builder,replica,shard,id,new,routing,table,add,shard,primary,routing,entry,if,replica,routing,entry,is,relocation,target,false,new,routing,table,add,shard,replica,routing,entry,final,set,string,in,sync,ids,collections,singleton,primary,routing,entry,allocation,id,get,id,final,index,shard,routing,table,routing,table,new,routing,table,build,recover,unstarted,replica,replica,primary,target,supplier,mark,as,recovering,in,sync,ids,routing,table,if,mark,as,started,start,replica,after,recovery,replica,primary,in,sync,ids,routing,table
IndexShardTestCase -> protected void recoverReplica(final IndexShard replica,                                   final IndexShard primary,                                   final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                   final boolean markAsRecovering, final boolean markAsStarted) throws IOException;1535723122;recovers a replica from the given primary *;protected void recoverReplica(final IndexShard replica,_                                  final IndexShard primary,_                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                  final boolean markAsRecovering, final boolean markAsStarted) throws IOException {_        IndexShardRoutingTable.Builder newRoutingTable = new IndexShardRoutingTable.Builder(replica.shardId())__        newRoutingTable.addShard(primary.routingEntry())__        if (replica.routingEntry().isRelocationTarget() == false) {_            newRoutingTable.addShard(replica.routingEntry())__        }_        final Set<String> inSyncIds = Collections.singleton(primary.routingEntry().allocationId().getId())__        final IndexShardRoutingTable routingTable = newRoutingTable.build()__        recoverUnstartedReplica(replica, primary, targetSupplier, markAsRecovering, inSyncIds, routingTable)__        if (markAsStarted) {_            startReplicaAfterRecovery(replica, primary, inSyncIds, routingTable)__        }_    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,boolean,mark,as,started,throws,ioexception,index,shard,routing,table,builder,new,routing,table,new,index,shard,routing,table,builder,replica,shard,id,new,routing,table,add,shard,primary,routing,entry,if,replica,routing,entry,is,relocation,target,false,new,routing,table,add,shard,replica,routing,entry,final,set,string,in,sync,ids,collections,singleton,primary,routing,entry,allocation,id,get,id,final,index,shard,routing,table,routing,table,new,routing,table,build,recover,unstarted,replica,replica,primary,target,supplier,mark,as,recovering,in,sync,ids,routing,table,if,mark,as,started,start,replica,after,recovery,replica,primary,in,sync,ids,routing,table
IndexShardTestCase -> protected void recoverReplica(final IndexShard replica,                                   final IndexShard primary,                                   final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                   final boolean markAsRecovering, final boolean markAsStarted) throws IOException;1535965276;recovers a replica from the given primary *;protected void recoverReplica(final IndexShard replica,_                                  final IndexShard primary,_                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                  final boolean markAsRecovering, final boolean markAsStarted) throws IOException {_        IndexShardRoutingTable.Builder newRoutingTable = new IndexShardRoutingTable.Builder(replica.shardId())__        newRoutingTable.addShard(primary.routingEntry())__        if (replica.routingEntry().isRelocationTarget() == false) {_            newRoutingTable.addShard(replica.routingEntry())__        }_        final Set<String> inSyncIds = Collections.singleton(primary.routingEntry().allocationId().getId())__        final IndexShardRoutingTable routingTable = newRoutingTable.build()__        recoverUnstartedReplica(replica, primary, targetSupplier, markAsRecovering, inSyncIds, routingTable)__        if (markAsStarted) {_            startReplicaAfterRecovery(replica, primary, inSyncIds, routingTable)__        }_    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,boolean,mark,as,started,throws,ioexception,index,shard,routing,table,builder,new,routing,table,new,index,shard,routing,table,builder,replica,shard,id,new,routing,table,add,shard,primary,routing,entry,if,replica,routing,entry,is,relocation,target,false,new,routing,table,add,shard,replica,routing,entry,final,set,string,in,sync,ids,collections,singleton,primary,routing,entry,allocation,id,get,id,final,index,shard,routing,table,routing,table,new,routing,table,build,recover,unstarted,replica,replica,primary,target,supplier,mark,as,recovering,in,sync,ids,routing,table,if,mark,as,started,start,replica,after,recovery,replica,primary,in,sync,ids,routing,table
IndexShardTestCase -> protected void recoverReplica(final IndexShard replica,                                   final IndexShard primary,                                   final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                   final boolean markAsRecovering, final boolean markAsStarted) throws IOException;1536611444;recovers a replica from the given primary *;protected void recoverReplica(final IndexShard replica,_                                  final IndexShard primary,_                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                  final boolean markAsRecovering, final boolean markAsStarted) throws IOException {_        IndexShardRoutingTable.Builder newRoutingTable = new IndexShardRoutingTable.Builder(replica.shardId())__        newRoutingTable.addShard(primary.routingEntry())__        if (replica.routingEntry().isRelocationTarget() == false) {_            newRoutingTable.addShard(replica.routingEntry())__        }_        final Set<String> inSyncIds = Collections.singleton(primary.routingEntry().allocationId().getId())__        final IndexShardRoutingTable routingTable = newRoutingTable.build()__        recoverUnstartedReplica(replica, primary, targetSupplier, markAsRecovering, inSyncIds, routingTable)__        if (markAsStarted) {_            startReplicaAfterRecovery(replica, primary, inSyncIds, routingTable)__        }_    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,boolean,mark,as,started,throws,ioexception,index,shard,routing,table,builder,new,routing,table,new,index,shard,routing,table,builder,replica,shard,id,new,routing,table,add,shard,primary,routing,entry,if,replica,routing,entry,is,relocation,target,false,new,routing,table,add,shard,replica,routing,entry,final,set,string,in,sync,ids,collections,singleton,primary,routing,entry,allocation,id,get,id,final,index,shard,routing,table,routing,table,new,routing,table,build,recover,unstarted,replica,replica,primary,target,supplier,mark,as,recovering,in,sync,ids,routing,table,if,mark,as,started,start,replica,after,recovery,replica,primary,in,sync,ids,routing,table
IndexShardTestCase -> protected void recoverReplica(final IndexShard replica,                                   final IndexShard primary,                                   final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                   final boolean markAsRecovering, final boolean markAsStarted) throws IOException;1536828374;recovers a replica from the given primary *;protected void recoverReplica(final IndexShard replica,_                                  final IndexShard primary,_                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                  final boolean markAsRecovering, final boolean markAsStarted) throws IOException {_        IndexShardRoutingTable.Builder newRoutingTable = new IndexShardRoutingTable.Builder(replica.shardId())__        newRoutingTable.addShard(primary.routingEntry())__        if (replica.routingEntry().isRelocationTarget() == false) {_            newRoutingTable.addShard(replica.routingEntry())__        }_        final Set<String> inSyncIds = Collections.singleton(primary.routingEntry().allocationId().getId())__        final IndexShardRoutingTable routingTable = newRoutingTable.build()__        recoverUnstartedReplica(replica, primary, targetSupplier, markAsRecovering, inSyncIds, routingTable)__        if (markAsStarted) {_            startReplicaAfterRecovery(replica, primary, inSyncIds, routingTable)__        }_    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,boolean,mark,as,started,throws,ioexception,index,shard,routing,table,builder,new,routing,table,new,index,shard,routing,table,builder,replica,shard,id,new,routing,table,add,shard,primary,routing,entry,if,replica,routing,entry,is,relocation,target,false,new,routing,table,add,shard,replica,routing,entry,final,set,string,in,sync,ids,collections,singleton,primary,routing,entry,allocation,id,get,id,final,index,shard,routing,table,routing,table,new,routing,table,build,recover,unstarted,replica,replica,primary,target,supplier,mark,as,recovering,in,sync,ids,routing,table,if,mark,as,started,start,replica,after,recovery,replica,primary,in,sync,ids,routing,table
IndexShardTestCase -> protected void recoverReplica(final IndexShard replica,                                   final IndexShard primary,                                   final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                   final boolean markAsRecovering, final boolean markAsStarted) throws IOException;1537371806;recovers a replica from the given primary *;protected void recoverReplica(final IndexShard replica,_                                  final IndexShard primary,_                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                  final boolean markAsRecovering, final boolean markAsStarted) throws IOException {_        IndexShardRoutingTable.Builder newRoutingTable = new IndexShardRoutingTable.Builder(replica.shardId())__        newRoutingTable.addShard(primary.routingEntry())__        if (replica.routingEntry().isRelocationTarget() == false) {_            newRoutingTable.addShard(replica.routingEntry())__        }_        final Set<String> inSyncIds = Collections.singleton(primary.routingEntry().allocationId().getId())__        final IndexShardRoutingTable routingTable = newRoutingTable.build()__        recoverUnstartedReplica(replica, primary, targetSupplier, markAsRecovering, inSyncIds, routingTable)__        if (markAsStarted) {_            startReplicaAfterRecovery(replica, primary, inSyncIds, routingTable)__        }_    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,boolean,mark,as,started,throws,ioexception,index,shard,routing,table,builder,new,routing,table,new,index,shard,routing,table,builder,replica,shard,id,new,routing,table,add,shard,primary,routing,entry,if,replica,routing,entry,is,relocation,target,false,new,routing,table,add,shard,replica,routing,entry,final,set,string,in,sync,ids,collections,singleton,primary,routing,entry,allocation,id,get,id,final,index,shard,routing,table,routing,table,new,routing,table,build,recover,unstarted,replica,replica,primary,target,supplier,mark,as,recovering,in,sync,ids,routing,table,if,mark,as,started,start,replica,after,recovery,replica,primary,in,sync,ids,routing,table
IndexShardTestCase -> protected void recoverReplica(final IndexShard replica,                                   final IndexShard primary,                                   final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                   final boolean markAsRecovering, final boolean markAsStarted) throws IOException;1537806831;recovers a replica from the given primary *;protected void recoverReplica(final IndexShard replica,_                                  final IndexShard primary,_                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                  final boolean markAsRecovering, final boolean markAsStarted) throws IOException {_        IndexShardRoutingTable.Builder newRoutingTable = new IndexShardRoutingTable.Builder(replica.shardId())__        newRoutingTable.addShard(primary.routingEntry())__        if (replica.routingEntry().isRelocationTarget() == false) {_            newRoutingTable.addShard(replica.routingEntry())__        }_        final Set<String> inSyncIds = Collections.singleton(primary.routingEntry().allocationId().getId())__        final IndexShardRoutingTable routingTable = newRoutingTable.build()__        recoverUnstartedReplica(replica, primary, targetSupplier, markAsRecovering, inSyncIds, routingTable)__        if (markAsStarted) {_            startReplicaAfterRecovery(replica, primary, inSyncIds, routingTable)__        }_    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,boolean,mark,as,started,throws,ioexception,index,shard,routing,table,builder,new,routing,table,new,index,shard,routing,table,builder,replica,shard,id,new,routing,table,add,shard,primary,routing,entry,if,replica,routing,entry,is,relocation,target,false,new,routing,table,add,shard,replica,routing,entry,final,set,string,in,sync,ids,collections,singleton,primary,routing,entry,allocation,id,get,id,final,index,shard,routing,table,routing,table,new,routing,table,build,recover,unstarted,replica,replica,primary,target,supplier,mark,as,recovering,in,sync,ids,routing,table,if,mark,as,started,start,replica,after,recovery,replica,primary,in,sync,ids,routing,table
IndexShardTestCase -> protected void recoverReplica(final IndexShard replica,                                   final IndexShard primary,                                   final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                   final boolean markAsRecovering, final boolean markAsStarted) throws IOException;1538067637;recovers a replica from the given primary *;protected void recoverReplica(final IndexShard replica,_                                  final IndexShard primary,_                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                  final boolean markAsRecovering, final boolean markAsStarted) throws IOException {_        IndexShardRoutingTable.Builder newRoutingTable = new IndexShardRoutingTable.Builder(replica.shardId())__        newRoutingTable.addShard(primary.routingEntry())__        if (replica.routingEntry().isRelocationTarget() == false) {_            newRoutingTable.addShard(replica.routingEntry())__        }_        final Set<String> inSyncIds = Collections.singleton(primary.routingEntry().allocationId().getId())__        final IndexShardRoutingTable routingTable = newRoutingTable.build()__        recoverUnstartedReplica(replica, primary, targetSupplier, markAsRecovering, inSyncIds, routingTable)__        if (markAsStarted) {_            startReplicaAfterRecovery(replica, primary, inSyncIds, routingTable)__        }_    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,boolean,mark,as,started,throws,ioexception,index,shard,routing,table,builder,new,routing,table,new,index,shard,routing,table,builder,replica,shard,id,new,routing,table,add,shard,primary,routing,entry,if,replica,routing,entry,is,relocation,target,false,new,routing,table,add,shard,replica,routing,entry,final,set,string,in,sync,ids,collections,singleton,primary,routing,entry,allocation,id,get,id,final,index,shard,routing,table,routing,table,new,routing,table,build,recover,unstarted,replica,replica,primary,target,supplier,mark,as,recovering,in,sync,ids,routing,table,if,mark,as,started,start,replica,after,recovery,replica,primary,in,sync,ids,routing,table
IndexShardTestCase -> protected void recoverReplica(final IndexShard replica,                                   final IndexShard primary,                                   final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                   final boolean markAsRecovering, final boolean markAsStarted) throws IOException;1542697404;recovers a replica from the given primary *;protected void recoverReplica(final IndexShard replica,_                                  final IndexShard primary,_                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                  final boolean markAsRecovering, final boolean markAsStarted) throws IOException {_        IndexShardRoutingTable.Builder newRoutingTable = new IndexShardRoutingTable.Builder(replica.shardId())__        newRoutingTable.addShard(primary.routingEntry())__        if (replica.routingEntry().isRelocationTarget() == false) {_            newRoutingTable.addShard(replica.routingEntry())__        }_        final Set<String> inSyncIds = Collections.singleton(primary.routingEntry().allocationId().getId())__        final IndexShardRoutingTable routingTable = newRoutingTable.build()__        recoverUnstartedReplica(replica, primary, targetSupplier, markAsRecovering, inSyncIds, routingTable)__        if (markAsStarted) {_            startReplicaAfterRecovery(replica, primary, inSyncIds, routingTable)__        }_    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,boolean,mark,as,started,throws,ioexception,index,shard,routing,table,builder,new,routing,table,new,index,shard,routing,table,builder,replica,shard,id,new,routing,table,add,shard,primary,routing,entry,if,replica,routing,entry,is,relocation,target,false,new,routing,table,add,shard,replica,routing,entry,final,set,string,in,sync,ids,collections,singleton,primary,routing,entry,allocation,id,get,id,final,index,shard,routing,table,routing,table,new,routing,table,build,recover,unstarted,replica,replica,primary,target,supplier,mark,as,recovering,in,sync,ids,routing,table,if,mark,as,started,start,replica,after,recovery,replica,primary,in,sync,ids,routing,table
IndexShardTestCase -> protected void recoverReplica(final IndexShard replica,                                   final IndexShard primary,                                   final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                   final boolean markAsRecovering, final boolean markAsStarted) throws IOException;1544783963;recovers a replica from the given primary *;protected void recoverReplica(final IndexShard replica,_                                  final IndexShard primary,_                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                  final boolean markAsRecovering, final boolean markAsStarted) throws IOException {_        IndexShardRoutingTable.Builder newRoutingTable = new IndexShardRoutingTable.Builder(replica.shardId())__        newRoutingTable.addShard(primary.routingEntry())__        if (replica.routingEntry().isRelocationTarget() == false) {_            newRoutingTable.addShard(replica.routingEntry())__        }_        final Set<String> inSyncIds = Collections.singleton(primary.routingEntry().allocationId().getId())__        final IndexShardRoutingTable routingTable = newRoutingTable.build()__        recoverUnstartedReplica(replica, primary, targetSupplier, markAsRecovering, inSyncIds, routingTable)__        if (markAsStarted) {_            startReplicaAfterRecovery(replica, primary, inSyncIds, routingTable)__        }_    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,boolean,mark,as,started,throws,ioexception,index,shard,routing,table,builder,new,routing,table,new,index,shard,routing,table,builder,replica,shard,id,new,routing,table,add,shard,primary,routing,entry,if,replica,routing,entry,is,relocation,target,false,new,routing,table,add,shard,replica,routing,entry,final,set,string,in,sync,ids,collections,singleton,primary,routing,entry,allocation,id,get,id,final,index,shard,routing,table,routing,table,new,routing,table,build,recover,unstarted,replica,replica,primary,target,supplier,mark,as,recovering,in,sync,ids,routing,table,if,mark,as,started,start,replica,after,recovery,replica,primary,in,sync,ids,routing,table
IndexShardTestCase -> protected void recoverReplica(final IndexShard replica,                                   final IndexShard primary,                                   final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                   final boolean markAsRecovering, final boolean markAsStarted) throws IOException;1544893197;recovers a replica from the given primary *;protected void recoverReplica(final IndexShard replica,_                                  final IndexShard primary,_                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                  final boolean markAsRecovering, final boolean markAsStarted) throws IOException {_        IndexShardRoutingTable.Builder newRoutingTable = new IndexShardRoutingTable.Builder(replica.shardId())__        newRoutingTable.addShard(primary.routingEntry())__        if (replica.routingEntry().isRelocationTarget() == false) {_            newRoutingTable.addShard(replica.routingEntry())__        }_        final Set<String> inSyncIds = Collections.singleton(primary.routingEntry().allocationId().getId())__        final IndexShardRoutingTable routingTable = newRoutingTable.build()__        recoverUnstartedReplica(replica, primary, targetSupplier, markAsRecovering, inSyncIds, routingTable)__        if (markAsStarted) {_            startReplicaAfterRecovery(replica, primary, inSyncIds, routingTable)__        }_    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,boolean,mark,as,started,throws,ioexception,index,shard,routing,table,builder,new,routing,table,new,index,shard,routing,table,builder,replica,shard,id,new,routing,table,add,shard,primary,routing,entry,if,replica,routing,entry,is,relocation,target,false,new,routing,table,add,shard,replica,routing,entry,final,set,string,in,sync,ids,collections,singleton,primary,routing,entry,allocation,id,get,id,final,index,shard,routing,table,routing,table,new,routing,table,build,recover,unstarted,replica,replica,primary,target,supplier,mark,as,recovering,in,sync,ids,routing,table,if,mark,as,started,start,replica,after,recovery,replica,primary,in,sync,ids,routing,table
IndexShardTestCase -> protected void recoverReplica(final IndexShard replica,                                   final IndexShard primary,                                   final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                   final boolean markAsRecovering, final boolean markAsStarted) throws IOException;1545678410;recovers a replica from the given primary *;protected void recoverReplica(final IndexShard replica,_                                  final IndexShard primary,_                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                  final boolean markAsRecovering, final boolean markAsStarted) throws IOException {_        IndexShardRoutingTable.Builder newRoutingTable = new IndexShardRoutingTable.Builder(replica.shardId())__        newRoutingTable.addShard(primary.routingEntry())__        if (replica.routingEntry().isRelocationTarget() == false) {_            newRoutingTable.addShard(replica.routingEntry())__        }_        final Set<String> inSyncIds = Collections.singleton(primary.routingEntry().allocationId().getId())__        final IndexShardRoutingTable routingTable = newRoutingTable.build()__        recoverUnstartedReplica(replica, primary, targetSupplier, markAsRecovering, inSyncIds, routingTable)__        if (markAsStarted) {_            startReplicaAfterRecovery(replica, primary, inSyncIds, routingTable)__        }_    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,boolean,mark,as,started,throws,ioexception,index,shard,routing,table,builder,new,routing,table,new,index,shard,routing,table,builder,replica,shard,id,new,routing,table,add,shard,primary,routing,entry,if,replica,routing,entry,is,relocation,target,false,new,routing,table,add,shard,replica,routing,entry,final,set,string,in,sync,ids,collections,singleton,primary,routing,entry,allocation,id,get,id,final,index,shard,routing,table,routing,table,new,routing,table,build,recover,unstarted,replica,replica,primary,target,supplier,mark,as,recovering,in,sync,ids,routing,table,if,mark,as,started,start,replica,after,recovery,replica,primary,in,sync,ids,routing,table
IndexShardTestCase -> protected void recoverReplica(final IndexShard replica,                                   final IndexShard primary,                                   final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                   final boolean markAsRecovering, final boolean markAsStarted) throws IOException;1546927432;recovers a replica from the given primary *;protected void recoverReplica(final IndexShard replica,_                                  final IndexShard primary,_                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                  final boolean markAsRecovering, final boolean markAsStarted) throws IOException {_        IndexShardRoutingTable.Builder newRoutingTable = new IndexShardRoutingTable.Builder(replica.shardId())__        newRoutingTable.addShard(primary.routingEntry())__        if (replica.routingEntry().isRelocationTarget() == false) {_            newRoutingTable.addShard(replica.routingEntry())__        }_        final Set<String> inSyncIds = Collections.singleton(primary.routingEntry().allocationId().getId())__        final IndexShardRoutingTable routingTable = newRoutingTable.build()__        recoverUnstartedReplica(replica, primary, targetSupplier, markAsRecovering, inSyncIds, routingTable)__        if (markAsStarted) {_            startReplicaAfterRecovery(replica, primary, inSyncIds, routingTable)__        }_    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,boolean,mark,as,started,throws,ioexception,index,shard,routing,table,builder,new,routing,table,new,index,shard,routing,table,builder,replica,shard,id,new,routing,table,add,shard,primary,routing,entry,if,replica,routing,entry,is,relocation,target,false,new,routing,table,add,shard,replica,routing,entry,final,set,string,in,sync,ids,collections,singleton,primary,routing,entry,allocation,id,get,id,final,index,shard,routing,table,routing,table,new,routing,table,build,recover,unstarted,replica,replica,primary,target,supplier,mark,as,recovering,in,sync,ids,routing,table,if,mark,as,started,start,replica,after,recovery,replica,primary,in,sync,ids,routing,table
IndexShardTestCase -> protected void recoverReplica(final IndexShard replica,                                   final IndexShard primary,                                   final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                   final boolean markAsRecovering, final boolean markAsStarted) throws IOException;1547315388;recovers a replica from the given primary *;protected void recoverReplica(final IndexShard replica,_                                  final IndexShard primary,_                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                  final boolean markAsRecovering, final boolean markAsStarted) throws IOException {_        IndexShardRoutingTable.Builder newRoutingTable = new IndexShardRoutingTable.Builder(replica.shardId())__        newRoutingTable.addShard(primary.routingEntry())__        if (replica.routingEntry().isRelocationTarget() == false) {_            newRoutingTable.addShard(replica.routingEntry())__        }_        final Set<String> inSyncIds = Collections.singleton(primary.routingEntry().allocationId().getId())__        final IndexShardRoutingTable routingTable = newRoutingTable.build()__        recoverUnstartedReplica(replica, primary, targetSupplier, markAsRecovering, inSyncIds, routingTable)__        if (markAsStarted) {_            startReplicaAfterRecovery(replica, primary, inSyncIds, routingTable)__        }_    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,boolean,mark,as,started,throws,ioexception,index,shard,routing,table,builder,new,routing,table,new,index,shard,routing,table,builder,replica,shard,id,new,routing,table,add,shard,primary,routing,entry,if,replica,routing,entry,is,relocation,target,false,new,routing,table,add,shard,replica,routing,entry,final,set,string,in,sync,ids,collections,singleton,primary,routing,entry,allocation,id,get,id,final,index,shard,routing,table,routing,table,new,routing,table,build,recover,unstarted,replica,replica,primary,target,supplier,mark,as,recovering,in,sync,ids,routing,table,if,mark,as,started,start,replica,after,recovery,replica,primary,in,sync,ids,routing,table
IndexShardTestCase -> protected void recoverReplica(final IndexShard replica,                                   final IndexShard primary,                                   final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                   final boolean markAsRecovering, final boolean markAsStarted) throws IOException;1547496475;recovers a replica from the given primary *;protected void recoverReplica(final IndexShard replica,_                                  final IndexShard primary,_                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                  final boolean markAsRecovering, final boolean markAsStarted) throws IOException {_        IndexShardRoutingTable.Builder newRoutingTable = new IndexShardRoutingTable.Builder(replica.shardId())__        newRoutingTable.addShard(primary.routingEntry())__        if (replica.routingEntry().isRelocationTarget() == false) {_            newRoutingTable.addShard(replica.routingEntry())__        }_        final Set<String> inSyncIds = Collections.singleton(primary.routingEntry().allocationId().getId())__        final IndexShardRoutingTable routingTable = newRoutingTable.build()__        recoverUnstartedReplica(replica, primary, targetSupplier, markAsRecovering, inSyncIds, routingTable)__        if (markAsStarted) {_            startReplicaAfterRecovery(replica, primary, inSyncIds, routingTable)__        }_    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,boolean,mark,as,started,throws,ioexception,index,shard,routing,table,builder,new,routing,table,new,index,shard,routing,table,builder,replica,shard,id,new,routing,table,add,shard,primary,routing,entry,if,replica,routing,entry,is,relocation,target,false,new,routing,table,add,shard,replica,routing,entry,final,set,string,in,sync,ids,collections,singleton,primary,routing,entry,allocation,id,get,id,final,index,shard,routing,table,routing,table,new,routing,table,build,recover,unstarted,replica,replica,primary,target,supplier,mark,as,recovering,in,sync,ids,routing,table,if,mark,as,started,start,replica,after,recovery,replica,primary,in,sync,ids,routing,table
IndexShardTestCase -> protected void recoverReplica(final IndexShard replica,                                   final IndexShard primary,                                   final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                   final boolean markAsRecovering, final boolean markAsStarted) throws IOException;1547496886;recovers a replica from the given primary *;protected void recoverReplica(final IndexShard replica,_                                  final IndexShard primary,_                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                  final boolean markAsRecovering, final boolean markAsStarted) throws IOException {_        IndexShardRoutingTable.Builder newRoutingTable = new IndexShardRoutingTable.Builder(replica.shardId())__        newRoutingTable.addShard(primary.routingEntry())__        if (replica.routingEntry().isRelocationTarget() == false) {_            newRoutingTable.addShard(replica.routingEntry())__        }_        final Set<String> inSyncIds = Collections.singleton(primary.routingEntry().allocationId().getId())__        final IndexShardRoutingTable routingTable = newRoutingTable.build()__        recoverUnstartedReplica(replica, primary, targetSupplier, markAsRecovering, inSyncIds, routingTable)__        if (markAsStarted) {_            startReplicaAfterRecovery(replica, primary, inSyncIds, routingTable)__        }_    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,boolean,mark,as,started,throws,ioexception,index,shard,routing,table,builder,new,routing,table,new,index,shard,routing,table,builder,replica,shard,id,new,routing,table,add,shard,primary,routing,entry,if,replica,routing,entry,is,relocation,target,false,new,routing,table,add,shard,replica,routing,entry,final,set,string,in,sync,ids,collections,singleton,primary,routing,entry,allocation,id,get,id,final,index,shard,routing,table,routing,table,new,routing,table,build,recover,unstarted,replica,replica,primary,target,supplier,mark,as,recovering,in,sync,ids,routing,table,if,mark,as,started,start,replica,after,recovery,replica,primary,in,sync,ids,routing,table
IndexShardTestCase -> protected void recoverReplica(final IndexShard replica,                                   final IndexShard primary,                                   final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                   final boolean markAsRecovering, final boolean markAsStarted) throws IOException;1547520324;recovers a replica from the given primary *;protected void recoverReplica(final IndexShard replica,_                                  final IndexShard primary,_                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                  final boolean markAsRecovering, final boolean markAsStarted) throws IOException {_        IndexShardRoutingTable.Builder newRoutingTable = new IndexShardRoutingTable.Builder(replica.shardId())__        newRoutingTable.addShard(primary.routingEntry())__        if (replica.routingEntry().isRelocationTarget() == false) {_            newRoutingTable.addShard(replica.routingEntry())__        }_        final Set<String> inSyncIds = Collections.singleton(primary.routingEntry().allocationId().getId())__        final IndexShardRoutingTable routingTable = newRoutingTable.build()__        recoverUnstartedReplica(replica, primary, targetSupplier, markAsRecovering, inSyncIds, routingTable)__        if (markAsStarted) {_            startReplicaAfterRecovery(replica, primary, inSyncIds, routingTable)__        }_    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,boolean,mark,as,started,throws,ioexception,index,shard,routing,table,builder,new,routing,table,new,index,shard,routing,table,builder,replica,shard,id,new,routing,table,add,shard,primary,routing,entry,if,replica,routing,entry,is,relocation,target,false,new,routing,table,add,shard,replica,routing,entry,final,set,string,in,sync,ids,collections,singleton,primary,routing,entry,allocation,id,get,id,final,index,shard,routing,table,routing,table,new,routing,table,build,recover,unstarted,replica,replica,primary,target,supplier,mark,as,recovering,in,sync,ids,routing,table,if,mark,as,started,start,replica,after,recovery,replica,primary,in,sync,ids,routing,table
IndexShardTestCase -> protected void recoverReplica(final IndexShard replica,                                   final IndexShard primary,                                   final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                   final boolean markAsRecovering, final boolean markAsStarted) throws IOException;1547552901;recovers a replica from the given primary *;protected void recoverReplica(final IndexShard replica,_                                  final IndexShard primary,_                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                  final boolean markAsRecovering, final boolean markAsStarted) throws IOException {_        IndexShardRoutingTable.Builder newRoutingTable = new IndexShardRoutingTable.Builder(replica.shardId())__        newRoutingTable.addShard(primary.routingEntry())__        if (replica.routingEntry().isRelocationTarget() == false) {_            newRoutingTable.addShard(replica.routingEntry())__        }_        final Set<String> inSyncIds = Collections.singleton(primary.routingEntry().allocationId().getId())__        final IndexShardRoutingTable routingTable = newRoutingTable.build()__        recoverUnstartedReplica(replica, primary, targetSupplier, markAsRecovering, inSyncIds, routingTable)__        if (markAsStarted) {_            startReplicaAfterRecovery(replica, primary, inSyncIds, routingTable)__        }_    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,boolean,mark,as,started,throws,ioexception,index,shard,routing,table,builder,new,routing,table,new,index,shard,routing,table,builder,replica,shard,id,new,routing,table,add,shard,primary,routing,entry,if,replica,routing,entry,is,relocation,target,false,new,routing,table,add,shard,replica,routing,entry,final,set,string,in,sync,ids,collections,singleton,primary,routing,entry,allocation,id,get,id,final,index,shard,routing,table,routing,table,new,routing,table,build,recover,unstarted,replica,replica,primary,target,supplier,mark,as,recovering,in,sync,ids,routing,table,if,mark,as,started,start,replica,after,recovery,replica,primary,in,sync,ids,routing,table
IndexShardTestCase -> protected void recoverReplica(final IndexShard replica,                                   final IndexShard primary,                                   final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                   final boolean markAsRecovering, final boolean markAsStarted) throws IOException;1548593396;recovers a replica from the given primary *;protected void recoverReplica(final IndexShard replica,_                                  final IndexShard primary,_                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                  final boolean markAsRecovering, final boolean markAsStarted) throws IOException {_        IndexShardRoutingTable.Builder newRoutingTable = new IndexShardRoutingTable.Builder(replica.shardId())__        newRoutingTable.addShard(primary.routingEntry())__        if (replica.routingEntry().isRelocationTarget() == false) {_            newRoutingTable.addShard(replica.routingEntry())__        }_        final Set<String> inSyncIds = Collections.singleton(primary.routingEntry().allocationId().getId())__        final IndexShardRoutingTable routingTable = newRoutingTable.build()__        recoverUnstartedReplica(replica, primary, targetSupplier, markAsRecovering, inSyncIds, routingTable)__        if (markAsStarted) {_            startReplicaAfterRecovery(replica, primary, inSyncIds, routingTable)__        }_    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,boolean,mark,as,started,throws,ioexception,index,shard,routing,table,builder,new,routing,table,new,index,shard,routing,table,builder,replica,shard,id,new,routing,table,add,shard,primary,routing,entry,if,replica,routing,entry,is,relocation,target,false,new,routing,table,add,shard,replica,routing,entry,final,set,string,in,sync,ids,collections,singleton,primary,routing,entry,allocation,id,get,id,final,index,shard,routing,table,routing,table,new,routing,table,build,recover,unstarted,replica,replica,primary,target,supplier,mark,as,recovering,in,sync,ids,routing,table,if,mark,as,started,start,replica,after,recovery,replica,primary,in,sync,ids,routing,table
IndexShardTestCase -> protected void recoverReplica(final IndexShard replica,                                   final IndexShard primary,                                   final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                   final boolean markAsRecovering, final boolean markAsStarted) throws IOException;1549294529;recovers a replica from the given primary *;protected void recoverReplica(final IndexShard replica,_                                  final IndexShard primary,_                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                  final boolean markAsRecovering, final boolean markAsStarted) throws IOException {_        IndexShardRoutingTable.Builder newRoutingTable = new IndexShardRoutingTable.Builder(replica.shardId())__        newRoutingTable.addShard(primary.routingEntry())__        if (replica.routingEntry().isRelocationTarget() == false) {_            newRoutingTable.addShard(replica.routingEntry())__        }_        final Set<String> inSyncIds = Collections.singleton(primary.routingEntry().allocationId().getId())__        final IndexShardRoutingTable routingTable = newRoutingTable.build()__        recoverUnstartedReplica(replica, primary, targetSupplier, markAsRecovering, inSyncIds, routingTable)__        if (markAsStarted) {_            startReplicaAfterRecovery(replica, primary, inSyncIds, routingTable)__        }_    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,boolean,mark,as,started,throws,ioexception,index,shard,routing,table,builder,new,routing,table,new,index,shard,routing,table,builder,replica,shard,id,new,routing,table,add,shard,primary,routing,entry,if,replica,routing,entry,is,relocation,target,false,new,routing,table,add,shard,replica,routing,entry,final,set,string,in,sync,ids,collections,singleton,primary,routing,entry,allocation,id,get,id,final,index,shard,routing,table,routing,table,new,routing,table,build,recover,unstarted,replica,replica,primary,target,supplier,mark,as,recovering,in,sync,ids,routing,table,if,mark,as,started,start,replica,after,recovery,replica,primary,in,sync,ids,routing,table
IndexShardTestCase -> protected void recoverReplica(final IndexShard replica,                                   final IndexShard primary,                                   final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                   final boolean markAsRecovering, final boolean markAsStarted) throws IOException;1550668107;recovers a replica from the given primary *;protected void recoverReplica(final IndexShard replica,_                                  final IndexShard primary,_                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                  final boolean markAsRecovering, final boolean markAsStarted) throws IOException {_        IndexShardRoutingTable.Builder newRoutingTable = new IndexShardRoutingTable.Builder(replica.shardId())__        newRoutingTable.addShard(primary.routingEntry())__        if (replica.routingEntry().isRelocationTarget() == false) {_            newRoutingTable.addShard(replica.routingEntry())__        }_        final Set<String> inSyncIds = Collections.singleton(primary.routingEntry().allocationId().getId())__        final IndexShardRoutingTable routingTable = newRoutingTable.build()__        recoverUnstartedReplica(replica, primary, targetSupplier, markAsRecovering, inSyncIds, routingTable)__        if (markAsStarted) {_            startReplicaAfterRecovery(replica, primary, inSyncIds, routingTable)__        }_    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,boolean,mark,as,started,throws,ioexception,index,shard,routing,table,builder,new,routing,table,new,index,shard,routing,table,builder,replica,shard,id,new,routing,table,add,shard,primary,routing,entry,if,replica,routing,entry,is,relocation,target,false,new,routing,table,add,shard,replica,routing,entry,final,set,string,in,sync,ids,collections,singleton,primary,routing,entry,allocation,id,get,id,final,index,shard,routing,table,routing,table,new,routing,table,build,recover,unstarted,replica,replica,primary,target,supplier,mark,as,recovering,in,sync,ids,routing,table,if,mark,as,started,start,replica,after,recovery,replica,primary,in,sync,ids,routing,table
IndexShardTestCase -> protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException;1535723122;Creates a new initializing shard. The shard will have its own unique data path.__@param primary       indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard)_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException {_        final RecoverySource recoverySource =_                primary ? RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE__        final ShardRouting shardRouting =_                TestShardRouting.newShardRouting(_                        new ShardId("index", "_na_", 0), randomAlphaOfLength(10), primary, ShardRoutingState.INITIALIZING, recoverySource)__        return newShard(shardRouting, settings, engineFactory)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,shard,boolean,primary,settings,settings,engine,factory,engine,factory,throws,ioexception,final,recovery,source,recovery,source,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,final,shard,routing,shard,routing,test,shard,routing,new,shard,routing,new,shard,id,index,0,random,alpha,of,length,10,primary,shard,routing,state,initializing,recovery,source,return,new,shard,shard,routing,settings,engine,factory
IndexShardTestCase -> protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException;1535965276;Creates a new initializing shard. The shard will have its own unique data path.__@param primary       indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard)_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException {_        final RecoverySource recoverySource =_                primary ? RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE__        final ShardRouting shardRouting =_                TestShardRouting.newShardRouting(_                        new ShardId("index", "_na_", 0), randomAlphaOfLength(10), primary, ShardRoutingState.INITIALIZING, recoverySource)__        return newShard(shardRouting, settings, engineFactory)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,shard,boolean,primary,settings,settings,engine,factory,engine,factory,throws,ioexception,final,recovery,source,recovery,source,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,final,shard,routing,shard,routing,test,shard,routing,new,shard,routing,new,shard,id,index,0,random,alpha,of,length,10,primary,shard,routing,state,initializing,recovery,source,return,new,shard,shard,routing,settings,engine,factory
IndexShardTestCase -> protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException;1536611444;Creates a new initializing shard. The shard will have its own unique data path.__@param primary       indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard)_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException {_        final RecoverySource recoverySource =_                primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE__        final ShardRouting shardRouting =_                TestShardRouting.newShardRouting(_                        new ShardId("index", "_na_", 0), randomAlphaOfLength(10), primary, ShardRoutingState.INITIALIZING, recoverySource)__        return newShard(shardRouting, settings, engineFactory)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,shard,boolean,primary,settings,settings,engine,factory,engine,factory,throws,ioexception,final,recovery,source,recovery,source,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,final,shard,routing,shard,routing,test,shard,routing,new,shard,routing,new,shard,id,index,0,random,alpha,of,length,10,primary,shard,routing,state,initializing,recovery,source,return,new,shard,shard,routing,settings,engine,factory
IndexShardTestCase -> protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException;1536828374;Creates a new initializing shard. The shard will have its own unique data path.__@param primary       indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard)_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException {_        final RecoverySource recoverySource =_                primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE__        final ShardRouting shardRouting =_                TestShardRouting.newShardRouting(_                        new ShardId("index", "_na_", 0), randomAlphaOfLength(10), primary, ShardRoutingState.INITIALIZING, recoverySource)__        return newShard(shardRouting, settings, engineFactory)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,shard,boolean,primary,settings,settings,engine,factory,engine,factory,throws,ioexception,final,recovery,source,recovery,source,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,final,shard,routing,shard,routing,test,shard,routing,new,shard,routing,new,shard,id,index,0,random,alpha,of,length,10,primary,shard,routing,state,initializing,recovery,source,return,new,shard,shard,routing,settings,engine,factory
IndexShardTestCase -> protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException;1537371806;Creates a new initializing shard. The shard will have its own unique data path.__@param primary       indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard)_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException {_        final RecoverySource recoverySource =_                primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE__        final ShardRouting shardRouting =_                TestShardRouting.newShardRouting(_                        new ShardId("index", "_na_", 0), randomAlphaOfLength(10), primary, ShardRoutingState.INITIALIZING, recoverySource)__        return newShard(shardRouting, settings, engineFactory)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,shard,boolean,primary,settings,settings,engine,factory,engine,factory,throws,ioexception,final,recovery,source,recovery,source,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,final,shard,routing,shard,routing,test,shard,routing,new,shard,routing,new,shard,id,index,0,random,alpha,of,length,10,primary,shard,routing,state,initializing,recovery,source,return,new,shard,shard,routing,settings,engine,factory
IndexShardTestCase -> protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException;1537806831;Creates a new initializing shard. The shard will have its own unique data path.__@param primary       indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard)_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException {_        final RecoverySource recoverySource =_                primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE__        final ShardRouting shardRouting =_                TestShardRouting.newShardRouting(_                        new ShardId("index", "_na_", 0), randomAlphaOfLength(10), primary, ShardRoutingState.INITIALIZING, recoverySource)__        return newShard(shardRouting, settings, engineFactory)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,shard,boolean,primary,settings,settings,engine,factory,engine,factory,throws,ioexception,final,recovery,source,recovery,source,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,final,shard,routing,shard,routing,test,shard,routing,new,shard,routing,new,shard,id,index,0,random,alpha,of,length,10,primary,shard,routing,state,initializing,recovery,source,return,new,shard,shard,routing,settings,engine,factory
IndexShardTestCase -> protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException;1538067637;Creates a new initializing shard. The shard will have its own unique data path.__@param primary       indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard)_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException {_        final RecoverySource recoverySource =_                primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE__        final ShardRouting shardRouting =_                TestShardRouting.newShardRouting(_                        new ShardId("index", "_na_", 0), randomAlphaOfLength(10), primary, ShardRoutingState.INITIALIZING, recoverySource)__        return newShard(shardRouting, settings, engineFactory)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,shard,boolean,primary,settings,settings,engine,factory,engine,factory,throws,ioexception,final,recovery,source,recovery,source,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,final,shard,routing,shard,routing,test,shard,routing,new,shard,routing,new,shard,id,index,0,random,alpha,of,length,10,primary,shard,routing,state,initializing,recovery,source,return,new,shard,shard,routing,settings,engine,factory
IndexShardTestCase -> protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException;1542697404;Creates a new initializing shard. The shard will have its own unique data path.__@param primary       indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard)_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException {_        final RecoverySource recoverySource =_                primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE__        final ShardRouting shardRouting =_                TestShardRouting.newShardRouting(_                        new ShardId("index", "_na_", 0), randomAlphaOfLength(10), primary, ShardRoutingState.INITIALIZING, recoverySource)__        return newShard(shardRouting, settings, engineFactory)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,shard,boolean,primary,settings,settings,engine,factory,engine,factory,throws,ioexception,final,recovery,source,recovery,source,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,final,shard,routing,shard,routing,test,shard,routing,new,shard,routing,new,shard,id,index,0,random,alpha,of,length,10,primary,shard,routing,state,initializing,recovery,source,return,new,shard,shard,routing,settings,engine,factory
IndexShardTestCase -> protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException;1544783963;Creates a new initializing shard. The shard will have its own unique data path.__@param primary       indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard)_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException {_        final RecoverySource recoverySource =_                primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE__        final ShardRouting shardRouting =_                TestShardRouting.newShardRouting(_                        new ShardId("index", "_na_", 0), randomAlphaOfLength(10), primary, ShardRoutingState.INITIALIZING, recoverySource)__        return newShard(shardRouting, settings, engineFactory)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,shard,boolean,primary,settings,settings,engine,factory,engine,factory,throws,ioexception,final,recovery,source,recovery,source,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,final,shard,routing,shard,routing,test,shard,routing,new,shard,routing,new,shard,id,index,0,random,alpha,of,length,10,primary,shard,routing,state,initializing,recovery,source,return,new,shard,shard,routing,settings,engine,factory
IndexShardTestCase -> protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException;1544893197;Creates a new initializing shard. The shard will have its own unique data path.__@param primary       indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard)_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException {_        final RecoverySource recoverySource =_                primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE__        final ShardRouting shardRouting =_                TestShardRouting.newShardRouting(_                        new ShardId("index", "_na_", 0), randomAlphaOfLength(10), primary, ShardRoutingState.INITIALIZING, recoverySource)__        return newShard(shardRouting, settings, engineFactory)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,shard,boolean,primary,settings,settings,engine,factory,engine,factory,throws,ioexception,final,recovery,source,recovery,source,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,final,shard,routing,shard,routing,test,shard,routing,new,shard,routing,new,shard,id,index,0,random,alpha,of,length,10,primary,shard,routing,state,initializing,recovery,source,return,new,shard,shard,routing,settings,engine,factory
IndexShardTestCase -> protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException;1545678410;Creates a new initializing shard. The shard will have its own unique data path.__@param primary       indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard)_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException {_        final RecoverySource recoverySource =_                primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE__        final ShardRouting shardRouting =_                TestShardRouting.newShardRouting(_                        new ShardId("index", "_na_", 0), randomAlphaOfLength(10), primary, ShardRoutingState.INITIALIZING, recoverySource)__        return newShard(shardRouting, settings, engineFactory)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,shard,boolean,primary,settings,settings,engine,factory,engine,factory,throws,ioexception,final,recovery,source,recovery,source,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,final,shard,routing,shard,routing,test,shard,routing,new,shard,routing,new,shard,id,index,0,random,alpha,of,length,10,primary,shard,routing,state,initializing,recovery,source,return,new,shard,shard,routing,settings,engine,factory
IndexShardTestCase -> protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException;1546927432;Creates a new initializing shard. The shard will have its own unique data path.__@param primary       indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard)_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException {_        final RecoverySource recoverySource =_                primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE__        final ShardRouting shardRouting =_                TestShardRouting.newShardRouting(_                        new ShardId("index", "_na_", 0), randomAlphaOfLength(10), primary, ShardRoutingState.INITIALIZING, recoverySource)__        return newShard(shardRouting, settings, engineFactory)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,shard,boolean,primary,settings,settings,engine,factory,engine,factory,throws,ioexception,final,recovery,source,recovery,source,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,final,shard,routing,shard,routing,test,shard,routing,new,shard,routing,new,shard,id,index,0,random,alpha,of,length,10,primary,shard,routing,state,initializing,recovery,source,return,new,shard,shard,routing,settings,engine,factory
IndexShardTestCase -> protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException;1547315388;Creates a new initializing shard. The shard will have its own unique data path.__@param primary       indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard)_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException {_        final RecoverySource recoverySource =_                primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE__        final ShardRouting shardRouting =_                TestShardRouting.newShardRouting(_                        new ShardId("index", "_na_", 0), randomAlphaOfLength(10), primary, ShardRoutingState.INITIALIZING, recoverySource)__        return newShard(shardRouting, settings, engineFactory)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,shard,boolean,primary,settings,settings,engine,factory,engine,factory,throws,ioexception,final,recovery,source,recovery,source,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,final,shard,routing,shard,routing,test,shard,routing,new,shard,routing,new,shard,id,index,0,random,alpha,of,length,10,primary,shard,routing,state,initializing,recovery,source,return,new,shard,shard,routing,settings,engine,factory
IndexShardTestCase -> protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException;1547496475;Creates a new initializing shard. The shard will have its own unique data path.__@param primary       indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard)_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException {_        final RecoverySource recoverySource =_                primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE__        final ShardRouting shardRouting =_                TestShardRouting.newShardRouting(_                        new ShardId("index", "_na_", 0), randomAlphaOfLength(10), primary, ShardRoutingState.INITIALIZING, recoverySource)__        return newShard(shardRouting, settings, engineFactory)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,shard,boolean,primary,settings,settings,engine,factory,engine,factory,throws,ioexception,final,recovery,source,recovery,source,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,final,shard,routing,shard,routing,test,shard,routing,new,shard,routing,new,shard,id,index,0,random,alpha,of,length,10,primary,shard,routing,state,initializing,recovery,source,return,new,shard,shard,routing,settings,engine,factory
IndexShardTestCase -> protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException;1547496886;Creates a new initializing shard. The shard will have its own unique data path.__@param primary       indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard)_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException {_        final RecoverySource recoverySource =_                primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE__        final ShardRouting shardRouting =_                TestShardRouting.newShardRouting(_                        new ShardId("index", "_na_", 0), randomAlphaOfLength(10), primary, ShardRoutingState.INITIALIZING, recoverySource)__        return newShard(shardRouting, settings, engineFactory)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,shard,boolean,primary,settings,settings,engine,factory,engine,factory,throws,ioexception,final,recovery,source,recovery,source,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,final,shard,routing,shard,routing,test,shard,routing,new,shard,routing,new,shard,id,index,0,random,alpha,of,length,10,primary,shard,routing,state,initializing,recovery,source,return,new,shard,shard,routing,settings,engine,factory
IndexShardTestCase -> protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException;1547520324;Creates a new initializing shard. The shard will have its own unique data path.__@param primary       indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard)_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException {_        final RecoverySource recoverySource =_                primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE__        final ShardRouting shardRouting =_                TestShardRouting.newShardRouting(_                        new ShardId("index", "_na_", 0), randomAlphaOfLength(10), primary, ShardRoutingState.INITIALIZING, recoverySource)__        return newShard(shardRouting, settings, engineFactory)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,shard,boolean,primary,settings,settings,engine,factory,engine,factory,throws,ioexception,final,recovery,source,recovery,source,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,final,shard,routing,shard,routing,test,shard,routing,new,shard,routing,new,shard,id,index,0,random,alpha,of,length,10,primary,shard,routing,state,initializing,recovery,source,return,new,shard,shard,routing,settings,engine,factory
IndexShardTestCase -> protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException;1547552901;Creates a new initializing shard. The shard will have its own unique data path.__@param primary       indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard)_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException {_        final RecoverySource recoverySource =_                primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE__        final ShardRouting shardRouting =_                TestShardRouting.newShardRouting(_                        new ShardId("index", "_na_", 0), randomAlphaOfLength(10), primary, ShardRoutingState.INITIALIZING, recoverySource)__        return newShard(shardRouting, settings, engineFactory)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,shard,boolean,primary,settings,settings,engine,factory,engine,factory,throws,ioexception,final,recovery,source,recovery,source,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,final,shard,routing,shard,routing,test,shard,routing,new,shard,routing,new,shard,id,index,0,random,alpha,of,length,10,primary,shard,routing,state,initializing,recovery,source,return,new,shard,shard,routing,settings,engine,factory
IndexShardTestCase -> protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException;1548593396;Creates a new initializing shard. The shard will have its own unique data path.__@param primary       indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard)_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException {_        final RecoverySource recoverySource =_                primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE__        final ShardRouting shardRouting =_                TestShardRouting.newShardRouting(_                        new ShardId("index", "_na_", 0), randomAlphaOfLength(10), primary, ShardRoutingState.INITIALIZING, recoverySource)__        return newShard(shardRouting, settings, engineFactory)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,shard,boolean,primary,settings,settings,engine,factory,engine,factory,throws,ioexception,final,recovery,source,recovery,source,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,final,shard,routing,shard,routing,test,shard,routing,new,shard,routing,new,shard,id,index,0,random,alpha,of,length,10,primary,shard,routing,state,initializing,recovery,source,return,new,shard,shard,routing,settings,engine,factory
IndexShardTestCase -> protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException;1549294529;Creates a new initializing shard. The shard will have its own unique data path.__@param primary       indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard)_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException {_        final RecoverySource recoverySource =_                primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE__        final ShardRouting shardRouting =_                TestShardRouting.newShardRouting(_                        new ShardId("index", "_na_", 0), randomAlphaOfLength(10), primary, ShardRoutingState.INITIALIZING, recoverySource)__        return newShard(shardRouting, settings, engineFactory)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,shard,boolean,primary,settings,settings,engine,factory,engine,factory,throws,ioexception,final,recovery,source,recovery,source,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,final,shard,routing,shard,routing,test,shard,routing,new,shard,routing,new,shard,id,index,0,random,alpha,of,length,10,primary,shard,routing,state,initializing,recovery,source,return,new,shard,shard,routing,settings,engine,factory
IndexShardTestCase -> protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException;1550668107;Creates a new initializing shard. The shard will have its own unique data path.__@param primary       indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard)_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newShard(boolean primary, Settings settings, EngineFactory engineFactory) throws IOException {_        final RecoverySource recoverySource =_                primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE__        final ShardRouting shardRouting =_                TestShardRouting.newShardRouting(_                        new ShardId("index", "_na_", 0), randomAlphaOfLength(10), primary, ShardRoutingState.INITIALIZING, recoverySource)__        return newShard(shardRouting, settings, engineFactory)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,shard,boolean,primary,settings,settings,engine,factory,engine,factory,throws,ioexception,final,recovery,source,recovery,source,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,final,shard,routing,shard,routing,test,shard,routing,new,shard,routing,new,shard,id,index,0,random,alpha,of,length,10,primary,shard,routing,state,initializing,recovery,source,return,new,shard,shard,routing,settings,engine,factory
IndexShardTestCase -> protected IndexShard newShard(boolean primary) throws IOException;1524684173;creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(boolean primary) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(new ShardId("index", "_na_", 0), randomAlphaOfLength(10), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,boolean,primary,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,new,shard,id,index,0,random,alpha,of,length,10,primary,shard,routing,state,initializing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing
IndexShardTestCase -> protected IndexShard newShard(boolean primary) throws IOException;1525162917;creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(boolean primary) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(new ShardId("index", "_na_", 0), randomAlphaOfLength(10), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,boolean,primary,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,new,shard,id,index,0,random,alpha,of,length,10,primary,shard,routing,state,initializing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing
IndexShardTestCase -> protected IndexShard newShard(boolean primary) throws IOException;1527583663;creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(boolean primary) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(new ShardId("index", "_na_", 0), randomAlphaOfLength(10), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,boolean,primary,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,new,shard,id,index,0,random,alpha,of,length,10,primary,shard,routing,state,initializing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing
IndexShardTestCase -> protected IndexShard newShard(boolean primary) throws IOException;1528706846;creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(boolean primary) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(new ShardId("index", "_na_", 0), randomAlphaOfLength(10), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,boolean,primary,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,new,shard,id,index,0,random,alpha,of,length,10,primary,shard,routing,state,initializing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing
IndexShardTestCase -> protected IndexShard newShard(boolean primary) throws IOException;1531179852;creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(boolean primary) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(new ShardId("index", "_na_", 0), randomAlphaOfLength(10), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,boolean,primary,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,new,shard,id,index,0,random,alpha,of,length,10,primary,shard,routing,state,initializing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing
IndexShardTestCase -> protected IndexShard newShard(boolean primary) throws IOException;1531910483;creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(boolean primary) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(new ShardId("index", "_na_", 0), randomAlphaOfLength(10), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,boolean,primary,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,new,shard,id,index,0,random,alpha,of,length,10,primary,shard,routing,state,initializing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing
IndexShardTestCase -> protected IndexShard newShard(boolean primary) throws IOException;1532434432;creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(boolean primary) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(new ShardId("index", "_na_", 0), randomAlphaOfLength(10), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,boolean,primary,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,new,shard,id,index,0,random,alpha,of,length,10,primary,shard,routing,state,initializing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing
IndexShardTestCase -> protected IndexShard newShard(boolean primary) throws IOException;1533295538;creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(boolean primary) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(new ShardId("index", "_na_", 0), randomAlphaOfLength(10), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,boolean,primary,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,new,shard,id,index,0,random,alpha,of,length,10,primary,shard,routing,state,initializing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing
IndexShardTestCase -> protected IndexShard newShard(boolean primary) throws IOException;1535723122;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(boolean primary) throws IOException {_        return newShard(primary, Settings.EMPTY, new InternalEngineFactory())__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,boolean,primary,throws,ioexception,return,new,shard,primary,settings,empty,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newShard(boolean primary) throws IOException;1535965276;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(boolean primary) throws IOException {_        return newShard(primary, Settings.EMPTY)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,boolean,primary,throws,ioexception,return,new,shard,primary,settings,empty
IndexShardTestCase -> protected IndexShard newShard(boolean primary) throws IOException;1536611444;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(boolean primary) throws IOException {_        return newShard(primary, Settings.EMPTY)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,boolean,primary,throws,ioexception,return,new,shard,primary,settings,empty
IndexShardTestCase -> protected IndexShard newShard(boolean primary) throws IOException;1536828374;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(boolean primary) throws IOException {_        return newShard(primary, Settings.EMPTY)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,boolean,primary,throws,ioexception,return,new,shard,primary,settings,empty
IndexShardTestCase -> protected IndexShard newShard(boolean primary) throws IOException;1537371806;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(boolean primary) throws IOException {_        return newShard(primary, Settings.EMPTY)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,boolean,primary,throws,ioexception,return,new,shard,primary,settings,empty
IndexShardTestCase -> protected IndexShard newShard(boolean primary) throws IOException;1537806831;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(boolean primary) throws IOException {_        return newShard(primary, Settings.EMPTY)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,boolean,primary,throws,ioexception,return,new,shard,primary,settings,empty
IndexShardTestCase -> protected IndexShard newShard(boolean primary) throws IOException;1538067637;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(boolean primary) throws IOException {_        return newShard(primary, Settings.EMPTY)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,boolean,primary,throws,ioexception,return,new,shard,primary,settings,empty
IndexShardTestCase -> protected IndexShard newShard(boolean primary) throws IOException;1542697404;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(boolean primary) throws IOException {_        return newShard(primary, Settings.EMPTY)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,boolean,primary,throws,ioexception,return,new,shard,primary,settings,empty
IndexShardTestCase -> protected IndexShard newShard(boolean primary) throws IOException;1544783963;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(boolean primary) throws IOException {_        return newShard(primary, Settings.EMPTY)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,boolean,primary,throws,ioexception,return,new,shard,primary,settings,empty
IndexShardTestCase -> protected IndexShard newShard(boolean primary) throws IOException;1544893197;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(boolean primary) throws IOException {_        return newShard(primary, Settings.EMPTY)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,boolean,primary,throws,ioexception,return,new,shard,primary,settings,empty
IndexShardTestCase -> protected IndexShard newShard(boolean primary) throws IOException;1545678410;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(boolean primary) throws IOException {_        return newShard(primary, Settings.EMPTY)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,boolean,primary,throws,ioexception,return,new,shard,primary,settings,empty
IndexShardTestCase -> protected IndexShard newShard(boolean primary) throws IOException;1546927432;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(boolean primary) throws IOException {_        return newShard(primary, Settings.EMPTY)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,boolean,primary,throws,ioexception,return,new,shard,primary,settings,empty
IndexShardTestCase -> protected IndexShard newShard(boolean primary) throws IOException;1547315388;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(boolean primary) throws IOException {_        return newShard(primary, Settings.EMPTY)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,boolean,primary,throws,ioexception,return,new,shard,primary,settings,empty
IndexShardTestCase -> protected IndexShard newShard(boolean primary) throws IOException;1547496475;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(boolean primary) throws IOException {_        return newShard(primary, Settings.EMPTY)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,boolean,primary,throws,ioexception,return,new,shard,primary,settings,empty
IndexShardTestCase -> protected IndexShard newShard(boolean primary) throws IOException;1547496886;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(boolean primary) throws IOException {_        return newShard(primary, Settings.EMPTY)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,boolean,primary,throws,ioexception,return,new,shard,primary,settings,empty
IndexShardTestCase -> protected IndexShard newShard(boolean primary) throws IOException;1547520324;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(boolean primary) throws IOException {_        return newShard(primary, Settings.EMPTY)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,boolean,primary,throws,ioexception,return,new,shard,primary,settings,empty
IndexShardTestCase -> protected IndexShard newShard(boolean primary) throws IOException;1547552901;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(boolean primary) throws IOException {_        return newShard(primary, Settings.EMPTY)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,boolean,primary,throws,ioexception,return,new,shard,primary,settings,empty
IndexShardTestCase -> protected IndexShard newShard(boolean primary) throws IOException;1548593396;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(boolean primary) throws IOException {_        return newShard(primary, Settings.EMPTY)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,boolean,primary,throws,ioexception,return,new,shard,primary,settings,empty
IndexShardTestCase -> protected IndexShard newShard(boolean primary) throws IOException;1549294529;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(boolean primary) throws IOException {_        return newShard(primary, Settings.EMPTY)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,boolean,primary,throws,ioexception,return,new,shard,primary,settings,empty
IndexShardTestCase -> protected IndexShard newShard(boolean primary) throws IOException;1550668107;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(boolean primary) throws IOException {_        return newShard(primary, Settings.EMPTY)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,boolean,primary,throws,ioexception,return,new,shard,primary,settings,empty
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData, IndexingOperationListener... listeners)         throws IOException;1524684173;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to.__@param routing       shard routing to use_@param indexMetaData indexMetaData for the shard, including any mapping_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData, IndexingOperationListener... listeners)_        throws IOException {_        return newShard(routing, indexMetaData, null, null, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,indexing,operation,listener,listeners,throws,ioexception,return,new,shard,routing,index,meta,data,null,null,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData, IndexingOperationListener... listeners)         throws IOException;1525162917;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to.__@param routing       shard routing to use_@param indexMetaData indexMetaData for the shard, including any mapping_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData, IndexingOperationListener... listeners)_        throws IOException {_        return newShard(routing, indexMetaData, null, null, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,indexing,operation,listener,listeners,throws,ioexception,return,new,shard,routing,index,meta,data,null,null,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData, IndexingOperationListener... listeners)         throws IOException;1527583663;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to.__@param routing       shard routing to use_@param indexMetaData indexMetaData for the shard, including any mapping_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData, IndexingOperationListener... listeners)_        throws IOException {_        return newShard(routing, indexMetaData, null, null, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,indexing,operation,listener,listeners,throws,ioexception,return,new,shard,routing,index,meta,data,null,null,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData, IndexingOperationListener... listeners)         throws IOException;1528706846;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to.__@param routing       shard routing to use_@param indexMetaData indexMetaData for the shard, including any mapping_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData, IndexingOperationListener... listeners)_        throws IOException {_        return newShard(routing, indexMetaData, null, new InternalEngineFactory(), () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,indexing,operation,listener,listeners,throws,ioexception,return,new,shard,routing,index,meta,data,null,new,internal,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData, IndexingOperationListener... listeners)         throws IOException;1531179852;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to.__@param routing       shard routing to use_@param indexMetaData indexMetaData for the shard, including any mapping_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData, IndexingOperationListener... listeners)_        throws IOException {_        return newShard(routing, indexMetaData, null, new InternalEngineFactory(), () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,indexing,operation,listener,listeners,throws,ioexception,return,new,shard,routing,index,meta,data,null,new,internal,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData, IndexingOperationListener... listeners)         throws IOException;1531910483;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to.__@param routing       shard routing to use_@param indexMetaData indexMetaData for the shard, including any mapping_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData, IndexingOperationListener... listeners)_        throws IOException {_        return newShard(routing, indexMetaData, null, new InternalEngineFactory(), () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,indexing,operation,listener,listeners,throws,ioexception,return,new,shard,routing,index,meta,data,null,new,internal,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData, IndexingOperationListener... listeners)         throws IOException;1532434432;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to.__@param routing       shard routing to use_@param indexMetaData indexMetaData for the shard, including any mapping_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData, IndexingOperationListener... listeners)_        throws IOException {_        return newShard(routing, indexMetaData, null, new InternalEngineFactory(), () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,indexing,operation,listener,listeners,throws,ioexception,return,new,shard,routing,index,meta,data,null,new,internal,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData, IndexingOperationListener... listeners)         throws IOException;1533295538;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to.__@param routing       shard routing to use_@param indexMetaData indexMetaData for the shard, including any mapping_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData, IndexingOperationListener... listeners)_        throws IOException {_        return newShard(routing, indexMetaData, null, new InternalEngineFactory(), () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,indexing,operation,listener,listeners,throws,ioexception,return,new,shard,routing,index,meta,data,null,new,internal,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newStartedShard(             final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException;1535723122;Creates a new empty shard with the specified settings and engine factory and starts it.__@param primary       controls whether the shard will be a primary or a replica._@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newStartedShard(_            final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException {_        IndexShard shard = newShard(primary, settings, engineFactory)__        if (primary) {_            recoverShardFromStore(shard)__        } else {_            recoveryEmptyReplica(shard, true)__        }_        return shard__    };creates,a,new,empty,shard,with,the,specified,settings,and,engine,factory,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,started,shard,final,boolean,primary,final,settings,settings,final,engine,factory,engine,factory,throws,ioexception,index,shard,shard,new,shard,primary,settings,engine,factory,if,primary,recover,shard,from,store,shard,else,recovery,empty,replica,shard,true,return,shard
IndexShardTestCase -> protected IndexShard newStartedShard(             final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException;1535965276;Creates a new empty shard with the specified settings and engine factory and starts it.__@param primary       controls whether the shard will be a primary or a replica._@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newStartedShard(_            final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException {_        return newStartedShard(p -> newShard(p, settings, engineFactory), primary)__    };creates,a,new,empty,shard,with,the,specified,settings,and,engine,factory,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,started,shard,final,boolean,primary,final,settings,settings,final,engine,factory,engine,factory,throws,ioexception,return,new,started,shard,p,new,shard,p,settings,engine,factory,primary
IndexShardTestCase -> protected IndexShard newStartedShard(             final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException;1536611444;Creates a new empty shard with the specified settings and engine factory and starts it.__@param primary       controls whether the shard will be a primary or a replica._@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newStartedShard(_            final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException {_        return newStartedShard(p -> newShard(p, settings, engineFactory), primary)__    };creates,a,new,empty,shard,with,the,specified,settings,and,engine,factory,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,started,shard,final,boolean,primary,final,settings,settings,final,engine,factory,engine,factory,throws,ioexception,return,new,started,shard,p,new,shard,p,settings,engine,factory,primary
IndexShardTestCase -> protected IndexShard newStartedShard(             final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException;1536828374;Creates a new empty shard with the specified settings and engine factory and starts it.__@param primary       controls whether the shard will be a primary or a replica._@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newStartedShard(_            final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException {_        return newStartedShard(p -> newShard(p, settings, engineFactory), primary)__    };creates,a,new,empty,shard,with,the,specified,settings,and,engine,factory,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,started,shard,final,boolean,primary,final,settings,settings,final,engine,factory,engine,factory,throws,ioexception,return,new,started,shard,p,new,shard,p,settings,engine,factory,primary
IndexShardTestCase -> protected IndexShard newStartedShard(             final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException;1537371806;Creates a new empty shard with the specified settings and engine factory and starts it.__@param primary       controls whether the shard will be a primary or a replica._@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newStartedShard(_            final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException {_        return newStartedShard(p -> newShard(p, settings, engineFactory), primary)__    };creates,a,new,empty,shard,with,the,specified,settings,and,engine,factory,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,started,shard,final,boolean,primary,final,settings,settings,final,engine,factory,engine,factory,throws,ioexception,return,new,started,shard,p,new,shard,p,settings,engine,factory,primary
IndexShardTestCase -> protected IndexShard newStartedShard(             final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException;1537806831;Creates a new empty shard with the specified settings and engine factory and starts it.__@param primary       controls whether the shard will be a primary or a replica._@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newStartedShard(_            final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException {_        return newStartedShard(p -> newShard(p, settings, engineFactory), primary)__    };creates,a,new,empty,shard,with,the,specified,settings,and,engine,factory,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,started,shard,final,boolean,primary,final,settings,settings,final,engine,factory,engine,factory,throws,ioexception,return,new,started,shard,p,new,shard,p,settings,engine,factory,primary
IndexShardTestCase -> protected IndexShard newStartedShard(             final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException;1538067637;Creates a new empty shard with the specified settings and engine factory and starts it.__@param primary       controls whether the shard will be a primary or a replica._@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newStartedShard(_            final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException {_        return newStartedShard(p -> newShard(p, settings, engineFactory), primary)__    };creates,a,new,empty,shard,with,the,specified,settings,and,engine,factory,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,started,shard,final,boolean,primary,final,settings,settings,final,engine,factory,engine,factory,throws,ioexception,return,new,started,shard,p,new,shard,p,settings,engine,factory,primary
IndexShardTestCase -> protected IndexShard newStartedShard(             final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException;1542697404;Creates a new empty shard with the specified settings and engine factory and starts it.__@param primary       controls whether the shard will be a primary or a replica._@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newStartedShard(_            final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException {_        return newStartedShard(p -> newShard(p, settings, engineFactory), primary)__    };creates,a,new,empty,shard,with,the,specified,settings,and,engine,factory,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,started,shard,final,boolean,primary,final,settings,settings,final,engine,factory,engine,factory,throws,ioexception,return,new,started,shard,p,new,shard,p,settings,engine,factory,primary
IndexShardTestCase -> protected IndexShard newStartedShard(             final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException;1544783963;Creates a new empty shard with the specified settings and engine factory and starts it.__@param primary       controls whether the shard will be a primary or a replica._@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newStartedShard(_            final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException {_        return newStartedShard(p -> newShard(p, settings, engineFactory), primary)__    };creates,a,new,empty,shard,with,the,specified,settings,and,engine,factory,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,started,shard,final,boolean,primary,final,settings,settings,final,engine,factory,engine,factory,throws,ioexception,return,new,started,shard,p,new,shard,p,settings,engine,factory,primary
IndexShardTestCase -> protected IndexShard newStartedShard(             final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException;1544893197;Creates a new empty shard with the specified settings and engine factory and starts it.__@param primary       controls whether the shard will be a primary or a replica._@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newStartedShard(_            final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException {_        return newStartedShard(p -> newShard(p, settings, engineFactory), primary)__    };creates,a,new,empty,shard,with,the,specified,settings,and,engine,factory,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,started,shard,final,boolean,primary,final,settings,settings,final,engine,factory,engine,factory,throws,ioexception,return,new,started,shard,p,new,shard,p,settings,engine,factory,primary
IndexShardTestCase -> protected IndexShard newStartedShard(             final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException;1545678410;Creates a new empty shard with the specified settings and engine factory and starts it.__@param primary       controls whether the shard will be a primary or a replica._@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newStartedShard(_            final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException {_        return newStartedShard(p -> newShard(p, settings, engineFactory), primary)__    };creates,a,new,empty,shard,with,the,specified,settings,and,engine,factory,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,started,shard,final,boolean,primary,final,settings,settings,final,engine,factory,engine,factory,throws,ioexception,return,new,started,shard,p,new,shard,p,settings,engine,factory,primary
IndexShardTestCase -> protected IndexShard newStartedShard(             final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException;1546927432;Creates a new empty shard with the specified settings and engine factory and starts it.__@param primary       controls whether the shard will be a primary or a replica._@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newStartedShard(_            final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException {_        return newStartedShard(p -> newShard(p, settings, engineFactory), primary)__    };creates,a,new,empty,shard,with,the,specified,settings,and,engine,factory,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,started,shard,final,boolean,primary,final,settings,settings,final,engine,factory,engine,factory,throws,ioexception,return,new,started,shard,p,new,shard,p,settings,engine,factory,primary
IndexShardTestCase -> protected IndexShard newStartedShard(             final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException;1547315388;Creates a new empty shard with the specified settings and engine factory and starts it.__@param primary       controls whether the shard will be a primary or a replica._@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newStartedShard(_            final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException {_        return newStartedShard(p -> newShard(p, settings, engineFactory), primary)__    };creates,a,new,empty,shard,with,the,specified,settings,and,engine,factory,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,started,shard,final,boolean,primary,final,settings,settings,final,engine,factory,engine,factory,throws,ioexception,return,new,started,shard,p,new,shard,p,settings,engine,factory,primary
IndexShardTestCase -> protected IndexShard newStartedShard(             final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException;1547496475;Creates a new empty shard with the specified settings and engine factory and starts it.__@param primary       controls whether the shard will be a primary or a replica._@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newStartedShard(_            final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException {_        return newStartedShard(p -> newShard(p, settings, engineFactory), primary)__    };creates,a,new,empty,shard,with,the,specified,settings,and,engine,factory,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,started,shard,final,boolean,primary,final,settings,settings,final,engine,factory,engine,factory,throws,ioexception,return,new,started,shard,p,new,shard,p,settings,engine,factory,primary
IndexShardTestCase -> protected IndexShard newStartedShard(             final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException;1547496886;Creates a new empty shard with the specified settings and engine factory and starts it.__@param primary       controls whether the shard will be a primary or a replica._@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newStartedShard(_            final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException {_        return newStartedShard(p -> newShard(p, settings, engineFactory), primary)__    };creates,a,new,empty,shard,with,the,specified,settings,and,engine,factory,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,started,shard,final,boolean,primary,final,settings,settings,final,engine,factory,engine,factory,throws,ioexception,return,new,started,shard,p,new,shard,p,settings,engine,factory,primary
IndexShardTestCase -> protected IndexShard newStartedShard(             final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException;1547520324;Creates a new empty shard with the specified settings and engine factory and starts it.__@param primary       controls whether the shard will be a primary or a replica._@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newStartedShard(_            final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException {_        return newStartedShard(p -> newShard(p, settings, engineFactory), primary)__    };creates,a,new,empty,shard,with,the,specified,settings,and,engine,factory,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,started,shard,final,boolean,primary,final,settings,settings,final,engine,factory,engine,factory,throws,ioexception,return,new,started,shard,p,new,shard,p,settings,engine,factory,primary
IndexShardTestCase -> protected IndexShard newStartedShard(             final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException;1547552901;Creates a new empty shard with the specified settings and engine factory and starts it.__@param primary       controls whether the shard will be a primary or a replica._@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newStartedShard(_            final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException {_        return newStartedShard(p -> newShard(p, settings, engineFactory), primary)__    };creates,a,new,empty,shard,with,the,specified,settings,and,engine,factory,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,started,shard,final,boolean,primary,final,settings,settings,final,engine,factory,engine,factory,throws,ioexception,return,new,started,shard,p,new,shard,p,settings,engine,factory,primary
IndexShardTestCase -> protected IndexShard newStartedShard(             final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException;1548593396;Creates a new empty shard with the specified settings and engine factory and starts it.__@param primary       controls whether the shard will be a primary or a replica._@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newStartedShard(_            final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException {_        return newStartedShard(p -> newShard(p, settings, engineFactory), primary)__    };creates,a,new,empty,shard,with,the,specified,settings,and,engine,factory,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,started,shard,final,boolean,primary,final,settings,settings,final,engine,factory,engine,factory,throws,ioexception,return,new,started,shard,p,new,shard,p,settings,engine,factory,primary
IndexShardTestCase -> protected IndexShard newStartedShard(             final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException;1549294529;Creates a new empty shard with the specified settings and engine factory and starts it.__@param primary       controls whether the shard will be a primary or a replica._@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newStartedShard(_            final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException {_        return newStartedShard(p -> newShard(p, settings, engineFactory), primary)__    };creates,a,new,empty,shard,with,the,specified,settings,and,engine,factory,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,started,shard,final,boolean,primary,final,settings,settings,final,engine,factory,engine,factory,throws,ioexception,return,new,started,shard,p,new,shard,p,settings,engine,factory,primary
IndexShardTestCase -> protected IndexShard newStartedShard(             final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException;1550668107;Creates a new empty shard with the specified settings and engine factory and starts it.__@param primary       controls whether the shard will be a primary or a replica._@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard;protected IndexShard newStartedShard(_            final boolean primary, final Settings settings, final EngineFactory engineFactory) throws IOException {_        return newStartedShard(p -> newShard(p, settings, engineFactory), primary)__    };creates,a,new,empty,shard,with,the,specified,settings,and,engine,factory,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard;protected,index,shard,new,started,shard,final,boolean,primary,final,settings,settings,final,engine,factory,engine,factory,throws,ioexception,return,new,started,shard,p,new,shard,p,settings,engine,factory,primary
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException;1524684173;creates a new initializing shard. The shard will have its own unique data path.__@param shardId   the shard id to use_@param primary   indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard)_@param listeners an optional set of listeners to add to the shard;protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, randomAlphaOfLength(5), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,indexing,operation,listener,listeners,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,random,alpha,of,length,5,primary,shard,routing,state,initializing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException;1525162917;creates a new initializing shard. The shard will have its own unique data path.__@param shardId   the shard id to use_@param primary   indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard)_@param listeners an optional set of listeners to add to the shard;protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, randomAlphaOfLength(5), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,indexing,operation,listener,listeners,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,random,alpha,of,length,5,primary,shard,routing,state,initializing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException;1527583663;creates a new initializing shard. The shard will have its own unique data path.__@param shardId   the shard id to use_@param primary   indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard)_@param listeners an optional set of listeners to add to the shard;protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, randomAlphaOfLength(5), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,indexing,operation,listener,listeners,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,random,alpha,of,length,5,primary,shard,routing,state,initializing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException;1528706846;creates a new initializing shard. The shard will have its own unique data path.__@param shardId   the shard id to use_@param primary   indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard)_@param listeners an optional set of listeners to add to the shard;protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, randomAlphaOfLength(5), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,indexing,operation,listener,listeners,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,random,alpha,of,length,5,primary,shard,routing,state,initializing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException;1531179852;creates a new initializing shard. The shard will have its own unique data path.__@param shardId   the shard id to use_@param primary   indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard)_@param listeners an optional set of listeners to add to the shard;protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, randomAlphaOfLength(5), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,indexing,operation,listener,listeners,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,random,alpha,of,length,5,primary,shard,routing,state,initializing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException;1531910483;creates a new initializing shard. The shard will have its own unique data path.__@param shardId   the shard id to use_@param primary   indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard)_@param listeners an optional set of listeners to add to the shard;protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, randomAlphaOfLength(5), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,indexing,operation,listener,listeners,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,random,alpha,of,length,5,primary,shard,routing,state,initializing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException;1532434432;creates a new initializing shard. The shard will have its own unique data path.__@param shardId   the shard id to use_@param primary   indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard)_@param listeners an optional set of listeners to add to the shard;protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, randomAlphaOfLength(5), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,indexing,operation,listener,listeners,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,random,alpha,of,length,5,primary,shard,routing,state,initializing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException;1533295538;creates a new initializing shard. The shard will have its own unique data path.__@param shardId   the shard id to use_@param primary   indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard)_@param listeners an optional set of listeners to add to the shard;protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, randomAlphaOfLength(5), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,indexing,operation,listener,listeners,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,random,alpha,of,length,5,primary,shard,routing,state,initializing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException;1535723122;creates a new initializing shard. The shard will have its own unique data path.__@param shardId   the shard id to use_@param primary   indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard)_@param listeners an optional set of listeners to add to the shard;protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, randomAlphaOfLength(5), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, Settings.EMPTY, new InternalEngineFactory(), listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,indexing,operation,listener,listeners,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,random,alpha,of,length,5,primary,shard,routing,state,initializing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,settings,empty,new,internal,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException;1535965276;creates a new initializing shard. The shard will have its own unique data path.__@param shardId   the shard id to use_@param primary   indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard)_@param listeners an optional set of listeners to add to the shard;protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, randomAlphaOfLength(5), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, Settings.EMPTY, new InternalEngineFactory(), listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,indexing,operation,listener,listeners,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,random,alpha,of,length,5,primary,shard,routing,state,initializing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,settings,empty,new,internal,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException;1536611444;creates a new initializing shard. The shard will have its own unique data path.__@param shardId   the shard id to use_@param primary   indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard)_@param listeners an optional set of listeners to add to the shard;protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, randomAlphaOfLength(5), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, Settings.EMPTY, new InternalEngineFactory(), listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,indexing,operation,listener,listeners,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,random,alpha,of,length,5,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,settings,empty,new,internal,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException;1536828374;creates a new initializing shard. The shard will have its own unique data path.__@param shardId   the shard id to use_@param primary   indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard)_@param listeners an optional set of listeners to add to the shard;protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, randomAlphaOfLength(5), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, Settings.EMPTY, new InternalEngineFactory(), listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,indexing,operation,listener,listeners,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,random,alpha,of,length,5,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,settings,empty,new,internal,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException;1537371806;creates a new initializing shard. The shard will have its own unique data path.__@param shardId   the shard id to use_@param primary   indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard)_@param listeners an optional set of listeners to add to the shard;protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, randomAlphaOfLength(5), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, Settings.EMPTY, new InternalEngineFactory(), listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,indexing,operation,listener,listeners,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,random,alpha,of,length,5,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,settings,empty,new,internal,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException;1537806831;creates a new initializing shard. The shard will have its own unique data path.__@param shardId   the shard id to use_@param primary   indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard)_@param listeners an optional set of listeners to add to the shard;protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, randomAlphaOfLength(5), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, Settings.EMPTY, new InternalEngineFactory(), listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,indexing,operation,listener,listeners,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,random,alpha,of,length,5,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,settings,empty,new,internal,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException;1538067637;creates a new initializing shard. The shard will have its own unique data path.__@param shardId   the shard id to use_@param primary   indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard)_@param listeners an optional set of listeners to add to the shard;protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, randomAlphaOfLength(5), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, Settings.EMPTY, new InternalEngineFactory(), listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,indexing,operation,listener,listeners,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,random,alpha,of,length,5,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,settings,empty,new,internal,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException;1542697404;creates a new initializing shard. The shard will have its own unique data path.__@param shardId   the shard id to use_@param primary   indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard)_@param listeners an optional set of listeners to add to the shard;protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, randomAlphaOfLength(5), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, Settings.EMPTY, new InternalEngineFactory(), listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,indexing,operation,listener,listeners,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,random,alpha,of,length,5,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,settings,empty,new,internal,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException;1544783963;creates a new initializing shard. The shard will have its own unique data path.__@param shardId   the shard id to use_@param primary   indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard)_@param listeners an optional set of listeners to add to the shard;protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, randomAlphaOfLength(5), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, Settings.EMPTY, new InternalEngineFactory(), listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,indexing,operation,listener,listeners,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,random,alpha,of,length,5,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,settings,empty,new,internal,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException;1544893197;creates a new initializing shard. The shard will have its own unique data path.__@param shardId   the shard id to use_@param primary   indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard)_@param listeners an optional set of listeners to add to the shard;protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, randomAlphaOfLength(5), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, Settings.EMPTY, new InternalEngineFactory(), listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,indexing,operation,listener,listeners,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,random,alpha,of,length,5,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,settings,empty,new,internal,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException;1545678410;creates a new initializing shard. The shard will have its own unique data path.__@param shardId   the shard id to use_@param primary   indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard)_@param listeners an optional set of listeners to add to the shard;protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, randomAlphaOfLength(5), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, Settings.EMPTY, new InternalEngineFactory(), listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,indexing,operation,listener,listeners,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,random,alpha,of,length,5,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,settings,empty,new,internal,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException;1546927432;creates a new initializing shard. The shard will have its own unique data path.__@param shardId   the shard id to use_@param primary   indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard)_@param listeners an optional set of listeners to add to the shard;protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, randomAlphaOfLength(5), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, Settings.EMPTY, new InternalEngineFactory(), listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,indexing,operation,listener,listeners,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,random,alpha,of,length,5,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,settings,empty,new,internal,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException;1547315388;creates a new initializing shard. The shard will have its own unique data path.__@param shardId   the shard id to use_@param primary   indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard)_@param listeners an optional set of listeners to add to the shard;protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, randomAlphaOfLength(5), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, Settings.EMPTY, new InternalEngineFactory(), listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,indexing,operation,listener,listeners,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,random,alpha,of,length,5,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,settings,empty,new,internal,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException;1547496475;creates a new initializing shard. The shard will have its own unique data path.__@param shardId   the shard id to use_@param primary   indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard)_@param listeners an optional set of listeners to add to the shard;protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, randomAlphaOfLength(5), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, Settings.EMPTY, new InternalEngineFactory(), listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,indexing,operation,listener,listeners,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,random,alpha,of,length,5,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,settings,empty,new,internal,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException;1547496886;creates a new initializing shard. The shard will have its own unique data path.__@param shardId   the shard id to use_@param primary   indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard)_@param listeners an optional set of listeners to add to the shard;protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, randomAlphaOfLength(5), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, Settings.EMPTY, new InternalEngineFactory(), listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,indexing,operation,listener,listeners,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,random,alpha,of,length,5,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,settings,empty,new,internal,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException;1547520324;creates a new initializing shard. The shard will have its own unique data path.__@param shardId   the shard id to use_@param primary   indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard)_@param listeners an optional set of listeners to add to the shard;protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, randomAlphaOfLength(5), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, Settings.EMPTY, new InternalEngineFactory(), listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,indexing,operation,listener,listeners,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,random,alpha,of,length,5,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,settings,empty,new,internal,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException;1547552901;creates a new initializing shard. The shard will have its own unique data path.__@param shardId   the shard id to use_@param primary   indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard)_@param listeners an optional set of listeners to add to the shard;protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, randomAlphaOfLength(5), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, Settings.EMPTY, new InternalEngineFactory(), listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,indexing,operation,listener,listeners,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,random,alpha,of,length,5,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,settings,empty,new,internal,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException;1548593396;creates a new initializing shard. The shard will have its own unique data path.__@param shardId   the shard id to use_@param primary   indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard)_@param listeners an optional set of listeners to add to the shard;protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, randomAlphaOfLength(5), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, Settings.EMPTY, new InternalEngineFactory(), listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,indexing,operation,listener,listeners,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,random,alpha,of,length,5,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,settings,empty,new,internal,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException;1549294529;creates a new initializing shard. The shard will have its own unique data path.__@param shardId   the shard id to use_@param primary   indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard)_@param listeners an optional set of listeners to add to the shard;protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, randomAlphaOfLength(5), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, Settings.EMPTY, new InternalEngineFactory(), listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,indexing,operation,listener,listeners,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,random,alpha,of,length,5,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,settings,empty,new,internal,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException;1550668107;creates a new initializing shard. The shard will have its own unique data path.__@param shardId   the shard id to use_@param primary   indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard)_@param listeners an optional set of listeners to add to the shard;protected IndexShard newShard(ShardId shardId, boolean primary, IndexingOperationListener... listeners) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, randomAlphaOfLength(5), primary,_            ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, Settings.EMPTY, new InternalEngineFactory(), listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,indexing,operation,listener,listeners,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,random,alpha,of,length,5,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,settings,empty,new,internal,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException;1524684173;creates a new initializing shard._@param routing                shard routing to use_@param shardPath              path to use for shard data_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param indexEventListener_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException {_        final Settings nodeSettings = Settings.builder().put("node.name", routing.currentNodeId()).build()__        final IndexSettings indexSettings = new IndexSettings(indexMetaData, nodeSettings)__        final IndexShard indexShard__        final Store store = createStore(indexSettings, shardPath)__        boolean success = false__        try {_            IndexCache indexCache = new IndexCache(indexSettings, new DisabledQueryCache(indexSettings), null)__            MapperService mapperService = MapperTestUtils.newMapperService(xContentRegistry(), createTempDir(),_                    indexSettings.getSettings(), "index")__            mapperService.merge(indexMetaData, MapperService.MergeReason.MAPPING_RECOVERY)__            SimilarityService similarityService = new SimilarityService(indexSettings, null, Collections.emptyMap())__            final Engine.Warmer warmer = searcher -> {_            }__            ClusterSettings clusterSettings = new ClusterSettings(nodeSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)__            CircuitBreakerService breakerService = new HierarchyCircuitBreakerService(nodeSettings, clusterSettings)__            indexShard = new IndexShard(routing, indexSettings, shardPath, store, () -> null, indexCache, mapperService, similarityService,_                engineFactory, indexEventListener, indexSearcherWrapper, threadPool,_                BigArrays.NON_RECYCLING_INSTANCE, warmer, Collections.emptyList(), Arrays.asList(listeners), globalCheckpointSyncer,_                breakerService)__            success = true__        } finally {_            if (success == false) {_                IOUtils.close(store)__            }_        }_        return indexShard__    };creates,a,new,initializing,shard,param,routing,shard,routing,to,use,param,shard,path,path,to,use,for,shard,data,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,index,event,listener,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,shard,path,shard,path,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,index,event,listener,index,event,listener,indexing,operation,listener,listeners,throws,ioexception,final,settings,node,settings,settings,builder,put,node,name,routing,current,node,id,build,final,index,settings,index,settings,new,index,settings,index,meta,data,node,settings,final,index,shard,index,shard,final,store,store,create,store,index,settings,shard,path,boolean,success,false,try,index,cache,index,cache,new,index,cache,index,settings,new,disabled,query,cache,index,settings,null,mapper,service,mapper,service,mapper,test,utils,new,mapper,service,x,content,registry,create,temp,dir,index,settings,get,settings,index,mapper,service,merge,index,meta,data,mapper,service,merge,reason,similarity,service,similarity,service,new,similarity,service,index,settings,null,collections,empty,map,final,engine,warmer,warmer,searcher,cluster,settings,cluster,settings,new,cluster,settings,node,settings,cluster,settings,circuit,breaker,service,breaker,service,new,hierarchy,circuit,breaker,service,node,settings,cluster,settings,index,shard,new,index,shard,routing,index,settings,shard,path,store,null,index,cache,mapper,service,similarity,service,engine,factory,index,event,listener,index,searcher,wrapper,thread,pool,big,arrays,warmer,collections,empty,list,arrays,as,list,listeners,global,checkpoint,syncer,breaker,service,success,true,finally,if,success,false,ioutils,close,store,return,index,shard
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException;1525162917;creates a new initializing shard._@param routing                shard routing to use_@param shardPath              path to use for shard data_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param indexEventListener_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException {_        final Settings nodeSettings = Settings.builder().put("node.name", routing.currentNodeId()).build()__        final IndexSettings indexSettings = new IndexSettings(indexMetaData, nodeSettings)__        final IndexShard indexShard__        final Store store = createStore(indexSettings, shardPath)__        boolean success = false__        try {_            IndexCache indexCache = new IndexCache(indexSettings, new DisabledQueryCache(indexSettings), null)__            MapperService mapperService = MapperTestUtils.newMapperService(xContentRegistry(), createTempDir(),_                    indexSettings.getSettings(), "index")__            mapperService.merge(indexMetaData, MapperService.MergeReason.MAPPING_RECOVERY)__            SimilarityService similarityService = new SimilarityService(indexSettings, null, Collections.emptyMap())__            final Engine.Warmer warmer = searcher -> {_            }__            ClusterSettings clusterSettings = new ClusterSettings(nodeSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)__            CircuitBreakerService breakerService = new HierarchyCircuitBreakerService(nodeSettings, clusterSettings)__            indexShard = new IndexShard(routing, indexSettings, shardPath, store, () -> null, indexCache, mapperService, similarityService,_                engineFactory, indexEventListener, indexSearcherWrapper, threadPool,_                BigArrays.NON_RECYCLING_INSTANCE, warmer, Collections.emptyList(), Arrays.asList(listeners), globalCheckpointSyncer,_                breakerService)__            success = true__        } finally {_            if (success == false) {_                IOUtils.close(store)__            }_        }_        return indexShard__    };creates,a,new,initializing,shard,param,routing,shard,routing,to,use,param,shard,path,path,to,use,for,shard,data,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,index,event,listener,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,shard,path,shard,path,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,index,event,listener,index,event,listener,indexing,operation,listener,listeners,throws,ioexception,final,settings,node,settings,settings,builder,put,node,name,routing,current,node,id,build,final,index,settings,index,settings,new,index,settings,index,meta,data,node,settings,final,index,shard,index,shard,final,store,store,create,store,index,settings,shard,path,boolean,success,false,try,index,cache,index,cache,new,index,cache,index,settings,new,disabled,query,cache,index,settings,null,mapper,service,mapper,service,mapper,test,utils,new,mapper,service,x,content,registry,create,temp,dir,index,settings,get,settings,index,mapper,service,merge,index,meta,data,mapper,service,merge,reason,similarity,service,similarity,service,new,similarity,service,index,settings,null,collections,empty,map,final,engine,warmer,warmer,searcher,cluster,settings,cluster,settings,new,cluster,settings,node,settings,cluster,settings,circuit,breaker,service,breaker,service,new,hierarchy,circuit,breaker,service,node,settings,cluster,settings,index,shard,new,index,shard,routing,index,settings,shard,path,store,null,index,cache,mapper,service,similarity,service,engine,factory,index,event,listener,index,searcher,wrapper,thread,pool,big,arrays,warmer,collections,empty,list,arrays,as,list,listeners,global,checkpoint,syncer,breaker,service,success,true,finally,if,success,false,ioutils,close,store,return,index,shard
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException;1527583663;creates a new initializing shard._@param routing                shard routing to use_@param shardPath              path to use for shard data_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param indexEventListener_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException {_        final Settings nodeSettings = Settings.builder().put("node.name", routing.currentNodeId()).build()__        final IndexSettings indexSettings = new IndexSettings(indexMetaData, nodeSettings)__        final IndexShard indexShard__        final Store store = createStore(indexSettings, shardPath)__        boolean success = false__        try {_            IndexCache indexCache = new IndexCache(indexSettings, new DisabledQueryCache(indexSettings), null)__            MapperService mapperService = MapperTestUtils.newMapperService(xContentRegistry(), createTempDir(),_                    indexSettings.getSettings(), "index")__            mapperService.merge(indexMetaData, MapperService.MergeReason.MAPPING_RECOVERY)__            SimilarityService similarityService = new SimilarityService(indexSettings, null, Collections.emptyMap())__            final Engine.Warmer warmer = searcher -> {_            }__            ClusterSettings clusterSettings = new ClusterSettings(nodeSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)__            CircuitBreakerService breakerService = new HierarchyCircuitBreakerService(nodeSettings, clusterSettings)__            indexShard = new IndexShard(routing, indexSettings, shardPath, store, () -> null, indexCache, mapperService, similarityService,_                engineFactory, indexEventListener, indexSearcherWrapper, threadPool,_                BigArrays.NON_RECYCLING_INSTANCE, warmer, Collections.emptyList(), Arrays.asList(listeners), globalCheckpointSyncer,_                breakerService)__            success = true__        } finally {_            if (success == false) {_                IOUtils.close(store)__            }_        }_        return indexShard__    };creates,a,new,initializing,shard,param,routing,shard,routing,to,use,param,shard,path,path,to,use,for,shard,data,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,index,event,listener,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,shard,path,shard,path,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,index,event,listener,index,event,listener,indexing,operation,listener,listeners,throws,ioexception,final,settings,node,settings,settings,builder,put,node,name,routing,current,node,id,build,final,index,settings,index,settings,new,index,settings,index,meta,data,node,settings,final,index,shard,index,shard,final,store,store,create,store,index,settings,shard,path,boolean,success,false,try,index,cache,index,cache,new,index,cache,index,settings,new,disabled,query,cache,index,settings,null,mapper,service,mapper,service,mapper,test,utils,new,mapper,service,x,content,registry,create,temp,dir,index,settings,get,settings,index,mapper,service,merge,index,meta,data,mapper,service,merge,reason,similarity,service,similarity,service,new,similarity,service,index,settings,null,collections,empty,map,final,engine,warmer,warmer,searcher,cluster,settings,cluster,settings,new,cluster,settings,node,settings,cluster,settings,circuit,breaker,service,breaker,service,new,hierarchy,circuit,breaker,service,node,settings,cluster,settings,index,shard,new,index,shard,routing,index,settings,shard,path,store,null,index,cache,mapper,service,similarity,service,engine,factory,index,event,listener,index,searcher,wrapper,thread,pool,big,arrays,warmer,collections,empty,list,arrays,as,list,listeners,global,checkpoint,syncer,breaker,service,success,true,finally,if,success,false,ioutils,close,store,return,index,shard
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException;1528706846;creates a new initializing shard._@param routing                shard routing to use_@param shardPath              path to use for shard data_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param indexEventListener_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException {_        final Settings nodeSettings = Settings.builder().put("node.name", routing.currentNodeId()).build()__        final IndexSettings indexSettings = new IndexSettings(indexMetaData, nodeSettings)__        final IndexShard indexShard__        final Store store = createStore(indexSettings, shardPath)__        boolean success = false__        try {_            IndexCache indexCache = new IndexCache(indexSettings, new DisabledQueryCache(indexSettings), null)__            MapperService mapperService = MapperTestUtils.newMapperService(xContentRegistry(), createTempDir(),_                    indexSettings.getSettings(), "index")__            mapperService.merge(indexMetaData, MapperService.MergeReason.MAPPING_RECOVERY)__            SimilarityService similarityService = new SimilarityService(indexSettings, null, Collections.emptyMap())__            final Engine.Warmer warmer = searcher -> {_            }__            ClusterSettings clusterSettings = new ClusterSettings(nodeSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)__            CircuitBreakerService breakerService = new HierarchyCircuitBreakerService(nodeSettings, clusterSettings)__            indexShard = new IndexShard(routing, indexSettings, shardPath, store, () -> null, indexCache, mapperService, similarityService,_                engineFactory, indexEventListener, indexSearcherWrapper, threadPool,_                BigArrays.NON_RECYCLING_INSTANCE, warmer, Collections.emptyList(), Arrays.asList(listeners), globalCheckpointSyncer,_                breakerService)__            success = true__        } finally {_            if (success == false) {_                IOUtils.close(store)__            }_        }_        return indexShard__    };creates,a,new,initializing,shard,param,routing,shard,routing,to,use,param,shard,path,path,to,use,for,shard,data,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,index,event,listener,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,shard,path,shard,path,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,index,event,listener,index,event,listener,indexing,operation,listener,listeners,throws,ioexception,final,settings,node,settings,settings,builder,put,node,name,routing,current,node,id,build,final,index,settings,index,settings,new,index,settings,index,meta,data,node,settings,final,index,shard,index,shard,final,store,store,create,store,index,settings,shard,path,boolean,success,false,try,index,cache,index,cache,new,index,cache,index,settings,new,disabled,query,cache,index,settings,null,mapper,service,mapper,service,mapper,test,utils,new,mapper,service,x,content,registry,create,temp,dir,index,settings,get,settings,index,mapper,service,merge,index,meta,data,mapper,service,merge,reason,similarity,service,similarity,service,new,similarity,service,index,settings,null,collections,empty,map,final,engine,warmer,warmer,searcher,cluster,settings,cluster,settings,new,cluster,settings,node,settings,cluster,settings,circuit,breaker,service,breaker,service,new,hierarchy,circuit,breaker,service,node,settings,cluster,settings,index,shard,new,index,shard,routing,index,settings,shard,path,store,null,index,cache,mapper,service,similarity,service,engine,factory,index,event,listener,index,searcher,wrapper,thread,pool,big,arrays,warmer,collections,empty,list,arrays,as,list,listeners,global,checkpoint,syncer,breaker,service,success,true,finally,if,success,false,ioutils,close,store,return,index,shard
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException;1531179852;creates a new initializing shard._@param routing                shard routing to use_@param shardPath              path to use for shard data_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param indexEventListener     index even listener_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException {_        final Settings nodeSettings = Settings.builder().put("node.name", routing.currentNodeId()).build()__        final IndexSettings indexSettings = new IndexSettings(indexMetaData, nodeSettings)__        final IndexShard indexShard__        final Store store = createStore(indexSettings, shardPath)__        boolean success = false__        try {_            IndexCache indexCache = new IndexCache(indexSettings, new DisabledQueryCache(indexSettings), null)__            MapperService mapperService = MapperTestUtils.newMapperService(xContentRegistry(), createTempDir(),_                    indexSettings.getSettings(), "index")__            mapperService.merge(indexMetaData, MapperService.MergeReason.MAPPING_RECOVERY)__            SimilarityService similarityService = new SimilarityService(indexSettings, null, Collections.emptyMap())__            final Engine.Warmer warmer = searcher -> {_            }__            ClusterSettings clusterSettings = new ClusterSettings(nodeSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)__            CircuitBreakerService breakerService = new HierarchyCircuitBreakerService(nodeSettings, clusterSettings)__            indexShard = new IndexShard(routing, indexSettings, shardPath, store, () -> null, indexCache, mapperService, similarityService,_                engineFactory, indexEventListener, indexSearcherWrapper, threadPool,_                BigArrays.NON_RECYCLING_INSTANCE, warmer, Collections.emptyList(), Arrays.asList(listeners), globalCheckpointSyncer,_                breakerService)__            success = true__        } finally {_            if (success == false) {_                IOUtils.close(store)__            }_        }_        return indexShard__    };creates,a,new,initializing,shard,param,routing,shard,routing,to,use,param,shard,path,path,to,use,for,shard,data,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,index,event,listener,index,even,listener,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,shard,path,shard,path,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,index,event,listener,index,event,listener,indexing,operation,listener,listeners,throws,ioexception,final,settings,node,settings,settings,builder,put,node,name,routing,current,node,id,build,final,index,settings,index,settings,new,index,settings,index,meta,data,node,settings,final,index,shard,index,shard,final,store,store,create,store,index,settings,shard,path,boolean,success,false,try,index,cache,index,cache,new,index,cache,index,settings,new,disabled,query,cache,index,settings,null,mapper,service,mapper,service,mapper,test,utils,new,mapper,service,x,content,registry,create,temp,dir,index,settings,get,settings,index,mapper,service,merge,index,meta,data,mapper,service,merge,reason,similarity,service,similarity,service,new,similarity,service,index,settings,null,collections,empty,map,final,engine,warmer,warmer,searcher,cluster,settings,cluster,settings,new,cluster,settings,node,settings,cluster,settings,circuit,breaker,service,breaker,service,new,hierarchy,circuit,breaker,service,node,settings,cluster,settings,index,shard,new,index,shard,routing,index,settings,shard,path,store,null,index,cache,mapper,service,similarity,service,engine,factory,index,event,listener,index,searcher,wrapper,thread,pool,big,arrays,warmer,collections,empty,list,arrays,as,list,listeners,global,checkpoint,syncer,breaker,service,success,true,finally,if,success,false,ioutils,close,store,return,index,shard
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException;1531910483;creates a new initializing shard._@param routing                shard routing to use_@param shardPath              path to use for shard data_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param indexEventListener     index even listener_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException {_        final Settings nodeSettings = Settings.builder().put("node.name", routing.currentNodeId()).build()__        final IndexSettings indexSettings = new IndexSettings(indexMetaData, nodeSettings)__        final IndexShard indexShard__        final Store store = createStore(indexSettings, shardPath)__        boolean success = false__        try {_            IndexCache indexCache = new IndexCache(indexSettings, new DisabledQueryCache(indexSettings), null)__            MapperService mapperService = MapperTestUtils.newMapperService(xContentRegistry(), createTempDir(),_                    indexSettings.getSettings(), "index")__            mapperService.merge(indexMetaData, MapperService.MergeReason.MAPPING_RECOVERY)__            SimilarityService similarityService = new SimilarityService(indexSettings, null, Collections.emptyMap())__            final Engine.Warmer warmer = searcher -> {_            }__            ClusterSettings clusterSettings = new ClusterSettings(nodeSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)__            CircuitBreakerService breakerService = new HierarchyCircuitBreakerService(nodeSettings, clusterSettings)__            indexShard = new IndexShard(routing, indexSettings, shardPath, store, () -> null, indexCache, mapperService, similarityService,_                engineFactory, indexEventListener, indexSearcherWrapper, threadPool,_                BigArrays.NON_RECYCLING_INSTANCE, warmer, Collections.emptyList(), Arrays.asList(listeners), globalCheckpointSyncer,_                breakerService)__            indexShard.addShardFailureCallback(DEFAULT_SHARD_FAILURE_HANDLER)__            success = true__        } finally {_            if (success == false) {_                IOUtils.close(store)__            }_        }_        return indexShard__    };creates,a,new,initializing,shard,param,routing,shard,routing,to,use,param,shard,path,path,to,use,for,shard,data,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,index,event,listener,index,even,listener,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,shard,path,shard,path,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,index,event,listener,index,event,listener,indexing,operation,listener,listeners,throws,ioexception,final,settings,node,settings,settings,builder,put,node,name,routing,current,node,id,build,final,index,settings,index,settings,new,index,settings,index,meta,data,node,settings,final,index,shard,index,shard,final,store,store,create,store,index,settings,shard,path,boolean,success,false,try,index,cache,index,cache,new,index,cache,index,settings,new,disabled,query,cache,index,settings,null,mapper,service,mapper,service,mapper,test,utils,new,mapper,service,x,content,registry,create,temp,dir,index,settings,get,settings,index,mapper,service,merge,index,meta,data,mapper,service,merge,reason,similarity,service,similarity,service,new,similarity,service,index,settings,null,collections,empty,map,final,engine,warmer,warmer,searcher,cluster,settings,cluster,settings,new,cluster,settings,node,settings,cluster,settings,circuit,breaker,service,breaker,service,new,hierarchy,circuit,breaker,service,node,settings,cluster,settings,index,shard,new,index,shard,routing,index,settings,shard,path,store,null,index,cache,mapper,service,similarity,service,engine,factory,index,event,listener,index,searcher,wrapper,thread,pool,big,arrays,warmer,collections,empty,list,arrays,as,list,listeners,global,checkpoint,syncer,breaker,service,index,shard,add,shard,failure,callback,success,true,finally,if,success,false,ioutils,close,store,return,index,shard
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException;1524684173;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException {_        final ShardRouting shardRouting = current.routingEntry()__        return reinitShard(current, ShardRoutingHelper.initWithSameId(shardRouting,_            shardRouting.primary() ? RecoverySource.StoreRecoverySource.EXISTING_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE_        ), listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,indexing,operation,listener,listeners,throws,ioexception,final,shard,routing,shard,routing,current,routing,entry,return,reinit,shard,current,shard,routing,helper,init,with,same,id,shard,routing,shard,routing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException;1525162917;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException {_        final ShardRouting shardRouting = current.routingEntry()__        return reinitShard(current, ShardRoutingHelper.initWithSameId(shardRouting,_            shardRouting.primary() ? RecoverySource.StoreRecoverySource.EXISTING_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE_        ), listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,indexing,operation,listener,listeners,throws,ioexception,final,shard,routing,shard,routing,current,routing,entry,return,reinit,shard,current,shard,routing,helper,init,with,same,id,shard,routing,shard,routing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException;1527583663;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException {_        final ShardRouting shardRouting = current.routingEntry()__        return reinitShard(current, ShardRoutingHelper.initWithSameId(shardRouting,_            shardRouting.primary() ? RecoverySource.StoreRecoverySource.EXISTING_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE_        ), listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,indexing,operation,listener,listeners,throws,ioexception,final,shard,routing,shard,routing,current,routing,entry,return,reinit,shard,current,shard,routing,helper,init,with,same,id,shard,routing,shard,routing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException;1528706846;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException {_        final ShardRouting shardRouting = current.routingEntry()__        return reinitShard(current, ShardRoutingHelper.initWithSameId(shardRouting,_            shardRouting.primary() ? RecoverySource.StoreRecoverySource.EXISTING_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE_        ), listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,indexing,operation,listener,listeners,throws,ioexception,final,shard,routing,shard,routing,current,routing,entry,return,reinit,shard,current,shard,routing,helper,init,with,same,id,shard,routing,shard,routing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException;1531179852;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException {_        final ShardRouting shardRouting = current.routingEntry()__        return reinitShard(current, ShardRoutingHelper.initWithSameId(shardRouting,_            shardRouting.primary() ? RecoverySource.StoreRecoverySource.EXISTING_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE_        ), listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,indexing,operation,listener,listeners,throws,ioexception,final,shard,routing,shard,routing,current,routing,entry,return,reinit,shard,current,shard,routing,helper,init,with,same,id,shard,routing,shard,routing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException;1531910483;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException {_        final ShardRouting shardRouting = current.routingEntry()__        return reinitShard(current, ShardRoutingHelper.initWithSameId(shardRouting,_            shardRouting.primary() ? RecoverySource.StoreRecoverySource.EXISTING_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE_        ), listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,indexing,operation,listener,listeners,throws,ioexception,final,shard,routing,shard,routing,current,routing,entry,return,reinit,shard,current,shard,routing,helper,init,with,same,id,shard,routing,shard,routing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException;1532434432;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException {_        final ShardRouting shardRouting = current.routingEntry()__        return reinitShard(current, ShardRoutingHelper.initWithSameId(shardRouting,_            shardRouting.primary() ? RecoverySource.StoreRecoverySource.EXISTING_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE_        ), listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,indexing,operation,listener,listeners,throws,ioexception,final,shard,routing,shard,routing,current,routing,entry,return,reinit,shard,current,shard,routing,helper,init,with,same,id,shard,routing,shard,routing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException;1533295538;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException {_        final ShardRouting shardRouting = current.routingEntry()__        return reinitShard(current, ShardRoutingHelper.initWithSameId(shardRouting,_            shardRouting.primary() ? RecoverySource.StoreRecoverySource.EXISTING_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE_        ), listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,indexing,operation,listener,listeners,throws,ioexception,final,shard,routing,shard,routing,current,routing,entry,return,reinit,shard,current,shard,routing,helper,init,with,same,id,shard,routing,shard,routing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException;1535723122;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException {_        final ShardRouting shardRouting = current.routingEntry()__        return reinitShard(current, ShardRoutingHelper.initWithSameId(shardRouting,_            shardRouting.primary() ? RecoverySource.StoreRecoverySource.EXISTING_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE_        ), listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,indexing,operation,listener,listeners,throws,ioexception,final,shard,routing,shard,routing,current,routing,entry,return,reinit,shard,current,shard,routing,helper,init,with,same,id,shard,routing,shard,routing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException;1535965276;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException {_        final ShardRouting shardRouting = current.routingEntry()__        return reinitShard(current, ShardRoutingHelper.initWithSameId(shardRouting,_            shardRouting.primary() ? RecoverySource.StoreRecoverySource.EXISTING_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE_        ), listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,indexing,operation,listener,listeners,throws,ioexception,final,shard,routing,shard,routing,current,routing,entry,return,reinit,shard,current,shard,routing,helper,init,with,same,id,shard,routing,shard,routing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException;1536611444;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException {_        final ShardRouting shardRouting = current.routingEntry()__        return reinitShard(current, ShardRoutingHelper.initWithSameId(shardRouting,_            shardRouting.primary() ? RecoverySource.ExistingStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE_        ), listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,indexing,operation,listener,listeners,throws,ioexception,final,shard,routing,shard,routing,current,routing,entry,return,reinit,shard,current,shard,routing,helper,init,with,same,id,shard,routing,shard,routing,primary,recovery,source,existing,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException;1536828374;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException {_        final ShardRouting shardRouting = current.routingEntry()__        return reinitShard(current, ShardRoutingHelper.initWithSameId(shardRouting,_            shardRouting.primary() ? RecoverySource.ExistingStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE_        ), listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,indexing,operation,listener,listeners,throws,ioexception,final,shard,routing,shard,routing,current,routing,entry,return,reinit,shard,current,shard,routing,helper,init,with,same,id,shard,routing,shard,routing,primary,recovery,source,existing,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException;1537371806;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException {_        final ShardRouting shardRouting = current.routingEntry()__        return reinitShard(current, ShardRoutingHelper.initWithSameId(shardRouting,_            shardRouting.primary() ? RecoverySource.ExistingStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE_        ), listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,indexing,operation,listener,listeners,throws,ioexception,final,shard,routing,shard,routing,current,routing,entry,return,reinit,shard,current,shard,routing,helper,init,with,same,id,shard,routing,shard,routing,primary,recovery,source,existing,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException;1537806831;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException {_        final ShardRouting shardRouting = current.routingEntry()__        return reinitShard(current, ShardRoutingHelper.initWithSameId(shardRouting,_            shardRouting.primary() ? RecoverySource.ExistingStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE_        ), listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,indexing,operation,listener,listeners,throws,ioexception,final,shard,routing,shard,routing,current,routing,entry,return,reinit,shard,current,shard,routing,helper,init,with,same,id,shard,routing,shard,routing,primary,recovery,source,existing,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException;1538067637;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException {_        final ShardRouting shardRouting = current.routingEntry()__        return reinitShard(current, ShardRoutingHelper.initWithSameId(shardRouting,_            shardRouting.primary() ? RecoverySource.ExistingStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE_        ), listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,indexing,operation,listener,listeners,throws,ioexception,final,shard,routing,shard,routing,current,routing,entry,return,reinit,shard,current,shard,routing,helper,init,with,same,id,shard,routing,shard,routing,primary,recovery,source,existing,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException;1542697404;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException {_        final ShardRouting shardRouting = current.routingEntry()__        return reinitShard(current, ShardRoutingHelper.initWithSameId(shardRouting,_            shardRouting.primary() ? RecoverySource.ExistingStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE_        ), listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,indexing,operation,listener,listeners,throws,ioexception,final,shard,routing,shard,routing,current,routing,entry,return,reinit,shard,current,shard,routing,helper,init,with,same,id,shard,routing,shard,routing,primary,recovery,source,existing,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException;1544783963;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException {_        final ShardRouting shardRouting = current.routingEntry()__        return reinitShard(current, ShardRoutingHelper.initWithSameId(shardRouting,_            shardRouting.primary() ? RecoverySource.ExistingStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE_        ), listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,indexing,operation,listener,listeners,throws,ioexception,final,shard,routing,shard,routing,current,routing,entry,return,reinit,shard,current,shard,routing,helper,init,with,same,id,shard,routing,shard,routing,primary,recovery,source,existing,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException;1544893197;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException {_        final ShardRouting shardRouting = current.routingEntry()__        return reinitShard(current, ShardRoutingHelper.initWithSameId(shardRouting,_            shardRouting.primary() ? RecoverySource.ExistingStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE_        ), listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,indexing,operation,listener,listeners,throws,ioexception,final,shard,routing,shard,routing,current,routing,entry,return,reinit,shard,current,shard,routing,helper,init,with,same,id,shard,routing,shard,routing,primary,recovery,source,existing,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException;1545678410;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException {_        final ShardRouting shardRouting = current.routingEntry()__        return reinitShard(current, ShardRoutingHelper.initWithSameId(shardRouting,_            shardRouting.primary() ? RecoverySource.ExistingStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE_        ), listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,indexing,operation,listener,listeners,throws,ioexception,final,shard,routing,shard,routing,current,routing,entry,return,reinit,shard,current,shard,routing,helper,init,with,same,id,shard,routing,shard,routing,primary,recovery,source,existing,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException;1546927432;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException {_        final ShardRouting shardRouting = current.routingEntry()__        return reinitShard(current, ShardRoutingHelper.initWithSameId(shardRouting,_            shardRouting.primary() ? RecoverySource.ExistingStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE_        ), listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,indexing,operation,listener,listeners,throws,ioexception,final,shard,routing,shard,routing,current,routing,entry,return,reinit,shard,current,shard,routing,helper,init,with,same,id,shard,routing,shard,routing,primary,recovery,source,existing,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException;1547315388;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException {_        final ShardRouting shardRouting = current.routingEntry()__        return reinitShard(current, ShardRoutingHelper.initWithSameId(shardRouting,_            shardRouting.primary() ? RecoverySource.ExistingStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE_        ), listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,indexing,operation,listener,listeners,throws,ioexception,final,shard,routing,shard,routing,current,routing,entry,return,reinit,shard,current,shard,routing,helper,init,with,same,id,shard,routing,shard,routing,primary,recovery,source,existing,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException;1547496475;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException {_        final ShardRouting shardRouting = current.routingEntry()__        return reinitShard(current, ShardRoutingHelper.initWithSameId(shardRouting,_            shardRouting.primary() ? RecoverySource.ExistingStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE_        ), listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,indexing,operation,listener,listeners,throws,ioexception,final,shard,routing,shard,routing,current,routing,entry,return,reinit,shard,current,shard,routing,helper,init,with,same,id,shard,routing,shard,routing,primary,recovery,source,existing,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException;1547496886;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException {_        final ShardRouting shardRouting = current.routingEntry()__        return reinitShard(current, ShardRoutingHelper.initWithSameId(shardRouting,_            shardRouting.primary() ? RecoverySource.ExistingStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE_        ), listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,indexing,operation,listener,listeners,throws,ioexception,final,shard,routing,shard,routing,current,routing,entry,return,reinit,shard,current,shard,routing,helper,init,with,same,id,shard,routing,shard,routing,primary,recovery,source,existing,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException;1547520324;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException {_        final ShardRouting shardRouting = current.routingEntry()__        return reinitShard(current, ShardRoutingHelper.initWithSameId(shardRouting,_            shardRouting.primary() ? RecoverySource.ExistingStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE_        ), listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,indexing,operation,listener,listeners,throws,ioexception,final,shard,routing,shard,routing,current,routing,entry,return,reinit,shard,current,shard,routing,helper,init,with,same,id,shard,routing,shard,routing,primary,recovery,source,existing,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException;1547552901;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException {_        final ShardRouting shardRouting = current.routingEntry()__        return reinitShard(current, ShardRoutingHelper.initWithSameId(shardRouting,_            shardRouting.primary() ? RecoverySource.ExistingStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE_        ), listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,indexing,operation,listener,listeners,throws,ioexception,final,shard,routing,shard,routing,current,routing,entry,return,reinit,shard,current,shard,routing,helper,init,with,same,id,shard,routing,shard,routing,primary,recovery,source,existing,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException;1548593396;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException {_        final ShardRouting shardRouting = current.routingEntry()__        return reinitShard(current, ShardRoutingHelper.initWithSameId(shardRouting,_            shardRouting.primary() ? RecoverySource.ExistingStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE_        ), listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,indexing,operation,listener,listeners,throws,ioexception,final,shard,routing,shard,routing,current,routing,entry,return,reinit,shard,current,shard,routing,helper,init,with,same,id,shard,routing,shard,routing,primary,recovery,source,existing,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException;1549294529;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException {_        final ShardRouting shardRouting = current.routingEntry()__        return reinitShard(current, ShardRoutingHelper.initWithSameId(shardRouting,_            shardRouting.primary() ? RecoverySource.ExistingStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE_        ), listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,indexing,operation,listener,listeners,throws,ioexception,final,shard,routing,shard,routing,current,routing,entry,return,reinit,shard,current,shard,routing,helper,init,with,same,id,shard,routing,shard,routing,primary,recovery,source,existing,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException;1550668107;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param listeners new listerns to use for the newly created shard;protected IndexShard reinitShard(IndexShard current, IndexingOperationListener... listeners) throws IOException {_        final ShardRouting shardRouting = current.routingEntry()__        return reinitShard(current, ShardRoutingHelper.initWithSameId(shardRouting,_            shardRouting.primary() ? RecoverySource.ExistingStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE_        ), listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,listeners,new,listerns,to,use,for,the,newly,created,shard;protected,index,shard,reinit,shard,index,shard,current,indexing,operation,listener,listeners,throws,ioexception,final,shard,routing,shard,routing,current,routing,entry,return,reinit,shard,current,shard,routing,helper,init,with,same,id,shard,routing,shard,routing,primary,recovery,source,existing,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,listeners
IndexShardTestCase -> protected IndexShard newShard(             final ShardRouting shardRouting,             final Settings settings,             final EngineFactory engineFactory,             final IndexingOperationListener... listeners) throws IOException;1535723122;Creates a new initializing shard. The shard will have its own unique data path.__@param shardRouting  the {@link ShardRouting} to use for this shard_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            final ShardRouting shardRouting,_            final Settings settings,_            final EngineFactory engineFactory,_            final IndexingOperationListener... listeners) throws IOException {_        assert shardRouting.initializing() : shardRouting__        Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), randomBoolean())_                .put(IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.getKey(),_                    randomBoolean() ? IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.get(Settings.EMPTY) : between(0, 1000))_                .put(settings)_                .build()__        IndexMetaData.Builder metaData = IndexMetaData.builder(shardRouting.getIndexName())_            .settings(indexSettings)_            .primaryTerm(0, primaryTerm)_            .putMapping("_doc", "{ \"properties\": {} }")__        return newShard(shardRouting, metaData.build(), engineFactory, listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,routing,the,link,shard,routing,to,use,for,this,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,final,shard,routing,shard,routing,final,settings,settings,final,engine,factory,engine,factory,final,indexing,operation,listener,listeners,throws,ioexception,assert,shard,routing,initializing,shard,routing,settings,index,settings,settings,builder,put,index,meta,data,version,current,put,index,meta,data,0,put,index,meta,data,1,put,index,settings,get,key,random,boolean,put,index,settings,get,key,random,boolean,index,settings,get,settings,empty,between,0,1000,put,settings,build,index,meta,data,builder,meta,data,index,meta,data,builder,shard,routing,get,index,name,settings,index,settings,primary,term,0,primary,term,put,mapping,properties,return,new,shard,shard,routing,meta,data,build,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             final ShardRouting shardRouting,             final Settings settings,             final EngineFactory engineFactory,             final IndexingOperationListener... listeners) throws IOException;1535965276;Creates a new initializing shard. The shard will have its own unique data path.__@param shardRouting  the {@link ShardRouting} to use for this shard_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            final ShardRouting shardRouting,_            final Settings settings,_            final EngineFactory engineFactory,_            final IndexingOperationListener... listeners) throws IOException {_        assert shardRouting.initializing() : shardRouting__        Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), randomBoolean())_                .put(IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.getKey(),_                    randomBoolean() ? IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.get(Settings.EMPTY) : between(0, 1000))_                .put(settings)_                .build()__        IndexMetaData.Builder metaData = IndexMetaData.builder(shardRouting.getIndexName())_            .settings(indexSettings)_            .primaryTerm(0, primaryTerm)_            .putMapping("_doc", "{ \"properties\": {} }")__        return newShard(shardRouting, metaData.build(), engineFactory, listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,routing,the,link,shard,routing,to,use,for,this,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,final,shard,routing,shard,routing,final,settings,settings,final,engine,factory,engine,factory,final,indexing,operation,listener,listeners,throws,ioexception,assert,shard,routing,initializing,shard,routing,settings,index,settings,settings,builder,put,index,meta,data,version,current,put,index,meta,data,0,put,index,meta,data,1,put,index,settings,get,key,random,boolean,put,index,settings,get,key,random,boolean,index,settings,get,settings,empty,between,0,1000,put,settings,build,index,meta,data,builder,meta,data,index,meta,data,builder,shard,routing,get,index,name,settings,index,settings,primary,term,0,primary,term,put,mapping,properties,return,new,shard,shard,routing,meta,data,build,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             final ShardRouting shardRouting,             final Settings settings,             final EngineFactory engineFactory,             final IndexingOperationListener... listeners) throws IOException;1536611444;Creates a new initializing shard. The shard will have its own unique data path.__@param shardRouting  the {@link ShardRouting} to use for this shard_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            final ShardRouting shardRouting,_            final Settings settings,_            final EngineFactory engineFactory,_            final IndexingOperationListener... listeners) throws IOException {_        assert shardRouting.initializing() : shardRouting__        Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), randomBoolean())_                .put(IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.getKey(),_                    randomBoolean() ? IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.get(Settings.EMPTY) : between(0, 1000))_                .put(settings)_                .build()__        IndexMetaData.Builder metaData = IndexMetaData.builder(shardRouting.getIndexName())_            .settings(indexSettings)_            .primaryTerm(0, primaryTerm)_            .putMapping("_doc", "{ \"properties\": {} }")__        return newShard(shardRouting, metaData.build(), engineFactory, listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,routing,the,link,shard,routing,to,use,for,this,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,final,shard,routing,shard,routing,final,settings,settings,final,engine,factory,engine,factory,final,indexing,operation,listener,listeners,throws,ioexception,assert,shard,routing,initializing,shard,routing,settings,index,settings,settings,builder,put,index,meta,data,version,current,put,index,meta,data,0,put,index,meta,data,1,put,index,settings,get,key,random,boolean,put,index,settings,get,key,random,boolean,index,settings,get,settings,empty,between,0,1000,put,settings,build,index,meta,data,builder,meta,data,index,meta,data,builder,shard,routing,get,index,name,settings,index,settings,primary,term,0,primary,term,put,mapping,properties,return,new,shard,shard,routing,meta,data,build,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             final ShardRouting shardRouting,             final Settings settings,             final EngineFactory engineFactory,             final IndexingOperationListener... listeners) throws IOException;1536828374;Creates a new initializing shard. The shard will have its own unique data path.__@param shardRouting  the {@link ShardRouting} to use for this shard_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            final ShardRouting shardRouting,_            final Settings settings,_            final EngineFactory engineFactory,_            final IndexingOperationListener... listeners) throws IOException {_        assert shardRouting.initializing() : shardRouting__        Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), randomBoolean())_                .put(IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.getKey(),_                    randomBoolean() ? IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.get(Settings.EMPTY) : between(0, 1000))_                .put(settings)_                .build()__        IndexMetaData.Builder metaData = IndexMetaData.builder(shardRouting.getIndexName())_            .settings(indexSettings)_            .primaryTerm(0, primaryTerm)_            .putMapping("_doc", "{ \"properties\": {} }")__        return newShard(shardRouting, metaData.build(), engineFactory, listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,routing,the,link,shard,routing,to,use,for,this,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,final,shard,routing,shard,routing,final,settings,settings,final,engine,factory,engine,factory,final,indexing,operation,listener,listeners,throws,ioexception,assert,shard,routing,initializing,shard,routing,settings,index,settings,settings,builder,put,index,meta,data,version,current,put,index,meta,data,0,put,index,meta,data,1,put,index,settings,get,key,random,boolean,put,index,settings,get,key,random,boolean,index,settings,get,settings,empty,between,0,1000,put,settings,build,index,meta,data,builder,meta,data,index,meta,data,builder,shard,routing,get,index,name,settings,index,settings,primary,term,0,primary,term,put,mapping,properties,return,new,shard,shard,routing,meta,data,build,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             final ShardRouting shardRouting,             final Settings settings,             final EngineFactory engineFactory,             final IndexingOperationListener... listeners) throws IOException;1537371806;Creates a new initializing shard. The shard will have its own unique data path.__@param shardRouting  the {@link ShardRouting} to use for this shard_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            final ShardRouting shardRouting,_            final Settings settings,_            final EngineFactory engineFactory,_            final IndexingOperationListener... listeners) throws IOException {_        assert shardRouting.initializing() : shardRouting__        Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), randomBoolean())_                .put(IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.getKey(),_                    randomBoolean() ? IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.get(Settings.EMPTY) : between(0, 1000))_                .put(settings)_                .build()__        IndexMetaData.Builder metaData = IndexMetaData.builder(shardRouting.getIndexName())_            .settings(indexSettings)_            .primaryTerm(0, primaryTerm)_            .putMapping("_doc", "{ \"properties\": {} }")__        return newShard(shardRouting, metaData.build(), null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,routing,the,link,shard,routing,to,use,for,this,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,final,shard,routing,shard,routing,final,settings,settings,final,engine,factory,engine,factory,final,indexing,operation,listener,listeners,throws,ioexception,assert,shard,routing,initializing,shard,routing,settings,index,settings,settings,builder,put,index,meta,data,version,current,put,index,meta,data,0,put,index,meta,data,1,put,index,settings,get,key,random,boolean,put,index,settings,get,key,random,boolean,index,settings,get,settings,empty,between,0,1000,put,settings,build,index,meta,data,builder,meta,data,index,meta,data,builder,shard,routing,get,index,name,settings,index,settings,primary,term,0,primary,term,put,mapping,properties,return,new,shard,shard,routing,meta,data,build,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             final ShardRouting shardRouting,             final Settings settings,             final EngineFactory engineFactory,             final IndexingOperationListener... listeners) throws IOException;1537806831;Creates a new initializing shard. The shard will have its own unique data path.__@param shardRouting  the {@link ShardRouting} to use for this shard_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            final ShardRouting shardRouting,_            final Settings settings,_            final EngineFactory engineFactory,_            final IndexingOperationListener... listeners) throws IOException {_        assert shardRouting.initializing() : shardRouting__        Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), randomBoolean())_                .put(IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.getKey(),_                    randomBoolean() ? IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.get(Settings.EMPTY) : between(0, 1000))_                .put(settings)_                .build()__        IndexMetaData.Builder metaData = IndexMetaData.builder(shardRouting.getIndexName())_            .settings(indexSettings)_            .primaryTerm(0, primaryTerm)_            .putMapping("_doc", "{ \"properties\": {} }")__        return newShard(shardRouting, metaData.build(), null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,routing,the,link,shard,routing,to,use,for,this,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,final,shard,routing,shard,routing,final,settings,settings,final,engine,factory,engine,factory,final,indexing,operation,listener,listeners,throws,ioexception,assert,shard,routing,initializing,shard,routing,settings,index,settings,settings,builder,put,index,meta,data,version,current,put,index,meta,data,0,put,index,meta,data,1,put,index,settings,get,key,random,boolean,put,index,settings,get,key,random,boolean,index,settings,get,settings,empty,between,0,1000,put,settings,build,index,meta,data,builder,meta,data,index,meta,data,builder,shard,routing,get,index,name,settings,index,settings,primary,term,0,primary,term,put,mapping,properties,return,new,shard,shard,routing,meta,data,build,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             final ShardRouting shardRouting,             final Settings settings,             final EngineFactory engineFactory,             final IndexingOperationListener... listeners) throws IOException;1538067637;Creates a new initializing shard. The shard will have its own unique data path.__@param shardRouting  the {@link ShardRouting} to use for this shard_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            final ShardRouting shardRouting,_            final Settings settings,_            final EngineFactory engineFactory,_            final IndexingOperationListener... listeners) throws IOException {_        assert shardRouting.initializing() : shardRouting__        Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), randomBoolean())_                .put(IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.getKey(),_                    randomBoolean() ? IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.get(Settings.EMPTY) : between(0, 1000))_                .put(settings)_                .build()__        IndexMetaData.Builder metaData = IndexMetaData.builder(shardRouting.getIndexName())_            .settings(indexSettings)_            .primaryTerm(0, primaryTerm)_            .putMapping("_doc", "{ \"properties\": {} }")__        return newShard(shardRouting, metaData.build(), null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,routing,the,link,shard,routing,to,use,for,this,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,final,shard,routing,shard,routing,final,settings,settings,final,engine,factory,engine,factory,final,indexing,operation,listener,listeners,throws,ioexception,assert,shard,routing,initializing,shard,routing,settings,index,settings,settings,builder,put,index,meta,data,version,current,put,index,meta,data,0,put,index,meta,data,1,put,index,settings,get,key,random,boolean,put,index,settings,get,key,random,boolean,index,settings,get,settings,empty,between,0,1000,put,settings,build,index,meta,data,builder,meta,data,index,meta,data,builder,shard,routing,get,index,name,settings,index,settings,primary,term,0,primary,term,put,mapping,properties,return,new,shard,shard,routing,meta,data,build,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             final ShardRouting shardRouting,             final Settings settings,             final EngineFactory engineFactory,             final IndexingOperationListener... listeners) throws IOException;1542697404;Creates a new initializing shard. The shard will have its own unique data path.__@param shardRouting  the {@link ShardRouting} to use for this shard_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            final ShardRouting shardRouting,_            final Settings settings,_            final EngineFactory engineFactory,_            final IndexingOperationListener... listeners) throws IOException {_        assert shardRouting.initializing() : shardRouting__        Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), randomBoolean())_                .put(IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.getKey(),_                    randomBoolean() ? IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.get(Settings.EMPTY) : between(0, 1000))_                .put(settings)_                .build()__        IndexMetaData.Builder metaData = IndexMetaData.builder(shardRouting.getIndexName())_            .settings(indexSettings)_            .primaryTerm(0, primaryTerm)_            .putMapping("_doc", "{ \"properties\": {} }")__        return newShard(shardRouting, metaData.build(), null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,routing,the,link,shard,routing,to,use,for,this,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,final,shard,routing,shard,routing,final,settings,settings,final,engine,factory,engine,factory,final,indexing,operation,listener,listeners,throws,ioexception,assert,shard,routing,initializing,shard,routing,settings,index,settings,settings,builder,put,index,meta,data,version,current,put,index,meta,data,0,put,index,meta,data,1,put,index,settings,get,key,random,boolean,put,index,settings,get,key,random,boolean,index,settings,get,settings,empty,between,0,1000,put,settings,build,index,meta,data,builder,meta,data,index,meta,data,builder,shard,routing,get,index,name,settings,index,settings,primary,term,0,primary,term,put,mapping,properties,return,new,shard,shard,routing,meta,data,build,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             final ShardRouting shardRouting,             final Settings settings,             final EngineFactory engineFactory,             final IndexingOperationListener... listeners) throws IOException;1544783963;Creates a new initializing shard. The shard will have its own unique data path.__@param shardRouting  the {@link ShardRouting} to use for this shard_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            final ShardRouting shardRouting,_            final Settings settings,_            final EngineFactory engineFactory,_            final IndexingOperationListener... listeners) throws IOException {_        assert shardRouting.initializing() : shardRouting__        Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), randomBoolean())_                .put(IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.getKey(),_                    randomBoolean() ? IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.get(Settings.EMPTY) : between(0, 1000))_                .put(settings)_                .build()__        IndexMetaData.Builder metaData = IndexMetaData.builder(shardRouting.getIndexName())_            .settings(indexSettings)_            .primaryTerm(0, primaryTerm)_            .putMapping("_doc", "{ \"properties\": {} }")__        return newShard(shardRouting, metaData.build(), null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,routing,the,link,shard,routing,to,use,for,this,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,final,shard,routing,shard,routing,final,settings,settings,final,engine,factory,engine,factory,final,indexing,operation,listener,listeners,throws,ioexception,assert,shard,routing,initializing,shard,routing,settings,index,settings,settings,builder,put,index,meta,data,version,current,put,index,meta,data,0,put,index,meta,data,1,put,index,settings,get,key,random,boolean,put,index,settings,get,key,random,boolean,index,settings,get,settings,empty,between,0,1000,put,settings,build,index,meta,data,builder,meta,data,index,meta,data,builder,shard,routing,get,index,name,settings,index,settings,primary,term,0,primary,term,put,mapping,properties,return,new,shard,shard,routing,meta,data,build,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             final ShardRouting shardRouting,             final Settings settings,             final EngineFactory engineFactory,             final IndexingOperationListener... listeners) throws IOException;1544893197;Creates a new initializing shard. The shard will have its own unique data path.__@param shardRouting  the {@link ShardRouting} to use for this shard_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            final ShardRouting shardRouting,_            final Settings settings,_            final EngineFactory engineFactory,_            final IndexingOperationListener... listeners) throws IOException {_        assert shardRouting.initializing() : shardRouting__        Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), randomBoolean())_                .put(IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.getKey(),_                    randomBoolean() ? IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.get(Settings.EMPTY) : between(0, 1000))_                .put(settings)_                .build()__        IndexMetaData.Builder metaData = IndexMetaData.builder(shardRouting.getIndexName())_            .settings(indexSettings)_            .primaryTerm(0, primaryTerm)_            .putMapping("_doc", "{ \"properties\": {} }")__        return newShard(shardRouting, metaData.build(), null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,routing,the,link,shard,routing,to,use,for,this,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,final,shard,routing,shard,routing,final,settings,settings,final,engine,factory,engine,factory,final,indexing,operation,listener,listeners,throws,ioexception,assert,shard,routing,initializing,shard,routing,settings,index,settings,settings,builder,put,index,meta,data,version,current,put,index,meta,data,0,put,index,meta,data,1,put,index,settings,get,key,random,boolean,put,index,settings,get,key,random,boolean,index,settings,get,settings,empty,between,0,1000,put,settings,build,index,meta,data,builder,meta,data,index,meta,data,builder,shard,routing,get,index,name,settings,index,settings,primary,term,0,primary,term,put,mapping,properties,return,new,shard,shard,routing,meta,data,build,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             final ShardRouting shardRouting,             final Settings settings,             final EngineFactory engineFactory,             final IndexingOperationListener... listeners) throws IOException;1545678410;Creates a new initializing shard. The shard will have its own unique data path.__@param shardRouting  the {@link ShardRouting} to use for this shard_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            final ShardRouting shardRouting,_            final Settings settings,_            final EngineFactory engineFactory,_            final IndexingOperationListener... listeners) throws IOException {_        assert shardRouting.initializing() : shardRouting__        Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), randomBoolean())_                .put(IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.getKey(),_                    randomBoolean() ? IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.get(Settings.EMPTY) : between(0, 1000))_                .put(settings)_                .build()__        IndexMetaData.Builder metaData = IndexMetaData.builder(shardRouting.getIndexName())_            .settings(indexSettings)_            .primaryTerm(0, primaryTerm)_            .putMapping("_doc", "{ \"properties\": {} }")__        return newShard(shardRouting, metaData.build(), null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,routing,the,link,shard,routing,to,use,for,this,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,final,shard,routing,shard,routing,final,settings,settings,final,engine,factory,engine,factory,final,indexing,operation,listener,listeners,throws,ioexception,assert,shard,routing,initializing,shard,routing,settings,index,settings,settings,builder,put,index,meta,data,version,current,put,index,meta,data,0,put,index,meta,data,1,put,index,settings,get,key,random,boolean,put,index,settings,get,key,random,boolean,index,settings,get,settings,empty,between,0,1000,put,settings,build,index,meta,data,builder,meta,data,index,meta,data,builder,shard,routing,get,index,name,settings,index,settings,primary,term,0,primary,term,put,mapping,properties,return,new,shard,shard,routing,meta,data,build,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             final ShardRouting shardRouting,             final Settings settings,             final EngineFactory engineFactory,             final IndexingOperationListener... listeners) throws IOException;1546927432;Creates a new initializing shard. The shard will have its own unique data path.__@param shardRouting  the {@link ShardRouting} to use for this shard_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            final ShardRouting shardRouting,_            final Settings settings,_            final EngineFactory engineFactory,_            final IndexingOperationListener... listeners) throws IOException {_        assert shardRouting.initializing() : shardRouting__        Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), randomBoolean())_                .put(IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.getKey(),_                    randomBoolean() ? IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.get(Settings.EMPTY) : between(0, 1000))_                .put(settings)_                .build()__        IndexMetaData.Builder metaData = IndexMetaData.builder(shardRouting.getIndexName())_            .settings(indexSettings)_            .primaryTerm(0, primaryTerm)_            .putMapping("_doc", "{ \"properties\": {} }")__        return newShard(shardRouting, metaData.build(), null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,routing,the,link,shard,routing,to,use,for,this,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,final,shard,routing,shard,routing,final,settings,settings,final,engine,factory,engine,factory,final,indexing,operation,listener,listeners,throws,ioexception,assert,shard,routing,initializing,shard,routing,settings,index,settings,settings,builder,put,index,meta,data,version,current,put,index,meta,data,0,put,index,meta,data,1,put,index,settings,get,key,random,boolean,put,index,settings,get,key,random,boolean,index,settings,get,settings,empty,between,0,1000,put,settings,build,index,meta,data,builder,meta,data,index,meta,data,builder,shard,routing,get,index,name,settings,index,settings,primary,term,0,primary,term,put,mapping,properties,return,new,shard,shard,routing,meta,data,build,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             final ShardRouting shardRouting,             final Settings settings,             final EngineFactory engineFactory,             final IndexingOperationListener... listeners) throws IOException;1547315388;Creates a new initializing shard. The shard will have its own unique data path.__@param shardRouting  the {@link ShardRouting} to use for this shard_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            final ShardRouting shardRouting,_            final Settings settings,_            final EngineFactory engineFactory,_            final IndexingOperationListener... listeners) throws IOException {_        assert shardRouting.initializing() : shardRouting__        Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), randomBoolean())_                .put(IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.getKey(),_                    randomBoolean() ? IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.get(Settings.EMPTY) : between(0, 1000))_                .put(settings)_                .build()__        IndexMetaData.Builder metaData = IndexMetaData.builder(shardRouting.getIndexName())_            .settings(indexSettings)_            .primaryTerm(0, primaryTerm)_            .putMapping("_doc", "{ \"properties\": {} }")__        return newShard(shardRouting, metaData.build(), null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,routing,the,link,shard,routing,to,use,for,this,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,final,shard,routing,shard,routing,final,settings,settings,final,engine,factory,engine,factory,final,indexing,operation,listener,listeners,throws,ioexception,assert,shard,routing,initializing,shard,routing,settings,index,settings,settings,builder,put,index,meta,data,version,current,put,index,meta,data,0,put,index,meta,data,1,put,index,settings,get,key,random,boolean,put,index,settings,get,key,random,boolean,index,settings,get,settings,empty,between,0,1000,put,settings,build,index,meta,data,builder,meta,data,index,meta,data,builder,shard,routing,get,index,name,settings,index,settings,primary,term,0,primary,term,put,mapping,properties,return,new,shard,shard,routing,meta,data,build,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             final ShardRouting shardRouting,             final Settings settings,             final EngineFactory engineFactory,             final IndexingOperationListener... listeners) throws IOException;1547496475;Creates a new initializing shard. The shard will have its own unique data path.__@param shardRouting  the {@link ShardRouting} to use for this shard_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            final ShardRouting shardRouting,_            final Settings settings,_            final EngineFactory engineFactory,_            final IndexingOperationListener... listeners) throws IOException {_        assert shardRouting.initializing() : shardRouting__        Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), randomBoolean())_                .put(IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.getKey(),_                    randomBoolean() ? IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.get(Settings.EMPTY) : between(0, 1000))_                .put(settings)_                .build()__        IndexMetaData.Builder metaData = IndexMetaData.builder(shardRouting.getIndexName())_            .settings(indexSettings)_            .primaryTerm(0, primaryTerm)_            .putMapping("_doc", "{ \"properties\": {} }")__        return newShard(shardRouting, metaData.build(), null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,routing,the,link,shard,routing,to,use,for,this,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,final,shard,routing,shard,routing,final,settings,settings,final,engine,factory,engine,factory,final,indexing,operation,listener,listeners,throws,ioexception,assert,shard,routing,initializing,shard,routing,settings,index,settings,settings,builder,put,index,meta,data,version,current,put,index,meta,data,0,put,index,meta,data,1,put,index,settings,get,key,random,boolean,put,index,settings,get,key,random,boolean,index,settings,get,settings,empty,between,0,1000,put,settings,build,index,meta,data,builder,meta,data,index,meta,data,builder,shard,routing,get,index,name,settings,index,settings,primary,term,0,primary,term,put,mapping,properties,return,new,shard,shard,routing,meta,data,build,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             final ShardRouting shardRouting,             final Settings settings,             final EngineFactory engineFactory,             final IndexingOperationListener... listeners) throws IOException;1547496886;Creates a new initializing shard. The shard will have its own unique data path.__@param shardRouting  the {@link ShardRouting} to use for this shard_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            final ShardRouting shardRouting,_            final Settings settings,_            final EngineFactory engineFactory,_            final IndexingOperationListener... listeners) throws IOException {_        assert shardRouting.initializing() : shardRouting__        Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), randomBoolean())_                .put(IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.getKey(),_                    randomBoolean() ? IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.get(Settings.EMPTY) : between(0, 1000))_                .put(settings)_                .build()__        IndexMetaData.Builder metaData = IndexMetaData.builder(shardRouting.getIndexName())_            .settings(indexSettings)_            .primaryTerm(0, primaryTerm)_            .putMapping("_doc", "{ \"properties\": {} }")__        return newShard(shardRouting, metaData.build(), null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,routing,the,link,shard,routing,to,use,for,this,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,final,shard,routing,shard,routing,final,settings,settings,final,engine,factory,engine,factory,final,indexing,operation,listener,listeners,throws,ioexception,assert,shard,routing,initializing,shard,routing,settings,index,settings,settings,builder,put,index,meta,data,version,current,put,index,meta,data,0,put,index,meta,data,1,put,index,settings,get,key,random,boolean,put,index,settings,get,key,random,boolean,index,settings,get,settings,empty,between,0,1000,put,settings,build,index,meta,data,builder,meta,data,index,meta,data,builder,shard,routing,get,index,name,settings,index,settings,primary,term,0,primary,term,put,mapping,properties,return,new,shard,shard,routing,meta,data,build,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             final ShardRouting shardRouting,             final Settings settings,             final EngineFactory engineFactory,             final IndexingOperationListener... listeners) throws IOException;1547520324;Creates a new initializing shard. The shard will have its own unique data path.__@param shardRouting  the {@link ShardRouting} to use for this shard_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            final ShardRouting shardRouting,_            final Settings settings,_            final EngineFactory engineFactory,_            final IndexingOperationListener... listeners) throws IOException {_        assert shardRouting.initializing() : shardRouting__        Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), randomBoolean())_                .put(IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.getKey(),_                    randomBoolean() ? IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.get(Settings.EMPTY) : between(0, 1000))_                .put(settings)_                .build()__        IndexMetaData.Builder metaData = IndexMetaData.builder(shardRouting.getIndexName())_            .settings(indexSettings)_            .primaryTerm(0, primaryTerm)_            .putMapping("_doc", "{ \"properties\": {} }")__        return newShard(shardRouting, metaData.build(), null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,routing,the,link,shard,routing,to,use,for,this,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,final,shard,routing,shard,routing,final,settings,settings,final,engine,factory,engine,factory,final,indexing,operation,listener,listeners,throws,ioexception,assert,shard,routing,initializing,shard,routing,settings,index,settings,settings,builder,put,index,meta,data,version,current,put,index,meta,data,0,put,index,meta,data,1,put,index,settings,get,key,random,boolean,put,index,settings,get,key,random,boolean,index,settings,get,settings,empty,between,0,1000,put,settings,build,index,meta,data,builder,meta,data,index,meta,data,builder,shard,routing,get,index,name,settings,index,settings,primary,term,0,primary,term,put,mapping,properties,return,new,shard,shard,routing,meta,data,build,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             final ShardRouting shardRouting,             final Settings settings,             final EngineFactory engineFactory,             final IndexingOperationListener... listeners) throws IOException;1547552901;Creates a new initializing shard. The shard will have its own unique data path.__@param shardRouting  the {@link ShardRouting} to use for this shard_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            final ShardRouting shardRouting,_            final Settings settings,_            final EngineFactory engineFactory,_            final IndexingOperationListener... listeners) throws IOException {_        assert shardRouting.initializing() : shardRouting__        Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), randomBoolean())_                .put(IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.getKey(),_                    randomBoolean() ? IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.get(Settings.EMPTY) : between(0, 1000))_                .put(settings)_                .build()__        IndexMetaData.Builder metaData = IndexMetaData.builder(shardRouting.getIndexName())_            .settings(indexSettings)_            .primaryTerm(0, primaryTerm)_            .putMapping("_doc", "{ \"properties\": {} }")__        return newShard(shardRouting, metaData.build(), null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,routing,the,link,shard,routing,to,use,for,this,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,final,shard,routing,shard,routing,final,settings,settings,final,engine,factory,engine,factory,final,indexing,operation,listener,listeners,throws,ioexception,assert,shard,routing,initializing,shard,routing,settings,index,settings,settings,builder,put,index,meta,data,version,current,put,index,meta,data,0,put,index,meta,data,1,put,index,settings,get,key,random,boolean,put,index,settings,get,key,random,boolean,index,settings,get,settings,empty,between,0,1000,put,settings,build,index,meta,data,builder,meta,data,index,meta,data,builder,shard,routing,get,index,name,settings,index,settings,primary,term,0,primary,term,put,mapping,properties,return,new,shard,shard,routing,meta,data,build,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             final ShardRouting shardRouting,             final Settings settings,             final EngineFactory engineFactory,             final IndexingOperationListener... listeners) throws IOException;1548593396;Creates a new initializing shard. The shard will have its own unique data path.__@param shardRouting  the {@link ShardRouting} to use for this shard_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            final ShardRouting shardRouting,_            final Settings settings,_            final EngineFactory engineFactory,_            final IndexingOperationListener... listeners) throws IOException {_        assert shardRouting.initializing() : shardRouting__        Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), randomBoolean())_                .put(IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.getKey(),_                    randomBoolean() ? IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.get(Settings.EMPTY) : between(0, 1000))_                .put(settings)_                .build()__        IndexMetaData.Builder metaData = IndexMetaData.builder(shardRouting.getIndexName())_            .settings(indexSettings)_            .primaryTerm(0, primaryTerm)_            .putMapping("_doc", "{ \"properties\": {} }")__        return newShard(shardRouting, metaData.build(), null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,routing,the,link,shard,routing,to,use,for,this,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,final,shard,routing,shard,routing,final,settings,settings,final,engine,factory,engine,factory,final,indexing,operation,listener,listeners,throws,ioexception,assert,shard,routing,initializing,shard,routing,settings,index,settings,settings,builder,put,index,meta,data,version,current,put,index,meta,data,0,put,index,meta,data,1,put,index,settings,get,key,random,boolean,put,index,settings,get,key,random,boolean,index,settings,get,settings,empty,between,0,1000,put,settings,build,index,meta,data,builder,meta,data,index,meta,data,builder,shard,routing,get,index,name,settings,index,settings,primary,term,0,primary,term,put,mapping,properties,return,new,shard,shard,routing,meta,data,build,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             final ShardRouting shardRouting,             final Settings settings,             final EngineFactory engineFactory,             final IndexingOperationListener... listeners) throws IOException;1549294529;Creates a new initializing shard. The shard will have its own unique data path.__@param shardRouting  the {@link ShardRouting} to use for this shard_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            final ShardRouting shardRouting,_            final Settings settings,_            final EngineFactory engineFactory,_            final IndexingOperationListener... listeners) throws IOException {_        assert shardRouting.initializing() : shardRouting__        Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), randomBoolean())_                .put(IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.getKey(),_                    randomBoolean() ? IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.get(Settings.EMPTY) : between(0, 1000))_                .put(settings)_                .build()__        IndexMetaData.Builder metaData = IndexMetaData.builder(shardRouting.getIndexName())_            .settings(indexSettings)_            .primaryTerm(0, primaryTerm)_            .putMapping("_doc", "{ \"properties\": {} }")__        return newShard(shardRouting, metaData.build(), null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,routing,the,link,shard,routing,to,use,for,this,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,final,shard,routing,shard,routing,final,settings,settings,final,engine,factory,engine,factory,final,indexing,operation,listener,listeners,throws,ioexception,assert,shard,routing,initializing,shard,routing,settings,index,settings,settings,builder,put,index,meta,data,version,current,put,index,meta,data,0,put,index,meta,data,1,put,index,settings,get,key,random,boolean,put,index,settings,get,key,random,boolean,index,settings,get,settings,empty,between,0,1000,put,settings,build,index,meta,data,builder,meta,data,index,meta,data,builder,shard,routing,get,index,name,settings,index,settings,primary,term,0,primary,term,put,mapping,properties,return,new,shard,shard,routing,meta,data,build,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             final ShardRouting shardRouting,             final Settings settings,             final EngineFactory engineFactory,             final IndexingOperationListener... listeners) throws IOException;1550668107;Creates a new initializing shard. The shard will have its own unique data path.__@param shardRouting  the {@link ShardRouting} to use for this shard_@param settings      the settings to use for this shard_@param engineFactory the engine factory to use for this shard_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            final ShardRouting shardRouting,_            final Settings settings,_            final EngineFactory engineFactory,_            final IndexingOperationListener... listeners) throws IOException {_        assert shardRouting.initializing() : shardRouting__        Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), randomBoolean())_                .put(IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.getKey(),_                    randomBoolean() ? IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.get(Settings.EMPTY) : between(0, 1000))_                .put(settings)_                .build()__        IndexMetaData.Builder metaData = IndexMetaData.builder(shardRouting.getIndexName())_            .settings(indexSettings)_            .primaryTerm(0, primaryTerm)_            .putMapping("_doc", "{ \"properties\": {} }")__        return newShard(shardRouting, metaData.build(), null, engineFactory, () -> {}, RetentionLeaseSyncer.EMPTY, listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,routing,the,link,shard,routing,to,use,for,this,shard,param,settings,the,settings,to,use,for,this,shard,param,engine,factory,the,engine,factory,to,use,for,this,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,final,shard,routing,shard,routing,final,settings,settings,final,engine,factory,engine,factory,final,indexing,operation,listener,listeners,throws,ioexception,assert,shard,routing,initializing,shard,routing,settings,index,settings,settings,builder,put,index,meta,data,version,current,put,index,meta,data,0,put,index,meta,data,1,put,index,settings,get,key,random,boolean,put,index,settings,get,key,random,boolean,index,settings,get,settings,empty,between,0,1000,put,settings,build,index,meta,data,builder,meta,data,index,meta,data,builder,shard,routing,get,index,name,settings,index,settings,primary,term,0,primary,term,put,mapping,properties,return,new,shard,shard,routing,meta,data,build,null,engine,factory,retention,lease,syncer,empty,listeners
IndexShardTestCase -> protected void recoverReplica(final IndexShard replica,                                   final IndexShard primary,                                   final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                   final boolean markAsRecovering) throws IOException;1524684173;recovers a replica from the given primary *;protected void recoverReplica(final IndexShard replica,_                                  final IndexShard primary,_                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                  final boolean markAsRecovering) throws IOException {_        IndexShardRoutingTable.Builder newRoutingTable = new IndexShardRoutingTable.Builder(replica.shardId())__        newRoutingTable.addShard(primary.routingEntry())__        if (replica.routingEntry().isRelocationTarget() == false) {_            newRoutingTable.addShard(replica.routingEntry())__        }_        recoverReplica(replica, primary, targetSupplier, markAsRecovering,_            Collections.singleton(primary.routingEntry().allocationId().getId()),_            newRoutingTable.build())__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,throws,ioexception,index,shard,routing,table,builder,new,routing,table,new,index,shard,routing,table,builder,replica,shard,id,new,routing,table,add,shard,primary,routing,entry,if,replica,routing,entry,is,relocation,target,false,new,routing,table,add,shard,replica,routing,entry,recover,replica,replica,primary,target,supplier,mark,as,recovering,collections,singleton,primary,routing,entry,allocation,id,get,id,new,routing,table,build
IndexShardTestCase -> protected void recoverReplica(final IndexShard replica,                                   final IndexShard primary,                                   final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                   final boolean markAsRecovering) throws IOException;1525162917;recovers a replica from the given primary *;protected void recoverReplica(final IndexShard replica,_                                  final IndexShard primary,_                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                  final boolean markAsRecovering) throws IOException {_        IndexShardRoutingTable.Builder newRoutingTable = new IndexShardRoutingTable.Builder(replica.shardId())__        newRoutingTable.addShard(primary.routingEntry())__        if (replica.routingEntry().isRelocationTarget() == false) {_            newRoutingTable.addShard(replica.routingEntry())__        }_        recoverReplica(replica, primary, targetSupplier, markAsRecovering,_            Collections.singleton(primary.routingEntry().allocationId().getId()),_            newRoutingTable.build())__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,throws,ioexception,index,shard,routing,table,builder,new,routing,table,new,index,shard,routing,table,builder,replica,shard,id,new,routing,table,add,shard,primary,routing,entry,if,replica,routing,entry,is,relocation,target,false,new,routing,table,add,shard,replica,routing,entry,recover,replica,replica,primary,target,supplier,mark,as,recovering,collections,singleton,primary,routing,entry,allocation,id,get,id,new,routing,table,build
IndexShardTestCase -> protected void recoverReplica(final IndexShard replica,                                   final IndexShard primary,                                   final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                   final boolean markAsRecovering) throws IOException;1527583663;recovers a replica from the given primary *;protected void recoverReplica(final IndexShard replica,_                                  final IndexShard primary,_                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                  final boolean markAsRecovering) throws IOException {_        IndexShardRoutingTable.Builder newRoutingTable = new IndexShardRoutingTable.Builder(replica.shardId())__        newRoutingTable.addShard(primary.routingEntry())__        if (replica.routingEntry().isRelocationTarget() == false) {_            newRoutingTable.addShard(replica.routingEntry())__        }_        recoverReplica(replica, primary, targetSupplier, markAsRecovering,_            Collections.singleton(primary.routingEntry().allocationId().getId()),_            newRoutingTable.build())__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,throws,ioexception,index,shard,routing,table,builder,new,routing,table,new,index,shard,routing,table,builder,replica,shard,id,new,routing,table,add,shard,primary,routing,entry,if,replica,routing,entry,is,relocation,target,false,new,routing,table,add,shard,replica,routing,entry,recover,replica,replica,primary,target,supplier,mark,as,recovering,collections,singleton,primary,routing,entry,allocation,id,get,id,new,routing,table,build
IndexShardTestCase -> protected void recoverReplica(final IndexShard replica,                                   final IndexShard primary,                                   final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                   final boolean markAsRecovering) throws IOException;1528706846;recovers a replica from the given primary *;protected void recoverReplica(final IndexShard replica,_                                  final IndexShard primary,_                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                  final boolean markAsRecovering) throws IOException {_        IndexShardRoutingTable.Builder newRoutingTable = new IndexShardRoutingTable.Builder(replica.shardId())__        newRoutingTable.addShard(primary.routingEntry())__        if (replica.routingEntry().isRelocationTarget() == false) {_            newRoutingTable.addShard(replica.routingEntry())__        }_        recoverReplica(replica, primary, targetSupplier, markAsRecovering,_            Collections.singleton(primary.routingEntry().allocationId().getId()),_            newRoutingTable.build())__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,throws,ioexception,index,shard,routing,table,builder,new,routing,table,new,index,shard,routing,table,builder,replica,shard,id,new,routing,table,add,shard,primary,routing,entry,if,replica,routing,entry,is,relocation,target,false,new,routing,table,add,shard,replica,routing,entry,recover,replica,replica,primary,target,supplier,mark,as,recovering,collections,singleton,primary,routing,entry,allocation,id,get,id,new,routing,table,build
IndexShardTestCase -> protected void recoverReplica(final IndexShard replica,                                   final IndexShard primary,                                   final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                   final boolean markAsRecovering) throws IOException;1531179852;recovers a replica from the given primary *;protected void recoverReplica(final IndexShard replica,_                                  final IndexShard primary,_                                  final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                  final boolean markAsRecovering) throws IOException {_        IndexShardRoutingTable.Builder newRoutingTable = new IndexShardRoutingTable.Builder(replica.shardId())__        newRoutingTable.addShard(primary.routingEntry())__        if (replica.routingEntry().isRelocationTarget() == false) {_            newRoutingTable.addShard(replica.routingEntry())__        }_        recoverReplica(replica, primary, targetSupplier, markAsRecovering,_            Collections.singleton(primary.routingEntry().allocationId().getId()),_            newRoutingTable.build())__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,throws,ioexception,index,shard,routing,table,builder,new,routing,table,new,index,shard,routing,table,builder,replica,shard,id,new,routing,table,add,shard,primary,routing,entry,if,replica,routing,entry,is,relocation,target,false,new,routing,table,add,shard,replica,routing,entry,recover,replica,replica,primary,target,supplier,mark,as,recovering,collections,singleton,primary,routing,entry,allocation,id,get,id,new,routing,table,build
IndexShardTestCase -> protected IndexShard newStartedShard(final boolean primary, Settings settings) throws IOException;1547496475;Creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica._@param settings the settings to use for this shard;protected IndexShard newStartedShard(final boolean primary, Settings settings) throws IOException {_        return newStartedShard(primary, settings, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica,param,settings,the,settings,to,use,for,this,shard;protected,index,shard,new,started,shard,final,boolean,primary,settings,settings,throws,ioexception,return,new,started,shard,primary,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(final boolean primary, Settings settings) throws IOException;1547496886;Creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica._@param settings the settings to use for this shard;protected IndexShard newStartedShard(final boolean primary, Settings settings) throws IOException {_        return newStartedShard(primary, settings, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica,param,settings,the,settings,to,use,for,this,shard;protected,index,shard,new,started,shard,final,boolean,primary,settings,settings,throws,ioexception,return,new,started,shard,primary,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(final boolean primary, Settings settings) throws IOException;1547520324;Creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica._@param settings the settings to use for this shard;protected IndexShard newStartedShard(final boolean primary, Settings settings) throws IOException {_        return newStartedShard(primary, settings, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica,param,settings,the,settings,to,use,for,this,shard;protected,index,shard,new,started,shard,final,boolean,primary,settings,settings,throws,ioexception,return,new,started,shard,primary,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(final boolean primary, Settings settings) throws IOException;1547552901;Creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica._@param settings the settings to use for this shard;protected IndexShard newStartedShard(final boolean primary, Settings settings) throws IOException {_        return newStartedShard(primary, settings, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica,param,settings,the,settings,to,use,for,this,shard;protected,index,shard,new,started,shard,final,boolean,primary,settings,settings,throws,ioexception,return,new,started,shard,primary,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(final boolean primary, Settings settings) throws IOException;1548593396;Creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica._@param settings the settings to use for this shard;protected IndexShard newStartedShard(final boolean primary, Settings settings) throws IOException {_        return newStartedShard(primary, settings, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica,param,settings,the,settings,to,use,for,this,shard;protected,index,shard,new,started,shard,final,boolean,primary,settings,settings,throws,ioexception,return,new,started,shard,primary,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(final boolean primary, Settings settings) throws IOException;1549294529;Creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica._@param settings the settings to use for this shard;protected IndexShard newStartedShard(final boolean primary, Settings settings) throws IOException {_        return newStartedShard(primary, settings, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica,param,settings,the,settings,to,use,for,this,shard;protected,index,shard,new,started,shard,final,boolean,primary,settings,settings,throws,ioexception,return,new,started,shard,primary,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(final boolean primary, Settings settings) throws IOException;1550668107;Creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica._@param settings the settings to use for this shard;protected IndexShard newStartedShard(final boolean primary, Settings settings) throws IOException {_        return newStartedShard(primary, settings, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica,param,settings,the,settings,to,use,for,this,shard;protected,index,shard,new,started,shard,final,boolean,primary,settings,settings,throws,ioexception,return,new,started,shard,primary,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(Settings settings) throws IOException;1535723122;Creates a new empty shard and starts it_@param settings the settings to use for this shard;protected IndexShard newStartedShard(Settings settings) throws IOException {_        return newStartedShard(randomBoolean(), settings, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,settings,the,settings,to,use,for,this,shard;protected,index,shard,new,started,shard,settings,settings,throws,ioexception,return,new,started,shard,random,boolean,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(Settings settings) throws IOException;1535965276;Creates a new empty shard and starts it_@param settings the settings to use for this shard;protected IndexShard newStartedShard(Settings settings) throws IOException {_        return newStartedShard(randomBoolean(), settings, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,settings,the,settings,to,use,for,this,shard;protected,index,shard,new,started,shard,settings,settings,throws,ioexception,return,new,started,shard,random,boolean,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(Settings settings) throws IOException;1536611444;Creates a new empty shard and starts it_@param settings the settings to use for this shard;protected IndexShard newStartedShard(Settings settings) throws IOException {_        return newStartedShard(randomBoolean(), settings, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,settings,the,settings,to,use,for,this,shard;protected,index,shard,new,started,shard,settings,settings,throws,ioexception,return,new,started,shard,random,boolean,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(Settings settings) throws IOException;1536828374;Creates a new empty shard and starts it_@param settings the settings to use for this shard;protected IndexShard newStartedShard(Settings settings) throws IOException {_        return newStartedShard(randomBoolean(), settings, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,settings,the,settings,to,use,for,this,shard;protected,index,shard,new,started,shard,settings,settings,throws,ioexception,return,new,started,shard,random,boolean,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(Settings settings) throws IOException;1537371806;Creates a new empty shard and starts it_@param settings the settings to use for this shard;protected IndexShard newStartedShard(Settings settings) throws IOException {_        return newStartedShard(randomBoolean(), settings, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,settings,the,settings,to,use,for,this,shard;protected,index,shard,new,started,shard,settings,settings,throws,ioexception,return,new,started,shard,random,boolean,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(Settings settings) throws IOException;1537806831;Creates a new empty shard and starts it_@param settings the settings to use for this shard;protected IndexShard newStartedShard(Settings settings) throws IOException {_        return newStartedShard(randomBoolean(), settings, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,settings,the,settings,to,use,for,this,shard;protected,index,shard,new,started,shard,settings,settings,throws,ioexception,return,new,started,shard,random,boolean,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(Settings settings) throws IOException;1538067637;Creates a new empty shard and starts it_@param settings the settings to use for this shard;protected IndexShard newStartedShard(Settings settings) throws IOException {_        return newStartedShard(randomBoolean(), settings, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,settings,the,settings,to,use,for,this,shard;protected,index,shard,new,started,shard,settings,settings,throws,ioexception,return,new,started,shard,random,boolean,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(Settings settings) throws IOException;1542697404;Creates a new empty shard and starts it_@param settings the settings to use for this shard;protected IndexShard newStartedShard(Settings settings) throws IOException {_        return newStartedShard(randomBoolean(), settings, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,settings,the,settings,to,use,for,this,shard;protected,index,shard,new,started,shard,settings,settings,throws,ioexception,return,new,started,shard,random,boolean,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(Settings settings) throws IOException;1544783963;Creates a new empty shard and starts it_@param settings the settings to use for this shard;protected IndexShard newStartedShard(Settings settings) throws IOException {_        return newStartedShard(randomBoolean(), settings, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,settings,the,settings,to,use,for,this,shard;protected,index,shard,new,started,shard,settings,settings,throws,ioexception,return,new,started,shard,random,boolean,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(Settings settings) throws IOException;1544893197;Creates a new empty shard and starts it_@param settings the settings to use for this shard;protected IndexShard newStartedShard(Settings settings) throws IOException {_        return newStartedShard(randomBoolean(), settings, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,settings,the,settings,to,use,for,this,shard;protected,index,shard,new,started,shard,settings,settings,throws,ioexception,return,new,started,shard,random,boolean,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(Settings settings) throws IOException;1545678410;Creates a new empty shard and starts it_@param settings the settings to use for this shard;protected IndexShard newStartedShard(Settings settings) throws IOException {_        return newStartedShard(randomBoolean(), settings, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,settings,the,settings,to,use,for,this,shard;protected,index,shard,new,started,shard,settings,settings,throws,ioexception,return,new,started,shard,random,boolean,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(Settings settings) throws IOException;1546927432;Creates a new empty shard and starts it_@param settings the settings to use for this shard;protected IndexShard newStartedShard(Settings settings) throws IOException {_        return newStartedShard(randomBoolean(), settings, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,settings,the,settings,to,use,for,this,shard;protected,index,shard,new,started,shard,settings,settings,throws,ioexception,return,new,started,shard,random,boolean,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(Settings settings) throws IOException;1547315388;Creates a new empty shard and starts it_@param settings the settings to use for this shard;protected IndexShard newStartedShard(Settings settings) throws IOException {_        return newStartedShard(randomBoolean(), settings, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,settings,the,settings,to,use,for,this,shard;protected,index,shard,new,started,shard,settings,settings,throws,ioexception,return,new,started,shard,random,boolean,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(Settings settings) throws IOException;1547496475;Creates a new empty shard and starts it_@param settings the settings to use for this shard;protected IndexShard newStartedShard(Settings settings) throws IOException {_        return newStartedShard(randomBoolean(), settings, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,settings,the,settings,to,use,for,this,shard;protected,index,shard,new,started,shard,settings,settings,throws,ioexception,return,new,started,shard,random,boolean,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(Settings settings) throws IOException;1547496886;Creates a new empty shard and starts it_@param settings the settings to use for this shard;protected IndexShard newStartedShard(Settings settings) throws IOException {_        return newStartedShard(randomBoolean(), settings, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,settings,the,settings,to,use,for,this,shard;protected,index,shard,new,started,shard,settings,settings,throws,ioexception,return,new,started,shard,random,boolean,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(Settings settings) throws IOException;1547520324;Creates a new empty shard and starts it_@param settings the settings to use for this shard;protected IndexShard newStartedShard(Settings settings) throws IOException {_        return newStartedShard(randomBoolean(), settings, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,settings,the,settings,to,use,for,this,shard;protected,index,shard,new,started,shard,settings,settings,throws,ioexception,return,new,started,shard,random,boolean,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(Settings settings) throws IOException;1547552901;Creates a new empty shard and starts it_@param settings the settings to use for this shard;protected IndexShard newStartedShard(Settings settings) throws IOException {_        return newStartedShard(randomBoolean(), settings, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,settings,the,settings,to,use,for,this,shard;protected,index,shard,new,started,shard,settings,settings,throws,ioexception,return,new,started,shard,random,boolean,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(Settings settings) throws IOException;1548593396;Creates a new empty shard and starts it_@param settings the settings to use for this shard;protected IndexShard newStartedShard(Settings settings) throws IOException {_        return newStartedShard(randomBoolean(), settings, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,settings,the,settings,to,use,for,this,shard;protected,index,shard,new,started,shard,settings,settings,throws,ioexception,return,new,started,shard,random,boolean,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(Settings settings) throws IOException;1549294529;Creates a new empty shard and starts it_@param settings the settings to use for this shard;protected IndexShard newStartedShard(Settings settings) throws IOException {_        return newStartedShard(randomBoolean(), settings, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,settings,the,settings,to,use,for,this,shard;protected,index,shard,new,started,shard,settings,settings,throws,ioexception,return,new,started,shard,random,boolean,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(Settings settings) throws IOException;1550668107;Creates a new empty shard and starts it_@param settings the settings to use for this shard;protected IndexShard newStartedShard(Settings settings) throws IOException {_        return newStartedShard(randomBoolean(), settings, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,settings,the,settings,to,use,for,this,shard;protected,index,shard,new,started,shard,settings,settings,throws,ioexception,return,new,started,shard,random,boolean,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,                                   @Nullable Store store, @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException;1532434432;creates a new initializing shard._@param routing                       shard routing to use_@param shardPath                     path to use for shard data_@param indexMetaData                 indexMetaData for the shard, including any mapping_@param store                         an optional custom store to use. If null a default file based store will be created_@param indexSearcherWrapper          an optional wrapper to be used during searchers_@param globalCheckpointSyncer        callback for syncing global checkpoints_@param indexEventListener            index event listener_@param listeners                     an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,_                                  @Nullable Store store, @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException {_        final Settings nodeSettings = Settings.builder().put("node.name", routing.currentNodeId()).build()__        final IndexSettings indexSettings = new IndexSettings(indexMetaData, nodeSettings)__        final IndexShard indexShard__        if (store == null) {_            store = createStore(indexSettings, shardPath)__        }_        boolean success = false__        try {_            IndexCache indexCache = new IndexCache(indexSettings, new DisabledQueryCache(indexSettings), null)__            MapperService mapperService = MapperTestUtils.newMapperService(xContentRegistry(), createTempDir(),_                    indexSettings.getSettings(), "index")__            mapperService.merge(indexMetaData, MapperService.MergeReason.MAPPING_RECOVERY)__            SimilarityService similarityService = new SimilarityService(indexSettings, null, Collections.emptyMap())__            final Engine.Warmer warmer = searcher -> {_            }__            ClusterSettings clusterSettings = new ClusterSettings(nodeSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)__            CircuitBreakerService breakerService = new HierarchyCircuitBreakerService(nodeSettings, clusterSettings)__            indexShard = new IndexShard(routing, indexSettings, shardPath, store, () -> null, indexCache, mapperService, similarityService,_                engineFactory, indexEventListener, indexSearcherWrapper, threadPool,_                BigArrays.NON_RECYCLING_INSTANCE, warmer, Collections.emptyList(), Arrays.asList(listeners), globalCheckpointSyncer,_                breakerService)__            indexShard.addShardFailureCallback(DEFAULT_SHARD_FAILURE_HANDLER)__            success = true__        } finally {_            if (success == false) {_                IOUtils.close(store)__            }_        }_        return indexShard__    };creates,a,new,initializing,shard,param,routing,shard,routing,to,use,param,shard,path,path,to,use,for,shard,data,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,store,an,optional,custom,store,to,use,if,null,a,default,file,based,store,will,be,created,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,index,event,listener,index,event,listener,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,shard,path,shard,path,index,meta,data,index,meta,data,nullable,store,store,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,index,event,listener,index,event,listener,indexing,operation,listener,listeners,throws,ioexception,final,settings,node,settings,settings,builder,put,node,name,routing,current,node,id,build,final,index,settings,index,settings,new,index,settings,index,meta,data,node,settings,final,index,shard,index,shard,if,store,null,store,create,store,index,settings,shard,path,boolean,success,false,try,index,cache,index,cache,new,index,cache,index,settings,new,disabled,query,cache,index,settings,null,mapper,service,mapper,service,mapper,test,utils,new,mapper,service,x,content,registry,create,temp,dir,index,settings,get,settings,index,mapper,service,merge,index,meta,data,mapper,service,merge,reason,similarity,service,similarity,service,new,similarity,service,index,settings,null,collections,empty,map,final,engine,warmer,warmer,searcher,cluster,settings,cluster,settings,new,cluster,settings,node,settings,cluster,settings,circuit,breaker,service,breaker,service,new,hierarchy,circuit,breaker,service,node,settings,cluster,settings,index,shard,new,index,shard,routing,index,settings,shard,path,store,null,index,cache,mapper,service,similarity,service,engine,factory,index,event,listener,index,searcher,wrapper,thread,pool,big,arrays,warmer,collections,empty,list,arrays,as,list,listeners,global,checkpoint,syncer,breaker,service,index,shard,add,shard,failure,callback,success,true,finally,if,success,false,ioutils,close,store,return,index,shard
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,                                   @Nullable Store store, @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException;1533295538;creates a new initializing shard._@param routing                       shard routing to use_@param shardPath                     path to use for shard data_@param indexMetaData                 indexMetaData for the shard, including any mapping_@param store                         an optional custom store to use. If null a default file based store will be created_@param indexSearcherWrapper          an optional wrapper to be used during searchers_@param globalCheckpointSyncer        callback for syncing global checkpoints_@param indexEventListener            index event listener_@param listeners                     an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,_                                  @Nullable Store store, @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException {_        final Settings nodeSettings = Settings.builder().put("node.name", routing.currentNodeId()).build()__        final IndexSettings indexSettings = new IndexSettings(indexMetaData, nodeSettings)__        final IndexShard indexShard__        if (store == null) {_            store = createStore(indexSettings, shardPath)__        }_        boolean success = false__        try {_            IndexCache indexCache = new IndexCache(indexSettings, new DisabledQueryCache(indexSettings), null)__            MapperService mapperService = MapperTestUtils.newMapperService(xContentRegistry(), createTempDir(),_                    indexSettings.getSettings(), "index")__            mapperService.merge(indexMetaData, MapperService.MergeReason.MAPPING_RECOVERY)__            SimilarityService similarityService = new SimilarityService(indexSettings, null, Collections.emptyMap())__            final Engine.Warmer warmer = searcher -> {_            }__            ClusterSettings clusterSettings = new ClusterSettings(nodeSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)__            CircuitBreakerService breakerService = new HierarchyCircuitBreakerService(nodeSettings, clusterSettings)__            indexShard = new IndexShard(routing, indexSettings, shardPath, store, () -> null, indexCache, mapperService, similarityService,_                engineFactory, indexEventListener, indexSearcherWrapper, threadPool,_                BigArrays.NON_RECYCLING_INSTANCE, warmer, Collections.emptyList(), Arrays.asList(listeners), globalCheckpointSyncer,_                breakerService)__            indexShard.addShardFailureCallback(DEFAULT_SHARD_FAILURE_HANDLER)__            success = true__        } finally {_            if (success == false) {_                IOUtils.close(store)__            }_        }_        return indexShard__    };creates,a,new,initializing,shard,param,routing,shard,routing,to,use,param,shard,path,path,to,use,for,shard,data,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,store,an,optional,custom,store,to,use,if,null,a,default,file,based,store,will,be,created,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,index,event,listener,index,event,listener,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,shard,path,shard,path,index,meta,data,index,meta,data,nullable,store,store,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,index,event,listener,index,event,listener,indexing,operation,listener,listeners,throws,ioexception,final,settings,node,settings,settings,builder,put,node,name,routing,current,node,id,build,final,index,settings,index,settings,new,index,settings,index,meta,data,node,settings,final,index,shard,index,shard,if,store,null,store,create,store,index,settings,shard,path,boolean,success,false,try,index,cache,index,cache,new,index,cache,index,settings,new,disabled,query,cache,index,settings,null,mapper,service,mapper,service,mapper,test,utils,new,mapper,service,x,content,registry,create,temp,dir,index,settings,get,settings,index,mapper,service,merge,index,meta,data,mapper,service,merge,reason,similarity,service,similarity,service,new,similarity,service,index,settings,null,collections,empty,map,final,engine,warmer,warmer,searcher,cluster,settings,cluster,settings,new,cluster,settings,node,settings,cluster,settings,circuit,breaker,service,breaker,service,new,hierarchy,circuit,breaker,service,node,settings,cluster,settings,index,shard,new,index,shard,routing,index,settings,shard,path,store,null,index,cache,mapper,service,similarity,service,engine,factory,index,event,listener,index,searcher,wrapper,thread,pool,big,arrays,warmer,collections,empty,list,arrays,as,list,listeners,global,checkpoint,syncer,breaker,service,index,shard,add,shard,failure,callback,success,true,finally,if,success,false,ioutils,close,store,return,index,shard
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,                                   @Nullable Store store, @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException;1535723122;creates a new initializing shard._@param routing                       shard routing to use_@param shardPath                     path to use for shard data_@param indexMetaData                 indexMetaData for the shard, including any mapping_@param store                         an optional custom store to use. If null a default file based store will be created_@param indexSearcherWrapper          an optional wrapper to be used during searchers_@param globalCheckpointSyncer        callback for syncing global checkpoints_@param indexEventListener            index event listener_@param listeners                     an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,_                                  @Nullable Store store, @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException {_        final Settings nodeSettings = Settings.builder().put("node.name", routing.currentNodeId()).build()__        final IndexSettings indexSettings = new IndexSettings(indexMetaData, nodeSettings)__        final IndexShard indexShard__        if (store == null) {_            store = createStore(indexSettings, shardPath)__        }_        boolean success = false__        try {_            IndexCache indexCache = new IndexCache(indexSettings, new DisabledQueryCache(indexSettings), null)__            MapperService mapperService = MapperTestUtils.newMapperService(xContentRegistry(), createTempDir(),_                    indexSettings.getSettings(), "index")__            mapperService.merge(indexMetaData, MapperService.MergeReason.MAPPING_RECOVERY)__            SimilarityService similarityService = new SimilarityService(indexSettings, null, Collections.emptyMap())__            final Engine.Warmer warmer = searcher -> {_            }__            ClusterSettings clusterSettings = new ClusterSettings(nodeSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)__            CircuitBreakerService breakerService = new HierarchyCircuitBreakerService(nodeSettings, clusterSettings)__            indexShard = new IndexShard(routing, indexSettings, shardPath, store, () -> null, indexCache, mapperService, similarityService,_                engineFactory, indexEventListener, indexSearcherWrapper, threadPool,_                BigArrays.NON_RECYCLING_INSTANCE, warmer, Collections.emptyList(), Arrays.asList(listeners), globalCheckpointSyncer,_                breakerService)__            indexShard.addShardFailureCallback(DEFAULT_SHARD_FAILURE_HANDLER)__            success = true__        } finally {_            if (success == false) {_                IOUtils.close(store)__            }_        }_        return indexShard__    };creates,a,new,initializing,shard,param,routing,shard,routing,to,use,param,shard,path,path,to,use,for,shard,data,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,store,an,optional,custom,store,to,use,if,null,a,default,file,based,store,will,be,created,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,index,event,listener,index,event,listener,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,shard,path,shard,path,index,meta,data,index,meta,data,nullable,store,store,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,index,event,listener,index,event,listener,indexing,operation,listener,listeners,throws,ioexception,final,settings,node,settings,settings,builder,put,node,name,routing,current,node,id,build,final,index,settings,index,settings,new,index,settings,index,meta,data,node,settings,final,index,shard,index,shard,if,store,null,store,create,store,index,settings,shard,path,boolean,success,false,try,index,cache,index,cache,new,index,cache,index,settings,new,disabled,query,cache,index,settings,null,mapper,service,mapper,service,mapper,test,utils,new,mapper,service,x,content,registry,create,temp,dir,index,settings,get,settings,index,mapper,service,merge,index,meta,data,mapper,service,merge,reason,similarity,service,similarity,service,new,similarity,service,index,settings,null,collections,empty,map,final,engine,warmer,warmer,searcher,cluster,settings,cluster,settings,new,cluster,settings,node,settings,cluster,settings,circuit,breaker,service,breaker,service,new,hierarchy,circuit,breaker,service,node,settings,cluster,settings,index,shard,new,index,shard,routing,index,settings,shard,path,store,null,index,cache,mapper,service,similarity,service,engine,factory,index,event,listener,index,searcher,wrapper,thread,pool,big,arrays,warmer,collections,empty,list,arrays,as,list,listeners,global,checkpoint,syncer,breaker,service,index,shard,add,shard,failure,callback,success,true,finally,if,success,false,ioutils,close,store,return,index,shard
IndexShardTestCase -> protected final void recoverReplica(final IndexShard replica,                                         final IndexShard primary,                                         final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                         final boolean markAsRecovering,                                         final Set<String> inSyncIds,                                         final IndexShardRoutingTable routingTable) throws IOException;1524684173;Recovers a replica from the give primary, allow the user to supply a custom recovery target. A typical usage of a custom recovery_target is to assert things in the various stages of recovery._@param replica                the recovery target shard_@param primary                the recovery source shard_@param targetSupplier         supplies an instance of {@link RecoveryTarget}_@param markAsRecovering       set to {@code false} if the replica is marked as recovering;protected final void recoverReplica(final IndexShard replica,_                                        final IndexShard primary,_                                        final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                        final boolean markAsRecovering,_                                        final Set<String> inSyncIds,_                                        final IndexShardRoutingTable routingTable) throws IOException {_        final DiscoveryNode pNode = getFakeDiscoNode(primary.routingEntry().currentNodeId())__        final DiscoveryNode rNode = getFakeDiscoNode(replica.routingEntry().currentNodeId())__        if (markAsRecovering) {_            replica.markAsRecovering("remote", new RecoveryState(replica.routingEntry(), pNode, rNode))__        } else {_            assertEquals(replica.state(), IndexShardState.RECOVERING)__        }_        replica.prepareForIndexRecovery()__        final RecoveryTarget recoveryTarget = targetSupplier.apply(replica, pNode)__        final String targetAllocationId = recoveryTarget.indexShard().routingEntry().allocationId().getId()___        final Store.MetadataSnapshot snapshot = getMetadataSnapshotOrEmpty(replica)__        final long startingSeqNo__        if (snapshot.size() > 0) {_            startingSeqNo = PeerRecoveryTargetService.getStartingSeqNo(logger, recoveryTarget)__        } else {_            startingSeqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__        }__        final StartRecoveryRequest request = new StartRecoveryRequest(replica.shardId(), targetAllocationId,_            pNode, rNode, snapshot, replica.routingEntry().primary(), 0, startingSeqNo)__        final RecoverySourceHandler recovery = new RecoverySourceHandler(_            primary,_            recoveryTarget,_            request,_            (int) ByteSizeUnit.MB.toBytes(1),_            Settings.builder().put(Node.NODE_NAME_SETTING.getKey(), pNode.getName()).build())__        final ShardRouting initializingReplicaRouting = replica.routingEntry()__        primary.updateShardState(primary.routingEntry(), primary.getPrimaryTerm(), null, currentClusterStateVersion.incrementAndGet(),_            inSyncIds, routingTable, Collections.emptySet())__        recovery.recoverToTarget()__        recoveryTarget.markAsDone()__        IndexShardRoutingTable newRoutingTable =_            initializingReplicaRouting.isRelocationTarget() ?_                new IndexShardRoutingTable.Builder(routingTable)_                    .removeShard(primary.routingEntry())_                    .addShard(replica.routingEntry())_                    .build() :_                new IndexShardRoutingTable.Builder(routingTable)_                .removeShard(initializingReplicaRouting)_                .addShard(replica.routingEntry())_                .build()__        Set<String> inSyncIdsWithReplica = new HashSet<>(inSyncIds)__        inSyncIdsWithReplica.add(replica.routingEntry().allocationId().getId())__        _        primary.updateShardState(primary.routingEntry(), primary.getPrimaryTerm(), null, currentClusterStateVersion.incrementAndGet(),_            inSyncIdsWithReplica, newRoutingTable, Collections.emptySet())__        replica.updateShardState(replica.routingEntry().moveToStarted(), replica.getPrimaryTerm(), null,_            currentClusterStateVersion.get(), inSyncIdsWithReplica, newRoutingTable, Collections.emptySet())__    };recovers,a,replica,from,the,give,primary,allow,the,user,to,supply,a,custom,recovery,target,a,typical,usage,of,a,custom,recovery,target,is,to,assert,things,in,the,various,stages,of,recovery,param,replica,the,recovery,target,shard,param,primary,the,recovery,source,shard,param,target,supplier,supplies,an,instance,of,link,recovery,target,param,mark,as,recovering,set,to,code,false,if,the,replica,is,marked,as,recovering;protected,final,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,set,string,in,sync,ids,final,index,shard,routing,table,routing,table,throws,ioexception,final,discovery,node,p,node,get,fake,disco,node,primary,routing,entry,current,node,id,final,discovery,node,r,node,get,fake,disco,node,replica,routing,entry,current,node,id,if,mark,as,recovering,replica,mark,as,recovering,remote,new,recovery,state,replica,routing,entry,p,node,r,node,else,assert,equals,replica,state,index,shard,state,recovering,replica,prepare,for,index,recovery,final,recovery,target,recovery,target,target,supplier,apply,replica,p,node,final,string,target,allocation,id,recovery,target,index,shard,routing,entry,allocation,id,get,id,final,store,metadata,snapshot,snapshot,get,metadata,snapshot,or,empty,replica,final,long,starting,seq,no,if,snapshot,size,0,starting,seq,no,peer,recovery,target,service,get,starting,seq,no,logger,recovery,target,else,starting,seq,no,sequence,numbers,final,start,recovery,request,request,new,start,recovery,request,replica,shard,id,target,allocation,id,p,node,r,node,snapshot,replica,routing,entry,primary,0,starting,seq,no,final,recovery,source,handler,recovery,new,recovery,source,handler,primary,recovery,target,request,int,byte,size,unit,mb,to,bytes,1,settings,builder,put,node,get,key,p,node,get,name,build,final,shard,routing,initializing,replica,routing,replica,routing,entry,primary,update,shard,state,primary,routing,entry,primary,get,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,routing,table,collections,empty,set,recovery,recover,to,target,recovery,target,mark,as,done,index,shard,routing,table,new,routing,table,initializing,replica,routing,is,relocation,target,new,index,shard,routing,table,builder,routing,table,remove,shard,primary,routing,entry,add,shard,replica,routing,entry,build,new,index,shard,routing,table,builder,routing,table,remove,shard,initializing,replica,routing,add,shard,replica,routing,entry,build,set,string,in,sync,ids,with,replica,new,hash,set,in,sync,ids,in,sync,ids,with,replica,add,replica,routing,entry,allocation,id,get,id,primary,update,shard,state,primary,routing,entry,primary,get,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,with,replica,new,routing,table,collections,empty,set,replica,update,shard,state,replica,routing,entry,move,to,started,replica,get,primary,term,null,current,cluster,state,version,get,in,sync,ids,with,replica,new,routing,table,collections,empty,set
IndexShardTestCase -> protected final void recoverReplica(final IndexShard replica,                                         final IndexShard primary,                                         final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                         final boolean markAsRecovering,                                         final Set<String> inSyncIds,                                         final IndexShardRoutingTable routingTable) throws IOException;1525162917;Recovers a replica from the give primary, allow the user to supply a custom recovery target. A typical usage of a custom recovery_target is to assert things in the various stages of recovery._@param replica                the recovery target shard_@param primary                the recovery source shard_@param targetSupplier         supplies an instance of {@link RecoveryTarget}_@param markAsRecovering       set to {@code false} if the replica is marked as recovering;protected final void recoverReplica(final IndexShard replica,_                                        final IndexShard primary,_                                        final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                        final boolean markAsRecovering,_                                        final Set<String> inSyncIds,_                                        final IndexShardRoutingTable routingTable) throws IOException {_        final DiscoveryNode pNode = getFakeDiscoNode(primary.routingEntry().currentNodeId())__        final DiscoveryNode rNode = getFakeDiscoNode(replica.routingEntry().currentNodeId())__        if (markAsRecovering) {_            replica.markAsRecovering("remote", new RecoveryState(replica.routingEntry(), pNode, rNode))__        } else {_            assertEquals(replica.state(), IndexShardState.RECOVERING)__        }_        replica.prepareForIndexRecovery()__        final RecoveryTarget recoveryTarget = targetSupplier.apply(replica, pNode)__        final String targetAllocationId = recoveryTarget.indexShard().routingEntry().allocationId().getId()___        final Store.MetadataSnapshot snapshot = getMetadataSnapshotOrEmpty(replica)__        final long startingSeqNo__        if (snapshot.size() > 0) {_            startingSeqNo = PeerRecoveryTargetService.getStartingSeqNo(logger, recoveryTarget)__        } else {_            startingSeqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__        }__        final StartRecoveryRequest request = new StartRecoveryRequest(replica.shardId(), targetAllocationId,_            pNode, rNode, snapshot, replica.routingEntry().primary(), 0, startingSeqNo)__        final RecoverySourceHandler recovery = new RecoverySourceHandler(_            primary,_            recoveryTarget,_            request,_            (int) ByteSizeUnit.MB.toBytes(1),_            Settings.builder().put(Node.NODE_NAME_SETTING.getKey(), pNode.getName()).build())__        final ShardRouting initializingReplicaRouting = replica.routingEntry()__        primary.updateShardState(primary.routingEntry(), primary.getPrimaryTerm(), null, currentClusterStateVersion.incrementAndGet(),_            inSyncIds, routingTable, Collections.emptySet())__        recovery.recoverToTarget()__        recoveryTarget.markAsDone()__        IndexShardRoutingTable newRoutingTable =_            initializingReplicaRouting.isRelocationTarget() ?_                new IndexShardRoutingTable.Builder(routingTable)_                    .removeShard(primary.routingEntry())_                    .addShard(replica.routingEntry())_                    .build() :_                new IndexShardRoutingTable.Builder(routingTable)_                .removeShard(initializingReplicaRouting)_                .addShard(replica.routingEntry())_                .build()__        Set<String> inSyncIdsWithReplica = new HashSet<>(inSyncIds)__        inSyncIdsWithReplica.add(replica.routingEntry().allocationId().getId())__        _        primary.updateShardState(primary.routingEntry(), primary.getPrimaryTerm(), null, currentClusterStateVersion.incrementAndGet(),_            inSyncIdsWithReplica, newRoutingTable, Collections.emptySet())__        replica.updateShardState(replica.routingEntry().moveToStarted(), replica.getPrimaryTerm(), null,_            currentClusterStateVersion.get(), inSyncIdsWithReplica, newRoutingTable, Collections.emptySet())__    };recovers,a,replica,from,the,give,primary,allow,the,user,to,supply,a,custom,recovery,target,a,typical,usage,of,a,custom,recovery,target,is,to,assert,things,in,the,various,stages,of,recovery,param,replica,the,recovery,target,shard,param,primary,the,recovery,source,shard,param,target,supplier,supplies,an,instance,of,link,recovery,target,param,mark,as,recovering,set,to,code,false,if,the,replica,is,marked,as,recovering;protected,final,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,set,string,in,sync,ids,final,index,shard,routing,table,routing,table,throws,ioexception,final,discovery,node,p,node,get,fake,disco,node,primary,routing,entry,current,node,id,final,discovery,node,r,node,get,fake,disco,node,replica,routing,entry,current,node,id,if,mark,as,recovering,replica,mark,as,recovering,remote,new,recovery,state,replica,routing,entry,p,node,r,node,else,assert,equals,replica,state,index,shard,state,recovering,replica,prepare,for,index,recovery,final,recovery,target,recovery,target,target,supplier,apply,replica,p,node,final,string,target,allocation,id,recovery,target,index,shard,routing,entry,allocation,id,get,id,final,store,metadata,snapshot,snapshot,get,metadata,snapshot,or,empty,replica,final,long,starting,seq,no,if,snapshot,size,0,starting,seq,no,peer,recovery,target,service,get,starting,seq,no,logger,recovery,target,else,starting,seq,no,sequence,numbers,final,start,recovery,request,request,new,start,recovery,request,replica,shard,id,target,allocation,id,p,node,r,node,snapshot,replica,routing,entry,primary,0,starting,seq,no,final,recovery,source,handler,recovery,new,recovery,source,handler,primary,recovery,target,request,int,byte,size,unit,mb,to,bytes,1,settings,builder,put,node,get,key,p,node,get,name,build,final,shard,routing,initializing,replica,routing,replica,routing,entry,primary,update,shard,state,primary,routing,entry,primary,get,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,routing,table,collections,empty,set,recovery,recover,to,target,recovery,target,mark,as,done,index,shard,routing,table,new,routing,table,initializing,replica,routing,is,relocation,target,new,index,shard,routing,table,builder,routing,table,remove,shard,primary,routing,entry,add,shard,replica,routing,entry,build,new,index,shard,routing,table,builder,routing,table,remove,shard,initializing,replica,routing,add,shard,replica,routing,entry,build,set,string,in,sync,ids,with,replica,new,hash,set,in,sync,ids,in,sync,ids,with,replica,add,replica,routing,entry,allocation,id,get,id,primary,update,shard,state,primary,routing,entry,primary,get,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,with,replica,new,routing,table,collections,empty,set,replica,update,shard,state,replica,routing,entry,move,to,started,replica,get,primary,term,null,current,cluster,state,version,get,in,sync,ids,with,replica,new,routing,table,collections,empty,set
IndexShardTestCase -> protected final void recoverReplica(final IndexShard replica,                                         final IndexShard primary,                                         final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                         final boolean markAsRecovering,                                         final Set<String> inSyncIds,                                         final IndexShardRoutingTable routingTable) throws IOException;1527583663;Recovers a replica from the give primary, allow the user to supply a custom recovery target. A typical usage of a custom recovery_target is to assert things in the various stages of recovery._@param replica                the recovery target shard_@param primary                the recovery source shard_@param targetSupplier         supplies an instance of {@link RecoveryTarget}_@param markAsRecovering       set to {@code false} if the replica is marked as recovering;protected final void recoverReplica(final IndexShard replica,_                                        final IndexShard primary,_                                        final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                        final boolean markAsRecovering,_                                        final Set<String> inSyncIds,_                                        final IndexShardRoutingTable routingTable) throws IOException {_        final DiscoveryNode pNode = getFakeDiscoNode(primary.routingEntry().currentNodeId())__        final DiscoveryNode rNode = getFakeDiscoNode(replica.routingEntry().currentNodeId())__        if (markAsRecovering) {_            replica.markAsRecovering("remote", new RecoveryState(replica.routingEntry(), pNode, rNode))__        } else {_            assertEquals(replica.state(), IndexShardState.RECOVERING)__        }_        replica.prepareForIndexRecovery()__        final RecoveryTarget recoveryTarget = targetSupplier.apply(replica, pNode)__        final String targetAllocationId = recoveryTarget.indexShard().routingEntry().allocationId().getId()___        final Store.MetadataSnapshot snapshot = getMetadataSnapshotOrEmpty(replica)__        final long startingSeqNo__        if (snapshot.size() > 0) {_            startingSeqNo = PeerRecoveryTargetService.getStartingSeqNo(logger, recoveryTarget)__        } else {_            startingSeqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__        }__        final StartRecoveryRequest request = new StartRecoveryRequest(replica.shardId(), targetAllocationId,_            pNode, rNode, snapshot, replica.routingEntry().primary(), 0, startingSeqNo)__        final RecoverySourceHandler recovery = new RecoverySourceHandler(_            primary,_            recoveryTarget,_            request,_            (int) ByteSizeUnit.MB.toBytes(1),_            Settings.builder().put(Node.NODE_NAME_SETTING.getKey(), pNode.getName()).build())__        final ShardRouting initializingReplicaRouting = replica.routingEntry()__        primary.updateShardState(primary.routingEntry(), primary.getPrimaryTerm(), null, currentClusterStateVersion.incrementAndGet(),_            inSyncIds, routingTable, Collections.emptySet())__        recovery.recoverToTarget()__        recoveryTarget.markAsDone()__        IndexShardRoutingTable newRoutingTable =_            initializingReplicaRouting.isRelocationTarget() ?_                new IndexShardRoutingTable.Builder(routingTable)_                    .removeShard(primary.routingEntry())_                    .addShard(replica.routingEntry())_                    .build() :_                new IndexShardRoutingTable.Builder(routingTable)_                .removeShard(initializingReplicaRouting)_                .addShard(replica.routingEntry())_                .build()__        Set<String> inSyncIdsWithReplica = new HashSet<>(inSyncIds)__        inSyncIdsWithReplica.add(replica.routingEntry().allocationId().getId())__        _        primary.updateShardState(primary.routingEntry(), primary.getPrimaryTerm(), null, currentClusterStateVersion.incrementAndGet(),_            inSyncIdsWithReplica, newRoutingTable, Collections.emptySet())__        replica.updateShardState(replica.routingEntry().moveToStarted(), replica.getPrimaryTerm(), null,_            currentClusterStateVersion.get(), inSyncIdsWithReplica, newRoutingTable, Collections.emptySet())__    };recovers,a,replica,from,the,give,primary,allow,the,user,to,supply,a,custom,recovery,target,a,typical,usage,of,a,custom,recovery,target,is,to,assert,things,in,the,various,stages,of,recovery,param,replica,the,recovery,target,shard,param,primary,the,recovery,source,shard,param,target,supplier,supplies,an,instance,of,link,recovery,target,param,mark,as,recovering,set,to,code,false,if,the,replica,is,marked,as,recovering;protected,final,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,set,string,in,sync,ids,final,index,shard,routing,table,routing,table,throws,ioexception,final,discovery,node,p,node,get,fake,disco,node,primary,routing,entry,current,node,id,final,discovery,node,r,node,get,fake,disco,node,replica,routing,entry,current,node,id,if,mark,as,recovering,replica,mark,as,recovering,remote,new,recovery,state,replica,routing,entry,p,node,r,node,else,assert,equals,replica,state,index,shard,state,recovering,replica,prepare,for,index,recovery,final,recovery,target,recovery,target,target,supplier,apply,replica,p,node,final,string,target,allocation,id,recovery,target,index,shard,routing,entry,allocation,id,get,id,final,store,metadata,snapshot,snapshot,get,metadata,snapshot,or,empty,replica,final,long,starting,seq,no,if,snapshot,size,0,starting,seq,no,peer,recovery,target,service,get,starting,seq,no,logger,recovery,target,else,starting,seq,no,sequence,numbers,final,start,recovery,request,request,new,start,recovery,request,replica,shard,id,target,allocation,id,p,node,r,node,snapshot,replica,routing,entry,primary,0,starting,seq,no,final,recovery,source,handler,recovery,new,recovery,source,handler,primary,recovery,target,request,int,byte,size,unit,mb,to,bytes,1,settings,builder,put,node,get,key,p,node,get,name,build,final,shard,routing,initializing,replica,routing,replica,routing,entry,primary,update,shard,state,primary,routing,entry,primary,get,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,routing,table,collections,empty,set,recovery,recover,to,target,recovery,target,mark,as,done,index,shard,routing,table,new,routing,table,initializing,replica,routing,is,relocation,target,new,index,shard,routing,table,builder,routing,table,remove,shard,primary,routing,entry,add,shard,replica,routing,entry,build,new,index,shard,routing,table,builder,routing,table,remove,shard,initializing,replica,routing,add,shard,replica,routing,entry,build,set,string,in,sync,ids,with,replica,new,hash,set,in,sync,ids,in,sync,ids,with,replica,add,replica,routing,entry,allocation,id,get,id,primary,update,shard,state,primary,routing,entry,primary,get,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,with,replica,new,routing,table,collections,empty,set,replica,update,shard,state,replica,routing,entry,move,to,started,replica,get,primary,term,null,current,cluster,state,version,get,in,sync,ids,with,replica,new,routing,table,collections,empty,set
IndexShardTestCase -> protected final void recoverReplica(final IndexShard replica,                                         final IndexShard primary,                                         final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                         final boolean markAsRecovering,                                         final Set<String> inSyncIds,                                         final IndexShardRoutingTable routingTable) throws IOException;1528706846;Recovers a replica from the give primary, allow the user to supply a custom recovery target. A typical usage of a custom recovery_target is to assert things in the various stages of recovery._@param replica                the recovery target shard_@param primary                the recovery source shard_@param targetSupplier         supplies an instance of {@link RecoveryTarget}_@param markAsRecovering       set to {@code false} if the replica is marked as recovering;protected final void recoverReplica(final IndexShard replica,_                                        final IndexShard primary,_                                        final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                        final boolean markAsRecovering,_                                        final Set<String> inSyncIds,_                                        final IndexShardRoutingTable routingTable) throws IOException {_        final DiscoveryNode pNode = getFakeDiscoNode(primary.routingEntry().currentNodeId())__        final DiscoveryNode rNode = getFakeDiscoNode(replica.routingEntry().currentNodeId())__        if (markAsRecovering) {_            replica.markAsRecovering("remote", new RecoveryState(replica.routingEntry(), pNode, rNode))__        } else {_            assertEquals(replica.state(), IndexShardState.RECOVERING)__        }_        replica.prepareForIndexRecovery()__        final RecoveryTarget recoveryTarget = targetSupplier.apply(replica, pNode)__        final String targetAllocationId = recoveryTarget.indexShard().routingEntry().allocationId().getId()___        final Store.MetadataSnapshot snapshot = getMetadataSnapshotOrEmpty(replica)__        final long startingSeqNo__        if (snapshot.size() > 0) {_            startingSeqNo = PeerRecoveryTargetService.getStartingSeqNo(logger, recoveryTarget)__        } else {_            startingSeqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__        }__        final StartRecoveryRequest request = new StartRecoveryRequest(replica.shardId(), targetAllocationId,_            pNode, rNode, snapshot, replica.routingEntry().primary(), 0, startingSeqNo)__        final RecoverySourceHandler recovery = new RecoverySourceHandler(_            primary,_            recoveryTarget,_            request,_            (int) ByteSizeUnit.MB.toBytes(1),_            Settings.builder().put(Node.NODE_NAME_SETTING.getKey(), pNode.getName()).build())__        final ShardRouting initializingReplicaRouting = replica.routingEntry()__        primary.updateShardState(primary.routingEntry(), primary.getPrimaryTerm(), null, currentClusterStateVersion.incrementAndGet(),_            inSyncIds, routingTable, Collections.emptySet())__        recovery.recoverToTarget()__        recoveryTarget.markAsDone()__        IndexShardRoutingTable newRoutingTable =_            initializingReplicaRouting.isRelocationTarget() ?_                new IndexShardRoutingTable.Builder(routingTable)_                    .removeShard(primary.routingEntry())_                    .addShard(replica.routingEntry())_                    .build() :_                new IndexShardRoutingTable.Builder(routingTable)_                .removeShard(initializingReplicaRouting)_                .addShard(replica.routingEntry())_                .build()__        Set<String> inSyncIdsWithReplica = new HashSet<>(inSyncIds)__        inSyncIdsWithReplica.add(replica.routingEntry().allocationId().getId())__        _        primary.updateShardState(primary.routingEntry(), primary.getPrimaryTerm(), null, currentClusterStateVersion.incrementAndGet(),_            inSyncIdsWithReplica, newRoutingTable, Collections.emptySet())__        replica.updateShardState(replica.routingEntry().moveToStarted(), replica.getPrimaryTerm(), null,_            currentClusterStateVersion.get(), inSyncIdsWithReplica, newRoutingTable, Collections.emptySet())__    };recovers,a,replica,from,the,give,primary,allow,the,user,to,supply,a,custom,recovery,target,a,typical,usage,of,a,custom,recovery,target,is,to,assert,things,in,the,various,stages,of,recovery,param,replica,the,recovery,target,shard,param,primary,the,recovery,source,shard,param,target,supplier,supplies,an,instance,of,link,recovery,target,param,mark,as,recovering,set,to,code,false,if,the,replica,is,marked,as,recovering;protected,final,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,set,string,in,sync,ids,final,index,shard,routing,table,routing,table,throws,ioexception,final,discovery,node,p,node,get,fake,disco,node,primary,routing,entry,current,node,id,final,discovery,node,r,node,get,fake,disco,node,replica,routing,entry,current,node,id,if,mark,as,recovering,replica,mark,as,recovering,remote,new,recovery,state,replica,routing,entry,p,node,r,node,else,assert,equals,replica,state,index,shard,state,recovering,replica,prepare,for,index,recovery,final,recovery,target,recovery,target,target,supplier,apply,replica,p,node,final,string,target,allocation,id,recovery,target,index,shard,routing,entry,allocation,id,get,id,final,store,metadata,snapshot,snapshot,get,metadata,snapshot,or,empty,replica,final,long,starting,seq,no,if,snapshot,size,0,starting,seq,no,peer,recovery,target,service,get,starting,seq,no,logger,recovery,target,else,starting,seq,no,sequence,numbers,final,start,recovery,request,request,new,start,recovery,request,replica,shard,id,target,allocation,id,p,node,r,node,snapshot,replica,routing,entry,primary,0,starting,seq,no,final,recovery,source,handler,recovery,new,recovery,source,handler,primary,recovery,target,request,int,byte,size,unit,mb,to,bytes,1,settings,builder,put,node,get,key,p,node,get,name,build,final,shard,routing,initializing,replica,routing,replica,routing,entry,primary,update,shard,state,primary,routing,entry,primary,get,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,routing,table,collections,empty,set,recovery,recover,to,target,recovery,target,mark,as,done,index,shard,routing,table,new,routing,table,initializing,replica,routing,is,relocation,target,new,index,shard,routing,table,builder,routing,table,remove,shard,primary,routing,entry,add,shard,replica,routing,entry,build,new,index,shard,routing,table,builder,routing,table,remove,shard,initializing,replica,routing,add,shard,replica,routing,entry,build,set,string,in,sync,ids,with,replica,new,hash,set,in,sync,ids,in,sync,ids,with,replica,add,replica,routing,entry,allocation,id,get,id,primary,update,shard,state,primary,routing,entry,primary,get,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,with,replica,new,routing,table,collections,empty,set,replica,update,shard,state,replica,routing,entry,move,to,started,replica,get,primary,term,null,current,cluster,state,version,get,in,sync,ids,with,replica,new,routing,table,collections,empty,set
IndexShardTestCase -> protected final void recoverReplica(final IndexShard replica,                                         final IndexShard primary,                                         final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,                                         final boolean markAsRecovering,                                         final Set<String> inSyncIds,                                         final IndexShardRoutingTable routingTable) throws IOException;1531179852;Recovers a replica from the give primary, allow the user to supply a custom recovery target. A typical usage of a custom recovery_target is to assert things in the various stages of recovery._@param replica                the recovery target shard_@param primary                the recovery source shard_@param targetSupplier         supplies an instance of {@link RecoveryTarget}_@param markAsRecovering       set to {@code false} if the replica is marked as recovering;protected final void recoverReplica(final IndexShard replica,_                                        final IndexShard primary,_                                        final BiFunction<IndexShard, DiscoveryNode, RecoveryTarget> targetSupplier,_                                        final boolean markAsRecovering,_                                        final Set<String> inSyncIds,_                                        final IndexShardRoutingTable routingTable) throws IOException {_        final DiscoveryNode pNode = getFakeDiscoNode(primary.routingEntry().currentNodeId())__        final DiscoveryNode rNode = getFakeDiscoNode(replica.routingEntry().currentNodeId())__        if (markAsRecovering) {_            replica.markAsRecovering("remote", new RecoveryState(replica.routingEntry(), pNode, rNode))__        } else {_            assertEquals(replica.state(), IndexShardState.RECOVERING)__        }_        replica.prepareForIndexRecovery()__        final RecoveryTarget recoveryTarget = targetSupplier.apply(replica, pNode)__        final String targetAllocationId = recoveryTarget.indexShard().routingEntry().allocationId().getId()___        final Store.MetadataSnapshot snapshot = getMetadataSnapshotOrEmpty(replica)__        final long startingSeqNo__        if (snapshot.size() > 0) {_            startingSeqNo = PeerRecoveryTargetService.getStartingSeqNo(logger, recoveryTarget)__        } else {_            startingSeqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__        }__        final StartRecoveryRequest request = new StartRecoveryRequest(replica.shardId(), targetAllocationId,_            pNode, rNode, snapshot, replica.routingEntry().primary(), 0, startingSeqNo)__        final RecoverySourceHandler recovery = new RecoverySourceHandler(_            primary,_            recoveryTarget,_            request,_            (int) ByteSizeUnit.MB.toBytes(1),_            Settings.builder().put(Node.NODE_NAME_SETTING.getKey(), pNode.getName()).build())__        final ShardRouting initializingReplicaRouting = replica.routingEntry()__        primary.updateShardState(primary.routingEntry(), primary.getPrimaryTerm(), null, currentClusterStateVersion.incrementAndGet(),_            inSyncIds, routingTable, Collections.emptySet())__        recovery.recoverToTarget()__        recoveryTarget.markAsDone()__        IndexShardRoutingTable newRoutingTable =_            initializingReplicaRouting.isRelocationTarget() ?_                new IndexShardRoutingTable.Builder(routingTable)_                    .removeShard(primary.routingEntry())_                    .addShard(replica.routingEntry())_                    .build() :_                new IndexShardRoutingTable.Builder(routingTable)_                .removeShard(initializingReplicaRouting)_                .addShard(replica.routingEntry())_                .build()__        Set<String> inSyncIdsWithReplica = new HashSet<>(inSyncIds)__        inSyncIdsWithReplica.add(replica.routingEntry().allocationId().getId())__        _        primary.updateShardState(primary.routingEntry(), primary.getPrimaryTerm(), null, currentClusterStateVersion.incrementAndGet(),_            inSyncIdsWithReplica, newRoutingTable, Collections.emptySet())__        replica.updateShardState(replica.routingEntry().moveToStarted(), replica.getPrimaryTerm(), null,_            currentClusterStateVersion.get(), inSyncIdsWithReplica, newRoutingTable, Collections.emptySet())__    };recovers,a,replica,from,the,give,primary,allow,the,user,to,supply,a,custom,recovery,target,a,typical,usage,of,a,custom,recovery,target,is,to,assert,things,in,the,various,stages,of,recovery,param,replica,the,recovery,target,shard,param,primary,the,recovery,source,shard,param,target,supplier,supplies,an,instance,of,link,recovery,target,param,mark,as,recovering,set,to,code,false,if,the,replica,is,marked,as,recovering;protected,final,void,recover,replica,final,index,shard,replica,final,index,shard,primary,final,bi,function,index,shard,discovery,node,recovery,target,target,supplier,final,boolean,mark,as,recovering,final,set,string,in,sync,ids,final,index,shard,routing,table,routing,table,throws,ioexception,final,discovery,node,p,node,get,fake,disco,node,primary,routing,entry,current,node,id,final,discovery,node,r,node,get,fake,disco,node,replica,routing,entry,current,node,id,if,mark,as,recovering,replica,mark,as,recovering,remote,new,recovery,state,replica,routing,entry,p,node,r,node,else,assert,equals,replica,state,index,shard,state,recovering,replica,prepare,for,index,recovery,final,recovery,target,recovery,target,target,supplier,apply,replica,p,node,final,string,target,allocation,id,recovery,target,index,shard,routing,entry,allocation,id,get,id,final,store,metadata,snapshot,snapshot,get,metadata,snapshot,or,empty,replica,final,long,starting,seq,no,if,snapshot,size,0,starting,seq,no,peer,recovery,target,service,get,starting,seq,no,logger,recovery,target,else,starting,seq,no,sequence,numbers,final,start,recovery,request,request,new,start,recovery,request,replica,shard,id,target,allocation,id,p,node,r,node,snapshot,replica,routing,entry,primary,0,starting,seq,no,final,recovery,source,handler,recovery,new,recovery,source,handler,primary,recovery,target,request,int,byte,size,unit,mb,to,bytes,1,settings,builder,put,node,get,key,p,node,get,name,build,final,shard,routing,initializing,replica,routing,replica,routing,entry,primary,update,shard,state,primary,routing,entry,primary,get,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,routing,table,collections,empty,set,recovery,recover,to,target,recovery,target,mark,as,done,index,shard,routing,table,new,routing,table,initializing,replica,routing,is,relocation,target,new,index,shard,routing,table,builder,routing,table,remove,shard,primary,routing,entry,add,shard,replica,routing,entry,build,new,index,shard,routing,table,builder,routing,table,remove,shard,initializing,replica,routing,add,shard,replica,routing,entry,build,set,string,in,sync,ids,with,replica,new,hash,set,in,sync,ids,in,sync,ids,with,replica,add,replica,routing,entry,allocation,id,get,id,primary,update,shard,state,primary,routing,entry,primary,get,primary,term,null,current,cluster,state,version,increment,and,get,in,sync,ids,with,replica,new,routing,table,collections,empty,set,replica,update,shard,state,replica,routing,entry,move,to,started,replica,get,primary,term,null,current,cluster,state,version,get,in,sync,ids,with,replica,new,routing,table,collections,empty,set
IndexShardTestCase -> protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException;1531910483;recovers a replica from the given primary *;protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException {_        recoverReplica(replica, primary,_            (r, sourceNode) -> new RecoveryTarget(r, sourceNode, recoveryListener, version -> {_            }),_            true, true)__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,index,shard,replica,index,shard,primary,boolean,start,replica,throws,ioexception,recover,replica,replica,primary,r,source,node,new,recovery,target,r,source,node,recovery,listener,version,true,true
IndexShardTestCase -> protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException;1532434432;recovers a replica from the given primary *;protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException {_        recoverReplica(replica, primary,_            (r, sourceNode) -> new RecoveryTarget(r, sourceNode, recoveryListener, version -> {_            }),_            true, true)__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,index,shard,replica,index,shard,primary,boolean,start,replica,throws,ioexception,recover,replica,replica,primary,r,source,node,new,recovery,target,r,source,node,recovery,listener,version,true,true
IndexShardTestCase -> protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException;1533295538;recovers a replica from the given primary *;protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException {_        recoverReplica(replica, primary,_            (r, sourceNode) -> new RecoveryTarget(r, sourceNode, recoveryListener, version -> {_            }),_            true, true)__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,index,shard,replica,index,shard,primary,boolean,start,replica,throws,ioexception,recover,replica,replica,primary,r,source,node,new,recovery,target,r,source,node,recovery,listener,version,true,true
IndexShardTestCase -> protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException;1535723122;recovers a replica from the given primary *;protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException {_        recoverReplica(replica, primary,_            (r, sourceNode) -> new RecoveryTarget(r, sourceNode, recoveryListener, version -> {_            }),_            true, true)__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,index,shard,replica,index,shard,primary,boolean,start,replica,throws,ioexception,recover,replica,replica,primary,r,source,node,new,recovery,target,r,source,node,recovery,listener,version,true,true
IndexShardTestCase -> protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException;1535965276;recovers a replica from the given primary *;protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException {_        recoverReplica(replica, primary,_            (r, sourceNode) -> new RecoveryTarget(r, sourceNode, recoveryListener, version -> {_            }),_            true, true)__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,index,shard,replica,index,shard,primary,boolean,start,replica,throws,ioexception,recover,replica,replica,primary,r,source,node,new,recovery,target,r,source,node,recovery,listener,version,true,true
IndexShardTestCase -> protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException;1536611444;recovers a replica from the given primary *;protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException {_        recoverReplica(replica, primary,_            (r, sourceNode) -> new RecoveryTarget(r, sourceNode, recoveryListener, version -> {_            }),_            true, true)__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,index,shard,replica,index,shard,primary,boolean,start,replica,throws,ioexception,recover,replica,replica,primary,r,source,node,new,recovery,target,r,source,node,recovery,listener,version,true,true
IndexShardTestCase -> protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException;1536828374;recovers a replica from the given primary *;protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException {_        recoverReplica(replica, primary,_            (r, sourceNode) -> new RecoveryTarget(r, sourceNode, recoveryListener, version -> {_            }),_            true, true)__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,index,shard,replica,index,shard,primary,boolean,start,replica,throws,ioexception,recover,replica,replica,primary,r,source,node,new,recovery,target,r,source,node,recovery,listener,version,true,true
IndexShardTestCase -> protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException;1537371806;recovers a replica from the given primary *;protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException {_        recoverReplica(replica, primary,_            (r, sourceNode) -> new RecoveryTarget(r, sourceNode, recoveryListener, version -> {_            }),_            true, true)__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,index,shard,replica,index,shard,primary,boolean,start,replica,throws,ioexception,recover,replica,replica,primary,r,source,node,new,recovery,target,r,source,node,recovery,listener,version,true,true
IndexShardTestCase -> protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException;1537806831;recovers a replica from the given primary *;protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException {_        recoverReplica(replica, primary,_            (r, sourceNode) -> new RecoveryTarget(r, sourceNode, recoveryListener, version -> {_            }),_            true, true)__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,index,shard,replica,index,shard,primary,boolean,start,replica,throws,ioexception,recover,replica,replica,primary,r,source,node,new,recovery,target,r,source,node,recovery,listener,version,true,true
IndexShardTestCase -> protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException;1538067637;recovers a replica from the given primary *;protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException {_        recoverReplica(replica, primary,_            (r, sourceNode) -> new RecoveryTarget(r, sourceNode, recoveryListener, version -> {_            }),_            true, true)__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,index,shard,replica,index,shard,primary,boolean,start,replica,throws,ioexception,recover,replica,replica,primary,r,source,node,new,recovery,target,r,source,node,recovery,listener,version,true,true
IndexShardTestCase -> protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException;1542697404;recovers a replica from the given primary *;protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException {_        recoverReplica(replica, primary,_            (r, sourceNode) -> new RecoveryTarget(r, sourceNode, recoveryListener, version -> {_            }),_            true, true)__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,index,shard,replica,index,shard,primary,boolean,start,replica,throws,ioexception,recover,replica,replica,primary,r,source,node,new,recovery,target,r,source,node,recovery,listener,version,true,true
IndexShardTestCase -> protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException;1544783963;recovers a replica from the given primary *;protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException {_        recoverReplica(replica, primary,_            (r, sourceNode) -> new RecoveryTarget(r, sourceNode, recoveryListener, version -> {_            }),_            true, true)__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,index,shard,replica,index,shard,primary,boolean,start,replica,throws,ioexception,recover,replica,replica,primary,r,source,node,new,recovery,target,r,source,node,recovery,listener,version,true,true
IndexShardTestCase -> protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException;1544893197;recovers a replica from the given primary *;protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException {_        recoverReplica(replica, primary,_            (r, sourceNode) -> new RecoveryTarget(r, sourceNode, recoveryListener, version -> {_            }),_            true, true)__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,index,shard,replica,index,shard,primary,boolean,start,replica,throws,ioexception,recover,replica,replica,primary,r,source,node,new,recovery,target,r,source,node,recovery,listener,version,true,true
IndexShardTestCase -> protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException;1545678410;recovers a replica from the given primary *;protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException {_        recoverReplica(replica, primary,_            (r, sourceNode) -> new RecoveryTarget(r, sourceNode, recoveryListener, version -> {_            }),_            true, true)__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,index,shard,replica,index,shard,primary,boolean,start,replica,throws,ioexception,recover,replica,replica,primary,r,source,node,new,recovery,target,r,source,node,recovery,listener,version,true,true
IndexShardTestCase -> protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException;1546927432;recovers a replica from the given primary *;protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException {_        recoverReplica(replica, primary,_            (r, sourceNode) -> new RecoveryTarget(r, sourceNode, recoveryListener, version -> {_            }),_            true, true)__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,index,shard,replica,index,shard,primary,boolean,start,replica,throws,ioexception,recover,replica,replica,primary,r,source,node,new,recovery,target,r,source,node,recovery,listener,version,true,true
IndexShardTestCase -> protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException;1547315388;recovers a replica from the given primary *;protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException {_        recoverReplica(replica, primary,_            (r, sourceNode) -> new RecoveryTarget(r, sourceNode, recoveryListener, version -> {_            }),_            true, true)__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,index,shard,replica,index,shard,primary,boolean,start,replica,throws,ioexception,recover,replica,replica,primary,r,source,node,new,recovery,target,r,source,node,recovery,listener,version,true,true
IndexShardTestCase -> protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException;1547496475;recovers a replica from the given primary *;protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException {_        recoverReplica(replica, primary,_            (r, sourceNode) -> new RecoveryTarget(r, sourceNode, recoveryListener, version -> {_            }),_            true, true)__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,index,shard,replica,index,shard,primary,boolean,start,replica,throws,ioexception,recover,replica,replica,primary,r,source,node,new,recovery,target,r,source,node,recovery,listener,version,true,true
IndexShardTestCase -> protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException;1547496886;recovers a replica from the given primary *;protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException {_        recoverReplica(replica, primary,_            (r, sourceNode) -> new RecoveryTarget(r, sourceNode, recoveryListener, version -> {_            }),_            true, true)__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,index,shard,replica,index,shard,primary,boolean,start,replica,throws,ioexception,recover,replica,replica,primary,r,source,node,new,recovery,target,r,source,node,recovery,listener,version,true,true
IndexShardTestCase -> protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException;1547520324;recovers a replica from the given primary *;protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException {_        recoverReplica(replica, primary,_            (r, sourceNode) -> new RecoveryTarget(r, sourceNode, recoveryListener, version -> {_            }),_            true, true)__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,index,shard,replica,index,shard,primary,boolean,start,replica,throws,ioexception,recover,replica,replica,primary,r,source,node,new,recovery,target,r,source,node,recovery,listener,version,true,true
IndexShardTestCase -> protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException;1547552901;recovers a replica from the given primary *;protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException {_        recoverReplica(replica, primary,_            (r, sourceNode) -> new RecoveryTarget(r, sourceNode, recoveryListener, version -> {_            }),_            true, startReplica)__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,index,shard,replica,index,shard,primary,boolean,start,replica,throws,ioexception,recover,replica,replica,primary,r,source,node,new,recovery,target,r,source,node,recovery,listener,version,true,start,replica
IndexShardTestCase -> protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException;1548593396;recovers a replica from the given primary *;protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException {_        recoverReplica(replica, primary,_            (r, sourceNode) -> new RecoveryTarget(r, sourceNode, recoveryListener, version -> {_            }),_            true, startReplica)__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,index,shard,replica,index,shard,primary,boolean,start,replica,throws,ioexception,recover,replica,replica,primary,r,source,node,new,recovery,target,r,source,node,recovery,listener,version,true,start,replica
IndexShardTestCase -> protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException;1549294529;recovers a replica from the given primary *;protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException {_        recoverReplica(replica, primary,_            (r, sourceNode) -> new RecoveryTarget(r, sourceNode, recoveryListener, version -> {_            }),_            true, startReplica)__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,index,shard,replica,index,shard,primary,boolean,start,replica,throws,ioexception,recover,replica,replica,primary,r,source,node,new,recovery,target,r,source,node,recovery,listener,version,true,start,replica
IndexShardTestCase -> protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException;1550668107;recovers a replica from the given primary *;protected void recoverReplica(IndexShard replica, IndexShard primary, boolean startReplica) throws IOException {_        recoverReplica(replica, primary,_            (r, sourceNode) -> new RecoveryTarget(r, sourceNode, recoveryListener, version -> {_            }),_            true, startReplica)__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,index,shard,replica,index,shard,primary,boolean,start,replica,throws,ioexception,recover,replica,replica,primary,r,source,node,new,recovery,target,r,source,node,recovery,listener,version,true,start,replica
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexingOperationListener... listeners)         throws IOException;1524684173;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to._@param routing                shard routing to use_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexingOperationListener... listeners)_        throws IOException {_        _        final ShardId shardId = routing.shardId()__        final NodeEnvironment.NodePath nodePath = new NodeEnvironment.NodePath(createTempDir())__        ShardPath shardPath = new ShardPath(false, nodePath.resolve(shardId), nodePath.resolve(shardId), shardId)__        return newShard(routing, shardPath, indexMetaData, indexSearcherWrapper, engineFactory, globalCheckpointSyncer,_            EMPTY_EVENT_LISTENER, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,indexing,operation,listener,listeners,throws,ioexception,final,shard,id,shard,id,routing,shard,id,final,node,environment,node,path,node,path,new,node,environment,node,path,create,temp,dir,shard,path,shard,path,new,shard,path,false,node,path,resolve,shard,id,node,path,resolve,shard,id,shard,id,return,new,shard,routing,shard,path,index,meta,data,index,searcher,wrapper,engine,factory,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexingOperationListener... listeners)         throws IOException;1525162917;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to._@param routing                shard routing to use_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexingOperationListener... listeners)_        throws IOException {_        _        final ShardId shardId = routing.shardId()__        final NodeEnvironment.NodePath nodePath = new NodeEnvironment.NodePath(createTempDir())__        ShardPath shardPath = new ShardPath(false, nodePath.resolve(shardId), nodePath.resolve(shardId), shardId)__        return newShard(routing, shardPath, indexMetaData, indexSearcherWrapper, engineFactory, globalCheckpointSyncer,_            EMPTY_EVENT_LISTENER, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,indexing,operation,listener,listeners,throws,ioexception,final,shard,id,shard,id,routing,shard,id,final,node,environment,node,path,node,path,new,node,environment,node,path,create,temp,dir,shard,path,shard,path,new,shard,path,false,node,path,resolve,shard,id,node,path,resolve,shard,id,shard,id,return,new,shard,routing,shard,path,index,meta,data,index,searcher,wrapper,engine,factory,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexingOperationListener... listeners)         throws IOException;1527583663;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to._@param routing                shard routing to use_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexingOperationListener... listeners)_        throws IOException {_        _        final ShardId shardId = routing.shardId()__        final NodeEnvironment.NodePath nodePath = new NodeEnvironment.NodePath(createTempDir())__        ShardPath shardPath = new ShardPath(false, nodePath.resolve(shardId), nodePath.resolve(shardId), shardId)__        return newShard(routing, shardPath, indexMetaData, indexSearcherWrapper, engineFactory, globalCheckpointSyncer,_            EMPTY_EVENT_LISTENER, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,indexing,operation,listener,listeners,throws,ioexception,final,shard,id,shard,id,routing,shard,id,final,node,environment,node,path,node,path,new,node,environment,node,path,create,temp,dir,shard,path,shard,path,new,shard,path,false,node,path,resolve,shard,id,node,path,resolve,shard,id,shard,id,return,new,shard,routing,shard,path,index,meta,data,index,searcher,wrapper,engine,factory,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexingOperationListener... listeners)         throws IOException;1528706846;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to._@param routing                shard routing to use_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexingOperationListener... listeners)_        throws IOException {_        _        final ShardId shardId = routing.shardId()__        final NodeEnvironment.NodePath nodePath = new NodeEnvironment.NodePath(createTempDir())__        ShardPath shardPath = new ShardPath(false, nodePath.resolve(shardId), nodePath.resolve(shardId), shardId)__        return newShard(routing, shardPath, indexMetaData, indexSearcherWrapper, engineFactory, globalCheckpointSyncer,_            EMPTY_EVENT_LISTENER, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,indexing,operation,listener,listeners,throws,ioexception,final,shard,id,shard,id,routing,shard,id,final,node,environment,node,path,node,path,new,node,environment,node,path,create,temp,dir,shard,path,shard,path,new,shard,path,false,node,path,resolve,shard,id,node,path,resolve,shard,id,shard,id,return,new,shard,routing,shard,path,index,meta,data,index,searcher,wrapper,engine,factory,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexingOperationListener... listeners)         throws IOException;1531179852;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to._@param routing                shard routing to use_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexingOperationListener... listeners)_        throws IOException {_        _        final ShardId shardId = routing.shardId()__        final NodeEnvironment.NodePath nodePath = new NodeEnvironment.NodePath(createTempDir())__        ShardPath shardPath = new ShardPath(false, nodePath.resolve(shardId), nodePath.resolve(shardId), shardId)__        return newShard(routing, shardPath, indexMetaData, indexSearcherWrapper, engineFactory, globalCheckpointSyncer,_            EMPTY_EVENT_LISTENER, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,indexing,operation,listener,listeners,throws,ioexception,final,shard,id,shard,id,routing,shard,id,final,node,environment,node,path,node,path,new,node,environment,node,path,create,temp,dir,shard,path,shard,path,new,shard,path,false,node,path,resolve,shard,id,node,path,resolve,shard,id,shard,id,return,new,shard,routing,shard,path,index,meta,data,index,searcher,wrapper,engine,factory,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexingOperationListener... listeners)         throws IOException;1531910483;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to._@param routing                shard routing to use_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexingOperationListener... listeners)_        throws IOException {_        _        final ShardId shardId = routing.shardId()__        final NodeEnvironment.NodePath nodePath = new NodeEnvironment.NodePath(createTempDir())__        ShardPath shardPath = new ShardPath(false, nodePath.resolve(shardId), nodePath.resolve(shardId), shardId)__        return newShard(routing, shardPath, indexMetaData, indexSearcherWrapper, engineFactory, globalCheckpointSyncer,_            EMPTY_EVENT_LISTENER, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,indexing,operation,listener,listeners,throws,ioexception,final,shard,id,shard,id,routing,shard,id,final,node,environment,node,path,node,path,new,node,environment,node,path,create,temp,dir,shard,path,shard,path,new,shard,path,false,node,path,resolve,shard,id,node,path,resolve,shard,id,shard,id,return,new,shard,routing,shard,path,index,meta,data,index,searcher,wrapper,engine,factory,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexingOperationListener... listeners)         throws IOException;1532434432;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to._@param routing                shard routing to use_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexingOperationListener... listeners)_        throws IOException {_        _        final ShardId shardId = routing.shardId()__        final NodeEnvironment.NodePath nodePath = new NodeEnvironment.NodePath(createTempDir())__        ShardPath shardPath = new ShardPath(false, nodePath.resolve(shardId), nodePath.resolve(shardId), shardId)__        return newShard(routing, shardPath, indexMetaData, null, indexSearcherWrapper, engineFactory, globalCheckpointSyncer,_            EMPTY_EVENT_LISTENER, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,indexing,operation,listener,listeners,throws,ioexception,final,shard,id,shard,id,routing,shard,id,final,node,environment,node,path,node,path,new,node,environment,node,path,create,temp,dir,shard,path,shard,path,new,shard,path,false,node,path,resolve,shard,id,node,path,resolve,shard,id,shard,id,return,new,shard,routing,shard,path,index,meta,data,null,index,searcher,wrapper,engine,factory,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexingOperationListener... listeners)         throws IOException;1533295538;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to._@param routing                shard routing to use_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexingOperationListener... listeners)_        throws IOException {_        _        final ShardId shardId = routing.shardId()__        final NodeEnvironment.NodePath nodePath = new NodeEnvironment.NodePath(createTempDir())__        ShardPath shardPath = new ShardPath(false, nodePath.resolve(shardId), nodePath.resolve(shardId), shardId)__        return newShard(routing, shardPath, indexMetaData, null, indexSearcherWrapper, engineFactory, globalCheckpointSyncer,_            EMPTY_EVENT_LISTENER, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,indexing,operation,listener,listeners,throws,ioexception,final,shard,id,shard,id,routing,shard,id,final,node,environment,node,path,node,path,new,node,environment,node,path,create,temp,dir,shard,path,shard,path,new,shard,path,false,node,path,resolve,shard,id,node,path,resolve,shard,id,shard,id,return,new,shard,routing,shard,path,index,meta,data,null,index,searcher,wrapper,engine,factory,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexingOperationListener... listeners)         throws IOException;1535723122;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to._@param routing                shard routing to use_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexingOperationListener... listeners)_        throws IOException {_        _        final ShardId shardId = routing.shardId()__        final NodeEnvironment.NodePath nodePath = new NodeEnvironment.NodePath(createTempDir())__        ShardPath shardPath = new ShardPath(false, nodePath.resolve(shardId), nodePath.resolve(shardId), shardId)__        return newShard(routing, shardPath, indexMetaData, null, indexSearcherWrapper, engineFactory, globalCheckpointSyncer,_            EMPTY_EVENT_LISTENER, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,indexing,operation,listener,listeners,throws,ioexception,final,shard,id,shard,id,routing,shard,id,final,node,environment,node,path,node,path,new,node,environment,node,path,create,temp,dir,shard,path,shard,path,new,shard,path,false,node,path,resolve,shard,id,node,path,resolve,shard,id,shard,id,return,new,shard,routing,shard,path,index,meta,data,null,index,searcher,wrapper,engine,factory,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexingOperationListener... listeners)         throws IOException;1535965276;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to._@param routing                shard routing to use_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexingOperationListener... listeners)_        throws IOException {_        _        final ShardId shardId = routing.shardId()__        final NodeEnvironment.NodePath nodePath = new NodeEnvironment.NodePath(createTempDir())__        ShardPath shardPath = new ShardPath(false, nodePath.resolve(shardId), nodePath.resolve(shardId), shardId)__        return newShard(routing, shardPath, indexMetaData, null, indexSearcherWrapper, engineFactory, globalCheckpointSyncer,_            EMPTY_EVENT_LISTENER, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,indexing,operation,listener,listeners,throws,ioexception,final,shard,id,shard,id,routing,shard,id,final,node,environment,node,path,node,path,new,node,environment,node,path,create,temp,dir,shard,path,shard,path,new,shard,path,false,node,path,resolve,shard,id,node,path,resolve,shard,id,shard,id,return,new,shard,routing,shard,path,index,meta,data,null,index,searcher,wrapper,engine,factory,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexingOperationListener... listeners)         throws IOException;1536611444;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to._@param routing                shard routing to use_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexingOperationListener... listeners)_        throws IOException {_        _        final ShardId shardId = routing.shardId()__        final NodeEnvironment.NodePath nodePath = new NodeEnvironment.NodePath(createTempDir())__        ShardPath shardPath = new ShardPath(false, nodePath.resolve(shardId), nodePath.resolve(shardId), shardId)__        return newShard(routing, shardPath, indexMetaData, null, indexSearcherWrapper, engineFactory, globalCheckpointSyncer,_            EMPTY_EVENT_LISTENER, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,indexing,operation,listener,listeners,throws,ioexception,final,shard,id,shard,id,routing,shard,id,final,node,environment,node,path,node,path,new,node,environment,node,path,create,temp,dir,shard,path,shard,path,new,shard,path,false,node,path,resolve,shard,id,node,path,resolve,shard,id,shard,id,return,new,shard,routing,shard,path,index,meta,data,null,index,searcher,wrapper,engine,factory,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexingOperationListener... listeners)         throws IOException;1536828374;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to._@param routing                shard routing to use_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexingOperationListener... listeners)_        throws IOException {_        _        final ShardId shardId = routing.shardId()__        final NodeEnvironment.NodePath nodePath = new NodeEnvironment.NodePath(createTempDir())__        ShardPath shardPath = new ShardPath(false, nodePath.resolve(shardId), nodePath.resolve(shardId), shardId)__        return newShard(routing, shardPath, indexMetaData, null, indexSearcherWrapper, engineFactory, globalCheckpointSyncer,_            EMPTY_EVENT_LISTENER, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,indexing,operation,listener,listeners,throws,ioexception,final,shard,id,shard,id,routing,shard,id,final,node,environment,node,path,node,path,new,node,environment,node,path,create,temp,dir,shard,path,shard,path,new,shard,path,false,node,path,resolve,shard,id,node,path,resolve,shard,id,shard,id,return,new,shard,routing,shard,path,index,meta,data,null,index,searcher,wrapper,engine,factory,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexingOperationListener... listeners)         throws IOException;1537371806;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to._@param routing                shard routing to use_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexingOperationListener... listeners)_        throws IOException {_        _        final ShardId shardId = routing.shardId()__        final NodeEnvironment.NodePath nodePath = new NodeEnvironment.NodePath(createTempDir())__        ShardPath shardPath = new ShardPath(false, nodePath.resolve(shardId), nodePath.resolve(shardId), shardId)__        return newShard(routing, shardPath, indexMetaData, null, indexSearcherWrapper, engineFactory, globalCheckpointSyncer,_            EMPTY_EVENT_LISTENER, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,indexing,operation,listener,listeners,throws,ioexception,final,shard,id,shard,id,routing,shard,id,final,node,environment,node,path,node,path,new,node,environment,node,path,create,temp,dir,shard,path,shard,path,new,shard,path,false,node,path,resolve,shard,id,node,path,resolve,shard,id,shard,id,return,new,shard,routing,shard,path,index,meta,data,null,index,searcher,wrapper,engine,factory,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexingOperationListener... listeners)         throws IOException;1537806831;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to._@param routing                shard routing to use_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexingOperationListener... listeners)_        throws IOException {_        _        final ShardId shardId = routing.shardId()__        final NodeEnvironment.NodePath nodePath = new NodeEnvironment.NodePath(createTempDir())__        ShardPath shardPath = new ShardPath(false, nodePath.resolve(shardId), nodePath.resolve(shardId), shardId)__        return newShard(routing, shardPath, indexMetaData, null, indexSearcherWrapper, engineFactory, globalCheckpointSyncer,_            EMPTY_EVENT_LISTENER, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,indexing,operation,listener,listeners,throws,ioexception,final,shard,id,shard,id,routing,shard,id,final,node,environment,node,path,node,path,new,node,environment,node,path,create,temp,dir,shard,path,shard,path,new,shard,path,false,node,path,resolve,shard,id,node,path,resolve,shard,id,shard,id,return,new,shard,routing,shard,path,index,meta,data,null,index,searcher,wrapper,engine,factory,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexingOperationListener... listeners)         throws IOException;1538067637;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to._@param routing                shard routing to use_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexingOperationListener... listeners)_        throws IOException {_        _        final ShardId shardId = routing.shardId()__        final NodeEnvironment.NodePath nodePath = new NodeEnvironment.NodePath(createTempDir())__        ShardPath shardPath = new ShardPath(false, nodePath.resolve(shardId), nodePath.resolve(shardId), shardId)__        return newShard(routing, shardPath, indexMetaData, null, indexSearcherWrapper, engineFactory, globalCheckpointSyncer,_            EMPTY_EVENT_LISTENER, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,indexing,operation,listener,listeners,throws,ioexception,final,shard,id,shard,id,routing,shard,id,final,node,environment,node,path,node,path,new,node,environment,node,path,create,temp,dir,shard,path,shard,path,new,shard,path,false,node,path,resolve,shard,id,node,path,resolve,shard,id,shard,id,return,new,shard,routing,shard,path,index,meta,data,null,index,searcher,wrapper,engine,factory,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexingOperationListener... listeners)         throws IOException;1542697404;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to._@param routing                shard routing to use_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexingOperationListener... listeners)_        throws IOException {_        _        final ShardId shardId = routing.shardId()__        final NodeEnvironment.NodePath nodePath = new NodeEnvironment.NodePath(createTempDir())__        ShardPath shardPath = new ShardPath(false, nodePath.resolve(shardId), nodePath.resolve(shardId), shardId)__        return newShard(routing, shardPath, indexMetaData, null, indexSearcherWrapper, engineFactory, globalCheckpointSyncer,_            EMPTY_EVENT_LISTENER, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,indexing,operation,listener,listeners,throws,ioexception,final,shard,id,shard,id,routing,shard,id,final,node,environment,node,path,node,path,new,node,environment,node,path,create,temp,dir,shard,path,shard,path,new,shard,path,false,node,path,resolve,shard,id,node,path,resolve,shard,id,shard,id,return,new,shard,routing,shard,path,index,meta,data,null,index,searcher,wrapper,engine,factory,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexingOperationListener... listeners)         throws IOException;1544783963;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to._@param routing                shard routing to use_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexingOperationListener... listeners)_        throws IOException {_        _        final ShardId shardId = routing.shardId()__        final NodeEnvironment.NodePath nodePath = new NodeEnvironment.NodePath(createTempDir())__        ShardPath shardPath = new ShardPath(false, nodePath.resolve(shardId), nodePath.resolve(shardId), shardId)__        return newShard(routing, shardPath, indexMetaData, null, indexSearcherWrapper, engineFactory, globalCheckpointSyncer,_            EMPTY_EVENT_LISTENER, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,indexing,operation,listener,listeners,throws,ioexception,final,shard,id,shard,id,routing,shard,id,final,node,environment,node,path,node,path,new,node,environment,node,path,create,temp,dir,shard,path,shard,path,new,shard,path,false,node,path,resolve,shard,id,node,path,resolve,shard,id,shard,id,return,new,shard,routing,shard,path,index,meta,data,null,index,searcher,wrapper,engine,factory,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexingOperationListener... listeners)         throws IOException;1544893197;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to._@param routing                shard routing to use_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexingOperationListener... listeners)_        throws IOException {_        _        final ShardId shardId = routing.shardId()__        final NodeEnvironment.NodePath nodePath = new NodeEnvironment.NodePath(createTempDir())__        ShardPath shardPath = new ShardPath(false, nodePath.resolve(shardId), nodePath.resolve(shardId), shardId)__        return newShard(routing, shardPath, indexMetaData, null, indexSearcherWrapper, engineFactory, globalCheckpointSyncer,_            EMPTY_EVENT_LISTENER, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,indexing,operation,listener,listeners,throws,ioexception,final,shard,id,shard,id,routing,shard,id,final,node,environment,node,path,node,path,new,node,environment,node,path,create,temp,dir,shard,path,shard,path,new,shard,path,false,node,path,resolve,shard,id,node,path,resolve,shard,id,shard,id,return,new,shard,routing,shard,path,index,meta,data,null,index,searcher,wrapper,engine,factory,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexingOperationListener... listeners)         throws IOException;1545678410;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to._@param routing                shard routing to use_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexingOperationListener... listeners)_        throws IOException {_        _        final ShardId shardId = routing.shardId()__        final NodeEnvironment.NodePath nodePath = new NodeEnvironment.NodePath(createTempDir())__        ShardPath shardPath = new ShardPath(false, nodePath.resolve(shardId), nodePath.resolve(shardId), shardId)__        return newShard(routing, shardPath, indexMetaData, null, indexSearcherWrapper, engineFactory, globalCheckpointSyncer,_            EMPTY_EVENT_LISTENER, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,indexing,operation,listener,listeners,throws,ioexception,final,shard,id,shard,id,routing,shard,id,final,node,environment,node,path,node,path,new,node,environment,node,path,create,temp,dir,shard,path,shard,path,new,shard,path,false,node,path,resolve,shard,id,node,path,resolve,shard,id,shard,id,return,new,shard,routing,shard,path,index,meta,data,null,index,searcher,wrapper,engine,factory,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexingOperationListener... listeners)         throws IOException;1546927432;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to._@param routing                shard routing to use_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexingOperationListener... listeners)_        throws IOException {_        _        final ShardId shardId = routing.shardId()__        final NodeEnvironment.NodePath nodePath = new NodeEnvironment.NodePath(createTempDir())__        ShardPath shardPath = new ShardPath(false, nodePath.resolve(shardId), nodePath.resolve(shardId), shardId)__        return newShard(routing, shardPath, indexMetaData, null, indexSearcherWrapper, engineFactory, globalCheckpointSyncer,_            EMPTY_EVENT_LISTENER, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,indexing,operation,listener,listeners,throws,ioexception,final,shard,id,shard,id,routing,shard,id,final,node,environment,node,path,node,path,new,node,environment,node,path,create,temp,dir,shard,path,shard,path,new,shard,path,false,node,path,resolve,shard,id,node,path,resolve,shard,id,shard,id,return,new,shard,routing,shard,path,index,meta,data,null,index,searcher,wrapper,engine,factory,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexingOperationListener... listeners)         throws IOException;1547315388;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to._@param routing                shard routing to use_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexingOperationListener... listeners)_        throws IOException {_        _        final ShardId shardId = routing.shardId()__        final NodeEnvironment.NodePath nodePath = new NodeEnvironment.NodePath(createTempDir())__        ShardPath shardPath = new ShardPath(false, nodePath.resolve(shardId), nodePath.resolve(shardId), shardId)__        return newShard(routing, shardPath, indexMetaData, null, indexSearcherWrapper, engineFactory, globalCheckpointSyncer,_            EMPTY_EVENT_LISTENER, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,indexing,operation,listener,listeners,throws,ioexception,final,shard,id,shard,id,routing,shard,id,final,node,environment,node,path,node,path,new,node,environment,node,path,create,temp,dir,shard,path,shard,path,new,shard,path,false,node,path,resolve,shard,id,node,path,resolve,shard,id,shard,id,return,new,shard,routing,shard,path,index,meta,data,null,index,searcher,wrapper,engine,factory,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexingOperationListener... listeners)         throws IOException;1547496475;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to._@param routing                shard routing to use_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexingOperationListener... listeners)_        throws IOException {_        _        final ShardId shardId = routing.shardId()__        final NodeEnvironment.NodePath nodePath = new NodeEnvironment.NodePath(createTempDir())__        ShardPath shardPath = new ShardPath(false, nodePath.resolve(shardId), nodePath.resolve(shardId), shardId)__        return newShard(routing, shardPath, indexMetaData, null, indexSearcherWrapper, engineFactory, globalCheckpointSyncer,_            EMPTY_EVENT_LISTENER, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,indexing,operation,listener,listeners,throws,ioexception,final,shard,id,shard,id,routing,shard,id,final,node,environment,node,path,node,path,new,node,environment,node,path,create,temp,dir,shard,path,shard,path,new,shard,path,false,node,path,resolve,shard,id,node,path,resolve,shard,id,shard,id,return,new,shard,routing,shard,path,index,meta,data,null,index,searcher,wrapper,engine,factory,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexingOperationListener... listeners)         throws IOException;1547496886;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to._@param routing                shard routing to use_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexingOperationListener... listeners)_        throws IOException {_        _        final ShardId shardId = routing.shardId()__        final NodeEnvironment.NodePath nodePath = new NodeEnvironment.NodePath(createTempDir())__        ShardPath shardPath = new ShardPath(false, nodePath.resolve(shardId), nodePath.resolve(shardId), shardId)__        return newShard(routing, shardPath, indexMetaData, null, indexSearcherWrapper, engineFactory, globalCheckpointSyncer,_            EMPTY_EVENT_LISTENER, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,indexing,operation,listener,listeners,throws,ioexception,final,shard,id,shard,id,routing,shard,id,final,node,environment,node,path,node,path,new,node,environment,node,path,create,temp,dir,shard,path,shard,path,new,shard,path,false,node,path,resolve,shard,id,node,path,resolve,shard,id,shard,id,return,new,shard,routing,shard,path,index,meta,data,null,index,searcher,wrapper,engine,factory,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexingOperationListener... listeners)         throws IOException;1547520324;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to._@param routing                shard routing to use_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexingOperationListener... listeners)_        throws IOException {_        _        final ShardId shardId = routing.shardId()__        final NodeEnvironment.NodePath nodePath = new NodeEnvironment.NodePath(createTempDir())__        ShardPath shardPath = new ShardPath(false, nodePath.resolve(shardId), nodePath.resolve(shardId), shardId)__        return newShard(routing, shardPath, indexMetaData, null, indexSearcherWrapper, engineFactory, globalCheckpointSyncer,_            EMPTY_EVENT_LISTENER, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,indexing,operation,listener,listeners,throws,ioexception,final,shard,id,shard,id,routing,shard,id,final,node,environment,node,path,node,path,new,node,environment,node,path,create,temp,dir,shard,path,shard,path,new,shard,path,false,node,path,resolve,shard,id,node,path,resolve,shard,id,shard,id,return,new,shard,routing,shard,path,index,meta,data,null,index,searcher,wrapper,engine,factory,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexingOperationListener... listeners)         throws IOException;1547552901;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to._@param routing                shard routing to use_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexingOperationListener... listeners)_        throws IOException {_        _        final ShardId shardId = routing.shardId()__        final NodeEnvironment.NodePath nodePath = new NodeEnvironment.NodePath(createTempDir())__        ShardPath shardPath = new ShardPath(false, nodePath.resolve(shardId), nodePath.resolve(shardId), shardId)__        return newShard(routing, shardPath, indexMetaData, null, indexSearcherWrapper, engineFactory, globalCheckpointSyncer,_            EMPTY_EVENT_LISTENER, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,indexing,operation,listener,listeners,throws,ioexception,final,shard,id,shard,id,routing,shard,id,final,node,environment,node,path,node,path,new,node,environment,node,path,create,temp,dir,shard,path,shard,path,new,shard,path,false,node,path,resolve,shard,id,node,path,resolve,shard,id,shard,id,return,new,shard,routing,shard,path,index,meta,data,null,index,searcher,wrapper,engine,factory,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexingOperationListener... listeners)         throws IOException;1548593396;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to._@param routing                shard routing to use_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexingOperationListener... listeners)_        throws IOException {_        _        final ShardId shardId = routing.shardId()__        final NodeEnvironment.NodePath nodePath = new NodeEnvironment.NodePath(createTempDir())__        ShardPath shardPath = new ShardPath(false, nodePath.resolve(shardId), nodePath.resolve(shardId), shardId)__        return newShard(routing, shardPath, indexMetaData, null, indexSearcherWrapper, engineFactory, globalCheckpointSyncer,_            EMPTY_EVENT_LISTENER, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,indexing,operation,listener,listeners,throws,ioexception,final,shard,id,shard,id,routing,shard,id,final,node,environment,node,path,node,path,new,node,environment,node,path,create,temp,dir,shard,path,shard,path,new,shard,path,false,node,path,resolve,shard,id,node,path,resolve,shard,id,shard,id,return,new,shard,routing,shard,path,index,meta,data,null,index,searcher,wrapper,engine,factory,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexingOperationListener... listeners)         throws IOException;1549294529;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to._@param routing                shard routing to use_@param indexMetaData          indexMetaData for the shard, including any mapping_@param indexSearcherWrapper   an optional wrapper to be used during searchers_@param globalCheckpointSyncer callback for syncing global checkpoints_@param listeners              an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexingOperationListener... listeners)_        throws IOException {_        _        final ShardId shardId = routing.shardId()__        final NodeEnvironment.NodePath nodePath = new NodeEnvironment.NodePath(createTempDir())__        ShardPath shardPath = new ShardPath(false, nodePath.resolve(shardId), nodePath.resolve(shardId), shardId)__        return newShard(routing, shardPath, indexMetaData, null, indexSearcherWrapper, engineFactory, globalCheckpointSyncer,_            EMPTY_EVENT_LISTENER, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,indexing,operation,listener,listeners,throws,ioexception,final,shard,id,shard,id,routing,shard,id,final,node,environment,node,path,node,path,new,node,environment,node,path,create,temp,dir,shard,path,shard,path,new,shard,path,false,node,path,resolve,shard,id,node,path,resolve,shard,id,shard,id,return,new,shard,routing,shard,path,index,meta,data,null,index,searcher,wrapper,engine,factory,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard newShard(             ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)         throws IOException;1535723122;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to.__@param routing       shard routing to use_@param indexMetaData indexMetaData for the shard, including any mapping_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)_        throws IOException {_        return newShard(routing, indexMetaData, null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,return,new,shard,routing,index,meta,data,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)         throws IOException;1535965276;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to.__@param routing       shard routing to use_@param indexMetaData indexMetaData for the shard, including any mapping_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)_        throws IOException {_        return newShard(routing, indexMetaData, null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,return,new,shard,routing,index,meta,data,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)         throws IOException;1536611444;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to.__@param routing       shard routing to use_@param indexMetaData indexMetaData for the shard, including any mapping_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)_        throws IOException {_        return newShard(routing, indexMetaData, null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,return,new,shard,routing,index,meta,data,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)         throws IOException;1536828374;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to.__@param routing       shard routing to use_@param indexMetaData indexMetaData for the shard, including any mapping_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)_        throws IOException {_        return newShard(routing, indexMetaData, null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,return,new,shard,routing,index,meta,data,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)         throws IOException;1537371806;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to.__@param routing       shard routing to use_@param indexMetaData indexMetaData for the shard, including any mapping_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)_        throws IOException {_        return newShard(routing, indexMetaData, null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,return,new,shard,routing,index,meta,data,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)         throws IOException;1537806831;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to.__@param routing       shard routing to use_@param indexMetaData indexMetaData for the shard, including any mapping_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)_        throws IOException {_        return newShard(routing, indexMetaData, null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,return,new,shard,routing,index,meta,data,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)         throws IOException;1538067637;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to.__@param routing       shard routing to use_@param indexMetaData indexMetaData for the shard, including any mapping_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)_        throws IOException {_        return newShard(routing, indexMetaData, null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,return,new,shard,routing,index,meta,data,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)         throws IOException;1542697404;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to.__@param routing       shard routing to use_@param indexMetaData indexMetaData for the shard, including any mapping_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)_        throws IOException {_        return newShard(routing, indexMetaData, null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,return,new,shard,routing,index,meta,data,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)         throws IOException;1544783963;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to.__@param routing       shard routing to use_@param indexMetaData indexMetaData for the shard, including any mapping_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)_        throws IOException {_        return newShard(routing, indexMetaData, null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,return,new,shard,routing,index,meta,data,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)         throws IOException;1544893197;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to.__@param routing       shard routing to use_@param indexMetaData indexMetaData for the shard, including any mapping_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)_        throws IOException {_        return newShard(routing, indexMetaData, null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,return,new,shard,routing,index,meta,data,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)         throws IOException;1545678410;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to.__@param routing       shard routing to use_@param indexMetaData indexMetaData for the shard, including any mapping_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)_        throws IOException {_        return newShard(routing, indexMetaData, null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,return,new,shard,routing,index,meta,data,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)         throws IOException;1546927432;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to.__@param routing       shard routing to use_@param indexMetaData indexMetaData for the shard, including any mapping_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)_        throws IOException {_        return newShard(routing, indexMetaData, null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,return,new,shard,routing,index,meta,data,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)         throws IOException;1547315388;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to.__@param routing       shard routing to use_@param indexMetaData indexMetaData for the shard, including any mapping_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)_        throws IOException {_        return newShard(routing, indexMetaData, null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,return,new,shard,routing,index,meta,data,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)         throws IOException;1547496475;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to.__@param routing       shard routing to use_@param indexMetaData indexMetaData for the shard, including any mapping_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)_        throws IOException {_        return newShard(routing, indexMetaData, null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,return,new,shard,routing,index,meta,data,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)         throws IOException;1547496886;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to.__@param routing       shard routing to use_@param indexMetaData indexMetaData for the shard, including any mapping_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)_        throws IOException {_        return newShard(routing, indexMetaData, null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,return,new,shard,routing,index,meta,data,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)         throws IOException;1547520324;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to.__@param routing       shard routing to use_@param indexMetaData indexMetaData for the shard, including any mapping_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)_        throws IOException {_        return newShard(routing, indexMetaData, null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,return,new,shard,routing,index,meta,data,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)         throws IOException;1547552901;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to.__@param routing       shard routing to use_@param indexMetaData indexMetaData for the shard, including any mapping_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)_        throws IOException {_        return newShard(routing, indexMetaData, null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,return,new,shard,routing,index,meta,data,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)         throws IOException;1548593396;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to.__@param routing       shard routing to use_@param indexMetaData indexMetaData for the shard, including any mapping_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)_        throws IOException {_        return newShard(routing, indexMetaData, null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,return,new,shard,routing,index,meta,data,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)         throws IOException;1549294529;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to.__@param routing       shard routing to use_@param indexMetaData indexMetaData for the shard, including any mapping_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)_        throws IOException {_        return newShard(routing, indexMetaData, null, engineFactory, () -> {}, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,return,new,shard,routing,index,meta,data,null,engine,factory,listeners
IndexShardTestCase -> protected IndexShard newShard(             ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)         throws IOException;1550668107;creates a new initializing shard. The shard will will be put in its proper path under the_current node id the shard is assigned to.__@param routing       shard routing to use_@param indexMetaData indexMetaData for the shard, including any mapping_@param listeners     an optional set of listeners to add to the shard;protected IndexShard newShard(_            ShardRouting routing, IndexMetaData indexMetaData, EngineFactory engineFactory, IndexingOperationListener... listeners)_        throws IOException {_        return newShard(routing, indexMetaData, null, engineFactory, () -> {}, RetentionLeaseSyncer.EMPTY, listeners)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,current,node,id,the,shard,is,assigned,to,param,routing,shard,routing,to,use,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,index,meta,data,index,meta,data,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,return,new,shard,routing,index,meta,data,null,engine,factory,retention,lease,syncer,empty,listeners
IndexShardTestCase -> protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException;1535965276;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException {_        return newShard(primary, settings, new InternalEngineFactory())__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,final,boolean,primary,final,settings,settings,throws,ioexception,return,new,shard,primary,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException;1536611444;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException {_        return newShard(primary, settings, new InternalEngineFactory())__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,final,boolean,primary,final,settings,settings,throws,ioexception,return,new,shard,primary,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException;1536828374;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException {_        return newShard(primary, settings, new InternalEngineFactory())__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,final,boolean,primary,final,settings,settings,throws,ioexception,return,new,shard,primary,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException;1537371806;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException {_        return newShard(primary, settings, new InternalEngineFactory())__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,final,boolean,primary,final,settings,settings,throws,ioexception,return,new,shard,primary,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException;1537806831;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException {_        return newShard(primary, settings, new InternalEngineFactory())__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,final,boolean,primary,final,settings,settings,throws,ioexception,return,new,shard,primary,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException;1538067637;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException {_        return newShard(primary, settings, new InternalEngineFactory())__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,final,boolean,primary,final,settings,settings,throws,ioexception,return,new,shard,primary,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException;1542697404;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException {_        return newShard(primary, settings, new InternalEngineFactory())__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,final,boolean,primary,final,settings,settings,throws,ioexception,return,new,shard,primary,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException;1544783963;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException {_        return newShard(primary, settings, new InternalEngineFactory())__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,final,boolean,primary,final,settings,settings,throws,ioexception,return,new,shard,primary,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException;1544893197;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException {_        return newShard(primary, settings, new InternalEngineFactory())__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,final,boolean,primary,final,settings,settings,throws,ioexception,return,new,shard,primary,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException;1545678410;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException {_        return newShard(primary, settings, new InternalEngineFactory())__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,final,boolean,primary,final,settings,settings,throws,ioexception,return,new,shard,primary,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException;1546927432;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException {_        return newShard(primary, settings, new InternalEngineFactory())__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,final,boolean,primary,final,settings,settings,throws,ioexception,return,new,shard,primary,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException;1547315388;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException {_        return newShard(primary, settings, new InternalEngineFactory())__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,final,boolean,primary,final,settings,settings,throws,ioexception,return,new,shard,primary,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException;1547496475;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException {_        return newShard(primary, settings, new InternalEngineFactory())__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,final,boolean,primary,final,settings,settings,throws,ioexception,return,new,shard,primary,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException;1547496886;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException {_        return newShard(primary, settings, new InternalEngineFactory())__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,final,boolean,primary,final,settings,settings,throws,ioexception,return,new,shard,primary,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException;1547520324;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException {_        return newShard(primary, settings, new InternalEngineFactory())__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,final,boolean,primary,final,settings,settings,throws,ioexception,return,new,shard,primary,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException;1547552901;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException {_        return newShard(primary, settings, new InternalEngineFactory())__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,final,boolean,primary,final,settings,settings,throws,ioexception,return,new,shard,primary,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException;1548593396;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException {_        return newShard(primary, settings, new InternalEngineFactory())__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,final,boolean,primary,final,settings,settings,throws,ioexception,return,new,shard,primary,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException;1549294529;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException {_        return newShard(primary, settings, new InternalEngineFactory())__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,final,boolean,primary,final,settings,settings,throws,ioexception,return,new,shard,primary,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException;1550668107;Creates a new initializing shard. The shard will have its own unique data path.__@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica (ready to recover from_another shard);protected IndexShard newShard(final boolean primary, final Settings settings) throws IOException {_        return newShard(primary, settings, new InternalEngineFactory())__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,final,boolean,primary,final,settings,settings,throws,ioexception,return,new,shard,primary,settings,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,                                          boolean primary) throws IOException;1535965276;creates a new empty shard and starts it.__@param shardFunction shard factory function_@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,_                                         boolean primary) throws IOException {_        IndexShard shard = shardFunction.apply(primary)__        if (primary) {_            recoverShardFromStore(shard)__        } else {_            recoveryEmptyReplica(shard, true)__        }_        return shard__    };creates,a,new,empty,shard,and,starts,it,param,shard,function,shard,factory,function,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,checked,function,boolean,index,shard,ioexception,shard,function,boolean,primary,throws,ioexception,index,shard,shard,shard,function,apply,primary,if,primary,recover,shard,from,store,shard,else,recovery,empty,replica,shard,true,return,shard
IndexShardTestCase -> protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,                                          boolean primary) throws IOException;1536611444;creates a new empty shard and starts it.__@param shardFunction shard factory function_@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,_                                         boolean primary) throws IOException {_        IndexShard shard = shardFunction.apply(primary)__        if (primary) {_            recoverShardFromStore(shard)__        } else {_            recoveryEmptyReplica(shard, true)__        }_        return shard__    };creates,a,new,empty,shard,and,starts,it,param,shard,function,shard,factory,function,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,checked,function,boolean,index,shard,ioexception,shard,function,boolean,primary,throws,ioexception,index,shard,shard,shard,function,apply,primary,if,primary,recover,shard,from,store,shard,else,recovery,empty,replica,shard,true,return,shard
IndexShardTestCase -> protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,                                          boolean primary) throws IOException;1536828374;creates a new empty shard and starts it.__@param shardFunction shard factory function_@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,_                                         boolean primary) throws IOException {_        IndexShard shard = shardFunction.apply(primary)__        if (primary) {_            recoverShardFromStore(shard)__        } else {_            recoveryEmptyReplica(shard, true)__        }_        return shard__    };creates,a,new,empty,shard,and,starts,it,param,shard,function,shard,factory,function,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,checked,function,boolean,index,shard,ioexception,shard,function,boolean,primary,throws,ioexception,index,shard,shard,shard,function,apply,primary,if,primary,recover,shard,from,store,shard,else,recovery,empty,replica,shard,true,return,shard
IndexShardTestCase -> protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,                                          boolean primary) throws IOException;1537371806;creates a new empty shard and starts it.__@param shardFunction shard factory function_@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,_                                         boolean primary) throws IOException {_        IndexShard shard = shardFunction.apply(primary)__        if (primary) {_            recoverShardFromStore(shard)__        } else {_            recoveryEmptyReplica(shard, true)__        }_        return shard__    };creates,a,new,empty,shard,and,starts,it,param,shard,function,shard,factory,function,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,checked,function,boolean,index,shard,ioexception,shard,function,boolean,primary,throws,ioexception,index,shard,shard,shard,function,apply,primary,if,primary,recover,shard,from,store,shard,else,recovery,empty,replica,shard,true,return,shard
IndexShardTestCase -> protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,                                          boolean primary) throws IOException;1537806831;creates a new empty shard and starts it.__@param shardFunction shard factory function_@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,_                                         boolean primary) throws IOException {_        IndexShard shard = shardFunction.apply(primary)__        if (primary) {_            recoverShardFromStore(shard)__            assertThat(shard.getMaxSeqNoOfUpdatesOrDeletes(), equalTo(shard.seqNoStats().getMaxSeqNo()))__        } else {_            recoveryEmptyReplica(shard, true)__        }_        return shard__    };creates,a,new,empty,shard,and,starts,it,param,shard,function,shard,factory,function,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,checked,function,boolean,index,shard,ioexception,shard,function,boolean,primary,throws,ioexception,index,shard,shard,shard,function,apply,primary,if,primary,recover,shard,from,store,shard,assert,that,shard,get,max,seq,no,of,updates,or,deletes,equal,to,shard,seq,no,stats,get,max,seq,no,else,recovery,empty,replica,shard,true,return,shard
IndexShardTestCase -> protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,                                          boolean primary) throws IOException;1538067637;creates a new empty shard and starts it.__@param shardFunction shard factory function_@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,_                                         boolean primary) throws IOException {_        IndexShard shard = shardFunction.apply(primary)__        if (primary) {_            recoverShardFromStore(shard)__            assertThat(shard.getMaxSeqNoOfUpdatesOrDeletes(), equalTo(shard.seqNoStats().getMaxSeqNo()))__        } else {_            recoveryEmptyReplica(shard, true)__        }_        return shard__    };creates,a,new,empty,shard,and,starts,it,param,shard,function,shard,factory,function,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,checked,function,boolean,index,shard,ioexception,shard,function,boolean,primary,throws,ioexception,index,shard,shard,shard,function,apply,primary,if,primary,recover,shard,from,store,shard,assert,that,shard,get,max,seq,no,of,updates,or,deletes,equal,to,shard,seq,no,stats,get,max,seq,no,else,recovery,empty,replica,shard,true,return,shard
IndexShardTestCase -> protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,                                          boolean primary) throws IOException;1542697404;creates a new empty shard and starts it.__@param shardFunction shard factory function_@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,_                                         boolean primary) throws IOException {_        IndexShard shard = shardFunction.apply(primary)__        if (primary) {_            recoverShardFromStore(shard)__            assertThat(shard.getMaxSeqNoOfUpdatesOrDeletes(), equalTo(shard.seqNoStats().getMaxSeqNo()))__        } else {_            recoveryEmptyReplica(shard, true)__        }_        return shard__    };creates,a,new,empty,shard,and,starts,it,param,shard,function,shard,factory,function,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,checked,function,boolean,index,shard,ioexception,shard,function,boolean,primary,throws,ioexception,index,shard,shard,shard,function,apply,primary,if,primary,recover,shard,from,store,shard,assert,that,shard,get,max,seq,no,of,updates,or,deletes,equal,to,shard,seq,no,stats,get,max,seq,no,else,recovery,empty,replica,shard,true,return,shard
IndexShardTestCase -> protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,                                          boolean primary) throws IOException;1544783963;creates a new empty shard and starts it.__@param shardFunction shard factory function_@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,_                                         boolean primary) throws IOException {_        IndexShard shard = shardFunction.apply(primary)__        if (primary) {_            recoverShardFromStore(shard)__            assertThat(shard.getMaxSeqNoOfUpdatesOrDeletes(), equalTo(shard.seqNoStats().getMaxSeqNo()))__        } else {_            recoveryEmptyReplica(shard, true)__        }_        return shard__    };creates,a,new,empty,shard,and,starts,it,param,shard,function,shard,factory,function,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,checked,function,boolean,index,shard,ioexception,shard,function,boolean,primary,throws,ioexception,index,shard,shard,shard,function,apply,primary,if,primary,recover,shard,from,store,shard,assert,that,shard,get,max,seq,no,of,updates,or,deletes,equal,to,shard,seq,no,stats,get,max,seq,no,else,recovery,empty,replica,shard,true,return,shard
IndexShardTestCase -> protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,                                          boolean primary) throws IOException;1544893197;creates a new empty shard and starts it.__@param shardFunction shard factory function_@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,_                                         boolean primary) throws IOException {_        IndexShard shard = shardFunction.apply(primary)__        if (primary) {_            recoverShardFromStore(shard)__            assertThat(shard.getMaxSeqNoOfUpdatesOrDeletes(), equalTo(shard.seqNoStats().getMaxSeqNo()))__        } else {_            recoveryEmptyReplica(shard, true)__        }_        return shard__    };creates,a,new,empty,shard,and,starts,it,param,shard,function,shard,factory,function,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,checked,function,boolean,index,shard,ioexception,shard,function,boolean,primary,throws,ioexception,index,shard,shard,shard,function,apply,primary,if,primary,recover,shard,from,store,shard,assert,that,shard,get,max,seq,no,of,updates,or,deletes,equal,to,shard,seq,no,stats,get,max,seq,no,else,recovery,empty,replica,shard,true,return,shard
IndexShardTestCase -> protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,                                          boolean primary) throws IOException;1545678410;creates a new empty shard and starts it.__@param shardFunction shard factory function_@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,_                                         boolean primary) throws IOException {_        IndexShard shard = shardFunction.apply(primary)__        if (primary) {_            recoverShardFromStore(shard)__            assertThat(shard.getMaxSeqNoOfUpdatesOrDeletes(), equalTo(shard.seqNoStats().getMaxSeqNo()))__        } else {_            recoveryEmptyReplica(shard, true)__        }_        return shard__    };creates,a,new,empty,shard,and,starts,it,param,shard,function,shard,factory,function,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,checked,function,boolean,index,shard,ioexception,shard,function,boolean,primary,throws,ioexception,index,shard,shard,shard,function,apply,primary,if,primary,recover,shard,from,store,shard,assert,that,shard,get,max,seq,no,of,updates,or,deletes,equal,to,shard,seq,no,stats,get,max,seq,no,else,recovery,empty,replica,shard,true,return,shard
IndexShardTestCase -> protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,                                          boolean primary) throws IOException;1546927432;creates a new empty shard and starts it.__@param shardFunction shard factory function_@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,_                                         boolean primary) throws IOException {_        IndexShard shard = shardFunction.apply(primary)__        if (primary) {_            recoverShardFromStore(shard)__            assertThat(shard.getMaxSeqNoOfUpdatesOrDeletes(), equalTo(shard.seqNoStats().getMaxSeqNo()))__        } else {_            recoveryEmptyReplica(shard, true)__        }_        return shard__    };creates,a,new,empty,shard,and,starts,it,param,shard,function,shard,factory,function,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,checked,function,boolean,index,shard,ioexception,shard,function,boolean,primary,throws,ioexception,index,shard,shard,shard,function,apply,primary,if,primary,recover,shard,from,store,shard,assert,that,shard,get,max,seq,no,of,updates,or,deletes,equal,to,shard,seq,no,stats,get,max,seq,no,else,recovery,empty,replica,shard,true,return,shard
IndexShardTestCase -> protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,                                          boolean primary) throws IOException;1547315388;creates a new empty shard and starts it.__@param shardFunction shard factory function_@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,_                                         boolean primary) throws IOException {_        IndexShard shard = shardFunction.apply(primary)__        if (primary) {_            recoverShardFromStore(shard)__            assertThat(shard.getMaxSeqNoOfUpdatesOrDeletes(), equalTo(shard.seqNoStats().getMaxSeqNo()))__        } else {_            recoveryEmptyReplica(shard, true)__        }_        return shard__    };creates,a,new,empty,shard,and,starts,it,param,shard,function,shard,factory,function,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,checked,function,boolean,index,shard,ioexception,shard,function,boolean,primary,throws,ioexception,index,shard,shard,shard,function,apply,primary,if,primary,recover,shard,from,store,shard,assert,that,shard,get,max,seq,no,of,updates,or,deletes,equal,to,shard,seq,no,stats,get,max,seq,no,else,recovery,empty,replica,shard,true,return,shard
IndexShardTestCase -> protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,                                          boolean primary) throws IOException;1547496475;creates a new empty shard and starts it.__@param shardFunction shard factory function_@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,_                                         boolean primary) throws IOException {_        IndexShard shard = shardFunction.apply(primary)__        if (primary) {_            recoverShardFromStore(shard)__            assertThat(shard.getMaxSeqNoOfUpdatesOrDeletes(), equalTo(shard.seqNoStats().getMaxSeqNo()))__        } else {_            recoveryEmptyReplica(shard, true)__        }_        return shard__    };creates,a,new,empty,shard,and,starts,it,param,shard,function,shard,factory,function,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,checked,function,boolean,index,shard,ioexception,shard,function,boolean,primary,throws,ioexception,index,shard,shard,shard,function,apply,primary,if,primary,recover,shard,from,store,shard,assert,that,shard,get,max,seq,no,of,updates,or,deletes,equal,to,shard,seq,no,stats,get,max,seq,no,else,recovery,empty,replica,shard,true,return,shard
IndexShardTestCase -> protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,                                          boolean primary) throws IOException;1547496886;creates a new empty shard and starts it.__@param shardFunction shard factory function_@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,_                                         boolean primary) throws IOException {_        IndexShard shard = shardFunction.apply(primary)__        if (primary) {_            recoverShardFromStore(shard)__            assertThat(shard.getMaxSeqNoOfUpdatesOrDeletes(), equalTo(shard.seqNoStats().getMaxSeqNo()))__        } else {_            recoveryEmptyReplica(shard, true)__        }_        return shard__    };creates,a,new,empty,shard,and,starts,it,param,shard,function,shard,factory,function,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,checked,function,boolean,index,shard,ioexception,shard,function,boolean,primary,throws,ioexception,index,shard,shard,shard,function,apply,primary,if,primary,recover,shard,from,store,shard,assert,that,shard,get,max,seq,no,of,updates,or,deletes,equal,to,shard,seq,no,stats,get,max,seq,no,else,recovery,empty,replica,shard,true,return,shard
IndexShardTestCase -> protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,                                          boolean primary) throws IOException;1547520324;creates a new empty shard and starts it.__@param shardFunction shard factory function_@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,_                                         boolean primary) throws IOException {_        IndexShard shard = shardFunction.apply(primary)__        if (primary) {_            recoverShardFromStore(shard)__            assertThat(shard.getMaxSeqNoOfUpdatesOrDeletes(), equalTo(shard.seqNoStats().getMaxSeqNo()))__        } else {_            recoveryEmptyReplica(shard, true)__        }_        return shard__    };creates,a,new,empty,shard,and,starts,it,param,shard,function,shard,factory,function,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,checked,function,boolean,index,shard,ioexception,shard,function,boolean,primary,throws,ioexception,index,shard,shard,shard,function,apply,primary,if,primary,recover,shard,from,store,shard,assert,that,shard,get,max,seq,no,of,updates,or,deletes,equal,to,shard,seq,no,stats,get,max,seq,no,else,recovery,empty,replica,shard,true,return,shard
IndexShardTestCase -> protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,                                          boolean primary) throws IOException;1547552901;creates a new empty shard and starts it.__@param shardFunction shard factory function_@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,_                                         boolean primary) throws IOException {_        IndexShard shard = shardFunction.apply(primary)__        if (primary) {_            recoverShardFromStore(shard)__            assertThat(shard.getMaxSeqNoOfUpdatesOrDeletes(), equalTo(shard.seqNoStats().getMaxSeqNo()))__        } else {_            recoveryEmptyReplica(shard, true)__        }_        return shard__    };creates,a,new,empty,shard,and,starts,it,param,shard,function,shard,factory,function,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,checked,function,boolean,index,shard,ioexception,shard,function,boolean,primary,throws,ioexception,index,shard,shard,shard,function,apply,primary,if,primary,recover,shard,from,store,shard,assert,that,shard,get,max,seq,no,of,updates,or,deletes,equal,to,shard,seq,no,stats,get,max,seq,no,else,recovery,empty,replica,shard,true,return,shard
IndexShardTestCase -> protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,                                          boolean primary) throws IOException;1548593396;creates a new empty shard and starts it.__@param shardFunction shard factory function_@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,_                                         boolean primary) throws IOException {_        IndexShard shard = shardFunction.apply(primary)__        if (primary) {_            recoverShardFromStore(shard)__            assertThat(shard.getMaxSeqNoOfUpdatesOrDeletes(), equalTo(shard.seqNoStats().getMaxSeqNo()))__        } else {_            recoveryEmptyReplica(shard, true)__        }_        return shard__    };creates,a,new,empty,shard,and,starts,it,param,shard,function,shard,factory,function,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,checked,function,boolean,index,shard,ioexception,shard,function,boolean,primary,throws,ioexception,index,shard,shard,shard,function,apply,primary,if,primary,recover,shard,from,store,shard,assert,that,shard,get,max,seq,no,of,updates,or,deletes,equal,to,shard,seq,no,stats,get,max,seq,no,else,recovery,empty,replica,shard,true,return,shard
IndexShardTestCase -> protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,                                          boolean primary) throws IOException;1549294529;creates a new empty shard and starts it.__@param shardFunction shard factory function_@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,_                                         boolean primary) throws IOException {_        IndexShard shard = shardFunction.apply(primary)__        if (primary) {_            recoverShardFromStore(shard)__            assertThat(shard.getMaxSeqNoOfUpdatesOrDeletes(), equalTo(shard.seqNoStats().getMaxSeqNo()))__        } else {_            recoveryEmptyReplica(shard, true)__        }_        return shard__    };creates,a,new,empty,shard,and,starts,it,param,shard,function,shard,factory,function,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,checked,function,boolean,index,shard,ioexception,shard,function,boolean,primary,throws,ioexception,index,shard,shard,shard,function,apply,primary,if,primary,recover,shard,from,store,shard,assert,that,shard,get,max,seq,no,of,updates,or,deletes,equal,to,shard,seq,no,stats,get,max,seq,no,else,recovery,empty,replica,shard,true,return,shard
IndexShardTestCase -> protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,                                          boolean primary) throws IOException;1550668107;creates a new empty shard and starts it.__@param shardFunction shard factory function_@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(CheckedFunction<Boolean, IndexShard, IOException> shardFunction,_                                         boolean primary) throws IOException {_        IndexShard shard = shardFunction.apply(primary)__        if (primary) {_            recoverShardFromStore(shard)__            assertThat(shard.getMaxSeqNoOfUpdatesOrDeletes(), equalTo(shard.seqNoStats().getMaxSeqNo()))__        } else {_            recoveryEmptyReplica(shard, true)__        }_        return shard__    };creates,a,new,empty,shard,and,starts,it,param,shard,function,shard,factory,function,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,checked,function,boolean,index,shard,ioexception,shard,function,boolean,primary,throws,ioexception,index,shard,shard,shard,function,apply,primary,if,primary,recover,shard,from,store,shard,assert,that,shard,get,max,seq,no,of,updates,or,deletes,equal,to,shard,seq,no,stats,get,max,seq,no,else,recovery,empty,replica,shard,true,return,shard
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,                                   @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException;1535965276;creates a new initializing shard._@param routing                       shard routing to use_@param shardPath                     path to use for shard data_@param indexMetaData                 indexMetaData for the shard, including any mapping_@param storeProvider                 an optional custom store provider to use. If null a default file based store will be created_@param indexSearcherWrapper          an optional wrapper to be used during searchers_@param globalCheckpointSyncer        callback for syncing global checkpoints_@param indexEventListener            index event listener_@param listeners                     an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,_                                  @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException {_        final Settings nodeSettings = Settings.builder().put("node.name", routing.currentNodeId()).build()__        final IndexSettings indexSettings = new IndexSettings(indexMetaData, nodeSettings)__        final IndexShard indexShard__        if (storeProvider == null) {_            storeProvider = is -> createStore(is, shardPath)__        }_        final Store store = storeProvider.apply(indexSettings)__        boolean success = false__        try {_            IndexCache indexCache = new IndexCache(indexSettings, new DisabledQueryCache(indexSettings), null)__            MapperService mapperService = MapperTestUtils.newMapperService(xContentRegistry(), createTempDir(),_                    indexSettings.getSettings(), "index")__            mapperService.merge(indexMetaData, MapperService.MergeReason.MAPPING_RECOVERY)__            SimilarityService similarityService = new SimilarityService(indexSettings, null, Collections.emptyMap())__            final Engine.Warmer warmer = searcher -> {_            }__            ClusterSettings clusterSettings = new ClusterSettings(nodeSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)__            CircuitBreakerService breakerService = new HierarchyCircuitBreakerService(nodeSettings, clusterSettings)__            indexShard = new IndexShard(routing, indexSettings, shardPath, store, () -> null, indexCache, mapperService, similarityService,_                engineFactory, indexEventListener, indexSearcherWrapper, threadPool,_                BigArrays.NON_RECYCLING_INSTANCE, warmer, Collections.emptyList(), Arrays.asList(listeners), globalCheckpointSyncer,_                breakerService)__            indexShard.addShardFailureCallback(DEFAULT_SHARD_FAILURE_HANDLER)__            success = true__        } finally {_            if (success == false) {_                IOUtils.close(store)__            }_        }_        return indexShard__    };creates,a,new,initializing,shard,param,routing,shard,routing,to,use,param,shard,path,path,to,use,for,shard,data,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,store,provider,an,optional,custom,store,provider,to,use,if,null,a,default,file,based,store,will,be,created,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,index,event,listener,index,event,listener,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,shard,path,shard,path,index,meta,data,index,meta,data,nullable,checked,function,index,settings,store,ioexception,store,provider,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,index,event,listener,index,event,listener,indexing,operation,listener,listeners,throws,ioexception,final,settings,node,settings,settings,builder,put,node,name,routing,current,node,id,build,final,index,settings,index,settings,new,index,settings,index,meta,data,node,settings,final,index,shard,index,shard,if,store,provider,null,store,provider,is,create,store,is,shard,path,final,store,store,store,provider,apply,index,settings,boolean,success,false,try,index,cache,index,cache,new,index,cache,index,settings,new,disabled,query,cache,index,settings,null,mapper,service,mapper,service,mapper,test,utils,new,mapper,service,x,content,registry,create,temp,dir,index,settings,get,settings,index,mapper,service,merge,index,meta,data,mapper,service,merge,reason,similarity,service,similarity,service,new,similarity,service,index,settings,null,collections,empty,map,final,engine,warmer,warmer,searcher,cluster,settings,cluster,settings,new,cluster,settings,node,settings,cluster,settings,circuit,breaker,service,breaker,service,new,hierarchy,circuit,breaker,service,node,settings,cluster,settings,index,shard,new,index,shard,routing,index,settings,shard,path,store,null,index,cache,mapper,service,similarity,service,engine,factory,index,event,listener,index,searcher,wrapper,thread,pool,big,arrays,warmer,collections,empty,list,arrays,as,list,listeners,global,checkpoint,syncer,breaker,service,index,shard,add,shard,failure,callback,success,true,finally,if,success,false,ioutils,close,store,return,index,shard
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,                                   @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException;1536611444;creates a new initializing shard._@param routing                       shard routing to use_@param shardPath                     path to use for shard data_@param indexMetaData                 indexMetaData for the shard, including any mapping_@param storeProvider                 an optional custom store provider to use. If null a default file based store will be created_@param indexSearcherWrapper          an optional wrapper to be used during searchers_@param globalCheckpointSyncer        callback for syncing global checkpoints_@param indexEventListener            index event listener_@param listeners                     an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,_                                  @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException {_        final Settings nodeSettings = Settings.builder().put("node.name", routing.currentNodeId()).build()__        final IndexSettings indexSettings = new IndexSettings(indexMetaData, nodeSettings)__        final IndexShard indexShard__        if (storeProvider == null) {_            storeProvider = is -> createStore(is, shardPath)__        }_        final Store store = storeProvider.apply(indexSettings)__        boolean success = false__        try {_            IndexCache indexCache = new IndexCache(indexSettings, new DisabledQueryCache(indexSettings), null)__            MapperService mapperService = MapperTestUtils.newMapperService(xContentRegistry(), createTempDir(),_                    indexSettings.getSettings(), "index")__            mapperService.merge(indexMetaData, MapperService.MergeReason.MAPPING_RECOVERY)__            SimilarityService similarityService = new SimilarityService(indexSettings, null, Collections.emptyMap())__            final Engine.Warmer warmer = searcher -> {_            }__            ClusterSettings clusterSettings = new ClusterSettings(nodeSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)__            CircuitBreakerService breakerService = new HierarchyCircuitBreakerService(nodeSettings, clusterSettings)__            indexShard = new IndexShard(routing, indexSettings, shardPath, store, () -> null, indexCache, mapperService, similarityService,_                engineFactory, indexEventListener, indexSearcherWrapper, threadPool,_                BigArrays.NON_RECYCLING_INSTANCE, warmer, Collections.emptyList(), Arrays.asList(listeners), globalCheckpointSyncer,_                breakerService)__            indexShard.addShardFailureCallback(DEFAULT_SHARD_FAILURE_HANDLER)__            success = true__        } finally {_            if (success == false) {_                IOUtils.close(store)__            }_        }_        return indexShard__    };creates,a,new,initializing,shard,param,routing,shard,routing,to,use,param,shard,path,path,to,use,for,shard,data,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,store,provider,an,optional,custom,store,provider,to,use,if,null,a,default,file,based,store,will,be,created,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,index,event,listener,index,event,listener,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,shard,path,shard,path,index,meta,data,index,meta,data,nullable,checked,function,index,settings,store,ioexception,store,provider,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,index,event,listener,index,event,listener,indexing,operation,listener,listeners,throws,ioexception,final,settings,node,settings,settings,builder,put,node,name,routing,current,node,id,build,final,index,settings,index,settings,new,index,settings,index,meta,data,node,settings,final,index,shard,index,shard,if,store,provider,null,store,provider,is,create,store,is,shard,path,final,store,store,store,provider,apply,index,settings,boolean,success,false,try,index,cache,index,cache,new,index,cache,index,settings,new,disabled,query,cache,index,settings,null,mapper,service,mapper,service,mapper,test,utils,new,mapper,service,x,content,registry,create,temp,dir,index,settings,get,settings,index,mapper,service,merge,index,meta,data,mapper,service,merge,reason,similarity,service,similarity,service,new,similarity,service,index,settings,null,collections,empty,map,final,engine,warmer,warmer,searcher,cluster,settings,cluster,settings,new,cluster,settings,node,settings,cluster,settings,circuit,breaker,service,breaker,service,new,hierarchy,circuit,breaker,service,node,settings,cluster,settings,index,shard,new,index,shard,routing,index,settings,shard,path,store,null,index,cache,mapper,service,similarity,service,engine,factory,index,event,listener,index,searcher,wrapper,thread,pool,big,arrays,warmer,collections,empty,list,arrays,as,list,listeners,global,checkpoint,syncer,breaker,service,index,shard,add,shard,failure,callback,success,true,finally,if,success,false,ioutils,close,store,return,index,shard
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,                                   @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException;1536828374;creates a new initializing shard._@param routing                       shard routing to use_@param shardPath                     path to use for shard data_@param indexMetaData                 indexMetaData for the shard, including any mapping_@param storeProvider                 an optional custom store provider to use. If null a default file based store will be created_@param indexSearcherWrapper          an optional wrapper to be used during searchers_@param globalCheckpointSyncer        callback for syncing global checkpoints_@param indexEventListener            index event listener_@param listeners                     an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,_                                  @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException {_        final Settings nodeSettings = Settings.builder().put("node.name", routing.currentNodeId()).build()__        final IndexSettings indexSettings = new IndexSettings(indexMetaData, nodeSettings)__        final IndexShard indexShard__        if (storeProvider == null) {_            storeProvider = is -> createStore(is, shardPath)__        }_        final Store store = storeProvider.apply(indexSettings)__        boolean success = false__        try {_            IndexCache indexCache = new IndexCache(indexSettings, new DisabledQueryCache(indexSettings), null)__            MapperService mapperService = MapperTestUtils.newMapperService(xContentRegistry(), createTempDir(),_                    indexSettings.getSettings(), "index")__            mapperService.merge(indexMetaData, MapperService.MergeReason.MAPPING_RECOVERY)__            SimilarityService similarityService = new SimilarityService(indexSettings, null, Collections.emptyMap())__            final Engine.Warmer warmer = searcher -> {_            }__            ClusterSettings clusterSettings = new ClusterSettings(nodeSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)__            CircuitBreakerService breakerService = new HierarchyCircuitBreakerService(nodeSettings, clusterSettings)__            indexShard = new IndexShard(routing, indexSettings, shardPath, store, () -> null, indexCache, mapperService, similarityService,_                engineFactory, indexEventListener, indexSearcherWrapper, threadPool,_                BigArrays.NON_RECYCLING_INSTANCE, warmer, Collections.emptyList(), Arrays.asList(listeners), globalCheckpointSyncer,_                breakerService)__            indexShard.addShardFailureCallback(DEFAULT_SHARD_FAILURE_HANDLER)__            success = true__        } finally {_            if (success == false) {_                IOUtils.close(store)__            }_        }_        return indexShard__    };creates,a,new,initializing,shard,param,routing,shard,routing,to,use,param,shard,path,path,to,use,for,shard,data,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,store,provider,an,optional,custom,store,provider,to,use,if,null,a,default,file,based,store,will,be,created,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,index,event,listener,index,event,listener,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,shard,path,shard,path,index,meta,data,index,meta,data,nullable,checked,function,index,settings,store,ioexception,store,provider,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,index,event,listener,index,event,listener,indexing,operation,listener,listeners,throws,ioexception,final,settings,node,settings,settings,builder,put,node,name,routing,current,node,id,build,final,index,settings,index,settings,new,index,settings,index,meta,data,node,settings,final,index,shard,index,shard,if,store,provider,null,store,provider,is,create,store,is,shard,path,final,store,store,store,provider,apply,index,settings,boolean,success,false,try,index,cache,index,cache,new,index,cache,index,settings,new,disabled,query,cache,index,settings,null,mapper,service,mapper,service,mapper,test,utils,new,mapper,service,x,content,registry,create,temp,dir,index,settings,get,settings,index,mapper,service,merge,index,meta,data,mapper,service,merge,reason,similarity,service,similarity,service,new,similarity,service,index,settings,null,collections,empty,map,final,engine,warmer,warmer,searcher,cluster,settings,cluster,settings,new,cluster,settings,node,settings,cluster,settings,circuit,breaker,service,breaker,service,new,hierarchy,circuit,breaker,service,node,settings,cluster,settings,index,shard,new,index,shard,routing,index,settings,shard,path,store,null,index,cache,mapper,service,similarity,service,engine,factory,index,event,listener,index,searcher,wrapper,thread,pool,big,arrays,warmer,collections,empty,list,arrays,as,list,listeners,global,checkpoint,syncer,breaker,service,index,shard,add,shard,failure,callback,success,true,finally,if,success,false,ioutils,close,store,return,index,shard
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,                                   @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException;1537371806;creates a new initializing shard._@param routing                       shard routing to use_@param shardPath                     path to use for shard data_@param indexMetaData                 indexMetaData for the shard, including any mapping_@param storeProvider                 an optional custom store provider to use. If null a default file based store will be created_@param indexSearcherWrapper          an optional wrapper to be used during searchers_@param globalCheckpointSyncer        callback for syncing global checkpoints_@param indexEventListener            index event listener_@param listeners                     an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,_                                  @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException {_        final Settings nodeSettings = Settings.builder().put("node.name", routing.currentNodeId()).build()__        final IndexSettings indexSettings = new IndexSettings(indexMetaData, nodeSettings)__        final IndexShard indexShard__        if (storeProvider == null) {_            storeProvider = is -> createStore(is, shardPath)__        }_        final Store store = storeProvider.apply(indexSettings)__        boolean success = false__        try {_            IndexCache indexCache = new IndexCache(indexSettings, new DisabledQueryCache(indexSettings), null)__            MapperService mapperService = MapperTestUtils.newMapperService(xContentRegistry(), createTempDir(),_                    indexSettings.getSettings(), "index")__            mapperService.merge(indexMetaData, MapperService.MergeReason.MAPPING_RECOVERY)__            SimilarityService similarityService = new SimilarityService(indexSettings, null, Collections.emptyMap())__            final Engine.Warmer warmer = searcher -> {_            }__            ClusterSettings clusterSettings = new ClusterSettings(nodeSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)__            CircuitBreakerService breakerService = new HierarchyCircuitBreakerService(nodeSettings, clusterSettings)__            indexShard = new IndexShard(routing, indexSettings, shardPath, store, () -> null, indexCache, mapperService, similarityService,_                engineFactory, indexEventListener, indexSearcherWrapper, threadPool,_                BigArrays.NON_RECYCLING_INSTANCE, warmer, Collections.emptyList(), Arrays.asList(listeners), globalCheckpointSyncer,_                breakerService)__            indexShard.addShardFailureCallback(DEFAULT_SHARD_FAILURE_HANDLER)__            success = true__        } finally {_            if (success == false) {_                IOUtils.close(store)__            }_        }_        return indexShard__    };creates,a,new,initializing,shard,param,routing,shard,routing,to,use,param,shard,path,path,to,use,for,shard,data,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,store,provider,an,optional,custom,store,provider,to,use,if,null,a,default,file,based,store,will,be,created,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,index,event,listener,index,event,listener,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,shard,path,shard,path,index,meta,data,index,meta,data,nullable,checked,function,index,settings,store,ioexception,store,provider,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,index,event,listener,index,event,listener,indexing,operation,listener,listeners,throws,ioexception,final,settings,node,settings,settings,builder,put,node,name,routing,current,node,id,build,final,index,settings,index,settings,new,index,settings,index,meta,data,node,settings,final,index,shard,index,shard,if,store,provider,null,store,provider,is,create,store,is,shard,path,final,store,store,store,provider,apply,index,settings,boolean,success,false,try,index,cache,index,cache,new,index,cache,index,settings,new,disabled,query,cache,index,settings,null,mapper,service,mapper,service,mapper,test,utils,new,mapper,service,x,content,registry,create,temp,dir,index,settings,get,settings,index,mapper,service,merge,index,meta,data,mapper,service,merge,reason,similarity,service,similarity,service,new,similarity,service,index,settings,null,collections,empty,map,final,engine,warmer,warmer,searcher,cluster,settings,cluster,settings,new,cluster,settings,node,settings,cluster,settings,circuit,breaker,service,breaker,service,new,hierarchy,circuit,breaker,service,node,settings,cluster,settings,index,shard,new,index,shard,routing,index,settings,shard,path,store,null,index,cache,mapper,service,similarity,service,engine,factory,index,event,listener,index,searcher,wrapper,thread,pool,big,arrays,warmer,collections,empty,list,arrays,as,list,listeners,global,checkpoint,syncer,breaker,service,index,shard,add,shard,failure,callback,success,true,finally,if,success,false,ioutils,close,store,return,index,shard
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,                                   @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException;1537806831;creates a new initializing shard._@param routing                       shard routing to use_@param shardPath                     path to use for shard data_@param indexMetaData                 indexMetaData for the shard, including any mapping_@param storeProvider                 an optional custom store provider to use. If null a default file based store will be created_@param indexSearcherWrapper          an optional wrapper to be used during searchers_@param globalCheckpointSyncer        callback for syncing global checkpoints_@param indexEventListener            index event listener_@param listeners                     an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,_                                  @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException {_        final Settings nodeSettings = Settings.builder().put("node.name", routing.currentNodeId()).build()__        final IndexSettings indexSettings = new IndexSettings(indexMetaData, nodeSettings)__        final IndexShard indexShard__        if (storeProvider == null) {_            storeProvider = is -> createStore(is, shardPath)__        }_        final Store store = storeProvider.apply(indexSettings)__        boolean success = false__        try {_            IndexCache indexCache = new IndexCache(indexSettings, new DisabledQueryCache(indexSettings), null)__            MapperService mapperService = MapperTestUtils.newMapperService(xContentRegistry(), createTempDir(),_                    indexSettings.getSettings(), "index")__            mapperService.merge(indexMetaData, MapperService.MergeReason.MAPPING_RECOVERY)__            SimilarityService similarityService = new SimilarityService(indexSettings, null, Collections.emptyMap())__            final Engine.Warmer warmer = searcher -> {_            }__            ClusterSettings clusterSettings = new ClusterSettings(nodeSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)__            CircuitBreakerService breakerService = new HierarchyCircuitBreakerService(nodeSettings, clusterSettings)__            indexShard = new IndexShard(routing, indexSettings, shardPath, store, () -> null, indexCache, mapperService, similarityService,_                engineFactory, indexEventListener, indexSearcherWrapper, threadPool,_                BigArrays.NON_RECYCLING_INSTANCE, warmer, Collections.emptyList(), Arrays.asList(listeners), globalCheckpointSyncer,_                breakerService)__            indexShard.addShardFailureCallback(DEFAULT_SHARD_FAILURE_HANDLER)__            success = true__        } finally {_            if (success == false) {_                IOUtils.close(store)__            }_        }_        return indexShard__    };creates,a,new,initializing,shard,param,routing,shard,routing,to,use,param,shard,path,path,to,use,for,shard,data,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,store,provider,an,optional,custom,store,provider,to,use,if,null,a,default,file,based,store,will,be,created,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,index,event,listener,index,event,listener,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,shard,path,shard,path,index,meta,data,index,meta,data,nullable,checked,function,index,settings,store,ioexception,store,provider,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,index,event,listener,index,event,listener,indexing,operation,listener,listeners,throws,ioexception,final,settings,node,settings,settings,builder,put,node,name,routing,current,node,id,build,final,index,settings,index,settings,new,index,settings,index,meta,data,node,settings,final,index,shard,index,shard,if,store,provider,null,store,provider,is,create,store,is,shard,path,final,store,store,store,provider,apply,index,settings,boolean,success,false,try,index,cache,index,cache,new,index,cache,index,settings,new,disabled,query,cache,index,settings,null,mapper,service,mapper,service,mapper,test,utils,new,mapper,service,x,content,registry,create,temp,dir,index,settings,get,settings,index,mapper,service,merge,index,meta,data,mapper,service,merge,reason,similarity,service,similarity,service,new,similarity,service,index,settings,null,collections,empty,map,final,engine,warmer,warmer,searcher,cluster,settings,cluster,settings,new,cluster,settings,node,settings,cluster,settings,circuit,breaker,service,breaker,service,new,hierarchy,circuit,breaker,service,node,settings,cluster,settings,index,shard,new,index,shard,routing,index,settings,shard,path,store,null,index,cache,mapper,service,similarity,service,engine,factory,index,event,listener,index,searcher,wrapper,thread,pool,big,arrays,warmer,collections,empty,list,arrays,as,list,listeners,global,checkpoint,syncer,breaker,service,index,shard,add,shard,failure,callback,success,true,finally,if,success,false,ioutils,close,store,return,index,shard
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,                                   @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException;1538067637;creates a new initializing shard._@param routing                       shard routing to use_@param shardPath                     path to use for shard data_@param indexMetaData                 indexMetaData for the shard, including any mapping_@param storeProvider                 an optional custom store provider to use. If null a default file based store will be created_@param indexSearcherWrapper          an optional wrapper to be used during searchers_@param globalCheckpointSyncer        callback for syncing global checkpoints_@param indexEventListener            index event listener_@param listeners                     an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,_                                  @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException {_        final Settings nodeSettings = Settings.builder().put("node.name", routing.currentNodeId()).build()__        final IndexSettings indexSettings = new IndexSettings(indexMetaData, nodeSettings)__        final IndexShard indexShard__        if (storeProvider == null) {_            storeProvider = is -> createStore(is, shardPath)__        }_        final Store store = storeProvider.apply(indexSettings)__        boolean success = false__        try {_            IndexCache indexCache = new IndexCache(indexSettings, new DisabledQueryCache(indexSettings), null)__            MapperService mapperService = MapperTestUtils.newMapperService(xContentRegistry(), createTempDir(),_                    indexSettings.getSettings(), "index")__            mapperService.merge(indexMetaData, MapperService.MergeReason.MAPPING_RECOVERY)__            SimilarityService similarityService = new SimilarityService(indexSettings, null, Collections.emptyMap())__            final Engine.Warmer warmer = searcher -> {_            }__            ClusterSettings clusterSettings = new ClusterSettings(nodeSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)__            CircuitBreakerService breakerService = new HierarchyCircuitBreakerService(nodeSettings, clusterSettings)__            indexShard = new IndexShard(routing, indexSettings, shardPath, store, () -> null, indexCache, mapperService, similarityService,_                engineFactory, indexEventListener, indexSearcherWrapper, threadPool,_                BigArrays.NON_RECYCLING_INSTANCE, warmer, Collections.emptyList(), Arrays.asList(listeners), globalCheckpointSyncer,_                breakerService)__            indexShard.addShardFailureCallback(DEFAULT_SHARD_FAILURE_HANDLER)__            success = true__        } finally {_            if (success == false) {_                IOUtils.close(store)__            }_        }_        return indexShard__    };creates,a,new,initializing,shard,param,routing,shard,routing,to,use,param,shard,path,path,to,use,for,shard,data,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,store,provider,an,optional,custom,store,provider,to,use,if,null,a,default,file,based,store,will,be,created,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,index,event,listener,index,event,listener,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,shard,path,shard,path,index,meta,data,index,meta,data,nullable,checked,function,index,settings,store,ioexception,store,provider,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,index,event,listener,index,event,listener,indexing,operation,listener,listeners,throws,ioexception,final,settings,node,settings,settings,builder,put,node,name,routing,current,node,id,build,final,index,settings,index,settings,new,index,settings,index,meta,data,node,settings,final,index,shard,index,shard,if,store,provider,null,store,provider,is,create,store,is,shard,path,final,store,store,store,provider,apply,index,settings,boolean,success,false,try,index,cache,index,cache,new,index,cache,index,settings,new,disabled,query,cache,index,settings,null,mapper,service,mapper,service,mapper,test,utils,new,mapper,service,x,content,registry,create,temp,dir,index,settings,get,settings,index,mapper,service,merge,index,meta,data,mapper,service,merge,reason,similarity,service,similarity,service,new,similarity,service,index,settings,null,collections,empty,map,final,engine,warmer,warmer,searcher,cluster,settings,cluster,settings,new,cluster,settings,node,settings,cluster,settings,circuit,breaker,service,breaker,service,new,hierarchy,circuit,breaker,service,node,settings,cluster,settings,index,shard,new,index,shard,routing,index,settings,shard,path,store,null,index,cache,mapper,service,similarity,service,engine,factory,index,event,listener,index,searcher,wrapper,thread,pool,big,arrays,warmer,collections,empty,list,arrays,as,list,listeners,global,checkpoint,syncer,breaker,service,index,shard,add,shard,failure,callback,success,true,finally,if,success,false,ioutils,close,store,return,index,shard
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,                                   @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException;1542697404;creates a new initializing shard._@param routing                       shard routing to use_@param shardPath                     path to use for shard data_@param indexMetaData                 indexMetaData for the shard, including any mapping_@param storeProvider                 an optional custom store provider to use. If null a default file based store will be created_@param indexSearcherWrapper          an optional wrapper to be used during searchers_@param globalCheckpointSyncer        callback for syncing global checkpoints_@param indexEventListener            index event listener_@param listeners                     an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,_                                  @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException {_        final Settings nodeSettings = Settings.builder().put("node.name", routing.currentNodeId()).build()__        final IndexSettings indexSettings = new IndexSettings(indexMetaData, nodeSettings)__        final IndexShard indexShard__        if (storeProvider == null) {_            storeProvider = is -> createStore(is, shardPath)__        }_        final Store store = storeProvider.apply(indexSettings)__        boolean success = false__        try {_            IndexCache indexCache = new IndexCache(indexSettings, new DisabledQueryCache(indexSettings), null)__            MapperService mapperService = MapperTestUtils.newMapperService(xContentRegistry(), createTempDir(),_                    indexSettings.getSettings(), "index")__            mapperService.merge(indexMetaData, MapperService.MergeReason.MAPPING_RECOVERY)__            SimilarityService similarityService = new SimilarityService(indexSettings, null, Collections.emptyMap())__            final Engine.Warmer warmer = searcher -> {_            }__            ClusterSettings clusterSettings = new ClusterSettings(nodeSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)__            CircuitBreakerService breakerService = new HierarchyCircuitBreakerService(nodeSettings, clusterSettings)__            indexShard = new IndexShard(routing, indexSettings, shardPath, store, () -> null, indexCache, mapperService, similarityService,_                engineFactory, indexEventListener, indexSearcherWrapper, threadPool,_                BigArrays.NON_RECYCLING_INSTANCE, warmer, Collections.emptyList(), Arrays.asList(listeners), globalCheckpointSyncer,_                breakerService)__            indexShard.addShardFailureCallback(DEFAULT_SHARD_FAILURE_HANDLER)__            success = true__        } finally {_            if (success == false) {_                IOUtils.close(store)__            }_        }_        return indexShard__    };creates,a,new,initializing,shard,param,routing,shard,routing,to,use,param,shard,path,path,to,use,for,shard,data,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,store,provider,an,optional,custom,store,provider,to,use,if,null,a,default,file,based,store,will,be,created,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,index,event,listener,index,event,listener,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,shard,path,shard,path,index,meta,data,index,meta,data,nullable,checked,function,index,settings,store,ioexception,store,provider,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,index,event,listener,index,event,listener,indexing,operation,listener,listeners,throws,ioexception,final,settings,node,settings,settings,builder,put,node,name,routing,current,node,id,build,final,index,settings,index,settings,new,index,settings,index,meta,data,node,settings,final,index,shard,index,shard,if,store,provider,null,store,provider,is,create,store,is,shard,path,final,store,store,store,provider,apply,index,settings,boolean,success,false,try,index,cache,index,cache,new,index,cache,index,settings,new,disabled,query,cache,index,settings,null,mapper,service,mapper,service,mapper,test,utils,new,mapper,service,x,content,registry,create,temp,dir,index,settings,get,settings,index,mapper,service,merge,index,meta,data,mapper,service,merge,reason,similarity,service,similarity,service,new,similarity,service,index,settings,null,collections,empty,map,final,engine,warmer,warmer,searcher,cluster,settings,cluster,settings,new,cluster,settings,node,settings,cluster,settings,circuit,breaker,service,breaker,service,new,hierarchy,circuit,breaker,service,node,settings,cluster,settings,index,shard,new,index,shard,routing,index,settings,shard,path,store,null,index,cache,mapper,service,similarity,service,engine,factory,index,event,listener,index,searcher,wrapper,thread,pool,big,arrays,warmer,collections,empty,list,arrays,as,list,listeners,global,checkpoint,syncer,breaker,service,index,shard,add,shard,failure,callback,success,true,finally,if,success,false,ioutils,close,store,return,index,shard
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,                                   @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException;1544783963;creates a new initializing shard._@param routing                       shard routing to use_@param shardPath                     path to use for shard data_@param indexMetaData                 indexMetaData for the shard, including any mapping_@param storeProvider                 an optional custom store provider to use. If null a default file based store will be created_@param indexSearcherWrapper          an optional wrapper to be used during searchers_@param globalCheckpointSyncer        callback for syncing global checkpoints_@param indexEventListener            index event listener_@param listeners                     an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,_                                  @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException {_        final Settings nodeSettings = Settings.builder().put("node.name", routing.currentNodeId()).build()__        final IndexSettings indexSettings = new IndexSettings(indexMetaData, nodeSettings)__        final IndexShard indexShard__        if (storeProvider == null) {_            storeProvider = is -> createStore(is, shardPath)__        }_        final Store store = storeProvider.apply(indexSettings)__        boolean success = false__        try {_            IndexCache indexCache = new IndexCache(indexSettings, new DisabledQueryCache(indexSettings), null)__            MapperService mapperService = MapperTestUtils.newMapperService(xContentRegistry(), createTempDir(),_                    indexSettings.getSettings(), "index")__            mapperService.merge(indexMetaData, MapperService.MergeReason.MAPPING_RECOVERY)__            SimilarityService similarityService = new SimilarityService(indexSettings, null, Collections.emptyMap())__            final Engine.Warmer warmer = searcher -> {_            }__            ClusterSettings clusterSettings = new ClusterSettings(nodeSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)__            CircuitBreakerService breakerService = new HierarchyCircuitBreakerService(nodeSettings, clusterSettings)__            indexShard = new IndexShard(routing, indexSettings, shardPath, store, () -> null, indexCache, mapperService, similarityService,_                engineFactory, indexEventListener, indexSearcherWrapper, threadPool,_                BigArrays.NON_RECYCLING_INSTANCE, warmer, Collections.emptyList(), Arrays.asList(listeners), globalCheckpointSyncer,_                breakerService)__            indexShard.addShardFailureCallback(DEFAULT_SHARD_FAILURE_HANDLER)__            success = true__        } finally {_            if (success == false) {_                IOUtils.close(store)__            }_        }_        return indexShard__    };creates,a,new,initializing,shard,param,routing,shard,routing,to,use,param,shard,path,path,to,use,for,shard,data,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,store,provider,an,optional,custom,store,provider,to,use,if,null,a,default,file,based,store,will,be,created,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,index,event,listener,index,event,listener,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,shard,path,shard,path,index,meta,data,index,meta,data,nullable,checked,function,index,settings,store,ioexception,store,provider,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,index,event,listener,index,event,listener,indexing,operation,listener,listeners,throws,ioexception,final,settings,node,settings,settings,builder,put,node,name,routing,current,node,id,build,final,index,settings,index,settings,new,index,settings,index,meta,data,node,settings,final,index,shard,index,shard,if,store,provider,null,store,provider,is,create,store,is,shard,path,final,store,store,store,provider,apply,index,settings,boolean,success,false,try,index,cache,index,cache,new,index,cache,index,settings,new,disabled,query,cache,index,settings,null,mapper,service,mapper,service,mapper,test,utils,new,mapper,service,x,content,registry,create,temp,dir,index,settings,get,settings,index,mapper,service,merge,index,meta,data,mapper,service,merge,reason,similarity,service,similarity,service,new,similarity,service,index,settings,null,collections,empty,map,final,engine,warmer,warmer,searcher,cluster,settings,cluster,settings,new,cluster,settings,node,settings,cluster,settings,circuit,breaker,service,breaker,service,new,hierarchy,circuit,breaker,service,node,settings,cluster,settings,index,shard,new,index,shard,routing,index,settings,shard,path,store,null,index,cache,mapper,service,similarity,service,engine,factory,index,event,listener,index,searcher,wrapper,thread,pool,big,arrays,warmer,collections,empty,list,arrays,as,list,listeners,global,checkpoint,syncer,breaker,service,index,shard,add,shard,failure,callback,success,true,finally,if,success,false,ioutils,close,store,return,index,shard
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,                                   @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException;1544893197;creates a new initializing shard._@param routing                       shard routing to use_@param shardPath                     path to use for shard data_@param indexMetaData                 indexMetaData for the shard, including any mapping_@param storeProvider                 an optional custom store provider to use. If null a default file based store will be created_@param indexSearcherWrapper          an optional wrapper to be used during searchers_@param globalCheckpointSyncer        callback for syncing global checkpoints_@param indexEventListener            index event listener_@param listeners                     an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,_                                  @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException {_        final Settings nodeSettings = Settings.builder().put("node.name", routing.currentNodeId()).build()__        final IndexSettings indexSettings = new IndexSettings(indexMetaData, nodeSettings)__        final IndexShard indexShard__        if (storeProvider == null) {_            storeProvider = is -> createStore(is, shardPath)__        }_        final Store store = storeProvider.apply(indexSettings)__        boolean success = false__        try {_            IndexCache indexCache = new IndexCache(indexSettings, new DisabledQueryCache(indexSettings), null)__            MapperService mapperService = MapperTestUtils.newMapperService(xContentRegistry(), createTempDir(),_                    indexSettings.getSettings(), "index")__            mapperService.merge(indexMetaData, MapperService.MergeReason.MAPPING_RECOVERY)__            SimilarityService similarityService = new SimilarityService(indexSettings, null, Collections.emptyMap())__            final Engine.Warmer warmer = searcher -> {_            }__            ClusterSettings clusterSettings = new ClusterSettings(nodeSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)__            CircuitBreakerService breakerService = new HierarchyCircuitBreakerService(nodeSettings, clusterSettings)__            indexShard = new IndexShard(routing, indexSettings, shardPath, store, () -> null, indexCache, mapperService, similarityService,_                engineFactory, indexEventListener, indexSearcherWrapper, threadPool,_                BigArrays.NON_RECYCLING_INSTANCE, warmer, Collections.emptyList(), Arrays.asList(listeners), globalCheckpointSyncer,_                breakerService)__            indexShard.addShardFailureCallback(DEFAULT_SHARD_FAILURE_HANDLER)__            success = true__        } finally {_            if (success == false) {_                IOUtils.close(store)__            }_        }_        return indexShard__    };creates,a,new,initializing,shard,param,routing,shard,routing,to,use,param,shard,path,path,to,use,for,shard,data,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,store,provider,an,optional,custom,store,provider,to,use,if,null,a,default,file,based,store,will,be,created,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,index,event,listener,index,event,listener,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,shard,path,shard,path,index,meta,data,index,meta,data,nullable,checked,function,index,settings,store,ioexception,store,provider,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,index,event,listener,index,event,listener,indexing,operation,listener,listeners,throws,ioexception,final,settings,node,settings,settings,builder,put,node,name,routing,current,node,id,build,final,index,settings,index,settings,new,index,settings,index,meta,data,node,settings,final,index,shard,index,shard,if,store,provider,null,store,provider,is,create,store,is,shard,path,final,store,store,store,provider,apply,index,settings,boolean,success,false,try,index,cache,index,cache,new,index,cache,index,settings,new,disabled,query,cache,index,settings,null,mapper,service,mapper,service,mapper,test,utils,new,mapper,service,x,content,registry,create,temp,dir,index,settings,get,settings,index,mapper,service,merge,index,meta,data,mapper,service,merge,reason,similarity,service,similarity,service,new,similarity,service,index,settings,null,collections,empty,map,final,engine,warmer,warmer,searcher,cluster,settings,cluster,settings,new,cluster,settings,node,settings,cluster,settings,circuit,breaker,service,breaker,service,new,hierarchy,circuit,breaker,service,node,settings,cluster,settings,index,shard,new,index,shard,routing,index,settings,shard,path,store,null,index,cache,mapper,service,similarity,service,engine,factory,index,event,listener,index,searcher,wrapper,thread,pool,big,arrays,warmer,collections,empty,list,arrays,as,list,listeners,global,checkpoint,syncer,breaker,service,index,shard,add,shard,failure,callback,success,true,finally,if,success,false,ioutils,close,store,return,index,shard
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,                                   @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException;1545678410;creates a new initializing shard._@param routing                       shard routing to use_@param shardPath                     path to use for shard data_@param indexMetaData                 indexMetaData for the shard, including any mapping_@param storeProvider                 an optional custom store provider to use. If null a default file based store will be created_@param indexSearcherWrapper          an optional wrapper to be used during searchers_@param globalCheckpointSyncer        callback for syncing global checkpoints_@param indexEventListener            index event listener_@param listeners                     an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,_                                  @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException {_        final Settings nodeSettings = Settings.builder().put("node.name", routing.currentNodeId()).build()__        final IndexSettings indexSettings = new IndexSettings(indexMetaData, nodeSettings)__        final IndexShard indexShard__        if (storeProvider == null) {_            storeProvider = is -> createStore(is, shardPath)__        }_        final Store store = storeProvider.apply(indexSettings)__        boolean success = false__        try {_            IndexCache indexCache = new IndexCache(indexSettings, new DisabledQueryCache(indexSettings), null)__            MapperService mapperService = MapperTestUtils.newMapperService(xContentRegistry(), createTempDir(),_                    indexSettings.getSettings(), "index")__            mapperService.merge(indexMetaData, MapperService.MergeReason.MAPPING_RECOVERY)__            SimilarityService similarityService = new SimilarityService(indexSettings, null, Collections.emptyMap())__            final Engine.Warmer warmer = searcher -> {_            }__            ClusterSettings clusterSettings = new ClusterSettings(nodeSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)__            CircuitBreakerService breakerService = new HierarchyCircuitBreakerService(nodeSettings, clusterSettings)__            indexShard = new IndexShard(routing, indexSettings, shardPath, store, () -> null, indexCache, mapperService, similarityService,_                engineFactory, indexEventListener, indexSearcherWrapper, threadPool,_                BigArrays.NON_RECYCLING_INSTANCE, warmer, Collections.emptyList(), Arrays.asList(listeners), globalCheckpointSyncer,_                breakerService)__            indexShard.addShardFailureCallback(DEFAULT_SHARD_FAILURE_HANDLER)__            success = true__        } finally {_            if (success == false) {_                IOUtils.close(store)__            }_        }_        return indexShard__    };creates,a,new,initializing,shard,param,routing,shard,routing,to,use,param,shard,path,path,to,use,for,shard,data,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,store,provider,an,optional,custom,store,provider,to,use,if,null,a,default,file,based,store,will,be,created,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,index,event,listener,index,event,listener,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,shard,path,shard,path,index,meta,data,index,meta,data,nullable,checked,function,index,settings,store,ioexception,store,provider,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,index,event,listener,index,event,listener,indexing,operation,listener,listeners,throws,ioexception,final,settings,node,settings,settings,builder,put,node,name,routing,current,node,id,build,final,index,settings,index,settings,new,index,settings,index,meta,data,node,settings,final,index,shard,index,shard,if,store,provider,null,store,provider,is,create,store,is,shard,path,final,store,store,store,provider,apply,index,settings,boolean,success,false,try,index,cache,index,cache,new,index,cache,index,settings,new,disabled,query,cache,index,settings,null,mapper,service,mapper,service,mapper,test,utils,new,mapper,service,x,content,registry,create,temp,dir,index,settings,get,settings,index,mapper,service,merge,index,meta,data,mapper,service,merge,reason,similarity,service,similarity,service,new,similarity,service,index,settings,null,collections,empty,map,final,engine,warmer,warmer,searcher,cluster,settings,cluster,settings,new,cluster,settings,node,settings,cluster,settings,circuit,breaker,service,breaker,service,new,hierarchy,circuit,breaker,service,node,settings,cluster,settings,index,shard,new,index,shard,routing,index,settings,shard,path,store,null,index,cache,mapper,service,similarity,service,engine,factory,index,event,listener,index,searcher,wrapper,thread,pool,big,arrays,warmer,collections,empty,list,arrays,as,list,listeners,global,checkpoint,syncer,breaker,service,index,shard,add,shard,failure,callback,success,true,finally,if,success,false,ioutils,close,store,return,index,shard
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,                                   @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException;1546927432;creates a new initializing shard._@param routing                       shard routing to use_@param shardPath                     path to use for shard data_@param indexMetaData                 indexMetaData for the shard, including any mapping_@param storeProvider                 an optional custom store provider to use. If null a default file based store will be created_@param indexSearcherWrapper          an optional wrapper to be used during searchers_@param globalCheckpointSyncer        callback for syncing global checkpoints_@param indexEventListener            index event listener_@param listeners                     an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,_                                  @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException {_        final Settings nodeSettings = Settings.builder().put("node.name", routing.currentNodeId()).build()__        final IndexSettings indexSettings = new IndexSettings(indexMetaData, nodeSettings)__        final IndexShard indexShard__        if (storeProvider == null) {_            storeProvider = is -> createStore(is, shardPath)__        }_        final Store store = storeProvider.apply(indexSettings)__        boolean success = false__        try {_            IndexCache indexCache = new IndexCache(indexSettings, new DisabledQueryCache(indexSettings), null)__            MapperService mapperService = MapperTestUtils.newMapperService(xContentRegistry(), createTempDir(),_                    indexSettings.getSettings(), "index")__            mapperService.merge(indexMetaData, MapperService.MergeReason.MAPPING_RECOVERY)__            SimilarityService similarityService = new SimilarityService(indexSettings, null, Collections.emptyMap())__            final Engine.Warmer warmer = searcher -> {_            }__            ClusterSettings clusterSettings = new ClusterSettings(nodeSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)__            CircuitBreakerService breakerService = new HierarchyCircuitBreakerService(nodeSettings, clusterSettings)__            indexShard = new IndexShard(routing, indexSettings, shardPath, store, () -> null, indexCache, mapperService, similarityService,_                engineFactory, indexEventListener, indexSearcherWrapper, threadPool,_                BigArrays.NON_RECYCLING_INSTANCE, warmer, Collections.emptyList(), Arrays.asList(listeners), globalCheckpointSyncer,_                breakerService)__            indexShard.addShardFailureCallback(DEFAULT_SHARD_FAILURE_HANDLER)__            success = true__        } finally {_            if (success == false) {_                IOUtils.close(store)__            }_        }_        return indexShard__    };creates,a,new,initializing,shard,param,routing,shard,routing,to,use,param,shard,path,path,to,use,for,shard,data,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,store,provider,an,optional,custom,store,provider,to,use,if,null,a,default,file,based,store,will,be,created,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,index,event,listener,index,event,listener,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,shard,path,shard,path,index,meta,data,index,meta,data,nullable,checked,function,index,settings,store,ioexception,store,provider,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,index,event,listener,index,event,listener,indexing,operation,listener,listeners,throws,ioexception,final,settings,node,settings,settings,builder,put,node,name,routing,current,node,id,build,final,index,settings,index,settings,new,index,settings,index,meta,data,node,settings,final,index,shard,index,shard,if,store,provider,null,store,provider,is,create,store,is,shard,path,final,store,store,store,provider,apply,index,settings,boolean,success,false,try,index,cache,index,cache,new,index,cache,index,settings,new,disabled,query,cache,index,settings,null,mapper,service,mapper,service,mapper,test,utils,new,mapper,service,x,content,registry,create,temp,dir,index,settings,get,settings,index,mapper,service,merge,index,meta,data,mapper,service,merge,reason,similarity,service,similarity,service,new,similarity,service,index,settings,null,collections,empty,map,final,engine,warmer,warmer,searcher,cluster,settings,cluster,settings,new,cluster,settings,node,settings,cluster,settings,circuit,breaker,service,breaker,service,new,hierarchy,circuit,breaker,service,node,settings,cluster,settings,index,shard,new,index,shard,routing,index,settings,shard,path,store,null,index,cache,mapper,service,similarity,service,engine,factory,index,event,listener,index,searcher,wrapper,thread,pool,big,arrays,warmer,collections,empty,list,arrays,as,list,listeners,global,checkpoint,syncer,breaker,service,index,shard,add,shard,failure,callback,success,true,finally,if,success,false,ioutils,close,store,return,index,shard
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,                                   @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException;1547315388;creates a new initializing shard._@param routing                       shard routing to use_@param shardPath                     path to use for shard data_@param indexMetaData                 indexMetaData for the shard, including any mapping_@param storeProvider                 an optional custom store provider to use. If null a default file based store will be created_@param indexSearcherWrapper          an optional wrapper to be used during searchers_@param globalCheckpointSyncer        callback for syncing global checkpoints_@param indexEventListener            index event listener_@param listeners                     an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,_                                  @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException {_        final Settings nodeSettings = Settings.builder().put("node.name", routing.currentNodeId()).build()__        final IndexSettings indexSettings = new IndexSettings(indexMetaData, nodeSettings)__        final IndexShard indexShard__        if (storeProvider == null) {_            storeProvider = is -> createStore(is, shardPath)__        }_        final Store store = storeProvider.apply(indexSettings)__        boolean success = false__        try {_            IndexCache indexCache = new IndexCache(indexSettings, new DisabledQueryCache(indexSettings), null)__            MapperService mapperService = MapperTestUtils.newMapperService(xContentRegistry(), createTempDir(),_                    indexSettings.getSettings(), "index")__            mapperService.merge(indexMetaData, MapperService.MergeReason.MAPPING_RECOVERY)__            SimilarityService similarityService = new SimilarityService(indexSettings, null, Collections.emptyMap())__            final Engine.Warmer warmer = searcher -> {_            }__            ClusterSettings clusterSettings = new ClusterSettings(nodeSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)__            CircuitBreakerService breakerService = new HierarchyCircuitBreakerService(nodeSettings, clusterSettings)__            indexShard = new IndexShard(routing, indexSettings, shardPath, store, () -> null, indexCache, mapperService, similarityService,_                engineFactory, indexEventListener, indexSearcherWrapper, threadPool,_                BigArrays.NON_RECYCLING_INSTANCE, warmer, Collections.emptyList(), Arrays.asList(listeners), globalCheckpointSyncer,_                breakerService)__            indexShard.addShardFailureCallback(DEFAULT_SHARD_FAILURE_HANDLER)__            success = true__        } finally {_            if (success == false) {_                IOUtils.close(store)__            }_        }_        return indexShard__    };creates,a,new,initializing,shard,param,routing,shard,routing,to,use,param,shard,path,path,to,use,for,shard,data,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,store,provider,an,optional,custom,store,provider,to,use,if,null,a,default,file,based,store,will,be,created,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,index,event,listener,index,event,listener,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,shard,path,shard,path,index,meta,data,index,meta,data,nullable,checked,function,index,settings,store,ioexception,store,provider,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,index,event,listener,index,event,listener,indexing,operation,listener,listeners,throws,ioexception,final,settings,node,settings,settings,builder,put,node,name,routing,current,node,id,build,final,index,settings,index,settings,new,index,settings,index,meta,data,node,settings,final,index,shard,index,shard,if,store,provider,null,store,provider,is,create,store,is,shard,path,final,store,store,store,provider,apply,index,settings,boolean,success,false,try,index,cache,index,cache,new,index,cache,index,settings,new,disabled,query,cache,index,settings,null,mapper,service,mapper,service,mapper,test,utils,new,mapper,service,x,content,registry,create,temp,dir,index,settings,get,settings,index,mapper,service,merge,index,meta,data,mapper,service,merge,reason,similarity,service,similarity,service,new,similarity,service,index,settings,null,collections,empty,map,final,engine,warmer,warmer,searcher,cluster,settings,cluster,settings,new,cluster,settings,node,settings,cluster,settings,circuit,breaker,service,breaker,service,new,hierarchy,circuit,breaker,service,node,settings,cluster,settings,index,shard,new,index,shard,routing,index,settings,shard,path,store,null,index,cache,mapper,service,similarity,service,engine,factory,index,event,listener,index,searcher,wrapper,thread,pool,big,arrays,warmer,collections,empty,list,arrays,as,list,listeners,global,checkpoint,syncer,breaker,service,index,shard,add,shard,failure,callback,success,true,finally,if,success,false,ioutils,close,store,return,index,shard
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,                                   @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException;1547496475;creates a new initializing shard._@param routing                       shard routing to use_@param shardPath                     path to use for shard data_@param indexMetaData                 indexMetaData for the shard, including any mapping_@param storeProvider                 an optional custom store provider to use. If null a default file based store will be created_@param indexSearcherWrapper          an optional wrapper to be used during searchers_@param globalCheckpointSyncer        callback for syncing global checkpoints_@param indexEventListener            index event listener_@param listeners                     an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,_                                  @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException {_        final Settings nodeSettings = Settings.builder().put("node.name", routing.currentNodeId()).build()__        final IndexSettings indexSettings = new IndexSettings(indexMetaData, nodeSettings)__        final IndexShard indexShard__        if (storeProvider == null) {_            storeProvider = is -> createStore(is, shardPath)__        }_        final Store store = storeProvider.apply(indexSettings)__        boolean success = false__        try {_            IndexCache indexCache = new IndexCache(indexSettings, new DisabledQueryCache(indexSettings), null)__            MapperService mapperService = MapperTestUtils.newMapperService(xContentRegistry(), createTempDir(),_                    indexSettings.getSettings(), "index")__            mapperService.merge(indexMetaData, MapperService.MergeReason.MAPPING_RECOVERY)__            SimilarityService similarityService = new SimilarityService(indexSettings, null, Collections.emptyMap())__            final Engine.Warmer warmer = searcher -> {_            }__            ClusterSettings clusterSettings = new ClusterSettings(nodeSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)__            CircuitBreakerService breakerService = new HierarchyCircuitBreakerService(nodeSettings, clusterSettings)__            indexShard = new IndexShard(routing, indexSettings, shardPath, store, () -> null, indexCache, mapperService, similarityService,_                engineFactory, indexEventListener, indexSearcherWrapper, threadPool,_                BigArrays.NON_RECYCLING_INSTANCE, warmer, Collections.emptyList(), Arrays.asList(listeners), globalCheckpointSyncer,_                breakerService)__            indexShard.addShardFailureCallback(DEFAULT_SHARD_FAILURE_HANDLER)__            success = true__        } finally {_            if (success == false) {_                IOUtils.close(store)__            }_        }_        return indexShard__    };creates,a,new,initializing,shard,param,routing,shard,routing,to,use,param,shard,path,path,to,use,for,shard,data,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,store,provider,an,optional,custom,store,provider,to,use,if,null,a,default,file,based,store,will,be,created,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,index,event,listener,index,event,listener,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,shard,path,shard,path,index,meta,data,index,meta,data,nullable,checked,function,index,settings,store,ioexception,store,provider,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,index,event,listener,index,event,listener,indexing,operation,listener,listeners,throws,ioexception,final,settings,node,settings,settings,builder,put,node,name,routing,current,node,id,build,final,index,settings,index,settings,new,index,settings,index,meta,data,node,settings,final,index,shard,index,shard,if,store,provider,null,store,provider,is,create,store,is,shard,path,final,store,store,store,provider,apply,index,settings,boolean,success,false,try,index,cache,index,cache,new,index,cache,index,settings,new,disabled,query,cache,index,settings,null,mapper,service,mapper,service,mapper,test,utils,new,mapper,service,x,content,registry,create,temp,dir,index,settings,get,settings,index,mapper,service,merge,index,meta,data,mapper,service,merge,reason,similarity,service,similarity,service,new,similarity,service,index,settings,null,collections,empty,map,final,engine,warmer,warmer,searcher,cluster,settings,cluster,settings,new,cluster,settings,node,settings,cluster,settings,circuit,breaker,service,breaker,service,new,hierarchy,circuit,breaker,service,node,settings,cluster,settings,index,shard,new,index,shard,routing,index,settings,shard,path,store,null,index,cache,mapper,service,similarity,service,engine,factory,index,event,listener,index,searcher,wrapper,thread,pool,big,arrays,warmer,collections,empty,list,arrays,as,list,listeners,global,checkpoint,syncer,breaker,service,index,shard,add,shard,failure,callback,success,true,finally,if,success,false,ioutils,close,store,return,index,shard
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,                                   @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException;1547496886;creates a new initializing shard._@param routing                       shard routing to use_@param shardPath                     path to use for shard data_@param indexMetaData                 indexMetaData for the shard, including any mapping_@param storeProvider                 an optional custom store provider to use. If null a default file based store will be created_@param indexSearcherWrapper          an optional wrapper to be used during searchers_@param globalCheckpointSyncer        callback for syncing global checkpoints_@param indexEventListener            index event listener_@param listeners                     an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,_                                  @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException {_        final Settings nodeSettings = Settings.builder().put("node.name", routing.currentNodeId()).build()__        final IndexSettings indexSettings = new IndexSettings(indexMetaData, nodeSettings)__        final IndexShard indexShard__        if (storeProvider == null) {_            storeProvider = is -> createStore(is, shardPath)__        }_        final Store store = storeProvider.apply(indexSettings)__        boolean success = false__        try {_            IndexCache indexCache = new IndexCache(indexSettings, new DisabledQueryCache(indexSettings), null)__            MapperService mapperService = MapperTestUtils.newMapperService(xContentRegistry(), createTempDir(),_                    indexSettings.getSettings(), "index")__            mapperService.merge(indexMetaData, MapperService.MergeReason.MAPPING_RECOVERY)__            SimilarityService similarityService = new SimilarityService(indexSettings, null, Collections.emptyMap())__            final Engine.Warmer warmer = searcher -> {_            }__            ClusterSettings clusterSettings = new ClusterSettings(nodeSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)__            CircuitBreakerService breakerService = new HierarchyCircuitBreakerService(nodeSettings, clusterSettings)__            indexShard = new IndexShard(routing, indexSettings, shardPath, store, () -> null, indexCache, mapperService, similarityService,_                engineFactory, indexEventListener, indexSearcherWrapper, threadPool,_                BigArrays.NON_RECYCLING_INSTANCE, warmer, Collections.emptyList(), Arrays.asList(listeners), globalCheckpointSyncer,_                breakerService)__            indexShard.addShardFailureCallback(DEFAULT_SHARD_FAILURE_HANDLER)__            success = true__        } finally {_            if (success == false) {_                IOUtils.close(store)__            }_        }_        return indexShard__    };creates,a,new,initializing,shard,param,routing,shard,routing,to,use,param,shard,path,path,to,use,for,shard,data,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,store,provider,an,optional,custom,store,provider,to,use,if,null,a,default,file,based,store,will,be,created,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,index,event,listener,index,event,listener,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,shard,path,shard,path,index,meta,data,index,meta,data,nullable,checked,function,index,settings,store,ioexception,store,provider,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,index,event,listener,index,event,listener,indexing,operation,listener,listeners,throws,ioexception,final,settings,node,settings,settings,builder,put,node,name,routing,current,node,id,build,final,index,settings,index,settings,new,index,settings,index,meta,data,node,settings,final,index,shard,index,shard,if,store,provider,null,store,provider,is,create,store,is,shard,path,final,store,store,store,provider,apply,index,settings,boolean,success,false,try,index,cache,index,cache,new,index,cache,index,settings,new,disabled,query,cache,index,settings,null,mapper,service,mapper,service,mapper,test,utils,new,mapper,service,x,content,registry,create,temp,dir,index,settings,get,settings,index,mapper,service,merge,index,meta,data,mapper,service,merge,reason,similarity,service,similarity,service,new,similarity,service,index,settings,null,collections,empty,map,final,engine,warmer,warmer,searcher,cluster,settings,cluster,settings,new,cluster,settings,node,settings,cluster,settings,circuit,breaker,service,breaker,service,new,hierarchy,circuit,breaker,service,node,settings,cluster,settings,index,shard,new,index,shard,routing,index,settings,shard,path,store,null,index,cache,mapper,service,similarity,service,engine,factory,index,event,listener,index,searcher,wrapper,thread,pool,big,arrays,warmer,collections,empty,list,arrays,as,list,listeners,global,checkpoint,syncer,breaker,service,index,shard,add,shard,failure,callback,success,true,finally,if,success,false,ioutils,close,store,return,index,shard
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,                                   @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException;1547520324;creates a new initializing shard._@param routing                       shard routing to use_@param shardPath                     path to use for shard data_@param indexMetaData                 indexMetaData for the shard, including any mapping_@param storeProvider                 an optional custom store provider to use. If null a default file based store will be created_@param indexSearcherWrapper          an optional wrapper to be used during searchers_@param globalCheckpointSyncer        callback for syncing global checkpoints_@param indexEventListener            index event listener_@param listeners                     an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,_                                  @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException {_        final Settings nodeSettings = Settings.builder().put("node.name", routing.currentNodeId()).build()__        final IndexSettings indexSettings = new IndexSettings(indexMetaData, nodeSettings)__        final IndexShard indexShard__        if (storeProvider == null) {_            storeProvider = is -> createStore(is, shardPath)__        }_        final Store store = storeProvider.apply(indexSettings)__        boolean success = false__        try {_            IndexCache indexCache = new IndexCache(indexSettings, new DisabledQueryCache(indexSettings), null)__            MapperService mapperService = MapperTestUtils.newMapperService(xContentRegistry(), createTempDir(),_                    indexSettings.getSettings(), "index")__            mapperService.merge(indexMetaData, MapperService.MergeReason.MAPPING_RECOVERY)__            SimilarityService similarityService = new SimilarityService(indexSettings, null, Collections.emptyMap())__            final Engine.Warmer warmer = searcher -> {_            }__            ClusterSettings clusterSettings = new ClusterSettings(nodeSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)__            CircuitBreakerService breakerService = new HierarchyCircuitBreakerService(nodeSettings, clusterSettings)__            indexShard = new IndexShard(_                    routing,_                    indexSettings,_                    shardPath,_                    store,_                    () -> null,_                    indexCache,_                    mapperService,_                    similarityService,_                    engineFactory,_                    indexEventListener,_                    indexSearcherWrapper,_                    threadPool,_                    BigArrays.NON_RECYCLING_INSTANCE,_                    warmer,_                    Collections.emptyList(),_                    Arrays.asList(listeners),_                    globalCheckpointSyncer,_                    breakerService)__            indexShard.addShardFailureCallback(DEFAULT_SHARD_FAILURE_HANDLER)__            success = true__        } finally {_            if (success == false) {_                IOUtils.close(store)__            }_        }_        return indexShard__    };creates,a,new,initializing,shard,param,routing,shard,routing,to,use,param,shard,path,path,to,use,for,shard,data,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,store,provider,an,optional,custom,store,provider,to,use,if,null,a,default,file,based,store,will,be,created,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,index,event,listener,index,event,listener,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,shard,path,shard,path,index,meta,data,index,meta,data,nullable,checked,function,index,settings,store,ioexception,store,provider,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,index,event,listener,index,event,listener,indexing,operation,listener,listeners,throws,ioexception,final,settings,node,settings,settings,builder,put,node,name,routing,current,node,id,build,final,index,settings,index,settings,new,index,settings,index,meta,data,node,settings,final,index,shard,index,shard,if,store,provider,null,store,provider,is,create,store,is,shard,path,final,store,store,store,provider,apply,index,settings,boolean,success,false,try,index,cache,index,cache,new,index,cache,index,settings,new,disabled,query,cache,index,settings,null,mapper,service,mapper,service,mapper,test,utils,new,mapper,service,x,content,registry,create,temp,dir,index,settings,get,settings,index,mapper,service,merge,index,meta,data,mapper,service,merge,reason,similarity,service,similarity,service,new,similarity,service,index,settings,null,collections,empty,map,final,engine,warmer,warmer,searcher,cluster,settings,cluster,settings,new,cluster,settings,node,settings,cluster,settings,circuit,breaker,service,breaker,service,new,hierarchy,circuit,breaker,service,node,settings,cluster,settings,index,shard,new,index,shard,routing,index,settings,shard,path,store,null,index,cache,mapper,service,similarity,service,engine,factory,index,event,listener,index,searcher,wrapper,thread,pool,big,arrays,warmer,collections,empty,list,arrays,as,list,listeners,global,checkpoint,syncer,breaker,service,index,shard,add,shard,failure,callback,success,true,finally,if,success,false,ioutils,close,store,return,index,shard
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,                                   @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException;1547552901;creates a new initializing shard._@param routing                       shard routing to use_@param shardPath                     path to use for shard data_@param indexMetaData                 indexMetaData for the shard, including any mapping_@param storeProvider                 an optional custom store provider to use. If null a default file based store will be created_@param indexSearcherWrapper          an optional wrapper to be used during searchers_@param globalCheckpointSyncer        callback for syncing global checkpoints_@param indexEventListener            index event listener_@param listeners                     an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,_                                  @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException {_        final Settings nodeSettings = Settings.builder().put("node.name", routing.currentNodeId()).build()__        final IndexSettings indexSettings = new IndexSettings(indexMetaData, nodeSettings)__        final IndexShard indexShard__        if (storeProvider == null) {_            storeProvider = is -> createStore(is, shardPath)__        }_        final Store store = storeProvider.apply(indexSettings)__        boolean success = false__        try {_            IndexCache indexCache = new IndexCache(indexSettings, new DisabledQueryCache(indexSettings), null)__            MapperService mapperService = MapperTestUtils.newMapperService(xContentRegistry(), createTempDir(),_                    indexSettings.getSettings(), "index")__            mapperService.merge(indexMetaData, MapperService.MergeReason.MAPPING_RECOVERY)__            SimilarityService similarityService = new SimilarityService(indexSettings, null, Collections.emptyMap())__            final Engine.Warmer warmer = searcher -> {_            }__            ClusterSettings clusterSettings = new ClusterSettings(nodeSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)__            CircuitBreakerService breakerService = new HierarchyCircuitBreakerService(nodeSettings, clusterSettings)__            indexShard = new IndexShard(_                    routing,_                    indexSettings,_                    shardPath,_                    store,_                    () -> null,_                    indexCache,_                    mapperService,_                    similarityService,_                    engineFactory,_                    indexEventListener,_                    indexSearcherWrapper,_                    threadPool,_                    BigArrays.NON_RECYCLING_INSTANCE,_                    warmer,_                    Collections.emptyList(),_                    Arrays.asList(listeners),_                    globalCheckpointSyncer,_                    breakerService)__            indexShard.addShardFailureCallback(DEFAULT_SHARD_FAILURE_HANDLER)__            success = true__        } finally {_            if (success == false) {_                IOUtils.close(store)__            }_        }_        return indexShard__    };creates,a,new,initializing,shard,param,routing,shard,routing,to,use,param,shard,path,path,to,use,for,shard,data,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,store,provider,an,optional,custom,store,provider,to,use,if,null,a,default,file,based,store,will,be,created,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,index,event,listener,index,event,listener,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,shard,path,shard,path,index,meta,data,index,meta,data,nullable,checked,function,index,settings,store,ioexception,store,provider,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,index,event,listener,index,event,listener,indexing,operation,listener,listeners,throws,ioexception,final,settings,node,settings,settings,builder,put,node,name,routing,current,node,id,build,final,index,settings,index,settings,new,index,settings,index,meta,data,node,settings,final,index,shard,index,shard,if,store,provider,null,store,provider,is,create,store,is,shard,path,final,store,store,store,provider,apply,index,settings,boolean,success,false,try,index,cache,index,cache,new,index,cache,index,settings,new,disabled,query,cache,index,settings,null,mapper,service,mapper,service,mapper,test,utils,new,mapper,service,x,content,registry,create,temp,dir,index,settings,get,settings,index,mapper,service,merge,index,meta,data,mapper,service,merge,reason,similarity,service,similarity,service,new,similarity,service,index,settings,null,collections,empty,map,final,engine,warmer,warmer,searcher,cluster,settings,cluster,settings,new,cluster,settings,node,settings,cluster,settings,circuit,breaker,service,breaker,service,new,hierarchy,circuit,breaker,service,node,settings,cluster,settings,index,shard,new,index,shard,routing,index,settings,shard,path,store,null,index,cache,mapper,service,similarity,service,engine,factory,index,event,listener,index,searcher,wrapper,thread,pool,big,arrays,warmer,collections,empty,list,arrays,as,list,listeners,global,checkpoint,syncer,breaker,service,index,shard,add,shard,failure,callback,success,true,finally,if,success,false,ioutils,close,store,return,index,shard
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,                                   @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException;1548593396;creates a new initializing shard._@param routing                       shard routing to use_@param shardPath                     path to use for shard data_@param indexMetaData                 indexMetaData for the shard, including any mapping_@param storeProvider                 an optional custom store provider to use. If null a default file based store will be created_@param indexSearcherWrapper          an optional wrapper to be used during searchers_@param globalCheckpointSyncer        callback for syncing global checkpoints_@param indexEventListener            index event listener_@param listeners                     an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,_                                  @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException {_        final Settings nodeSettings = Settings.builder().put("node.name", routing.currentNodeId()).build()__        final IndexSettings indexSettings = new IndexSettings(indexMetaData, nodeSettings)__        final IndexShard indexShard__        if (storeProvider == null) {_            storeProvider = is -> createStore(is, shardPath)__        }_        final Store store = storeProvider.apply(indexSettings)__        boolean success = false__        try {_            IndexCache indexCache = new IndexCache(indexSettings, new DisabledQueryCache(indexSettings), null)__            MapperService mapperService = MapperTestUtils.newMapperService(xContentRegistry(), createTempDir(),_                    indexSettings.getSettings(), "index")__            mapperService.merge(indexMetaData, MapperService.MergeReason.MAPPING_RECOVERY)__            SimilarityService similarityService = new SimilarityService(indexSettings, null, Collections.emptyMap())__            final Engine.Warmer warmer = searcher -> {_            }__            ClusterSettings clusterSettings = new ClusterSettings(nodeSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)__            CircuitBreakerService breakerService = new HierarchyCircuitBreakerService(nodeSettings, clusterSettings)__            indexShard = new IndexShard(_                    routing,_                    indexSettings,_                    shardPath,_                    store,_                    () -> null,_                    indexCache,_                    mapperService,_                    similarityService,_                    engineFactory,_                    indexEventListener,_                    indexSearcherWrapper,_                    threadPool,_                    BigArrays.NON_RECYCLING_INSTANCE,_                    warmer,_                    Collections.emptyList(),_                    Arrays.asList(listeners),_                    globalCheckpointSyncer,_                    (leases, listener) -> {},_                    breakerService)__            indexShard.addShardFailureCallback(DEFAULT_SHARD_FAILURE_HANDLER)__            success = true__        } finally {_            if (success == false) {_                IOUtils.close(store)__            }_        }_        return indexShard__    };creates,a,new,initializing,shard,param,routing,shard,routing,to,use,param,shard,path,path,to,use,for,shard,data,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,store,provider,an,optional,custom,store,provider,to,use,if,null,a,default,file,based,store,will,be,created,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,index,event,listener,index,event,listener,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,shard,path,shard,path,index,meta,data,index,meta,data,nullable,checked,function,index,settings,store,ioexception,store,provider,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,index,event,listener,index,event,listener,indexing,operation,listener,listeners,throws,ioexception,final,settings,node,settings,settings,builder,put,node,name,routing,current,node,id,build,final,index,settings,index,settings,new,index,settings,index,meta,data,node,settings,final,index,shard,index,shard,if,store,provider,null,store,provider,is,create,store,is,shard,path,final,store,store,store,provider,apply,index,settings,boolean,success,false,try,index,cache,index,cache,new,index,cache,index,settings,new,disabled,query,cache,index,settings,null,mapper,service,mapper,service,mapper,test,utils,new,mapper,service,x,content,registry,create,temp,dir,index,settings,get,settings,index,mapper,service,merge,index,meta,data,mapper,service,merge,reason,similarity,service,similarity,service,new,similarity,service,index,settings,null,collections,empty,map,final,engine,warmer,warmer,searcher,cluster,settings,cluster,settings,new,cluster,settings,node,settings,cluster,settings,circuit,breaker,service,breaker,service,new,hierarchy,circuit,breaker,service,node,settings,cluster,settings,index,shard,new,index,shard,routing,index,settings,shard,path,store,null,index,cache,mapper,service,similarity,service,engine,factory,index,event,listener,index,searcher,wrapper,thread,pool,big,arrays,warmer,collections,empty,list,arrays,as,list,listeners,global,checkpoint,syncer,leases,listener,breaker,service,index,shard,add,shard,failure,callback,success,true,finally,if,success,false,ioutils,close,store,return,index,shard
IndexShardTestCase -> protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,                                   @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,                                   @Nullable IndexSearcherWrapper indexSearcherWrapper,                                   @Nullable EngineFactory engineFactory,                                   Runnable globalCheckpointSyncer,                                   IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException;1549294529;creates a new initializing shard._@param routing                       shard routing to use_@param shardPath                     path to use for shard data_@param indexMetaData                 indexMetaData for the shard, including any mapping_@param storeProvider                 an optional custom store provider to use. If null a default file based store will be created_@param indexSearcherWrapper          an optional wrapper to be used during searchers_@param globalCheckpointSyncer        callback for syncing global checkpoints_@param indexEventListener            index event listener_@param listeners                     an optional set of listeners to add to the shard;protected IndexShard newShard(ShardRouting routing, ShardPath shardPath, IndexMetaData indexMetaData,_                                  @Nullable CheckedFunction<IndexSettings, Store, IOException> storeProvider,_                                  @Nullable IndexSearcherWrapper indexSearcherWrapper,_                                  @Nullable EngineFactory engineFactory,_                                  Runnable globalCheckpointSyncer,_                                  IndexEventListener indexEventListener, IndexingOperationListener... listeners) throws IOException {_        final Settings nodeSettings = Settings.builder().put("node.name", routing.currentNodeId()).build()__        final IndexSettings indexSettings = new IndexSettings(indexMetaData, nodeSettings)__        final IndexShard indexShard__        if (storeProvider == null) {_            storeProvider = is -> createStore(is, shardPath)__        }_        final Store store = storeProvider.apply(indexSettings)__        boolean success = false__        try {_            IndexCache indexCache = new IndexCache(indexSettings, new DisabledQueryCache(indexSettings), null)__            MapperService mapperService = MapperTestUtils.newMapperService(xContentRegistry(), createTempDir(),_                    indexSettings.getSettings(), "index")__            mapperService.merge(indexMetaData, MapperService.MergeReason.MAPPING_RECOVERY)__            SimilarityService similarityService = new SimilarityService(indexSettings, null, Collections.emptyMap())__            final Engine.Warmer warmer = searcher -> {_            }__            ClusterSettings clusterSettings = new ClusterSettings(nodeSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)__            CircuitBreakerService breakerService = new HierarchyCircuitBreakerService(nodeSettings, clusterSettings)__            indexShard = new IndexShard(_                    routing,_                    indexSettings,_                    shardPath,_                    store,_                    () -> null,_                    indexCache,_                    mapperService,_                    similarityService,_                    engineFactory,_                    indexEventListener,_                    indexSearcherWrapper,_                    threadPool,_                    BigArrays.NON_RECYCLING_INSTANCE,_                    warmer,_                    Collections.emptyList(),_                    Arrays.asList(listeners),_                    globalCheckpointSyncer,_                    RetentionLeaseSyncer.EMPTY,_                    breakerService)__            indexShard.addShardFailureCallback(DEFAULT_SHARD_FAILURE_HANDLER)__            success = true__        } finally {_            if (success == false) {_                IOUtils.close(store)__            }_        }_        return indexShard__    };creates,a,new,initializing,shard,param,routing,shard,routing,to,use,param,shard,path,path,to,use,for,shard,data,param,index,meta,data,index,meta,data,for,the,shard,including,any,mapping,param,store,provider,an,optional,custom,store,provider,to,use,if,null,a,default,file,based,store,will,be,created,param,index,searcher,wrapper,an,optional,wrapper,to,be,used,during,searchers,param,global,checkpoint,syncer,callback,for,syncing,global,checkpoints,param,index,event,listener,index,event,listener,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,shard,routing,routing,shard,path,shard,path,index,meta,data,index,meta,data,nullable,checked,function,index,settings,store,ioexception,store,provider,nullable,index,searcher,wrapper,index,searcher,wrapper,nullable,engine,factory,engine,factory,runnable,global,checkpoint,syncer,index,event,listener,index,event,listener,indexing,operation,listener,listeners,throws,ioexception,final,settings,node,settings,settings,builder,put,node,name,routing,current,node,id,build,final,index,settings,index,settings,new,index,settings,index,meta,data,node,settings,final,index,shard,index,shard,if,store,provider,null,store,provider,is,create,store,is,shard,path,final,store,store,store,provider,apply,index,settings,boolean,success,false,try,index,cache,index,cache,new,index,cache,index,settings,new,disabled,query,cache,index,settings,null,mapper,service,mapper,service,mapper,test,utils,new,mapper,service,x,content,registry,create,temp,dir,index,settings,get,settings,index,mapper,service,merge,index,meta,data,mapper,service,merge,reason,similarity,service,similarity,service,new,similarity,service,index,settings,null,collections,empty,map,final,engine,warmer,warmer,searcher,cluster,settings,cluster,settings,new,cluster,settings,node,settings,cluster,settings,circuit,breaker,service,breaker,service,new,hierarchy,circuit,breaker,service,node,settings,cluster,settings,index,shard,new,index,shard,routing,index,settings,shard,path,store,null,index,cache,mapper,service,similarity,service,engine,factory,index,event,listener,index,searcher,wrapper,thread,pool,big,arrays,warmer,collections,empty,list,arrays,as,list,listeners,global,checkpoint,syncer,retention,lease,syncer,empty,breaker,service,index,shard,add,shard,failure,callback,success,true,finally,if,success,false,ioutils,close,store,return,index,shard
IndexShardTestCase -> protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException;1531910483;promotes a replica to primary, incrementing it's term and starting it if needed;protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException {_        assertThat(inSyncIds, contains(replica.routingEntry().allocationId().getId()))__        final ShardRouting routingEntry = newShardRouting(_            replica.routingEntry().shardId(),_            replica.routingEntry().currentNodeId(),_            null,_            true,_            ShardRoutingState.STARTED,_            replica.routingEntry().allocationId())___        final IndexShardRoutingTable newRoutingTable = new IndexShardRoutingTable.Builder(routingTable)_            .removeShard(replica.routingEntry())_            .addShard(routingEntry)_            .build()__        replica.updateShardState(routingEntry, replica.getPrimaryTerm() + 1,_            (is, listener) ->_                listener.onResponse(new PrimaryReplicaSyncer.ResyncTask(1, "type", "action", "desc", null, Collections.emptyMap())),_            currentClusterStateVersion.incrementAndGet(),_            inSyncIds, newRoutingTable, Collections.emptySet())__    };promotes,a,replica,to,primary,incrementing,it,s,term,and,starting,it,if,needed;protected,void,promote,replica,index,shard,replica,set,string,in,sync,ids,index,shard,routing,table,routing,table,throws,ioexception,assert,that,in,sync,ids,contains,replica,routing,entry,allocation,id,get,id,final,shard,routing,routing,entry,new,shard,routing,replica,routing,entry,shard,id,replica,routing,entry,current,node,id,null,true,shard,routing,state,started,replica,routing,entry,allocation,id,final,index,shard,routing,table,new,routing,table,new,index,shard,routing,table,builder,routing,table,remove,shard,replica,routing,entry,add,shard,routing,entry,build,replica,update,shard,state,routing,entry,replica,get,primary,term,1,is,listener,listener,on,response,new,primary,replica,syncer,resync,task,1,type,action,desc,null,collections,empty,map,current,cluster,state,version,increment,and,get,in,sync,ids,new,routing,table,collections,empty,set
IndexShardTestCase -> protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException;1532434432;promotes a replica to primary, incrementing it's term and starting it if needed;protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException {_        assertThat(inSyncIds, contains(replica.routingEntry().allocationId().getId()))__        final ShardRouting routingEntry = newShardRouting(_            replica.routingEntry().shardId(),_            replica.routingEntry().currentNodeId(),_            null,_            true,_            ShardRoutingState.STARTED,_            replica.routingEntry().allocationId())___        final IndexShardRoutingTable newRoutingTable = new IndexShardRoutingTable.Builder(routingTable)_            .removeShard(replica.routingEntry())_            .addShard(routingEntry)_            .build()__        replica.updateShardState(routingEntry, replica.getPrimaryTerm() + 1,_            (is, listener) ->_                listener.onResponse(new PrimaryReplicaSyncer.ResyncTask(1, "type", "action", "desc", null, Collections.emptyMap())),_            currentClusterStateVersion.incrementAndGet(),_            inSyncIds, newRoutingTable, Collections.emptySet())__    };promotes,a,replica,to,primary,incrementing,it,s,term,and,starting,it,if,needed;protected,void,promote,replica,index,shard,replica,set,string,in,sync,ids,index,shard,routing,table,routing,table,throws,ioexception,assert,that,in,sync,ids,contains,replica,routing,entry,allocation,id,get,id,final,shard,routing,routing,entry,new,shard,routing,replica,routing,entry,shard,id,replica,routing,entry,current,node,id,null,true,shard,routing,state,started,replica,routing,entry,allocation,id,final,index,shard,routing,table,new,routing,table,new,index,shard,routing,table,builder,routing,table,remove,shard,replica,routing,entry,add,shard,routing,entry,build,replica,update,shard,state,routing,entry,replica,get,primary,term,1,is,listener,listener,on,response,new,primary,replica,syncer,resync,task,1,type,action,desc,null,collections,empty,map,current,cluster,state,version,increment,and,get,in,sync,ids,new,routing,table,collections,empty,set
IndexShardTestCase -> protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException;1533295538;promotes a replica to primary, incrementing it's term and starting it if needed;protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException {_        assertThat(inSyncIds, contains(replica.routingEntry().allocationId().getId()))__        final ShardRouting routingEntry = newShardRouting(_            replica.routingEntry().shardId(),_            replica.routingEntry().currentNodeId(),_            null,_            true,_            ShardRoutingState.STARTED,_            replica.routingEntry().allocationId())___        final IndexShardRoutingTable newRoutingTable = new IndexShardRoutingTable.Builder(routingTable)_            .removeShard(replica.routingEntry())_            .addShard(routingEntry)_            .build()__        replica.updateShardState(routingEntry, replica.getPendingPrimaryTerm() + 1,_            (is, listener) ->_                listener.onResponse(new PrimaryReplicaSyncer.ResyncTask(1, "type", "action", "desc", null, Collections.emptyMap())),_            currentClusterStateVersion.incrementAndGet(),_            inSyncIds, newRoutingTable, Collections.emptySet())__    };promotes,a,replica,to,primary,incrementing,it,s,term,and,starting,it,if,needed;protected,void,promote,replica,index,shard,replica,set,string,in,sync,ids,index,shard,routing,table,routing,table,throws,ioexception,assert,that,in,sync,ids,contains,replica,routing,entry,allocation,id,get,id,final,shard,routing,routing,entry,new,shard,routing,replica,routing,entry,shard,id,replica,routing,entry,current,node,id,null,true,shard,routing,state,started,replica,routing,entry,allocation,id,final,index,shard,routing,table,new,routing,table,new,index,shard,routing,table,builder,routing,table,remove,shard,replica,routing,entry,add,shard,routing,entry,build,replica,update,shard,state,routing,entry,replica,get,pending,primary,term,1,is,listener,listener,on,response,new,primary,replica,syncer,resync,task,1,type,action,desc,null,collections,empty,map,current,cluster,state,version,increment,and,get,in,sync,ids,new,routing,table,collections,empty,set
IndexShardTestCase -> protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException;1535723122;promotes a replica to primary, incrementing it's term and starting it if needed;protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException {_        assertThat(inSyncIds, contains(replica.routingEntry().allocationId().getId()))__        final ShardRouting routingEntry = newShardRouting(_            replica.routingEntry().shardId(),_            replica.routingEntry().currentNodeId(),_            null,_            true,_            ShardRoutingState.STARTED,_            replica.routingEntry().allocationId())___        final IndexShardRoutingTable newRoutingTable = new IndexShardRoutingTable.Builder(routingTable)_            .removeShard(replica.routingEntry())_            .addShard(routingEntry)_            .build()__        replica.updateShardState(routingEntry, replica.getPendingPrimaryTerm() + 1,_            (is, listener) ->_                listener.onResponse(new PrimaryReplicaSyncer.ResyncTask(1, "type", "action", "desc", null, Collections.emptyMap())),_            currentClusterStateVersion.incrementAndGet(),_            inSyncIds, newRoutingTable, Collections.emptySet())__    };promotes,a,replica,to,primary,incrementing,it,s,term,and,starting,it,if,needed;protected,void,promote,replica,index,shard,replica,set,string,in,sync,ids,index,shard,routing,table,routing,table,throws,ioexception,assert,that,in,sync,ids,contains,replica,routing,entry,allocation,id,get,id,final,shard,routing,routing,entry,new,shard,routing,replica,routing,entry,shard,id,replica,routing,entry,current,node,id,null,true,shard,routing,state,started,replica,routing,entry,allocation,id,final,index,shard,routing,table,new,routing,table,new,index,shard,routing,table,builder,routing,table,remove,shard,replica,routing,entry,add,shard,routing,entry,build,replica,update,shard,state,routing,entry,replica,get,pending,primary,term,1,is,listener,listener,on,response,new,primary,replica,syncer,resync,task,1,type,action,desc,null,collections,empty,map,current,cluster,state,version,increment,and,get,in,sync,ids,new,routing,table,collections,empty,set
IndexShardTestCase -> protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException;1535965276;promotes a replica to primary, incrementing it's term and starting it if needed;protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException {_        assertThat(inSyncIds, contains(replica.routingEntry().allocationId().getId()))__        final ShardRouting routingEntry = newShardRouting(_            replica.routingEntry().shardId(),_            replica.routingEntry().currentNodeId(),_            null,_            true,_            ShardRoutingState.STARTED,_            replica.routingEntry().allocationId())___        final IndexShardRoutingTable newRoutingTable = new IndexShardRoutingTable.Builder(routingTable)_            .removeShard(replica.routingEntry())_            .addShard(routingEntry)_            .build()__        replica.updateShardState(routingEntry, replica.getPendingPrimaryTerm() + 1,_            (is, listener) ->_                listener.onResponse(new PrimaryReplicaSyncer.ResyncTask(1, "type", "action", "desc", null, Collections.emptyMap())),_            currentClusterStateVersion.incrementAndGet(),_            inSyncIds, newRoutingTable, Collections.emptySet())__    };promotes,a,replica,to,primary,incrementing,it,s,term,and,starting,it,if,needed;protected,void,promote,replica,index,shard,replica,set,string,in,sync,ids,index,shard,routing,table,routing,table,throws,ioexception,assert,that,in,sync,ids,contains,replica,routing,entry,allocation,id,get,id,final,shard,routing,routing,entry,new,shard,routing,replica,routing,entry,shard,id,replica,routing,entry,current,node,id,null,true,shard,routing,state,started,replica,routing,entry,allocation,id,final,index,shard,routing,table,new,routing,table,new,index,shard,routing,table,builder,routing,table,remove,shard,replica,routing,entry,add,shard,routing,entry,build,replica,update,shard,state,routing,entry,replica,get,pending,primary,term,1,is,listener,listener,on,response,new,primary,replica,syncer,resync,task,1,type,action,desc,null,collections,empty,map,current,cluster,state,version,increment,and,get,in,sync,ids,new,routing,table,collections,empty,set
IndexShardTestCase -> protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException;1536611444;promotes a replica to primary, incrementing it's term and starting it if needed;protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException {_        assertThat(inSyncIds, contains(replica.routingEntry().allocationId().getId()))__        final ShardRouting routingEntry = newShardRouting(_            replica.routingEntry().shardId(),_            replica.routingEntry().currentNodeId(),_            null,_            true,_            ShardRoutingState.STARTED,_            replica.routingEntry().allocationId())___        final IndexShardRoutingTable newRoutingTable = new IndexShardRoutingTable.Builder(routingTable)_            .removeShard(replica.routingEntry())_            .addShard(routingEntry)_            .build()__        replica.updateShardState(routingEntry, replica.getPendingPrimaryTerm() + 1,_            (is, listener) ->_                listener.onResponse(new PrimaryReplicaSyncer.ResyncTask(1, "type", "action", "desc", null, Collections.emptyMap())),_            currentClusterStateVersion.incrementAndGet(),_            inSyncIds, newRoutingTable, Collections.emptySet())__    };promotes,a,replica,to,primary,incrementing,it,s,term,and,starting,it,if,needed;protected,void,promote,replica,index,shard,replica,set,string,in,sync,ids,index,shard,routing,table,routing,table,throws,ioexception,assert,that,in,sync,ids,contains,replica,routing,entry,allocation,id,get,id,final,shard,routing,routing,entry,new,shard,routing,replica,routing,entry,shard,id,replica,routing,entry,current,node,id,null,true,shard,routing,state,started,replica,routing,entry,allocation,id,final,index,shard,routing,table,new,routing,table,new,index,shard,routing,table,builder,routing,table,remove,shard,replica,routing,entry,add,shard,routing,entry,build,replica,update,shard,state,routing,entry,replica,get,pending,primary,term,1,is,listener,listener,on,response,new,primary,replica,syncer,resync,task,1,type,action,desc,null,collections,empty,map,current,cluster,state,version,increment,and,get,in,sync,ids,new,routing,table,collections,empty,set
IndexShardTestCase -> protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException;1536828374;promotes a replica to primary, incrementing it's term and starting it if needed;protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException {_        assertThat(inSyncIds, contains(replica.routingEntry().allocationId().getId()))__        final ShardRouting routingEntry = newShardRouting(_            replica.routingEntry().shardId(),_            replica.routingEntry().currentNodeId(),_            null,_            true,_            ShardRoutingState.STARTED,_            replica.routingEntry().allocationId())___        final IndexShardRoutingTable newRoutingTable = new IndexShardRoutingTable.Builder(routingTable)_            .removeShard(replica.routingEntry())_            .addShard(routingEntry)_            .build()__        replica.updateShardState(routingEntry, replica.getPendingPrimaryTerm() + 1,_            (is, listener) ->_                listener.onResponse(new PrimaryReplicaSyncer.ResyncTask(1, "type", "action", "desc", null, Collections.emptyMap())),_            currentClusterStateVersion.incrementAndGet(),_            inSyncIds, newRoutingTable, Collections.emptySet())__    };promotes,a,replica,to,primary,incrementing,it,s,term,and,starting,it,if,needed;protected,void,promote,replica,index,shard,replica,set,string,in,sync,ids,index,shard,routing,table,routing,table,throws,ioexception,assert,that,in,sync,ids,contains,replica,routing,entry,allocation,id,get,id,final,shard,routing,routing,entry,new,shard,routing,replica,routing,entry,shard,id,replica,routing,entry,current,node,id,null,true,shard,routing,state,started,replica,routing,entry,allocation,id,final,index,shard,routing,table,new,routing,table,new,index,shard,routing,table,builder,routing,table,remove,shard,replica,routing,entry,add,shard,routing,entry,build,replica,update,shard,state,routing,entry,replica,get,pending,primary,term,1,is,listener,listener,on,response,new,primary,replica,syncer,resync,task,1,type,action,desc,null,collections,empty,map,current,cluster,state,version,increment,and,get,in,sync,ids,new,routing,table,collections,empty,set
IndexShardTestCase -> protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException;1537371806;promotes a replica to primary, incrementing it's term and starting it if needed;protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException {_        assertThat(inSyncIds, contains(replica.routingEntry().allocationId().getId()))__        final ShardRouting routingEntry = newShardRouting(_            replica.routingEntry().shardId(),_            replica.routingEntry().currentNodeId(),_            null,_            true,_            ShardRoutingState.STARTED,_            replica.routingEntry().allocationId())___        final IndexShardRoutingTable newRoutingTable = new IndexShardRoutingTable.Builder(routingTable)_            .removeShard(replica.routingEntry())_            .addShard(routingEntry)_            .build()__        replica.updateShardState(routingEntry, replica.getPendingPrimaryTerm() + 1,_            (is, listener) ->_                listener.onResponse(new PrimaryReplicaSyncer.ResyncTask(1, "type", "action", "desc", null, Collections.emptyMap())),_            currentClusterStateVersion.incrementAndGet(),_            inSyncIds, newRoutingTable, Collections.emptySet())__    };promotes,a,replica,to,primary,incrementing,it,s,term,and,starting,it,if,needed;protected,void,promote,replica,index,shard,replica,set,string,in,sync,ids,index,shard,routing,table,routing,table,throws,ioexception,assert,that,in,sync,ids,contains,replica,routing,entry,allocation,id,get,id,final,shard,routing,routing,entry,new,shard,routing,replica,routing,entry,shard,id,replica,routing,entry,current,node,id,null,true,shard,routing,state,started,replica,routing,entry,allocation,id,final,index,shard,routing,table,new,routing,table,new,index,shard,routing,table,builder,routing,table,remove,shard,replica,routing,entry,add,shard,routing,entry,build,replica,update,shard,state,routing,entry,replica,get,pending,primary,term,1,is,listener,listener,on,response,new,primary,replica,syncer,resync,task,1,type,action,desc,null,collections,empty,map,current,cluster,state,version,increment,and,get,in,sync,ids,new,routing,table,collections,empty,set
IndexShardTestCase -> protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException;1537806831;promotes a replica to primary, incrementing it's term and starting it if needed;protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException {_        assertThat(inSyncIds, contains(replica.routingEntry().allocationId().getId()))__        final ShardRouting routingEntry = newShardRouting(_            replica.routingEntry().shardId(),_            replica.routingEntry().currentNodeId(),_            null,_            true,_            ShardRoutingState.STARTED,_            replica.routingEntry().allocationId())___        final IndexShardRoutingTable newRoutingTable = new IndexShardRoutingTable.Builder(routingTable)_            .removeShard(replica.routingEntry())_            .addShard(routingEntry)_            .build()__        replica.updateShardState(routingEntry, replica.getPendingPrimaryTerm() + 1,_            (is, listener) ->_                listener.onResponse(new PrimaryReplicaSyncer.ResyncTask(1, "type", "action", "desc", null, Collections.emptyMap())),_            currentClusterStateVersion.incrementAndGet(),_            inSyncIds, newRoutingTable, Collections.emptySet())__    };promotes,a,replica,to,primary,incrementing,it,s,term,and,starting,it,if,needed;protected,void,promote,replica,index,shard,replica,set,string,in,sync,ids,index,shard,routing,table,routing,table,throws,ioexception,assert,that,in,sync,ids,contains,replica,routing,entry,allocation,id,get,id,final,shard,routing,routing,entry,new,shard,routing,replica,routing,entry,shard,id,replica,routing,entry,current,node,id,null,true,shard,routing,state,started,replica,routing,entry,allocation,id,final,index,shard,routing,table,new,routing,table,new,index,shard,routing,table,builder,routing,table,remove,shard,replica,routing,entry,add,shard,routing,entry,build,replica,update,shard,state,routing,entry,replica,get,pending,primary,term,1,is,listener,listener,on,response,new,primary,replica,syncer,resync,task,1,type,action,desc,null,collections,empty,map,current,cluster,state,version,increment,and,get,in,sync,ids,new,routing,table,collections,empty,set
IndexShardTestCase -> protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException;1538067637;promotes a replica to primary, incrementing it's term and starting it if needed;protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException {_        assertThat(inSyncIds, contains(replica.routingEntry().allocationId().getId()))__        final ShardRouting routingEntry = newShardRouting(_            replica.routingEntry().shardId(),_            replica.routingEntry().currentNodeId(),_            null,_            true,_            ShardRoutingState.STARTED,_            replica.routingEntry().allocationId())___        final IndexShardRoutingTable newRoutingTable = new IndexShardRoutingTable.Builder(routingTable)_            .removeShard(replica.routingEntry())_            .addShard(routingEntry)_            .build()__        replica.updateShardState(routingEntry, replica.getPendingPrimaryTerm() + 1,_            (is, listener) ->_                listener.onResponse(new PrimaryReplicaSyncer.ResyncTask(1, "type", "action", "desc", null, Collections.emptyMap())),_            currentClusterStateVersion.incrementAndGet(),_            inSyncIds, newRoutingTable, Collections.emptySet())__    };promotes,a,replica,to,primary,incrementing,it,s,term,and,starting,it,if,needed;protected,void,promote,replica,index,shard,replica,set,string,in,sync,ids,index,shard,routing,table,routing,table,throws,ioexception,assert,that,in,sync,ids,contains,replica,routing,entry,allocation,id,get,id,final,shard,routing,routing,entry,new,shard,routing,replica,routing,entry,shard,id,replica,routing,entry,current,node,id,null,true,shard,routing,state,started,replica,routing,entry,allocation,id,final,index,shard,routing,table,new,routing,table,new,index,shard,routing,table,builder,routing,table,remove,shard,replica,routing,entry,add,shard,routing,entry,build,replica,update,shard,state,routing,entry,replica,get,pending,primary,term,1,is,listener,listener,on,response,new,primary,replica,syncer,resync,task,1,type,action,desc,null,collections,empty,map,current,cluster,state,version,increment,and,get,in,sync,ids,new,routing,table,collections,empty,set
IndexShardTestCase -> protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException;1542697404;promotes a replica to primary, incrementing it's term and starting it if needed;protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException {_        assertThat(inSyncIds, contains(replica.routingEntry().allocationId().getId()))__        final ShardRouting routingEntry = newShardRouting(_            replica.routingEntry().shardId(),_            replica.routingEntry().currentNodeId(),_            null,_            true,_            ShardRoutingState.STARTED,_            replica.routingEntry().allocationId())___        final IndexShardRoutingTable newRoutingTable = new IndexShardRoutingTable.Builder(routingTable)_            .removeShard(replica.routingEntry())_            .addShard(routingEntry)_            .build()__        replica.updateShardState(routingEntry, replica.getPendingPrimaryTerm() + 1,_            (is, listener) ->_                listener.onResponse(new PrimaryReplicaSyncer.ResyncTask(1, "type", "action", "desc", null, Collections.emptyMap())),_            currentClusterStateVersion.incrementAndGet(),_            inSyncIds, newRoutingTable, Collections.emptySet())__    };promotes,a,replica,to,primary,incrementing,it,s,term,and,starting,it,if,needed;protected,void,promote,replica,index,shard,replica,set,string,in,sync,ids,index,shard,routing,table,routing,table,throws,ioexception,assert,that,in,sync,ids,contains,replica,routing,entry,allocation,id,get,id,final,shard,routing,routing,entry,new,shard,routing,replica,routing,entry,shard,id,replica,routing,entry,current,node,id,null,true,shard,routing,state,started,replica,routing,entry,allocation,id,final,index,shard,routing,table,new,routing,table,new,index,shard,routing,table,builder,routing,table,remove,shard,replica,routing,entry,add,shard,routing,entry,build,replica,update,shard,state,routing,entry,replica,get,pending,primary,term,1,is,listener,listener,on,response,new,primary,replica,syncer,resync,task,1,type,action,desc,null,collections,empty,map,current,cluster,state,version,increment,and,get,in,sync,ids,new,routing,table,collections,empty,set
IndexShardTestCase -> protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException;1544783963;promotes a replica to primary, incrementing it's term and starting it if needed;protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException {_        assertThat(inSyncIds, contains(replica.routingEntry().allocationId().getId()))__        final ShardRouting routingEntry = newShardRouting(_            replica.routingEntry().shardId(),_            replica.routingEntry().currentNodeId(),_            null,_            true,_            ShardRoutingState.STARTED,_            replica.routingEntry().allocationId())___        final IndexShardRoutingTable newRoutingTable = new IndexShardRoutingTable.Builder(routingTable)_            .removeShard(replica.routingEntry())_            .addShard(routingEntry)_            .build()__        replica.updateShardState(routingEntry, replica.getPendingPrimaryTerm() + 1,_            (is, listener) ->_                listener.onResponse(new PrimaryReplicaSyncer.ResyncTask(1, "type", "action", "desc", null, Collections.emptyMap())),_            currentClusterStateVersion.incrementAndGet(),_            inSyncIds, newRoutingTable, Collections.emptySet())__    };promotes,a,replica,to,primary,incrementing,it,s,term,and,starting,it,if,needed;protected,void,promote,replica,index,shard,replica,set,string,in,sync,ids,index,shard,routing,table,routing,table,throws,ioexception,assert,that,in,sync,ids,contains,replica,routing,entry,allocation,id,get,id,final,shard,routing,routing,entry,new,shard,routing,replica,routing,entry,shard,id,replica,routing,entry,current,node,id,null,true,shard,routing,state,started,replica,routing,entry,allocation,id,final,index,shard,routing,table,new,routing,table,new,index,shard,routing,table,builder,routing,table,remove,shard,replica,routing,entry,add,shard,routing,entry,build,replica,update,shard,state,routing,entry,replica,get,pending,primary,term,1,is,listener,listener,on,response,new,primary,replica,syncer,resync,task,1,type,action,desc,null,collections,empty,map,current,cluster,state,version,increment,and,get,in,sync,ids,new,routing,table,collections,empty,set
IndexShardTestCase -> protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException;1544893197;promotes a replica to primary, incrementing it's term and starting it if needed;protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException {_        assertThat(inSyncIds, contains(replica.routingEntry().allocationId().getId()))__        final ShardRouting routingEntry = newShardRouting(_            replica.routingEntry().shardId(),_            replica.routingEntry().currentNodeId(),_            null,_            true,_            ShardRoutingState.STARTED,_            replica.routingEntry().allocationId())___        final IndexShardRoutingTable newRoutingTable = new IndexShardRoutingTable.Builder(routingTable)_            .removeShard(replica.routingEntry())_            .addShard(routingEntry)_            .build()__        replica.updateShardState(routingEntry, replica.getPendingPrimaryTerm() + 1,_            (is, listener) ->_                listener.onResponse(new PrimaryReplicaSyncer.ResyncTask(1, "type", "action", "desc", null, Collections.emptyMap())),_            currentClusterStateVersion.incrementAndGet(),_            inSyncIds, newRoutingTable, Collections.emptySet())__    };promotes,a,replica,to,primary,incrementing,it,s,term,and,starting,it,if,needed;protected,void,promote,replica,index,shard,replica,set,string,in,sync,ids,index,shard,routing,table,routing,table,throws,ioexception,assert,that,in,sync,ids,contains,replica,routing,entry,allocation,id,get,id,final,shard,routing,routing,entry,new,shard,routing,replica,routing,entry,shard,id,replica,routing,entry,current,node,id,null,true,shard,routing,state,started,replica,routing,entry,allocation,id,final,index,shard,routing,table,new,routing,table,new,index,shard,routing,table,builder,routing,table,remove,shard,replica,routing,entry,add,shard,routing,entry,build,replica,update,shard,state,routing,entry,replica,get,pending,primary,term,1,is,listener,listener,on,response,new,primary,replica,syncer,resync,task,1,type,action,desc,null,collections,empty,map,current,cluster,state,version,increment,and,get,in,sync,ids,new,routing,table,collections,empty,set
IndexShardTestCase -> protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException;1545678410;promotes a replica to primary, incrementing it's term and starting it if needed;protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException {_        assertThat(inSyncIds, contains(replica.routingEntry().allocationId().getId()))__        final ShardRouting routingEntry = newShardRouting(_            replica.routingEntry().shardId(),_            replica.routingEntry().currentNodeId(),_            null,_            true,_            ShardRoutingState.STARTED,_            replica.routingEntry().allocationId())___        final IndexShardRoutingTable newRoutingTable = new IndexShardRoutingTable.Builder(routingTable)_            .removeShard(replica.routingEntry())_            .addShard(routingEntry)_            .build()__        replica.updateShardState(routingEntry, replica.getPendingPrimaryTerm() + 1,_            (is, listener) ->_                listener.onResponse(new PrimaryReplicaSyncer.ResyncTask(1, "type", "action", "desc", null, Collections.emptyMap())),_            currentClusterStateVersion.incrementAndGet(),_            inSyncIds, newRoutingTable, Collections.emptySet())__    };promotes,a,replica,to,primary,incrementing,it,s,term,and,starting,it,if,needed;protected,void,promote,replica,index,shard,replica,set,string,in,sync,ids,index,shard,routing,table,routing,table,throws,ioexception,assert,that,in,sync,ids,contains,replica,routing,entry,allocation,id,get,id,final,shard,routing,routing,entry,new,shard,routing,replica,routing,entry,shard,id,replica,routing,entry,current,node,id,null,true,shard,routing,state,started,replica,routing,entry,allocation,id,final,index,shard,routing,table,new,routing,table,new,index,shard,routing,table,builder,routing,table,remove,shard,replica,routing,entry,add,shard,routing,entry,build,replica,update,shard,state,routing,entry,replica,get,pending,primary,term,1,is,listener,listener,on,response,new,primary,replica,syncer,resync,task,1,type,action,desc,null,collections,empty,map,current,cluster,state,version,increment,and,get,in,sync,ids,new,routing,table,collections,empty,set
IndexShardTestCase -> protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException;1546927432;promotes a replica to primary, incrementing it's term and starting it if needed;protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException {_        assertThat(inSyncIds, contains(replica.routingEntry().allocationId().getId()))__        final ShardRouting routingEntry = newShardRouting(_            replica.routingEntry().shardId(),_            replica.routingEntry().currentNodeId(),_            null,_            true,_            ShardRoutingState.STARTED,_            replica.routingEntry().allocationId())___        final IndexShardRoutingTable newRoutingTable = new IndexShardRoutingTable.Builder(routingTable)_            .removeShard(replica.routingEntry())_            .addShard(routingEntry)_            .build()__        replica.updateShardState(routingEntry, replica.getPendingPrimaryTerm() + 1,_            (is, listener) ->_                listener.onResponse(new PrimaryReplicaSyncer.ResyncTask(1, "type", "action", "desc", null, Collections.emptyMap())),_            currentClusterStateVersion.incrementAndGet(),_            inSyncIds, newRoutingTable, Collections.emptySet())__    };promotes,a,replica,to,primary,incrementing,it,s,term,and,starting,it,if,needed;protected,void,promote,replica,index,shard,replica,set,string,in,sync,ids,index,shard,routing,table,routing,table,throws,ioexception,assert,that,in,sync,ids,contains,replica,routing,entry,allocation,id,get,id,final,shard,routing,routing,entry,new,shard,routing,replica,routing,entry,shard,id,replica,routing,entry,current,node,id,null,true,shard,routing,state,started,replica,routing,entry,allocation,id,final,index,shard,routing,table,new,routing,table,new,index,shard,routing,table,builder,routing,table,remove,shard,replica,routing,entry,add,shard,routing,entry,build,replica,update,shard,state,routing,entry,replica,get,pending,primary,term,1,is,listener,listener,on,response,new,primary,replica,syncer,resync,task,1,type,action,desc,null,collections,empty,map,current,cluster,state,version,increment,and,get,in,sync,ids,new,routing,table,collections,empty,set
IndexShardTestCase -> protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException;1547315388;promotes a replica to primary, incrementing it's term and starting it if needed;protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException {_        assertThat(inSyncIds, contains(replica.routingEntry().allocationId().getId()))__        final ShardRouting routingEntry = newShardRouting(_            replica.routingEntry().shardId(),_            replica.routingEntry().currentNodeId(),_            null,_            true,_            ShardRoutingState.STARTED,_            replica.routingEntry().allocationId())___        final IndexShardRoutingTable newRoutingTable = new IndexShardRoutingTable.Builder(routingTable)_            .removeShard(replica.routingEntry())_            .addShard(routingEntry)_            .build()__        replica.updateShardState(routingEntry, replica.getPendingPrimaryTerm() + 1,_            (is, listener) ->_                listener.onResponse(new PrimaryReplicaSyncer.ResyncTask(1, "type", "action", "desc", null, Collections.emptyMap())),_            currentClusterStateVersion.incrementAndGet(),_            inSyncIds, newRoutingTable, Collections.emptySet())__    };promotes,a,replica,to,primary,incrementing,it,s,term,and,starting,it,if,needed;protected,void,promote,replica,index,shard,replica,set,string,in,sync,ids,index,shard,routing,table,routing,table,throws,ioexception,assert,that,in,sync,ids,contains,replica,routing,entry,allocation,id,get,id,final,shard,routing,routing,entry,new,shard,routing,replica,routing,entry,shard,id,replica,routing,entry,current,node,id,null,true,shard,routing,state,started,replica,routing,entry,allocation,id,final,index,shard,routing,table,new,routing,table,new,index,shard,routing,table,builder,routing,table,remove,shard,replica,routing,entry,add,shard,routing,entry,build,replica,update,shard,state,routing,entry,replica,get,pending,primary,term,1,is,listener,listener,on,response,new,primary,replica,syncer,resync,task,1,type,action,desc,null,collections,empty,map,current,cluster,state,version,increment,and,get,in,sync,ids,new,routing,table,collections,empty,set
IndexShardTestCase -> protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException;1547496475;promotes a replica to primary, incrementing it's term and starting it if needed;protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException {_        assertThat(inSyncIds, contains(replica.routingEntry().allocationId().getId()))__        final ShardRouting routingEntry = newShardRouting(_            replica.routingEntry().shardId(),_            replica.routingEntry().currentNodeId(),_            null,_            true,_            ShardRoutingState.STARTED,_            replica.routingEntry().allocationId())___        final IndexShardRoutingTable newRoutingTable = new IndexShardRoutingTable.Builder(routingTable)_            .removeShard(replica.routingEntry())_            .addShard(routingEntry)_            .build()__        replica.updateShardState(routingEntry, replica.getPendingPrimaryTerm() + 1,_            (is, listener) ->_                listener.onResponse(new PrimaryReplicaSyncer.ResyncTask(1, "type", "action", "desc", null, Collections.emptyMap())),_            currentClusterStateVersion.incrementAndGet(),_            inSyncIds, newRoutingTable, Collections.emptySet())__    };promotes,a,replica,to,primary,incrementing,it,s,term,and,starting,it,if,needed;protected,void,promote,replica,index,shard,replica,set,string,in,sync,ids,index,shard,routing,table,routing,table,throws,ioexception,assert,that,in,sync,ids,contains,replica,routing,entry,allocation,id,get,id,final,shard,routing,routing,entry,new,shard,routing,replica,routing,entry,shard,id,replica,routing,entry,current,node,id,null,true,shard,routing,state,started,replica,routing,entry,allocation,id,final,index,shard,routing,table,new,routing,table,new,index,shard,routing,table,builder,routing,table,remove,shard,replica,routing,entry,add,shard,routing,entry,build,replica,update,shard,state,routing,entry,replica,get,pending,primary,term,1,is,listener,listener,on,response,new,primary,replica,syncer,resync,task,1,type,action,desc,null,collections,empty,map,current,cluster,state,version,increment,and,get,in,sync,ids,new,routing,table,collections,empty,set
IndexShardTestCase -> protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException;1547496886;promotes a replica to primary, incrementing it's term and starting it if needed;protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException {_        assertThat(inSyncIds, contains(replica.routingEntry().allocationId().getId()))__        final ShardRouting routingEntry = newShardRouting(_            replica.routingEntry().shardId(),_            replica.routingEntry().currentNodeId(),_            null,_            true,_            ShardRoutingState.STARTED,_            replica.routingEntry().allocationId())___        final IndexShardRoutingTable newRoutingTable = new IndexShardRoutingTable.Builder(routingTable)_            .removeShard(replica.routingEntry())_            .addShard(routingEntry)_            .build()__        replica.updateShardState(routingEntry, replica.getPendingPrimaryTerm() + 1,_            (is, listener) ->_                listener.onResponse(new PrimaryReplicaSyncer.ResyncTask(1, "type", "action", "desc", null, Collections.emptyMap())),_            currentClusterStateVersion.incrementAndGet(),_            inSyncIds, newRoutingTable, Collections.emptySet())__    };promotes,a,replica,to,primary,incrementing,it,s,term,and,starting,it,if,needed;protected,void,promote,replica,index,shard,replica,set,string,in,sync,ids,index,shard,routing,table,routing,table,throws,ioexception,assert,that,in,sync,ids,contains,replica,routing,entry,allocation,id,get,id,final,shard,routing,routing,entry,new,shard,routing,replica,routing,entry,shard,id,replica,routing,entry,current,node,id,null,true,shard,routing,state,started,replica,routing,entry,allocation,id,final,index,shard,routing,table,new,routing,table,new,index,shard,routing,table,builder,routing,table,remove,shard,replica,routing,entry,add,shard,routing,entry,build,replica,update,shard,state,routing,entry,replica,get,pending,primary,term,1,is,listener,listener,on,response,new,primary,replica,syncer,resync,task,1,type,action,desc,null,collections,empty,map,current,cluster,state,version,increment,and,get,in,sync,ids,new,routing,table,collections,empty,set
IndexShardTestCase -> protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException;1547520324;promotes a replica to primary, incrementing it's term and starting it if needed;protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException {_        assertThat(inSyncIds, contains(replica.routingEntry().allocationId().getId()))__        final ShardRouting routingEntry = newShardRouting(_            replica.routingEntry().shardId(),_            replica.routingEntry().currentNodeId(),_            null,_            true,_            ShardRoutingState.STARTED,_            replica.routingEntry().allocationId())___        final IndexShardRoutingTable newRoutingTable = new IndexShardRoutingTable.Builder(routingTable)_            .removeShard(replica.routingEntry())_            .addShard(routingEntry)_            .build()__        replica.updateShardState(routingEntry, replica.getPendingPrimaryTerm() + 1,_            (is, listener) ->_                listener.onResponse(new PrimaryReplicaSyncer.ResyncTask(1, "type", "action", "desc", null, Collections.emptyMap())),_            currentClusterStateVersion.incrementAndGet(),_            inSyncIds, newRoutingTable, Collections.emptySet())__    };promotes,a,replica,to,primary,incrementing,it,s,term,and,starting,it,if,needed;protected,void,promote,replica,index,shard,replica,set,string,in,sync,ids,index,shard,routing,table,routing,table,throws,ioexception,assert,that,in,sync,ids,contains,replica,routing,entry,allocation,id,get,id,final,shard,routing,routing,entry,new,shard,routing,replica,routing,entry,shard,id,replica,routing,entry,current,node,id,null,true,shard,routing,state,started,replica,routing,entry,allocation,id,final,index,shard,routing,table,new,routing,table,new,index,shard,routing,table,builder,routing,table,remove,shard,replica,routing,entry,add,shard,routing,entry,build,replica,update,shard,state,routing,entry,replica,get,pending,primary,term,1,is,listener,listener,on,response,new,primary,replica,syncer,resync,task,1,type,action,desc,null,collections,empty,map,current,cluster,state,version,increment,and,get,in,sync,ids,new,routing,table,collections,empty,set
IndexShardTestCase -> protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException;1547552901;promotes a replica to primary, incrementing it's term and starting it if needed;protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException {_        assertThat(inSyncIds, contains(replica.routingEntry().allocationId().getId()))__        final ShardRouting routingEntry = newShardRouting(_            replica.routingEntry().shardId(),_            replica.routingEntry().currentNodeId(),_            null,_            true,_            ShardRoutingState.STARTED,_            replica.routingEntry().allocationId())___        final IndexShardRoutingTable newRoutingTable = new IndexShardRoutingTable.Builder(routingTable)_            .removeShard(replica.routingEntry())_            .addShard(routingEntry)_            .build()__        replica.updateShardState(routingEntry, replica.getPendingPrimaryTerm() + 1,_            (is, listener) ->_                listener.onResponse(new PrimaryReplicaSyncer.ResyncTask(1, "type", "action", "desc", null, Collections.emptyMap())),_            currentClusterStateVersion.incrementAndGet(),_            inSyncIds, newRoutingTable, Collections.emptySet())__    };promotes,a,replica,to,primary,incrementing,it,s,term,and,starting,it,if,needed;protected,void,promote,replica,index,shard,replica,set,string,in,sync,ids,index,shard,routing,table,routing,table,throws,ioexception,assert,that,in,sync,ids,contains,replica,routing,entry,allocation,id,get,id,final,shard,routing,routing,entry,new,shard,routing,replica,routing,entry,shard,id,replica,routing,entry,current,node,id,null,true,shard,routing,state,started,replica,routing,entry,allocation,id,final,index,shard,routing,table,new,routing,table,new,index,shard,routing,table,builder,routing,table,remove,shard,replica,routing,entry,add,shard,routing,entry,build,replica,update,shard,state,routing,entry,replica,get,pending,primary,term,1,is,listener,listener,on,response,new,primary,replica,syncer,resync,task,1,type,action,desc,null,collections,empty,map,current,cluster,state,version,increment,and,get,in,sync,ids,new,routing,table,collections,empty,set
IndexShardTestCase -> protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException;1548593396;promotes a replica to primary, incrementing it's term and starting it if needed;protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException {_        assertThat(inSyncIds, contains(replica.routingEntry().allocationId().getId()))__        final ShardRouting routingEntry = newShardRouting(_            replica.routingEntry().shardId(),_            replica.routingEntry().currentNodeId(),_            null,_            true,_            ShardRoutingState.STARTED,_            replica.routingEntry().allocationId())___        final IndexShardRoutingTable newRoutingTable = new IndexShardRoutingTable.Builder(routingTable)_            .removeShard(replica.routingEntry())_            .addShard(routingEntry)_            .build()__        replica.updateShardState(routingEntry, replica.getPendingPrimaryTerm() + 1,_            (is, listener) ->_                listener.onResponse(new PrimaryReplicaSyncer.ResyncTask(1, "type", "action", "desc", null, Collections.emptyMap())),_            currentClusterStateVersion.incrementAndGet(),_            inSyncIds, newRoutingTable, Collections.emptySet())__    };promotes,a,replica,to,primary,incrementing,it,s,term,and,starting,it,if,needed;protected,void,promote,replica,index,shard,replica,set,string,in,sync,ids,index,shard,routing,table,routing,table,throws,ioexception,assert,that,in,sync,ids,contains,replica,routing,entry,allocation,id,get,id,final,shard,routing,routing,entry,new,shard,routing,replica,routing,entry,shard,id,replica,routing,entry,current,node,id,null,true,shard,routing,state,started,replica,routing,entry,allocation,id,final,index,shard,routing,table,new,routing,table,new,index,shard,routing,table,builder,routing,table,remove,shard,replica,routing,entry,add,shard,routing,entry,build,replica,update,shard,state,routing,entry,replica,get,pending,primary,term,1,is,listener,listener,on,response,new,primary,replica,syncer,resync,task,1,type,action,desc,null,collections,empty,map,current,cluster,state,version,increment,and,get,in,sync,ids,new,routing,table,collections,empty,set
IndexShardTestCase -> protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException;1549294529;promotes a replica to primary, incrementing it's term and starting it if needed;protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException {_        assertThat(inSyncIds, contains(replica.routingEntry().allocationId().getId()))__        final ShardRouting routingEntry = newShardRouting(_            replica.routingEntry().shardId(),_            replica.routingEntry().currentNodeId(),_            null,_            true,_            ShardRoutingState.STARTED,_            replica.routingEntry().allocationId())___        final IndexShardRoutingTable newRoutingTable = new IndexShardRoutingTable.Builder(routingTable)_            .removeShard(replica.routingEntry())_            .addShard(routingEntry)_            .build()__        replica.updateShardState(routingEntry, replica.getPendingPrimaryTerm() + 1,_            (is, listener) ->_                listener.onResponse(new PrimaryReplicaSyncer.ResyncTask(1, "type", "action", "desc", null, Collections.emptyMap())),_            currentClusterStateVersion.incrementAndGet(),_            inSyncIds, newRoutingTable, Collections.emptySet())__    };promotes,a,replica,to,primary,incrementing,it,s,term,and,starting,it,if,needed;protected,void,promote,replica,index,shard,replica,set,string,in,sync,ids,index,shard,routing,table,routing,table,throws,ioexception,assert,that,in,sync,ids,contains,replica,routing,entry,allocation,id,get,id,final,shard,routing,routing,entry,new,shard,routing,replica,routing,entry,shard,id,replica,routing,entry,current,node,id,null,true,shard,routing,state,started,replica,routing,entry,allocation,id,final,index,shard,routing,table,new,routing,table,new,index,shard,routing,table,builder,routing,table,remove,shard,replica,routing,entry,add,shard,routing,entry,build,replica,update,shard,state,routing,entry,replica,get,pending,primary,term,1,is,listener,listener,on,response,new,primary,replica,syncer,resync,task,1,type,action,desc,null,collections,empty,map,current,cluster,state,version,increment,and,get,in,sync,ids,new,routing,table,collections,empty,set
IndexShardTestCase -> protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException;1550668107;promotes a replica to primary, incrementing it's term and starting it if needed;protected void promoteReplica(IndexShard replica, Set<String> inSyncIds, IndexShardRoutingTable routingTable) throws IOException {_        assertThat(inSyncIds, contains(replica.routingEntry().allocationId().getId()))__        final ShardRouting routingEntry = newShardRouting(_            replica.routingEntry().shardId(),_            replica.routingEntry().currentNodeId(),_            null,_            true,_            ShardRoutingState.STARTED,_            replica.routingEntry().allocationId())___        final IndexShardRoutingTable newRoutingTable = new IndexShardRoutingTable.Builder(routingTable)_            .removeShard(replica.routingEntry())_            .addShard(routingEntry)_            .build()__        replica.updateShardState(routingEntry, replica.getPendingPrimaryTerm() + 1,_            (is, listener) ->_                listener.onResponse(new PrimaryReplicaSyncer.ResyncTask(1, "type", "action", "desc", null, Collections.emptyMap())),_            currentClusterStateVersion.incrementAndGet(),_            inSyncIds, newRoutingTable, Collections.emptySet())__    };promotes,a,replica,to,primary,incrementing,it,s,term,and,starting,it,if,needed;protected,void,promote,replica,index,shard,replica,set,string,in,sync,ids,index,shard,routing,table,routing,table,throws,ioexception,assert,that,in,sync,ids,contains,replica,routing,entry,allocation,id,get,id,final,shard,routing,routing,entry,new,shard,routing,replica,routing,entry,shard,id,replica,routing,entry,current,node,id,null,true,shard,routing,state,started,replica,routing,entry,allocation,id,final,index,shard,routing,table,new,routing,table,new,index,shard,routing,table,builder,routing,table,remove,shard,replica,routing,entry,add,shard,routing,entry,build,replica,update,shard,state,routing,entry,replica,get,pending,primary,term,1,is,listener,listener,on,response,new,primary,replica,syncer,resync,task,1,type,action,desc,null,collections,empty,map,current,cluster,state,version,increment,and,get,in,sync,ids,new,routing,table,collections,empty,set
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, EngineFactory engineFactory,                                      IndexingOperationListener... listeners) throws IOException;1542697404;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard_@param engineFactory the engine factory for the new shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, EngineFactory engineFactory,_                                     IndexingOperationListener... listeners) throws IOException {_        closeShards(current)__        return newShard(_                routing,_                current.shardPath(),_                current.indexSettings().getIndexMetaData(),_                null,_                null,_                engineFactory,_                current.getGlobalCheckpointSyncer(),_            EMPTY_EVENT_LISTENER, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard,param,engine,factory,the,engine,factory,for,the,new,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,close,shards,current,return,new,shard,routing,current,shard,path,current,index,settings,get,index,meta,data,null,null,engine,factory,current,get,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, EngineFactory engineFactory,                                      IndexingOperationListener... listeners) throws IOException;1544783963;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard_@param engineFactory the engine factory for the new shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, EngineFactory engineFactory,_                                     IndexingOperationListener... listeners) throws IOException {_        closeShards(current)__        return newShard(_                routing,_                current.shardPath(),_                current.indexSettings().getIndexMetaData(),_                null,_                null,_                engineFactory,_                current.getGlobalCheckpointSyncer(),_            EMPTY_EVENT_LISTENER, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard,param,engine,factory,the,engine,factory,for,the,new,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,close,shards,current,return,new,shard,routing,current,shard,path,current,index,settings,get,index,meta,data,null,null,engine,factory,current,get,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, EngineFactory engineFactory,                                      IndexingOperationListener... listeners) throws IOException;1544893197;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard_@param engineFactory the engine factory for the new shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, EngineFactory engineFactory,_                                     IndexingOperationListener... listeners) throws IOException {_        closeShards(current)__        return newShard(_                routing,_                current.shardPath(),_                current.indexSettings().getIndexMetaData(),_                null,_                null,_                engineFactory,_                current.getGlobalCheckpointSyncer(),_            EMPTY_EVENT_LISTENER, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard,param,engine,factory,the,engine,factory,for,the,new,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,close,shards,current,return,new,shard,routing,current,shard,path,current,index,settings,get,index,meta,data,null,null,engine,factory,current,get,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, EngineFactory engineFactory,                                      IndexingOperationListener... listeners) throws IOException;1545678410;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard_@param engineFactory the engine factory for the new shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, EngineFactory engineFactory,_                                     IndexingOperationListener... listeners) throws IOException {_        closeShards(current)__        return newShard(_                routing,_                current.shardPath(),_                current.indexSettings().getIndexMetaData(),_                null,_                null,_                engineFactory,_                current.getGlobalCheckpointSyncer(),_            EMPTY_EVENT_LISTENER, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard,param,engine,factory,the,engine,factory,for,the,new,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,close,shards,current,return,new,shard,routing,current,shard,path,current,index,settings,get,index,meta,data,null,null,engine,factory,current,get,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, EngineFactory engineFactory,                                      IndexingOperationListener... listeners) throws IOException;1546927432;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard_@param engineFactory the engine factory for the new shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, EngineFactory engineFactory,_                                     IndexingOperationListener... listeners) throws IOException {_        closeShards(current)__        return newShard(_                routing,_                current.shardPath(),_                current.indexSettings().getIndexMetaData(),_                null,_                null,_                engineFactory,_                current.getGlobalCheckpointSyncer(),_            EMPTY_EVENT_LISTENER, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard,param,engine,factory,the,engine,factory,for,the,new,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,close,shards,current,return,new,shard,routing,current,shard,path,current,index,settings,get,index,meta,data,null,null,engine,factory,current,get,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, EngineFactory engineFactory,                                      IndexingOperationListener... listeners) throws IOException;1547315388;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard_@param engineFactory the engine factory for the new shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, EngineFactory engineFactory,_                                     IndexingOperationListener... listeners) throws IOException {_        closeShards(current)__        return newShard(_                routing,_                current.shardPath(),_                current.indexSettings().getIndexMetaData(),_                null,_                null,_                engineFactory,_                current.getGlobalCheckpointSyncer(),_            EMPTY_EVENT_LISTENER, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard,param,engine,factory,the,engine,factory,for,the,new,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,close,shards,current,return,new,shard,routing,current,shard,path,current,index,settings,get,index,meta,data,null,null,engine,factory,current,get,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, EngineFactory engineFactory,                                      IndexingOperationListener... listeners) throws IOException;1547496475;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard_@param engineFactory the engine factory for the new shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, EngineFactory engineFactory,_                                     IndexingOperationListener... listeners) throws IOException {_        closeShards(current)__        return newShard(_                routing,_                current.shardPath(),_                current.indexSettings().getIndexMetaData(),_                null,_                null,_                engineFactory,_                current.getGlobalCheckpointSyncer(),_            EMPTY_EVENT_LISTENER, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard,param,engine,factory,the,engine,factory,for,the,new,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,close,shards,current,return,new,shard,routing,current,shard,path,current,index,settings,get,index,meta,data,null,null,engine,factory,current,get,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, EngineFactory engineFactory,                                      IndexingOperationListener... listeners) throws IOException;1547496886;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard_@param engineFactory the engine factory for the new shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, EngineFactory engineFactory,_                                     IndexingOperationListener... listeners) throws IOException {_        closeShards(current)__        return newShard(_                routing,_                current.shardPath(),_                current.indexSettings().getIndexMetaData(),_                null,_                null,_                engineFactory,_                current.getGlobalCheckpointSyncer(),_            EMPTY_EVENT_LISTENER, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard,param,engine,factory,the,engine,factory,for,the,new,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,close,shards,current,return,new,shard,routing,current,shard,path,current,index,settings,get,index,meta,data,null,null,engine,factory,current,get,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, EngineFactory engineFactory,                                      IndexingOperationListener... listeners) throws IOException;1547520324;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard_@param engineFactory the engine factory for the new shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, EngineFactory engineFactory,_                                     IndexingOperationListener... listeners) throws IOException {_        closeShards(current)__        return newShard(_                routing,_                current.shardPath(),_                current.indexSettings().getIndexMetaData(),_                null,_                null,_                engineFactory,_                current.getGlobalCheckpointSyncer(),_            EMPTY_EVENT_LISTENER, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard,param,engine,factory,the,engine,factory,for,the,new,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,close,shards,current,return,new,shard,routing,current,shard,path,current,index,settings,get,index,meta,data,null,null,engine,factory,current,get,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, EngineFactory engineFactory,                                      IndexingOperationListener... listeners) throws IOException;1547552901;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard_@param engineFactory the engine factory for the new shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, EngineFactory engineFactory,_                                     IndexingOperationListener... listeners) throws IOException {_        closeShards(current)__        return newShard(_                routing,_                current.shardPath(),_                current.indexSettings().getIndexMetaData(),_                null,_                null,_                engineFactory,_                current.getGlobalCheckpointSyncer(),_            EMPTY_EVENT_LISTENER, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard,param,engine,factory,the,engine,factory,for,the,new,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,close,shards,current,return,new,shard,routing,current,shard,path,current,index,settings,get,index,meta,data,null,null,engine,factory,current,get,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, EngineFactory engineFactory,                                      IndexingOperationListener... listeners) throws IOException;1548593396;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard_@param engineFactory the engine factory for the new shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, EngineFactory engineFactory,_                                     IndexingOperationListener... listeners) throws IOException {_        closeShards(current)__        return newShard(_                routing,_                current.shardPath(),_                current.indexSettings().getIndexMetaData(),_                null,_                null,_                engineFactory,_                current.getGlobalCheckpointSyncer(),_            EMPTY_EVENT_LISTENER, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard,param,engine,factory,the,engine,factory,for,the,new,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,close,shards,current,return,new,shard,routing,current,shard,path,current,index,settings,get,index,meta,data,null,null,engine,factory,current,get,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, EngineFactory engineFactory,                                      IndexingOperationListener... listeners) throws IOException;1549294529;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard_@param engineFactory the engine factory for the new shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, EngineFactory engineFactory,_                                     IndexingOperationListener... listeners) throws IOException {_        closeShards(current)__        return newShard(_                routing,_                current.shardPath(),_                current.indexSettings().getIndexMetaData(),_                null,_                null,_                engineFactory,_                current.getGlobalCheckpointSyncer(),_            EMPTY_EVENT_LISTENER, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard,param,engine,factory,the,engine,factory,for,the,new,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,close,shards,current,return,new,shard,routing,current,shard,path,current,index,settings,get,index,meta,data,null,null,engine,factory,current,get,global,checkpoint,syncer,listeners
IndexShardTestCase -> protected IndexShard reinitShard(IndexShard current, ShardRouting routing, EngineFactory engineFactory,                                      IndexingOperationListener... listeners) throws IOException;1550668107;Takes an existing shard, closes it and starts a new initialing shard at the same location__@param routing   the shard routing to use for the newly created shard._@param listeners new listerns to use for the newly created shard_@param engineFactory the engine factory for the new shard;protected IndexShard reinitShard(IndexShard current, ShardRouting routing, EngineFactory engineFactory,_                                     IndexingOperationListener... listeners) throws IOException {_        closeShards(current)__        return newShard(_                routing,_                current.shardPath(),_                current.indexSettings().getIndexMetaData(),_                null,_                null,_                engineFactory,_                current.getGlobalCheckpointSyncer(),_                current.getRetentionLeaseSyncer(),_            EMPTY_EVENT_LISTENER, listeners)__    };takes,an,existing,shard,closes,it,and,starts,a,new,initialing,shard,at,the,same,location,param,routing,the,shard,routing,to,use,for,the,newly,created,shard,param,listeners,new,listerns,to,use,for,the,newly,created,shard,param,engine,factory,the,engine,factory,for,the,new,shard;protected,index,shard,reinit,shard,index,shard,current,shard,routing,routing,engine,factory,engine,factory,indexing,operation,listener,listeners,throws,ioexception,close,shards,current,return,new,shard,routing,current,shard,path,current,index,settings,get,index,meta,data,null,null,engine,factory,current,get,global,checkpoint,syncer,current,get,retention,lease,syncer,listeners
IndexShardTestCase -> protected IndexShard newShard(             final ShardRouting shardRouting,             final IndexingOperationListener... listeners) throws IOException;1524684173;creates a new initializing shard. The shard will have its own unique data path.__@param shardRouting the {@link ShardRouting} to use for this shard_@param listeners    an optional set of listeners to add to the shard;protected IndexShard newShard(_            final ShardRouting shardRouting,_            final IndexingOperationListener... listeners) throws IOException {_        assert shardRouting.initializing() : shardRouting__        Settings settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_            .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_            .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_            .build()__        IndexMetaData.Builder metaData = IndexMetaData.builder(shardRouting.getIndexName())_            .settings(settings)_            .primaryTerm(0, primaryTerm)__        return newShard(shardRouting, metaData.build(), listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,routing,the,link,shard,routing,to,use,for,this,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,final,shard,routing,shard,routing,final,indexing,operation,listener,listeners,throws,ioexception,assert,shard,routing,initializing,shard,routing,settings,settings,settings,builder,put,index,meta,data,version,current,put,index,meta,data,0,put,index,meta,data,1,build,index,meta,data,builder,meta,data,index,meta,data,builder,shard,routing,get,index,name,settings,settings,primary,term,0,primary,term,return,new,shard,shard,routing,meta,data,build,listeners
IndexShardTestCase -> protected IndexShard newShard(             final ShardRouting shardRouting,             final IndexingOperationListener... listeners) throws IOException;1525162917;creates a new initializing shard. The shard will have its own unique data path.__@param shardRouting the {@link ShardRouting} to use for this shard_@param listeners    an optional set of listeners to add to the shard;protected IndexShard newShard(_            final ShardRouting shardRouting,_            final IndexingOperationListener... listeners) throws IOException {_        assert shardRouting.initializing() : shardRouting__        Settings settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_            .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_            .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_            .build()__        IndexMetaData.Builder metaData = IndexMetaData.builder(shardRouting.getIndexName())_            .settings(settings)_            .primaryTerm(0, primaryTerm)_            .putMapping("_doc", "{ \"properties\": {} }")__        return newShard(shardRouting, metaData.build(), listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,routing,the,link,shard,routing,to,use,for,this,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,final,shard,routing,shard,routing,final,indexing,operation,listener,listeners,throws,ioexception,assert,shard,routing,initializing,shard,routing,settings,settings,settings,builder,put,index,meta,data,version,current,put,index,meta,data,0,put,index,meta,data,1,build,index,meta,data,builder,meta,data,index,meta,data,builder,shard,routing,get,index,name,settings,settings,primary,term,0,primary,term,put,mapping,properties,return,new,shard,shard,routing,meta,data,build,listeners
IndexShardTestCase -> protected IndexShard newShard(             final ShardRouting shardRouting,             final IndexingOperationListener... listeners) throws IOException;1527583663;creates a new initializing shard. The shard will have its own unique data path.__@param shardRouting the {@link ShardRouting} to use for this shard_@param listeners    an optional set of listeners to add to the shard;protected IndexShard newShard(_            final ShardRouting shardRouting,_            final IndexingOperationListener... listeners) throws IOException {_        assert shardRouting.initializing() : shardRouting__        Settings settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_            .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_            .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_            .build()__        IndexMetaData.Builder metaData = IndexMetaData.builder(shardRouting.getIndexName())_            .settings(settings)_            .primaryTerm(0, primaryTerm)_            .putMapping("_doc", "{ \"properties\": {} }")__        return newShard(shardRouting, metaData.build(), listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,routing,the,link,shard,routing,to,use,for,this,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,final,shard,routing,shard,routing,final,indexing,operation,listener,listeners,throws,ioexception,assert,shard,routing,initializing,shard,routing,settings,settings,settings,builder,put,index,meta,data,version,current,put,index,meta,data,0,put,index,meta,data,1,build,index,meta,data,builder,meta,data,index,meta,data,builder,shard,routing,get,index,name,settings,settings,primary,term,0,primary,term,put,mapping,properties,return,new,shard,shard,routing,meta,data,build,listeners
IndexShardTestCase -> protected IndexShard newShard(             final ShardRouting shardRouting,             final IndexingOperationListener... listeners) throws IOException;1528706846;creates a new initializing shard. The shard will have its own unique data path.__@param shardRouting the {@link ShardRouting} to use for this shard_@param listeners    an optional set of listeners to add to the shard;protected IndexShard newShard(_            final ShardRouting shardRouting,_            final IndexingOperationListener... listeners) throws IOException {_        assert shardRouting.initializing() : shardRouting__        Settings settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_            .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_            .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_            .build()__        IndexMetaData.Builder metaData = IndexMetaData.builder(shardRouting.getIndexName())_            .settings(settings)_            .primaryTerm(0, primaryTerm)_            .putMapping("_doc", "{ \"properties\": {} }")__        return newShard(shardRouting, metaData.build(), listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,routing,the,link,shard,routing,to,use,for,this,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,final,shard,routing,shard,routing,final,indexing,operation,listener,listeners,throws,ioexception,assert,shard,routing,initializing,shard,routing,settings,settings,settings,builder,put,index,meta,data,version,current,put,index,meta,data,0,put,index,meta,data,1,build,index,meta,data,builder,meta,data,index,meta,data,builder,shard,routing,get,index,name,settings,settings,primary,term,0,primary,term,put,mapping,properties,return,new,shard,shard,routing,meta,data,build,listeners
IndexShardTestCase -> protected IndexShard newShard(             final ShardRouting shardRouting,             final IndexingOperationListener... listeners) throws IOException;1531179852;creates a new initializing shard. The shard will have its own unique data path.__@param shardRouting the {@link ShardRouting} to use for this shard_@param listeners    an optional set of listeners to add to the shard;protected IndexShard newShard(_            final ShardRouting shardRouting,_            final IndexingOperationListener... listeners) throws IOException {_        assert shardRouting.initializing() : shardRouting__        Settings settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_            .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_            .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_            .build()__        IndexMetaData.Builder metaData = IndexMetaData.builder(shardRouting.getIndexName())_            .settings(settings)_            .primaryTerm(0, primaryTerm)_            .putMapping("_doc", "{ \"properties\": {} }")__        return newShard(shardRouting, metaData.build(), listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,routing,the,link,shard,routing,to,use,for,this,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,final,shard,routing,shard,routing,final,indexing,operation,listener,listeners,throws,ioexception,assert,shard,routing,initializing,shard,routing,settings,settings,settings,builder,put,index,meta,data,version,current,put,index,meta,data,0,put,index,meta,data,1,build,index,meta,data,builder,meta,data,index,meta,data,builder,shard,routing,get,index,name,settings,settings,primary,term,0,primary,term,put,mapping,properties,return,new,shard,shard,routing,meta,data,build,listeners
IndexShardTestCase -> protected IndexShard newShard(             final ShardRouting shardRouting,             final IndexingOperationListener... listeners) throws IOException;1531910483;creates a new initializing shard. The shard will have its own unique data path.__@param shardRouting the {@link ShardRouting} to use for this shard_@param listeners    an optional set of listeners to add to the shard;protected IndexShard newShard(_            final ShardRouting shardRouting,_            final IndexingOperationListener... listeners) throws IOException {_        assert shardRouting.initializing() : shardRouting__        Settings settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_            .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_            .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_            .build()__        IndexMetaData.Builder metaData = IndexMetaData.builder(shardRouting.getIndexName())_            .settings(settings)_            .primaryTerm(0, primaryTerm)_            .putMapping("_doc", "{ \"properties\": {} }")__        return newShard(shardRouting, metaData.build(), listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,routing,the,link,shard,routing,to,use,for,this,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,final,shard,routing,shard,routing,final,indexing,operation,listener,listeners,throws,ioexception,assert,shard,routing,initializing,shard,routing,settings,settings,settings,builder,put,index,meta,data,version,current,put,index,meta,data,0,put,index,meta,data,1,build,index,meta,data,builder,meta,data,index,meta,data,builder,shard,routing,get,index,name,settings,settings,primary,term,0,primary,term,put,mapping,properties,return,new,shard,shard,routing,meta,data,build,listeners
IndexShardTestCase -> protected IndexShard newShard(             final ShardRouting shardRouting,             final IndexingOperationListener... listeners) throws IOException;1532434432;creates a new initializing shard. The shard will have its own unique data path.__@param shardRouting the {@link ShardRouting} to use for this shard_@param listeners    an optional set of listeners to add to the shard;protected IndexShard newShard(_            final ShardRouting shardRouting,_            final IndexingOperationListener... listeners) throws IOException {_        assert shardRouting.initializing() : shardRouting__        Settings settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_            .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_            .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_            .build()__        IndexMetaData.Builder metaData = IndexMetaData.builder(shardRouting.getIndexName())_            .settings(settings)_            .primaryTerm(0, primaryTerm)_            .putMapping("_doc", "{ \"properties\": {} }")__        return newShard(shardRouting, metaData.build(), listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,routing,the,link,shard,routing,to,use,for,this,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,final,shard,routing,shard,routing,final,indexing,operation,listener,listeners,throws,ioexception,assert,shard,routing,initializing,shard,routing,settings,settings,settings,builder,put,index,meta,data,version,current,put,index,meta,data,0,put,index,meta,data,1,build,index,meta,data,builder,meta,data,index,meta,data,builder,shard,routing,get,index,name,settings,settings,primary,term,0,primary,term,put,mapping,properties,return,new,shard,shard,routing,meta,data,build,listeners
IndexShardTestCase -> protected IndexShard newShard(             final ShardRouting shardRouting,             final IndexingOperationListener... listeners) throws IOException;1533295538;creates a new initializing shard. The shard will have its own unique data path.__@param shardRouting the {@link ShardRouting} to use for this shard_@param listeners    an optional set of listeners to add to the shard;protected IndexShard newShard(_            final ShardRouting shardRouting,_            final IndexingOperationListener... listeners) throws IOException {_        assert shardRouting.initializing() : shardRouting__        Settings settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)_            .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)_            .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)_            .build()__        IndexMetaData.Builder metaData = IndexMetaData.builder(shardRouting.getIndexName())_            .settings(settings)_            .primaryTerm(0, primaryTerm)_            .putMapping("_doc", "{ \"properties\": {} }")__        return newShard(shardRouting, metaData.build(), listeners)__    };creates,a,new,initializing,shard,the,shard,will,have,its,own,unique,data,path,param,shard,routing,the,link,shard,routing,to,use,for,this,shard,param,listeners,an,optional,set,of,listeners,to,add,to,the,shard;protected,index,shard,new,shard,final,shard,routing,shard,routing,final,indexing,operation,listener,listeners,throws,ioexception,assert,shard,routing,initializing,shard,routing,settings,settings,settings,builder,put,index,meta,data,version,current,put,index,meta,data,0,put,index,meta,data,1,build,index,meta,data,builder,meta,data,index,meta,data,builder,shard,routing,get,index,name,settings,settings,primary,term,0,primary,term,put,mapping,properties,return,new,shard,shard,routing,meta,data,build,listeners
IndexShardTestCase -> protected void snapshotShard(final IndexShard shard,                                  final Snapshot snapshot,                                  final Repository repository) throws IOException;1524684173;Snapshot a shard using a given repository *;protected void snapshotShard(final IndexShard shard,_                                 final Snapshot snapshot,_                                 final Repository repository) throws IOException {_        final IndexShardSnapshotStatus snapshotStatus = IndexShardSnapshotStatus.newInitializing()__        try (Engine.IndexCommitRef indexCommitRef = shard.acquireLastIndexCommit(true)) {_            Index index = shard.shardId().getIndex()__            IndexId indexId = new IndexId(index.getName(), index.getUUID())___            repository.snapshotShard(shard, snapshot.getSnapshotId(), indexId, indexCommitRef.getIndexCommit(), snapshotStatus)__        }__        final IndexShardSnapshotStatus.Copy lastSnapshotStatus = snapshotStatus.asCopy()__        assertEquals(IndexShardSnapshotStatus.Stage.DONE, lastSnapshotStatus.getStage())__        assertEquals(shard.snapshotStoreMetadata().size(), lastSnapshotStatus.getNumberOfFiles())__        assertNull(lastSnapshotStatus.getFailure())__    };snapshot,a,shard,using,a,given,repository;protected,void,snapshot,shard,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,index,shard,snapshot,status,snapshot,status,index,shard,snapshot,status,new,initializing,try,engine,index,commit,ref,index,commit,ref,shard,acquire,last,index,commit,true,index,index,shard,shard,id,get,index,index,id,index,id,new,index,id,index,get,name,index,get,uuid,repository,snapshot,shard,shard,snapshot,get,snapshot,id,index,id,index,commit,ref,get,index,commit,snapshot,status,final,index,shard,snapshot,status,copy,last,snapshot,status,snapshot,status,as,copy,assert,equals,index,shard,snapshot,status,stage,done,last,snapshot,status,get,stage,assert,equals,shard,snapshot,store,metadata,size,last,snapshot,status,get,number,of,files,assert,null,last,snapshot,status,get,failure
IndexShardTestCase -> protected void snapshotShard(final IndexShard shard,                                  final Snapshot snapshot,                                  final Repository repository) throws IOException;1525162917;Snapshot a shard using a given repository *;protected void snapshotShard(final IndexShard shard,_                                 final Snapshot snapshot,_                                 final Repository repository) throws IOException {_        final IndexShardSnapshotStatus snapshotStatus = IndexShardSnapshotStatus.newInitializing()__        try (Engine.IndexCommitRef indexCommitRef = shard.acquireLastIndexCommit(true)) {_            Index index = shard.shardId().getIndex()__            IndexId indexId = new IndexId(index.getName(), index.getUUID())___            repository.snapshotShard(shard, snapshot.getSnapshotId(), indexId, indexCommitRef.getIndexCommit(), snapshotStatus)__        }__        final IndexShardSnapshotStatus.Copy lastSnapshotStatus = snapshotStatus.asCopy()__        assertEquals(IndexShardSnapshotStatus.Stage.DONE, lastSnapshotStatus.getStage())__        assertEquals(shard.snapshotStoreMetadata().size(), lastSnapshotStatus.getNumberOfFiles())__        assertNull(lastSnapshotStatus.getFailure())__    };snapshot,a,shard,using,a,given,repository;protected,void,snapshot,shard,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,index,shard,snapshot,status,snapshot,status,index,shard,snapshot,status,new,initializing,try,engine,index,commit,ref,index,commit,ref,shard,acquire,last,index,commit,true,index,index,shard,shard,id,get,index,index,id,index,id,new,index,id,index,get,name,index,get,uuid,repository,snapshot,shard,shard,snapshot,get,snapshot,id,index,id,index,commit,ref,get,index,commit,snapshot,status,final,index,shard,snapshot,status,copy,last,snapshot,status,snapshot,status,as,copy,assert,equals,index,shard,snapshot,status,stage,done,last,snapshot,status,get,stage,assert,equals,shard,snapshot,store,metadata,size,last,snapshot,status,get,number,of,files,assert,null,last,snapshot,status,get,failure
IndexShardTestCase -> protected void snapshotShard(final IndexShard shard,                                  final Snapshot snapshot,                                  final Repository repository) throws IOException;1527583663;Snapshot a shard using a given repository *;protected void snapshotShard(final IndexShard shard,_                                 final Snapshot snapshot,_                                 final Repository repository) throws IOException {_        final IndexShardSnapshotStatus snapshotStatus = IndexShardSnapshotStatus.newInitializing()__        try (Engine.IndexCommitRef indexCommitRef = shard.acquireLastIndexCommit(true)) {_            Index index = shard.shardId().getIndex()__            IndexId indexId = new IndexId(index.getName(), index.getUUID())___            repository.snapshotShard(shard, snapshot.getSnapshotId(), indexId, indexCommitRef.getIndexCommit(), snapshotStatus)__        }__        final IndexShardSnapshotStatus.Copy lastSnapshotStatus = snapshotStatus.asCopy()__        assertEquals(IndexShardSnapshotStatus.Stage.DONE, lastSnapshotStatus.getStage())__        assertEquals(shard.snapshotStoreMetadata().size(), lastSnapshotStatus.getTotalFileCount())__        assertNull(lastSnapshotStatus.getFailure())__    };snapshot,a,shard,using,a,given,repository;protected,void,snapshot,shard,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,index,shard,snapshot,status,snapshot,status,index,shard,snapshot,status,new,initializing,try,engine,index,commit,ref,index,commit,ref,shard,acquire,last,index,commit,true,index,index,shard,shard,id,get,index,index,id,index,id,new,index,id,index,get,name,index,get,uuid,repository,snapshot,shard,shard,snapshot,get,snapshot,id,index,id,index,commit,ref,get,index,commit,snapshot,status,final,index,shard,snapshot,status,copy,last,snapshot,status,snapshot,status,as,copy,assert,equals,index,shard,snapshot,status,stage,done,last,snapshot,status,get,stage,assert,equals,shard,snapshot,store,metadata,size,last,snapshot,status,get,total,file,count,assert,null,last,snapshot,status,get,failure
IndexShardTestCase -> protected void snapshotShard(final IndexShard shard,                                  final Snapshot snapshot,                                  final Repository repository) throws IOException;1528706846;Snapshot a shard using a given repository *;protected void snapshotShard(final IndexShard shard,_                                 final Snapshot snapshot,_                                 final Repository repository) throws IOException {_        final IndexShardSnapshotStatus snapshotStatus = IndexShardSnapshotStatus.newInitializing()__        try (Engine.IndexCommitRef indexCommitRef = shard.acquireLastIndexCommit(true)) {_            Index index = shard.shardId().getIndex()__            IndexId indexId = new IndexId(index.getName(), index.getUUID())___            repository.snapshotShard(shard, snapshot.getSnapshotId(), indexId, indexCommitRef.getIndexCommit(), snapshotStatus)__        }__        final IndexShardSnapshotStatus.Copy lastSnapshotStatus = snapshotStatus.asCopy()__        assertEquals(IndexShardSnapshotStatus.Stage.DONE, lastSnapshotStatus.getStage())__        assertEquals(shard.snapshotStoreMetadata().size(), lastSnapshotStatus.getTotalFileCount())__        assertNull(lastSnapshotStatus.getFailure())__    };snapshot,a,shard,using,a,given,repository;protected,void,snapshot,shard,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,index,shard,snapshot,status,snapshot,status,index,shard,snapshot,status,new,initializing,try,engine,index,commit,ref,index,commit,ref,shard,acquire,last,index,commit,true,index,index,shard,shard,id,get,index,index,id,index,id,new,index,id,index,get,name,index,get,uuid,repository,snapshot,shard,shard,snapshot,get,snapshot,id,index,id,index,commit,ref,get,index,commit,snapshot,status,final,index,shard,snapshot,status,copy,last,snapshot,status,snapshot,status,as,copy,assert,equals,index,shard,snapshot,status,stage,done,last,snapshot,status,get,stage,assert,equals,shard,snapshot,store,metadata,size,last,snapshot,status,get,total,file,count,assert,null,last,snapshot,status,get,failure
IndexShardTestCase -> protected void snapshotShard(final IndexShard shard,                                  final Snapshot snapshot,                                  final Repository repository) throws IOException;1531179852;Snapshot a shard using a given repository *;protected void snapshotShard(final IndexShard shard,_                                 final Snapshot snapshot,_                                 final Repository repository) throws IOException {_        final IndexShardSnapshotStatus snapshotStatus = IndexShardSnapshotStatus.newInitializing()__        try (Engine.IndexCommitRef indexCommitRef = shard.acquireLastIndexCommit(true)) {_            Index index = shard.shardId().getIndex()__            IndexId indexId = new IndexId(index.getName(), index.getUUID())___            repository.snapshotShard(shard, snapshot.getSnapshotId(), indexId, indexCommitRef.getIndexCommit(), snapshotStatus)__        }__        final IndexShardSnapshotStatus.Copy lastSnapshotStatus = snapshotStatus.asCopy()__        assertEquals(IndexShardSnapshotStatus.Stage.DONE, lastSnapshotStatus.getStage())__        assertEquals(shard.snapshotStoreMetadata().size(), lastSnapshotStatus.getTotalFileCount())__        assertNull(lastSnapshotStatus.getFailure())__    };snapshot,a,shard,using,a,given,repository;protected,void,snapshot,shard,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,index,shard,snapshot,status,snapshot,status,index,shard,snapshot,status,new,initializing,try,engine,index,commit,ref,index,commit,ref,shard,acquire,last,index,commit,true,index,index,shard,shard,id,get,index,index,id,index,id,new,index,id,index,get,name,index,get,uuid,repository,snapshot,shard,shard,snapshot,get,snapshot,id,index,id,index,commit,ref,get,index,commit,snapshot,status,final,index,shard,snapshot,status,copy,last,snapshot,status,snapshot,status,as,copy,assert,equals,index,shard,snapshot,status,stage,done,last,snapshot,status,get,stage,assert,equals,shard,snapshot,store,metadata,size,last,snapshot,status,get,total,file,count,assert,null,last,snapshot,status,get,failure
IndexShardTestCase -> protected void snapshotShard(final IndexShard shard,                                  final Snapshot snapshot,                                  final Repository repository) throws IOException;1531910483;Snapshot a shard using a given repository *;protected void snapshotShard(final IndexShard shard,_                                 final Snapshot snapshot,_                                 final Repository repository) throws IOException {_        final IndexShardSnapshotStatus snapshotStatus = IndexShardSnapshotStatus.newInitializing()__        try (Engine.IndexCommitRef indexCommitRef = shard.acquireLastIndexCommit(true)) {_            Index index = shard.shardId().getIndex()__            IndexId indexId = new IndexId(index.getName(), index.getUUID())___            repository.snapshotShard(shard, snapshot.getSnapshotId(), indexId, indexCommitRef.getIndexCommit(), snapshotStatus)__        }__        final IndexShardSnapshotStatus.Copy lastSnapshotStatus = snapshotStatus.asCopy()__        assertEquals(IndexShardSnapshotStatus.Stage.DONE, lastSnapshotStatus.getStage())__        assertEquals(shard.snapshotStoreMetadata().size(), lastSnapshotStatus.getTotalFileCount())__        assertNull(lastSnapshotStatus.getFailure())__    };snapshot,a,shard,using,a,given,repository;protected,void,snapshot,shard,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,index,shard,snapshot,status,snapshot,status,index,shard,snapshot,status,new,initializing,try,engine,index,commit,ref,index,commit,ref,shard,acquire,last,index,commit,true,index,index,shard,shard,id,get,index,index,id,index,id,new,index,id,index,get,name,index,get,uuid,repository,snapshot,shard,shard,snapshot,get,snapshot,id,index,id,index,commit,ref,get,index,commit,snapshot,status,final,index,shard,snapshot,status,copy,last,snapshot,status,snapshot,status,as,copy,assert,equals,index,shard,snapshot,status,stage,done,last,snapshot,status,get,stage,assert,equals,shard,snapshot,store,metadata,size,last,snapshot,status,get,total,file,count,assert,null,last,snapshot,status,get,failure
IndexShardTestCase -> protected void snapshotShard(final IndexShard shard,                                  final Snapshot snapshot,                                  final Repository repository) throws IOException;1532434432;Snapshot a shard using a given repository *;protected void snapshotShard(final IndexShard shard,_                                 final Snapshot snapshot,_                                 final Repository repository) throws IOException {_        final IndexShardSnapshotStatus snapshotStatus = IndexShardSnapshotStatus.newInitializing()__        try (Engine.IndexCommitRef indexCommitRef = shard.acquireLastIndexCommit(true)) {_            Index index = shard.shardId().getIndex()__            IndexId indexId = new IndexId(index.getName(), index.getUUID())___            repository.snapshotShard(shard, snapshot.getSnapshotId(), indexId, indexCommitRef.getIndexCommit(), snapshotStatus)__        }__        final IndexShardSnapshotStatus.Copy lastSnapshotStatus = snapshotStatus.asCopy()__        assertEquals(IndexShardSnapshotStatus.Stage.DONE, lastSnapshotStatus.getStage())__        assertEquals(shard.snapshotStoreMetadata().size(), lastSnapshotStatus.getTotalFileCount())__        assertNull(lastSnapshotStatus.getFailure())__    };snapshot,a,shard,using,a,given,repository;protected,void,snapshot,shard,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,index,shard,snapshot,status,snapshot,status,index,shard,snapshot,status,new,initializing,try,engine,index,commit,ref,index,commit,ref,shard,acquire,last,index,commit,true,index,index,shard,shard,id,get,index,index,id,index,id,new,index,id,index,get,name,index,get,uuid,repository,snapshot,shard,shard,snapshot,get,snapshot,id,index,id,index,commit,ref,get,index,commit,snapshot,status,final,index,shard,snapshot,status,copy,last,snapshot,status,snapshot,status,as,copy,assert,equals,index,shard,snapshot,status,stage,done,last,snapshot,status,get,stage,assert,equals,shard,snapshot,store,metadata,size,last,snapshot,status,get,total,file,count,assert,null,last,snapshot,status,get,failure
IndexShardTestCase -> protected void snapshotShard(final IndexShard shard,                                  final Snapshot snapshot,                                  final Repository repository) throws IOException;1533295538;Snapshot a shard using a given repository *;protected void snapshotShard(final IndexShard shard,_                                 final Snapshot snapshot,_                                 final Repository repository) throws IOException {_        final IndexShardSnapshotStatus snapshotStatus = IndexShardSnapshotStatus.newInitializing()__        try (Engine.IndexCommitRef indexCommitRef = shard.acquireLastIndexCommit(true)) {_            Index index = shard.shardId().getIndex()__            IndexId indexId = new IndexId(index.getName(), index.getUUID())___            repository.snapshotShard(shard, snapshot.getSnapshotId(), indexId, indexCommitRef.getIndexCommit(), snapshotStatus)__        }__        final IndexShardSnapshotStatus.Copy lastSnapshotStatus = snapshotStatus.asCopy()__        assertEquals(IndexShardSnapshotStatus.Stage.DONE, lastSnapshotStatus.getStage())__        assertEquals(shard.snapshotStoreMetadata().size(), lastSnapshotStatus.getTotalFileCount())__        assertNull(lastSnapshotStatus.getFailure())__    };snapshot,a,shard,using,a,given,repository;protected,void,snapshot,shard,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,index,shard,snapshot,status,snapshot,status,index,shard,snapshot,status,new,initializing,try,engine,index,commit,ref,index,commit,ref,shard,acquire,last,index,commit,true,index,index,shard,shard,id,get,index,index,id,index,id,new,index,id,index,get,name,index,get,uuid,repository,snapshot,shard,shard,snapshot,get,snapshot,id,index,id,index,commit,ref,get,index,commit,snapshot,status,final,index,shard,snapshot,status,copy,last,snapshot,status,snapshot,status,as,copy,assert,equals,index,shard,snapshot,status,stage,done,last,snapshot,status,get,stage,assert,equals,shard,snapshot,store,metadata,size,last,snapshot,status,get,total,file,count,assert,null,last,snapshot,status,get,failure
IndexShardTestCase -> protected void snapshotShard(final IndexShard shard,                                  final Snapshot snapshot,                                  final Repository repository) throws IOException;1535723122;Snapshot a shard using a given repository *;protected void snapshotShard(final IndexShard shard,_                                 final Snapshot snapshot,_                                 final Repository repository) throws IOException {_        final IndexShardSnapshotStatus snapshotStatus = IndexShardSnapshotStatus.newInitializing()__        try (Engine.IndexCommitRef indexCommitRef = shard.acquireLastIndexCommit(true)) {_            Index index = shard.shardId().getIndex()__            IndexId indexId = new IndexId(index.getName(), index.getUUID())___            repository.snapshotShard(shard, snapshot.getSnapshotId(), indexId, indexCommitRef.getIndexCommit(), snapshotStatus)__        }__        final IndexShardSnapshotStatus.Copy lastSnapshotStatus = snapshotStatus.asCopy()__        assertEquals(IndexShardSnapshotStatus.Stage.DONE, lastSnapshotStatus.getStage())__        assertEquals(shard.snapshotStoreMetadata().size(), lastSnapshotStatus.getTotalFileCount())__        assertNull(lastSnapshotStatus.getFailure())__    };snapshot,a,shard,using,a,given,repository;protected,void,snapshot,shard,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,index,shard,snapshot,status,snapshot,status,index,shard,snapshot,status,new,initializing,try,engine,index,commit,ref,index,commit,ref,shard,acquire,last,index,commit,true,index,index,shard,shard,id,get,index,index,id,index,id,new,index,id,index,get,name,index,get,uuid,repository,snapshot,shard,shard,snapshot,get,snapshot,id,index,id,index,commit,ref,get,index,commit,snapshot,status,final,index,shard,snapshot,status,copy,last,snapshot,status,snapshot,status,as,copy,assert,equals,index,shard,snapshot,status,stage,done,last,snapshot,status,get,stage,assert,equals,shard,snapshot,store,metadata,size,last,snapshot,status,get,total,file,count,assert,null,last,snapshot,status,get,failure
IndexShardTestCase -> protected void snapshotShard(final IndexShard shard,                                  final Snapshot snapshot,                                  final Repository repository) throws IOException;1535965276;Snapshot a shard using a given repository *;protected void snapshotShard(final IndexShard shard,_                                 final Snapshot snapshot,_                                 final Repository repository) throws IOException {_        final IndexShardSnapshotStatus snapshotStatus = IndexShardSnapshotStatus.newInitializing()__        try (Engine.IndexCommitRef indexCommitRef = shard.acquireLastIndexCommit(true)) {_            Index index = shard.shardId().getIndex()__            IndexId indexId = new IndexId(index.getName(), index.getUUID())___            repository.snapshotShard(shard, snapshot.getSnapshotId(), indexId, indexCommitRef.getIndexCommit(), snapshotStatus)__        }__        final IndexShardSnapshotStatus.Copy lastSnapshotStatus = snapshotStatus.asCopy()__        assertEquals(IndexShardSnapshotStatus.Stage.DONE, lastSnapshotStatus.getStage())__        assertEquals(shard.snapshotStoreMetadata().size(), lastSnapshotStatus.getTotalFileCount())__        assertNull(lastSnapshotStatus.getFailure())__    };snapshot,a,shard,using,a,given,repository;protected,void,snapshot,shard,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,index,shard,snapshot,status,snapshot,status,index,shard,snapshot,status,new,initializing,try,engine,index,commit,ref,index,commit,ref,shard,acquire,last,index,commit,true,index,index,shard,shard,id,get,index,index,id,index,id,new,index,id,index,get,name,index,get,uuid,repository,snapshot,shard,shard,snapshot,get,snapshot,id,index,id,index,commit,ref,get,index,commit,snapshot,status,final,index,shard,snapshot,status,copy,last,snapshot,status,snapshot,status,as,copy,assert,equals,index,shard,snapshot,status,stage,done,last,snapshot,status,get,stage,assert,equals,shard,snapshot,store,metadata,size,last,snapshot,status,get,total,file,count,assert,null,last,snapshot,status,get,failure
IndexShardTestCase -> protected void snapshotShard(final IndexShard shard,                                  final Snapshot snapshot,                                  final Repository repository) throws IOException;1536611444;Snapshot a shard using a given repository *;protected void snapshotShard(final IndexShard shard,_                                 final Snapshot snapshot,_                                 final Repository repository) throws IOException {_        final IndexShardSnapshotStatus snapshotStatus = IndexShardSnapshotStatus.newInitializing()__        try (Engine.IndexCommitRef indexCommitRef = shard.acquireLastIndexCommit(true)) {_            Index index = shard.shardId().getIndex()__            IndexId indexId = new IndexId(index.getName(), index.getUUID())___            repository.snapshotShard(shard, snapshot.getSnapshotId(), indexId, indexCommitRef.getIndexCommit(), snapshotStatus)__        }__        final IndexShardSnapshotStatus.Copy lastSnapshotStatus = snapshotStatus.asCopy()__        assertEquals(IndexShardSnapshotStatus.Stage.DONE, lastSnapshotStatus.getStage())__        assertEquals(shard.snapshotStoreMetadata().size(), lastSnapshotStatus.getTotalFileCount())__        assertNull(lastSnapshotStatus.getFailure())__    };snapshot,a,shard,using,a,given,repository;protected,void,snapshot,shard,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,index,shard,snapshot,status,snapshot,status,index,shard,snapshot,status,new,initializing,try,engine,index,commit,ref,index,commit,ref,shard,acquire,last,index,commit,true,index,index,shard,shard,id,get,index,index,id,index,id,new,index,id,index,get,name,index,get,uuid,repository,snapshot,shard,shard,snapshot,get,snapshot,id,index,id,index,commit,ref,get,index,commit,snapshot,status,final,index,shard,snapshot,status,copy,last,snapshot,status,snapshot,status,as,copy,assert,equals,index,shard,snapshot,status,stage,done,last,snapshot,status,get,stage,assert,equals,shard,snapshot,store,metadata,size,last,snapshot,status,get,total,file,count,assert,null,last,snapshot,status,get,failure
IndexShardTestCase -> protected void snapshotShard(final IndexShard shard,                                  final Snapshot snapshot,                                  final Repository repository) throws IOException;1536828374;Snapshot a shard using a given repository *;protected void snapshotShard(final IndexShard shard,_                                 final Snapshot snapshot,_                                 final Repository repository) throws IOException {_        final IndexShardSnapshotStatus snapshotStatus = IndexShardSnapshotStatus.newInitializing()__        try (Engine.IndexCommitRef indexCommitRef = shard.acquireLastIndexCommit(true)) {_            Index index = shard.shardId().getIndex()__            IndexId indexId = new IndexId(index.getName(), index.getUUID())___            repository.snapshotShard(shard, shard.store(), snapshot.getSnapshotId(), indexId, indexCommitRef.getIndexCommit(),_                snapshotStatus)__        }__        final IndexShardSnapshotStatus.Copy lastSnapshotStatus = snapshotStatus.asCopy()__        assertEquals(IndexShardSnapshotStatus.Stage.DONE, lastSnapshotStatus.getStage())__        assertEquals(shard.snapshotStoreMetadata().size(), lastSnapshotStatus.getTotalFileCount())__        assertNull(lastSnapshotStatus.getFailure())__    };snapshot,a,shard,using,a,given,repository;protected,void,snapshot,shard,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,index,shard,snapshot,status,snapshot,status,index,shard,snapshot,status,new,initializing,try,engine,index,commit,ref,index,commit,ref,shard,acquire,last,index,commit,true,index,index,shard,shard,id,get,index,index,id,index,id,new,index,id,index,get,name,index,get,uuid,repository,snapshot,shard,shard,shard,store,snapshot,get,snapshot,id,index,id,index,commit,ref,get,index,commit,snapshot,status,final,index,shard,snapshot,status,copy,last,snapshot,status,snapshot,status,as,copy,assert,equals,index,shard,snapshot,status,stage,done,last,snapshot,status,get,stage,assert,equals,shard,snapshot,store,metadata,size,last,snapshot,status,get,total,file,count,assert,null,last,snapshot,status,get,failure
IndexShardTestCase -> protected void snapshotShard(final IndexShard shard,                                  final Snapshot snapshot,                                  final Repository repository) throws IOException;1537371806;Snapshot a shard using a given repository *;protected void snapshotShard(final IndexShard shard,_                                 final Snapshot snapshot,_                                 final Repository repository) throws IOException {_        final IndexShardSnapshotStatus snapshotStatus = IndexShardSnapshotStatus.newInitializing()__        try (Engine.IndexCommitRef indexCommitRef = shard.acquireLastIndexCommit(true)) {_            Index index = shard.shardId().getIndex()__            IndexId indexId = new IndexId(index.getName(), index.getUUID())___            repository.snapshotShard(shard, shard.store(), snapshot.getSnapshotId(), indexId, indexCommitRef.getIndexCommit(),_                snapshotStatus)__        }__        final IndexShardSnapshotStatus.Copy lastSnapshotStatus = snapshotStatus.asCopy()__        assertEquals(IndexShardSnapshotStatus.Stage.DONE, lastSnapshotStatus.getStage())__        assertEquals(shard.snapshotStoreMetadata().size(), lastSnapshotStatus.getTotalFileCount())__        assertNull(lastSnapshotStatus.getFailure())__    };snapshot,a,shard,using,a,given,repository;protected,void,snapshot,shard,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,index,shard,snapshot,status,snapshot,status,index,shard,snapshot,status,new,initializing,try,engine,index,commit,ref,index,commit,ref,shard,acquire,last,index,commit,true,index,index,shard,shard,id,get,index,index,id,index,id,new,index,id,index,get,name,index,get,uuid,repository,snapshot,shard,shard,shard,store,snapshot,get,snapshot,id,index,id,index,commit,ref,get,index,commit,snapshot,status,final,index,shard,snapshot,status,copy,last,snapshot,status,snapshot,status,as,copy,assert,equals,index,shard,snapshot,status,stage,done,last,snapshot,status,get,stage,assert,equals,shard,snapshot,store,metadata,size,last,snapshot,status,get,total,file,count,assert,null,last,snapshot,status,get,failure
IndexShardTestCase -> protected void snapshotShard(final IndexShard shard,                                  final Snapshot snapshot,                                  final Repository repository) throws IOException;1537806831;Snapshot a shard using a given repository *;protected void snapshotShard(final IndexShard shard,_                                 final Snapshot snapshot,_                                 final Repository repository) throws IOException {_        final IndexShardSnapshotStatus snapshotStatus = IndexShardSnapshotStatus.newInitializing()__        try (Engine.IndexCommitRef indexCommitRef = shard.acquireLastIndexCommit(true)) {_            Index index = shard.shardId().getIndex()__            IndexId indexId = new IndexId(index.getName(), index.getUUID())___            repository.snapshotShard(shard, shard.store(), snapshot.getSnapshotId(), indexId, indexCommitRef.getIndexCommit(),_                snapshotStatus)__        }__        final IndexShardSnapshotStatus.Copy lastSnapshotStatus = snapshotStatus.asCopy()__        assertEquals(IndexShardSnapshotStatus.Stage.DONE, lastSnapshotStatus.getStage())__        assertEquals(shard.snapshotStoreMetadata().size(), lastSnapshotStatus.getTotalFileCount())__        assertNull(lastSnapshotStatus.getFailure())__    };snapshot,a,shard,using,a,given,repository;protected,void,snapshot,shard,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,index,shard,snapshot,status,snapshot,status,index,shard,snapshot,status,new,initializing,try,engine,index,commit,ref,index,commit,ref,shard,acquire,last,index,commit,true,index,index,shard,shard,id,get,index,index,id,index,id,new,index,id,index,get,name,index,get,uuid,repository,snapshot,shard,shard,shard,store,snapshot,get,snapshot,id,index,id,index,commit,ref,get,index,commit,snapshot,status,final,index,shard,snapshot,status,copy,last,snapshot,status,snapshot,status,as,copy,assert,equals,index,shard,snapshot,status,stage,done,last,snapshot,status,get,stage,assert,equals,shard,snapshot,store,metadata,size,last,snapshot,status,get,total,file,count,assert,null,last,snapshot,status,get,failure
IndexShardTestCase -> protected void snapshotShard(final IndexShard shard,                                  final Snapshot snapshot,                                  final Repository repository) throws IOException;1538067637;Snapshot a shard using a given repository *;protected void snapshotShard(final IndexShard shard,_                                 final Snapshot snapshot,_                                 final Repository repository) throws IOException {_        final IndexShardSnapshotStatus snapshotStatus = IndexShardSnapshotStatus.newInitializing()__        try (Engine.IndexCommitRef indexCommitRef = shard.acquireLastIndexCommit(true)) {_            Index index = shard.shardId().getIndex()__            IndexId indexId = new IndexId(index.getName(), index.getUUID())___            repository.snapshotShard(shard, shard.store(), snapshot.getSnapshotId(), indexId, indexCommitRef.getIndexCommit(),_                snapshotStatus)__        }__        final IndexShardSnapshotStatus.Copy lastSnapshotStatus = snapshotStatus.asCopy()__        assertEquals(IndexShardSnapshotStatus.Stage.DONE, lastSnapshotStatus.getStage())__        assertEquals(shard.snapshotStoreMetadata().size(), lastSnapshotStatus.getTotalFileCount())__        assertNull(lastSnapshotStatus.getFailure())__    };snapshot,a,shard,using,a,given,repository;protected,void,snapshot,shard,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,index,shard,snapshot,status,snapshot,status,index,shard,snapshot,status,new,initializing,try,engine,index,commit,ref,index,commit,ref,shard,acquire,last,index,commit,true,index,index,shard,shard,id,get,index,index,id,index,id,new,index,id,index,get,name,index,get,uuid,repository,snapshot,shard,shard,shard,store,snapshot,get,snapshot,id,index,id,index,commit,ref,get,index,commit,snapshot,status,final,index,shard,snapshot,status,copy,last,snapshot,status,snapshot,status,as,copy,assert,equals,index,shard,snapshot,status,stage,done,last,snapshot,status,get,stage,assert,equals,shard,snapshot,store,metadata,size,last,snapshot,status,get,total,file,count,assert,null,last,snapshot,status,get,failure
IndexShardTestCase -> protected void snapshotShard(final IndexShard shard,                                  final Snapshot snapshot,                                  final Repository repository) throws IOException;1542697404;Snapshot a shard using a given repository *;protected void snapshotShard(final IndexShard shard,_                                 final Snapshot snapshot,_                                 final Repository repository) throws IOException {_        final IndexShardSnapshotStatus snapshotStatus = IndexShardSnapshotStatus.newInitializing()__        try (Engine.IndexCommitRef indexCommitRef = shard.acquireLastIndexCommit(true)) {_            Index index = shard.shardId().getIndex()__            IndexId indexId = new IndexId(index.getName(), index.getUUID())___            repository.snapshotShard(shard, shard.store(), snapshot.getSnapshotId(), indexId, indexCommitRef.getIndexCommit(),_                snapshotStatus)__        }__        final IndexShardSnapshotStatus.Copy lastSnapshotStatus = snapshotStatus.asCopy()__        assertEquals(IndexShardSnapshotStatus.Stage.DONE, lastSnapshotStatus.getStage())__        assertEquals(shard.snapshotStoreMetadata().size(), lastSnapshotStatus.getTotalFileCount())__        assertNull(lastSnapshotStatus.getFailure())__    };snapshot,a,shard,using,a,given,repository;protected,void,snapshot,shard,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,index,shard,snapshot,status,snapshot,status,index,shard,snapshot,status,new,initializing,try,engine,index,commit,ref,index,commit,ref,shard,acquire,last,index,commit,true,index,index,shard,shard,id,get,index,index,id,index,id,new,index,id,index,get,name,index,get,uuid,repository,snapshot,shard,shard,shard,store,snapshot,get,snapshot,id,index,id,index,commit,ref,get,index,commit,snapshot,status,final,index,shard,snapshot,status,copy,last,snapshot,status,snapshot,status,as,copy,assert,equals,index,shard,snapshot,status,stage,done,last,snapshot,status,get,stage,assert,equals,shard,snapshot,store,metadata,size,last,snapshot,status,get,total,file,count,assert,null,last,snapshot,status,get,failure
IndexShardTestCase -> protected void snapshotShard(final IndexShard shard,                                  final Snapshot snapshot,                                  final Repository repository) throws IOException;1544783963;Snapshot a shard using a given repository *;protected void snapshotShard(final IndexShard shard,_                                 final Snapshot snapshot,_                                 final Repository repository) throws IOException {_        final IndexShardSnapshotStatus snapshotStatus = IndexShardSnapshotStatus.newInitializing()__        try (Engine.IndexCommitRef indexCommitRef = shard.acquireLastIndexCommit(true)) {_            Index index = shard.shardId().getIndex()__            IndexId indexId = new IndexId(index.getName(), index.getUUID())___            repository.snapshotShard(shard, shard.store(), snapshot.getSnapshotId(), indexId, indexCommitRef.getIndexCommit(),_                snapshotStatus)__        }__        final IndexShardSnapshotStatus.Copy lastSnapshotStatus = snapshotStatus.asCopy()__        assertEquals(IndexShardSnapshotStatus.Stage.DONE, lastSnapshotStatus.getStage())__        assertEquals(shard.snapshotStoreMetadata().size(), lastSnapshotStatus.getTotalFileCount())__        assertNull(lastSnapshotStatus.getFailure())__    };snapshot,a,shard,using,a,given,repository;protected,void,snapshot,shard,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,index,shard,snapshot,status,snapshot,status,index,shard,snapshot,status,new,initializing,try,engine,index,commit,ref,index,commit,ref,shard,acquire,last,index,commit,true,index,index,shard,shard,id,get,index,index,id,index,id,new,index,id,index,get,name,index,get,uuid,repository,snapshot,shard,shard,shard,store,snapshot,get,snapshot,id,index,id,index,commit,ref,get,index,commit,snapshot,status,final,index,shard,snapshot,status,copy,last,snapshot,status,snapshot,status,as,copy,assert,equals,index,shard,snapshot,status,stage,done,last,snapshot,status,get,stage,assert,equals,shard,snapshot,store,metadata,size,last,snapshot,status,get,total,file,count,assert,null,last,snapshot,status,get,failure
IndexShardTestCase -> protected void snapshotShard(final IndexShard shard,                                  final Snapshot snapshot,                                  final Repository repository) throws IOException;1544893197;Snapshot a shard using a given repository *;protected void snapshotShard(final IndexShard shard,_                                 final Snapshot snapshot,_                                 final Repository repository) throws IOException {_        final IndexShardSnapshotStatus snapshotStatus = IndexShardSnapshotStatus.newInitializing()__        try (Engine.IndexCommitRef indexCommitRef = shard.acquireLastIndexCommit(true)) {_            Index index = shard.shardId().getIndex()__            IndexId indexId = new IndexId(index.getName(), index.getUUID())___            repository.snapshotShard(shard, shard.store(), snapshot.getSnapshotId(), indexId, indexCommitRef.getIndexCommit(),_                snapshotStatus)__        }__        final IndexShardSnapshotStatus.Copy lastSnapshotStatus = snapshotStatus.asCopy()__        assertEquals(IndexShardSnapshotStatus.Stage.DONE, lastSnapshotStatus.getStage())__        assertEquals(shard.snapshotStoreMetadata().size(), lastSnapshotStatus.getTotalFileCount())__        assertNull(lastSnapshotStatus.getFailure())__    };snapshot,a,shard,using,a,given,repository;protected,void,snapshot,shard,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,index,shard,snapshot,status,snapshot,status,index,shard,snapshot,status,new,initializing,try,engine,index,commit,ref,index,commit,ref,shard,acquire,last,index,commit,true,index,index,shard,shard,id,get,index,index,id,index,id,new,index,id,index,get,name,index,get,uuid,repository,snapshot,shard,shard,shard,store,snapshot,get,snapshot,id,index,id,index,commit,ref,get,index,commit,snapshot,status,final,index,shard,snapshot,status,copy,last,snapshot,status,snapshot,status,as,copy,assert,equals,index,shard,snapshot,status,stage,done,last,snapshot,status,get,stage,assert,equals,shard,snapshot,store,metadata,size,last,snapshot,status,get,total,file,count,assert,null,last,snapshot,status,get,failure
IndexShardTestCase -> protected void snapshotShard(final IndexShard shard,                                  final Snapshot snapshot,                                  final Repository repository) throws IOException;1545678410;Snapshot a shard using a given repository *;protected void snapshotShard(final IndexShard shard,_                                 final Snapshot snapshot,_                                 final Repository repository) throws IOException {_        final IndexShardSnapshotStatus snapshotStatus = IndexShardSnapshotStatus.newInitializing()__        try (Engine.IndexCommitRef indexCommitRef = shard.acquireLastIndexCommit(true)) {_            Index index = shard.shardId().getIndex()__            IndexId indexId = new IndexId(index.getName(), index.getUUID())___            repository.snapshotShard(shard, shard.store(), snapshot.getSnapshotId(), indexId, indexCommitRef.getIndexCommit(),_                snapshotStatus)__        }__        final IndexShardSnapshotStatus.Copy lastSnapshotStatus = snapshotStatus.asCopy()__        assertEquals(IndexShardSnapshotStatus.Stage.DONE, lastSnapshotStatus.getStage())__        assertEquals(shard.snapshotStoreMetadata().size(), lastSnapshotStatus.getTotalFileCount())__        assertNull(lastSnapshotStatus.getFailure())__    };snapshot,a,shard,using,a,given,repository;protected,void,snapshot,shard,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,index,shard,snapshot,status,snapshot,status,index,shard,snapshot,status,new,initializing,try,engine,index,commit,ref,index,commit,ref,shard,acquire,last,index,commit,true,index,index,shard,shard,id,get,index,index,id,index,id,new,index,id,index,get,name,index,get,uuid,repository,snapshot,shard,shard,shard,store,snapshot,get,snapshot,id,index,id,index,commit,ref,get,index,commit,snapshot,status,final,index,shard,snapshot,status,copy,last,snapshot,status,snapshot,status,as,copy,assert,equals,index,shard,snapshot,status,stage,done,last,snapshot,status,get,stage,assert,equals,shard,snapshot,store,metadata,size,last,snapshot,status,get,total,file,count,assert,null,last,snapshot,status,get,failure
IndexShardTestCase -> protected void snapshotShard(final IndexShard shard,                                  final Snapshot snapshot,                                  final Repository repository) throws IOException;1546927432;Snapshot a shard using a given repository *;protected void snapshotShard(final IndexShard shard,_                                 final Snapshot snapshot,_                                 final Repository repository) throws IOException {_        final IndexShardSnapshotStatus snapshotStatus = IndexShardSnapshotStatus.newInitializing()__        try (Engine.IndexCommitRef indexCommitRef = shard.acquireLastIndexCommit(true)) {_            Index index = shard.shardId().getIndex()__            IndexId indexId = new IndexId(index.getName(), index.getUUID())___            repository.snapshotShard(shard, shard.store(), snapshot.getSnapshotId(), indexId, indexCommitRef.getIndexCommit(),_                snapshotStatus)__        }__        final IndexShardSnapshotStatus.Copy lastSnapshotStatus = snapshotStatus.asCopy()__        assertEquals(IndexShardSnapshotStatus.Stage.DONE, lastSnapshotStatus.getStage())__        assertEquals(shard.snapshotStoreMetadata().size(), lastSnapshotStatus.getTotalFileCount())__        assertNull(lastSnapshotStatus.getFailure())__    };snapshot,a,shard,using,a,given,repository;protected,void,snapshot,shard,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,index,shard,snapshot,status,snapshot,status,index,shard,snapshot,status,new,initializing,try,engine,index,commit,ref,index,commit,ref,shard,acquire,last,index,commit,true,index,index,shard,shard,id,get,index,index,id,index,id,new,index,id,index,get,name,index,get,uuid,repository,snapshot,shard,shard,shard,store,snapshot,get,snapshot,id,index,id,index,commit,ref,get,index,commit,snapshot,status,final,index,shard,snapshot,status,copy,last,snapshot,status,snapshot,status,as,copy,assert,equals,index,shard,snapshot,status,stage,done,last,snapshot,status,get,stage,assert,equals,shard,snapshot,store,metadata,size,last,snapshot,status,get,total,file,count,assert,null,last,snapshot,status,get,failure
IndexShardTestCase -> protected void snapshotShard(final IndexShard shard,                                  final Snapshot snapshot,                                  final Repository repository) throws IOException;1547315388;Snapshot a shard using a given repository *;protected void snapshotShard(final IndexShard shard,_                                 final Snapshot snapshot,_                                 final Repository repository) throws IOException {_        final IndexShardSnapshotStatus snapshotStatus = IndexShardSnapshotStatus.newInitializing()__        try (Engine.IndexCommitRef indexCommitRef = shard.acquireLastIndexCommit(true)) {_            Index index = shard.shardId().getIndex()__            IndexId indexId = new IndexId(index.getName(), index.getUUID())___            repository.snapshotShard(shard, shard.store(), snapshot.getSnapshotId(), indexId, indexCommitRef.getIndexCommit(),_                snapshotStatus)__        }__        final IndexShardSnapshotStatus.Copy lastSnapshotStatus = snapshotStatus.asCopy()__        assertEquals(IndexShardSnapshotStatus.Stage.DONE, lastSnapshotStatus.getStage())__        assertEquals(shard.snapshotStoreMetadata().size(), lastSnapshotStatus.getTotalFileCount())__        assertNull(lastSnapshotStatus.getFailure())__    };snapshot,a,shard,using,a,given,repository;protected,void,snapshot,shard,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,index,shard,snapshot,status,snapshot,status,index,shard,snapshot,status,new,initializing,try,engine,index,commit,ref,index,commit,ref,shard,acquire,last,index,commit,true,index,index,shard,shard,id,get,index,index,id,index,id,new,index,id,index,get,name,index,get,uuid,repository,snapshot,shard,shard,shard,store,snapshot,get,snapshot,id,index,id,index,commit,ref,get,index,commit,snapshot,status,final,index,shard,snapshot,status,copy,last,snapshot,status,snapshot,status,as,copy,assert,equals,index,shard,snapshot,status,stage,done,last,snapshot,status,get,stage,assert,equals,shard,snapshot,store,metadata,size,last,snapshot,status,get,total,file,count,assert,null,last,snapshot,status,get,failure
IndexShardTestCase -> protected void snapshotShard(final IndexShard shard,                                  final Snapshot snapshot,                                  final Repository repository) throws IOException;1547496475;Snapshot a shard using a given repository *;protected void snapshotShard(final IndexShard shard,_                                 final Snapshot snapshot,_                                 final Repository repository) throws IOException {_        final IndexShardSnapshotStatus snapshotStatus = IndexShardSnapshotStatus.newInitializing()__        try (Engine.IndexCommitRef indexCommitRef = shard.acquireLastIndexCommit(true)) {_            Index index = shard.shardId().getIndex()__            IndexId indexId = new IndexId(index.getName(), index.getUUID())___            repository.snapshotShard(shard, shard.store(), snapshot.getSnapshotId(), indexId, indexCommitRef.getIndexCommit(),_                snapshotStatus)__        }__        final IndexShardSnapshotStatus.Copy lastSnapshotStatus = snapshotStatus.asCopy()__        assertEquals(IndexShardSnapshotStatus.Stage.DONE, lastSnapshotStatus.getStage())__        assertEquals(shard.snapshotStoreMetadata().size(), lastSnapshotStatus.getTotalFileCount())__        assertNull(lastSnapshotStatus.getFailure())__    };snapshot,a,shard,using,a,given,repository;protected,void,snapshot,shard,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,index,shard,snapshot,status,snapshot,status,index,shard,snapshot,status,new,initializing,try,engine,index,commit,ref,index,commit,ref,shard,acquire,last,index,commit,true,index,index,shard,shard,id,get,index,index,id,index,id,new,index,id,index,get,name,index,get,uuid,repository,snapshot,shard,shard,shard,store,snapshot,get,snapshot,id,index,id,index,commit,ref,get,index,commit,snapshot,status,final,index,shard,snapshot,status,copy,last,snapshot,status,snapshot,status,as,copy,assert,equals,index,shard,snapshot,status,stage,done,last,snapshot,status,get,stage,assert,equals,shard,snapshot,store,metadata,size,last,snapshot,status,get,total,file,count,assert,null,last,snapshot,status,get,failure
IndexShardTestCase -> protected void snapshotShard(final IndexShard shard,                                  final Snapshot snapshot,                                  final Repository repository) throws IOException;1547496886;Snapshot a shard using a given repository *;protected void snapshotShard(final IndexShard shard,_                                 final Snapshot snapshot,_                                 final Repository repository) throws IOException {_        final IndexShardSnapshotStatus snapshotStatus = IndexShardSnapshotStatus.newInitializing()__        try (Engine.IndexCommitRef indexCommitRef = shard.acquireLastIndexCommit(true)) {_            Index index = shard.shardId().getIndex()__            IndexId indexId = new IndexId(index.getName(), index.getUUID())___            repository.snapshotShard(shard, shard.store(), snapshot.getSnapshotId(), indexId, indexCommitRef.getIndexCommit(),_                snapshotStatus)__        }__        final IndexShardSnapshotStatus.Copy lastSnapshotStatus = snapshotStatus.asCopy()__        assertEquals(IndexShardSnapshotStatus.Stage.DONE, lastSnapshotStatus.getStage())__        assertEquals(shard.snapshotStoreMetadata().size(), lastSnapshotStatus.getTotalFileCount())__        assertNull(lastSnapshotStatus.getFailure())__    };snapshot,a,shard,using,a,given,repository;protected,void,snapshot,shard,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,index,shard,snapshot,status,snapshot,status,index,shard,snapshot,status,new,initializing,try,engine,index,commit,ref,index,commit,ref,shard,acquire,last,index,commit,true,index,index,shard,shard,id,get,index,index,id,index,id,new,index,id,index,get,name,index,get,uuid,repository,snapshot,shard,shard,shard,store,snapshot,get,snapshot,id,index,id,index,commit,ref,get,index,commit,snapshot,status,final,index,shard,snapshot,status,copy,last,snapshot,status,snapshot,status,as,copy,assert,equals,index,shard,snapshot,status,stage,done,last,snapshot,status,get,stage,assert,equals,shard,snapshot,store,metadata,size,last,snapshot,status,get,total,file,count,assert,null,last,snapshot,status,get,failure
IndexShardTestCase -> protected void snapshotShard(final IndexShard shard,                                  final Snapshot snapshot,                                  final Repository repository) throws IOException;1547520324;Snapshot a shard using a given repository *;protected void snapshotShard(final IndexShard shard,_                                 final Snapshot snapshot,_                                 final Repository repository) throws IOException {_        final IndexShardSnapshotStatus snapshotStatus = IndexShardSnapshotStatus.newInitializing()__        try (Engine.IndexCommitRef indexCommitRef = shard.acquireLastIndexCommit(true)) {_            Index index = shard.shardId().getIndex()__            IndexId indexId = new IndexId(index.getName(), index.getUUID())___            repository.snapshotShard(shard, shard.store(), snapshot.getSnapshotId(), indexId, indexCommitRef.getIndexCommit(),_                snapshotStatus)__        }__        final IndexShardSnapshotStatus.Copy lastSnapshotStatus = snapshotStatus.asCopy()__        assertEquals(IndexShardSnapshotStatus.Stage.DONE, lastSnapshotStatus.getStage())__        assertEquals(shard.snapshotStoreMetadata().size(), lastSnapshotStatus.getTotalFileCount())__        assertNull(lastSnapshotStatus.getFailure())__    };snapshot,a,shard,using,a,given,repository;protected,void,snapshot,shard,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,index,shard,snapshot,status,snapshot,status,index,shard,snapshot,status,new,initializing,try,engine,index,commit,ref,index,commit,ref,shard,acquire,last,index,commit,true,index,index,shard,shard,id,get,index,index,id,index,id,new,index,id,index,get,name,index,get,uuid,repository,snapshot,shard,shard,shard,store,snapshot,get,snapshot,id,index,id,index,commit,ref,get,index,commit,snapshot,status,final,index,shard,snapshot,status,copy,last,snapshot,status,snapshot,status,as,copy,assert,equals,index,shard,snapshot,status,stage,done,last,snapshot,status,get,stage,assert,equals,shard,snapshot,store,metadata,size,last,snapshot,status,get,total,file,count,assert,null,last,snapshot,status,get,failure
IndexShardTestCase -> protected void snapshotShard(final IndexShard shard,                                  final Snapshot snapshot,                                  final Repository repository) throws IOException;1547552901;Snapshot a shard using a given repository *;protected void snapshotShard(final IndexShard shard,_                                 final Snapshot snapshot,_                                 final Repository repository) throws IOException {_        final IndexShardSnapshotStatus snapshotStatus = IndexShardSnapshotStatus.newInitializing()__        try (Engine.IndexCommitRef indexCommitRef = shard.acquireLastIndexCommit(true)) {_            Index index = shard.shardId().getIndex()__            IndexId indexId = new IndexId(index.getName(), index.getUUID())___            repository.snapshotShard(shard, shard.store(), snapshot.getSnapshotId(), indexId, indexCommitRef.getIndexCommit(),_                snapshotStatus)__        }__        final IndexShardSnapshotStatus.Copy lastSnapshotStatus = snapshotStatus.asCopy()__        assertEquals(IndexShardSnapshotStatus.Stage.DONE, lastSnapshotStatus.getStage())__        assertEquals(shard.snapshotStoreMetadata().size(), lastSnapshotStatus.getTotalFileCount())__        assertNull(lastSnapshotStatus.getFailure())__    };snapshot,a,shard,using,a,given,repository;protected,void,snapshot,shard,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,index,shard,snapshot,status,snapshot,status,index,shard,snapshot,status,new,initializing,try,engine,index,commit,ref,index,commit,ref,shard,acquire,last,index,commit,true,index,index,shard,shard,id,get,index,index,id,index,id,new,index,id,index,get,name,index,get,uuid,repository,snapshot,shard,shard,shard,store,snapshot,get,snapshot,id,index,id,index,commit,ref,get,index,commit,snapshot,status,final,index,shard,snapshot,status,copy,last,snapshot,status,snapshot,status,as,copy,assert,equals,index,shard,snapshot,status,stage,done,last,snapshot,status,get,stage,assert,equals,shard,snapshot,store,metadata,size,last,snapshot,status,get,total,file,count,assert,null,last,snapshot,status,get,failure
IndexShardTestCase -> protected void snapshotShard(final IndexShard shard,                                  final Snapshot snapshot,                                  final Repository repository) throws IOException;1548593396;Snapshot a shard using a given repository *;protected void snapshotShard(final IndexShard shard,_                                 final Snapshot snapshot,_                                 final Repository repository) throws IOException {_        final IndexShardSnapshotStatus snapshotStatus = IndexShardSnapshotStatus.newInitializing()__        try (Engine.IndexCommitRef indexCommitRef = shard.acquireLastIndexCommit(true)) {_            Index index = shard.shardId().getIndex()__            IndexId indexId = new IndexId(index.getName(), index.getUUID())___            repository.snapshotShard(shard, shard.store(), snapshot.getSnapshotId(), indexId, indexCommitRef.getIndexCommit(),_                snapshotStatus)__        }__        final IndexShardSnapshotStatus.Copy lastSnapshotStatus = snapshotStatus.asCopy()__        assertEquals(IndexShardSnapshotStatus.Stage.DONE, lastSnapshotStatus.getStage())__        assertEquals(shard.snapshotStoreMetadata().size(), lastSnapshotStatus.getTotalFileCount())__        assertNull(lastSnapshotStatus.getFailure())__    };snapshot,a,shard,using,a,given,repository;protected,void,snapshot,shard,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,index,shard,snapshot,status,snapshot,status,index,shard,snapshot,status,new,initializing,try,engine,index,commit,ref,index,commit,ref,shard,acquire,last,index,commit,true,index,index,shard,shard,id,get,index,index,id,index,id,new,index,id,index,get,name,index,get,uuid,repository,snapshot,shard,shard,shard,store,snapshot,get,snapshot,id,index,id,index,commit,ref,get,index,commit,snapshot,status,final,index,shard,snapshot,status,copy,last,snapshot,status,snapshot,status,as,copy,assert,equals,index,shard,snapshot,status,stage,done,last,snapshot,status,get,stage,assert,equals,shard,snapshot,store,metadata,size,last,snapshot,status,get,total,file,count,assert,null,last,snapshot,status,get,failure
IndexShardTestCase -> protected void snapshotShard(final IndexShard shard,                                  final Snapshot snapshot,                                  final Repository repository) throws IOException;1549294529;Snapshot a shard using a given repository *;protected void snapshotShard(final IndexShard shard,_                                 final Snapshot snapshot,_                                 final Repository repository) throws IOException {_        final IndexShardSnapshotStatus snapshotStatus = IndexShardSnapshotStatus.newInitializing()__        try (Engine.IndexCommitRef indexCommitRef = shard.acquireLastIndexCommit(true)) {_            Index index = shard.shardId().getIndex()__            IndexId indexId = new IndexId(index.getName(), index.getUUID())___            repository.snapshotShard(shard, shard.store(), snapshot.getSnapshotId(), indexId, indexCommitRef.getIndexCommit(),_                snapshotStatus)__        }__        final IndexShardSnapshotStatus.Copy lastSnapshotStatus = snapshotStatus.asCopy()__        assertEquals(IndexShardSnapshotStatus.Stage.DONE, lastSnapshotStatus.getStage())__        assertEquals(shard.snapshotStoreMetadata().size(), lastSnapshotStatus.getTotalFileCount())__        assertNull(lastSnapshotStatus.getFailure())__    };snapshot,a,shard,using,a,given,repository;protected,void,snapshot,shard,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,index,shard,snapshot,status,snapshot,status,index,shard,snapshot,status,new,initializing,try,engine,index,commit,ref,index,commit,ref,shard,acquire,last,index,commit,true,index,index,shard,shard,id,get,index,index,id,index,id,new,index,id,index,get,name,index,get,uuid,repository,snapshot,shard,shard,shard,store,snapshot,get,snapshot,id,index,id,index,commit,ref,get,index,commit,snapshot,status,final,index,shard,snapshot,status,copy,last,snapshot,status,snapshot,status,as,copy,assert,equals,index,shard,snapshot,status,stage,done,last,snapshot,status,get,stage,assert,equals,shard,snapshot,store,metadata,size,last,snapshot,status,get,total,file,count,assert,null,last,snapshot,status,get,failure
IndexShardTestCase -> protected void snapshotShard(final IndexShard shard,                                  final Snapshot snapshot,                                  final Repository repository) throws IOException;1550668107;Snapshot a shard using a given repository *;protected void snapshotShard(final IndexShard shard,_                                 final Snapshot snapshot,_                                 final Repository repository) throws IOException {_        final IndexShardSnapshotStatus snapshotStatus = IndexShardSnapshotStatus.newInitializing()__        try (Engine.IndexCommitRef indexCommitRef = shard.acquireLastIndexCommit(true)) {_            Index index = shard.shardId().getIndex()__            IndexId indexId = new IndexId(index.getName(), index.getUUID())___            repository.snapshotShard(shard, shard.store(), snapshot.getSnapshotId(), indexId, indexCommitRef.getIndexCommit(),_                snapshotStatus)__        }__        final IndexShardSnapshotStatus.Copy lastSnapshotStatus = snapshotStatus.asCopy()__        assertEquals(IndexShardSnapshotStatus.Stage.DONE, lastSnapshotStatus.getStage())__        assertEquals(shard.snapshotStoreMetadata().size(), lastSnapshotStatus.getTotalFileCount())__        assertNull(lastSnapshotStatus.getFailure())__    };snapshot,a,shard,using,a,given,repository;protected,void,snapshot,shard,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,index,shard,snapshot,status,snapshot,status,index,shard,snapshot,status,new,initializing,try,engine,index,commit,ref,index,commit,ref,shard,acquire,last,index,commit,true,index,index,shard,shard,id,get,index,index,id,index,id,new,index,id,index,get,name,index,get,uuid,repository,snapshot,shard,shard,shard,store,snapshot,get,snapshot,id,index,id,index,commit,ref,get,index,commit,snapshot,status,final,index,shard,snapshot,status,copy,last,snapshot,status,snapshot,status,as,copy,assert,equals,index,shard,snapshot,status,stage,done,last,snapshot,status,get,stage,assert,equals,shard,snapshot,store,metadata,size,last,snapshot,status,get,total,file,count,assert,null,last,snapshot,status,get,failure
IndexShardTestCase -> protected void recoverReplica(IndexShard replica, IndexShard primary) throws IOException;1524684173;recovers a replica from the given primary *;protected void recoverReplica(IndexShard replica, IndexShard primary) throws IOException {_        recoverReplica(replica, primary,_            (r, sourceNode) -> new RecoveryTarget(r, sourceNode, recoveryListener, version -> {_            }),_            true)__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,index,shard,replica,index,shard,primary,throws,ioexception,recover,replica,replica,primary,r,source,node,new,recovery,target,r,source,node,recovery,listener,version,true
IndexShardTestCase -> protected void recoverReplica(IndexShard replica, IndexShard primary) throws IOException;1525162917;recovers a replica from the given primary *;protected void recoverReplica(IndexShard replica, IndexShard primary) throws IOException {_        recoverReplica(replica, primary,_            (r, sourceNode) -> new RecoveryTarget(r, sourceNode, recoveryListener, version -> {_            }),_            true)__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,index,shard,replica,index,shard,primary,throws,ioexception,recover,replica,replica,primary,r,source,node,new,recovery,target,r,source,node,recovery,listener,version,true
IndexShardTestCase -> protected void recoverReplica(IndexShard replica, IndexShard primary) throws IOException;1527583663;recovers a replica from the given primary *;protected void recoverReplica(IndexShard replica, IndexShard primary) throws IOException {_        recoverReplica(replica, primary,_            (r, sourceNode) -> new RecoveryTarget(r, sourceNode, recoveryListener, version -> {_            }),_            true)__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,index,shard,replica,index,shard,primary,throws,ioexception,recover,replica,replica,primary,r,source,node,new,recovery,target,r,source,node,recovery,listener,version,true
IndexShardTestCase -> protected void recoverReplica(IndexShard replica, IndexShard primary) throws IOException;1528706846;recovers a replica from the given primary *;protected void recoverReplica(IndexShard replica, IndexShard primary) throws IOException {_        recoverReplica(replica, primary,_            (r, sourceNode) -> new RecoveryTarget(r, sourceNode, recoveryListener, version -> {_            }),_            true)__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,index,shard,replica,index,shard,primary,throws,ioexception,recover,replica,replica,primary,r,source,node,new,recovery,target,r,source,node,recovery,listener,version,true
IndexShardTestCase -> protected void recoverReplica(IndexShard replica, IndexShard primary) throws IOException;1531179852;recovers a replica from the given primary *;protected void recoverReplica(IndexShard replica, IndexShard primary) throws IOException {_        recoverReplica(replica, primary,_            (r, sourceNode) -> new RecoveryTarget(r, sourceNode, recoveryListener, version -> {_            }),_            true)__    };recovers,a,replica,from,the,given,primary;protected,void,recover,replica,index,shard,replica,index,shard,primary,throws,ioexception,recover,replica,replica,primary,r,source,node,new,recovery,target,r,source,node,recovery,listener,version,true
IndexShardTestCase -> protected IndexShard newStartedShard() throws IOException;1524684173;creates a new empyu shard and starts it. The shard will be either a replica or a primary.;protected IndexShard newStartedShard() throws IOException {_        return newStartedShard(randomBoolean())__    };creates,a,new,empyu,shard,and,starts,it,the,shard,will,be,either,a,replica,or,a,primary;protected,index,shard,new,started,shard,throws,ioexception,return,new,started,shard,random,boolean
IndexShardTestCase -> protected IndexShard newStartedShard() throws IOException;1525162917;creates a new empyu shard and starts it. The shard will be either a replica or a primary.;protected IndexShard newStartedShard() throws IOException {_        return newStartedShard(randomBoolean())__    };creates,a,new,empyu,shard,and,starts,it,the,shard,will,be,either,a,replica,or,a,primary;protected,index,shard,new,started,shard,throws,ioexception,return,new,started,shard,random,boolean
IndexShardTestCase -> protected IndexShard newStartedShard() throws IOException;1527583663;creates a new empyu shard and starts it. The shard will be either a replica or a primary.;protected IndexShard newStartedShard() throws IOException {_        return newStartedShard(randomBoolean())__    };creates,a,new,empyu,shard,and,starts,it,the,shard,will,be,either,a,replica,or,a,primary;protected,index,shard,new,started,shard,throws,ioexception,return,new,started,shard,random,boolean
IndexShardTestCase -> protected IndexShard newStartedShard() throws IOException;1528706846;creates a new empyu shard and starts it. The shard will be either a replica or a primary.;protected IndexShard newStartedShard() throws IOException {_        return newStartedShard(randomBoolean())__    };creates,a,new,empyu,shard,and,starts,it,the,shard,will,be,either,a,replica,or,a,primary;protected,index,shard,new,started,shard,throws,ioexception,return,new,started,shard,random,boolean
IndexShardTestCase -> protected IndexShard newStartedShard() throws IOException;1531179852;creates a new empyu shard and starts it. The shard will be either a replica or a primary.;protected IndexShard newStartedShard() throws IOException {_        return newStartedShard(randomBoolean())__    };creates,a,new,empyu,shard,and,starts,it,the,shard,will,be,either,a,replica,or,a,primary;protected,index,shard,new,started,shard,throws,ioexception,return,new,started,shard,random,boolean
IndexShardTestCase -> protected IndexShard newStartedShard() throws IOException;1531910483;creates a new empyu shard and starts it. The shard will be either a replica or a primary.;protected IndexShard newStartedShard() throws IOException {_        return newStartedShard(randomBoolean())__    };creates,a,new,empyu,shard,and,starts,it,the,shard,will,be,either,a,replica,or,a,primary;protected,index,shard,new,started,shard,throws,ioexception,return,new,started,shard,random,boolean
IndexShardTestCase -> protected IndexShard newStartedShard() throws IOException;1532434432;creates a new empyu shard and starts it. The shard will be either a replica or a primary.;protected IndexShard newStartedShard() throws IOException {_        return newStartedShard(randomBoolean())__    };creates,a,new,empyu,shard,and,starts,it,the,shard,will,be,either,a,replica,or,a,primary;protected,index,shard,new,started,shard,throws,ioexception,return,new,started,shard,random,boolean
IndexShardTestCase -> protected IndexShard newStartedShard() throws IOException;1533295538;creates a new empyu shard and starts it. The shard will be either a replica or a primary.;protected IndexShard newStartedShard() throws IOException {_        return newStartedShard(randomBoolean())__    };creates,a,new,empyu,shard,and,starts,it,the,shard,will,be,either,a,replica,or,a,primary;protected,index,shard,new,started,shard,throws,ioexception,return,new,started,shard,random,boolean
IndexShardTestCase -> protected IndexShard newStartedShard() throws IOException;1535723122;Creates a new empty shard and starts it. The shard will randomly be a replica or a primary.;protected IndexShard newStartedShard() throws IOException {_        return newStartedShard(randomBoolean())__    };creates,a,new,empty,shard,and,starts,it,the,shard,will,randomly,be,a,replica,or,a,primary;protected,index,shard,new,started,shard,throws,ioexception,return,new,started,shard,random,boolean
IndexShardTestCase -> protected IndexShard newStartedShard() throws IOException;1535965276;Creates a new empty shard and starts it. The shard will randomly be a replica or a primary.;protected IndexShard newStartedShard() throws IOException {_        return newStartedShard(randomBoolean())__    };creates,a,new,empty,shard,and,starts,it,the,shard,will,randomly,be,a,replica,or,a,primary;protected,index,shard,new,started,shard,throws,ioexception,return,new,started,shard,random,boolean
IndexShardTestCase -> protected IndexShard newStartedShard() throws IOException;1536611444;Creates a new empty shard and starts it. The shard will randomly be a replica or a primary.;protected IndexShard newStartedShard() throws IOException {_        return newStartedShard(randomBoolean())__    };creates,a,new,empty,shard,and,starts,it,the,shard,will,randomly,be,a,replica,or,a,primary;protected,index,shard,new,started,shard,throws,ioexception,return,new,started,shard,random,boolean
IndexShardTestCase -> protected IndexShard newStartedShard() throws IOException;1536828374;Creates a new empty shard and starts it. The shard will randomly be a replica or a primary.;protected IndexShard newStartedShard() throws IOException {_        return newStartedShard(randomBoolean())__    };creates,a,new,empty,shard,and,starts,it,the,shard,will,randomly,be,a,replica,or,a,primary;protected,index,shard,new,started,shard,throws,ioexception,return,new,started,shard,random,boolean
IndexShardTestCase -> protected IndexShard newStartedShard() throws IOException;1537371806;Creates a new empty shard and starts it. The shard will randomly be a replica or a primary.;protected IndexShard newStartedShard() throws IOException {_        return newStartedShard(randomBoolean())__    };creates,a,new,empty,shard,and,starts,it,the,shard,will,randomly,be,a,replica,or,a,primary;protected,index,shard,new,started,shard,throws,ioexception,return,new,started,shard,random,boolean
IndexShardTestCase -> protected IndexShard newStartedShard() throws IOException;1537806831;Creates a new empty shard and starts it. The shard will randomly be a replica or a primary.;protected IndexShard newStartedShard() throws IOException {_        return newStartedShard(randomBoolean())__    };creates,a,new,empty,shard,and,starts,it,the,shard,will,randomly,be,a,replica,or,a,primary;protected,index,shard,new,started,shard,throws,ioexception,return,new,started,shard,random,boolean
IndexShardTestCase -> protected IndexShard newStartedShard() throws IOException;1538067637;Creates a new empty shard and starts it. The shard will randomly be a replica or a primary.;protected IndexShard newStartedShard() throws IOException {_        return newStartedShard(randomBoolean())__    };creates,a,new,empty,shard,and,starts,it,the,shard,will,randomly,be,a,replica,or,a,primary;protected,index,shard,new,started,shard,throws,ioexception,return,new,started,shard,random,boolean
IndexShardTestCase -> protected IndexShard newStartedShard() throws IOException;1542697404;Creates a new empty shard and starts it. The shard will randomly be a replica or a primary.;protected IndexShard newStartedShard() throws IOException {_        return newStartedShard(randomBoolean())__    };creates,a,new,empty,shard,and,starts,it,the,shard,will,randomly,be,a,replica,or,a,primary;protected,index,shard,new,started,shard,throws,ioexception,return,new,started,shard,random,boolean
IndexShardTestCase -> protected IndexShard newStartedShard() throws IOException;1544783963;Creates a new empty shard and starts it. The shard will randomly be a replica or a primary.;protected IndexShard newStartedShard() throws IOException {_        return newStartedShard(randomBoolean())__    };creates,a,new,empty,shard,and,starts,it,the,shard,will,randomly,be,a,replica,or,a,primary;protected,index,shard,new,started,shard,throws,ioexception,return,new,started,shard,random,boolean
IndexShardTestCase -> protected IndexShard newStartedShard() throws IOException;1544893197;Creates a new empty shard and starts it. The shard will randomly be a replica or a primary.;protected IndexShard newStartedShard() throws IOException {_        return newStartedShard(randomBoolean())__    };creates,a,new,empty,shard,and,starts,it,the,shard,will,randomly,be,a,replica,or,a,primary;protected,index,shard,new,started,shard,throws,ioexception,return,new,started,shard,random,boolean
IndexShardTestCase -> protected IndexShard newStartedShard() throws IOException;1545678410;Creates a new empty shard and starts it. The shard will randomly be a replica or a primary.;protected IndexShard newStartedShard() throws IOException {_        return newStartedShard(randomBoolean())__    };creates,a,new,empty,shard,and,starts,it,the,shard,will,randomly,be,a,replica,or,a,primary;protected,index,shard,new,started,shard,throws,ioexception,return,new,started,shard,random,boolean
IndexShardTestCase -> protected IndexShard newStartedShard() throws IOException;1546927432;Creates a new empty shard and starts it. The shard will randomly be a replica or a primary.;protected IndexShard newStartedShard() throws IOException {_        return newStartedShard(randomBoolean())__    };creates,a,new,empty,shard,and,starts,it,the,shard,will,randomly,be,a,replica,or,a,primary;protected,index,shard,new,started,shard,throws,ioexception,return,new,started,shard,random,boolean
IndexShardTestCase -> protected IndexShard newStartedShard() throws IOException;1547315388;Creates a new empty shard and starts it. The shard will randomly be a replica or a primary.;protected IndexShard newStartedShard() throws IOException {_        return newStartedShard(randomBoolean())__    };creates,a,new,empty,shard,and,starts,it,the,shard,will,randomly,be,a,replica,or,a,primary;protected,index,shard,new,started,shard,throws,ioexception,return,new,started,shard,random,boolean
IndexShardTestCase -> protected IndexShard newStartedShard() throws IOException;1547496475;Creates a new empty shard and starts it. The shard will randomly be a replica or a primary.;protected IndexShard newStartedShard() throws IOException {_        return newStartedShard(randomBoolean())__    };creates,a,new,empty,shard,and,starts,it,the,shard,will,randomly,be,a,replica,or,a,primary;protected,index,shard,new,started,shard,throws,ioexception,return,new,started,shard,random,boolean
IndexShardTestCase -> protected IndexShard newStartedShard() throws IOException;1547496886;Creates a new empty shard and starts it. The shard will randomly be a replica or a primary.;protected IndexShard newStartedShard() throws IOException {_        return newStartedShard(randomBoolean())__    };creates,a,new,empty,shard,and,starts,it,the,shard,will,randomly,be,a,replica,or,a,primary;protected,index,shard,new,started,shard,throws,ioexception,return,new,started,shard,random,boolean
IndexShardTestCase -> protected IndexShard newStartedShard() throws IOException;1547520324;Creates a new empty shard and starts it. The shard will randomly be a replica or a primary.;protected IndexShard newStartedShard() throws IOException {_        return newStartedShard(randomBoolean())__    };creates,a,new,empty,shard,and,starts,it,the,shard,will,randomly,be,a,replica,or,a,primary;protected,index,shard,new,started,shard,throws,ioexception,return,new,started,shard,random,boolean
IndexShardTestCase -> protected IndexShard newStartedShard() throws IOException;1547552901;Creates a new empty shard and starts it. The shard will randomly be a replica or a primary.;protected IndexShard newStartedShard() throws IOException {_        return newStartedShard(randomBoolean())__    };creates,a,new,empty,shard,and,starts,it,the,shard,will,randomly,be,a,replica,or,a,primary;protected,index,shard,new,started,shard,throws,ioexception,return,new,started,shard,random,boolean
IndexShardTestCase -> protected IndexShard newStartedShard() throws IOException;1548593396;Creates a new empty shard and starts it. The shard will randomly be a replica or a primary.;protected IndexShard newStartedShard() throws IOException {_        return newStartedShard(randomBoolean())__    };creates,a,new,empty,shard,and,starts,it,the,shard,will,randomly,be,a,replica,or,a,primary;protected,index,shard,new,started,shard,throws,ioexception,return,new,started,shard,random,boolean
IndexShardTestCase -> protected IndexShard newStartedShard() throws IOException;1549294529;Creates a new empty shard and starts it. The shard will randomly be a replica or a primary.;protected IndexShard newStartedShard() throws IOException {_        return newStartedShard(randomBoolean())__    };creates,a,new,empty,shard,and,starts,it,the,shard,will,randomly,be,a,replica,or,a,primary;protected,index,shard,new,started,shard,throws,ioexception,return,new,started,shard,random,boolean
IndexShardTestCase -> protected IndexShard newStartedShard() throws IOException;1550668107;Creates a new empty shard and starts it. The shard will randomly be a replica or a primary.;protected IndexShard newStartedShard() throws IOException {_        return newStartedShard(randomBoolean())__    };creates,a,new,empty,shard,and,starts,it,the,shard,will,randomly,be,a,replica,or,a,primary;protected,index,shard,new,started,shard,throws,ioexception,return,new,started,shard,random,boolean
IndexShardTestCase -> protected void recoverShardFromSnapshot(final IndexShard shard,                                             final Snapshot snapshot,                                             final Repository repository) throws IOException;1524684173;Recover a shard from a snapshot using a given repository *;protected void recoverShardFromSnapshot(final IndexShard shard,_                                            final Snapshot snapshot,_                                            final Repository repository) throws IOException {_        final Version version = Version.CURRENT__        final ShardId shardId = shard.shardId()__        final String index = shardId.getIndexName()__        final IndexId indexId = new IndexId(shardId.getIndex().getName(), shardId.getIndex().getUUID())__        final DiscoveryNode node = getFakeDiscoNode(shard.routingEntry().currentNodeId())__        final RecoverySource.SnapshotRecoverySource recoverySource = new RecoverySource.SnapshotRecoverySource(snapshot, version, index)__        final ShardRouting shardRouting = newShardRouting(shardId, node.getId(), true, recoverySource, ShardRoutingState.INITIALIZING)___        shard.markAsRecovering("from snapshot", new RecoveryState(shardRouting, node, null))__        repository.restoreShard(shard, snapshot.getSnapshotId(), version, indexId, shard.shardId(), shard.recoveryState())__    };recover,a,shard,from,a,snapshot,using,a,given,repository;protected,void,recover,shard,from,snapshot,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,version,version,version,current,final,shard,id,shard,id,shard,shard,id,final,string,index,shard,id,get,index,name,final,index,id,index,id,new,index,id,shard,id,get,index,get,name,shard,id,get,index,get,uuid,final,discovery,node,node,get,fake,disco,node,shard,routing,entry,current,node,id,final,recovery,source,snapshot,recovery,source,recovery,source,new,recovery,source,snapshot,recovery,source,snapshot,version,index,final,shard,routing,shard,routing,new,shard,routing,shard,id,node,get,id,true,recovery,source,shard,routing,state,initializing,shard,mark,as,recovering,from,snapshot,new,recovery,state,shard,routing,node,null,repository,restore,shard,shard,snapshot,get,snapshot,id,version,index,id,shard,shard,id,shard,recovery,state
IndexShardTestCase -> protected void recoverShardFromSnapshot(final IndexShard shard,                                             final Snapshot snapshot,                                             final Repository repository) throws IOException;1525162917;Recover a shard from a snapshot using a given repository *;protected void recoverShardFromSnapshot(final IndexShard shard,_                                            final Snapshot snapshot,_                                            final Repository repository) throws IOException {_        final Version version = Version.CURRENT__        final ShardId shardId = shard.shardId()__        final String index = shardId.getIndexName()__        final IndexId indexId = new IndexId(shardId.getIndex().getName(), shardId.getIndex().getUUID())__        final DiscoveryNode node = getFakeDiscoNode(shard.routingEntry().currentNodeId())__        final RecoverySource.SnapshotRecoverySource recoverySource = new RecoverySource.SnapshotRecoverySource(snapshot, version, index)__        final ShardRouting shardRouting = newShardRouting(shardId, node.getId(), true, recoverySource, ShardRoutingState.INITIALIZING)___        shard.markAsRecovering("from snapshot", new RecoveryState(shardRouting, node, null))__        repository.restoreShard(shard, snapshot.getSnapshotId(), version, indexId, shard.shardId(), shard.recoveryState())__    };recover,a,shard,from,a,snapshot,using,a,given,repository;protected,void,recover,shard,from,snapshot,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,version,version,version,current,final,shard,id,shard,id,shard,shard,id,final,string,index,shard,id,get,index,name,final,index,id,index,id,new,index,id,shard,id,get,index,get,name,shard,id,get,index,get,uuid,final,discovery,node,node,get,fake,disco,node,shard,routing,entry,current,node,id,final,recovery,source,snapshot,recovery,source,recovery,source,new,recovery,source,snapshot,recovery,source,snapshot,version,index,final,shard,routing,shard,routing,new,shard,routing,shard,id,node,get,id,true,recovery,source,shard,routing,state,initializing,shard,mark,as,recovering,from,snapshot,new,recovery,state,shard,routing,node,null,repository,restore,shard,shard,snapshot,get,snapshot,id,version,index,id,shard,shard,id,shard,recovery,state
IndexShardTestCase -> protected void recoverShardFromSnapshot(final IndexShard shard,                                             final Snapshot snapshot,                                             final Repository repository) throws IOException;1527583663;Recover a shard from a snapshot using a given repository *;protected void recoverShardFromSnapshot(final IndexShard shard,_                                            final Snapshot snapshot,_                                            final Repository repository) throws IOException {_        final Version version = Version.CURRENT__        final ShardId shardId = shard.shardId()__        final String index = shardId.getIndexName()__        final IndexId indexId = new IndexId(shardId.getIndex().getName(), shardId.getIndex().getUUID())__        final DiscoveryNode node = getFakeDiscoNode(shard.routingEntry().currentNodeId())__        final RecoverySource.SnapshotRecoverySource recoverySource = new RecoverySource.SnapshotRecoverySource(snapshot, version, index)__        final ShardRouting shardRouting = newShardRouting(shardId, node.getId(), true, recoverySource, ShardRoutingState.INITIALIZING)___        shard.markAsRecovering("from snapshot", new RecoveryState(shardRouting, node, null))__        repository.restoreShard(shard, snapshot.getSnapshotId(), version, indexId, shard.shardId(), shard.recoveryState())__    };recover,a,shard,from,a,snapshot,using,a,given,repository;protected,void,recover,shard,from,snapshot,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,version,version,version,current,final,shard,id,shard,id,shard,shard,id,final,string,index,shard,id,get,index,name,final,index,id,index,id,new,index,id,shard,id,get,index,get,name,shard,id,get,index,get,uuid,final,discovery,node,node,get,fake,disco,node,shard,routing,entry,current,node,id,final,recovery,source,snapshot,recovery,source,recovery,source,new,recovery,source,snapshot,recovery,source,snapshot,version,index,final,shard,routing,shard,routing,new,shard,routing,shard,id,node,get,id,true,recovery,source,shard,routing,state,initializing,shard,mark,as,recovering,from,snapshot,new,recovery,state,shard,routing,node,null,repository,restore,shard,shard,snapshot,get,snapshot,id,version,index,id,shard,shard,id,shard,recovery,state
IndexShardTestCase -> protected void recoverShardFromSnapshot(final IndexShard shard,                                             final Snapshot snapshot,                                             final Repository repository) throws IOException;1528706846;Recover a shard from a snapshot using a given repository *;protected void recoverShardFromSnapshot(final IndexShard shard,_                                            final Snapshot snapshot,_                                            final Repository repository) throws IOException {_        final Version version = Version.CURRENT__        final ShardId shardId = shard.shardId()__        final String index = shardId.getIndexName()__        final IndexId indexId = new IndexId(shardId.getIndex().getName(), shardId.getIndex().getUUID())__        final DiscoveryNode node = getFakeDiscoNode(shard.routingEntry().currentNodeId())__        final RecoverySource.SnapshotRecoverySource recoverySource = new RecoverySource.SnapshotRecoverySource(snapshot, version, index)__        final ShardRouting shardRouting = newShardRouting(shardId, node.getId(), true, recoverySource, ShardRoutingState.INITIALIZING)___        shard.markAsRecovering("from snapshot", new RecoveryState(shardRouting, node, null))__        repository.restoreShard(shard, snapshot.getSnapshotId(), version, indexId, shard.shardId(), shard.recoveryState())__    };recover,a,shard,from,a,snapshot,using,a,given,repository;protected,void,recover,shard,from,snapshot,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,version,version,version,current,final,shard,id,shard,id,shard,shard,id,final,string,index,shard,id,get,index,name,final,index,id,index,id,new,index,id,shard,id,get,index,get,name,shard,id,get,index,get,uuid,final,discovery,node,node,get,fake,disco,node,shard,routing,entry,current,node,id,final,recovery,source,snapshot,recovery,source,recovery,source,new,recovery,source,snapshot,recovery,source,snapshot,version,index,final,shard,routing,shard,routing,new,shard,routing,shard,id,node,get,id,true,recovery,source,shard,routing,state,initializing,shard,mark,as,recovering,from,snapshot,new,recovery,state,shard,routing,node,null,repository,restore,shard,shard,snapshot,get,snapshot,id,version,index,id,shard,shard,id,shard,recovery,state
IndexShardTestCase -> protected void recoverShardFromSnapshot(final IndexShard shard,                                             final Snapshot snapshot,                                             final Repository repository) throws IOException;1531179852;Recover a shard from a snapshot using a given repository *;protected void recoverShardFromSnapshot(final IndexShard shard,_                                            final Snapshot snapshot,_                                            final Repository repository) throws IOException {_        final Version version = Version.CURRENT__        final ShardId shardId = shard.shardId()__        final String index = shardId.getIndexName()__        final IndexId indexId = new IndexId(shardId.getIndex().getName(), shardId.getIndex().getUUID())__        final DiscoveryNode node = getFakeDiscoNode(shard.routingEntry().currentNodeId())__        final RecoverySource.SnapshotRecoverySource recoverySource = new RecoverySource.SnapshotRecoverySource(snapshot, version, index)__        final ShardRouting shardRouting = newShardRouting(shardId, node.getId(), true, recoverySource, ShardRoutingState.INITIALIZING)___        shard.markAsRecovering("from snapshot", new RecoveryState(shardRouting, node, null))__        repository.restoreShard(shard, snapshot.getSnapshotId(), version, indexId, shard.shardId(), shard.recoveryState())__    };recover,a,shard,from,a,snapshot,using,a,given,repository;protected,void,recover,shard,from,snapshot,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,version,version,version,current,final,shard,id,shard,id,shard,shard,id,final,string,index,shard,id,get,index,name,final,index,id,index,id,new,index,id,shard,id,get,index,get,name,shard,id,get,index,get,uuid,final,discovery,node,node,get,fake,disco,node,shard,routing,entry,current,node,id,final,recovery,source,snapshot,recovery,source,recovery,source,new,recovery,source,snapshot,recovery,source,snapshot,version,index,final,shard,routing,shard,routing,new,shard,routing,shard,id,node,get,id,true,recovery,source,shard,routing,state,initializing,shard,mark,as,recovering,from,snapshot,new,recovery,state,shard,routing,node,null,repository,restore,shard,shard,snapshot,get,snapshot,id,version,index,id,shard,shard,id,shard,recovery,state
IndexShardTestCase -> protected void recoverShardFromSnapshot(final IndexShard shard,                                             final Snapshot snapshot,                                             final Repository repository) throws IOException;1531910483;Recover a shard from a snapshot using a given repository *;protected void recoverShardFromSnapshot(final IndexShard shard,_                                            final Snapshot snapshot,_                                            final Repository repository) throws IOException {_        final Version version = Version.CURRENT__        final ShardId shardId = shard.shardId()__        final String index = shardId.getIndexName()__        final IndexId indexId = new IndexId(shardId.getIndex().getName(), shardId.getIndex().getUUID())__        final DiscoveryNode node = getFakeDiscoNode(shard.routingEntry().currentNodeId())__        final RecoverySource.SnapshotRecoverySource recoverySource = new RecoverySource.SnapshotRecoverySource(snapshot, version, index)__        final ShardRouting shardRouting = newShardRouting(shardId, node.getId(), true, recoverySource, ShardRoutingState.INITIALIZING)___        shard.markAsRecovering("from snapshot", new RecoveryState(shardRouting, node, null))__        repository.restoreShard(shard, snapshot.getSnapshotId(), version, indexId, shard.shardId(), shard.recoveryState())__    };recover,a,shard,from,a,snapshot,using,a,given,repository;protected,void,recover,shard,from,snapshot,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,version,version,version,current,final,shard,id,shard,id,shard,shard,id,final,string,index,shard,id,get,index,name,final,index,id,index,id,new,index,id,shard,id,get,index,get,name,shard,id,get,index,get,uuid,final,discovery,node,node,get,fake,disco,node,shard,routing,entry,current,node,id,final,recovery,source,snapshot,recovery,source,recovery,source,new,recovery,source,snapshot,recovery,source,snapshot,version,index,final,shard,routing,shard,routing,new,shard,routing,shard,id,node,get,id,true,recovery,source,shard,routing,state,initializing,shard,mark,as,recovering,from,snapshot,new,recovery,state,shard,routing,node,null,repository,restore,shard,shard,snapshot,get,snapshot,id,version,index,id,shard,shard,id,shard,recovery,state
IndexShardTestCase -> protected void recoverShardFromSnapshot(final IndexShard shard,                                             final Snapshot snapshot,                                             final Repository repository) throws IOException;1532434432;Recover a shard from a snapshot using a given repository *;protected void recoverShardFromSnapshot(final IndexShard shard,_                                            final Snapshot snapshot,_                                            final Repository repository) throws IOException {_        final Version version = Version.CURRENT__        final ShardId shardId = shard.shardId()__        final String index = shardId.getIndexName()__        final IndexId indexId = new IndexId(shardId.getIndex().getName(), shardId.getIndex().getUUID())__        final DiscoveryNode node = getFakeDiscoNode(shard.routingEntry().currentNodeId())__        final RecoverySource.SnapshotRecoverySource recoverySource = new RecoverySource.SnapshotRecoverySource(snapshot, version, index)__        final ShardRouting shardRouting = newShardRouting(shardId, node.getId(), true, recoverySource, ShardRoutingState.INITIALIZING)___        shard.markAsRecovering("from snapshot", new RecoveryState(shardRouting, node, null))__        repository.restoreShard(shard, snapshot.getSnapshotId(), version, indexId, shard.shardId(), shard.recoveryState())__    };recover,a,shard,from,a,snapshot,using,a,given,repository;protected,void,recover,shard,from,snapshot,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,version,version,version,current,final,shard,id,shard,id,shard,shard,id,final,string,index,shard,id,get,index,name,final,index,id,index,id,new,index,id,shard,id,get,index,get,name,shard,id,get,index,get,uuid,final,discovery,node,node,get,fake,disco,node,shard,routing,entry,current,node,id,final,recovery,source,snapshot,recovery,source,recovery,source,new,recovery,source,snapshot,recovery,source,snapshot,version,index,final,shard,routing,shard,routing,new,shard,routing,shard,id,node,get,id,true,recovery,source,shard,routing,state,initializing,shard,mark,as,recovering,from,snapshot,new,recovery,state,shard,routing,node,null,repository,restore,shard,shard,snapshot,get,snapshot,id,version,index,id,shard,shard,id,shard,recovery,state
IndexShardTestCase -> protected void recoverShardFromSnapshot(final IndexShard shard,                                             final Snapshot snapshot,                                             final Repository repository) throws IOException;1533295538;Recover a shard from a snapshot using a given repository *;protected void recoverShardFromSnapshot(final IndexShard shard,_                                            final Snapshot snapshot,_                                            final Repository repository) throws IOException {_        final Version version = Version.CURRENT__        final ShardId shardId = shard.shardId()__        final String index = shardId.getIndexName()__        final IndexId indexId = new IndexId(shardId.getIndex().getName(), shardId.getIndex().getUUID())__        final DiscoveryNode node = getFakeDiscoNode(shard.routingEntry().currentNodeId())__        final RecoverySource.SnapshotRecoverySource recoverySource = new RecoverySource.SnapshotRecoverySource(snapshot, version, index)__        final ShardRouting shardRouting = newShardRouting(shardId, node.getId(), true, recoverySource, ShardRoutingState.INITIALIZING)___        shard.markAsRecovering("from snapshot", new RecoveryState(shardRouting, node, null))__        repository.restoreShard(shard, snapshot.getSnapshotId(), version, indexId, shard.shardId(), shard.recoveryState())__    };recover,a,shard,from,a,snapshot,using,a,given,repository;protected,void,recover,shard,from,snapshot,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,version,version,version,current,final,shard,id,shard,id,shard,shard,id,final,string,index,shard,id,get,index,name,final,index,id,index,id,new,index,id,shard,id,get,index,get,name,shard,id,get,index,get,uuid,final,discovery,node,node,get,fake,disco,node,shard,routing,entry,current,node,id,final,recovery,source,snapshot,recovery,source,recovery,source,new,recovery,source,snapshot,recovery,source,snapshot,version,index,final,shard,routing,shard,routing,new,shard,routing,shard,id,node,get,id,true,recovery,source,shard,routing,state,initializing,shard,mark,as,recovering,from,snapshot,new,recovery,state,shard,routing,node,null,repository,restore,shard,shard,snapshot,get,snapshot,id,version,index,id,shard,shard,id,shard,recovery,state
IndexShardTestCase -> protected void recoverShardFromSnapshot(final IndexShard shard,                                             final Snapshot snapshot,                                             final Repository repository) throws IOException;1535723122;Recover a shard from a snapshot using a given repository *;protected void recoverShardFromSnapshot(final IndexShard shard,_                                            final Snapshot snapshot,_                                            final Repository repository) throws IOException {_        final Version version = Version.CURRENT__        final ShardId shardId = shard.shardId()__        final String index = shardId.getIndexName()__        final IndexId indexId = new IndexId(shardId.getIndex().getName(), shardId.getIndex().getUUID())__        final DiscoveryNode node = getFakeDiscoNode(shard.routingEntry().currentNodeId())__        final RecoverySource.SnapshotRecoverySource recoverySource = new RecoverySource.SnapshotRecoverySource(snapshot, version, index)__        final ShardRouting shardRouting = newShardRouting(shardId, node.getId(), true, recoverySource, ShardRoutingState.INITIALIZING)___        shard.markAsRecovering("from snapshot", new RecoveryState(shardRouting, node, null))__        repository.restoreShard(shard, snapshot.getSnapshotId(), version, indexId, shard.shardId(), shard.recoveryState())__    };recover,a,shard,from,a,snapshot,using,a,given,repository;protected,void,recover,shard,from,snapshot,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,version,version,version,current,final,shard,id,shard,id,shard,shard,id,final,string,index,shard,id,get,index,name,final,index,id,index,id,new,index,id,shard,id,get,index,get,name,shard,id,get,index,get,uuid,final,discovery,node,node,get,fake,disco,node,shard,routing,entry,current,node,id,final,recovery,source,snapshot,recovery,source,recovery,source,new,recovery,source,snapshot,recovery,source,snapshot,version,index,final,shard,routing,shard,routing,new,shard,routing,shard,id,node,get,id,true,recovery,source,shard,routing,state,initializing,shard,mark,as,recovering,from,snapshot,new,recovery,state,shard,routing,node,null,repository,restore,shard,shard,snapshot,get,snapshot,id,version,index,id,shard,shard,id,shard,recovery,state
IndexShardTestCase -> protected void recoverShardFromSnapshot(final IndexShard shard,                                             final Snapshot snapshot,                                             final Repository repository) throws IOException;1535965276;Recover a shard from a snapshot using a given repository *;protected void recoverShardFromSnapshot(final IndexShard shard,_                                            final Snapshot snapshot,_                                            final Repository repository) throws IOException {_        final Version version = Version.CURRENT__        final ShardId shardId = shard.shardId()__        final String index = shardId.getIndexName()__        final IndexId indexId = new IndexId(shardId.getIndex().getName(), shardId.getIndex().getUUID())__        final DiscoveryNode node = getFakeDiscoNode(shard.routingEntry().currentNodeId())__        final RecoverySource.SnapshotRecoverySource recoverySource = new RecoverySource.SnapshotRecoverySource(snapshot, version, index)__        final ShardRouting shardRouting = newShardRouting(shardId, node.getId(), true, recoverySource, ShardRoutingState.INITIALIZING)___        shard.markAsRecovering("from snapshot", new RecoveryState(shardRouting, node, null))__        repository.restoreShard(shard, snapshot.getSnapshotId(), version, indexId, shard.shardId(), shard.recoveryState())__    };recover,a,shard,from,a,snapshot,using,a,given,repository;protected,void,recover,shard,from,snapshot,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,version,version,version,current,final,shard,id,shard,id,shard,shard,id,final,string,index,shard,id,get,index,name,final,index,id,index,id,new,index,id,shard,id,get,index,get,name,shard,id,get,index,get,uuid,final,discovery,node,node,get,fake,disco,node,shard,routing,entry,current,node,id,final,recovery,source,snapshot,recovery,source,recovery,source,new,recovery,source,snapshot,recovery,source,snapshot,version,index,final,shard,routing,shard,routing,new,shard,routing,shard,id,node,get,id,true,recovery,source,shard,routing,state,initializing,shard,mark,as,recovering,from,snapshot,new,recovery,state,shard,routing,node,null,repository,restore,shard,shard,snapshot,get,snapshot,id,version,index,id,shard,shard,id,shard,recovery,state
IndexShardTestCase -> protected void recoverShardFromSnapshot(final IndexShard shard,                                             final Snapshot snapshot,                                             final Repository repository) throws IOException;1536611444;Recover a shard from a snapshot using a given repository *;protected void recoverShardFromSnapshot(final IndexShard shard,_                                            final Snapshot snapshot,_                                            final Repository repository) throws IOException {_        final Version version = Version.CURRENT__        final ShardId shardId = shard.shardId()__        final String index = shardId.getIndexName()__        final IndexId indexId = new IndexId(shardId.getIndex().getName(), shardId.getIndex().getUUID())__        final DiscoveryNode node = getFakeDiscoNode(shard.routingEntry().currentNodeId())__        final RecoverySource.SnapshotRecoverySource recoverySource = new RecoverySource.SnapshotRecoverySource(snapshot, version, index)__        final ShardRouting shardRouting = newShardRouting(shardId, node.getId(), true, ShardRoutingState.INITIALIZING, recoverySource)___        shard.markAsRecovering("from snapshot", new RecoveryState(shardRouting, node, null))__        repository.restoreShard(shard, snapshot.getSnapshotId(), version, indexId, shard.shardId(), shard.recoveryState())__    };recover,a,shard,from,a,snapshot,using,a,given,repository;protected,void,recover,shard,from,snapshot,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,version,version,version,current,final,shard,id,shard,id,shard,shard,id,final,string,index,shard,id,get,index,name,final,index,id,index,id,new,index,id,shard,id,get,index,get,name,shard,id,get,index,get,uuid,final,discovery,node,node,get,fake,disco,node,shard,routing,entry,current,node,id,final,recovery,source,snapshot,recovery,source,recovery,source,new,recovery,source,snapshot,recovery,source,snapshot,version,index,final,shard,routing,shard,routing,new,shard,routing,shard,id,node,get,id,true,shard,routing,state,initializing,recovery,source,shard,mark,as,recovering,from,snapshot,new,recovery,state,shard,routing,node,null,repository,restore,shard,shard,snapshot,get,snapshot,id,version,index,id,shard,shard,id,shard,recovery,state
IndexShardTestCase -> protected void recoverShardFromSnapshot(final IndexShard shard,                                             final Snapshot snapshot,                                             final Repository repository) throws IOException;1536828374;Recover a shard from a snapshot using a given repository *;protected void recoverShardFromSnapshot(final IndexShard shard,_                                            final Snapshot snapshot,_                                            final Repository repository) throws IOException {_        final Version version = Version.CURRENT__        final ShardId shardId = shard.shardId()__        final String index = shardId.getIndexName()__        final IndexId indexId = new IndexId(shardId.getIndex().getName(), shardId.getIndex().getUUID())__        final DiscoveryNode node = getFakeDiscoNode(shard.routingEntry().currentNodeId())__        final RecoverySource.SnapshotRecoverySource recoverySource = new RecoverySource.SnapshotRecoverySource(snapshot, version, index)__        final ShardRouting shardRouting = newShardRouting(shardId, node.getId(), true, ShardRoutingState.INITIALIZING, recoverySource)___        shard.markAsRecovering("from snapshot", new RecoveryState(shardRouting, node, null))__        repository.restoreShard(shard, snapshot.getSnapshotId(), version, indexId, shard.shardId(), shard.recoveryState())__    };recover,a,shard,from,a,snapshot,using,a,given,repository;protected,void,recover,shard,from,snapshot,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,version,version,version,current,final,shard,id,shard,id,shard,shard,id,final,string,index,shard,id,get,index,name,final,index,id,index,id,new,index,id,shard,id,get,index,get,name,shard,id,get,index,get,uuid,final,discovery,node,node,get,fake,disco,node,shard,routing,entry,current,node,id,final,recovery,source,snapshot,recovery,source,recovery,source,new,recovery,source,snapshot,recovery,source,snapshot,version,index,final,shard,routing,shard,routing,new,shard,routing,shard,id,node,get,id,true,shard,routing,state,initializing,recovery,source,shard,mark,as,recovering,from,snapshot,new,recovery,state,shard,routing,node,null,repository,restore,shard,shard,snapshot,get,snapshot,id,version,index,id,shard,shard,id,shard,recovery,state
IndexShardTestCase -> protected void recoverShardFromSnapshot(final IndexShard shard,                                             final Snapshot snapshot,                                             final Repository repository) throws IOException;1537371806;Recover a shard from a snapshot using a given repository *;protected void recoverShardFromSnapshot(final IndexShard shard,_                                            final Snapshot snapshot,_                                            final Repository repository) throws IOException {_        final Version version = Version.CURRENT__        final ShardId shardId = shard.shardId()__        final String index = shardId.getIndexName()__        final IndexId indexId = new IndexId(shardId.getIndex().getName(), shardId.getIndex().getUUID())__        final DiscoveryNode node = getFakeDiscoNode(shard.routingEntry().currentNodeId())__        final RecoverySource.SnapshotRecoverySource recoverySource = new RecoverySource.SnapshotRecoverySource(snapshot, version, index)__        final ShardRouting shardRouting = newShardRouting(shardId, node.getId(), true, ShardRoutingState.INITIALIZING, recoverySource)___        shard.markAsRecovering("from snapshot", new RecoveryState(shardRouting, node, null))__        repository.restoreShard(shard, snapshot.getSnapshotId(), version, indexId, shard.shardId(), shard.recoveryState())__    };recover,a,shard,from,a,snapshot,using,a,given,repository;protected,void,recover,shard,from,snapshot,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,version,version,version,current,final,shard,id,shard,id,shard,shard,id,final,string,index,shard,id,get,index,name,final,index,id,index,id,new,index,id,shard,id,get,index,get,name,shard,id,get,index,get,uuid,final,discovery,node,node,get,fake,disco,node,shard,routing,entry,current,node,id,final,recovery,source,snapshot,recovery,source,recovery,source,new,recovery,source,snapshot,recovery,source,snapshot,version,index,final,shard,routing,shard,routing,new,shard,routing,shard,id,node,get,id,true,shard,routing,state,initializing,recovery,source,shard,mark,as,recovering,from,snapshot,new,recovery,state,shard,routing,node,null,repository,restore,shard,shard,snapshot,get,snapshot,id,version,index,id,shard,shard,id,shard,recovery,state
IndexShardTestCase -> protected void recoverShardFromSnapshot(final IndexShard shard,                                             final Snapshot snapshot,                                             final Repository repository) throws IOException;1537806831;Recover a shard from a snapshot using a given repository *;protected void recoverShardFromSnapshot(final IndexShard shard,_                                            final Snapshot snapshot,_                                            final Repository repository) throws IOException {_        final Version version = Version.CURRENT__        final ShardId shardId = shard.shardId()__        final String index = shardId.getIndexName()__        final IndexId indexId = new IndexId(shardId.getIndex().getName(), shardId.getIndex().getUUID())__        final DiscoveryNode node = getFakeDiscoNode(shard.routingEntry().currentNodeId())__        final RecoverySource.SnapshotRecoverySource recoverySource = new RecoverySource.SnapshotRecoverySource(snapshot, version, index)__        final ShardRouting shardRouting = newShardRouting(shardId, node.getId(), true, ShardRoutingState.INITIALIZING, recoverySource)___        shard.markAsRecovering("from snapshot", new RecoveryState(shardRouting, node, null))__        repository.restoreShard(shard, snapshot.getSnapshotId(), version, indexId, shard.shardId(), shard.recoveryState())__    };recover,a,shard,from,a,snapshot,using,a,given,repository;protected,void,recover,shard,from,snapshot,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,version,version,version,current,final,shard,id,shard,id,shard,shard,id,final,string,index,shard,id,get,index,name,final,index,id,index,id,new,index,id,shard,id,get,index,get,name,shard,id,get,index,get,uuid,final,discovery,node,node,get,fake,disco,node,shard,routing,entry,current,node,id,final,recovery,source,snapshot,recovery,source,recovery,source,new,recovery,source,snapshot,recovery,source,snapshot,version,index,final,shard,routing,shard,routing,new,shard,routing,shard,id,node,get,id,true,shard,routing,state,initializing,recovery,source,shard,mark,as,recovering,from,snapshot,new,recovery,state,shard,routing,node,null,repository,restore,shard,shard,snapshot,get,snapshot,id,version,index,id,shard,shard,id,shard,recovery,state
IndexShardTestCase -> protected void recoverShardFromSnapshot(final IndexShard shard,                                             final Snapshot snapshot,                                             final Repository repository) throws IOException;1538067637;Recover a shard from a snapshot using a given repository *;protected void recoverShardFromSnapshot(final IndexShard shard,_                                            final Snapshot snapshot,_                                            final Repository repository) throws IOException {_        final Version version = Version.CURRENT__        final ShardId shardId = shard.shardId()__        final String index = shardId.getIndexName()__        final IndexId indexId = new IndexId(shardId.getIndex().getName(), shardId.getIndex().getUUID())__        final DiscoveryNode node = getFakeDiscoNode(shard.routingEntry().currentNodeId())__        final RecoverySource.SnapshotRecoverySource recoverySource = new RecoverySource.SnapshotRecoverySource(snapshot, version, index)__        final ShardRouting shardRouting = newShardRouting(shardId, node.getId(), true, ShardRoutingState.INITIALIZING, recoverySource)___        shard.markAsRecovering("from snapshot", new RecoveryState(shardRouting, node, null))__        repository.restoreShard(shard, snapshot.getSnapshotId(), version, indexId, shard.shardId(), shard.recoveryState())__    };recover,a,shard,from,a,snapshot,using,a,given,repository;protected,void,recover,shard,from,snapshot,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,version,version,version,current,final,shard,id,shard,id,shard,shard,id,final,string,index,shard,id,get,index,name,final,index,id,index,id,new,index,id,shard,id,get,index,get,name,shard,id,get,index,get,uuid,final,discovery,node,node,get,fake,disco,node,shard,routing,entry,current,node,id,final,recovery,source,snapshot,recovery,source,recovery,source,new,recovery,source,snapshot,recovery,source,snapshot,version,index,final,shard,routing,shard,routing,new,shard,routing,shard,id,node,get,id,true,shard,routing,state,initializing,recovery,source,shard,mark,as,recovering,from,snapshot,new,recovery,state,shard,routing,node,null,repository,restore,shard,shard,snapshot,get,snapshot,id,version,index,id,shard,shard,id,shard,recovery,state
IndexShardTestCase -> protected void recoverShardFromSnapshot(final IndexShard shard,                                             final Snapshot snapshot,                                             final Repository repository) throws IOException;1542697404;Recover a shard from a snapshot using a given repository *;protected void recoverShardFromSnapshot(final IndexShard shard,_                                            final Snapshot snapshot,_                                            final Repository repository) throws IOException {_        final Version version = Version.CURRENT__        final ShardId shardId = shard.shardId()__        final String index = shardId.getIndexName()__        final IndexId indexId = new IndexId(shardId.getIndex().getName(), shardId.getIndex().getUUID())__        final DiscoveryNode node = getFakeDiscoNode(shard.routingEntry().currentNodeId())__        final RecoverySource.SnapshotRecoverySource recoverySource = new RecoverySource.SnapshotRecoverySource(snapshot, version, index)__        final ShardRouting shardRouting = newShardRouting(shardId, node.getId(), true, ShardRoutingState.INITIALIZING, recoverySource)___        shard.markAsRecovering("from snapshot", new RecoveryState(shardRouting, node, null))__        repository.restoreShard(shard, snapshot.getSnapshotId(), version, indexId, shard.shardId(), shard.recoveryState())__    };recover,a,shard,from,a,snapshot,using,a,given,repository;protected,void,recover,shard,from,snapshot,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,version,version,version,current,final,shard,id,shard,id,shard,shard,id,final,string,index,shard,id,get,index,name,final,index,id,index,id,new,index,id,shard,id,get,index,get,name,shard,id,get,index,get,uuid,final,discovery,node,node,get,fake,disco,node,shard,routing,entry,current,node,id,final,recovery,source,snapshot,recovery,source,recovery,source,new,recovery,source,snapshot,recovery,source,snapshot,version,index,final,shard,routing,shard,routing,new,shard,routing,shard,id,node,get,id,true,shard,routing,state,initializing,recovery,source,shard,mark,as,recovering,from,snapshot,new,recovery,state,shard,routing,node,null,repository,restore,shard,shard,snapshot,get,snapshot,id,version,index,id,shard,shard,id,shard,recovery,state
IndexShardTestCase -> protected void recoverShardFromSnapshot(final IndexShard shard,                                             final Snapshot snapshot,                                             final Repository repository) throws IOException;1544783963;Recover a shard from a snapshot using a given repository *;protected void recoverShardFromSnapshot(final IndexShard shard,_                                            final Snapshot snapshot,_                                            final Repository repository) throws IOException {_        final Version version = Version.CURRENT__        final ShardId shardId = shard.shardId()__        final String index = shardId.getIndexName()__        final IndexId indexId = new IndexId(shardId.getIndex().getName(), shardId.getIndex().getUUID())__        final DiscoveryNode node = getFakeDiscoNode(shard.routingEntry().currentNodeId())__        final RecoverySource.SnapshotRecoverySource recoverySource =_            new RecoverySource.SnapshotRecoverySource(UUIDs.randomBase64UUID(), snapshot, version, index)__        final ShardRouting shardRouting = newShardRouting(shardId, node.getId(), true, ShardRoutingState.INITIALIZING, recoverySource)___        shard.markAsRecovering("from snapshot", new RecoveryState(shardRouting, node, null))__        repository.restoreShard(shard, snapshot.getSnapshotId(), version, indexId, shard.shardId(), shard.recoveryState())__    };recover,a,shard,from,a,snapshot,using,a,given,repository;protected,void,recover,shard,from,snapshot,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,version,version,version,current,final,shard,id,shard,id,shard,shard,id,final,string,index,shard,id,get,index,name,final,index,id,index,id,new,index,id,shard,id,get,index,get,name,shard,id,get,index,get,uuid,final,discovery,node,node,get,fake,disco,node,shard,routing,entry,current,node,id,final,recovery,source,snapshot,recovery,source,recovery,source,new,recovery,source,snapshot,recovery,source,uuids,random,base64uuid,snapshot,version,index,final,shard,routing,shard,routing,new,shard,routing,shard,id,node,get,id,true,shard,routing,state,initializing,recovery,source,shard,mark,as,recovering,from,snapshot,new,recovery,state,shard,routing,node,null,repository,restore,shard,shard,snapshot,get,snapshot,id,version,index,id,shard,shard,id,shard,recovery,state
IndexShardTestCase -> protected void recoverShardFromSnapshot(final IndexShard shard,                                             final Snapshot snapshot,                                             final Repository repository) throws IOException;1544893197;Recover a shard from a snapshot using a given repository *;protected void recoverShardFromSnapshot(final IndexShard shard,_                                            final Snapshot snapshot,_                                            final Repository repository) throws IOException {_        final Version version = Version.CURRENT__        final ShardId shardId = shard.shardId()__        final String index = shardId.getIndexName()__        final IndexId indexId = new IndexId(shardId.getIndex().getName(), shardId.getIndex().getUUID())__        final DiscoveryNode node = getFakeDiscoNode(shard.routingEntry().currentNodeId())__        final RecoverySource.SnapshotRecoverySource recoverySource =_            new RecoverySource.SnapshotRecoverySource(UUIDs.randomBase64UUID(), snapshot, version, index)__        final ShardRouting shardRouting = newShardRouting(shardId, node.getId(), true, ShardRoutingState.INITIALIZING, recoverySource)___        shard.markAsRecovering("from snapshot", new RecoveryState(shardRouting, node, null))__        repository.restoreShard(shard, snapshot.getSnapshotId(), version, indexId, shard.shardId(), shard.recoveryState())__    };recover,a,shard,from,a,snapshot,using,a,given,repository;protected,void,recover,shard,from,snapshot,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,version,version,version,current,final,shard,id,shard,id,shard,shard,id,final,string,index,shard,id,get,index,name,final,index,id,index,id,new,index,id,shard,id,get,index,get,name,shard,id,get,index,get,uuid,final,discovery,node,node,get,fake,disco,node,shard,routing,entry,current,node,id,final,recovery,source,snapshot,recovery,source,recovery,source,new,recovery,source,snapshot,recovery,source,uuids,random,base64uuid,snapshot,version,index,final,shard,routing,shard,routing,new,shard,routing,shard,id,node,get,id,true,shard,routing,state,initializing,recovery,source,shard,mark,as,recovering,from,snapshot,new,recovery,state,shard,routing,node,null,repository,restore,shard,shard,snapshot,get,snapshot,id,version,index,id,shard,shard,id,shard,recovery,state
IndexShardTestCase -> protected void recoverShardFromSnapshot(final IndexShard shard,                                             final Snapshot snapshot,                                             final Repository repository) throws IOException;1545678410;Recover a shard from a snapshot using a given repository *;protected void recoverShardFromSnapshot(final IndexShard shard,_                                            final Snapshot snapshot,_                                            final Repository repository) throws IOException {_        final Version version = Version.CURRENT__        final ShardId shardId = shard.shardId()__        final String index = shardId.getIndexName()__        final IndexId indexId = new IndexId(shardId.getIndex().getName(), shardId.getIndex().getUUID())__        final DiscoveryNode node = getFakeDiscoNode(shard.routingEntry().currentNodeId())__        final RecoverySource.SnapshotRecoverySource recoverySource =_            new RecoverySource.SnapshotRecoverySource(UUIDs.randomBase64UUID(), snapshot, version, index)__        final ShardRouting shardRouting = newShardRouting(shardId, node.getId(), true, ShardRoutingState.INITIALIZING, recoverySource)___        shard.markAsRecovering("from snapshot", new RecoveryState(shardRouting, node, null))__        repository.restoreShard(shard, snapshot.getSnapshotId(), version, indexId, shard.shardId(), shard.recoveryState())__    };recover,a,shard,from,a,snapshot,using,a,given,repository;protected,void,recover,shard,from,snapshot,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,version,version,version,current,final,shard,id,shard,id,shard,shard,id,final,string,index,shard,id,get,index,name,final,index,id,index,id,new,index,id,shard,id,get,index,get,name,shard,id,get,index,get,uuid,final,discovery,node,node,get,fake,disco,node,shard,routing,entry,current,node,id,final,recovery,source,snapshot,recovery,source,recovery,source,new,recovery,source,snapshot,recovery,source,uuids,random,base64uuid,snapshot,version,index,final,shard,routing,shard,routing,new,shard,routing,shard,id,node,get,id,true,shard,routing,state,initializing,recovery,source,shard,mark,as,recovering,from,snapshot,new,recovery,state,shard,routing,node,null,repository,restore,shard,shard,snapshot,get,snapshot,id,version,index,id,shard,shard,id,shard,recovery,state
IndexShardTestCase -> protected void recoverShardFromSnapshot(final IndexShard shard,                                             final Snapshot snapshot,                                             final Repository repository) throws IOException;1546927432;Recover a shard from a snapshot using a given repository *;protected void recoverShardFromSnapshot(final IndexShard shard,_                                            final Snapshot snapshot,_                                            final Repository repository) throws IOException {_        final Version version = Version.CURRENT__        final ShardId shardId = shard.shardId()__        final String index = shardId.getIndexName()__        final IndexId indexId = new IndexId(shardId.getIndex().getName(), shardId.getIndex().getUUID())__        final DiscoveryNode node = getFakeDiscoNode(shard.routingEntry().currentNodeId())__        final RecoverySource.SnapshotRecoverySource recoverySource =_            new RecoverySource.SnapshotRecoverySource(UUIDs.randomBase64UUID(), snapshot, version, index)__        final ShardRouting shardRouting = newShardRouting(shardId, node.getId(), true, ShardRoutingState.INITIALIZING, recoverySource)___        shard.markAsRecovering("from snapshot", new RecoveryState(shardRouting, node, null))__        repository.restoreShard(shard, snapshot.getSnapshotId(), version, indexId, shard.shardId(), shard.recoveryState())__    };recover,a,shard,from,a,snapshot,using,a,given,repository;protected,void,recover,shard,from,snapshot,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,version,version,version,current,final,shard,id,shard,id,shard,shard,id,final,string,index,shard,id,get,index,name,final,index,id,index,id,new,index,id,shard,id,get,index,get,name,shard,id,get,index,get,uuid,final,discovery,node,node,get,fake,disco,node,shard,routing,entry,current,node,id,final,recovery,source,snapshot,recovery,source,recovery,source,new,recovery,source,snapshot,recovery,source,uuids,random,base64uuid,snapshot,version,index,final,shard,routing,shard,routing,new,shard,routing,shard,id,node,get,id,true,shard,routing,state,initializing,recovery,source,shard,mark,as,recovering,from,snapshot,new,recovery,state,shard,routing,node,null,repository,restore,shard,shard,snapshot,get,snapshot,id,version,index,id,shard,shard,id,shard,recovery,state
IndexShardTestCase -> protected void recoverShardFromSnapshot(final IndexShard shard,                                             final Snapshot snapshot,                                             final Repository repository) throws IOException;1547315388;Recover a shard from a snapshot using a given repository *;protected void recoverShardFromSnapshot(final IndexShard shard,_                                            final Snapshot snapshot,_                                            final Repository repository) throws IOException {_        final Version version = Version.CURRENT__        final ShardId shardId = shard.shardId()__        final String index = shardId.getIndexName()__        final IndexId indexId = new IndexId(shardId.getIndex().getName(), shardId.getIndex().getUUID())__        final DiscoveryNode node = getFakeDiscoNode(shard.routingEntry().currentNodeId())__        final RecoverySource.SnapshotRecoverySource recoverySource =_            new RecoverySource.SnapshotRecoverySource(UUIDs.randomBase64UUID(), snapshot, version, index)__        final ShardRouting shardRouting = newShardRouting(shardId, node.getId(), true, ShardRoutingState.INITIALIZING, recoverySource)___        shard.markAsRecovering("from snapshot", new RecoveryState(shardRouting, node, null))__        repository.restoreShard(shard, snapshot.getSnapshotId(), version, indexId, shard.shardId(), shard.recoveryState())__    };recover,a,shard,from,a,snapshot,using,a,given,repository;protected,void,recover,shard,from,snapshot,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,version,version,version,current,final,shard,id,shard,id,shard,shard,id,final,string,index,shard,id,get,index,name,final,index,id,index,id,new,index,id,shard,id,get,index,get,name,shard,id,get,index,get,uuid,final,discovery,node,node,get,fake,disco,node,shard,routing,entry,current,node,id,final,recovery,source,snapshot,recovery,source,recovery,source,new,recovery,source,snapshot,recovery,source,uuids,random,base64uuid,snapshot,version,index,final,shard,routing,shard,routing,new,shard,routing,shard,id,node,get,id,true,shard,routing,state,initializing,recovery,source,shard,mark,as,recovering,from,snapshot,new,recovery,state,shard,routing,node,null,repository,restore,shard,shard,snapshot,get,snapshot,id,version,index,id,shard,shard,id,shard,recovery,state
IndexShardTestCase -> protected void recoverShardFromSnapshot(final IndexShard shard,                                             final Snapshot snapshot,                                             final Repository repository) throws IOException;1547496475;Recover a shard from a snapshot using a given repository *;protected void recoverShardFromSnapshot(final IndexShard shard,_                                            final Snapshot snapshot,_                                            final Repository repository) throws IOException {_        final Version version = Version.CURRENT__        final ShardId shardId = shard.shardId()__        final String index = shardId.getIndexName()__        final IndexId indexId = new IndexId(shardId.getIndex().getName(), shardId.getIndex().getUUID())__        final DiscoveryNode node = getFakeDiscoNode(shard.routingEntry().currentNodeId())__        final RecoverySource.SnapshotRecoverySource recoverySource =_            new RecoverySource.SnapshotRecoverySource(UUIDs.randomBase64UUID(), snapshot, version, index)__        final ShardRouting shardRouting = newShardRouting(shardId, node.getId(), true, ShardRoutingState.INITIALIZING, recoverySource)___        shard.markAsRecovering("from snapshot", new RecoveryState(shardRouting, node, null))__        repository.restoreShard(shard, snapshot.getSnapshotId(), version, indexId, shard.shardId(), shard.recoveryState())__    };recover,a,shard,from,a,snapshot,using,a,given,repository;protected,void,recover,shard,from,snapshot,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,version,version,version,current,final,shard,id,shard,id,shard,shard,id,final,string,index,shard,id,get,index,name,final,index,id,index,id,new,index,id,shard,id,get,index,get,name,shard,id,get,index,get,uuid,final,discovery,node,node,get,fake,disco,node,shard,routing,entry,current,node,id,final,recovery,source,snapshot,recovery,source,recovery,source,new,recovery,source,snapshot,recovery,source,uuids,random,base64uuid,snapshot,version,index,final,shard,routing,shard,routing,new,shard,routing,shard,id,node,get,id,true,shard,routing,state,initializing,recovery,source,shard,mark,as,recovering,from,snapshot,new,recovery,state,shard,routing,node,null,repository,restore,shard,shard,snapshot,get,snapshot,id,version,index,id,shard,shard,id,shard,recovery,state
IndexShardTestCase -> protected void recoverShardFromSnapshot(final IndexShard shard,                                             final Snapshot snapshot,                                             final Repository repository) throws IOException;1547496886;Recover a shard from a snapshot using a given repository *;protected void recoverShardFromSnapshot(final IndexShard shard,_                                            final Snapshot snapshot,_                                            final Repository repository) throws IOException {_        final Version version = Version.CURRENT__        final ShardId shardId = shard.shardId()__        final String index = shardId.getIndexName()__        final IndexId indexId = new IndexId(shardId.getIndex().getName(), shardId.getIndex().getUUID())__        final DiscoveryNode node = getFakeDiscoNode(shard.routingEntry().currentNodeId())__        final RecoverySource.SnapshotRecoverySource recoverySource =_            new RecoverySource.SnapshotRecoverySource(UUIDs.randomBase64UUID(), snapshot, version, index)__        final ShardRouting shardRouting = newShardRouting(shardId, node.getId(), true, ShardRoutingState.INITIALIZING, recoverySource)___        shard.markAsRecovering("from snapshot", new RecoveryState(shardRouting, node, null))__        repository.restoreShard(shard, snapshot.getSnapshotId(), version, indexId, shard.shardId(), shard.recoveryState())__    };recover,a,shard,from,a,snapshot,using,a,given,repository;protected,void,recover,shard,from,snapshot,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,version,version,version,current,final,shard,id,shard,id,shard,shard,id,final,string,index,shard,id,get,index,name,final,index,id,index,id,new,index,id,shard,id,get,index,get,name,shard,id,get,index,get,uuid,final,discovery,node,node,get,fake,disco,node,shard,routing,entry,current,node,id,final,recovery,source,snapshot,recovery,source,recovery,source,new,recovery,source,snapshot,recovery,source,uuids,random,base64uuid,snapshot,version,index,final,shard,routing,shard,routing,new,shard,routing,shard,id,node,get,id,true,shard,routing,state,initializing,recovery,source,shard,mark,as,recovering,from,snapshot,new,recovery,state,shard,routing,node,null,repository,restore,shard,shard,snapshot,get,snapshot,id,version,index,id,shard,shard,id,shard,recovery,state
IndexShardTestCase -> protected void recoverShardFromSnapshot(final IndexShard shard,                                             final Snapshot snapshot,                                             final Repository repository) throws IOException;1547520324;Recover a shard from a snapshot using a given repository *;protected void recoverShardFromSnapshot(final IndexShard shard,_                                            final Snapshot snapshot,_                                            final Repository repository) throws IOException {_        final Version version = Version.CURRENT__        final ShardId shardId = shard.shardId()__        final String index = shardId.getIndexName()__        final IndexId indexId = new IndexId(shardId.getIndex().getName(), shardId.getIndex().getUUID())__        final DiscoveryNode node = getFakeDiscoNode(shard.routingEntry().currentNodeId())__        final RecoverySource.SnapshotRecoverySource recoverySource =_            new RecoverySource.SnapshotRecoverySource(UUIDs.randomBase64UUID(), snapshot, version, index)__        final ShardRouting shardRouting = newShardRouting(shardId, node.getId(), true, ShardRoutingState.INITIALIZING, recoverySource)___        shard.markAsRecovering("from snapshot", new RecoveryState(shardRouting, node, null))__        repository.restoreShard(shard, snapshot.getSnapshotId(), version, indexId, shard.shardId(), shard.recoveryState())__    };recover,a,shard,from,a,snapshot,using,a,given,repository;protected,void,recover,shard,from,snapshot,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,version,version,version,current,final,shard,id,shard,id,shard,shard,id,final,string,index,shard,id,get,index,name,final,index,id,index,id,new,index,id,shard,id,get,index,get,name,shard,id,get,index,get,uuid,final,discovery,node,node,get,fake,disco,node,shard,routing,entry,current,node,id,final,recovery,source,snapshot,recovery,source,recovery,source,new,recovery,source,snapshot,recovery,source,uuids,random,base64uuid,snapshot,version,index,final,shard,routing,shard,routing,new,shard,routing,shard,id,node,get,id,true,shard,routing,state,initializing,recovery,source,shard,mark,as,recovering,from,snapshot,new,recovery,state,shard,routing,node,null,repository,restore,shard,shard,snapshot,get,snapshot,id,version,index,id,shard,shard,id,shard,recovery,state
IndexShardTestCase -> protected void recoverShardFromSnapshot(final IndexShard shard,                                             final Snapshot snapshot,                                             final Repository repository) throws IOException;1547552901;Recover a shard from a snapshot using a given repository *;protected void recoverShardFromSnapshot(final IndexShard shard,_                                            final Snapshot snapshot,_                                            final Repository repository) throws IOException {_        final Version version = Version.CURRENT__        final ShardId shardId = shard.shardId()__        final String index = shardId.getIndexName()__        final IndexId indexId = new IndexId(shardId.getIndex().getName(), shardId.getIndex().getUUID())__        final DiscoveryNode node = getFakeDiscoNode(shard.routingEntry().currentNodeId())__        final RecoverySource.SnapshotRecoverySource recoverySource =_            new RecoverySource.SnapshotRecoverySource(UUIDs.randomBase64UUID(), snapshot, version, index)__        final ShardRouting shardRouting = newShardRouting(shardId, node.getId(), true, ShardRoutingState.INITIALIZING, recoverySource)___        shard.markAsRecovering("from snapshot", new RecoveryState(shardRouting, node, null))__        repository.restoreShard(shard, snapshot.getSnapshotId(), version, indexId, shard.shardId(), shard.recoveryState())__    };recover,a,shard,from,a,snapshot,using,a,given,repository;protected,void,recover,shard,from,snapshot,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,version,version,version,current,final,shard,id,shard,id,shard,shard,id,final,string,index,shard,id,get,index,name,final,index,id,index,id,new,index,id,shard,id,get,index,get,name,shard,id,get,index,get,uuid,final,discovery,node,node,get,fake,disco,node,shard,routing,entry,current,node,id,final,recovery,source,snapshot,recovery,source,recovery,source,new,recovery,source,snapshot,recovery,source,uuids,random,base64uuid,snapshot,version,index,final,shard,routing,shard,routing,new,shard,routing,shard,id,node,get,id,true,shard,routing,state,initializing,recovery,source,shard,mark,as,recovering,from,snapshot,new,recovery,state,shard,routing,node,null,repository,restore,shard,shard,snapshot,get,snapshot,id,version,index,id,shard,shard,id,shard,recovery,state
IndexShardTestCase -> protected void recoverShardFromSnapshot(final IndexShard shard,                                             final Snapshot snapshot,                                             final Repository repository) throws IOException;1548593396;Recover a shard from a snapshot using a given repository *;protected void recoverShardFromSnapshot(final IndexShard shard,_                                            final Snapshot snapshot,_                                            final Repository repository) throws IOException {_        final Version version = Version.CURRENT__        final ShardId shardId = shard.shardId()__        final String index = shardId.getIndexName()__        final IndexId indexId = new IndexId(shardId.getIndex().getName(), shardId.getIndex().getUUID())__        final DiscoveryNode node = getFakeDiscoNode(shard.routingEntry().currentNodeId())__        final RecoverySource.SnapshotRecoverySource recoverySource =_            new RecoverySource.SnapshotRecoverySource(UUIDs.randomBase64UUID(), snapshot, version, index)__        final ShardRouting shardRouting = newShardRouting(shardId, node.getId(), true, ShardRoutingState.INITIALIZING, recoverySource)___        shard.markAsRecovering("from snapshot", new RecoveryState(shardRouting, node, null))__        repository.restoreShard(shard, snapshot.getSnapshotId(), version, indexId, shard.shardId(), shard.recoveryState())__    };recover,a,shard,from,a,snapshot,using,a,given,repository;protected,void,recover,shard,from,snapshot,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,version,version,version,current,final,shard,id,shard,id,shard,shard,id,final,string,index,shard,id,get,index,name,final,index,id,index,id,new,index,id,shard,id,get,index,get,name,shard,id,get,index,get,uuid,final,discovery,node,node,get,fake,disco,node,shard,routing,entry,current,node,id,final,recovery,source,snapshot,recovery,source,recovery,source,new,recovery,source,snapshot,recovery,source,uuids,random,base64uuid,snapshot,version,index,final,shard,routing,shard,routing,new,shard,routing,shard,id,node,get,id,true,shard,routing,state,initializing,recovery,source,shard,mark,as,recovering,from,snapshot,new,recovery,state,shard,routing,node,null,repository,restore,shard,shard,snapshot,get,snapshot,id,version,index,id,shard,shard,id,shard,recovery,state
IndexShardTestCase -> protected void recoverShardFromSnapshot(final IndexShard shard,                                             final Snapshot snapshot,                                             final Repository repository) throws IOException;1549294529;Recover a shard from a snapshot using a given repository *;protected void recoverShardFromSnapshot(final IndexShard shard,_                                            final Snapshot snapshot,_                                            final Repository repository) throws IOException {_        final Version version = Version.CURRENT__        final ShardId shardId = shard.shardId()__        final String index = shardId.getIndexName()__        final IndexId indexId = new IndexId(shardId.getIndex().getName(), shardId.getIndex().getUUID())__        final DiscoveryNode node = getFakeDiscoNode(shard.routingEntry().currentNodeId())__        final RecoverySource.SnapshotRecoverySource recoverySource =_            new RecoverySource.SnapshotRecoverySource(UUIDs.randomBase64UUID(), snapshot, version, index)__        final ShardRouting shardRouting = newShardRouting(shardId, node.getId(), true, ShardRoutingState.INITIALIZING, recoverySource)___        shard.markAsRecovering("from snapshot", new RecoveryState(shardRouting, node, null))__        repository.restoreShard(shard, snapshot.getSnapshotId(), version, indexId, shard.shardId(), shard.recoveryState())__    };recover,a,shard,from,a,snapshot,using,a,given,repository;protected,void,recover,shard,from,snapshot,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,version,version,version,current,final,shard,id,shard,id,shard,shard,id,final,string,index,shard,id,get,index,name,final,index,id,index,id,new,index,id,shard,id,get,index,get,name,shard,id,get,index,get,uuid,final,discovery,node,node,get,fake,disco,node,shard,routing,entry,current,node,id,final,recovery,source,snapshot,recovery,source,recovery,source,new,recovery,source,snapshot,recovery,source,uuids,random,base64uuid,snapshot,version,index,final,shard,routing,shard,routing,new,shard,routing,shard,id,node,get,id,true,shard,routing,state,initializing,recovery,source,shard,mark,as,recovering,from,snapshot,new,recovery,state,shard,routing,node,null,repository,restore,shard,shard,snapshot,get,snapshot,id,version,index,id,shard,shard,id,shard,recovery,state
IndexShardTestCase -> protected void recoverShardFromSnapshot(final IndexShard shard,                                             final Snapshot snapshot,                                             final Repository repository) throws IOException;1550668107;Recover a shard from a snapshot using a given repository *;protected void recoverShardFromSnapshot(final IndexShard shard,_                                            final Snapshot snapshot,_                                            final Repository repository) throws IOException {_        final Version version = Version.CURRENT__        final ShardId shardId = shard.shardId()__        final String index = shardId.getIndexName()__        final IndexId indexId = new IndexId(shardId.getIndex().getName(), shardId.getIndex().getUUID())__        final DiscoveryNode node = getFakeDiscoNode(shard.routingEntry().currentNodeId())__        final RecoverySource.SnapshotRecoverySource recoverySource =_            new RecoverySource.SnapshotRecoverySource(UUIDs.randomBase64UUID(), snapshot, version, index)__        final ShardRouting shardRouting = newShardRouting(shardId, node.getId(), true, ShardRoutingState.INITIALIZING, recoverySource)___        shard.markAsRecovering("from snapshot", new RecoveryState(shardRouting, node, null))__        repository.restoreShard(shard, snapshot.getSnapshotId(), version, indexId, shard.shardId(), shard.recoveryState())__    };recover,a,shard,from,a,snapshot,using,a,given,repository;protected,void,recover,shard,from,snapshot,final,index,shard,shard,final,snapshot,snapshot,final,repository,repository,throws,ioexception,final,version,version,version,current,final,shard,id,shard,id,shard,shard,id,final,string,index,shard,id,get,index,name,final,index,id,index,id,new,index,id,shard,id,get,index,get,name,shard,id,get,index,get,uuid,final,discovery,node,node,get,fake,disco,node,shard,routing,entry,current,node,id,final,recovery,source,snapshot,recovery,source,recovery,source,new,recovery,source,snapshot,recovery,source,uuids,random,base64uuid,snapshot,version,index,final,shard,routing,shard,routing,new,shard,routing,shard,id,node,get,id,true,shard,routing,state,initializing,recovery,source,shard,mark,as,recovering,from,snapshot,new,recovery,state,shard,routing,node,null,repository,restore,shard,shard,snapshot,get,snapshot,id,version,index,id,shard,shard,id,shard,recovery,state
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper) throws IOException;1524684173;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper) throws IOException {_        return newShard(shardId, primary, nodeId, indexMetaData, searcherWrapper, () -> {})__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,throws,ioexception,return,new,shard,shard,id,primary,node,id,index,meta,data,searcher,wrapper
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper) throws IOException;1525162917;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper) throws IOException {_        return newShard(shardId, primary, nodeId, indexMetaData, searcherWrapper, () -> {})__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,throws,ioexception,return,new,shard,shard,id,primary,node,id,index,meta,data,searcher,wrapper
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper) throws IOException;1527583663;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper) throws IOException {_        return newShard(shardId, primary, nodeId, indexMetaData, searcherWrapper, () -> {})__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,throws,ioexception,return,new,shard,shard,id,primary,node,id,index,meta,data,searcher,wrapper
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper) throws IOException;1528706846;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper) throws IOException {_        return newShard(shardId, primary, nodeId, indexMetaData, searcherWrapper, () -> {})__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,throws,ioexception,return,new,shard,shard,id,primary,node,id,index,meta,data,searcher,wrapper
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper) throws IOException;1531179852;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper) throws IOException {_        return newShard(shardId, primary, nodeId, indexMetaData, searcherWrapper, () -> {})__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,throws,ioexception,return,new,shard,shard,id,primary,node,id,index,meta,data,searcher,wrapper
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper) throws IOException;1531910483;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper) throws IOException {_        return newShard(shardId, primary, nodeId, indexMetaData, searcherWrapper, () -> {})__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,throws,ioexception,return,new,shard,shard,id,primary,node,id,index,meta,data,searcher,wrapper
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper) throws IOException;1532434432;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper) throws IOException {_        return newShard(shardId, primary, nodeId, indexMetaData, searcherWrapper, () -> {})__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,throws,ioexception,return,new,shard,shard,id,primary,node,id,index,meta,data,searcher,wrapper
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper) throws IOException;1533295538;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper) throws IOException {_        return newShard(shardId, primary, nodeId, indexMetaData, searcherWrapper, () -> {})__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,throws,ioexception,return,new,shard,shard,id,primary,node,id,index,meta,data,searcher,wrapper
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper) throws IOException;1535723122;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper) throws IOException {_        return newShard(shardId, primary, nodeId, indexMetaData, searcherWrapper, () -> {})__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,throws,ioexception,return,new,shard,shard,id,primary,node,id,index,meta,data,searcher,wrapper
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper) throws IOException;1535965276;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper) throws IOException {_        return newShard(shardId, primary, nodeId, indexMetaData, searcherWrapper, () -> {})__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,throws,ioexception,return,new,shard,shard,id,primary,node,id,index,meta,data,searcher,wrapper
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper) throws IOException;1536611444;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper) throws IOException {_        return newShard(shardId, primary, nodeId, indexMetaData, searcherWrapper, () -> {})__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,throws,ioexception,return,new,shard,shard,id,primary,node,id,index,meta,data,searcher,wrapper
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper) throws IOException;1536828374;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper) throws IOException {_        return newShard(shardId, primary, nodeId, indexMetaData, searcherWrapper, () -> {})__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,throws,ioexception,return,new,shard,shard,id,primary,node,id,index,meta,data,searcher,wrapper
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper) throws IOException;1537371806;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper) throws IOException {_        return newShard(shardId, primary, nodeId, indexMetaData, searcherWrapper, () -> {})__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,throws,ioexception,return,new,shard,shard,id,primary,node,id,index,meta,data,searcher,wrapper
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper) throws IOException;1537806831;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper) throws IOException {_        return newShard(shardId, primary, nodeId, indexMetaData, searcherWrapper, () -> {})__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,throws,ioexception,return,new,shard,shard,id,primary,node,id,index,meta,data,searcher,wrapper
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper) throws IOException;1538067637;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper) throws IOException {_        return newShard(shardId, primary, nodeId, indexMetaData, searcherWrapper, () -> {})__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,throws,ioexception,return,new,shard,shard,id,primary,node,id,index,meta,data,searcher,wrapper
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper) throws IOException;1542697404;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper) throws IOException {_        return newShard(shardId, primary, nodeId, indexMetaData, searcherWrapper, () -> {})__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,throws,ioexception,return,new,shard,shard,id,primary,node,id,index,meta,data,searcher,wrapper
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper) throws IOException;1544783963;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper) throws IOException {_        return newShard(shardId, primary, nodeId, indexMetaData, searcherWrapper, () -> {})__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,throws,ioexception,return,new,shard,shard,id,primary,node,id,index,meta,data,searcher,wrapper
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper) throws IOException;1544893197;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper) throws IOException {_        return newShard(shardId, primary, nodeId, indexMetaData, searcherWrapper, () -> {})__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,throws,ioexception,return,new,shard,shard,id,primary,node,id,index,meta,data,searcher,wrapper
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper) throws IOException;1545678410;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper) throws IOException {_        return newShard(shardId, primary, nodeId, indexMetaData, searcherWrapper, () -> {})__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,throws,ioexception,return,new,shard,shard,id,primary,node,id,index,meta,data,searcher,wrapper
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper) throws IOException;1546927432;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper) throws IOException {_        return newShard(shardId, primary, nodeId, indexMetaData, searcherWrapper, () -> {})__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,throws,ioexception,return,new,shard,shard,id,primary,node,id,index,meta,data,searcher,wrapper
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper) throws IOException;1547315388;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper) throws IOException {_        return newShard(shardId, primary, nodeId, indexMetaData, searcherWrapper, () -> {})__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,throws,ioexception,return,new,shard,shard,id,primary,node,id,index,meta,data,searcher,wrapper
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper) throws IOException;1547496475;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper) throws IOException {_        return newShard(shardId, primary, nodeId, indexMetaData, searcherWrapper, () -> {})__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,throws,ioexception,return,new,shard,shard,id,primary,node,id,index,meta,data,searcher,wrapper
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper) throws IOException;1547496886;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper) throws IOException {_        return newShard(shardId, primary, nodeId, indexMetaData, searcherWrapper, () -> {})__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,throws,ioexception,return,new,shard,shard,id,primary,node,id,index,meta,data,searcher,wrapper
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper) throws IOException;1547520324;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper) throws IOException {_        return newShard(shardId, primary, nodeId, indexMetaData, searcherWrapper, () -> {})__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,throws,ioexception,return,new,shard,shard,id,primary,node,id,index,meta,data,searcher,wrapper
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper) throws IOException;1547552901;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper) throws IOException {_        return newShard(shardId, primary, nodeId, indexMetaData, searcherWrapper, () -> {})__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,throws,ioexception,return,new,shard,shard,id,primary,node,id,index,meta,data,searcher,wrapper
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper) throws IOException;1548593396;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper) throws IOException {_        return newShard(shardId, primary, nodeId, indexMetaData, searcherWrapper, () -> {})__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,throws,ioexception,return,new,shard,shard,id,primary,node,id,index,meta,data,searcher,wrapper
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper) throws IOException;1549294529;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper) throws IOException {_        return newShard(shardId, primary, nodeId, indexMetaData, searcherWrapper, () -> {})__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,throws,ioexception,return,new,shard,shard,id,primary,node,id,index,meta,data,searcher,wrapper
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper) throws IOException;1550668107;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper) throws IOException {_        return newShard(shardId, primary, nodeId, indexMetaData, searcherWrapper, () -> {})__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,throws,ioexception,return,new,shard,shard,id,primary,node,id,index,meta,data,searcher,wrapper
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException;1524684173;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, nodeId, primary, ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, indexMetaData, searcherWrapper, null, globalCheckpointSyncer)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,runnable,global,checkpoint,syncer,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,node,id,primary,shard,routing,state,initializing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,index,meta,data,searcher,wrapper,null,global,checkpoint,syncer
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException;1525162917;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, nodeId, primary, ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, indexMetaData, searcherWrapper, null, globalCheckpointSyncer)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,runnable,global,checkpoint,syncer,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,node,id,primary,shard,routing,state,initializing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,index,meta,data,searcher,wrapper,null,global,checkpoint,syncer
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException;1527583663;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, nodeId, primary, ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, indexMetaData, searcherWrapper, null, globalCheckpointSyncer)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,runnable,global,checkpoint,syncer,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,node,id,primary,shard,routing,state,initializing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,index,meta,data,searcher,wrapper,null,global,checkpoint,syncer
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException;1528706846;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, nodeId, primary, ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, indexMetaData, searcherWrapper, new InternalEngineFactory(), globalCheckpointSyncer)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,runnable,global,checkpoint,syncer,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,node,id,primary,shard,routing,state,initializing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,index,meta,data,searcher,wrapper,new,internal,engine,factory,global,checkpoint,syncer
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException;1531179852;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, nodeId, primary, ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, indexMetaData, searcherWrapper, new InternalEngineFactory(), globalCheckpointSyncer)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,runnable,global,checkpoint,syncer,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,node,id,primary,shard,routing,state,initializing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,index,meta,data,searcher,wrapper,new,internal,engine,factory,global,checkpoint,syncer
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException;1531910483;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, nodeId, primary, ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, indexMetaData, searcherWrapper, new InternalEngineFactory(), globalCheckpointSyncer)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,runnable,global,checkpoint,syncer,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,node,id,primary,shard,routing,state,initializing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,index,meta,data,searcher,wrapper,new,internal,engine,factory,global,checkpoint,syncer
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException;1532434432;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, nodeId, primary, ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, indexMetaData, searcherWrapper, new InternalEngineFactory(), globalCheckpointSyncer)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,runnable,global,checkpoint,syncer,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,node,id,primary,shard,routing,state,initializing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,index,meta,data,searcher,wrapper,new,internal,engine,factory,global,checkpoint,syncer
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException;1533295538;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, nodeId, primary, ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, indexMetaData, searcherWrapper, new InternalEngineFactory(), globalCheckpointSyncer)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,runnable,global,checkpoint,syncer,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,node,id,primary,shard,routing,state,initializing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,index,meta,data,searcher,wrapper,new,internal,engine,factory,global,checkpoint,syncer
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException;1535723122;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, nodeId, primary, ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, indexMetaData, searcherWrapper, new InternalEngineFactory(), globalCheckpointSyncer)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,runnable,global,checkpoint,syncer,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,node,id,primary,shard,routing,state,initializing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,index,meta,data,searcher,wrapper,new,internal,engine,factory,global,checkpoint,syncer
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException;1535965276;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, nodeId, primary, ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, indexMetaData, searcherWrapper, new InternalEngineFactory(), globalCheckpointSyncer)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,runnable,global,checkpoint,syncer,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,node,id,primary,shard,routing,state,initializing,primary,recovery,source,store,recovery,source,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,index,meta,data,searcher,wrapper,new,internal,engine,factory,global,checkpoint,syncer
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException;1536611444;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, nodeId, primary, ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, indexMetaData, searcherWrapper, new InternalEngineFactory(), globalCheckpointSyncer)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,runnable,global,checkpoint,syncer,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,node,id,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,index,meta,data,searcher,wrapper,new,internal,engine,factory,global,checkpoint,syncer
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException;1536828374;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, nodeId, primary, ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, indexMetaData, searcherWrapper, new InternalEngineFactory(), globalCheckpointSyncer)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,runnable,global,checkpoint,syncer,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,node,id,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,index,meta,data,searcher,wrapper,new,internal,engine,factory,global,checkpoint,syncer
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException;1537371806;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, nodeId, primary, ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, indexMetaData, searcherWrapper, new InternalEngineFactory(), globalCheckpointSyncer)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,runnable,global,checkpoint,syncer,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,node,id,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,index,meta,data,searcher,wrapper,new,internal,engine,factory,global,checkpoint,syncer
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException;1537806831;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, nodeId, primary, ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, indexMetaData, searcherWrapper, new InternalEngineFactory(), globalCheckpointSyncer)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,runnable,global,checkpoint,syncer,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,node,id,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,index,meta,data,searcher,wrapper,new,internal,engine,factory,global,checkpoint,syncer
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException;1538067637;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, nodeId, primary, ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, indexMetaData, searcherWrapper, new InternalEngineFactory(), globalCheckpointSyncer)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,runnable,global,checkpoint,syncer,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,node,id,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,index,meta,data,searcher,wrapper,new,internal,engine,factory,global,checkpoint,syncer
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException;1542697404;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, nodeId, primary, ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, indexMetaData, searcherWrapper, new InternalEngineFactory(), globalCheckpointSyncer)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,runnable,global,checkpoint,syncer,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,node,id,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,index,meta,data,searcher,wrapper,new,internal,engine,factory,global,checkpoint,syncer
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException;1544783963;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, nodeId, primary, ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, indexMetaData, searcherWrapper, new InternalEngineFactory(), globalCheckpointSyncer)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,runnable,global,checkpoint,syncer,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,node,id,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,index,meta,data,searcher,wrapper,new,internal,engine,factory,global,checkpoint,syncer
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException;1544893197;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, nodeId, primary, ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, indexMetaData, searcherWrapper, new InternalEngineFactory(), globalCheckpointSyncer)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,runnable,global,checkpoint,syncer,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,node,id,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,index,meta,data,searcher,wrapper,new,internal,engine,factory,global,checkpoint,syncer
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException;1545678410;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, nodeId, primary, ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, indexMetaData, searcherWrapper, new InternalEngineFactory(), globalCheckpointSyncer)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,runnable,global,checkpoint,syncer,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,node,id,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,index,meta,data,searcher,wrapper,new,internal,engine,factory,global,checkpoint,syncer
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException;1546927432;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, nodeId, primary, ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, indexMetaData, searcherWrapper, new InternalEngineFactory(), globalCheckpointSyncer)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,runnable,global,checkpoint,syncer,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,node,id,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,index,meta,data,searcher,wrapper,new,internal,engine,factory,global,checkpoint,syncer
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException;1547315388;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, nodeId, primary, ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, indexMetaData, searcherWrapper, new InternalEngineFactory(), globalCheckpointSyncer)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,runnable,global,checkpoint,syncer,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,node,id,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,index,meta,data,searcher,wrapper,new,internal,engine,factory,global,checkpoint,syncer
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException;1547496475;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, nodeId, primary, ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, indexMetaData, searcherWrapper, new InternalEngineFactory(), globalCheckpointSyncer)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,runnable,global,checkpoint,syncer,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,node,id,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,index,meta,data,searcher,wrapper,new,internal,engine,factory,global,checkpoint,syncer
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException;1547496886;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, nodeId, primary, ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, indexMetaData, searcherWrapper, new InternalEngineFactory(), globalCheckpointSyncer)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,runnable,global,checkpoint,syncer,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,node,id,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,index,meta,data,searcher,wrapper,new,internal,engine,factory,global,checkpoint,syncer
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException;1547520324;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, nodeId, primary, ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, indexMetaData, searcherWrapper, new InternalEngineFactory(), globalCheckpointSyncer)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,runnable,global,checkpoint,syncer,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,node,id,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,index,meta,data,searcher,wrapper,new,internal,engine,factory,global,checkpoint,syncer
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException;1547552901;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, nodeId, primary, ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, indexMetaData, searcherWrapper, new InternalEngineFactory(), globalCheckpointSyncer)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,runnable,global,checkpoint,syncer,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,node,id,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,index,meta,data,searcher,wrapper,new,internal,engine,factory,global,checkpoint,syncer
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException;1548593396;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, nodeId, primary, ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, indexMetaData, searcherWrapper, new InternalEngineFactory(), globalCheckpointSyncer)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,runnable,global,checkpoint,syncer,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,node,id,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,index,meta,data,searcher,wrapper,new,internal,engine,factory,global,checkpoint,syncer
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException;1549294529;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, nodeId, primary, ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(shardRouting, indexMetaData, searcherWrapper, new InternalEngineFactory(), globalCheckpointSyncer)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,runnable,global,checkpoint,syncer,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,node,id,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,index,meta,data,searcher,wrapper,new,internal,engine,factory,global,checkpoint,syncer
IndexShardTestCase -> protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,                                   @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException;1550668107;creates a new initializing shard. The shard will will be put in its proper path under the_supplied node id.__@param shardId the shard id to use_@param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica_(ready to recover from another shard);protected IndexShard newShard(ShardId shardId, boolean primary, String nodeId, IndexMetaData indexMetaData,_                                  @Nullable IndexSearcherWrapper searcherWrapper, Runnable globalCheckpointSyncer) throws IOException {_        ShardRouting shardRouting = TestShardRouting.newShardRouting(shardId, nodeId, primary, ShardRoutingState.INITIALIZING,_            primary ? RecoverySource.EmptyStoreRecoverySource.INSTANCE : RecoverySource.PeerRecoverySource.INSTANCE)__        return newShard(_            shardRouting, indexMetaData, searcherWrapper, new InternalEngineFactory(), globalCheckpointSyncer, RetentionLeaseSyncer.EMPTY)__    };creates,a,new,initializing,shard,the,shard,will,will,be,put,in,its,proper,path,under,the,supplied,node,id,param,shard,id,the,shard,id,to,use,param,primary,indicates,whether,to,a,primary,shard,ready,to,recover,from,an,empty,store,or,a,replica,ready,to,recover,from,another,shard;protected,index,shard,new,shard,shard,id,shard,id,boolean,primary,string,node,id,index,meta,data,index,meta,data,nullable,index,searcher,wrapper,searcher,wrapper,runnable,global,checkpoint,syncer,throws,ioexception,shard,routing,shard,routing,test,shard,routing,new,shard,routing,shard,id,node,id,primary,shard,routing,state,initializing,primary,recovery,source,empty,store,recovery,source,instance,recovery,source,peer,recovery,source,instance,return,new,shard,shard,routing,index,meta,data,searcher,wrapper,new,internal,engine,factory,global,checkpoint,syncer,retention,lease,syncer,empty
IndexShardTestCase -> protected IndexShard newStartedShard(final boolean primary) throws IOException;1535723122;Creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(final boolean primary) throws IOException {_        return newStartedShard(primary, Settings.EMPTY, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,final,boolean,primary,throws,ioexception,return,new,started,shard,primary,settings,empty,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(final boolean primary) throws IOException;1535965276;Creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(final boolean primary) throws IOException {_        return newStartedShard(primary, Settings.EMPTY, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,final,boolean,primary,throws,ioexception,return,new,started,shard,primary,settings,empty,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(final boolean primary) throws IOException;1536611444;Creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(final boolean primary) throws IOException {_        return newStartedShard(primary, Settings.EMPTY, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,final,boolean,primary,throws,ioexception,return,new,started,shard,primary,settings,empty,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(final boolean primary) throws IOException;1536828374;Creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(final boolean primary) throws IOException {_        return newStartedShard(primary, Settings.EMPTY, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,final,boolean,primary,throws,ioexception,return,new,started,shard,primary,settings,empty,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(final boolean primary) throws IOException;1537371806;Creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(final boolean primary) throws IOException {_        return newStartedShard(primary, Settings.EMPTY, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,final,boolean,primary,throws,ioexception,return,new,started,shard,primary,settings,empty,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(final boolean primary) throws IOException;1537806831;Creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(final boolean primary) throws IOException {_        return newStartedShard(primary, Settings.EMPTY, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,final,boolean,primary,throws,ioexception,return,new,started,shard,primary,settings,empty,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(final boolean primary) throws IOException;1538067637;Creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(final boolean primary) throws IOException {_        return newStartedShard(primary, Settings.EMPTY, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,final,boolean,primary,throws,ioexception,return,new,started,shard,primary,settings,empty,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(final boolean primary) throws IOException;1542697404;Creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(final boolean primary) throws IOException {_        return newStartedShard(primary, Settings.EMPTY, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,final,boolean,primary,throws,ioexception,return,new,started,shard,primary,settings,empty,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(final boolean primary) throws IOException;1544783963;Creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(final boolean primary) throws IOException {_        return newStartedShard(primary, Settings.EMPTY, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,final,boolean,primary,throws,ioexception,return,new,started,shard,primary,settings,empty,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(final boolean primary) throws IOException;1544893197;Creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(final boolean primary) throws IOException {_        return newStartedShard(primary, Settings.EMPTY, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,final,boolean,primary,throws,ioexception,return,new,started,shard,primary,settings,empty,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(final boolean primary) throws IOException;1545678410;Creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(final boolean primary) throws IOException {_        return newStartedShard(primary, Settings.EMPTY, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,final,boolean,primary,throws,ioexception,return,new,started,shard,primary,settings,empty,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(final boolean primary) throws IOException;1546927432;Creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(final boolean primary) throws IOException {_        return newStartedShard(primary, Settings.EMPTY, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,final,boolean,primary,throws,ioexception,return,new,started,shard,primary,settings,empty,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(final boolean primary) throws IOException;1547315388;Creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(final boolean primary) throws IOException {_        return newStartedShard(primary, Settings.EMPTY, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,final,boolean,primary,throws,ioexception,return,new,started,shard,primary,settings,empty,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(final boolean primary) throws IOException;1547496475;Creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(final boolean primary) throws IOException {_        return newStartedShard(primary, Settings.EMPTY, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,final,boolean,primary,throws,ioexception,return,new,started,shard,primary,settings,empty,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(final boolean primary) throws IOException;1547496886;Creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(final boolean primary) throws IOException {_        return newStartedShard(primary, Settings.EMPTY, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,final,boolean,primary,throws,ioexception,return,new,started,shard,primary,settings,empty,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(final boolean primary) throws IOException;1547520324;Creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(final boolean primary) throws IOException {_        return newStartedShard(primary, Settings.EMPTY, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,final,boolean,primary,throws,ioexception,return,new,started,shard,primary,settings,empty,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(final boolean primary) throws IOException;1547552901;Creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(final boolean primary) throws IOException {_        return newStartedShard(primary, Settings.EMPTY, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,final,boolean,primary,throws,ioexception,return,new,started,shard,primary,settings,empty,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(final boolean primary) throws IOException;1548593396;Creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(final boolean primary) throws IOException {_        return newStartedShard(primary, Settings.EMPTY, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,final,boolean,primary,throws,ioexception,return,new,started,shard,primary,settings,empty,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(final boolean primary) throws IOException;1549294529;Creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(final boolean primary) throws IOException {_        return newStartedShard(primary, Settings.EMPTY, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,final,boolean,primary,throws,ioexception,return,new,started,shard,primary,settings,empty,new,internal,engine,factory
IndexShardTestCase -> protected IndexShard newStartedShard(final boolean primary) throws IOException;1550668107;Creates a new empty shard and starts it.__@param primary controls whether the shard will be a primary or a replica.;protected IndexShard newStartedShard(final boolean primary) throws IOException {_        return newStartedShard(primary, Settings.EMPTY, new InternalEngineFactory())__    };creates,a,new,empty,shard,and,starts,it,param,primary,controls,whether,the,shard,will,be,a,primary,or,a,replica;protected,index,shard,new,started,shard,final,boolean,primary,throws,ioexception,return,new,started,shard,primary,settings,empty,new,internal,engine,factory
