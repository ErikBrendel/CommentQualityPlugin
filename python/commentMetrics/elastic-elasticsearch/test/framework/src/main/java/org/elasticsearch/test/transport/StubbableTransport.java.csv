commented;modifiers;parameterAmount;loc;comment;code
false;;1;5;;boolean setDefaultSendBehavior(SendRequestBehavior sendBehavior) {     SendRequestBehavior prior = defaultSendRequest.     defaultSendRequest = sendBehavior.     return prior == null. }
false;public;1;5;;public boolean setDefaultConnectBehavior(OpenConnectionBehavior openConnectionBehavior) {     OpenConnectionBehavior prior = this.defaultConnectBehavior.     this.defaultConnectBehavior = openConnectionBehavior.     return prior == null. }
false;;2;3;;boolean addSendBehavior(TransportAddress transportAddress, SendRequestBehavior sendBehavior) {     return sendBehaviors.put(transportAddress, sendBehavior) == null. }
false;;2;3;;boolean addConnectBehavior(TransportAddress transportAddress, OpenConnectionBehavior connectBehavior) {     return connectBehaviors.put(transportAddress, connectBehavior) == null. }
false;;0;6;;void clearBehaviors() {     this.defaultSendRequest = null.     sendBehaviors.clear().     this.defaultConnectBehavior = null.     connectBehaviors.clear(). }
false;;1;7;;void clearBehavior(TransportAddress transportAddress) {     SendRequestBehavior behavior = sendBehaviors.remove(transportAddress).     if (behavior != null) {         behavior.clearCallback().     }     connectBehaviors.remove(transportAddress). }
false;;0;3;;Transport getDelegate() {     return delegate. }
false;public;1;4;;@Override public void addMessageListener(TransportMessageListener listener) {     delegate.addMessageListener(listener). }
false;public;1;4;;@Override public boolean removeMessageListener(TransportMessageListener listener) {     return delegate.removeMessageListener(listener). }
false;public;1;4;;@Override public <Request extends TransportRequest> void registerRequestHandler(RequestHandlerRegistry<Request> reg) {     delegate.registerRequestHandler(reg). }
false;public;1;4;;@Override public RequestHandlerRegistry getRequestHandler(String action) {     return delegate.getRequestHandler(action). }
false;public;0;4;;@Override public BoundTransportAddress boundAddress() {     return delegate.boundAddress(). }
false;public;2;4;;@Override public TransportAddress[] addressesFromString(String address, int perAddressLimit) throws UnknownHostException {     return delegate.addressesFromString(address, perAddressLimit). }
false;public;0;4;;@Override public List<String> getLocalAddresses() {     return delegate.getLocalAddresses(). }
false;public;1;4;;@Override public void onResponse(Connection connection) {     listener.onResponse(new WrappedConnection(connection)). }
false;public;1;4;;@Override public void onFailure(Exception e) {     listener.onFailure(e). }
false;public;3;24;;@Override public Releasable openConnection(DiscoveryNode node, ConnectionProfile profile, ActionListener<Connection> listener) {     TransportAddress address = node.getAddress().     OpenConnectionBehavior behavior = connectBehaviors.getOrDefault(address, defaultConnectBehavior).     ActionListener<Connection> wrappedListener = new ActionListener<Connection>() {          @Override         public void onResponse(Connection connection) {             listener.onResponse(new WrappedConnection(connection)).         }          @Override         public void onFailure(Exception e) {             listener.onFailure(e).         }     }.     if (behavior == null) {         return delegate.openConnection(node, profile, wrappedListener).     } else {         return behavior.openConnection(delegate, node, profile, wrappedListener).     } }
false;public;0;4;;@Override public TransportStats getStats() {     return delegate.getStats(). }
false;public;0;4;;@Override public Transport.ResponseHandlers getResponseHandlers() {     return delegate.getResponseHandlers(). }
false;public;0;4;;@Override public Lifecycle.State lifecycleState() {     return delegate.lifecycleState(). }
false;public;1;4;;@Override public void addLifecycleListener(LifecycleListener listener) {     delegate.addLifecycleListener(listener). }
false;public;1;4;;@Override public void removeLifecycleListener(LifecycleListener listener) {     delegate.removeLifecycleListener(listener). }
false;public;0;4;;@Override public void start() {     delegate.start(). }
false;public;0;4;;@Override public void stop() {     delegate.stop(). }
false;public;0;4;;@Override public void close() {     delegate.close(). }
false;public;0;4;;@Override public Map<String, BoundTransportAddress> profileBoundAddresses() {     return delegate.profileBoundAddresses(). }
false;public;0;4;;@Override public DiscoveryNode getNode() {     return connection.getNode(). }
false;public;4;11;;@Override public void sendRequest(long requestId, String action, TransportRequest request, TransportRequestOptions options) throws IOException, TransportException {     TransportAddress address = connection.getNode().getAddress().     SendRequestBehavior behavior = sendBehaviors.getOrDefault(address, defaultSendRequest).     if (behavior == null) {         connection.sendRequest(requestId, action, request, options).     } else {         behavior.sendRequest(connection, requestId, action, request, options).     } }
false;public;1;4;;@Override public void addCloseListener(ActionListener<Void> listener) {     connection.addCloseListener(listener). }
false;public;0;4;;@Override public boolean isClosed() {     return connection.isClosed(). }
false;public;0;4;;@Override public Version getVersion() {     return connection.getVersion(). }
false;public;0;4;;@Override public Object getCacheKey() {     return connection.getCacheKey(). }
false;public;0;4;;@Override public void close() {     connection.close(). }
false;public;0;3;;public Transport.Connection getConnection() {     return connection. }
false;;4;2;;Releasable openConnection(Transport transport, DiscoveryNode discoveryNode, ConnectionProfile profile, ActionListener<Connection> listener).
false;;5;2;;void sendRequest(Connection connection, long requestId, String action, TransportRequest request, TransportRequestOptions options) throws IOException.
false;default;0;2;;default void clearCallback() { }
