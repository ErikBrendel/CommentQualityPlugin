commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public String readText(String prompt) {     if (textIndex >= textInput.size()) {         throw new IllegalStateException("No text input configured for prompt [" + prompt + "]").     }     return textInput.get(textIndex++). }
false;public;1;7;;@Override public char[] readSecret(String prompt) {     if (secretIndex >= secretInput.size()) {         throw new IllegalStateException("No secret input configured for prompt [" + prompt + "]").     }     return secretInput.get(secretIndex++).toCharArray(). }
false;public;0;4;;@Override public PrintWriter getWriter() {     return writer. }
true;public;1;3;/**  * Adds an an input that will be return from {@link #readText(String)}. Values are read in FIFO order.  */ ;/**  * Adds an an input that will be return from {@link #readText(String)}. Values are read in FIFO order.  */ public void addTextInput(String input) {     textInput.add(input). }
true;public;1;3;/**  * Adds an an input that will be return from {@link #readText(String)}. Values are read in FIFO order.  */ ;/**  * Adds an an input that will be return from {@link #readText(String)}. Values are read in FIFO order.  */ public void addSecretInput(String input) {     secretInput.add(input). }
true;public;0;3;/**  * Returns all output written to this terminal.  */ ;/**  * Returns all output written to this terminal.  */ public String getOutput() throws UnsupportedEncodingException {     return buffer.toString("UTF-8"). }
true;public;0;7;/**  * Wipes the input and output.  */ ;/**  * Wipes the input and output.  */ public void reset() {     buffer.reset().     textIndex = 0.     textInput.clear().     secretIndex = 0.     secretInput.clear(). }
