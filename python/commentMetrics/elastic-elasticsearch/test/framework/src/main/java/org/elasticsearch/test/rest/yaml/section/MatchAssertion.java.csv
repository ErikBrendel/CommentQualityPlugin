commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;5;;public static MatchAssertion parse(XContentParser parser) throws IOException {     XContentLocation location = parser.getTokenLocation().     Tuple<String, Object> stringObjectTuple = ParserUtils.parseTuple(parser).     return new MatchAssertion(location, stringObjectTuple.v1(), stringObjectTuple.v2()). }
false;protected;2;39;;@Override protected void doAssert(Object actualValue, Object expectedValue) {     // if the value is wrapped into / it is a regexp (e.g. /s+d+/)     if (expectedValue instanceof String) {         String expValue = ((String) expectedValue).trim().         if (expValue.length() > 2 && expValue.startsWith("/") && expValue.endsWith("/")) {             assertThat("field [" + getField() + "] was expected to be of type String but is an instanceof [" + safeClass(actualValue) + "]", actualValue, instanceOf(String.class)).             String stringValue = (String) actualValue.             String regex = expValue.substring(1, expValue.length() - 1).             logger.trace("assert that [{}] matches [{}]", stringValue, regex).             assertThat("field [" + getField() + "] was expected to match the provided regex but didn't", stringValue, matches(regex, Pattern.COMMENTS)).             return.         }     }     logger.trace("assert that [{}] matches [{}] (field [{}])", actualValue, expectedValue, getField()).     if (expectedValue == null) {         assertNull("field [" + getField() + "] should be null but was [" + actualValue + "]", actualValue).         return.     }     assertNotNull("field [" + getField() + "] is null", actualValue).     if (actualValue.getClass().equals(safeClass(expectedValue)) == false) {         if (actualValue instanceof Number && expectedValue instanceof Number) {             // Double 1.0 is equal to Integer 1             assertThat("field [" + getField() + "] doesn't match the expected value", ((Number) actualValue).doubleValue(), equalTo(((Number) expectedValue).doubleValue())).             return.         }     }     if (expectedValue.equals(actualValue) == false) {         NotEqualMessageBuilder message = new NotEqualMessageBuilder().         message.compare(getField(), actualValue, expectedValue).         throw new AssertionError(getField() + " didn't match expected value:\n" + message).     } }
