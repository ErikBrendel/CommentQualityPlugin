# id;timestamp;commentText;codeText;commentWords;codeWords
RandomObjects -> public static Tuple<List<Object>, List<Object>> randomStoredFieldValues(Random random, XContentType xContentType);1524684173;Returns a tuple containing random stored field values and their corresponding expected values once printed out_via {@link org.elasticsearch.common.xcontent.ToXContent#toXContent(XContentBuilder, ToXContent.Params)} and parsed back via_{@link org.elasticsearch.common.xcontent.XContentParser#objectText()}._Generates values based on what can get printed out. Stored fields values are retrieved from lucene and converted via_{@link org.elasticsearch.index.mapper.MappedFieldType#valueForDisplay(Object)} to either strings, numbers or booleans.__@param random Random generator_@param xContentType the content type, used to determine what the expected values are for float numbers.;public static Tuple<List<Object>, List<Object>> randomStoredFieldValues(Random random, XContentType xContentType) {_        int numValues = randomIntBetween(random, 1, 5)__        List<Object> originalValues = new ArrayList<>()__        List<Object> expectedParsedValues = new ArrayList<>()__        int dataType = randomIntBetween(random, 0, 8)__        for (int i = 0_ i < numValues_ i++) {_            switch(dataType) {_                case 0:_                    long randomLong = random.nextLong()__                    originalValues.add(randomLong)__                    expectedParsedValues.add(randomLong)__                    break__                case 1:_                    int randomInt = random.nextInt()__                    originalValues.add(randomInt)__                    expectedParsedValues.add(randomInt)__                    break__                case 2:_                    Short randomShort = (short) random.nextInt()__                    originalValues.add(randomShort)__                    expectedParsedValues.add(randomShort.intValue())__                    break__                case 3:_                    Byte randomByte = (byte)random.nextInt()__                    originalValues.add(randomByte)__                    expectedParsedValues.add(randomByte.intValue())__                    break__                case 4:_                    double randomDouble = random.nextDouble()__                    originalValues.add(randomDouble)__                    expectedParsedValues.add(randomDouble)__                    break__                case 5:_                    Float randomFloat = random.nextFloat()__                    originalValues.add(randomFloat)__                    if (xContentType == XContentType.CBOR) {_                        _                        expectedParsedValues.add(randomFloat)__                    } else if (xContentType == XContentType.SMILE) {_                        _                        expectedParsedValues.add(randomFloat.doubleValue())__                    } else {_                        _                        expectedParsedValues.add(Double.parseDouble(randomFloat.toString()))__                    }_                    break__                case 6:_                    boolean randomBoolean = random.nextBoolean()__                    originalValues.add(randomBoolean)__                    expectedParsedValues.add(randomBoolean)__                    break__                case 7:_                    String randomString = random.nextBoolean() ? RandomStrings.randomAsciiOfLengthBetween(random, 3, 10 ) :_                            randomUnicodeOfLengthBetween(random, 3, 10)__                    originalValues.add(randomString)__                    expectedParsedValues.add(randomString)__                    break__                case 8:_                    byte[] randomBytes = RandomStrings.randomUnicodeOfLengthBetween(random, 10, 50).getBytes(StandardCharsets.UTF_8)__                    BytesArray randomBytesArray = new BytesArray(randomBytes)__                    originalValues.add(randomBytesArray)__                    if (xContentType == XContentType.JSON || xContentType == XContentType.YAML) {_                        _                        expectedParsedValues.add(Base64.getEncoder().encodeToString(randomBytes))__                    } else {_                        _                        expectedParsedValues.add(randomBytesArray)__                    }_                    break__                default:_                    throw new UnsupportedOperationException()__            }_        }_        return Tuple.tuple(originalValues, expectedParsedValues)__    };returns,a,tuple,containing,random,stored,field,values,and,their,corresponding,expected,values,once,printed,out,via,link,org,elasticsearch,common,xcontent,to,xcontent,to,xcontent,xcontent,builder,to,xcontent,params,and,parsed,back,via,link,org,elasticsearch,common,xcontent,xcontent,parser,object,text,generates,values,based,on,what,can,get,printed,out,stored,fields,values,are,retrieved,from,lucene,and,converted,via,link,org,elasticsearch,index,mapper,mapped,field,type,value,for,display,object,to,either,strings,numbers,or,booleans,param,random,random,generator,param,x,content,type,the,content,type,used,to,determine,what,the,expected,values,are,for,float,numbers;public,static,tuple,list,object,list,object,random,stored,field,values,random,random,xcontent,type,x,content,type,int,num,values,random,int,between,random,1,5,list,object,original,values,new,array,list,list,object,expected,parsed,values,new,array,list,int,data,type,random,int,between,random,0,8,for,int,i,0,i,num,values,i,switch,data,type,case,0,long,random,long,random,next,long,original,values,add,random,long,expected,parsed,values,add,random,long,break,case,1,int,random,int,random,next,int,original,values,add,random,int,expected,parsed,values,add,random,int,break,case,2,short,random,short,short,random,next,int,original,values,add,random,short,expected,parsed,values,add,random,short,int,value,break,case,3,byte,random,byte,byte,random,next,int,original,values,add,random,byte,expected,parsed,values,add,random,byte,int,value,break,case,4,double,random,double,random,next,double,original,values,add,random,double,expected,parsed,values,add,random,double,break,case,5,float,random,float,random,next,float,original,values,add,random,float,if,x,content,type,xcontent,type,cbor,expected,parsed,values,add,random,float,else,if,x,content,type,xcontent,type,smile,expected,parsed,values,add,random,float,double,value,else,expected,parsed,values,add,double,parse,double,random,float,to,string,break,case,6,boolean,random,boolean,random,next,boolean,original,values,add,random,boolean,expected,parsed,values,add,random,boolean,break,case,7,string,random,string,random,next,boolean,random,strings,random,ascii,of,length,between,random,3,10,random,unicode,of,length,between,random,3,10,original,values,add,random,string,expected,parsed,values,add,random,string,break,case,8,byte,random,bytes,random,strings,random,unicode,of,length,between,random,10,50,get,bytes,standard,charsets,bytes,array,random,bytes,array,new,bytes,array,random,bytes,original,values,add,random,bytes,array,if,x,content,type,xcontent,type,json,x,content,type,xcontent,type,yaml,expected,parsed,values,add,base64,get,encoder,encode,to,string,random,bytes,else,expected,parsed,values,add,random,bytes,array,break,default,throw,new,unsupported,operation,exception,return,tuple,tuple,original,values,expected,parsed,values
RandomObjects -> public static Tuple<List<Object>, List<Object>> randomStoredFieldValues(Random random, XContentType xContentType);1531179852;Returns a tuple containing random stored field values and their corresponding expected values once printed out_via {@link org.elasticsearch.common.xcontent.ToXContent#toXContent(XContentBuilder, ToXContent.Params)} and parsed back via_{@link org.elasticsearch.common.xcontent.XContentParser#objectText()}._Generates values based on what can get printed out. Stored fields values are retrieved from lucene and converted via_{@link org.elasticsearch.index.mapper.MappedFieldType#valueForDisplay(Object)} to either strings, numbers or booleans.__@param random Random generator_@param xContentType the content type, used to determine what the expected values are for float numbers.;public static Tuple<List<Object>, List<Object>> randomStoredFieldValues(Random random, XContentType xContentType) {_        int numValues = randomIntBetween(random, 1, 5)__        List<Object> originalValues = new ArrayList<>()__        List<Object> expectedParsedValues = new ArrayList<>()__        int dataType = randomIntBetween(random, 0, 8)__        for (int i = 0_ i < numValues_ i++) {_            switch(dataType) {_                case 0:_                    long randomLong = random.nextLong()__                    originalValues.add(randomLong)__                    expectedParsedValues.add(randomLong)__                    break__                case 1:_                    int randomInt = random.nextInt()__                    originalValues.add(randomInt)__                    expectedParsedValues.add(randomInt)__                    break__                case 2:_                    Short randomShort = (short) random.nextInt()__                    originalValues.add(randomShort)__                    expectedParsedValues.add(randomShort.intValue())__                    break__                case 3:_                    Byte randomByte = (byte)random.nextInt()__                    originalValues.add(randomByte)__                    expectedParsedValues.add(randomByte.intValue())__                    break__                case 4:_                    double randomDouble = random.nextDouble()__                    originalValues.add(randomDouble)__                    expectedParsedValues.add(randomDouble)__                    break__                case 5:_                    Float randomFloat = random.nextFloat()__                    originalValues.add(randomFloat)__                    if (xContentType == XContentType.CBOR) {_                        _                        expectedParsedValues.add(randomFloat)__                    } else if (xContentType == XContentType.SMILE) {_                        _                        expectedParsedValues.add(randomFloat.doubleValue())__                    } else {_                        _                        expectedParsedValues.add(Double.parseDouble(randomFloat.toString()))__                    }_                    break__                case 6:_                    boolean randomBoolean = random.nextBoolean()__                    originalValues.add(randomBoolean)__                    expectedParsedValues.add(randomBoolean)__                    break__                case 7:_                    String randomString = random.nextBoolean() ? RandomStrings.randomAsciiOfLengthBetween(random, 3, 10 ) :_                            randomUnicodeOfLengthBetween(random, 3, 10)__                    originalValues.add(randomString)__                    expectedParsedValues.add(randomString)__                    break__                case 8:_                    byte[] randomBytes = RandomStrings.randomUnicodeOfLengthBetween(random, 10, 50).getBytes(StandardCharsets.UTF_8)__                    BytesArray randomBytesArray = new BytesArray(randomBytes)__                    originalValues.add(randomBytesArray)__                    if (xContentType == XContentType.JSON || xContentType == XContentType.YAML) {_                        _                        expectedParsedValues.add(Base64.getEncoder().encodeToString(randomBytes))__                    } else {_                        _                        expectedParsedValues.add(randomBytesArray)__                    }_                    break__                default:_                    throw new UnsupportedOperationException()__            }_        }_        return Tuple.tuple(originalValues, expectedParsedValues)__    };returns,a,tuple,containing,random,stored,field,values,and,their,corresponding,expected,values,once,printed,out,via,link,org,elasticsearch,common,xcontent,to,xcontent,to,xcontent,xcontent,builder,to,xcontent,params,and,parsed,back,via,link,org,elasticsearch,common,xcontent,xcontent,parser,object,text,generates,values,based,on,what,can,get,printed,out,stored,fields,values,are,retrieved,from,lucene,and,converted,via,link,org,elasticsearch,index,mapper,mapped,field,type,value,for,display,object,to,either,strings,numbers,or,booleans,param,random,random,generator,param,x,content,type,the,content,type,used,to,determine,what,the,expected,values,are,for,float,numbers;public,static,tuple,list,object,list,object,random,stored,field,values,random,random,xcontent,type,x,content,type,int,num,values,random,int,between,random,1,5,list,object,original,values,new,array,list,list,object,expected,parsed,values,new,array,list,int,data,type,random,int,between,random,0,8,for,int,i,0,i,num,values,i,switch,data,type,case,0,long,random,long,random,next,long,original,values,add,random,long,expected,parsed,values,add,random,long,break,case,1,int,random,int,random,next,int,original,values,add,random,int,expected,parsed,values,add,random,int,break,case,2,short,random,short,short,random,next,int,original,values,add,random,short,expected,parsed,values,add,random,short,int,value,break,case,3,byte,random,byte,byte,random,next,int,original,values,add,random,byte,expected,parsed,values,add,random,byte,int,value,break,case,4,double,random,double,random,next,double,original,values,add,random,double,expected,parsed,values,add,random,double,break,case,5,float,random,float,random,next,float,original,values,add,random,float,if,x,content,type,xcontent,type,cbor,expected,parsed,values,add,random,float,else,if,x,content,type,xcontent,type,smile,expected,parsed,values,add,random,float,double,value,else,expected,parsed,values,add,double,parse,double,random,float,to,string,break,case,6,boolean,random,boolean,random,next,boolean,original,values,add,random,boolean,expected,parsed,values,add,random,boolean,break,case,7,string,random,string,random,next,boolean,random,strings,random,ascii,of,length,between,random,3,10,random,unicode,of,length,between,random,3,10,original,values,add,random,string,expected,parsed,values,add,random,string,break,case,8,byte,random,bytes,random,strings,random,unicode,of,length,between,random,10,50,get,bytes,standard,charsets,bytes,array,random,bytes,array,new,bytes,array,random,bytes,original,values,add,random,bytes,array,if,x,content,type,xcontent,type,json,x,content,type,xcontent,type,yaml,expected,parsed,values,add,base64,get,encoder,encode,to,string,random,bytes,else,expected,parsed,values,add,random,bytes,array,break,default,throw,new,unsupported,operation,exception,return,tuple,tuple,original,values,expected,parsed,values
RandomObjects -> public static Tuple<List<Object>, List<Object>> randomStoredFieldValues(Random random, XContentType xContentType);1533063033;Returns a tuple containing random stored field values and their corresponding expected values once printed out_via {@link org.elasticsearch.common.xcontent.ToXContent#toXContent(XContentBuilder, ToXContent.Params)} and parsed back via_{@link org.elasticsearch.common.xcontent.XContentParser#objectText()}._Generates values based on what can get printed out. Stored fields values are retrieved from lucene and converted via_{@link org.elasticsearch.index.mapper.MappedFieldType#valueForDisplay(Object)} to either strings, numbers or booleans.__@param random Random generator_@param xContentType the content type, used to determine what the expected values are for float numbers.;public static Tuple<List<Object>, List<Object>> randomStoredFieldValues(Random random, XContentType xContentType) {_        int numValues = randomIntBetween(random, 1, 5)__        List<Object> originalValues = new ArrayList<>()__        List<Object> expectedParsedValues = new ArrayList<>()__        int dataType = randomIntBetween(random, 0, 8)__        for (int i = 0_ i < numValues_ i++) {_            switch(dataType) {_                case 0:_                    long randomLong = random.nextLong()__                    originalValues.add(randomLong)__                    expectedParsedValues.add(randomLong)__                    break__                case 1:_                    int randomInt = random.nextInt()__                    originalValues.add(randomInt)__                    expectedParsedValues.add(randomInt)__                    break__                case 2:_                    Short randomShort = (short) random.nextInt()__                    originalValues.add(randomShort)__                    expectedParsedValues.add(randomShort.intValue())__                    break__                case 3:_                    Byte randomByte = (byte)random.nextInt()__                    originalValues.add(randomByte)__                    expectedParsedValues.add(randomByte.intValue())__                    break__                case 4:_                    double randomDouble = random.nextDouble()__                    originalValues.add(randomDouble)__                    expectedParsedValues.add(randomDouble)__                    break__                case 5:_                    Float randomFloat = random.nextFloat()__                    originalValues.add(randomFloat)__                    if (xContentType == XContentType.CBOR) {_                        _                        expectedParsedValues.add(randomFloat)__                    } else if (xContentType == XContentType.SMILE) {_                        _                        expectedParsedValues.add(randomFloat.doubleValue())__                    } else {_                        _                        expectedParsedValues.add(Double.parseDouble(randomFloat.toString()))__                    }_                    break__                case 6:_                    boolean randomBoolean = random.nextBoolean()__                    originalValues.add(randomBoolean)__                    expectedParsedValues.add(randomBoolean)__                    break__                case 7:_                    String randomString = random.nextBoolean() ? RandomStrings.randomAsciiLettersOfLengthBetween(random, 3, 10) :_                            randomUnicodeOfLengthBetween(random, 3, 10)__                    originalValues.add(randomString)__                    expectedParsedValues.add(randomString)__                    break__                case 8:_                    byte[] randomBytes = RandomStrings.randomUnicodeOfLengthBetween(random, 10, 50).getBytes(StandardCharsets.UTF_8)__                    BytesArray randomBytesArray = new BytesArray(randomBytes)__                    originalValues.add(randomBytesArray)__                    if (xContentType == XContentType.JSON || xContentType == XContentType.YAML) {_                        _                        expectedParsedValues.add(Base64.getEncoder().encodeToString(randomBytes))__                    } else {_                        _                        expectedParsedValues.add(randomBytesArray)__                    }_                    break__                default:_                    throw new UnsupportedOperationException()__            }_        }_        return Tuple.tuple(originalValues, expectedParsedValues)__    };returns,a,tuple,containing,random,stored,field,values,and,their,corresponding,expected,values,once,printed,out,via,link,org,elasticsearch,common,xcontent,to,xcontent,to,xcontent,xcontent,builder,to,xcontent,params,and,parsed,back,via,link,org,elasticsearch,common,xcontent,xcontent,parser,object,text,generates,values,based,on,what,can,get,printed,out,stored,fields,values,are,retrieved,from,lucene,and,converted,via,link,org,elasticsearch,index,mapper,mapped,field,type,value,for,display,object,to,either,strings,numbers,or,booleans,param,random,random,generator,param,x,content,type,the,content,type,used,to,determine,what,the,expected,values,are,for,float,numbers;public,static,tuple,list,object,list,object,random,stored,field,values,random,random,xcontent,type,x,content,type,int,num,values,random,int,between,random,1,5,list,object,original,values,new,array,list,list,object,expected,parsed,values,new,array,list,int,data,type,random,int,between,random,0,8,for,int,i,0,i,num,values,i,switch,data,type,case,0,long,random,long,random,next,long,original,values,add,random,long,expected,parsed,values,add,random,long,break,case,1,int,random,int,random,next,int,original,values,add,random,int,expected,parsed,values,add,random,int,break,case,2,short,random,short,short,random,next,int,original,values,add,random,short,expected,parsed,values,add,random,short,int,value,break,case,3,byte,random,byte,byte,random,next,int,original,values,add,random,byte,expected,parsed,values,add,random,byte,int,value,break,case,4,double,random,double,random,next,double,original,values,add,random,double,expected,parsed,values,add,random,double,break,case,5,float,random,float,random,next,float,original,values,add,random,float,if,x,content,type,xcontent,type,cbor,expected,parsed,values,add,random,float,else,if,x,content,type,xcontent,type,smile,expected,parsed,values,add,random,float,double,value,else,expected,parsed,values,add,double,parse,double,random,float,to,string,break,case,6,boolean,random,boolean,random,next,boolean,original,values,add,random,boolean,expected,parsed,values,add,random,boolean,break,case,7,string,random,string,random,next,boolean,random,strings,random,ascii,letters,of,length,between,random,3,10,random,unicode,of,length,between,random,3,10,original,values,add,random,string,expected,parsed,values,add,random,string,break,case,8,byte,random,bytes,random,strings,random,unicode,of,length,between,random,10,50,get,bytes,standard,charsets,bytes,array,random,bytes,array,new,bytes,array,random,bytes,original,values,add,random,bytes,array,if,x,content,type,xcontent,type,json,x,content,type,xcontent,type,yaml,expected,parsed,values,add,base64,get,encoder,encode,to,string,random,bytes,else,expected,parsed,values,add,random,bytes,array,break,default,throw,new,unsupported,operation,exception,return,tuple,tuple,original,values,expected,parsed,values
RandomObjects -> public static Tuple<List<Object>, List<Object>> randomStoredFieldValues(Random random, XContentType xContentType);1544810257;Returns a tuple containing random stored field values and their corresponding expected values once printed out_via {@link org.elasticsearch.common.xcontent.ToXContent#toXContent(XContentBuilder, ToXContent.Params)} and parsed back via_{@link org.elasticsearch.common.xcontent.XContentParser#objectText()}._Generates values based on what can get printed out. Stored fields values are retrieved from lucene and converted via_{@link org.elasticsearch.index.mapper.MappedFieldType#valueForDisplay(Object)} to either strings, numbers or booleans.__@param random Random generator_@param xContentType the content type, used to determine what the expected values are for float numbers.;public static Tuple<List<Object>, List<Object>> randomStoredFieldValues(Random random, XContentType xContentType) {_        int numValues = randomIntBetween(random, 1, 5)__        List<Object> originalValues = randomStoredFieldValues(random, numValues)__        List<Object> expectedParsedValues = new ArrayList<>(numValues)__        for (Object originalValue : originalValues) {_            expectedParsedValues.add(getExpectedParsedValue(xContentType, originalValue))__        }_        return Tuple.tuple(originalValues, expectedParsedValues)__    };returns,a,tuple,containing,random,stored,field,values,and,their,corresponding,expected,values,once,printed,out,via,link,org,elasticsearch,common,xcontent,to,xcontent,to,xcontent,xcontent,builder,to,xcontent,params,and,parsed,back,via,link,org,elasticsearch,common,xcontent,xcontent,parser,object,text,generates,values,based,on,what,can,get,printed,out,stored,fields,values,are,retrieved,from,lucene,and,converted,via,link,org,elasticsearch,index,mapper,mapped,field,type,value,for,display,object,to,either,strings,numbers,or,booleans,param,random,random,generator,param,x,content,type,the,content,type,used,to,determine,what,the,expected,values,are,for,float,numbers;public,static,tuple,list,object,list,object,random,stored,field,values,random,random,xcontent,type,x,content,type,int,num,values,random,int,between,random,1,5,list,object,original,values,random,stored,field,values,random,num,values,list,object,expected,parsed,values,new,array,list,num,values,for,object,original,value,original,values,expected,parsed,values,add,get,expected,parsed,value,x,content,type,original,value,return,tuple,tuple,original,values,expected,parsed,values
RandomObjects -> public static Tuple<List<Object>, List<Object>> randomStoredFieldValues(Random random, XContentType xContentType);1545077999;Returns a tuple containing random stored field values and their corresponding expected values once printed out_via {@link org.elasticsearch.common.xcontent.ToXContent#toXContent(XContentBuilder, ToXContent.Params)} and parsed back via_{@link org.elasticsearch.common.xcontent.XContentParser#objectText()}._Generates values based on what can get printed out. Stored fields values are retrieved from lucene and converted via_{@link org.elasticsearch.index.mapper.MappedFieldType#valueForDisplay(Object)} to either strings, numbers or booleans.__@param random Random generator_@param xContentType the content type, used to determine what the expected values are for float numbers.;public static Tuple<List<Object>, List<Object>> randomStoredFieldValues(Random random, XContentType xContentType) {_        int numValues = randomIntBetween(random, 1, 5)__        List<Object> originalValues = randomStoredFieldValues(random, numValues)__        List<Object> expectedParsedValues = new ArrayList<>(numValues)__        for (Object originalValue : originalValues) {_            expectedParsedValues.add(getExpectedParsedValue(xContentType, originalValue))__        }_        return Tuple.tuple(originalValues, expectedParsedValues)__    };returns,a,tuple,containing,random,stored,field,values,and,their,corresponding,expected,values,once,printed,out,via,link,org,elasticsearch,common,xcontent,to,xcontent,to,xcontent,xcontent,builder,to,xcontent,params,and,parsed,back,via,link,org,elasticsearch,common,xcontent,xcontent,parser,object,text,generates,values,based,on,what,can,get,printed,out,stored,fields,values,are,retrieved,from,lucene,and,converted,via,link,org,elasticsearch,index,mapper,mapped,field,type,value,for,display,object,to,either,strings,numbers,or,booleans,param,random,random,generator,param,x,content,type,the,content,type,used,to,determine,what,the,expected,values,are,for,float,numbers;public,static,tuple,list,object,list,object,random,stored,field,values,random,random,xcontent,type,x,content,type,int,num,values,random,int,between,random,1,5,list,object,original,values,random,stored,field,values,random,num,values,list,object,expected,parsed,values,new,array,list,num,values,for,object,original,value,original,values,expected,parsed,values,add,get,expected,parsed,value,x,content,type,original,value,return,tuple,tuple,original,values,expected,parsed,values
RandomObjects -> public static Tuple<List<Object>, List<Object>> randomStoredFieldValues(Random random, XContentType xContentType);1549356476;Returns a tuple containing random stored field values and their corresponding expected values once printed out_via {@link org.elasticsearch.common.xcontent.ToXContent#toXContent(XContentBuilder, ToXContent.Params)} and parsed back via_{@link org.elasticsearch.common.xcontent.XContentParser#objectText()}._Generates values based on what can get printed out. Stored fields values are retrieved from lucene and converted via_{@link org.elasticsearch.index.mapper.MappedFieldType#valueForDisplay(Object)} to either strings, numbers or booleans.__@param random Random generator_@param xContentType the content type, used to determine what the expected values are for float numbers.;public static Tuple<List<Object>, List<Object>> randomStoredFieldValues(Random random, XContentType xContentType) {_        int numValues = randomIntBetween(random, 1, 5)__        List<Object> originalValues = randomStoredFieldValues(random, numValues)__        List<Object> expectedParsedValues = new ArrayList<>(numValues)__        for (Object originalValue : originalValues) {_            expectedParsedValues.add(getExpectedParsedValue(xContentType, originalValue))__        }_        return Tuple.tuple(originalValues, expectedParsedValues)__    };returns,a,tuple,containing,random,stored,field,values,and,their,corresponding,expected,values,once,printed,out,via,link,org,elasticsearch,common,xcontent,to,xcontent,to,xcontent,xcontent,builder,to,xcontent,params,and,parsed,back,via,link,org,elasticsearch,common,xcontent,xcontent,parser,object,text,generates,values,based,on,what,can,get,printed,out,stored,fields,values,are,retrieved,from,lucene,and,converted,via,link,org,elasticsearch,index,mapper,mapped,field,type,value,for,display,object,to,either,strings,numbers,or,booleans,param,random,random,generator,param,x,content,type,the,content,type,used,to,determine,what,the,expected,values,are,for,float,numbers;public,static,tuple,list,object,list,object,random,stored,field,values,random,random,xcontent,type,x,content,type,int,num,values,random,int,between,random,1,5,list,object,original,values,random,stored,field,values,random,num,values,list,object,expected,parsed,values,new,array,list,num,values,for,object,original,value,original,values,expected,parsed,values,add,get,expected,parsed,value,x,content,type,original,value,return,tuple,tuple,original,values,expected,parsed,values
RandomObjects -> public static BytesReference randomSource(Random random, XContentType xContentType, int minNumFields);1524684173;Returns a random source in a given XContentType containing a random number of fields, objects and array, with maximum depth 5._The minimum number of fields per object is provided as an argument.__@param random Random generator;public static BytesReference randomSource(Random random, XContentType xContentType, int minNumFields) {_        try (XContentBuilder builder = XContentFactory.contentBuilder(xContentType)) {_            builder.startObject()__            addFields(random, builder, minNumFields, 0)__            builder.endObject()__            return BytesReference.bytes(builder)__        } catch(IOException e) {_            throw new RuntimeException(e)__        }_    };returns,a,random,source,in,a,given,xcontent,type,containing,a,random,number,of,fields,objects,and,array,with,maximum,depth,5,the,minimum,number,of,fields,per,object,is,provided,as,an,argument,param,random,random,generator;public,static,bytes,reference,random,source,random,random,xcontent,type,x,content,type,int,min,num,fields,try,xcontent,builder,builder,xcontent,factory,content,builder,x,content,type,builder,start,object,add,fields,random,builder,min,num,fields,0,builder,end,object,return,bytes,reference,bytes,builder,catch,ioexception,e,throw,new,runtime,exception,e
RandomObjects -> public static BytesReference randomSource(Random random, XContentType xContentType, int minNumFields);1531179852;Returns a random source in a given XContentType containing a random number of fields, objects and array, with maximum depth 5._The minimum number of fields per object is provided as an argument.__@param random Random generator;public static BytesReference randomSource(Random random, XContentType xContentType, int minNumFields) {_        try (XContentBuilder builder = XContentFactory.contentBuilder(xContentType)) {_            builder.startObject()__            addFields(random, builder, minNumFields, 0)__            builder.endObject()__            return BytesReference.bytes(builder)__        } catch(IOException e) {_            throw new RuntimeException(e)__        }_    };returns,a,random,source,in,a,given,xcontent,type,containing,a,random,number,of,fields,objects,and,array,with,maximum,depth,5,the,minimum,number,of,fields,per,object,is,provided,as,an,argument,param,random,random,generator;public,static,bytes,reference,random,source,random,random,xcontent,type,x,content,type,int,min,num,fields,try,xcontent,builder,builder,xcontent,factory,content,builder,x,content,type,builder,start,object,add,fields,random,builder,min,num,fields,0,builder,end,object,return,bytes,reference,bytes,builder,catch,ioexception,e,throw,new,runtime,exception,e
RandomObjects -> public static BytesReference randomSource(Random random, XContentType xContentType, int minNumFields);1533063033;Returns a random source in a given XContentType containing a random number of fields, objects and array, with maximum depth 5._The minimum number of fields per object is provided as an argument.__@param random Random generator;public static BytesReference randomSource(Random random, XContentType xContentType, int minNumFields) {_        try (XContentBuilder builder = XContentFactory.contentBuilder(xContentType)) {_            builder.startObject()__            addFields(random, builder, minNumFields, 0)__            builder.endObject()__            return BytesReference.bytes(builder)__        } catch(IOException e) {_            throw new RuntimeException(e)__        }_    };returns,a,random,source,in,a,given,xcontent,type,containing,a,random,number,of,fields,objects,and,array,with,maximum,depth,5,the,minimum,number,of,fields,per,object,is,provided,as,an,argument,param,random,random,generator;public,static,bytes,reference,random,source,random,random,xcontent,type,x,content,type,int,min,num,fields,try,xcontent,builder,builder,xcontent,factory,content,builder,x,content,type,builder,start,object,add,fields,random,builder,min,num,fields,0,builder,end,object,return,bytes,reference,bytes,builder,catch,ioexception,e,throw,new,runtime,exception,e
RandomObjects -> public static BytesReference randomSource(Random random, XContentType xContentType, int minNumFields);1544810257;Returns a random source in a given XContentType containing a random number of fields, objects and array, with maximum depth 5._The minimum number of fields per object is provided as an argument.__@param random Random generator;public static BytesReference randomSource(Random random, XContentType xContentType, int minNumFields) {_        try (XContentBuilder builder = XContentFactory.contentBuilder(xContentType)) {_            builder.startObject()__            addFields(random, builder, minNumFields, 0)__            builder.endObject()__            return BytesReference.bytes(builder)__        } catch(IOException e) {_            throw new RuntimeException(e)__        }_    };returns,a,random,source,in,a,given,xcontent,type,containing,a,random,number,of,fields,objects,and,array,with,maximum,depth,5,the,minimum,number,of,fields,per,object,is,provided,as,an,argument,param,random,random,generator;public,static,bytes,reference,random,source,random,random,xcontent,type,x,content,type,int,min,num,fields,try,xcontent,builder,builder,xcontent,factory,content,builder,x,content,type,builder,start,object,add,fields,random,builder,min,num,fields,0,builder,end,object,return,bytes,reference,bytes,builder,catch,ioexception,e,throw,new,runtime,exception,e
RandomObjects -> public static BytesReference randomSource(Random random, XContentType xContentType, int minNumFields);1545077999;Returns a random source in a given XContentType containing a random number of fields, objects and array, with maximum depth 5._The minimum number of fields per object is provided as an argument.__@param random Random generator;public static BytesReference randomSource(Random random, XContentType xContentType, int minNumFields) {_        try (XContentBuilder builder = XContentFactory.contentBuilder(xContentType)) {_            builder.startObject()__            addFields(random, builder, minNumFields, 0)__            builder.endObject()__            return BytesReference.bytes(builder)__        } catch(IOException e) {_            throw new RuntimeException(e)__        }_    };returns,a,random,source,in,a,given,xcontent,type,containing,a,random,number,of,fields,objects,and,array,with,maximum,depth,5,the,minimum,number,of,fields,per,object,is,provided,as,an,argument,param,random,random,generator;public,static,bytes,reference,random,source,random,random,xcontent,type,x,content,type,int,min,num,fields,try,xcontent,builder,builder,xcontent,factory,content,builder,x,content,type,builder,start,object,add,fields,random,builder,min,num,fields,0,builder,end,object,return,bytes,reference,bytes,builder,catch,ioexception,e,throw,new,runtime,exception,e
RandomObjects -> public static BytesReference randomSource(Random random, XContentType xContentType, int minNumFields);1549356476;Returns a random source in a given XContentType containing a random number of fields, objects and array, with maximum depth 5._The minimum number of fields per object is provided as an argument.__@param random Random generator;public static BytesReference randomSource(Random random, XContentType xContentType, int minNumFields) {_        try (XContentBuilder builder = XContentFactory.contentBuilder(xContentType)) {_            builder.startObject()__            addFields(random, builder, minNumFields, 0)__            builder.endObject()__            return BytesReference.bytes(builder)__        } catch(IOException e) {_            throw new RuntimeException(e)__        }_    };returns,a,random,source,in,a,given,xcontent,type,containing,a,random,number,of,fields,objects,and,array,with,maximum,depth,5,the,minimum,number,of,fields,per,object,is,provided,as,an,argument,param,random,random,generator;public,static,bytes,reference,random,source,random,random,xcontent,type,x,content,type,int,min,num,fields,try,xcontent,builder,builder,xcontent,factory,content,builder,x,content,type,builder,start,object,add,fields,random,builder,min,num,fields,0,builder,end,object,return,bytes,reference,bytes,builder,catch,ioexception,e,throw,new,runtime,exception,e
RandomObjects -> public static Tuple<ShardInfo, ShardInfo> randomShardInfo(Random random);1524684173;Returns a tuple that contains a randomized {@link ShardInfo} value (left side) and its corresponding_value (right side) after it has been printed out as a {@link ToXContent} and parsed back using a parsing_method like {@link ShardInfo#fromXContent(XContentParser)}. The ShardInfo randomly contains shard failures.__@param random Random generator;public static Tuple<ShardInfo, ShardInfo> randomShardInfo(Random random) {_        return randomShardInfo(random, random.nextBoolean())__    };returns,a,tuple,that,contains,a,randomized,link,shard,info,value,left,side,and,its,corresponding,value,right,side,after,it,has,been,printed,out,as,a,link,to,xcontent,and,parsed,back,using,a,parsing,method,like,link,shard,info,from,xcontent,xcontent,parser,the,shard,info,randomly,contains,shard,failures,param,random,random,generator;public,static,tuple,shard,info,shard,info,random,shard,info,random,random,return,random,shard,info,random,random,next,boolean
RandomObjects -> public static Tuple<ShardInfo, ShardInfo> randomShardInfo(Random random);1531179852;Returns a tuple that contains a randomized {@link ShardInfo} value (left side) and its corresponding_value (right side) after it has been printed out as a {@link ToXContent} and parsed back using a parsing_method like {@link ShardInfo#fromXContent(XContentParser)}. The ShardInfo randomly contains shard failures.__@param random Random generator;public static Tuple<ShardInfo, ShardInfo> randomShardInfo(Random random) {_        return randomShardInfo(random, random.nextBoolean())__    };returns,a,tuple,that,contains,a,randomized,link,shard,info,value,left,side,and,its,corresponding,value,right,side,after,it,has,been,printed,out,as,a,link,to,xcontent,and,parsed,back,using,a,parsing,method,like,link,shard,info,from,xcontent,xcontent,parser,the,shard,info,randomly,contains,shard,failures,param,random,random,generator;public,static,tuple,shard,info,shard,info,random,shard,info,random,random,return,random,shard,info,random,random,next,boolean
RandomObjects -> public static Tuple<ShardInfo, ShardInfo> randomShardInfo(Random random);1533063033;Returns a tuple that contains a randomized {@link ShardInfo} value (left side) and its corresponding_value (right side) after it has been printed out as a {@link ToXContent} and parsed back using a parsing_method like {@link ShardInfo#fromXContent(XContentParser)}. The ShardInfo randomly contains shard failures.__@param random Random generator;public static Tuple<ShardInfo, ShardInfo> randomShardInfo(Random random) {_        return randomShardInfo(random, random.nextBoolean())__    };returns,a,tuple,that,contains,a,randomized,link,shard,info,value,left,side,and,its,corresponding,value,right,side,after,it,has,been,printed,out,as,a,link,to,xcontent,and,parsed,back,using,a,parsing,method,like,link,shard,info,from,xcontent,xcontent,parser,the,shard,info,randomly,contains,shard,failures,param,random,random,generator;public,static,tuple,shard,info,shard,info,random,shard,info,random,random,return,random,shard,info,random,random,next,boolean
RandomObjects -> public static Tuple<ShardInfo, ShardInfo> randomShardInfo(Random random);1544810257;Returns a tuple that contains a randomized {@link ShardInfo} value (left side) and its corresponding_value (right side) after it has been printed out as a {@link ToXContent} and parsed back using a parsing_method like {@link ShardInfo#fromXContent(XContentParser)}. The ShardInfo randomly contains shard failures.__@param random Random generator;public static Tuple<ShardInfo, ShardInfo> randomShardInfo(Random random) {_        return randomShardInfo(random, random.nextBoolean())__    };returns,a,tuple,that,contains,a,randomized,link,shard,info,value,left,side,and,its,corresponding,value,right,side,after,it,has,been,printed,out,as,a,link,to,xcontent,and,parsed,back,using,a,parsing,method,like,link,shard,info,from,xcontent,xcontent,parser,the,shard,info,randomly,contains,shard,failures,param,random,random,generator;public,static,tuple,shard,info,shard,info,random,shard,info,random,random,return,random,shard,info,random,random,next,boolean
RandomObjects -> public static Tuple<ShardInfo, ShardInfo> randomShardInfo(Random random);1545077999;Returns a tuple that contains a randomized {@link ShardInfo} value (left side) and its corresponding_value (right side) after it has been printed out as a {@link ToXContent} and parsed back using a parsing_method like {@link ShardInfo#fromXContent(XContentParser)}. The ShardInfo randomly contains shard failures.__@param random Random generator;public static Tuple<ShardInfo, ShardInfo> randomShardInfo(Random random) {_        return randomShardInfo(random, random.nextBoolean())__    };returns,a,tuple,that,contains,a,randomized,link,shard,info,value,left,side,and,its,corresponding,value,right,side,after,it,has,been,printed,out,as,a,link,to,xcontent,and,parsed,back,using,a,parsing,method,like,link,shard,info,from,xcontent,xcontent,parser,the,shard,info,randomly,contains,shard,failures,param,random,random,generator;public,static,tuple,shard,info,shard,info,random,shard,info,random,random,return,random,shard,info,random,random,next,boolean
RandomObjects -> public static Tuple<ShardInfo, ShardInfo> randomShardInfo(Random random);1549356476;Returns a tuple that contains a randomized {@link ShardInfo} value (left side) and its corresponding_value (right side) after it has been printed out as a {@link ToXContent} and parsed back using a parsing_method like {@link ShardInfo#fromXContent(XContentParser)}. The ShardInfo randomly contains shard failures.__@param random Random generator;public static Tuple<ShardInfo, ShardInfo> randomShardInfo(Random random) {_        return randomShardInfo(random, random.nextBoolean())__    };returns,a,tuple,that,contains,a,randomized,link,shard,info,value,left,side,and,its,corresponding,value,right,side,after,it,has,been,printed,out,as,a,link,to,xcontent,and,parsed,back,using,a,parsing,method,like,link,shard,info,from,xcontent,xcontent,parser,the,shard,info,randomly,contains,shard,failures,param,random,random,generator;public,static,tuple,shard,info,shard,info,random,shard,info,random,random,return,random,shard,info,random,random,next,boolean
RandomObjects -> public static BytesReference randomSource(Random random, XContentType xContentType);1524684173;Returns a random source in a given XContentType containing a random number of fields, objects and array, with maximum depth 5._The minimum number of fields per object is 1.__@param random Random generator;public static BytesReference randomSource(Random random, XContentType xContentType) {_        return randomSource(random, xContentType, 1)__    };returns,a,random,source,in,a,given,xcontent,type,containing,a,random,number,of,fields,objects,and,array,with,maximum,depth,5,the,minimum,number,of,fields,per,object,is,1,param,random,random,generator;public,static,bytes,reference,random,source,random,random,xcontent,type,x,content,type,return,random,source,random,x,content,type,1
RandomObjects -> public static BytesReference randomSource(Random random, XContentType xContentType);1531179852;Returns a random source in a given XContentType containing a random number of fields, objects and array, with maximum depth 5._The minimum number of fields per object is 1.__@param random Random generator;public static BytesReference randomSource(Random random, XContentType xContentType) {_        return randomSource(random, xContentType, 1)__    };returns,a,random,source,in,a,given,xcontent,type,containing,a,random,number,of,fields,objects,and,array,with,maximum,depth,5,the,minimum,number,of,fields,per,object,is,1,param,random,random,generator;public,static,bytes,reference,random,source,random,random,xcontent,type,x,content,type,return,random,source,random,x,content,type,1
RandomObjects -> public static BytesReference randomSource(Random random, XContentType xContentType);1533063033;Returns a random source in a given XContentType containing a random number of fields, objects and array, with maximum depth 5._The minimum number of fields per object is 1.__@param random Random generator;public static BytesReference randomSource(Random random, XContentType xContentType) {_        return randomSource(random, xContentType, 1)__    };returns,a,random,source,in,a,given,xcontent,type,containing,a,random,number,of,fields,objects,and,array,with,maximum,depth,5,the,minimum,number,of,fields,per,object,is,1,param,random,random,generator;public,static,bytes,reference,random,source,random,random,xcontent,type,x,content,type,return,random,source,random,x,content,type,1
RandomObjects -> public static BytesReference randomSource(Random random, XContentType xContentType);1544810257;Returns a random source in a given XContentType containing a random number of fields, objects and array, with maximum depth 5._The minimum number of fields per object is 1.__@param random Random generator;public static BytesReference randomSource(Random random, XContentType xContentType) {_        return randomSource(random, xContentType, 1)__    };returns,a,random,source,in,a,given,xcontent,type,containing,a,random,number,of,fields,objects,and,array,with,maximum,depth,5,the,minimum,number,of,fields,per,object,is,1,param,random,random,generator;public,static,bytes,reference,random,source,random,random,xcontent,type,x,content,type,return,random,source,random,x,content,type,1
RandomObjects -> public static BytesReference randomSource(Random random, XContentType xContentType);1545077999;Returns a random source in a given XContentType containing a random number of fields, objects and array, with maximum depth 5._The minimum number of fields per object is 1.__@param random Random generator;public static BytesReference randomSource(Random random, XContentType xContentType) {_        return randomSource(random, xContentType, 1)__    };returns,a,random,source,in,a,given,xcontent,type,containing,a,random,number,of,fields,objects,and,array,with,maximum,depth,5,the,minimum,number,of,fields,per,object,is,1,param,random,random,generator;public,static,bytes,reference,random,source,random,random,xcontent,type,x,content,type,return,random,source,random,x,content,type,1
RandomObjects -> public static BytesReference randomSource(Random random, XContentType xContentType);1549356476;Returns a random source in a given XContentType containing a random number of fields, objects and array, with maximum depth 5._The minimum number of fields per object is 1.__@param random Random generator;public static BytesReference randomSource(Random random, XContentType xContentType) {_        return randomSource(random, xContentType, 1)__    };returns,a,random,source,in,a,given,xcontent,type,containing,a,random,number,of,fields,objects,and,array,with,maximum,depth,5,the,minimum,number,of,fields,per,object,is,1,param,random,random,generator;public,static,bytes,reference,random,source,random,random,xcontent,type,x,content,type,return,random,source,random,x,content,type,1
RandomObjects -> public static BytesReference randomSource(Random random);1524684173;Returns a random source containing a random number of fields, objects and array, with maximum depth 5.__@param random Random generator;public static BytesReference randomSource(Random random) {_        _        return randomSource(random, RandomPicks.randomFrom(random, XContentType.values()))__    };returns,a,random,source,containing,a,random,number,of,fields,objects,and,array,with,maximum,depth,5,param,random,random,generator;public,static,bytes,reference,random,source,random,random,return,random,source,random,random,picks,random,from,random,xcontent,type,values
RandomObjects -> public static BytesReference randomSource(Random random);1531179852;Returns a random source containing a random number of fields, objects and array, with maximum depth 5.__@param random Random generator;public static BytesReference randomSource(Random random) {_        _        return randomSource(random, RandomPicks.randomFrom(random, XContentType.values()))__    };returns,a,random,source,containing,a,random,number,of,fields,objects,and,array,with,maximum,depth,5,param,random,random,generator;public,static,bytes,reference,random,source,random,random,return,random,source,random,random,picks,random,from,random,xcontent,type,values
RandomObjects -> public static BytesReference randomSource(Random random);1533063033;Returns a random source containing a random number of fields, objects and array, with maximum depth 5.__@param random Random generator;public static BytesReference randomSource(Random random) {_        _        return randomSource(random, RandomPicks.randomFrom(random, XContentType.values()))__    };returns,a,random,source,containing,a,random,number,of,fields,objects,and,array,with,maximum,depth,5,param,random,random,generator;public,static,bytes,reference,random,source,random,random,return,random,source,random,random,picks,random,from,random,xcontent,type,values
RandomObjects -> public static BytesReference randomSource(Random random);1544810257;Returns a random source containing a random number of fields, objects and array, with maximum depth 5.__@param random Random generator;public static BytesReference randomSource(Random random) {_        _        return randomSource(random, RandomPicks.randomFrom(random, XContentType.values()))__    };returns,a,random,source,containing,a,random,number,of,fields,objects,and,array,with,maximum,depth,5,param,random,random,generator;public,static,bytes,reference,random,source,random,random,return,random,source,random,random,picks,random,from,random,xcontent,type,values
RandomObjects -> public static BytesReference randomSource(Random random);1545077999;Returns a random source containing a random number of fields, objects and array, with maximum depth 5.__@param random Random generator;public static BytesReference randomSource(Random random) {_        _        return randomSource(random, RandomPicks.randomFrom(random, XContentType.values()))__    };returns,a,random,source,containing,a,random,number,of,fields,objects,and,array,with,maximum,depth,5,param,random,random,generator;public,static,bytes,reference,random,source,random,random,return,random,source,random,random,picks,random,from,random,xcontent,type,values
RandomObjects -> public static BytesReference randomSource(Random random);1549356476;Returns a random source containing a random number of fields, objects and array, with maximum depth 5.__@param random Random generator;public static BytesReference randomSource(Random random) {_        _        return randomSource(random, RandomPicks.randomFrom(random, XContentType.values()))__    };returns,a,random,source,containing,a,random,number,of,fields,objects,and,array,with,maximum,depth,5,param,random,random,generator;public,static,bytes,reference,random,source,random,random,return,random,source,random,random,picks,random,from,random,xcontent,type,values
RandomObjects -> private static Tuple<Failure, Failure> randomShardInfoFailure(Random random);1524684173;Returns a tuple that contains a randomized {@link Failure} value (left side) and its corresponding_value (right side) after it has been printed out as a {@link ToXContent} and parsed back using a parsing_method like {@link ShardInfo.Failure#fromXContent(XContentParser)}.__@param random Random generator;private static Tuple<Failure, Failure> randomShardInfoFailure(Random random) {_        String index = randomAsciiOfLength(random, 5)__        String indexUuid = randomAsciiOfLength(random, 5)__        int shardId = randomIntBetween(random, 1, 10)__        String nodeId = randomAsciiOfLength(random, 5)__        RestStatus status = randomFrom(random, RestStatus.INTERNAL_SERVER_ERROR, RestStatus.FORBIDDEN, RestStatus.NOT_FOUND)__        boolean primary = random.nextBoolean()__        ShardId shard = new ShardId(index, indexUuid, shardId)___        Exception actualException__        ElasticsearchException expectedException___        int type = randomIntBetween(random, 0, 3)__        switch (type) {_            case 0:_                actualException = new ClusterBlockException(singleton(DiscoverySettings.NO_MASTER_BLOCK_WRITES))__                expectedException = new ElasticsearchException("Elasticsearch exception [type=cluster_block_exception, " +_                        "reason=blocked by: [SERVICE_UNAVAILABLE/2/no master]_]")__                break__            case 1:_                actualException = new ShardNotFoundException(shard)__                expectedException = new ElasticsearchException("Elasticsearch exception [type=shard_not_found_exception, " +_                        "reason=no such shard]")__                expectedException.setShard(shard)__                break__            case 2:_                actualException = new IllegalArgumentException("Closed resource", new RuntimeException("Resource"))__                expectedException = new ElasticsearchException("Elasticsearch exception [type=illegal_argument_exception, " +_                        "reason=Closed resource]",_                        new ElasticsearchException("Elasticsearch exception [type=runtime_exception, reason=Resource]"))__                break__            case 3:_                actualException = new IndexShardRecoveringException(shard)__                expectedException = new ElasticsearchException("Elasticsearch exception [type=index_shard_recovering_exception, " +_                        "reason=CurrentState[RECOVERING] Already recovering]")__                expectedException.setShard(shard)__                break__            default:_                throw new UnsupportedOperationException("No randomized exceptions generated for type [" + type + "]")__        }__        Failure actual = new Failure(shard, nodeId, actualException, status, primary)__        Failure expected = new Failure(new ShardId(index, INDEX_UUID_NA_VALUE, shardId), nodeId, expectedException, status, primary)___        return Tuple.tuple(actual, expected)__    };returns,a,tuple,that,contains,a,randomized,link,failure,value,left,side,and,its,corresponding,value,right,side,after,it,has,been,printed,out,as,a,link,to,xcontent,and,parsed,back,using,a,parsing,method,like,link,shard,info,failure,from,xcontent,xcontent,parser,param,random,random,generator;private,static,tuple,failure,failure,random,shard,info,failure,random,random,string,index,random,ascii,of,length,random,5,string,index,uuid,random,ascii,of,length,random,5,int,shard,id,random,int,between,random,1,10,string,node,id,random,ascii,of,length,random,5,rest,status,status,random,from,random,rest,status,rest,status,forbidden,rest,status,boolean,primary,random,next,boolean,shard,id,shard,new,shard,id,index,index,uuid,shard,id,exception,actual,exception,elasticsearch,exception,expected,exception,int,type,random,int,between,random,0,3,switch,type,case,0,actual,exception,new,cluster,block,exception,singleton,discovery,settings,expected,exception,new,elasticsearch,exception,elasticsearch,exception,type,reason,blocked,by,2,no,master,break,case,1,actual,exception,new,shard,not,found,exception,shard,expected,exception,new,elasticsearch,exception,elasticsearch,exception,type,reason,no,such,shard,expected,exception,set,shard,shard,break,case,2,actual,exception,new,illegal,argument,exception,closed,resource,new,runtime,exception,resource,expected,exception,new,elasticsearch,exception,elasticsearch,exception,type,reason,closed,resource,new,elasticsearch,exception,elasticsearch,exception,type,reason,resource,break,case,3,actual,exception,new,index,shard,recovering,exception,shard,expected,exception,new,elasticsearch,exception,elasticsearch,exception,type,reason,current,state,recovering,already,recovering,expected,exception,set,shard,shard,break,default,throw,new,unsupported,operation,exception,no,randomized,exceptions,generated,for,type,type,failure,actual,new,failure,shard,node,id,actual,exception,status,primary,failure,expected,new,failure,new,shard,id,index,shard,id,node,id,expected,exception,status,primary,return,tuple,tuple,actual,expected
RandomObjects -> private static Tuple<Failure, Failure> randomShardInfoFailure(Random random);1531179852;Returns a tuple that contains a randomized {@link Failure} value (left side) and its corresponding_value (right side) after it has been printed out as a {@link ToXContent} and parsed back using a parsing_method like {@link ShardInfo.Failure#fromXContent(XContentParser)}.__@param random Random generator;private static Tuple<Failure, Failure> randomShardInfoFailure(Random random) {_        String index = randomAsciiOfLength(random, 5)__        String indexUuid = randomAsciiOfLength(random, 5)__        int shardId = randomIntBetween(random, 1, 10)__        String nodeId = randomAsciiOfLength(random, 5)__        RestStatus status = randomFrom(random, RestStatus.INTERNAL_SERVER_ERROR, RestStatus.FORBIDDEN, RestStatus.NOT_FOUND)__        boolean primary = random.nextBoolean()__        ShardId shard = new ShardId(index, indexUuid, shardId)___        Exception actualException__        ElasticsearchException expectedException___        int type = randomIntBetween(random, 0, 3)__        switch (type) {_            case 0:_                actualException = new ClusterBlockException(singleton(DiscoverySettings.NO_MASTER_BLOCK_WRITES))__                expectedException = new ElasticsearchException("Elasticsearch exception [type=cluster_block_exception, " +_                        "reason=blocked by: [SERVICE_UNAVAILABLE/2/no master]_]")__                break__            case 1:_                actualException = new ShardNotFoundException(shard)__                expectedException = new ElasticsearchException("Elasticsearch exception [type=shard_not_found_exception, " +_                        "reason=no such shard]")__                expectedException.setShard(shard)__                break__            case 2:_                actualException = new IllegalArgumentException("Closed resource", new RuntimeException("Resource"))__                expectedException = new ElasticsearchException("Elasticsearch exception [type=illegal_argument_exception, " +_                        "reason=Closed resource]",_                        new ElasticsearchException("Elasticsearch exception [type=runtime_exception, reason=Resource]"))__                break__            case 3:_                actualException = new IndexShardRecoveringException(shard)__                expectedException = new ElasticsearchException("Elasticsearch exception [type=index_shard_recovering_exception, " +_                        "reason=CurrentState[RECOVERING] Already recovering]")__                expectedException.setShard(shard)__                break__            default:_                throw new UnsupportedOperationException("No randomized exceptions generated for type [" + type + "]")__        }__        Failure actual = new Failure(shard, nodeId, actualException, status, primary)__        Failure expected = new Failure(new ShardId(index, INDEX_UUID_NA_VALUE, shardId), nodeId, expectedException, status, primary)___        return Tuple.tuple(actual, expected)__    };returns,a,tuple,that,contains,a,randomized,link,failure,value,left,side,and,its,corresponding,value,right,side,after,it,has,been,printed,out,as,a,link,to,xcontent,and,parsed,back,using,a,parsing,method,like,link,shard,info,failure,from,xcontent,xcontent,parser,param,random,random,generator;private,static,tuple,failure,failure,random,shard,info,failure,random,random,string,index,random,ascii,of,length,random,5,string,index,uuid,random,ascii,of,length,random,5,int,shard,id,random,int,between,random,1,10,string,node,id,random,ascii,of,length,random,5,rest,status,status,random,from,random,rest,status,rest,status,forbidden,rest,status,boolean,primary,random,next,boolean,shard,id,shard,new,shard,id,index,index,uuid,shard,id,exception,actual,exception,elasticsearch,exception,expected,exception,int,type,random,int,between,random,0,3,switch,type,case,0,actual,exception,new,cluster,block,exception,singleton,discovery,settings,expected,exception,new,elasticsearch,exception,elasticsearch,exception,type,reason,blocked,by,2,no,master,break,case,1,actual,exception,new,shard,not,found,exception,shard,expected,exception,new,elasticsearch,exception,elasticsearch,exception,type,reason,no,such,shard,expected,exception,set,shard,shard,break,case,2,actual,exception,new,illegal,argument,exception,closed,resource,new,runtime,exception,resource,expected,exception,new,elasticsearch,exception,elasticsearch,exception,type,reason,closed,resource,new,elasticsearch,exception,elasticsearch,exception,type,reason,resource,break,case,3,actual,exception,new,index,shard,recovering,exception,shard,expected,exception,new,elasticsearch,exception,elasticsearch,exception,type,reason,current,state,recovering,already,recovering,expected,exception,set,shard,shard,break,default,throw,new,unsupported,operation,exception,no,randomized,exceptions,generated,for,type,type,failure,actual,new,failure,shard,node,id,actual,exception,status,primary,failure,expected,new,failure,new,shard,id,index,shard,id,node,id,expected,exception,status,primary,return,tuple,tuple,actual,expected
RandomObjects -> private static Tuple<Failure, Failure> randomShardInfoFailure(Random random);1533063033;Returns a tuple that contains a randomized {@link Failure} value (left side) and its corresponding_value (right side) after it has been printed out as a {@link ToXContent} and parsed back using a parsing_method like {@link ShardInfo.Failure#fromXContent(XContentParser)}.__@param random Random generator;private static Tuple<Failure, Failure> randomShardInfoFailure(Random random) {_        String index = randomAsciiLettersOfLength(random, 5)__        String indexUuid = randomAsciiLettersOfLength(random, 5)__        int shardId = randomIntBetween(random, 1, 10)__        String nodeId = randomAsciiLettersOfLength(random, 5)__        RestStatus status = randomFrom(random, RestStatus.INTERNAL_SERVER_ERROR, RestStatus.FORBIDDEN, RestStatus.NOT_FOUND)__        boolean primary = random.nextBoolean()__        ShardId shard = new ShardId(index, indexUuid, shardId)___        Exception actualException__        ElasticsearchException expectedException___        int type = randomIntBetween(random, 0, 3)__        switch (type) {_            case 0:_                actualException = new ClusterBlockException(singleton(DiscoverySettings.NO_MASTER_BLOCK_WRITES))__                expectedException = new ElasticsearchException("Elasticsearch exception [type=cluster_block_exception, " +_                        "reason=blocked by: [SERVICE_UNAVAILABLE/2/no master]_]")__                break__            case 1:_                actualException = new ShardNotFoundException(shard)__                expectedException = new ElasticsearchException("Elasticsearch exception [type=shard_not_found_exception, " +_                        "reason=no such shard]")__                expectedException.setShard(shard)__                break__            case 2:_                actualException = new IllegalArgumentException("Closed resource", new RuntimeException("Resource"))__                expectedException = new ElasticsearchException("Elasticsearch exception [type=illegal_argument_exception, " +_                        "reason=Closed resource]",_                        new ElasticsearchException("Elasticsearch exception [type=runtime_exception, reason=Resource]"))__                break__            case 3:_                actualException = new IndexShardRecoveringException(shard)__                expectedException = new ElasticsearchException("Elasticsearch exception [type=index_shard_recovering_exception, " +_                        "reason=CurrentState[RECOVERING] Already recovering]")__                expectedException.setShard(shard)__                break__            default:_                throw new UnsupportedOperationException("No randomized exceptions generated for type [" + type + "]")__        }__        Failure actual = new Failure(shard, nodeId, actualException, status, primary)__        Failure expected = new Failure(new ShardId(index, INDEX_UUID_NA_VALUE, shardId), nodeId, expectedException, status, primary)___        return Tuple.tuple(actual, expected)__    };returns,a,tuple,that,contains,a,randomized,link,failure,value,left,side,and,its,corresponding,value,right,side,after,it,has,been,printed,out,as,a,link,to,xcontent,and,parsed,back,using,a,parsing,method,like,link,shard,info,failure,from,xcontent,xcontent,parser,param,random,random,generator;private,static,tuple,failure,failure,random,shard,info,failure,random,random,string,index,random,ascii,letters,of,length,random,5,string,index,uuid,random,ascii,letters,of,length,random,5,int,shard,id,random,int,between,random,1,10,string,node,id,random,ascii,letters,of,length,random,5,rest,status,status,random,from,random,rest,status,rest,status,forbidden,rest,status,boolean,primary,random,next,boolean,shard,id,shard,new,shard,id,index,index,uuid,shard,id,exception,actual,exception,elasticsearch,exception,expected,exception,int,type,random,int,between,random,0,3,switch,type,case,0,actual,exception,new,cluster,block,exception,singleton,discovery,settings,expected,exception,new,elasticsearch,exception,elasticsearch,exception,type,reason,blocked,by,2,no,master,break,case,1,actual,exception,new,shard,not,found,exception,shard,expected,exception,new,elasticsearch,exception,elasticsearch,exception,type,reason,no,such,shard,expected,exception,set,shard,shard,break,case,2,actual,exception,new,illegal,argument,exception,closed,resource,new,runtime,exception,resource,expected,exception,new,elasticsearch,exception,elasticsearch,exception,type,reason,closed,resource,new,elasticsearch,exception,elasticsearch,exception,type,reason,resource,break,case,3,actual,exception,new,index,shard,recovering,exception,shard,expected,exception,new,elasticsearch,exception,elasticsearch,exception,type,reason,current,state,recovering,already,recovering,expected,exception,set,shard,shard,break,default,throw,new,unsupported,operation,exception,no,randomized,exceptions,generated,for,type,type,failure,actual,new,failure,shard,node,id,actual,exception,status,primary,failure,expected,new,failure,new,shard,id,index,shard,id,node,id,expected,exception,status,primary,return,tuple,tuple,actual,expected
RandomObjects -> private static Tuple<Failure, Failure> randomShardInfoFailure(Random random);1544810257;Returns a tuple that contains a randomized {@link Failure} value (left side) and its corresponding_value (right side) after it has been printed out as a {@link ToXContent} and parsed back using a parsing_method like {@link ShardInfo.Failure#fromXContent(XContentParser)}.__@param random Random generator;private static Tuple<Failure, Failure> randomShardInfoFailure(Random random) {_        String index = randomAsciiLettersOfLength(random, 5)__        String indexUuid = randomAsciiLettersOfLength(random, 5)__        int shardId = randomIntBetween(random, 1, 10)__        String nodeId = randomAsciiLettersOfLength(random, 5)__        RestStatus status = randomFrom(random, RestStatus.INTERNAL_SERVER_ERROR, RestStatus.FORBIDDEN, RestStatus.NOT_FOUND)__        boolean primary = random.nextBoolean()__        ShardId shard = new ShardId(index, indexUuid, shardId)___        Exception actualException__        ElasticsearchException expectedException___        int type = randomIntBetween(random, 0, 3)__        switch (type) {_            case 0:_                actualException = new ClusterBlockException(singleton(DiscoverySettings.NO_MASTER_BLOCK_WRITES))__                expectedException = new ElasticsearchException("Elasticsearch exception [type=cluster_block_exception, " +_                        "reason=blocked by: [SERVICE_UNAVAILABLE/2/no master]_]")__                break__            case 1:_                actualException = new ShardNotFoundException(shard)__                expectedException = new ElasticsearchException("Elasticsearch exception [type=shard_not_found_exception, " +_                        "reason=no such shard]")__                expectedException.setShard(shard)__                break__            case 2:_                actualException = new IllegalArgumentException("Closed resource", new RuntimeException("Resource"))__                expectedException = new ElasticsearchException("Elasticsearch exception [type=illegal_argument_exception, " +_                        "reason=Closed resource]",_                        new ElasticsearchException("Elasticsearch exception [type=runtime_exception, reason=Resource]"))__                break__            case 3:_                actualException = new IndexShardRecoveringException(shard)__                expectedException = new ElasticsearchException("Elasticsearch exception [type=index_shard_recovering_exception, " +_                        "reason=CurrentState[RECOVERING] Already recovering]")__                expectedException.setShard(shard)__                break__            default:_                throw new UnsupportedOperationException("No randomized exceptions generated for type [" + type + "]")__        }__        Failure actual = new Failure(shard, nodeId, actualException, status, primary)__        Failure expected = new Failure(new ShardId(index, INDEX_UUID_NA_VALUE, shardId), nodeId, expectedException, status, primary)___        return Tuple.tuple(actual, expected)__    };returns,a,tuple,that,contains,a,randomized,link,failure,value,left,side,and,its,corresponding,value,right,side,after,it,has,been,printed,out,as,a,link,to,xcontent,and,parsed,back,using,a,parsing,method,like,link,shard,info,failure,from,xcontent,xcontent,parser,param,random,random,generator;private,static,tuple,failure,failure,random,shard,info,failure,random,random,string,index,random,ascii,letters,of,length,random,5,string,index,uuid,random,ascii,letters,of,length,random,5,int,shard,id,random,int,between,random,1,10,string,node,id,random,ascii,letters,of,length,random,5,rest,status,status,random,from,random,rest,status,rest,status,forbidden,rest,status,boolean,primary,random,next,boolean,shard,id,shard,new,shard,id,index,index,uuid,shard,id,exception,actual,exception,elasticsearch,exception,expected,exception,int,type,random,int,between,random,0,3,switch,type,case,0,actual,exception,new,cluster,block,exception,singleton,discovery,settings,expected,exception,new,elasticsearch,exception,elasticsearch,exception,type,reason,blocked,by,2,no,master,break,case,1,actual,exception,new,shard,not,found,exception,shard,expected,exception,new,elasticsearch,exception,elasticsearch,exception,type,reason,no,such,shard,expected,exception,set,shard,shard,break,case,2,actual,exception,new,illegal,argument,exception,closed,resource,new,runtime,exception,resource,expected,exception,new,elasticsearch,exception,elasticsearch,exception,type,reason,closed,resource,new,elasticsearch,exception,elasticsearch,exception,type,reason,resource,break,case,3,actual,exception,new,index,shard,recovering,exception,shard,expected,exception,new,elasticsearch,exception,elasticsearch,exception,type,reason,current,state,recovering,already,recovering,expected,exception,set,shard,shard,break,default,throw,new,unsupported,operation,exception,no,randomized,exceptions,generated,for,type,type,failure,actual,new,failure,shard,node,id,actual,exception,status,primary,failure,expected,new,failure,new,shard,id,index,shard,id,node,id,expected,exception,status,primary,return,tuple,tuple,actual,expected
RandomObjects -> private static Tuple<Failure, Failure> randomShardInfoFailure(Random random);1545077999;Returns a tuple that contains a randomized {@link Failure} value (left side) and its corresponding_value (right side) after it has been printed out as a {@link ToXContent} and parsed back using a parsing_method like {@link ShardInfo.Failure#fromXContent(XContentParser)}.__@param random Random generator;private static Tuple<Failure, Failure> randomShardInfoFailure(Random random) {_        String index = randomAsciiLettersOfLength(random, 5)__        String indexUuid = randomAsciiLettersOfLength(random, 5)__        int shardId = randomIntBetween(random, 1, 10)__        String nodeId = randomAsciiLettersOfLength(random, 5)__        RestStatus status = randomFrom(random, RestStatus.INTERNAL_SERVER_ERROR, RestStatus.FORBIDDEN, RestStatus.NOT_FOUND)__        boolean primary = random.nextBoolean()__        ShardId shard = new ShardId(index, indexUuid, shardId)___        Exception actualException__        ElasticsearchException expectedException___        int type = randomIntBetween(random, 0, 3)__        switch (type) {_            case 0:_                actualException = new ClusterBlockException(singleton(DiscoverySettings.NO_MASTER_BLOCK_WRITES))__                expectedException = new ElasticsearchException("Elasticsearch exception [type=cluster_block_exception, " +_                        "reason=blocked by: [SERVICE_UNAVAILABLE/2/no master]_]")__                break__            case 1:_                actualException = new ShardNotFoundException(shard)__                expectedException = new ElasticsearchException("Elasticsearch exception [type=shard_not_found_exception, " +_                        "reason=no such shard]")__                expectedException.setShard(shard)__                break__            case 2:_                actualException = new IllegalArgumentException("Closed resource", new RuntimeException("Resource"))__                expectedException = new ElasticsearchException("Elasticsearch exception [type=illegal_argument_exception, " +_                        "reason=Closed resource]",_                        new ElasticsearchException("Elasticsearch exception [type=runtime_exception, reason=Resource]"))__                break__            case 3:_                actualException = new IndexShardRecoveringException(shard)__                expectedException = new ElasticsearchException("Elasticsearch exception [type=index_shard_recovering_exception, " +_                        "reason=CurrentState[RECOVERING] Already recovering]")__                expectedException.setShard(shard)__                break__            default:_                throw new UnsupportedOperationException("No randomized exceptions generated for type [" + type + "]")__        }__        Failure actual = new Failure(shard, nodeId, actualException, status, primary)__        Failure expected = new Failure(new ShardId(index, INDEX_UUID_NA_VALUE, shardId), nodeId, expectedException, status, primary)___        return Tuple.tuple(actual, expected)__    };returns,a,tuple,that,contains,a,randomized,link,failure,value,left,side,and,its,corresponding,value,right,side,after,it,has,been,printed,out,as,a,link,to,xcontent,and,parsed,back,using,a,parsing,method,like,link,shard,info,failure,from,xcontent,xcontent,parser,param,random,random,generator;private,static,tuple,failure,failure,random,shard,info,failure,random,random,string,index,random,ascii,letters,of,length,random,5,string,index,uuid,random,ascii,letters,of,length,random,5,int,shard,id,random,int,between,random,1,10,string,node,id,random,ascii,letters,of,length,random,5,rest,status,status,random,from,random,rest,status,rest,status,forbidden,rest,status,boolean,primary,random,next,boolean,shard,id,shard,new,shard,id,index,index,uuid,shard,id,exception,actual,exception,elasticsearch,exception,expected,exception,int,type,random,int,between,random,0,3,switch,type,case,0,actual,exception,new,cluster,block,exception,singleton,discovery,settings,expected,exception,new,elasticsearch,exception,elasticsearch,exception,type,reason,blocked,by,2,no,master,break,case,1,actual,exception,new,shard,not,found,exception,shard,expected,exception,new,elasticsearch,exception,elasticsearch,exception,type,reason,no,such,shard,expected,exception,set,shard,shard,break,case,2,actual,exception,new,illegal,argument,exception,closed,resource,new,runtime,exception,resource,expected,exception,new,elasticsearch,exception,elasticsearch,exception,type,reason,closed,resource,new,elasticsearch,exception,elasticsearch,exception,type,reason,resource,break,case,3,actual,exception,new,index,shard,recovering,exception,shard,expected,exception,new,elasticsearch,exception,elasticsearch,exception,type,reason,current,state,recovering,already,recovering,expected,exception,set,shard,shard,break,default,throw,new,unsupported,operation,exception,no,randomized,exceptions,generated,for,type,type,failure,actual,new,failure,shard,node,id,actual,exception,status,primary,failure,expected,new,failure,new,shard,id,index,shard,id,node,id,expected,exception,status,primary,return,tuple,tuple,actual,expected
RandomObjects -> private static Tuple<Failure, Failure> randomShardInfoFailure(Random random);1549356476;Returns a tuple that contains a randomized {@link Failure} value (left side) and its corresponding_value (right side) after it has been printed out as a {@link ToXContent} and parsed back using a parsing_method like {@link ShardInfo.Failure#fromXContent(XContentParser)}.__@param random Random generator;private static Tuple<Failure, Failure> randomShardInfoFailure(Random random) {_        String index = randomAsciiLettersOfLength(random, 5)__        String indexUuid = randomAsciiLettersOfLength(random, 5)__        int shardId = randomIntBetween(random, 1, 10)__        String nodeId = randomAsciiLettersOfLength(random, 5)__        RestStatus status = randomFrom(random, RestStatus.INTERNAL_SERVER_ERROR, RestStatus.FORBIDDEN, RestStatus.NOT_FOUND)__        boolean primary = random.nextBoolean()__        ShardId shard = new ShardId(index, indexUuid, shardId)___        Exception actualException__        ElasticsearchException expectedException___        int type = randomIntBetween(random, 0, 3)__        switch (type) {_            case 0:_                actualException = new ClusterBlockException(singleton(NoMasterBlockService.NO_MASTER_BLOCK_WRITES))__                expectedException = new ElasticsearchException("Elasticsearch exception [type=cluster_block_exception, " +_                        "reason=blocked by: [SERVICE_UNAVAILABLE/2/no master]_]")__                break__            case 1:_                actualException = new ShardNotFoundException(shard)__                expectedException = new ElasticsearchException("Elasticsearch exception [type=shard_not_found_exception, " +_                        "reason=no such shard]")__                expectedException.setShard(shard)__                break__            case 2:_                actualException = new IllegalArgumentException("Closed resource", new RuntimeException("Resource"))__                expectedException = new ElasticsearchException("Elasticsearch exception [type=illegal_argument_exception, " +_                        "reason=Closed resource]",_                        new ElasticsearchException("Elasticsearch exception [type=runtime_exception, reason=Resource]"))__                break__            case 3:_                actualException = new IndexShardRecoveringException(shard)__                expectedException = new ElasticsearchException("Elasticsearch exception [type=index_shard_recovering_exception, " +_                        "reason=CurrentState[RECOVERING] Already recovering]")__                expectedException.setShard(shard)__                break__            default:_                throw new UnsupportedOperationException("No randomized exceptions generated for type [" + type + "]")__        }__        Failure actual = new Failure(shard, nodeId, actualException, status, primary)__        Failure expected = new Failure(new ShardId(index, INDEX_UUID_NA_VALUE, shardId), nodeId, expectedException, status, primary)___        return Tuple.tuple(actual, expected)__    };returns,a,tuple,that,contains,a,randomized,link,failure,value,left,side,and,its,corresponding,value,right,side,after,it,has,been,printed,out,as,a,link,to,xcontent,and,parsed,back,using,a,parsing,method,like,link,shard,info,failure,from,xcontent,xcontent,parser,param,random,random,generator;private,static,tuple,failure,failure,random,shard,info,failure,random,random,string,index,random,ascii,letters,of,length,random,5,string,index,uuid,random,ascii,letters,of,length,random,5,int,shard,id,random,int,between,random,1,10,string,node,id,random,ascii,letters,of,length,random,5,rest,status,status,random,from,random,rest,status,rest,status,forbidden,rest,status,boolean,primary,random,next,boolean,shard,id,shard,new,shard,id,index,index,uuid,shard,id,exception,actual,exception,elasticsearch,exception,expected,exception,int,type,random,int,between,random,0,3,switch,type,case,0,actual,exception,new,cluster,block,exception,singleton,no,master,block,service,expected,exception,new,elasticsearch,exception,elasticsearch,exception,type,reason,blocked,by,2,no,master,break,case,1,actual,exception,new,shard,not,found,exception,shard,expected,exception,new,elasticsearch,exception,elasticsearch,exception,type,reason,no,such,shard,expected,exception,set,shard,shard,break,case,2,actual,exception,new,illegal,argument,exception,closed,resource,new,runtime,exception,resource,expected,exception,new,elasticsearch,exception,elasticsearch,exception,type,reason,closed,resource,new,elasticsearch,exception,elasticsearch,exception,type,reason,resource,break,case,3,actual,exception,new,index,shard,recovering,exception,shard,expected,exception,new,elasticsearch,exception,elasticsearch,exception,type,reason,current,state,recovering,already,recovering,expected,exception,set,shard,shard,break,default,throw,new,unsupported,operation,exception,no,randomized,exceptions,generated,for,type,type,failure,actual,new,failure,shard,node,id,actual,exception,status,primary,failure,expected,new,failure,new,shard,id,index,shard,id,node,id,expected,exception,status,primary,return,tuple,tuple,actual,expected
RandomObjects -> public static Tuple<ShardInfo, ShardInfo> randomShardInfo(Random random, boolean withShardFailures);1524684173;Returns a tuple that contains a randomized {@link ShardInfo} value (left side) and its corresponding_value (right side) after it has been printed out as a {@link ToXContent} and parsed back using a parsing_method like {@link ShardInfo#fromXContent(XContentParser)}. A `withShardFailures` parameter indicates if_the randomized ShardInfo must or must not contain shard failures.__@param random            Random generator_@param withShardFailures indicates if the generated ShardInfo must contain shard failures;public static Tuple<ShardInfo, ShardInfo> randomShardInfo(Random random, boolean withShardFailures) {_        int total = randomIntBetween(random, 1, 10)__        if (withShardFailures == false) {_            return Tuple.tuple(new ShardInfo(total, total), new ShardInfo(total, total))__        }__        int successful = randomIntBetween(random, 1, Math.max(1, (total - 1)))__        int failures = Math.max(1, (total - successful))___        Failure[] actualFailures = new Failure[failures]__        Failure[] expectedFailures = new Failure[failures]___        for (int i = 0_ i < failures_ i++) {_            Tuple<Failure, Failure> failure = randomShardInfoFailure(random)__            actualFailures[i] = failure.v1()__            expectedFailures[i] = failure.v2()__        }_        return Tuple.tuple(new ShardInfo(total, successful, actualFailures), new ShardInfo(total, successful, expectedFailures))__    };returns,a,tuple,that,contains,a,randomized,link,shard,info,value,left,side,and,its,corresponding,value,right,side,after,it,has,been,printed,out,as,a,link,to,xcontent,and,parsed,back,using,a,parsing,method,like,link,shard,info,from,xcontent,xcontent,parser,a,with,shard,failures,parameter,indicates,if,the,randomized,shard,info,must,or,must,not,contain,shard,failures,param,random,random,generator,param,with,shard,failures,indicates,if,the,generated,shard,info,must,contain,shard,failures;public,static,tuple,shard,info,shard,info,random,shard,info,random,random,boolean,with,shard,failures,int,total,random,int,between,random,1,10,if,with,shard,failures,false,return,tuple,tuple,new,shard,info,total,total,new,shard,info,total,total,int,successful,random,int,between,random,1,math,max,1,total,1,int,failures,math,max,1,total,successful,failure,actual,failures,new,failure,failures,failure,expected,failures,new,failure,failures,for,int,i,0,i,failures,i,tuple,failure,failure,failure,random,shard,info,failure,random,actual,failures,i,failure,v1,expected,failures,i,failure,v2,return,tuple,tuple,new,shard,info,total,successful,actual,failures,new,shard,info,total,successful,expected,failures
RandomObjects -> public static Tuple<ShardInfo, ShardInfo> randomShardInfo(Random random, boolean withShardFailures);1531179852;Returns a tuple that contains a randomized {@link ShardInfo} value (left side) and its corresponding_value (right side) after it has been printed out as a {@link ToXContent} and parsed back using a parsing_method like {@link ShardInfo#fromXContent(XContentParser)}. A `withShardFailures` parameter indicates if_the randomized ShardInfo must or must not contain shard failures.__@param random            Random generator_@param withShardFailures indicates if the generated ShardInfo must contain shard failures;public static Tuple<ShardInfo, ShardInfo> randomShardInfo(Random random, boolean withShardFailures) {_        int total = randomIntBetween(random, 1, 10)__        if (withShardFailures == false) {_            return Tuple.tuple(new ShardInfo(total, total), new ShardInfo(total, total))__        }__        int successful = randomIntBetween(random, 1, Math.max(1, (total - 1)))__        int failures = Math.max(1, (total - successful))___        Failure[] actualFailures = new Failure[failures]__        Failure[] expectedFailures = new Failure[failures]___        for (int i = 0_ i < failures_ i++) {_            Tuple<Failure, Failure> failure = randomShardInfoFailure(random)__            actualFailures[i] = failure.v1()__            expectedFailures[i] = failure.v2()__        }_        return Tuple.tuple(new ShardInfo(total, successful, actualFailures), new ShardInfo(total, successful, expectedFailures))__    };returns,a,tuple,that,contains,a,randomized,link,shard,info,value,left,side,and,its,corresponding,value,right,side,after,it,has,been,printed,out,as,a,link,to,xcontent,and,parsed,back,using,a,parsing,method,like,link,shard,info,from,xcontent,xcontent,parser,a,with,shard,failures,parameter,indicates,if,the,randomized,shard,info,must,or,must,not,contain,shard,failures,param,random,random,generator,param,with,shard,failures,indicates,if,the,generated,shard,info,must,contain,shard,failures;public,static,tuple,shard,info,shard,info,random,shard,info,random,random,boolean,with,shard,failures,int,total,random,int,between,random,1,10,if,with,shard,failures,false,return,tuple,tuple,new,shard,info,total,total,new,shard,info,total,total,int,successful,random,int,between,random,1,math,max,1,total,1,int,failures,math,max,1,total,successful,failure,actual,failures,new,failure,failures,failure,expected,failures,new,failure,failures,for,int,i,0,i,failures,i,tuple,failure,failure,failure,random,shard,info,failure,random,actual,failures,i,failure,v1,expected,failures,i,failure,v2,return,tuple,tuple,new,shard,info,total,successful,actual,failures,new,shard,info,total,successful,expected,failures
RandomObjects -> public static Tuple<ShardInfo, ShardInfo> randomShardInfo(Random random, boolean withShardFailures);1533063033;Returns a tuple that contains a randomized {@link ShardInfo} value (left side) and its corresponding_value (right side) after it has been printed out as a {@link ToXContent} and parsed back using a parsing_method like {@link ShardInfo#fromXContent(XContentParser)}. A `withShardFailures` parameter indicates if_the randomized ShardInfo must or must not contain shard failures.__@param random            Random generator_@param withShardFailures indicates if the generated ShardInfo must contain shard failures;public static Tuple<ShardInfo, ShardInfo> randomShardInfo(Random random, boolean withShardFailures) {_        int total = randomIntBetween(random, 1, 10)__        if (withShardFailures == false) {_            return Tuple.tuple(new ShardInfo(total, total), new ShardInfo(total, total))__        }__        int successful = randomIntBetween(random, 1, Math.max(1, (total - 1)))__        int failures = Math.max(1, (total - successful))___        Failure[] actualFailures = new Failure[failures]__        Failure[] expectedFailures = new Failure[failures]___        for (int i = 0_ i < failures_ i++) {_            Tuple<Failure, Failure> failure = randomShardInfoFailure(random)__            actualFailures[i] = failure.v1()__            expectedFailures[i] = failure.v2()__        }_        return Tuple.tuple(new ShardInfo(total, successful, actualFailures), new ShardInfo(total, successful, expectedFailures))__    };returns,a,tuple,that,contains,a,randomized,link,shard,info,value,left,side,and,its,corresponding,value,right,side,after,it,has,been,printed,out,as,a,link,to,xcontent,and,parsed,back,using,a,parsing,method,like,link,shard,info,from,xcontent,xcontent,parser,a,with,shard,failures,parameter,indicates,if,the,randomized,shard,info,must,or,must,not,contain,shard,failures,param,random,random,generator,param,with,shard,failures,indicates,if,the,generated,shard,info,must,contain,shard,failures;public,static,tuple,shard,info,shard,info,random,shard,info,random,random,boolean,with,shard,failures,int,total,random,int,between,random,1,10,if,with,shard,failures,false,return,tuple,tuple,new,shard,info,total,total,new,shard,info,total,total,int,successful,random,int,between,random,1,math,max,1,total,1,int,failures,math,max,1,total,successful,failure,actual,failures,new,failure,failures,failure,expected,failures,new,failure,failures,for,int,i,0,i,failures,i,tuple,failure,failure,failure,random,shard,info,failure,random,actual,failures,i,failure,v1,expected,failures,i,failure,v2,return,tuple,tuple,new,shard,info,total,successful,actual,failures,new,shard,info,total,successful,expected,failures
RandomObjects -> public static Tuple<ShardInfo, ShardInfo> randomShardInfo(Random random, boolean withShardFailures);1544810257;Returns a tuple that contains a randomized {@link ShardInfo} value (left side) and its corresponding_value (right side) after it has been printed out as a {@link ToXContent} and parsed back using a parsing_method like {@link ShardInfo#fromXContent(XContentParser)}. A `withShardFailures` parameter indicates if_the randomized ShardInfo must or must not contain shard failures.__@param random            Random generator_@param withShardFailures indicates if the generated ShardInfo must contain shard failures;public static Tuple<ShardInfo, ShardInfo> randomShardInfo(Random random, boolean withShardFailures) {_        int total = randomIntBetween(random, 1, 10)__        if (withShardFailures == false) {_            return Tuple.tuple(new ShardInfo(total, total), new ShardInfo(total, total))__        }__        int successful = randomIntBetween(random, 1, Math.max(1, (total - 1)))__        int failures = Math.max(1, (total - successful))___        Failure[] actualFailures = new Failure[failures]__        Failure[] expectedFailures = new Failure[failures]___        for (int i = 0_ i < failures_ i++) {_            Tuple<Failure, Failure> failure = randomShardInfoFailure(random)__            actualFailures[i] = failure.v1()__            expectedFailures[i] = failure.v2()__        }_        return Tuple.tuple(new ShardInfo(total, successful, actualFailures), new ShardInfo(total, successful, expectedFailures))__    };returns,a,tuple,that,contains,a,randomized,link,shard,info,value,left,side,and,its,corresponding,value,right,side,after,it,has,been,printed,out,as,a,link,to,xcontent,and,parsed,back,using,a,parsing,method,like,link,shard,info,from,xcontent,xcontent,parser,a,with,shard,failures,parameter,indicates,if,the,randomized,shard,info,must,or,must,not,contain,shard,failures,param,random,random,generator,param,with,shard,failures,indicates,if,the,generated,shard,info,must,contain,shard,failures;public,static,tuple,shard,info,shard,info,random,shard,info,random,random,boolean,with,shard,failures,int,total,random,int,between,random,1,10,if,with,shard,failures,false,return,tuple,tuple,new,shard,info,total,total,new,shard,info,total,total,int,successful,random,int,between,random,1,math,max,1,total,1,int,failures,math,max,1,total,successful,failure,actual,failures,new,failure,failures,failure,expected,failures,new,failure,failures,for,int,i,0,i,failures,i,tuple,failure,failure,failure,random,shard,info,failure,random,actual,failures,i,failure,v1,expected,failures,i,failure,v2,return,tuple,tuple,new,shard,info,total,successful,actual,failures,new,shard,info,total,successful,expected,failures
RandomObjects -> public static Tuple<ShardInfo, ShardInfo> randomShardInfo(Random random, boolean withShardFailures);1545077999;Returns a tuple that contains a randomized {@link ShardInfo} value (left side) and its corresponding_value (right side) after it has been printed out as a {@link ToXContent} and parsed back using a parsing_method like {@link ShardInfo#fromXContent(XContentParser)}. A `withShardFailures` parameter indicates if_the randomized ShardInfo must or must not contain shard failures.__@param random            Random generator_@param withShardFailures indicates if the generated ShardInfo must contain shard failures;public static Tuple<ShardInfo, ShardInfo> randomShardInfo(Random random, boolean withShardFailures) {_        int total = randomIntBetween(random, 1, 10)__        if (withShardFailures == false) {_            return Tuple.tuple(new ShardInfo(total, total), new ShardInfo(total, total))__        }__        int successful = randomIntBetween(random, 1, Math.max(1, (total - 1)))__        int failures = Math.max(1, (total - successful))___        Failure[] actualFailures = new Failure[failures]__        Failure[] expectedFailures = new Failure[failures]___        for (int i = 0_ i < failures_ i++) {_            Tuple<Failure, Failure> failure = randomShardInfoFailure(random)__            actualFailures[i] = failure.v1()__            expectedFailures[i] = failure.v2()__        }_        return Tuple.tuple(new ShardInfo(total, successful, actualFailures), new ShardInfo(total, successful, expectedFailures))__    };returns,a,tuple,that,contains,a,randomized,link,shard,info,value,left,side,and,its,corresponding,value,right,side,after,it,has,been,printed,out,as,a,link,to,xcontent,and,parsed,back,using,a,parsing,method,like,link,shard,info,from,xcontent,xcontent,parser,a,with,shard,failures,parameter,indicates,if,the,randomized,shard,info,must,or,must,not,contain,shard,failures,param,random,random,generator,param,with,shard,failures,indicates,if,the,generated,shard,info,must,contain,shard,failures;public,static,tuple,shard,info,shard,info,random,shard,info,random,random,boolean,with,shard,failures,int,total,random,int,between,random,1,10,if,with,shard,failures,false,return,tuple,tuple,new,shard,info,total,total,new,shard,info,total,total,int,successful,random,int,between,random,1,math,max,1,total,1,int,failures,math,max,1,total,successful,failure,actual,failures,new,failure,failures,failure,expected,failures,new,failure,failures,for,int,i,0,i,failures,i,tuple,failure,failure,failure,random,shard,info,failure,random,actual,failures,i,failure,v1,expected,failures,i,failure,v2,return,tuple,tuple,new,shard,info,total,successful,actual,failures,new,shard,info,total,successful,expected,failures
RandomObjects -> public static Tuple<ShardInfo, ShardInfo> randomShardInfo(Random random, boolean withShardFailures);1549356476;Returns a tuple that contains a randomized {@link ShardInfo} value (left side) and its corresponding_value (right side) after it has been printed out as a {@link ToXContent} and parsed back using a parsing_method like {@link ShardInfo#fromXContent(XContentParser)}. A `withShardFailures` parameter indicates if_the randomized ShardInfo must or must not contain shard failures.__@param random            Random generator_@param withShardFailures indicates if the generated ShardInfo must contain shard failures;public static Tuple<ShardInfo, ShardInfo> randomShardInfo(Random random, boolean withShardFailures) {_        int total = randomIntBetween(random, 1, 10)__        if (withShardFailures == false) {_            return Tuple.tuple(new ShardInfo(total, total), new ShardInfo(total, total))__        }__        int successful = randomIntBetween(random, 1, Math.max(1, (total - 1)))__        int failures = Math.max(1, (total - successful))___        Failure[] actualFailures = new Failure[failures]__        Failure[] expectedFailures = new Failure[failures]___        for (int i = 0_ i < failures_ i++) {_            Tuple<Failure, Failure> failure = randomShardInfoFailure(random)__            actualFailures[i] = failure.v1()__            expectedFailures[i] = failure.v2()__        }_        return Tuple.tuple(new ShardInfo(total, successful, actualFailures), new ShardInfo(total, successful, expectedFailures))__    };returns,a,tuple,that,contains,a,randomized,link,shard,info,value,left,side,and,its,corresponding,value,right,side,after,it,has,been,printed,out,as,a,link,to,xcontent,and,parsed,back,using,a,parsing,method,like,link,shard,info,from,xcontent,xcontent,parser,a,with,shard,failures,parameter,indicates,if,the,randomized,shard,info,must,or,must,not,contain,shard,failures,param,random,random,generator,param,with,shard,failures,indicates,if,the,generated,shard,info,must,contain,shard,failures;public,static,tuple,shard,info,shard,info,random,shard,info,random,random,boolean,with,shard,failures,int,total,random,int,between,random,1,10,if,with,shard,failures,false,return,tuple,tuple,new,shard,info,total,total,new,shard,info,total,total,int,successful,random,int,between,random,1,math,max,1,total,1,int,failures,math,max,1,total,successful,failure,actual,failures,new,failure,failures,failure,expected,failures,new,failure,failures,for,int,i,0,i,failures,i,tuple,failure,failure,failure,random,shard,info,failure,random,actual,failures,i,failure,v1,expected,failures,i,failure,v2,return,tuple,tuple,new,shard,info,total,successful,actual,failures,new,shard,info,total,successful,expected,failures
RandomObjects -> private static void addFields(Random random, XContentBuilder builder, int minNumFields, int currentDepth) throws IOException;1524684173;Randomly adds fields, objects, or arrays to the provided builder. The maximum depth is 5.;private static void addFields(Random random, XContentBuilder builder, int minNumFields, int currentDepth) throws IOException {_        int numFields = randomIntBetween(random, minNumFields, 10)__        for (int i = 0_ i < numFields_ i++) {_            if (currentDepth < 5 && random.nextBoolean()) {_                if (random.nextBoolean()) {_                    builder.startObject(RandomStrings.randomAsciiOfLengthBetween(random, 6, 10))__                    addFields(random, builder, minNumFields, currentDepth + 1)__                    builder.endObject()__                } else {_                    builder.startArray(RandomStrings.randomAsciiOfLengthBetween(random, 6, 10))__                    int numElements = randomIntBetween(random, 1, 5)__                    boolean object = random.nextBoolean()__                    int dataType = -1__                    if (object == false) {_                        dataType = randomDataType(random)__                    }_                    for (int j = 0_ j < numElements_ j++) {_                        if (object) {_                            builder.startObject()__                            addFields(random, builder, minNumFields, 5)__                            builder.endObject()__                        } else {_                            builder.value(randomFieldValue(random, dataType))__                        }_                    }_                    builder.endArray()__                }_            } else {_                builder.field(RandomStrings.randomAsciiOfLengthBetween(random, 6, 10),_                        randomFieldValue(random, randomDataType(random)))__            }_        }_    };randomly,adds,fields,objects,or,arrays,to,the,provided,builder,the,maximum,depth,is,5;private,static,void,add,fields,random,random,xcontent,builder,builder,int,min,num,fields,int,current,depth,throws,ioexception,int,num,fields,random,int,between,random,min,num,fields,10,for,int,i,0,i,num,fields,i,if,current,depth,5,random,next,boolean,if,random,next,boolean,builder,start,object,random,strings,random,ascii,of,length,between,random,6,10,add,fields,random,builder,min,num,fields,current,depth,1,builder,end,object,else,builder,start,array,random,strings,random,ascii,of,length,between,random,6,10,int,num,elements,random,int,between,random,1,5,boolean,object,random,next,boolean,int,data,type,1,if,object,false,data,type,random,data,type,random,for,int,j,0,j,num,elements,j,if,object,builder,start,object,add,fields,random,builder,min,num,fields,5,builder,end,object,else,builder,value,random,field,value,random,data,type,builder,end,array,else,builder,field,random,strings,random,ascii,of,length,between,random,6,10,random,field,value,random,random,data,type,random
RandomObjects -> private static void addFields(Random random, XContentBuilder builder, int minNumFields, int currentDepth) throws IOException;1531179852;Randomly adds fields, objects, or arrays to the provided builder. The maximum depth is 5.;private static void addFields(Random random, XContentBuilder builder, int minNumFields, int currentDepth) throws IOException {_        int numFields = randomIntBetween(random, minNumFields, 5)__        for (int i = 0_ i < numFields_ i++) {_            if (currentDepth < 5 && random.nextInt(100) >= 70) {_                if (random.nextBoolean()) {_                    builder.startObject(RandomStrings.randomAsciiOfLengthBetween(random, 6, 10))__                    addFields(random, builder, minNumFields, currentDepth + 1)__                    builder.endObject()__                } else {_                    builder.startArray(RandomStrings.randomAsciiOfLengthBetween(random, 6, 10))__                    int numElements = randomIntBetween(random, 1, 5)__                    boolean object = random.nextBoolean()__                    int dataType = -1__                    if (object == false) {_                        dataType = randomDataType(random)__                    }_                    for (int j = 0_ j < numElements_ j++) {_                        if (object) {_                            builder.startObject()__                            addFields(random, builder, minNumFields, 5)__                            builder.endObject()__                        } else {_                            builder.value(randomFieldValue(random, dataType))__                        }_                    }_                    builder.endArray()__                }_            } else {_                builder.field(RandomStrings.randomAsciiOfLengthBetween(random, 6, 10),_                        randomFieldValue(random, randomDataType(random)))__            }_        }_    };randomly,adds,fields,objects,or,arrays,to,the,provided,builder,the,maximum,depth,is,5;private,static,void,add,fields,random,random,xcontent,builder,builder,int,min,num,fields,int,current,depth,throws,ioexception,int,num,fields,random,int,between,random,min,num,fields,5,for,int,i,0,i,num,fields,i,if,current,depth,5,random,next,int,100,70,if,random,next,boolean,builder,start,object,random,strings,random,ascii,of,length,between,random,6,10,add,fields,random,builder,min,num,fields,current,depth,1,builder,end,object,else,builder,start,array,random,strings,random,ascii,of,length,between,random,6,10,int,num,elements,random,int,between,random,1,5,boolean,object,random,next,boolean,int,data,type,1,if,object,false,data,type,random,data,type,random,for,int,j,0,j,num,elements,j,if,object,builder,start,object,add,fields,random,builder,min,num,fields,5,builder,end,object,else,builder,value,random,field,value,random,data,type,builder,end,array,else,builder,field,random,strings,random,ascii,of,length,between,random,6,10,random,field,value,random,random,data,type,random
RandomObjects -> private static void addFields(Random random, XContentBuilder builder, int minNumFields, int currentDepth) throws IOException;1533063033;Randomly adds fields, objects, or arrays to the provided builder. The maximum depth is 5.;private static void addFields(Random random, XContentBuilder builder, int minNumFields, int currentDepth) throws IOException {_        int numFields = randomIntBetween(random, minNumFields, 5)__        for (int i = 0_ i < numFields_ i++) {_            if (currentDepth < 5 && random.nextInt(100) >= 70) {_                if (random.nextBoolean()) {_                    builder.startObject(RandomStrings.randomAsciiLettersOfLengthBetween(random, 6, 10))__                    addFields(random, builder, minNumFields, currentDepth + 1)__                    builder.endObject()__                } else {_                    builder.startArray(RandomStrings.randomAsciiLettersOfLengthBetween(random, 6, 10))__                    int numElements = randomIntBetween(random, 1, 5)__                    boolean object = random.nextBoolean()__                    int dataType = -1__                    if (object == false) {_                        dataType = randomDataType(random)__                    }_                    for (int j = 0_ j < numElements_ j++) {_                        if (object) {_                            builder.startObject()__                            addFields(random, builder, minNumFields, 5)__                            builder.endObject()__                        } else {_                            builder.value(randomFieldValue(random, dataType))__                        }_                    }_                    builder.endArray()__                }_            } else {_                builder.field(RandomStrings.randomAsciiLettersOfLengthBetween(random, 6, 10),_                        randomFieldValue(random, randomDataType(random)))__            }_        }_    };randomly,adds,fields,objects,or,arrays,to,the,provided,builder,the,maximum,depth,is,5;private,static,void,add,fields,random,random,xcontent,builder,builder,int,min,num,fields,int,current,depth,throws,ioexception,int,num,fields,random,int,between,random,min,num,fields,5,for,int,i,0,i,num,fields,i,if,current,depth,5,random,next,int,100,70,if,random,next,boolean,builder,start,object,random,strings,random,ascii,letters,of,length,between,random,6,10,add,fields,random,builder,min,num,fields,current,depth,1,builder,end,object,else,builder,start,array,random,strings,random,ascii,letters,of,length,between,random,6,10,int,num,elements,random,int,between,random,1,5,boolean,object,random,next,boolean,int,data,type,1,if,object,false,data,type,random,data,type,random,for,int,j,0,j,num,elements,j,if,object,builder,start,object,add,fields,random,builder,min,num,fields,5,builder,end,object,else,builder,value,random,field,value,random,data,type,builder,end,array,else,builder,field,random,strings,random,ascii,letters,of,length,between,random,6,10,random,field,value,random,random,data,type,random
RandomObjects -> private static void addFields(Random random, XContentBuilder builder, int minNumFields, int currentDepth) throws IOException;1544810257;Randomly adds fields, objects, or arrays to the provided builder. The maximum depth is 5.;private static void addFields(Random random, XContentBuilder builder, int minNumFields, int currentDepth) throws IOException {_        int numFields = randomIntBetween(random, minNumFields, 5)__        for (int i = 0_ i < numFields_ i++) {_            if (currentDepth < 5 && random.nextInt(100) >= 70) {_                if (random.nextBoolean()) {_                    builder.startObject(RandomStrings.randomAsciiLettersOfLengthBetween(random, 6, 10))__                    addFields(random, builder, minNumFields, currentDepth + 1)__                    builder.endObject()__                } else {_                    builder.startArray(RandomStrings.randomAsciiLettersOfLengthBetween(random, 6, 10))__                    int numElements = randomIntBetween(random, 1, 5)__                    boolean object = random.nextBoolean()__                    int dataType = -1__                    if (object == false) {_                        dataType = randomDataType(random)__                    }_                    for (int j = 0_ j < numElements_ j++) {_                        if (object) {_                            builder.startObject()__                            addFields(random, builder, minNumFields, 5)__                            builder.endObject()__                        } else {_                            builder.value(randomFieldValue(random, dataType))__                        }_                    }_                    builder.endArray()__                }_            } else {_                builder.field(RandomStrings.randomAsciiLettersOfLengthBetween(random, 6, 10),_                        randomFieldValue(random, randomDataType(random)))__            }_        }_    };randomly,adds,fields,objects,or,arrays,to,the,provided,builder,the,maximum,depth,is,5;private,static,void,add,fields,random,random,xcontent,builder,builder,int,min,num,fields,int,current,depth,throws,ioexception,int,num,fields,random,int,between,random,min,num,fields,5,for,int,i,0,i,num,fields,i,if,current,depth,5,random,next,int,100,70,if,random,next,boolean,builder,start,object,random,strings,random,ascii,letters,of,length,between,random,6,10,add,fields,random,builder,min,num,fields,current,depth,1,builder,end,object,else,builder,start,array,random,strings,random,ascii,letters,of,length,between,random,6,10,int,num,elements,random,int,between,random,1,5,boolean,object,random,next,boolean,int,data,type,1,if,object,false,data,type,random,data,type,random,for,int,j,0,j,num,elements,j,if,object,builder,start,object,add,fields,random,builder,min,num,fields,5,builder,end,object,else,builder,value,random,field,value,random,data,type,builder,end,array,else,builder,field,random,strings,random,ascii,letters,of,length,between,random,6,10,random,field,value,random,random,data,type,random
RandomObjects -> private static void addFields(Random random, XContentBuilder builder, int minNumFields, int currentDepth) throws IOException;1545077999;Randomly adds fields, objects, or arrays to the provided builder. The maximum depth is 5.;private static void addFields(Random random, XContentBuilder builder, int minNumFields, int currentDepth) throws IOException {_        int numFields = randomIntBetween(random, minNumFields, 5)__        for (int i = 0_ i < numFields_ i++) {_            if (currentDepth < 5 && random.nextInt(100) >= 70) {_                if (random.nextBoolean()) {_                    builder.startObject(RandomStrings.randomAsciiLettersOfLengthBetween(random, 6, 10))__                    addFields(random, builder, minNumFields, currentDepth + 1)__                    builder.endObject()__                } else {_                    builder.startArray(RandomStrings.randomAsciiLettersOfLengthBetween(random, 6, 10))__                    int numElements = randomIntBetween(random, 1, 5)__                    boolean object = random.nextBoolean()__                    int dataType = -1__                    if (object == false) {_                        dataType = randomDataType(random)__                    }_                    for (int j = 0_ j < numElements_ j++) {_                        if (object) {_                            builder.startObject()__                            addFields(random, builder, minNumFields, 5)__                            builder.endObject()__                        } else {_                            builder.value(randomFieldValue(random, dataType))__                        }_                    }_                    builder.endArray()__                }_            } else {_                builder.field(RandomStrings.randomAsciiLettersOfLengthBetween(random, 6, 10),_                        randomFieldValue(random, randomDataType(random)))__            }_        }_    };randomly,adds,fields,objects,or,arrays,to,the,provided,builder,the,maximum,depth,is,5;private,static,void,add,fields,random,random,xcontent,builder,builder,int,min,num,fields,int,current,depth,throws,ioexception,int,num,fields,random,int,between,random,min,num,fields,5,for,int,i,0,i,num,fields,i,if,current,depth,5,random,next,int,100,70,if,random,next,boolean,builder,start,object,random,strings,random,ascii,letters,of,length,between,random,6,10,add,fields,random,builder,min,num,fields,current,depth,1,builder,end,object,else,builder,start,array,random,strings,random,ascii,letters,of,length,between,random,6,10,int,num,elements,random,int,between,random,1,5,boolean,object,random,next,boolean,int,data,type,1,if,object,false,data,type,random,data,type,random,for,int,j,0,j,num,elements,j,if,object,builder,start,object,add,fields,random,builder,min,num,fields,5,builder,end,object,else,builder,value,random,field,value,random,data,type,builder,end,array,else,builder,field,random,strings,random,ascii,letters,of,length,between,random,6,10,random,field,value,random,random,data,type,random
RandomObjects -> private static void addFields(Random random, XContentBuilder builder, int minNumFields, int currentDepth) throws IOException;1549356476;Randomly adds fields, objects, or arrays to the provided builder. The maximum depth is 5.;private static void addFields(Random random, XContentBuilder builder, int minNumFields, int currentDepth) throws IOException {_        int numFields = randomIntBetween(random, minNumFields, 5)__        for (int i = 0_ i < numFields_ i++) {_            if (currentDepth < 5 && random.nextInt(100) >= 70) {_                if (random.nextBoolean()) {_                    builder.startObject(RandomStrings.randomAsciiLettersOfLengthBetween(random, 6, 10))__                    addFields(random, builder, minNumFields, currentDepth + 1)__                    builder.endObject()__                } else {_                    builder.startArray(RandomStrings.randomAsciiLettersOfLengthBetween(random, 6, 10))__                    int numElements = randomIntBetween(random, 1, 5)__                    boolean object = random.nextBoolean()__                    int dataType = -1__                    if (object == false) {_                        dataType = randomDataType(random)__                    }_                    for (int j = 0_ j < numElements_ j++) {_                        if (object) {_                            builder.startObject()__                            addFields(random, builder, minNumFields, 5)__                            builder.endObject()__                        } else {_                            builder.value(randomFieldValue(random, dataType))__                        }_                    }_                    builder.endArray()__                }_            } else {_                builder.field(RandomStrings.randomAsciiLettersOfLengthBetween(random, 6, 10),_                        randomFieldValue(random, randomDataType(random)))__            }_        }_    };randomly,adds,fields,objects,or,arrays,to,the,provided,builder,the,maximum,depth,is,5;private,static,void,add,fields,random,random,xcontent,builder,builder,int,min,num,fields,int,current,depth,throws,ioexception,int,num,fields,random,int,between,random,min,num,fields,5,for,int,i,0,i,num,fields,i,if,current,depth,5,random,next,int,100,70,if,random,next,boolean,builder,start,object,random,strings,random,ascii,letters,of,length,between,random,6,10,add,fields,random,builder,min,num,fields,current,depth,1,builder,end,object,else,builder,start,array,random,strings,random,ascii,letters,of,length,between,random,6,10,int,num,elements,random,int,between,random,1,5,boolean,object,random,next,boolean,int,data,type,1,if,object,false,data,type,random,data,type,random,for,int,j,0,j,num,elements,j,if,object,builder,start,object,add,fields,random,builder,min,num,fields,5,builder,end,object,else,builder,value,random,field,value,random,data,type,builder,end,array,else,builder,field,random,strings,random,ascii,letters,of,length,between,random,6,10,random,field,value,random,random,data,type,random
RandomObjects -> public static Object getExpectedParsedValue(XContentType xContentType, Object value);1544810257;Converts the provided field value to its corresponding expected value once printed out_via {@link org.elasticsearch.common.xcontent.ToXContent#toXContent(XContentBuilder, ToXContent.Params)} and parsed back via_{@link org.elasticsearch.common.xcontent.XContentParser#objectText()}._Generates values based on what can get printed out. Stored fields values are retrieved from lucene and converted via_{@link org.elasticsearch.index.mapper.MappedFieldType#valueForDisplay(Object)} to either strings, numbers or booleans.;public static Object getExpectedParsedValue(XContentType xContentType, Object value) {_        if (value instanceof BytesArray) {_            if (xContentType == XContentType.JSON || xContentType == XContentType.YAML) {_                _                return Base64.getEncoder().encodeToString(((BytesArray)value).toBytesRef().bytes)__            }_        }_        if (value instanceof Float) {_            if (xContentType == XContentType.SMILE) {_                _                return ((Float)value).doubleValue()__            } else {_                _                return Double.parseDouble(value.toString())__            }_        }_        if (value instanceof Byte) {_            return ((Byte)value).intValue()__        }_        if (value instanceof Short) {_            return ((Short)value).intValue()__        }_        return value__    };converts,the,provided,field,value,to,its,corresponding,expected,value,once,printed,out,via,link,org,elasticsearch,common,xcontent,to,xcontent,to,xcontent,xcontent,builder,to,xcontent,params,and,parsed,back,via,link,org,elasticsearch,common,xcontent,xcontent,parser,object,text,generates,values,based,on,what,can,get,printed,out,stored,fields,values,are,retrieved,from,lucene,and,converted,via,link,org,elasticsearch,index,mapper,mapped,field,type,value,for,display,object,to,either,strings,numbers,or,booleans;public,static,object,get,expected,parsed,value,xcontent,type,x,content,type,object,value,if,value,instanceof,bytes,array,if,x,content,type,xcontent,type,json,x,content,type,xcontent,type,yaml,return,base64,get,encoder,encode,to,string,bytes,array,value,to,bytes,ref,bytes,if,value,instanceof,float,if,x,content,type,xcontent,type,smile,return,float,value,double,value,else,return,double,parse,double,value,to,string,if,value,instanceof,byte,return,byte,value,int,value,if,value,instanceof,short,return,short,value,int,value,return,value
RandomObjects -> public static Object getExpectedParsedValue(XContentType xContentType, Object value);1545077999;Converts the provided field value to its corresponding expected value once printed out_via {@link org.elasticsearch.common.xcontent.ToXContent#toXContent(XContentBuilder, ToXContent.Params)} and parsed back via_{@link org.elasticsearch.common.xcontent.XContentParser#objectText()}._Generates values based on what can get printed out. Stored fields values are retrieved from lucene and converted via_{@link org.elasticsearch.index.mapper.MappedFieldType#valueForDisplay(Object)} to either strings, numbers or booleans.;public static Object getExpectedParsedValue(XContentType xContentType, Object value) {_        if (value instanceof BytesArray) {_            if (xContentType == XContentType.JSON || xContentType == XContentType.YAML) {_                _                return Base64.getEncoder().encodeToString(((BytesArray)value).toBytesRef().bytes)__            }_        }_        if (value instanceof Float) {_            if (xContentType == XContentType.CBOR) {_                _                return value__            }_            if (xContentType == XContentType.SMILE) {_                _                return ((Float)value).doubleValue()__            }_            _            return Double.parseDouble(value.toString())__        }_        if (value instanceof Byte) {_            return ((Byte)value).intValue()__        }_        if (value instanceof Short) {_            return ((Short)value).intValue()__        }_        return value__    };converts,the,provided,field,value,to,its,corresponding,expected,value,once,printed,out,via,link,org,elasticsearch,common,xcontent,to,xcontent,to,xcontent,xcontent,builder,to,xcontent,params,and,parsed,back,via,link,org,elasticsearch,common,xcontent,xcontent,parser,object,text,generates,values,based,on,what,can,get,printed,out,stored,fields,values,are,retrieved,from,lucene,and,converted,via,link,org,elasticsearch,index,mapper,mapped,field,type,value,for,display,object,to,either,strings,numbers,or,booleans;public,static,object,get,expected,parsed,value,xcontent,type,x,content,type,object,value,if,value,instanceof,bytes,array,if,x,content,type,xcontent,type,json,x,content,type,xcontent,type,yaml,return,base64,get,encoder,encode,to,string,bytes,array,value,to,bytes,ref,bytes,if,value,instanceof,float,if,x,content,type,xcontent,type,cbor,return,value,if,x,content,type,xcontent,type,smile,return,float,value,double,value,return,double,parse,double,value,to,string,if,value,instanceof,byte,return,byte,value,int,value,if,value,instanceof,short,return,short,value,int,value,return,value
RandomObjects -> public static Object getExpectedParsedValue(XContentType xContentType, Object value);1549356476;Converts the provided field value to its corresponding expected value once printed out_via {@link org.elasticsearch.common.xcontent.ToXContent#toXContent(XContentBuilder, ToXContent.Params)} and parsed back via_{@link org.elasticsearch.common.xcontent.XContentParser#objectText()}._Generates values based on what can get printed out. Stored fields values are retrieved from lucene and converted via_{@link org.elasticsearch.index.mapper.MappedFieldType#valueForDisplay(Object)} to either strings, numbers or booleans.;public static Object getExpectedParsedValue(XContentType xContentType, Object value) {_        if (value instanceof BytesArray) {_            if (xContentType == XContentType.JSON || xContentType == XContentType.YAML) {_                _                return Base64.getEncoder().encodeToString(((BytesArray)value).toBytesRef().bytes)__            }_        }_        if (value instanceof Float) {_            if (xContentType == XContentType.CBOR) {_                _                return value__            }_            if (xContentType == XContentType.SMILE) {_                _                return ((Float)value).doubleValue()__            }_            _            return Double.parseDouble(value.toString())__        }_        if (value instanceof Byte) {_            return ((Byte)value).intValue()__        }_        if (value instanceof Short) {_            return ((Short)value).intValue()__        }_        return value__    };converts,the,provided,field,value,to,its,corresponding,expected,value,once,printed,out,via,link,org,elasticsearch,common,xcontent,to,xcontent,to,xcontent,xcontent,builder,to,xcontent,params,and,parsed,back,via,link,org,elasticsearch,common,xcontent,xcontent,parser,object,text,generates,values,based,on,what,can,get,printed,out,stored,fields,values,are,retrieved,from,lucene,and,converted,via,link,org,elasticsearch,index,mapper,mapped,field,type,value,for,display,object,to,either,strings,numbers,or,booleans;public,static,object,get,expected,parsed,value,xcontent,type,x,content,type,object,value,if,value,instanceof,bytes,array,if,x,content,type,xcontent,type,json,x,content,type,xcontent,type,yaml,return,base64,get,encoder,encode,to,string,bytes,array,value,to,bytes,ref,bytes,if,value,instanceof,float,if,x,content,type,xcontent,type,cbor,return,value,if,x,content,type,xcontent,type,smile,return,float,value,double,value,return,double,parse,double,value,to,string,if,value,instanceof,byte,return,byte,value,int,value,if,value,instanceof,short,return,short,value,int,value,return,value
