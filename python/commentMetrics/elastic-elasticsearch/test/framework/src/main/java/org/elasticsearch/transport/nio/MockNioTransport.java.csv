commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;5;;@Override protected MockServerChannel bind(String name, InetSocketAddress address) throws IOException {     MockTcpChannelFactory channelFactory = this.profileToChannelFactory.get(name).     return nioGroup.bindServerChannel(address, channelFactory). }
false;protected;1;5;;@Override protected MockSocketChannel initiateChannel(DiscoveryNode node) throws IOException {     InetSocketAddress address = node.getAddress().address().     return nioGroup.openChannel(address, clientChannelFactory). }
false;protected;0;30;;@Override protected void doStart() {     boolean success = false.     try {         nioGroup = new NioSelectorGroup(daemonThreadFactory(this.settings, TcpTransport.TRANSPORT_WORKER_THREAD_NAME_PREFIX), 2, (s) -> new TestingSocketEventHandler(this::onNonChannelException, s)).         ProfileSettings clientProfileSettings = new ProfileSettings(settings, "default").         clientChannelFactory = new MockTcpChannelFactory(true, clientProfileSettings, "client").         if (NetworkService.NETWORK_SERVER.get(settings)) {             // loop through all profiles and start them up, special handling for default one             for (ProfileSettings profileSettings : profileSettings) {                 String profileName = profileSettings.profileName.                 MockTcpChannelFactory factory = new MockTcpChannelFactory(false, profileSettings, profileName).                 profileToChannelFactory.putIfAbsent(profileName, factory).                 bindServer(profileSettings).             }         }         super.doStart().         success = true.     } catch (IOException e) {         throw new ElasticsearchException(e).     } finally {         if (success == false) {             doStop().         }     } }
false;protected;0;9;;@Override protected void stopInternal() {     try {         nioGroup.close().     } catch (Exception e) {         logger.warn("unexpected exception while stopping nio group", e).     }     profileToChannelFactory.clear(). }
false;protected;1;28;;@Override protected ConnectionProfile maybeOverrideConnectionProfile(ConnectionProfile connectionProfile) {     if (connectionProfile.getNumConnections() <= 3) {         return connectionProfile.     }     ConnectionProfile.Builder builder = new ConnectionProfile.Builder().     Set<TransportRequestOptions.Type> allTypesWithConnection = new HashSet<>().     Set<TransportRequestOptions.Type> allTypesWithoutConnection = new HashSet<>().     for (TransportRequestOptions.Type type : TransportRequestOptions.Type.values()) {         int numConnections = connectionProfile.getNumConnectionsPerType(type).         if (numConnections > 0) {             allTypesWithConnection.add(type).         } else {             allTypesWithoutConnection.add(type).         }     }     // make sure we maintain at least the types that are supported by this profile even if we only use a single channel for them.     builder.addConnections(3, allTypesWithConnection.toArray(new TransportRequestOptions.Type[0])).     if (allTypesWithoutConnection.isEmpty() == false) {         builder.addConnections(0, allTypesWithoutConnection.toArray(new TransportRequestOptions.Type[0])).     }     builder.setHandshakeTimeout(connectionProfile.getHandshakeTimeout()).     builder.setConnectTimeout(connectionProfile.getConnectTimeout()).     builder.setPingInterval(connectionProfile.getPingInterval()).     builder.setCompressionEnabled(connectionProfile.getCompressionEnabled()).     return builder.build(). }
false;private;1;4;;private void onNonChannelException(Exception exception) {     logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()), exception). }
false;private;2;3;;private void exceptionCaught(NioSocketChannel channel, Exception exception) {     onException((TcpChannel) channel, exception). }
false;private;1;3;;private void acceptChannel(NioSocketChannel channel) {     serverAcceptedChannel((TcpChannel) channel). }
false;public;2;24;;@Override public MockSocketChannel createChannel(NioSelector selector, SocketChannel channel) throws IOException {     MockSocketChannel nioChannel = new MockSocketChannel(isClient == false, profileName, channel).     Supplier<InboundChannelBuffer.Page> pageSupplier = () -> {         Recycler.V<byte[]> bytes = pageCacheRecycler.bytePage(false).         return new InboundChannelBuffer.Page(ByteBuffer.wrap(bytes.v()), bytes::close).     }.     MockTcpReadWriteHandler readWriteHandler = new MockTcpReadWriteHandler(nioChannel, MockNioTransport.this).     BytesChannelContext context = new BytesChannelContext(nioChannel, selector, (e) -> exceptionCaught(nioChannel, e), readWriteHandler, new InboundChannelBuffer(pageSupplier)).     nioChannel.setContext(context).     nioChannel.addConnectListener((v, e) -> {         if (e == null) {             if (channel.isConnected()) {                 try {                     channel.setOption(StandardSocketOptions.SO_LINGER, 0).                 } catch (IOException ex) {                     throw new UncheckedIOException(new IOException()).                 }             }         }     }).     return nioChannel. }
false;public;2;10;;@Override public MockServerChannel createServerChannel(NioSelector selector, ServerSocketChannel channel) throws IOException {     MockServerChannel nioServerChannel = new MockServerChannel(profileName, channel).     Consumer<Exception> exceptionHandler = (e) -> logger.error(() -> new ParameterizedMessage("exception from server channel caught on transport layer [{}]", channel), e).     ServerChannelContext context = new ServerChannelContext(nioServerChannel, this, selector, MockNioTransport.this::acceptChannel, exceptionHandler).     nioServerChannel.setContext(context).     return nioServerChannel. }
false;public;1;5;;@Override public int consumeReads(InboundChannelBuffer channelBuffer) throws IOException {     BytesReference bytesReference = BytesReference.fromByteBuffers(channelBuffer.sliceBuffersTo(channelBuffer.getIndex())).     return transport.consumeNetworkReads(channel, bytesReference). }
false;public;0;4;;@Override public void close() {     getContext().closeChannel(). }
false;public;0;4;;@Override public String getProfile() {     return profile. }
false;public;1;4;;@Override public void addCloseListener(ActionListener<Void> listener) {     addCloseListener(ActionListener.toBiConsumer(listener)). }
false;public;0;4;;@Override public void close() {     getContext().closeChannel(). }
false;public;0;4;;@Override public String getProfile() {     return profile. }
false;public;0;4;;@Override public boolean isServerChannel() {     return isServer. }
false;public;1;4;;@Override public void addCloseListener(ActionListener<Void> listener) {     addCloseListener(ActionListener.toBiConsumer(listener)). }
false;public;1;4;;@Override public void addConnectListener(ActionListener<Void> listener) {     addConnectListener(ActionListener.toBiConsumer(listener)). }
false;public;0;4;;@Override public ChannelStats getChannelStats() {     return stats. }
false;public;2;4;;@Override public void sendMessage(BytesReference reference, ActionListener<Void> listener) {     getContext().sendMessage(BytesReference.toByteBuffers(reference), ActionListener.toBiConsumer(listener)). }
