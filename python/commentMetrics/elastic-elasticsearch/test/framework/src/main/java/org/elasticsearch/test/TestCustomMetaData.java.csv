commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getData() {     return data. }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     TestCustomMetaData that = (TestCustomMetaData) o.     if (!data.equals(that.data))         return false.     return true. }
false;public;0;4;;@Override public int hashCode() {     return data.hashCode(). }
false;protected,static;2;3;;protected static <T extends TestCustomMetaData> T readFrom(Function<String, T> supplier, StreamInput in) throws IOException {     return supplier.apply(in.readString()). }
false;public,static;2;3;;public static NamedDiff<MetaData.Custom> readDiffFrom(String name, StreamInput in) throws IOException {     return readDiffFrom(MetaData.Custom.class, name, in). }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(getData()). }
false;public,static;2;25;;@SuppressWarnings("unchecked") public static <T extends MetaData.Custom> T fromXContent(Function<String, MetaData.Custom> supplier, XContentParser parser) throws IOException {     XContentParser.Token token.     String data = null.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             String currentFieldName = parser.currentName().             if ("data".equals(currentFieldName)) {                 if (parser.nextToken() != XContentParser.Token.VALUE_STRING) {                     throw new ElasticsearchParseException("failed to parse snapshottable metadata, invalid data type").                 }                 data = parser.text().             } else {                 throw new ElasticsearchParseException("failed to parse snapshottable metadata, unknown field [{}]", currentFieldName).             }         } else {             throw new ElasticsearchParseException("failed to parse snapshottable metadata").         }     }     if (data == null) {         throw new ElasticsearchParseException("failed to parse snapshottable metadata, data not found").     }     return (T) supplier.apply(data). }
false;public;2;5;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.field("data", getData()).     return builder. }
false;public;0;4;;@Override public String toString() {     return "[" + getWriteableName() + "][" + data + "]". }
