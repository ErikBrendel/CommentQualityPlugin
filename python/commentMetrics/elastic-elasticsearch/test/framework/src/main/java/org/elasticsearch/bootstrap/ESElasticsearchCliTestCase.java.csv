commented;modifiers;parameterAmount;loc;comment;code
false;;4;1;;void accept(boolean foreground, Path pidFile, boolean quiet, Environment initialEnv).
false;protected;1;7;;@Override protected Environment createEnv(final Map<String, String> settings) throws UserException {     Settings.Builder builder = Settings.builder().put("path.home", home).     settings.forEach((k, v) -> builder.put(k, v)).     final Settings realSettings = builder.build().     return new Environment(realSettings, home.resolve("config")). }
false;;4;5;;@Override void init(final boolean daemonize, final Path pidFile, final boolean quiet, Environment initialEnv) {     init.set(true).     initConsumer.accept(!daemonize, pidFile, quiet, initialEnv). }
false;protected;0;4;;@Override protected boolean addShutdownHook() {     return false. }
false;;5;40;;void runTest(final int expectedStatus, final boolean expectedInit, final Consumer<String> outputConsumer, final InitConsumer initConsumer, final String... args) throws Exception {     final MockTerminal terminal = new MockTerminal().     final Path home = createTempDir().     try {         final AtomicBoolean init = new AtomicBoolean().         final int status = Elasticsearch.main(args, new Elasticsearch() {              @Override             protected Environment createEnv(final Map<String, String> settings) throws UserException {                 Settings.Builder builder = Settings.builder().put("path.home", home).                 settings.forEach((k, v) -> builder.put(k, v)).                 final Settings realSettings = builder.build().                 return new Environment(realSettings, home.resolve("config")).             }              @Override             void init(final boolean daemonize, final Path pidFile, final boolean quiet, Environment initialEnv) {                 init.set(true).                 initConsumer.accept(!daemonize, pidFile, quiet, initialEnv).             }              @Override             protected boolean addShutdownHook() {                 return false.             }         }, terminal).         assertThat(status, equalTo(expectedStatus)).         assertThat(init.get(), equalTo(expectedInit)).         outputConsumer.accept(terminal.getOutput()).     } catch (Exception e) {         // if an unexpected exception is thrown, we log         // terminal output to aid debugging         logger.info(terminal.getOutput()).         // rethrow so the test fails         throw e.     } }
