commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected int randomNumberOfBuckets() {     return randomIntBetween(minNumberOfBuckets(), maxNumberOfBuckets()). }
false;protected;0;3;;protected int minNumberOfBuckets() {     return 0. }
false;protected;0;3;;protected int maxNumberOfBuckets() {     return maxNumberOfBuckets. }
false;public;1;3;;public void setMaxNumberOfBuckets(int maxNumberOfBuckets) {     this.maxNumberOfBuckets = maxNumberOfBuckets. }
false;public;1;3;;public void setSubAggregationsSupplier(Supplier<InternalAggregations> subAggregationsSupplier) {     this.subAggregationsSupplier = subAggregationsSupplier. }
false;public;0;16;;@Override public void setUp() throws Exception {     super.setUp().     if (randomBoolean()) {         subAggregationsSupplier = () -> InternalAggregations.EMPTY.     } else {         subAggregationsSupplier = () -> {             final int numAggregations = randomIntBetween(1, 3).             List<InternalAggregation> aggs = new ArrayList<>().             for (int i = 0. i < numAggregations. i++) {                 aggs.add(createTestInstance(randomAlphaOfLength(5), emptyList(), emptyMap(), InternalAggregations.EMPTY)).             }             return new InternalAggregations(aggs).         }.     } }
false;protected,final;3;7;;@Override protected final T createTestInstance(String name, List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData) {     T instance = createTestInstance(name, pipelineAggregators, metaData, subAggregationsSupplier.get()).     assert instance.getBuckets().size() <= maxNumberOfBuckets() : "Maximum number of buckets exceeded for " + instance.getClass().getSimpleName() + " aggregation".     return instance. }
false;protected,abstract;4;2;;protected abstract T createTestInstance(String name, List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData, InternalAggregations aggregations).
false;protected,abstract;0;1;;protected abstract Class<? extends ParsedMultiBucketAggregation> implementationClass().
false;protected,final;2;4;;@Override protected final void assertFromXContent(T aggregation, ParsedAggregation parsedAggregation) {     assertMultiBucketsAggregations(aggregation, parsedAggregation, false). }
false;public;0;4;;public void testIterators() throws IOException {     final T aggregation = createTestInstance().     assertMultiBucketsAggregations(aggregation, parseAndAssert(aggregation, false, false), true). }
false;private;3;38;;private void assertMultiBucketsAggregations(Aggregation expected, Aggregation actual, boolean checkOrder) {     assertTrue(expected instanceof MultiBucketsAggregation).     MultiBucketsAggregation expectedMultiBucketsAggregation = (MultiBucketsAggregation) expected.     assertTrue(actual instanceof MultiBucketsAggregation).     MultiBucketsAggregation actualMultiBucketsAggregation = (MultiBucketsAggregation) actual.     assertMultiBucketsAggregation(expectedMultiBucketsAggregation, actualMultiBucketsAggregation, checkOrder).     List<? extends MultiBucketsAggregation.Bucket> expectedBuckets = expectedMultiBucketsAggregation.getBuckets().     List<? extends MultiBucketsAggregation.Bucket> actualBuckets = actualMultiBucketsAggregation.getBuckets().     assertEquals(expectedBuckets.size(), actualBuckets.size()).     if (checkOrder) {         Iterator<? extends MultiBucketsAggregation.Bucket> expectedIt = expectedBuckets.iterator().         Iterator<? extends MultiBucketsAggregation.Bucket> actualIt = actualBuckets.iterator().         while (expectedIt.hasNext()) {             MultiBucketsAggregation.Bucket expectedBucket = expectedIt.next().             MultiBucketsAggregation.Bucket actualBucket = actualIt.next().             assertBucket(expectedBucket, actualBucket, true).         }     } else {         for (MultiBucketsAggregation.Bucket expectedBucket : expectedBuckets) {             final Object expectedKey = expectedBucket.getKey().             boolean found = false.             for (MultiBucketsAggregation.Bucket actualBucket : actualBuckets) {                 final Object actualKey = actualBucket.getKey().                 if ((actualKey != null && actualKey.equals(expectedKey)) || (actualKey == null && expectedKey == null)) {                     found = true.                     assertBucket(expectedBucket, actualBucket, false).                     break.                 }             }             assertTrue("Failed to find bucket with key [" + expectedBucket.getKey() + "]", found).         }     } }
false;protected;3;11;;protected void assertMultiBucketsAggregation(MultiBucketsAggregation expected, MultiBucketsAggregation actual, boolean checkOrder) {     Class<? extends ParsedMultiBucketAggregation> parsedClass = implementationClass().     assertNotNull("Parsed aggregation class must not be null", parsedClass).     assertTrue("Unexpected parsed class, expected instance of: " + actual + ", but was: " + parsedClass, parsedClass.isInstance(actual)).     assertTrue(expected instanceof InternalAggregation).     assertEquals(expected.getName(), actual.getName()).     assertEquals(expected.getMetaData(), actual.getMetaData()).     assertEquals(expected.getType(), actual.getType()). }
false;protected;3;29;;protected void assertBucket(MultiBucketsAggregation.Bucket expected, MultiBucketsAggregation.Bucket actual, boolean checkOrder) {     assertTrue(expected instanceof InternalMultiBucketAggregation.InternalBucket).     assertTrue(actual instanceof ParsedMultiBucketAggregation.ParsedBucket).     assertEquals(expected.getKey(), actual.getKey()).     assertEquals(expected.getKeyAsString(), actual.getKeyAsString()).     assertEquals(expected.getDocCount(), actual.getDocCount()).     Aggregations expectedAggregations = expected.getAggregations().     Aggregations actualAggregations = actual.getAggregations().     assertEquals(expectedAggregations.asList().size(), actualAggregations.asList().size()).     if (checkOrder) {         Iterator<Aggregation> expectedIt = expectedAggregations.iterator().         Iterator<Aggregation> actualIt = actualAggregations.iterator().         while (expectedIt.hasNext()) {             Aggregation expectedAggregation = expectedIt.next().             Aggregation actualAggregation = actualIt.next().             assertMultiBucketsAggregations(expectedAggregation, actualAggregation, true).         }     } else {         for (Aggregation expectedAggregation : expectedAggregations) {             Aggregation actualAggregation = actualAggregations.get(expectedAggregation.getName()).             assertNotNull(actualAggregation).             assertMultiBucketsAggregations(expectedAggregation, actualAggregation, false).         }     } }
