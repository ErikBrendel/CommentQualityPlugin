commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * The classpath plugins this node was constructed with.  */ ;/**  * The classpath plugins this node was constructed with.  */ public Collection<Class<? extends Plugin>> getClasspathPlugins() {     return classpathPlugins. }
false;protected;2;7;;@Override protected BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {     if (getPluginsService().filterPlugins(NodeMocksPlugin.class).isEmpty()) {         return super.createBigArrays(pageCacheRecycler, circuitBreakerService).     }     return new MockBigArrays(pageCacheRecycler, circuitBreakerService). }
false;;1;7;;@Override PageCacheRecycler createPageCacheRecycler(Settings settings) {     if (getPluginsService().filterPlugins(NodeMocksPlugin.class).isEmpty()) {         return super.createPageCacheRecycler(settings).     }     return new MockPageCacheRecycler(settings). }
false;protected;7;10;;@Override protected SearchService newSearchService(ClusterService clusterService, IndicesService indicesService, ThreadPool threadPool, ScriptService scriptService, BigArrays bigArrays, FetchPhase fetchPhase, ResponseCollectorService responseCollectorService) {     if (getPluginsService().filterPlugins(MockSearchService.TestPlugin.class).isEmpty()) {         return super.newSearchService(clusterService, indicesService, threadPool, scriptService, bigArrays, fetchPhase, responseCollectorService).     }     return new MockSearchService(clusterService, indicesService, threadPool, scriptService, bigArrays, fetchPhase). }
false;protected;7;15;;@Override protected TransportService newTransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor interceptor, Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, ClusterSettings clusterSettings, Set<String> taskHeaders) {     // can't be done in a production env.     if (getPluginsService().filterPlugins(MockTransportService.TestPlugin.class).isEmpty()) {         return super.newTransportService(settings, transport, threadPool, interceptor, localNodeFactory, clusterSettings, taskHeaders).     } else {         return new MockTransportService(settings, transport, threadPool, interceptor, localNodeFactory, clusterSettings, taskHeaders).     } }
false;protected;2;6;;@Override protected void processRecoverySettings(ClusterSettings clusterSettings, RecoverySettings recoverySettings) {     if (false == getPluginsService().filterPlugins(RecoverySettingsChunkSizePlugin.class).isEmpty()) {         clusterSettings.addSettingsUpdateConsumer(RecoverySettingsChunkSizePlugin.CHUNK_SIZE_SETTING, recoverySettings::setChunkSize).     } }
false;protected;5;9;;@Override protected ClusterInfoService newClusterInfoService(Settings settings, ClusterService clusterService, ThreadPool threadPool, NodeClient client, Consumer<ClusterInfo> listener) {     if (getPluginsService().filterPlugins(MockInternalClusterInfoService.TestPlugin.class).isEmpty()) {         return super.newClusterInfoService(settings, clusterService, threadPool, client, listener).     } else {         return new MockInternalClusterInfoService(settings, clusterService, threadPool, client, listener).     } }
false;protected;1;8;;@Override protected HttpServerTransport newHttpTransport(NetworkModule networkModule) {     if (getPluginsService().filterPlugins(MockHttpTransport.TestPlugin.class).isEmpty()) {         return super.newHttpTransport(networkModule).     } else {         return new MockHttpTransport().     } }
false;protected;1;4;;@Override protected void configureNodeAndClusterIdStateListener(ClusterService clusterService) { // do not configure this in tests as this is causing SetOnce to throw exceptions when jvm is used for multiple tests }
