commented;modifiers;parameterAmount;loc;comment;code
true;public,static;3;7;/**  * Asserts that changes are applied correctly, i.e. that applying diffs to localInstance produces that object  * equal but not the same as the remoteChanges instance.  */ ;/**  * Asserts that changes are applied correctly, i.e. that applying diffs to localInstance produces that object  * equal but not the same as the remoteChanges instance.  */ public static <T extends Diffable<T>> T assertDiffApplication(T remoteChanges, T localInstance, Diff<T> diffs) {     T localChanges = diffs.apply(localInstance).     assertEquals(remoteChanges, localChanges).     assertEquals(remoteChanges.hashCode(), localChanges.hashCode()).     assertNotSame(remoteChanges, localChanges).     return localChanges. }
true;public,static;3;9;/**  * Simulates sending diffs over the wire  */ ;/**  * Simulates sending diffs over the wire  */ public static <T extends Writeable> T copyInstance(T diffs, NamedWriteableRegistry namedWriteableRegistry, Reader<T> reader) throws IOException {     try (BytesStreamOutput output = new BytesStreamOutput()) {         diffs.writeTo(output).         try (StreamInput in = new NamedWriteableAwareStreamInput(output.bytes().streamInput(), namedWriteableRegistry)) {             return reader.read(in).         }     } }
true;public,static;5;15;/**  * Tests making random changes to an object, calculating diffs for these changes, sending this  * diffs over the wire and appling these diffs on the other side.  */ ;/**  * Tests making random changes to an object, calculating diffs for these changes, sending this  * diffs over the wire and appling these diffs on the other side.  */ public static <T extends Diffable<T>> void testDiffableSerialization(Supplier<T> testInstance, Function<T, T> modifier, NamedWriteableRegistry namedWriteableRegistry, Reader<T> reader, Reader<Diff<T>> diffReader) throws IOException {     T remoteInstance = testInstance.get().     T localInstance = assertSerialization(remoteInstance, namedWriteableRegistry, reader).     for (int runs = 0. runs < NUMBER_OF_DIFF_TEST_RUNS. runs++) {         T remoteChanges = modifier.apply(remoteInstance).         Diff<T> remoteDiffs = remoteChanges.diff(remoteInstance).         Diff<T> localDiffs = copyInstance(remoteDiffs, namedWriteableRegistry, diffReader).         localInstance = assertDiffApplication(remoteChanges, localInstance, localDiffs).         remoteInstance = remoteChanges.     } }
true;public,static;3;8;/**  * Asserts that testInstance can be correctly.  */ ;/**  * Asserts that testInstance can be correctly.  */ public static <T extends Writeable> T assertSerialization(T testInstance, NamedWriteableRegistry namedWriteableRegistry, Reader<T> reader) throws IOException {     T deserializedInstance = copyInstance(testInstance, namedWriteableRegistry, reader).     assertEquals(testInstance, deserializedInstance).     assertEquals(testInstance.hashCode(), deserializedInstance.hashCode()).     assertNotSame(testInstance, deserializedInstance).     return deserializedInstance. }
