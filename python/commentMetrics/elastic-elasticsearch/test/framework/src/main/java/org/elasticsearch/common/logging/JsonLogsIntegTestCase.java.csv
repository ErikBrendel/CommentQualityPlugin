commented;modifiers;parameterAmount;loc;comment;code
true;protected,abstract;0;1;/**  * The node name to expect in the log file.  */ ;/**  * The node name to expect in the log file.  */ protected abstract org.hamcrest.Matcher<String> nodeNameMatcher().
true;protected,abstract;1;1;/**  * Open the log file. This is delegated to subclasses because the test  * framework doesn't have permission to read from the log file but  * subclasses can grant themselves that permission.  */ ;/**  * Open the log file. This is delegated to subclasses because the test  * framework doesn't have permission to read from the log file but  * subclasses can grant themselves that permission.  */ protected abstract BufferedReader openReader(Path logFile).
false;public;0;19;;public void testElementsPresentOnAllLinesOfLog() throws IOException {     JsonLogLine firstLine = findFirstLine().     assertNotNull(firstLine).     try (Stream<JsonLogLine> stream = JsonLogsStream.from(openReader(getLogFile()))) {         stream.limit(LINES_TO_CHECK).forEach(jsonLogLine -> {             assertThat(jsonLogLine.type(), not(isEmptyOrNullString())).             assertThat(jsonLogLine.timestamp(), not(isEmptyOrNullString())).             assertThat(jsonLogLine.level(), not(isEmptyOrNullString())).             assertThat(jsonLogLine.component(), not(isEmptyOrNullString())).             assertThat(jsonLogLine.message(), not(isEmptyOrNullString())).             // all lines should have the same nodeName and clusterName             assertThat(jsonLogLine.nodeName(), nodeNameMatcher()).             assertThat(jsonLogLine.clusterName(), equalTo(firstLine.clusterName())).         }).     } }
false;private;0;6;;private JsonLogLine findFirstLine() throws IOException {     try (Stream<JsonLogLine> stream = JsonLogsStream.from(openReader(getLogFile()))) {         return stream.findFirst().orElseThrow(() -> new AssertionError("no logs at all?!")).     } }
false;public;0;23;;public void testNodeIdAndClusterIdConsistentOnceAvailable() throws IOException {     try (Stream<JsonLogLine> stream = JsonLogsStream.from(openReader(getLogFile()))) {         Iterator<JsonLogLine> iterator = stream.iterator().         JsonLogLine firstLine = null.         while (iterator.hasNext()) {             JsonLogLine jsonLogLine = iterator.next().             if (jsonLogLine.nodeId() != null) {                 firstLine = jsonLogLine.             }         }         assertNotNull(firstLine).         // once the nodeId and clusterId are received, they should be the same on remaining lines         int i = 0.         while (iterator.hasNext() && i++ < LINES_TO_CHECK) {             JsonLogLine jsonLogLine = iterator.next().             assertThat(jsonLogLine.nodeId(), equalTo(firstLine.nodeId())).             assertThat(jsonLogLine.clusterUuid(), equalTo(firstLine.clusterUuid())).         }     } }
false;private;0;10;;@SuppressForbidden(reason = "PathUtils doesn't have permission to read this file") private Path getLogFile() {     String logFileString = System.getProperty("tests.logfile").     if (logFileString == null) {         fail("tests.logfile must be set to run this test. It is automatically " + "set by gradle. If you must set it yourself then it should be the absolute path to the " + "log file.").     }     return Paths.get(logFileString). }
