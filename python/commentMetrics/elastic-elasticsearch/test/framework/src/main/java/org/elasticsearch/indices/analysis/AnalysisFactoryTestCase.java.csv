# id;timestamp;commentText;codeText;commentWords;codeWords
AnalysisFactoryTestCase -> protected Map<String, Class<?>> getPreConfiguredTokenizers();1524684173;Map containing pre-configured tokenizers that should be available_after installing this plugin. The map is from the name of the token_filter to the class of the Lucene {@link TokenizerFactory} that it_is emulating. If the Lucene {@linkplain TokenizerFactory} is_{@code null} then the test will look it up for you from the name._If there is no Lucene {@linkplain TokenizerFactory} then the right_hand side should be {@link Void}.;protected Map<String, Class<?>> getPreConfiguredTokenizers() {_        Map<String, Class<?>> tokenizers = new HashMap<>()__        _        for (PreBuiltTokenizers tokenizer : PreBuiltTokenizers.values()) {_            final Class<?> luceneFactoryClazz__            switch (tokenizer) {_            case UAX_URL_EMAIL:_                luceneFactoryClazz = org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerFactory.class__                break__            case PATH_HIERARCHY:_                luceneFactoryClazz = Void.class__                break__            default:_                luceneFactoryClazz = null__            }_            tokenizers.put(tokenizer.name().toLowerCase(Locale.ROOT), luceneFactoryClazz)__        }_        _        tokenizers.put("nGram", tokenizers.get("ngram"))__        tokenizers.put("edgeNGram", tokenizers.get("edge_ngram"))__        tokenizers.put("PathHierarchy", tokenizers.get("path_hierarchy"))__        return tokenizers__    };map,containing,pre,configured,tokenizers,that,should,be,available,after,installing,this,plugin,the,map,is,from,the,name,of,the,token,filter,to,the,class,of,the,lucene,link,tokenizer,factory,that,it,is,emulating,if,the,lucene,linkplain,tokenizer,factory,is,code,null,then,the,test,will,look,it,up,for,you,from,the,name,if,there,is,no,lucene,linkplain,tokenizer,factory,then,the,right,hand,side,should,be,link,void;protected,map,string,class,get,pre,configured,tokenizers,map,string,class,tokenizers,new,hash,map,for,pre,built,tokenizers,tokenizer,pre,built,tokenizers,values,final,class,lucene,factory,clazz,switch,tokenizer,case,lucene,factory,clazz,org,apache,lucene,analysis,standard,uax29urlemail,tokenizer,factory,class,break,case,lucene,factory,clazz,void,class,break,default,lucene,factory,clazz,null,tokenizers,put,tokenizer,name,to,lower,case,locale,root,lucene,factory,clazz,tokenizers,put,n,gram,tokenizers,get,ngram,tokenizers,put,edge,ngram,tokenizers,get,tokenizers,put,path,hierarchy,tokenizers,get,return,tokenizers
AnalysisFactoryTestCase -> protected Map<String, Class<?>> getPreConfiguredTokenizers();1525645056;Map containing pre-configured tokenizers that should be available_after installing this plugin. The map is from the name of the token_filter to the class of the Lucene {@link TokenizerFactory} that it_is emulating. If the Lucene {@linkplain TokenizerFactory} is_{@code null} then the test will look it up for you from the name._If there is no Lucene {@linkplain TokenizerFactory} then the right_hand side should be {@link Void}.;protected Map<String, Class<?>> getPreConfiguredTokenizers() {_        Map<String, Class<?>> tokenizers = new HashMap<>()__        _        for (PreBuiltTokenizers tokenizer : PreBuiltTokenizers.values()) {_            final Class<?> luceneFactoryClazz__            switch (tokenizer) {_            case UAX_URL_EMAIL:_                luceneFactoryClazz = org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerFactory.class__                break__            case PATH_HIERARCHY:_                luceneFactoryClazz = Void.class__                break__            default:_                luceneFactoryClazz = null__            }_            tokenizers.put(tokenizer.name().toLowerCase(Locale.ROOT), luceneFactoryClazz)__        }_        _        tokenizers.put("nGram", tokenizers.get("ngram"))__        tokenizers.put("edgeNGram", tokenizers.get("edge_ngram"))__        tokenizers.put("PathHierarchy", tokenizers.get("path_hierarchy"))__        return tokenizers__    };map,containing,pre,configured,tokenizers,that,should,be,available,after,installing,this,plugin,the,map,is,from,the,name,of,the,token,filter,to,the,class,of,the,lucene,link,tokenizer,factory,that,it,is,emulating,if,the,lucene,linkplain,tokenizer,factory,is,code,null,then,the,test,will,look,it,up,for,you,from,the,name,if,there,is,no,lucene,linkplain,tokenizer,factory,then,the,right,hand,side,should,be,link,void;protected,map,string,class,get,pre,configured,tokenizers,map,string,class,tokenizers,new,hash,map,for,pre,built,tokenizers,tokenizer,pre,built,tokenizers,values,final,class,lucene,factory,clazz,switch,tokenizer,case,lucene,factory,clazz,org,apache,lucene,analysis,standard,uax29urlemail,tokenizer,factory,class,break,case,lucene,factory,clazz,void,class,break,default,lucene,factory,clazz,null,tokenizers,put,tokenizer,name,to,lower,case,locale,root,lucene,factory,clazz,tokenizers,put,n,gram,tokenizers,get,ngram,tokenizers,put,edge,ngram,tokenizers,get,tokenizers,put,path,hierarchy,tokenizers,get,return,tokenizers
AnalysisFactoryTestCase -> protected Map<String, Class<?>> getPreConfiguredTokenizers();1526289033;Map containing pre-configured tokenizers that should be available_after installing this plugin. The map is from the name of the token_filter to the class of the Lucene {@link TokenizerFactory} that it_is emulating. If the Lucene {@linkplain TokenizerFactory} is_{@code null} then the test will look it up for you from the name._If there is no Lucene {@linkplain TokenizerFactory} then the right_hand side should be {@link Void}.;protected Map<String, Class<?>> getPreConfiguredTokenizers() {_        Map<String, Class<?>> tokenizers = new HashMap<>()__        _        for (PreBuiltTokenizers tokenizer : PreBuiltTokenizers.values()) {_            tokenizers.put(tokenizer.name().toLowerCase(Locale.ROOT), null)__        }_        return tokenizers__    };map,containing,pre,configured,tokenizers,that,should,be,available,after,installing,this,plugin,the,map,is,from,the,name,of,the,token,filter,to,the,class,of,the,lucene,link,tokenizer,factory,that,it,is,emulating,if,the,lucene,linkplain,tokenizer,factory,is,code,null,then,the,test,will,look,it,up,for,you,from,the,name,if,there,is,no,lucene,linkplain,tokenizer,factory,then,the,right,hand,side,should,be,link,void;protected,map,string,class,get,pre,configured,tokenizers,map,string,class,tokenizers,new,hash,map,for,pre,built,tokenizers,tokenizer,pre,built,tokenizers,values,tokenizers,put,tokenizer,name,to,lower,case,locale,root,null,return,tokenizers
AnalysisFactoryTestCase -> protected Map<String, Class<?>> getPreConfiguredTokenizers();1526900724;Map containing pre-configured tokenizers that should be available_after installing this plugin. The map is from the name of the token_filter to the class of the Lucene {@link TokenizerFactory} that it_is emulating. If the Lucene {@linkplain TokenizerFactory} is_{@code null} then the test will look it up for you from the name._If there is no Lucene {@linkplain TokenizerFactory} then the right_hand side should be {@link Void}.;protected Map<String, Class<?>> getPreConfiguredTokenizers() {_        Map<String, Class<?>> tokenizers = new HashMap<>()__        _        for (PreBuiltTokenizers tokenizer : PreBuiltTokenizers.values()) {_            tokenizers.put(tokenizer.name().toLowerCase(Locale.ROOT), null)__        }_        return tokenizers__    };map,containing,pre,configured,tokenizers,that,should,be,available,after,installing,this,plugin,the,map,is,from,the,name,of,the,token,filter,to,the,class,of,the,lucene,link,tokenizer,factory,that,it,is,emulating,if,the,lucene,linkplain,tokenizer,factory,is,code,null,then,the,test,will,look,it,up,for,you,from,the,name,if,there,is,no,lucene,linkplain,tokenizer,factory,then,the,right,hand,side,should,be,link,void;protected,map,string,class,get,pre,configured,tokenizers,map,string,class,tokenizers,new,hash,map,for,pre,built,tokenizers,tokenizer,pre,built,tokenizers,values,tokenizers,put,tokenizer,name,to,lower,case,locale,root,null,return,tokenizers
AnalysisFactoryTestCase -> protected Map<String, Class<?>> getPreConfiguredTokenizers();1527096592;Map containing pre-configured tokenizers that should be available_after installing this plugin. The map is from the name of the token_filter to the class of the Lucene {@link TokenizerFactory} that it_is emulating. If the Lucene {@linkplain TokenizerFactory} is_{@code null} then the test will look it up for you from the name._If there is no Lucene {@linkplain TokenizerFactory} then the right_hand side should be {@link Void}.;protected Map<String, Class<?>> getPreConfiguredTokenizers() {_        Map<String, Class<?>> tokenizers = new HashMap<>()__        _        for (PreBuiltTokenizers tokenizer : PreBuiltTokenizers.values()) {_            tokenizers.put(tokenizer.name().toLowerCase(Locale.ROOT), null)__        }_        return tokenizers__    };map,containing,pre,configured,tokenizers,that,should,be,available,after,installing,this,plugin,the,map,is,from,the,name,of,the,token,filter,to,the,class,of,the,lucene,link,tokenizer,factory,that,it,is,emulating,if,the,lucene,linkplain,tokenizer,factory,is,code,null,then,the,test,will,look,it,up,for,you,from,the,name,if,there,is,no,lucene,linkplain,tokenizer,factory,then,the,right,hand,side,should,be,link,void;protected,map,string,class,get,pre,configured,tokenizers,map,string,class,tokenizers,new,hash,map,for,pre,built,tokenizers,tokenizer,pre,built,tokenizers,values,tokenizers,put,tokenizer,name,to,lower,case,locale,root,null,return,tokenizers
AnalysisFactoryTestCase -> protected Map<String, Class<?>> getPreConfiguredTokenizers();1527622193;Map containing pre-configured tokenizers that should be available_after installing this plugin. The map is from the name of the token_filter to the class of the Lucene {@link TokenizerFactory} that it_is emulating. If the Lucene {@linkplain TokenizerFactory} is_{@code null} then the test will look it up for you from the name._If there is no Lucene {@linkplain TokenizerFactory} then the right_hand side should be {@link Void}.;protected Map<String, Class<?>> getPreConfiguredTokenizers() {_        Map<String, Class<?>> tokenizers = new HashMap<>()__        _        for (PreBuiltTokenizers tokenizer : PreBuiltTokenizers.values()) {_            tokenizers.put(tokenizer.name().toLowerCase(Locale.ROOT), null)__        }_        return tokenizers__    };map,containing,pre,configured,tokenizers,that,should,be,available,after,installing,this,plugin,the,map,is,from,the,name,of,the,token,filter,to,the,class,of,the,lucene,link,tokenizer,factory,that,it,is,emulating,if,the,lucene,linkplain,tokenizer,factory,is,code,null,then,the,test,will,look,it,up,for,you,from,the,name,if,there,is,no,lucene,linkplain,tokenizer,factory,then,the,right,hand,side,should,be,link,void;protected,map,string,class,get,pre,configured,tokenizers,map,string,class,tokenizers,new,hash,map,for,pre,built,tokenizers,tokenizer,pre,built,tokenizers,values,tokenizers,put,tokenizer,name,to,lower,case,locale,root,null,return,tokenizers
AnalysisFactoryTestCase -> protected Map<String, Class<?>> getPreConfiguredTokenizers();1529076503;Map containing pre-configured tokenizers that should be available_after installing this plugin. The map is from the name of the token_filter to the class of the Lucene {@link TokenizerFactory} that it_is emulating. If the Lucene {@linkplain TokenizerFactory} is_{@code null} then the test will look it up for you from the name._If there is no Lucene {@linkplain TokenizerFactory} then the right_hand side should be {@link Void}.;protected Map<String, Class<?>> getPreConfiguredTokenizers() {_        Map<String, Class<?>> tokenizers = new HashMap<>()__        _        for (PreBuiltTokenizers tokenizer : PreBuiltTokenizers.values()) {_            tokenizers.put(tokenizer.name().toLowerCase(Locale.ROOT), null)__        }_        return tokenizers__    };map,containing,pre,configured,tokenizers,that,should,be,available,after,installing,this,plugin,the,map,is,from,the,name,of,the,token,filter,to,the,class,of,the,lucene,link,tokenizer,factory,that,it,is,emulating,if,the,lucene,linkplain,tokenizer,factory,is,code,null,then,the,test,will,look,it,up,for,you,from,the,name,if,there,is,no,lucene,linkplain,tokenizer,factory,then,the,right,hand,side,should,be,link,void;protected,map,string,class,get,pre,configured,tokenizers,map,string,class,tokenizers,new,hash,map,for,pre,built,tokenizers,tokenizer,pre,built,tokenizers,values,tokenizers,put,tokenizer,name,to,lower,case,locale,root,null,return,tokenizers
AnalysisFactoryTestCase -> protected Map<String, Class<?>> getPreConfiguredTokenizers();1534338685;Map containing pre-configured tokenizers that should be available_after installing this plugin. The map is from the name of the token_filter to the class of the Lucene {@link TokenizerFactory} that it_is emulating. If the Lucene {@linkplain TokenizerFactory} is_{@code null} then the test will look it up for you from the name._If there is no Lucene {@linkplain TokenizerFactory} then the right_hand side should be {@link Void}.;protected Map<String, Class<?>> getPreConfiguredTokenizers() {_        Map<String, Class<?>> tokenizers = new HashMap<>()__        _        for (PreBuiltTokenizers tokenizer : PreBuiltTokenizers.values()) {_            tokenizers.put(tokenizer.name().toLowerCase(Locale.ROOT), null)__        }_        return tokenizers__    };map,containing,pre,configured,tokenizers,that,should,be,available,after,installing,this,plugin,the,map,is,from,the,name,of,the,token,filter,to,the,class,of,the,lucene,link,tokenizer,factory,that,it,is,emulating,if,the,lucene,linkplain,tokenizer,factory,is,code,null,then,the,test,will,look,it,up,for,you,from,the,name,if,there,is,no,lucene,linkplain,tokenizer,factory,then,the,right,hand,side,should,be,link,void;protected,map,string,class,get,pre,configured,tokenizers,map,string,class,tokenizers,new,hash,map,for,pre,built,tokenizers,tokenizer,pre,built,tokenizers,values,tokenizers,put,tokenizer,name,to,lower,case,locale,root,null,return,tokenizers
AnalysisFactoryTestCase -> protected Map<String, Class<?>> getPreConfiguredTokenizers();1536314350;Map containing pre-configured tokenizers that should be available_after installing this plugin. The map is from the name of the token_filter to the class of the Lucene {@link TokenizerFactory} that it_is emulating. If the Lucene {@linkplain TokenizerFactory} is_{@code null} then the test will look it up for you from the name._If there is no Lucene {@linkplain TokenizerFactory} then the right_hand side should be {@link Void}.;protected Map<String, Class<?>> getPreConfiguredTokenizers() {_        Map<String, Class<?>> tokenizers = new HashMap<>()__        _        for (PreBuiltTokenizers tokenizer : PreBuiltTokenizers.values()) {_            tokenizers.put(tokenizer.name().toLowerCase(Locale.ROOT), null)__        }_        return tokenizers__    };map,containing,pre,configured,tokenizers,that,should,be,available,after,installing,this,plugin,the,map,is,from,the,name,of,the,token,filter,to,the,class,of,the,lucene,link,tokenizer,factory,that,it,is,emulating,if,the,lucene,linkplain,tokenizer,factory,is,code,null,then,the,test,will,look,it,up,for,you,from,the,name,if,there,is,no,lucene,linkplain,tokenizer,factory,then,the,right,hand,side,should,be,link,void;protected,map,string,class,get,pre,configured,tokenizers,map,string,class,tokenizers,new,hash,map,for,pre,built,tokenizers,tokenizer,pre,built,tokenizers,values,tokenizers,put,tokenizer,name,to,lower,case,locale,root,null,return,tokenizers
AnalysisFactoryTestCase -> protected Map<String, Class<?>> getPreConfiguredTokenizers();1538170812;Map containing pre-configured tokenizers that should be available_after installing this plugin. The map is from the name of the token_filter to the class of the Lucene {@link TokenizerFactory} that it_is emulating. If the Lucene {@linkplain TokenizerFactory} is_{@code null} then the test will look it up for you from the name._If there is no Lucene {@linkplain TokenizerFactory} then the right_hand side should be {@link Void}.;protected Map<String, Class<?>> getPreConfiguredTokenizers() {_        Map<String, Class<?>> tokenizers = new HashMap<>()__        _        for (PreBuiltTokenizers tokenizer : PreBuiltTokenizers.values()) {_            tokenizers.put(tokenizer.name().toLowerCase(Locale.ROOT), null)__        }_        return tokenizers__    };map,containing,pre,configured,tokenizers,that,should,be,available,after,installing,this,plugin,the,map,is,from,the,name,of,the,token,filter,to,the,class,of,the,lucene,link,tokenizer,factory,that,it,is,emulating,if,the,lucene,linkplain,tokenizer,factory,is,code,null,then,the,test,will,look,it,up,for,you,from,the,name,if,there,is,no,lucene,linkplain,tokenizer,factory,then,the,right,hand,side,should,be,link,void;protected,map,string,class,get,pre,configured,tokenizers,map,string,class,tokenizers,new,hash,map,for,pre,built,tokenizers,tokenizer,pre,built,tokenizers,values,tokenizers,put,tokenizer,name,to,lower,case,locale,root,null,return,tokenizers
AnalysisFactoryTestCase -> protected Map<String, Class<?>> getPreConfiguredTokenizers();1541501723;Map containing pre-configured tokenizers that should be available_after installing this plugin. The map is from the name of the token_filter to the class of the Lucene {@link TokenizerFactory} that it_is emulating. If the Lucene {@linkplain TokenizerFactory} is_{@code null} then the test will look it up for you from the name._If there is no Lucene {@linkplain TokenizerFactory} then the right_hand side should be {@link Void}.;protected Map<String, Class<?>> getPreConfiguredTokenizers() {_        Map<String, Class<?>> tokenizers = new HashMap<>()__        _        for (PreBuiltTokenizers tokenizer : PreBuiltTokenizers.values()) {_            tokenizers.put(tokenizer.name().toLowerCase(Locale.ROOT), null)__        }_        return tokenizers__    };map,containing,pre,configured,tokenizers,that,should,be,available,after,installing,this,plugin,the,map,is,from,the,name,of,the,token,filter,to,the,class,of,the,lucene,link,tokenizer,factory,that,it,is,emulating,if,the,lucene,linkplain,tokenizer,factory,is,code,null,then,the,test,will,look,it,up,for,you,from,the,name,if,there,is,no,lucene,linkplain,tokenizer,factory,then,the,right,hand,side,should,be,link,void;protected,map,string,class,get,pre,configured,tokenizers,map,string,class,tokenizers,new,hash,map,for,pre,built,tokenizers,tokenizer,pre,built,tokenizers,values,tokenizers,put,tokenizer,name,to,lower,case,locale,root,null,return,tokenizers
AnalysisFactoryTestCase -> protected Map<String, Class<?>> getPreConfiguredTokenizers();1542897779;Map containing pre-configured tokenizers that should be available_after installing this plugin. The map is from the name of the token_filter to the class of the Lucene {@link TokenizerFactory} that it_is emulating. If the Lucene {@linkplain TokenizerFactory} is_{@code null} then the test will look it up for you from the name._If there is no Lucene {@linkplain TokenizerFactory} then the right_hand side should be {@link Void}.;protected Map<String, Class<?>> getPreConfiguredTokenizers() {_        Map<String, Class<?>> tokenizers = new HashMap<>()__        _        for (PreBuiltTokenizers tokenizer : PreBuiltTokenizers.values()) {_            tokenizers.put(tokenizer.name().toLowerCase(Locale.ROOT), null)__        }_        return tokenizers__    };map,containing,pre,configured,tokenizers,that,should,be,available,after,installing,this,plugin,the,map,is,from,the,name,of,the,token,filter,to,the,class,of,the,lucene,link,tokenizer,factory,that,it,is,emulating,if,the,lucene,linkplain,tokenizer,factory,is,code,null,then,the,test,will,look,it,up,for,you,from,the,name,if,there,is,no,lucene,linkplain,tokenizer,factory,then,the,right,hand,side,should,be,link,void;protected,map,string,class,get,pre,configured,tokenizers,map,string,class,tokenizers,new,hash,map,for,pre,built,tokenizers,tokenizer,pre,built,tokenizers,values,tokenizers,put,tokenizer,name,to,lower,case,locale,root,null,return,tokenizers
AnalysisFactoryTestCase -> protected Map<String, Class<?>> getPreConfiguredTokenFilters();1524684173;Map containing pre-configured token filters that should be available_after installing this plugin. The map is from the name of the token_filter to the class of the Lucene {@link TokenFilterFactory} that it_is emulating. If the Lucene {@linkplain TokenFilterFactory} is_{@code null} then the test will look it up for you from the name. If_there is no Lucene {@linkplain TokenFilterFactory} then the right_hand side should be {@link Void}.;protected Map<String, Class<?>> getPreConfiguredTokenFilters() {_        Map<String, Class<?>> filters = new HashMap<>()__        filters.put("standard", null)__        filters.put("lowercase", null)__        return filters__    };map,containing,pre,configured,token,filters,that,should,be,available,after,installing,this,plugin,the,map,is,from,the,name,of,the,token,filter,to,the,class,of,the,lucene,link,token,filter,factory,that,it,is,emulating,if,the,lucene,linkplain,token,filter,factory,is,code,null,then,the,test,will,look,it,up,for,you,from,the,name,if,there,is,no,lucene,linkplain,token,filter,factory,then,the,right,hand,side,should,be,link,void;protected,map,string,class,get,pre,configured,token,filters,map,string,class,filters,new,hash,map,filters,put,standard,null,filters,put,lowercase,null,return,filters
AnalysisFactoryTestCase -> protected Map<String, Class<?>> getPreConfiguredTokenFilters();1525645056;Map containing pre-configured token filters that should be available_after installing this plugin. The map is from the name of the token_filter to the class of the Lucene {@link TokenFilterFactory} that it_is emulating. If the Lucene {@linkplain TokenFilterFactory} is_{@code null} then the test will look it up for you from the name. If_there is no Lucene {@linkplain TokenFilterFactory} then the right_hand side should be {@link Void}.;protected Map<String, Class<?>> getPreConfiguredTokenFilters() {_        Map<String, Class<?>> filters = new HashMap<>()__        filters.put("standard", null)__        filters.put("lowercase", null)__        return filters__    };map,containing,pre,configured,token,filters,that,should,be,available,after,installing,this,plugin,the,map,is,from,the,name,of,the,token,filter,to,the,class,of,the,lucene,link,token,filter,factory,that,it,is,emulating,if,the,lucene,linkplain,token,filter,factory,is,code,null,then,the,test,will,look,it,up,for,you,from,the,name,if,there,is,no,lucene,linkplain,token,filter,factory,then,the,right,hand,side,should,be,link,void;protected,map,string,class,get,pre,configured,token,filters,map,string,class,filters,new,hash,map,filters,put,standard,null,filters,put,lowercase,null,return,filters
AnalysisFactoryTestCase -> protected Map<String, Class<?>> getPreConfiguredTokenFilters();1526289033;Map containing pre-configured token filters that should be available_after installing this plugin. The map is from the name of the token_filter to the class of the Lucene {@link TokenFilterFactory} that it_is emulating. If the Lucene {@linkplain TokenFilterFactory} is_{@code null} then the test will look it up for you from the name. If_there is no Lucene {@linkplain TokenFilterFactory} then the right_hand side should be {@link Void}.;protected Map<String, Class<?>> getPreConfiguredTokenFilters() {_        Map<String, Class<?>> filters = new HashMap<>()__        filters.put("standard", null)__        filters.put("lowercase", null)__        return filters__    };map,containing,pre,configured,token,filters,that,should,be,available,after,installing,this,plugin,the,map,is,from,the,name,of,the,token,filter,to,the,class,of,the,lucene,link,token,filter,factory,that,it,is,emulating,if,the,lucene,linkplain,token,filter,factory,is,code,null,then,the,test,will,look,it,up,for,you,from,the,name,if,there,is,no,lucene,linkplain,token,filter,factory,then,the,right,hand,side,should,be,link,void;protected,map,string,class,get,pre,configured,token,filters,map,string,class,filters,new,hash,map,filters,put,standard,null,filters,put,lowercase,null,return,filters
AnalysisFactoryTestCase -> protected Map<String, Class<?>> getPreConfiguredTokenFilters();1526900724;Map containing pre-configured token filters that should be available_after installing this plugin. The map is from the name of the token_filter to the class of the Lucene {@link TokenFilterFactory} that it_is emulating. If the Lucene {@linkplain TokenFilterFactory} is_{@code null} then the test will look it up for you from the name. If_there is no Lucene {@linkplain TokenFilterFactory} then the right_hand side should be {@link Void}.;protected Map<String, Class<?>> getPreConfiguredTokenFilters() {_        Map<String, Class<?>> filters = new HashMap<>()__        filters.put("standard", null)__        filters.put("lowercase", null)__        return filters__    };map,containing,pre,configured,token,filters,that,should,be,available,after,installing,this,plugin,the,map,is,from,the,name,of,the,token,filter,to,the,class,of,the,lucene,link,token,filter,factory,that,it,is,emulating,if,the,lucene,linkplain,token,filter,factory,is,code,null,then,the,test,will,look,it,up,for,you,from,the,name,if,there,is,no,lucene,linkplain,token,filter,factory,then,the,right,hand,side,should,be,link,void;protected,map,string,class,get,pre,configured,token,filters,map,string,class,filters,new,hash,map,filters,put,standard,null,filters,put,lowercase,null,return,filters
AnalysisFactoryTestCase -> protected Map<String, Class<?>> getPreConfiguredTokenFilters();1527096592;Map containing pre-configured token filters that should be available_after installing this plugin. The map is from the name of the token_filter to the class of the Lucene {@link TokenFilterFactory} that it_is emulating. If the Lucene {@linkplain TokenFilterFactory} is_{@code null} then the test will look it up for you from the name. If_there is no Lucene {@linkplain TokenFilterFactory} then the right_hand side should be {@link Void}.;protected Map<String, Class<?>> getPreConfiguredTokenFilters() {_        Map<String, Class<?>> filters = new HashMap<>()__        filters.put("standard", null)__        filters.put("lowercase", null)__        return filters__    };map,containing,pre,configured,token,filters,that,should,be,available,after,installing,this,plugin,the,map,is,from,the,name,of,the,token,filter,to,the,class,of,the,lucene,link,token,filter,factory,that,it,is,emulating,if,the,lucene,linkplain,token,filter,factory,is,code,null,then,the,test,will,look,it,up,for,you,from,the,name,if,there,is,no,lucene,linkplain,token,filter,factory,then,the,right,hand,side,should,be,link,void;protected,map,string,class,get,pre,configured,token,filters,map,string,class,filters,new,hash,map,filters,put,standard,null,filters,put,lowercase,null,return,filters
AnalysisFactoryTestCase -> protected Map<String, Class<?>> getPreConfiguredTokenFilters();1527622193;Map containing pre-configured token filters that should be available_after installing this plugin. The map is from the name of the token_filter to the class of the Lucene {@link TokenFilterFactory} that it_is emulating. If the Lucene {@linkplain TokenFilterFactory} is_{@code null} then the test will look it up for you from the name. If_there is no Lucene {@linkplain TokenFilterFactory} then the right_hand side should be {@link Void}.;protected Map<String, Class<?>> getPreConfiguredTokenFilters() {_        Map<String, Class<?>> filters = new HashMap<>()__        filters.put("standard", null)__        filters.put("lowercase", null)__        return filters__    };map,containing,pre,configured,token,filters,that,should,be,available,after,installing,this,plugin,the,map,is,from,the,name,of,the,token,filter,to,the,class,of,the,lucene,link,token,filter,factory,that,it,is,emulating,if,the,lucene,linkplain,token,filter,factory,is,code,null,then,the,test,will,look,it,up,for,you,from,the,name,if,there,is,no,lucene,linkplain,token,filter,factory,then,the,right,hand,side,should,be,link,void;protected,map,string,class,get,pre,configured,token,filters,map,string,class,filters,new,hash,map,filters,put,standard,null,filters,put,lowercase,null,return,filters
AnalysisFactoryTestCase -> protected Map<String, Class<?>> getPreConfiguredTokenFilters();1529076503;Map containing pre-configured token filters that should be available_after installing this plugin. The map is from the name of the token_filter to the class of the Lucene {@link TokenFilterFactory} that it_is emulating. If the Lucene {@linkplain TokenFilterFactory} is_{@code null} then the test will look it up for you from the name. If_there is no Lucene {@linkplain TokenFilterFactory} then the right_hand side should be {@link Void}.;protected Map<String, Class<?>> getPreConfiguredTokenFilters() {_        Map<String, Class<?>> filters = new HashMap<>()__        filters.put("standard", null)__        filters.put("lowercase", null)__        return filters__    };map,containing,pre,configured,token,filters,that,should,be,available,after,installing,this,plugin,the,map,is,from,the,name,of,the,token,filter,to,the,class,of,the,lucene,link,token,filter,factory,that,it,is,emulating,if,the,lucene,linkplain,token,filter,factory,is,code,null,then,the,test,will,look,it,up,for,you,from,the,name,if,there,is,no,lucene,linkplain,token,filter,factory,then,the,right,hand,side,should,be,link,void;protected,map,string,class,get,pre,configured,token,filters,map,string,class,filters,new,hash,map,filters,put,standard,null,filters,put,lowercase,null,return,filters
AnalysisFactoryTestCase -> protected Map<String, Class<?>> getPreConfiguredTokenFilters();1534338685;Map containing pre-configured token filters that should be available_after installing this plugin. The map is from the name of the token_filter to the class of the Lucene {@link TokenFilterFactory} that it_is emulating. If the Lucene {@linkplain TokenFilterFactory} is_{@code null} then the test will look it up for you from the name. If_there is no Lucene {@linkplain TokenFilterFactory} then the right_hand side should be {@link Void}.;protected Map<String, Class<?>> getPreConfiguredTokenFilters() {_        Map<String, Class<?>> filters = new HashMap<>()__        filters.put("standard", null)__        filters.put("lowercase", null)__        return filters__    };map,containing,pre,configured,token,filters,that,should,be,available,after,installing,this,plugin,the,map,is,from,the,name,of,the,token,filter,to,the,class,of,the,lucene,link,token,filter,factory,that,it,is,emulating,if,the,lucene,linkplain,token,filter,factory,is,code,null,then,the,test,will,look,it,up,for,you,from,the,name,if,there,is,no,lucene,linkplain,token,filter,factory,then,the,right,hand,side,should,be,link,void;protected,map,string,class,get,pre,configured,token,filters,map,string,class,filters,new,hash,map,filters,put,standard,null,filters,put,lowercase,null,return,filters
AnalysisFactoryTestCase -> protected Map<String, Class<?>> getPreConfiguredTokenFilters();1536314350;Map containing pre-configured token filters that should be available_after installing this plugin. The map is from the name of the token_filter to the class of the Lucene {@link TokenFilterFactory} that it_is emulating. If the Lucene {@linkplain TokenFilterFactory} is_{@code null} then the test will look it up for you from the name. If_there is no Lucene {@linkplain TokenFilterFactory} then the right_hand side should be {@link Void}.;protected Map<String, Class<?>> getPreConfiguredTokenFilters() {_        Map<String, Class<?>> filters = new HashMap<>()__        filters.put("lowercase", null)__        _        filters.put("standard", Void.class)__        return filters__    };map,containing,pre,configured,token,filters,that,should,be,available,after,installing,this,plugin,the,map,is,from,the,name,of,the,token,filter,to,the,class,of,the,lucene,link,token,filter,factory,that,it,is,emulating,if,the,lucene,linkplain,token,filter,factory,is,code,null,then,the,test,will,look,it,up,for,you,from,the,name,if,there,is,no,lucene,linkplain,token,filter,factory,then,the,right,hand,side,should,be,link,void;protected,map,string,class,get,pre,configured,token,filters,map,string,class,filters,new,hash,map,filters,put,lowercase,null,filters,put,standard,void,class,return,filters
AnalysisFactoryTestCase -> protected Map<String, Class<?>> getPreConfiguredTokenFilters();1538170812;Map containing pre-configured token filters that should be available_after installing this plugin. The map is from the name of the token_filter to the class of the Lucene {@link TokenFilterFactory} that it_is emulating. If the Lucene {@linkplain TokenFilterFactory} is_{@code null} then the test will look it up for you from the name. If_there is no Lucene {@linkplain TokenFilterFactory} then the right_hand side should be {@link Void}.;protected Map<String, Class<?>> getPreConfiguredTokenFilters() {_        Map<String, Class<?>> filters = new HashMap<>()__        filters.put("lowercase", null)__        _        filters.put("standard", Void.class)__        return filters__    };map,containing,pre,configured,token,filters,that,should,be,available,after,installing,this,plugin,the,map,is,from,the,name,of,the,token,filter,to,the,class,of,the,lucene,link,token,filter,factory,that,it,is,emulating,if,the,lucene,linkplain,token,filter,factory,is,code,null,then,the,test,will,look,it,up,for,you,from,the,name,if,there,is,no,lucene,linkplain,token,filter,factory,then,the,right,hand,side,should,be,link,void;protected,map,string,class,get,pre,configured,token,filters,map,string,class,filters,new,hash,map,filters,put,lowercase,null,filters,put,standard,void,class,return,filters
AnalysisFactoryTestCase -> protected Map<String, Class<?>> getPreConfiguredTokenFilters();1541501723;Map containing pre-configured token filters that should be available_after installing this plugin. The map is from the name of the token_filter to the class of the Lucene {@link TokenFilterFactory} that it_is emulating. If the Lucene {@linkplain TokenFilterFactory} is_{@code null} then the test will look it up for you from the name. If_there is no Lucene {@linkplain TokenFilterFactory} then the right_hand side should be {@link Void}.;protected Map<String, Class<?>> getPreConfiguredTokenFilters() {_        Map<String, Class<?>> filters = new HashMap<>()__        filters.put("lowercase", null)__        _        filters.put("standard", Void.class)__        return filters__    };map,containing,pre,configured,token,filters,that,should,be,available,after,installing,this,plugin,the,map,is,from,the,name,of,the,token,filter,to,the,class,of,the,lucene,link,token,filter,factory,that,it,is,emulating,if,the,lucene,linkplain,token,filter,factory,is,code,null,then,the,test,will,look,it,up,for,you,from,the,name,if,there,is,no,lucene,linkplain,token,filter,factory,then,the,right,hand,side,should,be,link,void;protected,map,string,class,get,pre,configured,token,filters,map,string,class,filters,new,hash,map,filters,put,lowercase,null,filters,put,standard,void,class,return,filters
AnalysisFactoryTestCase -> protected Map<String, Class<?>> getPreConfiguredTokenFilters();1542897779;Map containing pre-configured token filters that should be available_after installing this plugin. The map is from the name of the token_filter to the class of the Lucene {@link TokenFilterFactory} that it_is emulating. If the Lucene {@linkplain TokenFilterFactory} is_{@code null} then the test will look it up for you from the name. If_there is no Lucene {@linkplain TokenFilterFactory} then the right_hand side should be {@link Void}.;protected Map<String, Class<?>> getPreConfiguredTokenFilters() {_        Map<String, Class<?>> filters = new HashMap<>()__        filters.put("lowercase", null)__        _        filters.put("standard", Void.class)__        return filters__    };map,containing,pre,configured,token,filters,that,should,be,available,after,installing,this,plugin,the,map,is,from,the,name,of,the,token,filter,to,the,class,of,the,lucene,link,token,filter,factory,that,it,is,emulating,if,the,lucene,linkplain,token,filter,factory,is,code,null,then,the,test,will,look,it,up,for,you,from,the,name,if,there,is,no,lucene,linkplain,token,filter,factory,then,the,right,hand,side,should,be,link,void;protected,map,string,class,get,pre,configured,token,filters,map,string,class,filters,new,hash,map,filters,put,lowercase,null,filters,put,standard,void,class,return,filters
