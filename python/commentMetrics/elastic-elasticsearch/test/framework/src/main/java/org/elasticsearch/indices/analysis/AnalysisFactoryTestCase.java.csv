commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;10;;private static String toCamelCase(String s) {     Matcher m = UNDERSCORE_THEN_ANYTHING.matcher(s).     StringBuffer sb = new StringBuffer().     while (m.find()) {         m.appendReplacement(sb, m.group(1).toUpperCase(Locale.ROOT)).     }     m.appendTail(sb).     sb.setCharAt(0, Character.toUpperCase(sb.charAt(0))).     return sb.toString(). }
false;protected;0;3;;protected Map<String, Class<?>> getCharFilters() {     return KNOWN_CHARFILTERS. }
false;protected;0;3;;protected Map<String, Class<?>> getTokenFilters() {     return KNOWN_TOKENFILTERS. }
false;protected;0;3;;protected Map<String, Class<?>> getTokenizers() {     return KNOWN_TOKENIZERS. }
true;protected;0;7;/**  * Map containing pre-configured token filters that should be available  * after installing this plugin. The map is from the name of the token  * filter to the class of the Lucene {@link TokenFilterFactory} that it  * is emulating. If the Lucene {@linkplain TokenFilterFactory} is  * {@code null} then the test will look it up for you from the name. If  * there is no Lucene {@linkplain TokenFilterFactory} then the right  * hand side should be {@link Void}.  */ ;/**  * Map containing pre-configured token filters that should be available  * after installing this plugin. The map is from the name of the token  * filter to the class of the Lucene {@link TokenFilterFactory} that it  * is emulating. If the Lucene {@linkplain TokenFilterFactory} is  * {@code null} then the test will look it up for you from the name. If  * there is no Lucene {@linkplain TokenFilterFactory} then the right  * hand side should be {@link Void}.  */ protected Map<String, Class<?>> getPreConfiguredTokenFilters() {     Map<String, Class<?>> filters = new HashMap<>().     filters.put("lowercase", null).     // for old indices     filters.put("standard", Void.class).     return filters. }
true;protected;0;8;/**  * Map containing pre-configured tokenizers that should be available  * after installing this plugin. The map is from the name of the token  * filter to the class of the Lucene {@link TokenizerFactory} that it  * is emulating. If the Lucene {@linkplain TokenizerFactory} is  * {@code null} then the test will look it up for you from the name.  * If there is no Lucene {@linkplain TokenizerFactory} then the right  * hand side should be {@link Void}.  */ ;/**  * Map containing pre-configured tokenizers that should be available  * after installing this plugin. The map is from the name of the token  * filter to the class of the Lucene {@link TokenizerFactory} that it  * is emulating. If the Lucene {@linkplain TokenizerFactory} is  * {@code null} then the test will look it up for you from the name.  * If there is no Lucene {@linkplain TokenizerFactory} then the right  * hand side should be {@link Void}.  */ protected Map<String, Class<?>> getPreConfiguredTokenizers() {     Map<String, Class<?>> tokenizers = new HashMap<>().     // TODO drop this temporary shim when all the old style tokenizers have been migrated to new style     for (PreBuiltTokenizers tokenizer : PreBuiltTokenizers.values()) {         tokenizers.put(tokenizer.name().toLowerCase(Locale.ROOT), null).     }     return tokenizers. }
false;public;0;3;;public Map<String, Class<?>> getPreConfiguredCharFilters() {     return emptyMap(). }
false;public;0;5;;public void testTokenizers() {     Set<String> missing = new TreeSet<String>(org.apache.lucene.analysis.util.TokenizerFactory.availableTokenizers()).     missing.removeAll(getTokenizers().keySet()).     assertTrue("new tokenizers found, please update KNOWN_TOKENIZERS: " + missing.toString(), missing.isEmpty()). }
false;public;0;5;;public void testCharFilters() {     Set<String> missing = new TreeSet<String>(org.apache.lucene.analysis.util.CharFilterFactory.availableCharFilters()).     missing.removeAll(getCharFilters().keySet()).     assertTrue("new charfilters found, please update KNOWN_CHARFILTERS: " + missing.toString(), missing.isEmpty()). }
false;public;0;5;;public void testTokenFilters() {     Set<String> missing = new TreeSet<String>(org.apache.lucene.analysis.util.TokenFilterFactory.availableTokenFilters()).     missing.removeAll(getTokenFilters().keySet()).     assertTrue("new tokenfilters found, please update KNOWN_TOKENFILTERS: " + missing.toString(), missing.isEmpty()). }
