# id;timestamp;commentText;codeText;commentWords;codeWords
BackgroundIndexer -> public BackgroundIndexer(String index, String type, Client client, int numOfDocs, final int writerCount);1524684173;Start indexing in the background using a given number of threads. Indexing will be paused after numOfDocs docs has_been indexed.__@param index       index name to index into_@param type        document type_@param client      client to use_@param numOfDocs   number of document to index before pausing. Set to -1 to have no limit._@param writerCount number of indexing threads to use;public BackgroundIndexer(String index, String type, Client client, int numOfDocs, final int writerCount) {_        this(index, type, client, numOfDocs, writerCount, true, null)__    };start,indexing,in,the,background,using,a,given,number,of,threads,indexing,will,be,paused,after,num,of,docs,docs,has,been,indexed,param,index,index,name,to,index,into,param,type,document,type,param,client,client,to,use,param,num,of,docs,number,of,document,to,index,before,pausing,set,to,1,to,have,no,limit,param,writer,count,number,of,indexing,threads,to,use;public,background,indexer,string,index,string,type,client,client,int,num,of,docs,final,int,writer,count,this,index,type,client,num,of,docs,writer,count,true,null
BackgroundIndexer -> public BackgroundIndexer(String index, String type, Client client, int numOfDocs, final int writerCount);1537806831;Start indexing in the background using a given number of threads. Indexing will be paused after numOfDocs docs has_been indexed.__@param index       index name to index into_@param type        document type_@param client      client to use_@param numOfDocs   number of document to index before pausing. Set to -1 to have no limit._@param writerCount number of indexing threads to use;public BackgroundIndexer(String index, String type, Client client, int numOfDocs, final int writerCount) {_        this(index, type, client, numOfDocs, writerCount, true, null)__    };start,indexing,in,the,background,using,a,given,number,of,threads,indexing,will,be,paused,after,num,of,docs,docs,has,been,indexed,param,index,index,name,to,index,into,param,type,document,type,param,client,client,to,use,param,num,of,docs,number,of,document,to,index,before,pausing,set,to,1,to,have,no,limit,param,writer,count,number,of,indexing,threads,to,use;public,background,indexer,string,index,string,type,client,client,int,num,of,docs,final,int,writer,count,this,index,type,client,num,of,docs,writer,count,true,null
BackgroundIndexer -> public BackgroundIndexer(String index, String type, Client client, int numOfDocs, final int writerCount);1540486836;Start indexing in the background using a given number of threads. Indexing will be paused after numOfDocs docs has_been indexed.__@param index       index name to index into_@param type        document type_@param client      client to use_@param numOfDocs   number of document to index before pausing. Set to -1 to have no limit._@param writerCount number of indexing threads to use;public BackgroundIndexer(String index, String type, Client client, int numOfDocs, final int writerCount) {_        this(index, type, client, numOfDocs, writerCount, true, null)__    };start,indexing,in,the,background,using,a,given,number,of,threads,indexing,will,be,paused,after,num,of,docs,docs,has,been,indexed,param,index,index,name,to,index,into,param,type,document,type,param,client,client,to,use,param,num,of,docs,number,of,document,to,index,before,pausing,set,to,1,to,have,no,limit,param,writer,count,number,of,indexing,threads,to,use;public,background,indexer,string,index,string,type,client,client,int,num,of,docs,final,int,writer,count,this,index,type,client,num,of,docs,writer,count,true,null
BackgroundIndexer -> public BackgroundIndexer(String index, String type, Client client, int numOfDocs, final int writerCount);1547030937;Start indexing in the background using a given number of threads. Indexing will be paused after numOfDocs docs has_been indexed.__@param index       index name to index into_@param type        document type_@param client      client to use_@param numOfDocs   number of document to index before pausing. Set to -1 to have no limit._@param writerCount number of indexing threads to use;public BackgroundIndexer(String index, String type, Client client, int numOfDocs, final int writerCount) {_        this(index, type, client, numOfDocs, writerCount, true, null)__    };start,indexing,in,the,background,using,a,given,number,of,threads,indexing,will,be,paused,after,num,of,docs,docs,has,been,indexed,param,index,index,name,to,index,into,param,type,document,type,param,client,client,to,use,param,num,of,docs,number,of,document,to,index,before,pausing,set,to,1,to,have,no,limit,param,writer,count,number,of,indexing,threads,to,use;public,background,indexer,string,index,string,type,client,client,int,num,of,docs,final,int,writer,count,this,index,type,client,num,of,docs,writer,count,true,null
BackgroundIndexer -> public BackgroundIndexer(String index, String type, Client client, int numOfDocs, final int writerCount);1549395161;Start indexing in the background using a given number of threads. Indexing will be paused after numOfDocs docs has_been indexed.__@param index       index name to index into_@param type        document type_@param client      client to use_@param numOfDocs   number of document to index before pausing. Set to -1 to have no limit._@param writerCount number of indexing threads to use;public BackgroundIndexer(String index, String type, Client client, int numOfDocs, final int writerCount) {_        this(index, type, client, numOfDocs, writerCount, true, null)__    };start,indexing,in,the,background,using,a,given,number,of,threads,indexing,will,be,paused,after,num,of,docs,docs,has,been,indexed,param,index,index,name,to,index,into,param,type,document,type,param,client,client,to,use,param,num,of,docs,number,of,document,to,index,before,pausing,set,to,1,to,have,no,limit,param,writer,count,number,of,indexing,threads,to,use;public,background,indexer,string,index,string,type,client,client,int,num,of,docs,final,int,writer,count,this,index,type,client,num,of,docs,writer,count,true,null
BackgroundIndexer -> public BackgroundIndexer(String index, String type, Client client, int numOfDocs, final int writerCount);1551176390;Start indexing in the background using a given number of threads. Indexing will be paused after numOfDocs docs has_been indexed.__@param index       index name to index into_@param type        document type_@param client      client to use_@param numOfDocs   number of document to index before pausing. Set to -1 to have no limit._@param writerCount number of indexing threads to use;public BackgroundIndexer(String index, String type, Client client, int numOfDocs, final int writerCount) {_        this(index, type, client, numOfDocs, writerCount, true, null)__    };start,indexing,in,the,background,using,a,given,number,of,threads,indexing,will,be,paused,after,num,of,docs,docs,has,been,indexed,param,index,index,name,to,index,into,param,type,document,type,param,client,client,to,use,param,num,of,docs,number,of,document,to,index,before,pausing,set,to,1,to,have,no,limit,param,writer,count,number,of,indexing,threads,to,use;public,background,indexer,string,index,string,type,client,client,int,num,of,docs,final,int,writer,count,this,index,type,client,num,of,docs,writer,count,true,null
BackgroundIndexer -> public void continueIndexing();1524684173;Continue indexing after it has paused. No new document limit will be set;public void continueIndexing() {_        continueIndexing(-1)__    };continue,indexing,after,it,has,paused,no,new,document,limit,will,be,set;public,void,continue,indexing,continue,indexing,1
BackgroundIndexer -> public void continueIndexing();1537806831;Continue indexing after it has paused. No new document limit will be set;public void continueIndexing() {_        continueIndexing(-1)__    };continue,indexing,after,it,has,paused,no,new,document,limit,will,be,set;public,void,continue,indexing,continue,indexing,1
BackgroundIndexer -> public void continueIndexing();1540486836;Continue indexing after it has paused. No new document limit will be set;public void continueIndexing() {_        continueIndexing(-1)__    };continue,indexing,after,it,has,paused,no,new,document,limit,will,be,set;public,void,continue,indexing,continue,indexing,1
BackgroundIndexer -> public void continueIndexing();1547030937;Continue indexing after it has paused. No new document limit will be set;public void continueIndexing() {_        continueIndexing(-1)__    };continue,indexing,after,it,has,paused,no,new,document,limit,will,be,set;public,void,continue,indexing,continue,indexing,1
BackgroundIndexer -> public void continueIndexing();1549395161;Continue indexing after it has paused. No new document limit will be set;public void continueIndexing() {_        continueIndexing(-1)__    };continue,indexing,after,it,has,paused,no,new,document,limit,will,be,set;public,void,continue,indexing,continue,indexing,1
BackgroundIndexer -> public void stop() throws InterruptedException;1524684173;Stop all background threads *;public void stop() throws InterruptedException {_        if (stop.get()) {_            return__        }_        stop.set(true)__        Assert.assertThat("timeout while waiting for indexing threads to stop", stopLatch.await(6, TimeUnit.MINUTES), equalTo(true))__        assertNoFailures()__    };stop,all,background,threads;public,void,stop,throws,interrupted,exception,if,stop,get,return,stop,set,true,assert,assert,that,timeout,while,waiting,for,indexing,threads,to,stop,stop,latch,await,6,time,unit,minutes,equal,to,true,assert,no,failures
BackgroundIndexer -> public void stop() throws InterruptedException;1537806831;Stop all background threads *;public void stop() throws InterruptedException {_        if (stop.get()) {_            return__        }_        stop.set(true)__        Assert.assertThat("timeout while waiting for indexing threads to stop", stopLatch.await(6, TimeUnit.MINUTES), equalTo(true))__        assertNoFailures()__    };stop,all,background,threads;public,void,stop,throws,interrupted,exception,if,stop,get,return,stop,set,true,assert,assert,that,timeout,while,waiting,for,indexing,threads,to,stop,stop,latch,await,6,time,unit,minutes,equal,to,true,assert,no,failures
BackgroundIndexer -> public void stop() throws InterruptedException;1540486836;Stop all background threads *;public void stop() throws InterruptedException {_        if (stop.get()) {_            return__        }_        stop.set(true)__        Assert.assertThat("timeout while waiting for indexing threads to stop", stopLatch.await(6, TimeUnit.MINUTES), equalTo(true))__        assertNoFailures()__    };stop,all,background,threads;public,void,stop,throws,interrupted,exception,if,stop,get,return,stop,set,true,assert,assert,that,timeout,while,waiting,for,indexing,threads,to,stop,stop,latch,await,6,time,unit,minutes,equal,to,true,assert,no,failures
BackgroundIndexer -> public void stop() throws InterruptedException;1547030937;Stop all background threads *;public void stop() throws InterruptedException {_        if (stop.get()) {_            return__        }_        stop.set(true)__        Assert.assertThat("timeout while waiting for indexing threads to stop", stopLatch.await(6, TimeUnit.MINUTES), equalTo(true))__        if (assertNoFailuresOnStop) {_            assertNoFailures()__        }_    };stop,all,background,threads;public,void,stop,throws,interrupted,exception,if,stop,get,return,stop,set,true,assert,assert,that,timeout,while,waiting,for,indexing,threads,to,stop,stop,latch,await,6,time,unit,minutes,equal,to,true,if,assert,no,failures,on,stop,assert,no,failures
BackgroundIndexer -> public void stop() throws InterruptedException;1549395161;Stop all background threads *;public void stop() throws InterruptedException {_        if (stop.get()) {_            return__        }_        stop.set(true)__        Assert.assertThat("timeout while waiting for indexing threads to stop", stopLatch.await(6, TimeUnit.MINUTES), equalTo(true))__        if (assertNoFailuresOnStop) {_            assertNoFailures()__        }_    };stop,all,background,threads;public,void,stop,throws,interrupted,exception,if,stop,get,return,stop,set,true,assert,assert,that,timeout,while,waiting,for,indexing,threads,to,stop,stop,latch,await,6,time,unit,minutes,equal,to,true,if,assert,no,failures,on,stop,assert,no,failures
BackgroundIndexer -> public void stop() throws InterruptedException;1551176390;Stop all background threads *;public void stop() throws InterruptedException {_        if (stop.get()) {_            return__        }_        stop.set(true)__        Assert.assertThat("timeout while waiting for indexing threads to stop", stopLatch.await(6, TimeUnit.MINUTES), equalTo(true))__        if (assertNoFailuresOnStop) {_            assertNoFailures()__        }_    };stop,all,background,threads;public,void,stop,throws,interrupted,exception,if,stop,get,return,stop,set,true,assert,assert,that,timeout,while,waiting,for,indexing,threads,to,stop,stop,latch,await,6,time,unit,minutes,equal,to,true,if,assert,no,failures,on,stop,assert,no,failures
BackgroundIndexer -> public void setMaxFieldSize(int fieldSize);1524684173;the minimum size in code points of a payload field in the indexed documents;public void setMaxFieldSize(int fieldSize) {_        maxFieldSize = fieldSize__    };the,minimum,size,in,code,points,of,a,payload,field,in,the,indexed,documents;public,void,set,max,field,size,int,field,size,max,field,size,field,size
BackgroundIndexer -> public void setMaxFieldSize(int fieldSize);1537806831;the minimum size in code points of a payload field in the indexed documents;public void setMaxFieldSize(int fieldSize) {_        maxFieldSize = fieldSize__    };the,minimum,size,in,code,points,of,a,payload,field,in,the,indexed,documents;public,void,set,max,field,size,int,field,size,max,field,size,field,size
BackgroundIndexer -> public void setMaxFieldSize(int fieldSize);1540486836;the minimum size in code points of a payload field in the indexed documents;public void setMaxFieldSize(int fieldSize) {_        maxFieldSize = fieldSize__    };the,minimum,size,in,code,points,of,a,payload,field,in,the,indexed,documents;public,void,set,max,field,size,int,field,size,max,field,size,field,size
BackgroundIndexer -> public void setMaxFieldSize(int fieldSize);1547030937;the minimum size in code points of a payload field in the indexed documents;public void setMaxFieldSize(int fieldSize) {_        maxFieldSize = fieldSize__    };the,minimum,size,in,code,points,of,a,payload,field,in,the,indexed,documents;public,void,set,max,field,size,int,field,size,max,field,size,field,size
BackgroundIndexer -> public void setMaxFieldSize(int fieldSize);1549395161;the minimum size in code points of a payload field in the indexed documents;public void setMaxFieldSize(int fieldSize) {_        maxFieldSize = fieldSize__    };the,minimum,size,in,code,points,of,a,payload,field,in,the,indexed,documents;public,void,set,max,field,size,int,field,size,max,field,size,field,size
BackgroundIndexer -> public Set<String> getIds();1524684173;Returns the ID set of all documents indexed by this indexer run;public Set<String> getIds() {_        return this.ids__    };returns,the,id,set,of,all,documents,indexed,by,this,indexer,run;public,set,string,get,ids,return,this,ids
BackgroundIndexer -> public Set<String> getIds();1537806831;Returns the ID set of all documents indexed by this indexer run;public Set<String> getIds() {_        return this.ids__    };returns,the,id,set,of,all,documents,indexed,by,this,indexer,run;public,set,string,get,ids,return,this,ids
BackgroundIndexer -> public Set<String> getIds();1540486836;Returns the ID set of all documents indexed by this indexer run;public Set<String> getIds() {_        return this.ids__    };returns,the,id,set,of,all,documents,indexed,by,this,indexer,run;public,set,string,get,ids,return,this,ids
BackgroundIndexer -> public Set<String> getIds();1547030937;Returns the ID set of all documents indexed by this indexer run;public Set<String> getIds() {_        return this.ids__    };returns,the,id,set,of,all,documents,indexed,by,this,indexer,run;public,set,string,get,ids,return,this,ids
BackgroundIndexer -> public Set<String> getIds();1549395161;Returns the ID set of all documents indexed by this indexer run;public Set<String> getIds() {_        return this.ids__    };returns,the,id,set,of,all,documents,indexed,by,this,indexer,run;public,set,string,get,ids,return,this,ids
BackgroundIndexer -> public Set<String> getIds();1551176390;Returns the ID set of all documents indexed by this indexer run;public Set<String> getIds() {_        return this.ids__    };returns,the,id,set,of,all,documents,indexed,by,this,indexer,run;public,set,string,get,ids,return,this,ids
BackgroundIndexer -> public BackgroundIndexer(final String index, final String type, final Client client, final int numOfDocs, final int writerCount,                              boolean autoStart, Random random);1524684173;Start indexing in the background using a given number of threads. Indexing will be paused after numOfDocs docs has_been indexed.__@param index       index name to index into_@param type        document type_@param client      client to use_@param numOfDocs   number of document to index before pausing. Set to -1 to have no limit._@param writerCount number of indexing threads to use_@param autoStart   set to true to start indexing as soon as all threads have been created._@param random      random instance to use;public BackgroundIndexer(final String index, final String type, final Client client, final int numOfDocs, final int writerCount,_                             boolean autoStart, Random random) {__        if (random == null) {_            random = RandomizedTest.getRandom()__        }_        useAutoGeneratedIDs = random.nextBoolean()__        failures = new CopyOnWriteArrayList<>()__        writers = new Thread[writerCount]__        stopLatch = new CountDownLatch(writers.length)__        logger.info("--> creating {} indexing threads (auto start: [{}], numOfDocs: [{}])", writerCount, autoStart, numOfDocs)__        for (int i = 0_ i < writers.length_ i++) {_            final int indexerId = i__            final boolean batch = random.nextBoolean()__            final Random threadRandom = new Random(random.nextLong())__            writers[i] = new Thread() {_                @Override_                public void run() {_                    long id = -1__                    try {_                        startLatch.await()__                        logger.info("**** starting indexing thread {}", indexerId)__                        while (!stop.get()) {_                            if (batch) {_                                int batchSize = threadRandom.nextInt(20) + 1__                                if (hasBudget.get()) {_                                    batchSize = Math.max(Math.min(batchSize, availableBudget.availablePermits()), 1)__                                    if (!availableBudget.tryAcquire(batchSize, 250, TimeUnit.MILLISECONDS)) {_                                        _                                        continue__                                    }__                                }_                                BulkRequestBuilder bulkRequest = client.prepareBulk()__                                for (int i = 0_ i < batchSize_ i++) {_                                    id = idGenerator.incrementAndGet()__                                    if (useAutoGeneratedIDs) {_                                        bulkRequest.add(client.prepareIndex(index, type).setSource(generateSource(id, threadRandom)))__                                    } else {_                                        bulkRequest.add(client.prepareIndex(index, type, Long.toString(id)).setSource(generateSource(id, threadRandom)))__                                    }_                                }_                                BulkResponse bulkResponse = bulkRequest.get()__                                for (BulkItemResponse bulkItemResponse : bulkResponse) {_                                    if (!bulkItemResponse.isFailed()) {_                                        boolean add = ids.add(bulkItemResponse.getId())__                                        assert add : "ID: " + bulkItemResponse.getId() + " already used"__                                    } else {_                                        throw new ElasticsearchException("bulk request failure, id: ["_                                                + bulkItemResponse.getFailure().getId() + "] message: " + bulkItemResponse.getFailure().getMessage())__                                    }_                                }__                            } else {__                                if (hasBudget.get() && !availableBudget.tryAcquire(250, TimeUnit.MILLISECONDS)) {_                                    _                                    continue__                                }_                                id = idGenerator.incrementAndGet()__                                if (useAutoGeneratedIDs) {_                                    IndexResponse indexResponse = client.prepareIndex(index, type).setSource(generateSource(id, threadRandom)).get()__                                    boolean add = ids.add(indexResponse.getId())__                                    assert add : "ID: " + indexResponse.getId() + " already used"__                                } else {_                                    IndexResponse indexResponse = client.prepareIndex(index, type, Long.toString(id)).setSource(generateSource(id, threadRandom)).get()__                                    boolean add = ids.add(indexResponse.getId())__                                    assert add : "ID: " + indexResponse.getId() + " already used"__                                }_                            }_                        }_                        logger.info("**** done indexing thread {}  stop: {} numDocsIndexed: {}", indexerId, stop.get(), ids.size())__                    } catch (Exception e) {_                        failures.add(e)__                        final long docId = id__                        logger.warn(_                            (Supplier<?>)_                                () -> new ParameterizedMessage("**** failed indexing thread {} on doc id {}", indexerId, docId), e)__                    } finally {_                        stopLatch.countDown()__                    }_                }_            }__            writers[i].start()__        }__        if (autoStart) {_            start(numOfDocs)__        }_    };start,indexing,in,the,background,using,a,given,number,of,threads,indexing,will,be,paused,after,num,of,docs,docs,has,been,indexed,param,index,index,name,to,index,into,param,type,document,type,param,client,client,to,use,param,num,of,docs,number,of,document,to,index,before,pausing,set,to,1,to,have,no,limit,param,writer,count,number,of,indexing,threads,to,use,param,auto,start,set,to,true,to,start,indexing,as,soon,as,all,threads,have,been,created,param,random,random,instance,to,use;public,background,indexer,final,string,index,final,string,type,final,client,client,final,int,num,of,docs,final,int,writer,count,boolean,auto,start,random,random,if,random,null,random,randomized,test,get,random,use,auto,generated,ids,random,next,boolean,failures,new,copy,on,write,array,list,writers,new,thread,writer,count,stop,latch,new,count,down,latch,writers,length,logger,info,creating,indexing,threads,auto,start,num,of,docs,writer,count,auto,start,num,of,docs,for,int,i,0,i,writers,length,i,final,int,indexer,id,i,final,boolean,batch,random,next,boolean,final,random,thread,random,new,random,random,next,long,writers,i,new,thread,override,public,void,run,long,id,1,try,start,latch,await,logger,info,starting,indexing,thread,indexer,id,while,stop,get,if,batch,int,batch,size,thread,random,next,int,20,1,if,has,budget,get,batch,size,math,max,math,min,batch,size,available,budget,available,permits,1,if,available,budget,try,acquire,batch,size,250,time,unit,milliseconds,continue,bulk,request,builder,bulk,request,client,prepare,bulk,for,int,i,0,i,batch,size,i,id,id,generator,increment,and,get,if,use,auto,generated,ids,bulk,request,add,client,prepare,index,index,type,set,source,generate,source,id,thread,random,else,bulk,request,add,client,prepare,index,index,type,long,to,string,id,set,source,generate,source,id,thread,random,bulk,response,bulk,response,bulk,request,get,for,bulk,item,response,bulk,item,response,bulk,response,if,bulk,item,response,is,failed,boolean,add,ids,add,bulk,item,response,get,id,assert,add,id,bulk,item,response,get,id,already,used,else,throw,new,elasticsearch,exception,bulk,request,failure,id,bulk,item,response,get,failure,get,id,message,bulk,item,response,get,failure,get,message,else,if,has,budget,get,available,budget,try,acquire,250,time,unit,milliseconds,continue,id,id,generator,increment,and,get,if,use,auto,generated,ids,index,response,index,response,client,prepare,index,index,type,set,source,generate,source,id,thread,random,get,boolean,add,ids,add,index,response,get,id,assert,add,id,index,response,get,id,already,used,else,index,response,index,response,client,prepare,index,index,type,long,to,string,id,set,source,generate,source,id,thread,random,get,boolean,add,ids,add,index,response,get,id,assert,add,id,index,response,get,id,already,used,logger,info,done,indexing,thread,stop,num,docs,indexed,indexer,id,stop,get,ids,size,catch,exception,e,failures,add,e,final,long,doc,id,id,logger,warn,supplier,new,parameterized,message,failed,indexing,thread,on,doc,id,indexer,id,doc,id,e,finally,stop,latch,count,down,writers,i,start,if,auto,start,start,num,of,docs
BackgroundIndexer -> public BackgroundIndexer(final String index, final String type, final Client client, final int numOfDocs, final int writerCount,                              boolean autoStart, Random random);1537806831;Start indexing in the background using a given number of threads. Indexing will be paused after numOfDocs docs has_been indexed.__@param index       index name to index into_@param type        document type_@param client      client to use_@param numOfDocs   number of document to index before pausing. Set to -1 to have no limit._@param writerCount number of indexing threads to use_@param autoStart   set to true to start indexing as soon as all threads have been created._@param random      random instance to use;public BackgroundIndexer(final String index, final String type, final Client client, final int numOfDocs, final int writerCount,_                             boolean autoStart, Random random) {__        if (random == null) {_            random = RandomizedTest.getRandom()__        }_        useAutoGeneratedIDs = random.nextBoolean()__        failures = new CopyOnWriteArrayList<>()__        writers = new Thread[writerCount]__        stopLatch = new CountDownLatch(writers.length)__        logger.info("--> creating {} indexing threads (auto start: [{}], numOfDocs: [{}])", writerCount, autoStart, numOfDocs)__        for (int i = 0_ i < writers.length_ i++) {_            final int indexerId = i__            final boolean batch = random.nextBoolean()__            final Random threadRandom = new Random(random.nextLong())__            writers[i] = new Thread() {_                @Override_                public void run() {_                    long id = -1__                    try {_                        startLatch.await()__                        logger.info("**** starting indexing thread {}", indexerId)__                        while (!stop.get()) {_                            if (batch) {_                                int batchSize = threadRandom.nextInt(20) + 1__                                if (hasBudget.get()) {_                                    _                                    batchSize = Math.max(Math.min(batchSize, availableBudget.availablePermits()), 1)__                                    if (!availableBudget.tryAcquire(batchSize, 250, TimeUnit.MILLISECONDS)) {_                                        _                                        continue__                                    }__                                }_                                BulkRequestBuilder bulkRequest = client.prepareBulk()__                                for (int i = 0_ i < batchSize_ i++) {_                                    id = idGenerator.incrementAndGet()__                                    if (useAutoGeneratedIDs) {_                                        bulkRequest.add(client.prepareIndex(index, type).setSource(generateSource(id, threadRandom)))__                                    } else {_                                        bulkRequest.add(client.prepareIndex(index, type, Long.toString(id))_                                                .setSource(generateSource(id, threadRandom)))__                                    }_                                }_                                BulkResponse bulkResponse = bulkRequest.get()__                                for (BulkItemResponse bulkItemResponse : bulkResponse) {_                                    if (!bulkItemResponse.isFailed()) {_                                        boolean add = ids.add(bulkItemResponse.getId())__                                        assert add : "ID: " + bulkItemResponse.getId() + " already used"__                                    } else {_                                        throw new ElasticsearchException("bulk request failure, id: ["_                                                + bulkItemResponse.getFailure().getId() + "] message: "_                                                + bulkItemResponse.getFailure().getMessage())__                                    }_                                }__                            } else {__                                if (hasBudget.get() && !availableBudget.tryAcquire(250, TimeUnit.MILLISECONDS)) {_                                    _                                    continue__                                }_                                id = idGenerator.incrementAndGet()__                                if (useAutoGeneratedIDs) {_                                    IndexResponse indexResponse = client.prepareIndex(index, type)_                                            .setSource(generateSource(id, threadRandom)).get()__                                    boolean add = ids.add(indexResponse.getId())__                                    assert add : "ID: " + indexResponse.getId() + " already used"__                                } else {_                                    IndexResponse indexResponse = client.prepareIndex(index, type, Long.toString(id))_                                            .setSource(generateSource(id, threadRandom)).get()__                                    boolean add = ids.add(indexResponse.getId())__                                    assert add : "ID: " + indexResponse.getId() + " already used"__                                }_                            }_                        }_                        logger.info("**** done indexing thread {}  stop: {} numDocsIndexed: {}", indexerId, stop.get(), ids.size())__                    } catch (Exception e) {_                        failures.add(e)__                        final long docId = id__                        logger.warn(_                            (Supplier<?>)_                                () -> new ParameterizedMessage("**** failed indexing thread {} on doc id {}", indexerId, docId), e)__                    } finally {_                        stopLatch.countDown()__                    }_                }_            }__            writers[i].start()__        }__        if (autoStart) {_            start(numOfDocs)__        }_    };start,indexing,in,the,background,using,a,given,number,of,threads,indexing,will,be,paused,after,num,of,docs,docs,has,been,indexed,param,index,index,name,to,index,into,param,type,document,type,param,client,client,to,use,param,num,of,docs,number,of,document,to,index,before,pausing,set,to,1,to,have,no,limit,param,writer,count,number,of,indexing,threads,to,use,param,auto,start,set,to,true,to,start,indexing,as,soon,as,all,threads,have,been,created,param,random,random,instance,to,use;public,background,indexer,final,string,index,final,string,type,final,client,client,final,int,num,of,docs,final,int,writer,count,boolean,auto,start,random,random,if,random,null,random,randomized,test,get,random,use,auto,generated,ids,random,next,boolean,failures,new,copy,on,write,array,list,writers,new,thread,writer,count,stop,latch,new,count,down,latch,writers,length,logger,info,creating,indexing,threads,auto,start,num,of,docs,writer,count,auto,start,num,of,docs,for,int,i,0,i,writers,length,i,final,int,indexer,id,i,final,boolean,batch,random,next,boolean,final,random,thread,random,new,random,random,next,long,writers,i,new,thread,override,public,void,run,long,id,1,try,start,latch,await,logger,info,starting,indexing,thread,indexer,id,while,stop,get,if,batch,int,batch,size,thread,random,next,int,20,1,if,has,budget,get,batch,size,math,max,math,min,batch,size,available,budget,available,permits,1,if,available,budget,try,acquire,batch,size,250,time,unit,milliseconds,continue,bulk,request,builder,bulk,request,client,prepare,bulk,for,int,i,0,i,batch,size,i,id,id,generator,increment,and,get,if,use,auto,generated,ids,bulk,request,add,client,prepare,index,index,type,set,source,generate,source,id,thread,random,else,bulk,request,add,client,prepare,index,index,type,long,to,string,id,set,source,generate,source,id,thread,random,bulk,response,bulk,response,bulk,request,get,for,bulk,item,response,bulk,item,response,bulk,response,if,bulk,item,response,is,failed,boolean,add,ids,add,bulk,item,response,get,id,assert,add,id,bulk,item,response,get,id,already,used,else,throw,new,elasticsearch,exception,bulk,request,failure,id,bulk,item,response,get,failure,get,id,message,bulk,item,response,get,failure,get,message,else,if,has,budget,get,available,budget,try,acquire,250,time,unit,milliseconds,continue,id,id,generator,increment,and,get,if,use,auto,generated,ids,index,response,index,response,client,prepare,index,index,type,set,source,generate,source,id,thread,random,get,boolean,add,ids,add,index,response,get,id,assert,add,id,index,response,get,id,already,used,else,index,response,index,response,client,prepare,index,index,type,long,to,string,id,set,source,generate,source,id,thread,random,get,boolean,add,ids,add,index,response,get,id,assert,add,id,index,response,get,id,already,used,logger,info,done,indexing,thread,stop,num,docs,indexed,indexer,id,stop,get,ids,size,catch,exception,e,failures,add,e,final,long,doc,id,id,logger,warn,supplier,new,parameterized,message,failed,indexing,thread,on,doc,id,indexer,id,doc,id,e,finally,stop,latch,count,down,writers,i,start,if,auto,start,start,num,of,docs
BackgroundIndexer -> public BackgroundIndexer(final String index, final String type, final Client client, final int numOfDocs, final int writerCount,                              boolean autoStart, Random random);1540486836;Start indexing in the background using a given number of threads. Indexing will be paused after numOfDocs docs has_been indexed.__@param index       index name to index into_@param type        document type_@param client      client to use_@param numOfDocs   number of document to index before pausing. Set to -1 to have no limit._@param writerCount number of indexing threads to use_@param autoStart   set to true to start indexing as soon as all threads have been created._@param random      random instance to use;public BackgroundIndexer(final String index, final String type, final Client client, final int numOfDocs, final int writerCount,_                             boolean autoStart, Random random) {__        if (random == null) {_            random = RandomizedTest.getRandom()__        }_        useAutoGeneratedIDs = random.nextBoolean()__        failures = new CopyOnWriteArrayList<>()__        writers = new Thread[writerCount]__        stopLatch = new CountDownLatch(writers.length)__        logger.info("--> creating {} indexing threads (auto start: [{}], numOfDocs: [{}])", writerCount, autoStart, numOfDocs)__        for (int i = 0_ i < writers.length_ i++) {_            final int indexerId = i__            final boolean batch = random.nextBoolean()__            final Random threadRandom = new Random(random.nextLong())__            writers[i] = new Thread() {_                @Override_                public void run() {_                    long id = -1__                    try {_                        startLatch.await()__                        logger.info("**** starting indexing thread {}", indexerId)__                        while (!stop.get()) {_                            if (batch) {_                                int batchSize = threadRandom.nextInt(20) + 1__                                if (hasBudget.get()) {_                                    _                                    batchSize = Math.max(Math.min(batchSize, availableBudget.availablePermits()), 1)__                                    if (!availableBudget.tryAcquire(batchSize, 250, TimeUnit.MILLISECONDS)) {_                                        _                                        continue__                                    }__                                }_                                BulkRequestBuilder bulkRequest = client.prepareBulk()__                                for (int i = 0_ i < batchSize_ i++) {_                                    id = idGenerator.incrementAndGet()__                                    if (useAutoGeneratedIDs) {_                                        bulkRequest.add(client.prepareIndex(index, type).setSource(generateSource(id, threadRandom)))__                                    } else {_                                        bulkRequest.add(client.prepareIndex(index, type, Long.toString(id))_                                                .setSource(generateSource(id, threadRandom)))__                                    }_                                }_                                BulkResponse bulkResponse = bulkRequest.get()__                                for (BulkItemResponse bulkItemResponse : bulkResponse) {_                                    if (!bulkItemResponse.isFailed()) {_                                        boolean add = ids.add(bulkItemResponse.getId())__                                        assert add : "ID: " + bulkItemResponse.getId() + " already used"__                                    } else {_                                        throw new ElasticsearchException("bulk request failure, id: ["_                                                + bulkItemResponse.getFailure().getId() + "] message: "_                                                + bulkItemResponse.getFailure().getMessage())__                                    }_                                }__                            } else {__                                if (hasBudget.get() && !availableBudget.tryAcquire(250, TimeUnit.MILLISECONDS)) {_                                    _                                    continue__                                }_                                id = idGenerator.incrementAndGet()__                                if (useAutoGeneratedIDs) {_                                    IndexResponse indexResponse = client.prepareIndex(index, type)_                                            .setSource(generateSource(id, threadRandom)).get()__                                    boolean add = ids.add(indexResponse.getId())__                                    assert add : "ID: " + indexResponse.getId() + " already used"__                                } else {_                                    IndexResponse indexResponse = client.prepareIndex(index, type, Long.toString(id))_                                            .setSource(generateSource(id, threadRandom)).get()__                                    boolean add = ids.add(indexResponse.getId())__                                    assert add : "ID: " + indexResponse.getId() + " already used"__                                }_                            }_                        }_                        logger.info("**** done indexing thread {}  stop: {} numDocsIndexed: {}", indexerId, stop.get(), ids.size())__                    } catch (Exception e) {_                        failures.add(e)__                        final long docId = id__                        logger.warn(_                            (Supplier<?>)_                                () -> new ParameterizedMessage("**** failed indexing thread {} on doc id {}", indexerId, docId), e)__                    } finally {_                        stopLatch.countDown()__                    }_                }_            }__            writers[i].start()__        }__        if (autoStart) {_            start(numOfDocs)__        }_    };start,indexing,in,the,background,using,a,given,number,of,threads,indexing,will,be,paused,after,num,of,docs,docs,has,been,indexed,param,index,index,name,to,index,into,param,type,document,type,param,client,client,to,use,param,num,of,docs,number,of,document,to,index,before,pausing,set,to,1,to,have,no,limit,param,writer,count,number,of,indexing,threads,to,use,param,auto,start,set,to,true,to,start,indexing,as,soon,as,all,threads,have,been,created,param,random,random,instance,to,use;public,background,indexer,final,string,index,final,string,type,final,client,client,final,int,num,of,docs,final,int,writer,count,boolean,auto,start,random,random,if,random,null,random,randomized,test,get,random,use,auto,generated,ids,random,next,boolean,failures,new,copy,on,write,array,list,writers,new,thread,writer,count,stop,latch,new,count,down,latch,writers,length,logger,info,creating,indexing,threads,auto,start,num,of,docs,writer,count,auto,start,num,of,docs,for,int,i,0,i,writers,length,i,final,int,indexer,id,i,final,boolean,batch,random,next,boolean,final,random,thread,random,new,random,random,next,long,writers,i,new,thread,override,public,void,run,long,id,1,try,start,latch,await,logger,info,starting,indexing,thread,indexer,id,while,stop,get,if,batch,int,batch,size,thread,random,next,int,20,1,if,has,budget,get,batch,size,math,max,math,min,batch,size,available,budget,available,permits,1,if,available,budget,try,acquire,batch,size,250,time,unit,milliseconds,continue,bulk,request,builder,bulk,request,client,prepare,bulk,for,int,i,0,i,batch,size,i,id,id,generator,increment,and,get,if,use,auto,generated,ids,bulk,request,add,client,prepare,index,index,type,set,source,generate,source,id,thread,random,else,bulk,request,add,client,prepare,index,index,type,long,to,string,id,set,source,generate,source,id,thread,random,bulk,response,bulk,response,bulk,request,get,for,bulk,item,response,bulk,item,response,bulk,response,if,bulk,item,response,is,failed,boolean,add,ids,add,bulk,item,response,get,id,assert,add,id,bulk,item,response,get,id,already,used,else,throw,new,elasticsearch,exception,bulk,request,failure,id,bulk,item,response,get,failure,get,id,message,bulk,item,response,get,failure,get,message,else,if,has,budget,get,available,budget,try,acquire,250,time,unit,milliseconds,continue,id,id,generator,increment,and,get,if,use,auto,generated,ids,index,response,index,response,client,prepare,index,index,type,set,source,generate,source,id,thread,random,get,boolean,add,ids,add,index,response,get,id,assert,add,id,index,response,get,id,already,used,else,index,response,index,response,client,prepare,index,index,type,long,to,string,id,set,source,generate,source,id,thread,random,get,boolean,add,ids,add,index,response,get,id,assert,add,id,index,response,get,id,already,used,logger,info,done,indexing,thread,stop,num,docs,indexed,indexer,id,stop,get,ids,size,catch,exception,e,failures,add,e,final,long,doc,id,id,logger,warn,supplier,new,parameterized,message,failed,indexing,thread,on,doc,id,indexer,id,doc,id,e,finally,stop,latch,count,down,writers,i,start,if,auto,start,start,num,of,docs
BackgroundIndexer -> public BackgroundIndexer(final String index, final String type, final Client client, final int numOfDocs, final int writerCount,                              boolean autoStart, Random random);1547030937;Start indexing in the background using a given number of threads. Indexing will be paused after numOfDocs docs has_been indexed.__@param index       index name to index into_@param type        document type_@param client      client to use_@param numOfDocs   number of document to index before pausing. Set to -1 to have no limit._@param writerCount number of indexing threads to use_@param autoStart   set to true to start indexing as soon as all threads have been created._@param random      random instance to use;public BackgroundIndexer(final String index, final String type, final Client client, final int numOfDocs, final int writerCount,_                             boolean autoStart, Random random) {__        if (random == null) {_            random = RandomizedTest.getRandom()__        }_        useAutoGeneratedIDs = random.nextBoolean()__        failures = new CopyOnWriteArrayList<>()__        writers = new Thread[writerCount]__        stopLatch = new CountDownLatch(writers.length)__        logger.info("--> creating {} indexing threads (auto start: [{}], numOfDocs: [{}])", writerCount, autoStart, numOfDocs)__        for (int i = 0_ i < writers.length_ i++) {_            final int indexerId = i__            final boolean batch = random.nextBoolean()__            final Random threadRandom = new Random(random.nextLong())__            writers[i] = new Thread() {_                @Override_                public void run() {_                    long id = -1__                    try {_                        startLatch.await()__                        logger.info("**** starting indexing thread {}", indexerId)__                        while (!stop.get()) {_                            if (batch) {_                                int batchSize = threadRandom.nextInt(20) + 1__                                if (hasBudget.get()) {_                                    _                                    batchSize = Math.max(Math.min(batchSize, availableBudget.availablePermits()), 1)__                                    if (!availableBudget.tryAcquire(batchSize, 250, TimeUnit.MILLISECONDS)) {_                                        _                                        continue__                                    }__                                }_                                BulkRequestBuilder bulkRequest = client.prepareBulk()__                                for (int i = 0_ i < batchSize_ i++) {_                                    id = idGenerator.incrementAndGet()__                                    if (useAutoGeneratedIDs) {_                                        bulkRequest.add(client.prepareIndex(index, type).setSource(generateSource(id, threadRandom)))__                                    } else {_                                        bulkRequest.add(client.prepareIndex(index, type, Long.toString(id))_                                                .setSource(generateSource(id, threadRandom)))__                                    }_                                }_                                BulkResponse bulkResponse = bulkRequest.get()__                                for (BulkItemResponse bulkItemResponse : bulkResponse) {_                                    if (bulkItemResponse.isFailed() == false) {_                                        boolean add = ids.add(bulkItemResponse.getId())__                                        assert add : "ID: " + bulkItemResponse.getId() + " already used"__                                    } else {_                                        failures.add(bulkItemResponse.getFailure().getCause())__                                    }_                                }__                            } else {__                                if (hasBudget.get() && !availableBudget.tryAcquire(250, TimeUnit.MILLISECONDS)) {_                                    _                                    continue__                                }_                                id = idGenerator.incrementAndGet()__                                if (useAutoGeneratedIDs) {_                                    IndexResponse indexResponse = client.prepareIndex(index, type)_                                            .setSource(generateSource(id, threadRandom)).get()__                                    boolean add = ids.add(indexResponse.getId())__                                    assert add : "ID: " + indexResponse.getId() + " already used"__                                } else {_                                    IndexResponse indexResponse = client.prepareIndex(index, type, Long.toString(id))_                                            .setSource(generateSource(id, threadRandom)).get()__                                    boolean add = ids.add(indexResponse.getId())__                                    assert add : "ID: " + indexResponse.getId() + " already used"__                                }_                            }_                        }_                        logger.info("**** done indexing thread {}  stop: {} numDocsIndexed: {}", indexerId, stop.get(), ids.size())__                    } catch (Exception e) {_                        failures.add(e)__                        final long docId = id__                        logger.warn(_                            (Supplier<?>)_                                () -> new ParameterizedMessage("**** failed indexing thread {} on doc id {}", indexerId, docId), e)__                    } finally {_                        stopLatch.countDown()__                    }_                }_            }__            writers[i].start()__        }__        if (autoStart) {_            start(numOfDocs)__        }_    };start,indexing,in,the,background,using,a,given,number,of,threads,indexing,will,be,paused,after,num,of,docs,docs,has,been,indexed,param,index,index,name,to,index,into,param,type,document,type,param,client,client,to,use,param,num,of,docs,number,of,document,to,index,before,pausing,set,to,1,to,have,no,limit,param,writer,count,number,of,indexing,threads,to,use,param,auto,start,set,to,true,to,start,indexing,as,soon,as,all,threads,have,been,created,param,random,random,instance,to,use;public,background,indexer,final,string,index,final,string,type,final,client,client,final,int,num,of,docs,final,int,writer,count,boolean,auto,start,random,random,if,random,null,random,randomized,test,get,random,use,auto,generated,ids,random,next,boolean,failures,new,copy,on,write,array,list,writers,new,thread,writer,count,stop,latch,new,count,down,latch,writers,length,logger,info,creating,indexing,threads,auto,start,num,of,docs,writer,count,auto,start,num,of,docs,for,int,i,0,i,writers,length,i,final,int,indexer,id,i,final,boolean,batch,random,next,boolean,final,random,thread,random,new,random,random,next,long,writers,i,new,thread,override,public,void,run,long,id,1,try,start,latch,await,logger,info,starting,indexing,thread,indexer,id,while,stop,get,if,batch,int,batch,size,thread,random,next,int,20,1,if,has,budget,get,batch,size,math,max,math,min,batch,size,available,budget,available,permits,1,if,available,budget,try,acquire,batch,size,250,time,unit,milliseconds,continue,bulk,request,builder,bulk,request,client,prepare,bulk,for,int,i,0,i,batch,size,i,id,id,generator,increment,and,get,if,use,auto,generated,ids,bulk,request,add,client,prepare,index,index,type,set,source,generate,source,id,thread,random,else,bulk,request,add,client,prepare,index,index,type,long,to,string,id,set,source,generate,source,id,thread,random,bulk,response,bulk,response,bulk,request,get,for,bulk,item,response,bulk,item,response,bulk,response,if,bulk,item,response,is,failed,false,boolean,add,ids,add,bulk,item,response,get,id,assert,add,id,bulk,item,response,get,id,already,used,else,failures,add,bulk,item,response,get,failure,get,cause,else,if,has,budget,get,available,budget,try,acquire,250,time,unit,milliseconds,continue,id,id,generator,increment,and,get,if,use,auto,generated,ids,index,response,index,response,client,prepare,index,index,type,set,source,generate,source,id,thread,random,get,boolean,add,ids,add,index,response,get,id,assert,add,id,index,response,get,id,already,used,else,index,response,index,response,client,prepare,index,index,type,long,to,string,id,set,source,generate,source,id,thread,random,get,boolean,add,ids,add,index,response,get,id,assert,add,id,index,response,get,id,already,used,logger,info,done,indexing,thread,stop,num,docs,indexed,indexer,id,stop,get,ids,size,catch,exception,e,failures,add,e,final,long,doc,id,id,logger,warn,supplier,new,parameterized,message,failed,indexing,thread,on,doc,id,indexer,id,doc,id,e,finally,stop,latch,count,down,writers,i,start,if,auto,start,start,num,of,docs
BackgroundIndexer -> public BackgroundIndexer(final String index, final String type, final Client client, final int numOfDocs, final int writerCount,                              boolean autoStart, Random random);1549395161;Start indexing in the background using a given number of threads. Indexing will be paused after numOfDocs docs has_been indexed.__@param index       index name to index into_@param type        document type_@param client      client to use_@param numOfDocs   number of document to index before pausing. Set to -1 to have no limit._@param writerCount number of indexing threads to use_@param autoStart   set to true to start indexing as soon as all threads have been created._@param random      random instance to use;public BackgroundIndexer(final String index, final String type, final Client client, final int numOfDocs, final int writerCount,_                             boolean autoStart, Random random) {__        if (random == null) {_            random = RandomizedTest.getRandom()__        }_        this.client = client__        useAutoGeneratedIDs = random.nextBoolean()__        failures = new CopyOnWriteArrayList<>()__        writers = new Thread[writerCount]__        stopLatch = new CountDownLatch(writers.length)__        logger.info("--> creating {} indexing threads (auto start: [{}], numOfDocs: [{}])", writerCount, autoStart, numOfDocs)__        for (int i = 0_ i < writers.length_ i++) {_            final int indexerId = i__            final boolean batch = random.nextBoolean()__            final Random threadRandom = new Random(random.nextLong())__            writers[i] = new Thread() {_                @Override_                public void run() {_                    long id = -1__                    try {_                        startLatch.await()__                        logger.info("**** starting indexing thread {}", indexerId)__                        while (!stop.get()) {_                            if (batch) {_                                int batchSize = threadRandom.nextInt(20) + 1__                                if (hasBudget.get()) {_                                    _                                    batchSize = Math.max(Math.min(batchSize, availableBudget.availablePermits()), 1)__                                    if (!availableBudget.tryAcquire(batchSize, 250, TimeUnit.MILLISECONDS)) {_                                        _                                        continue__                                    }__                                }_                                BulkRequestBuilder bulkRequest = client.prepareBulk()__                                for (int i = 0_ i < batchSize_ i++) {_                                    id = idGenerator.incrementAndGet()__                                    if (useAutoGeneratedIDs) {_                                        bulkRequest.add(client.prepareIndex(index, type).setSource(generateSource(id, threadRandom)))__                                    } else {_                                        bulkRequest.add(client.prepareIndex(index, type, Long.toString(id))_                                                .setSource(generateSource(id, threadRandom)))__                                    }_                                }_                                BulkResponse bulkResponse = bulkRequest.get()__                                for (BulkItemResponse bulkItemResponse : bulkResponse) {_                                    if (bulkItemResponse.isFailed() == false) {_                                        boolean add = ids.add(bulkItemResponse.getId())__                                        assert add : "ID: " + bulkItemResponse.getId() + " already used"__                                    } else {_                                        failures.add(bulkItemResponse.getFailure().getCause())__                                    }_                                }__                            } else {__                                if (hasBudget.get() && !availableBudget.tryAcquire(250, TimeUnit.MILLISECONDS)) {_                                    _                                    continue__                                }_                                id = idGenerator.incrementAndGet()__                                if (useAutoGeneratedIDs) {_                                    IndexResponse indexResponse = client.prepareIndex(index, type)_                                            .setSource(generateSource(id, threadRandom)).get()__                                    boolean add = ids.add(indexResponse.getId())__                                    assert add : "ID: " + indexResponse.getId() + " already used"__                                } else {_                                    IndexResponse indexResponse = client.prepareIndex(index, type, Long.toString(id))_                                            .setSource(generateSource(id, threadRandom)).get()__                                    boolean add = ids.add(indexResponse.getId())__                                    assert add : "ID: " + indexResponse.getId() + " already used"__                                }_                            }_                        }_                        logger.info("**** done indexing thread {}  stop: {} numDocsIndexed: {}", indexerId, stop.get(), ids.size())__                    } catch (Exception e) {_                        failures.add(e)__                        final long docId = id__                        logger.warn(_                            (Supplier<?>)_                                () -> new ParameterizedMessage("**** failed indexing thread {} on doc id {}", indexerId, docId), e)__                    } finally {_                        stopLatch.countDown()__                    }_                }_            }__            writers[i].start()__        }__        if (autoStart) {_            start(numOfDocs)__        }_    };start,indexing,in,the,background,using,a,given,number,of,threads,indexing,will,be,paused,after,num,of,docs,docs,has,been,indexed,param,index,index,name,to,index,into,param,type,document,type,param,client,client,to,use,param,num,of,docs,number,of,document,to,index,before,pausing,set,to,1,to,have,no,limit,param,writer,count,number,of,indexing,threads,to,use,param,auto,start,set,to,true,to,start,indexing,as,soon,as,all,threads,have,been,created,param,random,random,instance,to,use;public,background,indexer,final,string,index,final,string,type,final,client,client,final,int,num,of,docs,final,int,writer,count,boolean,auto,start,random,random,if,random,null,random,randomized,test,get,random,this,client,client,use,auto,generated,ids,random,next,boolean,failures,new,copy,on,write,array,list,writers,new,thread,writer,count,stop,latch,new,count,down,latch,writers,length,logger,info,creating,indexing,threads,auto,start,num,of,docs,writer,count,auto,start,num,of,docs,for,int,i,0,i,writers,length,i,final,int,indexer,id,i,final,boolean,batch,random,next,boolean,final,random,thread,random,new,random,random,next,long,writers,i,new,thread,override,public,void,run,long,id,1,try,start,latch,await,logger,info,starting,indexing,thread,indexer,id,while,stop,get,if,batch,int,batch,size,thread,random,next,int,20,1,if,has,budget,get,batch,size,math,max,math,min,batch,size,available,budget,available,permits,1,if,available,budget,try,acquire,batch,size,250,time,unit,milliseconds,continue,bulk,request,builder,bulk,request,client,prepare,bulk,for,int,i,0,i,batch,size,i,id,id,generator,increment,and,get,if,use,auto,generated,ids,bulk,request,add,client,prepare,index,index,type,set,source,generate,source,id,thread,random,else,bulk,request,add,client,prepare,index,index,type,long,to,string,id,set,source,generate,source,id,thread,random,bulk,response,bulk,response,bulk,request,get,for,bulk,item,response,bulk,item,response,bulk,response,if,bulk,item,response,is,failed,false,boolean,add,ids,add,bulk,item,response,get,id,assert,add,id,bulk,item,response,get,id,already,used,else,failures,add,bulk,item,response,get,failure,get,cause,else,if,has,budget,get,available,budget,try,acquire,250,time,unit,milliseconds,continue,id,id,generator,increment,and,get,if,use,auto,generated,ids,index,response,index,response,client,prepare,index,index,type,set,source,generate,source,id,thread,random,get,boolean,add,ids,add,index,response,get,id,assert,add,id,index,response,get,id,already,used,else,index,response,index,response,client,prepare,index,index,type,long,to,string,id,set,source,generate,source,id,thread,random,get,boolean,add,ids,add,index,response,get,id,assert,add,id,index,response,get,id,already,used,logger,info,done,indexing,thread,stop,num,docs,indexed,indexer,id,stop,get,ids,size,catch,exception,e,failures,add,e,final,long,doc,id,id,logger,warn,supplier,new,parameterized,message,failed,indexing,thread,on,doc,id,indexer,id,doc,id,e,finally,stop,latch,count,down,writers,i,start,if,auto,start,start,num,of,docs
BackgroundIndexer -> public BackgroundIndexer(final String index, final String type, final Client client, final int numOfDocs, final int writerCount,                              boolean autoStart, Random random);1551176390;Start indexing in the background using a given number of threads. Indexing will be paused after numOfDocs docs has_been indexed.__@param index       index name to index into_@param type        document type_@param client      client to use_@param numOfDocs   number of document to index before pausing. Set to -1 to have no limit._@param writerCount number of indexing threads to use_@param autoStart   set to true to start indexing as soon as all threads have been created._@param random      random instance to use;public BackgroundIndexer(final String index, final String type, final Client client, final int numOfDocs, final int writerCount,_                             boolean autoStart, Random random) {__        if (random == null) {_            random = RandomizedTest.getRandom()__        }_        this.client = client__        useAutoGeneratedIDs = random.nextBoolean()__        failures = new CopyOnWriteArrayList<>()__        writers = new Thread[writerCount]__        stopLatch = new CountDownLatch(writers.length)__        logger.info("--> creating {} indexing threads (auto start: [{}], numOfDocs: [{}])", writerCount, autoStart, numOfDocs)__        for (int i = 0_ i < writers.length_ i++) {_            final int indexerId = i__            final boolean batch = random.nextBoolean()__            final Random threadRandom = new Random(random.nextLong())__            writers[i] = new Thread() {_                @Override_                public void run() {_                    long id = -1__                    try {_                        startLatch.await()__                        logger.info("**** starting indexing thread {}", indexerId)__                        while (!stop.get()) {_                            if (batch) {_                                int batchSize = threadRandom.nextInt(20) + 1__                                if (hasBudget.get()) {_                                    _                                    batchSize = Math.max(Math.min(batchSize, availableBudget.availablePermits()), 1)__                                    if (!availableBudget.tryAcquire(batchSize, 250, TimeUnit.MILLISECONDS)) {_                                        _                                        continue__                                    }__                                }_                                BulkRequestBuilder bulkRequest = client.prepareBulk()__                                for (int i = 0_ i < batchSize_ i++) {_                                    id = idGenerator.incrementAndGet()__                                    if (useAutoGeneratedIDs) {_                                        bulkRequest.add(client.prepareIndex(index, type).setSource(generateSource(id, threadRandom)))__                                    } else {_                                        bulkRequest.add(client.prepareIndex(index, type, Long.toString(id))_                                                .setSource(generateSource(id, threadRandom)))__                                    }_                                }_                                BulkResponse bulkResponse = bulkRequest.get()__                                for (BulkItemResponse bulkItemResponse : bulkResponse) {_                                    if (bulkItemResponse.isFailed() == false) {_                                        boolean add = ids.add(bulkItemResponse.getId())__                                        assert add : "ID: " + bulkItemResponse.getId() + " already used"__                                    } else {_                                        failures.add(bulkItemResponse.getFailure().getCause())__                                    }_                                }__                            } else {__                                if (hasBudget.get() && !availableBudget.tryAcquire(250, TimeUnit.MILLISECONDS)) {_                                    _                                    continue__                                }_                                id = idGenerator.incrementAndGet()__                                if (useAutoGeneratedIDs) {_                                    IndexResponse indexResponse = client.prepareIndex(index, type)_                                            .setSource(generateSource(id, threadRandom)).get()__                                    boolean add = ids.add(indexResponse.getId())__                                    assert add : "ID: " + indexResponse.getId() + " already used"__                                } else {_                                    IndexResponse indexResponse = client.prepareIndex(index, type, Long.toString(id))_                                            .setSource(generateSource(id, threadRandom)).get()__                                    boolean add = ids.add(indexResponse.getId())__                                    assert add : "ID: " + indexResponse.getId() + " already used"__                                }_                            }_                        }_                        logger.info("**** done indexing thread {}  stop: {} numDocsIndexed: {}", indexerId, stop.get(), ids.size())__                    } catch (Exception e) {_                        failures.add(e)__                        final long docId = id__                        logger.warn(_                            (Supplier<?>)_                                () -> new ParameterizedMessage("**** failed indexing thread {} on doc id {}", indexerId, docId), e)__                    } finally {_                        stopLatch.countDown()__                    }_                }_            }__            writers[i].start()__        }__        if (autoStart) {_            start(numOfDocs)__        }_    };start,indexing,in,the,background,using,a,given,number,of,threads,indexing,will,be,paused,after,num,of,docs,docs,has,been,indexed,param,index,index,name,to,index,into,param,type,document,type,param,client,client,to,use,param,num,of,docs,number,of,document,to,index,before,pausing,set,to,1,to,have,no,limit,param,writer,count,number,of,indexing,threads,to,use,param,auto,start,set,to,true,to,start,indexing,as,soon,as,all,threads,have,been,created,param,random,random,instance,to,use;public,background,indexer,final,string,index,final,string,type,final,client,client,final,int,num,of,docs,final,int,writer,count,boolean,auto,start,random,random,if,random,null,random,randomized,test,get,random,this,client,client,use,auto,generated,ids,random,next,boolean,failures,new,copy,on,write,array,list,writers,new,thread,writer,count,stop,latch,new,count,down,latch,writers,length,logger,info,creating,indexing,threads,auto,start,num,of,docs,writer,count,auto,start,num,of,docs,for,int,i,0,i,writers,length,i,final,int,indexer,id,i,final,boolean,batch,random,next,boolean,final,random,thread,random,new,random,random,next,long,writers,i,new,thread,override,public,void,run,long,id,1,try,start,latch,await,logger,info,starting,indexing,thread,indexer,id,while,stop,get,if,batch,int,batch,size,thread,random,next,int,20,1,if,has,budget,get,batch,size,math,max,math,min,batch,size,available,budget,available,permits,1,if,available,budget,try,acquire,batch,size,250,time,unit,milliseconds,continue,bulk,request,builder,bulk,request,client,prepare,bulk,for,int,i,0,i,batch,size,i,id,id,generator,increment,and,get,if,use,auto,generated,ids,bulk,request,add,client,prepare,index,index,type,set,source,generate,source,id,thread,random,else,bulk,request,add,client,prepare,index,index,type,long,to,string,id,set,source,generate,source,id,thread,random,bulk,response,bulk,response,bulk,request,get,for,bulk,item,response,bulk,item,response,bulk,response,if,bulk,item,response,is,failed,false,boolean,add,ids,add,bulk,item,response,get,id,assert,add,id,bulk,item,response,get,id,already,used,else,failures,add,bulk,item,response,get,failure,get,cause,else,if,has,budget,get,available,budget,try,acquire,250,time,unit,milliseconds,continue,id,id,generator,increment,and,get,if,use,auto,generated,ids,index,response,index,response,client,prepare,index,index,type,set,source,generate,source,id,thread,random,get,boolean,add,ids,add,index,response,get,id,assert,add,id,index,response,get,id,already,used,else,index,response,index,response,client,prepare,index,index,type,long,to,string,id,set,source,generate,source,id,thread,random,get,boolean,add,ids,add,index,response,get,id,assert,add,id,index,response,get,id,already,used,logger,info,done,indexing,thread,stop,num,docs,indexed,indexer,id,stop,get,ids,size,catch,exception,e,failures,add,e,final,long,doc,id,id,logger,warn,supplier,new,parameterized,message,failed,indexing,thread,on,doc,id,indexer,id,doc,id,e,finally,stop,latch,count,down,writers,i,start,if,auto,start,start,num,of,docs
BackgroundIndexer -> public void start();1524684173;Start indexing with no limit to the number of documents;public void start() {_        start(-1)__    };start,indexing,with,no,limit,to,the,number,of,documents;public,void,start,start,1
BackgroundIndexer -> public void start();1537806831;Start indexing with no limit to the number of documents;public void start() {_        start(-1)__    };start,indexing,with,no,limit,to,the,number,of,documents;public,void,start,start,1
BackgroundIndexer -> public void start();1540486836;Start indexing with no limit to the number of documents;public void start() {_        start(-1)__    };start,indexing,with,no,limit,to,the,number,of,documents;public,void,start,start,1
BackgroundIndexer -> public void start();1547030937;Start indexing with no limit to the number of documents;public void start() {_        start(-1)__    };start,indexing,with,no,limit,to,the,number,of,documents;public,void,start,start,1
BackgroundIndexer -> public void start();1549395161;Start indexing with no limit to the number of documents;public void start() {_        start(-1)__    };start,indexing,with,no,limit,to,the,number,of,documents;public,void,start,start,1
BackgroundIndexer -> public BackgroundIndexer(String index, String type, Client client, int numOfDocs);1524684173;Start indexing in the background using a random number of threads. Indexing will be paused after numOfDocs docs has_been indexed.__@param index     index name to index into_@param type      document type_@param client    client to use_@param numOfDocs number of document to index before pausing. Set to -1 to have no limit.;public BackgroundIndexer(String index, String type, Client client, int numOfDocs) {_        this(index, type, client, numOfDocs, RandomizedTest.scaledRandomIntBetween(2, 5))__    };start,indexing,in,the,background,using,a,random,number,of,threads,indexing,will,be,paused,after,num,of,docs,docs,has,been,indexed,param,index,index,name,to,index,into,param,type,document,type,param,client,client,to,use,param,num,of,docs,number,of,document,to,index,before,pausing,set,to,1,to,have,no,limit;public,background,indexer,string,index,string,type,client,client,int,num,of,docs,this,index,type,client,num,of,docs,randomized,test,scaled,random,int,between,2,5
BackgroundIndexer -> public BackgroundIndexer(String index, String type, Client client, int numOfDocs);1537806831;Start indexing in the background using a random number of threads. Indexing will be paused after numOfDocs docs has_been indexed.__@param index     index name to index into_@param type      document type_@param client    client to use_@param numOfDocs number of document to index before pausing. Set to -1 to have no limit.;public BackgroundIndexer(String index, String type, Client client, int numOfDocs) {_        this(index, type, client, numOfDocs, RandomizedTest.scaledRandomIntBetween(2, 5))__    };start,indexing,in,the,background,using,a,random,number,of,threads,indexing,will,be,paused,after,num,of,docs,docs,has,been,indexed,param,index,index,name,to,index,into,param,type,document,type,param,client,client,to,use,param,num,of,docs,number,of,document,to,index,before,pausing,set,to,1,to,have,no,limit;public,background,indexer,string,index,string,type,client,client,int,num,of,docs,this,index,type,client,num,of,docs,randomized,test,scaled,random,int,between,2,5
BackgroundIndexer -> public BackgroundIndexer(String index, String type, Client client, int numOfDocs);1540486836;Start indexing in the background using a random number of threads. Indexing will be paused after numOfDocs docs has_been indexed.__@param index     index name to index into_@param type      document type_@param client    client to use_@param numOfDocs number of document to index before pausing. Set to -1 to have no limit.;public BackgroundIndexer(String index, String type, Client client, int numOfDocs) {_        this(index, type, client, numOfDocs, RandomizedTest.scaledRandomIntBetween(2, 5))__    };start,indexing,in,the,background,using,a,random,number,of,threads,indexing,will,be,paused,after,num,of,docs,docs,has,been,indexed,param,index,index,name,to,index,into,param,type,document,type,param,client,client,to,use,param,num,of,docs,number,of,document,to,index,before,pausing,set,to,1,to,have,no,limit;public,background,indexer,string,index,string,type,client,client,int,num,of,docs,this,index,type,client,num,of,docs,randomized,test,scaled,random,int,between,2,5
BackgroundIndexer -> public BackgroundIndexer(String index, String type, Client client, int numOfDocs);1547030937;Start indexing in the background using a random number of threads. Indexing will be paused after numOfDocs docs has_been indexed.__@param index     index name to index into_@param type      document type_@param client    client to use_@param numOfDocs number of document to index before pausing. Set to -1 to have no limit.;public BackgroundIndexer(String index, String type, Client client, int numOfDocs) {_        this(index, type, client, numOfDocs, RandomizedTest.scaledRandomIntBetween(2, 5))__    };start,indexing,in,the,background,using,a,random,number,of,threads,indexing,will,be,paused,after,num,of,docs,docs,has,been,indexed,param,index,index,name,to,index,into,param,type,document,type,param,client,client,to,use,param,num,of,docs,number,of,document,to,index,before,pausing,set,to,1,to,have,no,limit;public,background,indexer,string,index,string,type,client,client,int,num,of,docs,this,index,type,client,num,of,docs,randomized,test,scaled,random,int,between,2,5
BackgroundIndexer -> public BackgroundIndexer(String index, String type, Client client, int numOfDocs);1549395161;Start indexing in the background using a random number of threads. Indexing will be paused after numOfDocs docs has_been indexed.__@param index     index name to index into_@param type      document type_@param client    client to use_@param numOfDocs number of document to index before pausing. Set to -1 to have no limit.;public BackgroundIndexer(String index, String type, Client client, int numOfDocs) {_        this(index, type, client, numOfDocs, RandomizedTest.scaledRandomIntBetween(2, 5))__    };start,indexing,in,the,background,using,a,random,number,of,threads,indexing,will,be,paused,after,num,of,docs,docs,has,been,indexed,param,index,index,name,to,index,into,param,type,document,type,param,client,client,to,use,param,num,of,docs,number,of,document,to,index,before,pausing,set,to,1,to,have,no,limit;public,background,indexer,string,index,string,type,client,client,int,num,of,docs,this,index,type,client,num,of,docs,randomized,test,scaled,random,int,between,2,5
BackgroundIndexer -> public BackgroundIndexer(String index, String type, Client client, int numOfDocs);1551176390;Start indexing in the background using a random number of threads. Indexing will be paused after numOfDocs docs has_been indexed.__@param index     index name to index into_@param type      document type_@param client    client to use_@param numOfDocs number of document to index before pausing. Set to -1 to have no limit.;public BackgroundIndexer(String index, String type, Client client, int numOfDocs) {_        this(index, type, client, numOfDocs, RandomizedTest.scaledRandomIntBetween(2, 5))__    };start,indexing,in,the,background,using,a,random,number,of,threads,indexing,will,be,paused,after,num,of,docs,docs,has,been,indexed,param,index,index,name,to,index,into,param,type,document,type,param,client,client,to,use,param,num,of,docs,number,of,document,to,index,before,pausing,set,to,1,to,have,no,limit;public,background,indexer,string,index,string,type,client,client,int,num,of,docs,this,index,type,client,num,of,docs,randomized,test,scaled,random,int,between,2,5
BackgroundIndexer -> public void pauseIndexing();1524684173;Pausing indexing by setting current document limit to 0;public void pauseIndexing() {_        availableBudget.drainPermits()__        setBudget(0)__    };pausing,indexing,by,setting,current,document,limit,to,0;public,void,pause,indexing,available,budget,drain,permits,set,budget,0
BackgroundIndexer -> public void pauseIndexing();1537806831;Pausing indexing by setting current document limit to 0;public void pauseIndexing() {_        availableBudget.drainPermits()__        setBudget(0)__    };pausing,indexing,by,setting,current,document,limit,to,0;public,void,pause,indexing,available,budget,drain,permits,set,budget,0
BackgroundIndexer -> public void pauseIndexing();1540486836;Pausing indexing by setting current document limit to 0;public void pauseIndexing() {_        availableBudget.drainPermits()__        setBudget(0)__    };pausing,indexing,by,setting,current,document,limit,to,0;public,void,pause,indexing,available,budget,drain,permits,set,budget,0
BackgroundIndexer -> public void pauseIndexing();1547030937;Pausing indexing by setting current document limit to 0;public void pauseIndexing() {_        availableBudget.drainPermits()__        setBudget(0)__    };pausing,indexing,by,setting,current,document,limit,to,0;public,void,pause,indexing,available,budget,drain,permits,set,budget,0
BackgroundIndexer -> public void pauseIndexing();1549395161;Pausing indexing by setting current document limit to 0;public void pauseIndexing() {_        availableBudget.drainPermits()__        setBudget(0)__    };pausing,indexing,by,setting,current,document,limit,to,0;public,void,pause,indexing,available,budget,drain,permits,set,budget,0
BackgroundIndexer -> public void pauseIndexing();1551176390;Pausing indexing by setting current document limit to 0;public void pauseIndexing() {_        availableBudget.drainPermits()__        setBudget(0)__    };pausing,indexing,by,setting,current,document,limit,to,0;public,void,pause,indexing,available,budget,drain,permits,set,budget,0
BackgroundIndexer -> public void continueIndexing(int numOfDocs);1524684173;Continue indexing after it has paused.__@param numOfDocs number of document to index before pausing. Set to -1 to have no limit.;public void continueIndexing(int numOfDocs) {_        setBudget(numOfDocs)__    };continue,indexing,after,it,has,paused,param,num,of,docs,number,of,document,to,index,before,pausing,set,to,1,to,have,no,limit;public,void,continue,indexing,int,num,of,docs,set,budget,num,of,docs
BackgroundIndexer -> public void continueIndexing(int numOfDocs);1537806831;Continue indexing after it has paused.__@param numOfDocs number of document to index before pausing. Set to -1 to have no limit.;public void continueIndexing(int numOfDocs) {_        setBudget(numOfDocs)__    };continue,indexing,after,it,has,paused,param,num,of,docs,number,of,document,to,index,before,pausing,set,to,1,to,have,no,limit;public,void,continue,indexing,int,num,of,docs,set,budget,num,of,docs
BackgroundIndexer -> public void continueIndexing(int numOfDocs);1540486836;Continue indexing after it has paused.__@param numOfDocs number of document to index before pausing. Set to -1 to have no limit.;public void continueIndexing(int numOfDocs) {_        setBudget(numOfDocs)__    };continue,indexing,after,it,has,paused,param,num,of,docs,number,of,document,to,index,before,pausing,set,to,1,to,have,no,limit;public,void,continue,indexing,int,num,of,docs,set,budget,num,of,docs
BackgroundIndexer -> public void continueIndexing(int numOfDocs);1547030937;Continue indexing after it has paused.__@param numOfDocs number of document to index before pausing. Set to -1 to have no limit.;public void continueIndexing(int numOfDocs) {_        setBudget(numOfDocs)__    };continue,indexing,after,it,has,paused,param,num,of,docs,number,of,document,to,index,before,pausing,set,to,1,to,have,no,limit;public,void,continue,indexing,int,num,of,docs,set,budget,num,of,docs
BackgroundIndexer -> public void continueIndexing(int numOfDocs);1549395161;Continue indexing after it has paused.__@param numOfDocs number of document to index before pausing. Set to -1 to have no limit.;public void continueIndexing(int numOfDocs) {_        setBudget(numOfDocs)__    };continue,indexing,after,it,has,paused,param,num,of,docs,number,of,document,to,index,before,pausing,set,to,1,to,have,no,limit;public,void,continue,indexing,int,num,of,docs,set,budget,num,of,docs
BackgroundIndexer -> public void continueIndexing(int numOfDocs);1551176390;Continue indexing after it has paused.__@param numOfDocs number of document to index before pausing. Set to -1 to have no limit.;public void continueIndexing(int numOfDocs) {_        setBudget(numOfDocs)__    };continue,indexing,after,it,has,paused,param,num,of,docs,number,of,document,to,index,before,pausing,set,to,1,to,have,no,limit;public,void,continue,indexing,int,num,of,docs,set,budget,num,of,docs
BackgroundIndexer -> public void setMinFieldSize(int fieldSize);1524684173;the minimum size in code points of a payload field in the indexed documents;public void setMinFieldSize(int fieldSize) {_        minFieldSize = fieldSize__    };the,minimum,size,in,code,points,of,a,payload,field,in,the,indexed,documents;public,void,set,min,field,size,int,field,size,min,field,size,field,size
BackgroundIndexer -> public void setMinFieldSize(int fieldSize);1537806831;the minimum size in code points of a payload field in the indexed documents;public void setMinFieldSize(int fieldSize) {_        minFieldSize = fieldSize__    };the,minimum,size,in,code,points,of,a,payload,field,in,the,indexed,documents;public,void,set,min,field,size,int,field,size,min,field,size,field,size
BackgroundIndexer -> public void setMinFieldSize(int fieldSize);1540486836;the minimum size in code points of a payload field in the indexed documents;public void setMinFieldSize(int fieldSize) {_        minFieldSize = fieldSize__    };the,minimum,size,in,code,points,of,a,payload,field,in,the,indexed,documents;public,void,set,min,field,size,int,field,size,min,field,size,field,size
BackgroundIndexer -> public void setMinFieldSize(int fieldSize);1547030937;the minimum size in code points of a payload field in the indexed documents;public void setMinFieldSize(int fieldSize) {_        minFieldSize = fieldSize__    };the,minimum,size,in,code,points,of,a,payload,field,in,the,indexed,documents;public,void,set,min,field,size,int,field,size,min,field,size,field,size
BackgroundIndexer -> public void setMinFieldSize(int fieldSize);1549395161;the minimum size in code points of a payload field in the indexed documents;public void setMinFieldSize(int fieldSize) {_        minFieldSize = fieldSize__    };the,minimum,size,in,code,points,of,a,payload,field,in,the,indexed,documents;public,void,set,min,field,size,int,field,size,min,field,size,field,size
BackgroundIndexer -> public BackgroundIndexer(String index, String type, Client client);1524684173;Start indexing in the background using a random number of threads.__@param index  index name to index into_@param type   document type_@param client client to use;public BackgroundIndexer(String index, String type, Client client) {_        this(index, type, client, -1)__    };start,indexing,in,the,background,using,a,random,number,of,threads,param,index,index,name,to,index,into,param,type,document,type,param,client,client,to,use;public,background,indexer,string,index,string,type,client,client,this,index,type,client,1
BackgroundIndexer -> public BackgroundIndexer(String index, String type, Client client);1537806831;Start indexing in the background using a random number of threads.__@param index  index name to index into_@param type   document type_@param client client to use;public BackgroundIndexer(String index, String type, Client client) {_        this(index, type, client, -1)__    };start,indexing,in,the,background,using,a,random,number,of,threads,param,index,index,name,to,index,into,param,type,document,type,param,client,client,to,use;public,background,indexer,string,index,string,type,client,client,this,index,type,client,1
BackgroundIndexer -> public BackgroundIndexer(String index, String type, Client client);1540486836;Start indexing in the background using a random number of threads.__@param index  index name to index into_@param type   document type_@param client client to use;public BackgroundIndexer(String index, String type, Client client) {_        this(index, type, client, -1)__    };start,indexing,in,the,background,using,a,random,number,of,threads,param,index,index,name,to,index,into,param,type,document,type,param,client,client,to,use;public,background,indexer,string,index,string,type,client,client,this,index,type,client,1
BackgroundIndexer -> public BackgroundIndexer(String index, String type, Client client);1547030937;Start indexing in the background using a random number of threads.__@param index  index name to index into_@param type   document type_@param client client to use;public BackgroundIndexer(String index, String type, Client client) {_        this(index, type, client, -1)__    };start,indexing,in,the,background,using,a,random,number,of,threads,param,index,index,name,to,index,into,param,type,document,type,param,client,client,to,use;public,background,indexer,string,index,string,type,client,client,this,index,type,client,1
BackgroundIndexer -> public BackgroundIndexer(String index, String type, Client client);1549395161;Start indexing in the background using a random number of threads.__@param index  index name to index into_@param type   document type_@param client client to use;public BackgroundIndexer(String index, String type, Client client) {_        this(index, type, client, -1)__    };start,indexing,in,the,background,using,a,random,number,of,threads,param,index,index,name,to,index,into,param,type,document,type,param,client,client,to,use;public,background,indexer,string,index,string,type,client,client,this,index,type,client,1
BackgroundIndexer -> public void start(int numOfDocs);1524684173;Start indexing__@param numOfDocs number of document to index before pausing. Set to -1 to have no limit.;public void start(int numOfDocs) {_        assert !stop.get() : "background indexer can not be started after it has stopped"__        setBudget(numOfDocs)__        startLatch.countDown()__    };start,indexing,param,num,of,docs,number,of,document,to,index,before,pausing,set,to,1,to,have,no,limit;public,void,start,int,num,of,docs,assert,stop,get,background,indexer,can,not,be,started,after,it,has,stopped,set,budget,num,of,docs,start,latch,count,down
BackgroundIndexer -> public void start(int numOfDocs);1537806831;Start indexing__@param numOfDocs number of document to index before pausing. Set to -1 to have no limit.;public void start(int numOfDocs) {_        assert !stop.get() : "background indexer can not be started after it has stopped"__        setBudget(numOfDocs)__        startLatch.countDown()__    };start,indexing,param,num,of,docs,number,of,document,to,index,before,pausing,set,to,1,to,have,no,limit;public,void,start,int,num,of,docs,assert,stop,get,background,indexer,can,not,be,started,after,it,has,stopped,set,budget,num,of,docs,start,latch,count,down
BackgroundIndexer -> public void start(int numOfDocs);1540486836;Start indexing__@param numOfDocs number of document to index before pausing. Set to -1 to have no limit.;public void start(int numOfDocs) {_        assert !stop.get() : "background indexer can not be started after it has stopped"__        setBudget(numOfDocs)__        startLatch.countDown()__    };start,indexing,param,num,of,docs,number,of,document,to,index,before,pausing,set,to,1,to,have,no,limit;public,void,start,int,num,of,docs,assert,stop,get,background,indexer,can,not,be,started,after,it,has,stopped,set,budget,num,of,docs,start,latch,count,down
BackgroundIndexer -> public void start(int numOfDocs);1547030937;Start indexing__@param numOfDocs number of document to index before pausing. Set to -1 to have no limit.;public void start(int numOfDocs) {_        assert !stop.get() : "background indexer can not be started after it has stopped"__        setBudget(numOfDocs)__        startLatch.countDown()__    };start,indexing,param,num,of,docs,number,of,document,to,index,before,pausing,set,to,1,to,have,no,limit;public,void,start,int,num,of,docs,assert,stop,get,background,indexer,can,not,be,started,after,it,has,stopped,set,budget,num,of,docs,start,latch,count,down
BackgroundIndexer -> public void start(int numOfDocs);1549395161;Start indexing__@param numOfDocs number of document to index before pausing. Set to -1 to have no limit.;public void start(int numOfDocs) {_        assert !stop.get() : "background indexer can not be started after it has stopped"__        setBudget(numOfDocs)__        startLatch.countDown()__    };start,indexing,param,num,of,docs,number,of,document,to,index,before,pausing,set,to,1,to,have,no,limit;public,void,start,int,num,of,docs,assert,stop,get,background,indexer,can,not,be,started,after,it,has,stopped,set,budget,num,of,docs,start,latch,count,down
BackgroundIndexer -> public void start(int numOfDocs);1551176390;Start indexing__@param numOfDocs number of document to index before pausing. Set to -1 to have no limit.;public void start(int numOfDocs) {_        assert !stop.get() : "background indexer can not be started after it has stopped"__        setBudget(numOfDocs)__        startLatch.countDown()__    };start,indexing,param,num,of,docs,number,of,document,to,index,before,pausing,set,to,1,to,have,no,limit;public,void,start,int,num,of,docs,assert,stop,get,background,indexer,can,not,be,started,after,it,has,stopped,set,budget,num,of,docs,start,latch,count,down
