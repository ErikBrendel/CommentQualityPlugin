# id;timestamp;commentText;codeText;commentWords;codeWords
EqualsHashCodeTestUtils -> public static <T> void checkEqualsAndHashCode(T original, CopyFunction<T> copyFunction,             MutateFunction<T> mutationFunction);1524684173;Perform common equality and hashCode checks on the input object_@param original the object under test_@param copyFunction a function that creates a deep copy of the input object_@param mutationFunction a function that creates a copy of the input object that is different_from the input in one aspect. The output of this call is used to check that it is not equal()_to the input object;public static <T> void checkEqualsAndHashCode(T original, CopyFunction<T> copyFunction,_            MutateFunction<T> mutationFunction) {_        try {_            String objectName = original.getClass().getSimpleName()__            assertFalse(objectName + " is equal to null", original.equals(null))__            _            assertFalse(objectName + " is equal to incompatible type", original.equals(ESTestCase.randomFrom(someObjects)))__            assertTrue(objectName + " is not equal to self", original.equals(original))__            assertThat(objectName + " hashcode returns different values if called multiple times", original.hashCode(),_                    equalTo(original.hashCode()))__            if (mutationFunction != null) {_                T mutation = mutationFunction.mutate(original)__                assertThat(objectName + " mutation should not be equal to original", mutation,_                        not(equalTo(original)))__            }__            T copy = copyFunction.copy(original)__            assertTrue(objectName + " copy is not equal to self", copy.equals(copy))__            assertTrue(objectName + " is not equal to its copy", original.equals(copy))__            assertTrue("equals is not symmetric", copy.equals(original))__            assertThat(objectName + " hashcode is different from copies hashcode", copy.hashCode(), equalTo(original.hashCode()))___            T secondCopy = copyFunction.copy(copy)__            assertTrue("second copy is not equal to self", secondCopy.equals(secondCopy))__            assertTrue("copy is not equal to its second copy", copy.equals(secondCopy))__            assertThat("second copy's hashcode is different from original hashcode", copy.hashCode(), equalTo(secondCopy.hashCode()))__            assertTrue("equals is not transitive", original.equals(secondCopy))__            assertTrue("equals is not symmetric", secondCopy.equals(copy))__            assertTrue("equals is not symmetric", secondCopy.equals(original))__        } catch (IOException e) {_            throw new RuntimeException(e)__        }_    };perform,common,equality,and,hash,code,checks,on,the,input,object,param,original,the,object,under,test,param,copy,function,a,function,that,creates,a,deep,copy,of,the,input,object,param,mutation,function,a,function,that,creates,a,copy,of,the,input,object,that,is,different,from,the,input,in,one,aspect,the,output,of,this,call,is,used,to,check,that,it,is,not,equal,to,the,input,object;public,static,t,void,check,equals,and,hash,code,t,original,copy,function,t,copy,function,mutate,function,t,mutation,function,try,string,object,name,original,get,class,get,simple,name,assert,false,object,name,is,equal,to,null,original,equals,null,assert,false,object,name,is,equal,to,incompatible,type,original,equals,estest,case,random,from,some,objects,assert,true,object,name,is,not,equal,to,self,original,equals,original,assert,that,object,name,hashcode,returns,different,values,if,called,multiple,times,original,hash,code,equal,to,original,hash,code,if,mutation,function,null,t,mutation,mutation,function,mutate,original,assert,that,object,name,mutation,should,not,be,equal,to,original,mutation,not,equal,to,original,t,copy,copy,function,copy,original,assert,true,object,name,copy,is,not,equal,to,self,copy,equals,copy,assert,true,object,name,is,not,equal,to,its,copy,original,equals,copy,assert,true,equals,is,not,symmetric,copy,equals,original,assert,that,object,name,hashcode,is,different,from,copies,hashcode,copy,hash,code,equal,to,original,hash,code,t,second,copy,copy,function,copy,copy,assert,true,second,copy,is,not,equal,to,self,second,copy,equals,second,copy,assert,true,copy,is,not,equal,to,its,second,copy,copy,equals,second,copy,assert,that,second,copy,s,hashcode,is,different,from,original,hashcode,copy,hash,code,equal,to,second,copy,hash,code,assert,true,equals,is,not,transitive,original,equals,second,copy,assert,true,equals,is,not,symmetric,second,copy,equals,copy,assert,true,equals,is,not,symmetric,second,copy,equals,original,catch,ioexception,e,throw,new,runtime,exception,e
EqualsHashCodeTestUtils -> public static <T> void checkEqualsAndHashCode(T original, CopyFunction<T> copyFunction,             MutateFunction<T> mutationFunction);1534755962;Perform common equality and hashCode checks on the input object_@param original the object under test_@param copyFunction a function that creates a deep copy of the input object_@param mutationFunction a function that creates a copy of the input object that is different_from the input in one aspect. The output of this call is used to check that it is not equal()_to the input object;public static <T> void checkEqualsAndHashCode(T original, CopyFunction<T> copyFunction,_            MutateFunction<T> mutationFunction) {_        try {_            String objectName = original.getClass().getSimpleName()__            assertFalse(objectName + " is equal to null", original.equals(null))__            _            assertFalse(objectName + " is equal to incompatible type", original.equals(ESTestCase.randomFrom(someObjects)))__            assertTrue(objectName + " is not equal to self", original.equals(original))__            assertThat(objectName + " hashcode returns different values if called multiple times", original.hashCode(),_                    equalTo(original.hashCode()))__            if (mutationFunction != null) {_                T mutation = mutationFunction.mutate(original)__                assertThat(objectName + " mutation should not be equal to original", mutation,_                        not(equalTo(original)))__            }__            T copy = copyFunction.copy(original)__            assertTrue(objectName + " copy is not equal to self", copy.equals(copy))__            assertTrue(objectName + " is not equal to its copy", original.equals(copy))__            assertTrue("equals is not symmetric", copy.equals(original))__            assertThat(objectName + " hashcode is different from copies hashcode", copy.hashCode(), equalTo(original.hashCode()))___            T secondCopy = copyFunction.copy(copy)__            assertTrue("second copy is not equal to self", secondCopy.equals(secondCopy))__            assertTrue("copy is not equal to its second copy", copy.equals(secondCopy))__            assertThat("second copy's hashcode is different from original hashcode", copy.hashCode(), equalTo(secondCopy.hashCode()))__            assertTrue("equals is not transitive", original.equals(secondCopy))__            assertTrue("equals is not symmetric", secondCopy.equals(copy))__            assertTrue("equals is not symmetric", secondCopy.equals(original))__        } catch (IOException e) {_            throw new RuntimeException(e)__        }_    };perform,common,equality,and,hash,code,checks,on,the,input,object,param,original,the,object,under,test,param,copy,function,a,function,that,creates,a,deep,copy,of,the,input,object,param,mutation,function,a,function,that,creates,a,copy,of,the,input,object,that,is,different,from,the,input,in,one,aspect,the,output,of,this,call,is,used,to,check,that,it,is,not,equal,to,the,input,object;public,static,t,void,check,equals,and,hash,code,t,original,copy,function,t,copy,function,mutate,function,t,mutation,function,try,string,object,name,original,get,class,get,simple,name,assert,false,object,name,is,equal,to,null,original,equals,null,assert,false,object,name,is,equal,to,incompatible,type,original,equals,estest,case,random,from,some,objects,assert,true,object,name,is,not,equal,to,self,original,equals,original,assert,that,object,name,hashcode,returns,different,values,if,called,multiple,times,original,hash,code,equal,to,original,hash,code,if,mutation,function,null,t,mutation,mutation,function,mutate,original,assert,that,object,name,mutation,should,not,be,equal,to,original,mutation,not,equal,to,original,t,copy,copy,function,copy,original,assert,true,object,name,copy,is,not,equal,to,self,copy,equals,copy,assert,true,object,name,is,not,equal,to,its,copy,original,equals,copy,assert,true,equals,is,not,symmetric,copy,equals,original,assert,that,object,name,hashcode,is,different,from,copies,hashcode,copy,hash,code,equal,to,original,hash,code,t,second,copy,copy,function,copy,copy,assert,true,second,copy,is,not,equal,to,self,second,copy,equals,second,copy,assert,true,copy,is,not,equal,to,its,second,copy,copy,equals,second,copy,assert,that,second,copy,s,hashcode,is,different,from,original,hashcode,copy,hash,code,equal,to,second,copy,hash,code,assert,true,equals,is,not,transitive,original,equals,second,copy,assert,true,equals,is,not,symmetric,second,copy,equals,copy,assert,true,equals,is,not,symmetric,second,copy,equals,original,catch,ioexception,e,throw,new,runtime,exception,e
EqualsHashCodeTestUtils -> public static <T> void checkEqualsAndHashCode(T original, CopyFunction<T> copyFunction,             MutateFunction<T> mutationFunction);1548422582;Perform common equality and hashCode checks on the input object_@param original the object under test_@param copyFunction a function that creates a deep copy of the input object_@param mutationFunction a function that creates a copy of the input object that is different_from the input in one aspect. The output of this call is used to check that it is not equal()_to the input object;public static <T> void checkEqualsAndHashCode(T original, CopyFunction<T> copyFunction,_            MutateFunction<T> mutationFunction) {_        try {_            String objectName = original.getClass().getSimpleName()__            assertFalse(objectName + " is equal to null", original.equals(null))__            _            assertFalse(objectName + " is equal to incompatible type", original.equals(ESTestCase.randomFrom(someObjects)))__            assertTrue(objectName + " is not equal to self", original.equals(original))__            assertThat(objectName + " hashcode returns different values if called multiple times", original.hashCode(),_                    equalTo(original.hashCode()))__            if (mutationFunction != null) {_                T mutation = mutationFunction.mutate(original)__                assertThat(objectName + " mutation should not be equal to original", mutation,_                        not(equalTo(original)))__            }__            T copy = copyFunction.copy(original)__            assertTrue(objectName + " copy is not equal to self", copy.equals(copy))__            assertTrue(objectName + " is not equal to its copy", original.equals(copy))__            assertTrue("equals is not symmetric", copy.equals(original))__            assertThat(objectName + " hashcode is different from copies hashcode", copy.hashCode(), equalTo(original.hashCode()))___            T secondCopy = copyFunction.copy(copy)__            assertTrue("second copy is not equal to self", secondCopy.equals(secondCopy))__            assertTrue("copy is not equal to its second copy", copy.equals(secondCopy))__            assertThat("second copy's hashcode is different from original hashcode", copy.hashCode(), equalTo(secondCopy.hashCode()))__            assertTrue("equals is not transitive", original.equals(secondCopy))__            assertTrue("equals is not symmetric", secondCopy.equals(copy))__            assertTrue("equals is not symmetric", secondCopy.equals(original))__        } catch (IOException e) {_            throw new RuntimeException(e)__        }_    };perform,common,equality,and,hash,code,checks,on,the,input,object,param,original,the,object,under,test,param,copy,function,a,function,that,creates,a,deep,copy,of,the,input,object,param,mutation,function,a,function,that,creates,a,copy,of,the,input,object,that,is,different,from,the,input,in,one,aspect,the,output,of,this,call,is,used,to,check,that,it,is,not,equal,to,the,input,object;public,static,t,void,check,equals,and,hash,code,t,original,copy,function,t,copy,function,mutate,function,t,mutation,function,try,string,object,name,original,get,class,get,simple,name,assert,false,object,name,is,equal,to,null,original,equals,null,assert,false,object,name,is,equal,to,incompatible,type,original,equals,estest,case,random,from,some,objects,assert,true,object,name,is,not,equal,to,self,original,equals,original,assert,that,object,name,hashcode,returns,different,values,if,called,multiple,times,original,hash,code,equal,to,original,hash,code,if,mutation,function,null,t,mutation,mutation,function,mutate,original,assert,that,object,name,mutation,should,not,be,equal,to,original,mutation,not,equal,to,original,t,copy,copy,function,copy,original,assert,true,object,name,copy,is,not,equal,to,self,copy,equals,copy,assert,true,object,name,is,not,equal,to,its,copy,original,equals,copy,assert,true,equals,is,not,symmetric,copy,equals,original,assert,that,object,name,hashcode,is,different,from,copies,hashcode,copy,hash,code,equal,to,original,hash,code,t,second,copy,copy,function,copy,copy,assert,true,second,copy,is,not,equal,to,self,second,copy,equals,second,copy,assert,true,copy,is,not,equal,to,its,second,copy,copy,equals,second,copy,assert,that,second,copy,s,hashcode,is,different,from,original,hashcode,copy,hash,code,equal,to,second,copy,hash,code,assert,true,equals,is,not,transitive,original,equals,second,copy,assert,true,equals,is,not,symmetric,second,copy,equals,copy,assert,true,equals,is,not,symmetric,second,copy,equals,original,catch,ioexception,e,throw,new,runtime,exception,e
EqualsHashCodeTestUtils -> public static <T> void checkEqualsAndHashCode(T original, CopyFunction<T> copyFunction);1524684173;Perform common equality and hashCode checks on the input object_@param original the object under test_@param copyFunction a function that creates a deep copy of the input object;public static <T> void checkEqualsAndHashCode(T original, CopyFunction<T> copyFunction) {_        checkEqualsAndHashCode(original, copyFunction, null)__    };perform,common,equality,and,hash,code,checks,on,the,input,object,param,original,the,object,under,test,param,copy,function,a,function,that,creates,a,deep,copy,of,the,input,object;public,static,t,void,check,equals,and,hash,code,t,original,copy,function,t,copy,function,check,equals,and,hash,code,original,copy,function,null
EqualsHashCodeTestUtils -> public static <T> void checkEqualsAndHashCode(T original, CopyFunction<T> copyFunction);1534755962;Perform common equality and hashCode checks on the input object_@param original the object under test_@param copyFunction a function that creates a deep copy of the input object;public static <T> void checkEqualsAndHashCode(T original, CopyFunction<T> copyFunction) {_        checkEqualsAndHashCode(original, copyFunction, null)__    };perform,common,equality,and,hash,code,checks,on,the,input,object,param,original,the,object,under,test,param,copy,function,a,function,that,creates,a,deep,copy,of,the,input,object;public,static,t,void,check,equals,and,hash,code,t,original,copy,function,t,copy,function,check,equals,and,hash,code,original,copy,function,null
EqualsHashCodeTestUtils -> public static <T> void checkEqualsAndHashCode(T original, CopyFunction<T> copyFunction);1548422582;Perform common equality and hashCode checks on the input object_@param original the object under test_@param copyFunction a function that creates a deep copy of the input object;public static <T> void checkEqualsAndHashCode(T original, CopyFunction<T> copyFunction) {_        checkEqualsAndHashCode(original, copyFunction, null)__    };perform,common,equality,and,hash,code,checks,on,the,input,object,param,original,the,object,under,test,param,copy,function,a,function,that,creates,a,deep,copy,of,the,input,object;public,static,t,void,check,equals,and,hash,code,t,original,copy,function,t,copy,function,check,equals,and,hash,code,original,copy,function,null
