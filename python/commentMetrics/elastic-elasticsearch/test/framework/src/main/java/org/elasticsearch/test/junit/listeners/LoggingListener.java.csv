# id;timestamp;commentText;codeText;commentWords;codeWords
LoggingListener -> private Map<String, String> processTestLogging(final TestLogging testLogging);1524684173;Applies the test logging annotation and returns the existing logging levels.__@param testLogging the test logging annotation to apply_@return the existing logging levels;private Map<String, String> processTestLogging(final TestLogging testLogging) {_        final Map<String, String> map = getLoggersAndLevelsFromAnnotation(testLogging)___        if (map == null) {_            return Collections.emptyMap()__        }__        _        _        _        final Map<String, String> existing = new TreeMap<>()__        for (final Map.Entry<String, String> entry : map.entrySet()) {_            final Logger logger = resolveLogger(entry.getKey())__            existing.put(entry.getKey(), logger.getLevel().toString())__        }_        for (final Map.Entry<String, String> entry : map.entrySet()) {_            final Logger logger = resolveLogger(entry.getKey())__            Loggers.setLevel(logger, entry.getValue())__        }_        return existing__    };applies,the,test,logging,annotation,and,returns,the,existing,logging,levels,param,test,logging,the,test,logging,annotation,to,apply,return,the,existing,logging,levels;private,map,string,string,process,test,logging,final,test,logging,test,logging,final,map,string,string,map,get,loggers,and,levels,from,annotation,test,logging,if,map,null,return,collections,empty,map,final,map,string,string,existing,new,tree,map,for,final,map,entry,string,string,entry,map,entry,set,final,logger,logger,resolve,logger,entry,get,key,existing,put,entry,get,key,logger,get,level,to,string,for,final,map,entry,string,string,entry,map,entry,set,final,logger,logger,resolve,logger,entry,get,key,loggers,set,level,logger,entry,get,value,return,existing
LoggingListener -> private Map<String, String> processTestLogging(final TestLogging testLogging);1538067637;Applies the test logging annotation and returns the existing logging levels.__@param testLogging the test logging annotation to apply_@return the existing logging levels;private Map<String, String> processTestLogging(final TestLogging testLogging) {_        final Map<String, String> map = getLoggersAndLevelsFromAnnotation(testLogging)___        if (map == null) {_            return Collections.emptyMap()__        }__        _        _        _        final Map<String, String> existing = new TreeMap<>()__        for (final Map.Entry<String, String> entry : map.entrySet()) {_            final Logger logger = resolveLogger(entry.getKey())__            existing.put(entry.getKey(), logger.getLevel().toString())__        }_        for (final Map.Entry<String, String> entry : map.entrySet()) {_            final Logger logger = resolveLogger(entry.getKey())__            Loggers.setLevel(logger, entry.getValue())__        }_        return existing__    };applies,the,test,logging,annotation,and,returns,the,existing,logging,levels,param,test,logging,the,test,logging,annotation,to,apply,return,the,existing,logging,levels;private,map,string,string,process,test,logging,final,test,logging,test,logging,final,map,string,string,map,get,loggers,and,levels,from,annotation,test,logging,if,map,null,return,collections,empty,map,final,map,string,string,existing,new,tree,map,for,final,map,entry,string,string,entry,map,entry,set,final,logger,logger,resolve,logger,entry,get,key,existing,put,entry,get,key,logger,get,level,to,string,for,final,map,entry,string,string,entry,map,entry,set,final,logger,logger,resolve,logger,entry,get,key,loggers,set,level,logger,entry,get,value,return,existing
LoggingListener -> private Map<String, String> processTestLogging(final TestLogging testLogging);1540847035;Applies the test logging annotation and returns the existing logging levels.__@param testLogging the test logging annotation to apply_@return the existing logging levels;private Map<String, String> processTestLogging(final TestLogging testLogging) {_        final Map<String, String> map = getLoggersAndLevelsFromAnnotation(testLogging)___        if (map == null) {_            return Collections.emptyMap()__        }__        _        _        _        final Map<String, String> existing = new TreeMap<>()__        for (final Map.Entry<String, String> entry : map.entrySet()) {_            final Logger logger = resolveLogger(entry.getKey())__            existing.put(entry.getKey(), logger.getLevel().toString())__        }_        for (final Map.Entry<String, String> entry : map.entrySet()) {_            final Logger logger = resolveLogger(entry.getKey())__            Loggers.setLevel(logger, entry.getValue())__        }_        return existing__    };applies,the,test,logging,annotation,and,returns,the,existing,logging,levels,param,test,logging,the,test,logging,annotation,to,apply,return,the,existing,logging,levels;private,map,string,string,process,test,logging,final,test,logging,test,logging,final,map,string,string,map,get,loggers,and,levels,from,annotation,test,logging,if,map,null,return,collections,empty,map,final,map,string,string,existing,new,tree,map,for,final,map,entry,string,string,entry,map,entry,set,final,logger,logger,resolve,logger,entry,get,key,existing,put,entry,get,key,logger,get,level,to,string,for,final,map,entry,string,string,entry,map,entry,set,final,logger,logger,resolve,logger,entry,get,key,loggers,set,level,logger,entry,get,value,return,existing
LoggingListener -> private static Logger resolveLogger(String loggerName);1524684173;Obtain the logger with the given name.__@param loggerName the logger to obtain_@return the logger;private static Logger resolveLogger(String loggerName) {_        if (loggerName.equalsIgnoreCase("_root")) {_            return ESLoggerFactory.getRootLogger()__        }_        return Loggers.getLogger(loggerName)__    };obtain,the,logger,with,the,given,name,param,logger,name,the,logger,to,obtain,return,the,logger;private,static,logger,resolve,logger,string,logger,name,if,logger,name,equals,ignore,case,return,eslogger,factory,get,root,logger,return,loggers,get,logger,logger,name
LoggingListener -> private static Logger resolveLogger(String loggerName);1538067637;Obtain the logger with the given name.__@param loggerName the logger to obtain_@return the logger;private static Logger resolveLogger(String loggerName) {_        if (loggerName.equalsIgnoreCase("_root")) {_            return LogManager.getRootLogger()__        }_        return Loggers.getLogger(loggerName)__    };obtain,the,logger,with,the,given,name,param,logger,name,the,logger,to,obtain,return,the,logger;private,static,logger,resolve,logger,string,logger,name,if,logger,name,equals,ignore,case,return,log,manager,get,root,logger,return,loggers,get,logger,logger,name
LoggingListener -> private static Logger resolveLogger(String loggerName);1540847035;Obtain the logger with the given name.__@param loggerName the logger to obtain_@return the logger;private static Logger resolveLogger(String loggerName) {_        if (loggerName.equalsIgnoreCase("_root")) {_            return LogManager.getRootLogger()__        }_        return LogManager.getLogger(loggerName)__    };obtain,the,logger,with,the,given,name,param,logger,name,the,logger,to,obtain,return,the,logger;private,static,logger,resolve,logger,string,logger,name,if,logger,name,equals,ignore,case,return,log,manager,get,root,logger,return,log,manager,get,logger,logger,name
LoggingListener -> private Map<String, String> reset(final Map<String, String> map);1524684173;Reset the logging levels to the state provided by the map.__@param map the logging levels to apply_@return an empty map;private Map<String, String> reset(final Map<String, String> map) {_        for (final Map.Entry<String, String> previousLogger : map.entrySet()) {_            final Logger logger = resolveLogger(previousLogger.getKey())__            Loggers.setLevel(logger, previousLogger.getValue())__        }__        return Collections.emptyMap()__    };reset,the,logging,levels,to,the,state,provided,by,the,map,param,map,the,logging,levels,to,apply,return,an,empty,map;private,map,string,string,reset,final,map,string,string,map,for,final,map,entry,string,string,previous,logger,map,entry,set,final,logger,logger,resolve,logger,previous,logger,get,key,loggers,set,level,logger,previous,logger,get,value,return,collections,empty,map
LoggingListener -> private Map<String, String> reset(final Map<String, String> map);1538067637;Reset the logging levels to the state provided by the map.__@param map the logging levels to apply_@return an empty map;private Map<String, String> reset(final Map<String, String> map) {_        for (final Map.Entry<String, String> previousLogger : map.entrySet()) {_            final Logger logger = resolveLogger(previousLogger.getKey())__            Loggers.setLevel(logger, previousLogger.getValue())__        }__        return Collections.emptyMap()__    };reset,the,logging,levels,to,the,state,provided,by,the,map,param,map,the,logging,levels,to,apply,return,an,empty,map;private,map,string,string,reset,final,map,string,string,map,for,final,map,entry,string,string,previous,logger,map,entry,set,final,logger,logger,resolve,logger,previous,logger,get,key,loggers,set,level,logger,previous,logger,get,value,return,collections,empty,map
LoggingListener -> private Map<String, String> reset(final Map<String, String> map);1540847035;Reset the logging levels to the state provided by the map.__@param map the logging levels to apply_@return an empty map;private Map<String, String> reset(final Map<String, String> map) {_        for (final Map.Entry<String, String> previousLogger : map.entrySet()) {_            final Logger logger = resolveLogger(previousLogger.getKey())__            Loggers.setLevel(logger, previousLogger.getValue())__        }__        return Collections.emptyMap()__    };reset,the,logging,levels,to,the,state,provided,by,the,map,param,map,the,logging,levels,to,apply,return,an,empty,map;private,map,string,string,reset,final,map,string,string,map,for,final,map,entry,string,string,previous,logger,map,entry,set,final,logger,logger,resolve,logger,previous,logger,get,key,loggers,set,level,logger,previous,logger,get,value,return,collections,empty,map
LoggingListener -> private static Map<String, String> getLoggersAndLevelsFromAnnotation(final TestLogging testLogging);1524684173;Obtain the logging levels from the test logging annotation.__@param testLogging the test logging annotation_@return a map from logger name to logging level;private static Map<String, String> getLoggersAndLevelsFromAnnotation(final TestLogging testLogging) {_        if (testLogging == null) {_            return Collections.emptyMap()__        }_        _        _        final Map<String, String> map = new TreeMap<>()__        final String[] loggersAndLevels = testLogging.value().split(",")__        for (final String loggerAndLevel : loggersAndLevels) {_            final String[] loggerAndLevelArray = loggerAndLevel.split(":")__            if (loggerAndLevelArray.length == 2) {_                map.put(loggerAndLevelArray[0], loggerAndLevelArray[1])__            } else {_                throw new IllegalArgumentException("invalid test logging annotation [" + loggerAndLevel + "]")__            }_        }_        return map__    };obtain,the,logging,levels,from,the,test,logging,annotation,param,test,logging,the,test,logging,annotation,return,a,map,from,logger,name,to,logging,level;private,static,map,string,string,get,loggers,and,levels,from,annotation,final,test,logging,test,logging,if,test,logging,null,return,collections,empty,map,final,map,string,string,map,new,tree,map,final,string,loggers,and,levels,test,logging,value,split,for,final,string,logger,and,level,loggers,and,levels,final,string,logger,and,level,array,logger,and,level,split,if,logger,and,level,array,length,2,map,put,logger,and,level,array,0,logger,and,level,array,1,else,throw,new,illegal,argument,exception,invalid,test,logging,annotation,logger,and,level,return,map
LoggingListener -> private static Map<String, String> getLoggersAndLevelsFromAnnotation(final TestLogging testLogging);1538067637;Obtain the logging levels from the test logging annotation.__@param testLogging the test logging annotation_@return a map from logger name to logging level;private static Map<String, String> getLoggersAndLevelsFromAnnotation(final TestLogging testLogging) {_        if (testLogging == null) {_            return Collections.emptyMap()__        }_        _        _        final Map<String, String> map = new TreeMap<>()__        final String[] loggersAndLevels = testLogging.value().split(",")__        for (final String loggerAndLevel : loggersAndLevels) {_            final String[] loggerAndLevelArray = loggerAndLevel.split(":")__            if (loggerAndLevelArray.length == 2) {_                map.put(loggerAndLevelArray[0], loggerAndLevelArray[1])__            } else {_                throw new IllegalArgumentException("invalid test logging annotation [" + loggerAndLevel + "]")__            }_        }_        return map__    };obtain,the,logging,levels,from,the,test,logging,annotation,param,test,logging,the,test,logging,annotation,return,a,map,from,logger,name,to,logging,level;private,static,map,string,string,get,loggers,and,levels,from,annotation,final,test,logging,test,logging,if,test,logging,null,return,collections,empty,map,final,map,string,string,map,new,tree,map,final,string,loggers,and,levels,test,logging,value,split,for,final,string,logger,and,level,loggers,and,levels,final,string,logger,and,level,array,logger,and,level,split,if,logger,and,level,array,length,2,map,put,logger,and,level,array,0,logger,and,level,array,1,else,throw,new,illegal,argument,exception,invalid,test,logging,annotation,logger,and,level,return,map
LoggingListener -> private static Map<String, String> getLoggersAndLevelsFromAnnotation(final TestLogging testLogging);1540847035;Obtain the logging levels from the test logging annotation.__@param testLogging the test logging annotation_@return a map from logger name to logging level;private static Map<String, String> getLoggersAndLevelsFromAnnotation(final TestLogging testLogging) {_        if (testLogging == null) {_            return Collections.emptyMap()__        }_        _        _        final Map<String, String> map = new TreeMap<>()__        final String[] loggersAndLevels = testLogging.value().split(",")__        for (final String loggerAndLevel : loggersAndLevels) {_            final String[] loggerAndLevelArray = loggerAndLevel.split(":")__            if (loggerAndLevelArray.length == 2) {_                map.put(loggerAndLevelArray[0], loggerAndLevelArray[1])__            } else {_                throw new IllegalArgumentException("invalid test logging annotation [" + loggerAndLevel + "]")__            }_        }_        return map__    };obtain,the,logging,levels,from,the,test,logging,annotation,param,test,logging,the,test,logging,annotation,return,a,map,from,logger,name,to,logging,level;private,static,map,string,string,get,loggers,and,levels,from,annotation,final,test,logging,test,logging,if,test,logging,null,return,collections,empty,map,final,map,string,string,map,new,tree,map,final,string,loggers,and,levels,test,logging,value,split,for,final,string,logger,and,level,loggers,and,levels,final,string,logger,and,level,array,logger,and,level,split,if,logger,and,level,array,length,2,map,put,logger,and,level,array,0,logger,and,level,array,1,else,throw,new,illegal,argument,exception,invalid,test,logging,annotation,logger,and,level,return,map
