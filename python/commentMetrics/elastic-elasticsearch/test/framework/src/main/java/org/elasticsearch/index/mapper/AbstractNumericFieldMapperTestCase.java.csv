commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     indexService = createIndex("test").     parser = indexService.mapperService().documentMapperParser().     setTypeList(). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> getPlugins() {     return pluginList(InternalSettingsPlugin.class). }
false;protected,abstract;0;1;;protected abstract void setTypeList().
false;public;0;5;;public void testDefaults() throws Exception {     for (String type : TYPES) {         doTestDefaults(type).     } }
false;protected,abstract;1;1;;protected abstract void doTestDefaults(String type) throws Exception.
false;public;0;5;;public void testNotIndexed() throws Exception {     for (String type : TYPES) {         doTestNotIndexed(type).     } }
false;protected,abstract;1;1;;protected abstract void doTestNotIndexed(String type) throws Exception.
false;public;0;5;;public void testNoDocValues() throws Exception {     for (String type : TYPES) {         doTestNoDocValues(type).     } }
false;protected,abstract;1;1;;protected abstract void doTestNoDocValues(String type) throws Exception.
false;public;0;5;;public void testStore() throws Exception {     for (String type : TYPES) {         doTestStore(type).     } }
false;protected,abstract;1;1;;protected abstract void doTestStore(String type) throws Exception.
false;public;0;5;;public void testCoerce() throws Exception {     for (String type : TYPES) {         doTestCoerce(type).     } }
false;protected,abstract;1;1;;protected abstract void doTestCoerce(String type) throws IOException.
false;public;0;5;;public void testDecimalCoerce() throws Exception {     for (String type : WHOLE_TYPES) {         doTestDecimalCoerce(type).     } }
false;protected,abstract;1;1;;protected abstract void doTestDecimalCoerce(String type) throws IOException.
false;public;0;5;;public void testNullValue() throws IOException {     for (String type : TYPES) {         doTestNullValue(type).     } }
false;protected,abstract;1;1;;protected abstract void doTestNullValue(String type) throws IOException.
false;public;0;13;;public void testEmptyName() throws IOException {     // after version 5     for (String type : TYPES) {         String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("").field("type", type).endObject().endObject().endObject().endObject()).         IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> parser.parse("type", new CompressedXContent(mapping))).         assertThat(e.getMessage(), containsString("name cannot be empty string")).     } }
