# id;timestamp;commentText;codeText;commentWords;codeWords
ClientYamlTestClient -> public ClientYamlTestResponse callApi(String apiName, Map<String, String> params, HttpEntity entity,             Map<String, String> headers, NodeSelector nodeSelector) throws IOException;1528762805;Calls an api with the provided parameters and body;public ClientYamlTestResponse callApi(String apiName, Map<String, String> params, HttpEntity entity,_            Map<String, String> headers, NodeSelector nodeSelector) throws IOException {__        ClientYamlSuiteRestApi restApi = restApi(apiName)___        _        Map<String, String> pathParts = new HashMap<>()__        Map<String, String> queryStringParams = new HashMap<>()___        Set<String> apiRequiredPathParts = restApi.getPathParts().entrySet().stream().filter(Entry::getValue).map(Entry::getKey)_                .collect(Collectors.toSet())__        Set<String> apiRequiredParameters = restApi.getParams().entrySet().stream().filter(Entry::getValue).map(Entry::getKey)_                .collect(Collectors.toSet())___        for (Map.Entry<String, String> entry : params.entrySet()) {_            if (restApi.getPathParts().containsKey(entry.getKey())) {_                pathParts.put(entry.getKey(), entry.getValue())__                apiRequiredPathParts.remove(entry.getKey())__            } else if (restApi.getParams().containsKey(entry.getKey())_                    || restSpec.isGlobalParameter(entry.getKey())_                    || restSpec.isClientParameter(entry.getKey())) {_                queryStringParams.put(entry.getKey(), entry.getValue())__                apiRequiredParameters.remove(entry.getKey())__            } else {_                throw new IllegalArgumentException(_                        "path/param [" + entry.getKey() + "] not supported by [" + restApi.getName() + "] " + "api")__            }_        }__        if (false == apiRequiredPathParts.isEmpty()) {_            throw new IllegalArgumentException(_                    "missing required path part: " + apiRequiredPathParts + " by [" + restApi.getName() + "] api")__        }_        if (false == apiRequiredParameters.isEmpty()) {_            throw new IllegalArgumentException(_                    "missing required parameter: " + apiRequiredParameters + " by [" + restApi.getName() + "] api")__        }__        List<String> supportedMethods = restApi.getSupportedMethods(pathParts.keySet())__        String requestMethod__        if (entity != null) {_            if (false == restApi.isBodySupported()) {_                throw new IllegalArgumentException("body is not supported by [" + restApi.getName() + "] api")__            }_            String contentType = entity.getContentType().getValue()__            _            if (sendBodyAsSourceParam(supportedMethods, contentType, entity.getContentLength())) {_                logger.debug("sending the request body as source param with GET method")__                queryStringParams.put("source", EntityUtils.toString(entity))__                queryStringParams.put("source_content_type", contentType)__                requestMethod = HttpGet.METHOD_NAME__                entity = null__            } else {_                requestMethod = RandomizedTest.randomFrom(supportedMethods)__            }_        } else {_            if (restApi.isBodyRequired()) {_                throw new IllegalArgumentException("body is required by [" + restApi.getName() + "] api")__            }_            requestMethod = RandomizedTest.randomFrom(supportedMethods)__        }__        _        ClientYamlSuiteRestPath restPath = RandomizedTest.randomFrom(restApi.getFinalPaths(pathParts))__        _        _        _        String requestPath__        if (restPath.getPathParts().length == 0) {_            requestPath = "/"__        } else {_            StringBuilder finalPath = new StringBuilder()__            for (String pathPart : restPath.getPathParts()) {_                try {_                    finalPath.append('/')__                    _                    URI uri = new URI(null, null, null, -1, "/" + pathPart, null, null)__                    _                    finalPath.append(uri.getRawPath().substring(1).replaceAll("/", "%2F"))__                } catch (URISyntaxException e) {_                    throw new RuntimeException("unable to build uri", e)__                }_            }_            requestPath = finalPath.toString()__        }____        logger.debug("calling api [{}]", apiName)__        Request request = new Request(requestMethod, requestPath)__        for (Map.Entry<String, String> param : queryStringParams.entrySet()) {_            request.addParameter(param.getKey(), param.getValue())__        }_        request.setEntity(entity)__        setOptions(request, headers, nodeSelector)__        try {_            Response response = restClient.performRequest(request)__            return new ClientYamlTestResponse(response)__        } catch(ResponseException e) {_            throw new ClientYamlTestResponseException(e)__        }_    };calls,an,api,with,the,provided,parameters,and,body;public,client,yaml,test,response,call,api,string,api,name,map,string,string,params,http,entity,entity,map,string,string,headers,node,selector,node,selector,throws,ioexception,client,yaml,suite,rest,api,rest,api,rest,api,api,name,map,string,string,path,parts,new,hash,map,map,string,string,query,string,params,new,hash,map,set,string,api,required,path,parts,rest,api,get,path,parts,entry,set,stream,filter,entry,get,value,map,entry,get,key,collect,collectors,to,set,set,string,api,required,parameters,rest,api,get,params,entry,set,stream,filter,entry,get,value,map,entry,get,key,collect,collectors,to,set,for,map,entry,string,string,entry,params,entry,set,if,rest,api,get,path,parts,contains,key,entry,get,key,path,parts,put,entry,get,key,entry,get,value,api,required,path,parts,remove,entry,get,key,else,if,rest,api,get,params,contains,key,entry,get,key,rest,spec,is,global,parameter,entry,get,key,rest,spec,is,client,parameter,entry,get,key,query,string,params,put,entry,get,key,entry,get,value,api,required,parameters,remove,entry,get,key,else,throw,new,illegal,argument,exception,path,param,entry,get,key,not,supported,by,rest,api,get,name,api,if,false,api,required,path,parts,is,empty,throw,new,illegal,argument,exception,missing,required,path,part,api,required,path,parts,by,rest,api,get,name,api,if,false,api,required,parameters,is,empty,throw,new,illegal,argument,exception,missing,required,parameter,api,required,parameters,by,rest,api,get,name,api,list,string,supported,methods,rest,api,get,supported,methods,path,parts,key,set,string,request,method,if,entity,null,if,false,rest,api,is,body,supported,throw,new,illegal,argument,exception,body,is,not,supported,by,rest,api,get,name,api,string,content,type,entity,get,content,type,get,value,if,send,body,as,source,param,supported,methods,content,type,entity,get,content,length,logger,debug,sending,the,request,body,as,source,param,with,get,method,query,string,params,put,source,entity,utils,to,string,entity,query,string,params,put,content,type,request,method,http,get,entity,null,else,request,method,randomized,test,random,from,supported,methods,else,if,rest,api,is,body,required,throw,new,illegal,argument,exception,body,is,required,by,rest,api,get,name,api,request,method,randomized,test,random,from,supported,methods,client,yaml,suite,rest,path,rest,path,randomized,test,random,from,rest,api,get,final,paths,path,parts,string,request,path,if,rest,path,get,path,parts,length,0,request,path,else,string,builder,final,path,new,string,builder,for,string,path,part,rest,path,get,path,parts,try,final,path,append,uri,uri,new,uri,null,null,null,1,path,part,null,null,final,path,append,uri,get,raw,path,substring,1,replace,all,2f,catch,urisyntax,exception,e,throw,new,runtime,exception,unable,to,build,uri,e,request,path,final,path,to,string,logger,debug,calling,api,api,name,request,request,new,request,request,method,request,path,for,map,entry,string,string,param,query,string,params,entry,set,request,add,parameter,param,get,key,param,get,value,request,set,entity,entity,set,options,request,headers,node,selector,try,response,response,rest,client,perform,request,request,return,new,client,yaml,test,response,response,catch,response,exception,e,throw,new,client,yaml,test,response,exception,e
ClientYamlTestClient -> public ClientYamlTestResponse callApi(String apiName, Map<String, String> params, HttpEntity entity,             Map<String, String> headers, NodeSelector nodeSelector) throws IOException;1529687475;Calls an api with the provided parameters and body;public ClientYamlTestResponse callApi(String apiName, Map<String, String> params, HttpEntity entity,_            Map<String, String> headers, NodeSelector nodeSelector) throws IOException {__        ClientYamlSuiteRestApi restApi = restApi(apiName)___        _        Map<String, String> pathParts = new HashMap<>()__        Map<String, String> queryStringParams = new HashMap<>()___        Set<String> apiRequiredPathParts = restApi.getPathParts().entrySet().stream().filter(Entry::getValue).map(Entry::getKey)_                .collect(Collectors.toSet())__        Set<String> apiRequiredParameters = restApi.getParams().entrySet().stream().filter(Entry::getValue).map(Entry::getKey)_                .collect(Collectors.toSet())___        for (Map.Entry<String, String> entry : params.entrySet()) {_            if (restApi.getPathParts().containsKey(entry.getKey())) {_                pathParts.put(entry.getKey(), entry.getValue())__                apiRequiredPathParts.remove(entry.getKey())__            } else if (restApi.getParams().containsKey(entry.getKey())_                    || restSpec.isGlobalParameter(entry.getKey())_                    || restSpec.isClientParameter(entry.getKey())) {_                queryStringParams.put(entry.getKey(), entry.getValue())__                apiRequiredParameters.remove(entry.getKey())__            } else {_                throw new IllegalArgumentException(_                        "path/param [" + entry.getKey() + "] not supported by [" + restApi.getName() + "] " + "api")__            }_        }__        if (false == apiRequiredPathParts.isEmpty()) {_            throw new IllegalArgumentException(_                    "missing required path part: " + apiRequiredPathParts + " by [" + restApi.getName() + "] api")__        }_        if (false == apiRequiredParameters.isEmpty()) {_            throw new IllegalArgumentException(_                    "missing required parameter: " + apiRequiredParameters + " by [" + restApi.getName() + "] api")__        }__        List<String> supportedMethods = restApi.getSupportedMethods(pathParts.keySet())__        String requestMethod__        if (entity != null) {_            if (false == restApi.isBodySupported()) {_                throw new IllegalArgumentException("body is not supported by [" + restApi.getName() + "] api")__            }_            String contentType = entity.getContentType().getValue()__            _            if (sendBodyAsSourceParam(supportedMethods, contentType, entity.getContentLength())) {_                logger.debug("sending the request body as source param with GET method")__                queryStringParams.put("source", EntityUtils.toString(entity))__                queryStringParams.put("source_content_type", contentType)__                requestMethod = HttpGet.METHOD_NAME__                entity = null__            } else {_                requestMethod = RandomizedTest.randomFrom(supportedMethods)__            }_        } else {_            if (restApi.isBodyRequired()) {_                throw new IllegalArgumentException("body is required by [" + restApi.getName() + "] api")__            }_            requestMethod = RandomizedTest.randomFrom(supportedMethods)__        }__        _        ClientYamlSuiteRestPath restPath = RandomizedTest.randomFrom(restApi.getFinalPaths(pathParts))__        _        _        _        String requestPath__        if (restPath.getPathParts().length == 0) {_            requestPath = "/"__        } else {_            StringBuilder finalPath = new StringBuilder()__            for (String pathPart : restPath.getPathParts()) {_                try {_                    finalPath.append('/')__                    _                    URI uri = new URI(null, null, null, -1, "/" + pathPart, null, null)__                    _                    finalPath.append(uri.getRawPath().substring(1).replaceAll("/", "%2F"))__                } catch (URISyntaxException e) {_                    throw new RuntimeException("unable to build uri", e)__                }_            }_            requestPath = finalPath.toString()__        }__        logger.debug("calling api [{}]", apiName)__        Request request = new Request(requestMethod, requestPath)__        for (Map.Entry<String, String> param : queryStringParams.entrySet()) {_            request.addParameter(param.getKey(), param.getValue())__        }_        request.setEntity(entity)__        setOptions(request, headers)___        try {_            Response response = getRestClient(nodeSelector).performRequest(request)__            return new ClientYamlTestResponse(response)__        } catch(ResponseException e) {_            throw new ClientYamlTestResponseException(e)__        }_    };calls,an,api,with,the,provided,parameters,and,body;public,client,yaml,test,response,call,api,string,api,name,map,string,string,params,http,entity,entity,map,string,string,headers,node,selector,node,selector,throws,ioexception,client,yaml,suite,rest,api,rest,api,rest,api,api,name,map,string,string,path,parts,new,hash,map,map,string,string,query,string,params,new,hash,map,set,string,api,required,path,parts,rest,api,get,path,parts,entry,set,stream,filter,entry,get,value,map,entry,get,key,collect,collectors,to,set,set,string,api,required,parameters,rest,api,get,params,entry,set,stream,filter,entry,get,value,map,entry,get,key,collect,collectors,to,set,for,map,entry,string,string,entry,params,entry,set,if,rest,api,get,path,parts,contains,key,entry,get,key,path,parts,put,entry,get,key,entry,get,value,api,required,path,parts,remove,entry,get,key,else,if,rest,api,get,params,contains,key,entry,get,key,rest,spec,is,global,parameter,entry,get,key,rest,spec,is,client,parameter,entry,get,key,query,string,params,put,entry,get,key,entry,get,value,api,required,parameters,remove,entry,get,key,else,throw,new,illegal,argument,exception,path,param,entry,get,key,not,supported,by,rest,api,get,name,api,if,false,api,required,path,parts,is,empty,throw,new,illegal,argument,exception,missing,required,path,part,api,required,path,parts,by,rest,api,get,name,api,if,false,api,required,parameters,is,empty,throw,new,illegal,argument,exception,missing,required,parameter,api,required,parameters,by,rest,api,get,name,api,list,string,supported,methods,rest,api,get,supported,methods,path,parts,key,set,string,request,method,if,entity,null,if,false,rest,api,is,body,supported,throw,new,illegal,argument,exception,body,is,not,supported,by,rest,api,get,name,api,string,content,type,entity,get,content,type,get,value,if,send,body,as,source,param,supported,methods,content,type,entity,get,content,length,logger,debug,sending,the,request,body,as,source,param,with,get,method,query,string,params,put,source,entity,utils,to,string,entity,query,string,params,put,content,type,request,method,http,get,entity,null,else,request,method,randomized,test,random,from,supported,methods,else,if,rest,api,is,body,required,throw,new,illegal,argument,exception,body,is,required,by,rest,api,get,name,api,request,method,randomized,test,random,from,supported,methods,client,yaml,suite,rest,path,rest,path,randomized,test,random,from,rest,api,get,final,paths,path,parts,string,request,path,if,rest,path,get,path,parts,length,0,request,path,else,string,builder,final,path,new,string,builder,for,string,path,part,rest,path,get,path,parts,try,final,path,append,uri,uri,new,uri,null,null,null,1,path,part,null,null,final,path,append,uri,get,raw,path,substring,1,replace,all,2f,catch,urisyntax,exception,e,throw,new,runtime,exception,unable,to,build,uri,e,request,path,final,path,to,string,logger,debug,calling,api,api,name,request,request,new,request,request,method,request,path,for,map,entry,string,string,param,query,string,params,entry,set,request,add,parameter,param,get,key,param,get,value,request,set,entity,entity,set,options,request,headers,try,response,response,get,rest,client,node,selector,perform,request,request,return,new,client,yaml,test,response,response,catch,response,exception,e,throw,new,client,yaml,test,response,exception,e
ClientYamlTestClient -> public ClientYamlTestResponse callApi(String apiName, Map<String, String> params, HttpEntity entity,             Map<String, String> headers, NodeSelector nodeSelector) throws IOException;1531179852;Calls an api with the provided parameters and body;public ClientYamlTestResponse callApi(String apiName, Map<String, String> params, HttpEntity entity,_            Map<String, String> headers, NodeSelector nodeSelector) throws IOException {__        ClientYamlSuiteRestApi restApi = restApi(apiName)___        _        Map<String, String> pathParts = new HashMap<>()__        Map<String, String> queryStringParams = new HashMap<>()___        Set<String> apiRequiredPathParts = restApi.getPathParts().entrySet().stream().filter(Entry::getValue).map(Entry::getKey)_                .collect(Collectors.toSet())__        Set<String> apiRequiredParameters = restApi.getParams().entrySet().stream().filter(Entry::getValue).map(Entry::getKey)_                .collect(Collectors.toSet())___        for (Map.Entry<String, String> entry : params.entrySet()) {_            if (restApi.getPathParts().containsKey(entry.getKey())) {_                pathParts.put(entry.getKey(), entry.getValue())__                apiRequiredPathParts.remove(entry.getKey())__            } else if (restApi.getParams().containsKey(entry.getKey())_                    || restSpec.isGlobalParameter(entry.getKey())_                    || restSpec.isClientParameter(entry.getKey())) {_                queryStringParams.put(entry.getKey(), entry.getValue())__                apiRequiredParameters.remove(entry.getKey())__            } else {_                throw new IllegalArgumentException(_                        "path/param [" + entry.getKey() + "] not supported by [" + restApi.getName() + "] " + "api")__            }_        }__        if (false == apiRequiredPathParts.isEmpty()) {_            throw new IllegalArgumentException(_                    "missing required path part: " + apiRequiredPathParts + " by [" + restApi.getName() + "] api")__        }_        if (false == apiRequiredParameters.isEmpty()) {_            throw new IllegalArgumentException(_                    "missing required parameter: " + apiRequiredParameters + " by [" + restApi.getName() + "] api")__        }__        List<String> supportedMethods = restApi.getSupportedMethods(pathParts.keySet())__        String requestMethod__        if (entity != null) {_            if (false == restApi.isBodySupported()) {_                throw new IllegalArgumentException("body is not supported by [" + restApi.getName() + "] api")__            }_            String contentType = entity.getContentType().getValue()__            _            if (sendBodyAsSourceParam(supportedMethods, contentType, entity.getContentLength())) {_                logger.debug("sending the request body as source param with GET method")__                queryStringParams.put("source", EntityUtils.toString(entity))__                queryStringParams.put("source_content_type", contentType)__                requestMethod = HttpGet.METHOD_NAME__                entity = null__            } else {_                requestMethod = RandomizedTest.randomFrom(supportedMethods)__            }_        } else {_            if (restApi.isBodyRequired()) {_                throw new IllegalArgumentException("body is required by [" + restApi.getName() + "] api")__            }_            requestMethod = RandomizedTest.randomFrom(supportedMethods)__        }__        _        ClientYamlSuiteRestPath restPath = RandomizedTest.randomFrom(restApi.getFinalPaths(pathParts))__        _        _        _        String requestPath__        if (restPath.getPathParts().length == 0) {_            requestPath = "/"__        } else {_            StringBuilder finalPath = new StringBuilder()__            for (String pathPart : restPath.getPathParts()) {_                try {_                    finalPath.append('/')__                    _                    URI uri = new URI(null, null, null, -1, "/" + pathPart, null, null)__                    _                    finalPath.append(uri.getRawPath().substring(1).replaceAll("/", "%2F"))__                } catch (URISyntaxException e) {_                    throw new RuntimeException("unable to build uri", e)__                }_            }_            requestPath = finalPath.toString()__        }__        logger.debug("calling api [{}]", apiName)__        Request request = new Request(requestMethod, requestPath)__        for (Map.Entry<String, String> param : queryStringParams.entrySet()) {_            request.addParameter(param.getKey(), param.getValue())__        }_        request.setEntity(entity)__        setOptions(request, headers)___        try {_            Response response = getRestClient(nodeSelector).performRequest(request)__            return new ClientYamlTestResponse(response)__        } catch(ResponseException e) {_            throw new ClientYamlTestResponseException(e)__        }_    };calls,an,api,with,the,provided,parameters,and,body;public,client,yaml,test,response,call,api,string,api,name,map,string,string,params,http,entity,entity,map,string,string,headers,node,selector,node,selector,throws,ioexception,client,yaml,suite,rest,api,rest,api,rest,api,api,name,map,string,string,path,parts,new,hash,map,map,string,string,query,string,params,new,hash,map,set,string,api,required,path,parts,rest,api,get,path,parts,entry,set,stream,filter,entry,get,value,map,entry,get,key,collect,collectors,to,set,set,string,api,required,parameters,rest,api,get,params,entry,set,stream,filter,entry,get,value,map,entry,get,key,collect,collectors,to,set,for,map,entry,string,string,entry,params,entry,set,if,rest,api,get,path,parts,contains,key,entry,get,key,path,parts,put,entry,get,key,entry,get,value,api,required,path,parts,remove,entry,get,key,else,if,rest,api,get,params,contains,key,entry,get,key,rest,spec,is,global,parameter,entry,get,key,rest,spec,is,client,parameter,entry,get,key,query,string,params,put,entry,get,key,entry,get,value,api,required,parameters,remove,entry,get,key,else,throw,new,illegal,argument,exception,path,param,entry,get,key,not,supported,by,rest,api,get,name,api,if,false,api,required,path,parts,is,empty,throw,new,illegal,argument,exception,missing,required,path,part,api,required,path,parts,by,rest,api,get,name,api,if,false,api,required,parameters,is,empty,throw,new,illegal,argument,exception,missing,required,parameter,api,required,parameters,by,rest,api,get,name,api,list,string,supported,methods,rest,api,get,supported,methods,path,parts,key,set,string,request,method,if,entity,null,if,false,rest,api,is,body,supported,throw,new,illegal,argument,exception,body,is,not,supported,by,rest,api,get,name,api,string,content,type,entity,get,content,type,get,value,if,send,body,as,source,param,supported,methods,content,type,entity,get,content,length,logger,debug,sending,the,request,body,as,source,param,with,get,method,query,string,params,put,source,entity,utils,to,string,entity,query,string,params,put,content,type,request,method,http,get,entity,null,else,request,method,randomized,test,random,from,supported,methods,else,if,rest,api,is,body,required,throw,new,illegal,argument,exception,body,is,required,by,rest,api,get,name,api,request,method,randomized,test,random,from,supported,methods,client,yaml,suite,rest,path,rest,path,randomized,test,random,from,rest,api,get,final,paths,path,parts,string,request,path,if,rest,path,get,path,parts,length,0,request,path,else,string,builder,final,path,new,string,builder,for,string,path,part,rest,path,get,path,parts,try,final,path,append,uri,uri,new,uri,null,null,null,1,path,part,null,null,final,path,append,uri,get,raw,path,substring,1,replace,all,2f,catch,urisyntax,exception,e,throw,new,runtime,exception,unable,to,build,uri,e,request,path,final,path,to,string,logger,debug,calling,api,api,name,request,request,new,request,request,method,request,path,for,map,entry,string,string,param,query,string,params,entry,set,request,add,parameter,param,get,key,param,get,value,request,set,entity,entity,set,options,request,headers,try,response,response,get,rest,client,node,selector,perform,request,request,return,new,client,yaml,test,response,response,catch,response,exception,e,throw,new,client,yaml,test,response,exception,e
ClientYamlTestClient -> public ClientYamlTestResponse callApi(String apiName, Map<String, String> params, HttpEntity entity,             Map<String, String> headers, NodeSelector nodeSelector) throws IOException;1534176840;Calls an api with the provided parameters and body;public ClientYamlTestResponse callApi(String apiName, Map<String, String> params, HttpEntity entity,_            Map<String, String> headers, NodeSelector nodeSelector) throws IOException {__        ClientYamlSuiteRestApi restApi = restApi(apiName)___        _        Map<String, String> pathParts = new HashMap<>()__        Map<String, String> queryStringParams = new HashMap<>()___        Set<String> apiRequiredPathParts = restApi.getPathParts().entrySet().stream().filter(Entry::getValue).map(Entry::getKey)_                .collect(Collectors.toSet())__        Set<String> apiRequiredParameters = restApi.getParams().entrySet().stream().filter(Entry::getValue).map(Entry::getKey)_                .collect(Collectors.toSet())___        for (Map.Entry<String, String> entry : params.entrySet()) {_            if (restApi.getPathParts().containsKey(entry.getKey())) {_                pathParts.put(entry.getKey(), entry.getValue())__                apiRequiredPathParts.remove(entry.getKey())__            } else if (restApi.getParams().containsKey(entry.getKey())_                    || restSpec.isGlobalParameter(entry.getKey())_                    || restSpec.isClientParameter(entry.getKey())) {_                queryStringParams.put(entry.getKey(), entry.getValue())__                apiRequiredParameters.remove(entry.getKey())__            } else {_                throw new IllegalArgumentException(_                        "path/param [" + entry.getKey() + "] not supported by [" + restApi.getName() + "] " + "api")__            }_        }__        if (false == apiRequiredPathParts.isEmpty()) {_            throw new IllegalArgumentException(_                    "missing required path part: " + apiRequiredPathParts + " by [" + restApi.getName() + "] api")__        }_        if (false == apiRequiredParameters.isEmpty()) {_            throw new IllegalArgumentException(_                    "missing required parameter: " + apiRequiredParameters + " by [" + restApi.getName() + "] api")__        }__        List<String> supportedMethods = restApi.getSupportedMethods(pathParts.keySet())__        String requestMethod__        if (entity != null) {_            if (false == restApi.isBodySupported()) {_                throw new IllegalArgumentException("body is not supported by [" + restApi.getName() + "] api")__            }_            String contentType = entity.getContentType().getValue()__            _            if (sendBodyAsSourceParam(supportedMethods, contentType, entity.getContentLength())) {_                logger.debug("sending the request body as source param with GET method")__                queryStringParams.put("source", EntityUtils.toString(entity))__                queryStringParams.put("source_content_type", contentType)__                requestMethod = HttpGet.METHOD_NAME__                entity = null__            } else {_                requestMethod = RandomizedTest.randomFrom(supportedMethods)__            }_        } else {_            if (restApi.isBodyRequired()) {_                throw new IllegalArgumentException("body is required by [" + restApi.getName() + "] api")__            }_            requestMethod = RandomizedTest.randomFrom(supportedMethods)__        }__        _        ClientYamlSuiteRestPath restPath = RandomizedTest.randomFrom(restApi.getFinalPaths(pathParts))__        _        _        _        String requestPath__        if (restPath.getPathParts().length == 0) {_            requestPath = "/"__        } else {_            StringBuilder finalPath = new StringBuilder()__            for (String pathPart : restPath.getPathParts()) {_                try {_                    finalPath.append('/')__                    _                    URI uri = new URI(null, null, null, -1, "/" + pathPart, null, null)__                    _                    finalPath.append(uri.getRawPath().substring(1).replaceAll("/", "%2F"))__                } catch (URISyntaxException e) {_                    throw new RuntimeException("unable to build uri", e)__                }_            }_            requestPath = finalPath.toString()__        }__        logger.debug("calling api [{}]", apiName)__        Request request = new Request(requestMethod, requestPath)__        for (Map.Entry<String, String> param : queryStringParams.entrySet()) {_            request.addParameter(param.getKey(), param.getValue())__        }_        request.setEntity(entity)__        setOptions(request, headers)___        try {_            Response response = getRestClient(nodeSelector).performRequest(request)__            return new ClientYamlTestResponse(response)__        } catch(ResponseException e) {_            throw new ClientYamlTestResponseException(e)__        }_    };calls,an,api,with,the,provided,parameters,and,body;public,client,yaml,test,response,call,api,string,api,name,map,string,string,params,http,entity,entity,map,string,string,headers,node,selector,node,selector,throws,ioexception,client,yaml,suite,rest,api,rest,api,rest,api,api,name,map,string,string,path,parts,new,hash,map,map,string,string,query,string,params,new,hash,map,set,string,api,required,path,parts,rest,api,get,path,parts,entry,set,stream,filter,entry,get,value,map,entry,get,key,collect,collectors,to,set,set,string,api,required,parameters,rest,api,get,params,entry,set,stream,filter,entry,get,value,map,entry,get,key,collect,collectors,to,set,for,map,entry,string,string,entry,params,entry,set,if,rest,api,get,path,parts,contains,key,entry,get,key,path,parts,put,entry,get,key,entry,get,value,api,required,path,parts,remove,entry,get,key,else,if,rest,api,get,params,contains,key,entry,get,key,rest,spec,is,global,parameter,entry,get,key,rest,spec,is,client,parameter,entry,get,key,query,string,params,put,entry,get,key,entry,get,value,api,required,parameters,remove,entry,get,key,else,throw,new,illegal,argument,exception,path,param,entry,get,key,not,supported,by,rest,api,get,name,api,if,false,api,required,path,parts,is,empty,throw,new,illegal,argument,exception,missing,required,path,part,api,required,path,parts,by,rest,api,get,name,api,if,false,api,required,parameters,is,empty,throw,new,illegal,argument,exception,missing,required,parameter,api,required,parameters,by,rest,api,get,name,api,list,string,supported,methods,rest,api,get,supported,methods,path,parts,key,set,string,request,method,if,entity,null,if,false,rest,api,is,body,supported,throw,new,illegal,argument,exception,body,is,not,supported,by,rest,api,get,name,api,string,content,type,entity,get,content,type,get,value,if,send,body,as,source,param,supported,methods,content,type,entity,get,content,length,logger,debug,sending,the,request,body,as,source,param,with,get,method,query,string,params,put,source,entity,utils,to,string,entity,query,string,params,put,content,type,request,method,http,get,entity,null,else,request,method,randomized,test,random,from,supported,methods,else,if,rest,api,is,body,required,throw,new,illegal,argument,exception,body,is,required,by,rest,api,get,name,api,request,method,randomized,test,random,from,supported,methods,client,yaml,suite,rest,path,rest,path,randomized,test,random,from,rest,api,get,final,paths,path,parts,string,request,path,if,rest,path,get,path,parts,length,0,request,path,else,string,builder,final,path,new,string,builder,for,string,path,part,rest,path,get,path,parts,try,final,path,append,uri,uri,new,uri,null,null,null,1,path,part,null,null,final,path,append,uri,get,raw,path,substring,1,replace,all,2f,catch,urisyntax,exception,e,throw,new,runtime,exception,unable,to,build,uri,e,request,path,final,path,to,string,logger,debug,calling,api,api,name,request,request,new,request,request,method,request,path,for,map,entry,string,string,param,query,string,params,entry,set,request,add,parameter,param,get,key,param,get,value,request,set,entity,entity,set,options,request,headers,try,response,response,get,rest,client,node,selector,perform,request,request,return,new,client,yaml,test,response,response,catch,response,exception,e,throw,new,client,yaml,test,response,exception,e
ClientYamlTestClient -> public ClientYamlTestResponse callApi(String apiName, Map<String, String> params, HttpEntity entity,             Map<String, String> headers, NodeSelector nodeSelector) throws IOException;1540486836;Calls an api with the provided parameters and body;public ClientYamlTestResponse callApi(String apiName, Map<String, String> params, HttpEntity entity,_            Map<String, String> headers, NodeSelector nodeSelector) throws IOException {__        ClientYamlSuiteRestApi restApi = restApi(apiName)___        _        Map<String, String> pathParts = new HashMap<>()__        Map<String, String> queryStringParams = new HashMap<>()___        Set<String> apiRequiredPathParts = restApi.getPathParts().entrySet().stream().filter(Entry::getValue).map(Entry::getKey)_                .collect(Collectors.toSet())__        Set<String> apiRequiredParameters = restApi.getParams().entrySet().stream().filter(Entry::getValue).map(Entry::getKey)_                .collect(Collectors.toSet())___        for (Map.Entry<String, String> entry : params.entrySet()) {_            if (restApi.getPathParts().containsKey(entry.getKey())) {_                pathParts.put(entry.getKey(), entry.getValue())__                apiRequiredPathParts.remove(entry.getKey())__            } else if (restApi.getParams().containsKey(entry.getKey())_                    || restSpec.isGlobalParameter(entry.getKey())_                    || restSpec.isClientParameter(entry.getKey())) {_                queryStringParams.put(entry.getKey(), entry.getValue())__                apiRequiredParameters.remove(entry.getKey())__            } else {_                throw new IllegalArgumentException(_                        "path/param [" + entry.getKey() + "] not supported by [" + restApi.getName() + "] " + "api")__            }_        }__        if (false == apiRequiredPathParts.isEmpty()) {_            throw new IllegalArgumentException(_                    "missing required path part: " + apiRequiredPathParts + " by [" + restApi.getName() + "] api")__        }_        if (false == apiRequiredParameters.isEmpty()) {_            throw new IllegalArgumentException(_                    "missing required parameter: " + apiRequiredParameters + " by [" + restApi.getName() + "] api")__        }__        List<String> supportedMethods = restApi.getSupportedMethods(pathParts.keySet())__        String requestMethod__        if (entity != null) {_            if (false == restApi.isBodySupported()) {_                throw new IllegalArgumentException("body is not supported by [" + restApi.getName() + "] api")__            }_            String contentType = entity.getContentType().getValue()__            _            if (sendBodyAsSourceParam(supportedMethods, contentType, entity.getContentLength())) {_                logger.debug("sending the request body as source param with GET method")__                queryStringParams.put("source", EntityUtils.toString(entity))__                queryStringParams.put("source_content_type", contentType)__                requestMethod = HttpGet.METHOD_NAME__                entity = null__            } else {_                requestMethod = RandomizedTest.randomFrom(supportedMethods)__            }_        } else {_            if (restApi.isBodyRequired()) {_                throw new IllegalArgumentException("body is required by [" + restApi.getName() + "] api")__            }_            requestMethod = RandomizedTest.randomFrom(supportedMethods)__        }__        _        ClientYamlSuiteRestPath restPath = RandomizedTest.randomFrom(restApi.getFinalPaths(pathParts))__        _        _        _        String requestPath__        if (restPath.getPathParts().length == 0) {_            requestPath = "/"__        } else {_            StringBuilder finalPath = new StringBuilder()__            for (String pathPart : restPath.getPathParts()) {_                try {_                    finalPath.append('/')__                    _                    URI uri = new URI(null, null, null, -1, "/" + pathPart, null, null)__                    _                    finalPath.append(uri.getRawPath().substring(1).replaceAll("/", "%2F"))__                } catch (URISyntaxException e) {_                    throw new RuntimeException("unable to build uri", e)__                }_            }_            requestPath = finalPath.toString()__        }__        logger.debug("calling api [{}]", apiName)__        Request request = new Request(requestMethod, requestPath)__        for (Map.Entry<String, String> param : queryStringParams.entrySet()) {_            request.addParameter(param.getKey(), param.getValue())__        }_        request.setEntity(entity)__        setOptions(request, headers)___        try {_            Response response = getRestClient(nodeSelector).performRequest(request)__            return new ClientYamlTestResponse(response)__        } catch(ResponseException e) {_            throw new ClientYamlTestResponseException(e)__        }_    };calls,an,api,with,the,provided,parameters,and,body;public,client,yaml,test,response,call,api,string,api,name,map,string,string,params,http,entity,entity,map,string,string,headers,node,selector,node,selector,throws,ioexception,client,yaml,suite,rest,api,rest,api,rest,api,api,name,map,string,string,path,parts,new,hash,map,map,string,string,query,string,params,new,hash,map,set,string,api,required,path,parts,rest,api,get,path,parts,entry,set,stream,filter,entry,get,value,map,entry,get,key,collect,collectors,to,set,set,string,api,required,parameters,rest,api,get,params,entry,set,stream,filter,entry,get,value,map,entry,get,key,collect,collectors,to,set,for,map,entry,string,string,entry,params,entry,set,if,rest,api,get,path,parts,contains,key,entry,get,key,path,parts,put,entry,get,key,entry,get,value,api,required,path,parts,remove,entry,get,key,else,if,rest,api,get,params,contains,key,entry,get,key,rest,spec,is,global,parameter,entry,get,key,rest,spec,is,client,parameter,entry,get,key,query,string,params,put,entry,get,key,entry,get,value,api,required,parameters,remove,entry,get,key,else,throw,new,illegal,argument,exception,path,param,entry,get,key,not,supported,by,rest,api,get,name,api,if,false,api,required,path,parts,is,empty,throw,new,illegal,argument,exception,missing,required,path,part,api,required,path,parts,by,rest,api,get,name,api,if,false,api,required,parameters,is,empty,throw,new,illegal,argument,exception,missing,required,parameter,api,required,parameters,by,rest,api,get,name,api,list,string,supported,methods,rest,api,get,supported,methods,path,parts,key,set,string,request,method,if,entity,null,if,false,rest,api,is,body,supported,throw,new,illegal,argument,exception,body,is,not,supported,by,rest,api,get,name,api,string,content,type,entity,get,content,type,get,value,if,send,body,as,source,param,supported,methods,content,type,entity,get,content,length,logger,debug,sending,the,request,body,as,source,param,with,get,method,query,string,params,put,source,entity,utils,to,string,entity,query,string,params,put,content,type,request,method,http,get,entity,null,else,request,method,randomized,test,random,from,supported,methods,else,if,rest,api,is,body,required,throw,new,illegal,argument,exception,body,is,required,by,rest,api,get,name,api,request,method,randomized,test,random,from,supported,methods,client,yaml,suite,rest,path,rest,path,randomized,test,random,from,rest,api,get,final,paths,path,parts,string,request,path,if,rest,path,get,path,parts,length,0,request,path,else,string,builder,final,path,new,string,builder,for,string,path,part,rest,path,get,path,parts,try,final,path,append,uri,uri,new,uri,null,null,null,1,path,part,null,null,final,path,append,uri,get,raw,path,substring,1,replace,all,2f,catch,urisyntax,exception,e,throw,new,runtime,exception,unable,to,build,uri,e,request,path,final,path,to,string,logger,debug,calling,api,api,name,request,request,new,request,request,method,request,path,for,map,entry,string,string,param,query,string,params,entry,set,request,add,parameter,param,get,key,param,get,value,request,set,entity,entity,set,options,request,headers,try,response,response,get,rest,client,node,selector,perform,request,request,return,new,client,yaml,test,response,response,catch,response,exception,e,throw,new,client,yaml,test,response,exception,e
ClientYamlTestClient -> public ClientYamlTestResponse callApi(String apiName, Map<String, String> params, HttpEntity entity,             Map<String, String> headers, NodeSelector nodeSelector) throws IOException;1544448720;Calls an api with the provided parameters and body;public ClientYamlTestResponse callApi(String apiName, Map<String, String> params, HttpEntity entity,_            Map<String, String> headers, NodeSelector nodeSelector) throws IOException {__        ClientYamlSuiteRestApi restApi = restApi(apiName)___        _        Map<String, String> pathParts = new HashMap<>()__        Map<String, String> queryStringParams = new HashMap<>()___        Set<String> apiRequiredPathParts = restApi.getPathParts().entrySet().stream().filter(Entry::getValue).map(Entry::getKey)_                .collect(Collectors.toSet())__        Set<String> apiRequiredParameters = restApi.getParams().entrySet().stream().filter(Entry::getValue).map(Entry::getKey)_                .collect(Collectors.toSet())___        for (Map.Entry<String, String> entry : params.entrySet()) {_            if (restApi.getPathParts().containsKey(entry.getKey())) {_                pathParts.put(entry.getKey(), entry.getValue())__                apiRequiredPathParts.remove(entry.getKey())__            } else if (restApi.getParams().containsKey(entry.getKey())_                    || restSpec.isGlobalParameter(entry.getKey())_                    || restSpec.isClientParameter(entry.getKey())) {_                queryStringParams.put(entry.getKey(), entry.getValue())__                apiRequiredParameters.remove(entry.getKey())__            } else {_                throw new IllegalArgumentException(_                        "path/param [" + entry.getKey() + "] not supported by [" + restApi.getName() + "] " + "api")__            }_        }__        if (false == apiRequiredPathParts.isEmpty()) {_            throw new IllegalArgumentException(_                    "missing required path part: " + apiRequiredPathParts + " by [" + restApi.getName() + "] api")__        }_        if (false == apiRequiredParameters.isEmpty()) {_            throw new IllegalArgumentException(_                    "missing required parameter: " + apiRequiredParameters + " by [" + restApi.getName() + "] api")__        }__        List<String> supportedMethods = restApi.getSupportedMethods(pathParts.keySet())__        String requestMethod__        if (entity != null) {_            if (false == restApi.isBodySupported()) {_                throw new IllegalArgumentException("body is not supported by [" + restApi.getName() + "] api")__            }_            String contentType = entity.getContentType().getValue()__            _            if (sendBodyAsSourceParam(supportedMethods, contentType, entity.getContentLength())) {_                logger.debug("sending the request body as source param with GET method")__                queryStringParams.put("source", EntityUtils.toString(entity))__                queryStringParams.put("source_content_type", contentType)__                requestMethod = HttpGet.METHOD_NAME__                entity = null__            } else {_                requestMethod = RandomizedTest.randomFrom(supportedMethods)__            }_        } else {_            if (restApi.isBodyRequired()) {_                throw new IllegalArgumentException("body is required by [" + restApi.getName() + "] api")__            }_            requestMethod = RandomizedTest.randomFrom(supportedMethods)__        }__        _        ClientYamlSuiteRestPath restPath = RandomizedTest.randomFrom(restApi.getFinalPaths(pathParts))__        _        _        _        String requestPath__        if (restPath.getPathParts().length == 0) {_            requestPath = "/"__        } else {_            StringBuilder finalPath = new StringBuilder()__            for (String pathPart : restPath.getPathParts()) {_                try {_                    finalPath.append('/')__                    _                    URI uri = new URI(null, null, null, -1, "/" + pathPart, null, null)__                    _                    finalPath.append(uri.getRawPath().substring(1).replaceAll("/", "%2F"))__                } catch (URISyntaxException e) {_                    throw new RuntimeException("unable to build uri", e)__                }_            }_            requestPath = finalPath.toString()__        }__        logger.debug("calling api [{}]", apiName)__        Request request = new Request(requestMethod, requestPath)__        for (Map.Entry<String, String> param : queryStringParams.entrySet()) {_            request.addParameter(param.getKey(), param.getValue())__        }_        request.setEntity(entity)__        setOptions(request, headers)___        try {_            Response response = getRestClient(nodeSelector).performRequest(request)__            return new ClientYamlTestResponse(response)__        } catch(ResponseException e) {_            throw new ClientYamlTestResponseException(e)__        }_    };calls,an,api,with,the,provided,parameters,and,body;public,client,yaml,test,response,call,api,string,api,name,map,string,string,params,http,entity,entity,map,string,string,headers,node,selector,node,selector,throws,ioexception,client,yaml,suite,rest,api,rest,api,rest,api,api,name,map,string,string,path,parts,new,hash,map,map,string,string,query,string,params,new,hash,map,set,string,api,required,path,parts,rest,api,get,path,parts,entry,set,stream,filter,entry,get,value,map,entry,get,key,collect,collectors,to,set,set,string,api,required,parameters,rest,api,get,params,entry,set,stream,filter,entry,get,value,map,entry,get,key,collect,collectors,to,set,for,map,entry,string,string,entry,params,entry,set,if,rest,api,get,path,parts,contains,key,entry,get,key,path,parts,put,entry,get,key,entry,get,value,api,required,path,parts,remove,entry,get,key,else,if,rest,api,get,params,contains,key,entry,get,key,rest,spec,is,global,parameter,entry,get,key,rest,spec,is,client,parameter,entry,get,key,query,string,params,put,entry,get,key,entry,get,value,api,required,parameters,remove,entry,get,key,else,throw,new,illegal,argument,exception,path,param,entry,get,key,not,supported,by,rest,api,get,name,api,if,false,api,required,path,parts,is,empty,throw,new,illegal,argument,exception,missing,required,path,part,api,required,path,parts,by,rest,api,get,name,api,if,false,api,required,parameters,is,empty,throw,new,illegal,argument,exception,missing,required,parameter,api,required,parameters,by,rest,api,get,name,api,list,string,supported,methods,rest,api,get,supported,methods,path,parts,key,set,string,request,method,if,entity,null,if,false,rest,api,is,body,supported,throw,new,illegal,argument,exception,body,is,not,supported,by,rest,api,get,name,api,string,content,type,entity,get,content,type,get,value,if,send,body,as,source,param,supported,methods,content,type,entity,get,content,length,logger,debug,sending,the,request,body,as,source,param,with,get,method,query,string,params,put,source,entity,utils,to,string,entity,query,string,params,put,content,type,request,method,http,get,entity,null,else,request,method,randomized,test,random,from,supported,methods,else,if,rest,api,is,body,required,throw,new,illegal,argument,exception,body,is,required,by,rest,api,get,name,api,request,method,randomized,test,random,from,supported,methods,client,yaml,suite,rest,path,rest,path,randomized,test,random,from,rest,api,get,final,paths,path,parts,string,request,path,if,rest,path,get,path,parts,length,0,request,path,else,string,builder,final,path,new,string,builder,for,string,path,part,rest,path,get,path,parts,try,final,path,append,uri,uri,new,uri,null,null,null,1,path,part,null,null,final,path,append,uri,get,raw,path,substring,1,replace,all,2f,catch,urisyntax,exception,e,throw,new,runtime,exception,unable,to,build,uri,e,request,path,final,path,to,string,logger,debug,calling,api,api,name,request,request,new,request,request,method,request,path,for,map,entry,string,string,param,query,string,params,entry,set,request,add,parameter,param,get,key,param,get,value,request,set,entity,entity,set,options,request,headers,try,response,response,get,rest,client,node,selector,perform,request,request,return,new,client,yaml,test,response,response,catch,response,exception,e,throw,new,client,yaml,test,response,exception,e
ClientYamlTestClient -> public ClientYamlTestResponse callApi(String apiName, Map<String, String> params, HttpEntity entity, Map<String, String> headers)             throws IOException;1524684173;Calls an api with the provided parameters and body;public ClientYamlTestResponse callApi(String apiName, Map<String, String> params, HttpEntity entity, Map<String, String> headers)_            throws IOException {__        ClientYamlSuiteRestApi restApi = restApi(apiName)___        _        Map<String, String> pathParts = new HashMap<>()__        Map<String, String> queryStringParams = new HashMap<>()___        Set<String> apiRequiredPathParts = restApi.getPathParts().entrySet().stream().filter(Entry::getValue).map(Entry::getKey)_                .collect(Collectors.toSet())__        Set<String> apiRequiredParameters = restApi.getParams().entrySet().stream().filter(Entry::getValue).map(Entry::getKey)_                .collect(Collectors.toSet())___        for (Map.Entry<String, String> entry : params.entrySet()) {_            if (restApi.getPathParts().containsKey(entry.getKey())) {_                pathParts.put(entry.getKey(), entry.getValue())__                apiRequiredPathParts.remove(entry.getKey())__            } else if (restApi.getParams().containsKey(entry.getKey())_                    || restSpec.isGlobalParameter(entry.getKey())_                    || restSpec.isClientParameter(entry.getKey())) {_                queryStringParams.put(entry.getKey(), entry.getValue())__                apiRequiredParameters.remove(entry.getKey())__            } else {_                throw new IllegalArgumentException(_                        "path/param [" + entry.getKey() + "] not supported by [" + restApi.getName() + "] " + "api")__            }_        }__        if (false == apiRequiredPathParts.isEmpty()) {_            throw new IllegalArgumentException(_                    "missing required path part: " + apiRequiredPathParts + " by [" + restApi.getName() + "] api")__        }_        if (false == apiRequiredParameters.isEmpty()) {_            throw new IllegalArgumentException(_                    "missing required parameter: " + apiRequiredParameters + " by [" + restApi.getName() + "] api")__        }__        List<String> supportedMethods = restApi.getSupportedMethods(pathParts.keySet())__        String requestMethod__        if (entity != null) {_            if (false == restApi.isBodySupported()) {_                throw new IllegalArgumentException("body is not supported by [" + restApi.getName() + "] api")__            }_            String contentType = entity.getContentType().getValue()__            _            if (sendBodyAsSourceParam(supportedMethods, contentType)) {_                logger.debug("sending the request body as source param with GET method")__                queryStringParams.put("source", EntityUtils.toString(entity))__                queryStringParams.put("source_content_type", contentType)__                requestMethod = HttpGet.METHOD_NAME__                entity = null__            } else {_                requestMethod = RandomizedTest.randomFrom(supportedMethods)__            }_        } else {_            if (restApi.isBodyRequired()) {_                throw new IllegalArgumentException("body is required by [" + restApi.getName() + "] api")__            }_            requestMethod = RandomizedTest.randomFrom(supportedMethods)__        }__        _        ClientYamlSuiteRestPath restPath = RandomizedTest.randomFrom(restApi.getFinalPaths(pathParts))__        _        _        _        String requestPath__        if (restPath.getPathParts().length == 0) {_            requestPath = "/"__        } else {_            StringBuilder finalPath = new StringBuilder()__            for (String pathPart : restPath.getPathParts()) {_                try {_                    finalPath.append('/')__                    _                    URI uri = new URI(null, null, null, -1, "/" + pathPart, null, null)__                    _                    finalPath.append(uri.getRawPath().substring(1).replaceAll("/", "%2F"))__                } catch (URISyntaxException e) {_                    throw new RuntimeException("unable to build uri", e)__                }_            }_            requestPath = finalPath.toString()__        }__        Header[] requestHeaders = new Header[headers.size()]__        int index = 0__        for (Map.Entry<String, String> header : headers.entrySet()) {_            logger.debug("Adding header {} with value {}", header.getKey(), header.getValue())__            requestHeaders[index++] = new BasicHeader(header.getKey(), header.getValue())__        }__        logger.debug("calling api [{}]", apiName)__        try {_            Response response = restClient.performRequest(requestMethod, requestPath, queryStringParams, entity, requestHeaders)__            return new ClientYamlTestResponse(response)__        } catch(ResponseException e) {_            throw new ClientYamlTestResponseException(e)__        }_    };calls,an,api,with,the,provided,parameters,and,body;public,client,yaml,test,response,call,api,string,api,name,map,string,string,params,http,entity,entity,map,string,string,headers,throws,ioexception,client,yaml,suite,rest,api,rest,api,rest,api,api,name,map,string,string,path,parts,new,hash,map,map,string,string,query,string,params,new,hash,map,set,string,api,required,path,parts,rest,api,get,path,parts,entry,set,stream,filter,entry,get,value,map,entry,get,key,collect,collectors,to,set,set,string,api,required,parameters,rest,api,get,params,entry,set,stream,filter,entry,get,value,map,entry,get,key,collect,collectors,to,set,for,map,entry,string,string,entry,params,entry,set,if,rest,api,get,path,parts,contains,key,entry,get,key,path,parts,put,entry,get,key,entry,get,value,api,required,path,parts,remove,entry,get,key,else,if,rest,api,get,params,contains,key,entry,get,key,rest,spec,is,global,parameter,entry,get,key,rest,spec,is,client,parameter,entry,get,key,query,string,params,put,entry,get,key,entry,get,value,api,required,parameters,remove,entry,get,key,else,throw,new,illegal,argument,exception,path,param,entry,get,key,not,supported,by,rest,api,get,name,api,if,false,api,required,path,parts,is,empty,throw,new,illegal,argument,exception,missing,required,path,part,api,required,path,parts,by,rest,api,get,name,api,if,false,api,required,parameters,is,empty,throw,new,illegal,argument,exception,missing,required,parameter,api,required,parameters,by,rest,api,get,name,api,list,string,supported,methods,rest,api,get,supported,methods,path,parts,key,set,string,request,method,if,entity,null,if,false,rest,api,is,body,supported,throw,new,illegal,argument,exception,body,is,not,supported,by,rest,api,get,name,api,string,content,type,entity,get,content,type,get,value,if,send,body,as,source,param,supported,methods,content,type,logger,debug,sending,the,request,body,as,source,param,with,get,method,query,string,params,put,source,entity,utils,to,string,entity,query,string,params,put,content,type,request,method,http,get,entity,null,else,request,method,randomized,test,random,from,supported,methods,else,if,rest,api,is,body,required,throw,new,illegal,argument,exception,body,is,required,by,rest,api,get,name,api,request,method,randomized,test,random,from,supported,methods,client,yaml,suite,rest,path,rest,path,randomized,test,random,from,rest,api,get,final,paths,path,parts,string,request,path,if,rest,path,get,path,parts,length,0,request,path,else,string,builder,final,path,new,string,builder,for,string,path,part,rest,path,get,path,parts,try,final,path,append,uri,uri,new,uri,null,null,null,1,path,part,null,null,final,path,append,uri,get,raw,path,substring,1,replace,all,2f,catch,urisyntax,exception,e,throw,new,runtime,exception,unable,to,build,uri,e,request,path,final,path,to,string,header,request,headers,new,header,headers,size,int,index,0,for,map,entry,string,string,header,headers,entry,set,logger,debug,adding,header,with,value,header,get,key,header,get,value,request,headers,index,new,basic,header,header,get,key,header,get,value,logger,debug,calling,api,api,name,try,response,response,rest,client,perform,request,request,method,request,path,query,string,params,entity,request,headers,return,new,client,yaml,test,response,response,catch,response,exception,e,throw,new,client,yaml,test,response,exception,e
ClientYamlTestClient -> public ClientYamlTestResponse callApi(String apiName, Map<String, String> params, HttpEntity entity, Map<String, String> headers)             throws IOException;1526029249;Calls an api with the provided parameters and body;public ClientYamlTestResponse callApi(String apiName, Map<String, String> params, HttpEntity entity, Map<String, String> headers)_            throws IOException {__        ClientYamlSuiteRestApi restApi = restApi(apiName)___        _        Map<String, String> pathParts = new HashMap<>()__        Map<String, String> queryStringParams = new HashMap<>()___        Set<String> apiRequiredPathParts = restApi.getPathParts().entrySet().stream().filter(Entry::getValue).map(Entry::getKey)_                .collect(Collectors.toSet())__        Set<String> apiRequiredParameters = restApi.getParams().entrySet().stream().filter(Entry::getValue).map(Entry::getKey)_                .collect(Collectors.toSet())___        for (Map.Entry<String, String> entry : params.entrySet()) {_            if (restApi.getPathParts().containsKey(entry.getKey())) {_                pathParts.put(entry.getKey(), entry.getValue())__                apiRequiredPathParts.remove(entry.getKey())__            } else if (restApi.getParams().containsKey(entry.getKey())_                    || restSpec.isGlobalParameter(entry.getKey())_                    || restSpec.isClientParameter(entry.getKey())) {_                queryStringParams.put(entry.getKey(), entry.getValue())__                apiRequiredParameters.remove(entry.getKey())__            } else {_                throw new IllegalArgumentException(_                        "path/param [" + entry.getKey() + "] not supported by [" + restApi.getName() + "] " + "api")__            }_        }__        if (false == apiRequiredPathParts.isEmpty()) {_            throw new IllegalArgumentException(_                    "missing required path part: " + apiRequiredPathParts + " by [" + restApi.getName() + "] api")__        }_        if (false == apiRequiredParameters.isEmpty()) {_            throw new IllegalArgumentException(_                    "missing required parameter: " + apiRequiredParameters + " by [" + restApi.getName() + "] api")__        }__        List<String> supportedMethods = restApi.getSupportedMethods(pathParts.keySet())__        String requestMethod__        if (entity != null) {_            if (false == restApi.isBodySupported()) {_                throw new IllegalArgumentException("body is not supported by [" + restApi.getName() + "] api")__            }_            String contentType = entity.getContentType().getValue()__            _            if (sendBodyAsSourceParam(supportedMethods, contentType, entity.getContentLength())) {_                logger.debug("sending the request body as source param with GET method")__                queryStringParams.put("source", EntityUtils.toString(entity))__                queryStringParams.put("source_content_type", contentType)__                requestMethod = HttpGet.METHOD_NAME__                entity = null__            } else {_                requestMethod = RandomizedTest.randomFrom(supportedMethods)__            }_        } else {_            if (restApi.isBodyRequired()) {_                throw new IllegalArgumentException("body is required by [" + restApi.getName() + "] api")__            }_            requestMethod = RandomizedTest.randomFrom(supportedMethods)__        }__        _        ClientYamlSuiteRestPath restPath = RandomizedTest.randomFrom(restApi.getFinalPaths(pathParts))__        _        _        _        String requestPath__        if (restPath.getPathParts().length == 0) {_            requestPath = "/"__        } else {_            StringBuilder finalPath = new StringBuilder()__            for (String pathPart : restPath.getPathParts()) {_                try {_                    finalPath.append('/')__                    _                    URI uri = new URI(null, null, null, -1, "/" + pathPart, null, null)__                    _                    finalPath.append(uri.getRawPath().substring(1).replaceAll("/", "%2F"))__                } catch (URISyntaxException e) {_                    throw new RuntimeException("unable to build uri", e)__                }_            }_            requestPath = finalPath.toString()__        }__        Header[] requestHeaders = new Header[headers.size()]__        int index = 0__        for (Map.Entry<String, String> header : headers.entrySet()) {_            logger.debug("Adding header {} with value {}", header.getKey(), header.getValue())__            requestHeaders[index++] = new BasicHeader(header.getKey(), header.getValue())__        }__        logger.debug("calling api [{}]", apiName)__        try {_            Response response = restClient.performRequest(requestMethod, requestPath, queryStringParams, entity, requestHeaders)__            return new ClientYamlTestResponse(response)__        } catch(ResponseException e) {_            throw new ClientYamlTestResponseException(e)__        }_    };calls,an,api,with,the,provided,parameters,and,body;public,client,yaml,test,response,call,api,string,api,name,map,string,string,params,http,entity,entity,map,string,string,headers,throws,ioexception,client,yaml,suite,rest,api,rest,api,rest,api,api,name,map,string,string,path,parts,new,hash,map,map,string,string,query,string,params,new,hash,map,set,string,api,required,path,parts,rest,api,get,path,parts,entry,set,stream,filter,entry,get,value,map,entry,get,key,collect,collectors,to,set,set,string,api,required,parameters,rest,api,get,params,entry,set,stream,filter,entry,get,value,map,entry,get,key,collect,collectors,to,set,for,map,entry,string,string,entry,params,entry,set,if,rest,api,get,path,parts,contains,key,entry,get,key,path,parts,put,entry,get,key,entry,get,value,api,required,path,parts,remove,entry,get,key,else,if,rest,api,get,params,contains,key,entry,get,key,rest,spec,is,global,parameter,entry,get,key,rest,spec,is,client,parameter,entry,get,key,query,string,params,put,entry,get,key,entry,get,value,api,required,parameters,remove,entry,get,key,else,throw,new,illegal,argument,exception,path,param,entry,get,key,not,supported,by,rest,api,get,name,api,if,false,api,required,path,parts,is,empty,throw,new,illegal,argument,exception,missing,required,path,part,api,required,path,parts,by,rest,api,get,name,api,if,false,api,required,parameters,is,empty,throw,new,illegal,argument,exception,missing,required,parameter,api,required,parameters,by,rest,api,get,name,api,list,string,supported,methods,rest,api,get,supported,methods,path,parts,key,set,string,request,method,if,entity,null,if,false,rest,api,is,body,supported,throw,new,illegal,argument,exception,body,is,not,supported,by,rest,api,get,name,api,string,content,type,entity,get,content,type,get,value,if,send,body,as,source,param,supported,methods,content,type,entity,get,content,length,logger,debug,sending,the,request,body,as,source,param,with,get,method,query,string,params,put,source,entity,utils,to,string,entity,query,string,params,put,content,type,request,method,http,get,entity,null,else,request,method,randomized,test,random,from,supported,methods,else,if,rest,api,is,body,required,throw,new,illegal,argument,exception,body,is,required,by,rest,api,get,name,api,request,method,randomized,test,random,from,supported,methods,client,yaml,suite,rest,path,rest,path,randomized,test,random,from,rest,api,get,final,paths,path,parts,string,request,path,if,rest,path,get,path,parts,length,0,request,path,else,string,builder,final,path,new,string,builder,for,string,path,part,rest,path,get,path,parts,try,final,path,append,uri,uri,new,uri,null,null,null,1,path,part,null,null,final,path,append,uri,get,raw,path,substring,1,replace,all,2f,catch,urisyntax,exception,e,throw,new,runtime,exception,unable,to,build,uri,e,request,path,final,path,to,string,header,request,headers,new,header,headers,size,int,index,0,for,map,entry,string,string,header,headers,entry,set,logger,debug,adding,header,with,value,header,get,key,header,get,value,request,headers,index,new,basic,header,header,get,key,header,get,value,logger,debug,calling,api,api,name,try,response,response,rest,client,perform,request,request,method,request,path,query,string,params,entity,request,headers,return,new,client,yaml,test,response,response,catch,response,exception,e,throw,new,client,yaml,test,response,exception,e
ClientYamlTestClient -> public ClientYamlTestResponse callApi(String apiName, Map<String, String> params, HttpEntity entity, Map<String, String> headers)             throws IOException;1526449283;Calls an api with the provided parameters and body;public ClientYamlTestResponse callApi(String apiName, Map<String, String> params, HttpEntity entity, Map<String, String> headers)_            throws IOException {__        ClientYamlSuiteRestApi restApi = restApi(apiName)___        _        Map<String, String> pathParts = new HashMap<>()__        Map<String, String> queryStringParams = new HashMap<>()___        Set<String> apiRequiredPathParts = restApi.getPathParts().entrySet().stream().filter(Entry::getValue).map(Entry::getKey)_                .collect(Collectors.toSet())__        Set<String> apiRequiredParameters = restApi.getParams().entrySet().stream().filter(Entry::getValue).map(Entry::getKey)_                .collect(Collectors.toSet())___        for (Map.Entry<String, String> entry : params.entrySet()) {_            if (restApi.getPathParts().containsKey(entry.getKey())) {_                pathParts.put(entry.getKey(), entry.getValue())__                apiRequiredPathParts.remove(entry.getKey())__            } else if (restApi.getParams().containsKey(entry.getKey())_                    || restSpec.isGlobalParameter(entry.getKey())_                    || restSpec.isClientParameter(entry.getKey())) {_                queryStringParams.put(entry.getKey(), entry.getValue())__                apiRequiredParameters.remove(entry.getKey())__            } else {_                throw new IllegalArgumentException(_                        "path/param [" + entry.getKey() + "] not supported by [" + restApi.getName() + "] " + "api")__            }_        }__        if (false == apiRequiredPathParts.isEmpty()) {_            throw new IllegalArgumentException(_                    "missing required path part: " + apiRequiredPathParts + " by [" + restApi.getName() + "] api")__        }_        if (false == apiRequiredParameters.isEmpty()) {_            throw new IllegalArgumentException(_                    "missing required parameter: " + apiRequiredParameters + " by [" + restApi.getName() + "] api")__        }__        List<String> supportedMethods = restApi.getSupportedMethods(pathParts.keySet())__        String requestMethod__        if (entity != null) {_            if (false == restApi.isBodySupported()) {_                throw new IllegalArgumentException("body is not supported by [" + restApi.getName() + "] api")__            }_            String contentType = entity.getContentType().getValue()__            _            if (sendBodyAsSourceParam(supportedMethods, contentType, entity.getContentLength())) {_                logger.debug("sending the request body as source param with GET method")__                queryStringParams.put("source", EntityUtils.toString(entity))__                queryStringParams.put("source_content_type", contentType)__                requestMethod = HttpGet.METHOD_NAME__                entity = null__            } else {_                requestMethod = RandomizedTest.randomFrom(supportedMethods)__            }_        } else {_            if (restApi.isBodyRequired()) {_                throw new IllegalArgumentException("body is required by [" + restApi.getName() + "] api")__            }_            requestMethod = RandomizedTest.randomFrom(supportedMethods)__        }__        _        ClientYamlSuiteRestPath restPath = RandomizedTest.randomFrom(restApi.getFinalPaths(pathParts))__        _        _        _        String requestPath__        if (restPath.getPathParts().length == 0) {_            requestPath = "/"__        } else {_            StringBuilder finalPath = new StringBuilder()__            for (String pathPart : restPath.getPathParts()) {_                try {_                    finalPath.append('/')__                    _                    URI uri = new URI(null, null, null, -1, "/" + pathPart, null, null)__                    _                    finalPath.append(uri.getRawPath().substring(1).replaceAll("/", "%2F"))__                } catch (URISyntaxException e) {_                    throw new RuntimeException("unable to build uri", e)__                }_            }_            requestPath = finalPath.toString()__        }__        Header[] requestHeaders = new Header[headers.size()]__        int index = 0__        for (Map.Entry<String, String> header : headers.entrySet()) {_            logger.debug("Adding header {} with value {}", header.getKey(), header.getValue())__            requestHeaders[index++] = new BasicHeader(header.getKey(), header.getValue())__        }__        logger.debug("calling api [{}]", apiName)__        try {_            Response response = restClient.performRequest(requestMethod, requestPath, queryStringParams, entity, requestHeaders)__            return new ClientYamlTestResponse(response)__        } catch(ResponseException e) {_            throw new ClientYamlTestResponseException(e)__        }_    };calls,an,api,with,the,provided,parameters,and,body;public,client,yaml,test,response,call,api,string,api,name,map,string,string,params,http,entity,entity,map,string,string,headers,throws,ioexception,client,yaml,suite,rest,api,rest,api,rest,api,api,name,map,string,string,path,parts,new,hash,map,map,string,string,query,string,params,new,hash,map,set,string,api,required,path,parts,rest,api,get,path,parts,entry,set,stream,filter,entry,get,value,map,entry,get,key,collect,collectors,to,set,set,string,api,required,parameters,rest,api,get,params,entry,set,stream,filter,entry,get,value,map,entry,get,key,collect,collectors,to,set,for,map,entry,string,string,entry,params,entry,set,if,rest,api,get,path,parts,contains,key,entry,get,key,path,parts,put,entry,get,key,entry,get,value,api,required,path,parts,remove,entry,get,key,else,if,rest,api,get,params,contains,key,entry,get,key,rest,spec,is,global,parameter,entry,get,key,rest,spec,is,client,parameter,entry,get,key,query,string,params,put,entry,get,key,entry,get,value,api,required,parameters,remove,entry,get,key,else,throw,new,illegal,argument,exception,path,param,entry,get,key,not,supported,by,rest,api,get,name,api,if,false,api,required,path,parts,is,empty,throw,new,illegal,argument,exception,missing,required,path,part,api,required,path,parts,by,rest,api,get,name,api,if,false,api,required,parameters,is,empty,throw,new,illegal,argument,exception,missing,required,parameter,api,required,parameters,by,rest,api,get,name,api,list,string,supported,methods,rest,api,get,supported,methods,path,parts,key,set,string,request,method,if,entity,null,if,false,rest,api,is,body,supported,throw,new,illegal,argument,exception,body,is,not,supported,by,rest,api,get,name,api,string,content,type,entity,get,content,type,get,value,if,send,body,as,source,param,supported,methods,content,type,entity,get,content,length,logger,debug,sending,the,request,body,as,source,param,with,get,method,query,string,params,put,source,entity,utils,to,string,entity,query,string,params,put,content,type,request,method,http,get,entity,null,else,request,method,randomized,test,random,from,supported,methods,else,if,rest,api,is,body,required,throw,new,illegal,argument,exception,body,is,required,by,rest,api,get,name,api,request,method,randomized,test,random,from,supported,methods,client,yaml,suite,rest,path,rest,path,randomized,test,random,from,rest,api,get,final,paths,path,parts,string,request,path,if,rest,path,get,path,parts,length,0,request,path,else,string,builder,final,path,new,string,builder,for,string,path,part,rest,path,get,path,parts,try,final,path,append,uri,uri,new,uri,null,null,null,1,path,part,null,null,final,path,append,uri,get,raw,path,substring,1,replace,all,2f,catch,urisyntax,exception,e,throw,new,runtime,exception,unable,to,build,uri,e,request,path,final,path,to,string,header,request,headers,new,header,headers,size,int,index,0,for,map,entry,string,string,header,headers,entry,set,logger,debug,adding,header,with,value,header,get,key,header,get,value,request,headers,index,new,basic,header,header,get,key,header,get,value,logger,debug,calling,api,api,name,try,response,response,rest,client,perform,request,request,method,request,path,query,string,params,entity,request,headers,return,new,client,yaml,test,response,response,catch,response,exception,e,throw,new,client,yaml,test,response,exception,e
