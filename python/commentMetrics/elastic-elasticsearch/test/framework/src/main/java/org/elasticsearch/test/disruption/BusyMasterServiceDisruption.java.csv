commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Override public void startDisrupting() {     disruptedNode = cluster.getMasterName().     final String disruptionNodeCopy = disruptedNode.     if (disruptionNodeCopy == null) {         return.     }     ClusterService clusterService = cluster.getInstance(ClusterService.class, disruptionNodeCopy).     if (clusterService == null) {         return.     }     logger.info("making master service busy on node [{}] at priority [{}]", disruptionNodeCopy, priority).     active.set(true).     submitTask(clusterService). }
false;public;1;7;;@Override public ClusterState execute(ClusterState currentState) {     if (active.get()) {         submitTask(clusterService).     }     return currentState. }
false;public;2;4;;@Override public void onFailure(String source, Exception e) {     logger.error("unexpected error during disruption", e). }
false;private;1;19;;private void submitTask(ClusterService clusterService) {     clusterService.getMasterService().submitStateUpdateTask("service_disruption_block", new ClusterStateUpdateTask(priority) {          @Override         public ClusterState execute(ClusterState currentState) {             if (active.get()) {                 submitTask(clusterService).             }             return currentState.         }          @Override         public void onFailure(String source, Exception e) {             logger.error("unexpected error during disruption", e).         }     }). }
false;public;0;4;;@Override public void stopDisrupting() {     active.set(false). }
false;public;1;4;;@Override public void removeAndEnsureHealthy(InternalTestCluster cluster) {     removeFromCluster(cluster). }
false;public;0;4;;@Override public TimeValue expectedTimeToHeal() {     return TimeValue.timeValueMinutes(0). }
