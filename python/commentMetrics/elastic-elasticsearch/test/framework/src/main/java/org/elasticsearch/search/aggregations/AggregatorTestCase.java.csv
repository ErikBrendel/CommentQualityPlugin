# id;timestamp;commentText;codeText;commentWords;codeWords
AggregatorTestCase -> protected QueryShardContext queryShardContextMock(MapperService mapperService, MappedFieldType[] fieldTypes,             CircuitBreakerService circuitBreakerService);1524684173;sub-tests that need a more complex mock can overwrite this;protected QueryShardContext queryShardContextMock(MapperService mapperService, MappedFieldType[] fieldTypes,_            CircuitBreakerService circuitBreakerService) {_        QueryShardContext queryShardContext = mock(QueryShardContext.class)__        when(queryShardContext.getMapperService()).thenReturn(mapperService)__        for (MappedFieldType fieldType : fieldTypes) {_            when(queryShardContext.fieldMapper(fieldType.name())).thenReturn(fieldType)__            when(queryShardContext.getForField(fieldType)).then(invocation -> fieldType.fielddataBuilder(mapperService.getIndexSettings()_                .getIndex().getName())_                .build(mapperService.getIndexSettings(), fieldType, new IndexFieldDataCache.None(), circuitBreakerService, mapperService))__        }_        NestedScope nestedScope = new NestedScope()__        when(queryShardContext.isFilter()).thenCallRealMethod()__        Mockito.doCallRealMethod().when(queryShardContext).setIsFilter(Matchers.anyBoolean())__        when(queryShardContext.nestedScope()).thenReturn(nestedScope)__        return queryShardContext__    };sub,tests,that,need,a,more,complex,mock,can,overwrite,this;protected,query,shard,context,query,shard,context,mock,mapper,service,mapper,service,mapped,field,type,field,types,circuit,breaker,service,circuit,breaker,service,query,shard,context,query,shard,context,mock,query,shard,context,class,when,query,shard,context,get,mapper,service,then,return,mapper,service,for,mapped,field,type,field,type,field,types,when,query,shard,context,field,mapper,field,type,name,then,return,field,type,when,query,shard,context,get,for,field,field,type,then,invocation,field,type,fielddata,builder,mapper,service,get,index,settings,get,index,get,name,build,mapper,service,get,index,settings,field,type,new,index,field,data,cache,none,circuit,breaker,service,mapper,service,nested,scope,nested,scope,new,nested,scope,when,query,shard,context,is,filter,then,call,real,method,mockito,do,call,real,method,when,query,shard,context,set,is,filter,matchers,any,boolean,when,query,shard,context,nested,scope,then,return,nested,scope,return,query,shard,context
AggregatorTestCase -> protected QueryShardContext queryShardContextMock(MapperService mapperService, MappedFieldType[] fieldTypes,             CircuitBreakerService circuitBreakerService);1525334055;sub-tests that need a more complex mock can overwrite this;protected QueryShardContext queryShardContextMock(MapperService mapperService, MappedFieldType[] fieldTypes,_            CircuitBreakerService circuitBreakerService) {_        QueryShardContext queryShardContext = mock(QueryShardContext.class)__        when(queryShardContext.getMapperService()).thenReturn(mapperService)__        for (MappedFieldType fieldType : fieldTypes) {_            when(queryShardContext.fieldMapper(fieldType.name())).thenReturn(fieldType)__            when(queryShardContext.getForField(fieldType)).then(invocation -> fieldType.fielddataBuilder(mapperService.getIndexSettings()_                .getIndex().getName())_                .build(mapperService.getIndexSettings(), fieldType, new IndexFieldDataCache.None(), circuitBreakerService, mapperService))__        }_        NestedScope nestedScope = new NestedScope()__        when(queryShardContext.isFilter()).thenCallRealMethod()__        Mockito.doCallRealMethod().when(queryShardContext).setIsFilter(Matchers.anyBoolean())__        when(queryShardContext.nestedScope()).thenReturn(nestedScope)__        return queryShardContext__    };sub,tests,that,need,a,more,complex,mock,can,overwrite,this;protected,query,shard,context,query,shard,context,mock,mapper,service,mapper,service,mapped,field,type,field,types,circuit,breaker,service,circuit,breaker,service,query,shard,context,query,shard,context,mock,query,shard,context,class,when,query,shard,context,get,mapper,service,then,return,mapper,service,for,mapped,field,type,field,type,field,types,when,query,shard,context,field,mapper,field,type,name,then,return,field,type,when,query,shard,context,get,for,field,field,type,then,invocation,field,type,fielddata,builder,mapper,service,get,index,settings,get,index,get,name,build,mapper,service,get,index,settings,field,type,new,index,field,data,cache,none,circuit,breaker,service,mapper,service,nested,scope,nested,scope,new,nested,scope,when,query,shard,context,is,filter,then,call,real,method,mockito,do,call,real,method,when,query,shard,context,set,is,filter,matchers,any,boolean,when,query,shard,context,nested,scope,then,return,nested,scope,return,query,shard,context
AggregatorTestCase -> protected QueryShardContext queryShardContextMock(MapperService mapperService, MappedFieldType[] fieldTypes,             CircuitBreakerService circuitBreakerService);1526510804;sub-tests that need a more complex mock can overwrite this;protected QueryShardContext queryShardContextMock(MapperService mapperService, MappedFieldType[] fieldTypes,_            CircuitBreakerService circuitBreakerService) {_        QueryShardContext queryShardContext = mock(QueryShardContext.class)__        when(queryShardContext.getMapperService()).thenReturn(mapperService)__        for (MappedFieldType fieldType : fieldTypes) {_            when(queryShardContext.fieldMapper(fieldType.name())).thenReturn(fieldType)__            when(queryShardContext.getForField(fieldType)).then(invocation -> fieldType.fielddataBuilder(mapperService.getIndexSettings()_                .getIndex().getName())_                .build(mapperService.getIndexSettings(), fieldType, new IndexFieldDataCache.None(), circuitBreakerService, mapperService))__        }_        NestedScope nestedScope = new NestedScope()__        when(queryShardContext.isFilter()).thenCallRealMethod()__        Mockito.doCallRealMethod().when(queryShardContext).setIsFilter(Matchers.anyBoolean())__        when(queryShardContext.nestedScope()).thenReturn(nestedScope)__        return queryShardContext__    };sub,tests,that,need,a,more,complex,mock,can,overwrite,this;protected,query,shard,context,query,shard,context,mock,mapper,service,mapper,service,mapped,field,type,field,types,circuit,breaker,service,circuit,breaker,service,query,shard,context,query,shard,context,mock,query,shard,context,class,when,query,shard,context,get,mapper,service,then,return,mapper,service,for,mapped,field,type,field,type,field,types,when,query,shard,context,field,mapper,field,type,name,then,return,field,type,when,query,shard,context,get,for,field,field,type,then,invocation,field,type,fielddata,builder,mapper,service,get,index,settings,get,index,get,name,build,mapper,service,get,index,settings,field,type,new,index,field,data,cache,none,circuit,breaker,service,mapper,service,nested,scope,nested,scope,new,nested,scope,when,query,shard,context,is,filter,then,call,real,method,mockito,do,call,real,method,when,query,shard,context,set,is,filter,matchers,any,boolean,when,query,shard,context,nested,scope,then,return,nested,scope,return,query,shard,context
AggregatorTestCase -> protected QueryShardContext queryShardContextMock(MapperService mapperService, MappedFieldType[] fieldTypes,             CircuitBreakerService circuitBreakerService);1528762805;sub-tests that need a more complex mock can overwrite this;protected QueryShardContext queryShardContextMock(MapperService mapperService, MappedFieldType[] fieldTypes,_            CircuitBreakerService circuitBreakerService) {_        QueryShardContext queryShardContext = mock(QueryShardContext.class)__        when(queryShardContext.getMapperService()).thenReturn(mapperService)__        for (MappedFieldType fieldType : fieldTypes) {_            when(queryShardContext.fieldMapper(fieldType.name())).thenReturn(fieldType)__            when(queryShardContext.getForField(fieldType)).then(invocation -> fieldType.fielddataBuilder(mapperService.getIndexSettings()_                .getIndex().getName())_                .build(mapperService.getIndexSettings(), fieldType, new IndexFieldDataCache.None(), circuitBreakerService, mapperService))__        }_        NestedScope nestedScope = new NestedScope()__        when(queryShardContext.isFilter()).thenCallRealMethod()__        Mockito.doCallRealMethod().when(queryShardContext).setIsFilter(Matchers.anyBoolean())__        when(queryShardContext.nestedScope()).thenReturn(nestedScope)__        return queryShardContext__    };sub,tests,that,need,a,more,complex,mock,can,overwrite,this;protected,query,shard,context,query,shard,context,mock,mapper,service,mapper,service,mapped,field,type,field,types,circuit,breaker,service,circuit,breaker,service,query,shard,context,query,shard,context,mock,query,shard,context,class,when,query,shard,context,get,mapper,service,then,return,mapper,service,for,mapped,field,type,field,type,field,types,when,query,shard,context,field,mapper,field,type,name,then,return,field,type,when,query,shard,context,get,for,field,field,type,then,invocation,field,type,fielddata,builder,mapper,service,get,index,settings,get,index,get,name,build,mapper,service,get,index,settings,field,type,new,index,field,data,cache,none,circuit,breaker,service,mapper,service,nested,scope,nested,scope,new,nested,scope,when,query,shard,context,is,filter,then,call,real,method,mockito,do,call,real,method,when,query,shard,context,set,is,filter,matchers,any,boolean,when,query,shard,context,nested,scope,then,return,nested,scope,return,query,shard,context
AggregatorTestCase -> protected QueryShardContext queryShardContextMock(MapperService mapperService, MappedFieldType[] fieldTypes,             CircuitBreakerService circuitBreakerService);1531729807;sub-tests that need a more complex mock can overwrite this;protected QueryShardContext queryShardContextMock(MapperService mapperService, MappedFieldType[] fieldTypes,_            CircuitBreakerService circuitBreakerService) {_        QueryShardContext queryShardContext = mock(QueryShardContext.class)__        when(queryShardContext.getMapperService()).thenReturn(mapperService)__        for (MappedFieldType fieldType : fieldTypes) {_            when(queryShardContext.fieldMapper(fieldType.name())).thenReturn(fieldType)__            when(queryShardContext.getForField(fieldType)).then(invocation -> fieldType.fielddataBuilder(mapperService.getIndexSettings()_                .getIndex().getName())_                .build(mapperService.getIndexSettings(), fieldType, new IndexFieldDataCache.None(), circuitBreakerService, mapperService))__        }_        NestedScope nestedScope = new NestedScope()__        when(queryShardContext.isFilter()).thenCallRealMethod()__        Mockito.doCallRealMethod().when(queryShardContext).setIsFilter(Matchers.anyBoolean())__        when(queryShardContext.nestedScope()).thenReturn(nestedScope)__        return queryShardContext__    };sub,tests,that,need,a,more,complex,mock,can,overwrite,this;protected,query,shard,context,query,shard,context,mock,mapper,service,mapper,service,mapped,field,type,field,types,circuit,breaker,service,circuit,breaker,service,query,shard,context,query,shard,context,mock,query,shard,context,class,when,query,shard,context,get,mapper,service,then,return,mapper,service,for,mapped,field,type,field,type,field,types,when,query,shard,context,field,mapper,field,type,name,then,return,field,type,when,query,shard,context,get,for,field,field,type,then,invocation,field,type,fielddata,builder,mapper,service,get,index,settings,get,index,get,name,build,mapper,service,get,index,settings,field,type,new,index,field,data,cache,none,circuit,breaker,service,mapper,service,nested,scope,nested,scope,new,nested,scope,when,query,shard,context,is,filter,then,call,real,method,mockito,do,call,real,method,when,query,shard,context,set,is,filter,matchers,any,boolean,when,query,shard,context,nested,scope,then,return,nested,scope,return,query,shard,context
AggregatorTestCase -> protected static IndexSearcher newIndexSearcher(IndexReader indexReader);1524684173;Added to randomly run with more assertions on the index searcher level,_like {@link org.apache.lucene.util.LuceneTestCase#newSearcher(IndexReader)}, which can't be used because it also_wraps in the IndexSearcher's IndexReader with other implementations that we can't handle. (e.g. ParallelCompositeReader);protected static IndexSearcher newIndexSearcher(IndexReader indexReader) {_        if (randomBoolean()) {_            return new AssertingIndexSearcher(random(), indexReader)__        } else {_            return new IndexSearcher(indexReader)__        }_    };added,to,randomly,run,with,more,assertions,on,the,index,searcher,level,like,link,org,apache,lucene,util,lucene,test,case,new,searcher,index,reader,which,can,t,be,used,because,it,also,wraps,in,the,index,searcher,s,index,reader,with,other,implementations,that,we,can,t,handle,e,g,parallel,composite,reader;protected,static,index,searcher,new,index,searcher,index,reader,index,reader,if,random,boolean,return,new,asserting,index,searcher,random,index,reader,else,return,new,index,searcher,index,reader
AggregatorTestCase -> protected static IndexSearcher newIndexSearcher(IndexReader indexReader);1525334055;Added to randomly run with more assertions on the index searcher level,_like {@link org.apache.lucene.util.LuceneTestCase#newSearcher(IndexReader)}, which can't be used because it also_wraps in the IndexSearcher's IndexReader with other implementations that we can't handle. (e.g. ParallelCompositeReader);protected static IndexSearcher newIndexSearcher(IndexReader indexReader) {_        if (randomBoolean()) {_            return new AssertingIndexSearcher(random(), indexReader)__        } else {_            return new IndexSearcher(indexReader)__        }_    };added,to,randomly,run,with,more,assertions,on,the,index,searcher,level,like,link,org,apache,lucene,util,lucene,test,case,new,searcher,index,reader,which,can,t,be,used,because,it,also,wraps,in,the,index,searcher,s,index,reader,with,other,implementations,that,we,can,t,handle,e,g,parallel,composite,reader;protected,static,index,searcher,new,index,searcher,index,reader,index,reader,if,random,boolean,return,new,asserting,index,searcher,random,index,reader,else,return,new,index,searcher,index,reader
AggregatorTestCase -> protected static IndexSearcher newIndexSearcher(IndexReader indexReader);1526510804;Added to randomly run with more assertions on the index searcher level,_like {@link org.apache.lucene.util.LuceneTestCase#newSearcher(IndexReader)}, which can't be used because it also_wraps in the IndexSearcher's IndexReader with other implementations that we can't handle. (e.g. ParallelCompositeReader);protected static IndexSearcher newIndexSearcher(IndexReader indexReader) {_        if (randomBoolean()) {_            return new AssertingIndexSearcher(random(), indexReader)__        } else {_            return new IndexSearcher(indexReader)__        }_    };added,to,randomly,run,with,more,assertions,on,the,index,searcher,level,like,link,org,apache,lucene,util,lucene,test,case,new,searcher,index,reader,which,can,t,be,used,because,it,also,wraps,in,the,index,searcher,s,index,reader,with,other,implementations,that,we,can,t,handle,e,g,parallel,composite,reader;protected,static,index,searcher,new,index,searcher,index,reader,index,reader,if,random,boolean,return,new,asserting,index,searcher,random,index,reader,else,return,new,index,searcher,index,reader
AggregatorTestCase -> protected static IndexSearcher newIndexSearcher(IndexReader indexReader);1528762805;Added to randomly run with more assertions on the index searcher level,_like {@link org.apache.lucene.util.LuceneTestCase#newSearcher(IndexReader)}, which can't be used because it also_wraps in the IndexSearcher's IndexReader with other implementations that we can't handle. (e.g. ParallelCompositeReader);protected static IndexSearcher newIndexSearcher(IndexReader indexReader) {_        if (randomBoolean()) {_            return new AssertingIndexSearcher(random(), indexReader)__        } else {_            return new IndexSearcher(indexReader)__        }_    };added,to,randomly,run,with,more,assertions,on,the,index,searcher,level,like,link,org,apache,lucene,util,lucene,test,case,new,searcher,index,reader,which,can,t,be,used,because,it,also,wraps,in,the,index,searcher,s,index,reader,with,other,implementations,that,we,can,t,handle,e,g,parallel,composite,reader;protected,static,index,searcher,new,index,searcher,index,reader,index,reader,if,random,boolean,return,new,asserting,index,searcher,random,index,reader,else,return,new,index,searcher,index,reader
AggregatorTestCase -> protected static IndexSearcher newIndexSearcher(IndexReader indexReader);1531729807;Added to randomly run with more assertions on the index searcher level,_like {@link org.apache.lucene.util.LuceneTestCase#newSearcher(IndexReader)}, which can't be used because it also_wraps in the IndexSearcher's IndexReader with other implementations that we can't handle. (e.g. ParallelCompositeReader);protected static IndexSearcher newIndexSearcher(IndexReader indexReader) {_        if (randomBoolean()) {_            return new AssertingIndexSearcher(random(), indexReader)__        } else {_            return new IndexSearcher(indexReader)__        }_    };added,to,randomly,run,with,more,assertions,on,the,index,searcher,level,like,link,org,apache,lucene,util,lucene,test,case,new,searcher,index,reader,which,can,t,be,used,because,it,also,wraps,in,the,index,searcher,s,index,reader,with,other,implementations,that,we,can,t,handle,e,g,parallel,composite,reader;protected,static,index,searcher,new,index,searcher,index,reader,index,reader,if,random,boolean,return,new,asserting,index,searcher,random,index,reader,else,return,new,index,searcher,index,reader
AggregatorTestCase -> protected static IndexSearcher newIndexSearcher(IndexReader indexReader);1531937412;Added to randomly run with more assertions on the index searcher level,_like {@link org.apache.lucene.util.LuceneTestCase#newSearcher(IndexReader)}, which can't be used because it also_wraps in the IndexSearcher's IndexReader with other implementations that we can't handle. (e.g. ParallelCompositeReader);protected static IndexSearcher newIndexSearcher(IndexReader indexReader) {_        if (randomBoolean()) {_            return new AssertingIndexSearcher(random(), indexReader)__        } else {_            return new IndexSearcher(indexReader)__        }_    };added,to,randomly,run,with,more,assertions,on,the,index,searcher,level,like,link,org,apache,lucene,util,lucene,test,case,new,searcher,index,reader,which,can,t,be,used,because,it,also,wraps,in,the,index,searcher,s,index,reader,with,other,implementations,that,we,can,t,handle,e,g,parallel,composite,reader;protected,static,index,searcher,new,index,searcher,index,reader,index,reader,if,random,boolean,return,new,asserting,index,searcher,random,index,reader,else,return,new,index,searcher,index,reader
AggregatorTestCase -> protected static IndexSearcher newIndexSearcher(IndexReader indexReader);1536137328;Added to randomly run with more assertions on the index searcher level,_like {@link org.apache.lucene.util.LuceneTestCase#newSearcher(IndexReader)}, which can't be used because it also_wraps in the IndexSearcher's IndexReader with other implementations that we can't handle. (e.g. ParallelCompositeReader);protected static IndexSearcher newIndexSearcher(IndexReader indexReader) {_        if (randomBoolean()) {_            return new AssertingIndexSearcher(random(), indexReader)__        } else {_            return new IndexSearcher(indexReader)__        }_    };added,to,randomly,run,with,more,assertions,on,the,index,searcher,level,like,link,org,apache,lucene,util,lucene,test,case,new,searcher,index,reader,which,can,t,be,used,because,it,also,wraps,in,the,index,searcher,s,index,reader,with,other,implementations,that,we,can,t,handle,e,g,parallel,composite,reader;protected,static,index,searcher,new,index,searcher,index,reader,index,reader,if,random,boolean,return,new,asserting,index,searcher,random,index,reader,else,return,new,index,searcher,index,reader
AggregatorTestCase -> protected static IndexSearcher newIndexSearcher(IndexReader indexReader);1536314350;Added to randomly run with more assertions on the index searcher level,_like {@link org.apache.lucene.util.LuceneTestCase#newSearcher(IndexReader)}, which can't be used because it also_wraps in the IndexSearcher's IndexReader with other implementations that we can't handle. (e.g. ParallelCompositeReader);protected static IndexSearcher newIndexSearcher(IndexReader indexReader) {_        if (randomBoolean()) {_            return new AssertingIndexSearcher(random(), indexReader)__        } else {_            return new IndexSearcher(indexReader)__        }_    };added,to,randomly,run,with,more,assertions,on,the,index,searcher,level,like,link,org,apache,lucene,util,lucene,test,case,new,searcher,index,reader,which,can,t,be,used,because,it,also,wraps,in,the,index,searcher,s,index,reader,with,other,implementations,that,we,can,t,handle,e,g,parallel,composite,reader;protected,static,index,searcher,new,index,searcher,index,reader,index,reader,if,random,boolean,return,new,asserting,index,searcher,random,index,reader,else,return,new,index,searcher,index,reader
AggregatorTestCase -> protected static IndexSearcher newIndexSearcher(IndexReader indexReader);1538067637;Added to randomly run with more assertions on the index searcher level,_like {@link org.apache.lucene.util.LuceneTestCase#newSearcher(IndexReader)}, which can't be used because it also_wraps in the IndexSearcher's IndexReader with other implementations that we can't handle. (e.g. ParallelCompositeReader);protected static IndexSearcher newIndexSearcher(IndexReader indexReader) {_        if (randomBoolean()) {_            return new AssertingIndexSearcher(random(), indexReader)__        } else {_            return new IndexSearcher(indexReader)__        }_    };added,to,randomly,run,with,more,assertions,on,the,index,searcher,level,like,link,org,apache,lucene,util,lucene,test,case,new,searcher,index,reader,which,can,t,be,used,because,it,also,wraps,in,the,index,searcher,s,index,reader,with,other,implementations,that,we,can,t,handle,e,g,parallel,composite,reader;protected,static,index,searcher,new,index,searcher,index,reader,index,reader,if,random,boolean,return,new,asserting,index,searcher,random,index,reader,else,return,new,index,searcher,index,reader
AggregatorTestCase -> protected static IndexSearcher newIndexSearcher(IndexReader indexReader);1539723533;Added to randomly run with more assertions on the index searcher level,_like {@link org.apache.lucene.util.LuceneTestCase#newSearcher(IndexReader)}, which can't be used because it also_wraps in the IndexSearcher's IndexReader with other implementations that we can't handle. (e.g. ParallelCompositeReader);protected static IndexSearcher newIndexSearcher(IndexReader indexReader) {_        if (randomBoolean()) {_            return new AssertingIndexSearcher(random(), indexReader)__        } else {_            return new IndexSearcher(indexReader)__        }_    };added,to,randomly,run,with,more,assertions,on,the,index,searcher,level,like,link,org,apache,lucene,util,lucene,test,case,new,searcher,index,reader,which,can,t,be,used,because,it,also,wraps,in,the,index,searcher,s,index,reader,with,other,implementations,that,we,can,t,handle,e,g,parallel,composite,reader;protected,static,index,searcher,new,index,searcher,index,reader,index,reader,if,random,boolean,return,new,asserting,index,searcher,random,index,reader,else,return,new,index,searcher,index,reader
AggregatorTestCase -> protected static IndexSearcher newIndexSearcher(IndexReader indexReader);1541752911;Added to randomly run with more assertions on the index searcher level,_like {@link org.apache.lucene.util.LuceneTestCase#newSearcher(IndexReader)}, which can't be used because it also_wraps in the IndexSearcher's IndexReader with other implementations that we can't handle. (e.g. ParallelCompositeReader);protected static IndexSearcher newIndexSearcher(IndexReader indexReader) {_        if (randomBoolean()) {_            return new AssertingIndexSearcher(random(), indexReader)__        } else {_            return new IndexSearcher(indexReader)__        }_    };added,to,randomly,run,with,more,assertions,on,the,index,searcher,level,like,link,org,apache,lucene,util,lucene,test,case,new,searcher,index,reader,which,can,t,be,used,because,it,also,wraps,in,the,index,searcher,s,index,reader,with,other,implementations,that,we,can,t,handle,e,g,parallel,composite,reader;protected,static,index,searcher,new,index,searcher,index,reader,index,reader,if,random,boolean,return,new,asserting,index,searcher,random,index,reader,else,return,new,index,searcher,index,reader
AggregatorTestCase -> protected static IndexSearcher newIndexSearcher(IndexReader indexReader);1543834151;Added to randomly run with more assertions on the index searcher level,_like {@link org.apache.lucene.util.LuceneTestCase#newSearcher(IndexReader)}, which can't be used because it also_wraps in the IndexSearcher's IndexReader with other implementations that we can't handle. (e.g. ParallelCompositeReader);protected static IndexSearcher newIndexSearcher(IndexReader indexReader) {_        if (randomBoolean()) {_            return new AssertingIndexSearcher(random(), indexReader)__        } else {_            return new IndexSearcher(indexReader)__        }_    };added,to,randomly,run,with,more,assertions,on,the,index,searcher,level,like,link,org,apache,lucene,util,lucene,test,case,new,searcher,index,reader,which,can,t,be,used,because,it,also,wraps,in,the,index,searcher,s,index,reader,with,other,implementations,that,we,can,t,handle,e,g,parallel,composite,reader;protected,static,index,searcher,new,index,searcher,index,reader,index,reader,if,random,boolean,return,new,asserting,index,searcher,random,index,reader,else,return,new,index,searcher,index,reader
AggregatorTestCase -> protected <A extends InternalAggregation, C extends Aggregator> A searchAndReduce(IndexSearcher searcher,                                                                                       Query query,                                                                                       AggregationBuilder builder,                                                                                       int maxBucket,                                                                                       ScriptService scriptService,                                                                                       MappedFieldType... fieldTypes) throws IOException;1526510804;Divides the provided {@link IndexSearcher} in sub-searcher, one for each segment,_builds an aggregator for each sub-searcher filtered by the provided {@link Query} and_returns the reduced {@link InternalAggregation}.;protected <A extends InternalAggregation, C extends Aggregator> A searchAndReduce(IndexSearcher searcher,_                                                                                      Query query,_                                                                                      AggregationBuilder builder,_                                                                                      int maxBucket,_                                                                                      ScriptService scriptService,_                                                                                      MappedFieldType... fieldTypes) throws IOException {_        final IndexReaderContext ctx = searcher.getTopReaderContext()___        final ShardSearcher[] subSearchers__        if (ctx instanceof LeafReaderContext) {_            subSearchers = new ShardSearcher[1]__            subSearchers[0] = new ShardSearcher((LeafReaderContext) ctx, ctx)__        } else {_            final CompositeReaderContext compCTX = (CompositeReaderContext) ctx__            final int size = compCTX.leaves().size()__            subSearchers = new ShardSearcher[size]__            for(int searcherIDX=0_searcherIDX<subSearchers.length_searcherIDX++) {_                final LeafReaderContext leave = compCTX.leaves().get(searcherIDX)__                subSearchers[searcherIDX] = new ShardSearcher(leave, compCTX)__            }_        }__        List<InternalAggregation> aggs = new ArrayList<> ()__        Query rewritten = searcher.rewrite(query)__        Weight weight = searcher.createWeight(rewritten, true, 1f)__        MultiBucketConsumer bucketConsumer = new MultiBucketConsumer(maxBucket)__        C root = createAggregator(query, builder, searcher, bucketConsumer, fieldTypes)___        for (ShardSearcher subSearcher : subSearchers) {_            MultiBucketConsumer shardBucketConsumer = new MultiBucketConsumer(maxBucket)__            C a = createAggregator(query, builder, subSearcher, shardBucketConsumer, fieldTypes)__            a.preCollection()__            subSearcher.search(weight, a)__            a.postCollection()__            InternalAggregation agg = a.buildAggregation(0L)__            aggs.add(agg)__            InternalAggregationTestCase.assertMultiBucketConsumer(agg, shardBucketConsumer)__        }_        if (aggs.isEmpty()) {_            return null__        } else {_            if (randomBoolean() && aggs.size() > 1) {_                _                int toReduceSize = aggs.size()__                Collections.shuffle(aggs, random())__                int r = randomIntBetween(1, toReduceSize)__                List<InternalAggregation> toReduce = aggs.subList(0, r)__                MultiBucketConsumer reduceBucketConsumer = new MultiBucketConsumer(maxBucket)__                InternalAggregation.ReduceContext context =_                    new InternalAggregation.ReduceContext(root.context().bigArrays(), null,_                        reduceBucketConsumer, false)__                A reduced = (A) aggs.get(0).doReduce(toReduce, context)__                InternalAggregationTestCase.assertMultiBucketConsumer(reduced, reduceBucketConsumer)__                aggs = new ArrayList<>(aggs.subList(r, toReduceSize))__                aggs.add(reduced)__            }_            _            MultiBucketConsumer reduceBucketConsumer = new MultiBucketConsumer(maxBucket)__            InternalAggregation.ReduceContext context =_                new InternalAggregation.ReduceContext(root.context().bigArrays(), scriptService, reduceBucketConsumer, true)___            @SuppressWarnings("unchecked")_            A internalAgg = (A) aggs.get(0).doReduce(aggs, context)__            if (internalAgg.pipelineAggregators().size() > 0) {_                for (PipelineAggregator pipelineAggregator : internalAgg.pipelineAggregators()) {_                    internalAgg = (A) pipelineAggregator.reduce(internalAgg, context)__                }_            }_            InternalAggregationTestCase.assertMultiBucketConsumer(internalAgg, reduceBucketConsumer)__            return internalAgg__        }__    };divides,the,provided,link,index,searcher,in,sub,searcher,one,for,each,segment,builds,an,aggregator,for,each,sub,searcher,filtered,by,the,provided,link,query,and,returns,the,reduced,link,internal,aggregation;protected,a,extends,internal,aggregation,c,extends,aggregator,a,search,and,reduce,index,searcher,searcher,query,query,aggregation,builder,builder,int,max,bucket,script,service,script,service,mapped,field,type,field,types,throws,ioexception,final,index,reader,context,ctx,searcher,get,top,reader,context,final,shard,searcher,sub,searchers,if,ctx,instanceof,leaf,reader,context,sub,searchers,new,shard,searcher,1,sub,searchers,0,new,shard,searcher,leaf,reader,context,ctx,ctx,else,final,composite,reader,context,comp,ctx,composite,reader,context,ctx,final,int,size,comp,ctx,leaves,size,sub,searchers,new,shard,searcher,size,for,int,searcher,idx,0,searcher,idx,sub,searchers,length,searcher,idx,final,leaf,reader,context,leave,comp,ctx,leaves,get,searcher,idx,sub,searchers,searcher,idx,new,shard,searcher,leave,comp,ctx,list,internal,aggregation,aggs,new,array,list,query,rewritten,searcher,rewrite,query,weight,weight,searcher,create,weight,rewritten,true,1f,multi,bucket,consumer,bucket,consumer,new,multi,bucket,consumer,max,bucket,c,root,create,aggregator,query,builder,searcher,bucket,consumer,field,types,for,shard,searcher,sub,searcher,sub,searchers,multi,bucket,consumer,shard,bucket,consumer,new,multi,bucket,consumer,max,bucket,c,a,create,aggregator,query,builder,sub,searcher,shard,bucket,consumer,field,types,a,pre,collection,sub,searcher,search,weight,a,a,post,collection,internal,aggregation,agg,a,build,aggregation,0l,aggs,add,agg,internal,aggregation,test,case,assert,multi,bucket,consumer,agg,shard,bucket,consumer,if,aggs,is,empty,return,null,else,if,random,boolean,aggs,size,1,int,to,reduce,size,aggs,size,collections,shuffle,aggs,random,int,r,random,int,between,1,to,reduce,size,list,internal,aggregation,to,reduce,aggs,sub,list,0,r,multi,bucket,consumer,reduce,bucket,consumer,new,multi,bucket,consumer,max,bucket,internal,aggregation,reduce,context,context,new,internal,aggregation,reduce,context,root,context,big,arrays,null,reduce,bucket,consumer,false,a,reduced,a,aggs,get,0,do,reduce,to,reduce,context,internal,aggregation,test,case,assert,multi,bucket,consumer,reduced,reduce,bucket,consumer,aggs,new,array,list,aggs,sub,list,r,to,reduce,size,aggs,add,reduced,multi,bucket,consumer,reduce,bucket,consumer,new,multi,bucket,consumer,max,bucket,internal,aggregation,reduce,context,context,new,internal,aggregation,reduce,context,root,context,big,arrays,script,service,reduce,bucket,consumer,true,suppress,warnings,unchecked,a,internal,agg,a,aggs,get,0,do,reduce,aggs,context,if,internal,agg,pipeline,aggregators,size,0,for,pipeline,aggregator,pipeline,aggregator,internal,agg,pipeline,aggregators,internal,agg,a,pipeline,aggregator,reduce,internal,agg,context,internal,aggregation,test,case,assert,multi,bucket,consumer,internal,agg,reduce,bucket,consumer,return,internal,agg
AggregatorTestCase -> protected <A extends InternalAggregation, C extends Aggregator> A searchAndReduce(IndexSearcher searcher,                                                                                       Query query,                                                                                       AggregationBuilder builder,                                                                                       int maxBucket,                                                                                       ScriptService scriptService,                                                                                       MappedFieldType... fieldTypes) throws IOException;1528762805;Divides the provided {@link IndexSearcher} in sub-searcher, one for each segment,_builds an aggregator for each sub-searcher filtered by the provided {@link Query} and_returns the reduced {@link InternalAggregation}.;protected <A extends InternalAggregation, C extends Aggregator> A searchAndReduce(IndexSearcher searcher,_                                                                                      Query query,_                                                                                      AggregationBuilder builder,_                                                                                      int maxBucket,_                                                                                      ScriptService scriptService,_                                                                                      MappedFieldType... fieldTypes) throws IOException {_        final IndexReaderContext ctx = searcher.getTopReaderContext()___        final ShardSearcher[] subSearchers__        if (ctx instanceof LeafReaderContext) {_            subSearchers = new ShardSearcher[1]__            subSearchers[0] = new ShardSearcher((LeafReaderContext) ctx, ctx)__        } else {_            final CompositeReaderContext compCTX = (CompositeReaderContext) ctx__            final int size = compCTX.leaves().size()__            subSearchers = new ShardSearcher[size]__            for(int searcherIDX=0_searcherIDX<subSearchers.length_searcherIDX++) {_                final LeafReaderContext leave = compCTX.leaves().get(searcherIDX)__                subSearchers[searcherIDX] = new ShardSearcher(leave, compCTX)__            }_        }__        List<InternalAggregation> aggs = new ArrayList<> ()__        Query rewritten = searcher.rewrite(query)__        Weight weight = searcher.createWeight(rewritten, true, 1f)__        MultiBucketConsumer bucketConsumer = new MultiBucketConsumer(maxBucket)__        C root = createAggregator(query, builder, searcher, bucketConsumer, fieldTypes)___        for (ShardSearcher subSearcher : subSearchers) {_            MultiBucketConsumer shardBucketConsumer = new MultiBucketConsumer(maxBucket)__            C a = createAggregator(query, builder, subSearcher, shardBucketConsumer, fieldTypes)__            a.preCollection()__            subSearcher.search(weight, a)__            a.postCollection()__            InternalAggregation agg = a.buildAggregation(0L)__            aggs.add(agg)__            InternalAggregationTestCase.assertMultiBucketConsumer(agg, shardBucketConsumer)__        }_        if (aggs.isEmpty()) {_            return null__        } else {_            if (randomBoolean() && aggs.size() > 1) {_                _                int toReduceSize = aggs.size()__                Collections.shuffle(aggs, random())__                int r = randomIntBetween(1, toReduceSize)__                List<InternalAggregation> toReduce = aggs.subList(0, r)__                MultiBucketConsumer reduceBucketConsumer = new MultiBucketConsumer(maxBucket)__                InternalAggregation.ReduceContext context =_                    new InternalAggregation.ReduceContext(root.context().bigArrays(), null,_                        reduceBucketConsumer, false)__                A reduced = (A) aggs.get(0).doReduce(toReduce, context)__                InternalAggregationTestCase.assertMultiBucketConsumer(reduced, reduceBucketConsumer)__                aggs = new ArrayList<>(aggs.subList(r, toReduceSize))__                aggs.add(reduced)__            }_            _            MultiBucketConsumer reduceBucketConsumer = new MultiBucketConsumer(maxBucket)__            InternalAggregation.ReduceContext context =_                new InternalAggregation.ReduceContext(root.context().bigArrays(), scriptService, reduceBucketConsumer, true)___            @SuppressWarnings("unchecked")_            A internalAgg = (A) aggs.get(0).doReduce(aggs, context)__            if (internalAgg.pipelineAggregators().size() > 0) {_                for (PipelineAggregator pipelineAggregator : internalAgg.pipelineAggregators()) {_                    internalAgg = (A) pipelineAggregator.reduce(internalAgg, context)__                }_            }_            InternalAggregationTestCase.assertMultiBucketConsumer(internalAgg, reduceBucketConsumer)__            return internalAgg__        }__    };divides,the,provided,link,index,searcher,in,sub,searcher,one,for,each,segment,builds,an,aggregator,for,each,sub,searcher,filtered,by,the,provided,link,query,and,returns,the,reduced,link,internal,aggregation;protected,a,extends,internal,aggregation,c,extends,aggregator,a,search,and,reduce,index,searcher,searcher,query,query,aggregation,builder,builder,int,max,bucket,script,service,script,service,mapped,field,type,field,types,throws,ioexception,final,index,reader,context,ctx,searcher,get,top,reader,context,final,shard,searcher,sub,searchers,if,ctx,instanceof,leaf,reader,context,sub,searchers,new,shard,searcher,1,sub,searchers,0,new,shard,searcher,leaf,reader,context,ctx,ctx,else,final,composite,reader,context,comp,ctx,composite,reader,context,ctx,final,int,size,comp,ctx,leaves,size,sub,searchers,new,shard,searcher,size,for,int,searcher,idx,0,searcher,idx,sub,searchers,length,searcher,idx,final,leaf,reader,context,leave,comp,ctx,leaves,get,searcher,idx,sub,searchers,searcher,idx,new,shard,searcher,leave,comp,ctx,list,internal,aggregation,aggs,new,array,list,query,rewritten,searcher,rewrite,query,weight,weight,searcher,create,weight,rewritten,true,1f,multi,bucket,consumer,bucket,consumer,new,multi,bucket,consumer,max,bucket,c,root,create,aggregator,query,builder,searcher,bucket,consumer,field,types,for,shard,searcher,sub,searcher,sub,searchers,multi,bucket,consumer,shard,bucket,consumer,new,multi,bucket,consumer,max,bucket,c,a,create,aggregator,query,builder,sub,searcher,shard,bucket,consumer,field,types,a,pre,collection,sub,searcher,search,weight,a,a,post,collection,internal,aggregation,agg,a,build,aggregation,0l,aggs,add,agg,internal,aggregation,test,case,assert,multi,bucket,consumer,agg,shard,bucket,consumer,if,aggs,is,empty,return,null,else,if,random,boolean,aggs,size,1,int,to,reduce,size,aggs,size,collections,shuffle,aggs,random,int,r,random,int,between,1,to,reduce,size,list,internal,aggregation,to,reduce,aggs,sub,list,0,r,multi,bucket,consumer,reduce,bucket,consumer,new,multi,bucket,consumer,max,bucket,internal,aggregation,reduce,context,context,new,internal,aggregation,reduce,context,root,context,big,arrays,null,reduce,bucket,consumer,false,a,reduced,a,aggs,get,0,do,reduce,to,reduce,context,internal,aggregation,test,case,assert,multi,bucket,consumer,reduced,reduce,bucket,consumer,aggs,new,array,list,aggs,sub,list,r,to,reduce,size,aggs,add,reduced,multi,bucket,consumer,reduce,bucket,consumer,new,multi,bucket,consumer,max,bucket,internal,aggregation,reduce,context,context,new,internal,aggregation,reduce,context,root,context,big,arrays,script,service,reduce,bucket,consumer,true,suppress,warnings,unchecked,a,internal,agg,a,aggs,get,0,do,reduce,aggs,context,if,internal,agg,pipeline,aggregators,size,0,for,pipeline,aggregator,pipeline,aggregator,internal,agg,pipeline,aggregators,internal,agg,a,pipeline,aggregator,reduce,internal,agg,context,internal,aggregation,test,case,assert,multi,bucket,consumer,internal,agg,reduce,bucket,consumer,return,internal,agg
AggregatorTestCase -> protected <A extends InternalAggregation, C extends Aggregator> A searchAndReduce(IndexSearcher searcher,                                                                                       Query query,                                                                                       AggregationBuilder builder,                                                                                       int maxBucket,                                                                                       ScriptService scriptService,                                                                                       MappedFieldType... fieldTypes) throws IOException;1531729807;Divides the provided {@link IndexSearcher} in sub-searcher, one for each segment,_builds an aggregator for each sub-searcher filtered by the provided {@link Query} and_returns the reduced {@link InternalAggregation}.;protected <A extends InternalAggregation, C extends Aggregator> A searchAndReduce(IndexSearcher searcher,_                                                                                      Query query,_                                                                                      AggregationBuilder builder,_                                                                                      int maxBucket,_                                                                                      ScriptService scriptService,_                                                                                      MappedFieldType... fieldTypes) throws IOException {_        final IndexReaderContext ctx = searcher.getTopReaderContext()___        final ShardSearcher[] subSearchers__        if (ctx instanceof LeafReaderContext) {_            subSearchers = new ShardSearcher[1]__            subSearchers[0] = new ShardSearcher((LeafReaderContext) ctx, ctx)__        } else {_            final CompositeReaderContext compCTX = (CompositeReaderContext) ctx__            final int size = compCTX.leaves().size()__            subSearchers = new ShardSearcher[size]__            for(int searcherIDX=0_searcherIDX<subSearchers.length_searcherIDX++) {_                final LeafReaderContext leave = compCTX.leaves().get(searcherIDX)__                subSearchers[searcherIDX] = new ShardSearcher(leave, compCTX)__            }_        }__        List<InternalAggregation> aggs = new ArrayList<> ()__        Query rewritten = searcher.rewrite(query)__        Weight weight = searcher.createWeight(rewritten, true, 1f)__        MultiBucketConsumer bucketConsumer = new MultiBucketConsumer(maxBucket)__        C root = createAggregator(query, builder, searcher, bucketConsumer, fieldTypes)___        for (ShardSearcher subSearcher : subSearchers) {_            MultiBucketConsumer shardBucketConsumer = new MultiBucketConsumer(maxBucket)__            C a = createAggregator(query, builder, subSearcher, shardBucketConsumer, fieldTypes)__            a.preCollection()__            subSearcher.search(weight, a)__            a.postCollection()__            InternalAggregation agg = a.buildAggregation(0L)__            aggs.add(agg)__            InternalAggregationTestCase.assertMultiBucketConsumer(agg, shardBucketConsumer)__        }_        if (aggs.isEmpty()) {_            return null__        } else {_            if (randomBoolean() && aggs.size() > 1) {_                _                int toReduceSize = aggs.size()__                Collections.shuffle(aggs, random())__                int r = randomIntBetween(1, toReduceSize)__                List<InternalAggregation> toReduce = aggs.subList(0, r)__                MultiBucketConsumer reduceBucketConsumer = new MultiBucketConsumer(maxBucket)__                InternalAggregation.ReduceContext context =_                    new InternalAggregation.ReduceContext(root.context().bigArrays(), null,_                        reduceBucketConsumer, false)__                A reduced = (A) aggs.get(0).doReduce(toReduce, context)__                InternalAggregationTestCase.assertMultiBucketConsumer(reduced, reduceBucketConsumer)__                aggs = new ArrayList<>(aggs.subList(r, toReduceSize))__                aggs.add(reduced)__            }_            _            MultiBucketConsumer reduceBucketConsumer = new MultiBucketConsumer(maxBucket)__            InternalAggregation.ReduceContext context =_                new InternalAggregation.ReduceContext(root.context().bigArrays(), scriptService, reduceBucketConsumer, true)___            @SuppressWarnings("unchecked")_            A internalAgg = (A) aggs.get(0).doReduce(aggs, context)__            if (internalAgg.pipelineAggregators().size() > 0) {_                for (PipelineAggregator pipelineAggregator : internalAgg.pipelineAggregators()) {_                    internalAgg = (A) pipelineAggregator.reduce(internalAgg, context)__                }_            }_            InternalAggregationTestCase.assertMultiBucketConsumer(internalAgg, reduceBucketConsumer)__            return internalAgg__        }__    };divides,the,provided,link,index,searcher,in,sub,searcher,one,for,each,segment,builds,an,aggregator,for,each,sub,searcher,filtered,by,the,provided,link,query,and,returns,the,reduced,link,internal,aggregation;protected,a,extends,internal,aggregation,c,extends,aggregator,a,search,and,reduce,index,searcher,searcher,query,query,aggregation,builder,builder,int,max,bucket,script,service,script,service,mapped,field,type,field,types,throws,ioexception,final,index,reader,context,ctx,searcher,get,top,reader,context,final,shard,searcher,sub,searchers,if,ctx,instanceof,leaf,reader,context,sub,searchers,new,shard,searcher,1,sub,searchers,0,new,shard,searcher,leaf,reader,context,ctx,ctx,else,final,composite,reader,context,comp,ctx,composite,reader,context,ctx,final,int,size,comp,ctx,leaves,size,sub,searchers,new,shard,searcher,size,for,int,searcher,idx,0,searcher,idx,sub,searchers,length,searcher,idx,final,leaf,reader,context,leave,comp,ctx,leaves,get,searcher,idx,sub,searchers,searcher,idx,new,shard,searcher,leave,comp,ctx,list,internal,aggregation,aggs,new,array,list,query,rewritten,searcher,rewrite,query,weight,weight,searcher,create,weight,rewritten,true,1f,multi,bucket,consumer,bucket,consumer,new,multi,bucket,consumer,max,bucket,c,root,create,aggregator,query,builder,searcher,bucket,consumer,field,types,for,shard,searcher,sub,searcher,sub,searchers,multi,bucket,consumer,shard,bucket,consumer,new,multi,bucket,consumer,max,bucket,c,a,create,aggregator,query,builder,sub,searcher,shard,bucket,consumer,field,types,a,pre,collection,sub,searcher,search,weight,a,a,post,collection,internal,aggregation,agg,a,build,aggregation,0l,aggs,add,agg,internal,aggregation,test,case,assert,multi,bucket,consumer,agg,shard,bucket,consumer,if,aggs,is,empty,return,null,else,if,random,boolean,aggs,size,1,int,to,reduce,size,aggs,size,collections,shuffle,aggs,random,int,r,random,int,between,1,to,reduce,size,list,internal,aggregation,to,reduce,aggs,sub,list,0,r,multi,bucket,consumer,reduce,bucket,consumer,new,multi,bucket,consumer,max,bucket,internal,aggregation,reduce,context,context,new,internal,aggregation,reduce,context,root,context,big,arrays,null,reduce,bucket,consumer,false,a,reduced,a,aggs,get,0,do,reduce,to,reduce,context,internal,aggregation,test,case,assert,multi,bucket,consumer,reduced,reduce,bucket,consumer,aggs,new,array,list,aggs,sub,list,r,to,reduce,size,aggs,add,reduced,multi,bucket,consumer,reduce,bucket,consumer,new,multi,bucket,consumer,max,bucket,internal,aggregation,reduce,context,context,new,internal,aggregation,reduce,context,root,context,big,arrays,script,service,reduce,bucket,consumer,true,suppress,warnings,unchecked,a,internal,agg,a,aggs,get,0,do,reduce,aggs,context,if,internal,agg,pipeline,aggregators,size,0,for,pipeline,aggregator,pipeline,aggregator,internal,agg,pipeline,aggregators,internal,agg,a,pipeline,aggregator,reduce,internal,agg,context,internal,aggregation,test,case,assert,multi,bucket,consumer,internal,agg,reduce,bucket,consumer,return,internal,agg
AggregatorTestCase -> protected <A extends InternalAggregation, C extends Aggregator> A searchAndReduce(IndexSearcher searcher,                                                                                       Query query,                                                                                       AggregationBuilder builder,                                                                                       int maxBucket,                                                                                       ScriptService scriptService,                                                                                       MappedFieldType... fieldTypes) throws IOException;1531937412;Divides the provided {@link IndexSearcher} in sub-searcher, one for each segment,_builds an aggregator for each sub-searcher filtered by the provided {@link Query} and_returns the reduced {@link InternalAggregation}.;protected <A extends InternalAggregation, C extends Aggregator> A searchAndReduce(IndexSearcher searcher,_                                                                                      Query query,_                                                                                      AggregationBuilder builder,_                                                                                      int maxBucket,_                                                                                      ScriptService scriptService,_                                                                                      MappedFieldType... fieldTypes) throws IOException {_        final IndexReaderContext ctx = searcher.getTopReaderContext()___        final ShardSearcher[] subSearchers__        if (ctx instanceof LeafReaderContext) {_            subSearchers = new ShardSearcher[1]__            subSearchers[0] = new ShardSearcher((LeafReaderContext) ctx, ctx)__        } else {_            final CompositeReaderContext compCTX = (CompositeReaderContext) ctx__            final int size = compCTX.leaves().size()__            subSearchers = new ShardSearcher[size]__            for(int searcherIDX=0_searcherIDX<subSearchers.length_searcherIDX++) {_                final LeafReaderContext leave = compCTX.leaves().get(searcherIDX)__                subSearchers[searcherIDX] = new ShardSearcher(leave, compCTX)__            }_        }__        List<InternalAggregation> aggs = new ArrayList<> ()__        Query rewritten = searcher.rewrite(query)__        Weight weight = searcher.createWeight(rewritten, true, 1f)__        MultiBucketConsumer bucketConsumer = new MultiBucketConsumer(maxBucket)__        C root = createAggregator(query, builder, searcher, bucketConsumer, fieldTypes)___        for (ShardSearcher subSearcher : subSearchers) {_            MultiBucketConsumer shardBucketConsumer = new MultiBucketConsumer(maxBucket)__            C a = createAggregator(query, builder, subSearcher, shardBucketConsumer, fieldTypes)__            a.preCollection()__            subSearcher.search(weight, a)__            a.postCollection()__            InternalAggregation agg = a.buildAggregation(0L)__            aggs.add(agg)__            InternalAggregationTestCase.assertMultiBucketConsumer(agg, shardBucketConsumer)__        }_        if (aggs.isEmpty()) {_            return null__        } else {_            if (randomBoolean() && aggs.size() > 1) {_                _                int toReduceSize = aggs.size()__                Collections.shuffle(aggs, random())__                int r = randomIntBetween(1, toReduceSize)__                List<InternalAggregation> toReduce = aggs.subList(0, r)__                MultiBucketConsumer reduceBucketConsumer = new MultiBucketConsumer(maxBucket)__                InternalAggregation.ReduceContext context =_                    new InternalAggregation.ReduceContext(root.context().bigArrays(), null,_                        reduceBucketConsumer, false)__                A reduced = (A) aggs.get(0).doReduce(toReduce, context)__                InternalAggregationTestCase.assertMultiBucketConsumer(reduced, reduceBucketConsumer)__                aggs = new ArrayList<>(aggs.subList(r, toReduceSize))__                aggs.add(reduced)__            }_            _            MultiBucketConsumer reduceBucketConsumer = new MultiBucketConsumer(maxBucket)__            InternalAggregation.ReduceContext context =_                new InternalAggregation.ReduceContext(root.context().bigArrays(), scriptService, reduceBucketConsumer, true)___            @SuppressWarnings("unchecked")_            A internalAgg = (A) aggs.get(0).doReduce(aggs, context)__            if (internalAgg.pipelineAggregators().size() > 0) {_                for (PipelineAggregator pipelineAggregator : internalAgg.pipelineAggregators()) {_                    internalAgg = (A) pipelineAggregator.reduce(internalAgg, context)__                }_            }_            InternalAggregationTestCase.assertMultiBucketConsumer(internalAgg, reduceBucketConsumer)__            return internalAgg__        }__    };divides,the,provided,link,index,searcher,in,sub,searcher,one,for,each,segment,builds,an,aggregator,for,each,sub,searcher,filtered,by,the,provided,link,query,and,returns,the,reduced,link,internal,aggregation;protected,a,extends,internal,aggregation,c,extends,aggregator,a,search,and,reduce,index,searcher,searcher,query,query,aggregation,builder,builder,int,max,bucket,script,service,script,service,mapped,field,type,field,types,throws,ioexception,final,index,reader,context,ctx,searcher,get,top,reader,context,final,shard,searcher,sub,searchers,if,ctx,instanceof,leaf,reader,context,sub,searchers,new,shard,searcher,1,sub,searchers,0,new,shard,searcher,leaf,reader,context,ctx,ctx,else,final,composite,reader,context,comp,ctx,composite,reader,context,ctx,final,int,size,comp,ctx,leaves,size,sub,searchers,new,shard,searcher,size,for,int,searcher,idx,0,searcher,idx,sub,searchers,length,searcher,idx,final,leaf,reader,context,leave,comp,ctx,leaves,get,searcher,idx,sub,searchers,searcher,idx,new,shard,searcher,leave,comp,ctx,list,internal,aggregation,aggs,new,array,list,query,rewritten,searcher,rewrite,query,weight,weight,searcher,create,weight,rewritten,true,1f,multi,bucket,consumer,bucket,consumer,new,multi,bucket,consumer,max,bucket,c,root,create,aggregator,query,builder,searcher,bucket,consumer,field,types,for,shard,searcher,sub,searcher,sub,searchers,multi,bucket,consumer,shard,bucket,consumer,new,multi,bucket,consumer,max,bucket,c,a,create,aggregator,query,builder,sub,searcher,shard,bucket,consumer,field,types,a,pre,collection,sub,searcher,search,weight,a,a,post,collection,internal,aggregation,agg,a,build,aggregation,0l,aggs,add,agg,internal,aggregation,test,case,assert,multi,bucket,consumer,agg,shard,bucket,consumer,if,aggs,is,empty,return,null,else,if,random,boolean,aggs,size,1,int,to,reduce,size,aggs,size,collections,shuffle,aggs,random,int,r,random,int,between,1,to,reduce,size,list,internal,aggregation,to,reduce,aggs,sub,list,0,r,multi,bucket,consumer,reduce,bucket,consumer,new,multi,bucket,consumer,max,bucket,internal,aggregation,reduce,context,context,new,internal,aggregation,reduce,context,root,context,big,arrays,null,reduce,bucket,consumer,false,a,reduced,a,aggs,get,0,do,reduce,to,reduce,context,internal,aggregation,test,case,assert,multi,bucket,consumer,reduced,reduce,bucket,consumer,aggs,new,array,list,aggs,sub,list,r,to,reduce,size,aggs,add,reduced,multi,bucket,consumer,reduce,bucket,consumer,new,multi,bucket,consumer,max,bucket,internal,aggregation,reduce,context,context,new,internal,aggregation,reduce,context,root,context,big,arrays,script,service,reduce,bucket,consumer,true,suppress,warnings,unchecked,a,internal,agg,a,aggs,get,0,do,reduce,aggs,context,if,internal,agg,pipeline,aggregators,size,0,for,pipeline,aggregator,pipeline,aggregator,internal,agg,pipeline,aggregators,internal,agg,a,pipeline,aggregator,reduce,internal,agg,context,internal,aggregation,test,case,assert,multi,bucket,consumer,internal,agg,reduce,bucket,consumer,return,internal,agg
AggregatorTestCase -> protected <A extends InternalAggregation, C extends Aggregator> A searchAndReduce(IndexSearcher searcher,                                                                                       Query query,                                                                                       AggregationBuilder builder,                                                                                       int maxBucket,                                                                                       ScriptService scriptService,                                                                                       MappedFieldType... fieldTypes) throws IOException;1536137328;Divides the provided {@link IndexSearcher} in sub-searcher, one for each segment,_builds an aggregator for each sub-searcher filtered by the provided {@link Query} and_returns the reduced {@link InternalAggregation}.;protected <A extends InternalAggregation, C extends Aggregator> A searchAndReduce(IndexSearcher searcher,_                                                                                      Query query,_                                                                                      AggregationBuilder builder,_                                                                                      int maxBucket,_                                                                                      ScriptService scriptService,_                                                                                      MappedFieldType... fieldTypes) throws IOException {_        final IndexReaderContext ctx = searcher.getTopReaderContext()___        final ShardSearcher[] subSearchers__        if (ctx instanceof LeafReaderContext) {_            subSearchers = new ShardSearcher[1]__            subSearchers[0] = new ShardSearcher((LeafReaderContext) ctx, ctx)__        } else {_            final CompositeReaderContext compCTX = (CompositeReaderContext) ctx__            final int size = compCTX.leaves().size()__            subSearchers = new ShardSearcher[size]__            for(int searcherIDX=0_searcherIDX<subSearchers.length_searcherIDX++) {_                final LeafReaderContext leave = compCTX.leaves().get(searcherIDX)__                subSearchers[searcherIDX] = new ShardSearcher(leave, compCTX)__            }_        }__        List<InternalAggregation> aggs = new ArrayList<> ()__        Query rewritten = searcher.rewrite(query)__        Weight weight = searcher.createWeight(rewritten, true, 1f)__        MultiBucketConsumer bucketConsumer = new MultiBucketConsumer(maxBucket)__        C root = createAggregator(query, builder, searcher, bucketConsumer, fieldTypes)___        for (ShardSearcher subSearcher : subSearchers) {_            MultiBucketConsumer shardBucketConsumer = new MultiBucketConsumer(maxBucket)__            C a = createAggregator(query, builder, subSearcher, shardBucketConsumer, fieldTypes)__            a.preCollection()__            subSearcher.search(weight, a)__            a.postCollection()__            InternalAggregation agg = a.buildAggregation(0L)__            aggs.add(agg)__            InternalAggregationTestCase.assertMultiBucketConsumer(agg, shardBucketConsumer)__        }_        if (aggs.isEmpty()) {_            return null__        } else {_            if (randomBoolean() && aggs.size() > 1) {_                _                int toReduceSize = aggs.size()__                Collections.shuffle(aggs, random())__                int r = randomIntBetween(1, toReduceSize)__                List<InternalAggregation> toReduce = aggs.subList(0, r)__                MultiBucketConsumer reduceBucketConsumer = new MultiBucketConsumer(maxBucket)__                InternalAggregation.ReduceContext context =_                    new InternalAggregation.ReduceContext(root.context().bigArrays(), null,_                        reduceBucketConsumer, false)__                A reduced = (A) aggs.get(0).doReduce(toReduce, context)__                InternalAggregationTestCase.assertMultiBucketConsumer(reduced, reduceBucketConsumer)__                aggs = new ArrayList<>(aggs.subList(r, toReduceSize))__                aggs.add(reduced)__            }_            _            MultiBucketConsumer reduceBucketConsumer = new MultiBucketConsumer(maxBucket)__            InternalAggregation.ReduceContext context =_                new InternalAggregation.ReduceContext(root.context().bigArrays(), scriptService, reduceBucketConsumer, true)___            @SuppressWarnings("unchecked")_            A internalAgg = (A) aggs.get(0).doReduce(aggs, context)__            if (internalAgg.pipelineAggregators().size() > 0) {_                for (PipelineAggregator pipelineAggregator : internalAgg.pipelineAggregators()) {_                    internalAgg = (A) pipelineAggregator.reduce(internalAgg, context)__                }_            }_            InternalAggregationTestCase.assertMultiBucketConsumer(internalAgg, reduceBucketConsumer)__            return internalAgg__        }__    };divides,the,provided,link,index,searcher,in,sub,searcher,one,for,each,segment,builds,an,aggregator,for,each,sub,searcher,filtered,by,the,provided,link,query,and,returns,the,reduced,link,internal,aggregation;protected,a,extends,internal,aggregation,c,extends,aggregator,a,search,and,reduce,index,searcher,searcher,query,query,aggregation,builder,builder,int,max,bucket,script,service,script,service,mapped,field,type,field,types,throws,ioexception,final,index,reader,context,ctx,searcher,get,top,reader,context,final,shard,searcher,sub,searchers,if,ctx,instanceof,leaf,reader,context,sub,searchers,new,shard,searcher,1,sub,searchers,0,new,shard,searcher,leaf,reader,context,ctx,ctx,else,final,composite,reader,context,comp,ctx,composite,reader,context,ctx,final,int,size,comp,ctx,leaves,size,sub,searchers,new,shard,searcher,size,for,int,searcher,idx,0,searcher,idx,sub,searchers,length,searcher,idx,final,leaf,reader,context,leave,comp,ctx,leaves,get,searcher,idx,sub,searchers,searcher,idx,new,shard,searcher,leave,comp,ctx,list,internal,aggregation,aggs,new,array,list,query,rewritten,searcher,rewrite,query,weight,weight,searcher,create,weight,rewritten,true,1f,multi,bucket,consumer,bucket,consumer,new,multi,bucket,consumer,max,bucket,c,root,create,aggregator,query,builder,searcher,bucket,consumer,field,types,for,shard,searcher,sub,searcher,sub,searchers,multi,bucket,consumer,shard,bucket,consumer,new,multi,bucket,consumer,max,bucket,c,a,create,aggregator,query,builder,sub,searcher,shard,bucket,consumer,field,types,a,pre,collection,sub,searcher,search,weight,a,a,post,collection,internal,aggregation,agg,a,build,aggregation,0l,aggs,add,agg,internal,aggregation,test,case,assert,multi,bucket,consumer,agg,shard,bucket,consumer,if,aggs,is,empty,return,null,else,if,random,boolean,aggs,size,1,int,to,reduce,size,aggs,size,collections,shuffle,aggs,random,int,r,random,int,between,1,to,reduce,size,list,internal,aggregation,to,reduce,aggs,sub,list,0,r,multi,bucket,consumer,reduce,bucket,consumer,new,multi,bucket,consumer,max,bucket,internal,aggregation,reduce,context,context,new,internal,aggregation,reduce,context,root,context,big,arrays,null,reduce,bucket,consumer,false,a,reduced,a,aggs,get,0,do,reduce,to,reduce,context,internal,aggregation,test,case,assert,multi,bucket,consumer,reduced,reduce,bucket,consumer,aggs,new,array,list,aggs,sub,list,r,to,reduce,size,aggs,add,reduced,multi,bucket,consumer,reduce,bucket,consumer,new,multi,bucket,consumer,max,bucket,internal,aggregation,reduce,context,context,new,internal,aggregation,reduce,context,root,context,big,arrays,script,service,reduce,bucket,consumer,true,suppress,warnings,unchecked,a,internal,agg,a,aggs,get,0,do,reduce,aggs,context,if,internal,agg,pipeline,aggregators,size,0,for,pipeline,aggregator,pipeline,aggregator,internal,agg,pipeline,aggregators,internal,agg,a,pipeline,aggregator,reduce,internal,agg,context,internal,aggregation,test,case,assert,multi,bucket,consumer,internal,agg,reduce,bucket,consumer,return,internal,agg
AggregatorTestCase -> protected <A extends InternalAggregation, C extends Aggregator> A searchAndReduce(IndexSearcher searcher,                                                                                       Query query,                                                                                       AggregationBuilder builder,                                                                                       int maxBucket,                                                                                       ScriptService scriptService,                                                                                       MappedFieldType... fieldTypes) throws IOException;1536314350;Divides the provided {@link IndexSearcher} in sub-searcher, one for each segment,_builds an aggregator for each sub-searcher filtered by the provided {@link Query} and_returns the reduced {@link InternalAggregation}.;protected <A extends InternalAggregation, C extends Aggregator> A searchAndReduce(IndexSearcher searcher,_                                                                                      Query query,_                                                                                      AggregationBuilder builder,_                                                                                      int maxBucket,_                                                                                      ScriptService scriptService,_                                                                                      MappedFieldType... fieldTypes) throws IOException {_        final IndexReaderContext ctx = searcher.getTopReaderContext()___        final ShardSearcher[] subSearchers__        if (ctx instanceof LeafReaderContext) {_            subSearchers = new ShardSearcher[1]__            subSearchers[0] = new ShardSearcher((LeafReaderContext) ctx, ctx)__        } else {_            final CompositeReaderContext compCTX = (CompositeReaderContext) ctx__            final int size = compCTX.leaves().size()__            subSearchers = new ShardSearcher[size]__            for(int searcherIDX=0_searcherIDX<subSearchers.length_searcherIDX++) {_                final LeafReaderContext leave = compCTX.leaves().get(searcherIDX)__                subSearchers[searcherIDX] = new ShardSearcher(leave, compCTX)__            }_        }__        List<InternalAggregation> aggs = new ArrayList<> ()__        Query rewritten = searcher.rewrite(query)__        Weight weight = searcher.createWeight(rewritten, ScoreMode.COMPLETE, 1f)__        MultiBucketConsumer bucketConsumer = new MultiBucketConsumer(maxBucket)__        C root = createAggregator(query, builder, searcher, bucketConsumer, fieldTypes)___        for (ShardSearcher subSearcher : subSearchers) {_            MultiBucketConsumer shardBucketConsumer = new MultiBucketConsumer(maxBucket)__            C a = createAggregator(query, builder, subSearcher, shardBucketConsumer, fieldTypes)__            a.preCollection()__            subSearcher.search(weight, a)__            a.postCollection()__            InternalAggregation agg = a.buildAggregation(0L)__            aggs.add(agg)__            InternalAggregationTestCase.assertMultiBucketConsumer(agg, shardBucketConsumer)__        }_        if (aggs.isEmpty()) {_            return null__        } else {_            if (randomBoolean() && aggs.size() > 1) {_                _                int toReduceSize = aggs.size()__                Collections.shuffle(aggs, random())__                int r = randomIntBetween(1, toReduceSize)__                List<InternalAggregation> toReduce = aggs.subList(0, r)__                MultiBucketConsumer reduceBucketConsumer = new MultiBucketConsumer(maxBucket)__                InternalAggregation.ReduceContext context =_                    new InternalAggregation.ReduceContext(root.context().bigArrays(), null,_                        reduceBucketConsumer, false)__                A reduced = (A) aggs.get(0).doReduce(toReduce, context)__                InternalAggregationTestCase.assertMultiBucketConsumer(reduced, reduceBucketConsumer)__                aggs = new ArrayList<>(aggs.subList(r, toReduceSize))__                aggs.add(reduced)__            }_            _            MultiBucketConsumer reduceBucketConsumer = new MultiBucketConsumer(maxBucket)__            InternalAggregation.ReduceContext context =_                new InternalAggregation.ReduceContext(root.context().bigArrays(), scriptService, reduceBucketConsumer, true)___            @SuppressWarnings("unchecked")_            A internalAgg = (A) aggs.get(0).doReduce(aggs, context)__            if (internalAgg.pipelineAggregators().size() > 0) {_                for (PipelineAggregator pipelineAggregator : internalAgg.pipelineAggregators()) {_                    internalAgg = (A) pipelineAggregator.reduce(internalAgg, context)__                }_            }_            InternalAggregationTestCase.assertMultiBucketConsumer(internalAgg, reduceBucketConsumer)__            return internalAgg__        }__    };divides,the,provided,link,index,searcher,in,sub,searcher,one,for,each,segment,builds,an,aggregator,for,each,sub,searcher,filtered,by,the,provided,link,query,and,returns,the,reduced,link,internal,aggregation;protected,a,extends,internal,aggregation,c,extends,aggregator,a,search,and,reduce,index,searcher,searcher,query,query,aggregation,builder,builder,int,max,bucket,script,service,script,service,mapped,field,type,field,types,throws,ioexception,final,index,reader,context,ctx,searcher,get,top,reader,context,final,shard,searcher,sub,searchers,if,ctx,instanceof,leaf,reader,context,sub,searchers,new,shard,searcher,1,sub,searchers,0,new,shard,searcher,leaf,reader,context,ctx,ctx,else,final,composite,reader,context,comp,ctx,composite,reader,context,ctx,final,int,size,comp,ctx,leaves,size,sub,searchers,new,shard,searcher,size,for,int,searcher,idx,0,searcher,idx,sub,searchers,length,searcher,idx,final,leaf,reader,context,leave,comp,ctx,leaves,get,searcher,idx,sub,searchers,searcher,idx,new,shard,searcher,leave,comp,ctx,list,internal,aggregation,aggs,new,array,list,query,rewritten,searcher,rewrite,query,weight,weight,searcher,create,weight,rewritten,score,mode,complete,1f,multi,bucket,consumer,bucket,consumer,new,multi,bucket,consumer,max,bucket,c,root,create,aggregator,query,builder,searcher,bucket,consumer,field,types,for,shard,searcher,sub,searcher,sub,searchers,multi,bucket,consumer,shard,bucket,consumer,new,multi,bucket,consumer,max,bucket,c,a,create,aggregator,query,builder,sub,searcher,shard,bucket,consumer,field,types,a,pre,collection,sub,searcher,search,weight,a,a,post,collection,internal,aggregation,agg,a,build,aggregation,0l,aggs,add,agg,internal,aggregation,test,case,assert,multi,bucket,consumer,agg,shard,bucket,consumer,if,aggs,is,empty,return,null,else,if,random,boolean,aggs,size,1,int,to,reduce,size,aggs,size,collections,shuffle,aggs,random,int,r,random,int,between,1,to,reduce,size,list,internal,aggregation,to,reduce,aggs,sub,list,0,r,multi,bucket,consumer,reduce,bucket,consumer,new,multi,bucket,consumer,max,bucket,internal,aggregation,reduce,context,context,new,internal,aggregation,reduce,context,root,context,big,arrays,null,reduce,bucket,consumer,false,a,reduced,a,aggs,get,0,do,reduce,to,reduce,context,internal,aggregation,test,case,assert,multi,bucket,consumer,reduced,reduce,bucket,consumer,aggs,new,array,list,aggs,sub,list,r,to,reduce,size,aggs,add,reduced,multi,bucket,consumer,reduce,bucket,consumer,new,multi,bucket,consumer,max,bucket,internal,aggregation,reduce,context,context,new,internal,aggregation,reduce,context,root,context,big,arrays,script,service,reduce,bucket,consumer,true,suppress,warnings,unchecked,a,internal,agg,a,aggs,get,0,do,reduce,aggs,context,if,internal,agg,pipeline,aggregators,size,0,for,pipeline,aggregator,pipeline,aggregator,internal,agg,pipeline,aggregators,internal,agg,a,pipeline,aggregator,reduce,internal,agg,context,internal,aggregation,test,case,assert,multi,bucket,consumer,internal,agg,reduce,bucket,consumer,return,internal,agg
AggregatorTestCase -> protected <A extends InternalAggregation, C extends Aggregator> A searchAndReduce(IndexSearcher searcher,                                                                                       Query query,                                                                                       AggregationBuilder builder,                                                                                       int maxBucket,                                                                                       ScriptService scriptService,                                                                                       MappedFieldType... fieldTypes) throws IOException;1538067637;Divides the provided {@link IndexSearcher} in sub-searcher, one for each segment,_builds an aggregator for each sub-searcher filtered by the provided {@link Query} and_returns the reduced {@link InternalAggregation}.;protected <A extends InternalAggregation, C extends Aggregator> A searchAndReduce(IndexSearcher searcher,_                                                                                      Query query,_                                                                                      AggregationBuilder builder,_                                                                                      int maxBucket,_                                                                                      ScriptService scriptService,_                                                                                      MappedFieldType... fieldTypes) throws IOException {_        final IndexReaderContext ctx = searcher.getTopReaderContext()___        final ShardSearcher[] subSearchers__        if (ctx instanceof LeafReaderContext) {_            subSearchers = new ShardSearcher[1]__            subSearchers[0] = new ShardSearcher((LeafReaderContext) ctx, ctx)__        } else {_            final CompositeReaderContext compCTX = (CompositeReaderContext) ctx__            final int size = compCTX.leaves().size()__            subSearchers = new ShardSearcher[size]__            for(int searcherIDX=0_searcherIDX<subSearchers.length_searcherIDX++) {_                final LeafReaderContext leave = compCTX.leaves().get(searcherIDX)__                subSearchers[searcherIDX] = new ShardSearcher(leave, compCTX)__            }_        }__        List<InternalAggregation> aggs = new ArrayList<> ()__        Query rewritten = searcher.rewrite(query)__        Weight weight = searcher.createWeight(rewritten, ScoreMode.COMPLETE, 1f)__        MultiBucketConsumer bucketConsumer = new MultiBucketConsumer(maxBucket)__        C root = createAggregator(query, builder, searcher, bucketConsumer, fieldTypes)___        for (ShardSearcher subSearcher : subSearchers) {_            MultiBucketConsumer shardBucketConsumer = new MultiBucketConsumer(maxBucket)__            C a = createAggregator(query, builder, subSearcher, shardBucketConsumer, fieldTypes)__            a.preCollection()__            subSearcher.search(weight, a)__            a.postCollection()__            InternalAggregation agg = a.buildAggregation(0L)__            aggs.add(agg)__            InternalAggregationTestCase.assertMultiBucketConsumer(agg, shardBucketConsumer)__        }_        if (aggs.isEmpty()) {_            return null__        } else {_            if (randomBoolean() && aggs.size() > 1) {_                _                int toReduceSize = aggs.size()__                Collections.shuffle(aggs, random())__                int r = randomIntBetween(1, toReduceSize)__                List<InternalAggregation> toReduce = aggs.subList(0, r)__                MultiBucketConsumer reduceBucketConsumer = new MultiBucketConsumer(maxBucket)__                InternalAggregation.ReduceContext context =_                    new InternalAggregation.ReduceContext(root.context().bigArrays(), null,_                        reduceBucketConsumer, false)__                A reduced = (A) aggs.get(0).doReduce(toReduce, context)__                InternalAggregationTestCase.assertMultiBucketConsumer(reduced, reduceBucketConsumer)__                aggs = new ArrayList<>(aggs.subList(r, toReduceSize))__                aggs.add(reduced)__            }_            _            MultiBucketConsumer reduceBucketConsumer = new MultiBucketConsumer(maxBucket)__            InternalAggregation.ReduceContext context =_                new InternalAggregation.ReduceContext(root.context().bigArrays(), scriptService, reduceBucketConsumer, true)___            @SuppressWarnings("unchecked")_            A internalAgg = (A) aggs.get(0).doReduce(aggs, context)__            if (internalAgg.pipelineAggregators().size() > 0) {_                for (PipelineAggregator pipelineAggregator : internalAgg.pipelineAggregators()) {_                    internalAgg = (A) pipelineAggregator.reduce(internalAgg, context)__                }_            }_            InternalAggregationTestCase.assertMultiBucketConsumer(internalAgg, reduceBucketConsumer)__            return internalAgg__        }__    };divides,the,provided,link,index,searcher,in,sub,searcher,one,for,each,segment,builds,an,aggregator,for,each,sub,searcher,filtered,by,the,provided,link,query,and,returns,the,reduced,link,internal,aggregation;protected,a,extends,internal,aggregation,c,extends,aggregator,a,search,and,reduce,index,searcher,searcher,query,query,aggregation,builder,builder,int,max,bucket,script,service,script,service,mapped,field,type,field,types,throws,ioexception,final,index,reader,context,ctx,searcher,get,top,reader,context,final,shard,searcher,sub,searchers,if,ctx,instanceof,leaf,reader,context,sub,searchers,new,shard,searcher,1,sub,searchers,0,new,shard,searcher,leaf,reader,context,ctx,ctx,else,final,composite,reader,context,comp,ctx,composite,reader,context,ctx,final,int,size,comp,ctx,leaves,size,sub,searchers,new,shard,searcher,size,for,int,searcher,idx,0,searcher,idx,sub,searchers,length,searcher,idx,final,leaf,reader,context,leave,comp,ctx,leaves,get,searcher,idx,sub,searchers,searcher,idx,new,shard,searcher,leave,comp,ctx,list,internal,aggregation,aggs,new,array,list,query,rewritten,searcher,rewrite,query,weight,weight,searcher,create,weight,rewritten,score,mode,complete,1f,multi,bucket,consumer,bucket,consumer,new,multi,bucket,consumer,max,bucket,c,root,create,aggregator,query,builder,searcher,bucket,consumer,field,types,for,shard,searcher,sub,searcher,sub,searchers,multi,bucket,consumer,shard,bucket,consumer,new,multi,bucket,consumer,max,bucket,c,a,create,aggregator,query,builder,sub,searcher,shard,bucket,consumer,field,types,a,pre,collection,sub,searcher,search,weight,a,a,post,collection,internal,aggregation,agg,a,build,aggregation,0l,aggs,add,agg,internal,aggregation,test,case,assert,multi,bucket,consumer,agg,shard,bucket,consumer,if,aggs,is,empty,return,null,else,if,random,boolean,aggs,size,1,int,to,reduce,size,aggs,size,collections,shuffle,aggs,random,int,r,random,int,between,1,to,reduce,size,list,internal,aggregation,to,reduce,aggs,sub,list,0,r,multi,bucket,consumer,reduce,bucket,consumer,new,multi,bucket,consumer,max,bucket,internal,aggregation,reduce,context,context,new,internal,aggregation,reduce,context,root,context,big,arrays,null,reduce,bucket,consumer,false,a,reduced,a,aggs,get,0,do,reduce,to,reduce,context,internal,aggregation,test,case,assert,multi,bucket,consumer,reduced,reduce,bucket,consumer,aggs,new,array,list,aggs,sub,list,r,to,reduce,size,aggs,add,reduced,multi,bucket,consumer,reduce,bucket,consumer,new,multi,bucket,consumer,max,bucket,internal,aggregation,reduce,context,context,new,internal,aggregation,reduce,context,root,context,big,arrays,script,service,reduce,bucket,consumer,true,suppress,warnings,unchecked,a,internal,agg,a,aggs,get,0,do,reduce,aggs,context,if,internal,agg,pipeline,aggregators,size,0,for,pipeline,aggregator,pipeline,aggregator,internal,agg,pipeline,aggregators,internal,agg,a,pipeline,aggregator,reduce,internal,agg,context,internal,aggregation,test,case,assert,multi,bucket,consumer,internal,agg,reduce,bucket,consumer,return,internal,agg
AggregatorTestCase -> protected <A extends InternalAggregation, C extends Aggregator> A searchAndReduce(IndexSearcher searcher,                                                                                       Query query,                                                                                       AggregationBuilder builder,                                                                                       int maxBucket,                                                                                       ScriptService scriptService,                                                                                       MappedFieldType... fieldTypes) throws IOException;1539723533;Divides the provided {@link IndexSearcher} in sub-searcher, one for each segment,_builds an aggregator for each sub-searcher filtered by the provided {@link Query} and_returns the reduced {@link InternalAggregation}.;protected <A extends InternalAggregation, C extends Aggregator> A searchAndReduce(IndexSearcher searcher,_                                                                                      Query query,_                                                                                      AggregationBuilder builder,_                                                                                      int maxBucket,_                                                                                      ScriptService scriptService,_                                                                                      MappedFieldType... fieldTypes) throws IOException {_        final IndexReaderContext ctx = searcher.getTopReaderContext()___        final ShardSearcher[] subSearchers__        if (ctx instanceof LeafReaderContext) {_            subSearchers = new ShardSearcher[1]__            subSearchers[0] = new ShardSearcher((LeafReaderContext) ctx, ctx)__        } else {_            final CompositeReaderContext compCTX = (CompositeReaderContext) ctx__            final int size = compCTX.leaves().size()__            subSearchers = new ShardSearcher[size]__            for(int searcherIDX=0_searcherIDX<subSearchers.length_searcherIDX++) {_                final LeafReaderContext leave = compCTX.leaves().get(searcherIDX)__                subSearchers[searcherIDX] = new ShardSearcher(leave, compCTX)__            }_        }__        List<InternalAggregation> aggs = new ArrayList<> ()__        Query rewritten = searcher.rewrite(query)__        Weight weight = searcher.createWeight(rewritten, ScoreMode.COMPLETE, 1f)__        MultiBucketConsumer bucketConsumer = new MultiBucketConsumer(maxBucket)__        C root = createAggregator(query, builder, searcher, bucketConsumer, fieldTypes)___        for (ShardSearcher subSearcher : subSearchers) {_            MultiBucketConsumer shardBucketConsumer = new MultiBucketConsumer(maxBucket)__            C a = createAggregator(query, builder, subSearcher, shardBucketConsumer, fieldTypes)__            a.preCollection()__            subSearcher.search(weight, a)__            a.postCollection()__            InternalAggregation agg = a.buildAggregation(0L)__            aggs.add(agg)__            InternalAggregationTestCase.assertMultiBucketConsumer(agg, shardBucketConsumer)__        }_        if (aggs.isEmpty()) {_            return null__        } else {_            if (randomBoolean() && aggs.size() > 1) {_                _                int toReduceSize = aggs.size()__                Collections.shuffle(aggs, random())__                int r = randomIntBetween(1, toReduceSize)__                List<InternalAggregation> toReduce = aggs.subList(0, r)__                MultiBucketConsumer reduceBucketConsumer = new MultiBucketConsumer(maxBucket)__                InternalAggregation.ReduceContext context =_                    new InternalAggregation.ReduceContext(root.context().bigArrays(), null,_                        reduceBucketConsumer, false)__                A reduced = (A) aggs.get(0).doReduce(toReduce, context)__                InternalAggregationTestCase.assertMultiBucketConsumer(reduced, reduceBucketConsumer)__                aggs = new ArrayList<>(aggs.subList(r, toReduceSize))__                aggs.add(reduced)__            }_            _            MultiBucketConsumer reduceBucketConsumer = new MultiBucketConsumer(maxBucket)__            InternalAggregation.ReduceContext context =_                new InternalAggregation.ReduceContext(root.context().bigArrays(), scriptService, reduceBucketConsumer, true)___            @SuppressWarnings("unchecked")_            A internalAgg = (A) aggs.get(0).doReduce(aggs, context)__            if (internalAgg.pipelineAggregators().size() > 0) {_                for (PipelineAggregator pipelineAggregator : internalAgg.pipelineAggregators()) {_                    internalAgg = (A) pipelineAggregator.reduce(internalAgg, context)__                }_            }_            InternalAggregationTestCase.assertMultiBucketConsumer(internalAgg, reduceBucketConsumer)__            return internalAgg__        }__    };divides,the,provided,link,index,searcher,in,sub,searcher,one,for,each,segment,builds,an,aggregator,for,each,sub,searcher,filtered,by,the,provided,link,query,and,returns,the,reduced,link,internal,aggregation;protected,a,extends,internal,aggregation,c,extends,aggregator,a,search,and,reduce,index,searcher,searcher,query,query,aggregation,builder,builder,int,max,bucket,script,service,script,service,mapped,field,type,field,types,throws,ioexception,final,index,reader,context,ctx,searcher,get,top,reader,context,final,shard,searcher,sub,searchers,if,ctx,instanceof,leaf,reader,context,sub,searchers,new,shard,searcher,1,sub,searchers,0,new,shard,searcher,leaf,reader,context,ctx,ctx,else,final,composite,reader,context,comp,ctx,composite,reader,context,ctx,final,int,size,comp,ctx,leaves,size,sub,searchers,new,shard,searcher,size,for,int,searcher,idx,0,searcher,idx,sub,searchers,length,searcher,idx,final,leaf,reader,context,leave,comp,ctx,leaves,get,searcher,idx,sub,searchers,searcher,idx,new,shard,searcher,leave,comp,ctx,list,internal,aggregation,aggs,new,array,list,query,rewritten,searcher,rewrite,query,weight,weight,searcher,create,weight,rewritten,score,mode,complete,1f,multi,bucket,consumer,bucket,consumer,new,multi,bucket,consumer,max,bucket,c,root,create,aggregator,query,builder,searcher,bucket,consumer,field,types,for,shard,searcher,sub,searcher,sub,searchers,multi,bucket,consumer,shard,bucket,consumer,new,multi,bucket,consumer,max,bucket,c,a,create,aggregator,query,builder,sub,searcher,shard,bucket,consumer,field,types,a,pre,collection,sub,searcher,search,weight,a,a,post,collection,internal,aggregation,agg,a,build,aggregation,0l,aggs,add,agg,internal,aggregation,test,case,assert,multi,bucket,consumer,agg,shard,bucket,consumer,if,aggs,is,empty,return,null,else,if,random,boolean,aggs,size,1,int,to,reduce,size,aggs,size,collections,shuffle,aggs,random,int,r,random,int,between,1,to,reduce,size,list,internal,aggregation,to,reduce,aggs,sub,list,0,r,multi,bucket,consumer,reduce,bucket,consumer,new,multi,bucket,consumer,max,bucket,internal,aggregation,reduce,context,context,new,internal,aggregation,reduce,context,root,context,big,arrays,null,reduce,bucket,consumer,false,a,reduced,a,aggs,get,0,do,reduce,to,reduce,context,internal,aggregation,test,case,assert,multi,bucket,consumer,reduced,reduce,bucket,consumer,aggs,new,array,list,aggs,sub,list,r,to,reduce,size,aggs,add,reduced,multi,bucket,consumer,reduce,bucket,consumer,new,multi,bucket,consumer,max,bucket,internal,aggregation,reduce,context,context,new,internal,aggregation,reduce,context,root,context,big,arrays,script,service,reduce,bucket,consumer,true,suppress,warnings,unchecked,a,internal,agg,a,aggs,get,0,do,reduce,aggs,context,if,internal,agg,pipeline,aggregators,size,0,for,pipeline,aggregator,pipeline,aggregator,internal,agg,pipeline,aggregators,internal,agg,a,pipeline,aggregator,reduce,internal,agg,context,internal,aggregation,test,case,assert,multi,bucket,consumer,internal,agg,reduce,bucket,consumer,return,internal,agg
AggregatorTestCase -> protected <A extends InternalAggregation, C extends Aggregator> A searchAndReduce(IndexSearcher searcher,                                                                                       Query query,                                                                                       AggregationBuilder builder,                                                                                       int maxBucket,                                                                                       ScriptService scriptService,                                                                                       MappedFieldType... fieldTypes) throws IOException;1541752911;Divides the provided {@link IndexSearcher} in sub-searcher, one for each segment,_builds an aggregator for each sub-searcher filtered by the provided {@link Query} and_returns the reduced {@link InternalAggregation}.;protected <A extends InternalAggregation, C extends Aggregator> A searchAndReduce(IndexSearcher searcher,_                                                                                      Query query,_                                                                                      AggregationBuilder builder,_                                                                                      int maxBucket,_                                                                                      ScriptService scriptService,_                                                                                      MappedFieldType... fieldTypes) throws IOException {_        final IndexReaderContext ctx = searcher.getTopReaderContext()___        final ShardSearcher[] subSearchers__        if (ctx instanceof LeafReaderContext) {_            subSearchers = new ShardSearcher[1]__            subSearchers[0] = new ShardSearcher((LeafReaderContext) ctx, ctx)__        } else {_            final CompositeReaderContext compCTX = (CompositeReaderContext) ctx__            final int size = compCTX.leaves().size()__            subSearchers = new ShardSearcher[size]__            for(int searcherIDX=0_searcherIDX<subSearchers.length_searcherIDX++) {_                final LeafReaderContext leave = compCTX.leaves().get(searcherIDX)__                subSearchers[searcherIDX] = new ShardSearcher(leave, compCTX)__            }_        }__        List<InternalAggregation> aggs = new ArrayList<> ()__        Query rewritten = searcher.rewrite(query)__        Weight weight = searcher.createWeight(rewritten, ScoreMode.COMPLETE, 1f)__        MultiBucketConsumer bucketConsumer = new MultiBucketConsumer(maxBucket)__        C root = createAggregator(query, builder, searcher, bucketConsumer, fieldTypes)___        for (ShardSearcher subSearcher : subSearchers) {_            MultiBucketConsumer shardBucketConsumer = new MultiBucketConsumer(maxBucket)__            C a = createAggregator(query, builder, subSearcher, shardBucketConsumer, fieldTypes)__            a.preCollection()__            subSearcher.search(weight, a)__            a.postCollection()__            InternalAggregation agg = a.buildAggregation(0L)__            aggs.add(agg)__            InternalAggregationTestCase.assertMultiBucketConsumer(agg, shardBucketConsumer)__        }_        if (aggs.isEmpty()) {_            return null__        } else {_            if (randomBoolean() && aggs.size() > 1) {_                _                int toReduceSize = aggs.size()__                Collections.shuffle(aggs, random())__                int r = randomIntBetween(1, toReduceSize)__                List<InternalAggregation> toReduce = aggs.subList(0, r)__                MultiBucketConsumer reduceBucketConsumer = new MultiBucketConsumer(maxBucket)__                InternalAggregation.ReduceContext context =_                    new InternalAggregation.ReduceContext(root.context().bigArrays(), null,_                        reduceBucketConsumer, false)__                A reduced = (A) aggs.get(0).doReduce(toReduce, context)__                InternalAggregationTestCase.assertMultiBucketConsumer(reduced, reduceBucketConsumer)__                aggs = new ArrayList<>(aggs.subList(r, toReduceSize))__                aggs.add(reduced)__            }_            _            MultiBucketConsumer reduceBucketConsumer = new MultiBucketConsumer(maxBucket)__            InternalAggregation.ReduceContext context =_                new InternalAggregation.ReduceContext(root.context().bigArrays(), scriptService, reduceBucketConsumer, true)___            @SuppressWarnings("unchecked")_            A internalAgg = (A) aggs.get(0).doReduce(aggs, context)__            if (internalAgg.pipelineAggregators().size() > 0) {_                for (PipelineAggregator pipelineAggregator : internalAgg.pipelineAggregators()) {_                    internalAgg = (A) pipelineAggregator.reduce(internalAgg, context)__                }_            }_            InternalAggregationTestCase.assertMultiBucketConsumer(internalAgg, reduceBucketConsumer)__            return internalAgg__        }__    };divides,the,provided,link,index,searcher,in,sub,searcher,one,for,each,segment,builds,an,aggregator,for,each,sub,searcher,filtered,by,the,provided,link,query,and,returns,the,reduced,link,internal,aggregation;protected,a,extends,internal,aggregation,c,extends,aggregator,a,search,and,reduce,index,searcher,searcher,query,query,aggregation,builder,builder,int,max,bucket,script,service,script,service,mapped,field,type,field,types,throws,ioexception,final,index,reader,context,ctx,searcher,get,top,reader,context,final,shard,searcher,sub,searchers,if,ctx,instanceof,leaf,reader,context,sub,searchers,new,shard,searcher,1,sub,searchers,0,new,shard,searcher,leaf,reader,context,ctx,ctx,else,final,composite,reader,context,comp,ctx,composite,reader,context,ctx,final,int,size,comp,ctx,leaves,size,sub,searchers,new,shard,searcher,size,for,int,searcher,idx,0,searcher,idx,sub,searchers,length,searcher,idx,final,leaf,reader,context,leave,comp,ctx,leaves,get,searcher,idx,sub,searchers,searcher,idx,new,shard,searcher,leave,comp,ctx,list,internal,aggregation,aggs,new,array,list,query,rewritten,searcher,rewrite,query,weight,weight,searcher,create,weight,rewritten,score,mode,complete,1f,multi,bucket,consumer,bucket,consumer,new,multi,bucket,consumer,max,bucket,c,root,create,aggregator,query,builder,searcher,bucket,consumer,field,types,for,shard,searcher,sub,searcher,sub,searchers,multi,bucket,consumer,shard,bucket,consumer,new,multi,bucket,consumer,max,bucket,c,a,create,aggregator,query,builder,sub,searcher,shard,bucket,consumer,field,types,a,pre,collection,sub,searcher,search,weight,a,a,post,collection,internal,aggregation,agg,a,build,aggregation,0l,aggs,add,agg,internal,aggregation,test,case,assert,multi,bucket,consumer,agg,shard,bucket,consumer,if,aggs,is,empty,return,null,else,if,random,boolean,aggs,size,1,int,to,reduce,size,aggs,size,collections,shuffle,aggs,random,int,r,random,int,between,1,to,reduce,size,list,internal,aggregation,to,reduce,aggs,sub,list,0,r,multi,bucket,consumer,reduce,bucket,consumer,new,multi,bucket,consumer,max,bucket,internal,aggregation,reduce,context,context,new,internal,aggregation,reduce,context,root,context,big,arrays,null,reduce,bucket,consumer,false,a,reduced,a,aggs,get,0,do,reduce,to,reduce,context,internal,aggregation,test,case,assert,multi,bucket,consumer,reduced,reduce,bucket,consumer,aggs,new,array,list,aggs,sub,list,r,to,reduce,size,aggs,add,reduced,multi,bucket,consumer,reduce,bucket,consumer,new,multi,bucket,consumer,max,bucket,internal,aggregation,reduce,context,context,new,internal,aggregation,reduce,context,root,context,big,arrays,script,service,reduce,bucket,consumer,true,suppress,warnings,unchecked,a,internal,agg,a,aggs,get,0,do,reduce,aggs,context,if,internal,agg,pipeline,aggregators,size,0,for,pipeline,aggregator,pipeline,aggregator,internal,agg,pipeline,aggregators,internal,agg,a,pipeline,aggregator,reduce,internal,agg,context,internal,aggregation,test,case,assert,multi,bucket,consumer,internal,agg,reduce,bucket,consumer,return,internal,agg
AggregatorTestCase -> protected <A extends InternalAggregation, C extends Aggregator> A searchAndReduce(IndexSearcher searcher,                                                                                       Query query,                                                                                       AggregationBuilder builder,                                                                                       int maxBucket,                                                                                       ScriptService scriptService,                                                                                       MappedFieldType... fieldTypes) throws IOException;1543834151;Divides the provided {@link IndexSearcher} in sub-searcher, one for each segment,_builds an aggregator for each sub-searcher filtered by the provided {@link Query} and_returns the reduced {@link InternalAggregation}.;protected <A extends InternalAggregation, C extends Aggregator> A searchAndReduce(IndexSearcher searcher,_                                                                                      Query query,_                                                                                      AggregationBuilder builder,_                                                                                      int maxBucket,_                                                                                      ScriptService scriptService,_                                                                                      MappedFieldType... fieldTypes) throws IOException {_        final IndexReaderContext ctx = searcher.getTopReaderContext()___        final ShardSearcher[] subSearchers__        if (ctx instanceof LeafReaderContext) {_            subSearchers = new ShardSearcher[1]__            subSearchers[0] = new ShardSearcher((LeafReaderContext) ctx, ctx)__        } else {_            final CompositeReaderContext compCTX = (CompositeReaderContext) ctx__            final int size = compCTX.leaves().size()__            subSearchers = new ShardSearcher[size]__            for(int searcherIDX=0_searcherIDX<subSearchers.length_searcherIDX++) {_                final LeafReaderContext leave = compCTX.leaves().get(searcherIDX)__                subSearchers[searcherIDX] = new ShardSearcher(leave, compCTX)__            }_        }__        List<InternalAggregation> aggs = new ArrayList<> ()__        Query rewritten = searcher.rewrite(query)__        Weight weight = searcher.createWeight(rewritten, ScoreMode.COMPLETE, 1f)__        MultiBucketConsumer bucketConsumer = new MultiBucketConsumer(maxBucket)__        C root = createAggregator(query, builder, searcher, bucketConsumer, fieldTypes)___        for (ShardSearcher subSearcher : subSearchers) {_            MultiBucketConsumer shardBucketConsumer = new MultiBucketConsumer(maxBucket)__            C a = createAggregator(query, builder, subSearcher, shardBucketConsumer, fieldTypes)__            a.preCollection()__            subSearcher.search(weight, a)__            a.postCollection()__            InternalAggregation agg = a.buildAggregation(0L)__            aggs.add(agg)__            InternalAggregationTestCase.assertMultiBucketConsumer(agg, shardBucketConsumer)__        }_        if (aggs.isEmpty()) {_            return null__        } else {_            if (randomBoolean() && aggs.size() > 1) {_                _                int toReduceSize = aggs.size()__                Collections.shuffle(aggs, random())__                int r = randomIntBetween(1, toReduceSize)__                List<InternalAggregation> toReduce = aggs.subList(0, r)__                MultiBucketConsumer reduceBucketConsumer = new MultiBucketConsumer(maxBucket)__                InternalAggregation.ReduceContext context =_                    new InternalAggregation.ReduceContext(root.context().bigArrays(), null,_                        reduceBucketConsumer, false)__                A reduced = (A) aggs.get(0).doReduce(toReduce, context)__                InternalAggregationTestCase.assertMultiBucketConsumer(reduced, reduceBucketConsumer)__                aggs = new ArrayList<>(aggs.subList(r, toReduceSize))__                aggs.add(reduced)__            }_            _            MultiBucketConsumer reduceBucketConsumer = new MultiBucketConsumer(maxBucket)__            InternalAggregation.ReduceContext context =_                new InternalAggregation.ReduceContext(root.context().bigArrays(), scriptService, reduceBucketConsumer, true)___            @SuppressWarnings("unchecked")_            A internalAgg = (A) aggs.get(0).doReduce(aggs, context)__            if (internalAgg.pipelineAggregators().size() > 0) {_                for (PipelineAggregator pipelineAggregator : internalAgg.pipelineAggregators()) {_                    internalAgg = (A) pipelineAggregator.reduce(internalAgg, context)__                }_            }_            InternalAggregationTestCase.assertMultiBucketConsumer(internalAgg, reduceBucketConsumer)__            return internalAgg__        }__    };divides,the,provided,link,index,searcher,in,sub,searcher,one,for,each,segment,builds,an,aggregator,for,each,sub,searcher,filtered,by,the,provided,link,query,and,returns,the,reduced,link,internal,aggregation;protected,a,extends,internal,aggregation,c,extends,aggregator,a,search,and,reduce,index,searcher,searcher,query,query,aggregation,builder,builder,int,max,bucket,script,service,script,service,mapped,field,type,field,types,throws,ioexception,final,index,reader,context,ctx,searcher,get,top,reader,context,final,shard,searcher,sub,searchers,if,ctx,instanceof,leaf,reader,context,sub,searchers,new,shard,searcher,1,sub,searchers,0,new,shard,searcher,leaf,reader,context,ctx,ctx,else,final,composite,reader,context,comp,ctx,composite,reader,context,ctx,final,int,size,comp,ctx,leaves,size,sub,searchers,new,shard,searcher,size,for,int,searcher,idx,0,searcher,idx,sub,searchers,length,searcher,idx,final,leaf,reader,context,leave,comp,ctx,leaves,get,searcher,idx,sub,searchers,searcher,idx,new,shard,searcher,leave,comp,ctx,list,internal,aggregation,aggs,new,array,list,query,rewritten,searcher,rewrite,query,weight,weight,searcher,create,weight,rewritten,score,mode,complete,1f,multi,bucket,consumer,bucket,consumer,new,multi,bucket,consumer,max,bucket,c,root,create,aggregator,query,builder,searcher,bucket,consumer,field,types,for,shard,searcher,sub,searcher,sub,searchers,multi,bucket,consumer,shard,bucket,consumer,new,multi,bucket,consumer,max,bucket,c,a,create,aggregator,query,builder,sub,searcher,shard,bucket,consumer,field,types,a,pre,collection,sub,searcher,search,weight,a,a,post,collection,internal,aggregation,agg,a,build,aggregation,0l,aggs,add,agg,internal,aggregation,test,case,assert,multi,bucket,consumer,agg,shard,bucket,consumer,if,aggs,is,empty,return,null,else,if,random,boolean,aggs,size,1,int,to,reduce,size,aggs,size,collections,shuffle,aggs,random,int,r,random,int,between,1,to,reduce,size,list,internal,aggregation,to,reduce,aggs,sub,list,0,r,multi,bucket,consumer,reduce,bucket,consumer,new,multi,bucket,consumer,max,bucket,internal,aggregation,reduce,context,context,new,internal,aggregation,reduce,context,root,context,big,arrays,null,reduce,bucket,consumer,false,a,reduced,a,aggs,get,0,do,reduce,to,reduce,context,internal,aggregation,test,case,assert,multi,bucket,consumer,reduced,reduce,bucket,consumer,aggs,new,array,list,aggs,sub,list,r,to,reduce,size,aggs,add,reduced,multi,bucket,consumer,reduce,bucket,consumer,new,multi,bucket,consumer,max,bucket,internal,aggregation,reduce,context,context,new,internal,aggregation,reduce,context,root,context,big,arrays,script,service,reduce,bucket,consumer,true,suppress,warnings,unchecked,a,internal,agg,a,aggs,get,0,do,reduce,aggs,context,if,internal,agg,pipeline,aggregators,size,0,for,pipeline,aggregator,pipeline,aggregator,internal,agg,pipeline,aggregators,internal,agg,a,pipeline,aggregator,reduce,internal,agg,context,internal,aggregation,test,case,assert,multi,bucket,consumer,internal,agg,reduce,bucket,consumer,return,internal,agg
AggregatorTestCase -> protected MapperService mapperServiceMock();1524684173;sub-tests that need a more complex mock can overwrite this;protected MapperService mapperServiceMock() {_        return mock(MapperService.class)__    };sub,tests,that,need,a,more,complex,mock,can,overwrite,this;protected,mapper,service,mapper,service,mock,return,mock,mapper,service,class
AggregatorTestCase -> protected MapperService mapperServiceMock();1525334055;sub-tests that need a more complex mock can overwrite this;protected MapperService mapperServiceMock() {_        return mock(MapperService.class)__    };sub,tests,that,need,a,more,complex,mock,can,overwrite,this;protected,mapper,service,mapper,service,mock,return,mock,mapper,service,class
AggregatorTestCase -> protected MapperService mapperServiceMock();1526510804;sub-tests that need a more complex mock can overwrite this;protected MapperService mapperServiceMock() {_        return mock(MapperService.class)__    };sub,tests,that,need,a,more,complex,mock,can,overwrite,this;protected,mapper,service,mapper,service,mock,return,mock,mapper,service,class
AggregatorTestCase -> protected MapperService mapperServiceMock();1528762805;sub-tests that need a more complex mock can overwrite this;protected MapperService mapperServiceMock() {_        return mock(MapperService.class)__    };sub,tests,that,need,a,more,complex,mock,can,overwrite,this;protected,mapper,service,mapper,service,mock,return,mock,mapper,service,class
AggregatorTestCase -> protected MapperService mapperServiceMock();1531729807;sub-tests that need a more complex mock can overwrite this;protected MapperService mapperServiceMock() {_        return mock(MapperService.class)__    };sub,tests,that,need,a,more,complex,mock,can,overwrite,this;protected,mapper,service,mapper,service,mock,return,mock,mapper,service,class
AggregatorTestCase -> protected MapperService mapperServiceMock();1531937412;sub-tests that need a more complex mock can overwrite this;protected MapperService mapperServiceMock() {_        return mock(MapperService.class)__    };sub,tests,that,need,a,more,complex,mock,can,overwrite,this;protected,mapper,service,mapper,service,mock,return,mock,mapper,service,class
AggregatorTestCase -> protected MapperService mapperServiceMock();1536137328;sub-tests that need a more complex mock can overwrite this;protected MapperService mapperServiceMock() {_        return mock(MapperService.class)__    };sub,tests,that,need,a,more,complex,mock,can,overwrite,this;protected,mapper,service,mapper,service,mock,return,mock,mapper,service,class
AggregatorTestCase -> protected MapperService mapperServiceMock();1536314350;sub-tests that need a more complex mock can overwrite this;protected MapperService mapperServiceMock() {_        return mock(MapperService.class)__    };sub,tests,that,need,a,more,complex,mock,can,overwrite,this;protected,mapper,service,mapper,service,mock,return,mock,mapper,service,class
AggregatorTestCase -> protected MapperService mapperServiceMock();1538067637;sub-tests that need a more complex mock can overwrite this;protected MapperService mapperServiceMock() {_        return mock(MapperService.class)__    };sub,tests,that,need,a,more,complex,mock,can,overwrite,this;protected,mapper,service,mapper,service,mock,return,mock,mapper,service,class
AggregatorTestCase -> protected MapperService mapperServiceMock();1539723533;sub-tests that need a more complex mock can overwrite this;protected MapperService mapperServiceMock() {_        return mock(MapperService.class)__    };sub,tests,that,need,a,more,complex,mock,can,overwrite,this;protected,mapper,service,mapper,service,mock,return,mock,mapper,service,class
AggregatorTestCase -> protected MapperService mapperServiceMock();1541752911;sub-tests that need a more complex mock can overwrite this;protected MapperService mapperServiceMock() {_        return mock(MapperService.class)__    };sub,tests,that,need,a,more,complex,mock,can,overwrite,this;protected,mapper,service,mapper,service,mock,return,mock,mapper,service,class
AggregatorTestCase -> protected MapperService mapperServiceMock();1543834151;sub-tests that need a more complex mock can overwrite this;protected MapperService mapperServiceMock() {_        return mock(MapperService.class)__    };sub,tests,that,need,a,more,complex,mock,can,overwrite,this;protected,mapper,service,mapper,service,mock,return,mock,mapper,service,class
AggregatorTestCase -> protected <A extends InternalAggregation, C extends Aggregator> A searchAndReduce(IndexSearcher searcher,                                                                                       Query query,                                                                                       AggregationBuilder builder,                                                                                       int maxBucket,                                                                                       MappedFieldType... fieldTypes) throws IOException;1524684173;Divides the provided {@link IndexSearcher} in sub-searcher, one for each segment,_builds an aggregator for each sub-searcher filtered by the provided {@link Query} and_returns the reduced {@link InternalAggregation}.;protected <A extends InternalAggregation, C extends Aggregator> A searchAndReduce(IndexSearcher searcher,_                                                                                      Query query,_                                                                                      AggregationBuilder builder,_                                                                                      int maxBucket,_                                                                                      MappedFieldType... fieldTypes) throws IOException {_        final IndexReaderContext ctx = searcher.getTopReaderContext()___        final ShardSearcher[] subSearchers__        if (ctx instanceof LeafReaderContext) {_            subSearchers = new ShardSearcher[1]__            subSearchers[0] = new ShardSearcher((LeafReaderContext) ctx, ctx)__        } else {_            final CompositeReaderContext compCTX = (CompositeReaderContext) ctx__            final int size = compCTX.leaves().size()__            subSearchers = new ShardSearcher[size]__            for(int searcherIDX=0_searcherIDX<subSearchers.length_searcherIDX++) {_                final LeafReaderContext leave = compCTX.leaves().get(searcherIDX)__                subSearchers[searcherIDX] = new ShardSearcher(leave, compCTX)__            }_        }__        List<InternalAggregation> aggs = new ArrayList<> ()__        Query rewritten = searcher.rewrite(query)__        Weight weight = searcher.createWeight(rewritten, true, 1f)__        MultiBucketConsumer bucketConsumer = new MultiBucketConsumer(maxBucket)__        C root = createAggregator(query, builder, searcher, bucketConsumer, fieldTypes)___        for (ShardSearcher subSearcher : subSearchers) {_            MultiBucketConsumer shardBucketConsumer = new MultiBucketConsumer(maxBucket)__            C a = createAggregator(query, builder, subSearcher, shardBucketConsumer, fieldTypes)__            a.preCollection()__            subSearcher.search(weight, a)__            a.postCollection()__            InternalAggregation agg = a.buildAggregation(0L)__            aggs.add(agg)__            InternalAggregationTestCase.assertMultiBucketConsumer(agg, shardBucketConsumer)__        }_        if (aggs.isEmpty()) {_            return null__        } else {_            if (randomBoolean() && aggs.size() > 1) {_                _                int toReduceSize = aggs.size()__                Collections.shuffle(aggs, random())__                int r = randomIntBetween(1, toReduceSize)__                List<InternalAggregation> toReduce = aggs.subList(0, r)__                MultiBucketConsumer reduceBucketConsumer = new MultiBucketConsumer(maxBucket)__                InternalAggregation.ReduceContext context =_                    new InternalAggregation.ReduceContext(root.context().bigArrays(), null,_                        reduceBucketConsumer, false)__                A reduced = (A) aggs.get(0).doReduce(toReduce, context)__                InternalAggregationTestCase.assertMultiBucketConsumer(reduced, reduceBucketConsumer)__                aggs = new ArrayList<>(aggs.subList(r, toReduceSize))__                aggs.add(reduced)__            }_            _            MultiBucketConsumer reduceBucketConsumer = new MultiBucketConsumer(maxBucket)__            InternalAggregation.ReduceContext context =_                new InternalAggregation.ReduceContext(root.context().bigArrays(), null, reduceBucketConsumer, true)___            @SuppressWarnings("unchecked")_            A internalAgg = (A) aggs.get(0).doReduce(aggs, context)__            InternalAggregationTestCase.assertMultiBucketConsumer(internalAgg, reduceBucketConsumer)__            return internalAgg__        }__    };divides,the,provided,link,index,searcher,in,sub,searcher,one,for,each,segment,builds,an,aggregator,for,each,sub,searcher,filtered,by,the,provided,link,query,and,returns,the,reduced,link,internal,aggregation;protected,a,extends,internal,aggregation,c,extends,aggregator,a,search,and,reduce,index,searcher,searcher,query,query,aggregation,builder,builder,int,max,bucket,mapped,field,type,field,types,throws,ioexception,final,index,reader,context,ctx,searcher,get,top,reader,context,final,shard,searcher,sub,searchers,if,ctx,instanceof,leaf,reader,context,sub,searchers,new,shard,searcher,1,sub,searchers,0,new,shard,searcher,leaf,reader,context,ctx,ctx,else,final,composite,reader,context,comp,ctx,composite,reader,context,ctx,final,int,size,comp,ctx,leaves,size,sub,searchers,new,shard,searcher,size,for,int,searcher,idx,0,searcher,idx,sub,searchers,length,searcher,idx,final,leaf,reader,context,leave,comp,ctx,leaves,get,searcher,idx,sub,searchers,searcher,idx,new,shard,searcher,leave,comp,ctx,list,internal,aggregation,aggs,new,array,list,query,rewritten,searcher,rewrite,query,weight,weight,searcher,create,weight,rewritten,true,1f,multi,bucket,consumer,bucket,consumer,new,multi,bucket,consumer,max,bucket,c,root,create,aggregator,query,builder,searcher,bucket,consumer,field,types,for,shard,searcher,sub,searcher,sub,searchers,multi,bucket,consumer,shard,bucket,consumer,new,multi,bucket,consumer,max,bucket,c,a,create,aggregator,query,builder,sub,searcher,shard,bucket,consumer,field,types,a,pre,collection,sub,searcher,search,weight,a,a,post,collection,internal,aggregation,agg,a,build,aggregation,0l,aggs,add,agg,internal,aggregation,test,case,assert,multi,bucket,consumer,agg,shard,bucket,consumer,if,aggs,is,empty,return,null,else,if,random,boolean,aggs,size,1,int,to,reduce,size,aggs,size,collections,shuffle,aggs,random,int,r,random,int,between,1,to,reduce,size,list,internal,aggregation,to,reduce,aggs,sub,list,0,r,multi,bucket,consumer,reduce,bucket,consumer,new,multi,bucket,consumer,max,bucket,internal,aggregation,reduce,context,context,new,internal,aggregation,reduce,context,root,context,big,arrays,null,reduce,bucket,consumer,false,a,reduced,a,aggs,get,0,do,reduce,to,reduce,context,internal,aggregation,test,case,assert,multi,bucket,consumer,reduced,reduce,bucket,consumer,aggs,new,array,list,aggs,sub,list,r,to,reduce,size,aggs,add,reduced,multi,bucket,consumer,reduce,bucket,consumer,new,multi,bucket,consumer,max,bucket,internal,aggregation,reduce,context,context,new,internal,aggregation,reduce,context,root,context,big,arrays,null,reduce,bucket,consumer,true,suppress,warnings,unchecked,a,internal,agg,a,aggs,get,0,do,reduce,aggs,context,internal,aggregation,test,case,assert,multi,bucket,consumer,internal,agg,reduce,bucket,consumer,return,internal,agg
AggregatorTestCase -> protected <A extends InternalAggregation, C extends Aggregator> A searchAndReduce(IndexSearcher searcher,                                                                                       Query query,                                                                                       AggregationBuilder builder,                                                                                       int maxBucket,                                                                                       MappedFieldType... fieldTypes) throws IOException;1525334055;Divides the provided {@link IndexSearcher} in sub-searcher, one for each segment,_builds an aggregator for each sub-searcher filtered by the provided {@link Query} and_returns the reduced {@link InternalAggregation}.;protected <A extends InternalAggregation, C extends Aggregator> A searchAndReduce(IndexSearcher searcher,_                                                                                      Query query,_                                                                                      AggregationBuilder builder,_                                                                                      int maxBucket,_                                                                                      MappedFieldType... fieldTypes) throws IOException {_        final IndexReaderContext ctx = searcher.getTopReaderContext()___        final ShardSearcher[] subSearchers__        if (ctx instanceof LeafReaderContext) {_            subSearchers = new ShardSearcher[1]__            subSearchers[0] = new ShardSearcher((LeafReaderContext) ctx, ctx)__        } else {_            final CompositeReaderContext compCTX = (CompositeReaderContext) ctx__            final int size = compCTX.leaves().size()__            subSearchers = new ShardSearcher[size]__            for(int searcherIDX=0_searcherIDX<subSearchers.length_searcherIDX++) {_                final LeafReaderContext leave = compCTX.leaves().get(searcherIDX)__                subSearchers[searcherIDX] = new ShardSearcher(leave, compCTX)__            }_        }__        List<InternalAggregation> aggs = new ArrayList<> ()__        Query rewritten = searcher.rewrite(query)__        Weight weight = searcher.createWeight(rewritten, true, 1f)__        MultiBucketConsumer bucketConsumer = new MultiBucketConsumer(maxBucket)__        C root = createAggregator(query, builder, searcher, bucketConsumer, fieldTypes)___        for (ShardSearcher subSearcher : subSearchers) {_            MultiBucketConsumer shardBucketConsumer = new MultiBucketConsumer(maxBucket)__            C a = createAggregator(query, builder, subSearcher, shardBucketConsumer, fieldTypes)__            a.preCollection()__            subSearcher.search(weight, a)__            a.postCollection()__            InternalAggregation agg = a.buildAggregation(0L)__            aggs.add(agg)__            InternalAggregationTestCase.assertMultiBucketConsumer(agg, shardBucketConsumer)__        }_        if (aggs.isEmpty()) {_            return null__        } else {_            if (randomBoolean() && aggs.size() > 1) {_                _                int toReduceSize = aggs.size()__                Collections.shuffle(aggs, random())__                int r = randomIntBetween(1, toReduceSize)__                List<InternalAggregation> toReduce = aggs.subList(0, r)__                MultiBucketConsumer reduceBucketConsumer = new MultiBucketConsumer(maxBucket)__                InternalAggregation.ReduceContext context =_                    new InternalAggregation.ReduceContext(root.context().bigArrays(), null,_                        reduceBucketConsumer, false)__                A reduced = (A) aggs.get(0).doReduce(toReduce, context)__                InternalAggregationTestCase.assertMultiBucketConsumer(reduced, reduceBucketConsumer)__                aggs = new ArrayList<>(aggs.subList(r, toReduceSize))__                aggs.add(reduced)__            }_            _            MultiBucketConsumer reduceBucketConsumer = new MultiBucketConsumer(maxBucket)__            InternalAggregation.ReduceContext context =_                new InternalAggregation.ReduceContext(root.context().bigArrays(), null, reduceBucketConsumer, true)___            @SuppressWarnings("unchecked")_            A internalAgg = (A) aggs.get(0).doReduce(aggs, context)__            if (internalAgg.pipelineAggregators().size() > 0) {_                for (PipelineAggregator pipelineAggregator : internalAgg.pipelineAggregators()) {_                    internalAgg = (A) pipelineAggregator.reduce(internalAgg, context)__                }_            }_            InternalAggregationTestCase.assertMultiBucketConsumer(internalAgg, reduceBucketConsumer)__            return internalAgg__        }__    };divides,the,provided,link,index,searcher,in,sub,searcher,one,for,each,segment,builds,an,aggregator,for,each,sub,searcher,filtered,by,the,provided,link,query,and,returns,the,reduced,link,internal,aggregation;protected,a,extends,internal,aggregation,c,extends,aggregator,a,search,and,reduce,index,searcher,searcher,query,query,aggregation,builder,builder,int,max,bucket,mapped,field,type,field,types,throws,ioexception,final,index,reader,context,ctx,searcher,get,top,reader,context,final,shard,searcher,sub,searchers,if,ctx,instanceof,leaf,reader,context,sub,searchers,new,shard,searcher,1,sub,searchers,0,new,shard,searcher,leaf,reader,context,ctx,ctx,else,final,composite,reader,context,comp,ctx,composite,reader,context,ctx,final,int,size,comp,ctx,leaves,size,sub,searchers,new,shard,searcher,size,for,int,searcher,idx,0,searcher,idx,sub,searchers,length,searcher,idx,final,leaf,reader,context,leave,comp,ctx,leaves,get,searcher,idx,sub,searchers,searcher,idx,new,shard,searcher,leave,comp,ctx,list,internal,aggregation,aggs,new,array,list,query,rewritten,searcher,rewrite,query,weight,weight,searcher,create,weight,rewritten,true,1f,multi,bucket,consumer,bucket,consumer,new,multi,bucket,consumer,max,bucket,c,root,create,aggregator,query,builder,searcher,bucket,consumer,field,types,for,shard,searcher,sub,searcher,sub,searchers,multi,bucket,consumer,shard,bucket,consumer,new,multi,bucket,consumer,max,bucket,c,a,create,aggregator,query,builder,sub,searcher,shard,bucket,consumer,field,types,a,pre,collection,sub,searcher,search,weight,a,a,post,collection,internal,aggregation,agg,a,build,aggregation,0l,aggs,add,agg,internal,aggregation,test,case,assert,multi,bucket,consumer,agg,shard,bucket,consumer,if,aggs,is,empty,return,null,else,if,random,boolean,aggs,size,1,int,to,reduce,size,aggs,size,collections,shuffle,aggs,random,int,r,random,int,between,1,to,reduce,size,list,internal,aggregation,to,reduce,aggs,sub,list,0,r,multi,bucket,consumer,reduce,bucket,consumer,new,multi,bucket,consumer,max,bucket,internal,aggregation,reduce,context,context,new,internal,aggregation,reduce,context,root,context,big,arrays,null,reduce,bucket,consumer,false,a,reduced,a,aggs,get,0,do,reduce,to,reduce,context,internal,aggregation,test,case,assert,multi,bucket,consumer,reduced,reduce,bucket,consumer,aggs,new,array,list,aggs,sub,list,r,to,reduce,size,aggs,add,reduced,multi,bucket,consumer,reduce,bucket,consumer,new,multi,bucket,consumer,max,bucket,internal,aggregation,reduce,context,context,new,internal,aggregation,reduce,context,root,context,big,arrays,null,reduce,bucket,consumer,true,suppress,warnings,unchecked,a,internal,agg,a,aggs,get,0,do,reduce,aggs,context,if,internal,agg,pipeline,aggregators,size,0,for,pipeline,aggregator,pipeline,aggregator,internal,agg,pipeline,aggregators,internal,agg,a,pipeline,aggregator,reduce,internal,agg,context,internal,aggregation,test,case,assert,multi,bucket,consumer,internal,agg,reduce,bucket,consumer,return,internal,agg
AggregatorTestCase -> protected static IndexReader maybeWrapReaderEs(DirectoryReader reader) throws IOException;1524684173;Added to randomly run with more assertions on the index reader level,_like {@link org.apache.lucene.util.LuceneTestCase#wrapReader(IndexReader)}, which can't be used because it also_wraps in the IndexReader with other implementations that we can't handle. (e.g. ParallelCompositeReader);protected static IndexReader maybeWrapReaderEs(DirectoryReader reader) throws IOException {_        if (randomBoolean()) {_            return new AssertingDirectoryReader(reader)__        } else {_            return reader__        }_    };added,to,randomly,run,with,more,assertions,on,the,index,reader,level,like,link,org,apache,lucene,util,lucene,test,case,wrap,reader,index,reader,which,can,t,be,used,because,it,also,wraps,in,the,index,reader,with,other,implementations,that,we,can,t,handle,e,g,parallel,composite,reader;protected,static,index,reader,maybe,wrap,reader,es,directory,reader,reader,throws,ioexception,if,random,boolean,return,new,asserting,directory,reader,reader,else,return,reader
AggregatorTestCase -> protected static IndexReader maybeWrapReaderEs(DirectoryReader reader) throws IOException;1525334055;Added to randomly run with more assertions on the index reader level,_like {@link org.apache.lucene.util.LuceneTestCase#wrapReader(IndexReader)}, which can't be used because it also_wraps in the IndexReader with other implementations that we can't handle. (e.g. ParallelCompositeReader);protected static IndexReader maybeWrapReaderEs(DirectoryReader reader) throws IOException {_        if (randomBoolean()) {_            return new AssertingDirectoryReader(reader)__        } else {_            return reader__        }_    };added,to,randomly,run,with,more,assertions,on,the,index,reader,level,like,link,org,apache,lucene,util,lucene,test,case,wrap,reader,index,reader,which,can,t,be,used,because,it,also,wraps,in,the,index,reader,with,other,implementations,that,we,can,t,handle,e,g,parallel,composite,reader;protected,static,index,reader,maybe,wrap,reader,es,directory,reader,reader,throws,ioexception,if,random,boolean,return,new,asserting,directory,reader,reader,else,return,reader
AggregatorTestCase -> protected static IndexReader maybeWrapReaderEs(DirectoryReader reader) throws IOException;1526510804;Added to randomly run with more assertions on the index reader level,_like {@link org.apache.lucene.util.LuceneTestCase#wrapReader(IndexReader)}, which can't be used because it also_wraps in the IndexReader with other implementations that we can't handle. (e.g. ParallelCompositeReader);protected static IndexReader maybeWrapReaderEs(DirectoryReader reader) throws IOException {_        if (randomBoolean()) {_            return new AssertingDirectoryReader(reader)__        } else {_            return reader__        }_    };added,to,randomly,run,with,more,assertions,on,the,index,reader,level,like,link,org,apache,lucene,util,lucene,test,case,wrap,reader,index,reader,which,can,t,be,used,because,it,also,wraps,in,the,index,reader,with,other,implementations,that,we,can,t,handle,e,g,parallel,composite,reader;protected,static,index,reader,maybe,wrap,reader,es,directory,reader,reader,throws,ioexception,if,random,boolean,return,new,asserting,directory,reader,reader,else,return,reader
AggregatorTestCase -> protected static IndexReader maybeWrapReaderEs(DirectoryReader reader) throws IOException;1528762805;Added to randomly run with more assertions on the index reader level,_like {@link org.apache.lucene.util.LuceneTestCase#wrapReader(IndexReader)}, which can't be used because it also_wraps in the IndexReader with other implementations that we can't handle. (e.g. ParallelCompositeReader);protected static IndexReader maybeWrapReaderEs(DirectoryReader reader) throws IOException {_        if (randomBoolean()) {_            return new AssertingDirectoryReader(reader)__        } else {_            return reader__        }_    };added,to,randomly,run,with,more,assertions,on,the,index,reader,level,like,link,org,apache,lucene,util,lucene,test,case,wrap,reader,index,reader,which,can,t,be,used,because,it,also,wraps,in,the,index,reader,with,other,implementations,that,we,can,t,handle,e,g,parallel,composite,reader;protected,static,index,reader,maybe,wrap,reader,es,directory,reader,reader,throws,ioexception,if,random,boolean,return,new,asserting,directory,reader,reader,else,return,reader
AggregatorTestCase -> protected static IndexReader maybeWrapReaderEs(DirectoryReader reader) throws IOException;1531729807;Added to randomly run with more assertions on the index reader level,_like {@link org.apache.lucene.util.LuceneTestCase#wrapReader(IndexReader)}, which can't be used because it also_wraps in the IndexReader with other implementations that we can't handle. (e.g. ParallelCompositeReader);protected static IndexReader maybeWrapReaderEs(DirectoryReader reader) throws IOException {_        if (randomBoolean()) {_            return new AssertingDirectoryReader(reader)__        } else {_            return reader__        }_    };added,to,randomly,run,with,more,assertions,on,the,index,reader,level,like,link,org,apache,lucene,util,lucene,test,case,wrap,reader,index,reader,which,can,t,be,used,because,it,also,wraps,in,the,index,reader,with,other,implementations,that,we,can,t,handle,e,g,parallel,composite,reader;protected,static,index,reader,maybe,wrap,reader,es,directory,reader,reader,throws,ioexception,if,random,boolean,return,new,asserting,directory,reader,reader,else,return,reader
AggregatorTestCase -> protected static IndexReader maybeWrapReaderEs(DirectoryReader reader) throws IOException;1531937412;Added to randomly run with more assertions on the index reader level,_like {@link org.apache.lucene.util.LuceneTestCase#wrapReader(IndexReader)}, which can't be used because it also_wraps in the IndexReader with other implementations that we can't handle. (e.g. ParallelCompositeReader);protected static IndexReader maybeWrapReaderEs(DirectoryReader reader) throws IOException {_        if (randomBoolean()) {_            return new AssertingDirectoryReader(reader)__        } else {_            return reader__        }_    };added,to,randomly,run,with,more,assertions,on,the,index,reader,level,like,link,org,apache,lucene,util,lucene,test,case,wrap,reader,index,reader,which,can,t,be,used,because,it,also,wraps,in,the,index,reader,with,other,implementations,that,we,can,t,handle,e,g,parallel,composite,reader;protected,static,index,reader,maybe,wrap,reader,es,directory,reader,reader,throws,ioexception,if,random,boolean,return,new,asserting,directory,reader,reader,else,return,reader
AggregatorTestCase -> protected static IndexReader maybeWrapReaderEs(DirectoryReader reader) throws IOException;1536137328;Added to randomly run with more assertions on the index reader level,_like {@link org.apache.lucene.util.LuceneTestCase#wrapReader(IndexReader)}, which can't be used because it also_wraps in the IndexReader with other implementations that we can't handle. (e.g. ParallelCompositeReader);protected static IndexReader maybeWrapReaderEs(DirectoryReader reader) throws IOException {_        if (randomBoolean()) {_            return new AssertingDirectoryReader(reader)__        } else {_            return reader__        }_    };added,to,randomly,run,with,more,assertions,on,the,index,reader,level,like,link,org,apache,lucene,util,lucene,test,case,wrap,reader,index,reader,which,can,t,be,used,because,it,also,wraps,in,the,index,reader,with,other,implementations,that,we,can,t,handle,e,g,parallel,composite,reader;protected,static,index,reader,maybe,wrap,reader,es,directory,reader,reader,throws,ioexception,if,random,boolean,return,new,asserting,directory,reader,reader,else,return,reader
AggregatorTestCase -> protected static IndexReader maybeWrapReaderEs(DirectoryReader reader) throws IOException;1536314350;Added to randomly run with more assertions on the index reader level,_like {@link org.apache.lucene.util.LuceneTestCase#wrapReader(IndexReader)}, which can't be used because it also_wraps in the IndexReader with other implementations that we can't handle. (e.g. ParallelCompositeReader);protected static IndexReader maybeWrapReaderEs(DirectoryReader reader) throws IOException {_        if (randomBoolean()) {_            return new AssertingDirectoryReader(reader)__        } else {_            return reader__        }_    };added,to,randomly,run,with,more,assertions,on,the,index,reader,level,like,link,org,apache,lucene,util,lucene,test,case,wrap,reader,index,reader,which,can,t,be,used,because,it,also,wraps,in,the,index,reader,with,other,implementations,that,we,can,t,handle,e,g,parallel,composite,reader;protected,static,index,reader,maybe,wrap,reader,es,directory,reader,reader,throws,ioexception,if,random,boolean,return,new,asserting,directory,reader,reader,else,return,reader
AggregatorTestCase -> protected static IndexReader maybeWrapReaderEs(DirectoryReader reader) throws IOException;1538067637;Added to randomly run with more assertions on the index reader level,_like {@link org.apache.lucene.util.LuceneTestCase#wrapReader(IndexReader)}, which can't be used because it also_wraps in the IndexReader with other implementations that we can't handle. (e.g. ParallelCompositeReader);protected static IndexReader maybeWrapReaderEs(DirectoryReader reader) throws IOException {_        if (randomBoolean()) {_            return new AssertingDirectoryReader(reader)__        } else {_            return reader__        }_    };added,to,randomly,run,with,more,assertions,on,the,index,reader,level,like,link,org,apache,lucene,util,lucene,test,case,wrap,reader,index,reader,which,can,t,be,used,because,it,also,wraps,in,the,index,reader,with,other,implementations,that,we,can,t,handle,e,g,parallel,composite,reader;protected,static,index,reader,maybe,wrap,reader,es,directory,reader,reader,throws,ioexception,if,random,boolean,return,new,asserting,directory,reader,reader,else,return,reader
AggregatorTestCase -> protected static IndexReader maybeWrapReaderEs(DirectoryReader reader) throws IOException;1539723533;Added to randomly run with more assertions on the index reader level,_like {@link org.apache.lucene.util.LuceneTestCase#wrapReader(IndexReader)}, which can't be used because it also_wraps in the IndexReader with other implementations that we can't handle. (e.g. ParallelCompositeReader);protected static IndexReader maybeWrapReaderEs(DirectoryReader reader) throws IOException {_        if (randomBoolean()) {_            return new AssertingDirectoryReader(reader)__        } else {_            return reader__        }_    };added,to,randomly,run,with,more,assertions,on,the,index,reader,level,like,link,org,apache,lucene,util,lucene,test,case,wrap,reader,index,reader,which,can,t,be,used,because,it,also,wraps,in,the,index,reader,with,other,implementations,that,we,can,t,handle,e,g,parallel,composite,reader;protected,static,index,reader,maybe,wrap,reader,es,directory,reader,reader,throws,ioexception,if,random,boolean,return,new,asserting,directory,reader,reader,else,return,reader
AggregatorTestCase -> protected static IndexReader maybeWrapReaderEs(DirectoryReader reader) throws IOException;1541752911;Added to randomly run with more assertions on the index reader level,_like {@link org.apache.lucene.util.LuceneTestCase#wrapReader(IndexReader)}, which can't be used because it also_wraps in the IndexReader with other implementations that we can't handle. (e.g. ParallelCompositeReader);protected static IndexReader maybeWrapReaderEs(DirectoryReader reader) throws IOException {_        if (randomBoolean()) {_            return new AssertingDirectoryReader(reader)__        } else {_            return reader__        }_    };added,to,randomly,run,with,more,assertions,on,the,index,reader,level,like,link,org,apache,lucene,util,lucene,test,case,wrap,reader,index,reader,which,can,t,be,used,because,it,also,wraps,in,the,index,reader,with,other,implementations,that,we,can,t,handle,e,g,parallel,composite,reader;protected,static,index,reader,maybe,wrap,reader,es,directory,reader,reader,throws,ioexception,if,random,boolean,return,new,asserting,directory,reader,reader,else,return,reader
AggregatorTestCase -> protected static IndexReader maybeWrapReaderEs(DirectoryReader reader) throws IOException;1543834151;Added to randomly run with more assertions on the index reader level,_like {@link org.apache.lucene.util.LuceneTestCase#wrapReader(IndexReader)}, which can't be used because it also_wraps in the IndexReader with other implementations that we can't handle. (e.g. ParallelCompositeReader);protected static IndexReader maybeWrapReaderEs(DirectoryReader reader) throws IOException {_        if (randomBoolean()) {_            return new AssertingDirectoryReader(reader)__        } else {_            return reader__        }_    };added,to,randomly,run,with,more,assertions,on,the,index,reader,level,like,link,org,apache,lucene,util,lucene,test,case,wrap,reader,index,reader,which,can,t,be,used,because,it,also,wraps,in,the,index,reader,with,other,implementations,that,we,can,t,handle,e,g,parallel,composite,reader;protected,static,index,reader,maybe,wrap,reader,es,directory,reader,reader,throws,ioexception,if,random,boolean,return,new,asserting,directory,reader,reader,else,return,reader
AggregatorTestCase -> protected Map<String, MappedFieldType> getFieldAliases(MappedFieldType... fieldTypes);1531937412;Allows subclasses to provide alternate names for the provided field type, which_can be useful when testing aggregations on field aliases.;protected Map<String, MappedFieldType> getFieldAliases(MappedFieldType... fieldTypes) {_        return Collections.emptyMap()__    };allows,subclasses,to,provide,alternate,names,for,the,provided,field,type,which,can,be,useful,when,testing,aggregations,on,field,aliases;protected,map,string,mapped,field,type,get,field,aliases,mapped,field,type,field,types,return,collections,empty,map
AggregatorTestCase -> protected Map<String, MappedFieldType> getFieldAliases(MappedFieldType... fieldTypes);1536137328;Allows subclasses to provide alternate names for the provided field type, which_can be useful when testing aggregations on field aliases.;protected Map<String, MappedFieldType> getFieldAliases(MappedFieldType... fieldTypes) {_        return Collections.emptyMap()__    };allows,subclasses,to,provide,alternate,names,for,the,provided,field,type,which,can,be,useful,when,testing,aggregations,on,field,aliases;protected,map,string,mapped,field,type,get,field,aliases,mapped,field,type,field,types,return,collections,empty,map
AggregatorTestCase -> protected Map<String, MappedFieldType> getFieldAliases(MappedFieldType... fieldTypes);1536314350;Allows subclasses to provide alternate names for the provided field type, which_can be useful when testing aggregations on field aliases.;protected Map<String, MappedFieldType> getFieldAliases(MappedFieldType... fieldTypes) {_        return Collections.emptyMap()__    };allows,subclasses,to,provide,alternate,names,for,the,provided,field,type,which,can,be,useful,when,testing,aggregations,on,field,aliases;protected,map,string,mapped,field,type,get,field,aliases,mapped,field,type,field,types,return,collections,empty,map
AggregatorTestCase -> protected Map<String, MappedFieldType> getFieldAliases(MappedFieldType... fieldTypes);1538067637;Allows subclasses to provide alternate names for the provided field type, which_can be useful when testing aggregations on field aliases.;protected Map<String, MappedFieldType> getFieldAliases(MappedFieldType... fieldTypes) {_        return Collections.emptyMap()__    };allows,subclasses,to,provide,alternate,names,for,the,provided,field,type,which,can,be,useful,when,testing,aggregations,on,field,aliases;protected,map,string,mapped,field,type,get,field,aliases,mapped,field,type,field,types,return,collections,empty,map
AggregatorTestCase -> protected Map<String, MappedFieldType> getFieldAliases(MappedFieldType... fieldTypes);1539723533;Allows subclasses to provide alternate names for the provided field type, which_can be useful when testing aggregations on field aliases.;protected Map<String, MappedFieldType> getFieldAliases(MappedFieldType... fieldTypes) {_        return Collections.emptyMap()__    };allows,subclasses,to,provide,alternate,names,for,the,provided,field,type,which,can,be,useful,when,testing,aggregations,on,field,aliases;protected,map,string,mapped,field,type,get,field,aliases,mapped,field,type,field,types,return,collections,empty,map
AggregatorTestCase -> protected Map<String, MappedFieldType> getFieldAliases(MappedFieldType... fieldTypes);1541752911;Allows subclasses to provide alternate names for the provided field type, which_can be useful when testing aggregations on field aliases.;protected Map<String, MappedFieldType> getFieldAliases(MappedFieldType... fieldTypes) {_        return Collections.emptyMap()__    };allows,subclasses,to,provide,alternate,names,for,the,provided,field,type,which,can,be,useful,when,testing,aggregations,on,field,aliases;protected,map,string,mapped,field,type,get,field,aliases,mapped,field,type,field,types,return,collections,empty,map
AggregatorTestCase -> protected Map<String, MappedFieldType> getFieldAliases(MappedFieldType... fieldTypes);1543834151;Allows subclasses to provide alternate names for the provided field type, which_can be useful when testing aggregations on field aliases.;protected Map<String, MappedFieldType> getFieldAliases(MappedFieldType... fieldTypes) {_        return Collections.emptyMap()__    };allows,subclasses,to,provide,alternate,names,for,the,provided,field,type,which,can,be,useful,when,testing,aggregations,on,field,aliases;protected,map,string,mapped,field,type,get,field,aliases,mapped,field,type,field,types,return,collections,empty,map
AggregatorTestCase -> protected AggregatorFactory<?> createAggregatorFactory(Query query,                                                            AggregationBuilder aggregationBuilder,                                                            IndexSearcher indexSearcher,                                                            IndexSettings indexSettings,                                                            MultiBucketConsumer bucketConsumer,                                                            MappedFieldType... fieldTypes) throws IOException;1524684173;Create a factory for the given aggregation builder.;protected AggregatorFactory<?> createAggregatorFactory(Query query,_                                                           AggregationBuilder aggregationBuilder,_                                                           IndexSearcher indexSearcher,_                                                           IndexSettings indexSettings,_                                                           MultiBucketConsumer bucketConsumer,_                                                           MappedFieldType... fieldTypes) throws IOException {_        SearchContext searchContext = createSearchContext(indexSearcher, indexSettings)__        CircuitBreakerService circuitBreakerService = new NoneCircuitBreakerService()__        when(searchContext.aggregations())_            .thenReturn(new SearchContextAggregations(AggregatorFactories.EMPTY, bucketConsumer))__        when(searchContext.query()).thenReturn(query)__        when(searchContext.bigArrays()).thenReturn(new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), circuitBreakerService))__        _        MapperService mapperService = mapperServiceMock()__        when(mapperService.getIndexSettings()).thenReturn(indexSettings)__        when(mapperService.hasNested()).thenReturn(false)__        when(mapperService.types()).thenReturn(Collections.singleton(TYPE_NAME))__        when(searchContext.mapperService()).thenReturn(mapperService)__        IndexFieldDataService ifds = new IndexFieldDataService(indexSettings,_                new IndicesFieldDataCache(Settings.EMPTY, new IndexFieldDataCache.Listener() {_                }), circuitBreakerService, mapperService)__        when(searchContext.getForField(Mockito.any(MappedFieldType.class)))_            .thenAnswer(invocationOnMock -> ifds.getForField((MappedFieldType) invocationOnMock.getArguments()[0]))___        SearchLookup searchLookup = new SearchLookup(mapperService, ifds::getForField, new String[]{TYPE_NAME})__        when(searchContext.lookup()).thenReturn(searchLookup)___        QueryShardContext queryShardContext = queryShardContextMock(mapperService, fieldTypes, circuitBreakerService)__        when(queryShardContext.getIndexSettings()).thenReturn(indexSettings)__        when(searchContext.getQueryShardContext()).thenReturn(queryShardContext)__        for (MappedFieldType fieldType : fieldTypes) {_            when(searchContext.smartNameFieldType(fieldType.name())).thenReturn(fieldType)__        }__        return aggregationBuilder.build(searchContext, null)__    };create,a,factory,for,the,given,aggregation,builder;protected,aggregator,factory,create,aggregator,factory,query,query,aggregation,builder,aggregation,builder,index,searcher,index,searcher,index,settings,index,settings,multi,bucket,consumer,bucket,consumer,mapped,field,type,field,types,throws,ioexception,search,context,search,context,create,search,context,index,searcher,index,settings,circuit,breaker,service,circuit,breaker,service,new,none,circuit,breaker,service,when,search,context,aggregations,then,return,new,search,context,aggregations,aggregator,factories,empty,bucket,consumer,when,search,context,query,then,return,query,when,search,context,big,arrays,then,return,new,mock,big,arrays,new,mock,page,cache,recycler,settings,empty,circuit,breaker,service,mapper,service,mapper,service,mapper,service,mock,when,mapper,service,get,index,settings,then,return,index,settings,when,mapper,service,has,nested,then,return,false,when,mapper,service,types,then,return,collections,singleton,when,search,context,mapper,service,then,return,mapper,service,index,field,data,service,ifds,new,index,field,data,service,index,settings,new,indices,field,data,cache,settings,empty,new,index,field,data,cache,listener,circuit,breaker,service,mapper,service,when,search,context,get,for,field,mockito,any,mapped,field,type,class,then,answer,invocation,on,mock,ifds,get,for,field,mapped,field,type,invocation,on,mock,get,arguments,0,search,lookup,search,lookup,new,search,lookup,mapper,service,ifds,get,for,field,new,string,when,search,context,lookup,then,return,search,lookup,query,shard,context,query,shard,context,query,shard,context,mock,mapper,service,field,types,circuit,breaker,service,when,query,shard,context,get,index,settings,then,return,index,settings,when,search,context,get,query,shard,context,then,return,query,shard,context,for,mapped,field,type,field,type,field,types,when,search,context,smart,name,field,type,field,type,name,then,return,field,type,return,aggregation,builder,build,search,context,null
AggregatorTestCase -> protected AggregatorFactory<?> createAggregatorFactory(Query query,                                                            AggregationBuilder aggregationBuilder,                                                            IndexSearcher indexSearcher,                                                            IndexSettings indexSettings,                                                            MultiBucketConsumer bucketConsumer,                                                            MappedFieldType... fieldTypes) throws IOException;1525334055;Create a factory for the given aggregation builder.;protected AggregatorFactory<?> createAggregatorFactory(Query query,_                                                           AggregationBuilder aggregationBuilder,_                                                           IndexSearcher indexSearcher,_                                                           IndexSettings indexSettings,_                                                           MultiBucketConsumer bucketConsumer,_                                                           MappedFieldType... fieldTypes) throws IOException {_        SearchContext searchContext = createSearchContext(indexSearcher, indexSettings)__        CircuitBreakerService circuitBreakerService = new NoneCircuitBreakerService()__        when(searchContext.aggregations())_            .thenReturn(new SearchContextAggregations(AggregatorFactories.EMPTY, bucketConsumer))__        when(searchContext.query()).thenReturn(query)__        when(searchContext.bigArrays()).thenReturn(new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), circuitBreakerService))__        _        MapperService mapperService = mapperServiceMock()__        when(mapperService.getIndexSettings()).thenReturn(indexSettings)__        when(mapperService.hasNested()).thenReturn(false)__        DocumentMapper mapper = mock(DocumentMapper.class)__        when(mapper.type()).thenReturn(TYPE_NAME)__        when(mapperService.documentMapper()).thenReturn(mapper)__        when(searchContext.mapperService()).thenReturn(mapperService)__        IndexFieldDataService ifds = new IndexFieldDataService(indexSettings,_                new IndicesFieldDataCache(Settings.EMPTY, new IndexFieldDataCache.Listener() {_                }), circuitBreakerService, mapperService)__        when(searchContext.getForField(Mockito.any(MappedFieldType.class)))_            .thenAnswer(invocationOnMock -> ifds.getForField((MappedFieldType) invocationOnMock.getArguments()[0]))___        SearchLookup searchLookup = new SearchLookup(mapperService, ifds::getForField, new String[]{TYPE_NAME})__        when(searchContext.lookup()).thenReturn(searchLookup)___        QueryShardContext queryShardContext = queryShardContextMock(mapperService, fieldTypes, circuitBreakerService)__        when(queryShardContext.getIndexSettings()).thenReturn(indexSettings)__        when(searchContext.getQueryShardContext()).thenReturn(queryShardContext)__        for (MappedFieldType fieldType : fieldTypes) {_            when(searchContext.smartNameFieldType(fieldType.name())).thenReturn(fieldType)__        }__        return aggregationBuilder.build(searchContext, null)__    };create,a,factory,for,the,given,aggregation,builder;protected,aggregator,factory,create,aggregator,factory,query,query,aggregation,builder,aggregation,builder,index,searcher,index,searcher,index,settings,index,settings,multi,bucket,consumer,bucket,consumer,mapped,field,type,field,types,throws,ioexception,search,context,search,context,create,search,context,index,searcher,index,settings,circuit,breaker,service,circuit,breaker,service,new,none,circuit,breaker,service,when,search,context,aggregations,then,return,new,search,context,aggregations,aggregator,factories,empty,bucket,consumer,when,search,context,query,then,return,query,when,search,context,big,arrays,then,return,new,mock,big,arrays,new,mock,page,cache,recycler,settings,empty,circuit,breaker,service,mapper,service,mapper,service,mapper,service,mock,when,mapper,service,get,index,settings,then,return,index,settings,when,mapper,service,has,nested,then,return,false,document,mapper,mapper,mock,document,mapper,class,when,mapper,type,then,return,when,mapper,service,document,mapper,then,return,mapper,when,search,context,mapper,service,then,return,mapper,service,index,field,data,service,ifds,new,index,field,data,service,index,settings,new,indices,field,data,cache,settings,empty,new,index,field,data,cache,listener,circuit,breaker,service,mapper,service,when,search,context,get,for,field,mockito,any,mapped,field,type,class,then,answer,invocation,on,mock,ifds,get,for,field,mapped,field,type,invocation,on,mock,get,arguments,0,search,lookup,search,lookup,new,search,lookup,mapper,service,ifds,get,for,field,new,string,when,search,context,lookup,then,return,search,lookup,query,shard,context,query,shard,context,query,shard,context,mock,mapper,service,field,types,circuit,breaker,service,when,query,shard,context,get,index,settings,then,return,index,settings,when,search,context,get,query,shard,context,then,return,query,shard,context,for,mapped,field,type,field,type,field,types,when,search,context,smart,name,field,type,field,type,name,then,return,field,type,return,aggregation,builder,build,search,context,null
AggregatorTestCase -> protected AggregatorFactory<?> createAggregatorFactory(Query query,                                                            AggregationBuilder aggregationBuilder,                                                            IndexSearcher indexSearcher,                                                            IndexSettings indexSettings,                                                            MultiBucketConsumer bucketConsumer,                                                            MappedFieldType... fieldTypes) throws IOException;1526510804;Create a factory for the given aggregation builder.;protected AggregatorFactory<?> createAggregatorFactory(Query query,_                                                           AggregationBuilder aggregationBuilder,_                                                           IndexSearcher indexSearcher,_                                                           IndexSettings indexSettings,_                                                           MultiBucketConsumer bucketConsumer,_                                                           MappedFieldType... fieldTypes) throws IOException {_        SearchContext searchContext = createSearchContext(indexSearcher, indexSettings)__        CircuitBreakerService circuitBreakerService = new NoneCircuitBreakerService()__        when(searchContext.aggregations())_            .thenReturn(new SearchContextAggregations(AggregatorFactories.EMPTY, bucketConsumer))__        when(searchContext.query()).thenReturn(query)__        when(searchContext.bigArrays()).thenReturn(new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), circuitBreakerService))__        _        MapperService mapperService = mapperServiceMock()__        when(mapperService.getIndexSettings()).thenReturn(indexSettings)__        when(mapperService.hasNested()).thenReturn(false)__        DocumentMapper mapper = mock(DocumentMapper.class)__        when(mapper.type()).thenReturn(TYPE_NAME)__        when(mapperService.documentMapper()).thenReturn(mapper)__        when(searchContext.mapperService()).thenReturn(mapperService)__        IndexFieldDataService ifds = new IndexFieldDataService(indexSettings,_                new IndicesFieldDataCache(Settings.EMPTY, new IndexFieldDataCache.Listener() {_                }), circuitBreakerService, mapperService)__        when(searchContext.getForField(Mockito.any(MappedFieldType.class)))_            .thenAnswer(invocationOnMock -> ifds.getForField((MappedFieldType) invocationOnMock.getArguments()[0]))___        SearchLookup searchLookup = new SearchLookup(mapperService, ifds::getForField, new String[]{TYPE_NAME})__        when(searchContext.lookup()).thenReturn(searchLookup)___        QueryShardContext queryShardContext = queryShardContextMock(mapperService, fieldTypes, circuitBreakerService)__        when(queryShardContext.getIndexSettings()).thenReturn(indexSettings)__        when(searchContext.getQueryShardContext()).thenReturn(queryShardContext)__        for (MappedFieldType fieldType : fieldTypes) {_            when(searchContext.smartNameFieldType(fieldType.name())).thenReturn(fieldType)__        }__        return aggregationBuilder.build(searchContext, null)__    };create,a,factory,for,the,given,aggregation,builder;protected,aggregator,factory,create,aggregator,factory,query,query,aggregation,builder,aggregation,builder,index,searcher,index,searcher,index,settings,index,settings,multi,bucket,consumer,bucket,consumer,mapped,field,type,field,types,throws,ioexception,search,context,search,context,create,search,context,index,searcher,index,settings,circuit,breaker,service,circuit,breaker,service,new,none,circuit,breaker,service,when,search,context,aggregations,then,return,new,search,context,aggregations,aggregator,factories,empty,bucket,consumer,when,search,context,query,then,return,query,when,search,context,big,arrays,then,return,new,mock,big,arrays,new,mock,page,cache,recycler,settings,empty,circuit,breaker,service,mapper,service,mapper,service,mapper,service,mock,when,mapper,service,get,index,settings,then,return,index,settings,when,mapper,service,has,nested,then,return,false,document,mapper,mapper,mock,document,mapper,class,when,mapper,type,then,return,when,mapper,service,document,mapper,then,return,mapper,when,search,context,mapper,service,then,return,mapper,service,index,field,data,service,ifds,new,index,field,data,service,index,settings,new,indices,field,data,cache,settings,empty,new,index,field,data,cache,listener,circuit,breaker,service,mapper,service,when,search,context,get,for,field,mockito,any,mapped,field,type,class,then,answer,invocation,on,mock,ifds,get,for,field,mapped,field,type,invocation,on,mock,get,arguments,0,search,lookup,search,lookup,new,search,lookup,mapper,service,ifds,get,for,field,new,string,when,search,context,lookup,then,return,search,lookup,query,shard,context,query,shard,context,query,shard,context,mock,mapper,service,field,types,circuit,breaker,service,when,query,shard,context,get,index,settings,then,return,index,settings,when,search,context,get,query,shard,context,then,return,query,shard,context,for,mapped,field,type,field,type,field,types,when,search,context,smart,name,field,type,field,type,name,then,return,field,type,return,aggregation,builder,build,search,context,null
AggregatorTestCase -> protected AggregatorFactory<?> createAggregatorFactory(Query query,                                                            AggregationBuilder aggregationBuilder,                                                            IndexSearcher indexSearcher,                                                            IndexSettings indexSettings,                                                            MultiBucketConsumer bucketConsumer,                                                            MappedFieldType... fieldTypes) throws IOException;1528762805;Create a factory for the given aggregation builder.;protected AggregatorFactory<?> createAggregatorFactory(Query query,_                                                           AggregationBuilder aggregationBuilder,_                                                           IndexSearcher indexSearcher,_                                                           IndexSettings indexSettings,_                                                           MultiBucketConsumer bucketConsumer,_                                                           MappedFieldType... fieldTypes) throws IOException {_        SearchContext searchContext = createSearchContext(indexSearcher, indexSettings)__        CircuitBreakerService circuitBreakerService = new NoneCircuitBreakerService()__        when(searchContext.aggregations())_            .thenReturn(new SearchContextAggregations(AggregatorFactories.EMPTY, bucketConsumer))__        when(searchContext.query()).thenReturn(query)__        when(searchContext.bigArrays()).thenReturn(new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), circuitBreakerService))__        _        MapperService mapperService = mapperServiceMock()__        when(mapperService.getIndexSettings()).thenReturn(indexSettings)__        when(mapperService.hasNested()).thenReturn(false)__        DocumentMapper mapper = mock(DocumentMapper.class)__        when(mapper.type()).thenReturn(TYPE_NAME)__        when(mapperService.documentMapper()).thenReturn(mapper)__        when(searchContext.mapperService()).thenReturn(mapperService)__        IndexFieldDataService ifds = new IndexFieldDataService(indexSettings,_                new IndicesFieldDataCache(Settings.EMPTY, new IndexFieldDataCache.Listener() {_                }), circuitBreakerService, mapperService)__        when(searchContext.getForField(Mockito.any(MappedFieldType.class)))_            .thenAnswer(invocationOnMock -> ifds.getForField((MappedFieldType) invocationOnMock.getArguments()[0]))___        SearchLookup searchLookup = new SearchLookup(mapperService, ifds::getForField, new String[]{TYPE_NAME})__        when(searchContext.lookup()).thenReturn(searchLookup)___        QueryShardContext queryShardContext = queryShardContextMock(mapperService, fieldTypes, circuitBreakerService)__        when(queryShardContext.getIndexSettings()).thenReturn(indexSettings)__        when(searchContext.getQueryShardContext()).thenReturn(queryShardContext)__        for (MappedFieldType fieldType : fieldTypes) {_            when(searchContext.smartNameFieldType(fieldType.name())).thenReturn(fieldType)__        }__        return aggregationBuilder.build(searchContext, null)__    };create,a,factory,for,the,given,aggregation,builder;protected,aggregator,factory,create,aggregator,factory,query,query,aggregation,builder,aggregation,builder,index,searcher,index,searcher,index,settings,index,settings,multi,bucket,consumer,bucket,consumer,mapped,field,type,field,types,throws,ioexception,search,context,search,context,create,search,context,index,searcher,index,settings,circuit,breaker,service,circuit,breaker,service,new,none,circuit,breaker,service,when,search,context,aggregations,then,return,new,search,context,aggregations,aggregator,factories,empty,bucket,consumer,when,search,context,query,then,return,query,when,search,context,big,arrays,then,return,new,mock,big,arrays,new,mock,page,cache,recycler,settings,empty,circuit,breaker,service,mapper,service,mapper,service,mapper,service,mock,when,mapper,service,get,index,settings,then,return,index,settings,when,mapper,service,has,nested,then,return,false,document,mapper,mapper,mock,document,mapper,class,when,mapper,type,then,return,when,mapper,service,document,mapper,then,return,mapper,when,search,context,mapper,service,then,return,mapper,service,index,field,data,service,ifds,new,index,field,data,service,index,settings,new,indices,field,data,cache,settings,empty,new,index,field,data,cache,listener,circuit,breaker,service,mapper,service,when,search,context,get,for,field,mockito,any,mapped,field,type,class,then,answer,invocation,on,mock,ifds,get,for,field,mapped,field,type,invocation,on,mock,get,arguments,0,search,lookup,search,lookup,new,search,lookup,mapper,service,ifds,get,for,field,new,string,when,search,context,lookup,then,return,search,lookup,query,shard,context,query,shard,context,query,shard,context,mock,mapper,service,field,types,circuit,breaker,service,when,query,shard,context,get,index,settings,then,return,index,settings,when,search,context,get,query,shard,context,then,return,query,shard,context,for,mapped,field,type,field,type,field,types,when,search,context,smart,name,field,type,field,type,name,then,return,field,type,return,aggregation,builder,build,search,context,null
AggregatorTestCase -> protected AggregatorFactory<?> createAggregatorFactory(Query query,                                                            AggregationBuilder aggregationBuilder,                                                            IndexSearcher indexSearcher,                                                            IndexSettings indexSettings,                                                            MultiBucketConsumer bucketConsumer,                                                            MappedFieldType... fieldTypes) throws IOException;1531729807;Create a factory for the given aggregation builder.;protected AggregatorFactory<?> createAggregatorFactory(Query query,_                                                           AggregationBuilder aggregationBuilder,_                                                           IndexSearcher indexSearcher,_                                                           IndexSettings indexSettings,_                                                           MultiBucketConsumer bucketConsumer,_                                                           MappedFieldType... fieldTypes) throws IOException {_        SearchContext searchContext = createSearchContext(indexSearcher, indexSettings)__        CircuitBreakerService circuitBreakerService = new NoneCircuitBreakerService()__        when(searchContext.aggregations())_            .thenReturn(new SearchContextAggregations(AggregatorFactories.EMPTY, bucketConsumer))__        when(searchContext.query()).thenReturn(query)__        when(searchContext.bigArrays()).thenReturn(new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), circuitBreakerService))__        _        MapperService mapperService = mapperServiceMock()__        when(mapperService.getIndexSettings()).thenReturn(indexSettings)__        when(mapperService.hasNested()).thenReturn(false)__        DocumentMapper mapper = mock(DocumentMapper.class)__        when(mapper.type()).thenReturn(TYPE_NAME)__        when(mapperService.documentMapper()).thenReturn(mapper)__        when(searchContext.mapperService()).thenReturn(mapperService)__        IndexFieldDataService ifds = new IndexFieldDataService(indexSettings,_                new IndicesFieldDataCache(Settings.EMPTY, new IndexFieldDataCache.Listener() {_                }), circuitBreakerService, mapperService)__        when(searchContext.getForField(Mockito.any(MappedFieldType.class)))_            .thenAnswer(invocationOnMock -> ifds.getForField((MappedFieldType) invocationOnMock.getArguments()[0]))___        SearchLookup searchLookup = new SearchLookup(mapperService, ifds::getForField, new String[]{TYPE_NAME})__        when(searchContext.lookup()).thenReturn(searchLookup)___        QueryShardContext queryShardContext = queryShardContextMock(mapperService, fieldTypes, circuitBreakerService)__        when(queryShardContext.getIndexSettings()).thenReturn(indexSettings)__        when(searchContext.getQueryShardContext()).thenReturn(queryShardContext)__        for (MappedFieldType fieldType : fieldTypes) {_            when(searchContext.smartNameFieldType(fieldType.name())).thenReturn(fieldType)__        }__        return aggregationBuilder.build(searchContext, null)__    };create,a,factory,for,the,given,aggregation,builder;protected,aggregator,factory,create,aggregator,factory,query,query,aggregation,builder,aggregation,builder,index,searcher,index,searcher,index,settings,index,settings,multi,bucket,consumer,bucket,consumer,mapped,field,type,field,types,throws,ioexception,search,context,search,context,create,search,context,index,searcher,index,settings,circuit,breaker,service,circuit,breaker,service,new,none,circuit,breaker,service,when,search,context,aggregations,then,return,new,search,context,aggregations,aggregator,factories,empty,bucket,consumer,when,search,context,query,then,return,query,when,search,context,big,arrays,then,return,new,mock,big,arrays,new,mock,page,cache,recycler,settings,empty,circuit,breaker,service,mapper,service,mapper,service,mapper,service,mock,when,mapper,service,get,index,settings,then,return,index,settings,when,mapper,service,has,nested,then,return,false,document,mapper,mapper,mock,document,mapper,class,when,mapper,type,then,return,when,mapper,service,document,mapper,then,return,mapper,when,search,context,mapper,service,then,return,mapper,service,index,field,data,service,ifds,new,index,field,data,service,index,settings,new,indices,field,data,cache,settings,empty,new,index,field,data,cache,listener,circuit,breaker,service,mapper,service,when,search,context,get,for,field,mockito,any,mapped,field,type,class,then,answer,invocation,on,mock,ifds,get,for,field,mapped,field,type,invocation,on,mock,get,arguments,0,search,lookup,search,lookup,new,search,lookup,mapper,service,ifds,get,for,field,new,string,when,search,context,lookup,then,return,search,lookup,query,shard,context,query,shard,context,query,shard,context,mock,mapper,service,field,types,circuit,breaker,service,when,query,shard,context,get,index,settings,then,return,index,settings,when,search,context,get,query,shard,context,then,return,query,shard,context,for,mapped,field,type,field,type,field,types,when,search,context,smart,name,field,type,field,type,name,then,return,field,type,return,aggregation,builder,build,search,context,null
AggregatorTestCase -> protected AggregatorFactory<?> createAggregatorFactory(Query query,                                                            AggregationBuilder aggregationBuilder,                                                            IndexSearcher indexSearcher,                                                            IndexSettings indexSettings,                                                            MultiBucketConsumer bucketConsumer,                                                            MappedFieldType... fieldTypes) throws IOException;1531937412;Create a factory for the given aggregation builder.;protected AggregatorFactory<?> createAggregatorFactory(Query query,_                                                           AggregationBuilder aggregationBuilder,_                                                           IndexSearcher indexSearcher,_                                                           IndexSettings indexSettings,_                                                           MultiBucketConsumer bucketConsumer,_                                                           MappedFieldType... fieldTypes) throws IOException {_        SearchContext searchContext = createSearchContext(indexSearcher, indexSettings)__        CircuitBreakerService circuitBreakerService = new NoneCircuitBreakerService()__        when(searchContext.aggregations())_            .thenReturn(new SearchContextAggregations(AggregatorFactories.EMPTY, bucketConsumer))__        when(searchContext.query()).thenReturn(query)__        when(searchContext.bigArrays()).thenReturn(new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), circuitBreakerService))__        _        MapperService mapperService = mapperServiceMock()__        when(mapperService.getIndexSettings()).thenReturn(indexSettings)__        when(mapperService.hasNested()).thenReturn(false)__        DocumentMapper mapper = mock(DocumentMapper.class)__        when(mapper.type()).thenReturn(TYPE_NAME)__        when(mapperService.documentMapper()).thenReturn(mapper)__        when(searchContext.mapperService()).thenReturn(mapperService)__        IndexFieldDataService ifds = new IndexFieldDataService(indexSettings,_                new IndicesFieldDataCache(Settings.EMPTY, new IndexFieldDataCache.Listener() {_                }), circuitBreakerService, mapperService)__        when(searchContext.getForField(Mockito.any(MappedFieldType.class)))_            .thenAnswer(invocationOnMock -> ifds.getForField((MappedFieldType) invocationOnMock.getArguments()[0]))___        SearchLookup searchLookup = new SearchLookup(mapperService, ifds::getForField, new String[]{TYPE_NAME})__        when(searchContext.lookup()).thenReturn(searchLookup)___        QueryShardContext queryShardContext = queryShardContextMock(mapperService)__        when(queryShardContext.getIndexSettings()).thenReturn(indexSettings)__        when(searchContext.getQueryShardContext()).thenReturn(queryShardContext)___        Map<String, MappedFieldType> fieldNameToType = new HashMap<>()__        fieldNameToType.putAll(Arrays.stream(fieldTypes)_            .collect(Collectors.toMap(MappedFieldType::name, Function.identity())))__        fieldNameToType.putAll(getFieldAliases(fieldTypes))___        registerFieldTypes(queryShardContext, searchContext, mapperService,_            circuitBreakerService, fieldNameToType)___        return aggregationBuilder.build(searchContext, null)__    };create,a,factory,for,the,given,aggregation,builder;protected,aggregator,factory,create,aggregator,factory,query,query,aggregation,builder,aggregation,builder,index,searcher,index,searcher,index,settings,index,settings,multi,bucket,consumer,bucket,consumer,mapped,field,type,field,types,throws,ioexception,search,context,search,context,create,search,context,index,searcher,index,settings,circuit,breaker,service,circuit,breaker,service,new,none,circuit,breaker,service,when,search,context,aggregations,then,return,new,search,context,aggregations,aggregator,factories,empty,bucket,consumer,when,search,context,query,then,return,query,when,search,context,big,arrays,then,return,new,mock,big,arrays,new,mock,page,cache,recycler,settings,empty,circuit,breaker,service,mapper,service,mapper,service,mapper,service,mock,when,mapper,service,get,index,settings,then,return,index,settings,when,mapper,service,has,nested,then,return,false,document,mapper,mapper,mock,document,mapper,class,when,mapper,type,then,return,when,mapper,service,document,mapper,then,return,mapper,when,search,context,mapper,service,then,return,mapper,service,index,field,data,service,ifds,new,index,field,data,service,index,settings,new,indices,field,data,cache,settings,empty,new,index,field,data,cache,listener,circuit,breaker,service,mapper,service,when,search,context,get,for,field,mockito,any,mapped,field,type,class,then,answer,invocation,on,mock,ifds,get,for,field,mapped,field,type,invocation,on,mock,get,arguments,0,search,lookup,search,lookup,new,search,lookup,mapper,service,ifds,get,for,field,new,string,when,search,context,lookup,then,return,search,lookup,query,shard,context,query,shard,context,query,shard,context,mock,mapper,service,when,query,shard,context,get,index,settings,then,return,index,settings,when,search,context,get,query,shard,context,then,return,query,shard,context,map,string,mapped,field,type,field,name,to,type,new,hash,map,field,name,to,type,put,all,arrays,stream,field,types,collect,collectors,to,map,mapped,field,type,name,function,identity,field,name,to,type,put,all,get,field,aliases,field,types,register,field,types,query,shard,context,search,context,mapper,service,circuit,breaker,service,field,name,to,type,return,aggregation,builder,build,search,context,null
AggregatorTestCase -> protected AggregatorFactory<?> createAggregatorFactory(Query query,                                                            AggregationBuilder aggregationBuilder,                                                            IndexSearcher indexSearcher,                                                            IndexSettings indexSettings,                                                            MultiBucketConsumer bucketConsumer,                                                            MappedFieldType... fieldTypes) throws IOException;1536137328;Create a factory for the given aggregation builder.;protected AggregatorFactory<?> createAggregatorFactory(Query query,_                                                           AggregationBuilder aggregationBuilder,_                                                           IndexSearcher indexSearcher,_                                                           IndexSettings indexSettings,_                                                           MultiBucketConsumer bucketConsumer,_                                                           MappedFieldType... fieldTypes) throws IOException {_        SearchContext searchContext = createSearchContext(indexSearcher, indexSettings)__        CircuitBreakerService circuitBreakerService = new NoneCircuitBreakerService()__        when(searchContext.aggregations())_            .thenReturn(new SearchContextAggregations(AggregatorFactories.EMPTY, bucketConsumer))__        when(searchContext.query()).thenReturn(query)__        when(searchContext.bigArrays()).thenReturn(new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), circuitBreakerService))__        _        MapperService mapperService = mapperServiceMock()__        when(mapperService.getIndexSettings()).thenReturn(indexSettings)__        when(mapperService.hasNested()).thenReturn(false)__        DocumentMapper mapper = mock(DocumentMapper.class)__        when(mapper.typeText()).thenReturn(new Text(TYPE_NAME))__        when(mapper.type()).thenReturn(TYPE_NAME)__        when(mapperService.documentMapper()).thenReturn(mapper)__        when(searchContext.mapperService()).thenReturn(mapperService)__        IndexFieldDataService ifds = new IndexFieldDataService(indexSettings,_                new IndicesFieldDataCache(Settings.EMPTY, new IndexFieldDataCache.Listener() {_                }), circuitBreakerService, mapperService)__        when(searchContext.getForField(Mockito.any(MappedFieldType.class)))_            .thenAnswer(invocationOnMock -> ifds.getForField((MappedFieldType) invocationOnMock.getArguments()[0]))___        SearchLookup searchLookup = new SearchLookup(mapperService, ifds::getForField, new String[]{TYPE_NAME})__        when(searchContext.lookup()).thenReturn(searchLookup)___        QueryShardContext queryShardContext = queryShardContextMock(mapperService)__        when(queryShardContext.getIndexSettings()).thenReturn(indexSettings)__        when(searchContext.getQueryShardContext()).thenReturn(queryShardContext)___        Map<String, MappedFieldType> fieldNameToType = new HashMap<>()__        fieldNameToType.putAll(Arrays.stream(fieldTypes)_            .collect(Collectors.toMap(MappedFieldType::name, Function.identity())))__        fieldNameToType.putAll(getFieldAliases(fieldTypes))___        registerFieldTypes(queryShardContext, searchContext, mapperService,_            circuitBreakerService, fieldNameToType)___        return aggregationBuilder.build(searchContext, null)__    };create,a,factory,for,the,given,aggregation,builder;protected,aggregator,factory,create,aggregator,factory,query,query,aggregation,builder,aggregation,builder,index,searcher,index,searcher,index,settings,index,settings,multi,bucket,consumer,bucket,consumer,mapped,field,type,field,types,throws,ioexception,search,context,search,context,create,search,context,index,searcher,index,settings,circuit,breaker,service,circuit,breaker,service,new,none,circuit,breaker,service,when,search,context,aggregations,then,return,new,search,context,aggregations,aggregator,factories,empty,bucket,consumer,when,search,context,query,then,return,query,when,search,context,big,arrays,then,return,new,mock,big,arrays,new,mock,page,cache,recycler,settings,empty,circuit,breaker,service,mapper,service,mapper,service,mapper,service,mock,when,mapper,service,get,index,settings,then,return,index,settings,when,mapper,service,has,nested,then,return,false,document,mapper,mapper,mock,document,mapper,class,when,mapper,type,text,then,return,new,text,when,mapper,type,then,return,when,mapper,service,document,mapper,then,return,mapper,when,search,context,mapper,service,then,return,mapper,service,index,field,data,service,ifds,new,index,field,data,service,index,settings,new,indices,field,data,cache,settings,empty,new,index,field,data,cache,listener,circuit,breaker,service,mapper,service,when,search,context,get,for,field,mockito,any,mapped,field,type,class,then,answer,invocation,on,mock,ifds,get,for,field,mapped,field,type,invocation,on,mock,get,arguments,0,search,lookup,search,lookup,new,search,lookup,mapper,service,ifds,get,for,field,new,string,when,search,context,lookup,then,return,search,lookup,query,shard,context,query,shard,context,query,shard,context,mock,mapper,service,when,query,shard,context,get,index,settings,then,return,index,settings,when,search,context,get,query,shard,context,then,return,query,shard,context,map,string,mapped,field,type,field,name,to,type,new,hash,map,field,name,to,type,put,all,arrays,stream,field,types,collect,collectors,to,map,mapped,field,type,name,function,identity,field,name,to,type,put,all,get,field,aliases,field,types,register,field,types,query,shard,context,search,context,mapper,service,circuit,breaker,service,field,name,to,type,return,aggregation,builder,build,search,context,null
AggregatorTestCase -> protected AggregatorFactory<?> createAggregatorFactory(Query query,                                                            AggregationBuilder aggregationBuilder,                                                            IndexSearcher indexSearcher,                                                            IndexSettings indexSettings,                                                            MultiBucketConsumer bucketConsumer,                                                            MappedFieldType... fieldTypes) throws IOException;1536314350;Create a factory for the given aggregation builder.;protected AggregatorFactory<?> createAggregatorFactory(Query query,_                                                           AggregationBuilder aggregationBuilder,_                                                           IndexSearcher indexSearcher,_                                                           IndexSettings indexSettings,_                                                           MultiBucketConsumer bucketConsumer,_                                                           MappedFieldType... fieldTypes) throws IOException {_        SearchContext searchContext = createSearchContext(indexSearcher, indexSettings)__        CircuitBreakerService circuitBreakerService = new NoneCircuitBreakerService()__        when(searchContext.aggregations())_            .thenReturn(new SearchContextAggregations(AggregatorFactories.EMPTY, bucketConsumer))__        when(searchContext.query()).thenReturn(query)__        when(searchContext.bigArrays()).thenReturn(new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), circuitBreakerService))__        _        MapperService mapperService = mapperServiceMock()__        when(mapperService.getIndexSettings()).thenReturn(indexSettings)__        when(mapperService.hasNested()).thenReturn(false)__        DocumentMapper mapper = mock(DocumentMapper.class)__        when(mapper.typeText()).thenReturn(new Text(TYPE_NAME))__        when(mapper.type()).thenReturn(TYPE_NAME)__        when(mapperService.documentMapper()).thenReturn(mapper)__        when(searchContext.mapperService()).thenReturn(mapperService)__        IndexFieldDataService ifds = new IndexFieldDataService(indexSettings,_                new IndicesFieldDataCache(Settings.EMPTY, new IndexFieldDataCache.Listener() {_                }), circuitBreakerService, mapperService)__        when(searchContext.getForField(Mockito.any(MappedFieldType.class)))_            .thenAnswer(invocationOnMock -> ifds.getForField((MappedFieldType) invocationOnMock.getArguments()[0]))___        SearchLookup searchLookup = new SearchLookup(mapperService, ifds::getForField, new String[]{TYPE_NAME})__        when(searchContext.lookup()).thenReturn(searchLookup)___        QueryShardContext queryShardContext = queryShardContextMock(mapperService)__        when(queryShardContext.getIndexSettings()).thenReturn(indexSettings)__        when(searchContext.getQueryShardContext()).thenReturn(queryShardContext)___        Map<String, MappedFieldType> fieldNameToType = new HashMap<>()__        fieldNameToType.putAll(Arrays.stream(fieldTypes)_            .collect(Collectors.toMap(MappedFieldType::name, Function.identity())))__        fieldNameToType.putAll(getFieldAliases(fieldTypes))___        registerFieldTypes(queryShardContext, searchContext, mapperService,_            circuitBreakerService, fieldNameToType)___        return aggregationBuilder.build(searchContext, null)__    };create,a,factory,for,the,given,aggregation,builder;protected,aggregator,factory,create,aggregator,factory,query,query,aggregation,builder,aggregation,builder,index,searcher,index,searcher,index,settings,index,settings,multi,bucket,consumer,bucket,consumer,mapped,field,type,field,types,throws,ioexception,search,context,search,context,create,search,context,index,searcher,index,settings,circuit,breaker,service,circuit,breaker,service,new,none,circuit,breaker,service,when,search,context,aggregations,then,return,new,search,context,aggregations,aggregator,factories,empty,bucket,consumer,when,search,context,query,then,return,query,when,search,context,big,arrays,then,return,new,mock,big,arrays,new,mock,page,cache,recycler,settings,empty,circuit,breaker,service,mapper,service,mapper,service,mapper,service,mock,when,mapper,service,get,index,settings,then,return,index,settings,when,mapper,service,has,nested,then,return,false,document,mapper,mapper,mock,document,mapper,class,when,mapper,type,text,then,return,new,text,when,mapper,type,then,return,when,mapper,service,document,mapper,then,return,mapper,when,search,context,mapper,service,then,return,mapper,service,index,field,data,service,ifds,new,index,field,data,service,index,settings,new,indices,field,data,cache,settings,empty,new,index,field,data,cache,listener,circuit,breaker,service,mapper,service,when,search,context,get,for,field,mockito,any,mapped,field,type,class,then,answer,invocation,on,mock,ifds,get,for,field,mapped,field,type,invocation,on,mock,get,arguments,0,search,lookup,search,lookup,new,search,lookup,mapper,service,ifds,get,for,field,new,string,when,search,context,lookup,then,return,search,lookup,query,shard,context,query,shard,context,query,shard,context,mock,mapper,service,when,query,shard,context,get,index,settings,then,return,index,settings,when,search,context,get,query,shard,context,then,return,query,shard,context,map,string,mapped,field,type,field,name,to,type,new,hash,map,field,name,to,type,put,all,arrays,stream,field,types,collect,collectors,to,map,mapped,field,type,name,function,identity,field,name,to,type,put,all,get,field,aliases,field,types,register,field,types,query,shard,context,search,context,mapper,service,circuit,breaker,service,field,name,to,type,return,aggregation,builder,build,search,context,null
AggregatorTestCase -> protected AggregatorFactory<?> createAggregatorFactory(Query query,                                                            AggregationBuilder aggregationBuilder,                                                            IndexSearcher indexSearcher,                                                            IndexSettings indexSettings,                                                            MultiBucketConsumer bucketConsumer,                                                            MappedFieldType... fieldTypes) throws IOException;1538067637;Create a factory for the given aggregation builder.;protected AggregatorFactory<?> createAggregatorFactory(Query query,_                                                           AggregationBuilder aggregationBuilder,_                                                           IndexSearcher indexSearcher,_                                                           IndexSettings indexSettings,_                                                           MultiBucketConsumer bucketConsumer,_                                                           MappedFieldType... fieldTypes) throws IOException {_        SearchContext searchContext = createSearchContext(indexSearcher, indexSettings)__        CircuitBreakerService circuitBreakerService = new NoneCircuitBreakerService()__        when(searchContext.aggregations())_            .thenReturn(new SearchContextAggregations(AggregatorFactories.EMPTY, bucketConsumer))__        when(searchContext.query()).thenReturn(query)__        when(searchContext.bigArrays()).thenReturn(new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), circuitBreakerService))__        _        MapperService mapperService = mapperServiceMock()__        when(mapperService.getIndexSettings()).thenReturn(indexSettings)__        when(mapperService.hasNested()).thenReturn(false)__        DocumentMapper mapper = mock(DocumentMapper.class)__        when(mapper.typeText()).thenReturn(new Text(TYPE_NAME))__        when(mapper.type()).thenReturn(TYPE_NAME)__        when(mapperService.documentMapper()).thenReturn(mapper)__        when(searchContext.mapperService()).thenReturn(mapperService)__        IndexFieldDataService ifds = new IndexFieldDataService(indexSettings,_                new IndicesFieldDataCache(Settings.EMPTY, new IndexFieldDataCache.Listener() {_                }), circuitBreakerService, mapperService)__        when(searchContext.getForField(Mockito.any(MappedFieldType.class)))_            .thenAnswer(invocationOnMock -> ifds.getForField((MappedFieldType) invocationOnMock.getArguments()[0]))___        SearchLookup searchLookup = new SearchLookup(mapperService, ifds::getForField, new String[]{TYPE_NAME})__        when(searchContext.lookup()).thenReturn(searchLookup)___        QueryShardContext queryShardContext = queryShardContextMock(mapperService)__        when(queryShardContext.getIndexSettings()).thenReturn(indexSettings)__        when(searchContext.getQueryShardContext()).thenReturn(queryShardContext)___        Map<String, MappedFieldType> fieldNameToType = new HashMap<>()__        fieldNameToType.putAll(Arrays.stream(fieldTypes)_            .collect(Collectors.toMap(MappedFieldType::name, Function.identity())))__        fieldNameToType.putAll(getFieldAliases(fieldTypes))___        registerFieldTypes(queryShardContext, searchContext, mapperService,_            circuitBreakerService, fieldNameToType)___        return aggregationBuilder.build(searchContext, null)__    };create,a,factory,for,the,given,aggregation,builder;protected,aggregator,factory,create,aggregator,factory,query,query,aggregation,builder,aggregation,builder,index,searcher,index,searcher,index,settings,index,settings,multi,bucket,consumer,bucket,consumer,mapped,field,type,field,types,throws,ioexception,search,context,search,context,create,search,context,index,searcher,index,settings,circuit,breaker,service,circuit,breaker,service,new,none,circuit,breaker,service,when,search,context,aggregations,then,return,new,search,context,aggregations,aggregator,factories,empty,bucket,consumer,when,search,context,query,then,return,query,when,search,context,big,arrays,then,return,new,mock,big,arrays,new,mock,page,cache,recycler,settings,empty,circuit,breaker,service,mapper,service,mapper,service,mapper,service,mock,when,mapper,service,get,index,settings,then,return,index,settings,when,mapper,service,has,nested,then,return,false,document,mapper,mapper,mock,document,mapper,class,when,mapper,type,text,then,return,new,text,when,mapper,type,then,return,when,mapper,service,document,mapper,then,return,mapper,when,search,context,mapper,service,then,return,mapper,service,index,field,data,service,ifds,new,index,field,data,service,index,settings,new,indices,field,data,cache,settings,empty,new,index,field,data,cache,listener,circuit,breaker,service,mapper,service,when,search,context,get,for,field,mockito,any,mapped,field,type,class,then,answer,invocation,on,mock,ifds,get,for,field,mapped,field,type,invocation,on,mock,get,arguments,0,search,lookup,search,lookup,new,search,lookup,mapper,service,ifds,get,for,field,new,string,when,search,context,lookup,then,return,search,lookup,query,shard,context,query,shard,context,query,shard,context,mock,mapper,service,when,query,shard,context,get,index,settings,then,return,index,settings,when,search,context,get,query,shard,context,then,return,query,shard,context,map,string,mapped,field,type,field,name,to,type,new,hash,map,field,name,to,type,put,all,arrays,stream,field,types,collect,collectors,to,map,mapped,field,type,name,function,identity,field,name,to,type,put,all,get,field,aliases,field,types,register,field,types,query,shard,context,search,context,mapper,service,circuit,breaker,service,field,name,to,type,return,aggregation,builder,build,search,context,null
AggregatorTestCase -> protected AggregatorFactory<?> createAggregatorFactory(Query query,                                                            AggregationBuilder aggregationBuilder,                                                            IndexSearcher indexSearcher,                                                            IndexSettings indexSettings,                                                            MultiBucketConsumer bucketConsumer,                                                            MappedFieldType... fieldTypes) throws IOException;1539723533;Create a factory for the given aggregation builder.;protected AggregatorFactory<?> createAggregatorFactory(Query query,_                                                           AggregationBuilder aggregationBuilder,_                                                           IndexSearcher indexSearcher,_                                                           IndexSettings indexSettings,_                                                           MultiBucketConsumer bucketConsumer,_                                                           MappedFieldType... fieldTypes) throws IOException {_        SearchContext searchContext = createSearchContext(indexSearcher, indexSettings)__        CircuitBreakerService circuitBreakerService = new NoneCircuitBreakerService()__        when(searchContext.aggregations())_            .thenReturn(new SearchContextAggregations(AggregatorFactories.EMPTY, bucketConsumer))__        when(searchContext.query()).thenReturn(query)__        when(searchContext.bigArrays()).thenReturn(new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), circuitBreakerService))__        _        MapperService mapperService = mapperServiceMock()__        when(mapperService.getIndexSettings()).thenReturn(indexSettings)__        when(mapperService.hasNested()).thenReturn(false)__        DocumentMapper mapper = mock(DocumentMapper.class)__        when(mapper.typeText()).thenReturn(new Text(TYPE_NAME))__        when(mapper.type()).thenReturn(TYPE_NAME)__        when(mapperService.documentMapper()).thenReturn(mapper)__        when(searchContext.mapperService()).thenReturn(mapperService)__        IndexFieldDataService ifds = new IndexFieldDataService(indexSettings,_                new IndicesFieldDataCache(Settings.EMPTY, new IndexFieldDataCache.Listener() {_                }), circuitBreakerService, mapperService)__        when(searchContext.getForField(Mockito.any(MappedFieldType.class)))_            .thenAnswer(invocationOnMock -> ifds.getForField((MappedFieldType) invocationOnMock.getArguments()[0]))___        SearchLookup searchLookup = new SearchLookup(mapperService, ifds::getForField, new String[]{TYPE_NAME})__        when(searchContext.lookup()).thenReturn(searchLookup)___        QueryShardContext queryShardContext = queryShardContextMock(mapperService)__        when(queryShardContext.getIndexSettings()).thenReturn(indexSettings)__        when(searchContext.getQueryShardContext()).thenReturn(queryShardContext)___        Map<String, MappedFieldType> fieldNameToType = new HashMap<>()__        fieldNameToType.putAll(Arrays.stream(fieldTypes)_            .collect(Collectors.toMap(MappedFieldType::name, Function.identity())))__        fieldNameToType.putAll(getFieldAliases(fieldTypes))___        registerFieldTypes(queryShardContext, searchContext, mapperService,_            circuitBreakerService, fieldNameToType)___        return aggregationBuilder.build(searchContext, null)__    };create,a,factory,for,the,given,aggregation,builder;protected,aggregator,factory,create,aggregator,factory,query,query,aggregation,builder,aggregation,builder,index,searcher,index,searcher,index,settings,index,settings,multi,bucket,consumer,bucket,consumer,mapped,field,type,field,types,throws,ioexception,search,context,search,context,create,search,context,index,searcher,index,settings,circuit,breaker,service,circuit,breaker,service,new,none,circuit,breaker,service,when,search,context,aggregations,then,return,new,search,context,aggregations,aggregator,factories,empty,bucket,consumer,when,search,context,query,then,return,query,when,search,context,big,arrays,then,return,new,mock,big,arrays,new,mock,page,cache,recycler,settings,empty,circuit,breaker,service,mapper,service,mapper,service,mapper,service,mock,when,mapper,service,get,index,settings,then,return,index,settings,when,mapper,service,has,nested,then,return,false,document,mapper,mapper,mock,document,mapper,class,when,mapper,type,text,then,return,new,text,when,mapper,type,then,return,when,mapper,service,document,mapper,then,return,mapper,when,search,context,mapper,service,then,return,mapper,service,index,field,data,service,ifds,new,index,field,data,service,index,settings,new,indices,field,data,cache,settings,empty,new,index,field,data,cache,listener,circuit,breaker,service,mapper,service,when,search,context,get,for,field,mockito,any,mapped,field,type,class,then,answer,invocation,on,mock,ifds,get,for,field,mapped,field,type,invocation,on,mock,get,arguments,0,search,lookup,search,lookup,new,search,lookup,mapper,service,ifds,get,for,field,new,string,when,search,context,lookup,then,return,search,lookup,query,shard,context,query,shard,context,query,shard,context,mock,mapper,service,when,query,shard,context,get,index,settings,then,return,index,settings,when,search,context,get,query,shard,context,then,return,query,shard,context,map,string,mapped,field,type,field,name,to,type,new,hash,map,field,name,to,type,put,all,arrays,stream,field,types,collect,collectors,to,map,mapped,field,type,name,function,identity,field,name,to,type,put,all,get,field,aliases,field,types,register,field,types,query,shard,context,search,context,mapper,service,circuit,breaker,service,field,name,to,type,return,aggregation,builder,build,search,context,null
AggregatorTestCase -> protected AggregatorFactory<?> createAggregatorFactory(Query query,                                                            AggregationBuilder aggregationBuilder,                                                            IndexSearcher indexSearcher,                                                            IndexSettings indexSettings,                                                            MultiBucketConsumer bucketConsumer,                                                            MappedFieldType... fieldTypes) throws IOException;1541752911;Create a factory for the given aggregation builder.;protected AggregatorFactory<?> createAggregatorFactory(Query query,_                                                           AggregationBuilder aggregationBuilder,_                                                           IndexSearcher indexSearcher,_                                                           IndexSettings indexSettings,_                                                           MultiBucketConsumer bucketConsumer,_                                                           MappedFieldType... fieldTypes) throws IOException {_        SearchContext searchContext = createSearchContext(indexSearcher, indexSettings)__        CircuitBreakerService circuitBreakerService = new NoneCircuitBreakerService()__        IndexShard indexShard = mock(IndexShard.class)__        when(indexShard.shardId()).thenReturn(new ShardId("test", "test", 0))__        when(searchContext.indexShard()).thenReturn(indexShard)__        when(searchContext.aggregations())_            .thenReturn(new SearchContextAggregations(AggregatorFactories.EMPTY, bucketConsumer))__        when(searchContext.query()).thenReturn(query)__        when(searchContext.bigArrays()).thenReturn(new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), circuitBreakerService))__        _        MapperService mapperService = mapperServiceMock()__        when(mapperService.getIndexSettings()).thenReturn(indexSettings)__        when(mapperService.hasNested()).thenReturn(false)__        DocumentMapper mapper = mock(DocumentMapper.class)__        when(mapper.typeText()).thenReturn(new Text(TYPE_NAME))__        when(mapper.type()).thenReturn(TYPE_NAME)__        when(mapperService.documentMapper()).thenReturn(mapper)__        when(searchContext.mapperService()).thenReturn(mapperService)__        IndexFieldDataService ifds = new IndexFieldDataService(indexSettings,_                new IndicesFieldDataCache(Settings.EMPTY, new IndexFieldDataCache.Listener() {_                }), circuitBreakerService, mapperService)__        when(searchContext.getForField(Mockito.any(MappedFieldType.class)))_            .thenAnswer(invocationOnMock -> ifds.getForField((MappedFieldType) invocationOnMock.getArguments()[0]))___        SearchLookup searchLookup = new SearchLookup(mapperService, ifds::getForField, new String[]{TYPE_NAME})__        when(searchContext.lookup()).thenReturn(searchLookup)___        QueryShardContext queryShardContext = queryShardContextMock(mapperService)__        when(queryShardContext.getIndexSettings()).thenReturn(indexSettings)__        when(searchContext.getQueryShardContext()).thenReturn(queryShardContext)__        Map<String, MappedFieldType> fieldNameToType = new HashMap<>()__        fieldNameToType.putAll(Arrays.stream(fieldTypes)_            .collect(Collectors.toMap(MappedFieldType::name, Function.identity())))__        fieldNameToType.putAll(getFieldAliases(fieldTypes))___        registerFieldTypes(queryShardContext, searchContext, mapperService,_            circuitBreakerService, fieldNameToType)___        return aggregationBuilder.build(searchContext, null)__    };create,a,factory,for,the,given,aggregation,builder;protected,aggregator,factory,create,aggregator,factory,query,query,aggregation,builder,aggregation,builder,index,searcher,index,searcher,index,settings,index,settings,multi,bucket,consumer,bucket,consumer,mapped,field,type,field,types,throws,ioexception,search,context,search,context,create,search,context,index,searcher,index,settings,circuit,breaker,service,circuit,breaker,service,new,none,circuit,breaker,service,index,shard,index,shard,mock,index,shard,class,when,index,shard,shard,id,then,return,new,shard,id,test,test,0,when,search,context,index,shard,then,return,index,shard,when,search,context,aggregations,then,return,new,search,context,aggregations,aggregator,factories,empty,bucket,consumer,when,search,context,query,then,return,query,when,search,context,big,arrays,then,return,new,mock,big,arrays,new,mock,page,cache,recycler,settings,empty,circuit,breaker,service,mapper,service,mapper,service,mapper,service,mock,when,mapper,service,get,index,settings,then,return,index,settings,when,mapper,service,has,nested,then,return,false,document,mapper,mapper,mock,document,mapper,class,when,mapper,type,text,then,return,new,text,when,mapper,type,then,return,when,mapper,service,document,mapper,then,return,mapper,when,search,context,mapper,service,then,return,mapper,service,index,field,data,service,ifds,new,index,field,data,service,index,settings,new,indices,field,data,cache,settings,empty,new,index,field,data,cache,listener,circuit,breaker,service,mapper,service,when,search,context,get,for,field,mockito,any,mapped,field,type,class,then,answer,invocation,on,mock,ifds,get,for,field,mapped,field,type,invocation,on,mock,get,arguments,0,search,lookup,search,lookup,new,search,lookup,mapper,service,ifds,get,for,field,new,string,when,search,context,lookup,then,return,search,lookup,query,shard,context,query,shard,context,query,shard,context,mock,mapper,service,when,query,shard,context,get,index,settings,then,return,index,settings,when,search,context,get,query,shard,context,then,return,query,shard,context,map,string,mapped,field,type,field,name,to,type,new,hash,map,field,name,to,type,put,all,arrays,stream,field,types,collect,collectors,to,map,mapped,field,type,name,function,identity,field,name,to,type,put,all,get,field,aliases,field,types,register,field,types,query,shard,context,search,context,mapper,service,circuit,breaker,service,field,name,to,type,return,aggregation,builder,build,search,context,null
AggregatorTestCase -> protected AggregatorFactory<?> createAggregatorFactory(Query query,                                                            AggregationBuilder aggregationBuilder,                                                            IndexSearcher indexSearcher,                                                            IndexSettings indexSettings,                                                            MultiBucketConsumer bucketConsumer,                                                            MappedFieldType... fieldTypes) throws IOException;1543834151;Create a factory for the given aggregation builder.;protected AggregatorFactory<?> createAggregatorFactory(Query query,_                                                           AggregationBuilder aggregationBuilder,_                                                           IndexSearcher indexSearcher,_                                                           IndexSettings indexSettings,_                                                           MultiBucketConsumer bucketConsumer,_                                                           MappedFieldType... fieldTypes) throws IOException {_        SearchContext searchContext = createSearchContext(indexSearcher, indexSettings)__        CircuitBreakerService circuitBreakerService = new NoneCircuitBreakerService()__        IndexShard indexShard = mock(IndexShard.class)__        when(indexShard.shardId()).thenReturn(new ShardId("test", "test", 0))__        when(searchContext.indexShard()).thenReturn(indexShard)__        when(searchContext.aggregations())_            .thenReturn(new SearchContextAggregations(AggregatorFactories.EMPTY, bucketConsumer))__        when(searchContext.query()).thenReturn(query)__        when(searchContext.bigArrays()).thenReturn(new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), circuitBreakerService))__        _        MapperService mapperService = mapperServiceMock()__        when(mapperService.getIndexSettings()).thenReturn(indexSettings)__        when(mapperService.hasNested()).thenReturn(false)__        DocumentMapper mapper = mock(DocumentMapper.class)__        when(mapper.typeText()).thenReturn(new Text(TYPE_NAME))__        when(mapper.type()).thenReturn(TYPE_NAME)__        when(mapperService.documentMapper()).thenReturn(mapper)__        when(searchContext.mapperService()).thenReturn(mapperService)__        IndexFieldDataService ifds = new IndexFieldDataService(indexSettings,_                new IndicesFieldDataCache(Settings.EMPTY, new IndexFieldDataCache.Listener() {_                }), circuitBreakerService, mapperService)__        when(searchContext.getForField(Mockito.any(MappedFieldType.class)))_            .thenAnswer(invocationOnMock -> ifds.getForField((MappedFieldType) invocationOnMock.getArguments()[0]))___        SearchLookup searchLookup = new SearchLookup(mapperService, ifds::getForField, new String[]{TYPE_NAME})__        when(searchContext.lookup()).thenReturn(searchLookup)___        QueryShardContext queryShardContext = queryShardContextMock(mapperService)__        when(queryShardContext.getIndexSettings()).thenReturn(indexSettings)__        when(searchContext.getQueryShardContext()).thenReturn(queryShardContext)__        Map<String, MappedFieldType> fieldNameToType = new HashMap<>()__        fieldNameToType.putAll(Arrays.stream(fieldTypes)_            .collect(Collectors.toMap(MappedFieldType::name, Function.identity())))__        fieldNameToType.putAll(getFieldAliases(fieldTypes))___        registerFieldTypes(queryShardContext, searchContext, mapperService,_            circuitBreakerService, fieldNameToType)___        return aggregationBuilder.build(searchContext, null)__    };create,a,factory,for,the,given,aggregation,builder;protected,aggregator,factory,create,aggregator,factory,query,query,aggregation,builder,aggregation,builder,index,searcher,index,searcher,index,settings,index,settings,multi,bucket,consumer,bucket,consumer,mapped,field,type,field,types,throws,ioexception,search,context,search,context,create,search,context,index,searcher,index,settings,circuit,breaker,service,circuit,breaker,service,new,none,circuit,breaker,service,index,shard,index,shard,mock,index,shard,class,when,index,shard,shard,id,then,return,new,shard,id,test,test,0,when,search,context,index,shard,then,return,index,shard,when,search,context,aggregations,then,return,new,search,context,aggregations,aggregator,factories,empty,bucket,consumer,when,search,context,query,then,return,query,when,search,context,big,arrays,then,return,new,mock,big,arrays,new,mock,page,cache,recycler,settings,empty,circuit,breaker,service,mapper,service,mapper,service,mapper,service,mock,when,mapper,service,get,index,settings,then,return,index,settings,when,mapper,service,has,nested,then,return,false,document,mapper,mapper,mock,document,mapper,class,when,mapper,type,text,then,return,new,text,when,mapper,type,then,return,when,mapper,service,document,mapper,then,return,mapper,when,search,context,mapper,service,then,return,mapper,service,index,field,data,service,ifds,new,index,field,data,service,index,settings,new,indices,field,data,cache,settings,empty,new,index,field,data,cache,listener,circuit,breaker,service,mapper,service,when,search,context,get,for,field,mockito,any,mapped,field,type,class,then,answer,invocation,on,mock,ifds,get,for,field,mapped,field,type,invocation,on,mock,get,arguments,0,search,lookup,search,lookup,new,search,lookup,mapper,service,ifds,get,for,field,new,string,when,search,context,lookup,then,return,search,lookup,query,shard,context,query,shard,context,query,shard,context,mock,mapper,service,when,query,shard,context,get,index,settings,then,return,index,settings,when,search,context,get,query,shard,context,then,return,query,shard,context,map,string,mapped,field,type,field,name,to,type,new,hash,map,field,name,to,type,put,all,arrays,stream,field,types,collect,collectors,to,map,mapped,field,type,name,function,identity,field,name,to,type,put,all,get,field,aliases,field,types,register,field,types,query,shard,context,search,context,mapper,service,circuit,breaker,service,field,name,to,type,return,aggregation,builder,build,search,context,null
AggregatorTestCase -> protected QueryShardContext queryShardContextMock(MapperService mapperService);1531937412;sub-tests that need a more complex mock can overwrite this;protected QueryShardContext queryShardContextMock(MapperService mapperService) {_        QueryShardContext queryShardContext = mock(QueryShardContext.class)__        when(queryShardContext.getMapperService()).thenReturn(mapperService)__        NestedScope nestedScope = new NestedScope()__        when(queryShardContext.isFilter()).thenCallRealMethod()__        Mockito.doCallRealMethod().when(queryShardContext).setIsFilter(Matchers.anyBoolean())__        when(queryShardContext.nestedScope()).thenReturn(nestedScope)__        return queryShardContext__    };sub,tests,that,need,a,more,complex,mock,can,overwrite,this;protected,query,shard,context,query,shard,context,mock,mapper,service,mapper,service,query,shard,context,query,shard,context,mock,query,shard,context,class,when,query,shard,context,get,mapper,service,then,return,mapper,service,nested,scope,nested,scope,new,nested,scope,when,query,shard,context,is,filter,then,call,real,method,mockito,do,call,real,method,when,query,shard,context,set,is,filter,matchers,any,boolean,when,query,shard,context,nested,scope,then,return,nested,scope,return,query,shard,context
AggregatorTestCase -> protected QueryShardContext queryShardContextMock(MapperService mapperService);1536137328;sub-tests that need a more complex mock can overwrite this;protected QueryShardContext queryShardContextMock(MapperService mapperService) {_        QueryShardContext queryShardContext = mock(QueryShardContext.class)__        when(queryShardContext.getMapperService()).thenReturn(mapperService)__        NestedScope nestedScope = new NestedScope()__        when(queryShardContext.isFilter()).thenCallRealMethod()__        Mockito.doCallRealMethod().when(queryShardContext).setIsFilter(Matchers.anyBoolean())__        when(queryShardContext.nestedScope()).thenReturn(nestedScope)__        return queryShardContext__    };sub,tests,that,need,a,more,complex,mock,can,overwrite,this;protected,query,shard,context,query,shard,context,mock,mapper,service,mapper,service,query,shard,context,query,shard,context,mock,query,shard,context,class,when,query,shard,context,get,mapper,service,then,return,mapper,service,nested,scope,nested,scope,new,nested,scope,when,query,shard,context,is,filter,then,call,real,method,mockito,do,call,real,method,when,query,shard,context,set,is,filter,matchers,any,boolean,when,query,shard,context,nested,scope,then,return,nested,scope,return,query,shard,context
AggregatorTestCase -> protected QueryShardContext queryShardContextMock(MapperService mapperService);1536314350;sub-tests that need a more complex mock can overwrite this;protected QueryShardContext queryShardContextMock(MapperService mapperService) {_        QueryShardContext queryShardContext = mock(QueryShardContext.class)__        when(queryShardContext.getMapperService()).thenReturn(mapperService)__        NestedScope nestedScope = new NestedScope()__        when(queryShardContext.isFilter()).thenCallRealMethod()__        Mockito.doCallRealMethod().when(queryShardContext).setIsFilter(Matchers.anyBoolean())__        when(queryShardContext.nestedScope()).thenReturn(nestedScope)__        return queryShardContext__    };sub,tests,that,need,a,more,complex,mock,can,overwrite,this;protected,query,shard,context,query,shard,context,mock,mapper,service,mapper,service,query,shard,context,query,shard,context,mock,query,shard,context,class,when,query,shard,context,get,mapper,service,then,return,mapper,service,nested,scope,nested,scope,new,nested,scope,when,query,shard,context,is,filter,then,call,real,method,mockito,do,call,real,method,when,query,shard,context,set,is,filter,matchers,any,boolean,when,query,shard,context,nested,scope,then,return,nested,scope,return,query,shard,context
AggregatorTestCase -> protected QueryShardContext queryShardContextMock(MapperService mapperService);1538067637;sub-tests that need a more complex mock can overwrite this;protected QueryShardContext queryShardContextMock(MapperService mapperService) {_        QueryShardContext queryShardContext = mock(QueryShardContext.class)__        when(queryShardContext.getMapperService()).thenReturn(mapperService)__        NestedScope nestedScope = new NestedScope()__        when(queryShardContext.isFilter()).thenCallRealMethod()__        Mockito.doCallRealMethod().when(queryShardContext).setIsFilter(Matchers.anyBoolean())__        when(queryShardContext.nestedScope()).thenReturn(nestedScope)__        return queryShardContext__    };sub,tests,that,need,a,more,complex,mock,can,overwrite,this;protected,query,shard,context,query,shard,context,mock,mapper,service,mapper,service,query,shard,context,query,shard,context,mock,query,shard,context,class,when,query,shard,context,get,mapper,service,then,return,mapper,service,nested,scope,nested,scope,new,nested,scope,when,query,shard,context,is,filter,then,call,real,method,mockito,do,call,real,method,when,query,shard,context,set,is,filter,matchers,any,boolean,when,query,shard,context,nested,scope,then,return,nested,scope,return,query,shard,context
AggregatorTestCase -> protected QueryShardContext queryShardContextMock(MapperService mapperService);1539723533;sub-tests that need a more complex mock can overwrite this;protected QueryShardContext queryShardContextMock(MapperService mapperService) {_        QueryShardContext queryShardContext = mock(QueryShardContext.class)__        when(queryShardContext.getMapperService()).thenReturn(mapperService)__        NestedScope nestedScope = new NestedScope()__        when(queryShardContext.isFilter()).thenCallRealMethod()__        Mockito.doCallRealMethod().when(queryShardContext).setIsFilter(Matchers.anyBoolean())__        when(queryShardContext.nestedScope()).thenReturn(nestedScope)__        return queryShardContext__    };sub,tests,that,need,a,more,complex,mock,can,overwrite,this;protected,query,shard,context,query,shard,context,mock,mapper,service,mapper,service,query,shard,context,query,shard,context,mock,query,shard,context,class,when,query,shard,context,get,mapper,service,then,return,mapper,service,nested,scope,nested,scope,new,nested,scope,when,query,shard,context,is,filter,then,call,real,method,mockito,do,call,real,method,when,query,shard,context,set,is,filter,matchers,any,boolean,when,query,shard,context,nested,scope,then,return,nested,scope,return,query,shard,context
AggregatorTestCase -> protected QueryShardContext queryShardContextMock(MapperService mapperService);1541752911;sub-tests that need a more complex mock can overwrite this;protected QueryShardContext queryShardContextMock(MapperService mapperService) {_        QueryShardContext queryShardContext = mock(QueryShardContext.class)__        when(queryShardContext.getMapperService()).thenReturn(mapperService)__        NestedScope nestedScope = new NestedScope()__        when(queryShardContext.isFilter()).thenCallRealMethod()__        Mockito.doCallRealMethod().when(queryShardContext).setIsFilter(Matchers.anyBoolean())__        when(queryShardContext.nestedScope()).thenReturn(nestedScope)__        return queryShardContext__    };sub,tests,that,need,a,more,complex,mock,can,overwrite,this;protected,query,shard,context,query,shard,context,mock,mapper,service,mapper,service,query,shard,context,query,shard,context,mock,query,shard,context,class,when,query,shard,context,get,mapper,service,then,return,mapper,service,nested,scope,nested,scope,new,nested,scope,when,query,shard,context,is,filter,then,call,real,method,mockito,do,call,real,method,when,query,shard,context,set,is,filter,matchers,any,boolean,when,query,shard,context,nested,scope,then,return,nested,scope,return,query,shard,context
AggregatorTestCase -> protected QueryShardContext queryShardContextMock(MapperService mapperService);1543834151;sub-tests that need a more complex mock can overwrite this;protected QueryShardContext queryShardContextMock(MapperService mapperService) {_        QueryShardContext queryShardContext = mock(QueryShardContext.class)__        when(queryShardContext.getMapperService()).thenReturn(mapperService)__        NestedScope nestedScope = new NestedScope()__        when(queryShardContext.nestedScope()).thenReturn(nestedScope)__        return queryShardContext__    };sub,tests,that,need,a,more,complex,mock,can,overwrite,this;protected,query,shard,context,query,shard,context,mock,mapper,service,mapper,service,query,shard,context,query,shard,context,mock,query,shard,context,class,when,query,shard,context,get,mapper,service,then,return,mapper,service,nested,scope,nested,scope,new,nested,scope,when,query,shard,context,nested,scope,then,return,nested,scope,return,query,shard,context
