commented;modifiers;parameterAmount;loc;comment;code
false;public,static;4;16;;public static <T> XContentTester<T> xContentTester(CheckedBiFunction<XContent, BytesReference, XContentParser, IOException> createParser, Supplier<T> instanceSupplier, CheckedBiConsumer<T, XContentBuilder, IOException> toXContent, CheckedFunction<XContentParser, T, IOException> fromXContent) {     return new XContentTester<>(createParser, x -> instanceSupplier.get(), (testInstance, xContentType) -> {         try (XContentBuilder builder = XContentBuilder.builder(xContentType.xContent())) {             toXContent.accept(testInstance, builder).             return BytesReference.bytes(builder).         }     }, fromXContent). }
false;public,static;3;6;;public static <T extends ToXContent> XContentTester<T> xContentTester(CheckedBiFunction<XContent, BytesReference, XContentParser, IOException> createParser, Supplier<T> instanceSupplier, CheckedFunction<XContentParser, T, IOException> fromXContent) {     return xContentTester(createParser, instanceSupplier, ToXContent.EMPTY_PARAMS, fromXContent). }
false;public,static;4;12;;public static <T extends ToXContent> XContentTester<T> xContentTester(CheckedBiFunction<XContent, BytesReference, XContentParser, IOException> createParser, Supplier<T> instanceSupplier, ToXContent.Params toXContentParams, CheckedFunction<XContentParser, T, IOException> fromXContent) {     return new XContentTester<>(createParser, x -> instanceSupplier.get(), (testInstance, xContentType) -> XContentHelper.toXContent(testInstance, xContentType, toXContentParams, false), fromXContent). }
false;public,static;4;12;;public static <T extends ToXContent> XContentTester<T> xContentTester(CheckedBiFunction<XContent, BytesReference, XContentParser, IOException> createParser, Function<XContentType, T> instanceSupplier, ToXContent.Params toXContentParams, CheckedFunction<XContentParser, T, IOException> fromXContent) {     return new XContentTester<>(createParser, instanceSupplier, (testInstance, xContentType) -> XContentHelper.toXContent(testInstance, xContentType, toXContentParams, false), fromXContent). }
false;public;0;18;;public void test() throws IOException {     for (int runs = 0. runs < numberOfTestRuns. runs++) {         XContentType xContentType = randomFrom(XContentType.values()).         T testInstance = instanceSupplier.apply(xContentType).         BytesReference originalXContent = toXContent.apply(testInstance, xContentType).         BytesReference shuffledContent = insertRandomFieldsAndShuffle(originalXContent, xContentType, supportsUnknownFields, shuffleFieldsExceptions, randomFieldsExcludeFilter, createParser).         XContentParser parser = createParser.apply(XContentFactory.xContent(xContentType), shuffledContent).         T parsed = fromXContent.apply(parser).         assertEqualsConsumer.accept(testInstance, parsed).         if (assertToXContentEquivalence) {             assertToXContentEquivalent(toXContent.apply(testInstance, xContentType), toXContent.apply(parsed, xContentType), xContentType).         }     } }
false;public;1;4;;public XContentTester<T> numberOfTestRuns(int numberOfTestRuns) {     this.numberOfTestRuns = numberOfTestRuns.     return this. }
false;public;1;4;;public XContentTester<T> supportsUnknownFields(boolean supportsUnknownFields) {     this.supportsUnknownFields = supportsUnknownFields.     return this. }
false;public;1;4;;public XContentTester<T> shuffleFieldsExceptions(String[] shuffleFieldsExceptions) {     this.shuffleFieldsExceptions = shuffleFieldsExceptions.     return this. }
false;public;1;4;;public XContentTester<T> randomFieldsExcludeFilter(Predicate<String> randomFieldsExcludeFilter) {     this.randomFieldsExcludeFilter = randomFieldsExcludeFilter.     return this. }
false;public;1;4;;public XContentTester<T> assertEqualsConsumer(BiConsumer<T, T> assertEqualsConsumer) {     this.assertEqualsConsumer = assertEqualsConsumer.     return this. }
false;public;1;4;;public XContentTester<T> assertToXContentEquivalence(boolean assertToXContentEquivalence) {     this.assertToXContentEquivalence = assertToXContentEquivalence.     return this. }
false;public,static;10;20;;public static <T extends ToXContent> void testFromXContent(int numberOfTestRuns, Supplier<T> instanceSupplier, boolean supportsUnknownFields, String[] shuffleFieldsExceptions, Predicate<String> randomFieldsExcludeFilter, CheckedBiFunction<XContent, BytesReference, XContentParser, IOException> createParserFunction, CheckedFunction<XContentParser, T, IOException> fromXContent, BiConsumer<T, T> assertEqualsConsumer, boolean assertToXContentEquivalence, ToXContent.Params toXContentParams) throws IOException {     xContentTester(createParserFunction, instanceSupplier, toXContentParams, fromXContent).numberOfTestRuns(numberOfTestRuns).supportsUnknownFields(supportsUnknownFields).shuffleFieldsExceptions(shuffleFieldsExceptions).randomFieldsExcludeFilter(randomFieldsExcludeFilter).assertEqualsConsumer(assertEqualsConsumer).assertToXContentEquivalence(assertToXContentEquivalence).test(). }
true;public,final;0;5;/**  * Generic test that creates new instance from the test instance and checks  * both for equality and asserts equality on the two queries.  */ ;/**  * Generic test that creates new instance from the test instance and checks  * both for equality and asserts equality on the two queries.  */ public final void testFromXContent() throws IOException {     testFromXContent(NUMBER_OF_TEST_RUNS, this::createTestInstance, supportsUnknownFields(), getShuffleFieldsExceptions(), getRandomFieldsExcludeFilter(), this::createParser, this::parseInstance, this::assertEqualInstances, assertToXContentEquivalence(), getToXContentParams()). }
true;protected,abstract;0;1;/**  * Creates a random test instance to use in the tests. This method will be  * called multiple times during test execution and should return a different  * random instance each time it is called.  */ ;/**  * Creates a random test instance to use in the tests. This method will be  * called multiple times during test execution and should return a different  * random instance each time it is called.  */ protected abstract T createTestInstance().
false;private;1;5;;private T parseInstance(XContentParser parser) throws IOException {     T parsedInstance = doParseInstance(parser).     assertNull(parser.nextToken()).     return parsedInstance. }
true;protected,abstract;1;1;/**  * Parses to a new instance using the provided {@link XContentParser}  */ ;/**  * Parses to a new instance using the provided {@link XContentParser}  */ protected abstract T doParseInstance(XContentParser parser) throws IOException.
false;protected;2;5;;protected void assertEqualInstances(T expectedInstance, T newInstance) {     assertNotSame(newInstance, expectedInstance).     assertEquals(expectedInstance, newInstance).     assertEquals(expectedInstance.hashCode(), newInstance.hashCode()). }
false;protected;0;3;;protected boolean assertToXContentEquivalence() {     return true. }
true;protected,abstract;0;1;/**  * Indicates whether the parser supports unknown fields or not. In case it does, such behaviour will be tested by  * inserting random fields before parsing and checking that they don't make parsing fail.  */ ;/**  * Indicates whether the parser supports unknown fields or not. In case it does, such behaviour will be tested by  * inserting random fields before parsing and checking that they don't make parsing fail.  */ protected abstract boolean supportsUnknownFields().
true;protected;0;3;/**  * Returns a predicate that given the field name indicates whether the field has to be excluded from random fields insertion or not  */ ;/**  * Returns a predicate that given the field name indicates whether the field has to be excluded from random fields insertion or not  */ protected Predicate<String> getRandomFieldsExcludeFilter() {     return field -> false. }
true;protected;0;3;/**  * Fields that have to be ignored when shuffling as part of testFromXContent  */ ;/**  * Fields that have to be ignored when shuffling as part of testFromXContent  */ protected String[] getShuffleFieldsExceptions() {     return Strings.EMPTY_ARRAY. }
true;protected;0;3;/**  * Params that have to be provided when calling {@link ToXContent#toXContent(XContentBuilder, ToXContent.Params)}  */ ;/**  * Params that have to be provided when calling {@link ToXContent#toXContent(XContentBuilder, ToXContent.Params)}  */ protected ToXContent.Params getToXContentParams() {     return ToXContent.EMPTY_PARAMS. }
false;static;6;13;;static BytesReference insertRandomFieldsAndShuffle(BytesReference xContent, XContentType xContentType, boolean supportsUnknownFields, String[] shuffleFieldsExceptions, Predicate<String> randomFieldsExcludeFilter, CheckedBiFunction<XContent, BytesReference, XContentParser, IOException> createParserFunction) throws IOException {     BytesReference withRandomFields.     if (supportsUnknownFields) {         // add a few random fields to check that the parser is lenient on new fields         withRandomFields = XContentTestUtils.insertRandomFields(xContentType, xContent, randomFieldsExcludeFilter, random()).     } else {         withRandomFields = xContent.     }     XContentParser parserWithRandonFields = createParserFunction.apply(XContentFactory.xContent(xContentType), withRandomFields).     return BytesReference.bytes(ESTestCase.shuffleXContent(parserWithRandonFields, false, shuffleFieldsExceptions)). }
