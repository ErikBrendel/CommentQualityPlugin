commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;// FieldFilterLeafReader does not forward cache helpers // since it considers it is illegal because of the fact // that it changes the content of the index. However we // want this behavior for tests, and security plugins // are careful to only use the cache when it's valid @Override public CacheHelper getReaderCacheHelper() {     return reader.getReaderCacheHelper(). }
false;public;0;4;;@Override public CacheHelper getCoreCacheHelper() {     return reader.getCoreCacheHelper(). }
false;public;1;21;;@Override public LeafReader wrap(LeafReader reader) {     return new FilterLeafReader(new FieldFilterLeafReader(reader, Collections.singleton(field), true)) {          // FieldFilterLeafReader does not forward cache helpers         // since it considers it is illegal because of the fact         // that it changes the content of the index. However we         // want this behavior for tests, and security plugins         // are careful to only use the cache when it's valid         @Override         public CacheHelper getReaderCacheHelper() {             return reader.getReaderCacheHelper().         }          @Override         public CacheHelper getCoreCacheHelper() {             return reader.getCoreCacheHelper().         }     }. }
false;protected;1;4;;@Override protected DirectoryReader doWrapDirectoryReader(DirectoryReader in) throws IOException {     return new FieldMaskingReader(field, in). }
false;public;0;4;;@Override public CacheHelper getReaderCacheHelper() {     return in.getReaderCacheHelper(). }
