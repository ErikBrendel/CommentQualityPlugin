# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractHttpFixture -> public final void listen() throws IOException, InterruptedException;1528980219;Opens a {@link HttpServer} and start listening on a random port.;public final void listen() throws IOException, InterruptedException {_        final InetSocketAddress socketAddress = new InetSocketAddress(InetAddress.getLoopbackAddress(), 0)__        final HttpServer httpServer = HttpServer.create(socketAddress, 0)___        try {_            _            writeFile(workingDirectory, "pid", ManagementFactory.getRuntimeMXBean().getName().split("@")[0])___            final String addressAndPort = addressToString(httpServer.getAddress())__            _            writeFile(workingDirectory, "ports", addressAndPort)___            httpServer.createContext("/", exchange -> {_                try {_                    Response response___                    _                    final String userAgent = exchange.getRequestHeaders().getFirst("User-Agent")__                    if (userAgent != null_                        && userAgent.startsWith("Apache Ant")_                        && "GET".equals(exchange.getRequestMethod())_                        && "/".equals(exchange.getRequestURI().getPath())) {_                        response = new Response(200, TEXT_PLAIN_CONTENT_TYPE, "OK".getBytes(UTF_8))___                    } else {_                        try {_                            final long requestId = requests.getAndIncrement()__                            final String method = exchange.getRequestMethod()____                            final Map<String, String> headers = new HashMap<>()__                            for (Map.Entry<String, List<String>> header : exchange.getRequestHeaders().entrySet()) {_                                headers.put(header.getKey(), exchange.getRequestHeaders().getFirst(header.getKey()))__                            }__                            final ByteArrayOutputStream body = new ByteArrayOutputStream()__                            try (InputStream requestBody = exchange.getRequestBody()) {_                                final byte[] buffer = new byte[1024]__                                int i__                                while ((i = requestBody.read(buffer, 0, buffer.length)) != -1) {_                                    body.write(buffer, 0, i)__                                }_                                body.flush()__                            }__                            final Request request = new Request(requestId, method, exchange.getRequestURI(), headers, body.toByteArray())__                            response = handle(request)___                        } catch (Exception e) {_                            final String error = e.getMessage() != null ? e.getMessage() : "Exception when processing the request"__                            response = new Response(500, singletonMap("Content-Type", "text/plain_ charset=utf-8"), error.getBytes(UTF_8))__                        }_                    }__                    if (response == null) {_                        response = new Response(400, TEXT_PLAIN_CONTENT_TYPE, EMPTY_BYTE)__                    }__                    response.headers.forEach((k, v) -> exchange.getResponseHeaders().put(k, singletonList(v)))__                    if (response.body.length > 0) {_                        exchange.sendResponseHeaders(response.status, response.body.length)__                        exchange.getResponseBody().write(response.body)__                    } else {_                        exchange.sendResponseHeaders(response.status, -1)__                    }_                } finally {_                    exchange.close()__                }_            })__            httpServer.start()___            _            Thread.sleep(Long.MAX_VALUE)___        } finally {_            httpServer.stop(0)__        }_    };opens,a,link,http,server,and,start,listening,on,a,random,port;public,final,void,listen,throws,ioexception,interrupted,exception,final,inet,socket,address,socket,address,new,inet,socket,address,inet,address,get,loopback,address,0,final,http,server,http,server,http,server,create,socket,address,0,try,write,file,working,directory,pid,management,factory,get,runtime,mxbean,get,name,split,0,final,string,address,and,port,address,to,string,http,server,get,address,write,file,working,directory,ports,address,and,port,http,server,create,context,exchange,try,response,response,final,string,user,agent,exchange,get,request,headers,get,first,user,agent,if,user,agent,null,user,agent,starts,with,apache,ant,get,equals,exchange,get,request,method,equals,exchange,get,request,uri,get,path,response,new,response,200,ok,get,bytes,else,try,final,long,request,id,requests,get,and,increment,final,string,method,exchange,get,request,method,final,map,string,string,headers,new,hash,map,for,map,entry,string,list,string,header,exchange,get,request,headers,entry,set,headers,put,header,get,key,exchange,get,request,headers,get,first,header,get,key,final,byte,array,output,stream,body,new,byte,array,output,stream,try,input,stream,request,body,exchange,get,request,body,final,byte,buffer,new,byte,1024,int,i,while,i,request,body,read,buffer,0,buffer,length,1,body,write,buffer,0,i,body,flush,final,request,request,new,request,request,id,method,exchange,get,request,uri,headers,body,to,byte,array,response,handle,request,catch,exception,e,final,string,error,e,get,message,null,e,get,message,exception,when,processing,the,request,response,new,response,500,singleton,map,content,type,text,plain,charset,utf,8,error,get,bytes,if,response,null,response,new,response,400,response,headers,for,each,k,v,exchange,get,response,headers,put,k,singleton,list,v,if,response,body,length,0,exchange,send,response,headers,response,status,response,body,length,exchange,get,response,body,write,response,body,else,exchange,send,response,headers,response,status,1,finally,exchange,close,http,server,start,thread,sleep,long,finally,http,server,stop,0
AbstractHttpFixture -> public final void listen() throws IOException, InterruptedException;1534338685;Opens a {@link HttpServer} and start listening on a random port.;public final void listen() throws IOException, InterruptedException {_        final InetSocketAddress socketAddress = new InetSocketAddress(InetAddress.getLoopbackAddress(), 0)__        final HttpServer httpServer = HttpServer.create(socketAddress, 0)___        try {_            _            writeFile(workingDirectory, "pid", ManagementFactory.getRuntimeMXBean().getName().split("@")[0])___            final String addressAndPort = addressToString(httpServer.getAddress())__            _            writeFile(workingDirectory, "ports", addressAndPort)___            httpServer.createContext("/", exchange -> {_                try {_                    Response response___                    _                    final String userAgent = exchange.getRequestHeaders().getFirst("User-Agent")__                    if (userAgent != null_                        && userAgent.startsWith("Apache Ant")_                        && "GET".equals(exchange.getRequestMethod())_                        && "/".equals(exchange.getRequestURI().getPath())) {_                        response = new Response(200, TEXT_PLAIN_CONTENT_TYPE, "OK".getBytes(UTF_8))___                    } else {_                        try {_                            final long requestId = requests.getAndIncrement()__                            final String method = exchange.getRequestMethod()____                            final Map<String, String> headers = new HashMap<>()__                            for (Map.Entry<String, List<String>> header : exchange.getRequestHeaders().entrySet()) {_                                headers.put(header.getKey(), exchange.getRequestHeaders().getFirst(header.getKey()))__                            }__                            final ByteArrayOutputStream body = new ByteArrayOutputStream()__                            try (InputStream requestBody = exchange.getRequestBody()) {_                                final byte[] buffer = new byte[1024]__                                int i__                                while ((i = requestBody.read(buffer, 0, buffer.length)) != -1) {_                                    body.write(buffer, 0, i)__                                }_                                body.flush()__                            }__                            final Request request = new Request(requestId, method, exchange.getRequestURI(), headers, body.toByteArray())__                            response = handle(request)___                        } catch (Exception e) {_                            final String error = e.getMessage() != null ? e.getMessage() : "Exception when processing the request"__                            response = new Response(500, singletonMap("Content-Type", "text/plain_ charset=utf-8"), error.getBytes(UTF_8))__                        }_                    }__                    if (response == null) {_                        response = new Response(400, TEXT_PLAIN_CONTENT_TYPE, EMPTY_BYTE)__                    }__                    response.headers.forEach((k, v) -> exchange.getResponseHeaders().put(k, singletonList(v)))__                    if (response.body.length > 0) {_                        exchange.sendResponseHeaders(response.status, response.body.length)__                        exchange.getResponseBody().write(response.body)__                    } else {_                        exchange.sendResponseHeaders(response.status, -1)__                    }_                } finally {_                    exchange.close()__                }_            })__            httpServer.start()___            _            Thread.sleep(Long.MAX_VALUE)___        } finally {_            httpServer.stop(0)__        }_    };opens,a,link,http,server,and,start,listening,on,a,random,port;public,final,void,listen,throws,ioexception,interrupted,exception,final,inet,socket,address,socket,address,new,inet,socket,address,inet,address,get,loopback,address,0,final,http,server,http,server,http,server,create,socket,address,0,try,write,file,working,directory,pid,management,factory,get,runtime,mxbean,get,name,split,0,final,string,address,and,port,address,to,string,http,server,get,address,write,file,working,directory,ports,address,and,port,http,server,create,context,exchange,try,response,response,final,string,user,agent,exchange,get,request,headers,get,first,user,agent,if,user,agent,null,user,agent,starts,with,apache,ant,get,equals,exchange,get,request,method,equals,exchange,get,request,uri,get,path,response,new,response,200,ok,get,bytes,else,try,final,long,request,id,requests,get,and,increment,final,string,method,exchange,get,request,method,final,map,string,string,headers,new,hash,map,for,map,entry,string,list,string,header,exchange,get,request,headers,entry,set,headers,put,header,get,key,exchange,get,request,headers,get,first,header,get,key,final,byte,array,output,stream,body,new,byte,array,output,stream,try,input,stream,request,body,exchange,get,request,body,final,byte,buffer,new,byte,1024,int,i,while,i,request,body,read,buffer,0,buffer,length,1,body,write,buffer,0,i,body,flush,final,request,request,new,request,request,id,method,exchange,get,request,uri,headers,body,to,byte,array,response,handle,request,catch,exception,e,final,string,error,e,get,message,null,e,get,message,exception,when,processing,the,request,response,new,response,500,singleton,map,content,type,text,plain,charset,utf,8,error,get,bytes,if,response,null,response,new,response,400,response,headers,for,each,k,v,exchange,get,response,headers,put,k,singleton,list,v,if,response,body,length,0,exchange,send,response,headers,response,status,response,body,length,exchange,get,response,body,write,response,body,else,exchange,send,response,headers,response,status,1,finally,exchange,close,http,server,start,thread,sleep,long,finally,http,server,stop,0
AbstractHttpFixture -> public final void listen() throws IOException, InterruptedException;1537300661;Opens a {@link HttpServer} and start listening on a random port.;public final void listen() throws IOException, InterruptedException {_        final InetSocketAddress socketAddress = new InetSocketAddress(InetAddress.getLoopbackAddress(), 0)__        final HttpServer httpServer = HttpServer.create(socketAddress, 0)___        try {_            _            writeFile(workingDirectory, "pid", ManagementFactory.getRuntimeMXBean().getName().split("@")[0])___            final String addressAndPort = addressToString(httpServer.getAddress())__            _            writeFile(workingDirectory, "ports", addressAndPort)___            httpServer.createContext("/", exchange -> {_                try {_                    Response response___                    _                    final String userAgent = exchange.getRequestHeaders().getFirst("User-Agent")__                    if (userAgent != null_                        && userAgent.startsWith("Apache Ant")_                        && "GET".equals(exchange.getRequestMethod())_                        && "/".equals(exchange.getRequestURI().getPath())) {_                        response = new Response(200, TEXT_PLAIN_CONTENT_TYPE, "OK".getBytes(UTF_8))___                    } else {_                        try {_                            final long requestId = requests.getAndIncrement()__                            final String method = exchange.getRequestMethod()____                            final Map<String, String> headers = new HashMap<>()__                            for (Map.Entry<String, List<String>> header : exchange.getRequestHeaders().entrySet()) {_                                headers.put(header.getKey(), exchange.getRequestHeaders().getFirst(header.getKey()))__                            }__                            final ByteArrayOutputStream body = new ByteArrayOutputStream()__                            try (InputStream requestBody = exchange.getRequestBody()) {_                                final byte[] buffer = new byte[1024]__                                int i__                                while ((i = requestBody.read(buffer, 0, buffer.length)) != -1) {_                                    body.write(buffer, 0, i)__                                }_                                body.flush()__                            }__                            final Request request = new Request(requestId, method, exchange.getRequestURI(), headers, body.toByteArray())__                            response = handle(request)___                        } catch (Exception e) {_                            final String error = e.getMessage() != null ? e.getMessage() : "Exception when processing the request"__                            response = new Response(500, singletonMap("Content-Type", "text/plain_ charset=utf-8"), error.getBytes(UTF_8))__                        }_                    }__                    if (response == null) {_                        response = new Response(400, TEXT_PLAIN_CONTENT_TYPE, EMPTY_BYTE)__                    }__                    response.headers.forEach((k, v) -> exchange.getResponseHeaders().put(k, singletonList(v)))__                    if (response.body.length > 0) {_                        exchange.sendResponseHeaders(response.status, response.body.length)__                        exchange.getResponseBody().write(response.body)__                    } else {_                        exchange.sendResponseHeaders(response.status, -1)__                    }_                } finally {_                    exchange.close()__                }_            })__            httpServer.start()___            _            Thread.sleep(Long.MAX_VALUE)___        } finally {_            httpServer.stop(0)__        }_    };opens,a,link,http,server,and,start,listening,on,a,random,port;public,final,void,listen,throws,ioexception,interrupted,exception,final,inet,socket,address,socket,address,new,inet,socket,address,inet,address,get,loopback,address,0,final,http,server,http,server,http,server,create,socket,address,0,try,write,file,working,directory,pid,management,factory,get,runtime,mxbean,get,name,split,0,final,string,address,and,port,address,to,string,http,server,get,address,write,file,working,directory,ports,address,and,port,http,server,create,context,exchange,try,response,response,final,string,user,agent,exchange,get,request,headers,get,first,user,agent,if,user,agent,null,user,agent,starts,with,apache,ant,get,equals,exchange,get,request,method,equals,exchange,get,request,uri,get,path,response,new,response,200,ok,get,bytes,else,try,final,long,request,id,requests,get,and,increment,final,string,method,exchange,get,request,method,final,map,string,string,headers,new,hash,map,for,map,entry,string,list,string,header,exchange,get,request,headers,entry,set,headers,put,header,get,key,exchange,get,request,headers,get,first,header,get,key,final,byte,array,output,stream,body,new,byte,array,output,stream,try,input,stream,request,body,exchange,get,request,body,final,byte,buffer,new,byte,1024,int,i,while,i,request,body,read,buffer,0,buffer,length,1,body,write,buffer,0,i,body,flush,final,request,request,new,request,request,id,method,exchange,get,request,uri,headers,body,to,byte,array,response,handle,request,catch,exception,e,final,string,error,e,get,message,null,e,get,message,exception,when,processing,the,request,response,new,response,500,singleton,map,content,type,text,plain,charset,utf,8,error,get,bytes,if,response,null,response,new,response,400,response,headers,for,each,k,v,exchange,get,response,headers,put,k,singleton,list,v,if,response,body,length,0,exchange,send,response,headers,response,status,response,body,length,exchange,get,response,body,write,response,body,else,exchange,send,response,headers,response,status,1,finally,exchange,close,http,server,start,thread,sleep,long,finally,http,server,stop,0
