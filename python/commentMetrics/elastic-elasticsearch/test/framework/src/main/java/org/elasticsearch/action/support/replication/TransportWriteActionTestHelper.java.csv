commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void onSuccess(boolean forcedRefresh) {     latch.countDown(). }
false;public;1;4;;@Override public void onFailure(Exception ex) {     throw new AssertionError(ex). }
false;public,static;4;23;;public static void performPostWriteActions(final IndexShard indexShard, final WriteRequest<?> request, @Nullable final Translog.Location location, final Logger logger) {     final CountDownLatch latch = new CountDownLatch(1).     TransportWriteAction.RespondingWriteResult writerResult = new TransportWriteAction.RespondingWriteResult() {          @Override         public void onSuccess(boolean forcedRefresh) {             latch.countDown().         }          @Override         public void onFailure(Exception ex) {             throw new AssertionError(ex).         }     }.     new TransportWriteAction.AsyncAfterWriteAction(indexShard, request, location, writerResult, logger).run().     try {         latch.await().     } catch (InterruptedException e) {         throw new AssertionError(e).     } }
