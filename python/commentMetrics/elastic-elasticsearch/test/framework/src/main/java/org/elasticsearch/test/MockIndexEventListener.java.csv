commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public List<Setting<?>> getSettings() {     return Arrays.asList(INDEX_FAIL). }
false;public;1;4;;@Override public void onIndexModule(IndexModule module) {     module.addIndexEventListener(listener). }
false;public;0;4;;@Override public Collection<Module> createGuiceModules() {     return Collections.singleton(binder -> binder.bind(TestEventListener.class).toInstance(listener)). }
false;public;1;3;;public void setNewDelegate(IndexEventListener listener) {     delegate = listener == null ? new IndexEventListener() {     } : listener. }
false;public;3;4;;@Override public void shardRoutingChanged(IndexShard indexShard, @Nullable ShardRouting oldRouting, ShardRouting newRouting) {     delegate.shardRoutingChanged(indexShard, oldRouting, newRouting). }
false;public;1;4;;@Override public void afterIndexShardCreated(IndexShard indexShard) {     delegate.afterIndexShardCreated(indexShard). }
false;public;1;4;;@Override public void afterIndexShardStarted(IndexShard indexShard) {     delegate.afterIndexShardStarted(indexShard). }
false;public;3;4;;@Override public void beforeIndexShardClosed(ShardId shardId, @Nullable IndexShard indexShard, Settings indexSettings) {     delegate.beforeIndexShardClosed(shardId, indexShard, indexSettings). }
false;public;3;4;;@Override public void afterIndexShardClosed(ShardId shardId, @Nullable IndexShard indexShard, Settings indexSettings) {     delegate.afterIndexShardClosed(shardId, indexShard, indexSettings). }
false;public;4;5;;@Override public void indexShardStateChanged(IndexShard indexShard, @Nullable IndexShardState previousState, IndexShardState currentState, @Nullable String reason) {     delegate.indexShardStateChanged(indexShard, previousState, currentState, reason). }
false;public;1;4;;@Override public void onShardInactive(IndexShard indexShard) {     delegate.onShardInactive(indexShard). }
false;public;2;4;;@Override public void beforeIndexCreated(Index index, Settings indexSettings) {     delegate.beforeIndexCreated(index, indexSettings). }
false;public;1;4;;@Override public void afterIndexCreated(IndexService indexService) {     delegate.afterIndexCreated(indexService). }
false;public;2;4;;@Override public void beforeIndexShardCreated(ShardId shardId, Settings indexSettings) {     delegate.beforeIndexShardCreated(shardId, indexSettings). }
false;public;2;4;;@Override public void beforeIndexRemoved(IndexService indexService, IndexRemovalReason reason) {     delegate.beforeIndexRemoved(indexService, reason). }
false;public;3;4;;@Override public void afterIndexRemoved(Index index, IndexSettings indexSettings, IndexRemovalReason reason) {     delegate.afterIndexRemoved(index, indexSettings, reason). }
false;public;2;4;;@Override public void beforeIndexShardDeleted(ShardId shardId, Settings indexSettings) {     delegate.beforeIndexShardDeleted(shardId, indexSettings). }
false;public;2;4;;@Override public void afterIndexShardDeleted(ShardId shardId, Settings indexSettings) {     delegate.afterIndexShardDeleted(shardId, indexSettings). }
false;public;2;4;;@Override public void beforeIndexAddedToCluster(Index index, Settings indexSettings) {     delegate.beforeIndexAddedToCluster(index, indexSettings). }
