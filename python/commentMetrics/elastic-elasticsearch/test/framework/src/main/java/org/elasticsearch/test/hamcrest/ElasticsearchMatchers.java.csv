commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected boolean matchesSafely(SearchHit searchHit) {     return searchHit.getId().equals(id). }
false;public;2;4;;@Override public void describeMismatchSafely(final SearchHit searchHit, final Description mismatchDescription) {     mismatchDescription.appendText(" was ").appendValue(searchHit.getId()). }
false;public;1;4;;@Override public void describeTo(final Description description) {     description.appendText("searchHit id should be ").appendValue(id). }
false;public;1;4;;@Override public boolean matchesSafely(final SearchHit searchHit) {     return searchHit.getType().equals(type). }
false;public;2;4;;@Override public void describeMismatchSafely(final SearchHit searchHit, final Description mismatchDescription) {     mismatchDescription.appendText(" was ").appendValue(searchHit.getType()). }
false;public;1;4;;@Override public void describeTo(final Description description) {     description.appendText("searchHit type should be ").appendValue(type). }
false;public;1;4;;@Override public boolean matchesSafely(final SearchHit searchHit) {     return searchHit.getIndex().equals(index). }
false;public;2;4;;@Override public void describeMismatchSafely(final SearchHit searchHit, final Description mismatchDescription) {     mismatchDescription.appendText(" was ").appendValue(searchHit.getIndex()). }
false;public;1;4;;@Override public void describeTo(final Description description) {     description.appendText("searchHit index should be ").appendValue(index). }
false;protected;1;4;;@Override protected boolean matchesSafely(SearchHit searchHit) {     return searchHit.getScore() == score. }
false;public;2;4;;@Override public void describeMismatchSafely(final SearchHit searchHit, final Description mismatchDescription) {     mismatchDescription.appendText(" was ").appendValue(searchHit.getScore()). }
false;public;1;4;;@Override public void describeTo(final Description description) {     description.appendText("searchHit score should be ").appendValue(score). }
false;protected;1;4;;@Override protected V featureValueOf(T actual) {     return property.apply(actual). }
true;public,static;2;3;/**  * @param valueMatcher The matcher to apply to the property  * @param property     The lambda to fetch property  */ ;/**  * @param valueMatcher The matcher to apply to the property  * @param property     The lambda to fetch property  */ public static <T, V> CombinableMatcher<T> hasProperty(Function<? super T, ? extends V> property, Matcher<V> valueMatcher) {     return new CombinableMatcher<>(new HasPropertyLambdaMatcher<>(valueMatcher, property)). }
