# id;timestamp;commentText;codeText;commentWords;codeWords
DoSection -> public void setExpectedWarningHeaders(List<String> expectedWarningHeaders);1524684173;Set the warning headers that we expect from this response. If the headers don't match exactly this request is considered to have_failed. Defaults to emptyList.;public void setExpectedWarningHeaders(List<String> expectedWarningHeaders) {_        this.expectedWarningHeaders = expectedWarningHeaders__    };set,the,warning,headers,that,we,expect,from,this,response,if,the,headers,don,t,match,exactly,this,request,is,considered,to,have,failed,defaults,to,empty,list;public,void,set,expected,warning,headers,list,string,expected,warning,headers,this,expected,warning,headers,expected,warning,headers
DoSection -> public void setExpectedWarningHeaders(List<String> expectedWarningHeaders);1526449283;Set the warning headers that we expect from this response. If the headers don't match exactly this request is considered to have_failed. Defaults to emptyList.;public void setExpectedWarningHeaders(List<String> expectedWarningHeaders) {_        this.expectedWarningHeaders = expectedWarningHeaders__    };set,the,warning,headers,that,we,expect,from,this,response,if,the,headers,don,t,match,exactly,this,request,is,considered,to,have,failed,defaults,to,empty,list;public,void,set,expected,warning,headers,list,string,expected,warning,headers,this,expected,warning,headers,expected,warning,headers
DoSection -> public void setExpectedWarningHeaders(List<String> expectedWarningHeaders);1528762805;Set the warning headers that we expect from this response. If the headers don't match exactly this request is considered to have_failed. Defaults to emptyList.;public void setExpectedWarningHeaders(List<String> expectedWarningHeaders) {_        this.expectedWarningHeaders = expectedWarningHeaders__    };set,the,warning,headers,that,we,expect,from,this,response,if,the,headers,don,t,match,exactly,this,request,is,considered,to,have,failed,defaults,to,empty,list;public,void,set,expected,warning,headers,list,string,expected,warning,headers,this,expected,warning,headers,expected,warning,headers
DoSection -> public void setExpectedWarningHeaders(List<String> expectedWarningHeaders);1529076503;Set the warning headers that we expect from this response. If the headers don't match exactly this request is considered to have_failed. Defaults to emptyList.;public void setExpectedWarningHeaders(List<String> expectedWarningHeaders) {_        this.expectedWarningHeaders = expectedWarningHeaders__    };set,the,warning,headers,that,we,expect,from,this,response,if,the,headers,don,t,match,exactly,this,request,is,considered,to,have,failed,defaults,to,empty,list;public,void,set,expected,warning,headers,list,string,expected,warning,headers,this,expected,warning,headers,expected,warning,headers
DoSection -> public void setExpectedWarningHeaders(List<String> expectedWarningHeaders);1531179852;Set the warning headers that we expect from this response. If the headers don't match exactly this request is considered to have_failed. Defaults to emptyList.;public void setExpectedWarningHeaders(List<String> expectedWarningHeaders) {_        this.expectedWarningHeaders = expectedWarningHeaders__    };set,the,warning,headers,that,we,expect,from,this,response,if,the,headers,don,t,match,exactly,this,request,is,considered,to,have,failed,defaults,to,empty,list;public,void,set,expected,warning,headers,list,string,expected,warning,headers,this,expected,warning,headers,expected,warning,headers
DoSection -> public void setExpectedWarningHeaders(List<String> expectedWarningHeaders);1534176840;Set the warning headers that we expect from this response. If the headers don't match exactly this request is considered to have_failed. Defaults to emptyList.;public void setExpectedWarningHeaders(List<String> expectedWarningHeaders) {_        this.expectedWarningHeaders = expectedWarningHeaders__    };set,the,warning,headers,that,we,expect,from,this,response,if,the,headers,don,t,match,exactly,this,request,is,considered,to,have,failed,defaults,to,empty,list;public,void,set,expected,warning,headers,list,string,expected,warning,headers,this,expected,warning,headers,expected,warning,headers
DoSection -> public void setExpectedWarningHeaders(List<String> expectedWarningHeaders);1540486836;Set the warning headers that we expect from this response. If the headers don't match exactly this request is considered to have_failed. Defaults to emptyList.;public void setExpectedWarningHeaders(List<String> expectedWarningHeaders) {_        this.expectedWarningHeaders = expectedWarningHeaders__    };set,the,warning,headers,that,we,expect,from,this,response,if,the,headers,don,t,match,exactly,this,request,is,considered,to,have,failed,defaults,to,empty,list;public,void,set,expected,warning,headers,list,string,expected,warning,headers,this,expected,warning,headers,expected,warning,headers
DoSection -> public List<String> getExpectedWarningHeaders();1524684173;Warning headers that we expect from this response. If the headers don't match exactly this request is considered to have failed._Defaults to emptyList.;public List<String> getExpectedWarningHeaders() {_        return expectedWarningHeaders__    };warning,headers,that,we,expect,from,this,response,if,the,headers,don,t,match,exactly,this,request,is,considered,to,have,failed,defaults,to,empty,list;public,list,string,get,expected,warning,headers,return,expected,warning,headers
DoSection -> public List<String> getExpectedWarningHeaders();1526449283;Warning headers that we expect from this response. If the headers don't match exactly this request is considered to have failed._Defaults to emptyList.;public List<String> getExpectedWarningHeaders() {_        return expectedWarningHeaders__    };warning,headers,that,we,expect,from,this,response,if,the,headers,don,t,match,exactly,this,request,is,considered,to,have,failed,defaults,to,empty,list;public,list,string,get,expected,warning,headers,return,expected,warning,headers
DoSection -> public List<String> getExpectedWarningHeaders();1528762805;Warning headers that we expect from this response. If the headers don't match exactly this request is considered to have failed._Defaults to emptyList.;public List<String> getExpectedWarningHeaders() {_        return expectedWarningHeaders__    };warning,headers,that,we,expect,from,this,response,if,the,headers,don,t,match,exactly,this,request,is,considered,to,have,failed,defaults,to,empty,list;public,list,string,get,expected,warning,headers,return,expected,warning,headers
DoSection -> public List<String> getExpectedWarningHeaders();1529076503;Warning headers that we expect from this response. If the headers don't match exactly this request is considered to have failed._Defaults to emptyList.;public List<String> getExpectedWarningHeaders() {_        return expectedWarningHeaders__    };warning,headers,that,we,expect,from,this,response,if,the,headers,don,t,match,exactly,this,request,is,considered,to,have,failed,defaults,to,empty,list;public,list,string,get,expected,warning,headers,return,expected,warning,headers
DoSection -> public List<String> getExpectedWarningHeaders();1531179852;Warning headers that we expect from this response. If the headers don't match exactly this request is considered to have failed._Defaults to emptyList.;public List<String> getExpectedWarningHeaders() {_        return expectedWarningHeaders__    };warning,headers,that,we,expect,from,this,response,if,the,headers,don,t,match,exactly,this,request,is,considered,to,have,failed,defaults,to,empty,list;public,list,string,get,expected,warning,headers,return,expected,warning,headers
DoSection -> public List<String> getExpectedWarningHeaders();1534176840;Warning headers that we expect from this response. If the headers don't match exactly this request is considered to have failed._Defaults to emptyList.;public List<String> getExpectedWarningHeaders() {_        return expectedWarningHeaders__    };warning,headers,that,we,expect,from,this,response,if,the,headers,don,t,match,exactly,this,request,is,considered,to,have,failed,defaults,to,empty,list;public,list,string,get,expected,warning,headers,return,expected,warning,headers
DoSection -> public List<String> getExpectedWarningHeaders();1540486836;Warning headers that we expect from this response. If the headers don't match exactly this request is considered to have failed._Defaults to emptyList.;public List<String> getExpectedWarningHeaders() {_        return expectedWarningHeaders__    };warning,headers,that,we,expect,from,this,response,if,the,headers,don,t,match,exactly,this,request,is,considered,to,have,failed,defaults,to,empty,list;public,list,string,get,expected,warning,headers,return,expected,warning,headers
DoSection -> List<String> getExpectedWarningHeaders();1540912197;Warning headers that we expect from this response. If the headers don't match exactly this request is considered to have failed._Defaults to emptyList.;List<String> getExpectedWarningHeaders() {_        return expectedWarningHeaders__    };warning,headers,that,we,expect,from,this,response,if,the,headers,don,t,match,exactly,this,request,is,considered,to,have,failed,defaults,to,empty,list;list,string,get,expected,warning,headers,return,expected,warning,headers
DoSection -> List<String> getExpectedWarningHeaders();1541592065;Warning headers that we expect from this response. If the headers don't match exactly this request is considered to have failed._Defaults to emptyList.;List<String> getExpectedWarningHeaders() {_        return expectedWarningHeaders__    };warning,headers,that,we,expect,from,this,response,if,the,headers,don,t,match,exactly,this,request,is,considered,to,have,failed,defaults,to,empty,list;list,string,get,expected,warning,headers,return,expected,warning,headers
DoSection -> List<String> getExpectedWarningHeaders();1542138961;Warning headers that we expect from this response. If the headers don't match exactly this request is considered to have failed._Defaults to emptyList.;List<String> getExpectedWarningHeaders() {_        return expectedWarningHeaders__    };warning,headers,that,we,expect,from,this,response,if,the,headers,don,t,match,exactly,this,request,is,considered,to,have,failed,defaults,to,empty,list;list,string,get,expected,warning,headers,return,expected,warning,headers
DoSection -> List<String> getExpectedWarningHeaders();1550504256;Warning headers that we expect from this response. If the headers don't match exactly this request is considered to have failed._Defaults to emptyList.;List<String> getExpectedWarningHeaders() {_        return expectedWarningHeaders__    };warning,headers,that,we,expect,from,this,response,if,the,headers,don,t,match,exactly,this,request,is,considered,to,have,failed,defaults,to,empty,list;list,string,get,expected,warning,headers,return,expected,warning,headers
DoSection -> void checkWarningHeaders(final List<String> warningHeaders, final Version masterVersion);1526449283;Check that the response contains only the warning headers that we expect.;void checkWarningHeaders(final List<String> warningHeaders, final Version masterVersion) {_        final List<String> unexpected = new ArrayList<>()__        final List<String> unmatched = new ArrayList<>()__        final List<String> missing = new ArrayList<>()__        _        final Set<String> expected =_                new LinkedHashSet<>(expectedWarningHeaders.stream().map(DeprecationLogger::escapeAndEncode).collect(Collectors.toList()))__        for (final String header : warningHeaders) {_            final Matcher matcher = WARNING_HEADER_PATTERN.matcher(header)__            final boolean matches = matcher.matches()__            if (matches) {_                final String message = matcher.group(1)__                _                if (masterVersion.before(Version.V_7_0_0_alpha1)_                        && message.equals("the default number of shards will change from [5] to [1] in 7.0.0_ "_                        + "if you wish to continue using the default of [5] shards, "_                        + "you must manage this on the create index request or with an index template")) {_                    _                } else {_                    if (expected.remove(message) == false) {_                        unexpected.add(header)__                    }_                }_            } else {_                unmatched.add(header)__            }_        }_        if (expected.isEmpty() == false) {_            for (final String header : expected) {_                missing.add(header)__            }_        }__        if (unexpected.isEmpty() == false || unmatched.isEmpty() == false || missing.isEmpty() == false) {_            final StringBuilder failureMessage = new StringBuilder()__            appendBadHeaders(failureMessage, unexpected, "got unexpected warning header" + (unexpected.size() > 1 ? "s" : ""))__            appendBadHeaders(failureMessage, unmatched, "got unmatched warning header" + (unmatched.size() > 1 ? "s" : ""))__            appendBadHeaders(failureMessage, missing, "did not get expected warning header" + (missing.size() > 1 ? "s" : ""))__            fail(failureMessage.toString())__        }__    };check,that,the,response,contains,only,the,warning,headers,that,we,expect;void,check,warning,headers,final,list,string,warning,headers,final,version,master,version,final,list,string,unexpected,new,array,list,final,list,string,unmatched,new,array,list,final,list,string,missing,new,array,list,final,set,string,expected,new,linked,hash,set,expected,warning,headers,stream,map,deprecation,logger,escape,and,encode,collect,collectors,to,list,for,final,string,header,warning,headers,final,matcher,matcher,matcher,header,final,boolean,matches,matcher,matches,if,matches,final,string,message,matcher,group,1,if,master,version,before,version,message,equals,the,default,number,of,shards,will,change,from,5,to,1,in,7,0,0,if,you,wish,to,continue,using,the,default,of,5,shards,you,must,manage,this,on,the,create,index,request,or,with,an,index,template,else,if,expected,remove,message,false,unexpected,add,header,else,unmatched,add,header,if,expected,is,empty,false,for,final,string,header,expected,missing,add,header,if,unexpected,is,empty,false,unmatched,is,empty,false,missing,is,empty,false,final,string,builder,failure,message,new,string,builder,append,bad,headers,failure,message,unexpected,got,unexpected,warning,header,unexpected,size,1,s,append,bad,headers,failure,message,unmatched,got,unmatched,warning,header,unmatched,size,1,s,append,bad,headers,failure,message,missing,did,not,get,expected,warning,header,missing,size,1,s,fail,failure,message,to,string
DoSection -> void checkWarningHeaders(final List<String> warningHeaders, final Version masterVersion);1528762805;Check that the response contains only the warning headers that we expect.;void checkWarningHeaders(final List<String> warningHeaders, final Version masterVersion) {_        final List<String> unexpected = new ArrayList<>()__        final List<String> unmatched = new ArrayList<>()__        final List<String> missing = new ArrayList<>()__        _        final Set<String> expected =_                new LinkedHashSet<>(expectedWarningHeaders.stream().map(DeprecationLogger::escapeAndEncode).collect(Collectors.toList()))__        for (final String header : warningHeaders) {_            final Matcher matcher = WARNING_HEADER_PATTERN.matcher(header)__            final boolean matches = matcher.matches()__            if (matches) {_                final String message = matcher.group(1)__                _                if (masterVersion.before(Version.V_7_0_0_alpha1)_                        && message.equals("the default number of shards will change from [5] to [1] in 7.0.0_ "_                        + "if you wish to continue using the default of [5] shards, "_                        + "you must manage this on the create index request or with an index template")) {_                    _                } else {_                    if (expected.remove(message) == false) {_                        unexpected.add(header)__                    }_                }_            } else {_                unmatched.add(header)__            }_        }_        if (expected.isEmpty() == false) {_            for (final String header : expected) {_                missing.add(header)__            }_        }__        if (unexpected.isEmpty() == false || unmatched.isEmpty() == false || missing.isEmpty() == false) {_            final StringBuilder failureMessage = new StringBuilder()__            appendBadHeaders(failureMessage, unexpected, "got unexpected warning header" + (unexpected.size() > 1 ? "s" : ""))__            appendBadHeaders(failureMessage, unmatched, "got unmatched warning header" + (unmatched.size() > 1 ? "s" : ""))__            appendBadHeaders(failureMessage, missing, "did not get expected warning header" + (missing.size() > 1 ? "s" : ""))__            fail(failureMessage.toString())__        }__    };check,that,the,response,contains,only,the,warning,headers,that,we,expect;void,check,warning,headers,final,list,string,warning,headers,final,version,master,version,final,list,string,unexpected,new,array,list,final,list,string,unmatched,new,array,list,final,list,string,missing,new,array,list,final,set,string,expected,new,linked,hash,set,expected,warning,headers,stream,map,deprecation,logger,escape,and,encode,collect,collectors,to,list,for,final,string,header,warning,headers,final,matcher,matcher,matcher,header,final,boolean,matches,matcher,matches,if,matches,final,string,message,matcher,group,1,if,master,version,before,version,message,equals,the,default,number,of,shards,will,change,from,5,to,1,in,7,0,0,if,you,wish,to,continue,using,the,default,of,5,shards,you,must,manage,this,on,the,create,index,request,or,with,an,index,template,else,if,expected,remove,message,false,unexpected,add,header,else,unmatched,add,header,if,expected,is,empty,false,for,final,string,header,expected,missing,add,header,if,unexpected,is,empty,false,unmatched,is,empty,false,missing,is,empty,false,final,string,builder,failure,message,new,string,builder,append,bad,headers,failure,message,unexpected,got,unexpected,warning,header,unexpected,size,1,s,append,bad,headers,failure,message,unmatched,got,unmatched,warning,header,unmatched,size,1,s,append,bad,headers,failure,message,missing,did,not,get,expected,warning,header,missing,size,1,s,fail,failure,message,to,string
DoSection -> void checkWarningHeaders(final List<String> warningHeaders, final Version masterVersion);1529076503;Check that the response contains only the warning headers that we expect.;void checkWarningHeaders(final List<String> warningHeaders, final Version masterVersion) {_        final List<String> unexpected = new ArrayList<>()__        final List<String> unmatched = new ArrayList<>()__        final List<String> missing = new ArrayList<>()__        _        final Set<String> expected =_                new LinkedHashSet<>(expectedWarningHeaders.stream().map(DeprecationLogger::escapeAndEncode).collect(Collectors.toList()))__        for (final String header : warningHeaders) {_            final Matcher matcher = WARNING_HEADER_PATTERN.matcher(header)__            final boolean matches = matcher.matches()__            if (matches) {_                final String message = matcher.group(1)__                _                if (masterVersion.before(Version.V_7_0_0_alpha1)_                        && message.equals("the default number of shards will change from [5] to [1] in 7.0.0_ "_                        + "if you wish to continue using the default of [5] shards, "_                        + "you must manage this on the create index request or with an index template")) {_                    _                } else {_                    if (expected.remove(message) == false) {_                        unexpected.add(header)__                    }_                }_            } else {_                unmatched.add(header)__            }_        }_        if (expected.isEmpty() == false) {_            for (final String header : expected) {_                missing.add(header)__            }_        }__        if (unexpected.isEmpty() == false || unmatched.isEmpty() == false || missing.isEmpty() == false) {_            final StringBuilder failureMessage = new StringBuilder()__            appendBadHeaders(failureMessage, unexpected, "got unexpected warning header" + (unexpected.size() > 1 ? "s" : ""))__            appendBadHeaders(failureMessage, unmatched, "got unmatched warning header" + (unmatched.size() > 1 ? "s" : ""))__            appendBadHeaders(failureMessage, missing, "did not get expected warning header" + (missing.size() > 1 ? "s" : ""))__            fail(failureMessage.toString())__        }__    };check,that,the,response,contains,only,the,warning,headers,that,we,expect;void,check,warning,headers,final,list,string,warning,headers,final,version,master,version,final,list,string,unexpected,new,array,list,final,list,string,unmatched,new,array,list,final,list,string,missing,new,array,list,final,set,string,expected,new,linked,hash,set,expected,warning,headers,stream,map,deprecation,logger,escape,and,encode,collect,collectors,to,list,for,final,string,header,warning,headers,final,matcher,matcher,matcher,header,final,boolean,matches,matcher,matches,if,matches,final,string,message,matcher,group,1,if,master,version,before,version,message,equals,the,default,number,of,shards,will,change,from,5,to,1,in,7,0,0,if,you,wish,to,continue,using,the,default,of,5,shards,you,must,manage,this,on,the,create,index,request,or,with,an,index,template,else,if,expected,remove,message,false,unexpected,add,header,else,unmatched,add,header,if,expected,is,empty,false,for,final,string,header,expected,missing,add,header,if,unexpected,is,empty,false,unmatched,is,empty,false,missing,is,empty,false,final,string,builder,failure,message,new,string,builder,append,bad,headers,failure,message,unexpected,got,unexpected,warning,header,unexpected,size,1,s,append,bad,headers,failure,message,unmatched,got,unmatched,warning,header,unmatched,size,1,s,append,bad,headers,failure,message,missing,did,not,get,expected,warning,header,missing,size,1,s,fail,failure,message,to,string
DoSection -> void checkWarningHeaders(final List<String> warningHeaders, final Version masterVersion);1531179852;Check that the response contains only the warning headers that we expect.;void checkWarningHeaders(final List<String> warningHeaders, final Version masterVersion) {_        final List<String> unexpected = new ArrayList<>()__        final List<String> unmatched = new ArrayList<>()__        final List<String> missing = new ArrayList<>()__        _        final Set<String> expected =_                new LinkedHashSet<>(expectedWarningHeaders.stream().map(DeprecationLogger::escapeAndEncode).collect(Collectors.toList()))__        for (final String header : warningHeaders) {_            final Matcher matcher = WARNING_HEADER_PATTERN.matcher(header)__            final boolean matches = matcher.matches()__            if (matches) {_                final String message = matcher.group(1)__                _                if (masterVersion.before(Version.V_7_0_0_alpha1)_                        && message.equals("the default number of shards will change from [5] to [1] in 7.0.0_ "_                        + "if you wish to continue using the default of [5] shards, "_                        + "you must manage this on the create index request or with an index template")) {_                    _                } else {_                    if (expected.remove(message) == false) {_                        unexpected.add(header)__                    }_                }_            } else {_                unmatched.add(header)__            }_        }_        if (expected.isEmpty() == false) {_            for (final String header : expected) {_                missing.add(header)__            }_        }__        if (unexpected.isEmpty() == false || unmatched.isEmpty() == false || missing.isEmpty() == false) {_            final StringBuilder failureMessage = new StringBuilder()__            appendBadHeaders(failureMessage, unexpected, "got unexpected warning header" + (unexpected.size() > 1 ? "s" : ""))__            appendBadHeaders(failureMessage, unmatched, "got unmatched warning header" + (unmatched.size() > 1 ? "s" : ""))__            appendBadHeaders(failureMessage, missing, "did not get expected warning header" + (missing.size() > 1 ? "s" : ""))__            fail(failureMessage.toString())__        }__    };check,that,the,response,contains,only,the,warning,headers,that,we,expect;void,check,warning,headers,final,list,string,warning,headers,final,version,master,version,final,list,string,unexpected,new,array,list,final,list,string,unmatched,new,array,list,final,list,string,missing,new,array,list,final,set,string,expected,new,linked,hash,set,expected,warning,headers,stream,map,deprecation,logger,escape,and,encode,collect,collectors,to,list,for,final,string,header,warning,headers,final,matcher,matcher,matcher,header,final,boolean,matches,matcher,matches,if,matches,final,string,message,matcher,group,1,if,master,version,before,version,message,equals,the,default,number,of,shards,will,change,from,5,to,1,in,7,0,0,if,you,wish,to,continue,using,the,default,of,5,shards,you,must,manage,this,on,the,create,index,request,or,with,an,index,template,else,if,expected,remove,message,false,unexpected,add,header,else,unmatched,add,header,if,expected,is,empty,false,for,final,string,header,expected,missing,add,header,if,unexpected,is,empty,false,unmatched,is,empty,false,missing,is,empty,false,final,string,builder,failure,message,new,string,builder,append,bad,headers,failure,message,unexpected,got,unexpected,warning,header,unexpected,size,1,s,append,bad,headers,failure,message,unmatched,got,unmatched,warning,header,unmatched,size,1,s,append,bad,headers,failure,message,missing,did,not,get,expected,warning,header,missing,size,1,s,fail,failure,message,to,string
DoSection -> void checkWarningHeaders(final List<String> warningHeaders, final Version masterVersion);1534176840;Check that the response contains only the warning headers that we expect.;void checkWarningHeaders(final List<String> warningHeaders, final Version masterVersion) {_        final List<String> unexpected = new ArrayList<>()__        final List<String> unmatched = new ArrayList<>()__        final List<String> missing = new ArrayList<>()__        _        final Set<String> expected =_                new LinkedHashSet<>(expectedWarningHeaders.stream().map(DeprecationLogger::escapeAndEncode).collect(Collectors.toList()))__        for (final String header : warningHeaders) {_            final Matcher matcher = WARNING_HEADER_PATTERN.matcher(header)__            final boolean matches = matcher.matches()__            if (matches) {_                final String message = matcher.group(1)__                _                if (masterVersion.before(Version.V_7_0_0_alpha1)_                        && message.equals("the default number of shards will change from [5] to [1] in 7.0.0_ "_                        + "if you wish to continue using the default of [5] shards, "_                        + "you must manage this on the create index request or with an index template")) {_                    _                } else {_                    if (expected.remove(message) == false) {_                        unexpected.add(header)__                    }_                }_            } else {_                unmatched.add(header)__            }_        }_        if (expected.isEmpty() == false) {_            for (final String header : expected) {_                missing.add(header)__            }_        }__        if (unexpected.isEmpty() == false || unmatched.isEmpty() == false || missing.isEmpty() == false) {_            final StringBuilder failureMessage = new StringBuilder()__            appendBadHeaders(failureMessage, unexpected, "got unexpected warning header" + (unexpected.size() > 1 ? "s" : ""))__            appendBadHeaders(failureMessage, unmatched, "got unmatched warning header" + (unmatched.size() > 1 ? "s" : ""))__            appendBadHeaders(failureMessage, missing, "did not get expected warning header" + (missing.size() > 1 ? "s" : ""))__            fail(failureMessage.toString())__        }__    };check,that,the,response,contains,only,the,warning,headers,that,we,expect;void,check,warning,headers,final,list,string,warning,headers,final,version,master,version,final,list,string,unexpected,new,array,list,final,list,string,unmatched,new,array,list,final,list,string,missing,new,array,list,final,set,string,expected,new,linked,hash,set,expected,warning,headers,stream,map,deprecation,logger,escape,and,encode,collect,collectors,to,list,for,final,string,header,warning,headers,final,matcher,matcher,matcher,header,final,boolean,matches,matcher,matches,if,matches,final,string,message,matcher,group,1,if,master,version,before,version,message,equals,the,default,number,of,shards,will,change,from,5,to,1,in,7,0,0,if,you,wish,to,continue,using,the,default,of,5,shards,you,must,manage,this,on,the,create,index,request,or,with,an,index,template,else,if,expected,remove,message,false,unexpected,add,header,else,unmatched,add,header,if,expected,is,empty,false,for,final,string,header,expected,missing,add,header,if,unexpected,is,empty,false,unmatched,is,empty,false,missing,is,empty,false,final,string,builder,failure,message,new,string,builder,append,bad,headers,failure,message,unexpected,got,unexpected,warning,header,unexpected,size,1,s,append,bad,headers,failure,message,unmatched,got,unmatched,warning,header,unmatched,size,1,s,append,bad,headers,failure,message,missing,did,not,get,expected,warning,header,missing,size,1,s,fail,failure,message,to,string
DoSection -> void checkWarningHeaders(final List<String> warningHeaders, final Version masterVersion);1540486836;Check that the response contains only the warning headers that we expect.;void checkWarningHeaders(final List<String> warningHeaders, final Version masterVersion) {_        final List<String> unexpected = new ArrayList<>()__        final List<String> unmatched = new ArrayList<>()__        final List<String> missing = new ArrayList<>()__        _        final Set<String> expected =_                new LinkedHashSet<>(expectedWarningHeaders.stream().map(DeprecationLogger::escapeAndEncode).collect(Collectors.toList()))__        for (final String header : warningHeaders) {_            final Matcher matcher = WARNING_HEADER_PATTERN.matcher(header)__            final boolean matches = matcher.matches()__            if (matches) {_                final String message = matcher.group(1)__                _                if (masterVersion.before(Version.V_7_0_0_alpha1)_                        && message.equals("the default number of shards will change from [5] to [1] in 7.0.0_ "_                        + "if you wish to continue using the default of [5] shards, "_                        + "you must manage this on the create index request or with an index template")) {_                    _                } else {_                    if (expected.remove(message) == false) {_                        unexpected.add(header)__                    }_                }_            } else {_                unmatched.add(header)__            }_        }_        if (expected.isEmpty() == false) {_            for (final String header : expected) {_                missing.add(header)__            }_        }__        if (unexpected.isEmpty() == false || unmatched.isEmpty() == false || missing.isEmpty() == false) {_            final StringBuilder failureMessage = new StringBuilder()__            appendBadHeaders(failureMessage, unexpected, "got unexpected warning header" + (unexpected.size() > 1 ? "s" : ""))__            appendBadHeaders(failureMessage, unmatched, "got unmatched warning header" + (unmatched.size() > 1 ? "s" : ""))__            appendBadHeaders(failureMessage, missing, "did not get expected warning header" + (missing.size() > 1 ? "s" : ""))__            fail(failureMessage.toString())__        }__    };check,that,the,response,contains,only,the,warning,headers,that,we,expect;void,check,warning,headers,final,list,string,warning,headers,final,version,master,version,final,list,string,unexpected,new,array,list,final,list,string,unmatched,new,array,list,final,list,string,missing,new,array,list,final,set,string,expected,new,linked,hash,set,expected,warning,headers,stream,map,deprecation,logger,escape,and,encode,collect,collectors,to,list,for,final,string,header,warning,headers,final,matcher,matcher,matcher,header,final,boolean,matches,matcher,matches,if,matches,final,string,message,matcher,group,1,if,master,version,before,version,message,equals,the,default,number,of,shards,will,change,from,5,to,1,in,7,0,0,if,you,wish,to,continue,using,the,default,of,5,shards,you,must,manage,this,on,the,create,index,request,or,with,an,index,template,else,if,expected,remove,message,false,unexpected,add,header,else,unmatched,add,header,if,expected,is,empty,false,for,final,string,header,expected,missing,add,header,if,unexpected,is,empty,false,unmatched,is,empty,false,missing,is,empty,false,final,string,builder,failure,message,new,string,builder,append,bad,headers,failure,message,unexpected,got,unexpected,warning,header,unexpected,size,1,s,append,bad,headers,failure,message,unmatched,got,unmatched,warning,header,unmatched,size,1,s,append,bad,headers,failure,message,missing,did,not,get,expected,warning,header,missing,size,1,s,fail,failure,message,to,string
DoSection -> void checkWarningHeaders(final List<String> warningHeaders, final Version masterVersion);1540912197;Check that the response contains only the warning headers that we expect.;void checkWarningHeaders(final List<String> warningHeaders, final Version masterVersion) {_        final List<String> unexpected = new ArrayList<>()__        final List<String> unmatched = new ArrayList<>()__        final List<String> missing = new ArrayList<>()__        _        final Set<String> expected =_                new LinkedHashSet<>(expectedWarningHeaders.stream().map(DeprecationLogger::escapeAndEncode).collect(Collectors.toList()))__        for (final String header : warningHeaders) {_            final Matcher matcher = WARNING_HEADER_PATTERN.matcher(header)__            final boolean matches = matcher.matches()__            if (matches) {_                final String message = matcher.group(1)__                _                if (masterVersion.before(Version.V_7_0_0_alpha1)_                        && message.equals("the default number of shards will change from [5] to [1] in 7.0.0_ "_                        + "if you wish to continue using the default of [5] shards, "_                        + "you must manage this on the create index request or with an index template")) {_                    _                } else {_                    if (expected.remove(message) == false) {_                        unexpected.add(header)__                    }_                }_            } else {_                unmatched.add(header)__            }_        }_        if (expected.isEmpty() == false) {_            for (final String header : expected) {_                missing.add(header)__            }_        }__        if (unexpected.isEmpty() == false || unmatched.isEmpty() == false || missing.isEmpty() == false) {_            final StringBuilder failureMessage = new StringBuilder()__            appendBadHeaders(failureMessage, unexpected, "got unexpected warning header" + (unexpected.size() > 1 ? "s" : ""))__            appendBadHeaders(failureMessage, unmatched, "got unmatched warning header" + (unmatched.size() > 1 ? "s" : ""))__            appendBadHeaders(failureMessage, missing, "did not get expected warning header" + (missing.size() > 1 ? "s" : ""))__            fail(failureMessage.toString())__        }__    };check,that,the,response,contains,only,the,warning,headers,that,we,expect;void,check,warning,headers,final,list,string,warning,headers,final,version,master,version,final,list,string,unexpected,new,array,list,final,list,string,unmatched,new,array,list,final,list,string,missing,new,array,list,final,set,string,expected,new,linked,hash,set,expected,warning,headers,stream,map,deprecation,logger,escape,and,encode,collect,collectors,to,list,for,final,string,header,warning,headers,final,matcher,matcher,matcher,header,final,boolean,matches,matcher,matches,if,matches,final,string,message,matcher,group,1,if,master,version,before,version,message,equals,the,default,number,of,shards,will,change,from,5,to,1,in,7,0,0,if,you,wish,to,continue,using,the,default,of,5,shards,you,must,manage,this,on,the,create,index,request,or,with,an,index,template,else,if,expected,remove,message,false,unexpected,add,header,else,unmatched,add,header,if,expected,is,empty,false,for,final,string,header,expected,missing,add,header,if,unexpected,is,empty,false,unmatched,is,empty,false,missing,is,empty,false,final,string,builder,failure,message,new,string,builder,append,bad,headers,failure,message,unexpected,got,unexpected,warning,header,unexpected,size,1,s,append,bad,headers,failure,message,unmatched,got,unmatched,warning,header,unmatched,size,1,s,append,bad,headers,failure,message,missing,did,not,get,expected,warning,header,missing,size,1,s,fail,failure,message,to,string
DoSection -> void checkWarningHeaders(final List<String> warningHeaders, final Version masterVersion);1541592065;Check that the response contains only the warning headers that we expect.;void checkWarningHeaders(final List<String> warningHeaders, final Version masterVersion) {_        final List<String> unexpected = new ArrayList<>()__        final List<String> unmatched = new ArrayList<>()__        final List<String> missing = new ArrayList<>()__        _        final Set<String> expected =_                new LinkedHashSet<>(expectedWarningHeaders.stream().map(DeprecationLogger::escapeAndEncode).collect(Collectors.toList()))__        for (final String header : warningHeaders) {_            final Matcher matcher = WARNING_HEADER_PATTERN.matcher(header)__            final boolean matches = matcher.matches()__            if (matches) {_                final String message = matcher.group(1)__                _                if (masterVersion.before(Version.V_7_0_0)_                        && message.equals("the default number of shards will change from [5] to [1] in 7.0.0_ "_                        + "if you wish to continue using the default of [5] shards, "_                        + "you must manage this on the create index request or with an index template")) {_                    _                } else {_                    if (expected.remove(message) == false) {_                        unexpected.add(header)__                    }_                }_            } else {_                unmatched.add(header)__            }_        }_        if (expected.isEmpty() == false) {_            for (final String header : expected) {_                missing.add(header)__            }_        }__        if (unexpected.isEmpty() == false || unmatched.isEmpty() == false || missing.isEmpty() == false) {_            final StringBuilder failureMessage = new StringBuilder()__            appendBadHeaders(failureMessage, unexpected, "got unexpected warning header" + (unexpected.size() > 1 ? "s" : ""))__            appendBadHeaders(failureMessage, unmatched, "got unmatched warning header" + (unmatched.size() > 1 ? "s" : ""))__            appendBadHeaders(failureMessage, missing, "did not get expected warning header" + (missing.size() > 1 ? "s" : ""))__            fail(failureMessage.toString())__        }__    };check,that,the,response,contains,only,the,warning,headers,that,we,expect;void,check,warning,headers,final,list,string,warning,headers,final,version,master,version,final,list,string,unexpected,new,array,list,final,list,string,unmatched,new,array,list,final,list,string,missing,new,array,list,final,set,string,expected,new,linked,hash,set,expected,warning,headers,stream,map,deprecation,logger,escape,and,encode,collect,collectors,to,list,for,final,string,header,warning,headers,final,matcher,matcher,matcher,header,final,boolean,matches,matcher,matches,if,matches,final,string,message,matcher,group,1,if,master,version,before,version,message,equals,the,default,number,of,shards,will,change,from,5,to,1,in,7,0,0,if,you,wish,to,continue,using,the,default,of,5,shards,you,must,manage,this,on,the,create,index,request,or,with,an,index,template,else,if,expected,remove,message,false,unexpected,add,header,else,unmatched,add,header,if,expected,is,empty,false,for,final,string,header,expected,missing,add,header,if,unexpected,is,empty,false,unmatched,is,empty,false,missing,is,empty,false,final,string,builder,failure,message,new,string,builder,append,bad,headers,failure,message,unexpected,got,unexpected,warning,header,unexpected,size,1,s,append,bad,headers,failure,message,unmatched,got,unmatched,warning,header,unmatched,size,1,s,append,bad,headers,failure,message,missing,did,not,get,expected,warning,header,missing,size,1,s,fail,failure,message,to,string
DoSection -> void checkWarningHeaders(final List<String> warningHeaders, final Version masterVersion);1542138961;Check that the response contains only the warning headers that we expect.;void checkWarningHeaders(final List<String> warningHeaders, final Version masterVersion) {_        final List<String> unexpected = new ArrayList<>()__        final List<String> unmatched = new ArrayList<>()__        final List<String> missing = new ArrayList<>()__        _        final Set<String> expected =_                new LinkedHashSet<>(expectedWarningHeaders.stream().map(DeprecationLogger::escapeAndEncode).collect(Collectors.toList()))__        for (final String header : warningHeaders) {_            final Matcher matcher = WARNING_HEADER_PATTERN.matcher(header)__            final boolean matches = matcher.matches()__            if (matches) {_                final String message = matcher.group(1)__                _                if (masterVersion.before(Version.V_7_0_0)_                        && message.equals("the default number of shards will change from [5] to [1] in 7.0.0_ "_                        + "if you wish to continue using the default of [5] shards, "_                        + "you must manage this on the create index request or with an index template")) {_                    _                } else _                    if (message.startsWith("[types removal]")) {_                    _                } else if (expected.remove(message) == false) {_                    unexpected.add(header)__                }_            } else {_                unmatched.add(header)__            }_        }_        if (expected.isEmpty() == false) {_            for (final String header : expected) {_                missing.add(header)__            }_        }__        if (unexpected.isEmpty() == false || unmatched.isEmpty() == false || missing.isEmpty() == false) {_            final StringBuilder failureMessage = new StringBuilder()__            appendBadHeaders(failureMessage, unexpected, "got unexpected warning header" + (unexpected.size() > 1 ? "s" : ""))__            appendBadHeaders(failureMessage, unmatched, "got unmatched warning header" + (unmatched.size() > 1 ? "s" : ""))__            appendBadHeaders(failureMessage, missing, "did not get expected warning header" + (missing.size() > 1 ? "s" : ""))__            fail(failureMessage.toString())__        }__    };check,that,the,response,contains,only,the,warning,headers,that,we,expect;void,check,warning,headers,final,list,string,warning,headers,final,version,master,version,final,list,string,unexpected,new,array,list,final,list,string,unmatched,new,array,list,final,list,string,missing,new,array,list,final,set,string,expected,new,linked,hash,set,expected,warning,headers,stream,map,deprecation,logger,escape,and,encode,collect,collectors,to,list,for,final,string,header,warning,headers,final,matcher,matcher,matcher,header,final,boolean,matches,matcher,matches,if,matches,final,string,message,matcher,group,1,if,master,version,before,version,message,equals,the,default,number,of,shards,will,change,from,5,to,1,in,7,0,0,if,you,wish,to,continue,using,the,default,of,5,shards,you,must,manage,this,on,the,create,index,request,or,with,an,index,template,else,if,message,starts,with,types,removal,else,if,expected,remove,message,false,unexpected,add,header,else,unmatched,add,header,if,expected,is,empty,false,for,final,string,header,expected,missing,add,header,if,unexpected,is,empty,false,unmatched,is,empty,false,missing,is,empty,false,final,string,builder,failure,message,new,string,builder,append,bad,headers,failure,message,unexpected,got,unexpected,warning,header,unexpected,size,1,s,append,bad,headers,failure,message,unmatched,got,unmatched,warning,header,unmatched,size,1,s,append,bad,headers,failure,message,missing,did,not,get,expected,warning,header,missing,size,1,s,fail,failure,message,to,string
DoSection -> void checkWarningHeaders(final List<String> warningHeaders, final Version masterVersion);1550504256;Check that the response contains only the warning headers that we expect.;void checkWarningHeaders(final List<String> warningHeaders, final Version masterVersion) {_        final List<String> unexpected = new ArrayList<>()__        final List<String> unmatched = new ArrayList<>()__        final List<String> missing = new ArrayList<>()__        _        final Set<String> expected =_                new LinkedHashSet<>(expectedWarningHeaders.stream().map(DeprecationLogger::escapeAndEncode).collect(Collectors.toList()))__        for (final String header : warningHeaders) {_            final Matcher matcher = WARNING_HEADER_PATTERN.matcher(header)__            final boolean matches = matcher.matches()__            if (matches) {_                final String message = matcher.group(1)__                if (message.startsWith("[types removal]")) {_                    _                } else if (expected.remove(message) == false) {_                    unexpected.add(header)__                }_            } else {_                unmatched.add(header)__            }_        }_        if (expected.isEmpty() == false) {_            for (final String header : expected) {_                missing.add(header)__            }_        }__        if (unexpected.isEmpty() == false || unmatched.isEmpty() == false || missing.isEmpty() == false) {_            final StringBuilder failureMessage = new StringBuilder()__            appendBadHeaders(failureMessage, unexpected, "got unexpected warning header" + (unexpected.size() > 1 ? "s" : ""))__            appendBadHeaders(failureMessage, unmatched, "got unmatched warning header" + (unmatched.size() > 1 ? "s" : ""))__            appendBadHeaders(failureMessage, missing, "did not get expected warning header" + (missing.size() > 1 ? "s" : ""))__            fail(failureMessage.toString())__        }__    };check,that,the,response,contains,only,the,warning,headers,that,we,expect;void,check,warning,headers,final,list,string,warning,headers,final,version,master,version,final,list,string,unexpected,new,array,list,final,list,string,unmatched,new,array,list,final,list,string,missing,new,array,list,final,set,string,expected,new,linked,hash,set,expected,warning,headers,stream,map,deprecation,logger,escape,and,encode,collect,collectors,to,list,for,final,string,header,warning,headers,final,matcher,matcher,matcher,header,final,boolean,matches,matcher,matches,if,matches,final,string,message,matcher,group,1,if,message,starts,with,types,removal,else,if,expected,remove,message,false,unexpected,add,header,else,unmatched,add,header,if,expected,is,empty,false,for,final,string,header,expected,missing,add,header,if,unexpected,is,empty,false,unmatched,is,empty,false,missing,is,empty,false,final,string,builder,failure,message,new,string,builder,append,bad,headers,failure,message,unexpected,got,unexpected,warning,header,unexpected,size,1,s,append,bad,headers,failure,message,unmatched,got,unmatched,warning,header,unmatched,size,1,s,append,bad,headers,failure,message,missing,did,not,get,expected,warning,header,missing,size,1,s,fail,failure,message,to,string
DoSection -> void setExpectedWarningHeaders(List<String> expectedWarningHeaders);1540912197;Set the warning headers that we expect from this response. If the headers don't match exactly this request is considered to have_failed. Defaults to emptyList.;void setExpectedWarningHeaders(List<String> expectedWarningHeaders) {_        this.expectedWarningHeaders = expectedWarningHeaders__    };set,the,warning,headers,that,we,expect,from,this,response,if,the,headers,don,t,match,exactly,this,request,is,considered,to,have,failed,defaults,to,empty,list;void,set,expected,warning,headers,list,string,expected,warning,headers,this,expected,warning,headers,expected,warning,headers
DoSection -> void setExpectedWarningHeaders(List<String> expectedWarningHeaders);1541592065;Set the warning headers that we expect from this response. If the headers don't match exactly this request is considered to have_failed. Defaults to emptyList.;void setExpectedWarningHeaders(List<String> expectedWarningHeaders) {_        this.expectedWarningHeaders = expectedWarningHeaders__    };set,the,warning,headers,that,we,expect,from,this,response,if,the,headers,don,t,match,exactly,this,request,is,considered,to,have,failed,defaults,to,empty,list;void,set,expected,warning,headers,list,string,expected,warning,headers,this,expected,warning,headers,expected,warning,headers
DoSection -> void setExpectedWarningHeaders(List<String> expectedWarningHeaders);1542138961;Set the warning headers that we expect from this response. If the headers don't match exactly this request is considered to have_failed. Defaults to emptyList.;void setExpectedWarningHeaders(List<String> expectedWarningHeaders) {_        this.expectedWarningHeaders = expectedWarningHeaders__    };set,the,warning,headers,that,we,expect,from,this,response,if,the,headers,don,t,match,exactly,this,request,is,considered,to,have,failed,defaults,to,empty,list;void,set,expected,warning,headers,list,string,expected,warning,headers,this,expected,warning,headers,expected,warning,headers
DoSection -> void setExpectedWarningHeaders(List<String> expectedWarningHeaders);1550504256;Set the warning headers that we expect from this response. If the headers don't match exactly this request is considered to have_failed. Defaults to emptyList.;void setExpectedWarningHeaders(List<String> expectedWarningHeaders) {_        this.expectedWarningHeaders = expectedWarningHeaders__    };set,the,warning,headers,that,we,expect,from,this,response,if,the,headers,don,t,match,exactly,this,request,is,considered,to,have,failed,defaults,to,empty,list;void,set,expected,warning,headers,list,string,expected,warning,headers,this,expected,warning,headers,expected,warning,headers
