# id;timestamp;commentText;codeText;commentWords;codeWords
BootstrapForTesting -> @SuppressForbidden(reason = "does evil stuff with paths and urls because devs and jenkins do evil stuff with paths and urls")     static Set<URL> parseClassPathWithSymlinks() throws Exception;1524684173;return parsed classpath, but with symlinks resolved to destination files for matching_this is for matching the toRealPath() in the code where we have a proper plugin structure;@SuppressForbidden(reason = "does evil stuff with paths and urls because devs and jenkins do evil stuff with paths and urls")_    static Set<URL> parseClassPathWithSymlinks() throws Exception {_        Set<URL> raw = JarHell.parseClassPath()__        Set<URL> cooked = new HashSet<>(raw.size())__        for (URL url : raw) {_            boolean added = cooked.add(PathUtils.get(url.toURI()).toRealPath().toUri().toURL())__            if (added == false) {_                throw new IllegalStateException("Duplicate in classpath after resolving symlinks: " + url)__            }_        }_        return raw__    };return,parsed,classpath,but,with,symlinks,resolved,to,destination,files,for,matching,this,is,for,matching,the,to,real,path,in,the,code,where,we,have,a,proper,plugin,structure;suppress,forbidden,reason,does,evil,stuff,with,paths,and,urls,because,devs,and,jenkins,do,evil,stuff,with,paths,and,urls,static,set,url,parse,class,path,with,symlinks,throws,exception,set,url,raw,jar,hell,parse,class,path,set,url,cooked,new,hash,set,raw,size,for,url,url,raw,boolean,added,cooked,add,path,utils,get,url,to,uri,to,real,path,to,uri,to,url,if,added,false,throw,new,illegal,state,exception,duplicate,in,classpath,after,resolving,symlinks,url,return,raw
BootstrapForTesting -> @SuppressForbidden(reason = "does evil stuff with paths and urls because devs and jenkins do evil stuff with paths and urls")     static Set<URL> parseClassPathWithSymlinks() throws Exception;1531179852;return parsed classpath, but with symlinks resolved to destination files for matching_this is for matching the toRealPath() in the code where we have a proper plugin structure;@SuppressForbidden(reason = "does evil stuff with paths and urls because devs and jenkins do evil stuff with paths and urls")_    static Set<URL> parseClassPathWithSymlinks() throws Exception {_        Set<URL> raw = JarHell.parseClassPath()__        Set<URL> cooked = new HashSet<>(raw.size())__        for (URL url : raw) {_            boolean added = cooked.add(PathUtils.get(url.toURI()).toRealPath().toUri().toURL())__            if (added == false) {_                throw new IllegalStateException("Duplicate in classpath after resolving symlinks: " + url)__            }_        }_        return raw__    };return,parsed,classpath,but,with,symlinks,resolved,to,destination,files,for,matching,this,is,for,matching,the,to,real,path,in,the,code,where,we,have,a,proper,plugin,structure;suppress,forbidden,reason,does,evil,stuff,with,paths,and,urls,because,devs,and,jenkins,do,evil,stuff,with,paths,and,urls,static,set,url,parse,class,path,with,symlinks,throws,exception,set,url,raw,jar,hell,parse,class,path,set,url,cooked,new,hash,set,raw,size,for,url,url,raw,boolean,added,cooked,add,path,utils,get,url,to,uri,to,real,path,to,uri,to,url,if,added,false,throw,new,illegal,state,exception,duplicate,in,classpath,after,resolving,symlinks,url,return,raw
BootstrapForTesting -> @SuppressForbidden(reason = "does evil stuff with paths and urls because devs and jenkins do evil stuff with paths and urls")     static Set<URL> parseClassPathWithSymlinks() throws Exception;1535666657;return parsed classpath, but with symlinks resolved to destination files for matching_this is for matching the toRealPath() in the code where we have a proper plugin structure;@SuppressForbidden(reason = "does evil stuff with paths and urls because devs and jenkins do evil stuff with paths and urls")_    static Set<URL> parseClassPathWithSymlinks() throws Exception {_        Set<URL> raw = JarHell.parseClassPath()__        Set<URL> cooked = new HashSet<>(raw.size())__        for (URL url : raw) {_            boolean added = cooked.add(PathUtils.get(url.toURI()).toRealPath().toUri().toURL())__            if (added == false) {_                throw new IllegalStateException("Duplicate in classpath after resolving symlinks: " + url)__            }_        }_        return raw__    };return,parsed,classpath,but,with,symlinks,resolved,to,destination,files,for,matching,this,is,for,matching,the,to,real,path,in,the,code,where,we,have,a,proper,plugin,structure;suppress,forbidden,reason,does,evil,stuff,with,paths,and,urls,because,devs,and,jenkins,do,evil,stuff,with,paths,and,urls,static,set,url,parse,class,path,with,symlinks,throws,exception,set,url,raw,jar,hell,parse,class,path,set,url,cooked,new,hash,set,raw,size,for,url,url,raw,boolean,added,cooked,add,path,utils,get,url,to,uri,to,real,path,to,uri,to,url,if,added,false,throw,new,illegal,state,exception,duplicate,in,classpath,after,resolving,symlinks,url,return,raw
BootstrapForTesting -> @SuppressForbidden(reason = "does evil stuff with paths and urls because devs and jenkins do evil stuff with paths and urls")     static Set<URL> parseClassPathWithSymlinks() throws Exception;1539615817;return parsed classpath, but with symlinks resolved to destination files for matching_this is for matching the toRealPath() in the code where we have a proper plugin structure;@SuppressForbidden(reason = "does evil stuff with paths and urls because devs and jenkins do evil stuff with paths and urls")_    static Set<URL> parseClassPathWithSymlinks() throws Exception {_        Set<URL> raw = JarHell.parseClassPath()__        Set<URL> cooked = new HashSet<>(raw.size())__        for (URL url : raw) {_            boolean added = cooked.add(PathUtils.get(url.toURI()).toRealPath().toUri().toURL())__            if (added == false) {_                throw new IllegalStateException("Duplicate in classpath after resolving symlinks: " + url)__            }_        }_        return raw__    };return,parsed,classpath,but,with,symlinks,resolved,to,destination,files,for,matching,this,is,for,matching,the,to,real,path,in,the,code,where,we,have,a,proper,plugin,structure;suppress,forbidden,reason,does,evil,stuff,with,paths,and,urls,because,devs,and,jenkins,do,evil,stuff,with,paths,and,urls,static,set,url,parse,class,path,with,symlinks,throws,exception,set,url,raw,jar,hell,parse,class,path,set,url,cooked,new,hash,set,raw,size,for,url,url,raw,boolean,added,cooked,add,path,utils,get,url,to,uri,to,real,path,to,uri,to,url,if,added,false,throw,new,illegal,state,exception,duplicate,in,classpath,after,resolving,symlinks,url,return,raw
BootstrapForTesting -> private static void addClassCodebase(Map<String, URL> codebases, String name, String classname);1524684173;Add the codebase url of the given classname to the codebases map, if the class exists.;private static void addClassCodebase(Map<String, URL> codebases, String name, String classname) {_        try {_            Class clazz = BootstrapForTesting.class.getClassLoader().loadClass(classname)__            if (codebases.put(name, clazz.getProtectionDomain().getCodeSource().getLocation()) != null) {_                throw new IllegalStateException("Already added " + name + " codebase for testing")__            }_        } catch (ClassNotFoundException e) {_            _            _        }_    };add,the,codebase,url,of,the,given,classname,to,the,codebases,map,if,the,class,exists;private,static,void,add,class,codebase,map,string,url,codebases,string,name,string,classname,try,class,clazz,bootstrap,for,testing,class,get,class,loader,load,class,classname,if,codebases,put,name,clazz,get,protection,domain,get,code,source,get,location,null,throw,new,illegal,state,exception,already,added,name,codebase,for,testing,catch,class,not,found,exception,e
BootstrapForTesting -> private static void addClassCodebase(Map<String, URL> codebases, String name, String classname);1531179852;Add the codebase url of the given classname to the codebases map, if the class exists.;private static void addClassCodebase(Map<String, URL> codebases, String name, String classname) {_        try {_            Class<?> clazz = BootstrapForTesting.class.getClassLoader().loadClass(classname)__            if (codebases.put(name, clazz.getProtectionDomain().getCodeSource().getLocation()) != null) {_                throw new IllegalStateException("Already added " + name + " codebase for testing")__            }_        } catch (ClassNotFoundException e) {_            _            _        }_    };add,the,codebase,url,of,the,given,classname,to,the,codebases,map,if,the,class,exists;private,static,void,add,class,codebase,map,string,url,codebases,string,name,string,classname,try,class,clazz,bootstrap,for,testing,class,get,class,loader,load,class,classname,if,codebases,put,name,clazz,get,protection,domain,get,code,source,get,location,null,throw,new,illegal,state,exception,already,added,name,codebase,for,testing,catch,class,not,found,exception,e
BootstrapForTesting -> private static void addClassCodebase(Map<String, URL> codebases, String name, String classname);1535666657;Add the codebase url of the given classname to the codebases map, if the class exists.;private static void addClassCodebase(Map<String, URL> codebases, String name, String classname) {_        try {_            Class<?> clazz = BootstrapForTesting.class.getClassLoader().loadClass(classname)__            URL location = clazz.getProtectionDomain().getCodeSource().getLocation()__            if (location.toString().endsWith(".jar") == false) {_                if (codebases.put(name, location) != null) {_                    throw new IllegalStateException("Already added " + name + " codebase for testing")__                }_            }_        } catch (ClassNotFoundException e) {_            _            _        }_    };add,the,codebase,url,of,the,given,classname,to,the,codebases,map,if,the,class,exists;private,static,void,add,class,codebase,map,string,url,codebases,string,name,string,classname,try,class,clazz,bootstrap,for,testing,class,get,class,loader,load,class,classname,url,location,clazz,get,protection,domain,get,code,source,get,location,if,location,to,string,ends,with,jar,false,if,codebases,put,name,location,null,throw,new,illegal,state,exception,already,added,name,codebase,for,testing,catch,class,not,found,exception,e
BootstrapForTesting -> private static void addClassCodebase(Map<String, URL> codebases, String name, String classname);1539615817;Add the codebase url of the given classname to the codebases map, if the class exists.;private static void addClassCodebase(Map<String, URL> codebases, String name, String classname) {_        try {_            Class<?> clazz = BootstrapForTesting.class.getClassLoader().loadClass(classname)__            URL location = clazz.getProtectionDomain().getCodeSource().getLocation()__            if (location.toString().endsWith(".jar") == false) {_                if (codebases.put(name, location) != null) {_                    throw new IllegalStateException("Already added " + name + " codebase for testing")__                }_            }_        } catch (ClassNotFoundException e) {_            _            _        }_    };add,the,codebase,url,of,the,given,classname,to,the,codebases,map,if,the,class,exists;private,static,void,add,class,codebase,map,string,url,codebases,string,name,string,classname,try,class,clazz,bootstrap,for,testing,class,get,class,loader,load,class,classname,url,location,clazz,get,protection,domain,get,code,source,get,location,if,location,to,string,ends,with,jar,false,if,codebases,put,name,location,null,throw,new,illegal,state,exception,already,added,name,codebase,for,testing,catch,class,not,found,exception,e
BootstrapForTesting -> @SuppressForbidden(reason = "accesses fully qualified URLs to configure security")     static Map<String,Policy> getPluginPermissions() throws Exception;1524684173;we don't know which codesources belong to which plugin, so just remove the permission from key codebases_like core, test-framework, etc. this way tests fail if accesscontroller blocks are missing.;@SuppressForbidden(reason = "accesses fully qualified URLs to configure security")_    static Map<String,Policy> getPluginPermissions() throws Exception {_        List<URL> pluginPolicies = Collections.list(BootstrapForTesting.class.getClassLoader().getResources(PluginInfo.ES_PLUGIN_POLICY))__        if (pluginPolicies.isEmpty()) {_            return Collections.emptyMap()__        }__        _        Set<URL> codebases = new HashSet<>(parseClassPathWithSymlinks())__        Set<URL> excluded = new HashSet<>(Arrays.asList(_                _                Bootstrap.class.getProtectionDomain().getCodeSource().getLocation(),_                _                BootstrapForTesting.class.getProtectionDomain().getCodeSource().getLocation(),_                _                LuceneTestCase.class.getProtectionDomain().getCodeSource().getLocation(),_                _                RandomizedRunner.class.getProtectionDomain().getCodeSource().getLocation(),_                _                Assert.class.getProtectionDomain().getCodeSource().getLocation()_        ))__        codebases.removeAll(excluded)___        _        final List<Policy> policies = new ArrayList<>(pluginPolicies.size())__        for (URL policyFile : pluginPolicies) {_            policies.add(Security.readPolicy(policyFile, Security.getCodebaseJarMap(codebases)))__        }__        _        Map<String,Policy> map = new HashMap<>()__        for (URL url : codebases) {_            map.put(url.getFile(), new Policy() {_                @Override_                public boolean implies(ProtectionDomain domain, Permission permission) {_                    _                    for (Policy p : policies) {_                        if (p.implies(domain, permission)) {_                            return true__                        }_                    }_                    return false__                }_            })__        }_        return Collections.unmodifiableMap(map)__    };we,don,t,know,which,codesources,belong,to,which,plugin,so,just,remove,the,permission,from,key,codebases,like,core,test,framework,etc,this,way,tests,fail,if,accesscontroller,blocks,are,missing;suppress,forbidden,reason,accesses,fully,qualified,urls,to,configure,security,static,map,string,policy,get,plugin,permissions,throws,exception,list,url,plugin,policies,collections,list,bootstrap,for,testing,class,get,class,loader,get,resources,plugin,info,if,plugin,policies,is,empty,return,collections,empty,map,set,url,codebases,new,hash,set,parse,class,path,with,symlinks,set,url,excluded,new,hash,set,arrays,as,list,bootstrap,class,get,protection,domain,get,code,source,get,location,bootstrap,for,testing,class,get,protection,domain,get,code,source,get,location,lucene,test,case,class,get,protection,domain,get,code,source,get,location,randomized,runner,class,get,protection,domain,get,code,source,get,location,assert,class,get,protection,domain,get,code,source,get,location,codebases,remove,all,excluded,final,list,policy,policies,new,array,list,plugin,policies,size,for,url,policy,file,plugin,policies,policies,add,security,read,policy,policy,file,security,get,codebase,jar,map,codebases,map,string,policy,map,new,hash,map,for,url,url,codebases,map,put,url,get,file,new,policy,override,public,boolean,implies,protection,domain,domain,permission,permission,for,policy,p,policies,if,p,implies,domain,permission,return,true,return,false,return,collections,unmodifiable,map,map
BootstrapForTesting -> @SuppressForbidden(reason = "accesses fully qualified URLs to configure security")     static Map<String,Policy> getPluginPermissions() throws Exception;1531179852;we don't know which codesources belong to which plugin, so just remove the permission from key codebases_like core, test-framework, etc. this way tests fail if accesscontroller blocks are missing.;@SuppressForbidden(reason = "accesses fully qualified URLs to configure security")_    static Map<String,Policy> getPluginPermissions() throws Exception {_        List<URL> pluginPolicies = Collections.list(BootstrapForTesting.class.getClassLoader().getResources(PluginInfo.ES_PLUGIN_POLICY))__        if (pluginPolicies.isEmpty()) {_            return Collections.emptyMap()__        }__        _        Set<URL> codebases = new HashSet<>(parseClassPathWithSymlinks())__        Set<URL> excluded = new HashSet<>(Arrays.asList(_                _                Bootstrap.class.getProtectionDomain().getCodeSource().getLocation(),_                _                BootstrapForTesting.class.getProtectionDomain().getCodeSource().getLocation(),_                _                LuceneTestCase.class.getProtectionDomain().getCodeSource().getLocation(),_                _                RandomizedRunner.class.getProtectionDomain().getCodeSource().getLocation(),_                _                Assert.class.getProtectionDomain().getCodeSource().getLocation()_        ))__        codebases.removeAll(excluded)___        _        final List<Policy> policies = new ArrayList<>(pluginPolicies.size())__        for (URL policyFile : pluginPolicies) {_            policies.add(Security.readPolicy(policyFile, Security.getCodebaseJarMap(codebases)))__        }__        _        Map<String,Policy> map = new HashMap<>()__        for (URL url : codebases) {_            map.put(url.getFile(), new Policy() {_                @Override_                public boolean implies(ProtectionDomain domain, Permission permission) {_                    _                    for (Policy p : policies) {_                        if (p.implies(domain, permission)) {_                            return true__                        }_                    }_                    return false__                }_            })__        }_        return Collections.unmodifiableMap(map)__    };we,don,t,know,which,codesources,belong,to,which,plugin,so,just,remove,the,permission,from,key,codebases,like,core,test,framework,etc,this,way,tests,fail,if,accesscontroller,blocks,are,missing;suppress,forbidden,reason,accesses,fully,qualified,urls,to,configure,security,static,map,string,policy,get,plugin,permissions,throws,exception,list,url,plugin,policies,collections,list,bootstrap,for,testing,class,get,class,loader,get,resources,plugin,info,if,plugin,policies,is,empty,return,collections,empty,map,set,url,codebases,new,hash,set,parse,class,path,with,symlinks,set,url,excluded,new,hash,set,arrays,as,list,bootstrap,class,get,protection,domain,get,code,source,get,location,bootstrap,for,testing,class,get,protection,domain,get,code,source,get,location,lucene,test,case,class,get,protection,domain,get,code,source,get,location,randomized,runner,class,get,protection,domain,get,code,source,get,location,assert,class,get,protection,domain,get,code,source,get,location,codebases,remove,all,excluded,final,list,policy,policies,new,array,list,plugin,policies,size,for,url,policy,file,plugin,policies,policies,add,security,read,policy,policy,file,security,get,codebase,jar,map,codebases,map,string,policy,map,new,hash,map,for,url,url,codebases,map,put,url,get,file,new,policy,override,public,boolean,implies,protection,domain,domain,permission,permission,for,policy,p,policies,if,p,implies,domain,permission,return,true,return,false,return,collections,unmodifiable,map,map
BootstrapForTesting -> @SuppressForbidden(reason = "accesses fully qualified URLs to configure security")     static Map<String,Policy> getPluginPermissions() throws Exception;1535666657;we don't know which codesources belong to which plugin, so just remove the permission from key codebases_like core, test-framework, etc. this way tests fail if accesscontroller blocks are missing.;@SuppressForbidden(reason = "accesses fully qualified URLs to configure security")_    static Map<String,Policy> getPluginPermissions() throws Exception {_        List<URL> pluginPolicies = Collections.list(BootstrapForTesting.class.getClassLoader().getResources(PluginInfo.ES_PLUGIN_POLICY))__        if (pluginPolicies.isEmpty()) {_            return Collections.emptyMap()__        }__        _        Set<URL> codebases = new HashSet<>(parseClassPathWithSymlinks())__        Set<URL> excluded = new HashSet<>(Arrays.asList(_                _                Bootstrap.class.getProtectionDomain().getCodeSource().getLocation(),_                _                BootstrapForTesting.class.getProtectionDomain().getCodeSource().getLocation(),_                _                LuceneTestCase.class.getProtectionDomain().getCodeSource().getLocation(),_                _                RandomizedRunner.class.getProtectionDomain().getCodeSource().getLocation(),_                _                Assert.class.getProtectionDomain().getCodeSource().getLocation()_        ))__        codebases.removeAll(excluded)___        _        final List<Policy> policies = new ArrayList<>(pluginPolicies.size())__        for (URL policyFile : pluginPolicies) {_            policies.add(Security.readPolicy(policyFile, Security.getCodebaseJarMap(codebases)))__        }__        _        Map<String,Policy> map = new HashMap<>()__        for (URL url : codebases) {_            map.put(url.getFile(), new Policy() {_                @Override_                public boolean implies(ProtectionDomain domain, Permission permission) {_                    _                    for (Policy p : policies) {_                        if (p.implies(domain, permission)) {_                            return true__                        }_                    }_                    return false__                }_            })__        }_        return Collections.unmodifiableMap(map)__    };we,don,t,know,which,codesources,belong,to,which,plugin,so,just,remove,the,permission,from,key,codebases,like,core,test,framework,etc,this,way,tests,fail,if,accesscontroller,blocks,are,missing;suppress,forbidden,reason,accesses,fully,qualified,urls,to,configure,security,static,map,string,policy,get,plugin,permissions,throws,exception,list,url,plugin,policies,collections,list,bootstrap,for,testing,class,get,class,loader,get,resources,plugin,info,if,plugin,policies,is,empty,return,collections,empty,map,set,url,codebases,new,hash,set,parse,class,path,with,symlinks,set,url,excluded,new,hash,set,arrays,as,list,bootstrap,class,get,protection,domain,get,code,source,get,location,bootstrap,for,testing,class,get,protection,domain,get,code,source,get,location,lucene,test,case,class,get,protection,domain,get,code,source,get,location,randomized,runner,class,get,protection,domain,get,code,source,get,location,assert,class,get,protection,domain,get,code,source,get,location,codebases,remove,all,excluded,final,list,policy,policies,new,array,list,plugin,policies,size,for,url,policy,file,plugin,policies,policies,add,security,read,policy,policy,file,security,get,codebase,jar,map,codebases,map,string,policy,map,new,hash,map,for,url,url,codebases,map,put,url,get,file,new,policy,override,public,boolean,implies,protection,domain,domain,permission,permission,for,policy,p,policies,if,p,implies,domain,permission,return,true,return,false,return,collections,unmodifiable,map,map
BootstrapForTesting -> @SuppressForbidden(reason = "accesses fully qualified URLs to configure security")     static Map<String,Policy> getPluginPermissions() throws Exception;1539615817;we don't know which codesources belong to which plugin, so just remove the permission from key codebases_like core, test-framework, etc. this way tests fail if accesscontroller blocks are missing.;@SuppressForbidden(reason = "accesses fully qualified URLs to configure security")_    static Map<String,Policy> getPluginPermissions() throws Exception {_        List<URL> pluginPolicies = Collections.list(BootstrapForTesting.class.getClassLoader().getResources(PluginInfo.ES_PLUGIN_POLICY))__        if (pluginPolicies.isEmpty()) {_            return Collections.emptyMap()__        }__        _        Set<URL> codebases = new HashSet<>(parseClassPathWithSymlinks())__        Set<URL> excluded = new HashSet<>(Arrays.asList(_                _                Bootstrap.class.getProtectionDomain().getCodeSource().getLocation(),_                _                BootstrapForTesting.class.getProtectionDomain().getCodeSource().getLocation(),_                _                LuceneTestCase.class.getProtectionDomain().getCodeSource().getLocation(),_                _                RandomizedRunner.class.getProtectionDomain().getCodeSource().getLocation(),_                _                Assert.class.getProtectionDomain().getCodeSource().getLocation()_        ))__        codebases.removeAll(excluded)___        _        final List<Policy> policies = new ArrayList<>(pluginPolicies.size())__        for (URL policyFile : pluginPolicies) {_            policies.add(Security.readPolicy(policyFile, Security.getCodebaseJarMap(codebases)))__        }__        _        Map<String,Policy> map = new HashMap<>()__        for (URL url : codebases) {_            map.put(url.getFile(), new Policy() {_                @Override_                public boolean implies(ProtectionDomain domain, Permission permission) {_                    _                    for (Policy p : policies) {_                        if (p.implies(domain, permission)) {_                            return true__                        }_                    }_                    return false__                }_            })__        }_        return Collections.unmodifiableMap(map)__    };we,don,t,know,which,codesources,belong,to,which,plugin,so,just,remove,the,permission,from,key,codebases,like,core,test,framework,etc,this,way,tests,fail,if,accesscontroller,blocks,are,missing;suppress,forbidden,reason,accesses,fully,qualified,urls,to,configure,security,static,map,string,policy,get,plugin,permissions,throws,exception,list,url,plugin,policies,collections,list,bootstrap,for,testing,class,get,class,loader,get,resources,plugin,info,if,plugin,policies,is,empty,return,collections,empty,map,set,url,codebases,new,hash,set,parse,class,path,with,symlinks,set,url,excluded,new,hash,set,arrays,as,list,bootstrap,class,get,protection,domain,get,code,source,get,location,bootstrap,for,testing,class,get,protection,domain,get,code,source,get,location,lucene,test,case,class,get,protection,domain,get,code,source,get,location,randomized,runner,class,get,protection,domain,get,code,source,get,location,assert,class,get,protection,domain,get,code,source,get,location,codebases,remove,all,excluded,final,list,policy,policies,new,array,list,plugin,policies,size,for,url,policy,file,plugin,policies,policies,add,security,read,policy,policy,file,security,get,codebase,jar,map,codebases,map,string,policy,map,new,hash,map,for,url,url,codebases,map,put,url,get,file,new,policy,override,public,boolean,implies,protection,domain,domain,permission,permission,for,policy,p,policies,if,p,implies,domain,permission,return,true,return,false,return,collections,unmodifiable,map,map
