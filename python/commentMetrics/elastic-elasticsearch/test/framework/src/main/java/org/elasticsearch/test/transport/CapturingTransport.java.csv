# id;timestamp;commentText;codeText;commentWords;codeWords
CapturingTransport -> public <Response extends TransportResponse> void handleResponse(final long requestId, final Response response);1540583181;simulate a response for the given requestId;public <Response extends TransportResponse> void handleResponse(final long requestId, final Response response) {_        TransportResponseHandler<Response> handler =_            (TransportResponseHandler<Response>) responseHandlers.onResponseReceived(requestId, listener)__        handler.handleResponse(response)__    };simulate,a,response,for,the,given,request,id;public,response,extends,transport,response,void,handle,response,final,long,request,id,final,response,response,transport,response,handler,response,handler,transport,response,handler,response,response,handlers,on,response,received,request,id,listener,handler,handle,response,response
CapturingTransport -> public <Response extends TransportResponse> void handleResponse(final long requestId, final Response response);1543602642;simulate a response for the given requestId;public <Response extends TransportResponse> void handleResponse(final long requestId, final Response response) {_        TransportResponseHandler<Response> handler =_            (TransportResponseHandler<Response>) responseHandlers.onResponseReceived(requestId, listener)__        handler.handleResponse(response)__    };simulate,a,response,for,the,given,request,id;public,response,extends,transport,response,void,handle,response,final,long,request,id,final,response,response,transport,response,handler,response,handler,transport,response,handler,response,response,handlers,on,response,received,request,id,listener,handler,handle,response,response
CapturingTransport -> public void clear();1524684173;clears captured requests;public void clear() {_        capturedRequests.clear()__    };clears,captured,requests;public,void,clear,captured,requests,clear
CapturingTransport -> public void clear();1529076503;clears captured requests;public void clear() {_        capturedRequests.clear()__    };clears,captured,requests;public,void,clear,captured,requests,clear
CapturingTransport -> public void clear();1531179852;clears captured requests;public void clear() {_        capturedRequests.clear()__    };clears,captured,requests;public,void,clear,captured,requests,clear
CapturingTransport -> public void clear();1534203100;clears captured requests;public void clear() {_        capturedRequests.clear()__    };clears,captured,requests;public,void,clear,captured,requests,clear
CapturingTransport -> public void clear();1534755962;clears captured requests;public void clear() {_        capturedRequests.clear()__    };clears,captured,requests;public,void,clear,captured,requests,clear
CapturingTransport -> public void clear();1535046779;clears captured requests;public void clear() {_        capturedRequests.clear()__    };clears,captured,requests;public,void,clear,captured,requests,clear
CapturingTransport -> public void clear();1540583181;clears captured requests;public void clear() {_        capturedRequests.clear()__    };clears,captured,requests;public,void,clear,captured,requests,clear
CapturingTransport -> public void clear();1543602642;clears captured requests;public void clear() {_        capturedRequests.clear()__    };clears,captured,requests;public,void,clear,captured,requests,clear
CapturingTransport -> public void clear();1544081506;clears captured requests;public void clear() {_        capturedRequests.clear()__    };clears,captured,requests;public,void,clear,captured,requests,clear
CapturingTransport -> public void handleError(final long requestId, final TransportException e);1524684173;simulate an error for the given requestId, unlike_{@link #handleLocalError(long, Throwable)} and_{@link #handleRemoteError(long, Throwable)}, the provided_exception will not be wrapped but will be delivered to the_transport layer as is__@param requestId the id corresponding to the captured send_request_@param e the failure;public void handleError(final long requestId, final TransportException e) {_        transportService.onResponseReceived(requestId).handleException(e)__    };simulate,an,error,for,the,given,request,id,unlike,link,handle,local,error,long,throwable,and,link,handle,remote,error,long,throwable,the,provided,exception,will,not,be,wrapped,but,will,be,delivered,to,the,transport,layer,as,is,param,request,id,the,id,corresponding,to,the,captured,send,request,param,e,the,failure;public,void,handle,error,final,long,request,id,final,transport,exception,e,transport,service,on,response,received,request,id,handle,exception,e
CapturingTransport -> public void handleError(final long requestId, final TransportException e);1529076503;simulate an error for the given requestId, unlike_{@link #handleLocalError(long, Throwable)} and_{@link #handleRemoteError(long, Throwable)}, the provided_exception will not be wrapped but will be delivered to the_transport layer as is__@param requestId the id corresponding to the captured send_request_@param e the failure;public void handleError(final long requestId, final TransportException e) {_        transportService.onResponseReceived(requestId).handleException(e)__    };simulate,an,error,for,the,given,request,id,unlike,link,handle,local,error,long,throwable,and,link,handle,remote,error,long,throwable,the,provided,exception,will,not,be,wrapped,but,will,be,delivered,to,the,transport,layer,as,is,param,request,id,the,id,corresponding,to,the,captured,send,request,param,e,the,failure;public,void,handle,error,final,long,request,id,final,transport,exception,e,transport,service,on,response,received,request,id,handle,exception,e
CapturingTransport -> public void handleError(final long requestId, final TransportException e);1531179852;simulate an error for the given requestId, unlike_{@link #handleLocalError(long, Throwable)} and_{@link #handleRemoteError(long, Throwable)}, the provided_exception will not be wrapped but will be delivered to the_transport layer as is__@param requestId the id corresponding to the captured send_request_@param e the failure;public void handleError(final long requestId, final TransportException e) {_        responseHandlers.onResponseReceived(requestId, listener).handleException(e)__    };simulate,an,error,for,the,given,request,id,unlike,link,handle,local,error,long,throwable,and,link,handle,remote,error,long,throwable,the,provided,exception,will,not,be,wrapped,but,will,be,delivered,to,the,transport,layer,as,is,param,request,id,the,id,corresponding,to,the,captured,send,request,param,e,the,failure;public,void,handle,error,final,long,request,id,final,transport,exception,e,response,handlers,on,response,received,request,id,listener,handle,exception,e
CapturingTransport -> public void handleError(final long requestId, final TransportException e);1534203100;simulate an error for the given requestId, unlike_{@link #handleLocalError(long, Throwable)} and_{@link #handleRemoteError(long, Throwable)}, the provided_exception will not be wrapped but will be delivered to the_transport layer as is__@param requestId the id corresponding to the captured send_request_@param e the failure;public void handleError(final long requestId, final TransportException e) {_        responseHandlers.onResponseReceived(requestId, listener).handleException(e)__    };simulate,an,error,for,the,given,request,id,unlike,link,handle,local,error,long,throwable,and,link,handle,remote,error,long,throwable,the,provided,exception,will,not,be,wrapped,but,will,be,delivered,to,the,transport,layer,as,is,param,request,id,the,id,corresponding,to,the,captured,send,request,param,e,the,failure;public,void,handle,error,final,long,request,id,final,transport,exception,e,response,handlers,on,response,received,request,id,listener,handle,exception,e
CapturingTransport -> public void handleError(final long requestId, final TransportException e);1534755962;simulate an error for the given requestId, unlike_{@link #handleLocalError(long, Throwable)} and_{@link #handleRemoteError(long, Throwable)}, the provided_exception will not be wrapped but will be delivered to the_transport layer as is__@param requestId the id corresponding to the captured send_request_@param e the failure;public void handleError(final long requestId, final TransportException e) {_        responseHandlers.onResponseReceived(requestId, listener).handleException(e)__    };simulate,an,error,for,the,given,request,id,unlike,link,handle,local,error,long,throwable,and,link,handle,remote,error,long,throwable,the,provided,exception,will,not,be,wrapped,but,will,be,delivered,to,the,transport,layer,as,is,param,request,id,the,id,corresponding,to,the,captured,send,request,param,e,the,failure;public,void,handle,error,final,long,request,id,final,transport,exception,e,response,handlers,on,response,received,request,id,listener,handle,exception,e
CapturingTransport -> public void handleError(final long requestId, final TransportException e);1535046779;simulate an error for the given requestId, unlike_{@link #handleLocalError(long, Throwable)} and_{@link #handleRemoteError(long, Throwable)}, the provided_exception will not be wrapped but will be delivered to the_transport layer as is__@param requestId the id corresponding to the captured send_request_@param e         the failure;public void handleError(final long requestId, final TransportException e) {_        responseHandlers.onResponseReceived(requestId, listener).handleException(e)__    };simulate,an,error,for,the,given,request,id,unlike,link,handle,local,error,long,throwable,and,link,handle,remote,error,long,throwable,the,provided,exception,will,not,be,wrapped,but,will,be,delivered,to,the,transport,layer,as,is,param,request,id,the,id,corresponding,to,the,captured,send,request,param,e,the,failure;public,void,handle,error,final,long,request,id,final,transport,exception,e,response,handlers,on,response,received,request,id,listener,handle,exception,e
CapturingTransport -> public void handleError(final long requestId, final TransportException e);1540583181;simulate an error for the given requestId, unlike_{@link #handleLocalError(long, Throwable)} and_{@link #handleRemoteError(long, Throwable)}, the provided_exception will not be wrapped but will be delivered to the_transport layer as is__@param requestId the id corresponding to the captured send_request_@param e         the failure;public void handleError(final long requestId, final TransportException e) {_        responseHandlers.onResponseReceived(requestId, listener).handleException(e)__    };simulate,an,error,for,the,given,request,id,unlike,link,handle,local,error,long,throwable,and,link,handle,remote,error,long,throwable,the,provided,exception,will,not,be,wrapped,but,will,be,delivered,to,the,transport,layer,as,is,param,request,id,the,id,corresponding,to,the,captured,send,request,param,e,the,failure;public,void,handle,error,final,long,request,id,final,transport,exception,e,response,handlers,on,response,received,request,id,listener,handle,exception,e
CapturingTransport -> public void handleError(final long requestId, final TransportException e);1543602642;simulate an error for the given requestId, unlike_{@link #handleLocalError(long, Throwable)} and_{@link #handleRemoteError(long, Throwable)}, the provided_exception will not be wrapped but will be delivered to the_transport layer as is__@param requestId the id corresponding to the captured send_request_@param e         the failure;public void handleError(final long requestId, final TransportException e) {_        responseHandlers.onResponseReceived(requestId, listener).handleException(e)__    };simulate,an,error,for,the,given,request,id,unlike,link,handle,local,error,long,throwable,and,link,handle,remote,error,long,throwable,the,provided,exception,will,not,be,wrapped,but,will,be,delivered,to,the,transport,layer,as,is,param,request,id,the,id,corresponding,to,the,captured,send,request,param,e,the,failure;public,void,handle,error,final,long,request,id,final,transport,exception,e,response,handlers,on,response,received,request,id,listener,handle,exception,e
CapturingTransport -> public void handleResponse(final long requestId, final TransportResponse response);1524684173;simulate a response for the given requestId;public void handleResponse(final long requestId, final TransportResponse response) {_        transportService.onResponseReceived(requestId).handleResponse(response)__    };simulate,a,response,for,the,given,request,id;public,void,handle,response,final,long,request,id,final,transport,response,response,transport,service,on,response,received,request,id,handle,response,response
CapturingTransport -> public void handleResponse(final long requestId, final TransportResponse response);1529076503;simulate a response for the given requestId;public void handleResponse(final long requestId, final TransportResponse response) {_        transportService.onResponseReceived(requestId).handleResponse(response)__    };simulate,a,response,for,the,given,request,id;public,void,handle,response,final,long,request,id,final,transport,response,response,transport,service,on,response,received,request,id,handle,response,response
CapturingTransport -> public void handleResponse(final long requestId, final TransportResponse response);1531179852;simulate a response for the given requestId;public void handleResponse(final long requestId, final TransportResponse response) {_        responseHandlers.onResponseReceived(requestId, listener).handleResponse(response)__    };simulate,a,response,for,the,given,request,id;public,void,handle,response,final,long,request,id,final,transport,response,response,response,handlers,on,response,received,request,id,listener,handle,response,response
CapturingTransport -> public void handleResponse(final long requestId, final TransportResponse response);1534203100;simulate a response for the given requestId;public void handleResponse(final long requestId, final TransportResponse response) {_        responseHandlers.onResponseReceived(requestId, listener).handleResponse(response)__    };simulate,a,response,for,the,given,request,id;public,void,handle,response,final,long,request,id,final,transport,response,response,response,handlers,on,response,received,request,id,listener,handle,response,response
CapturingTransport -> public void handleResponse(final long requestId, final TransportResponse response);1534755962;simulate a response for the given requestId;public void handleResponse(final long requestId, final TransportResponse response) {_        responseHandlers.onResponseReceived(requestId, listener).handleResponse(response)__    };simulate,a,response,for,the,given,request,id;public,void,handle,response,final,long,request,id,final,transport,response,response,response,handlers,on,response,received,request,id,listener,handle,response,response
CapturingTransport -> public void handleResponse(final long requestId, final TransportResponse response);1535046779;simulate a response for the given requestId;public void handleResponse(final long requestId, final TransportResponse response) {_        responseHandlers.onResponseReceived(requestId, listener).handleResponse(response)__    };simulate,a,response,for,the,given,request,id;public,void,handle,response,final,long,request,id,final,transport,response,response,response,handlers,on,response,received,request,id,listener,handle,response,response
CapturingTransport -> public Map<String, List<CapturedRequest>> capturedRequestsByTargetNode();1524684173;returns all requests captured so far, grouped by target node._Doesn't clear the captured request list. See {@link #clear()};public Map<String, List<CapturedRequest>> capturedRequestsByTargetNode() {_        Map<String, List<CapturedRequest>> map = new HashMap<>()__        for (CapturedRequest request : capturedRequests) {_            List<CapturedRequest> nodeList = map.get(request.node.getId())__            if (nodeList == null) {_                nodeList = new ArrayList<>()__                map.put(request.node.getId(), nodeList)__            }_            nodeList.add(request)__        }_        return map__    };returns,all,requests,captured,so,far,grouped,by,target,node,doesn,t,clear,the,captured,request,list,see,link,clear;public,map,string,list,captured,request,captured,requests,by,target,node,map,string,list,captured,request,map,new,hash,map,for,captured,request,request,captured,requests,list,captured,request,node,list,map,get,request,node,get,id,if,node,list,null,node,list,new,array,list,map,put,request,node,get,id,node,list,node,list,add,request,return,map
CapturingTransport -> public Map<String, List<CapturedRequest>> capturedRequestsByTargetNode();1529076503;returns all requests captured so far, grouped by target node._Doesn't clear the captured request list. See {@link #clear()};public Map<String, List<CapturedRequest>> capturedRequestsByTargetNode() {_        return groupRequestsByTargetNode(capturedRequests)__    };returns,all,requests,captured,so,far,grouped,by,target,node,doesn,t,clear,the,captured,request,list,see,link,clear;public,map,string,list,captured,request,captured,requests,by,target,node,return,group,requests,by,target,node,captured,requests
CapturingTransport -> public Map<String, List<CapturedRequest>> capturedRequestsByTargetNode();1531179852;returns all requests captured so far, grouped by target node._Doesn't clear the captured request list. See {@link #clear()};public Map<String, List<CapturedRequest>> capturedRequestsByTargetNode() {_        return groupRequestsByTargetNode(capturedRequests)__    };returns,all,requests,captured,so,far,grouped,by,target,node,doesn,t,clear,the,captured,request,list,see,link,clear;public,map,string,list,captured,request,captured,requests,by,target,node,return,group,requests,by,target,node,captured,requests
CapturingTransport -> public Map<String, List<CapturedRequest>> capturedRequestsByTargetNode();1534203100;returns all requests captured so far, grouped by target node._Doesn't clear the captured request list. See {@link #clear()};public Map<String, List<CapturedRequest>> capturedRequestsByTargetNode() {_        return groupRequestsByTargetNode(capturedRequests)__    };returns,all,requests,captured,so,far,grouped,by,target,node,doesn,t,clear,the,captured,request,list,see,link,clear;public,map,string,list,captured,request,captured,requests,by,target,node,return,group,requests,by,target,node,captured,requests
CapturingTransport -> public Map<String, List<CapturedRequest>> capturedRequestsByTargetNode();1534755962;returns all requests captured so far, grouped by target node._Doesn't clear the captured request list. See {@link #clear()};public Map<String, List<CapturedRequest>> capturedRequestsByTargetNode() {_        return groupRequestsByTargetNode(capturedRequests)__    };returns,all,requests,captured,so,far,grouped,by,target,node,doesn,t,clear,the,captured,request,list,see,link,clear;public,map,string,list,captured,request,captured,requests,by,target,node,return,group,requests,by,target,node,captured,requests
CapturingTransport -> public Map<String, List<CapturedRequest>> capturedRequestsByTargetNode();1535046779;returns all requests captured so far, grouped by target node._Doesn't clear the captured request list. See {@link #clear()};public Map<String, List<CapturedRequest>> capturedRequestsByTargetNode() {_        return groupRequestsByTargetNode(capturedRequests)__    };returns,all,requests,captured,so,far,grouped,by,target,node,doesn,t,clear,the,captured,request,list,see,link,clear;public,map,string,list,captured,request,captured,requests,by,target,node,return,group,requests,by,target,node,captured,requests
CapturingTransport -> public Map<String, List<CapturedRequest>> capturedRequestsByTargetNode();1540583181;returns all requests captured so far, grouped by target node._Doesn't clear the captured request list. See {@link #clear()};public Map<String, List<CapturedRequest>> capturedRequestsByTargetNode() {_        return groupRequestsByTargetNode(capturedRequests)__    };returns,all,requests,captured,so,far,grouped,by,target,node,doesn,t,clear,the,captured,request,list,see,link,clear;public,map,string,list,captured,request,captured,requests,by,target,node,return,group,requests,by,target,node,captured,requests
CapturingTransport -> public Map<String, List<CapturedRequest>> capturedRequestsByTargetNode();1543602642;returns all requests captured so far, grouped by target node._Doesn't clear the captured request list. See {@link #clear()};public Map<String, List<CapturedRequest>> capturedRequestsByTargetNode() {_        return groupRequestsByTargetNode(capturedRequests)__    };returns,all,requests,captured,so,far,grouped,by,target,node,doesn,t,clear,the,captured,request,list,see,link,clear;public,map,string,list,captured,request,captured,requests,by,target,node,return,group,requests,by,target,node,captured,requests
CapturingTransport -> public Map<String, List<CapturedRequest>> capturedRequestsByTargetNode();1544081506;returns all requests captured so far, grouped by target node._Doesn't clear the captured request list. See {@link #clear()};public Map<String, List<CapturedRequest>> capturedRequestsByTargetNode() {_        return groupRequestsByTargetNode(capturedRequests)__    };returns,all,requests,captured,so,far,grouped,by,target,node,doesn,t,clear,the,captured,request,list,see,link,clear;public,map,string,list,captured,request,captured,requests,by,target,node,return,group,requests,by,target,node,captured,requests
CapturingTransport -> public void handleRemoteError(final long requestId, final Throwable t);1524684173;simulate a remote error for the given requestId, will be wrapped_by a {@link RemoteTransportException}__@param requestId the id corresponding to the captured send_request_@param t the failure to wrap;public void handleRemoteError(final long requestId, final Throwable t) {_        final RemoteTransportException remoteException__        if (rarely(Randomness.get())) {_            remoteException = new RemoteTransportException("remote failure, coming from local node", t)__        } else {_            try (BytesStreamOutput output = new BytesStreamOutput()) {_                output.writeException(t)__                remoteException = new RemoteTransportException("remote failure", output.bytes().streamInput().readException())__            } catch (IOException ioException) {_                throw new ElasticsearchException("failed to serialize/deserialize supplied exception " + t, ioException)__            }_        }_        this.handleError(requestId, remoteException)__    };simulate,a,remote,error,for,the,given,request,id,will,be,wrapped,by,a,link,remote,transport,exception,param,request,id,the,id,corresponding,to,the,captured,send,request,param,t,the,failure,to,wrap;public,void,handle,remote,error,final,long,request,id,final,throwable,t,final,remote,transport,exception,remote,exception,if,rarely,randomness,get,remote,exception,new,remote,transport,exception,remote,failure,coming,from,local,node,t,else,try,bytes,stream,output,output,new,bytes,stream,output,output,write,exception,t,remote,exception,new,remote,transport,exception,remote,failure,output,bytes,stream,input,read,exception,catch,ioexception,io,exception,throw,new,elasticsearch,exception,failed,to,serialize,deserialize,supplied,exception,t,io,exception,this,handle,error,request,id,remote,exception
CapturingTransport -> public void handleRemoteError(final long requestId, final Throwable t);1529076503;simulate a remote error for the given requestId, will be wrapped_by a {@link RemoteTransportException}__@param requestId the id corresponding to the captured send_request_@param t the failure to wrap;public void handleRemoteError(final long requestId, final Throwable t) {_        final RemoteTransportException remoteException__        if (rarely(Randomness.get())) {_            remoteException = new RemoteTransportException("remote failure, coming from local node", t)__        } else {_            try (BytesStreamOutput output = new BytesStreamOutput()) {_                output.writeException(t)__                remoteException = new RemoteTransportException("remote failure", output.bytes().streamInput().readException())__            } catch (IOException ioException) {_                throw new ElasticsearchException("failed to serialize/deserialize supplied exception " + t, ioException)__            }_        }_        this.handleError(requestId, remoteException)__    };simulate,a,remote,error,for,the,given,request,id,will,be,wrapped,by,a,link,remote,transport,exception,param,request,id,the,id,corresponding,to,the,captured,send,request,param,t,the,failure,to,wrap;public,void,handle,remote,error,final,long,request,id,final,throwable,t,final,remote,transport,exception,remote,exception,if,rarely,randomness,get,remote,exception,new,remote,transport,exception,remote,failure,coming,from,local,node,t,else,try,bytes,stream,output,output,new,bytes,stream,output,output,write,exception,t,remote,exception,new,remote,transport,exception,remote,failure,output,bytes,stream,input,read,exception,catch,ioexception,io,exception,throw,new,elasticsearch,exception,failed,to,serialize,deserialize,supplied,exception,t,io,exception,this,handle,error,request,id,remote,exception
CapturingTransport -> public void handleRemoteError(final long requestId, final Throwable t);1531179852;simulate a remote error for the given requestId, will be wrapped_by a {@link RemoteTransportException}__@param requestId the id corresponding to the captured send_request_@param t the failure to wrap;public void handleRemoteError(final long requestId, final Throwable t) {_        final RemoteTransportException remoteException__        if (rarely(Randomness.get())) {_            remoteException = new RemoteTransportException("remote failure, coming from local node", t)__        } else {_            try (BytesStreamOutput output = new BytesStreamOutput()) {_                output.writeException(t)__                remoteException = new RemoteTransportException("remote failure", output.bytes().streamInput().readException())__            } catch (IOException ioException) {_                throw new ElasticsearchException("failed to serialize/deserialize supplied exception " + t, ioException)__            }_        }_        this.handleError(requestId, remoteException)__    };simulate,a,remote,error,for,the,given,request,id,will,be,wrapped,by,a,link,remote,transport,exception,param,request,id,the,id,corresponding,to,the,captured,send,request,param,t,the,failure,to,wrap;public,void,handle,remote,error,final,long,request,id,final,throwable,t,final,remote,transport,exception,remote,exception,if,rarely,randomness,get,remote,exception,new,remote,transport,exception,remote,failure,coming,from,local,node,t,else,try,bytes,stream,output,output,new,bytes,stream,output,output,write,exception,t,remote,exception,new,remote,transport,exception,remote,failure,output,bytes,stream,input,read,exception,catch,ioexception,io,exception,throw,new,elasticsearch,exception,failed,to,serialize,deserialize,supplied,exception,t,io,exception,this,handle,error,request,id,remote,exception
CapturingTransport -> public void handleRemoteError(final long requestId, final Throwable t);1534203100;simulate a remote error for the given requestId, will be wrapped_by a {@link RemoteTransportException}__@param requestId the id corresponding to the captured send_request_@param t the failure to wrap;public void handleRemoteError(final long requestId, final Throwable t) {_        final RemoteTransportException remoteException__        if (rarely(Randomness.get())) {_            remoteException = new RemoteTransportException("remote failure, coming from local node", t)__        } else {_            try (BytesStreamOutput output = new BytesStreamOutput()) {_                output.writeException(t)__                remoteException = new RemoteTransportException("remote failure", output.bytes().streamInput().readException())__            } catch (IOException ioException) {_                throw new ElasticsearchException("failed to serialize/deserialize supplied exception " + t, ioException)__            }_        }_        this.handleError(requestId, remoteException)__    };simulate,a,remote,error,for,the,given,request,id,will,be,wrapped,by,a,link,remote,transport,exception,param,request,id,the,id,corresponding,to,the,captured,send,request,param,t,the,failure,to,wrap;public,void,handle,remote,error,final,long,request,id,final,throwable,t,final,remote,transport,exception,remote,exception,if,rarely,randomness,get,remote,exception,new,remote,transport,exception,remote,failure,coming,from,local,node,t,else,try,bytes,stream,output,output,new,bytes,stream,output,output,write,exception,t,remote,exception,new,remote,transport,exception,remote,failure,output,bytes,stream,input,read,exception,catch,ioexception,io,exception,throw,new,elasticsearch,exception,failed,to,serialize,deserialize,supplied,exception,t,io,exception,this,handle,error,request,id,remote,exception
CapturingTransport -> public void handleRemoteError(final long requestId, final Throwable t);1534755962;simulate a remote error for the given requestId, will be wrapped_by a {@link RemoteTransportException}__@param requestId the id corresponding to the captured send_request_@param t the failure to wrap;public void handleRemoteError(final long requestId, final Throwable t) {_        final RemoteTransportException remoteException__        if (rarely(Randomness.get())) {_            remoteException = new RemoteTransportException("remote failure, coming from local node", t)__        } else {_            try (BytesStreamOutput output = new BytesStreamOutput()) {_                output.writeException(t)__                remoteException = new RemoteTransportException("remote failure", output.bytes().streamInput().readException())__            } catch (IOException ioException) {_                throw new ElasticsearchException("failed to serialize/deserialize supplied exception " + t, ioException)__            }_        }_        this.handleError(requestId, remoteException)__    };simulate,a,remote,error,for,the,given,request,id,will,be,wrapped,by,a,link,remote,transport,exception,param,request,id,the,id,corresponding,to,the,captured,send,request,param,t,the,failure,to,wrap;public,void,handle,remote,error,final,long,request,id,final,throwable,t,final,remote,transport,exception,remote,exception,if,rarely,randomness,get,remote,exception,new,remote,transport,exception,remote,failure,coming,from,local,node,t,else,try,bytes,stream,output,output,new,bytes,stream,output,output,write,exception,t,remote,exception,new,remote,transport,exception,remote,failure,output,bytes,stream,input,read,exception,catch,ioexception,io,exception,throw,new,elasticsearch,exception,failed,to,serialize,deserialize,supplied,exception,t,io,exception,this,handle,error,request,id,remote,exception
CapturingTransport -> public void handleRemoteError(final long requestId, final Throwable t);1535046779;simulate a remote error for the given requestId, will be wrapped_by a {@link RemoteTransportException}__@param requestId the id corresponding to the captured send_request_@param t         the failure to wrap;public void handleRemoteError(final long requestId, final Throwable t) {_        final RemoteTransportException remoteException__        if (rarely(Randomness.get())) {_            remoteException = new RemoteTransportException("remote failure, coming from local node", t)__        } else {_            try (BytesStreamOutput output = new BytesStreamOutput()) {_                output.writeException(t)__                remoteException = new RemoteTransportException("remote failure", output.bytes().streamInput().readException())__            } catch (IOException ioException) {_                throw new ElasticsearchException("failed to serialize/deserialize supplied exception " + t, ioException)__            }_        }_        this.handleError(requestId, remoteException)__    };simulate,a,remote,error,for,the,given,request,id,will,be,wrapped,by,a,link,remote,transport,exception,param,request,id,the,id,corresponding,to,the,captured,send,request,param,t,the,failure,to,wrap;public,void,handle,remote,error,final,long,request,id,final,throwable,t,final,remote,transport,exception,remote,exception,if,rarely,randomness,get,remote,exception,new,remote,transport,exception,remote,failure,coming,from,local,node,t,else,try,bytes,stream,output,output,new,bytes,stream,output,output,write,exception,t,remote,exception,new,remote,transport,exception,remote,failure,output,bytes,stream,input,read,exception,catch,ioexception,io,exception,throw,new,elasticsearch,exception,failed,to,serialize,deserialize,supplied,exception,t,io,exception,this,handle,error,request,id,remote,exception
CapturingTransport -> public void handleRemoteError(final long requestId, final Throwable t);1540583181;simulate a remote error for the given requestId, will be wrapped_by a {@link RemoteTransportException}__@param requestId the id corresponding to the captured send_request_@param t         the failure to wrap;public void handleRemoteError(final long requestId, final Throwable t) {_        final RemoteTransportException remoteException__        if (rarely(Randomness.get())) {_            remoteException = new RemoteTransportException("remote failure, coming from local node", t)__        } else {_            try (BytesStreamOutput output = new BytesStreamOutput()) {_                output.writeException(t)__                remoteException = new RemoteTransportException("remote failure", output.bytes().streamInput().readException())__            } catch (IOException ioException) {_                throw new ElasticsearchException("failed to serialize/deserialize supplied exception " + t, ioException)__            }_        }_        this.handleError(requestId, remoteException)__    };simulate,a,remote,error,for,the,given,request,id,will,be,wrapped,by,a,link,remote,transport,exception,param,request,id,the,id,corresponding,to,the,captured,send,request,param,t,the,failure,to,wrap;public,void,handle,remote,error,final,long,request,id,final,throwable,t,final,remote,transport,exception,remote,exception,if,rarely,randomness,get,remote,exception,new,remote,transport,exception,remote,failure,coming,from,local,node,t,else,try,bytes,stream,output,output,new,bytes,stream,output,output,write,exception,t,remote,exception,new,remote,transport,exception,remote,failure,output,bytes,stream,input,read,exception,catch,ioexception,io,exception,throw,new,elasticsearch,exception,failed,to,serialize,deserialize,supplied,exception,t,io,exception,this,handle,error,request,id,remote,exception
CapturingTransport -> public void handleRemoteError(final long requestId, final Throwable t);1543602642;simulate a remote error for the given requestId, will be wrapped_by a {@link RemoteTransportException}__@param requestId the id corresponding to the captured send_request_@param t         the failure to wrap;public void handleRemoteError(final long requestId, final Throwable t) {_        final RemoteTransportException remoteException__        if (rarely(Randomness.get())) {_            remoteException = new RemoteTransportException("remote failure, coming from local node", t)__        } else {_            try (BytesStreamOutput output = new BytesStreamOutput()) {_                output.writeException(t)__                remoteException = new RemoteTransportException("remote failure", output.bytes().streamInput().readException())__            } catch (IOException ioException) {_                throw new ElasticsearchException("failed to serialize/deserialize supplied exception " + t, ioException)__            }_        }_        this.handleError(requestId, remoteException)__    };simulate,a,remote,error,for,the,given,request,id,will,be,wrapped,by,a,link,remote,transport,exception,param,request,id,the,id,corresponding,to,the,captured,send,request,param,t,the,failure,to,wrap;public,void,handle,remote,error,final,long,request,id,final,throwable,t,final,remote,transport,exception,remote,exception,if,rarely,randomness,get,remote,exception,new,remote,transport,exception,remote,failure,coming,from,local,node,t,else,try,bytes,stream,output,output,new,bytes,stream,output,output,write,exception,t,remote,exception,new,remote,transport,exception,remote,failure,output,bytes,stream,input,read,exception,catch,ioexception,io,exception,throw,new,elasticsearch,exception,failed,to,serialize,deserialize,supplied,exception,t,io,exception,this,handle,error,request,id,remote,exception
CapturingTransport -> public CapturedRequest[] capturedRequests();1524684173;returns all requests captured so far. Doesn't clear the captured request list. See {@link #clear()};public CapturedRequest[] capturedRequests() {_        return capturedRequests.toArray(new CapturedRequest[0])__    };returns,all,requests,captured,so,far,doesn,t,clear,the,captured,request,list,see,link,clear;public,captured,request,captured,requests,return,captured,requests,to,array,new,captured,request,0
CapturingTransport -> public CapturedRequest[] capturedRequests();1529076503;returns all requests captured so far. Doesn't clear the captured request list. See {@link #clear()};public CapturedRequest[] capturedRequests() {_        return capturedRequests.toArray(new CapturedRequest[0])__    };returns,all,requests,captured,so,far,doesn,t,clear,the,captured,request,list,see,link,clear;public,captured,request,captured,requests,return,captured,requests,to,array,new,captured,request,0
CapturingTransport -> public CapturedRequest[] capturedRequests();1531179852;returns all requests captured so far. Doesn't clear the captured request list. See {@link #clear()};public CapturedRequest[] capturedRequests() {_        return capturedRequests.toArray(new CapturedRequest[0])__    };returns,all,requests,captured,so,far,doesn,t,clear,the,captured,request,list,see,link,clear;public,captured,request,captured,requests,return,captured,requests,to,array,new,captured,request,0
CapturingTransport -> public CapturedRequest[] capturedRequests();1534203100;returns all requests captured so far. Doesn't clear the captured request list. See {@link #clear()};public CapturedRequest[] capturedRequests() {_        return capturedRequests.toArray(new CapturedRequest[0])__    };returns,all,requests,captured,so,far,doesn,t,clear,the,captured,request,list,see,link,clear;public,captured,request,captured,requests,return,captured,requests,to,array,new,captured,request,0
CapturingTransport -> public CapturedRequest[] capturedRequests();1534755962;returns all requests captured so far. Doesn't clear the captured request list. See {@link #clear()};public CapturedRequest[] capturedRequests() {_        return capturedRequests.toArray(new CapturedRequest[0])__    };returns,all,requests,captured,so,far,doesn,t,clear,the,captured,request,list,see,link,clear;public,captured,request,captured,requests,return,captured,requests,to,array,new,captured,request,0
CapturingTransport -> public CapturedRequest[] capturedRequests();1535046779;returns all requests captured so far. Doesn't clear the captured request list. See {@link #clear()};public CapturedRequest[] capturedRequests() {_        return capturedRequests.toArray(new CapturedRequest[0])__    };returns,all,requests,captured,so,far,doesn,t,clear,the,captured,request,list,see,link,clear;public,captured,request,captured,requests,return,captured,requests,to,array,new,captured,request,0
CapturingTransport -> public CapturedRequest[] capturedRequests();1540583181;returns all requests captured so far. Doesn't clear the captured request list. See {@link #clear()};public CapturedRequest[] capturedRequests() {_        return capturedRequests.toArray(new CapturedRequest[0])__    };returns,all,requests,captured,so,far,doesn,t,clear,the,captured,request,list,see,link,clear;public,captured,request,captured,requests,return,captured,requests,to,array,new,captured,request,0
CapturingTransport -> public CapturedRequest[] capturedRequests();1543602642;returns all requests captured so far. Doesn't clear the captured request list. See {@link #clear()};public CapturedRequest[] capturedRequests() {_        return capturedRequests.toArray(new CapturedRequest[0])__    };returns,all,requests,captured,so,far,doesn,t,clear,the,captured,request,list,see,link,clear;public,captured,request,captured,requests,return,captured,requests,to,array,new,captured,request,0
CapturingTransport -> public CapturedRequest[] capturedRequests();1544081506;returns all requests captured so far. Doesn't clear the captured request list. See {@link #clear()};public CapturedRequest[] capturedRequests() {_        return capturedRequests.toArray(new CapturedRequest[0])__    };returns,all,requests,captured,so,far,doesn,t,clear,the,captured,request,list,see,link,clear;public,captured,request,captured,requests,return,captured,requests,to,array,new,captured,request,0
CapturingTransport -> public CapturedRequest[] getCapturedRequestsAndClear();1524684173;Returns all requests captured so far. This method does clear the_captured requests list. If you do not want the captured requests_list cleared, use {@link #capturedRequests()}.__@return the captured requests;public CapturedRequest[] getCapturedRequestsAndClear() {_        CapturedRequest[] capturedRequests = capturedRequests()__        clear()__        return capturedRequests__    };returns,all,requests,captured,so,far,this,method,does,clear,the,captured,requests,list,if,you,do,not,want,the,captured,requests,list,cleared,use,link,captured,requests,return,the,captured,requests;public,captured,request,get,captured,requests,and,clear,captured,request,captured,requests,captured,requests,clear,return,captured,requests
CapturingTransport -> public CapturedRequest[] getCapturedRequestsAndClear();1529076503;Returns all requests captured so far. This method does clear the_captured requests list. If you do not want the captured requests_list cleared, use {@link #capturedRequests()}.__@return the captured requests;public CapturedRequest[] getCapturedRequestsAndClear() {_        List<CapturedRequest> requests = new ArrayList<>(capturedRequests.size())__        capturedRequests.drainTo(requests)__        return requests.toArray(new CapturedRequest[0])__    };returns,all,requests,captured,so,far,this,method,does,clear,the,captured,requests,list,if,you,do,not,want,the,captured,requests,list,cleared,use,link,captured,requests,return,the,captured,requests;public,captured,request,get,captured,requests,and,clear,list,captured,request,requests,new,array,list,captured,requests,size,captured,requests,drain,to,requests,return,requests,to,array,new,captured,request,0
CapturingTransport -> public CapturedRequest[] getCapturedRequestsAndClear();1531179852;Returns all requests captured so far. This method does clear the_captured requests list. If you do not want the captured requests_list cleared, use {@link #capturedRequests()}.__@return the captured requests;public CapturedRequest[] getCapturedRequestsAndClear() {_        List<CapturedRequest> requests = new ArrayList<>(capturedRequests.size())__        capturedRequests.drainTo(requests)__        return requests.toArray(new CapturedRequest[0])__    };returns,all,requests,captured,so,far,this,method,does,clear,the,captured,requests,list,if,you,do,not,want,the,captured,requests,list,cleared,use,link,captured,requests,return,the,captured,requests;public,captured,request,get,captured,requests,and,clear,list,captured,request,requests,new,array,list,captured,requests,size,captured,requests,drain,to,requests,return,requests,to,array,new,captured,request,0
CapturingTransport -> public CapturedRequest[] getCapturedRequestsAndClear();1534203100;Returns all requests captured so far. This method does clear the_captured requests list. If you do not want the captured requests_list cleared, use {@link #capturedRequests()}.__@return the captured requests;public CapturedRequest[] getCapturedRequestsAndClear() {_        List<CapturedRequest> requests = new ArrayList<>(capturedRequests.size())__        capturedRequests.drainTo(requests)__        return requests.toArray(new CapturedRequest[0])__    };returns,all,requests,captured,so,far,this,method,does,clear,the,captured,requests,list,if,you,do,not,want,the,captured,requests,list,cleared,use,link,captured,requests,return,the,captured,requests;public,captured,request,get,captured,requests,and,clear,list,captured,request,requests,new,array,list,captured,requests,size,captured,requests,drain,to,requests,return,requests,to,array,new,captured,request,0
CapturingTransport -> public CapturedRequest[] getCapturedRequestsAndClear();1534755962;Returns all requests captured so far. This method does clear the_captured requests list. If you do not want the captured requests_list cleared, use {@link #capturedRequests()}.__@return the captured requests;public CapturedRequest[] getCapturedRequestsAndClear() {_        List<CapturedRequest> requests = new ArrayList<>(capturedRequests.size())__        capturedRequests.drainTo(requests)__        return requests.toArray(new CapturedRequest[0])__    };returns,all,requests,captured,so,far,this,method,does,clear,the,captured,requests,list,if,you,do,not,want,the,captured,requests,list,cleared,use,link,captured,requests,return,the,captured,requests;public,captured,request,get,captured,requests,and,clear,list,captured,request,requests,new,array,list,captured,requests,size,captured,requests,drain,to,requests,return,requests,to,array,new,captured,request,0
CapturingTransport -> public CapturedRequest[] getCapturedRequestsAndClear();1535046779;Returns all requests captured so far. This method does clear the_captured requests list. If you do not want the captured requests_list cleared, use {@link #capturedRequests()}.__@return the captured requests;public CapturedRequest[] getCapturedRequestsAndClear() {_        List<CapturedRequest> requests = new ArrayList<>(capturedRequests.size())__        capturedRequests.drainTo(requests)__        return requests.toArray(new CapturedRequest[0])__    };returns,all,requests,captured,so,far,this,method,does,clear,the,captured,requests,list,if,you,do,not,want,the,captured,requests,list,cleared,use,link,captured,requests,return,the,captured,requests;public,captured,request,get,captured,requests,and,clear,list,captured,request,requests,new,array,list,captured,requests,size,captured,requests,drain,to,requests,return,requests,to,array,new,captured,request,0
CapturingTransport -> public CapturedRequest[] getCapturedRequestsAndClear();1540583181;Returns all requests captured so far. This method does clear the_captured requests list. If you do not want the captured requests_list cleared, use {@link #capturedRequests()}.__@return the captured requests;public CapturedRequest[] getCapturedRequestsAndClear() {_        List<CapturedRequest> requests = new ArrayList<>(capturedRequests.size())__        capturedRequests.drainTo(requests)__        return requests.toArray(new CapturedRequest[0])__    };returns,all,requests,captured,so,far,this,method,does,clear,the,captured,requests,list,if,you,do,not,want,the,captured,requests,list,cleared,use,link,captured,requests,return,the,captured,requests;public,captured,request,get,captured,requests,and,clear,list,captured,request,requests,new,array,list,captured,requests,size,captured,requests,drain,to,requests,return,requests,to,array,new,captured,request,0
CapturingTransport -> public CapturedRequest[] getCapturedRequestsAndClear();1543602642;Returns all requests captured so far. This method does clear the_captured requests list. If you do not want the captured requests_list cleared, use {@link #capturedRequests()}.__@return the captured requests;public CapturedRequest[] getCapturedRequestsAndClear() {_        List<CapturedRequest> requests = new ArrayList<>(capturedRequests.size())__        capturedRequests.drainTo(requests)__        return requests.toArray(new CapturedRequest[0])__    };returns,all,requests,captured,so,far,this,method,does,clear,the,captured,requests,list,if,you,do,not,want,the,captured,requests,list,cleared,use,link,captured,requests,return,the,captured,requests;public,captured,request,get,captured,requests,and,clear,list,captured,request,requests,new,array,list,captured,requests,size,captured,requests,drain,to,requests,return,requests,to,array,new,captured,request,0
CapturingTransport -> public CapturedRequest[] getCapturedRequestsAndClear();1544081506;Returns all requests captured so far. This method does clear the_captured requests list. If you do not want the captured requests_list cleared, use {@link #capturedRequests()}.__@return the captured requests;public CapturedRequest[] getCapturedRequestsAndClear() {_        List<CapturedRequest> requests = new ArrayList<>(capturedRequests.size())__        capturedRequests.drainTo(requests)__        return requests.toArray(new CapturedRequest[0])__    };returns,all,requests,captured,so,far,this,method,does,clear,the,captured,requests,list,if,you,do,not,want,the,captured,requests,list,cleared,use,link,captured,requests,return,the,captured,requests;public,captured,request,get,captured,requests,and,clear,list,captured,request,requests,new,array,list,captured,requests,size,captured,requests,drain,to,requests,return,requests,to,array,new,captured,request,0
CapturingTransport -> public void handleLocalError(final long requestId, final Throwable t);1524684173;simulate a local error for the given requestId, will be wrapped_by a {@link SendRequestTransportException}__@param requestId the id corresponding to the captured send_request_@param t the failure to wrap;public void handleLocalError(final long requestId, final Throwable t) {_        Tuple<DiscoveryNode, String> request = requests.get(requestId)__        assert request != null__        this.handleError(requestId, new SendRequestTransportException(request.v1(), request.v2(), t))__    };simulate,a,local,error,for,the,given,request,id,will,be,wrapped,by,a,link,send,request,transport,exception,param,request,id,the,id,corresponding,to,the,captured,send,request,param,t,the,failure,to,wrap;public,void,handle,local,error,final,long,request,id,final,throwable,t,tuple,discovery,node,string,request,requests,get,request,id,assert,request,null,this,handle,error,request,id,new,send,request,transport,exception,request,v1,request,v2,t
CapturingTransport -> public void handleLocalError(final long requestId, final Throwable t);1529076503;simulate a local error for the given requestId, will be wrapped_by a {@link SendRequestTransportException}__@param requestId the id corresponding to the captured send_request_@param t the failure to wrap;public void handleLocalError(final long requestId, final Throwable t) {_        Tuple<DiscoveryNode, String> request = requests.get(requestId)__        assert request != null__        this.handleError(requestId, new SendRequestTransportException(request.v1(), request.v2(), t))__    };simulate,a,local,error,for,the,given,request,id,will,be,wrapped,by,a,link,send,request,transport,exception,param,request,id,the,id,corresponding,to,the,captured,send,request,param,t,the,failure,to,wrap;public,void,handle,local,error,final,long,request,id,final,throwable,t,tuple,discovery,node,string,request,requests,get,request,id,assert,request,null,this,handle,error,request,id,new,send,request,transport,exception,request,v1,request,v2,t
CapturingTransport -> public void handleLocalError(final long requestId, final Throwable t);1531179852;simulate a local error for the given requestId, will be wrapped_by a {@link SendRequestTransportException}__@param requestId the id corresponding to the captured send_request_@param t the failure to wrap;public void handleLocalError(final long requestId, final Throwable t) {_        Tuple<DiscoveryNode, String> request = requests.get(requestId)__        assert request != null__        this.handleError(requestId, new SendRequestTransportException(request.v1(), request.v2(), t))__    };simulate,a,local,error,for,the,given,request,id,will,be,wrapped,by,a,link,send,request,transport,exception,param,request,id,the,id,corresponding,to,the,captured,send,request,param,t,the,failure,to,wrap;public,void,handle,local,error,final,long,request,id,final,throwable,t,tuple,discovery,node,string,request,requests,get,request,id,assert,request,null,this,handle,error,request,id,new,send,request,transport,exception,request,v1,request,v2,t
CapturingTransport -> public void handleLocalError(final long requestId, final Throwable t);1534203100;simulate a local error for the given requestId, will be wrapped_by a {@link SendRequestTransportException}__@param requestId the id corresponding to the captured send_request_@param t the failure to wrap;public void handleLocalError(final long requestId, final Throwable t) {_        Tuple<DiscoveryNode, String> request = requests.get(requestId)__        assert request != null__        this.handleError(requestId, new SendRequestTransportException(request.v1(), request.v2(), t))__    };simulate,a,local,error,for,the,given,request,id,will,be,wrapped,by,a,link,send,request,transport,exception,param,request,id,the,id,corresponding,to,the,captured,send,request,param,t,the,failure,to,wrap;public,void,handle,local,error,final,long,request,id,final,throwable,t,tuple,discovery,node,string,request,requests,get,request,id,assert,request,null,this,handle,error,request,id,new,send,request,transport,exception,request,v1,request,v2,t
CapturingTransport -> public void handleLocalError(final long requestId, final Throwable t);1534755962;simulate a local error for the given requestId, will be wrapped_by a {@link SendRequestTransportException}__@param requestId the id corresponding to the captured send_request_@param t the failure to wrap;public void handleLocalError(final long requestId, final Throwable t) {_        Tuple<DiscoveryNode, String> request = requests.get(requestId)__        assert request != null__        this.handleError(requestId, new SendRequestTransportException(request.v1(), request.v2(), t))__    };simulate,a,local,error,for,the,given,request,id,will,be,wrapped,by,a,link,send,request,transport,exception,param,request,id,the,id,corresponding,to,the,captured,send,request,param,t,the,failure,to,wrap;public,void,handle,local,error,final,long,request,id,final,throwable,t,tuple,discovery,node,string,request,requests,get,request,id,assert,request,null,this,handle,error,request,id,new,send,request,transport,exception,request,v1,request,v2,t
CapturingTransport -> public void handleLocalError(final long requestId, final Throwable t);1535046779;simulate a local error for the given requestId, will be wrapped_by a {@link SendRequestTransportException}__@param requestId the id corresponding to the captured send_request_@param t         the failure to wrap;public void handleLocalError(final long requestId, final Throwable t) {_        Tuple<DiscoveryNode, String> request = requests.get(requestId)__        assert request != null__        this.handleError(requestId, new SendRequestTransportException(request.v1(), request.v2(), t))__    };simulate,a,local,error,for,the,given,request,id,will,be,wrapped,by,a,link,send,request,transport,exception,param,request,id,the,id,corresponding,to,the,captured,send,request,param,t,the,failure,to,wrap;public,void,handle,local,error,final,long,request,id,final,throwable,t,tuple,discovery,node,string,request,requests,get,request,id,assert,request,null,this,handle,error,request,id,new,send,request,transport,exception,request,v1,request,v2,t
CapturingTransport -> public void handleLocalError(final long requestId, final Throwable t);1540583181;simulate a local error for the given requestId, will be wrapped_by a {@link SendRequestTransportException}__@param requestId the id corresponding to the captured send_request_@param t         the failure to wrap;public void handleLocalError(final long requestId, final Throwable t) {_        Tuple<DiscoveryNode, String> request = requests.get(requestId)__        assert request != null__        this.handleError(requestId, new SendRequestTransportException(request.v1(), request.v2(), t))__    };simulate,a,local,error,for,the,given,request,id,will,be,wrapped,by,a,link,send,request,transport,exception,param,request,id,the,id,corresponding,to,the,captured,send,request,param,t,the,failure,to,wrap;public,void,handle,local,error,final,long,request,id,final,throwable,t,tuple,discovery,node,string,request,requests,get,request,id,assert,request,null,this,handle,error,request,id,new,send,request,transport,exception,request,v1,request,v2,t
CapturingTransport -> public void handleLocalError(final long requestId, final Throwable t);1543602642;simulate a local error for the given requestId, will be wrapped_by a {@link SendRequestTransportException}__@param requestId the id corresponding to the captured send_request_@param t         the failure to wrap;public void handleLocalError(final long requestId, final Throwable t) {_        Tuple<DiscoveryNode, String> request = requests.get(requestId)__        assert request != null__        this.handleError(requestId, new SendRequestTransportException(request.v1(), request.v2(), t))__    };simulate,a,local,error,for,the,given,request,id,will,be,wrapped,by,a,link,send,request,transport,exception,param,request,id,the,id,corresponding,to,the,captured,send,request,param,t,the,failure,to,wrap;public,void,handle,local,error,final,long,request,id,final,throwable,t,tuple,discovery,node,string,request,requests,get,request,id,assert,request,null,this,handle,error,request,id,new,send,request,transport,exception,request,v1,request,v2,t
CapturingTransport -> public Map<String, List<CapturedRequest>> getCapturedRequestsByTargetNodeAndClear();1524684173;Returns all requests captured so far, grouped by target node._This method does clear the captured request list. If you do not_want the captured requests list cleared, use_{@link #capturedRequestsByTargetNode()}.__@return the captured requests grouped by target node;public Map<String, List<CapturedRequest>> getCapturedRequestsByTargetNodeAndClear() {_        Map<String, List<CapturedRequest>> map = capturedRequestsByTargetNode()__        clear()__        return map__    };returns,all,requests,captured,so,far,grouped,by,target,node,this,method,does,clear,the,captured,request,list,if,you,do,not,want,the,captured,requests,list,cleared,use,link,captured,requests,by,target,node,return,the,captured,requests,grouped,by,target,node;public,map,string,list,captured,request,get,captured,requests,by,target,node,and,clear,map,string,list,captured,request,map,captured,requests,by,target,node,clear,return,map
CapturingTransport -> public Map<String, List<CapturedRequest>> getCapturedRequestsByTargetNodeAndClear();1529076503;Returns all requests captured so far, grouped by target node._This method does clear the captured request list. If you do not_want the captured requests list cleared, use_{@link #capturedRequestsByTargetNode()}.__@return the captured requests grouped by target node;public Map<String, List<CapturedRequest>> getCapturedRequestsByTargetNodeAndClear() {_        List<CapturedRequest> requests = new ArrayList<>(capturedRequests.size())__        capturedRequests.drainTo(requests)__        return groupRequestsByTargetNode(requests)__    };returns,all,requests,captured,so,far,grouped,by,target,node,this,method,does,clear,the,captured,request,list,if,you,do,not,want,the,captured,requests,list,cleared,use,link,captured,requests,by,target,node,return,the,captured,requests,grouped,by,target,node;public,map,string,list,captured,request,get,captured,requests,by,target,node,and,clear,list,captured,request,requests,new,array,list,captured,requests,size,captured,requests,drain,to,requests,return,group,requests,by,target,node,requests
CapturingTransport -> public Map<String, List<CapturedRequest>> getCapturedRequestsByTargetNodeAndClear();1531179852;Returns all requests captured so far, grouped by target node._This method does clear the captured request list. If you do not_want the captured requests list cleared, use_{@link #capturedRequestsByTargetNode()}.__@return the captured requests grouped by target node;public Map<String, List<CapturedRequest>> getCapturedRequestsByTargetNodeAndClear() {_        List<CapturedRequest> requests = new ArrayList<>(capturedRequests.size())__        capturedRequests.drainTo(requests)__        return groupRequestsByTargetNode(requests)__    };returns,all,requests,captured,so,far,grouped,by,target,node,this,method,does,clear,the,captured,request,list,if,you,do,not,want,the,captured,requests,list,cleared,use,link,captured,requests,by,target,node,return,the,captured,requests,grouped,by,target,node;public,map,string,list,captured,request,get,captured,requests,by,target,node,and,clear,list,captured,request,requests,new,array,list,captured,requests,size,captured,requests,drain,to,requests,return,group,requests,by,target,node,requests
CapturingTransport -> public Map<String, List<CapturedRequest>> getCapturedRequestsByTargetNodeAndClear();1534203100;Returns all requests captured so far, grouped by target node._This method does clear the captured request list. If you do not_want the captured requests list cleared, use_{@link #capturedRequestsByTargetNode()}.__@return the captured requests grouped by target node;public Map<String, List<CapturedRequest>> getCapturedRequestsByTargetNodeAndClear() {_        List<CapturedRequest> requests = new ArrayList<>(capturedRequests.size())__        capturedRequests.drainTo(requests)__        return groupRequestsByTargetNode(requests)__    };returns,all,requests,captured,so,far,grouped,by,target,node,this,method,does,clear,the,captured,request,list,if,you,do,not,want,the,captured,requests,list,cleared,use,link,captured,requests,by,target,node,return,the,captured,requests,grouped,by,target,node;public,map,string,list,captured,request,get,captured,requests,by,target,node,and,clear,list,captured,request,requests,new,array,list,captured,requests,size,captured,requests,drain,to,requests,return,group,requests,by,target,node,requests
CapturingTransport -> public Map<String, List<CapturedRequest>> getCapturedRequestsByTargetNodeAndClear();1534755962;Returns all requests captured so far, grouped by target node._This method does clear the captured request list. If you do not_want the captured requests list cleared, use_{@link #capturedRequestsByTargetNode()}.__@return the captured requests grouped by target node;public Map<String, List<CapturedRequest>> getCapturedRequestsByTargetNodeAndClear() {_        List<CapturedRequest> requests = new ArrayList<>(capturedRequests.size())__        capturedRequests.drainTo(requests)__        return groupRequestsByTargetNode(requests)__    };returns,all,requests,captured,so,far,grouped,by,target,node,this,method,does,clear,the,captured,request,list,if,you,do,not,want,the,captured,requests,list,cleared,use,link,captured,requests,by,target,node,return,the,captured,requests,grouped,by,target,node;public,map,string,list,captured,request,get,captured,requests,by,target,node,and,clear,list,captured,request,requests,new,array,list,captured,requests,size,captured,requests,drain,to,requests,return,group,requests,by,target,node,requests
CapturingTransport -> public Map<String, List<CapturedRequest>> getCapturedRequestsByTargetNodeAndClear();1535046779;Returns all requests captured so far, grouped by target node._This method does clear the captured request list. If you do not_want the captured requests list cleared, use_{@link #capturedRequestsByTargetNode()}.__@return the captured requests grouped by target node;public Map<String, List<CapturedRequest>> getCapturedRequestsByTargetNodeAndClear() {_        List<CapturedRequest> requests = new ArrayList<>(capturedRequests.size())__        capturedRequests.drainTo(requests)__        return groupRequestsByTargetNode(requests)__    };returns,all,requests,captured,so,far,grouped,by,target,node,this,method,does,clear,the,captured,request,list,if,you,do,not,want,the,captured,requests,list,cleared,use,link,captured,requests,by,target,node,return,the,captured,requests,grouped,by,target,node;public,map,string,list,captured,request,get,captured,requests,by,target,node,and,clear,list,captured,request,requests,new,array,list,captured,requests,size,captured,requests,drain,to,requests,return,group,requests,by,target,node,requests
CapturingTransport -> public Map<String, List<CapturedRequest>> getCapturedRequestsByTargetNodeAndClear();1540583181;Returns all requests captured so far, grouped by target node._This method does clear the captured request list. If you do not_want the captured requests list cleared, use_{@link #capturedRequestsByTargetNode()}.__@return the captured requests grouped by target node;public Map<String, List<CapturedRequest>> getCapturedRequestsByTargetNodeAndClear() {_        List<CapturedRequest> requests = new ArrayList<>(capturedRequests.size())__        capturedRequests.drainTo(requests)__        return groupRequestsByTargetNode(requests)__    };returns,all,requests,captured,so,far,grouped,by,target,node,this,method,does,clear,the,captured,request,list,if,you,do,not,want,the,captured,requests,list,cleared,use,link,captured,requests,by,target,node,return,the,captured,requests,grouped,by,target,node;public,map,string,list,captured,request,get,captured,requests,by,target,node,and,clear,list,captured,request,requests,new,array,list,captured,requests,size,captured,requests,drain,to,requests,return,group,requests,by,target,node,requests
CapturingTransport -> public Map<String, List<CapturedRequest>> getCapturedRequestsByTargetNodeAndClear();1543602642;Returns all requests captured so far, grouped by target node._This method does clear the captured request list. If you do not_want the captured requests list cleared, use_{@link #capturedRequestsByTargetNode()}.__@return the captured requests grouped by target node;public Map<String, List<CapturedRequest>> getCapturedRequestsByTargetNodeAndClear() {_        List<CapturedRequest> requests = new ArrayList<>(capturedRequests.size())__        capturedRequests.drainTo(requests)__        return groupRequestsByTargetNode(requests)__    };returns,all,requests,captured,so,far,grouped,by,target,node,this,method,does,clear,the,captured,request,list,if,you,do,not,want,the,captured,requests,list,cleared,use,link,captured,requests,by,target,node,return,the,captured,requests,grouped,by,target,node;public,map,string,list,captured,request,get,captured,requests,by,target,node,and,clear,list,captured,request,requests,new,array,list,captured,requests,size,captured,requests,drain,to,requests,return,group,requests,by,target,node,requests
CapturingTransport -> public Map<String, List<CapturedRequest>> getCapturedRequestsByTargetNodeAndClear();1544081506;Returns all requests captured so far, grouped by target node._This method does clear the captured request list. If you do not_want the captured requests list cleared, use_{@link #capturedRequestsByTargetNode()}.__@return the captured requests grouped by target node;public Map<String, List<CapturedRequest>> getCapturedRequestsByTargetNodeAndClear() {_        List<CapturedRequest> requests = new ArrayList<>(capturedRequests.size())__        capturedRequests.drainTo(requests)__        return groupRequestsByTargetNode(requests)__    };returns,all,requests,captured,so,far,grouped,by,target,node,this,method,does,clear,the,captured,request,list,if,you,do,not,want,the,captured,requests,list,cleared,use,link,captured,requests,by,target,node,return,the,captured,requests,grouped,by,target,node;public,map,string,list,captured,request,get,captured,requests,by,target,node,and,clear,list,captured,request,requests,new,array,list,captured,requests,size,captured,requests,drain,to,requests,return,group,requests,by,target,node,requests
