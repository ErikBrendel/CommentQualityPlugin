commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;13;/**  * Returns a random {@link CreateIndexRequest}.  *  * Randomizes the index name, the aliases, mappings and settings associated with the  * index. If present, the mapping definition will be nested under a type name.  */ ;/**  * Returns a random {@link CreateIndexRequest}.  *  * Randomizes the index name, the aliases, mappings and settings associated with the  * index. If present, the mapping definition will be nested under a type name.  */ public static CreateIndexRequest randomCreateIndexRequest() throws IOException {     String index = randomAlphaOfLength(5).     CreateIndexRequest request = new CreateIndexRequest(index).     randomAliases(request).     if (randomBoolean()) {         String type = randomAlphaOfLength(5).         request.mapping(type, randomMapping(type)).     }     if (randomBoolean()) {         request.settings(randomIndexSettings()).     }     return request. }
true;public,static;0;15;/**  * Returns a {@link Settings} instance which include random values for  * {@link org.elasticsearch.cluster.metadata.IndexMetaData#SETTING_NUMBER_OF_SHARDS} and  * {@link org.elasticsearch.cluster.metadata.IndexMetaData#SETTING_NUMBER_OF_REPLICAS}  */ ;/**  * Returns a {@link Settings} instance which include random values for  * {@link org.elasticsearch.cluster.metadata.IndexMetaData#SETTING_NUMBER_OF_SHARDS} and  * {@link org.elasticsearch.cluster.metadata.IndexMetaData#SETTING_NUMBER_OF_REPLICAS}  */ public static Settings randomIndexSettings() {     Settings.Builder builder = Settings.builder().     if (randomBoolean()) {         int numberOfShards = randomIntBetween(1, 10).         builder.put(SETTING_NUMBER_OF_SHARDS, numberOfShards).     }     if (randomBoolean()) {         int numberOfReplicas = randomIntBetween(1, 10).         builder.put(SETTING_NUMBER_OF_REPLICAS, numberOfReplicas).     }     return builder.build(). }
true;public,static;1;9;/**  * Creates a random mapping, with the mapping definition nested  * under the given type name.  */ ;/**  * Creates a random mapping, with the mapping definition nested  * under the given type name.  */ public static XContentBuilder randomMapping(String type) throws IOException {     XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values())).     builder.startObject().startObject(type).     randomMappingFields(builder, true).     builder.endObject().endObject().     return builder. }
true;public,static;2;18;/**  * Adds random mapping fields to the provided {@link XContentBuilder}  */ ;/**  * Adds random mapping fields to the provided {@link XContentBuilder}  */ public static void randomMappingFields(XContentBuilder builder, boolean allowObjectField) throws IOException {     builder.startObject("properties").     int fieldsNo = randomIntBetween(0, 5).     for (int i = 0. i < fieldsNo. i++) {         builder.startObject(randomAlphaOfLength(5)).         if (allowObjectField && randomBoolean()) {             randomMappingFields(builder, false).         } else {             builder.field("type", "text").         }         builder.endObject().     }     builder.endObject(). }
true;public,static;1;6;/**  * Sets random aliases to the provided {@link CreateIndexRequest}  */ ;/**  * Sets random aliases to the provided {@link CreateIndexRequest}  */ public static void randomAliases(CreateIndexRequest request) {     int aliasesNo = randomIntBetween(0, 2).     for (int i = 0. i < aliasesNo. i++) {         request.alias(randomAlias()).     } }
false;public,static;0;26;;public static Alias randomAlias() {     Alias alias = new Alias(randomAlphaOfLength(5)).     if (randomBoolean()) {         if (randomBoolean()) {             alias.routing(randomAlphaOfLength(5)).         } else {             if (randomBoolean()) {                 alias.indexRouting(randomAlphaOfLength(5)).             }             if (randomBoolean()) {                 alias.searchRouting(randomAlphaOfLength(5)).             }         }     }     if (randomBoolean()) {         alias.filter("{\"term\":{\"year\":2016}}").     }     if (randomBoolean()) {         alias.writeIndex(randomBoolean()).     }     return alias. }
