commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;22;;public static ClientYamlTestSection parse(XContentParser parser) throws IOException {     ParserUtils.advanceToFieldName(parser).     XContentLocation sectionLocation = parser.getTokenLocation().     String sectionName = parser.currentName().     List<ExecutableSection> executableSections = new ArrayList<>().     try {         parser.nextToken().         SkipSection skipSection = SkipSection.parseIfNext(parser).         while (parser.currentToken() != XContentParser.Token.END_ARRAY) {             ParserUtils.advanceToFieldName(parser).             executableSections.add(ExecutableSection.parse(parser)).         }         if (parser.nextToken() != XContentParser.Token.END_OBJECT) {             throw new IllegalArgumentException("malformed section [" + sectionName + "] expected [" + XContentParser.Token.END_OBJECT + "] but was [" + parser.currentToken() + "]").         }         parser.nextToken().         return new ClientYamlTestSection(sectionLocation, sectionName, skipSection, executableSections).     } catch (Exception e) {         throw new ParsingException(parser.getTokenLocation(), "Error parsing test named [" + sectionName + "]", e).     } }
false;public;0;3;;public XContentLocation getLocation() {     return location. }
false;public;0;3;;public String getName() {     return name. }
false;public;0;3;;public SkipSection getSkipSection() {     return skipSection. }
false;public;0;3;;public List<ExecutableSection> getExecutableSections() {     return executableSections. }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     ClientYamlTestSection that = (ClientYamlTestSection) o.     if (name != null ? !name.equals(that.name) : that.name != null)         return false.     return true. }
false;public;0;4;;@Override public int hashCode() {     return name != null ? name.hashCode() : 0. }
false;public;1;4;;@Override public int compareTo(ClientYamlTestSection o) {     return name.compareTo(o.getName()). }
