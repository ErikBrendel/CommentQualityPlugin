commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;26;;public static void ensureAllArraysAreReleased() throws Exception {     final Map<Object, Object> masterCopy = new HashMap<>(ACQUIRED_ARRAYS).     if (!masterCopy.isEmpty()) {         // not empty, we might be executing on a shared cluster that keeps on obtaining         // and releasing arrays, lets make sure that after a reasonable timeout, all master         // copy (snapshot) have been released         boolean success = ESTestCase.awaitBusy(() -> Sets.haveEmptyIntersection(masterCopy.keySet(), ACQUIRED_ARRAYS.keySet())).         if (!success) {             masterCopy.keySet().retainAll(ACQUIRED_ARRAYS.keySet()).             // remove all existing master copy we will report on             ACQUIRED_ARRAYS.keySet().removeAll(masterCopy.keySet()).             if (!masterCopy.isEmpty()) {                 Iterator<Object> causes = masterCopy.values().iterator().                 Object firstCause = causes.next().                 RuntimeException exception = new RuntimeException(masterCopy.size() + " arrays have not been released", firstCause instanceof Throwable ? (Throwable) firstCause : null).                 while (causes.hasNext()) {                     Object cause = causes.next().                     if (cause instanceof Throwable) {                         exception.addSuppressed((Throwable) cause).                     }                 }                 throw exception.             }         }     } }
false;public;0;4;;@Override public BigArrays withCircuitBreaking() {     return new MockBigArrays(this.recycler, this.breakerService, true). }
false;public;2;8;;@Override public ByteArray newByteArray(long size, boolean clearOnResize) {     final ByteArrayWrapper array = new ByteArrayWrapper(super.newByteArray(size, clearOnResize), clearOnResize).     if (!clearOnResize) {         array.randomizeContent(0, size).     }     return array. }
false;public;2;16;;@Override public ByteArray resize(ByteArray array, long size) {     ByteArrayWrapper arr = (ByteArrayWrapper) array.     final long originalSize = arr.size().     array = super.resize(arr.in, size).     ACQUIRED_ARRAYS.remove(arr).     if (array instanceof ByteArrayWrapper) {         arr = (ByteArrayWrapper) array.     } else {         arr = new ByteArrayWrapper(array, arr.clearOnResize).     }     if (!arr.clearOnResize) {         arr.randomizeContent(originalSize, size).     }     return arr. }
false;public;2;8;;@Override public IntArray newIntArray(long size, boolean clearOnResize) {     final IntArrayWrapper array = new IntArrayWrapper(super.newIntArray(size, clearOnResize), clearOnResize).     if (!clearOnResize) {         array.randomizeContent(0, size).     }     return array. }
false;public;2;16;;@Override public IntArray resize(IntArray array, long size) {     IntArrayWrapper arr = (IntArrayWrapper) array.     final long originalSize = arr.size().     array = super.resize(arr.in, size).     ACQUIRED_ARRAYS.remove(arr).     if (array instanceof IntArrayWrapper) {         arr = (IntArrayWrapper) array.     } else {         arr = new IntArrayWrapper(array, arr.clearOnResize).     }     if (!arr.clearOnResize) {         arr.randomizeContent(originalSize, size).     }     return arr. }
false;public;2;8;;@Override public LongArray newLongArray(long size, boolean clearOnResize) {     final LongArrayWrapper array = new LongArrayWrapper(super.newLongArray(size, clearOnResize), clearOnResize).     if (!clearOnResize) {         array.randomizeContent(0, size).     }     return array. }
false;public;2;16;;@Override public LongArray resize(LongArray array, long size) {     LongArrayWrapper arr = (LongArrayWrapper) array.     final long originalSize = arr.size().     array = super.resize(arr.in, size).     ACQUIRED_ARRAYS.remove(arr).     if (array instanceof LongArrayWrapper) {         arr = (LongArrayWrapper) array.     } else {         arr = new LongArrayWrapper(array, arr.clearOnResize).     }     if (!arr.clearOnResize) {         arr.randomizeContent(originalSize, size).     }     return arr. }
false;public;2;8;;@Override public FloatArray newFloatArray(long size, boolean clearOnResize) {     final FloatArrayWrapper array = new FloatArrayWrapper(super.newFloatArray(size, clearOnResize), clearOnResize).     if (!clearOnResize) {         array.randomizeContent(0, size).     }     return array. }
false;public;2;16;;@Override public FloatArray resize(FloatArray array, long size) {     FloatArrayWrapper arr = (FloatArrayWrapper) array.     final long originalSize = arr.size().     array = super.resize(arr.in, size).     ACQUIRED_ARRAYS.remove(arr).     if (array instanceof FloatArrayWrapper) {         arr = (FloatArrayWrapper) array.     } else {         arr = new FloatArrayWrapper(array, arr.clearOnResize).     }     if (!arr.clearOnResize) {         arr.randomizeContent(originalSize, size).     }     return arr. }
false;public;2;8;;@Override public DoubleArray newDoubleArray(long size, boolean clearOnResize) {     final DoubleArrayWrapper array = new DoubleArrayWrapper(super.newDoubleArray(size, clearOnResize), clearOnResize).     if (!clearOnResize) {         array.randomizeContent(0, size).     }     return array. }
false;public;2;16;;@Override public DoubleArray resize(DoubleArray array, long size) {     DoubleArrayWrapper arr = (DoubleArrayWrapper) array.     final long originalSize = arr.size().     array = super.resize(arr.in, size).     ACQUIRED_ARRAYS.remove(arr).     if (array instanceof DoubleArrayWrapper) {         arr = (DoubleArrayWrapper) array.     } else {         arr = new DoubleArrayWrapper(array, arr.clearOnResize).     }     if (!arr.clearOnResize) {         arr.randomizeContent(originalSize, size).     }     return arr. }
false;public;1;4;;@Override public <T> ObjectArray<T> newObjectArray(long size) {     return new ObjectArrayWrapper<>(super.<T>newObjectArray(size)). }
false;public;2;12;;@Override public <T> ObjectArray<T> resize(ObjectArray<T> array, long size) {     ObjectArrayWrapper<T> arr = (ObjectArrayWrapper<T>) array.     array = super.resize(arr.in, size).     ACQUIRED_ARRAYS.remove(arr).     if (array instanceof ObjectArrayWrapper) {         arr = (ObjectArrayWrapper<T>) array.     } else {         arr = new ObjectArrayWrapper<>(array).     }     return arr. }
false;protected,abstract;0;1;;protected abstract BigArray getDelegate().
false;protected,abstract;2;1;;protected abstract void randomizeContent(long from, long to).
false;public;0;3;;public long size() {     return getDelegate().size(). }
false;public;0;3;;public long ramBytesUsed() {     return getDelegate().ramBytesUsed(). }
false;public;0;8;;public void close() {     if (originalRelease.compareAndSet(null, new AssertionError()) == false) {         throw new IllegalStateException("Double release. Original release attached as cause", originalRelease.get()).     }     ACQUIRED_ARRAYS.remove(this).     randomizeContent(0, size()).     getDelegate().close(). }
false;protected;0;4;;@Override protected BigArray getDelegate() {     return in. }
false;protected;2;4;;@Override protected void randomizeContent(long from, long to) {     fill(from, to, (byte) random.nextInt(1 << 8)). }
false;public;1;4;;@Override public byte get(long index) {     return in.get(index). }
false;public;2;4;;@Override public byte set(long index, byte value) {     return in.set(index, value). }
false;public;3;4;;@Override public boolean get(long index, int len, BytesRef ref) {     return in.get(index, len, ref). }
false;public;4;4;;@Override public void set(long index, byte[] buf, int offset, int len) {     in.set(index, buf, offset, len). }
false;public;3;4;;@Override public void fill(long fromIndex, long toIndex, byte value) {     in.fill(fromIndex, toIndex, value). }
false;public;0;4;;@Override public Collection<Accountable> getChildResources() {     return Collections.singleton(Accountables.namedAccountable("delegate", in)). }
false;protected;0;4;;@Override protected BigArray getDelegate() {     return in. }
false;protected;2;4;;@Override protected void randomizeContent(long from, long to) {     fill(from, to, random.nextInt()). }
false;public;1;4;;@Override public int get(long index) {     return in.get(index). }
false;public;2;4;;@Override public int set(long index, int value) {     return in.set(index, value). }
false;public;2;4;;@Override public int increment(long index, int inc) {     return in.increment(index, inc). }
false;public;3;4;;@Override public void fill(long fromIndex, long toIndex, int value) {     in.fill(fromIndex, toIndex, value). }
false;public;0;4;;@Override public Collection<Accountable> getChildResources() {     return Collections.singleton(Accountables.namedAccountable("delegate", in)). }
false;protected;0;4;;@Override protected BigArray getDelegate() {     return in. }
false;protected;2;4;;@Override protected void randomizeContent(long from, long to) {     fill(from, to, random.nextLong()). }
false;public;1;4;;@Override public long get(long index) {     return in.get(index). }
false;public;2;4;;@Override public long set(long index, long value) {     return in.set(index, value). }
false;public;2;4;;@Override public long increment(long index, long inc) {     return in.increment(index, inc). }
false;public;3;4;;@Override public void fill(long fromIndex, long toIndex, long value) {     in.fill(fromIndex, toIndex, value). }
false;public;0;4;;@Override public Collection<Accountable> getChildResources() {     return Collections.singleton(Accountables.namedAccountable("delegate", in)). }
false;protected;0;4;;@Override protected BigArray getDelegate() {     return in. }
false;protected;2;4;;@Override protected void randomizeContent(long from, long to) {     fill(from, to, (random.nextFloat() - 0.5f) * 1000). }
false;public;1;4;;@Override public float get(long index) {     return in.get(index). }
false;public;2;4;;@Override public float set(long index, float value) {     return in.set(index, value). }
false;public;2;4;;@Override public float increment(long index, float inc) {     return in.increment(index, inc). }
false;public;3;4;;@Override public void fill(long fromIndex, long toIndex, float value) {     in.fill(fromIndex, toIndex, value). }
false;public;0;4;;@Override public Collection<Accountable> getChildResources() {     return Collections.singleton(Accountables.namedAccountable("delegate", in)). }
false;protected;0;4;;@Override protected BigArray getDelegate() {     return in. }
false;protected;2;4;;@Override protected void randomizeContent(long from, long to) {     fill(from, to, (random.nextDouble() - 0.5) * 1000). }
false;public;1;4;;@Override public double get(long index) {     return in.get(index). }
false;public;2;4;;@Override public double set(long index, double value) {     return in.set(index, value). }
false;public;2;4;;@Override public double increment(long index, double inc) {     return in.increment(index, inc). }
false;public;3;4;;@Override public void fill(long fromIndex, long toIndex, double value) {     in.fill(fromIndex, toIndex, value). }
false;public;0;4;;@Override public Collection<Accountable> getChildResources() {     return Collections.singleton(Accountables.namedAccountable("delegate", in)). }
false;protected;0;4;;@Override protected BigArray getDelegate() {     return in. }
false;public;1;4;;@Override public T get(long index) {     return in.get(index). }
false;public;2;4;;@Override public T set(long index, T value) {     return in.set(index, value). }
false;protected;2;4;;@Override protected void randomizeContent(long from, long to) { // will be cleared anyway }
false;public;0;4;;@Override public Collection<Accountable> getChildResources() {     return Collections.singleton(Accountables.namedAccountable("delegate", in)). }
