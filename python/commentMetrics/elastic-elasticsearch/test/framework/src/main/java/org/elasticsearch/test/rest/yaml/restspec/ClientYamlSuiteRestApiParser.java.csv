commented;modifiers;parameterAmount;loc;comment;code
false;public;2;107;;public ClientYamlSuiteRestApi parse(String location, XContentParser parser) throws IOException {     while (parser.nextToken() != XContentParser.Token.FIELD_NAME) {     // move to first field name     }     String apiName = parser.currentName().     if (location.endsWith(apiName + ".json") == false) {         throw new IllegalArgumentException("API [" + apiName + "] should have the same name as its file [" + location + "]").     }     ClientYamlSuiteRestApi restApi = new ClientYamlSuiteRestApi(location, apiName).     int level = -1.     while (parser.nextToken() != XContentParser.Token.END_OBJECT || level >= 0) {         if (parser.currentToken() == XContentParser.Token.FIELD_NAME) {             if ("methods".equals(parser.currentName())) {                 parser.nextToken().                 while (parser.nextToken() == XContentParser.Token.VALUE_STRING) {                     String method = parser.text().                     if (restApi.getMethods().contains(method)) {                         throw new IllegalArgumentException("Found duplicate method [" + method + "]").                     }                     restApi.addMethod(method).                 }             }             if ("url".equals(parser.currentName())) {                 String currentFieldName = "url".                 while (parser.nextToken() != XContentParser.Token.END_OBJECT) {                     if (parser.currentToken() == XContentParser.Token.FIELD_NAME) {                         currentFieldName = parser.currentName().                     }                     if (parser.currentToken() == XContentParser.Token.START_ARRAY && "paths".equals(currentFieldName)) {                         while (parser.nextToken() == XContentParser.Token.VALUE_STRING) {                             String path = parser.text().                             if (restApi.getPaths().contains(path)) {                                 throw new IllegalArgumentException("Found duplicate path [" + path + "]").                             }                             restApi.addPath(path).                         }                     }                     if (parser.currentToken() == XContentParser.Token.START_OBJECT && "parts".equals(currentFieldName)) {                         while (parser.nextToken() == XContentParser.Token.FIELD_NAME) {                             String part = parser.currentName().                             parser.nextToken().                             if (parser.currentToken() != XContentParser.Token.START_OBJECT) {                                 throw new IllegalArgumentException("Expected parts field in rest api definition to contain an object").                             }                             restApi.addPathPart(part, PARAMETER_PARSER.parse(parser, null).isRequired()).                         }                     }                     if (parser.currentToken() == XContentParser.Token.START_OBJECT && "params".equals(currentFieldName)) {                         while (parser.nextToken() == XContentParser.Token.FIELD_NAME) {                             String param = parser.currentName().                             parser.nextToken().                             if (parser.currentToken() != XContentParser.Token.START_OBJECT) {                                 throw new IllegalArgumentException("Expected params field in rest api definition to contain an object").                             }                             restApi.addParam(param, PARAMETER_PARSER.parse(parser, null).isRequired()).                         }                     }                 }             }             if ("body".equals(parser.currentName())) {                 parser.nextToken().                 if (parser.currentToken() != XContentParser.Token.VALUE_NULL) {                     boolean requiredFound = false.                     while (parser.nextToken() != XContentParser.Token.END_OBJECT) {                         if (parser.currentToken() == XContentParser.Token.FIELD_NAME) {                             if ("required".equals(parser.currentName())) {                                 requiredFound = true.                                 parser.nextToken().                                 if (parser.booleanValue()) {                                     restApi.setBodyRequired().                                 } else {                                     restApi.setBodyOptional().                                 }                             }                         }                     }                     if (false == requiredFound) {                         restApi.setBodyOptional().                     }                 }             }         }         if (parser.currentToken() == XContentParser.Token.START_OBJECT) {             level++.         }         if (parser.currentToken() == XContentParser.Token.END_OBJECT) {             level--.         }     }     parser.nextToken().     assert parser.currentToken() == XContentParser.Token.END_OBJECT : "Expected [END_OBJECT] but was [" + parser.currentToken() + "]".     parser.nextToken().     return restApi. }
false;public;0;3;;public boolean isRequired() {     return required. }
false;public;1;3;;public void setRequired(boolean required) {     this.required = required. }
