commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;11;;public static MasterService createMasterService(ThreadPool threadPool, ClusterState initialClusterState) {     MasterService masterService = new MasterService("test_master_node", Settings.EMPTY, threadPool).     AtomicReference<ClusterState> clusterStateRef = new AtomicReference<>(initialClusterState).     masterService.setClusterStatePublisher((event, publishListener, ackListener) -> {         clusterStateRef.set(event.state()).         publishListener.onResponse(null).     }).     masterService.setClusterStateSupplier(clusterStateRef::get).     masterService.start().     return masterService. }
false;public,static;2;9;;public static MasterService createMasterService(ThreadPool threadPool, DiscoveryNode localNode) {     ClusterState initialClusterState = ClusterState.builder(new ClusterName(ClusterServiceUtils.class.getSimpleName())).nodes(DiscoveryNodes.builder().add(localNode).localNodeId(localNode.getId()).masterNodeId(localNode.getId())).blocks(ClusterBlocks.EMPTY_CLUSTER_BLOCK).build().     return createMasterService(threadPool, initialClusterState). }
false;public;1;4;;@Override public void onSuccess(String source) {     latch.countDown(). }
false;public;2;5;;@Override public void onFailure(String source, Exception e) {     exception.set(e).     latch.countDown(). }
false;public,static;2;25;;public static void setState(ClusterApplierService executor, ClusterState clusterState) {     CountDownLatch latch = new CountDownLatch(1).     AtomicReference<Exception> exception = new AtomicReference<>().     executor.onNewClusterState("test setting state", () -> ClusterState.builder(clusterState).version(clusterState.version() + 1).build(), new ClusterApplyListener() {          @Override         public void onSuccess(String source) {             latch.countDown().         }          @Override         public void onFailure(String source, Exception e) {             exception.set(e).             latch.countDown().         }     }).     try {         latch.await().         if (exception.get() != null) {             Throwables.rethrow(exception.get()).         }     } catch (InterruptedException e) {         throw new ElasticsearchException("unexpected exception", e).     } }
false;public;1;5;;@Override public ClusterState execute(ClusterState currentState) throws Exception {     // make sure we increment versions as listener may depend on it for change     return ClusterState.builder(clusterState).build(). }
false;public;3;4;;@Override public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {     latch.countDown(). }
false;public;2;4;;@Override public void onFailure(String source, Exception e) {     fail("unexpected exception" + e). }
false;public,static;2;25;;public static void setState(MasterService executor, ClusterState clusterState) {     CountDownLatch latch = new CountDownLatch(1).     executor.submitStateUpdateTask("test setting state", new ClusterStateUpdateTask() {          @Override         public ClusterState execute(ClusterState currentState) throws Exception {             // make sure we increment versions as listener may depend on it for change             return ClusterState.builder(clusterState).build().         }          @Override         public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {             latch.countDown().         }          @Override         public void onFailure(String source, Exception e) {             fail("unexpected exception" + e).         }     }).     try {         latch.await().     } catch (InterruptedException e) {         throw new ElasticsearchException("unexpected interruption", e).     } }
false;public,static;1;5;;public static ClusterService createClusterService(ThreadPool threadPool) {     DiscoveryNode discoveryNode = new DiscoveryNode("node", ESTestCase.buildNewFakeTransportAddress(), Collections.emptyMap(), EnumSet.allOf(DiscoveryNode.Role.class), Version.CURRENT).     return createClusterService(threadPool, discoveryNode). }
false;public,static;2;3;;public static ClusterService createClusterService(ThreadPool threadPool, DiscoveryNode localNode) {     return createClusterService(threadPool, localNode, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)). }
false;public;1;4;;@Override public void connectToNodes(DiscoveryNodes discoveryNodes) { // skip }
false;public;1;4;;@Override public void disconnectFromNodesExcept(DiscoveryNodes nodesToKeep) { // skip }
false;public,static;3;30;;public static ClusterService createClusterService(ThreadPool threadPool, DiscoveryNode localNode, ClusterSettings clusterSettings) {     Settings settings = Settings.builder().put("node.name", "test").put("cluster.name", "ClusterServiceTests").build().     ClusterService clusterService = new ClusterService(settings, clusterSettings, threadPool).     clusterService.setNodeConnectionsService(new NodeConnectionsService(Settings.EMPTY, null, null) {          @Override         public void connectToNodes(DiscoveryNodes discoveryNodes) {         // skip         }          @Override         public void disconnectFromNodesExcept(DiscoveryNodes nodesToKeep) {         // skip         }     }).     ClusterState initialClusterState = ClusterState.builder(new ClusterName(ClusterServiceUtils.class.getSimpleName())).nodes(DiscoveryNodes.builder().add(localNode).localNodeId(localNode.getId()).masterNodeId(localNode.getId())).blocks(ClusterBlocks.EMPTY_CLUSTER_BLOCK).build().     clusterService.getClusterApplierService().setInitialState(initialClusterState).     clusterService.getMasterService().setClusterStatePublisher(createClusterStatePublisher(clusterService.getClusterApplierService())).     clusterService.getMasterService().setClusterStateSupplier(clusterService.getClusterApplierService()::state).     clusterService.start().     return clusterService. }
false;public;1;4;;@Override public void onSuccess(String source) {     publishListener.onResponse(null). }
false;public;2;4;;@Override public void onFailure(String source, Exception e) {     publishListener.onFailure(e). }
false;public,static;1;16;;public static ClusterStatePublisher createClusterStatePublisher(ClusterApplier clusterApplier) {     return (event, publishListener, ackListener) -> clusterApplier.onNewClusterState("mock_publish_to_self[" + event.source() + "]", () -> event.state(), new ClusterApplyListener() {          @Override         public void onSuccess(String source) {             publishListener.onResponse(null).         }          @Override         public void onFailure(String source, Exception e) {             publishListener.onFailure(e).         }     }). }
false;public,static;2;5;;public static ClusterService createClusterService(ClusterState initialState, ThreadPool threadPool) {     ClusterService clusterService = createClusterService(threadPool).     setState(clusterService, initialState).     return clusterService. }
false;public,static;2;3;;public static void setState(ClusterService clusterService, ClusterState.Builder clusterStateBuilder) {     setState(clusterService, clusterStateBuilder.build()). }
true;public,static;2;3;/**  * Sets the state on the cluster applier service  */ ;/**  * Sets the state on the cluster applier service  */ public static void setState(ClusterService clusterService, ClusterState clusterState) {     setState(clusterService.getClusterApplierService(), clusterState). }
