commented;modifiers;parameterAmount;loc;comment;code
false;public,static;5;3;;public static ShardRouting newShardRouting(String index, int shardId, String currentNodeId, boolean primary, ShardRoutingState state) {     return newShardRouting(new ShardId(index, IndexMetaData.INDEX_UUID_NA_VALUE, shardId), currentNodeId, primary, state). }
false;public,static;4;4;;public static ShardRouting newShardRouting(ShardId shardId, String currentNodeId, boolean primary, ShardRoutingState state) {     return new ShardRouting(shardId, currentNodeId, null, primary, state, buildRecoveryTarget(primary, state), buildUnassignedInfo(state), buildAllocationId(state), -1). }
false;public,static;5;5;;public static ShardRouting newShardRouting(ShardId shardId, String currentNodeId, boolean primary, ShardRoutingState state, RecoverySource recoverySource) {     return new ShardRouting(shardId, currentNodeId, null, primary, state, recoverySource, buildUnassignedInfo(state), buildAllocationId(state), -1). }
false;public,static;6;5;;public static ShardRouting newShardRouting(String index, int shardId, String currentNodeId, String relocatingNodeId, boolean primary, ShardRoutingState state) {     return newShardRouting(new ShardId(index, IndexMetaData.INDEX_UUID_NA_VALUE, shardId), currentNodeId, relocatingNodeId, primary, state). }
false;public,static;5;5;;public static ShardRouting newShardRouting(ShardId shardId, String currentNodeId, String relocatingNodeId, boolean primary, ShardRoutingState state) {     return new ShardRouting(shardId, currentNodeId, relocatingNodeId, primary, state, buildRecoveryTarget(primary, state), buildUnassignedInfo(state), buildAllocationId(state), -1). }
false;public,static;7;5;;public static ShardRouting newShardRouting(String index, int shardId, String currentNodeId, String relocatingNodeId, boolean primary, ShardRoutingState state, AllocationId allocationId) {     return newShardRouting(new ShardId(index, IndexMetaData.INDEX_UUID_NA_VALUE, shardId), currentNodeId, relocatingNodeId, primary, state, allocationId). }
false;public,static;6;5;;public static ShardRouting newShardRouting(ShardId shardId, String currentNodeId, String relocatingNodeId, boolean primary, ShardRoutingState state, AllocationId allocationId) {     return new ShardRouting(shardId, currentNodeId, relocatingNodeId, primary, state, buildRecoveryTarget(primary, state), buildUnassignedInfo(state), allocationId, -1). }
false;public,static;7;6;;public static ShardRouting newShardRouting(String index, int shardId, String currentNodeId, String relocatingNodeId, boolean primary, ShardRoutingState state, UnassignedInfo unassignedInfo) {     return newShardRouting(new ShardId(index, IndexMetaData.INDEX_UUID_NA_VALUE, shardId), currentNodeId, relocatingNodeId, primary, state, unassignedInfo). }
false;public,static;6;6;;public static ShardRouting newShardRouting(ShardId shardId, String currentNodeId, String relocatingNodeId, boolean primary, ShardRoutingState state, UnassignedInfo unassignedInfo) {     return new ShardRouting(shardId, currentNodeId, relocatingNodeId, primary, state, buildRecoveryTarget(primary, state), unassignedInfo, buildAllocationId(state), -1). }
false;public,static;3;3;;public static ShardRouting relocate(ShardRouting shardRouting, String relocatingNodeId, long expectedShardSize) {     return shardRouting.relocate(relocatingNodeId, expectedShardSize). }
false;private,static;2;17;;private static RecoverySource buildRecoveryTarget(boolean primary, ShardRoutingState state) {     switch(state) {         case UNASSIGNED:         case INITIALIZING:             if (primary) {                 return ESTestCase.randomFrom(RecoverySource.EmptyStoreRecoverySource.INSTANCE, RecoverySource.ExistingStoreRecoverySource.INSTANCE).             } else {                 return RecoverySource.PeerRecoverySource.INSTANCE.             }         case STARTED:         case RELOCATING:             return null.         default:             throw new IllegalStateException("illegal state").     } }
false;private,static;1;14;;private static AllocationId buildAllocationId(ShardRoutingState state) {     switch(state) {         case UNASSIGNED:             return null.         case INITIALIZING:         case STARTED:             return AllocationId.newInitializing().         case RELOCATING:             AllocationId allocationId = AllocationId.newInitializing().             return AllocationId.newRelocation(allocationId).         default:             throw new IllegalStateException("illegal state").     } }
false;private,static;1;12;;private static UnassignedInfo buildUnassignedInfo(ShardRoutingState state) {     switch(state) {         case UNASSIGNED:         case INITIALIZING:             return new UnassignedInfo(ESTestCase.randomFrom(UnassignedInfo.Reason.values()), "auto generated for test").         case STARTED:         case RELOCATING:             return null.         default:             throw new IllegalStateException("illegal state").     } }
false;public,static;0;11;;public static RecoverySource randomRecoverySource() {     return ESTestCase.randomFrom(RecoverySource.EmptyStoreRecoverySource.INSTANCE, RecoverySource.ExistingStoreRecoverySource.INSTANCE, RecoverySource.PeerRecoverySource.INSTANCE, RecoverySource.LocalShardsRecoverySource.INSTANCE, new RecoverySource.SnapshotRecoverySource(UUIDs.randomBase64UUID(), new Snapshot("repo", new SnapshotId(randomAlphaOfLength(8), UUIDs.randomBase64UUID())), Version.CURRENT, "some_index")). }
