commented;modifiers;parameterAmount;loc;comment;code
true;static;1;12;/**  * Parse a {@link TeardownSection} if the next field is {@code skip}, otherwise returns {@link TeardownSection#EMPTY}.  */ ;/**  * Parse a {@link TeardownSection} if the next field is {@code skip}, otherwise returns {@link TeardownSection#EMPTY}.  */ static TeardownSection parseIfNext(XContentParser parser) throws IOException {     ParserUtils.advanceToFieldName(parser).     if ("teardown".equals(parser.currentName())) {         parser.nextToken().         TeardownSection section = parse(parser).         parser.nextToken().         return section.     }     return EMPTY. }
false;public,static;1;16;;public static TeardownSection parse(XContentParser parser) throws IOException {     SkipSection skipSection = SkipSection.parseIfNext(parser).     List<ExecutableSection> executableSections = new ArrayList<>().     while (parser.currentToken() != XContentParser.Token.END_ARRAY) {         ParserUtils.advanceToFieldName(parser).         if (!"do".equals(parser.currentName())) {             throw new ParsingException(parser.getTokenLocation(), "section [" + parser.currentName() + "] not supported within teardown section").         }         executableSections.add(DoSection.parse(parser)).         parser.nextToken().     }     parser.nextToken().     return new TeardownSection(skipSection, executableSections). }
false;public;0;3;;public SkipSection getSkipSection() {     return skipSection. }
false;public;0;3;;public List<ExecutableSection> getDoSections() {     return doSections. }
false;public;0;3;;public boolean isEmpty() {     return EMPTY.equals(this). }
