commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;15;/**  * The main entry point. The exit code is 0 if the Java version is at least 1.8, otherwise the exit code is 1.  *  * @param args the args to the program which are rejected if not empty  */ ;/**  * The main entry point. The exit code is 0 if the Java version is at least 1.8, otherwise the exit code is 1.  *  * @param args the args to the program which are rejected if not empty  */ public static void main(final String[] args) {     // no leniency!     if (args.length != 0) {         throw new IllegalArgumentException("expected zero arguments but was " + Arrays.toString(args)).     }     if (JavaVersion.compare(JavaVersion.CURRENT, JavaVersion.JAVA_8) < 0) {         final String message = String.format(Locale.ROOT, "the minimum required Java version is 8. your Java version from [%s] does not meet this requirement", System.getProperty("java.home")).         errPrintln(message).         exit(1).     }     exit(0). }
true;static;1;4;/**  * Prints a string and terminates the line on standard error.  *  * @param message the message to print  */ ;/**  * Prints a string and terminates the line on standard error.  *  * @param message the message to print  */ @SuppressForbidden(reason = "System#err") static void errPrintln(final String message) {     System.err.println(message). }
true;static;1;4;/**  * Exit the VM with the specified status.  *  * @param status the status  */ ;/**  * Exit the VM with the specified status.  *  * @param status the status  */ @SuppressForbidden(reason = "System#exit") static void exit(final int status) {     System.exit(status). }
