# id;timestamp;commentText;codeText;commentWords;codeWords
RemovePluginCommand -> void execute(Terminal terminal, Environment env, String pluginName, boolean purge) throws IOException, UserException;1524684173;Remove the plugin specified by {@code pluginName}.__@param terminal   the terminal to use for input/output_@param env        the environment for the local node_@param pluginName the name of the plugin to remove_@param purge      if true, plugin configuration files will be removed but otherwise preserved_@throws IOException   if any I/O exception occurs while performing a file operation_@throws UserException if plugin name is null_@throws UserException if plugin directory does not exist_@throws UserException if the plugin bin directory is not a directory;void execute(Terminal terminal, Environment env, String pluginName, boolean purge) throws IOException, UserException {_        if (pluginName == null) {_            throw new UserException(ExitCodes.USAGE, "plugin name is required")__        }__        _        List<String> usedBy = new ArrayList<>()__        Set<PluginsService.Bundle> bundles = PluginsService.getPluginBundles(env.pluginsFile())__        for (PluginsService.Bundle bundle : bundles) {_            for (String extendedPlugin : bundle.plugin.getExtendedPlugins()) {_                if (extendedPlugin.equals(pluginName)) {_                    usedBy.add(bundle.plugin.getName())__                }_            }_        }_        if (usedBy.isEmpty() == false) {_            throw new UserException(PLUGIN_STILL_USED, "plugin [" + pluginName + "] cannot be removed" +_                " because it is extended by other plugins: " + usedBy)__        }__        final Path pluginDir = env.pluginsFile().resolve(pluginName)__        final Path pluginConfigDir = env.configFile().resolve(pluginName)__        final Path removing = env.pluginsFile().resolve(".removing-" + pluginName)___        terminal.println("-> removing [" + pluginName + "]...")__        _        if ((!Files.exists(pluginDir) && !Files.exists(pluginConfigDir) && !Files.exists(removing))_                || (!Files.exists(pluginDir) && Files.exists(pluginConfigDir) && !purge)) {_            final String message = String.format(_                    Locale.ROOT, "plugin [%s] not found_ run 'elasticsearch-plugin list' to get list of installed plugins", pluginName)__            throw new UserException(ExitCodes.CONFIG, message)__        }__        final List<Path> pluginPaths = new ArrayList<>()___        _        if (Files.exists(pluginDir)) {_            try (Stream<Path> paths = Files.list(pluginDir)) {_                pluginPaths.addAll(paths.collect(Collectors.toList()))__            }_            terminal.println(VERBOSE, "removing [" + pluginDir + "]")__        }__        final Path pluginBinDir = env.binFile().resolve(pluginName)__        if (Files.exists(pluginBinDir)) {_            if (!Files.isDirectory(pluginBinDir)) {_                throw new UserException(ExitCodes.IO_ERROR, "bin dir for " + pluginName + " is not a directory")__            }_            try (Stream<Path> paths = Files.list(pluginBinDir)) {_                pluginPaths.addAll(paths.collect(Collectors.toList()))__            }_            pluginPaths.add(pluginBinDir)__            terminal.println(VERBOSE, "removing [" + pluginBinDir + "]")__        }__        if (Files.exists(pluginConfigDir)) {_            if (purge) {_                try (Stream<Path> paths = Files.list(pluginConfigDir)) {_                    pluginPaths.addAll(paths.collect(Collectors.toList()))__                }_                pluginPaths.add(pluginConfigDir)__                terminal.println(VERBOSE, "removing [" + pluginConfigDir + "]")__            } else {_                _                final String message = String.format(_                        Locale.ROOT,_                        "-> preserving plugin config files [%s] in case of upgrade_ use --purge if not needed",_                        pluginConfigDir)__                terminal.println(message)__            }_        }__        _        try {_            Files.createFile(removing)__        } catch (final FileAlreadyExistsException e) {_            _            terminal.println(VERBOSE, "marker file [" + removing + "] already exists")__        }__        _        pluginPaths.add(pluginDir)___        _        pluginPaths.add(removing)___        IOUtils.rm(pluginPaths.toArray(new Path[pluginPaths.size()]))__    };remove,the,plugin,specified,by,code,plugin,name,param,terminal,the,terminal,to,use,for,input,output,param,env,the,environment,for,the,local,node,param,plugin,name,the,name,of,the,plugin,to,remove,param,purge,if,true,plugin,configuration,files,will,be,removed,but,otherwise,preserved,throws,ioexception,if,any,i,o,exception,occurs,while,performing,a,file,operation,throws,user,exception,if,plugin,name,is,null,throws,user,exception,if,plugin,directory,does,not,exist,throws,user,exception,if,the,plugin,bin,directory,is,not,a,directory;void,execute,terminal,terminal,environment,env,string,plugin,name,boolean,purge,throws,ioexception,user,exception,if,plugin,name,null,throw,new,user,exception,exit,codes,usage,plugin,name,is,required,list,string,used,by,new,array,list,set,plugins,service,bundle,bundles,plugins,service,get,plugin,bundles,env,plugins,file,for,plugins,service,bundle,bundle,bundles,for,string,extended,plugin,bundle,plugin,get,extended,plugins,if,extended,plugin,equals,plugin,name,used,by,add,bundle,plugin,get,name,if,used,by,is,empty,false,throw,new,user,exception,plugin,plugin,name,cannot,be,removed,because,it,is,extended,by,other,plugins,used,by,final,path,plugin,dir,env,plugins,file,resolve,plugin,name,final,path,plugin,config,dir,env,config,file,resolve,plugin,name,final,path,removing,env,plugins,file,resolve,removing,plugin,name,terminal,println,removing,plugin,name,if,files,exists,plugin,dir,files,exists,plugin,config,dir,files,exists,removing,files,exists,plugin,dir,files,exists,plugin,config,dir,purge,final,string,message,string,format,locale,root,plugin,s,not,found,run,elasticsearch,plugin,list,to,get,list,of,installed,plugins,plugin,name,throw,new,user,exception,exit,codes,config,message,final,list,path,plugin,paths,new,array,list,if,files,exists,plugin,dir,try,stream,path,paths,files,list,plugin,dir,plugin,paths,add,all,paths,collect,collectors,to,list,terminal,println,verbose,removing,plugin,dir,final,path,plugin,bin,dir,env,bin,file,resolve,plugin,name,if,files,exists,plugin,bin,dir,if,files,is,directory,plugin,bin,dir,throw,new,user,exception,exit,codes,bin,dir,for,plugin,name,is,not,a,directory,try,stream,path,paths,files,list,plugin,bin,dir,plugin,paths,add,all,paths,collect,collectors,to,list,plugin,paths,add,plugin,bin,dir,terminal,println,verbose,removing,plugin,bin,dir,if,files,exists,plugin,config,dir,if,purge,try,stream,path,paths,files,list,plugin,config,dir,plugin,paths,add,all,paths,collect,collectors,to,list,plugin,paths,add,plugin,config,dir,terminal,println,verbose,removing,plugin,config,dir,else,final,string,message,string,format,locale,root,preserving,plugin,config,files,s,in,case,of,upgrade,use,purge,if,not,needed,plugin,config,dir,terminal,println,message,try,files,create,file,removing,catch,final,file,already,exists,exception,e,terminal,println,verbose,marker,file,removing,already,exists,plugin,paths,add,plugin,dir,plugin,paths,add,removing,ioutils,rm,plugin,paths,to,array,new,path,plugin,paths,size
RemovePluginCommand -> void execute(Terminal terminal, Environment env, String pluginName, boolean purge) throws IOException, UserException;1545481309;Remove the plugin specified by {@code pluginName}.__@param terminal   the terminal to use for input/output_@param env        the environment for the local node_@param pluginName the name of the plugin to remove_@param purge      if true, plugin configuration files will be removed but otherwise preserved_@throws IOException   if any I/O exception occurs while performing a file operation_@throws UserException if plugin name is null_@throws UserException if plugin directory does not exist_@throws UserException if the plugin bin directory is not a directory;void execute(Terminal terminal, Environment env, String pluginName, boolean purge) throws IOException, UserException {_        if (pluginName == null) {_            throw new UserException(ExitCodes.USAGE, "plugin name is required")__        }__        _        List<String> usedBy = new ArrayList<>()__        Set<PluginsService.Bundle> bundles = PluginsService.getPluginBundles(env.pluginsFile())__        for (PluginsService.Bundle bundle : bundles) {_            for (String extendedPlugin : bundle.plugin.getExtendedPlugins()) {_                if (extendedPlugin.equals(pluginName)) {_                    usedBy.add(bundle.plugin.getName())__                }_            }_        }_        if (usedBy.isEmpty() == false) {_            throw new UserException(PLUGIN_STILL_USED, "plugin [" + pluginName + "] cannot be removed" +_                " because it is extended by other plugins: " + usedBy)__        }__        final Path pluginDir = env.pluginsFile().resolve(pluginName)__        final Path pluginConfigDir = env.configFile().resolve(pluginName)__        final Path removing = env.pluginsFile().resolve(".removing-" + pluginName)___        terminal.println("-> removing [" + pluginName + "]...")__        _        if ((!Files.exists(pluginDir) && !Files.exists(pluginConfigDir) && !Files.exists(removing))_                || (!Files.exists(pluginDir) && Files.exists(pluginConfigDir) && !purge)) {__            _            if ("ingest-geoip".equals(pluginName)) {_                throw new UserException(_                        ExitCodes.OK,_                        "ingest-geoip is no longer a plugin but instead a module packaged with this distribution of Elasticsearch")__            }__            final String message = String.format(_                    Locale.ROOT, "plugin [%s] not found_ run 'elasticsearch-plugin list' to get list of installed plugins", pluginName)__            throw new UserException(ExitCodes.CONFIG, message)__        }__        final List<Path> pluginPaths = new ArrayList<>()___        _        if (Files.exists(pluginDir)) {_            try (Stream<Path> paths = Files.list(pluginDir)) {_                pluginPaths.addAll(paths.collect(Collectors.toList()))__            }_            terminal.println(VERBOSE, "removing [" + pluginDir + "]")__        }__        final Path pluginBinDir = env.binFile().resolve(pluginName)__        if (Files.exists(pluginBinDir)) {_            if (!Files.isDirectory(pluginBinDir)) {_                throw new UserException(ExitCodes.IO_ERROR, "bin dir for " + pluginName + " is not a directory")__            }_            try (Stream<Path> paths = Files.list(pluginBinDir)) {_                pluginPaths.addAll(paths.collect(Collectors.toList()))__            }_            pluginPaths.add(pluginBinDir)__            terminal.println(VERBOSE, "removing [" + pluginBinDir + "]")__        }__        if (Files.exists(pluginConfigDir)) {_            if (purge) {_                try (Stream<Path> paths = Files.list(pluginConfigDir)) {_                    pluginPaths.addAll(paths.collect(Collectors.toList()))__                }_                pluginPaths.add(pluginConfigDir)__                terminal.println(VERBOSE, "removing [" + pluginConfigDir + "]")__            } else {_                _                final String message = String.format(_                        Locale.ROOT,_                        "-> preserving plugin config files [%s] in case of upgrade_ use --purge if not needed",_                        pluginConfigDir)__                terminal.println(message)__            }_        }__        _        try {_            Files.createFile(removing)__        } catch (final FileAlreadyExistsException e) {_            _            terminal.println(VERBOSE, "marker file [" + removing + "] already exists")__        }__        _        pluginPaths.add(pluginDir)___        _        pluginPaths.add(removing)___        IOUtils.rm(pluginPaths.toArray(new Path[pluginPaths.size()]))__    };remove,the,plugin,specified,by,code,plugin,name,param,terminal,the,terminal,to,use,for,input,output,param,env,the,environment,for,the,local,node,param,plugin,name,the,name,of,the,plugin,to,remove,param,purge,if,true,plugin,configuration,files,will,be,removed,but,otherwise,preserved,throws,ioexception,if,any,i,o,exception,occurs,while,performing,a,file,operation,throws,user,exception,if,plugin,name,is,null,throws,user,exception,if,plugin,directory,does,not,exist,throws,user,exception,if,the,plugin,bin,directory,is,not,a,directory;void,execute,terminal,terminal,environment,env,string,plugin,name,boolean,purge,throws,ioexception,user,exception,if,plugin,name,null,throw,new,user,exception,exit,codes,usage,plugin,name,is,required,list,string,used,by,new,array,list,set,plugins,service,bundle,bundles,plugins,service,get,plugin,bundles,env,plugins,file,for,plugins,service,bundle,bundle,bundles,for,string,extended,plugin,bundle,plugin,get,extended,plugins,if,extended,plugin,equals,plugin,name,used,by,add,bundle,plugin,get,name,if,used,by,is,empty,false,throw,new,user,exception,plugin,plugin,name,cannot,be,removed,because,it,is,extended,by,other,plugins,used,by,final,path,plugin,dir,env,plugins,file,resolve,plugin,name,final,path,plugin,config,dir,env,config,file,resolve,plugin,name,final,path,removing,env,plugins,file,resolve,removing,plugin,name,terminal,println,removing,plugin,name,if,files,exists,plugin,dir,files,exists,plugin,config,dir,files,exists,removing,files,exists,plugin,dir,files,exists,plugin,config,dir,purge,if,ingest,geoip,equals,plugin,name,throw,new,user,exception,exit,codes,ok,ingest,geoip,is,no,longer,a,plugin,but,instead,a,module,packaged,with,this,distribution,of,elasticsearch,final,string,message,string,format,locale,root,plugin,s,not,found,run,elasticsearch,plugin,list,to,get,list,of,installed,plugins,plugin,name,throw,new,user,exception,exit,codes,config,message,final,list,path,plugin,paths,new,array,list,if,files,exists,plugin,dir,try,stream,path,paths,files,list,plugin,dir,plugin,paths,add,all,paths,collect,collectors,to,list,terminal,println,verbose,removing,plugin,dir,final,path,plugin,bin,dir,env,bin,file,resolve,plugin,name,if,files,exists,plugin,bin,dir,if,files,is,directory,plugin,bin,dir,throw,new,user,exception,exit,codes,bin,dir,for,plugin,name,is,not,a,directory,try,stream,path,paths,files,list,plugin,bin,dir,plugin,paths,add,all,paths,collect,collectors,to,list,plugin,paths,add,plugin,bin,dir,terminal,println,verbose,removing,plugin,bin,dir,if,files,exists,plugin,config,dir,if,purge,try,stream,path,paths,files,list,plugin,config,dir,plugin,paths,add,all,paths,collect,collectors,to,list,plugin,paths,add,plugin,config,dir,terminal,println,verbose,removing,plugin,config,dir,else,final,string,message,string,format,locale,root,preserving,plugin,config,files,s,in,case,of,upgrade,use,purge,if,not,needed,plugin,config,dir,terminal,println,message,try,files,create,file,removing,catch,final,file,already,exists,exception,e,terminal,println,verbose,marker,file,removing,already,exists,plugin,paths,add,plugin,dir,plugin,paths,add,removing,ioutils,rm,plugin,paths,to,array,new,path,plugin,paths,size
RemovePluginCommand -> void execute(Terminal terminal, Environment env, String pluginName, boolean purge) throws IOException, UserException;1545528053;Remove the plugin specified by {@code pluginName}.__@param terminal   the terminal to use for input/output_@param env        the environment for the local node_@param pluginName the name of the plugin to remove_@param purge      if true, plugin configuration files will be removed but otherwise preserved_@throws IOException   if any I/O exception occurs while performing a file operation_@throws UserException if plugin name is null_@throws UserException if plugin directory does not exist_@throws UserException if the plugin bin directory is not a directory;void execute(Terminal terminal, Environment env, String pluginName, boolean purge) throws IOException, UserException {_        if (pluginName == null) {_            throw new UserException(ExitCodes.USAGE, "plugin name is required")__        }__        _        List<String> usedBy = new ArrayList<>()__        Set<PluginsService.Bundle> bundles = PluginsService.getPluginBundles(env.pluginsFile())__        for (PluginsService.Bundle bundle : bundles) {_            for (String extendedPlugin : bundle.plugin.getExtendedPlugins()) {_                if (extendedPlugin.equals(pluginName)) {_                    usedBy.add(bundle.plugin.getName())__                }_            }_        }_        if (usedBy.isEmpty() == false) {_            throw new UserException(PLUGIN_STILL_USED, "plugin [" + pluginName + "] cannot be removed" +_                " because it is extended by other plugins: " + usedBy)__        }__        final Path pluginDir = env.pluginsFile().resolve(pluginName)__        final Path pluginConfigDir = env.configFile().resolve(pluginName)__        final Path removing = env.pluginsFile().resolve(".removing-" + pluginName)___        terminal.println("-> removing [" + pluginName + "]...")__        _        if ((!Files.exists(pluginDir) && !Files.exists(pluginConfigDir) && !Files.exists(removing))_                || (!Files.exists(pluginDir) && Files.exists(pluginConfigDir) && !purge)) {__            _            if ("ingest-geoip".equals(pluginName) || "ingest-user-agent".equals(pluginName)) {_                throw new UserException(_                        ExitCodes.OK,_                        "[" + pluginName + "] is no longer a plugin but instead a module packaged with this distribution of Elasticsearch")__            }__            final String message = String.format(_                    Locale.ROOT, "plugin [%s] not found_ run 'elasticsearch-plugin list' to get list of installed plugins", pluginName)__            throw new UserException(ExitCodes.CONFIG, message)__        }__        final List<Path> pluginPaths = new ArrayList<>()___        _        if (Files.exists(pluginDir)) {_            try (Stream<Path> paths = Files.list(pluginDir)) {_                pluginPaths.addAll(paths.collect(Collectors.toList()))__            }_            terminal.println(VERBOSE, "removing [" + pluginDir + "]")__        }__        final Path pluginBinDir = env.binFile().resolve(pluginName)__        if (Files.exists(pluginBinDir)) {_            if (!Files.isDirectory(pluginBinDir)) {_                throw new UserException(ExitCodes.IO_ERROR, "bin dir for " + pluginName + " is not a directory")__            }_            try (Stream<Path> paths = Files.list(pluginBinDir)) {_                pluginPaths.addAll(paths.collect(Collectors.toList()))__            }_            pluginPaths.add(pluginBinDir)__            terminal.println(VERBOSE, "removing [" + pluginBinDir + "]")__        }__        if (Files.exists(pluginConfigDir)) {_            if (purge) {_                try (Stream<Path> paths = Files.list(pluginConfigDir)) {_                    pluginPaths.addAll(paths.collect(Collectors.toList()))__                }_                pluginPaths.add(pluginConfigDir)__                terminal.println(VERBOSE, "removing [" + pluginConfigDir + "]")__            } else {_                _                final String message = String.format(_                        Locale.ROOT,_                        "-> preserving plugin config files [%s] in case of upgrade_ use --purge if not needed",_                        pluginConfigDir)__                terminal.println(message)__            }_        }__        _        try {_            Files.createFile(removing)__        } catch (final FileAlreadyExistsException e) {_            _            terminal.println(VERBOSE, "marker file [" + removing + "] already exists")__        }__        _        pluginPaths.add(pluginDir)___        _        pluginPaths.add(removing)___        IOUtils.rm(pluginPaths.toArray(new Path[pluginPaths.size()]))__    };remove,the,plugin,specified,by,code,plugin,name,param,terminal,the,terminal,to,use,for,input,output,param,env,the,environment,for,the,local,node,param,plugin,name,the,name,of,the,plugin,to,remove,param,purge,if,true,plugin,configuration,files,will,be,removed,but,otherwise,preserved,throws,ioexception,if,any,i,o,exception,occurs,while,performing,a,file,operation,throws,user,exception,if,plugin,name,is,null,throws,user,exception,if,plugin,directory,does,not,exist,throws,user,exception,if,the,plugin,bin,directory,is,not,a,directory;void,execute,terminal,terminal,environment,env,string,plugin,name,boolean,purge,throws,ioexception,user,exception,if,plugin,name,null,throw,new,user,exception,exit,codes,usage,plugin,name,is,required,list,string,used,by,new,array,list,set,plugins,service,bundle,bundles,plugins,service,get,plugin,bundles,env,plugins,file,for,plugins,service,bundle,bundle,bundles,for,string,extended,plugin,bundle,plugin,get,extended,plugins,if,extended,plugin,equals,plugin,name,used,by,add,bundle,plugin,get,name,if,used,by,is,empty,false,throw,new,user,exception,plugin,plugin,name,cannot,be,removed,because,it,is,extended,by,other,plugins,used,by,final,path,plugin,dir,env,plugins,file,resolve,plugin,name,final,path,plugin,config,dir,env,config,file,resolve,plugin,name,final,path,removing,env,plugins,file,resolve,removing,plugin,name,terminal,println,removing,plugin,name,if,files,exists,plugin,dir,files,exists,plugin,config,dir,files,exists,removing,files,exists,plugin,dir,files,exists,plugin,config,dir,purge,if,ingest,geoip,equals,plugin,name,ingest,user,agent,equals,plugin,name,throw,new,user,exception,exit,codes,ok,plugin,name,is,no,longer,a,plugin,but,instead,a,module,packaged,with,this,distribution,of,elasticsearch,final,string,message,string,format,locale,root,plugin,s,not,found,run,elasticsearch,plugin,list,to,get,list,of,installed,plugins,plugin,name,throw,new,user,exception,exit,codes,config,message,final,list,path,plugin,paths,new,array,list,if,files,exists,plugin,dir,try,stream,path,paths,files,list,plugin,dir,plugin,paths,add,all,paths,collect,collectors,to,list,terminal,println,verbose,removing,plugin,dir,final,path,plugin,bin,dir,env,bin,file,resolve,plugin,name,if,files,exists,plugin,bin,dir,if,files,is,directory,plugin,bin,dir,throw,new,user,exception,exit,codes,bin,dir,for,plugin,name,is,not,a,directory,try,stream,path,paths,files,list,plugin,bin,dir,plugin,paths,add,all,paths,collect,collectors,to,list,plugin,paths,add,plugin,bin,dir,terminal,println,verbose,removing,plugin,bin,dir,if,files,exists,plugin,config,dir,if,purge,try,stream,path,paths,files,list,plugin,config,dir,plugin,paths,add,all,paths,collect,collectors,to,list,plugin,paths,add,plugin,config,dir,terminal,println,verbose,removing,plugin,config,dir,else,final,string,message,string,format,locale,root,preserving,plugin,config,files,s,in,case,of,upgrade,use,purge,if,not,needed,plugin,config,dir,terminal,println,message,try,files,create,file,removing,catch,final,file,already,exists,exception,e,terminal,println,verbose,marker,file,removing,already,exists,plugin,paths,add,plugin,dir,plugin,paths,add,removing,ioutils,rm,plugin,paths,to,array,new,path,plugin,paths,size
RemovePluginCommand -> void execute(Terminal terminal, Environment env, String pluginName, boolean purge) throws IOException, UserException;1545528370;Remove the plugin specified by {@code pluginName}.__@param terminal   the terminal to use for input/output_@param env        the environment for the local node_@param pluginName the name of the plugin to remove_@param purge      if true, plugin configuration files will be removed but otherwise preserved_@throws IOException   if any I/O exception occurs while performing a file operation_@throws UserException if plugin name is null_@throws UserException if plugin directory does not exist_@throws UserException if the plugin bin directory is not a directory;void execute(Terminal terminal, Environment env, String pluginName, boolean purge) throws IOException, UserException {_        if (pluginName == null) {_            throw new UserException(ExitCodes.USAGE, "plugin name is required")__        }__        _        List<String> usedBy = new ArrayList<>()__        Set<PluginsService.Bundle> bundles = PluginsService.getPluginBundles(env.pluginsFile())__        for (PluginsService.Bundle bundle : bundles) {_            for (String extendedPlugin : bundle.plugin.getExtendedPlugins()) {_                if (extendedPlugin.equals(pluginName)) {_                    usedBy.add(bundle.plugin.getName())__                }_            }_        }_        if (usedBy.isEmpty() == false) {_            throw new UserException(PLUGIN_STILL_USED, "plugin [" + pluginName + "] cannot be removed" +_                " because it is extended by other plugins: " + usedBy)__        }__        final Path pluginDir = env.pluginsFile().resolve(pluginName)__        final Path pluginConfigDir = env.configFile().resolve(pluginName)__        final Path removing = env.pluginsFile().resolve(".removing-" + pluginName)___        terminal.println("-> removing [" + pluginName + "]...")__        _        if ((!Files.exists(pluginDir) && !Files.exists(pluginConfigDir) && !Files.exists(removing))_                || (!Files.exists(pluginDir) && Files.exists(pluginConfigDir) && !purge)) {__            _            if ("ingest-geoip".equals(pluginName) || "ingest-user-agent".equals(pluginName)) {_                throw new UserException(_                        ExitCodes.OK,_                        "[" + pluginName + "] is no longer a plugin but instead a module packaged with this distribution of Elasticsearch")__            }__            final String message = String.format(_                    Locale.ROOT, "plugin [%s] not found_ run 'elasticsearch-plugin list' to get list of installed plugins", pluginName)__            throw new UserException(ExitCodes.CONFIG, message)__        }__        final List<Path> pluginPaths = new ArrayList<>()___        _        if (Files.exists(pluginDir)) {_            try (Stream<Path> paths = Files.list(pluginDir)) {_                pluginPaths.addAll(paths.collect(Collectors.toList()))__            }_            terminal.println(VERBOSE, "removing [" + pluginDir + "]")__        }__        final Path pluginBinDir = env.binFile().resolve(pluginName)__        if (Files.exists(pluginBinDir)) {_            if (!Files.isDirectory(pluginBinDir)) {_                throw new UserException(ExitCodes.IO_ERROR, "bin dir for " + pluginName + " is not a directory")__            }_            try (Stream<Path> paths = Files.list(pluginBinDir)) {_                pluginPaths.addAll(paths.collect(Collectors.toList()))__            }_            pluginPaths.add(pluginBinDir)__            terminal.println(VERBOSE, "removing [" + pluginBinDir + "]")__        }__        if (Files.exists(pluginConfigDir)) {_            if (purge) {_                try (Stream<Path> paths = Files.list(pluginConfigDir)) {_                    pluginPaths.addAll(paths.collect(Collectors.toList()))__                }_                pluginPaths.add(pluginConfigDir)__                terminal.println(VERBOSE, "removing [" + pluginConfigDir + "]")__            } else {_                _                final String message = String.format(_                        Locale.ROOT,_                        "-> preserving plugin config files [%s] in case of upgrade_ use --purge if not needed",_                        pluginConfigDir)__                terminal.println(message)__            }_        }__        _        try {_            Files.createFile(removing)__        } catch (final FileAlreadyExistsException e) {_            _            terminal.println(VERBOSE, "marker file [" + removing + "] already exists")__        }__        _        pluginPaths.add(pluginDir)___        _        pluginPaths.add(removing)___        IOUtils.rm(pluginPaths.toArray(new Path[pluginPaths.size()]))__    };remove,the,plugin,specified,by,code,plugin,name,param,terminal,the,terminal,to,use,for,input,output,param,env,the,environment,for,the,local,node,param,plugin,name,the,name,of,the,plugin,to,remove,param,purge,if,true,plugin,configuration,files,will,be,removed,but,otherwise,preserved,throws,ioexception,if,any,i,o,exception,occurs,while,performing,a,file,operation,throws,user,exception,if,plugin,name,is,null,throws,user,exception,if,plugin,directory,does,not,exist,throws,user,exception,if,the,plugin,bin,directory,is,not,a,directory;void,execute,terminal,terminal,environment,env,string,plugin,name,boolean,purge,throws,ioexception,user,exception,if,plugin,name,null,throw,new,user,exception,exit,codes,usage,plugin,name,is,required,list,string,used,by,new,array,list,set,plugins,service,bundle,bundles,plugins,service,get,plugin,bundles,env,plugins,file,for,plugins,service,bundle,bundle,bundles,for,string,extended,plugin,bundle,plugin,get,extended,plugins,if,extended,plugin,equals,plugin,name,used,by,add,bundle,plugin,get,name,if,used,by,is,empty,false,throw,new,user,exception,plugin,plugin,name,cannot,be,removed,because,it,is,extended,by,other,plugins,used,by,final,path,plugin,dir,env,plugins,file,resolve,plugin,name,final,path,plugin,config,dir,env,config,file,resolve,plugin,name,final,path,removing,env,plugins,file,resolve,removing,plugin,name,terminal,println,removing,plugin,name,if,files,exists,plugin,dir,files,exists,plugin,config,dir,files,exists,removing,files,exists,plugin,dir,files,exists,plugin,config,dir,purge,if,ingest,geoip,equals,plugin,name,ingest,user,agent,equals,plugin,name,throw,new,user,exception,exit,codes,ok,plugin,name,is,no,longer,a,plugin,but,instead,a,module,packaged,with,this,distribution,of,elasticsearch,final,string,message,string,format,locale,root,plugin,s,not,found,run,elasticsearch,plugin,list,to,get,list,of,installed,plugins,plugin,name,throw,new,user,exception,exit,codes,config,message,final,list,path,plugin,paths,new,array,list,if,files,exists,plugin,dir,try,stream,path,paths,files,list,plugin,dir,plugin,paths,add,all,paths,collect,collectors,to,list,terminal,println,verbose,removing,plugin,dir,final,path,plugin,bin,dir,env,bin,file,resolve,plugin,name,if,files,exists,plugin,bin,dir,if,files,is,directory,plugin,bin,dir,throw,new,user,exception,exit,codes,bin,dir,for,plugin,name,is,not,a,directory,try,stream,path,paths,files,list,plugin,bin,dir,plugin,paths,add,all,paths,collect,collectors,to,list,plugin,paths,add,plugin,bin,dir,terminal,println,verbose,removing,plugin,bin,dir,if,files,exists,plugin,config,dir,if,purge,try,stream,path,paths,files,list,plugin,config,dir,plugin,paths,add,all,paths,collect,collectors,to,list,plugin,paths,add,plugin,config,dir,terminal,println,verbose,removing,plugin,config,dir,else,final,string,message,string,format,locale,root,preserving,plugin,config,files,s,in,case,of,upgrade,use,purge,if,not,needed,plugin,config,dir,terminal,println,message,try,files,create,file,removing,catch,final,file,already,exists,exception,e,terminal,println,verbose,marker,file,removing,already,exists,plugin,paths,add,plugin,dir,plugin,paths,add,removing,ioutils,rm,plugin,paths,to,array,new,path,plugin,paths,size
RemovePluginCommand -> void execute(Terminal terminal, Environment env, String pluginName, boolean purge) throws IOException, UserException;1545528472;Remove the plugin specified by {@code pluginName}.__@param terminal   the terminal to use for input/output_@param env        the environment for the local node_@param pluginName the name of the plugin to remove_@param purge      if true, plugin configuration files will be removed but otherwise preserved_@throws IOException   if any I/O exception occurs while performing a file operation_@throws UserException if plugin name is null_@throws UserException if plugin directory does not exist_@throws UserException if the plugin bin directory is not a directory;void execute(Terminal terminal, Environment env, String pluginName, boolean purge) throws IOException, UserException {_        if (pluginName == null) {_            throw new UserException(ExitCodes.USAGE, "plugin name is required")__        }__        _        List<String> usedBy = new ArrayList<>()__        Set<PluginsService.Bundle> bundles = PluginsService.getPluginBundles(env.pluginsFile())__        for (PluginsService.Bundle bundle : bundles) {_            for (String extendedPlugin : bundle.plugin.getExtendedPlugins()) {_                if (extendedPlugin.equals(pluginName)) {_                    usedBy.add(bundle.plugin.getName())__                }_            }_        }_        if (usedBy.isEmpty() == false) {_            throw new UserException(PLUGIN_STILL_USED, "plugin [" + pluginName + "] cannot be removed" +_                " because it is extended by other plugins: " + usedBy)__        }__        final Path pluginDir = env.pluginsFile().resolve(pluginName)__        final Path pluginConfigDir = env.configFile().resolve(pluginName)__        final Path removing = env.pluginsFile().resolve(".removing-" + pluginName)___        terminal.println("-> removing [" + pluginName + "]...")__        _        if ((!Files.exists(pluginDir) && !Files.exists(pluginConfigDir) && !Files.exists(removing))_                || (!Files.exists(pluginDir) && Files.exists(pluginConfigDir) && !purge)) {__            _            if ("ingest-geoip".equals(pluginName) || "ingest-user-agent".equals(pluginName)) {_                throw new UserException(_                        ExitCodes.OK,_                        "[" + pluginName + "] is no longer a plugin but instead a module packaged with this distribution of Elasticsearch")__            }__            final String message = String.format(_                    Locale.ROOT, "plugin [%s] not found_ run 'elasticsearch-plugin list' to get list of installed plugins", pluginName)__            throw new UserException(ExitCodes.CONFIG, message)__        }__        final List<Path> pluginPaths = new ArrayList<>()___        _        if (Files.exists(pluginDir)) {_            try (Stream<Path> paths = Files.list(pluginDir)) {_                pluginPaths.addAll(paths.collect(Collectors.toList()))__            }_            terminal.println(VERBOSE, "removing [" + pluginDir + "]")__        }__        final Path pluginBinDir = env.binFile().resolve(pluginName)__        if (Files.exists(pluginBinDir)) {_            if (!Files.isDirectory(pluginBinDir)) {_                throw new UserException(ExitCodes.IO_ERROR, "bin dir for " + pluginName + " is not a directory")__            }_            try (Stream<Path> paths = Files.list(pluginBinDir)) {_                pluginPaths.addAll(paths.collect(Collectors.toList()))__            }_            pluginPaths.add(pluginBinDir)__            terminal.println(VERBOSE, "removing [" + pluginBinDir + "]")__        }__        if (Files.exists(pluginConfigDir)) {_            if (purge) {_                try (Stream<Path> paths = Files.list(pluginConfigDir)) {_                    pluginPaths.addAll(paths.collect(Collectors.toList()))__                }_                pluginPaths.add(pluginConfigDir)__                terminal.println(VERBOSE, "removing [" + pluginConfigDir + "]")__            } else {_                _                final String message = String.format(_                        Locale.ROOT,_                        "-> preserving plugin config files [%s] in case of upgrade_ use --purge if not needed",_                        pluginConfigDir)__                terminal.println(message)__            }_        }__        _        try {_            Files.createFile(removing)__        } catch (final FileAlreadyExistsException e) {_            _            terminal.println(VERBOSE, "marker file [" + removing + "] already exists")__        }__        _        pluginPaths.add(pluginDir)___        _        pluginPaths.add(removing)___        IOUtils.rm(pluginPaths.toArray(new Path[pluginPaths.size()]))__    };remove,the,plugin,specified,by,code,plugin,name,param,terminal,the,terminal,to,use,for,input,output,param,env,the,environment,for,the,local,node,param,plugin,name,the,name,of,the,plugin,to,remove,param,purge,if,true,plugin,configuration,files,will,be,removed,but,otherwise,preserved,throws,ioexception,if,any,i,o,exception,occurs,while,performing,a,file,operation,throws,user,exception,if,plugin,name,is,null,throws,user,exception,if,plugin,directory,does,not,exist,throws,user,exception,if,the,plugin,bin,directory,is,not,a,directory;void,execute,terminal,terminal,environment,env,string,plugin,name,boolean,purge,throws,ioexception,user,exception,if,plugin,name,null,throw,new,user,exception,exit,codes,usage,plugin,name,is,required,list,string,used,by,new,array,list,set,plugins,service,bundle,bundles,plugins,service,get,plugin,bundles,env,plugins,file,for,plugins,service,bundle,bundle,bundles,for,string,extended,plugin,bundle,plugin,get,extended,plugins,if,extended,plugin,equals,plugin,name,used,by,add,bundle,plugin,get,name,if,used,by,is,empty,false,throw,new,user,exception,plugin,plugin,name,cannot,be,removed,because,it,is,extended,by,other,plugins,used,by,final,path,plugin,dir,env,plugins,file,resolve,plugin,name,final,path,plugin,config,dir,env,config,file,resolve,plugin,name,final,path,removing,env,plugins,file,resolve,removing,plugin,name,terminal,println,removing,plugin,name,if,files,exists,plugin,dir,files,exists,plugin,config,dir,files,exists,removing,files,exists,plugin,dir,files,exists,plugin,config,dir,purge,if,ingest,geoip,equals,plugin,name,ingest,user,agent,equals,plugin,name,throw,new,user,exception,exit,codes,ok,plugin,name,is,no,longer,a,plugin,but,instead,a,module,packaged,with,this,distribution,of,elasticsearch,final,string,message,string,format,locale,root,plugin,s,not,found,run,elasticsearch,plugin,list,to,get,list,of,installed,plugins,plugin,name,throw,new,user,exception,exit,codes,config,message,final,list,path,plugin,paths,new,array,list,if,files,exists,plugin,dir,try,stream,path,paths,files,list,plugin,dir,plugin,paths,add,all,paths,collect,collectors,to,list,terminal,println,verbose,removing,plugin,dir,final,path,plugin,bin,dir,env,bin,file,resolve,plugin,name,if,files,exists,plugin,bin,dir,if,files,is,directory,plugin,bin,dir,throw,new,user,exception,exit,codes,bin,dir,for,plugin,name,is,not,a,directory,try,stream,path,paths,files,list,plugin,bin,dir,plugin,paths,add,all,paths,collect,collectors,to,list,plugin,paths,add,plugin,bin,dir,terminal,println,verbose,removing,plugin,bin,dir,if,files,exists,plugin,config,dir,if,purge,try,stream,path,paths,files,list,plugin,config,dir,plugin,paths,add,all,paths,collect,collectors,to,list,plugin,paths,add,plugin,config,dir,terminal,println,verbose,removing,plugin,config,dir,else,final,string,message,string,format,locale,root,preserving,plugin,config,files,s,in,case,of,upgrade,use,purge,if,not,needed,plugin,config,dir,terminal,println,message,try,files,create,file,removing,catch,final,file,already,exists,exception,e,terminal,println,verbose,marker,file,removing,already,exists,plugin,paths,add,plugin,dir,plugin,paths,add,removing,ioutils,rm,plugin,paths,to,array,new,path,plugin,paths,size
RemovePluginCommand -> void execute(Terminal terminal, Environment env, String pluginName, boolean purge) throws IOException, UserException;1545599625;Remove the plugin specified by {@code pluginName}.__@param terminal   the terminal to use for input/output_@param env        the environment for the local node_@param pluginName the name of the plugin to remove_@param purge      if true, plugin configuration files will be removed but otherwise preserved_@throws IOException   if any I/O exception occurs while performing a file operation_@throws UserException if plugin name is null_@throws UserException if plugin directory does not exist_@throws UserException if the plugin bin directory is not a directory;void execute(Terminal terminal, Environment env, String pluginName, boolean purge) throws IOException, UserException {_        if (pluginName == null) {_            throw new UserException(ExitCodes.USAGE, "plugin name is required")__        }__        _        List<String> usedBy = new ArrayList<>()__        Set<PluginsService.Bundle> bundles = PluginsService.getPluginBundles(env.pluginsFile())__        for (PluginsService.Bundle bundle : bundles) {_            for (String extendedPlugin : bundle.plugin.getExtendedPlugins()) {_                if (extendedPlugin.equals(pluginName)) {_                    usedBy.add(bundle.plugin.getName())__                }_            }_        }_        if (usedBy.isEmpty() == false) {_            throw new UserException(PLUGIN_STILL_USED, "plugin [" + pluginName + "] cannot be removed" +_                " because it is extended by other plugins: " + usedBy)__        }__        final Path pluginDir = env.pluginsFile().resolve(pluginName)__        final Path pluginConfigDir = env.configFile().resolve(pluginName)__        final Path removing = env.pluginsFile().resolve(".removing-" + pluginName)___        terminal.println("-> removing [" + pluginName + "]...")__        _        if ((!Files.exists(pluginDir) && !Files.exists(pluginConfigDir) && !Files.exists(removing))_                || (!Files.exists(pluginDir) && Files.exists(pluginConfigDir) && !purge)) {_            final String message = String.format(_                    Locale.ROOT, "plugin [%s] not found_ run 'elasticsearch-plugin list' to get list of installed plugins", pluginName)__            throw new UserException(ExitCodes.CONFIG, message)__        }__        final List<Path> pluginPaths = new ArrayList<>()___        _        if (Files.exists(pluginDir)) {_            try (Stream<Path> paths = Files.list(pluginDir)) {_                pluginPaths.addAll(paths.collect(Collectors.toList()))__            }_            terminal.println(VERBOSE, "removing [" + pluginDir + "]")__        }__        final Path pluginBinDir = env.binFile().resolve(pluginName)__        if (Files.exists(pluginBinDir)) {_            if (!Files.isDirectory(pluginBinDir)) {_                throw new UserException(ExitCodes.IO_ERROR, "bin dir for " + pluginName + " is not a directory")__            }_            try (Stream<Path> paths = Files.list(pluginBinDir)) {_                pluginPaths.addAll(paths.collect(Collectors.toList()))__            }_            pluginPaths.add(pluginBinDir)__            terminal.println(VERBOSE, "removing [" + pluginBinDir + "]")__        }__        if (Files.exists(pluginConfigDir)) {_            if (purge) {_                try (Stream<Path> paths = Files.list(pluginConfigDir)) {_                    pluginPaths.addAll(paths.collect(Collectors.toList()))__                }_                pluginPaths.add(pluginConfigDir)__                terminal.println(VERBOSE, "removing [" + pluginConfigDir + "]")__            } else {_                _                final String message = String.format(_                        Locale.ROOT,_                        "-> preserving plugin config files [%s] in case of upgrade_ use --purge if not needed",_                        pluginConfigDir)__                terminal.println(message)__            }_        }__        _        try {_            Files.createFile(removing)__        } catch (final FileAlreadyExistsException e) {_            _            terminal.println(VERBOSE, "marker file [" + removing + "] already exists")__        }__        _        pluginPaths.add(pluginDir)___        _        pluginPaths.add(removing)___        IOUtils.rm(pluginPaths.toArray(new Path[pluginPaths.size()]))__    };remove,the,plugin,specified,by,code,plugin,name,param,terminal,the,terminal,to,use,for,input,output,param,env,the,environment,for,the,local,node,param,plugin,name,the,name,of,the,plugin,to,remove,param,purge,if,true,plugin,configuration,files,will,be,removed,but,otherwise,preserved,throws,ioexception,if,any,i,o,exception,occurs,while,performing,a,file,operation,throws,user,exception,if,plugin,name,is,null,throws,user,exception,if,plugin,directory,does,not,exist,throws,user,exception,if,the,plugin,bin,directory,is,not,a,directory;void,execute,terminal,terminal,environment,env,string,plugin,name,boolean,purge,throws,ioexception,user,exception,if,plugin,name,null,throw,new,user,exception,exit,codes,usage,plugin,name,is,required,list,string,used,by,new,array,list,set,plugins,service,bundle,bundles,plugins,service,get,plugin,bundles,env,plugins,file,for,plugins,service,bundle,bundle,bundles,for,string,extended,plugin,bundle,plugin,get,extended,plugins,if,extended,plugin,equals,plugin,name,used,by,add,bundle,plugin,get,name,if,used,by,is,empty,false,throw,new,user,exception,plugin,plugin,name,cannot,be,removed,because,it,is,extended,by,other,plugins,used,by,final,path,plugin,dir,env,plugins,file,resolve,plugin,name,final,path,plugin,config,dir,env,config,file,resolve,plugin,name,final,path,removing,env,plugins,file,resolve,removing,plugin,name,terminal,println,removing,plugin,name,if,files,exists,plugin,dir,files,exists,plugin,config,dir,files,exists,removing,files,exists,plugin,dir,files,exists,plugin,config,dir,purge,final,string,message,string,format,locale,root,plugin,s,not,found,run,elasticsearch,plugin,list,to,get,list,of,installed,plugins,plugin,name,throw,new,user,exception,exit,codes,config,message,final,list,path,plugin,paths,new,array,list,if,files,exists,plugin,dir,try,stream,path,paths,files,list,plugin,dir,plugin,paths,add,all,paths,collect,collectors,to,list,terminal,println,verbose,removing,plugin,dir,final,path,plugin,bin,dir,env,bin,file,resolve,plugin,name,if,files,exists,plugin,bin,dir,if,files,is,directory,plugin,bin,dir,throw,new,user,exception,exit,codes,bin,dir,for,plugin,name,is,not,a,directory,try,stream,path,paths,files,list,plugin,bin,dir,plugin,paths,add,all,paths,collect,collectors,to,list,plugin,paths,add,plugin,bin,dir,terminal,println,verbose,removing,plugin,bin,dir,if,files,exists,plugin,config,dir,if,purge,try,stream,path,paths,files,list,plugin,config,dir,plugin,paths,add,all,paths,collect,collectors,to,list,plugin,paths,add,plugin,config,dir,terminal,println,verbose,removing,plugin,config,dir,else,final,string,message,string,format,locale,root,preserving,plugin,config,files,s,in,case,of,upgrade,use,purge,if,not,needed,plugin,config,dir,terminal,println,message,try,files,create,file,removing,catch,final,file,already,exists,exception,e,terminal,println,verbose,marker,file,removing,already,exists,plugin,paths,add,plugin,dir,plugin,paths,add,removing,ioutils,rm,plugin,paths,to,array,new,path,plugin,paths,size
