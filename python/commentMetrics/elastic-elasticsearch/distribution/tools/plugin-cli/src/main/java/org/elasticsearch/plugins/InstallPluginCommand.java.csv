# id;timestamp;commentText;codeText;commentWords;codeWords
InstallPluginCommand -> private String getElasticUrl(             final Terminal terminal,             final String stagingHash,             final Version version,             final boolean isSnapshot,             final String pluginId,             final String platform) throws IOException, UserException;1526981569;Returns the url for an official elasticsearch plugin.;private String getElasticUrl(_            final Terminal terminal,_            final String stagingHash,_            final Version version,_            final boolean isSnapshot,_            final String pluginId,_            final String platform) throws IOException, UserException {_        final String baseUrl__        if (isSnapshot && stagingHash == null) {_            throw new UserException(_                    ExitCodes.CONFIG, "attempted to install release build of official plugin on snapshot build of Elasticsearch")__        }_        if (stagingHash != null) {_            if (isSnapshot) {_                baseUrl = nonReleaseUrl("snapshots", version, stagingHash, pluginId)__            } else {_                baseUrl = nonReleaseUrl("staging", version, stagingHash, pluginId)__            }_        } else {_            baseUrl = String.format(Locale.ROOT, "https://artifacts.elastic.co/downloads/elasticsearch-plugins/%s", pluginId)__        }_        final String platformUrl =_                String.format(Locale.ROOT, "%s/%s-%s-%s.zip", baseUrl, pluginId, platform, Version.displayVersion(version, isSnapshot))__        if (urlExists(terminal, platformUrl)) {_            return platformUrl__        }_        return String.format(Locale.ROOT, "%s/%s-%s.zip", baseUrl, pluginId, Version.displayVersion(version, isSnapshot))__    };returns,the,url,for,an,official,elasticsearch,plugin;private,string,get,elastic,url,final,terminal,terminal,final,string,staging,hash,final,version,version,final,boolean,is,snapshot,final,string,plugin,id,final,string,platform,throws,ioexception,user,exception,final,string,base,url,if,is,snapshot,staging,hash,null,throw,new,user,exception,exit,codes,config,attempted,to,install,release,build,of,official,plugin,on,snapshot,build,of,elasticsearch,if,staging,hash,null,if,is,snapshot,base,url,non,release,url,snapshots,version,staging,hash,plugin,id,else,base,url,non,release,url,staging,version,staging,hash,plugin,id,else,base,url,string,format,locale,root,https,artifacts,elastic,co,downloads,elasticsearch,plugins,s,plugin,id,final,string,platform,url,string,format,locale,root,s,s,s,s,zip,base,url,plugin,id,platform,version,display,version,version,is,snapshot,if,url,exists,terminal,platform,url,return,platform,url,return,string,format,locale,root,s,s,s,zip,base,url,plugin,id,version,display,version,version,is,snapshot
InstallPluginCommand -> private String getElasticUrl(             final Terminal terminal,             final String stagingHash,             final Version version,             final boolean isSnapshot,             final String pluginId,             final String platform) throws IOException, UserException;1527583663;Returns the url for an official elasticsearch plugin.;private String getElasticUrl(_            final Terminal terminal,_            final String stagingHash,_            final Version version,_            final boolean isSnapshot,_            final String pluginId,_            final String platform) throws IOException, UserException {_        final String baseUrl__        if (isSnapshot && stagingHash == null) {_            throw new UserException(_                    ExitCodes.CONFIG, "attempted to install release build of official plugin on snapshot build of Elasticsearch")__        }_        if (stagingHash != null) {_            if (isSnapshot) {_                baseUrl = nonReleaseUrl("snapshots", version, stagingHash, pluginId)__            } else {_                baseUrl = nonReleaseUrl("staging", version, stagingHash, pluginId)__            }_        } else {_            baseUrl = String.format(Locale.ROOT, "https://artifacts.elastic.co/downloads/elasticsearch-plugins/%s", pluginId)__        }_        final String platformUrl =_                String.format(Locale.ROOT, "%s/%s-%s-%s.zip", baseUrl, pluginId, platform, Version.displayVersion(version, isSnapshot))__        if (urlExists(terminal, platformUrl)) {_            return platformUrl__        }_        return String.format(Locale.ROOT, "%s/%s-%s.zip", baseUrl, pluginId, Version.displayVersion(version, isSnapshot))__    };returns,the,url,for,an,official,elasticsearch,plugin;private,string,get,elastic,url,final,terminal,terminal,final,string,staging,hash,final,version,version,final,boolean,is,snapshot,final,string,plugin,id,final,string,platform,throws,ioexception,user,exception,final,string,base,url,if,is,snapshot,staging,hash,null,throw,new,user,exception,exit,codes,config,attempted,to,install,release,build,of,official,plugin,on,snapshot,build,of,elasticsearch,if,staging,hash,null,if,is,snapshot,base,url,non,release,url,snapshots,version,staging,hash,plugin,id,else,base,url,non,release,url,staging,version,staging,hash,plugin,id,else,base,url,string,format,locale,root,https,artifacts,elastic,co,downloads,elasticsearch,plugins,s,plugin,id,final,string,platform,url,string,format,locale,root,s,s,s,s,zip,base,url,plugin,id,platform,version,display,version,version,is,snapshot,if,url,exists,terminal,platform,url,return,platform,url,return,string,format,locale,root,s,s,s,zip,base,url,plugin,id,version,display,version,version,is,snapshot
InstallPluginCommand -> private String getElasticUrl(             final Terminal terminal,             final String stagingHash,             final Version version,             final boolean isSnapshot,             final String pluginId,             final String platform) throws IOException, UserException;1528893677;Returns the url for an official elasticsearch plugin.;private String getElasticUrl(_            final Terminal terminal,_            final String stagingHash,_            final Version version,_            final boolean isSnapshot,_            final String pluginId,_            final String platform) throws IOException, UserException {_        final String baseUrl__        if (isSnapshot && stagingHash == null) {_            throw new UserException(_                    ExitCodes.CONFIG, "attempted to install release build of official plugin on snapshot build of Elasticsearch")__        }_        if (stagingHash != null) {_            if (isSnapshot) {_                baseUrl = nonReleaseUrl("snapshots", version, stagingHash, pluginId)__            } else {_                baseUrl = nonReleaseUrl("staging", version, stagingHash, pluginId)__            }_        } else {_            baseUrl = String.format(Locale.ROOT, "https://artifacts.elastic.co/downloads/elasticsearch-plugins/%s", pluginId)__        }_        final String platformUrl =_                String.format(Locale.ROOT, "%s/%s-%s-%s.zip", baseUrl, pluginId, platform, Version.displayVersion(version, isSnapshot))__        if (urlExists(terminal, platformUrl)) {_            return platformUrl__        }_        return String.format(Locale.ROOT, "%s/%s-%s.zip", baseUrl, pluginId, Version.displayVersion(version, isSnapshot))__    };returns,the,url,for,an,official,elasticsearch,plugin;private,string,get,elastic,url,final,terminal,terminal,final,string,staging,hash,final,version,version,final,boolean,is,snapshot,final,string,plugin,id,final,string,platform,throws,ioexception,user,exception,final,string,base,url,if,is,snapshot,staging,hash,null,throw,new,user,exception,exit,codes,config,attempted,to,install,release,build,of,official,plugin,on,snapshot,build,of,elasticsearch,if,staging,hash,null,if,is,snapshot,base,url,non,release,url,snapshots,version,staging,hash,plugin,id,else,base,url,non,release,url,staging,version,staging,hash,plugin,id,else,base,url,string,format,locale,root,https,artifacts,elastic,co,downloads,elasticsearch,plugins,s,plugin,id,final,string,platform,url,string,format,locale,root,s,s,s,s,zip,base,url,plugin,id,platform,version,display,version,version,is,snapshot,if,url,exists,terminal,platform,url,return,platform,url,return,string,format,locale,root,s,s,s,zip,base,url,plugin,id,version,display,version,version,is,snapshot
InstallPluginCommand -> private String getElasticUrl(             final Terminal terminal,             final String stagingHash,             final Version version,             final boolean isSnapshot,             final String pluginId,             final String platform) throws IOException, UserException;1536314350;Returns the url for an official elasticsearch plugin.;private String getElasticUrl(_            final Terminal terminal,_            final String stagingHash,_            final Version version,_            final boolean isSnapshot,_            final String pluginId,_            final String platform) throws IOException, UserException {_        final String baseUrl__        if (isSnapshot && stagingHash == null) {_            throw new UserException(_                    ExitCodes.CONFIG, "attempted to install release build of official plugin on snapshot build of Elasticsearch")__        }_        if (stagingHash != null) {_            if (isSnapshot) {_                baseUrl = nonReleaseUrl("snapshots", version, stagingHash, pluginId)__            } else {_                baseUrl = nonReleaseUrl("staging", version, stagingHash, pluginId)__            }_        } else {_            baseUrl = String.format(Locale.ROOT, "https://artifacts.elastic.co/downloads/elasticsearch-plugins/%s", pluginId)__        }_        final String platformUrl =_                String.format(Locale.ROOT, "%s/%s-%s-%s.zip", baseUrl, pluginId, platform, Version.displayVersion(version, isSnapshot))__        if (urlExists(terminal, platformUrl)) {_            return platformUrl__        }_        return String.format(Locale.ROOT, "%s/%s-%s.zip", baseUrl, pluginId, Version.displayVersion(version, isSnapshot))__    };returns,the,url,for,an,official,elasticsearch,plugin;private,string,get,elastic,url,final,terminal,terminal,final,string,staging,hash,final,version,version,final,boolean,is,snapshot,final,string,plugin,id,final,string,platform,throws,ioexception,user,exception,final,string,base,url,if,is,snapshot,staging,hash,null,throw,new,user,exception,exit,codes,config,attempted,to,install,release,build,of,official,plugin,on,snapshot,build,of,elasticsearch,if,staging,hash,null,if,is,snapshot,base,url,non,release,url,snapshots,version,staging,hash,plugin,id,else,base,url,non,release,url,staging,version,staging,hash,plugin,id,else,base,url,string,format,locale,root,https,artifacts,elastic,co,downloads,elasticsearch,plugins,s,plugin,id,final,string,platform,url,string,format,locale,root,s,s,s,s,zip,base,url,plugin,id,platform,version,display,version,version,is,snapshot,if,url,exists,terminal,platform,url,return,platform,url,return,string,format,locale,root,s,s,s,zip,base,url,plugin,id,version,display,version,version,is,snapshot
InstallPluginCommand -> private String getElasticUrl(             final Terminal terminal,             final String stagingHash,             final Version version,             final boolean isSnapshot,             final String pluginId,             final String platform) throws IOException, UserException;1541592065;Returns the url for an official elasticsearch plugin.;private String getElasticUrl(_            final Terminal terminal,_            final String stagingHash,_            final Version version,_            final boolean isSnapshot,_            final String pluginId,_            final String platform) throws IOException, UserException {_        final String baseUrl__        if (isSnapshot && stagingHash == null) {_            throw new UserException(_                    ExitCodes.CONFIG, "attempted to install release build of official plugin on snapshot build of Elasticsearch")__        }_        if (stagingHash != null) {_            if (isSnapshot) {_                baseUrl = nonReleaseUrl("snapshots", version, stagingHash, pluginId)__            } else {_                baseUrl = nonReleaseUrl("staging", version, stagingHash, pluginId)__            }_        } else {_            baseUrl = String.format(Locale.ROOT, "https://artifacts.elastic.co/downloads/elasticsearch-plugins/%s", pluginId)__        }_        final String platformUrl =_                String.format(Locale.ROOT, "%s/%s-%s-%s.zip", baseUrl, pluginId, platform, Build.CURRENT.getQualifiedVersion())__        if (urlExists(terminal, platformUrl)) {_            return platformUrl__        }_        return String.format(Locale.ROOT, "%s/%s-%s.zip", baseUrl, pluginId, Build.CURRENT.getQualifiedVersion())__    };returns,the,url,for,an,official,elasticsearch,plugin;private,string,get,elastic,url,final,terminal,terminal,final,string,staging,hash,final,version,version,final,boolean,is,snapshot,final,string,plugin,id,final,string,platform,throws,ioexception,user,exception,final,string,base,url,if,is,snapshot,staging,hash,null,throw,new,user,exception,exit,codes,config,attempted,to,install,release,build,of,official,plugin,on,snapshot,build,of,elasticsearch,if,staging,hash,null,if,is,snapshot,base,url,non,release,url,snapshots,version,staging,hash,plugin,id,else,base,url,non,release,url,staging,version,staging,hash,plugin,id,else,base,url,string,format,locale,root,https,artifacts,elastic,co,downloads,elasticsearch,plugins,s,plugin,id,final,string,platform,url,string,format,locale,root,s,s,s,s,zip,base,url,plugin,id,platform,build,current,get,qualified,version,if,url,exists,terminal,platform,url,return,platform,url,return,string,format,locale,root,s,s,s,zip,base,url,plugin,id,build,current,get,qualified,version
InstallPluginCommand -> private String getElasticUrl(             final Terminal terminal,             final String stagingHash,             final Version version,             final boolean isSnapshot,             final String pluginId,             final String platform) throws IOException, UserException;1544610279;Returns the url for an official elasticsearch plugin.;private String getElasticUrl(_            final Terminal terminal,_            final String stagingHash,_            final Version version,_            final boolean isSnapshot,_            final String pluginId,_            final String platform) throws IOException, UserException {_        final String baseUrl__        if (isSnapshot && stagingHash == null) {_            throw new UserException(_                    ExitCodes.CONFIG, "attempted to install release build of official plugin on snapshot build of Elasticsearch")__        }_        if (stagingHash != null) {_            if (isSnapshot) {_                baseUrl = nonReleaseUrl("snapshots", version, stagingHash, pluginId)__            } else {_                baseUrl = nonReleaseUrl("staging", version, stagingHash, pluginId)__            }_        } else {_            baseUrl = String.format(Locale.ROOT, "https://artifacts.elastic.co/downloads/elasticsearch-plugins/%s", pluginId)__        }_        final String platformUrl =_                String.format(Locale.ROOT, "%s/%s-%s-%s.zip", baseUrl, pluginId, platform, Build.CURRENT.getQualifiedVersion())__        if (urlExists(terminal, platformUrl)) {_            return platformUrl__        }_        return String.format(Locale.ROOT, "%s/%s-%s.zip", baseUrl, pluginId, Build.CURRENT.getQualifiedVersion())__    };returns,the,url,for,an,official,elasticsearch,plugin;private,string,get,elastic,url,final,terminal,terminal,final,string,staging,hash,final,version,version,final,boolean,is,snapshot,final,string,plugin,id,final,string,platform,throws,ioexception,user,exception,final,string,base,url,if,is,snapshot,staging,hash,null,throw,new,user,exception,exit,codes,config,attempted,to,install,release,build,of,official,plugin,on,snapshot,build,of,elasticsearch,if,staging,hash,null,if,is,snapshot,base,url,non,release,url,snapshots,version,staging,hash,plugin,id,else,base,url,non,release,url,staging,version,staging,hash,plugin,id,else,base,url,string,format,locale,root,https,artifacts,elastic,co,downloads,elasticsearch,plugins,s,plugin,id,final,string,platform,url,string,format,locale,root,s,s,s,s,zip,base,url,plugin,id,platform,build,current,get,qualified,version,if,url,exists,terminal,platform,url,return,platform,url,return,string,format,locale,root,s,s,s,zip,base,url,plugin,id,build,current,get,qualified,version
InstallPluginCommand -> private String getElasticUrl(             final Terminal terminal,             final String stagingHash,             final Version version,             final boolean isSnapshot,             final String pluginId,             final String platform) throws IOException, UserException;1545481309;Returns the url for an official elasticsearch plugin.;private String getElasticUrl(_            final Terminal terminal,_            final String stagingHash,_            final Version version,_            final boolean isSnapshot,_            final String pluginId,_            final String platform) throws IOException, UserException {_        final String baseUrl__        if (isSnapshot && stagingHash == null) {_            throw new UserException(_                    ExitCodes.CONFIG, "attempted to install release build of official plugin on snapshot build of Elasticsearch")__        }_        if (stagingHash != null) {_            if (isSnapshot) {_                baseUrl = nonReleaseUrl("snapshots", version, stagingHash, pluginId)__            } else {_                baseUrl = nonReleaseUrl("staging", version, stagingHash, pluginId)__            }_        } else {_            baseUrl = String.format(Locale.ROOT, "https://artifacts.elastic.co/downloads/elasticsearch-plugins/%s", pluginId)__        }_        final String platformUrl =_                String.format(Locale.ROOT, "%s/%s-%s-%s.zip", baseUrl, pluginId, platform, Build.CURRENT.getQualifiedVersion())__        if (urlExists(terminal, platformUrl)) {_            return platformUrl__        }_        return String.format(Locale.ROOT, "%s/%s-%s.zip", baseUrl, pluginId, Build.CURRENT.getQualifiedVersion())__    };returns,the,url,for,an,official,elasticsearch,plugin;private,string,get,elastic,url,final,terminal,terminal,final,string,staging,hash,final,version,version,final,boolean,is,snapshot,final,string,plugin,id,final,string,platform,throws,ioexception,user,exception,final,string,base,url,if,is,snapshot,staging,hash,null,throw,new,user,exception,exit,codes,config,attempted,to,install,release,build,of,official,plugin,on,snapshot,build,of,elasticsearch,if,staging,hash,null,if,is,snapshot,base,url,non,release,url,snapshots,version,staging,hash,plugin,id,else,base,url,non,release,url,staging,version,staging,hash,plugin,id,else,base,url,string,format,locale,root,https,artifacts,elastic,co,downloads,elasticsearch,plugins,s,plugin,id,final,string,platform,url,string,format,locale,root,s,s,s,s,zip,base,url,plugin,id,platform,build,current,get,qualified,version,if,url,exists,terminal,platform,url,return,platform,url,return,string,format,locale,root,s,s,s,zip,base,url,plugin,id,build,current,get,qualified,version
InstallPluginCommand -> private String getElasticUrl(             final Terminal terminal,             final String stagingHash,             final Version version,             final boolean isSnapshot,             final String pluginId,             final String platform) throws IOException, UserException;1545528053;Returns the url for an official elasticsearch plugin.;private String getElasticUrl(_            final Terminal terminal,_            final String stagingHash,_            final Version version,_            final boolean isSnapshot,_            final String pluginId,_            final String platform) throws IOException, UserException {_        final String baseUrl__        if (isSnapshot && stagingHash == null) {_            throw new UserException(_                    ExitCodes.CONFIG, "attempted to install release build of official plugin on snapshot build of Elasticsearch")__        }_        if (stagingHash != null) {_            if (isSnapshot) {_                baseUrl = nonReleaseUrl("snapshots", version, stagingHash, pluginId)__            } else {_                baseUrl = nonReleaseUrl("staging", version, stagingHash, pluginId)__            }_        } else {_            baseUrl = String.format(Locale.ROOT, "https://artifacts.elastic.co/downloads/elasticsearch-plugins/%s", pluginId)__        }_        final String platformUrl =_                String.format(Locale.ROOT, "%s/%s-%s-%s.zip", baseUrl, pluginId, platform, Build.CURRENT.getQualifiedVersion())__        if (urlExists(terminal, platformUrl)) {_            return platformUrl__        }_        return String.format(Locale.ROOT, "%s/%s-%s.zip", baseUrl, pluginId, Build.CURRENT.getQualifiedVersion())__    };returns,the,url,for,an,official,elasticsearch,plugin;private,string,get,elastic,url,final,terminal,terminal,final,string,staging,hash,final,version,version,final,boolean,is,snapshot,final,string,plugin,id,final,string,platform,throws,ioexception,user,exception,final,string,base,url,if,is,snapshot,staging,hash,null,throw,new,user,exception,exit,codes,config,attempted,to,install,release,build,of,official,plugin,on,snapshot,build,of,elasticsearch,if,staging,hash,null,if,is,snapshot,base,url,non,release,url,snapshots,version,staging,hash,plugin,id,else,base,url,non,release,url,staging,version,staging,hash,plugin,id,else,base,url,string,format,locale,root,https,artifacts,elastic,co,downloads,elasticsearch,plugins,s,plugin,id,final,string,platform,url,string,format,locale,root,s,s,s,s,zip,base,url,plugin,id,platform,build,current,get,qualified,version,if,url,exists,terminal,platform,url,return,platform,url,return,string,format,locale,root,s,s,s,zip,base,url,plugin,id,build,current,get,qualified,version
InstallPluginCommand -> private String getElasticUrl(             final Terminal terminal,             final String stagingHash,             final Version version,             final boolean isSnapshot,             final String pluginId,             final String platform) throws IOException, UserException;1545599625;Returns the url for an official elasticsearch plugin.;private String getElasticUrl(_            final Terminal terminal,_            final String stagingHash,_            final Version version,_            final boolean isSnapshot,_            final String pluginId,_            final String platform) throws IOException, UserException {_        final String baseUrl__        if (isSnapshot && stagingHash == null) {_            throw new UserException(_                    ExitCodes.CONFIG, "attempted to install release build of official plugin on snapshot build of Elasticsearch")__        }_        if (stagingHash != null) {_            if (isSnapshot) {_                baseUrl = nonReleaseUrl("snapshots", version, stagingHash, pluginId)__            } else {_                baseUrl = nonReleaseUrl("staging", version, stagingHash, pluginId)__            }_        } else {_            baseUrl = String.format(Locale.ROOT, "https://artifacts.elastic.co/downloads/elasticsearch-plugins/%s", pluginId)__        }_        final String platformUrl =_                String.format(Locale.ROOT, "%s/%s-%s-%s.zip", baseUrl, pluginId, platform, Build.CURRENT.getQualifiedVersion())__        if (urlExists(terminal, platformUrl)) {_            return platformUrl__        }_        return String.format(Locale.ROOT, "%s/%s-%s.zip", baseUrl, pluginId, Build.CURRENT.getQualifiedVersion())__    };returns,the,url,for,an,official,elasticsearch,plugin;private,string,get,elastic,url,final,terminal,terminal,final,string,staging,hash,final,version,version,final,boolean,is,snapshot,final,string,plugin,id,final,string,platform,throws,ioexception,user,exception,final,string,base,url,if,is,snapshot,staging,hash,null,throw,new,user,exception,exit,codes,config,attempted,to,install,release,build,of,official,plugin,on,snapshot,build,of,elasticsearch,if,staging,hash,null,if,is,snapshot,base,url,non,release,url,snapshots,version,staging,hash,plugin,id,else,base,url,non,release,url,staging,version,staging,hash,plugin,id,else,base,url,string,format,locale,root,https,artifacts,elastic,co,downloads,elasticsearch,plugins,s,plugin,id,final,string,platform,url,string,format,locale,root,s,s,s,s,zip,base,url,plugin,id,platform,build,current,get,qualified,version,if,url,exists,terminal,platform,url,return,platform,url,return,string,format,locale,root,s,s,s,zip,base,url,plugin,id,build,current,get,qualified,version
InstallPluginCommand -> private Path downloadAndValidate(             final Terminal terminal,             final String urlString,             final Path tmpDir,             final boolean officialPlugin) throws IOException, PGPException, UserException;1527583663;Downloads a ZIP from the URL. This method also validates the downloaded plugin ZIP via the following means:_<ul>_<li>_For an official plugin we download the SHA-512 checksum and validate the integrity of the downloaded ZIP. We also download the_armored signature and validate the authenticity of the downloaded ZIP._</li>_<li>_For a non-official plugin we download the SHA-512 checksum and fallback to the SHA-1 checksum and validate the integrity of the_downloaded ZIP._</li>_</ul>__@param terminal       a terminal to log messages to_@param urlString      the URL of the plugin ZIP_@param tmpDir         a temporary directory to write downloaded files to_@param officialPlugin true if the plugin is an official plugin_@return the path to the downloaded plugin ZIP_@throws IOException   if an I/O exception occurs download or reading files and resources_@throws PGPException  if an exception occurs verifying the downloaded ZIP signature_@throws UserException if checksum validation fails;private Path downloadAndValidate(_            final Terminal terminal,_            final String urlString,_            final Path tmpDir,_            final boolean officialPlugin) throws IOException, PGPException, UserException {_        Path zip = downloadZip(terminal, urlString, tmpDir)__        pathsToDeleteOnShutdown.add(zip)__        String checksumUrlString = urlString + ".sha512"__        URL checksumUrl = openUrl(checksumUrlString)__        String digestAlgo = "SHA-512"__        if (checksumUrl == null && officialPlugin == false) {_            _            terminal.println("Warning: sha512 not found, falling back to sha1. This behavior is deprecated and will be removed in a " +_                             "future release. Please update the plugin to use a sha512 checksum.")__            checksumUrlString = urlString + ".sha1"__            checksumUrl = openUrl(checksumUrlString)__            digestAlgo = "SHA-1"__        }_        if (checksumUrl == null) {_            throw new UserException(ExitCodes.IO_ERROR, "Plugin checksum missing: " + checksumUrlString)__        }_        final String expectedChecksum__        try (InputStream in = urlOpenStream(checksumUrl)) {_            _            if (digestAlgo.equals("SHA-1")) {_                final BufferedReader checksumReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8))__                expectedChecksum = checksumReader.readLine()__                if (checksumReader.readLine() != null) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_            } else {_                final BufferedReader checksumReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8))__                final String checksumLine = checksumReader.readLine()__                final String[] fields = checksumLine.split(" {2}")__                if (fields.length != 2) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_                expectedChecksum = fields[0]__                final String[] segments = URI.create(urlString).getPath().split("/")__                final String expectedFile = segments[segments.length - 1]__                if (fields[1].equals(expectedFile) == false) {_                    final String message = String.format(_                            Locale.ROOT,_                            "checksum file at [%s] is not for this plugin, expected [%s] but was [%s]",_                            checksumUrl,_                            expectedFile,_                            fields[1])__                    throw new UserException(ExitCodes.IO_ERROR, message)__                }_                if (checksumReader.readLine() != null) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_            }_        }__        try {_            final byte[] zipBytes = Files.readAllBytes(zip)__            final String actualChecksum = MessageDigests.toHexString(MessageDigest.getInstance(digestAlgo).digest(zipBytes))__            if (expectedChecksum.equals(actualChecksum) == false) {_                throw new UserException(_                        ExitCodes.IO_ERROR,_                        digestAlgo + " mismatch, expected " + expectedChecksum + " but got " + actualChecksum)__            }_        } catch (final NoSuchAlgorithmException e) {_            _            throw new AssertionError(e)__        }__        if (officialPlugin) {_            verifySignature(zip, urlString)__        }__        return zip__    };downloads,a,zip,from,the,url,this,method,also,validates,the,downloaded,plugin,zip,via,the,following,means,ul,li,for,an,official,plugin,we,download,the,sha,512,checksum,and,validate,the,integrity,of,the,downloaded,zip,we,also,download,the,armored,signature,and,validate,the,authenticity,of,the,downloaded,zip,li,li,for,a,non,official,plugin,we,download,the,sha,512,checksum,and,fallback,to,the,sha,1,checksum,and,validate,the,integrity,of,the,downloaded,zip,li,ul,param,terminal,a,terminal,to,log,messages,to,param,url,string,the,url,of,the,plugin,zip,param,tmp,dir,a,temporary,directory,to,write,downloaded,files,to,param,official,plugin,true,if,the,plugin,is,an,official,plugin,return,the,path,to,the,downloaded,plugin,zip,throws,ioexception,if,an,i,o,exception,occurs,download,or,reading,files,and,resources,throws,pgpexception,if,an,exception,occurs,verifying,the,downloaded,zip,signature,throws,user,exception,if,checksum,validation,fails;private,path,download,and,validate,final,terminal,terminal,final,string,url,string,final,path,tmp,dir,final,boolean,official,plugin,throws,ioexception,pgpexception,user,exception,path,zip,download,zip,terminal,url,string,tmp,dir,paths,to,delete,on,shutdown,add,zip,string,checksum,url,string,url,string,sha512,url,checksum,url,open,url,checksum,url,string,string,digest,algo,sha,512,if,checksum,url,null,official,plugin,false,terminal,println,warning,sha512,not,found,falling,back,to,sha1,this,behavior,is,deprecated,and,will,be,removed,in,a,future,release,please,update,the,plugin,to,use,a,sha512,checksum,checksum,url,string,url,string,sha1,checksum,url,open,url,checksum,url,string,digest,algo,sha,1,if,checksum,url,null,throw,new,user,exception,exit,codes,plugin,checksum,missing,checksum,url,string,final,string,expected,checksum,try,input,stream,in,url,open,stream,checksum,url,if,digest,algo,equals,sha,1,final,buffered,reader,checksum,reader,new,buffered,reader,new,input,stream,reader,in,standard,charsets,expected,checksum,checksum,reader,read,line,if,checksum,reader,read,line,null,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,else,final,buffered,reader,checksum,reader,new,buffered,reader,new,input,stream,reader,in,standard,charsets,final,string,checksum,line,checksum,reader,read,line,final,string,fields,checksum,line,split,2,if,fields,length,2,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,expected,checksum,fields,0,final,string,segments,uri,create,url,string,get,path,split,final,string,expected,file,segments,segments,length,1,if,fields,1,equals,expected,file,false,final,string,message,string,format,locale,root,checksum,file,at,s,is,not,for,this,plugin,expected,s,but,was,s,checksum,url,expected,file,fields,1,throw,new,user,exception,exit,codes,message,if,checksum,reader,read,line,null,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,try,final,byte,zip,bytes,files,read,all,bytes,zip,final,string,actual,checksum,message,digests,to,hex,string,message,digest,get,instance,digest,algo,digest,zip,bytes,if,expected,checksum,equals,actual,checksum,false,throw,new,user,exception,exit,codes,digest,algo,mismatch,expected,expected,checksum,but,got,actual,checksum,catch,final,no,such,algorithm,exception,e,throw,new,assertion,error,e,if,official,plugin,verify,signature,zip,url,string,return,zip
InstallPluginCommand -> private Path downloadAndValidate(             final Terminal terminal,             final String urlString,             final Path tmpDir,             final boolean officialPlugin) throws IOException, PGPException, UserException;1528893677;Downloads a ZIP from the URL. This method also validates the downloaded plugin ZIP via the following means:_<ul>_<li>_For an official plugin we download the SHA-512 checksum and validate the integrity of the downloaded ZIP. We also download the_armored signature and validate the authenticity of the downloaded ZIP._</li>_<li>_For a non-official plugin we download the SHA-512 checksum and fallback to the SHA-1 checksum and validate the integrity of the_downloaded ZIP._</li>_</ul>__@param terminal       a terminal to log messages to_@param urlString      the URL of the plugin ZIP_@param tmpDir         a temporary directory to write downloaded files to_@param officialPlugin true if the plugin is an official plugin_@return the path to the downloaded plugin ZIP_@throws IOException   if an I/O exception occurs download or reading files and resources_@throws PGPException  if an exception occurs verifying the downloaded ZIP signature_@throws UserException if checksum validation fails;private Path downloadAndValidate(_            final Terminal terminal,_            final String urlString,_            final Path tmpDir,_            final boolean officialPlugin) throws IOException, PGPException, UserException {_        Path zip = downloadZip(terminal, urlString, tmpDir)__        pathsToDeleteOnShutdown.add(zip)__        String checksumUrlString = urlString + ".sha512"__        URL checksumUrl = openUrl(checksumUrlString)__        String digestAlgo = "SHA-512"__        if (checksumUrl == null && officialPlugin == false) {_            _            terminal.println("Warning: sha512 not found, falling back to sha1. This behavior is deprecated and will be removed in a " +_                             "future release. Please update the plugin to use a sha512 checksum.")__            checksumUrlString = urlString + ".sha1"__            checksumUrl = openUrl(checksumUrlString)__            digestAlgo = "SHA-1"__        }_        if (checksumUrl == null) {_            throw new UserException(ExitCodes.IO_ERROR, "Plugin checksum missing: " + checksumUrlString)__        }_        final String expectedChecksum__        try (InputStream in = urlOpenStream(checksumUrl)) {_            _            if (digestAlgo.equals("SHA-1")) {_                final BufferedReader checksumReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8))__                expectedChecksum = checksumReader.readLine()__                if (checksumReader.readLine() != null) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_            } else {_                final BufferedReader checksumReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8))__                final String checksumLine = checksumReader.readLine()__                final String[] fields = checksumLine.split(" {2}")__                if (fields.length != 2) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_                expectedChecksum = fields[0]__                final String[] segments = URI.create(urlString).getPath().split("/")__                final String expectedFile = segments[segments.length - 1]__                if (fields[1].equals(expectedFile) == false) {_                    final String message = String.format(_                            Locale.ROOT,_                            "checksum file at [%s] is not for this plugin, expected [%s] but was [%s]",_                            checksumUrl,_                            expectedFile,_                            fields[1])__                    throw new UserException(ExitCodes.IO_ERROR, message)__                }_                if (checksumReader.readLine() != null) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_            }_        }__        try {_            final byte[] zipBytes = Files.readAllBytes(zip)__            final String actualChecksum = MessageDigests.toHexString(MessageDigest.getInstance(digestAlgo).digest(zipBytes))__            if (expectedChecksum.equals(actualChecksum) == false) {_                throw new UserException(_                        ExitCodes.IO_ERROR,_                        digestAlgo + " mismatch, expected " + expectedChecksum + " but got " + actualChecksum)__            }_        } catch (final NoSuchAlgorithmException e) {_            _            throw new AssertionError(e)__        }__        if (officialPlugin) {_            verifySignature(zip, urlString)__        }__        return zip__    };downloads,a,zip,from,the,url,this,method,also,validates,the,downloaded,plugin,zip,via,the,following,means,ul,li,for,an,official,plugin,we,download,the,sha,512,checksum,and,validate,the,integrity,of,the,downloaded,zip,we,also,download,the,armored,signature,and,validate,the,authenticity,of,the,downloaded,zip,li,li,for,a,non,official,plugin,we,download,the,sha,512,checksum,and,fallback,to,the,sha,1,checksum,and,validate,the,integrity,of,the,downloaded,zip,li,ul,param,terminal,a,terminal,to,log,messages,to,param,url,string,the,url,of,the,plugin,zip,param,tmp,dir,a,temporary,directory,to,write,downloaded,files,to,param,official,plugin,true,if,the,plugin,is,an,official,plugin,return,the,path,to,the,downloaded,plugin,zip,throws,ioexception,if,an,i,o,exception,occurs,download,or,reading,files,and,resources,throws,pgpexception,if,an,exception,occurs,verifying,the,downloaded,zip,signature,throws,user,exception,if,checksum,validation,fails;private,path,download,and,validate,final,terminal,terminal,final,string,url,string,final,path,tmp,dir,final,boolean,official,plugin,throws,ioexception,pgpexception,user,exception,path,zip,download,zip,terminal,url,string,tmp,dir,paths,to,delete,on,shutdown,add,zip,string,checksum,url,string,url,string,sha512,url,checksum,url,open,url,checksum,url,string,string,digest,algo,sha,512,if,checksum,url,null,official,plugin,false,terminal,println,warning,sha512,not,found,falling,back,to,sha1,this,behavior,is,deprecated,and,will,be,removed,in,a,future,release,please,update,the,plugin,to,use,a,sha512,checksum,checksum,url,string,url,string,sha1,checksum,url,open,url,checksum,url,string,digest,algo,sha,1,if,checksum,url,null,throw,new,user,exception,exit,codes,plugin,checksum,missing,checksum,url,string,final,string,expected,checksum,try,input,stream,in,url,open,stream,checksum,url,if,digest,algo,equals,sha,1,final,buffered,reader,checksum,reader,new,buffered,reader,new,input,stream,reader,in,standard,charsets,expected,checksum,checksum,reader,read,line,if,checksum,reader,read,line,null,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,else,final,buffered,reader,checksum,reader,new,buffered,reader,new,input,stream,reader,in,standard,charsets,final,string,checksum,line,checksum,reader,read,line,final,string,fields,checksum,line,split,2,if,fields,length,2,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,expected,checksum,fields,0,final,string,segments,uri,create,url,string,get,path,split,final,string,expected,file,segments,segments,length,1,if,fields,1,equals,expected,file,false,final,string,message,string,format,locale,root,checksum,file,at,s,is,not,for,this,plugin,expected,s,but,was,s,checksum,url,expected,file,fields,1,throw,new,user,exception,exit,codes,message,if,checksum,reader,read,line,null,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,try,final,byte,zip,bytes,files,read,all,bytes,zip,final,string,actual,checksum,message,digests,to,hex,string,message,digest,get,instance,digest,algo,digest,zip,bytes,if,expected,checksum,equals,actual,checksum,false,throw,new,user,exception,exit,codes,digest,algo,mismatch,expected,expected,checksum,but,got,actual,checksum,catch,final,no,such,algorithm,exception,e,throw,new,assertion,error,e,if,official,plugin,verify,signature,zip,url,string,return,zip
InstallPluginCommand -> private Path downloadAndValidate(             final Terminal terminal,             final String urlString,             final Path tmpDir,             final boolean officialPlugin) throws IOException, PGPException, UserException;1536314350;Downloads a ZIP from the URL. This method also validates the downloaded plugin ZIP via the following means:_<ul>_<li>_For an official plugin we download the SHA-512 checksum and validate the integrity of the downloaded ZIP. We also download the_armored signature and validate the authenticity of the downloaded ZIP._</li>_<li>_For a non-official plugin we download the SHA-512 checksum and fallback to the SHA-1 checksum and validate the integrity of the_downloaded ZIP._</li>_</ul>__@param terminal       a terminal to log messages to_@param urlString      the URL of the plugin ZIP_@param tmpDir         a temporary directory to write downloaded files to_@param officialPlugin true if the plugin is an official plugin_@return the path to the downloaded plugin ZIP_@throws IOException   if an I/O exception occurs download or reading files and resources_@throws PGPException  if an exception occurs verifying the downloaded ZIP signature_@throws UserException if checksum validation fails;private Path downloadAndValidate(_            final Terminal terminal,_            final String urlString,_            final Path tmpDir,_            final boolean officialPlugin) throws IOException, PGPException, UserException {_        Path zip = downloadZip(terminal, urlString, tmpDir)__        pathsToDeleteOnShutdown.add(zip)__        String checksumUrlString = urlString + ".sha512"__        URL checksumUrl = openUrl(checksumUrlString)__        String digestAlgo = "SHA-512"__        if (checksumUrl == null && officialPlugin == false) {_            _            terminal.println("Warning: sha512 not found, falling back to sha1. This behavior is deprecated and will be removed in a " +_                             "future release. Please update the plugin to use a sha512 checksum.")__            checksumUrlString = urlString + ".sha1"__            checksumUrl = openUrl(checksumUrlString)__            digestAlgo = "SHA-1"__        }_        if (checksumUrl == null) {_            throw new UserException(ExitCodes.IO_ERROR, "Plugin checksum missing: " + checksumUrlString)__        }_        final String expectedChecksum__        try (InputStream in = urlOpenStream(checksumUrl)) {_            _            if (digestAlgo.equals("SHA-1")) {_                final BufferedReader checksumReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8))__                expectedChecksum = checksumReader.readLine()__                if (checksumReader.readLine() != null) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_            } else {_                final BufferedReader checksumReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8))__                final String checksumLine = checksumReader.readLine()__                final String[] fields = checksumLine.split(" {2}")__                if (fields.length != 2) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_                expectedChecksum = fields[0]__                final String[] segments = URI.create(urlString).getPath().split("/")__                final String expectedFile = segments[segments.length - 1]__                if (fields[1].equals(expectedFile) == false) {_                    final String message = String.format(_                            Locale.ROOT,_                            "checksum file at [%s] is not for this plugin, expected [%s] but was [%s]",_                            checksumUrl,_                            expectedFile,_                            fields[1])__                    throw new UserException(ExitCodes.IO_ERROR, message)__                }_                if (checksumReader.readLine() != null) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_            }_        }__        try {_            final byte[] zipBytes = Files.readAllBytes(zip)__            final String actualChecksum = MessageDigests.toHexString(MessageDigest.getInstance(digestAlgo).digest(zipBytes))__            if (expectedChecksum.equals(actualChecksum) == false) {_                throw new UserException(_                        ExitCodes.IO_ERROR,_                        digestAlgo + " mismatch, expected " + expectedChecksum + " but got " + actualChecksum)__            }_        } catch (final NoSuchAlgorithmException e) {_            _            throw new AssertionError(e)__        }__        if (officialPlugin) {_            verifySignature(zip, urlString)__        }__        return zip__    };downloads,a,zip,from,the,url,this,method,also,validates,the,downloaded,plugin,zip,via,the,following,means,ul,li,for,an,official,plugin,we,download,the,sha,512,checksum,and,validate,the,integrity,of,the,downloaded,zip,we,also,download,the,armored,signature,and,validate,the,authenticity,of,the,downloaded,zip,li,li,for,a,non,official,plugin,we,download,the,sha,512,checksum,and,fallback,to,the,sha,1,checksum,and,validate,the,integrity,of,the,downloaded,zip,li,ul,param,terminal,a,terminal,to,log,messages,to,param,url,string,the,url,of,the,plugin,zip,param,tmp,dir,a,temporary,directory,to,write,downloaded,files,to,param,official,plugin,true,if,the,plugin,is,an,official,plugin,return,the,path,to,the,downloaded,plugin,zip,throws,ioexception,if,an,i,o,exception,occurs,download,or,reading,files,and,resources,throws,pgpexception,if,an,exception,occurs,verifying,the,downloaded,zip,signature,throws,user,exception,if,checksum,validation,fails;private,path,download,and,validate,final,terminal,terminal,final,string,url,string,final,path,tmp,dir,final,boolean,official,plugin,throws,ioexception,pgpexception,user,exception,path,zip,download,zip,terminal,url,string,tmp,dir,paths,to,delete,on,shutdown,add,zip,string,checksum,url,string,url,string,sha512,url,checksum,url,open,url,checksum,url,string,string,digest,algo,sha,512,if,checksum,url,null,official,plugin,false,terminal,println,warning,sha512,not,found,falling,back,to,sha1,this,behavior,is,deprecated,and,will,be,removed,in,a,future,release,please,update,the,plugin,to,use,a,sha512,checksum,checksum,url,string,url,string,sha1,checksum,url,open,url,checksum,url,string,digest,algo,sha,1,if,checksum,url,null,throw,new,user,exception,exit,codes,plugin,checksum,missing,checksum,url,string,final,string,expected,checksum,try,input,stream,in,url,open,stream,checksum,url,if,digest,algo,equals,sha,1,final,buffered,reader,checksum,reader,new,buffered,reader,new,input,stream,reader,in,standard,charsets,expected,checksum,checksum,reader,read,line,if,checksum,reader,read,line,null,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,else,final,buffered,reader,checksum,reader,new,buffered,reader,new,input,stream,reader,in,standard,charsets,final,string,checksum,line,checksum,reader,read,line,final,string,fields,checksum,line,split,2,if,fields,length,2,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,expected,checksum,fields,0,final,string,segments,uri,create,url,string,get,path,split,final,string,expected,file,segments,segments,length,1,if,fields,1,equals,expected,file,false,final,string,message,string,format,locale,root,checksum,file,at,s,is,not,for,this,plugin,expected,s,but,was,s,checksum,url,expected,file,fields,1,throw,new,user,exception,exit,codes,message,if,checksum,reader,read,line,null,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,try,final,byte,zip,bytes,files,read,all,bytes,zip,final,string,actual,checksum,message,digests,to,hex,string,message,digest,get,instance,digest,algo,digest,zip,bytes,if,expected,checksum,equals,actual,checksum,false,throw,new,user,exception,exit,codes,digest,algo,mismatch,expected,expected,checksum,but,got,actual,checksum,catch,final,no,such,algorithm,exception,e,throw,new,assertion,error,e,if,official,plugin,verify,signature,zip,url,string,return,zip
InstallPluginCommand -> private Path downloadAndValidate(             final Terminal terminal,             final String urlString,             final Path tmpDir,             final boolean officialPlugin) throws IOException, PGPException, UserException;1541592065;Downloads a ZIP from the URL. This method also validates the downloaded plugin ZIP via the following means:_<ul>_<li>_For an official plugin we download the SHA-512 checksum and validate the integrity of the downloaded ZIP. We also download the_armored signature and validate the authenticity of the downloaded ZIP._</li>_<li>_For a non-official plugin we download the SHA-512 checksum and fallback to the SHA-1 checksum and validate the integrity of the_downloaded ZIP._</li>_</ul>__@param terminal       a terminal to log messages to_@param urlString      the URL of the plugin ZIP_@param tmpDir         a temporary directory to write downloaded files to_@param officialPlugin true if the plugin is an official plugin_@return the path to the downloaded plugin ZIP_@throws IOException   if an I/O exception occurs download or reading files and resources_@throws PGPException  if an exception occurs verifying the downloaded ZIP signature_@throws UserException if checksum validation fails;private Path downloadAndValidate(_            final Terminal terminal,_            final String urlString,_            final Path tmpDir,_            final boolean officialPlugin) throws IOException, PGPException, UserException {_        Path zip = downloadZip(terminal, urlString, tmpDir)__        pathsToDeleteOnShutdown.add(zip)__        String checksumUrlString = urlString + ".sha512"__        URL checksumUrl = openUrl(checksumUrlString)__        String digestAlgo = "SHA-512"__        if (checksumUrl == null && officialPlugin == false) {_            _            terminal.println("Warning: sha512 not found, falling back to sha1. This behavior is deprecated and will be removed in a " +_                             "future release. Please update the plugin to use a sha512 checksum.")__            checksumUrlString = urlString + ".sha1"__            checksumUrl = openUrl(checksumUrlString)__            digestAlgo = "SHA-1"__        }_        if (checksumUrl == null) {_            throw new UserException(ExitCodes.IO_ERROR, "Plugin checksum missing: " + checksumUrlString)__        }_        final String expectedChecksum__        try (InputStream in = urlOpenStream(checksumUrl)) {_            _            if (digestAlgo.equals("SHA-1")) {_                final BufferedReader checksumReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8))__                expectedChecksum = checksumReader.readLine()__                if (checksumReader.readLine() != null) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_            } else {_                final BufferedReader checksumReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8))__                final String checksumLine = checksumReader.readLine()__                final String[] fields = checksumLine.split(" {2}")__                if (fields.length != 2) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_                expectedChecksum = fields[0]__                final String[] segments = URI.create(urlString).getPath().split("/")__                final String expectedFile = segments[segments.length - 1]__                if (fields[1].equals(expectedFile) == false) {_                    final String message = String.format(_                            Locale.ROOT,_                            "checksum file at [%s] is not for this plugin, expected [%s] but was [%s]",_                            checksumUrl,_                            expectedFile,_                            fields[1])__                    throw new UserException(ExitCodes.IO_ERROR, message)__                }_                if (checksumReader.readLine() != null) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_            }_        }__        try {_            final byte[] zipBytes = Files.readAllBytes(zip)__            final String actualChecksum = MessageDigests.toHexString(MessageDigest.getInstance(digestAlgo).digest(zipBytes))__            if (expectedChecksum.equals(actualChecksum) == false) {_                throw new UserException(_                        ExitCodes.IO_ERROR,_                        digestAlgo + " mismatch, expected " + expectedChecksum + " but got " + actualChecksum)__            }_        } catch (final NoSuchAlgorithmException e) {_            _            throw new AssertionError(e)__        }__        if (officialPlugin) {_            verifySignature(zip, urlString)__        }__        return zip__    };downloads,a,zip,from,the,url,this,method,also,validates,the,downloaded,plugin,zip,via,the,following,means,ul,li,for,an,official,plugin,we,download,the,sha,512,checksum,and,validate,the,integrity,of,the,downloaded,zip,we,also,download,the,armored,signature,and,validate,the,authenticity,of,the,downloaded,zip,li,li,for,a,non,official,plugin,we,download,the,sha,512,checksum,and,fallback,to,the,sha,1,checksum,and,validate,the,integrity,of,the,downloaded,zip,li,ul,param,terminal,a,terminal,to,log,messages,to,param,url,string,the,url,of,the,plugin,zip,param,tmp,dir,a,temporary,directory,to,write,downloaded,files,to,param,official,plugin,true,if,the,plugin,is,an,official,plugin,return,the,path,to,the,downloaded,plugin,zip,throws,ioexception,if,an,i,o,exception,occurs,download,or,reading,files,and,resources,throws,pgpexception,if,an,exception,occurs,verifying,the,downloaded,zip,signature,throws,user,exception,if,checksum,validation,fails;private,path,download,and,validate,final,terminal,terminal,final,string,url,string,final,path,tmp,dir,final,boolean,official,plugin,throws,ioexception,pgpexception,user,exception,path,zip,download,zip,terminal,url,string,tmp,dir,paths,to,delete,on,shutdown,add,zip,string,checksum,url,string,url,string,sha512,url,checksum,url,open,url,checksum,url,string,string,digest,algo,sha,512,if,checksum,url,null,official,plugin,false,terminal,println,warning,sha512,not,found,falling,back,to,sha1,this,behavior,is,deprecated,and,will,be,removed,in,a,future,release,please,update,the,plugin,to,use,a,sha512,checksum,checksum,url,string,url,string,sha1,checksum,url,open,url,checksum,url,string,digest,algo,sha,1,if,checksum,url,null,throw,new,user,exception,exit,codes,plugin,checksum,missing,checksum,url,string,final,string,expected,checksum,try,input,stream,in,url,open,stream,checksum,url,if,digest,algo,equals,sha,1,final,buffered,reader,checksum,reader,new,buffered,reader,new,input,stream,reader,in,standard,charsets,expected,checksum,checksum,reader,read,line,if,checksum,reader,read,line,null,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,else,final,buffered,reader,checksum,reader,new,buffered,reader,new,input,stream,reader,in,standard,charsets,final,string,checksum,line,checksum,reader,read,line,final,string,fields,checksum,line,split,2,if,fields,length,2,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,expected,checksum,fields,0,final,string,segments,uri,create,url,string,get,path,split,final,string,expected,file,segments,segments,length,1,if,fields,1,equals,expected,file,false,final,string,message,string,format,locale,root,checksum,file,at,s,is,not,for,this,plugin,expected,s,but,was,s,checksum,url,expected,file,fields,1,throw,new,user,exception,exit,codes,message,if,checksum,reader,read,line,null,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,try,final,byte,zip,bytes,files,read,all,bytes,zip,final,string,actual,checksum,message,digests,to,hex,string,message,digest,get,instance,digest,algo,digest,zip,bytes,if,expected,checksum,equals,actual,checksum,false,throw,new,user,exception,exit,codes,digest,algo,mismatch,expected,expected,checksum,but,got,actual,checksum,catch,final,no,such,algorithm,exception,e,throw,new,assertion,error,e,if,official,plugin,verify,signature,zip,url,string,return,zip
InstallPluginCommand -> private static void setFileAttributes(final Path path, final Set<PosixFilePermission> permissions) throws IOException;1524684173;Sets the attributes for a path iff posix attributes are supported;private static void setFileAttributes(final Path path, final Set<PosixFilePermission> permissions) throws IOException {_        PosixFileAttributeView fileAttributeView = Files.getFileAttributeView(path, PosixFileAttributeView.class)__        if (fileAttributeView != null) {_            Files.setPosixFilePermissions(path, permissions)__        }_    };sets,the,attributes,for,a,path,iff,posix,attributes,are,supported;private,static,void,set,file,attributes,final,path,path,final,set,posix,file,permission,permissions,throws,ioexception,posix,file,attribute,view,file,attribute,view,files,get,file,attribute,view,path,posix,file,attribute,view,class,if,file,attribute,view,null,files,set,posix,file,permissions,path,permissions
InstallPluginCommand -> private static void setFileAttributes(final Path path, final Set<PosixFilePermission> permissions) throws IOException;1526900724;Sets the attributes for a path iff posix attributes are supported;private static void setFileAttributes(final Path path, final Set<PosixFilePermission> permissions) throws IOException {_        PosixFileAttributeView fileAttributeView = Files.getFileAttributeView(path, PosixFileAttributeView.class)__        if (fileAttributeView != null) {_            Files.setPosixFilePermissions(path, permissions)__        }_    };sets,the,attributes,for,a,path,iff,posix,attributes,are,supported;private,static,void,set,file,attributes,final,path,path,final,set,posix,file,permission,permissions,throws,ioexception,posix,file,attribute,view,file,attribute,view,files,get,file,attribute,view,path,posix,file,attribute,view,class,if,file,attribute,view,null,files,set,posix,file,permissions,path,permissions
InstallPluginCommand -> private static void setFileAttributes(final Path path, final Set<PosixFilePermission> permissions) throws IOException;1526981569;Sets the attributes for a path iff posix attributes are supported;private static void setFileAttributes(final Path path, final Set<PosixFilePermission> permissions) throws IOException {_        PosixFileAttributeView fileAttributeView = Files.getFileAttributeView(path, PosixFileAttributeView.class)__        if (fileAttributeView != null) {_            Files.setPosixFilePermissions(path, permissions)__        }_    };sets,the,attributes,for,a,path,iff,posix,attributes,are,supported;private,static,void,set,file,attributes,final,path,path,final,set,posix,file,permission,permissions,throws,ioexception,posix,file,attribute,view,file,attribute,view,files,get,file,attribute,view,path,posix,file,attribute,view,class,if,file,attribute,view,null,files,set,posix,file,permissions,path,permissions
InstallPluginCommand -> private static void setFileAttributes(final Path path, final Set<PosixFilePermission> permissions) throws IOException;1527583663;Sets the attributes for a path iff posix attributes are supported;private static void setFileAttributes(final Path path, final Set<PosixFilePermission> permissions) throws IOException {_        PosixFileAttributeView fileAttributeView = Files.getFileAttributeView(path, PosixFileAttributeView.class)__        if (fileAttributeView != null) {_            Files.setPosixFilePermissions(path, permissions)__        }_    };sets,the,attributes,for,a,path,iff,posix,attributes,are,supported;private,static,void,set,file,attributes,final,path,path,final,set,posix,file,permission,permissions,throws,ioexception,posix,file,attribute,view,file,attribute,view,files,get,file,attribute,view,path,posix,file,attribute,view,class,if,file,attribute,view,null,files,set,posix,file,permissions,path,permissions
InstallPluginCommand -> private static void setFileAttributes(final Path path, final Set<PosixFilePermission> permissions) throws IOException;1528893677;Sets the attributes for a path iff posix attributes are supported;private static void setFileAttributes(final Path path, final Set<PosixFilePermission> permissions) throws IOException {_        PosixFileAttributeView fileAttributeView = Files.getFileAttributeView(path, PosixFileAttributeView.class)__        if (fileAttributeView != null) {_            Files.setPosixFilePermissions(path, permissions)__        }_    };sets,the,attributes,for,a,path,iff,posix,attributes,are,supported;private,static,void,set,file,attributes,final,path,path,final,set,posix,file,permission,permissions,throws,ioexception,posix,file,attribute,view,file,attribute,view,files,get,file,attribute,view,path,posix,file,attribute,view,class,if,file,attribute,view,null,files,set,posix,file,permissions,path,permissions
InstallPluginCommand -> private static void setFileAttributes(final Path path, final Set<PosixFilePermission> permissions) throws IOException;1536314350;Sets the attributes for a path iff posix attributes are supported;private static void setFileAttributes(final Path path, final Set<PosixFilePermission> permissions) throws IOException {_        PosixFileAttributeView fileAttributeView = Files.getFileAttributeView(path, PosixFileAttributeView.class)__        if (fileAttributeView != null) {_            Files.setPosixFilePermissions(path, permissions)__        }_    };sets,the,attributes,for,a,path,iff,posix,attributes,are,supported;private,static,void,set,file,attributes,final,path,path,final,set,posix,file,permission,permissions,throws,ioexception,posix,file,attribute,view,file,attribute,view,files,get,file,attribute,view,path,posix,file,attribute,view,class,if,file,attribute,view,null,files,set,posix,file,permissions,path,permissions
InstallPluginCommand -> private static void setFileAttributes(final Path path, final Set<PosixFilePermission> permissions) throws IOException;1541592065;Sets the attributes for a path iff posix attributes are supported;private static void setFileAttributes(final Path path, final Set<PosixFilePermission> permissions) throws IOException {_        PosixFileAttributeView fileAttributeView = Files.getFileAttributeView(path, PosixFileAttributeView.class)__        if (fileAttributeView != null) {_            Files.setPosixFilePermissions(path, permissions)__        }_    };sets,the,attributes,for,a,path,iff,posix,attributes,are,supported;private,static,void,set,file,attributes,final,path,path,final,set,posix,file,permission,permissions,throws,ioexception,posix,file,attribute,view,file,attribute,view,files,get,file,attribute,view,path,posix,file,attribute,view,class,if,file,attribute,view,null,files,set,posix,file,permissions,path,permissions
InstallPluginCommand -> private static void setFileAttributes(final Path path, final Set<PosixFilePermission> permissions) throws IOException;1544610279;Sets the attributes for a path iff posix attributes are supported;private static void setFileAttributes(final Path path, final Set<PosixFilePermission> permissions) throws IOException {_        PosixFileAttributeView fileAttributeView = Files.getFileAttributeView(path, PosixFileAttributeView.class)__        if (fileAttributeView != null) {_            Files.setPosixFilePermissions(path, permissions)__        }_    };sets,the,attributes,for,a,path,iff,posix,attributes,are,supported;private,static,void,set,file,attributes,final,path,path,final,set,posix,file,permission,permissions,throws,ioexception,posix,file,attribute,view,file,attribute,view,files,get,file,attribute,view,path,posix,file,attribute,view,class,if,file,attribute,view,null,files,set,posix,file,permissions,path,permissions
InstallPluginCommand -> private static void setFileAttributes(final Path path, final Set<PosixFilePermission> permissions) throws IOException;1545481309;Sets the attributes for a path iff posix attributes are supported;private static void setFileAttributes(final Path path, final Set<PosixFilePermission> permissions) throws IOException {_        PosixFileAttributeView fileAttributeView = Files.getFileAttributeView(path, PosixFileAttributeView.class)__        if (fileAttributeView != null) {_            Files.setPosixFilePermissions(path, permissions)__        }_    };sets,the,attributes,for,a,path,iff,posix,attributes,are,supported;private,static,void,set,file,attributes,final,path,path,final,set,posix,file,permission,permissions,throws,ioexception,posix,file,attribute,view,file,attribute,view,files,get,file,attribute,view,path,posix,file,attribute,view,class,if,file,attribute,view,null,files,set,posix,file,permissions,path,permissions
InstallPluginCommand -> private static void setFileAttributes(final Path path, final Set<PosixFilePermission> permissions) throws IOException;1545528053;Sets the attributes for a path iff posix attributes are supported;private static void setFileAttributes(final Path path, final Set<PosixFilePermission> permissions) throws IOException {_        PosixFileAttributeView fileAttributeView = Files.getFileAttributeView(path, PosixFileAttributeView.class)__        if (fileAttributeView != null) {_            Files.setPosixFilePermissions(path, permissions)__        }_    };sets,the,attributes,for,a,path,iff,posix,attributes,are,supported;private,static,void,set,file,attributes,final,path,path,final,set,posix,file,permission,permissions,throws,ioexception,posix,file,attribute,view,file,attribute,view,files,get,file,attribute,view,path,posix,file,attribute,view,class,if,file,attribute,view,null,files,set,posix,file,permissions,path,permissions
InstallPluginCommand -> private static void setFileAttributes(final Path path, final Set<PosixFilePermission> permissions) throws IOException;1545599625;Sets the attributes for a path iff posix attributes are supported;private static void setFileAttributes(final Path path, final Set<PosixFilePermission> permissions) throws IOException {_        PosixFileAttributeView fileAttributeView = Files.getFileAttributeView(path, PosixFileAttributeView.class)__        if (fileAttributeView != null) {_            Files.setPosixFilePermissions(path, permissions)__        }_    };sets,the,attributes,for,a,path,iff,posix,attributes,are,supported;private,static,void,set,file,attributes,final,path,path,final,set,posix,file,permission,permissions,throws,ioexception,posix,file,attribute,view,file,attribute,view,files,get,file,attribute,view,path,posix,file,attribute,view,class,if,file,attribute,view,null,files,set,posix,file,permissions,path,permissions
InstallPluginCommand -> InputStream pluginZipInputStream(final Path zip) throws IOException;1527583663;An input stream to the raw bytes of the plugin ZIP.__@param zip the path to the downloaded plugin ZIP_@return an input stream to the raw bytes of the plugin ZIP._@throws IOException if an I/O exception occurs preparing the input stream;InputStream pluginZipInputStream(final Path zip) throws IOException {_        return Files.newInputStream(zip)__    };an,input,stream,to,the,raw,bytes,of,the,plugin,zip,param,zip,the,path,to,the,downloaded,plugin,zip,return,an,input,stream,to,the,raw,bytes,of,the,plugin,zip,throws,ioexception,if,an,i,o,exception,occurs,preparing,the,input,stream;input,stream,plugin,zip,input,stream,final,path,zip,throws,ioexception,return,files,new,input,stream,zip
InstallPluginCommand -> InputStream pluginZipInputStream(final Path zip) throws IOException;1528893677;An input stream to the raw bytes of the plugin ZIP.__@param zip the path to the downloaded plugin ZIP_@return an input stream to the raw bytes of the plugin ZIP._@throws IOException if an I/O exception occurs preparing the input stream;InputStream pluginZipInputStream(final Path zip) throws IOException {_        return Files.newInputStream(zip)__    };an,input,stream,to,the,raw,bytes,of,the,plugin,zip,param,zip,the,path,to,the,downloaded,plugin,zip,return,an,input,stream,to,the,raw,bytes,of,the,plugin,zip,throws,ioexception,if,an,i,o,exception,occurs,preparing,the,input,stream;input,stream,plugin,zip,input,stream,final,path,zip,throws,ioexception,return,files,new,input,stream,zip
InstallPluginCommand -> InputStream pluginZipInputStream(final Path zip) throws IOException;1536314350;An input stream to the raw bytes of the plugin ZIP.__@param zip the path to the downloaded plugin ZIP_@return an input stream to the raw bytes of the plugin ZIP._@throws IOException if an I/O exception occurs preparing the input stream;InputStream pluginZipInputStream(final Path zip) throws IOException {_        return Files.newInputStream(zip)__    };an,input,stream,to,the,raw,bytes,of,the,plugin,zip,param,zip,the,path,to,the,downloaded,plugin,zip,return,an,input,stream,to,the,raw,bytes,of,the,plugin,zip,throws,ioexception,if,an,i,o,exception,occurs,preparing,the,input,stream;input,stream,plugin,zip,input,stream,final,path,zip,throws,ioexception,return,files,new,input,stream,zip
InstallPluginCommand -> InputStream pluginZipInputStream(final Path zip) throws IOException;1541592065;An input stream to the raw bytes of the plugin ZIP.__@param zip the path to the downloaded plugin ZIP_@return an input stream to the raw bytes of the plugin ZIP._@throws IOException if an I/O exception occurs preparing the input stream;InputStream pluginZipInputStream(final Path zip) throws IOException {_        return Files.newInputStream(zip)__    };an,input,stream,to,the,raw,bytes,of,the,plugin,zip,param,zip,the,path,to,the,downloaded,plugin,zip,return,an,input,stream,to,the,raw,bytes,of,the,plugin,zip,throws,ioexception,if,an,i,o,exception,occurs,preparing,the,input,stream;input,stream,plugin,zip,input,stream,final,path,zip,throws,ioexception,return,files,new,input,stream,zip
InstallPluginCommand -> InputStream pluginZipInputStream(final Path zip) throws IOException;1544610279;An input stream to the raw bytes of the plugin ZIP.__@param zip the path to the downloaded plugin ZIP_@return an input stream to the raw bytes of the plugin ZIP._@throws IOException if an I/O exception occurs preparing the input stream;InputStream pluginZipInputStream(final Path zip) throws IOException {_        return Files.newInputStream(zip)__    };an,input,stream,to,the,raw,bytes,of,the,plugin,zip,param,zip,the,path,to,the,downloaded,plugin,zip,return,an,input,stream,to,the,raw,bytes,of,the,plugin,zip,throws,ioexception,if,an,i,o,exception,occurs,preparing,the,input,stream;input,stream,plugin,zip,input,stream,final,path,zip,throws,ioexception,return,files,new,input,stream,zip
InstallPluginCommand -> InputStream pluginZipInputStream(final Path zip) throws IOException;1545481309;An input stream to the raw bytes of the plugin ZIP.__@param zip the path to the downloaded plugin ZIP_@return an input stream to the raw bytes of the plugin ZIP._@throws IOException if an I/O exception occurs preparing the input stream;InputStream pluginZipInputStream(final Path zip) throws IOException {_        return Files.newInputStream(zip)__    };an,input,stream,to,the,raw,bytes,of,the,plugin,zip,param,zip,the,path,to,the,downloaded,plugin,zip,return,an,input,stream,to,the,raw,bytes,of,the,plugin,zip,throws,ioexception,if,an,i,o,exception,occurs,preparing,the,input,stream;input,stream,plugin,zip,input,stream,final,path,zip,throws,ioexception,return,files,new,input,stream,zip
InstallPluginCommand -> InputStream pluginZipInputStream(final Path zip) throws IOException;1545528053;An input stream to the raw bytes of the plugin ZIP.__@param zip the path to the downloaded plugin ZIP_@return an input stream to the raw bytes of the plugin ZIP._@throws IOException if an I/O exception occurs preparing the input stream;InputStream pluginZipInputStream(final Path zip) throws IOException {_        return Files.newInputStream(zip)__    };an,input,stream,to,the,raw,bytes,of,the,plugin,zip,param,zip,the,path,to,the,downloaded,plugin,zip,return,an,input,stream,to,the,raw,bytes,of,the,plugin,zip,throws,ioexception,if,an,i,o,exception,occurs,preparing,the,input,stream;input,stream,plugin,zip,input,stream,final,path,zip,throws,ioexception,return,files,new,input,stream,zip
InstallPluginCommand -> InputStream pluginZipInputStream(final Path zip) throws IOException;1545599625;An input stream to the raw bytes of the plugin ZIP.__@param zip the path to the downloaded plugin ZIP_@return an input stream to the raw bytes of the plugin ZIP._@throws IOException if an I/O exception occurs preparing the input stream;InputStream pluginZipInputStream(final Path zip) throws IOException {_        return Files.newInputStream(zip)__    };an,input,stream,to,the,raw,bytes,of,the,plugin,zip,param,zip,the,path,to,the,downloaded,plugin,zip,return,an,input,stream,to,the,raw,bytes,of,the,plugin,zip,throws,ioexception,if,an,i,o,exception,occurs,preparing,the,input,stream;input,stream,plugin,zip,input,stream,final,path,zip,throws,ioexception,return,files,new,input,stream,zip
InstallPluginCommand -> URL openUrl(String urlString) throws Exception;1524684173;Creates a URL and opens a connection.__If the URL returns a 404, {@code null} is returned, otherwise the open URL opject is returned.;URL openUrl(String urlString) throws Exception {_        URL checksumUrl = new URL(urlString)__        HttpURLConnection connection = (HttpURLConnection)checksumUrl.openConnection()__        if (connection.getResponseCode() == 404) {_            return null__        }_        return checksumUrl__    };creates,a,url,and,opens,a,connection,if,the,url,returns,a,404,code,null,is,returned,otherwise,the,open,url,opject,is,returned;url,open,url,string,url,string,throws,exception,url,checksum,url,new,url,url,string,http,urlconnection,connection,http,urlconnection,checksum,url,open,connection,if,connection,get,response,code,404,return,null,return,checksum,url
InstallPluginCommand -> URL openUrl(String urlString) throws Exception;1526900724;Creates a URL and opens a connection.__If the URL returns a 404, {@code null} is returned, otherwise the open URL opject is returned.;URL openUrl(String urlString) throws Exception {_        URL checksumUrl = new URL(urlString)__        HttpURLConnection connection = (HttpURLConnection)checksumUrl.openConnection()__        if (connection.getResponseCode() == 404) {_            return null__        }_        return checksumUrl__    };creates,a,url,and,opens,a,connection,if,the,url,returns,a,404,code,null,is,returned,otherwise,the,open,url,opject,is,returned;url,open,url,string,url,string,throws,exception,url,checksum,url,new,url,url,string,http,urlconnection,connection,http,urlconnection,checksum,url,open,connection,if,connection,get,response,code,404,return,null,return,checksum,url
InstallPluginCommand -> URL openUrl(String urlString) throws Exception;1526981569;Creates a URL and opens a connection.__If the URL returns a 404, {@code null} is returned, otherwise the open URL opject is returned.;URL openUrl(String urlString) throws Exception {_        URL checksumUrl = new URL(urlString)__        HttpURLConnection connection = (HttpURLConnection)checksumUrl.openConnection()__        if (connection.getResponseCode() == 404) {_            return null__        }_        return checksumUrl__    };creates,a,url,and,opens,a,connection,if,the,url,returns,a,404,code,null,is,returned,otherwise,the,open,url,opject,is,returned;url,open,url,string,url,string,throws,exception,url,checksum,url,new,url,url,string,http,urlconnection,connection,http,urlconnection,checksum,url,open,connection,if,connection,get,response,code,404,return,null,return,checksum,url
InstallPluginCommand -> private Path downloadAndValidate(         final Terminal terminal,         final String urlString,         final Path tmpDir,         final boolean officialPlugin, boolean isBatch) throws IOException, PGPException, UserException;1544610279;Downloads a ZIP from the URL. This method also validates the downloaded plugin ZIP via the following means:_<ul>_<li>_For an official plugin we download the SHA-512 checksum and validate the integrity of the downloaded ZIP. We also download the_armored signature and validate the authenticity of the downloaded ZIP._</li>_<li>_For a non-official plugin we download the SHA-512 checksum and fallback to the SHA-1 checksum and validate the integrity of the_downloaded ZIP._</li>_</ul>__@param terminal       a terminal to log messages to_@param urlString      the URL of the plugin ZIP_@param tmpDir         a temporary directory to write downloaded files to_@param officialPlugin true if the plugin is an official plugin_@param isBatch        true if the install is running in batch mode_@return the path to the downloaded plugin ZIP_@throws IOException   if an I/O exception occurs download or reading files and resources_@throws PGPException  if an exception occurs verifying the downloaded ZIP signature_@throws UserException if checksum validation fails;private Path downloadAndValidate(_        final Terminal terminal,_        final String urlString,_        final Path tmpDir,_        final boolean officialPlugin, boolean isBatch) throws IOException, PGPException, UserException {_        Path zip = downloadZip(terminal, urlString, tmpDir, isBatch)__        pathsToDeleteOnShutdown.add(zip)__        String checksumUrlString = urlString + ".sha512"__        URL checksumUrl = openUrl(checksumUrlString)__        String digestAlgo = "SHA-512"__        if (checksumUrl == null && officialPlugin == false) {_            _            terminal.println("Warning: sha512 not found, falling back to sha1. This behavior is deprecated and will be removed in a " +_                             "future release. Please update the plugin to use a sha512 checksum.")__            checksumUrlString = urlString + ".sha1"__            checksumUrl = openUrl(checksumUrlString)__            digestAlgo = "SHA-1"__        }_        if (checksumUrl == null) {_            throw new UserException(ExitCodes.IO_ERROR, "Plugin checksum missing: " + checksumUrlString)__        }_        final String expectedChecksum__        try (InputStream in = urlOpenStream(checksumUrl)) {_            _            if (digestAlgo.equals("SHA-1")) {_                final BufferedReader checksumReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8))__                expectedChecksum = checksumReader.readLine()__                if (checksumReader.readLine() != null) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_            } else {_                final BufferedReader checksumReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8))__                final String checksumLine = checksumReader.readLine()__                final String[] fields = checksumLine.split(" {2}")__                if (fields.length != 2) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_                expectedChecksum = fields[0]__                final String[] segments = URI.create(urlString).getPath().split("/")__                final String expectedFile = segments[segments.length - 1]__                if (fields[1].equals(expectedFile) == false) {_                    final String message = String.format(_                            Locale.ROOT,_                            "checksum file at [%s] is not for this plugin, expected [%s] but was [%s]",_                            checksumUrl,_                            expectedFile,_                            fields[1])__                    throw new UserException(ExitCodes.IO_ERROR, message)__                }_                if (checksumReader.readLine() != null) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_            }_        }__        try {_            final byte[] zipBytes = Files.readAllBytes(zip)__            final String actualChecksum = MessageDigests.toHexString(MessageDigest.getInstance(digestAlgo).digest(zipBytes))__            if (expectedChecksum.equals(actualChecksum) == false) {_                throw new UserException(_                        ExitCodes.IO_ERROR,_                        digestAlgo + " mismatch, expected " + expectedChecksum + " but got " + actualChecksum)__            }_        } catch (final NoSuchAlgorithmException e) {_            _            throw new AssertionError(e)__        }__        if (officialPlugin) {_            verifySignature(zip, urlString)__        }__        return zip__    };downloads,a,zip,from,the,url,this,method,also,validates,the,downloaded,plugin,zip,via,the,following,means,ul,li,for,an,official,plugin,we,download,the,sha,512,checksum,and,validate,the,integrity,of,the,downloaded,zip,we,also,download,the,armored,signature,and,validate,the,authenticity,of,the,downloaded,zip,li,li,for,a,non,official,plugin,we,download,the,sha,512,checksum,and,fallback,to,the,sha,1,checksum,and,validate,the,integrity,of,the,downloaded,zip,li,ul,param,terminal,a,terminal,to,log,messages,to,param,url,string,the,url,of,the,plugin,zip,param,tmp,dir,a,temporary,directory,to,write,downloaded,files,to,param,official,plugin,true,if,the,plugin,is,an,official,plugin,param,is,batch,true,if,the,install,is,running,in,batch,mode,return,the,path,to,the,downloaded,plugin,zip,throws,ioexception,if,an,i,o,exception,occurs,download,or,reading,files,and,resources,throws,pgpexception,if,an,exception,occurs,verifying,the,downloaded,zip,signature,throws,user,exception,if,checksum,validation,fails;private,path,download,and,validate,final,terminal,terminal,final,string,url,string,final,path,tmp,dir,final,boolean,official,plugin,boolean,is,batch,throws,ioexception,pgpexception,user,exception,path,zip,download,zip,terminal,url,string,tmp,dir,is,batch,paths,to,delete,on,shutdown,add,zip,string,checksum,url,string,url,string,sha512,url,checksum,url,open,url,checksum,url,string,string,digest,algo,sha,512,if,checksum,url,null,official,plugin,false,terminal,println,warning,sha512,not,found,falling,back,to,sha1,this,behavior,is,deprecated,and,will,be,removed,in,a,future,release,please,update,the,plugin,to,use,a,sha512,checksum,checksum,url,string,url,string,sha1,checksum,url,open,url,checksum,url,string,digest,algo,sha,1,if,checksum,url,null,throw,new,user,exception,exit,codes,plugin,checksum,missing,checksum,url,string,final,string,expected,checksum,try,input,stream,in,url,open,stream,checksum,url,if,digest,algo,equals,sha,1,final,buffered,reader,checksum,reader,new,buffered,reader,new,input,stream,reader,in,standard,charsets,expected,checksum,checksum,reader,read,line,if,checksum,reader,read,line,null,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,else,final,buffered,reader,checksum,reader,new,buffered,reader,new,input,stream,reader,in,standard,charsets,final,string,checksum,line,checksum,reader,read,line,final,string,fields,checksum,line,split,2,if,fields,length,2,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,expected,checksum,fields,0,final,string,segments,uri,create,url,string,get,path,split,final,string,expected,file,segments,segments,length,1,if,fields,1,equals,expected,file,false,final,string,message,string,format,locale,root,checksum,file,at,s,is,not,for,this,plugin,expected,s,but,was,s,checksum,url,expected,file,fields,1,throw,new,user,exception,exit,codes,message,if,checksum,reader,read,line,null,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,try,final,byte,zip,bytes,files,read,all,bytes,zip,final,string,actual,checksum,message,digests,to,hex,string,message,digest,get,instance,digest,algo,digest,zip,bytes,if,expected,checksum,equals,actual,checksum,false,throw,new,user,exception,exit,codes,digest,algo,mismatch,expected,expected,checksum,but,got,actual,checksum,catch,final,no,such,algorithm,exception,e,throw,new,assertion,error,e,if,official,plugin,verify,signature,zip,url,string,return,zip
InstallPluginCommand -> private Path downloadAndValidate(         final Terminal terminal,         final String urlString,         final Path tmpDir,         final boolean officialPlugin, boolean isBatch) throws IOException, PGPException, UserException;1545481309;Downloads a ZIP from the URL. This method also validates the downloaded plugin ZIP via the following means:_<ul>_<li>_For an official plugin we download the SHA-512 checksum and validate the integrity of the downloaded ZIP. We also download the_armored signature and validate the authenticity of the downloaded ZIP._</li>_<li>_For a non-official plugin we download the SHA-512 checksum and fallback to the SHA-1 checksum and validate the integrity of the_downloaded ZIP._</li>_</ul>__@param terminal       a terminal to log messages to_@param urlString      the URL of the plugin ZIP_@param tmpDir         a temporary directory to write downloaded files to_@param officialPlugin true if the plugin is an official plugin_@param isBatch        true if the install is running in batch mode_@return the path to the downloaded plugin ZIP_@throws IOException   if an I/O exception occurs download or reading files and resources_@throws PGPException  if an exception occurs verifying the downloaded ZIP signature_@throws UserException if checksum validation fails;private Path downloadAndValidate(_        final Terminal terminal,_        final String urlString,_        final Path tmpDir,_        final boolean officialPlugin, boolean isBatch) throws IOException, PGPException, UserException {_        Path zip = downloadZip(terminal, urlString, tmpDir, isBatch)__        pathsToDeleteOnShutdown.add(zip)__        String checksumUrlString = urlString + ".sha512"__        URL checksumUrl = openUrl(checksumUrlString)__        String digestAlgo = "SHA-512"__        if (checksumUrl == null && officialPlugin == false) {_            _            terminal.println("Warning: sha512 not found, falling back to sha1. This behavior is deprecated and will be removed in a " +_                             "future release. Please update the plugin to use a sha512 checksum.")__            checksumUrlString = urlString + ".sha1"__            checksumUrl = openUrl(checksumUrlString)__            digestAlgo = "SHA-1"__        }_        if (checksumUrl == null) {_            throw new UserException(ExitCodes.IO_ERROR, "Plugin checksum missing: " + checksumUrlString)__        }_        final String expectedChecksum__        try (InputStream in = urlOpenStream(checksumUrl)) {_            _            if (digestAlgo.equals("SHA-1")) {_                final BufferedReader checksumReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8))__                expectedChecksum = checksumReader.readLine()__                if (checksumReader.readLine() != null) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_            } else {_                final BufferedReader checksumReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8))__                final String checksumLine = checksumReader.readLine()__                final String[] fields = checksumLine.split(" {2}")__                if (fields.length != 2) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_                expectedChecksum = fields[0]__                final String[] segments = URI.create(urlString).getPath().split("/")__                final String expectedFile = segments[segments.length - 1]__                if (fields[1].equals(expectedFile) == false) {_                    final String message = String.format(_                            Locale.ROOT,_                            "checksum file at [%s] is not for this plugin, expected [%s] but was [%s]",_                            checksumUrl,_                            expectedFile,_                            fields[1])__                    throw new UserException(ExitCodes.IO_ERROR, message)__                }_                if (checksumReader.readLine() != null) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_            }_        }__        try {_            final byte[] zipBytes = Files.readAllBytes(zip)__            final String actualChecksum = MessageDigests.toHexString(MessageDigest.getInstance(digestAlgo).digest(zipBytes))__            if (expectedChecksum.equals(actualChecksum) == false) {_                throw new UserException(_                        ExitCodes.IO_ERROR,_                        digestAlgo + " mismatch, expected " + expectedChecksum + " but got " + actualChecksum)__            }_        } catch (final NoSuchAlgorithmException e) {_            _            throw new AssertionError(e)__        }__        if (officialPlugin) {_            verifySignature(zip, urlString)__        }__        return zip__    };downloads,a,zip,from,the,url,this,method,also,validates,the,downloaded,plugin,zip,via,the,following,means,ul,li,for,an,official,plugin,we,download,the,sha,512,checksum,and,validate,the,integrity,of,the,downloaded,zip,we,also,download,the,armored,signature,and,validate,the,authenticity,of,the,downloaded,zip,li,li,for,a,non,official,plugin,we,download,the,sha,512,checksum,and,fallback,to,the,sha,1,checksum,and,validate,the,integrity,of,the,downloaded,zip,li,ul,param,terminal,a,terminal,to,log,messages,to,param,url,string,the,url,of,the,plugin,zip,param,tmp,dir,a,temporary,directory,to,write,downloaded,files,to,param,official,plugin,true,if,the,plugin,is,an,official,plugin,param,is,batch,true,if,the,install,is,running,in,batch,mode,return,the,path,to,the,downloaded,plugin,zip,throws,ioexception,if,an,i,o,exception,occurs,download,or,reading,files,and,resources,throws,pgpexception,if,an,exception,occurs,verifying,the,downloaded,zip,signature,throws,user,exception,if,checksum,validation,fails;private,path,download,and,validate,final,terminal,terminal,final,string,url,string,final,path,tmp,dir,final,boolean,official,plugin,boolean,is,batch,throws,ioexception,pgpexception,user,exception,path,zip,download,zip,terminal,url,string,tmp,dir,is,batch,paths,to,delete,on,shutdown,add,zip,string,checksum,url,string,url,string,sha512,url,checksum,url,open,url,checksum,url,string,string,digest,algo,sha,512,if,checksum,url,null,official,plugin,false,terminal,println,warning,sha512,not,found,falling,back,to,sha1,this,behavior,is,deprecated,and,will,be,removed,in,a,future,release,please,update,the,plugin,to,use,a,sha512,checksum,checksum,url,string,url,string,sha1,checksum,url,open,url,checksum,url,string,digest,algo,sha,1,if,checksum,url,null,throw,new,user,exception,exit,codes,plugin,checksum,missing,checksum,url,string,final,string,expected,checksum,try,input,stream,in,url,open,stream,checksum,url,if,digest,algo,equals,sha,1,final,buffered,reader,checksum,reader,new,buffered,reader,new,input,stream,reader,in,standard,charsets,expected,checksum,checksum,reader,read,line,if,checksum,reader,read,line,null,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,else,final,buffered,reader,checksum,reader,new,buffered,reader,new,input,stream,reader,in,standard,charsets,final,string,checksum,line,checksum,reader,read,line,final,string,fields,checksum,line,split,2,if,fields,length,2,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,expected,checksum,fields,0,final,string,segments,uri,create,url,string,get,path,split,final,string,expected,file,segments,segments,length,1,if,fields,1,equals,expected,file,false,final,string,message,string,format,locale,root,checksum,file,at,s,is,not,for,this,plugin,expected,s,but,was,s,checksum,url,expected,file,fields,1,throw,new,user,exception,exit,codes,message,if,checksum,reader,read,line,null,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,try,final,byte,zip,bytes,files,read,all,bytes,zip,final,string,actual,checksum,message,digests,to,hex,string,message,digest,get,instance,digest,algo,digest,zip,bytes,if,expected,checksum,equals,actual,checksum,false,throw,new,user,exception,exit,codes,digest,algo,mismatch,expected,expected,checksum,but,got,actual,checksum,catch,final,no,such,algorithm,exception,e,throw,new,assertion,error,e,if,official,plugin,verify,signature,zip,url,string,return,zip
InstallPluginCommand -> private Path downloadAndValidate(         final Terminal terminal,         final String urlString,         final Path tmpDir,         final boolean officialPlugin, boolean isBatch) throws IOException, PGPException, UserException;1545528053;Downloads a ZIP from the URL. This method also validates the downloaded plugin ZIP via the following means:_<ul>_<li>_For an official plugin we download the SHA-512 checksum and validate the integrity of the downloaded ZIP. We also download the_armored signature and validate the authenticity of the downloaded ZIP._</li>_<li>_For a non-official plugin we download the SHA-512 checksum and fallback to the SHA-1 checksum and validate the integrity of the_downloaded ZIP._</li>_</ul>__@param terminal       a terminal to log messages to_@param urlString      the URL of the plugin ZIP_@param tmpDir         a temporary directory to write downloaded files to_@param officialPlugin true if the plugin is an official plugin_@param isBatch        true if the install is running in batch mode_@return the path to the downloaded plugin ZIP_@throws IOException   if an I/O exception occurs download or reading files and resources_@throws PGPException  if an exception occurs verifying the downloaded ZIP signature_@throws UserException if checksum validation fails;private Path downloadAndValidate(_        final Terminal terminal,_        final String urlString,_        final Path tmpDir,_        final boolean officialPlugin, boolean isBatch) throws IOException, PGPException, UserException {_        Path zip = downloadZip(terminal, urlString, tmpDir, isBatch)__        pathsToDeleteOnShutdown.add(zip)__        String checksumUrlString = urlString + ".sha512"__        URL checksumUrl = openUrl(checksumUrlString)__        String digestAlgo = "SHA-512"__        if (checksumUrl == null && officialPlugin == false) {_            _            terminal.println("Warning: sha512 not found, falling back to sha1. This behavior is deprecated and will be removed in a " +_                             "future release. Please update the plugin to use a sha512 checksum.")__            checksumUrlString = urlString + ".sha1"__            checksumUrl = openUrl(checksumUrlString)__            digestAlgo = "SHA-1"__        }_        if (checksumUrl == null) {_            throw new UserException(ExitCodes.IO_ERROR, "Plugin checksum missing: " + checksumUrlString)__        }_        final String expectedChecksum__        try (InputStream in = urlOpenStream(checksumUrl)) {_            _            if (digestAlgo.equals("SHA-1")) {_                final BufferedReader checksumReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8))__                expectedChecksum = checksumReader.readLine()__                if (checksumReader.readLine() != null) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_            } else {_                final BufferedReader checksumReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8))__                final String checksumLine = checksumReader.readLine()__                final String[] fields = checksumLine.split(" {2}")__                if (fields.length != 2) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_                expectedChecksum = fields[0]__                final String[] segments = URI.create(urlString).getPath().split("/")__                final String expectedFile = segments[segments.length - 1]__                if (fields[1].equals(expectedFile) == false) {_                    final String message = String.format(_                            Locale.ROOT,_                            "checksum file at [%s] is not for this plugin, expected [%s] but was [%s]",_                            checksumUrl,_                            expectedFile,_                            fields[1])__                    throw new UserException(ExitCodes.IO_ERROR, message)__                }_                if (checksumReader.readLine() != null) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_            }_        }__        try {_            final byte[] zipBytes = Files.readAllBytes(zip)__            final String actualChecksum = MessageDigests.toHexString(MessageDigest.getInstance(digestAlgo).digest(zipBytes))__            if (expectedChecksum.equals(actualChecksum) == false) {_                throw new UserException(_                        ExitCodes.IO_ERROR,_                        digestAlgo + " mismatch, expected " + expectedChecksum + " but got " + actualChecksum)__            }_        } catch (final NoSuchAlgorithmException e) {_            _            throw new AssertionError(e)__        }__        if (officialPlugin) {_            verifySignature(zip, urlString)__        }__        return zip__    };downloads,a,zip,from,the,url,this,method,also,validates,the,downloaded,plugin,zip,via,the,following,means,ul,li,for,an,official,plugin,we,download,the,sha,512,checksum,and,validate,the,integrity,of,the,downloaded,zip,we,also,download,the,armored,signature,and,validate,the,authenticity,of,the,downloaded,zip,li,li,for,a,non,official,plugin,we,download,the,sha,512,checksum,and,fallback,to,the,sha,1,checksum,and,validate,the,integrity,of,the,downloaded,zip,li,ul,param,terminal,a,terminal,to,log,messages,to,param,url,string,the,url,of,the,plugin,zip,param,tmp,dir,a,temporary,directory,to,write,downloaded,files,to,param,official,plugin,true,if,the,plugin,is,an,official,plugin,param,is,batch,true,if,the,install,is,running,in,batch,mode,return,the,path,to,the,downloaded,plugin,zip,throws,ioexception,if,an,i,o,exception,occurs,download,or,reading,files,and,resources,throws,pgpexception,if,an,exception,occurs,verifying,the,downloaded,zip,signature,throws,user,exception,if,checksum,validation,fails;private,path,download,and,validate,final,terminal,terminal,final,string,url,string,final,path,tmp,dir,final,boolean,official,plugin,boolean,is,batch,throws,ioexception,pgpexception,user,exception,path,zip,download,zip,terminal,url,string,tmp,dir,is,batch,paths,to,delete,on,shutdown,add,zip,string,checksum,url,string,url,string,sha512,url,checksum,url,open,url,checksum,url,string,string,digest,algo,sha,512,if,checksum,url,null,official,plugin,false,terminal,println,warning,sha512,not,found,falling,back,to,sha1,this,behavior,is,deprecated,and,will,be,removed,in,a,future,release,please,update,the,plugin,to,use,a,sha512,checksum,checksum,url,string,url,string,sha1,checksum,url,open,url,checksum,url,string,digest,algo,sha,1,if,checksum,url,null,throw,new,user,exception,exit,codes,plugin,checksum,missing,checksum,url,string,final,string,expected,checksum,try,input,stream,in,url,open,stream,checksum,url,if,digest,algo,equals,sha,1,final,buffered,reader,checksum,reader,new,buffered,reader,new,input,stream,reader,in,standard,charsets,expected,checksum,checksum,reader,read,line,if,checksum,reader,read,line,null,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,else,final,buffered,reader,checksum,reader,new,buffered,reader,new,input,stream,reader,in,standard,charsets,final,string,checksum,line,checksum,reader,read,line,final,string,fields,checksum,line,split,2,if,fields,length,2,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,expected,checksum,fields,0,final,string,segments,uri,create,url,string,get,path,split,final,string,expected,file,segments,segments,length,1,if,fields,1,equals,expected,file,false,final,string,message,string,format,locale,root,checksum,file,at,s,is,not,for,this,plugin,expected,s,but,was,s,checksum,url,expected,file,fields,1,throw,new,user,exception,exit,codes,message,if,checksum,reader,read,line,null,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,try,final,byte,zip,bytes,files,read,all,bytes,zip,final,string,actual,checksum,message,digests,to,hex,string,message,digest,get,instance,digest,algo,digest,zip,bytes,if,expected,checksum,equals,actual,checksum,false,throw,new,user,exception,exit,codes,digest,algo,mismatch,expected,expected,checksum,but,got,actual,checksum,catch,final,no,such,algorithm,exception,e,throw,new,assertion,error,e,if,official,plugin,verify,signature,zip,url,string,return,zip
InstallPluginCommand -> private Path downloadAndValidate(         final Terminal terminal,         final String urlString,         final Path tmpDir,         final boolean officialPlugin, boolean isBatch) throws IOException, PGPException, UserException;1545599625;Downloads a ZIP from the URL. This method also validates the downloaded plugin ZIP via the following means:_<ul>_<li>_For an official plugin we download the SHA-512 checksum and validate the integrity of the downloaded ZIP. We also download the_armored signature and validate the authenticity of the downloaded ZIP._</li>_<li>_For a non-official plugin we download the SHA-512 checksum and fallback to the SHA-1 checksum and validate the integrity of the_downloaded ZIP._</li>_</ul>__@param terminal       a terminal to log messages to_@param urlString      the URL of the plugin ZIP_@param tmpDir         a temporary directory to write downloaded files to_@param officialPlugin true if the plugin is an official plugin_@param isBatch        true if the install is running in batch mode_@return the path to the downloaded plugin ZIP_@throws IOException   if an I/O exception occurs download or reading files and resources_@throws PGPException  if an exception occurs verifying the downloaded ZIP signature_@throws UserException if checksum validation fails;private Path downloadAndValidate(_        final Terminal terminal,_        final String urlString,_        final Path tmpDir,_        final boolean officialPlugin, boolean isBatch) throws IOException, PGPException, UserException {_        Path zip = downloadZip(terminal, urlString, tmpDir, isBatch)__        pathsToDeleteOnShutdown.add(zip)__        String checksumUrlString = urlString + ".sha512"__        URL checksumUrl = openUrl(checksumUrlString)__        String digestAlgo = "SHA-512"__        if (checksumUrl == null && officialPlugin == false) {_            _            terminal.println("Warning: sha512 not found, falling back to sha1. This behavior is deprecated and will be removed in a " +_                             "future release. Please update the plugin to use a sha512 checksum.")__            checksumUrlString = urlString + ".sha1"__            checksumUrl = openUrl(checksumUrlString)__            digestAlgo = "SHA-1"__        }_        if (checksumUrl == null) {_            throw new UserException(ExitCodes.IO_ERROR, "Plugin checksum missing: " + checksumUrlString)__        }_        final String expectedChecksum__        try (InputStream in = urlOpenStream(checksumUrl)) {_            _            if (digestAlgo.equals("SHA-1")) {_                final BufferedReader checksumReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8))__                expectedChecksum = checksumReader.readLine()__                if (checksumReader.readLine() != null) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_            } else {_                final BufferedReader checksumReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8))__                final String checksumLine = checksumReader.readLine()__                final String[] fields = checksumLine.split(" {2}")__                if (fields.length != 2) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_                expectedChecksum = fields[0]__                final String[] segments = URI.create(urlString).getPath().split("/")__                final String expectedFile = segments[segments.length - 1]__                if (fields[1].equals(expectedFile) == false) {_                    final String message = String.format(_                            Locale.ROOT,_                            "checksum file at [%s] is not for this plugin, expected [%s] but was [%s]",_                            checksumUrl,_                            expectedFile,_                            fields[1])__                    throw new UserException(ExitCodes.IO_ERROR, message)__                }_                if (checksumReader.readLine() != null) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_            }_        }__        try {_            final byte[] zipBytes = Files.readAllBytes(zip)__            final String actualChecksum = MessageDigests.toHexString(MessageDigest.getInstance(digestAlgo).digest(zipBytes))__            if (expectedChecksum.equals(actualChecksum) == false) {_                throw new UserException(_                        ExitCodes.IO_ERROR,_                        digestAlgo + " mismatch, expected " + expectedChecksum + " but got " + actualChecksum)__            }_        } catch (final NoSuchAlgorithmException e) {_            _            throw new AssertionError(e)__        }__        if (officialPlugin) {_            verifySignature(zip, urlString)__        }__        return zip__    };downloads,a,zip,from,the,url,this,method,also,validates,the,downloaded,plugin,zip,via,the,following,means,ul,li,for,an,official,plugin,we,download,the,sha,512,checksum,and,validate,the,integrity,of,the,downloaded,zip,we,also,download,the,armored,signature,and,validate,the,authenticity,of,the,downloaded,zip,li,li,for,a,non,official,plugin,we,download,the,sha,512,checksum,and,fallback,to,the,sha,1,checksum,and,validate,the,integrity,of,the,downloaded,zip,li,ul,param,terminal,a,terminal,to,log,messages,to,param,url,string,the,url,of,the,plugin,zip,param,tmp,dir,a,temporary,directory,to,write,downloaded,files,to,param,official,plugin,true,if,the,plugin,is,an,official,plugin,param,is,batch,true,if,the,install,is,running,in,batch,mode,return,the,path,to,the,downloaded,plugin,zip,throws,ioexception,if,an,i,o,exception,occurs,download,or,reading,files,and,resources,throws,pgpexception,if,an,exception,occurs,verifying,the,downloaded,zip,signature,throws,user,exception,if,checksum,validation,fails;private,path,download,and,validate,final,terminal,terminal,final,string,url,string,final,path,tmp,dir,final,boolean,official,plugin,boolean,is,batch,throws,ioexception,pgpexception,user,exception,path,zip,download,zip,terminal,url,string,tmp,dir,is,batch,paths,to,delete,on,shutdown,add,zip,string,checksum,url,string,url,string,sha512,url,checksum,url,open,url,checksum,url,string,string,digest,algo,sha,512,if,checksum,url,null,official,plugin,false,terminal,println,warning,sha512,not,found,falling,back,to,sha1,this,behavior,is,deprecated,and,will,be,removed,in,a,future,release,please,update,the,plugin,to,use,a,sha512,checksum,checksum,url,string,url,string,sha1,checksum,url,open,url,checksum,url,string,digest,algo,sha,1,if,checksum,url,null,throw,new,user,exception,exit,codes,plugin,checksum,missing,checksum,url,string,final,string,expected,checksum,try,input,stream,in,url,open,stream,checksum,url,if,digest,algo,equals,sha,1,final,buffered,reader,checksum,reader,new,buffered,reader,new,input,stream,reader,in,standard,charsets,expected,checksum,checksum,reader,read,line,if,checksum,reader,read,line,null,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,else,final,buffered,reader,checksum,reader,new,buffered,reader,new,input,stream,reader,in,standard,charsets,final,string,checksum,line,checksum,reader,read,line,final,string,fields,checksum,line,split,2,if,fields,length,2,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,expected,checksum,fields,0,final,string,segments,uri,create,url,string,get,path,split,final,string,expected,file,segments,segments,length,1,if,fields,1,equals,expected,file,false,final,string,message,string,format,locale,root,checksum,file,at,s,is,not,for,this,plugin,expected,s,but,was,s,checksum,url,expected,file,fields,1,throw,new,user,exception,exit,codes,message,if,checksum,reader,read,line,null,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,try,final,byte,zip,bytes,files,read,all,bytes,zip,final,string,actual,checksum,message,digests,to,hex,string,message,digest,get,instance,digest,algo,digest,zip,bytes,if,expected,checksum,equals,actual,checksum,false,throw,new,user,exception,exit,codes,digest,algo,mismatch,expected,expected,checksum,but,got,actual,checksum,catch,final,no,such,algorithm,exception,e,throw,new,assertion,error,e,if,official,plugin,verify,signature,zip,url,string,return,zip
InstallPluginCommand -> private PluginInfo loadPluginInfo(Terminal terminal, Path pluginRoot, Environment env) throws Exception;1526900724;Load information about the plugin, and verify it can be installed with no errors.;private PluginInfo loadPluginInfo(Terminal terminal, Path pluginRoot, Environment env) throws Exception {_        final PluginInfo info = PluginInfo.readFromProperties(pluginRoot)__        if (info.hasNativeController()) {_            throw new IllegalStateException("plugins can not have native controllers")__        }_        PluginsService.verifyCompatibility(info)___        _        verifyPluginName(env.pluginsFile(), info.getName())___        PluginsService.checkForFailedPluginRemovals(env.pluginsFile())___        terminal.println(VERBOSE, info.toString())___        _        jarHellCheck(info, pluginRoot, env.pluginsFile(), env.modulesFile())___        return info__    };load,information,about,the,plugin,and,verify,it,can,be,installed,with,no,errors;private,plugin,info,load,plugin,info,terminal,terminal,path,plugin,root,environment,env,throws,exception,final,plugin,info,info,plugin,info,read,from,properties,plugin,root,if,info,has,native,controller,throw,new,illegal,state,exception,plugins,can,not,have,native,controllers,plugins,service,verify,compatibility,info,verify,plugin,name,env,plugins,file,info,get,name,plugins,service,check,for,failed,plugin,removals,env,plugins,file,terminal,println,verbose,info,to,string,jar,hell,check,info,plugin,root,env,plugins,file,env,modules,file,return,info
InstallPluginCommand -> private PluginInfo loadPluginInfo(Terminal terminal, Path pluginRoot, Environment env) throws Exception;1526981569;Load information about the plugin, and verify it can be installed with no errors.;private PluginInfo loadPluginInfo(Terminal terminal, Path pluginRoot, Environment env) throws Exception {_        final PluginInfo info = PluginInfo.readFromProperties(pluginRoot)__        if (info.hasNativeController()) {_            throw new IllegalStateException("plugins can not have native controllers")__        }_        PluginsService.verifyCompatibility(info)___        _        verifyPluginName(env.pluginsFile(), info.getName())___        PluginsService.checkForFailedPluginRemovals(env.pluginsFile())___        terminal.println(VERBOSE, info.toString())___        _        jarHellCheck(info, pluginRoot, env.pluginsFile(), env.modulesFile())___        return info__    };load,information,about,the,plugin,and,verify,it,can,be,installed,with,no,errors;private,plugin,info,load,plugin,info,terminal,terminal,path,plugin,root,environment,env,throws,exception,final,plugin,info,info,plugin,info,read,from,properties,plugin,root,if,info,has,native,controller,throw,new,illegal,state,exception,plugins,can,not,have,native,controllers,plugins,service,verify,compatibility,info,verify,plugin,name,env,plugins,file,info,get,name,plugins,service,check,for,failed,plugin,removals,env,plugins,file,terminal,println,verbose,info,to,string,jar,hell,check,info,plugin,root,env,plugins,file,env,modules,file,return,info
InstallPluginCommand -> private PluginInfo loadPluginInfo(Terminal terminal, Path pluginRoot, Environment env) throws Exception;1527583663;Load information about the plugin, and verify it can be installed with no errors.;private PluginInfo loadPluginInfo(Terminal terminal, Path pluginRoot, Environment env) throws Exception {_        final PluginInfo info = PluginInfo.readFromProperties(pluginRoot)__        if (info.hasNativeController()) {_            throw new IllegalStateException("plugins can not have native controllers")__        }_        PluginsService.verifyCompatibility(info)___        _        verifyPluginName(env.pluginsFile(), info.getName())___        PluginsService.checkForFailedPluginRemovals(env.pluginsFile())___        terminal.println(VERBOSE, info.toString())___        _        jarHellCheck(info, pluginRoot, env.pluginsFile(), env.modulesFile())___        return info__    };load,information,about,the,plugin,and,verify,it,can,be,installed,with,no,errors;private,plugin,info,load,plugin,info,terminal,terminal,path,plugin,root,environment,env,throws,exception,final,plugin,info,info,plugin,info,read,from,properties,plugin,root,if,info,has,native,controller,throw,new,illegal,state,exception,plugins,can,not,have,native,controllers,plugins,service,verify,compatibility,info,verify,plugin,name,env,plugins,file,info,get,name,plugins,service,check,for,failed,plugin,removals,env,plugins,file,terminal,println,verbose,info,to,string,jar,hell,check,info,plugin,root,env,plugins,file,env,modules,file,return,info
InstallPluginCommand -> private PluginInfo loadPluginInfo(Terminal terminal, Path pluginRoot, Environment env) throws Exception;1528893677;Load information about the plugin, and verify it can be installed with no errors.;private PluginInfo loadPluginInfo(Terminal terminal, Path pluginRoot, Environment env) throws Exception {_        final PluginInfo info = PluginInfo.readFromProperties(pluginRoot)__        if (info.hasNativeController()) {_            throw new IllegalStateException("plugins can not have native controllers")__        }_        PluginsService.verifyCompatibility(info)___        _        verifyPluginName(env.pluginsFile(), info.getName())___        PluginsService.checkForFailedPluginRemovals(env.pluginsFile())___        terminal.println(VERBOSE, info.toString())___        _        jarHellCheck(info, pluginRoot, env.pluginsFile(), env.modulesFile())___        return info__    };load,information,about,the,plugin,and,verify,it,can,be,installed,with,no,errors;private,plugin,info,load,plugin,info,terminal,terminal,path,plugin,root,environment,env,throws,exception,final,plugin,info,info,plugin,info,read,from,properties,plugin,root,if,info,has,native,controller,throw,new,illegal,state,exception,plugins,can,not,have,native,controllers,plugins,service,verify,compatibility,info,verify,plugin,name,env,plugins,file,info,get,name,plugins,service,check,for,failed,plugin,removals,env,plugins,file,terminal,println,verbose,info,to,string,jar,hell,check,info,plugin,root,env,plugins,file,env,modules,file,return,info
InstallPluginCommand -> private PluginInfo loadPluginInfo(Terminal terminal, Path pluginRoot, Environment env) throws Exception;1536314350;Load information about the plugin, and verify it can be installed with no errors.;private PluginInfo loadPluginInfo(Terminal terminal, Path pluginRoot, Environment env) throws Exception {_        final PluginInfo info = PluginInfo.readFromProperties(pluginRoot)__        if (info.hasNativeController()) {_            throw new IllegalStateException("plugins can not have native controllers")__        }_        PluginsService.verifyCompatibility(info)___        _        verifyPluginName(env.pluginsFile(), info.getName())___        PluginsService.checkForFailedPluginRemovals(env.pluginsFile())___        terminal.println(VERBOSE, info.toString())___        _        jarHellCheck(info, pluginRoot, env.pluginsFile(), env.modulesFile())___        return info__    };load,information,about,the,plugin,and,verify,it,can,be,installed,with,no,errors;private,plugin,info,load,plugin,info,terminal,terminal,path,plugin,root,environment,env,throws,exception,final,plugin,info,info,plugin,info,read,from,properties,plugin,root,if,info,has,native,controller,throw,new,illegal,state,exception,plugins,can,not,have,native,controllers,plugins,service,verify,compatibility,info,verify,plugin,name,env,plugins,file,info,get,name,plugins,service,check,for,failed,plugin,removals,env,plugins,file,terminal,println,verbose,info,to,string,jar,hell,check,info,plugin,root,env,plugins,file,env,modules,file,return,info
InstallPluginCommand -> private PluginInfo loadPluginInfo(Terminal terminal, Path pluginRoot, Environment env) throws Exception;1541592065;Load information about the plugin, and verify it can be installed with no errors.;private PluginInfo loadPluginInfo(Terminal terminal, Path pluginRoot, Environment env) throws Exception {_        final PluginInfo info = PluginInfo.readFromProperties(pluginRoot)__        if (info.hasNativeController()) {_            throw new IllegalStateException("plugins can not have native controllers")__        }_        PluginsService.verifyCompatibility(info)___        _        verifyPluginName(env.pluginsFile(), info.getName())___        PluginsService.checkForFailedPluginRemovals(env.pluginsFile())___        terminal.println(VERBOSE, info.toString())___        _        jarHellCheck(info, pluginRoot, env.pluginsFile(), env.modulesFile())___        return info__    };load,information,about,the,plugin,and,verify,it,can,be,installed,with,no,errors;private,plugin,info,load,plugin,info,terminal,terminal,path,plugin,root,environment,env,throws,exception,final,plugin,info,info,plugin,info,read,from,properties,plugin,root,if,info,has,native,controller,throw,new,illegal,state,exception,plugins,can,not,have,native,controllers,plugins,service,verify,compatibility,info,verify,plugin,name,env,plugins,file,info,get,name,plugins,service,check,for,failed,plugin,removals,env,plugins,file,terminal,println,verbose,info,to,string,jar,hell,check,info,plugin,root,env,plugins,file,env,modules,file,return,info
InstallPluginCommand -> private PluginInfo loadPluginInfo(Terminal terminal, Path pluginRoot, Environment env) throws Exception;1544610279;Load information about the plugin, and verify it can be installed with no errors.;private PluginInfo loadPluginInfo(Terminal terminal, Path pluginRoot, Environment env) throws Exception {_        final PluginInfo info = PluginInfo.readFromProperties(pluginRoot)__        if (info.hasNativeController()) {_            throw new IllegalStateException("plugins can not have native controllers")__        }_        PluginsService.verifyCompatibility(info)___        _        verifyPluginName(env.pluginsFile(), info.getName())___        PluginsService.checkForFailedPluginRemovals(env.pluginsFile())___        terminal.println(VERBOSE, info.toString())___        _        jarHellCheck(info, pluginRoot, env.pluginsFile(), env.modulesFile())___        return info__    };load,information,about,the,plugin,and,verify,it,can,be,installed,with,no,errors;private,plugin,info,load,plugin,info,terminal,terminal,path,plugin,root,environment,env,throws,exception,final,plugin,info,info,plugin,info,read,from,properties,plugin,root,if,info,has,native,controller,throw,new,illegal,state,exception,plugins,can,not,have,native,controllers,plugins,service,verify,compatibility,info,verify,plugin,name,env,plugins,file,info,get,name,plugins,service,check,for,failed,plugin,removals,env,plugins,file,terminal,println,verbose,info,to,string,jar,hell,check,info,plugin,root,env,plugins,file,env,modules,file,return,info
InstallPluginCommand -> private PluginInfo loadPluginInfo(Terminal terminal, Path pluginRoot, Environment env) throws Exception;1545481309;Load information about the plugin, and verify it can be installed with no errors.;private PluginInfo loadPluginInfo(Terminal terminal, Path pluginRoot, Environment env) throws Exception {_        final PluginInfo info = PluginInfo.readFromProperties(pluginRoot)__        if (info.hasNativeController()) {_            throw new IllegalStateException("plugins can not have native controllers")__        }_        PluginsService.verifyCompatibility(info)___        _        verifyPluginName(env.pluginsFile(), info.getName())___        PluginsService.checkForFailedPluginRemovals(env.pluginsFile())___        terminal.println(VERBOSE, info.toString())___        _        jarHellCheck(info, pluginRoot, env.pluginsFile(), env.modulesFile())___        return info__    };load,information,about,the,plugin,and,verify,it,can,be,installed,with,no,errors;private,plugin,info,load,plugin,info,terminal,terminal,path,plugin,root,environment,env,throws,exception,final,plugin,info,info,plugin,info,read,from,properties,plugin,root,if,info,has,native,controller,throw,new,illegal,state,exception,plugins,can,not,have,native,controllers,plugins,service,verify,compatibility,info,verify,plugin,name,env,plugins,file,info,get,name,plugins,service,check,for,failed,plugin,removals,env,plugins,file,terminal,println,verbose,info,to,string,jar,hell,check,info,plugin,root,env,plugins,file,env,modules,file,return,info
InstallPluginCommand -> private PluginInfo loadPluginInfo(Terminal terminal, Path pluginRoot, Environment env) throws Exception;1545528053;Load information about the plugin, and verify it can be installed with no errors.;private PluginInfo loadPluginInfo(Terminal terminal, Path pluginRoot, Environment env) throws Exception {_        final PluginInfo info = PluginInfo.readFromProperties(pluginRoot)__        if (info.hasNativeController()) {_            throw new IllegalStateException("plugins can not have native controllers")__        }_        PluginsService.verifyCompatibility(info)___        _        verifyPluginName(env.pluginsFile(), info.getName())___        PluginsService.checkForFailedPluginRemovals(env.pluginsFile())___        terminal.println(VERBOSE, info.toString())___        _        jarHellCheck(info, pluginRoot, env.pluginsFile(), env.modulesFile())___        return info__    };load,information,about,the,plugin,and,verify,it,can,be,installed,with,no,errors;private,plugin,info,load,plugin,info,terminal,terminal,path,plugin,root,environment,env,throws,exception,final,plugin,info,info,plugin,info,read,from,properties,plugin,root,if,info,has,native,controller,throw,new,illegal,state,exception,plugins,can,not,have,native,controllers,plugins,service,verify,compatibility,info,verify,plugin,name,env,plugins,file,info,get,name,plugins,service,check,for,failed,plugin,removals,env,plugins,file,terminal,println,verbose,info,to,string,jar,hell,check,info,plugin,root,env,plugins,file,env,modules,file,return,info
InstallPluginCommand -> private PluginInfo loadPluginInfo(Terminal terminal, Path pluginRoot, Environment env) throws Exception;1545599625;Load information about the plugin, and verify it can be installed with no errors.;private PluginInfo loadPluginInfo(Terminal terminal, Path pluginRoot, Environment env) throws Exception {_        final PluginInfo info = PluginInfo.readFromProperties(pluginRoot)__        if (info.hasNativeController()) {_            throw new IllegalStateException("plugins can not have native controllers")__        }_        PluginsService.verifyCompatibility(info)___        _        verifyPluginName(env.pluginsFile(), info.getName())___        PluginsService.checkForFailedPluginRemovals(env.pluginsFile())___        terminal.println(VERBOSE, info.toString())___        _        jarHellCheck(info, pluginRoot, env.pluginsFile(), env.modulesFile())___        return info__    };load,information,about,the,plugin,and,verify,it,can,be,installed,with,no,errors;private,plugin,info,load,plugin,info,terminal,terminal,path,plugin,root,environment,env,throws,exception,final,plugin,info,info,plugin,info,read,from,properties,plugin,root,if,info,has,native,controller,throw,new,illegal,state,exception,plugins,can,not,have,native,controllers,plugins,service,verify,compatibility,info,verify,plugin,name,env,plugins,file,info,get,name,plugins,service,check,for,failed,plugin,removals,env,plugins,file,terminal,println,verbose,info,to,string,jar,hell,check,info,plugin,root,env,plugins,file,env,modules,file,return,info
InstallPluginCommand -> private void installPlugin(Terminal terminal, boolean isBatch, Path tmpRoot,                                Environment env, List<Path> deleteOnFailure) throws Exception;1524684173;Installs the plugin from {@code tmpRoot} into the plugins dir._If the plugin has a bin dir and/or a config dir, those are moved.;private void installPlugin(Terminal terminal, boolean isBatch, Path tmpRoot,_                               Environment env, List<Path> deleteOnFailure) throws Exception {_        final PluginInfo info = loadPluginInfo(terminal, tmpRoot, isBatch, env)__        _        Path policy = tmpRoot.resolve(PluginInfo.ES_PLUGIN_POLICY)__        final Set<String> permissions__        if (Files.exists(policy)) {_            permissions = PluginSecurity.parsePermissions(policy, env.tmpFile())__        } else {_            permissions = Collections.emptySet()__        }_        PluginSecurity.confirmPolicyExceptions(terminal, permissions, isBatch)___        final Path destination = env.pluginsFile().resolve(info.getName())__        deleteOnFailure.add(destination)___        installPluginSupportFiles(info, tmpRoot, env.binFile().resolve(info.getName()),_                                  env.configFile().resolve(info.getName()), deleteOnFailure)__        movePlugin(tmpRoot, destination)__        terminal.println("-> Installed " + info.getName())__    };installs,the,plugin,from,code,tmp,root,into,the,plugins,dir,if,the,plugin,has,a,bin,dir,and,or,a,config,dir,those,are,moved;private,void,install,plugin,terminal,terminal,boolean,is,batch,path,tmp,root,environment,env,list,path,delete,on,failure,throws,exception,final,plugin,info,info,load,plugin,info,terminal,tmp,root,is,batch,env,path,policy,tmp,root,resolve,plugin,info,final,set,string,permissions,if,files,exists,policy,permissions,plugin,security,parse,permissions,policy,env,tmp,file,else,permissions,collections,empty,set,plugin,security,confirm,policy,exceptions,terminal,permissions,is,batch,final,path,destination,env,plugins,file,resolve,info,get,name,delete,on,failure,add,destination,install,plugin,support,files,info,tmp,root,env,bin,file,resolve,info,get,name,env,config,file,resolve,info,get,name,delete,on,failure,move,plugin,tmp,root,destination,terminal,println,installed,info,get,name
InstallPluginCommand -> private void installPlugin(Terminal terminal, boolean isBatch, Path tmpRoot,                                Environment env, List<Path> deleteOnFailure) throws Exception;1526900724;Installs the plugin from {@code tmpRoot} into the plugins dir._If the plugin has a bin dir and/or a config dir, those are moved.;private void installPlugin(Terminal terminal, boolean isBatch, Path tmpRoot,_                               Environment env, List<Path> deleteOnFailure) throws Exception {_        final PluginInfo info = loadPluginInfo(terminal, tmpRoot, env)__        _        Path policy = tmpRoot.resolve(PluginInfo.ES_PLUGIN_POLICY)__        final Set<String> permissions__        if (Files.exists(policy)) {_            permissions = PluginSecurity.parsePermissions(policy, env.tmpFile())__        } else {_            permissions = Collections.emptySet()__        }_        PluginSecurity.confirmPolicyExceptions(terminal, permissions, isBatch)___        final Path destination = env.pluginsFile().resolve(info.getName())__        deleteOnFailure.add(destination)___        installPluginSupportFiles(info, tmpRoot, env.binFile().resolve(info.getName()),_                                  env.configFile().resolve(info.getName()), deleteOnFailure)__        movePlugin(tmpRoot, destination)__        terminal.println("-> Installed " + info.getName())__    };installs,the,plugin,from,code,tmp,root,into,the,plugins,dir,if,the,plugin,has,a,bin,dir,and,or,a,config,dir,those,are,moved;private,void,install,plugin,terminal,terminal,boolean,is,batch,path,tmp,root,environment,env,list,path,delete,on,failure,throws,exception,final,plugin,info,info,load,plugin,info,terminal,tmp,root,env,path,policy,tmp,root,resolve,plugin,info,final,set,string,permissions,if,files,exists,policy,permissions,plugin,security,parse,permissions,policy,env,tmp,file,else,permissions,collections,empty,set,plugin,security,confirm,policy,exceptions,terminal,permissions,is,batch,final,path,destination,env,plugins,file,resolve,info,get,name,delete,on,failure,add,destination,install,plugin,support,files,info,tmp,root,env,bin,file,resolve,info,get,name,env,config,file,resolve,info,get,name,delete,on,failure,move,plugin,tmp,root,destination,terminal,println,installed,info,get,name
InstallPluginCommand -> private void installPlugin(Terminal terminal, boolean isBatch, Path tmpRoot,                                Environment env, List<Path> deleteOnFailure) throws Exception;1526981569;Installs the plugin from {@code tmpRoot} into the plugins dir._If the plugin has a bin dir and/or a config dir, those are moved.;private void installPlugin(Terminal terminal, boolean isBatch, Path tmpRoot,_                               Environment env, List<Path> deleteOnFailure) throws Exception {_        final PluginInfo info = loadPluginInfo(terminal, tmpRoot, env)__        _        Path policy = tmpRoot.resolve(PluginInfo.ES_PLUGIN_POLICY)__        final Set<String> permissions__        if (Files.exists(policy)) {_            permissions = PluginSecurity.parsePermissions(policy, env.tmpFile())__        } else {_            permissions = Collections.emptySet()__        }_        PluginSecurity.confirmPolicyExceptions(terminal, permissions, isBatch)___        final Path destination = env.pluginsFile().resolve(info.getName())__        deleteOnFailure.add(destination)___        installPluginSupportFiles(info, tmpRoot, env.binFile().resolve(info.getName()),_                                  env.configFile().resolve(info.getName()), deleteOnFailure)__        movePlugin(tmpRoot, destination)__        terminal.println("-> Installed " + info.getName())__    };installs,the,plugin,from,code,tmp,root,into,the,plugins,dir,if,the,plugin,has,a,bin,dir,and,or,a,config,dir,those,are,moved;private,void,install,plugin,terminal,terminal,boolean,is,batch,path,tmp,root,environment,env,list,path,delete,on,failure,throws,exception,final,plugin,info,info,load,plugin,info,terminal,tmp,root,env,path,policy,tmp,root,resolve,plugin,info,final,set,string,permissions,if,files,exists,policy,permissions,plugin,security,parse,permissions,policy,env,tmp,file,else,permissions,collections,empty,set,plugin,security,confirm,policy,exceptions,terminal,permissions,is,batch,final,path,destination,env,plugins,file,resolve,info,get,name,delete,on,failure,add,destination,install,plugin,support,files,info,tmp,root,env,bin,file,resolve,info,get,name,env,config,file,resolve,info,get,name,delete,on,failure,move,plugin,tmp,root,destination,terminal,println,installed,info,get,name
InstallPluginCommand -> private void installPlugin(Terminal terminal, boolean isBatch, Path tmpRoot,                                Environment env, List<Path> deleteOnFailure) throws Exception;1527583663;Installs the plugin from {@code tmpRoot} into the plugins dir._If the plugin has a bin dir and/or a config dir, those are moved.;private void installPlugin(Terminal terminal, boolean isBatch, Path tmpRoot,_                               Environment env, List<Path> deleteOnFailure) throws Exception {_        final PluginInfo info = loadPluginInfo(terminal, tmpRoot, env)__        _        Path policy = tmpRoot.resolve(PluginInfo.ES_PLUGIN_POLICY)__        final Set<String> permissions__        if (Files.exists(policy)) {_            permissions = PluginSecurity.parsePermissions(policy, env.tmpFile())__        } else {_            permissions = Collections.emptySet()__        }_        PluginSecurity.confirmPolicyExceptions(terminal, permissions, isBatch)___        final Path destination = env.pluginsFile().resolve(info.getName())__        deleteOnFailure.add(destination)___        installPluginSupportFiles(info, tmpRoot, env.binFile().resolve(info.getName()),_                                  env.configFile().resolve(info.getName()), deleteOnFailure)__        movePlugin(tmpRoot, destination)__        terminal.println("-> Installed " + info.getName())__    };installs,the,plugin,from,code,tmp,root,into,the,plugins,dir,if,the,plugin,has,a,bin,dir,and,or,a,config,dir,those,are,moved;private,void,install,plugin,terminal,terminal,boolean,is,batch,path,tmp,root,environment,env,list,path,delete,on,failure,throws,exception,final,plugin,info,info,load,plugin,info,terminal,tmp,root,env,path,policy,tmp,root,resolve,plugin,info,final,set,string,permissions,if,files,exists,policy,permissions,plugin,security,parse,permissions,policy,env,tmp,file,else,permissions,collections,empty,set,plugin,security,confirm,policy,exceptions,terminal,permissions,is,batch,final,path,destination,env,plugins,file,resolve,info,get,name,delete,on,failure,add,destination,install,plugin,support,files,info,tmp,root,env,bin,file,resolve,info,get,name,env,config,file,resolve,info,get,name,delete,on,failure,move,plugin,tmp,root,destination,terminal,println,installed,info,get,name
InstallPluginCommand -> private void installPlugin(Terminal terminal, boolean isBatch, Path tmpRoot,                                Environment env, List<Path> deleteOnFailure) throws Exception;1528893677;Installs the plugin from {@code tmpRoot} into the plugins dir._If the plugin has a bin dir and/or a config dir, those are moved.;private void installPlugin(Terminal terminal, boolean isBatch, Path tmpRoot,_                               Environment env, List<Path> deleteOnFailure) throws Exception {_        final PluginInfo info = loadPluginInfo(terminal, tmpRoot, env)__        _        Path policy = tmpRoot.resolve(PluginInfo.ES_PLUGIN_POLICY)__        final Set<String> permissions__        if (Files.exists(policy)) {_            permissions = PluginSecurity.parsePermissions(policy, env.tmpFile())__        } else {_            permissions = Collections.emptySet()__        }_        PluginSecurity.confirmPolicyExceptions(terminal, permissions, isBatch)___        final Path destination = env.pluginsFile().resolve(info.getName())__        deleteOnFailure.add(destination)___        installPluginSupportFiles(info, tmpRoot, env.binFile().resolve(info.getName()),_                                  env.configFile().resolve(info.getName()), deleteOnFailure)__        movePlugin(tmpRoot, destination)__        terminal.println("-> Installed " + info.getName())__    };installs,the,plugin,from,code,tmp,root,into,the,plugins,dir,if,the,plugin,has,a,bin,dir,and,or,a,config,dir,those,are,moved;private,void,install,plugin,terminal,terminal,boolean,is,batch,path,tmp,root,environment,env,list,path,delete,on,failure,throws,exception,final,plugin,info,info,load,plugin,info,terminal,tmp,root,env,path,policy,tmp,root,resolve,plugin,info,final,set,string,permissions,if,files,exists,policy,permissions,plugin,security,parse,permissions,policy,env,tmp,file,else,permissions,collections,empty,set,plugin,security,confirm,policy,exceptions,terminal,permissions,is,batch,final,path,destination,env,plugins,file,resolve,info,get,name,delete,on,failure,add,destination,install,plugin,support,files,info,tmp,root,env,bin,file,resolve,info,get,name,env,config,file,resolve,info,get,name,delete,on,failure,move,plugin,tmp,root,destination,terminal,println,installed,info,get,name
InstallPluginCommand -> private void installPlugin(Terminal terminal, boolean isBatch, Path tmpRoot,                                Environment env, List<Path> deleteOnFailure) throws Exception;1536314350;Installs the plugin from {@code tmpRoot} into the plugins dir._If the plugin has a bin dir and/or a config dir, those are moved.;private void installPlugin(Terminal terminal, boolean isBatch, Path tmpRoot,_                               Environment env, List<Path> deleteOnFailure) throws Exception {_        final PluginInfo info = loadPluginInfo(terminal, tmpRoot, env)__        _        Path policy = tmpRoot.resolve(PluginInfo.ES_PLUGIN_POLICY)__        final Set<String> permissions__        if (Files.exists(policy)) {_            permissions = PluginSecurity.parsePermissions(policy, env.tmpFile())__        } else {_            permissions = Collections.emptySet()__        }_        PluginSecurity.confirmPolicyExceptions(terminal, permissions, isBatch)___        final Path destination = env.pluginsFile().resolve(info.getName())__        deleteOnFailure.add(destination)___        installPluginSupportFiles(info, tmpRoot, env.binFile().resolve(info.getName()),_                                  env.configFile().resolve(info.getName()), deleteOnFailure)__        movePlugin(tmpRoot, destination)__        terminal.println("-> Installed " + info.getName())__    };installs,the,plugin,from,code,tmp,root,into,the,plugins,dir,if,the,plugin,has,a,bin,dir,and,or,a,config,dir,those,are,moved;private,void,install,plugin,terminal,terminal,boolean,is,batch,path,tmp,root,environment,env,list,path,delete,on,failure,throws,exception,final,plugin,info,info,load,plugin,info,terminal,tmp,root,env,path,policy,tmp,root,resolve,plugin,info,final,set,string,permissions,if,files,exists,policy,permissions,plugin,security,parse,permissions,policy,env,tmp,file,else,permissions,collections,empty,set,plugin,security,confirm,policy,exceptions,terminal,permissions,is,batch,final,path,destination,env,plugins,file,resolve,info,get,name,delete,on,failure,add,destination,install,plugin,support,files,info,tmp,root,env,bin,file,resolve,info,get,name,env,config,file,resolve,info,get,name,delete,on,failure,move,plugin,tmp,root,destination,terminal,println,installed,info,get,name
InstallPluginCommand -> private void installPlugin(Terminal terminal, boolean isBatch, Path tmpRoot,                                Environment env, List<Path> deleteOnFailure) throws Exception;1541592065;Installs the plugin from {@code tmpRoot} into the plugins dir._If the plugin has a bin dir and/or a config dir, those are moved.;private void installPlugin(Terminal terminal, boolean isBatch, Path tmpRoot,_                               Environment env, List<Path> deleteOnFailure) throws Exception {_        final PluginInfo info = loadPluginInfo(terminal, tmpRoot, env)__        _        Path policy = tmpRoot.resolve(PluginInfo.ES_PLUGIN_POLICY)__        final Set<String> permissions__        if (Files.exists(policy)) {_            permissions = PluginSecurity.parsePermissions(policy, env.tmpFile())__        } else {_            permissions = Collections.emptySet()__        }_        PluginSecurity.confirmPolicyExceptions(terminal, permissions, isBatch)___        final Path destination = env.pluginsFile().resolve(info.getName())__        deleteOnFailure.add(destination)___        installPluginSupportFiles(info, tmpRoot, env.binFile().resolve(info.getName()),_                                  env.configFile().resolve(info.getName()), deleteOnFailure)__        movePlugin(tmpRoot, destination)__        terminal.println("-> Installed " + info.getName())__    };installs,the,plugin,from,code,tmp,root,into,the,plugins,dir,if,the,plugin,has,a,bin,dir,and,or,a,config,dir,those,are,moved;private,void,install,plugin,terminal,terminal,boolean,is,batch,path,tmp,root,environment,env,list,path,delete,on,failure,throws,exception,final,plugin,info,info,load,plugin,info,terminal,tmp,root,env,path,policy,tmp,root,resolve,plugin,info,final,set,string,permissions,if,files,exists,policy,permissions,plugin,security,parse,permissions,policy,env,tmp,file,else,permissions,collections,empty,set,plugin,security,confirm,policy,exceptions,terminal,permissions,is,batch,final,path,destination,env,plugins,file,resolve,info,get,name,delete,on,failure,add,destination,install,plugin,support,files,info,tmp,root,env,bin,file,resolve,info,get,name,env,config,file,resolve,info,get,name,delete,on,failure,move,plugin,tmp,root,destination,terminal,println,installed,info,get,name
InstallPluginCommand -> private void installPlugin(Terminal terminal, boolean isBatch, Path tmpRoot,                                Environment env, List<Path> deleteOnFailure) throws Exception;1544610279;Installs the plugin from {@code tmpRoot} into the plugins dir._If the plugin has a bin dir and/or a config dir, those are moved.;private void installPlugin(Terminal terminal, boolean isBatch, Path tmpRoot,_                               Environment env, List<Path> deleteOnFailure) throws Exception {_        final PluginInfo info = loadPluginInfo(terminal, tmpRoot, env)__        _        Path policy = tmpRoot.resolve(PluginInfo.ES_PLUGIN_POLICY)__        final Set<String> permissions__        if (Files.exists(policy)) {_            permissions = PluginSecurity.parsePermissions(policy, env.tmpFile())__        } else {_            permissions = Collections.emptySet()__        }_        PluginSecurity.confirmPolicyExceptions(terminal, permissions, isBatch)___        final Path destination = env.pluginsFile().resolve(info.getName())__        deleteOnFailure.add(destination)___        installPluginSupportFiles(info, tmpRoot, env.binFile().resolve(info.getName()),_                                  env.configFile().resolve(info.getName()), deleteOnFailure)__        movePlugin(tmpRoot, destination)__        terminal.println("-> Installed " + info.getName())__    };installs,the,plugin,from,code,tmp,root,into,the,plugins,dir,if,the,plugin,has,a,bin,dir,and,or,a,config,dir,those,are,moved;private,void,install,plugin,terminal,terminal,boolean,is,batch,path,tmp,root,environment,env,list,path,delete,on,failure,throws,exception,final,plugin,info,info,load,plugin,info,terminal,tmp,root,env,path,policy,tmp,root,resolve,plugin,info,final,set,string,permissions,if,files,exists,policy,permissions,plugin,security,parse,permissions,policy,env,tmp,file,else,permissions,collections,empty,set,plugin,security,confirm,policy,exceptions,terminal,permissions,is,batch,final,path,destination,env,plugins,file,resolve,info,get,name,delete,on,failure,add,destination,install,plugin,support,files,info,tmp,root,env,bin,file,resolve,info,get,name,env,config,file,resolve,info,get,name,delete,on,failure,move,plugin,tmp,root,destination,terminal,println,installed,info,get,name
InstallPluginCommand -> private void installPlugin(Terminal terminal, boolean isBatch, Path tmpRoot,                                Environment env, List<Path> deleteOnFailure) throws Exception;1545481309;Installs the plugin from {@code tmpRoot} into the plugins dir._If the plugin has a bin dir and/or a config dir, those are moved.;private void installPlugin(Terminal terminal, boolean isBatch, Path tmpRoot,_                               Environment env, List<Path> deleteOnFailure) throws Exception {_        final PluginInfo info = loadPluginInfo(terminal, tmpRoot, env)__        _        Path policy = tmpRoot.resolve(PluginInfo.ES_PLUGIN_POLICY)__        final Set<String> permissions__        if (Files.exists(policy)) {_            permissions = PluginSecurity.parsePermissions(policy, env.tmpFile())__        } else {_            permissions = Collections.emptySet()__        }_        PluginSecurity.confirmPolicyExceptions(terminal, permissions, isBatch)___        final Path destination = env.pluginsFile().resolve(info.getName())__        deleteOnFailure.add(destination)___        installPluginSupportFiles(info, tmpRoot, env.binFile().resolve(info.getName()),_                                  env.configFile().resolve(info.getName()), deleteOnFailure)__        movePlugin(tmpRoot, destination)__        terminal.println("-> Installed " + info.getName())__    };installs,the,plugin,from,code,tmp,root,into,the,plugins,dir,if,the,plugin,has,a,bin,dir,and,or,a,config,dir,those,are,moved;private,void,install,plugin,terminal,terminal,boolean,is,batch,path,tmp,root,environment,env,list,path,delete,on,failure,throws,exception,final,plugin,info,info,load,plugin,info,terminal,tmp,root,env,path,policy,tmp,root,resolve,plugin,info,final,set,string,permissions,if,files,exists,policy,permissions,plugin,security,parse,permissions,policy,env,tmp,file,else,permissions,collections,empty,set,plugin,security,confirm,policy,exceptions,terminal,permissions,is,batch,final,path,destination,env,plugins,file,resolve,info,get,name,delete,on,failure,add,destination,install,plugin,support,files,info,tmp,root,env,bin,file,resolve,info,get,name,env,config,file,resolve,info,get,name,delete,on,failure,move,plugin,tmp,root,destination,terminal,println,installed,info,get,name
InstallPluginCommand -> private void installPlugin(Terminal terminal, boolean isBatch, Path tmpRoot,                                Environment env, List<Path> deleteOnFailure) throws Exception;1545528053;Installs the plugin from {@code tmpRoot} into the plugins dir._If the plugin has a bin dir and/or a config dir, those are moved.;private void installPlugin(Terminal terminal, boolean isBatch, Path tmpRoot,_                               Environment env, List<Path> deleteOnFailure) throws Exception {_        final PluginInfo info = loadPluginInfo(terminal, tmpRoot, env)__        _        Path policy = tmpRoot.resolve(PluginInfo.ES_PLUGIN_POLICY)__        final Set<String> permissions__        if (Files.exists(policy)) {_            permissions = PluginSecurity.parsePermissions(policy, env.tmpFile())__        } else {_            permissions = Collections.emptySet()__        }_        PluginSecurity.confirmPolicyExceptions(terminal, permissions, isBatch)___        final Path destination = env.pluginsFile().resolve(info.getName())__        deleteOnFailure.add(destination)___        installPluginSupportFiles(info, tmpRoot, env.binFile().resolve(info.getName()),_                                  env.configFile().resolve(info.getName()), deleteOnFailure)__        movePlugin(tmpRoot, destination)__        terminal.println("-> Installed " + info.getName())__    };installs,the,plugin,from,code,tmp,root,into,the,plugins,dir,if,the,plugin,has,a,bin,dir,and,or,a,config,dir,those,are,moved;private,void,install,plugin,terminal,terminal,boolean,is,batch,path,tmp,root,environment,env,list,path,delete,on,failure,throws,exception,final,plugin,info,info,load,plugin,info,terminal,tmp,root,env,path,policy,tmp,root,resolve,plugin,info,final,set,string,permissions,if,files,exists,policy,permissions,plugin,security,parse,permissions,policy,env,tmp,file,else,permissions,collections,empty,set,plugin,security,confirm,policy,exceptions,terminal,permissions,is,batch,final,path,destination,env,plugins,file,resolve,info,get,name,delete,on,failure,add,destination,install,plugin,support,files,info,tmp,root,env,bin,file,resolve,info,get,name,env,config,file,resolve,info,get,name,delete,on,failure,move,plugin,tmp,root,destination,terminal,println,installed,info,get,name
InstallPluginCommand -> private void installPlugin(Terminal terminal, boolean isBatch, Path tmpRoot,                                Environment env, List<Path> deleteOnFailure) throws Exception;1545599625;Installs the plugin from {@code tmpRoot} into the plugins dir._If the plugin has a bin dir and/or a config dir, those are moved.;private void installPlugin(Terminal terminal, boolean isBatch, Path tmpRoot,_                               Environment env, List<Path> deleteOnFailure) throws Exception {_        final PluginInfo info = loadPluginInfo(terminal, tmpRoot, env)__        _        Path policy = tmpRoot.resolve(PluginInfo.ES_PLUGIN_POLICY)__        final Set<String> permissions__        if (Files.exists(policy)) {_            permissions = PluginSecurity.parsePermissions(policy, env.tmpFile())__        } else {_            permissions = Collections.emptySet()__        }_        PluginSecurity.confirmPolicyExceptions(terminal, permissions, isBatch)___        final Path destination = env.pluginsFile().resolve(info.getName())__        deleteOnFailure.add(destination)___        installPluginSupportFiles(info, tmpRoot, env.binFile().resolve(info.getName()),_                                  env.configFile().resolve(info.getName()), deleteOnFailure)__        movePlugin(tmpRoot, destination)__        terminal.println("-> Installed " + info.getName())__    };installs,the,plugin,from,code,tmp,root,into,the,plugins,dir,if,the,plugin,has,a,bin,dir,and,or,a,config,dir,those,are,moved;private,void,install,plugin,terminal,terminal,boolean,is,batch,path,tmp,root,environment,env,list,path,delete,on,failure,throws,exception,final,plugin,info,info,load,plugin,info,terminal,tmp,root,env,path,policy,tmp,root,resolve,plugin,info,final,set,string,permissions,if,files,exists,policy,permissions,plugin,security,parse,permissions,policy,env,tmp,file,else,permissions,collections,empty,set,plugin,security,confirm,policy,exceptions,terminal,permissions,is,batch,final,path,destination,env,plugins,file,resolve,info,get,name,delete,on,failure,add,destination,install,plugin,support,files,info,tmp,root,env,bin,file,resolve,info,get,name,env,config,file,resolve,info,get,name,delete,on,failure,move,plugin,tmp,root,destination,terminal,println,installed,info,get,name
InstallPluginCommand -> private String getMavenUrl(Terminal terminal, String[] coordinates, String platform) throws IOException;1524684173;Returns the url for an elasticsearch plugin in maven.;private String getMavenUrl(Terminal terminal, String[] coordinates, String platform) throws IOException {_        final String groupId = coordinates[0].replace(".", "/")__        final String artifactId = coordinates[1]__        final String version = coordinates[2]__        final String baseUrl = String.format(Locale.ROOT, "https://repo1.maven.org/maven2/%s/%s/%s", groupId, artifactId, version)__        final String platformUrl = String.format(Locale.ROOT, "%s/%s-%s-%s.zip", baseUrl, artifactId, platform, version)__        if (urlExists(terminal, platformUrl)) {_            return platformUrl__        }_        return String.format(Locale.ROOT, "%s/%s-%s.zip", baseUrl, artifactId, version)__    };returns,the,url,for,an,elasticsearch,plugin,in,maven;private,string,get,maven,url,terminal,terminal,string,coordinates,string,platform,throws,ioexception,final,string,group,id,coordinates,0,replace,final,string,artifact,id,coordinates,1,final,string,version,coordinates,2,final,string,base,url,string,format,locale,root,https,repo1,maven,org,maven2,s,s,s,group,id,artifact,id,version,final,string,platform,url,string,format,locale,root,s,s,s,s,zip,base,url,artifact,id,platform,version,if,url,exists,terminal,platform,url,return,platform,url,return,string,format,locale,root,s,s,s,zip,base,url,artifact,id,version
InstallPluginCommand -> private String getMavenUrl(Terminal terminal, String[] coordinates, String platform) throws IOException;1526900724;Returns the url for an elasticsearch plugin in maven.;private String getMavenUrl(Terminal terminal, String[] coordinates, String platform) throws IOException {_        final String groupId = coordinates[0].replace(".", "/")__        final String artifactId = coordinates[1]__        final String version = coordinates[2]__        final String baseUrl = String.format(Locale.ROOT, "https://repo1.maven.org/maven2/%s/%s/%s", groupId, artifactId, version)__        final String platformUrl = String.format(Locale.ROOT, "%s/%s-%s-%s.zip", baseUrl, artifactId, platform, version)__        if (urlExists(terminal, platformUrl)) {_            return platformUrl__        }_        return String.format(Locale.ROOT, "%s/%s-%s.zip", baseUrl, artifactId, version)__    };returns,the,url,for,an,elasticsearch,plugin,in,maven;private,string,get,maven,url,terminal,terminal,string,coordinates,string,platform,throws,ioexception,final,string,group,id,coordinates,0,replace,final,string,artifact,id,coordinates,1,final,string,version,coordinates,2,final,string,base,url,string,format,locale,root,https,repo1,maven,org,maven2,s,s,s,group,id,artifact,id,version,final,string,platform,url,string,format,locale,root,s,s,s,s,zip,base,url,artifact,id,platform,version,if,url,exists,terminal,platform,url,return,platform,url,return,string,format,locale,root,s,s,s,zip,base,url,artifact,id,version
InstallPluginCommand -> private String getMavenUrl(Terminal terminal, String[] coordinates, String platform) throws IOException;1526981569;Returns the url for an elasticsearch plugin in maven.;private String getMavenUrl(Terminal terminal, String[] coordinates, String platform) throws IOException {_        final String groupId = coordinates[0].replace(".", "/")__        final String artifactId = coordinates[1]__        final String version = coordinates[2]__        final String baseUrl = String.format(Locale.ROOT, "https://repo1.maven.org/maven2/%s/%s/%s", groupId, artifactId, version)__        final String platformUrl = String.format(Locale.ROOT, "%s/%s-%s-%s.zip", baseUrl, artifactId, platform, version)__        if (urlExists(terminal, platformUrl)) {_            return platformUrl__        }_        return String.format(Locale.ROOT, "%s/%s-%s.zip", baseUrl, artifactId, version)__    };returns,the,url,for,an,elasticsearch,plugin,in,maven;private,string,get,maven,url,terminal,terminal,string,coordinates,string,platform,throws,ioexception,final,string,group,id,coordinates,0,replace,final,string,artifact,id,coordinates,1,final,string,version,coordinates,2,final,string,base,url,string,format,locale,root,https,repo1,maven,org,maven2,s,s,s,group,id,artifact,id,version,final,string,platform,url,string,format,locale,root,s,s,s,s,zip,base,url,artifact,id,platform,version,if,url,exists,terminal,platform,url,return,platform,url,return,string,format,locale,root,s,s,s,zip,base,url,artifact,id,version
InstallPluginCommand -> private String getMavenUrl(Terminal terminal, String[] coordinates, String platform) throws IOException;1527583663;Returns the url for an elasticsearch plugin in maven.;private String getMavenUrl(Terminal terminal, String[] coordinates, String platform) throws IOException {_        final String groupId = coordinates[0].replace(".", "/")__        final String artifactId = coordinates[1]__        final String version = coordinates[2]__        final String baseUrl = String.format(Locale.ROOT, "https://repo1.maven.org/maven2/%s/%s/%s", groupId, artifactId, version)__        final String platformUrl = String.format(Locale.ROOT, "%s/%s-%s-%s.zip", baseUrl, artifactId, platform, version)__        if (urlExists(terminal, platformUrl)) {_            return platformUrl__        }_        return String.format(Locale.ROOT, "%s/%s-%s.zip", baseUrl, artifactId, version)__    };returns,the,url,for,an,elasticsearch,plugin,in,maven;private,string,get,maven,url,terminal,terminal,string,coordinates,string,platform,throws,ioexception,final,string,group,id,coordinates,0,replace,final,string,artifact,id,coordinates,1,final,string,version,coordinates,2,final,string,base,url,string,format,locale,root,https,repo1,maven,org,maven2,s,s,s,group,id,artifact,id,version,final,string,platform,url,string,format,locale,root,s,s,s,s,zip,base,url,artifact,id,platform,version,if,url,exists,terminal,platform,url,return,platform,url,return,string,format,locale,root,s,s,s,zip,base,url,artifact,id,version
InstallPluginCommand -> private String getMavenUrl(Terminal terminal, String[] coordinates, String platform) throws IOException;1528893677;Returns the url for an elasticsearch plugin in maven.;private String getMavenUrl(Terminal terminal, String[] coordinates, String platform) throws IOException {_        final String groupId = coordinates[0].replace(".", "/")__        final String artifactId = coordinates[1]__        final String version = coordinates[2]__        final String baseUrl = String.format(Locale.ROOT, "https://repo1.maven.org/maven2/%s/%s/%s", groupId, artifactId, version)__        final String platformUrl = String.format(Locale.ROOT, "%s/%s-%s-%s.zip", baseUrl, artifactId, platform, version)__        if (urlExists(terminal, platformUrl)) {_            return platformUrl__        }_        return String.format(Locale.ROOT, "%s/%s-%s.zip", baseUrl, artifactId, version)__    };returns,the,url,for,an,elasticsearch,plugin,in,maven;private,string,get,maven,url,terminal,terminal,string,coordinates,string,platform,throws,ioexception,final,string,group,id,coordinates,0,replace,final,string,artifact,id,coordinates,1,final,string,version,coordinates,2,final,string,base,url,string,format,locale,root,https,repo1,maven,org,maven2,s,s,s,group,id,artifact,id,version,final,string,platform,url,string,format,locale,root,s,s,s,s,zip,base,url,artifact,id,platform,version,if,url,exists,terminal,platform,url,return,platform,url,return,string,format,locale,root,s,s,s,zip,base,url,artifact,id,version
InstallPluginCommand -> private String getMavenUrl(Terminal terminal, String[] coordinates, String platform) throws IOException;1536314350;Returns the url for an elasticsearch plugin in maven.;private String getMavenUrl(Terminal terminal, String[] coordinates, String platform) throws IOException {_        final String groupId = coordinates[0].replace(".", "/")__        final String artifactId = coordinates[1]__        final String version = coordinates[2]__        final String baseUrl = String.format(Locale.ROOT, "https://repo1.maven.org/maven2/%s/%s/%s", groupId, artifactId, version)__        final String platformUrl = String.format(Locale.ROOT, "%s/%s-%s-%s.zip", baseUrl, artifactId, platform, version)__        if (urlExists(terminal, platformUrl)) {_            return platformUrl__        }_        return String.format(Locale.ROOT, "%s/%s-%s.zip", baseUrl, artifactId, version)__    };returns,the,url,for,an,elasticsearch,plugin,in,maven;private,string,get,maven,url,terminal,terminal,string,coordinates,string,platform,throws,ioexception,final,string,group,id,coordinates,0,replace,final,string,artifact,id,coordinates,1,final,string,version,coordinates,2,final,string,base,url,string,format,locale,root,https,repo1,maven,org,maven2,s,s,s,group,id,artifact,id,version,final,string,platform,url,string,format,locale,root,s,s,s,s,zip,base,url,artifact,id,platform,version,if,url,exists,terminal,platform,url,return,platform,url,return,string,format,locale,root,s,s,s,zip,base,url,artifact,id,version
InstallPluginCommand -> private String getMavenUrl(Terminal terminal, String[] coordinates, String platform) throws IOException;1541592065;Returns the url for an elasticsearch plugin in maven.;private String getMavenUrl(Terminal terminal, String[] coordinates, String platform) throws IOException {_        final String groupId = coordinates[0].replace(".", "/")__        final String artifactId = coordinates[1]__        final String version = coordinates[2]__        final String baseUrl = String.format(Locale.ROOT, "https://repo1.maven.org/maven2/%s/%s/%s", groupId, artifactId, version)__        final String platformUrl = String.format(Locale.ROOT, "%s/%s-%s-%s.zip", baseUrl, artifactId, platform, version)__        if (urlExists(terminal, platformUrl)) {_            return platformUrl__        }_        return String.format(Locale.ROOT, "%s/%s-%s.zip", baseUrl, artifactId, version)__    };returns,the,url,for,an,elasticsearch,plugin,in,maven;private,string,get,maven,url,terminal,terminal,string,coordinates,string,platform,throws,ioexception,final,string,group,id,coordinates,0,replace,final,string,artifact,id,coordinates,1,final,string,version,coordinates,2,final,string,base,url,string,format,locale,root,https,repo1,maven,org,maven2,s,s,s,group,id,artifact,id,version,final,string,platform,url,string,format,locale,root,s,s,s,s,zip,base,url,artifact,id,platform,version,if,url,exists,terminal,platform,url,return,platform,url,return,string,format,locale,root,s,s,s,zip,base,url,artifact,id,version
InstallPluginCommand -> private String getMavenUrl(Terminal terminal, String[] coordinates, String platform) throws IOException;1544610279;Returns the url for an elasticsearch plugin in maven.;private String getMavenUrl(Terminal terminal, String[] coordinates, String platform) throws IOException {_        final String groupId = coordinates[0].replace(".", "/")__        final String artifactId = coordinates[1]__        final String version = coordinates[2]__        final String baseUrl = String.format(Locale.ROOT, "https://repo1.maven.org/maven2/%s/%s/%s", groupId, artifactId, version)__        final String platformUrl = String.format(Locale.ROOT, "%s/%s-%s-%s.zip", baseUrl, artifactId, platform, version)__        if (urlExists(terminal, platformUrl)) {_            return platformUrl__        }_        return String.format(Locale.ROOT, "%s/%s-%s.zip", baseUrl, artifactId, version)__    };returns,the,url,for,an,elasticsearch,plugin,in,maven;private,string,get,maven,url,terminal,terminal,string,coordinates,string,platform,throws,ioexception,final,string,group,id,coordinates,0,replace,final,string,artifact,id,coordinates,1,final,string,version,coordinates,2,final,string,base,url,string,format,locale,root,https,repo1,maven,org,maven2,s,s,s,group,id,artifact,id,version,final,string,platform,url,string,format,locale,root,s,s,s,s,zip,base,url,artifact,id,platform,version,if,url,exists,terminal,platform,url,return,platform,url,return,string,format,locale,root,s,s,s,zip,base,url,artifact,id,version
InstallPluginCommand -> private String getMavenUrl(Terminal terminal, String[] coordinates, String platform) throws IOException;1545481309;Returns the url for an elasticsearch plugin in maven.;private String getMavenUrl(Terminal terminal, String[] coordinates, String platform) throws IOException {_        final String groupId = coordinates[0].replace(".", "/")__        final String artifactId = coordinates[1]__        final String version = coordinates[2]__        final String baseUrl = String.format(Locale.ROOT, "https://repo1.maven.org/maven2/%s/%s/%s", groupId, artifactId, version)__        final String platformUrl = String.format(Locale.ROOT, "%s/%s-%s-%s.zip", baseUrl, artifactId, platform, version)__        if (urlExists(terminal, platformUrl)) {_            return platformUrl__        }_        return String.format(Locale.ROOT, "%s/%s-%s.zip", baseUrl, artifactId, version)__    };returns,the,url,for,an,elasticsearch,plugin,in,maven;private,string,get,maven,url,terminal,terminal,string,coordinates,string,platform,throws,ioexception,final,string,group,id,coordinates,0,replace,final,string,artifact,id,coordinates,1,final,string,version,coordinates,2,final,string,base,url,string,format,locale,root,https,repo1,maven,org,maven2,s,s,s,group,id,artifact,id,version,final,string,platform,url,string,format,locale,root,s,s,s,s,zip,base,url,artifact,id,platform,version,if,url,exists,terminal,platform,url,return,platform,url,return,string,format,locale,root,s,s,s,zip,base,url,artifact,id,version
InstallPluginCommand -> private String getMavenUrl(Terminal terminal, String[] coordinates, String platform) throws IOException;1545528053;Returns the url for an elasticsearch plugin in maven.;private String getMavenUrl(Terminal terminal, String[] coordinates, String platform) throws IOException {_        final String groupId = coordinates[0].replace(".", "/")__        final String artifactId = coordinates[1]__        final String version = coordinates[2]__        final String baseUrl = String.format(Locale.ROOT, "https://repo1.maven.org/maven2/%s/%s/%s", groupId, artifactId, version)__        final String platformUrl = String.format(Locale.ROOT, "%s/%s-%s-%s.zip", baseUrl, artifactId, platform, version)__        if (urlExists(terminal, platformUrl)) {_            return platformUrl__        }_        return String.format(Locale.ROOT, "%s/%s-%s.zip", baseUrl, artifactId, version)__    };returns,the,url,for,an,elasticsearch,plugin,in,maven;private,string,get,maven,url,terminal,terminal,string,coordinates,string,platform,throws,ioexception,final,string,group,id,coordinates,0,replace,final,string,artifact,id,coordinates,1,final,string,version,coordinates,2,final,string,base,url,string,format,locale,root,https,repo1,maven,org,maven2,s,s,s,group,id,artifact,id,version,final,string,platform,url,string,format,locale,root,s,s,s,s,zip,base,url,artifact,id,platform,version,if,url,exists,terminal,platform,url,return,platform,url,return,string,format,locale,root,s,s,s,zip,base,url,artifact,id,version
InstallPluginCommand -> private String getMavenUrl(Terminal terminal, String[] coordinates, String platform) throws IOException;1545599625;Returns the url for an elasticsearch plugin in maven.;private String getMavenUrl(Terminal terminal, String[] coordinates, String platform) throws IOException {_        final String groupId = coordinates[0].replace(".", "/")__        final String artifactId = coordinates[1]__        final String version = coordinates[2]__        final String baseUrl = String.format(Locale.ROOT, "https://repo1.maven.org/maven2/%s/%s/%s", groupId, artifactId, version)__        final String platformUrl = String.format(Locale.ROOT, "%s/%s-%s-%s.zip", baseUrl, artifactId, platform, version)__        if (urlExists(terminal, platformUrl)) {_            return platformUrl__        }_        return String.format(Locale.ROOT, "%s/%s-%s.zip", baseUrl, artifactId, version)__    };returns,the,url,for,an,elasticsearch,plugin,in,maven;private,string,get,maven,url,terminal,terminal,string,coordinates,string,platform,throws,ioexception,final,string,group,id,coordinates,0,replace,final,string,artifact,id,coordinates,1,final,string,version,coordinates,2,final,string,base,url,string,format,locale,root,https,repo1,maven,org,maven2,s,s,s,group,id,artifact,id,version,final,string,platform,url,string,format,locale,root,s,s,s,s,zip,base,url,artifact,id,platform,version,if,url,exists,terminal,platform,url,return,platform,url,return,string,format,locale,root,s,s,s,zip,base,url,artifact,id,version
InstallPluginCommand -> private void installPluginSupportFiles(PluginInfo info, Path tmpRoot,                                            Path destBinDir, Path destConfigDir, List<Path> deleteOnFailure) throws Exception;1524684173;Moves bin and config directories from the plugin if they exist;private void installPluginSupportFiles(PluginInfo info, Path tmpRoot,_                                           Path destBinDir, Path destConfigDir, List<Path> deleteOnFailure) throws Exception {_        Path tmpBinDir = tmpRoot.resolve("bin")__        if (Files.exists(tmpBinDir)) {_            deleteOnFailure.add(destBinDir)__            installBin(info, tmpBinDir, destBinDir)__        }__        Path tmpConfigDir = tmpRoot.resolve("config")__        if (Files.exists(tmpConfigDir)) {_            _            _            installConfig(info, tmpConfigDir, destConfigDir)__        }_    };moves,bin,and,config,directories,from,the,plugin,if,they,exist;private,void,install,plugin,support,files,plugin,info,info,path,tmp,root,path,dest,bin,dir,path,dest,config,dir,list,path,delete,on,failure,throws,exception,path,tmp,bin,dir,tmp,root,resolve,bin,if,files,exists,tmp,bin,dir,delete,on,failure,add,dest,bin,dir,install,bin,info,tmp,bin,dir,dest,bin,dir,path,tmp,config,dir,tmp,root,resolve,config,if,files,exists,tmp,config,dir,install,config,info,tmp,config,dir,dest,config,dir
InstallPluginCommand -> private void installPluginSupportFiles(PluginInfo info, Path tmpRoot,                                            Path destBinDir, Path destConfigDir, List<Path> deleteOnFailure) throws Exception;1526900724;Moves bin and config directories from the plugin if they exist;private void installPluginSupportFiles(PluginInfo info, Path tmpRoot,_                                           Path destBinDir, Path destConfigDir, List<Path> deleteOnFailure) throws Exception {_        Path tmpBinDir = tmpRoot.resolve("bin")__        if (Files.exists(tmpBinDir)) {_            deleteOnFailure.add(destBinDir)__            installBin(info, tmpBinDir, destBinDir)__        }__        Path tmpConfigDir = tmpRoot.resolve("config")__        if (Files.exists(tmpConfigDir)) {_            _            _            installConfig(info, tmpConfigDir, destConfigDir)__        }_    };moves,bin,and,config,directories,from,the,plugin,if,they,exist;private,void,install,plugin,support,files,plugin,info,info,path,tmp,root,path,dest,bin,dir,path,dest,config,dir,list,path,delete,on,failure,throws,exception,path,tmp,bin,dir,tmp,root,resolve,bin,if,files,exists,tmp,bin,dir,delete,on,failure,add,dest,bin,dir,install,bin,info,tmp,bin,dir,dest,bin,dir,path,tmp,config,dir,tmp,root,resolve,config,if,files,exists,tmp,config,dir,install,config,info,tmp,config,dir,dest,config,dir
InstallPluginCommand -> private void installPluginSupportFiles(PluginInfo info, Path tmpRoot,                                            Path destBinDir, Path destConfigDir, List<Path> deleteOnFailure) throws Exception;1526981569;Moves bin and config directories from the plugin if they exist;private void installPluginSupportFiles(PluginInfo info, Path tmpRoot,_                                           Path destBinDir, Path destConfigDir, List<Path> deleteOnFailure) throws Exception {_        Path tmpBinDir = tmpRoot.resolve("bin")__        if (Files.exists(tmpBinDir)) {_            deleteOnFailure.add(destBinDir)__            installBin(info, tmpBinDir, destBinDir)__        }__        Path tmpConfigDir = tmpRoot.resolve("config")__        if (Files.exists(tmpConfigDir)) {_            _            _            installConfig(info, tmpConfigDir, destConfigDir)__        }_    };moves,bin,and,config,directories,from,the,plugin,if,they,exist;private,void,install,plugin,support,files,plugin,info,info,path,tmp,root,path,dest,bin,dir,path,dest,config,dir,list,path,delete,on,failure,throws,exception,path,tmp,bin,dir,tmp,root,resolve,bin,if,files,exists,tmp,bin,dir,delete,on,failure,add,dest,bin,dir,install,bin,info,tmp,bin,dir,dest,bin,dir,path,tmp,config,dir,tmp,root,resolve,config,if,files,exists,tmp,config,dir,install,config,info,tmp,config,dir,dest,config,dir
InstallPluginCommand -> private void installPluginSupportFiles(PluginInfo info, Path tmpRoot,                                            Path destBinDir, Path destConfigDir, List<Path> deleteOnFailure) throws Exception;1527583663;Moves bin and config directories from the plugin if they exist;private void installPluginSupportFiles(PluginInfo info, Path tmpRoot,_                                           Path destBinDir, Path destConfigDir, List<Path> deleteOnFailure) throws Exception {_        Path tmpBinDir = tmpRoot.resolve("bin")__        if (Files.exists(tmpBinDir)) {_            deleteOnFailure.add(destBinDir)__            installBin(info, tmpBinDir, destBinDir)__        }__        Path tmpConfigDir = tmpRoot.resolve("config")__        if (Files.exists(tmpConfigDir)) {_            _            _            installConfig(info, tmpConfigDir, destConfigDir)__        }_    };moves,bin,and,config,directories,from,the,plugin,if,they,exist;private,void,install,plugin,support,files,plugin,info,info,path,tmp,root,path,dest,bin,dir,path,dest,config,dir,list,path,delete,on,failure,throws,exception,path,tmp,bin,dir,tmp,root,resolve,bin,if,files,exists,tmp,bin,dir,delete,on,failure,add,dest,bin,dir,install,bin,info,tmp,bin,dir,dest,bin,dir,path,tmp,config,dir,tmp,root,resolve,config,if,files,exists,tmp,config,dir,install,config,info,tmp,config,dir,dest,config,dir
InstallPluginCommand -> private void installPluginSupportFiles(PluginInfo info, Path tmpRoot,                                            Path destBinDir, Path destConfigDir, List<Path> deleteOnFailure) throws Exception;1528893677;Moves bin and config directories from the plugin if they exist;private void installPluginSupportFiles(PluginInfo info, Path tmpRoot,_                                           Path destBinDir, Path destConfigDir, List<Path> deleteOnFailure) throws Exception {_        Path tmpBinDir = tmpRoot.resolve("bin")__        if (Files.exists(tmpBinDir)) {_            deleteOnFailure.add(destBinDir)__            installBin(info, tmpBinDir, destBinDir)__        }__        Path tmpConfigDir = tmpRoot.resolve("config")__        if (Files.exists(tmpConfigDir)) {_            _            _            installConfig(info, tmpConfigDir, destConfigDir)__        }_    };moves,bin,and,config,directories,from,the,plugin,if,they,exist;private,void,install,plugin,support,files,plugin,info,info,path,tmp,root,path,dest,bin,dir,path,dest,config,dir,list,path,delete,on,failure,throws,exception,path,tmp,bin,dir,tmp,root,resolve,bin,if,files,exists,tmp,bin,dir,delete,on,failure,add,dest,bin,dir,install,bin,info,tmp,bin,dir,dest,bin,dir,path,tmp,config,dir,tmp,root,resolve,config,if,files,exists,tmp,config,dir,install,config,info,tmp,config,dir,dest,config,dir
InstallPluginCommand -> private void installPluginSupportFiles(PluginInfo info, Path tmpRoot,                                            Path destBinDir, Path destConfigDir, List<Path> deleteOnFailure) throws Exception;1536314350;Moves bin and config directories from the plugin if they exist;private void installPluginSupportFiles(PluginInfo info, Path tmpRoot,_                                           Path destBinDir, Path destConfigDir, List<Path> deleteOnFailure) throws Exception {_        Path tmpBinDir = tmpRoot.resolve("bin")__        if (Files.exists(tmpBinDir)) {_            deleteOnFailure.add(destBinDir)__            installBin(info, tmpBinDir, destBinDir)__        }__        Path tmpConfigDir = tmpRoot.resolve("config")__        if (Files.exists(tmpConfigDir)) {_            _            _            installConfig(info, tmpConfigDir, destConfigDir)__        }_    };moves,bin,and,config,directories,from,the,plugin,if,they,exist;private,void,install,plugin,support,files,plugin,info,info,path,tmp,root,path,dest,bin,dir,path,dest,config,dir,list,path,delete,on,failure,throws,exception,path,tmp,bin,dir,tmp,root,resolve,bin,if,files,exists,tmp,bin,dir,delete,on,failure,add,dest,bin,dir,install,bin,info,tmp,bin,dir,dest,bin,dir,path,tmp,config,dir,tmp,root,resolve,config,if,files,exists,tmp,config,dir,install,config,info,tmp,config,dir,dest,config,dir
InstallPluginCommand -> private void installPluginSupportFiles(PluginInfo info, Path tmpRoot,                                            Path destBinDir, Path destConfigDir, List<Path> deleteOnFailure) throws Exception;1541592065;Moves bin and config directories from the plugin if they exist;private void installPluginSupportFiles(PluginInfo info, Path tmpRoot,_                                           Path destBinDir, Path destConfigDir, List<Path> deleteOnFailure) throws Exception {_        Path tmpBinDir = tmpRoot.resolve("bin")__        if (Files.exists(tmpBinDir)) {_            deleteOnFailure.add(destBinDir)__            installBin(info, tmpBinDir, destBinDir)__        }__        Path tmpConfigDir = tmpRoot.resolve("config")__        if (Files.exists(tmpConfigDir)) {_            _            _            installConfig(info, tmpConfigDir, destConfigDir)__        }_    };moves,bin,and,config,directories,from,the,plugin,if,they,exist;private,void,install,plugin,support,files,plugin,info,info,path,tmp,root,path,dest,bin,dir,path,dest,config,dir,list,path,delete,on,failure,throws,exception,path,tmp,bin,dir,tmp,root,resolve,bin,if,files,exists,tmp,bin,dir,delete,on,failure,add,dest,bin,dir,install,bin,info,tmp,bin,dir,dest,bin,dir,path,tmp,config,dir,tmp,root,resolve,config,if,files,exists,tmp,config,dir,install,config,info,tmp,config,dir,dest,config,dir
InstallPluginCommand -> private void installPluginSupportFiles(PluginInfo info, Path tmpRoot,                                            Path destBinDir, Path destConfigDir, List<Path> deleteOnFailure) throws Exception;1544610279;Moves bin and config directories from the plugin if they exist;private void installPluginSupportFiles(PluginInfo info, Path tmpRoot,_                                           Path destBinDir, Path destConfigDir, List<Path> deleteOnFailure) throws Exception {_        Path tmpBinDir = tmpRoot.resolve("bin")__        if (Files.exists(tmpBinDir)) {_            deleteOnFailure.add(destBinDir)__            installBin(info, tmpBinDir, destBinDir)__        }__        Path tmpConfigDir = tmpRoot.resolve("config")__        if (Files.exists(tmpConfigDir)) {_            _            _            installConfig(info, tmpConfigDir, destConfigDir)__        }_    };moves,bin,and,config,directories,from,the,plugin,if,they,exist;private,void,install,plugin,support,files,plugin,info,info,path,tmp,root,path,dest,bin,dir,path,dest,config,dir,list,path,delete,on,failure,throws,exception,path,tmp,bin,dir,tmp,root,resolve,bin,if,files,exists,tmp,bin,dir,delete,on,failure,add,dest,bin,dir,install,bin,info,tmp,bin,dir,dest,bin,dir,path,tmp,config,dir,tmp,root,resolve,config,if,files,exists,tmp,config,dir,install,config,info,tmp,config,dir,dest,config,dir
InstallPluginCommand -> private void installPluginSupportFiles(PluginInfo info, Path tmpRoot,                                            Path destBinDir, Path destConfigDir, List<Path> deleteOnFailure) throws Exception;1545481309;Moves bin and config directories from the plugin if they exist;private void installPluginSupportFiles(PluginInfo info, Path tmpRoot,_                                           Path destBinDir, Path destConfigDir, List<Path> deleteOnFailure) throws Exception {_        Path tmpBinDir = tmpRoot.resolve("bin")__        if (Files.exists(tmpBinDir)) {_            deleteOnFailure.add(destBinDir)__            installBin(info, tmpBinDir, destBinDir)__        }__        Path tmpConfigDir = tmpRoot.resolve("config")__        if (Files.exists(tmpConfigDir)) {_            _            _            installConfig(info, tmpConfigDir, destConfigDir)__        }_    };moves,bin,and,config,directories,from,the,plugin,if,they,exist;private,void,install,plugin,support,files,plugin,info,info,path,tmp,root,path,dest,bin,dir,path,dest,config,dir,list,path,delete,on,failure,throws,exception,path,tmp,bin,dir,tmp,root,resolve,bin,if,files,exists,tmp,bin,dir,delete,on,failure,add,dest,bin,dir,install,bin,info,tmp,bin,dir,dest,bin,dir,path,tmp,config,dir,tmp,root,resolve,config,if,files,exists,tmp,config,dir,install,config,info,tmp,config,dir,dest,config,dir
InstallPluginCommand -> private void installPluginSupportFiles(PluginInfo info, Path tmpRoot,                                            Path destBinDir, Path destConfigDir, List<Path> deleteOnFailure) throws Exception;1545528053;Moves bin and config directories from the plugin if they exist;private void installPluginSupportFiles(PluginInfo info, Path tmpRoot,_                                           Path destBinDir, Path destConfigDir, List<Path> deleteOnFailure) throws Exception {_        Path tmpBinDir = tmpRoot.resolve("bin")__        if (Files.exists(tmpBinDir)) {_            deleteOnFailure.add(destBinDir)__            installBin(info, tmpBinDir, destBinDir)__        }__        Path tmpConfigDir = tmpRoot.resolve("config")__        if (Files.exists(tmpConfigDir)) {_            _            _            installConfig(info, tmpConfigDir, destConfigDir)__        }_    };moves,bin,and,config,directories,from,the,plugin,if,they,exist;private,void,install,plugin,support,files,plugin,info,info,path,tmp,root,path,dest,bin,dir,path,dest,config,dir,list,path,delete,on,failure,throws,exception,path,tmp,bin,dir,tmp,root,resolve,bin,if,files,exists,tmp,bin,dir,delete,on,failure,add,dest,bin,dir,install,bin,info,tmp,bin,dir,dest,bin,dir,path,tmp,config,dir,tmp,root,resolve,config,if,files,exists,tmp,config,dir,install,config,info,tmp,config,dir,dest,config,dir
InstallPluginCommand -> private void installPluginSupportFiles(PluginInfo info, Path tmpRoot,                                            Path destBinDir, Path destConfigDir, List<Path> deleteOnFailure) throws Exception;1545599625;Moves bin and config directories from the plugin if they exist;private void installPluginSupportFiles(PluginInfo info, Path tmpRoot,_                                           Path destBinDir, Path destConfigDir, List<Path> deleteOnFailure) throws Exception {_        Path tmpBinDir = tmpRoot.resolve("bin")__        if (Files.exists(tmpBinDir)) {_            deleteOnFailure.add(destBinDir)__            installBin(info, tmpBinDir, destBinDir)__        }__        Path tmpConfigDir = tmpRoot.resolve("config")__        if (Files.exists(tmpConfigDir)) {_            _            _            installConfig(info, tmpConfigDir, destConfigDir)__        }_    };moves,bin,and,config,directories,from,the,plugin,if,they,exist;private,void,install,plugin,support,files,plugin,info,info,path,tmp,root,path,dest,bin,dir,path,dest,config,dir,list,path,delete,on,failure,throws,exception,path,tmp,bin,dir,tmp,root,resolve,bin,if,files,exists,tmp,bin,dir,delete,on,failure,add,dest,bin,dir,install,bin,info,tmp,bin,dir,dest,bin,dir,path,tmp,config,dir,tmp,root,resolve,config,if,files,exists,tmp,config,dir,install,config,info,tmp,config,dir,dest,config,dir
InstallPluginCommand -> InputStream getPublicKey();1527583663;An input stream to the public key of the signing key.__@return an input stream to the public key;InputStream getPublicKey() {_        return InstallPluginCommand.class.getResourceAsStream("/public_key.asc")__    };an,input,stream,to,the,public,key,of,the,signing,key,return,an,input,stream,to,the,public,key;input,stream,get,public,key,return,install,plugin,command,class,get,resource,as,stream,asc
InstallPluginCommand -> InputStream getPublicKey();1528893677;An input stream to the public key of the signing key.__@return an input stream to the public key;InputStream getPublicKey() {_        return InstallPluginCommand.class.getResourceAsStream("/public_key.asc")__    };an,input,stream,to,the,public,key,of,the,signing,key,return,an,input,stream,to,the,public,key;input,stream,get,public,key,return,install,plugin,command,class,get,resource,as,stream,asc
InstallPluginCommand -> InputStream getPublicKey();1536314350;An input stream to the public key of the signing key.__@return an input stream to the public key;InputStream getPublicKey() {_        return InstallPluginCommand.class.getResourceAsStream("/public_key.asc")__    };an,input,stream,to,the,public,key,of,the,signing,key,return,an,input,stream,to,the,public,key;input,stream,get,public,key,return,install,plugin,command,class,get,resource,as,stream,asc
InstallPluginCommand -> InputStream getPublicKey();1541592065;An input stream to the public key of the signing key.__@return an input stream to the public key;InputStream getPublicKey() {_        return InstallPluginCommand.class.getResourceAsStream("/public_key.asc")__    };an,input,stream,to,the,public,key,of,the,signing,key,return,an,input,stream,to,the,public,key;input,stream,get,public,key,return,install,plugin,command,class,get,resource,as,stream,asc
InstallPluginCommand -> InputStream getPublicKey();1544610279;An input stream to the public key of the signing key.__@return an input stream to the public key;InputStream getPublicKey() {_        return InstallPluginCommand.class.getResourceAsStream("/public_key.asc")__    };an,input,stream,to,the,public,key,of,the,signing,key,return,an,input,stream,to,the,public,key;input,stream,get,public,key,return,install,plugin,command,class,get,resource,as,stream,asc
InstallPluginCommand -> InputStream getPublicKey();1545481309;An input stream to the public key of the signing key.__@return an input stream to the public key;InputStream getPublicKey() {_        return InstallPluginCommand.class.getResourceAsStream("/public_key.asc")__    };an,input,stream,to,the,public,key,of,the,signing,key,return,an,input,stream,to,the,public,key;input,stream,get,public,key,return,install,plugin,command,class,get,resource,as,stream,asc
InstallPluginCommand -> InputStream getPublicKey();1545528053;An input stream to the public key of the signing key.__@return an input stream to the public key;InputStream getPublicKey() {_        return InstallPluginCommand.class.getResourceAsStream("/public_key.asc")__    };an,input,stream,to,the,public,key,of,the,signing,key,return,an,input,stream,to,the,public,key;input,stream,get,public,key,return,install,plugin,command,class,get,resource,as,stream,asc
InstallPluginCommand -> InputStream getPublicKey();1545599625;An input stream to the public key of the signing key.__@return an input stream to the public key;InputStream getPublicKey() {_        return InstallPluginCommand.class.getResourceAsStream("/public_key.asc")__    };an,input,stream,to,the,public,key,of,the,signing,key,return,an,input,stream,to,the,public,key;input,stream,get,public,key,return,install,plugin,command,class,get,resource,as,stream,asc
InstallPluginCommand -> @SuppressForbidden(reason = "We use getInputStream to download plugins")     Path downloadZip(Terminal terminal, String urlString, Path tmpDir, boolean isBatch) throws IOException;1544610279;Downloads a zip from the url, into a temp file under the given temp dir.;@SuppressForbidden(reason = "We use getInputStream to download plugins")_    Path downloadZip(Terminal terminal, String urlString, Path tmpDir, boolean isBatch) throws IOException {_        terminal.println(VERBOSE, "Retrieving zip from " + urlString)__        URL url = new URL(urlString)__        Path zip = Files.createTempFile(tmpDir, null, ".zip")__        URLConnection urlConnection = url.openConnection()__        urlConnection.addRequestProperty("User-Agent", "elasticsearch-plugin-installer")__        try (InputStream in = isBatch ? urlConnection.getInputStream() :_            new TerminalProgressInputStream(urlConnection.getInputStream(),urlConnection.getContentLength(),terminal)) {_            _            Files.copy(in, zip, StandardCopyOption.REPLACE_EXISTING)__        }_        return zip__    };downloads,a,zip,from,the,url,into,a,temp,file,under,the,given,temp,dir;suppress,forbidden,reason,we,use,get,input,stream,to,download,plugins,path,download,zip,terminal,terminal,string,url,string,path,tmp,dir,boolean,is,batch,throws,ioexception,terminal,println,verbose,retrieving,zip,from,url,string,url,url,new,url,url,string,path,zip,files,create,temp,file,tmp,dir,null,zip,urlconnection,url,connection,url,open,connection,url,connection,add,request,property,user,agent,elasticsearch,plugin,installer,try,input,stream,in,is,batch,url,connection,get,input,stream,new,terminal,progress,input,stream,url,connection,get,input,stream,url,connection,get,content,length,terminal,files,copy,in,zip,standard,copy,option,return,zip
InstallPluginCommand -> @SuppressForbidden(reason = "We use getInputStream to download plugins")     Path downloadZip(Terminal terminal, String urlString, Path tmpDir, boolean isBatch) throws IOException;1545481309;Downloads a zip from the url, into a temp file under the given temp dir.;@SuppressForbidden(reason = "We use getInputStream to download plugins")_    Path downloadZip(Terminal terminal, String urlString, Path tmpDir, boolean isBatch) throws IOException {_        terminal.println(VERBOSE, "Retrieving zip from " + urlString)__        URL url = new URL(urlString)__        Path zip = Files.createTempFile(tmpDir, null, ".zip")__        URLConnection urlConnection = url.openConnection()__        urlConnection.addRequestProperty("User-Agent", "elasticsearch-plugin-installer")__        try (InputStream in = isBatch ? urlConnection.getInputStream() :_            new TerminalProgressInputStream(urlConnection.getInputStream(),urlConnection.getContentLength(),terminal)) {_            _            Files.copy(in, zip, StandardCopyOption.REPLACE_EXISTING)__        }_        return zip__    };downloads,a,zip,from,the,url,into,a,temp,file,under,the,given,temp,dir;suppress,forbidden,reason,we,use,get,input,stream,to,download,plugins,path,download,zip,terminal,terminal,string,url,string,path,tmp,dir,boolean,is,batch,throws,ioexception,terminal,println,verbose,retrieving,zip,from,url,string,url,url,new,url,url,string,path,zip,files,create,temp,file,tmp,dir,null,zip,urlconnection,url,connection,url,open,connection,url,connection,add,request,property,user,agent,elasticsearch,plugin,installer,try,input,stream,in,is,batch,url,connection,get,input,stream,new,terminal,progress,input,stream,url,connection,get,input,stream,url,connection,get,content,length,terminal,files,copy,in,zip,standard,copy,option,return,zip
InstallPluginCommand -> @SuppressForbidden(reason = "We use getInputStream to download plugins")     Path downloadZip(Terminal terminal, String urlString, Path tmpDir, boolean isBatch) throws IOException;1545528053;Downloads a zip from the url, into a temp file under the given temp dir.;@SuppressForbidden(reason = "We use getInputStream to download plugins")_    Path downloadZip(Terminal terminal, String urlString, Path tmpDir, boolean isBatch) throws IOException {_        terminal.println(VERBOSE, "Retrieving zip from " + urlString)__        URL url = new URL(urlString)__        Path zip = Files.createTempFile(tmpDir, null, ".zip")__        URLConnection urlConnection = url.openConnection()__        urlConnection.addRequestProperty("User-Agent", "elasticsearch-plugin-installer")__        try (InputStream in = isBatch ? urlConnection.getInputStream() :_            new TerminalProgressInputStream(urlConnection.getInputStream(),urlConnection.getContentLength(),terminal)) {_            _            Files.copy(in, zip, StandardCopyOption.REPLACE_EXISTING)__        }_        return zip__    };downloads,a,zip,from,the,url,into,a,temp,file,under,the,given,temp,dir;suppress,forbidden,reason,we,use,get,input,stream,to,download,plugins,path,download,zip,terminal,terminal,string,url,string,path,tmp,dir,boolean,is,batch,throws,ioexception,terminal,println,verbose,retrieving,zip,from,url,string,url,url,new,url,url,string,path,zip,files,create,temp,file,tmp,dir,null,zip,urlconnection,url,connection,url,open,connection,url,connection,add,request,property,user,agent,elasticsearch,plugin,installer,try,input,stream,in,is,batch,url,connection,get,input,stream,new,terminal,progress,input,stream,url,connection,get,input,stream,url,connection,get,content,length,terminal,files,copy,in,zip,standard,copy,option,return,zip
InstallPluginCommand -> @SuppressForbidden(reason = "We use getInputStream to download plugins")     Path downloadZip(Terminal terminal, String urlString, Path tmpDir, boolean isBatch) throws IOException;1545599625;Downloads a zip from the url, into a temp file under the given temp dir.;@SuppressForbidden(reason = "We use getInputStream to download plugins")_    Path downloadZip(Terminal terminal, String urlString, Path tmpDir, boolean isBatch) throws IOException {_        terminal.println(VERBOSE, "Retrieving zip from " + urlString)__        URL url = new URL(urlString)__        Path zip = Files.createTempFile(tmpDir, null, ".zip")__        URLConnection urlConnection = url.openConnection()__        urlConnection.addRequestProperty("User-Agent", "elasticsearch-plugin-installer")__        try (InputStream in = isBatch ? urlConnection.getInputStream() :_            new TerminalProgressInputStream(urlConnection.getInputStream(),urlConnection.getContentLength(),terminal)) {_            _            Files.copy(in, zip, StandardCopyOption.REPLACE_EXISTING)__        }_        return zip__    };downloads,a,zip,from,the,url,into,a,temp,file,under,the,given,temp,dir;suppress,forbidden,reason,we,use,get,input,stream,to,download,plugins,path,download,zip,terminal,terminal,string,url,string,path,tmp,dir,boolean,is,batch,throws,ioexception,terminal,println,verbose,retrieving,zip,from,url,string,url,url,new,url,url,string,path,zip,files,create,temp,file,tmp,dir,null,zip,urlconnection,url,connection,url,open,connection,url,connection,add,request,property,user,agent,elasticsearch,plugin,installer,try,input,stream,in,is,batch,url,connection,get,input,stream,new,terminal,progress,input,stream,url,connection,get,input,stream,url,connection,get,content,length,terminal,files,copy,in,zip,standard,copy,option,return,zip
InstallPluginCommand -> URL openUrl(String urlString) throws IOException;1527583663;Creates a URL and opens a connection.__If the URL returns a 404, {@code null} is returned, otherwise the open URL opject is returned.;URL openUrl(String urlString) throws IOException {_        URL checksumUrl = new URL(urlString)__        HttpURLConnection connection = (HttpURLConnection)checksumUrl.openConnection()__        if (connection.getResponseCode() == 404) {_            return null__        }_        return checksumUrl__    };creates,a,url,and,opens,a,connection,if,the,url,returns,a,404,code,null,is,returned,otherwise,the,open,url,opject,is,returned;url,open,url,string,url,string,throws,ioexception,url,checksum,url,new,url,url,string,http,urlconnection,connection,http,urlconnection,checksum,url,open,connection,if,connection,get,response,code,404,return,null,return,checksum,url
InstallPluginCommand -> URL openUrl(String urlString) throws IOException;1528893677;Creates a URL and opens a connection.__If the URL returns a 404, {@code null} is returned, otherwise the open URL opject is returned.;URL openUrl(String urlString) throws IOException {_        URL checksumUrl = new URL(urlString)__        HttpURLConnection connection = (HttpURLConnection)checksumUrl.openConnection()__        if (connection.getResponseCode() == 404) {_            return null__        }_        return checksumUrl__    };creates,a,url,and,opens,a,connection,if,the,url,returns,a,404,code,null,is,returned,otherwise,the,open,url,opject,is,returned;url,open,url,string,url,string,throws,ioexception,url,checksum,url,new,url,url,string,http,urlconnection,connection,http,urlconnection,checksum,url,open,connection,if,connection,get,response,code,404,return,null,return,checksum,url
InstallPluginCommand -> URL openUrl(String urlString) throws IOException;1536314350;Creates a URL and opens a connection.__If the URL returns a 404, {@code null} is returned, otherwise the open URL opject is returned.;URL openUrl(String urlString) throws IOException {_        URL checksumUrl = new URL(urlString)__        HttpURLConnection connection = (HttpURLConnection)checksumUrl.openConnection()__        if (connection.getResponseCode() == 404) {_            return null__        }_        return checksumUrl__    };creates,a,url,and,opens,a,connection,if,the,url,returns,a,404,code,null,is,returned,otherwise,the,open,url,opject,is,returned;url,open,url,string,url,string,throws,ioexception,url,checksum,url,new,url,url,string,http,urlconnection,connection,http,urlconnection,checksum,url,open,connection,if,connection,get,response,code,404,return,null,return,checksum,url
InstallPluginCommand -> URL openUrl(String urlString) throws IOException;1541592065;Creates a URL and opens a connection.__If the URL returns a 404, {@code null} is returned, otherwise the open URL opject is returned.;URL openUrl(String urlString) throws IOException {_        URL checksumUrl = new URL(urlString)__        HttpURLConnection connection = (HttpURLConnection)checksumUrl.openConnection()__        if (connection.getResponseCode() == 404) {_            return null__        }_        return checksumUrl__    };creates,a,url,and,opens,a,connection,if,the,url,returns,a,404,code,null,is,returned,otherwise,the,open,url,opject,is,returned;url,open,url,string,url,string,throws,ioexception,url,checksum,url,new,url,url,string,http,urlconnection,connection,http,urlconnection,checksum,url,open,connection,if,connection,get,response,code,404,return,null,return,checksum,url
InstallPluginCommand -> URL openUrl(String urlString) throws IOException;1544610279;Creates a URL and opens a connection.__If the URL returns a 404, {@code null} is returned, otherwise the open URL opject is returned.;URL openUrl(String urlString) throws IOException {_        URL checksumUrl = new URL(urlString)__        HttpURLConnection connection = (HttpURLConnection)checksumUrl.openConnection()__        if (connection.getResponseCode() == 404) {_            return null__        }_        return checksumUrl__    };creates,a,url,and,opens,a,connection,if,the,url,returns,a,404,code,null,is,returned,otherwise,the,open,url,opject,is,returned;url,open,url,string,url,string,throws,ioexception,url,checksum,url,new,url,url,string,http,urlconnection,connection,http,urlconnection,checksum,url,open,connection,if,connection,get,response,code,404,return,null,return,checksum,url
InstallPluginCommand -> URL openUrl(String urlString) throws IOException;1545481309;Creates a URL and opens a connection.__If the URL returns a 404, {@code null} is returned, otherwise the open URL opject is returned.;URL openUrl(String urlString) throws IOException {_        URL checksumUrl = new URL(urlString)__        HttpURLConnection connection = (HttpURLConnection)checksumUrl.openConnection()__        if (connection.getResponseCode() == 404) {_            return null__        }_        return checksumUrl__    };creates,a,url,and,opens,a,connection,if,the,url,returns,a,404,code,null,is,returned,otherwise,the,open,url,opject,is,returned;url,open,url,string,url,string,throws,ioexception,url,checksum,url,new,url,url,string,http,urlconnection,connection,http,urlconnection,checksum,url,open,connection,if,connection,get,response,code,404,return,null,return,checksum,url
InstallPluginCommand -> URL openUrl(String urlString) throws IOException;1545528053;Creates a URL and opens a connection.__If the URL returns a 404, {@code null} is returned, otherwise the open URL opject is returned.;URL openUrl(String urlString) throws IOException {_        URL checksumUrl = new URL(urlString)__        HttpURLConnection connection = (HttpURLConnection)checksumUrl.openConnection()__        if (connection.getResponseCode() == 404) {_            return null__        }_        return checksumUrl__    };creates,a,url,and,opens,a,connection,if,the,url,returns,a,404,code,null,is,returned,otherwise,the,open,url,opject,is,returned;url,open,url,string,url,string,throws,ioexception,url,checksum,url,new,url,url,string,http,urlconnection,connection,http,urlconnection,checksum,url,open,connection,if,connection,get,response,code,404,return,null,return,checksum,url
InstallPluginCommand -> URL openUrl(String urlString) throws IOException;1545599625;Creates a URL and opens a connection.__If the URL returns a 404, {@code null} is returned, otherwise the open URL opject is returned.;URL openUrl(String urlString) throws IOException {_        URL checksumUrl = new URL(urlString)__        HttpURLConnection connection = (HttpURLConnection)checksumUrl.openConnection()__        if (connection.getResponseCode() == 404) {_            return null__        }_        return checksumUrl__    };creates,a,url,and,opens,a,connection,if,the,url,returns,a,404,code,null,is,returned,otherwise,the,open,url,opject,is,returned;url,open,url,string,url,string,throws,ioexception,url,checksum,url,new,url,url,string,http,urlconnection,connection,http,urlconnection,checksum,url,open,connection,if,connection,get,response,code,404,return,null,return,checksum,url
InstallPluginCommand -> private Path download(Terminal terminal, String pluginId, Path tmpDir) throws Exception;1524684173;Downloads the plugin and returns the file it was downloaded to.;private Path download(Terminal terminal, String pluginId, Path tmpDir) throws Exception {_        if (OFFICIAL_PLUGINS.contains(pluginId)) {_            final String url = getElasticUrl(terminal, getStagingHash(), Version.CURRENT, pluginId, Platforms.PLATFORM_NAME)__            terminal.println("-> Downloading " + pluginId + " from elastic")__            return downloadZipAndChecksum(terminal, url, tmpDir, false)__        }__        _        String[] coordinates = pluginId.split(":")__        if (coordinates.length == 3 && pluginId.contains("/") == false && pluginId.startsWith("file:") == false) {_            String mavenUrl = getMavenUrl(terminal, coordinates, Platforms.PLATFORM_NAME)__            terminal.println("-> Downloading " + pluginId + " from maven central")__            return downloadZipAndChecksum(terminal, mavenUrl, tmpDir, true)__        }__        _        if (pluginId.contains(":") == false) {_            _            List<String> plugins = checkMisspelledPlugin(pluginId)__            String msg = "Unknown plugin " + pluginId__            if (plugins.isEmpty() == false) {_                msg += ", did you mean " + (plugins.size() == 1 ? "[" + plugins.get(0) + "]": "any of " + plugins.toString()) + "?"__            }_            throw new UserException(ExitCodes.USAGE, msg)__        }_        terminal.println("-> Downloading " + URLDecoder.decode(pluginId, "UTF-8"))__        return downloadZip(terminal, pluginId, tmpDir)__    };downloads,the,plugin,and,returns,the,file,it,was,downloaded,to;private,path,download,terminal,terminal,string,plugin,id,path,tmp,dir,throws,exception,if,contains,plugin,id,final,string,url,get,elastic,url,terminal,get,staging,hash,version,current,plugin,id,platforms,terminal,println,downloading,plugin,id,from,elastic,return,download,zip,and,checksum,terminal,url,tmp,dir,false,string,coordinates,plugin,id,split,if,coordinates,length,3,plugin,id,contains,false,plugin,id,starts,with,file,false,string,maven,url,get,maven,url,terminal,coordinates,platforms,terminal,println,downloading,plugin,id,from,maven,central,return,download,zip,and,checksum,terminal,maven,url,tmp,dir,true,if,plugin,id,contains,false,list,string,plugins,check,misspelled,plugin,plugin,id,string,msg,unknown,plugin,plugin,id,if,plugins,is,empty,false,msg,did,you,mean,plugins,size,1,plugins,get,0,any,of,plugins,to,string,throw,new,user,exception,exit,codes,usage,msg,terminal,println,downloading,urldecoder,decode,plugin,id,utf,8,return,download,zip,terminal,plugin,id,tmp,dir
InstallPluginCommand -> private Path download(Terminal terminal, String pluginId, Path tmpDir) throws Exception;1526900724;Downloads the plugin and returns the file it was downloaded to.;private Path download(Terminal terminal, String pluginId, Path tmpDir) throws Exception {_        if (OFFICIAL_PLUGINS.contains(pluginId)) {_            final String url = getElasticUrl(terminal, getStagingHash(), Version.CURRENT, pluginId, Platforms.PLATFORM_NAME)__            terminal.println("-> Downloading " + pluginId + " from elastic")__            return downloadZipAndChecksum(terminal, url, tmpDir, false)__        }__        _        String[] coordinates = pluginId.split(":")__        if (coordinates.length == 3 && pluginId.contains("/") == false && pluginId.startsWith("file:") == false) {_            String mavenUrl = getMavenUrl(terminal, coordinates, Platforms.PLATFORM_NAME)__            terminal.println("-> Downloading " + pluginId + " from maven central")__            return downloadZipAndChecksum(terminal, mavenUrl, tmpDir, true)__        }__        _        if (pluginId.contains(":") == false) {_            _            List<String> plugins = checkMisspelledPlugin(pluginId)__            String msg = "Unknown plugin " + pluginId__            if (plugins.isEmpty() == false) {_                msg += ", did you mean " + (plugins.size() == 1 ? "[" + plugins.get(0) + "]": "any of " + plugins.toString()) + "?"__            }_            throw new UserException(ExitCodes.USAGE, msg)__        }_        terminal.println("-> Downloading " + URLDecoder.decode(pluginId, "UTF-8"))__        return downloadZip(terminal, pluginId, tmpDir)__    };downloads,the,plugin,and,returns,the,file,it,was,downloaded,to;private,path,download,terminal,terminal,string,plugin,id,path,tmp,dir,throws,exception,if,contains,plugin,id,final,string,url,get,elastic,url,terminal,get,staging,hash,version,current,plugin,id,platforms,terminal,println,downloading,plugin,id,from,elastic,return,download,zip,and,checksum,terminal,url,tmp,dir,false,string,coordinates,plugin,id,split,if,coordinates,length,3,plugin,id,contains,false,plugin,id,starts,with,file,false,string,maven,url,get,maven,url,terminal,coordinates,platforms,terminal,println,downloading,plugin,id,from,maven,central,return,download,zip,and,checksum,terminal,maven,url,tmp,dir,true,if,plugin,id,contains,false,list,string,plugins,check,misspelled,plugin,plugin,id,string,msg,unknown,plugin,plugin,id,if,plugins,is,empty,false,msg,did,you,mean,plugins,size,1,plugins,get,0,any,of,plugins,to,string,throw,new,user,exception,exit,codes,usage,msg,terminal,println,downloading,urldecoder,decode,plugin,id,utf,8,return,download,zip,terminal,plugin,id,tmp,dir
InstallPluginCommand -> private Path download(Terminal terminal, String pluginId, Path tmpDir) throws Exception;1526981569;Downloads the plugin and returns the file it was downloaded to.;private Path download(Terminal terminal, String pluginId, Path tmpDir) throws Exception {_        if (OFFICIAL_PLUGINS.contains(pluginId)) {_            final String url = getElasticUrl(terminal, getStagingHash(), Version.CURRENT, isSnapshot(), pluginId, Platforms.PLATFORM_NAME)__            terminal.println("-> Downloading " + pluginId + " from elastic")__            return downloadZipAndChecksum(terminal, url, tmpDir, false)__        }__        _        String[] coordinates = pluginId.split(":")__        if (coordinates.length == 3 && pluginId.contains("/") == false && pluginId.startsWith("file:") == false) {_            String mavenUrl = getMavenUrl(terminal, coordinates, Platforms.PLATFORM_NAME)__            terminal.println("-> Downloading " + pluginId + " from maven central")__            return downloadZipAndChecksum(terminal, mavenUrl, tmpDir, true)__        }__        _        if (pluginId.contains(":") == false) {_            _            List<String> plugins = checkMisspelledPlugin(pluginId)__            String msg = "Unknown plugin " + pluginId__            if (plugins.isEmpty() == false) {_                msg += ", did you mean " + (plugins.size() == 1 ? "[" + plugins.get(0) + "]": "any of " + plugins.toString()) + "?"__            }_            throw new UserException(ExitCodes.USAGE, msg)__        }_        terminal.println("-> Downloading " + URLDecoder.decode(pluginId, "UTF-8"))__        return downloadZip(terminal, pluginId, tmpDir)__    };downloads,the,plugin,and,returns,the,file,it,was,downloaded,to;private,path,download,terminal,terminal,string,plugin,id,path,tmp,dir,throws,exception,if,contains,plugin,id,final,string,url,get,elastic,url,terminal,get,staging,hash,version,current,is,snapshot,plugin,id,platforms,terminal,println,downloading,plugin,id,from,elastic,return,download,zip,and,checksum,terminal,url,tmp,dir,false,string,coordinates,plugin,id,split,if,coordinates,length,3,plugin,id,contains,false,plugin,id,starts,with,file,false,string,maven,url,get,maven,url,terminal,coordinates,platforms,terminal,println,downloading,plugin,id,from,maven,central,return,download,zip,and,checksum,terminal,maven,url,tmp,dir,true,if,plugin,id,contains,false,list,string,plugins,check,misspelled,plugin,plugin,id,string,msg,unknown,plugin,plugin,id,if,plugins,is,empty,false,msg,did,you,mean,plugins,size,1,plugins,get,0,any,of,plugins,to,string,throw,new,user,exception,exit,codes,usage,msg,terminal,println,downloading,urldecoder,decode,plugin,id,utf,8,return,download,zip,terminal,plugin,id,tmp,dir
InstallPluginCommand -> private Path download(Terminal terminal, String pluginId, Path tmpDir) throws Exception;1527583663;Downloads the plugin and returns the file it was downloaded to.;private Path download(Terminal terminal, String pluginId, Path tmpDir) throws Exception {_        if (OFFICIAL_PLUGINS.contains(pluginId)) {_            final String url = getElasticUrl(terminal, getStagingHash(), Version.CURRENT, isSnapshot(), pluginId, Platforms.PLATFORM_NAME)__            terminal.println("-> Downloading " + pluginId + " from elastic")__            return downloadAndValidate(terminal, url, tmpDir, true)__        }__        _        String[] coordinates = pluginId.split(":")__        if (coordinates.length == 3 && pluginId.contains("/") == false && pluginId.startsWith("file:") == false) {_            String mavenUrl = getMavenUrl(terminal, coordinates, Platforms.PLATFORM_NAME)__            terminal.println("-> Downloading " + pluginId + " from maven central")__            return downloadAndValidate(terminal, mavenUrl, tmpDir, false)__        }__        _        if (pluginId.contains(":") == false) {_            _            List<String> plugins = checkMisspelledPlugin(pluginId)__            String msg = "Unknown plugin " + pluginId__            if (plugins.isEmpty() == false) {_                msg += ", did you mean " + (plugins.size() == 1 ? "[" + plugins.get(0) + "]": "any of " + plugins.toString()) + "?"__            }_            throw new UserException(ExitCodes.USAGE, msg)__        }_        terminal.println("-> Downloading " + URLDecoder.decode(pluginId, "UTF-8"))__        return downloadZip(terminal, pluginId, tmpDir)__    };downloads,the,plugin,and,returns,the,file,it,was,downloaded,to;private,path,download,terminal,terminal,string,plugin,id,path,tmp,dir,throws,exception,if,contains,plugin,id,final,string,url,get,elastic,url,terminal,get,staging,hash,version,current,is,snapshot,plugin,id,platforms,terminal,println,downloading,plugin,id,from,elastic,return,download,and,validate,terminal,url,tmp,dir,true,string,coordinates,plugin,id,split,if,coordinates,length,3,plugin,id,contains,false,plugin,id,starts,with,file,false,string,maven,url,get,maven,url,terminal,coordinates,platforms,terminal,println,downloading,plugin,id,from,maven,central,return,download,and,validate,terminal,maven,url,tmp,dir,false,if,plugin,id,contains,false,list,string,plugins,check,misspelled,plugin,plugin,id,string,msg,unknown,plugin,plugin,id,if,plugins,is,empty,false,msg,did,you,mean,plugins,size,1,plugins,get,0,any,of,plugins,to,string,throw,new,user,exception,exit,codes,usage,msg,terminal,println,downloading,urldecoder,decode,plugin,id,utf,8,return,download,zip,terminal,plugin,id,tmp,dir
InstallPluginCommand -> private Path download(Terminal terminal, String pluginId, Path tmpDir) throws Exception;1528893677;Downloads the plugin and returns the file it was downloaded to.;private Path download(Terminal terminal, String pluginId, Path tmpDir) throws Exception {_        if (OFFICIAL_PLUGINS.contains(pluginId)) {_            final String url = getElasticUrl(terminal, getStagingHash(), Version.CURRENT, isSnapshot(), pluginId, Platforms.PLATFORM_NAME)__            terminal.println("-> Downloading " + pluginId + " from elastic")__            return downloadAndValidate(terminal, url, tmpDir, true)__        }__        _        String[] coordinates = pluginId.split(":")__        if (coordinates.length == 3 && pluginId.contains("/") == false && pluginId.startsWith("file:") == false) {_            String mavenUrl = getMavenUrl(terminal, coordinates, Platforms.PLATFORM_NAME)__            terminal.println("-> Downloading " + pluginId + " from maven central")__            return downloadAndValidate(terminal, mavenUrl, tmpDir, false)__        }__        _        if (pluginId.contains(":") == false) {_            _            List<String> plugins = checkMisspelledPlugin(pluginId)__            String msg = "Unknown plugin " + pluginId__            if (plugins.isEmpty() == false) {_                msg += ", did you mean " + (plugins.size() == 1 ? "[" + plugins.get(0) + "]": "any of " + plugins.toString()) + "?"__            }_            throw new UserException(ExitCodes.USAGE, msg)__        }_        terminal.println("-> Downloading " + URLDecoder.decode(pluginId, "UTF-8"))__        return downloadZip(terminal, pluginId, tmpDir)__    };downloads,the,plugin,and,returns,the,file,it,was,downloaded,to;private,path,download,terminal,terminal,string,plugin,id,path,tmp,dir,throws,exception,if,contains,plugin,id,final,string,url,get,elastic,url,terminal,get,staging,hash,version,current,is,snapshot,plugin,id,platforms,terminal,println,downloading,plugin,id,from,elastic,return,download,and,validate,terminal,url,tmp,dir,true,string,coordinates,plugin,id,split,if,coordinates,length,3,plugin,id,contains,false,plugin,id,starts,with,file,false,string,maven,url,get,maven,url,terminal,coordinates,platforms,terminal,println,downloading,plugin,id,from,maven,central,return,download,and,validate,terminal,maven,url,tmp,dir,false,if,plugin,id,contains,false,list,string,plugins,check,misspelled,plugin,plugin,id,string,msg,unknown,plugin,plugin,id,if,plugins,is,empty,false,msg,did,you,mean,plugins,size,1,plugins,get,0,any,of,plugins,to,string,throw,new,user,exception,exit,codes,usage,msg,terminal,println,downloading,urldecoder,decode,plugin,id,utf,8,return,download,zip,terminal,plugin,id,tmp,dir
InstallPluginCommand -> private Path download(Terminal terminal, String pluginId, Path tmpDir) throws Exception;1536314350;Downloads the plugin and returns the file it was downloaded to.;private Path download(Terminal terminal, String pluginId, Path tmpDir) throws Exception {_        if (OFFICIAL_PLUGINS.contains(pluginId)) {_            final String url = getElasticUrl(terminal, getStagingHash(), Version.CURRENT, isSnapshot(), pluginId, Platforms.PLATFORM_NAME)__            terminal.println("-> Downloading " + pluginId + " from elastic")__            return downloadAndValidate(terminal, url, tmpDir, true)__        }__        _        String[] coordinates = pluginId.split(":")__        if (coordinates.length == 3 && pluginId.contains("/") == false && pluginId.startsWith("file:") == false) {_            String mavenUrl = getMavenUrl(terminal, coordinates, Platforms.PLATFORM_NAME)__            terminal.println("-> Downloading " + pluginId + " from maven central")__            return downloadAndValidate(terminal, mavenUrl, tmpDir, false)__        }__        _        if (pluginId.contains(":") == false) {_            _            List<String> plugins = checkMisspelledPlugin(pluginId)__            String msg = "Unknown plugin " + pluginId__            if (plugins.isEmpty() == false) {_                msg += ", did you mean " + (plugins.size() == 1 ? "[" + plugins.get(0) + "]": "any of " + plugins.toString()) + "?"__            }_            throw new UserException(ExitCodes.USAGE, msg)__        }_        terminal.println("-> Downloading " + URLDecoder.decode(pluginId, "UTF-8"))__        return downloadZip(terminal, pluginId, tmpDir)__    };downloads,the,plugin,and,returns,the,file,it,was,downloaded,to;private,path,download,terminal,terminal,string,plugin,id,path,tmp,dir,throws,exception,if,contains,plugin,id,final,string,url,get,elastic,url,terminal,get,staging,hash,version,current,is,snapshot,plugin,id,platforms,terminal,println,downloading,plugin,id,from,elastic,return,download,and,validate,terminal,url,tmp,dir,true,string,coordinates,plugin,id,split,if,coordinates,length,3,plugin,id,contains,false,plugin,id,starts,with,file,false,string,maven,url,get,maven,url,terminal,coordinates,platforms,terminal,println,downloading,plugin,id,from,maven,central,return,download,and,validate,terminal,maven,url,tmp,dir,false,if,plugin,id,contains,false,list,string,plugins,check,misspelled,plugin,plugin,id,string,msg,unknown,plugin,plugin,id,if,plugins,is,empty,false,msg,did,you,mean,plugins,size,1,plugins,get,0,any,of,plugins,to,string,throw,new,user,exception,exit,codes,usage,msg,terminal,println,downloading,urldecoder,decode,plugin,id,utf,8,return,download,zip,terminal,plugin,id,tmp,dir
InstallPluginCommand -> private Path download(Terminal terminal, String pluginId, Path tmpDir) throws Exception;1541592065;Downloads the plugin and returns the file it was downloaded to.;private Path download(Terminal terminal, String pluginId, Path tmpDir) throws Exception {_        if (OFFICIAL_PLUGINS.contains(pluginId)) {_            final String url = getElasticUrl(terminal, getStagingHash(), Version.CURRENT, isSnapshot(), pluginId, Platforms.PLATFORM_NAME)__            terminal.println("-> Downloading " + pluginId + " from elastic")__            return downloadAndValidate(terminal, url, tmpDir, true)__        }__        _        String[] coordinates = pluginId.split(":")__        if (coordinates.length == 3 && pluginId.contains("/") == false && pluginId.startsWith("file:") == false) {_            String mavenUrl = getMavenUrl(terminal, coordinates, Platforms.PLATFORM_NAME)__            terminal.println("-> Downloading " + pluginId + " from maven central")__            return downloadAndValidate(terminal, mavenUrl, tmpDir, false)__        }__        _        if (pluginId.contains(":") == false) {_            _            List<String> plugins = checkMisspelledPlugin(pluginId)__            String msg = "Unknown plugin " + pluginId__            if (plugins.isEmpty() == false) {_                msg += ", did you mean " + (plugins.size() == 1 ? "[" + plugins.get(0) + "]": "any of " + plugins.toString()) + "?"__            }_            throw new UserException(ExitCodes.USAGE, msg)__        }_        terminal.println("-> Downloading " + URLDecoder.decode(pluginId, "UTF-8"))__        return downloadZip(terminal, pluginId, tmpDir)__    };downloads,the,plugin,and,returns,the,file,it,was,downloaded,to;private,path,download,terminal,terminal,string,plugin,id,path,tmp,dir,throws,exception,if,contains,plugin,id,final,string,url,get,elastic,url,terminal,get,staging,hash,version,current,is,snapshot,plugin,id,platforms,terminal,println,downloading,plugin,id,from,elastic,return,download,and,validate,terminal,url,tmp,dir,true,string,coordinates,plugin,id,split,if,coordinates,length,3,plugin,id,contains,false,plugin,id,starts,with,file,false,string,maven,url,get,maven,url,terminal,coordinates,platforms,terminal,println,downloading,plugin,id,from,maven,central,return,download,and,validate,terminal,maven,url,tmp,dir,false,if,plugin,id,contains,false,list,string,plugins,check,misspelled,plugin,plugin,id,string,msg,unknown,plugin,plugin,id,if,plugins,is,empty,false,msg,did,you,mean,plugins,size,1,plugins,get,0,any,of,plugins,to,string,throw,new,user,exception,exit,codes,usage,msg,terminal,println,downloading,urldecoder,decode,plugin,id,utf,8,return,download,zip,terminal,plugin,id,tmp,dir
InstallPluginCommand -> @SuppressForbidden(reason = "We use getInputStream to download plugins")     Path downloadZip(Terminal terminal, String urlString, Path tmpDir) throws IOException;1524684173;Downloads a zip from the url, into a temp file under the given temp dir.;@SuppressForbidden(reason = "We use getInputStream to download plugins")_    Path downloadZip(Terminal terminal, String urlString, Path tmpDir) throws IOException {_        terminal.println(VERBOSE, "Retrieving zip from " + urlString)__        URL url = new URL(urlString)__        Path zip = Files.createTempFile(tmpDir, null, ".zip")__        URLConnection urlConnection = url.openConnection()__        urlConnection.addRequestProperty("User-Agent", "elasticsearch-plugin-installer")__        int contentLength = urlConnection.getContentLength()__        try (InputStream in = new TerminalProgressInputStream(urlConnection.getInputStream(), contentLength, terminal)) {_            _            Files.copy(in, zip, StandardCopyOption.REPLACE_EXISTING)__        }_        return zip__    };downloads,a,zip,from,the,url,into,a,temp,file,under,the,given,temp,dir;suppress,forbidden,reason,we,use,get,input,stream,to,download,plugins,path,download,zip,terminal,terminal,string,url,string,path,tmp,dir,throws,ioexception,terminal,println,verbose,retrieving,zip,from,url,string,url,url,new,url,url,string,path,zip,files,create,temp,file,tmp,dir,null,zip,urlconnection,url,connection,url,open,connection,url,connection,add,request,property,user,agent,elasticsearch,plugin,installer,int,content,length,url,connection,get,content,length,try,input,stream,in,new,terminal,progress,input,stream,url,connection,get,input,stream,content,length,terminal,files,copy,in,zip,standard,copy,option,return,zip
InstallPluginCommand -> @SuppressForbidden(reason = "We use getInputStream to download plugins")     Path downloadZip(Terminal terminal, String urlString, Path tmpDir) throws IOException;1526900724;Downloads a zip from the url, into a temp file under the given temp dir.;@SuppressForbidden(reason = "We use getInputStream to download plugins")_    Path downloadZip(Terminal terminal, String urlString, Path tmpDir) throws IOException {_        terminal.println(VERBOSE, "Retrieving zip from " + urlString)__        URL url = new URL(urlString)__        Path zip = Files.createTempFile(tmpDir, null, ".zip")__        URLConnection urlConnection = url.openConnection()__        urlConnection.addRequestProperty("User-Agent", "elasticsearch-plugin-installer")__        int contentLength = urlConnection.getContentLength()__        try (InputStream in = new TerminalProgressInputStream(urlConnection.getInputStream(), contentLength, terminal)) {_            _            Files.copy(in, zip, StandardCopyOption.REPLACE_EXISTING)__        }_        return zip__    };downloads,a,zip,from,the,url,into,a,temp,file,under,the,given,temp,dir;suppress,forbidden,reason,we,use,get,input,stream,to,download,plugins,path,download,zip,terminal,terminal,string,url,string,path,tmp,dir,throws,ioexception,terminal,println,verbose,retrieving,zip,from,url,string,url,url,new,url,url,string,path,zip,files,create,temp,file,tmp,dir,null,zip,urlconnection,url,connection,url,open,connection,url,connection,add,request,property,user,agent,elasticsearch,plugin,installer,int,content,length,url,connection,get,content,length,try,input,stream,in,new,terminal,progress,input,stream,url,connection,get,input,stream,content,length,terminal,files,copy,in,zip,standard,copy,option,return,zip
InstallPluginCommand -> @SuppressForbidden(reason = "We use getInputStream to download plugins")     Path downloadZip(Terminal terminal, String urlString, Path tmpDir) throws IOException;1526981569;Downloads a zip from the url, into a temp file under the given temp dir.;@SuppressForbidden(reason = "We use getInputStream to download plugins")_    Path downloadZip(Terminal terminal, String urlString, Path tmpDir) throws IOException {_        terminal.println(VERBOSE, "Retrieving zip from " + urlString)__        URL url = new URL(urlString)__        Path zip = Files.createTempFile(tmpDir, null, ".zip")__        URLConnection urlConnection = url.openConnection()__        urlConnection.addRequestProperty("User-Agent", "elasticsearch-plugin-installer")__        int contentLength = urlConnection.getContentLength()__        try (InputStream in = new TerminalProgressInputStream(urlConnection.getInputStream(), contentLength, terminal)) {_            _            Files.copy(in, zip, StandardCopyOption.REPLACE_EXISTING)__        }_        return zip__    };downloads,a,zip,from,the,url,into,a,temp,file,under,the,given,temp,dir;suppress,forbidden,reason,we,use,get,input,stream,to,download,plugins,path,download,zip,terminal,terminal,string,url,string,path,tmp,dir,throws,ioexception,terminal,println,verbose,retrieving,zip,from,url,string,url,url,new,url,url,string,path,zip,files,create,temp,file,tmp,dir,null,zip,urlconnection,url,connection,url,open,connection,url,connection,add,request,property,user,agent,elasticsearch,plugin,installer,int,content,length,url,connection,get,content,length,try,input,stream,in,new,terminal,progress,input,stream,url,connection,get,input,stream,content,length,terminal,files,copy,in,zip,standard,copy,option,return,zip
InstallPluginCommand -> @SuppressForbidden(reason = "We use getInputStream to download plugins")     Path downloadZip(Terminal terminal, String urlString, Path tmpDir) throws IOException;1527583663;Downloads a zip from the url, into a temp file under the given temp dir.;@SuppressForbidden(reason = "We use getInputStream to download plugins")_    Path downloadZip(Terminal terminal, String urlString, Path tmpDir) throws IOException {_        terminal.println(VERBOSE, "Retrieving zip from " + urlString)__        URL url = new URL(urlString)__        Path zip = Files.createTempFile(tmpDir, null, ".zip")__        URLConnection urlConnection = url.openConnection()__        urlConnection.addRequestProperty("User-Agent", "elasticsearch-plugin-installer")__        int contentLength = urlConnection.getContentLength()__        try (InputStream in = new TerminalProgressInputStream(urlConnection.getInputStream(), contentLength, terminal)) {_            _            Files.copy(in, zip, StandardCopyOption.REPLACE_EXISTING)__        }_        return zip__    };downloads,a,zip,from,the,url,into,a,temp,file,under,the,given,temp,dir;suppress,forbidden,reason,we,use,get,input,stream,to,download,plugins,path,download,zip,terminal,terminal,string,url,string,path,tmp,dir,throws,ioexception,terminal,println,verbose,retrieving,zip,from,url,string,url,url,new,url,url,string,path,zip,files,create,temp,file,tmp,dir,null,zip,urlconnection,url,connection,url,open,connection,url,connection,add,request,property,user,agent,elasticsearch,plugin,installer,int,content,length,url,connection,get,content,length,try,input,stream,in,new,terminal,progress,input,stream,url,connection,get,input,stream,content,length,terminal,files,copy,in,zip,standard,copy,option,return,zip
InstallPluginCommand -> @SuppressForbidden(reason = "We use getInputStream to download plugins")     Path downloadZip(Terminal terminal, String urlString, Path tmpDir) throws IOException;1528893677;Downloads a zip from the url, into a temp file under the given temp dir.;@SuppressForbidden(reason = "We use getInputStream to download plugins")_    Path downloadZip(Terminal terminal, String urlString, Path tmpDir) throws IOException {_        terminal.println(VERBOSE, "Retrieving zip from " + urlString)__        URL url = new URL(urlString)__        Path zip = Files.createTempFile(tmpDir, null, ".zip")__        URLConnection urlConnection = url.openConnection()__        urlConnection.addRequestProperty("User-Agent", "elasticsearch-plugin-installer")__        int contentLength = urlConnection.getContentLength()__        try (InputStream in = new TerminalProgressInputStream(urlConnection.getInputStream(), contentLength, terminal)) {_            _            Files.copy(in, zip, StandardCopyOption.REPLACE_EXISTING)__        }_        return zip__    };downloads,a,zip,from,the,url,into,a,temp,file,under,the,given,temp,dir;suppress,forbidden,reason,we,use,get,input,stream,to,download,plugins,path,download,zip,terminal,terminal,string,url,string,path,tmp,dir,throws,ioexception,terminal,println,verbose,retrieving,zip,from,url,string,url,url,new,url,url,string,path,zip,files,create,temp,file,tmp,dir,null,zip,urlconnection,url,connection,url,open,connection,url,connection,add,request,property,user,agent,elasticsearch,plugin,installer,int,content,length,url,connection,get,content,length,try,input,stream,in,new,terminal,progress,input,stream,url,connection,get,input,stream,content,length,terminal,files,copy,in,zip,standard,copy,option,return,zip
InstallPluginCommand -> @SuppressForbidden(reason = "We use getInputStream to download plugins")     Path downloadZip(Terminal terminal, String urlString, Path tmpDir) throws IOException;1536314350;Downloads a zip from the url, into a temp file under the given temp dir.;@SuppressForbidden(reason = "We use getInputStream to download plugins")_    Path downloadZip(Terminal terminal, String urlString, Path tmpDir) throws IOException {_        terminal.println(VERBOSE, "Retrieving zip from " + urlString)__        URL url = new URL(urlString)__        Path zip = Files.createTempFile(tmpDir, null, ".zip")__        URLConnection urlConnection = url.openConnection()__        urlConnection.addRequestProperty("User-Agent", "elasticsearch-plugin-installer")__        int contentLength = urlConnection.getContentLength()__        try (InputStream in = new TerminalProgressInputStream(urlConnection.getInputStream(), contentLength, terminal)) {_            _            Files.copy(in, zip, StandardCopyOption.REPLACE_EXISTING)__        }_        return zip__    };downloads,a,zip,from,the,url,into,a,temp,file,under,the,given,temp,dir;suppress,forbidden,reason,we,use,get,input,stream,to,download,plugins,path,download,zip,terminal,terminal,string,url,string,path,tmp,dir,throws,ioexception,terminal,println,verbose,retrieving,zip,from,url,string,url,url,new,url,url,string,path,zip,files,create,temp,file,tmp,dir,null,zip,urlconnection,url,connection,url,open,connection,url,connection,add,request,property,user,agent,elasticsearch,plugin,installer,int,content,length,url,connection,get,content,length,try,input,stream,in,new,terminal,progress,input,stream,url,connection,get,input,stream,content,length,terminal,files,copy,in,zip,standard,copy,option,return,zip
InstallPluginCommand -> @SuppressForbidden(reason = "We use getInputStream to download plugins")     Path downloadZip(Terminal terminal, String urlString, Path tmpDir) throws IOException;1541592065;Downloads a zip from the url, into a temp file under the given temp dir.;@SuppressForbidden(reason = "We use getInputStream to download plugins")_    Path downloadZip(Terminal terminal, String urlString, Path tmpDir) throws IOException {_        terminal.println(VERBOSE, "Retrieving zip from " + urlString)__        URL url = new URL(urlString)__        Path zip = Files.createTempFile(tmpDir, null, ".zip")__        URLConnection urlConnection = url.openConnection()__        urlConnection.addRequestProperty("User-Agent", "elasticsearch-plugin-installer")__        int contentLength = urlConnection.getContentLength()__        try (InputStream in = new TerminalProgressInputStream(urlConnection.getInputStream(), contentLength, terminal)) {_            _            Files.copy(in, zip, StandardCopyOption.REPLACE_EXISTING)__        }_        return zip__    };downloads,a,zip,from,the,url,into,a,temp,file,under,the,given,temp,dir;suppress,forbidden,reason,we,use,get,input,stream,to,download,plugins,path,download,zip,terminal,terminal,string,url,string,path,tmp,dir,throws,ioexception,terminal,println,verbose,retrieving,zip,from,url,string,url,url,new,url,url,string,path,zip,files,create,temp,file,tmp,dir,null,zip,urlconnection,url,connection,url,open,connection,url,connection,add,request,property,user,agent,elasticsearch,plugin,installer,int,content,length,url,connection,get,content,length,try,input,stream,in,new,terminal,progress,input,stream,url,connection,get,input,stream,content,length,terminal,files,copy,in,zip,standard,copy,option,return,zip
InstallPluginCommand -> private void installBin(PluginInfo info, Path tmpBinDir, Path destBinDir) throws Exception;1524684173;Copies the files from {@code tmpBinDir} into {@code destBinDir}, along with permissions from dest dirs parent.;private void installBin(PluginInfo info, Path tmpBinDir, Path destBinDir) throws Exception {_        if (Files.isDirectory(tmpBinDir) == false) {_            throw new UserException(PLUGIN_MALFORMED, "bin in plugin " + info.getName() + " is not a directory")__        }_        Files.createDirectories(destBinDir)__        setFileAttributes(destBinDir, BIN_DIR_PERMS)___        try (DirectoryStream<Path> stream = Files.newDirectoryStream(tmpBinDir)) {_            for (Path srcFile : stream) {_                if (Files.isDirectory(srcFile)) {_                    throw new UserException(PLUGIN_MALFORMED, "Directories not allowed in bin dir " +_                        "for plugin " + info.getName() + ", found " + srcFile.getFileName())__                }__                Path destFile = destBinDir.resolve(tmpBinDir.relativize(srcFile))__                Files.copy(srcFile, destFile)__                setFileAttributes(destFile, BIN_FILES_PERMS)__            }_        }_        IOUtils.rm(tmpBinDir)_ _    };copies,the,files,from,code,tmp,bin,dir,into,code,dest,bin,dir,along,with,permissions,from,dest,dirs,parent;private,void,install,bin,plugin,info,info,path,tmp,bin,dir,path,dest,bin,dir,throws,exception,if,files,is,directory,tmp,bin,dir,false,throw,new,user,exception,bin,in,plugin,info,get,name,is,not,a,directory,files,create,directories,dest,bin,dir,set,file,attributes,dest,bin,dir,try,directory,stream,path,stream,files,new,directory,stream,tmp,bin,dir,for,path,src,file,stream,if,files,is,directory,src,file,throw,new,user,exception,directories,not,allowed,in,bin,dir,for,plugin,info,get,name,found,src,file,get,file,name,path,dest,file,dest,bin,dir,resolve,tmp,bin,dir,relativize,src,file,files,copy,src,file,dest,file,set,file,attributes,dest,file,ioutils,rm,tmp,bin,dir
InstallPluginCommand -> private void installBin(PluginInfo info, Path tmpBinDir, Path destBinDir) throws Exception;1526900724;Copies the files from {@code tmpBinDir} into {@code destBinDir}, along with permissions from dest dirs parent.;private void installBin(PluginInfo info, Path tmpBinDir, Path destBinDir) throws Exception {_        if (Files.isDirectory(tmpBinDir) == false) {_            throw new UserException(PLUGIN_MALFORMED, "bin in plugin " + info.getName() + " is not a directory")__        }_        Files.createDirectories(destBinDir)__        setFileAttributes(destBinDir, BIN_DIR_PERMS)___        try (DirectoryStream<Path> stream = Files.newDirectoryStream(tmpBinDir)) {_            for (Path srcFile : stream) {_                if (Files.isDirectory(srcFile)) {_                    throw new UserException(PLUGIN_MALFORMED, "Directories not allowed in bin dir " +_                        "for plugin " + info.getName() + ", found " + srcFile.getFileName())__                }__                Path destFile = destBinDir.resolve(tmpBinDir.relativize(srcFile))__                Files.copy(srcFile, destFile)__                setFileAttributes(destFile, BIN_FILES_PERMS)__            }_        }_        IOUtils.rm(tmpBinDir)_ _    };copies,the,files,from,code,tmp,bin,dir,into,code,dest,bin,dir,along,with,permissions,from,dest,dirs,parent;private,void,install,bin,plugin,info,info,path,tmp,bin,dir,path,dest,bin,dir,throws,exception,if,files,is,directory,tmp,bin,dir,false,throw,new,user,exception,bin,in,plugin,info,get,name,is,not,a,directory,files,create,directories,dest,bin,dir,set,file,attributes,dest,bin,dir,try,directory,stream,path,stream,files,new,directory,stream,tmp,bin,dir,for,path,src,file,stream,if,files,is,directory,src,file,throw,new,user,exception,directories,not,allowed,in,bin,dir,for,plugin,info,get,name,found,src,file,get,file,name,path,dest,file,dest,bin,dir,resolve,tmp,bin,dir,relativize,src,file,files,copy,src,file,dest,file,set,file,attributes,dest,file,ioutils,rm,tmp,bin,dir
InstallPluginCommand -> private void installBin(PluginInfo info, Path tmpBinDir, Path destBinDir) throws Exception;1526981569;Copies the files from {@code tmpBinDir} into {@code destBinDir}, along with permissions from dest dirs parent.;private void installBin(PluginInfo info, Path tmpBinDir, Path destBinDir) throws Exception {_        if (Files.isDirectory(tmpBinDir) == false) {_            throw new UserException(PLUGIN_MALFORMED, "bin in plugin " + info.getName() + " is not a directory")__        }_        Files.createDirectories(destBinDir)__        setFileAttributes(destBinDir, BIN_DIR_PERMS)___        try (DirectoryStream<Path> stream = Files.newDirectoryStream(tmpBinDir)) {_            for (Path srcFile : stream) {_                if (Files.isDirectory(srcFile)) {_                    throw new UserException(PLUGIN_MALFORMED, "Directories not allowed in bin dir " +_                        "for plugin " + info.getName() + ", found " + srcFile.getFileName())__                }__                Path destFile = destBinDir.resolve(tmpBinDir.relativize(srcFile))__                Files.copy(srcFile, destFile)__                setFileAttributes(destFile, BIN_FILES_PERMS)__            }_        }_        IOUtils.rm(tmpBinDir)_ _    };copies,the,files,from,code,tmp,bin,dir,into,code,dest,bin,dir,along,with,permissions,from,dest,dirs,parent;private,void,install,bin,plugin,info,info,path,tmp,bin,dir,path,dest,bin,dir,throws,exception,if,files,is,directory,tmp,bin,dir,false,throw,new,user,exception,bin,in,plugin,info,get,name,is,not,a,directory,files,create,directories,dest,bin,dir,set,file,attributes,dest,bin,dir,try,directory,stream,path,stream,files,new,directory,stream,tmp,bin,dir,for,path,src,file,stream,if,files,is,directory,src,file,throw,new,user,exception,directories,not,allowed,in,bin,dir,for,plugin,info,get,name,found,src,file,get,file,name,path,dest,file,dest,bin,dir,resolve,tmp,bin,dir,relativize,src,file,files,copy,src,file,dest,file,set,file,attributes,dest,file,ioutils,rm,tmp,bin,dir
InstallPluginCommand -> private void installBin(PluginInfo info, Path tmpBinDir, Path destBinDir) throws Exception;1527583663;Copies the files from {@code tmpBinDir} into {@code destBinDir}, along with permissions from dest dirs parent.;private void installBin(PluginInfo info, Path tmpBinDir, Path destBinDir) throws Exception {_        if (Files.isDirectory(tmpBinDir) == false) {_            throw new UserException(PLUGIN_MALFORMED, "bin in plugin " + info.getName() + " is not a directory")__        }_        Files.createDirectories(destBinDir)__        setFileAttributes(destBinDir, BIN_DIR_PERMS)___        try (DirectoryStream<Path> stream = Files.newDirectoryStream(tmpBinDir)) {_            for (Path srcFile : stream) {_                if (Files.isDirectory(srcFile)) {_                    throw new UserException(PLUGIN_MALFORMED, "Directories not allowed in bin dir " +_                        "for plugin " + info.getName() + ", found " + srcFile.getFileName())__                }__                Path destFile = destBinDir.resolve(tmpBinDir.relativize(srcFile))__                Files.copy(srcFile, destFile)__                setFileAttributes(destFile, BIN_FILES_PERMS)__            }_        }_        IOUtils.rm(tmpBinDir)_ _    };copies,the,files,from,code,tmp,bin,dir,into,code,dest,bin,dir,along,with,permissions,from,dest,dirs,parent;private,void,install,bin,plugin,info,info,path,tmp,bin,dir,path,dest,bin,dir,throws,exception,if,files,is,directory,tmp,bin,dir,false,throw,new,user,exception,bin,in,plugin,info,get,name,is,not,a,directory,files,create,directories,dest,bin,dir,set,file,attributes,dest,bin,dir,try,directory,stream,path,stream,files,new,directory,stream,tmp,bin,dir,for,path,src,file,stream,if,files,is,directory,src,file,throw,new,user,exception,directories,not,allowed,in,bin,dir,for,plugin,info,get,name,found,src,file,get,file,name,path,dest,file,dest,bin,dir,resolve,tmp,bin,dir,relativize,src,file,files,copy,src,file,dest,file,set,file,attributes,dest,file,ioutils,rm,tmp,bin,dir
InstallPluginCommand -> private void installBin(PluginInfo info, Path tmpBinDir, Path destBinDir) throws Exception;1528893677;Copies the files from {@code tmpBinDir} into {@code destBinDir}, along with permissions from dest dirs parent.;private void installBin(PluginInfo info, Path tmpBinDir, Path destBinDir) throws Exception {_        if (Files.isDirectory(tmpBinDir) == false) {_            throw new UserException(PLUGIN_MALFORMED, "bin in plugin " + info.getName() + " is not a directory")__        }_        Files.createDirectories(destBinDir)__        setFileAttributes(destBinDir, BIN_DIR_PERMS)___        try (DirectoryStream<Path> stream = Files.newDirectoryStream(tmpBinDir)) {_            for (Path srcFile : stream) {_                if (Files.isDirectory(srcFile)) {_                    throw new UserException(PLUGIN_MALFORMED, "Directories not allowed in bin dir " +_                        "for plugin " + info.getName() + ", found " + srcFile.getFileName())__                }__                Path destFile = destBinDir.resolve(tmpBinDir.relativize(srcFile))__                Files.copy(srcFile, destFile)__                setFileAttributes(destFile, BIN_FILES_PERMS)__            }_        }_        IOUtils.rm(tmpBinDir)_ _    };copies,the,files,from,code,tmp,bin,dir,into,code,dest,bin,dir,along,with,permissions,from,dest,dirs,parent;private,void,install,bin,plugin,info,info,path,tmp,bin,dir,path,dest,bin,dir,throws,exception,if,files,is,directory,tmp,bin,dir,false,throw,new,user,exception,bin,in,plugin,info,get,name,is,not,a,directory,files,create,directories,dest,bin,dir,set,file,attributes,dest,bin,dir,try,directory,stream,path,stream,files,new,directory,stream,tmp,bin,dir,for,path,src,file,stream,if,files,is,directory,src,file,throw,new,user,exception,directories,not,allowed,in,bin,dir,for,plugin,info,get,name,found,src,file,get,file,name,path,dest,file,dest,bin,dir,resolve,tmp,bin,dir,relativize,src,file,files,copy,src,file,dest,file,set,file,attributes,dest,file,ioutils,rm,tmp,bin,dir
InstallPluginCommand -> private void installBin(PluginInfo info, Path tmpBinDir, Path destBinDir) throws Exception;1536314350;Copies the files from {@code tmpBinDir} into {@code destBinDir}, along with permissions from dest dirs parent.;private void installBin(PluginInfo info, Path tmpBinDir, Path destBinDir) throws Exception {_        if (Files.isDirectory(tmpBinDir) == false) {_            throw new UserException(PLUGIN_MALFORMED, "bin in plugin " + info.getName() + " is not a directory")__        }_        Files.createDirectories(destBinDir)__        setFileAttributes(destBinDir, BIN_DIR_PERMS)___        try (DirectoryStream<Path> stream = Files.newDirectoryStream(tmpBinDir)) {_            for (Path srcFile : stream) {_                if (Files.isDirectory(srcFile)) {_                    throw new UserException(PLUGIN_MALFORMED, "Directories not allowed in bin dir " +_                        "for plugin " + info.getName() + ", found " + srcFile.getFileName())__                }__                Path destFile = destBinDir.resolve(tmpBinDir.relativize(srcFile))__                Files.copy(srcFile, destFile)__                setFileAttributes(destFile, BIN_FILES_PERMS)__            }_        }_        IOUtils.rm(tmpBinDir)_ _    };copies,the,files,from,code,tmp,bin,dir,into,code,dest,bin,dir,along,with,permissions,from,dest,dirs,parent;private,void,install,bin,plugin,info,info,path,tmp,bin,dir,path,dest,bin,dir,throws,exception,if,files,is,directory,tmp,bin,dir,false,throw,new,user,exception,bin,in,plugin,info,get,name,is,not,a,directory,files,create,directories,dest,bin,dir,set,file,attributes,dest,bin,dir,try,directory,stream,path,stream,files,new,directory,stream,tmp,bin,dir,for,path,src,file,stream,if,files,is,directory,src,file,throw,new,user,exception,directories,not,allowed,in,bin,dir,for,plugin,info,get,name,found,src,file,get,file,name,path,dest,file,dest,bin,dir,resolve,tmp,bin,dir,relativize,src,file,files,copy,src,file,dest,file,set,file,attributes,dest,file,ioutils,rm,tmp,bin,dir
InstallPluginCommand -> private void installBin(PluginInfo info, Path tmpBinDir, Path destBinDir) throws Exception;1541592065;Copies the files from {@code tmpBinDir} into {@code destBinDir}, along with permissions from dest dirs parent.;private void installBin(PluginInfo info, Path tmpBinDir, Path destBinDir) throws Exception {_        if (Files.isDirectory(tmpBinDir) == false) {_            throw new UserException(PLUGIN_MALFORMED, "bin in plugin " + info.getName() + " is not a directory")__        }_        Files.createDirectories(destBinDir)__        setFileAttributes(destBinDir, BIN_DIR_PERMS)___        try (DirectoryStream<Path> stream = Files.newDirectoryStream(tmpBinDir)) {_            for (Path srcFile : stream) {_                if (Files.isDirectory(srcFile)) {_                    throw new UserException(PLUGIN_MALFORMED, "Directories not allowed in bin dir " +_                        "for plugin " + info.getName() + ", found " + srcFile.getFileName())__                }__                Path destFile = destBinDir.resolve(tmpBinDir.relativize(srcFile))__                Files.copy(srcFile, destFile)__                setFileAttributes(destFile, BIN_FILES_PERMS)__            }_        }_        IOUtils.rm(tmpBinDir)_ _    };copies,the,files,from,code,tmp,bin,dir,into,code,dest,bin,dir,along,with,permissions,from,dest,dirs,parent;private,void,install,bin,plugin,info,info,path,tmp,bin,dir,path,dest,bin,dir,throws,exception,if,files,is,directory,tmp,bin,dir,false,throw,new,user,exception,bin,in,plugin,info,get,name,is,not,a,directory,files,create,directories,dest,bin,dir,set,file,attributes,dest,bin,dir,try,directory,stream,path,stream,files,new,directory,stream,tmp,bin,dir,for,path,src,file,stream,if,files,is,directory,src,file,throw,new,user,exception,directories,not,allowed,in,bin,dir,for,plugin,info,get,name,found,src,file,get,file,name,path,dest,file,dest,bin,dir,resolve,tmp,bin,dir,relativize,src,file,files,copy,src,file,dest,file,set,file,attributes,dest,file,ioutils,rm,tmp,bin,dir
InstallPluginCommand -> private void installBin(PluginInfo info, Path tmpBinDir, Path destBinDir) throws Exception;1544610279;Copies the files from {@code tmpBinDir} into {@code destBinDir}, along with permissions from dest dirs parent.;private void installBin(PluginInfo info, Path tmpBinDir, Path destBinDir) throws Exception {_        if (Files.isDirectory(tmpBinDir) == false) {_            throw new UserException(PLUGIN_MALFORMED, "bin in plugin " + info.getName() + " is not a directory")__        }_        Files.createDirectories(destBinDir)__        setFileAttributes(destBinDir, BIN_DIR_PERMS)___        try (DirectoryStream<Path> stream = Files.newDirectoryStream(tmpBinDir)) {_            for (Path srcFile : stream) {_                if (Files.isDirectory(srcFile)) {_                    throw new UserException(PLUGIN_MALFORMED, "Directories not allowed in bin dir " +_                        "for plugin " + info.getName() + ", found " + srcFile.getFileName())__                }__                Path destFile = destBinDir.resolve(tmpBinDir.relativize(srcFile))__                Files.copy(srcFile, destFile)__                setFileAttributes(destFile, BIN_FILES_PERMS)__            }_        }_        IOUtils.rm(tmpBinDir)_ _    };copies,the,files,from,code,tmp,bin,dir,into,code,dest,bin,dir,along,with,permissions,from,dest,dirs,parent;private,void,install,bin,plugin,info,info,path,tmp,bin,dir,path,dest,bin,dir,throws,exception,if,files,is,directory,tmp,bin,dir,false,throw,new,user,exception,bin,in,plugin,info,get,name,is,not,a,directory,files,create,directories,dest,bin,dir,set,file,attributes,dest,bin,dir,try,directory,stream,path,stream,files,new,directory,stream,tmp,bin,dir,for,path,src,file,stream,if,files,is,directory,src,file,throw,new,user,exception,directories,not,allowed,in,bin,dir,for,plugin,info,get,name,found,src,file,get,file,name,path,dest,file,dest,bin,dir,resolve,tmp,bin,dir,relativize,src,file,files,copy,src,file,dest,file,set,file,attributes,dest,file,ioutils,rm,tmp,bin,dir
InstallPluginCommand -> private void installBin(PluginInfo info, Path tmpBinDir, Path destBinDir) throws Exception;1545481309;Copies the files from {@code tmpBinDir} into {@code destBinDir}, along with permissions from dest dirs parent.;private void installBin(PluginInfo info, Path tmpBinDir, Path destBinDir) throws Exception {_        if (Files.isDirectory(tmpBinDir) == false) {_            throw new UserException(PLUGIN_MALFORMED, "bin in plugin " + info.getName() + " is not a directory")__        }_        Files.createDirectories(destBinDir)__        setFileAttributes(destBinDir, BIN_DIR_PERMS)___        try (DirectoryStream<Path> stream = Files.newDirectoryStream(tmpBinDir)) {_            for (Path srcFile : stream) {_                if (Files.isDirectory(srcFile)) {_                    throw new UserException(PLUGIN_MALFORMED, "Directories not allowed in bin dir " +_                        "for plugin " + info.getName() + ", found " + srcFile.getFileName())__                }__                Path destFile = destBinDir.resolve(tmpBinDir.relativize(srcFile))__                Files.copy(srcFile, destFile)__                setFileAttributes(destFile, BIN_FILES_PERMS)__            }_        }_        IOUtils.rm(tmpBinDir)_ _    };copies,the,files,from,code,tmp,bin,dir,into,code,dest,bin,dir,along,with,permissions,from,dest,dirs,parent;private,void,install,bin,plugin,info,info,path,tmp,bin,dir,path,dest,bin,dir,throws,exception,if,files,is,directory,tmp,bin,dir,false,throw,new,user,exception,bin,in,plugin,info,get,name,is,not,a,directory,files,create,directories,dest,bin,dir,set,file,attributes,dest,bin,dir,try,directory,stream,path,stream,files,new,directory,stream,tmp,bin,dir,for,path,src,file,stream,if,files,is,directory,src,file,throw,new,user,exception,directories,not,allowed,in,bin,dir,for,plugin,info,get,name,found,src,file,get,file,name,path,dest,file,dest,bin,dir,resolve,tmp,bin,dir,relativize,src,file,files,copy,src,file,dest,file,set,file,attributes,dest,file,ioutils,rm,tmp,bin,dir
InstallPluginCommand -> private void installBin(PluginInfo info, Path tmpBinDir, Path destBinDir) throws Exception;1545528053;Copies the files from {@code tmpBinDir} into {@code destBinDir}, along with permissions from dest dirs parent.;private void installBin(PluginInfo info, Path tmpBinDir, Path destBinDir) throws Exception {_        if (Files.isDirectory(tmpBinDir) == false) {_            throw new UserException(PLUGIN_MALFORMED, "bin in plugin " + info.getName() + " is not a directory")__        }_        Files.createDirectories(destBinDir)__        setFileAttributes(destBinDir, BIN_DIR_PERMS)___        try (DirectoryStream<Path> stream = Files.newDirectoryStream(tmpBinDir)) {_            for (Path srcFile : stream) {_                if (Files.isDirectory(srcFile)) {_                    throw new UserException(PLUGIN_MALFORMED, "Directories not allowed in bin dir " +_                        "for plugin " + info.getName() + ", found " + srcFile.getFileName())__                }__                Path destFile = destBinDir.resolve(tmpBinDir.relativize(srcFile))__                Files.copy(srcFile, destFile)__                setFileAttributes(destFile, BIN_FILES_PERMS)__            }_        }_        IOUtils.rm(tmpBinDir)_ _    };copies,the,files,from,code,tmp,bin,dir,into,code,dest,bin,dir,along,with,permissions,from,dest,dirs,parent;private,void,install,bin,plugin,info,info,path,tmp,bin,dir,path,dest,bin,dir,throws,exception,if,files,is,directory,tmp,bin,dir,false,throw,new,user,exception,bin,in,plugin,info,get,name,is,not,a,directory,files,create,directories,dest,bin,dir,set,file,attributes,dest,bin,dir,try,directory,stream,path,stream,files,new,directory,stream,tmp,bin,dir,for,path,src,file,stream,if,files,is,directory,src,file,throw,new,user,exception,directories,not,allowed,in,bin,dir,for,plugin,info,get,name,found,src,file,get,file,name,path,dest,file,dest,bin,dir,resolve,tmp,bin,dir,relativize,src,file,files,copy,src,file,dest,file,set,file,attributes,dest,file,ioutils,rm,tmp,bin,dir
InstallPluginCommand -> private void installBin(PluginInfo info, Path tmpBinDir, Path destBinDir) throws Exception;1545599625;Copies the files from {@code tmpBinDir} into {@code destBinDir}, along with permissions from dest dirs parent.;private void installBin(PluginInfo info, Path tmpBinDir, Path destBinDir) throws Exception {_        if (Files.isDirectory(tmpBinDir) == false) {_            throw new UserException(PLUGIN_MALFORMED, "bin in plugin " + info.getName() + " is not a directory")__        }_        Files.createDirectories(destBinDir)__        setFileAttributes(destBinDir, BIN_DIR_PERMS)___        try (DirectoryStream<Path> stream = Files.newDirectoryStream(tmpBinDir)) {_            for (Path srcFile : stream) {_                if (Files.isDirectory(srcFile)) {_                    throw new UserException(PLUGIN_MALFORMED, "Directories not allowed in bin dir " +_                        "for plugin " + info.getName() + ", found " + srcFile.getFileName())__                }__                Path destFile = destBinDir.resolve(tmpBinDir.relativize(srcFile))__                Files.copy(srcFile, destFile)__                setFileAttributes(destFile, BIN_FILES_PERMS)__            }_        }_        IOUtils.rm(tmpBinDir)_ _    };copies,the,files,from,code,tmp,bin,dir,into,code,dest,bin,dir,along,with,permissions,from,dest,dirs,parent;private,void,install,bin,plugin,info,info,path,tmp,bin,dir,path,dest,bin,dir,throws,exception,if,files,is,directory,tmp,bin,dir,false,throw,new,user,exception,bin,in,plugin,info,get,name,is,not,a,directory,files,create,directories,dest,bin,dir,set,file,attributes,dest,bin,dir,try,directory,stream,path,stream,files,new,directory,stream,tmp,bin,dir,for,path,src,file,stream,if,files,is,directory,src,file,throw,new,user,exception,directories,not,allowed,in,bin,dir,for,plugin,info,get,name,found,src,file,get,file,name,path,dest,file,dest,bin,dir,resolve,tmp,bin,dir,relativize,src,file,files,copy,src,file,dest,file,set,file,attributes,dest,file,ioutils,rm,tmp,bin,dir
InstallPluginCommand -> private Path download(Terminal terminal, String pluginId, Path tmpDir, boolean isBatch) throws Exception;1544610279;Downloads the plugin and returns the file it was downloaded to.;private Path download(Terminal terminal, String pluginId, Path tmpDir, boolean isBatch) throws Exception {_        if (OFFICIAL_PLUGINS.contains(pluginId)) {_            final String url = getElasticUrl(terminal, getStagingHash(), Version.CURRENT, isSnapshot(), pluginId, Platforms.PLATFORM_NAME)__            terminal.println("-> Downloading " + pluginId + " from elastic")__            return downloadAndValidate(terminal, url, tmpDir, true, isBatch)__        }__        _        String[] coordinates = pluginId.split(":")__        if (coordinates.length == 3 && pluginId.contains("/") == false && pluginId.startsWith("file:") == false) {_            String mavenUrl = getMavenUrl(terminal, coordinates, Platforms.PLATFORM_NAME)__            terminal.println("-> Downloading " + pluginId + " from maven central")__            return downloadAndValidate(terminal, mavenUrl, tmpDir, false, isBatch)__        }__        _        if (pluginId.contains(":") == false) {_            _            List<String> plugins = checkMisspelledPlugin(pluginId)__            String msg = "Unknown plugin " + pluginId__            if (plugins.isEmpty() == false) {_                msg += ", did you mean " + (plugins.size() == 1 ? "[" + plugins.get(0) + "]": "any of " + plugins.toString()) + "?"__            }_            throw new UserException(ExitCodes.USAGE, msg)__        }_        terminal.println("-> Downloading " + URLDecoder.decode(pluginId, "UTF-8"))__        return downloadZip(terminal, pluginId, tmpDir, isBatch)__    };downloads,the,plugin,and,returns,the,file,it,was,downloaded,to;private,path,download,terminal,terminal,string,plugin,id,path,tmp,dir,boolean,is,batch,throws,exception,if,contains,plugin,id,final,string,url,get,elastic,url,terminal,get,staging,hash,version,current,is,snapshot,plugin,id,platforms,terminal,println,downloading,plugin,id,from,elastic,return,download,and,validate,terminal,url,tmp,dir,true,is,batch,string,coordinates,plugin,id,split,if,coordinates,length,3,plugin,id,contains,false,plugin,id,starts,with,file,false,string,maven,url,get,maven,url,terminal,coordinates,platforms,terminal,println,downloading,plugin,id,from,maven,central,return,download,and,validate,terminal,maven,url,tmp,dir,false,is,batch,if,plugin,id,contains,false,list,string,plugins,check,misspelled,plugin,plugin,id,string,msg,unknown,plugin,plugin,id,if,plugins,is,empty,false,msg,did,you,mean,plugins,size,1,plugins,get,0,any,of,plugins,to,string,throw,new,user,exception,exit,codes,usage,msg,terminal,println,downloading,urldecoder,decode,plugin,id,utf,8,return,download,zip,terminal,plugin,id,tmp,dir,is,batch
InstallPluginCommand -> private Path download(Terminal terminal, String pluginId, Path tmpDir, boolean isBatch) throws Exception;1545481309;Downloads the plugin and returns the file it was downloaded to.;private Path download(Terminal terminal, String pluginId, Path tmpDir, boolean isBatch) throws Exception {_        if (OFFICIAL_PLUGINS.contains(pluginId)) {_            final String url = getElasticUrl(terminal, getStagingHash(), Version.CURRENT, isSnapshot(), pluginId, Platforms.PLATFORM_NAME)__            terminal.println("-> Downloading " + pluginId + " from elastic")__            return downloadAndValidate(terminal, url, tmpDir, true, isBatch)__        }__        _        String[] coordinates = pluginId.split(":")__        if (coordinates.length == 3 && pluginId.contains("/") == false && pluginId.startsWith("file:") == false) {_            String mavenUrl = getMavenUrl(terminal, coordinates, Platforms.PLATFORM_NAME)__            terminal.println("-> Downloading " + pluginId + " from maven central")__            return downloadAndValidate(terminal, mavenUrl, tmpDir, false, isBatch)__        }__        _        if (pluginId.contains(":") == false) {_            _            List<String> plugins = checkMisspelledPlugin(pluginId)__            String msg = "Unknown plugin " + pluginId__            if (plugins.isEmpty() == false) {_                msg += ", did you mean " + (plugins.size() == 1 ? "[" + plugins.get(0) + "]": "any of " + plugins.toString()) + "?"__            }_            throw new UserException(ExitCodes.USAGE, msg)__        }_        terminal.println("-> Downloading " + URLDecoder.decode(pluginId, "UTF-8"))__        return downloadZip(terminal, pluginId, tmpDir, isBatch)__    };downloads,the,plugin,and,returns,the,file,it,was,downloaded,to;private,path,download,terminal,terminal,string,plugin,id,path,tmp,dir,boolean,is,batch,throws,exception,if,contains,plugin,id,final,string,url,get,elastic,url,terminal,get,staging,hash,version,current,is,snapshot,plugin,id,platforms,terminal,println,downloading,plugin,id,from,elastic,return,download,and,validate,terminal,url,tmp,dir,true,is,batch,string,coordinates,plugin,id,split,if,coordinates,length,3,plugin,id,contains,false,plugin,id,starts,with,file,false,string,maven,url,get,maven,url,terminal,coordinates,platforms,terminal,println,downloading,plugin,id,from,maven,central,return,download,and,validate,terminal,maven,url,tmp,dir,false,is,batch,if,plugin,id,contains,false,list,string,plugins,check,misspelled,plugin,plugin,id,string,msg,unknown,plugin,plugin,id,if,plugins,is,empty,false,msg,did,you,mean,plugins,size,1,plugins,get,0,any,of,plugins,to,string,throw,new,user,exception,exit,codes,usage,msg,terminal,println,downloading,urldecoder,decode,plugin,id,utf,8,return,download,zip,terminal,plugin,id,tmp,dir,is,batch
InstallPluginCommand -> private Path download(Terminal terminal, String pluginId, Path tmpDir, boolean isBatch) throws Exception;1545528053;Downloads the plugin and returns the file it was downloaded to.;private Path download(Terminal terminal, String pluginId, Path tmpDir, boolean isBatch) throws Exception {_        if (OFFICIAL_PLUGINS.contains(pluginId)) {_            final String url = getElasticUrl(terminal, getStagingHash(), Version.CURRENT, isSnapshot(), pluginId, Platforms.PLATFORM_NAME)__            terminal.println("-> Downloading " + pluginId + " from elastic")__            return downloadAndValidate(terminal, url, tmpDir, true, isBatch)__        }__        _        String[] coordinates = pluginId.split(":")__        if (coordinates.length == 3 && pluginId.contains("/") == false && pluginId.startsWith("file:") == false) {_            String mavenUrl = getMavenUrl(terminal, coordinates, Platforms.PLATFORM_NAME)__            terminal.println("-> Downloading " + pluginId + " from maven central")__            return downloadAndValidate(terminal, mavenUrl, tmpDir, false, isBatch)__        }__        _        if (pluginId.contains(":") == false) {_            _            List<String> plugins = checkMisspelledPlugin(pluginId)__            String msg = "Unknown plugin " + pluginId__            if (plugins.isEmpty() == false) {_                msg += ", did you mean " + (plugins.size() == 1 ? "[" + plugins.get(0) + "]": "any of " + plugins.toString()) + "?"__            }_            throw new UserException(ExitCodes.USAGE, msg)__        }_        terminal.println("-> Downloading " + URLDecoder.decode(pluginId, "UTF-8"))__        return downloadZip(terminal, pluginId, tmpDir, isBatch)__    };downloads,the,plugin,and,returns,the,file,it,was,downloaded,to;private,path,download,terminal,terminal,string,plugin,id,path,tmp,dir,boolean,is,batch,throws,exception,if,contains,plugin,id,final,string,url,get,elastic,url,terminal,get,staging,hash,version,current,is,snapshot,plugin,id,platforms,terminal,println,downloading,plugin,id,from,elastic,return,download,and,validate,terminal,url,tmp,dir,true,is,batch,string,coordinates,plugin,id,split,if,coordinates,length,3,plugin,id,contains,false,plugin,id,starts,with,file,false,string,maven,url,get,maven,url,terminal,coordinates,platforms,terminal,println,downloading,plugin,id,from,maven,central,return,download,and,validate,terminal,maven,url,tmp,dir,false,is,batch,if,plugin,id,contains,false,list,string,plugins,check,misspelled,plugin,plugin,id,string,msg,unknown,plugin,plugin,id,if,plugins,is,empty,false,msg,did,you,mean,plugins,size,1,plugins,get,0,any,of,plugins,to,string,throw,new,user,exception,exit,codes,usage,msg,terminal,println,downloading,urldecoder,decode,plugin,id,utf,8,return,download,zip,terminal,plugin,id,tmp,dir,is,batch
InstallPluginCommand -> private Path download(Terminal terminal, String pluginId, Path tmpDir, boolean isBatch) throws Exception;1545599625;Downloads the plugin and returns the file it was downloaded to.;private Path download(Terminal terminal, String pluginId, Path tmpDir, boolean isBatch) throws Exception {_        if (OFFICIAL_PLUGINS.contains(pluginId)) {_            final String url = getElasticUrl(terminal, getStagingHash(), Version.CURRENT, isSnapshot(), pluginId, Platforms.PLATFORM_NAME)__            terminal.println("-> Downloading " + pluginId + " from elastic")__            return downloadAndValidate(terminal, url, tmpDir, true, isBatch)__        }__        _        String[] coordinates = pluginId.split(":")__        if (coordinates.length == 3 && pluginId.contains("/") == false && pluginId.startsWith("file:") == false) {_            String mavenUrl = getMavenUrl(terminal, coordinates, Platforms.PLATFORM_NAME)__            terminal.println("-> Downloading " + pluginId + " from maven central")__            return downloadAndValidate(terminal, mavenUrl, tmpDir, false, isBatch)__        }__        _        if (pluginId.contains(":") == false) {_            _            List<String> plugins = checkMisspelledPlugin(pluginId)__            String msg = "Unknown plugin " + pluginId__            if (plugins.isEmpty() == false) {_                msg += ", did you mean " + (plugins.size() == 1 ? "[" + plugins.get(0) + "]": "any of " + plugins.toString()) + "?"__            }_            throw new UserException(ExitCodes.USAGE, msg)__        }_        terminal.println("-> Downloading " + URLDecoder.decode(pluginId, "UTF-8"))__        return downloadZip(terminal, pluginId, tmpDir, isBatch)__    };downloads,the,plugin,and,returns,the,file,it,was,downloaded,to;private,path,download,terminal,terminal,string,plugin,id,path,tmp,dir,boolean,is,batch,throws,exception,if,contains,plugin,id,final,string,url,get,elastic,url,terminal,get,staging,hash,version,current,is,snapshot,plugin,id,platforms,terminal,println,downloading,plugin,id,from,elastic,return,download,and,validate,terminal,url,tmp,dir,true,is,batch,string,coordinates,plugin,id,split,if,coordinates,length,3,plugin,id,contains,false,plugin,id,starts,with,file,false,string,maven,url,get,maven,url,terminal,coordinates,platforms,terminal,println,downloading,plugin,id,from,maven,central,return,download,and,validate,terminal,maven,url,tmp,dir,false,is,batch,if,plugin,id,contains,false,list,string,plugins,check,misspelled,plugin,plugin,id,string,msg,unknown,plugin,plugin,id,if,plugins,is,empty,false,msg,did,you,mean,plugins,size,1,plugins,get,0,any,of,plugins,to,string,throw,new,user,exception,exit,codes,usage,msg,terminal,println,downloading,urldecoder,decode,plugin,id,utf,8,return,download,zip,terminal,plugin,id,tmp,dir,is,batch
InstallPluginCommand -> String getPublicKeyId();1527583663;Return the public key ID of the signing key that is expected to have signed the official plugin.__@return the public key ID;String getPublicKeyId() {_        return "D27D666CD88E42B4"__    };return,the,public,key,id,of,the,signing,key,that,is,expected,to,have,signed,the,official,plugin,return,the,public,key,id;string,get,public,key,id,return,d27d666cd88e42b4
InstallPluginCommand -> String getPublicKeyId();1528893677;Return the public key ID of the signing key that is expected to have signed the official plugin.__@return the public key ID;String getPublicKeyId() {_        return "D27D666CD88E42B4"__    };return,the,public,key,id,of,the,signing,key,that,is,expected,to,have,signed,the,official,plugin,return,the,public,key,id;string,get,public,key,id,return,d27d666cd88e42b4
InstallPluginCommand -> String getPublicKeyId();1536314350;Return the public key ID of the signing key that is expected to have signed the official plugin.__@return the public key ID;String getPublicKeyId() {_        return "D27D666CD88E42B4"__    };return,the,public,key,id,of,the,signing,key,that,is,expected,to,have,signed,the,official,plugin,return,the,public,key,id;string,get,public,key,id,return,d27d666cd88e42b4
InstallPluginCommand -> String getPublicKeyId();1541592065;Return the public key ID of the signing key that is expected to have signed the official plugin.__@return the public key ID;String getPublicKeyId() {_        return "D27D666CD88E42B4"__    };return,the,public,key,id,of,the,signing,key,that,is,expected,to,have,signed,the,official,plugin,return,the,public,key,id;string,get,public,key,id,return,d27d666cd88e42b4
InstallPluginCommand -> String getPublicKeyId();1544610279;Return the public key ID of the signing key that is expected to have signed the official plugin.__@return the public key ID;String getPublicKeyId() {_        return "D27D666CD88E42B4"__    };return,the,public,key,id,of,the,signing,key,that,is,expected,to,have,signed,the,official,plugin,return,the,public,key,id;string,get,public,key,id,return,d27d666cd88e42b4
InstallPluginCommand -> String getPublicKeyId();1545481309;Return the public key ID of the signing key that is expected to have signed the official plugin.__@return the public key ID;String getPublicKeyId() {_        return "D27D666CD88E42B4"__    };return,the,public,key,id,of,the,signing,key,that,is,expected,to,have,signed,the,official,plugin,return,the,public,key,id;string,get,public,key,id,return,d27d666cd88e42b4
InstallPluginCommand -> String getPublicKeyId();1545528053;Return the public key ID of the signing key that is expected to have signed the official plugin.__@return the public key ID;String getPublicKeyId() {_        return "D27D666CD88E42B4"__    };return,the,public,key,id,of,the,signing,key,that,is,expected,to,have,signed,the,official,plugin,return,the,public,key,id;string,get,public,key,id,return,d27d666cd88e42b4
InstallPluginCommand -> String getPublicKeyId();1545599625;Return the public key ID of the signing key that is expected to have signed the official plugin.__@return the public key ID;String getPublicKeyId() {_        return "D27D666CD88E42B4"__    };return,the,public,key,id,of,the,signing,key,that,is,expected,to,have,signed,the,official,plugin,return,the,public,key,id;string,get,public,key,id,return,d27d666cd88e42b4
InstallPluginCommand -> @SuppressForbidden(reason = "We use openStream to download plugins")     private Path downloadZipAndChecksum(Terminal terminal, String urlString, Path tmpDir, boolean allowSha1) throws Exception;1524684173;Downloads a zip from the url, as well as a SHA512 (or SHA1) checksum, and checks the checksum.;@SuppressForbidden(reason = "We use openStream to download plugins")_    private Path downloadZipAndChecksum(Terminal terminal, String urlString, Path tmpDir, boolean allowSha1) throws Exception {_        Path zip = downloadZip(terminal, urlString, tmpDir)__        pathsToDeleteOnShutdown.add(zip)__        String checksumUrlString = urlString + ".sha512"__        URL checksumUrl = openUrl(checksumUrlString)__        String digestAlgo = "SHA-512"__        if (checksumUrl == null && allowSha1) {_            _            terminal.println("Warning: sha512 not found, falling back to sha1. This behavior is deprecated and will be removed in a " +_                             "future release. Please update the plugin to use a sha512 checksum.")__            checksumUrlString = urlString + ".sha1"__            checksumUrl = openUrl(checksumUrlString)__            digestAlgo = "SHA-1"__        }_        if (checksumUrl == null) {_            throw new UserException(ExitCodes.IO_ERROR, "Plugin checksum missing: " + checksumUrlString)__        }_        final String expectedChecksum__        try (InputStream in = checksumUrl.openStream()) {_            _            if (digestAlgo.equals("SHA-1")) {_                final BufferedReader checksumReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8))__                expectedChecksum = checksumReader.readLine()__                if (checksumReader.readLine() != null) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_            } else {_                final BufferedReader checksumReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8))__                final String checksumLine = checksumReader.readLine()__                final String[] fields = checksumLine.split(" {2}")__                if (fields.length != 2) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_                expectedChecksum = fields[0]__                final String[] segments = URI.create(urlString).getPath().split("/")__                final String expectedFile = segments[segments.length - 1]__                if (fields[1].equals(expectedFile) == false) {_                    final String message = String.format(_                            Locale.ROOT,_                            "checksum file at [%s] is not for this plugin, expected [%s] but was [%s]",_                            checksumUrl,_                            expectedFile,_                            fields[1])__                    throw new UserException(ExitCodes.IO_ERROR, message)__                }_                if (checksumReader.readLine() != null) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_            }_        }__        byte[] zipbytes = Files.readAllBytes(zip)__        String gotChecksum = MessageDigests.toHexString(MessageDigest.getInstance(digestAlgo).digest(zipbytes))__        if (expectedChecksum.equals(gotChecksum) == false) {_            throw new UserException(ExitCodes.IO_ERROR,_                digestAlgo + " mismatch, expected " + expectedChecksum + " but got " + gotChecksum)__        }__        return zip__    };downloads,a,zip,from,the,url,as,well,as,a,sha512,or,sha1,checksum,and,checks,the,checksum;suppress,forbidden,reason,we,use,open,stream,to,download,plugins,private,path,download,zip,and,checksum,terminal,terminal,string,url,string,path,tmp,dir,boolean,allow,sha1,throws,exception,path,zip,download,zip,terminal,url,string,tmp,dir,paths,to,delete,on,shutdown,add,zip,string,checksum,url,string,url,string,sha512,url,checksum,url,open,url,checksum,url,string,string,digest,algo,sha,512,if,checksum,url,null,allow,sha1,terminal,println,warning,sha512,not,found,falling,back,to,sha1,this,behavior,is,deprecated,and,will,be,removed,in,a,future,release,please,update,the,plugin,to,use,a,sha512,checksum,checksum,url,string,url,string,sha1,checksum,url,open,url,checksum,url,string,digest,algo,sha,1,if,checksum,url,null,throw,new,user,exception,exit,codes,plugin,checksum,missing,checksum,url,string,final,string,expected,checksum,try,input,stream,in,checksum,url,open,stream,if,digest,algo,equals,sha,1,final,buffered,reader,checksum,reader,new,buffered,reader,new,input,stream,reader,in,standard,charsets,expected,checksum,checksum,reader,read,line,if,checksum,reader,read,line,null,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,else,final,buffered,reader,checksum,reader,new,buffered,reader,new,input,stream,reader,in,standard,charsets,final,string,checksum,line,checksum,reader,read,line,final,string,fields,checksum,line,split,2,if,fields,length,2,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,expected,checksum,fields,0,final,string,segments,uri,create,url,string,get,path,split,final,string,expected,file,segments,segments,length,1,if,fields,1,equals,expected,file,false,final,string,message,string,format,locale,root,checksum,file,at,s,is,not,for,this,plugin,expected,s,but,was,s,checksum,url,expected,file,fields,1,throw,new,user,exception,exit,codes,message,if,checksum,reader,read,line,null,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,byte,zipbytes,files,read,all,bytes,zip,string,got,checksum,message,digests,to,hex,string,message,digest,get,instance,digest,algo,digest,zipbytes,if,expected,checksum,equals,got,checksum,false,throw,new,user,exception,exit,codes,digest,algo,mismatch,expected,expected,checksum,but,got,got,checksum,return,zip
InstallPluginCommand -> @SuppressForbidden(reason = "We use openStream to download plugins")     private Path downloadZipAndChecksum(Terminal terminal, String urlString, Path tmpDir, boolean allowSha1) throws Exception;1526900724;Downloads a zip from the url, as well as a SHA512 (or SHA1) checksum, and checks the checksum.;@SuppressForbidden(reason = "We use openStream to download plugins")_    private Path downloadZipAndChecksum(Terminal terminal, String urlString, Path tmpDir, boolean allowSha1) throws Exception {_        Path zip = downloadZip(terminal, urlString, tmpDir)__        pathsToDeleteOnShutdown.add(zip)__        String checksumUrlString = urlString + ".sha512"__        URL checksumUrl = openUrl(checksumUrlString)__        String digestAlgo = "SHA-512"__        if (checksumUrl == null && allowSha1) {_            _            terminal.println("Warning: sha512 not found, falling back to sha1. This behavior is deprecated and will be removed in a " +_                             "future release. Please update the plugin to use a sha512 checksum.")__            checksumUrlString = urlString + ".sha1"__            checksumUrl = openUrl(checksumUrlString)__            digestAlgo = "SHA-1"__        }_        if (checksumUrl == null) {_            throw new UserException(ExitCodes.IO_ERROR, "Plugin checksum missing: " + checksumUrlString)__        }_        final String expectedChecksum__        try (InputStream in = checksumUrl.openStream()) {_            _            if (digestAlgo.equals("SHA-1")) {_                final BufferedReader checksumReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8))__                expectedChecksum = checksumReader.readLine()__                if (checksumReader.readLine() != null) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_            } else {_                final BufferedReader checksumReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8))__                final String checksumLine = checksumReader.readLine()__                final String[] fields = checksumLine.split(" {2}")__                if (fields.length != 2) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_                expectedChecksum = fields[0]__                final String[] segments = URI.create(urlString).getPath().split("/")__                final String expectedFile = segments[segments.length - 1]__                if (fields[1].equals(expectedFile) == false) {_                    final String message = String.format(_                            Locale.ROOT,_                            "checksum file at [%s] is not for this plugin, expected [%s] but was [%s]",_                            checksumUrl,_                            expectedFile,_                            fields[1])__                    throw new UserException(ExitCodes.IO_ERROR, message)__                }_                if (checksumReader.readLine() != null) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_            }_        }__        byte[] zipbytes = Files.readAllBytes(zip)__        String gotChecksum = MessageDigests.toHexString(MessageDigest.getInstance(digestAlgo).digest(zipbytes))__        if (expectedChecksum.equals(gotChecksum) == false) {_            throw new UserException(ExitCodes.IO_ERROR,_                digestAlgo + " mismatch, expected " + expectedChecksum + " but got " + gotChecksum)__        }__        return zip__    };downloads,a,zip,from,the,url,as,well,as,a,sha512,or,sha1,checksum,and,checks,the,checksum;suppress,forbidden,reason,we,use,open,stream,to,download,plugins,private,path,download,zip,and,checksum,terminal,terminal,string,url,string,path,tmp,dir,boolean,allow,sha1,throws,exception,path,zip,download,zip,terminal,url,string,tmp,dir,paths,to,delete,on,shutdown,add,zip,string,checksum,url,string,url,string,sha512,url,checksum,url,open,url,checksum,url,string,string,digest,algo,sha,512,if,checksum,url,null,allow,sha1,terminal,println,warning,sha512,not,found,falling,back,to,sha1,this,behavior,is,deprecated,and,will,be,removed,in,a,future,release,please,update,the,plugin,to,use,a,sha512,checksum,checksum,url,string,url,string,sha1,checksum,url,open,url,checksum,url,string,digest,algo,sha,1,if,checksum,url,null,throw,new,user,exception,exit,codes,plugin,checksum,missing,checksum,url,string,final,string,expected,checksum,try,input,stream,in,checksum,url,open,stream,if,digest,algo,equals,sha,1,final,buffered,reader,checksum,reader,new,buffered,reader,new,input,stream,reader,in,standard,charsets,expected,checksum,checksum,reader,read,line,if,checksum,reader,read,line,null,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,else,final,buffered,reader,checksum,reader,new,buffered,reader,new,input,stream,reader,in,standard,charsets,final,string,checksum,line,checksum,reader,read,line,final,string,fields,checksum,line,split,2,if,fields,length,2,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,expected,checksum,fields,0,final,string,segments,uri,create,url,string,get,path,split,final,string,expected,file,segments,segments,length,1,if,fields,1,equals,expected,file,false,final,string,message,string,format,locale,root,checksum,file,at,s,is,not,for,this,plugin,expected,s,but,was,s,checksum,url,expected,file,fields,1,throw,new,user,exception,exit,codes,message,if,checksum,reader,read,line,null,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,byte,zipbytes,files,read,all,bytes,zip,string,got,checksum,message,digests,to,hex,string,message,digest,get,instance,digest,algo,digest,zipbytes,if,expected,checksum,equals,got,checksum,false,throw,new,user,exception,exit,codes,digest,algo,mismatch,expected,expected,checksum,but,got,got,checksum,return,zip
InstallPluginCommand -> @SuppressForbidden(reason = "We use openStream to download plugins")     private Path downloadZipAndChecksum(Terminal terminal, String urlString, Path tmpDir, boolean allowSha1) throws Exception;1526981569;Downloads a zip from the url, as well as a SHA512 (or SHA1) checksum, and checks the checksum.;@SuppressForbidden(reason = "We use openStream to download plugins")_    private Path downloadZipAndChecksum(Terminal terminal, String urlString, Path tmpDir, boolean allowSha1) throws Exception {_        Path zip = downloadZip(terminal, urlString, tmpDir)__        pathsToDeleteOnShutdown.add(zip)__        String checksumUrlString = urlString + ".sha512"__        URL checksumUrl = openUrl(checksumUrlString)__        String digestAlgo = "SHA-512"__        if (checksumUrl == null && allowSha1) {_            _            terminal.println("Warning: sha512 not found, falling back to sha1. This behavior is deprecated and will be removed in a " +_                             "future release. Please update the plugin to use a sha512 checksum.")__            checksumUrlString = urlString + ".sha1"__            checksumUrl = openUrl(checksumUrlString)__            digestAlgo = "SHA-1"__        }_        if (checksumUrl == null) {_            throw new UserException(ExitCodes.IO_ERROR, "Plugin checksum missing: " + checksumUrlString)__        }_        final String expectedChecksum__        try (InputStream in = checksumUrl.openStream()) {_            _            if (digestAlgo.equals("SHA-1")) {_                final BufferedReader checksumReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8))__                expectedChecksum = checksumReader.readLine()__                if (checksumReader.readLine() != null) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_            } else {_                final BufferedReader checksumReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8))__                final String checksumLine = checksumReader.readLine()__                final String[] fields = checksumLine.split(" {2}")__                if (fields.length != 2) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_                expectedChecksum = fields[0]__                final String[] segments = URI.create(urlString).getPath().split("/")__                final String expectedFile = segments[segments.length - 1]__                if (fields[1].equals(expectedFile) == false) {_                    final String message = String.format(_                            Locale.ROOT,_                            "checksum file at [%s] is not for this plugin, expected [%s] but was [%s]",_                            checksumUrl,_                            expectedFile,_                            fields[1])__                    throw new UserException(ExitCodes.IO_ERROR, message)__                }_                if (checksumReader.readLine() != null) {_                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl)__                }_            }_        }__        byte[] zipbytes = Files.readAllBytes(zip)__        String gotChecksum = MessageDigests.toHexString(MessageDigest.getInstance(digestAlgo).digest(zipbytes))__        if (expectedChecksum.equals(gotChecksum) == false) {_            throw new UserException(ExitCodes.IO_ERROR,_                digestAlgo + " mismatch, expected " + expectedChecksum + " but got " + gotChecksum)__        }__        return zip__    };downloads,a,zip,from,the,url,as,well,as,a,sha512,or,sha1,checksum,and,checks,the,checksum;suppress,forbidden,reason,we,use,open,stream,to,download,plugins,private,path,download,zip,and,checksum,terminal,terminal,string,url,string,path,tmp,dir,boolean,allow,sha1,throws,exception,path,zip,download,zip,terminal,url,string,tmp,dir,paths,to,delete,on,shutdown,add,zip,string,checksum,url,string,url,string,sha512,url,checksum,url,open,url,checksum,url,string,string,digest,algo,sha,512,if,checksum,url,null,allow,sha1,terminal,println,warning,sha512,not,found,falling,back,to,sha1,this,behavior,is,deprecated,and,will,be,removed,in,a,future,release,please,update,the,plugin,to,use,a,sha512,checksum,checksum,url,string,url,string,sha1,checksum,url,open,url,checksum,url,string,digest,algo,sha,1,if,checksum,url,null,throw,new,user,exception,exit,codes,plugin,checksum,missing,checksum,url,string,final,string,expected,checksum,try,input,stream,in,checksum,url,open,stream,if,digest,algo,equals,sha,1,final,buffered,reader,checksum,reader,new,buffered,reader,new,input,stream,reader,in,standard,charsets,expected,checksum,checksum,reader,read,line,if,checksum,reader,read,line,null,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,else,final,buffered,reader,checksum,reader,new,buffered,reader,new,input,stream,reader,in,standard,charsets,final,string,checksum,line,checksum,reader,read,line,final,string,fields,checksum,line,split,2,if,fields,length,2,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,expected,checksum,fields,0,final,string,segments,uri,create,url,string,get,path,split,final,string,expected,file,segments,segments,length,1,if,fields,1,equals,expected,file,false,final,string,message,string,format,locale,root,checksum,file,at,s,is,not,for,this,plugin,expected,s,but,was,s,checksum,url,expected,file,fields,1,throw,new,user,exception,exit,codes,message,if,checksum,reader,read,line,null,throw,new,user,exception,exit,codes,invalid,checksum,file,at,checksum,url,byte,zipbytes,files,read,all,bytes,zip,string,got,checksum,message,digests,to,hex,string,message,digest,get,instance,digest,algo,digest,zipbytes,if,expected,checksum,equals,got,checksum,false,throw,new,user,exception,exit,codes,digest,algo,mismatch,expected,expected,checksum,but,got,got,checksum,return,zip
InstallPluginCommand -> private List<String> checkMisspelledPlugin(String pluginId);1524684173;Returns all the official plugin names that look similar to pluginId. *;private List<String> checkMisspelledPlugin(String pluginId) {_        LevensteinDistance ld = new LevensteinDistance()__        List<Tuple<Float, String>> scoredKeys = new ArrayList<>()__        for (String officialPlugin : OFFICIAL_PLUGINS) {_            float distance = ld.getDistance(pluginId, officialPlugin)__            if (distance > 0.7f) {_                scoredKeys.add(new Tuple<>(distance, officialPlugin))__            }_        }_        CollectionUtil.timSort(scoredKeys, (a, b) -> b.v1().compareTo(a.v1()))__        return scoredKeys.stream().map((a) -> a.v2()).collect(Collectors.toList())__    };returns,all,the,official,plugin,names,that,look,similar,to,plugin,id;private,list,string,check,misspelled,plugin,string,plugin,id,levenstein,distance,ld,new,levenstein,distance,list,tuple,float,string,scored,keys,new,array,list,for,string,official,plugin,float,distance,ld,get,distance,plugin,id,official,plugin,if,distance,0,7f,scored,keys,add,new,tuple,distance,official,plugin,collection,util,tim,sort,scored,keys,a,b,b,v1,compare,to,a,v1,return,scored,keys,stream,map,a,a,v2,collect,collectors,to,list
InstallPluginCommand -> private List<String> checkMisspelledPlugin(String pluginId);1526900724;Returns all the official plugin names that look similar to pluginId. *;private List<String> checkMisspelledPlugin(String pluginId) {_        LevensteinDistance ld = new LevensteinDistance()__        List<Tuple<Float, String>> scoredKeys = new ArrayList<>()__        for (String officialPlugin : OFFICIAL_PLUGINS) {_            float distance = ld.getDistance(pluginId, officialPlugin)__            if (distance > 0.7f) {_                scoredKeys.add(new Tuple<>(distance, officialPlugin))__            }_        }_        CollectionUtil.timSort(scoredKeys, (a, b) -> b.v1().compareTo(a.v1()))__        return scoredKeys.stream().map((a) -> a.v2()).collect(Collectors.toList())__    };returns,all,the,official,plugin,names,that,look,similar,to,plugin,id;private,list,string,check,misspelled,plugin,string,plugin,id,levenstein,distance,ld,new,levenstein,distance,list,tuple,float,string,scored,keys,new,array,list,for,string,official,plugin,float,distance,ld,get,distance,plugin,id,official,plugin,if,distance,0,7f,scored,keys,add,new,tuple,distance,official,plugin,collection,util,tim,sort,scored,keys,a,b,b,v1,compare,to,a,v1,return,scored,keys,stream,map,a,a,v2,collect,collectors,to,list
InstallPluginCommand -> private List<String> checkMisspelledPlugin(String pluginId);1526981569;Returns all the official plugin names that look similar to pluginId. *;private List<String> checkMisspelledPlugin(String pluginId) {_        LevensteinDistance ld = new LevensteinDistance()__        List<Tuple<Float, String>> scoredKeys = new ArrayList<>()__        for (String officialPlugin : OFFICIAL_PLUGINS) {_            float distance = ld.getDistance(pluginId, officialPlugin)__            if (distance > 0.7f) {_                scoredKeys.add(new Tuple<>(distance, officialPlugin))__            }_        }_        CollectionUtil.timSort(scoredKeys, (a, b) -> b.v1().compareTo(a.v1()))__        return scoredKeys.stream().map((a) -> a.v2()).collect(Collectors.toList())__    };returns,all,the,official,plugin,names,that,look,similar,to,plugin,id;private,list,string,check,misspelled,plugin,string,plugin,id,levenstein,distance,ld,new,levenstein,distance,list,tuple,float,string,scored,keys,new,array,list,for,string,official,plugin,float,distance,ld,get,distance,plugin,id,official,plugin,if,distance,0,7f,scored,keys,add,new,tuple,distance,official,plugin,collection,util,tim,sort,scored,keys,a,b,b,v1,compare,to,a,v1,return,scored,keys,stream,map,a,a,v2,collect,collectors,to,list
InstallPluginCommand -> private List<String> checkMisspelledPlugin(String pluginId);1527583663;Returns all the official plugin names that look similar to pluginId. *;private List<String> checkMisspelledPlugin(String pluginId) {_        LevensteinDistance ld = new LevensteinDistance()__        List<Tuple<Float, String>> scoredKeys = new ArrayList<>()__        for (String officialPlugin : OFFICIAL_PLUGINS) {_            float distance = ld.getDistance(pluginId, officialPlugin)__            if (distance > 0.7f) {_                scoredKeys.add(new Tuple<>(distance, officialPlugin))__            }_        }_        CollectionUtil.timSort(scoredKeys, (a, b) -> b.v1().compareTo(a.v1()))__        return scoredKeys.stream().map((a) -> a.v2()).collect(Collectors.toList())__    };returns,all,the,official,plugin,names,that,look,similar,to,plugin,id;private,list,string,check,misspelled,plugin,string,plugin,id,levenstein,distance,ld,new,levenstein,distance,list,tuple,float,string,scored,keys,new,array,list,for,string,official,plugin,float,distance,ld,get,distance,plugin,id,official,plugin,if,distance,0,7f,scored,keys,add,new,tuple,distance,official,plugin,collection,util,tim,sort,scored,keys,a,b,b,v1,compare,to,a,v1,return,scored,keys,stream,map,a,a,v2,collect,collectors,to,list
InstallPluginCommand -> private List<String> checkMisspelledPlugin(String pluginId);1528893677;Returns all the official plugin names that look similar to pluginId. *;private List<String> checkMisspelledPlugin(String pluginId) {_        LevensteinDistance ld = new LevensteinDistance()__        List<Tuple<Float, String>> scoredKeys = new ArrayList<>()__        for (String officialPlugin : OFFICIAL_PLUGINS) {_            float distance = ld.getDistance(pluginId, officialPlugin)__            if (distance > 0.7f) {_                scoredKeys.add(new Tuple<>(distance, officialPlugin))__            }_        }_        CollectionUtil.timSort(scoredKeys, (a, b) -> b.v1().compareTo(a.v1()))__        return scoredKeys.stream().map((a) -> a.v2()).collect(Collectors.toList())__    };returns,all,the,official,plugin,names,that,look,similar,to,plugin,id;private,list,string,check,misspelled,plugin,string,plugin,id,levenstein,distance,ld,new,levenstein,distance,list,tuple,float,string,scored,keys,new,array,list,for,string,official,plugin,float,distance,ld,get,distance,plugin,id,official,plugin,if,distance,0,7f,scored,keys,add,new,tuple,distance,official,plugin,collection,util,tim,sort,scored,keys,a,b,b,v1,compare,to,a,v1,return,scored,keys,stream,map,a,a,v2,collect,collectors,to,list
InstallPluginCommand -> private List<String> checkMisspelledPlugin(String pluginId);1536314350;Returns all the official plugin names that look similar to pluginId. *;private List<String> checkMisspelledPlugin(String pluginId) {_        LevenshteinDistance ld = new LevenshteinDistance()__        List<Tuple<Float, String>> scoredKeys = new ArrayList<>()__        for (String officialPlugin : OFFICIAL_PLUGINS) {_            float distance = ld.getDistance(pluginId, officialPlugin)__            if (distance > 0.7f) {_                scoredKeys.add(new Tuple<>(distance, officialPlugin))__            }_        }_        CollectionUtil.timSort(scoredKeys, (a, b) -> b.v1().compareTo(a.v1()))__        return scoredKeys.stream().map((a) -> a.v2()).collect(Collectors.toList())__    };returns,all,the,official,plugin,names,that,look,similar,to,plugin,id;private,list,string,check,misspelled,plugin,string,plugin,id,levenshtein,distance,ld,new,levenshtein,distance,list,tuple,float,string,scored,keys,new,array,list,for,string,official,plugin,float,distance,ld,get,distance,plugin,id,official,plugin,if,distance,0,7f,scored,keys,add,new,tuple,distance,official,plugin,collection,util,tim,sort,scored,keys,a,b,b,v1,compare,to,a,v1,return,scored,keys,stream,map,a,a,v2,collect,collectors,to,list
InstallPluginCommand -> private List<String> checkMisspelledPlugin(String pluginId);1541592065;Returns all the official plugin names that look similar to pluginId. *;private List<String> checkMisspelledPlugin(String pluginId) {_        LevenshteinDistance ld = new LevenshteinDistance()__        List<Tuple<Float, String>> scoredKeys = new ArrayList<>()__        for (String officialPlugin : OFFICIAL_PLUGINS) {_            float distance = ld.getDistance(pluginId, officialPlugin)__            if (distance > 0.7f) {_                scoredKeys.add(new Tuple<>(distance, officialPlugin))__            }_        }_        CollectionUtil.timSort(scoredKeys, (a, b) -> b.v1().compareTo(a.v1()))__        return scoredKeys.stream().map((a) -> a.v2()).collect(Collectors.toList())__    };returns,all,the,official,plugin,names,that,look,similar,to,plugin,id;private,list,string,check,misspelled,plugin,string,plugin,id,levenshtein,distance,ld,new,levenshtein,distance,list,tuple,float,string,scored,keys,new,array,list,for,string,official,plugin,float,distance,ld,get,distance,plugin,id,official,plugin,if,distance,0,7f,scored,keys,add,new,tuple,distance,official,plugin,collection,util,tim,sort,scored,keys,a,b,b,v1,compare,to,a,v1,return,scored,keys,stream,map,a,a,v2,collect,collectors,to,list
InstallPluginCommand -> private List<String> checkMisspelledPlugin(String pluginId);1544610279;Returns all the official plugin names that look similar to pluginId. *;private List<String> checkMisspelledPlugin(String pluginId) {_        LevenshteinDistance ld = new LevenshteinDistance()__        List<Tuple<Float, String>> scoredKeys = new ArrayList<>()__        for (String officialPlugin : OFFICIAL_PLUGINS) {_            float distance = ld.getDistance(pluginId, officialPlugin)__            if (distance > 0.7f) {_                scoredKeys.add(new Tuple<>(distance, officialPlugin))__            }_        }_        CollectionUtil.timSort(scoredKeys, (a, b) -> b.v1().compareTo(a.v1()))__        return scoredKeys.stream().map((a) -> a.v2()).collect(Collectors.toList())__    };returns,all,the,official,plugin,names,that,look,similar,to,plugin,id;private,list,string,check,misspelled,plugin,string,plugin,id,levenshtein,distance,ld,new,levenshtein,distance,list,tuple,float,string,scored,keys,new,array,list,for,string,official,plugin,float,distance,ld,get,distance,plugin,id,official,plugin,if,distance,0,7f,scored,keys,add,new,tuple,distance,official,plugin,collection,util,tim,sort,scored,keys,a,b,b,v1,compare,to,a,v1,return,scored,keys,stream,map,a,a,v2,collect,collectors,to,list
InstallPluginCommand -> private List<String> checkMisspelledPlugin(String pluginId);1545481309;Returns all the official plugin names that look similar to pluginId. *;private List<String> checkMisspelledPlugin(String pluginId) {_        LevenshteinDistance ld = new LevenshteinDistance()__        List<Tuple<Float, String>> scoredKeys = new ArrayList<>()__        for (String officialPlugin : OFFICIAL_PLUGINS) {_            float distance = ld.getDistance(pluginId, officialPlugin)__            if (distance > 0.7f) {_                scoredKeys.add(new Tuple<>(distance, officialPlugin))__            }_        }_        CollectionUtil.timSort(scoredKeys, (a, b) -> b.v1().compareTo(a.v1()))__        return scoredKeys.stream().map((a) -> a.v2()).collect(Collectors.toList())__    };returns,all,the,official,plugin,names,that,look,similar,to,plugin,id;private,list,string,check,misspelled,plugin,string,plugin,id,levenshtein,distance,ld,new,levenshtein,distance,list,tuple,float,string,scored,keys,new,array,list,for,string,official,plugin,float,distance,ld,get,distance,plugin,id,official,plugin,if,distance,0,7f,scored,keys,add,new,tuple,distance,official,plugin,collection,util,tim,sort,scored,keys,a,b,b,v1,compare,to,a,v1,return,scored,keys,stream,map,a,a,v2,collect,collectors,to,list
InstallPluginCommand -> private List<String> checkMisspelledPlugin(String pluginId);1545528053;Returns all the official plugin names that look similar to pluginId. *;private List<String> checkMisspelledPlugin(String pluginId) {_        LevenshteinDistance ld = new LevenshteinDistance()__        List<Tuple<Float, String>> scoredKeys = new ArrayList<>()__        for (String officialPlugin : OFFICIAL_PLUGINS) {_            float distance = ld.getDistance(pluginId, officialPlugin)__            if (distance > 0.7f) {_                scoredKeys.add(new Tuple<>(distance, officialPlugin))__            }_        }_        CollectionUtil.timSort(scoredKeys, (a, b) -> b.v1().compareTo(a.v1()))__        return scoredKeys.stream().map((a) -> a.v2()).collect(Collectors.toList())__    };returns,all,the,official,plugin,names,that,look,similar,to,plugin,id;private,list,string,check,misspelled,plugin,string,plugin,id,levenshtein,distance,ld,new,levenshtein,distance,list,tuple,float,string,scored,keys,new,array,list,for,string,official,plugin,float,distance,ld,get,distance,plugin,id,official,plugin,if,distance,0,7f,scored,keys,add,new,tuple,distance,official,plugin,collection,util,tim,sort,scored,keys,a,b,b,v1,compare,to,a,v1,return,scored,keys,stream,map,a,a,v2,collect,collectors,to,list
InstallPluginCommand -> private List<String> checkMisspelledPlugin(String pluginId);1545599625;Returns all the official plugin names that look similar to pluginId. *;private List<String> checkMisspelledPlugin(String pluginId) {_        LevenshteinDistance ld = new LevenshteinDistance()__        List<Tuple<Float, String>> scoredKeys = new ArrayList<>()__        for (String officialPlugin : OFFICIAL_PLUGINS) {_            float distance = ld.getDistance(pluginId, officialPlugin)__            if (distance > 0.7f) {_                scoredKeys.add(new Tuple<>(distance, officialPlugin))__            }_        }_        CollectionUtil.timSort(scoredKeys, (a, b) -> b.v1().compareTo(a.v1()))__        return scoredKeys.stream().map((a) -> a.v2()).collect(Collectors.toList())__    };returns,all,the,official,plugin,names,that,look,similar,to,plugin,id;private,list,string,check,misspelled,plugin,string,plugin,id,levenshtein,distance,ld,new,levenshtein,distance,list,tuple,float,string,scored,keys,new,array,list,for,string,official,plugin,float,distance,ld,get,distance,plugin,id,official,plugin,if,distance,0,7f,scored,keys,add,new,tuple,distance,official,plugin,collection,util,tim,sort,scored,keys,a,b,b,v1,compare,to,a,v1,return,scored,keys,stream,map,a,a,v2,collect,collectors,to,list
InstallPluginCommand -> void jarHellCheck(PluginInfo candidateInfo, Path candidateDir, Path pluginsDir, Path modulesDir) throws Exception;1524684173;check a candidate plugin for jar hell before installing it;void jarHellCheck(PluginInfo candidateInfo, Path candidateDir, Path pluginsDir, Path modulesDir) throws Exception {_        _        final Set<URL> jars = new HashSet<>(JarHell.parseClassPath())____        _        Set<PluginsService.Bundle> bundles = new HashSet<>(PluginsService.getPluginBundles(pluginsDir))__        bundles.addAll(PluginsService.getModuleBundles(modulesDir))__        bundles.add(new PluginsService.Bundle(candidateInfo, candidateDir))__        List<PluginsService.Bundle> sortedBundles = PluginsService.sortBundles(bundles)___        _        _        Map<String, Set<URL>> transitiveUrls = new HashMap<>()__        for (PluginsService.Bundle bundle : sortedBundles) {_            PluginsService.checkBundleJarHell(bundle, transitiveUrls)__        }__        _        _    };check,a,candidate,plugin,for,jar,hell,before,installing,it;void,jar,hell,check,plugin,info,candidate,info,path,candidate,dir,path,plugins,dir,path,modules,dir,throws,exception,final,set,url,jars,new,hash,set,jar,hell,parse,class,path,set,plugins,service,bundle,bundles,new,hash,set,plugins,service,get,plugin,bundles,plugins,dir,bundles,add,all,plugins,service,get,module,bundles,modules,dir,bundles,add,new,plugins,service,bundle,candidate,info,candidate,dir,list,plugins,service,bundle,sorted,bundles,plugins,service,sort,bundles,bundles,map,string,set,url,transitive,urls,new,hash,map,for,plugins,service,bundle,bundle,sorted,bundles,plugins,service,check,bundle,jar,hell,bundle,transitive,urls
InstallPluginCommand -> void jarHellCheck(PluginInfo candidateInfo, Path candidateDir, Path pluginsDir, Path modulesDir) throws Exception;1526900724;check a candidate plugin for jar hell before installing it;void jarHellCheck(PluginInfo candidateInfo, Path candidateDir, Path pluginsDir, Path modulesDir) throws Exception {_        _        final Set<URL> jars = new HashSet<>(JarHell.parseClassPath())____        _        Set<PluginsService.Bundle> bundles = new HashSet<>(PluginsService.getPluginBundles(pluginsDir))__        bundles.addAll(PluginsService.getModuleBundles(modulesDir))__        bundles.add(new PluginsService.Bundle(candidateInfo, candidateDir))__        List<PluginsService.Bundle> sortedBundles = PluginsService.sortBundles(bundles)___        _        _        Map<String, Set<URL>> transitiveUrls = new HashMap<>()__        for (PluginsService.Bundle bundle : sortedBundles) {_            PluginsService.checkBundleJarHell(bundle, transitiveUrls)__        }__        _        _    };check,a,candidate,plugin,for,jar,hell,before,installing,it;void,jar,hell,check,plugin,info,candidate,info,path,candidate,dir,path,plugins,dir,path,modules,dir,throws,exception,final,set,url,jars,new,hash,set,jar,hell,parse,class,path,set,plugins,service,bundle,bundles,new,hash,set,plugins,service,get,plugin,bundles,plugins,dir,bundles,add,all,plugins,service,get,module,bundles,modules,dir,bundles,add,new,plugins,service,bundle,candidate,info,candidate,dir,list,plugins,service,bundle,sorted,bundles,plugins,service,sort,bundles,bundles,map,string,set,url,transitive,urls,new,hash,map,for,plugins,service,bundle,bundle,sorted,bundles,plugins,service,check,bundle,jar,hell,bundle,transitive,urls
InstallPluginCommand -> void jarHellCheck(PluginInfo candidateInfo, Path candidateDir, Path pluginsDir, Path modulesDir) throws Exception;1526981569;check a candidate plugin for jar hell before installing it;void jarHellCheck(PluginInfo candidateInfo, Path candidateDir, Path pluginsDir, Path modulesDir) throws Exception {_        _        final Set<URL> jars = new HashSet<>(JarHell.parseClassPath())____        _        Set<PluginsService.Bundle> bundles = new HashSet<>(PluginsService.getPluginBundles(pluginsDir))__        bundles.addAll(PluginsService.getModuleBundles(modulesDir))__        bundles.add(new PluginsService.Bundle(candidateInfo, candidateDir))__        List<PluginsService.Bundle> sortedBundles = PluginsService.sortBundles(bundles)___        _        _        Map<String, Set<URL>> transitiveUrls = new HashMap<>()__        for (PluginsService.Bundle bundle : sortedBundles) {_            PluginsService.checkBundleJarHell(bundle, transitiveUrls)__        }__        _        _    };check,a,candidate,plugin,for,jar,hell,before,installing,it;void,jar,hell,check,plugin,info,candidate,info,path,candidate,dir,path,plugins,dir,path,modules,dir,throws,exception,final,set,url,jars,new,hash,set,jar,hell,parse,class,path,set,plugins,service,bundle,bundles,new,hash,set,plugins,service,get,plugin,bundles,plugins,dir,bundles,add,all,plugins,service,get,module,bundles,modules,dir,bundles,add,new,plugins,service,bundle,candidate,info,candidate,dir,list,plugins,service,bundle,sorted,bundles,plugins,service,sort,bundles,bundles,map,string,set,url,transitive,urls,new,hash,map,for,plugins,service,bundle,bundle,sorted,bundles,plugins,service,check,bundle,jar,hell,bundle,transitive,urls
InstallPluginCommand -> void jarHellCheck(PluginInfo candidateInfo, Path candidateDir, Path pluginsDir, Path modulesDir) throws Exception;1527583663;check a candidate plugin for jar hell before installing it;void jarHellCheck(PluginInfo candidateInfo, Path candidateDir, Path pluginsDir, Path modulesDir) throws Exception {_        _        final Set<URL> classpath =_                JarHell.parseClassPath()_                        .stream()_                        .filter(url -> {_                            try {_                                return url.toURI().getPath().matches(LIB_TOOLS_PLUGIN_CLI_CLASSPATH_JAR) == false__                            } catch (final URISyntaxException e) {_                                throw new AssertionError(e)__                            }_                        })_                        .collect(Collectors.toSet())___        _        Set<PluginsService.Bundle> bundles = new HashSet<>(PluginsService.getPluginBundles(pluginsDir))__        bundles.addAll(PluginsService.getModuleBundles(modulesDir))__        bundles.add(new PluginsService.Bundle(candidateInfo, candidateDir))__        List<PluginsService.Bundle> sortedBundles = PluginsService.sortBundles(bundles)___        _        _        Map<String, Set<URL>> transitiveUrls = new HashMap<>()__        for (PluginsService.Bundle bundle : sortedBundles) {_            PluginsService.checkBundleJarHell(classpath, bundle, transitiveUrls)__        }__        _        _    };check,a,candidate,plugin,for,jar,hell,before,installing,it;void,jar,hell,check,plugin,info,candidate,info,path,candidate,dir,path,plugins,dir,path,modules,dir,throws,exception,final,set,url,classpath,jar,hell,parse,class,path,stream,filter,url,try,return,url,to,uri,get,path,matches,false,catch,final,urisyntax,exception,e,throw,new,assertion,error,e,collect,collectors,to,set,set,plugins,service,bundle,bundles,new,hash,set,plugins,service,get,plugin,bundles,plugins,dir,bundles,add,all,plugins,service,get,module,bundles,modules,dir,bundles,add,new,plugins,service,bundle,candidate,info,candidate,dir,list,plugins,service,bundle,sorted,bundles,plugins,service,sort,bundles,bundles,map,string,set,url,transitive,urls,new,hash,map,for,plugins,service,bundle,bundle,sorted,bundles,plugins,service,check,bundle,jar,hell,classpath,bundle,transitive,urls
InstallPluginCommand -> void jarHellCheck(PluginInfo candidateInfo, Path candidateDir, Path pluginsDir, Path modulesDir) throws Exception;1528893677;check a candidate plugin for jar hell before installing it;void jarHellCheck(PluginInfo candidateInfo, Path candidateDir, Path pluginsDir, Path modulesDir) throws Exception {_        _        final Set<URL> classpath =_                JarHell.parseClassPath()_                        .stream()_                        .filter(url -> {_                            try {_                                return url.toURI().getPath().matches(LIB_TOOLS_PLUGIN_CLI_CLASSPATH_JAR) == false__                            } catch (final URISyntaxException e) {_                                throw new AssertionError(e)__                            }_                        })_                        .collect(Collectors.toSet())___        _        Set<PluginsService.Bundle> bundles = new HashSet<>(PluginsService.getPluginBundles(pluginsDir))__        bundles.addAll(PluginsService.getModuleBundles(modulesDir))__        bundles.add(new PluginsService.Bundle(candidateInfo, candidateDir))__        List<PluginsService.Bundle> sortedBundles = PluginsService.sortBundles(bundles)___        _        _        Map<String, Set<URL>> transitiveUrls = new HashMap<>()__        for (PluginsService.Bundle bundle : sortedBundles) {_            PluginsService.checkBundleJarHell(classpath, bundle, transitiveUrls)__        }__        _        _    };check,a,candidate,plugin,for,jar,hell,before,installing,it;void,jar,hell,check,plugin,info,candidate,info,path,candidate,dir,path,plugins,dir,path,modules,dir,throws,exception,final,set,url,classpath,jar,hell,parse,class,path,stream,filter,url,try,return,url,to,uri,get,path,matches,false,catch,final,urisyntax,exception,e,throw,new,assertion,error,e,collect,collectors,to,set,set,plugins,service,bundle,bundles,new,hash,set,plugins,service,get,plugin,bundles,plugins,dir,bundles,add,all,plugins,service,get,module,bundles,modules,dir,bundles,add,new,plugins,service,bundle,candidate,info,candidate,dir,list,plugins,service,bundle,sorted,bundles,plugins,service,sort,bundles,bundles,map,string,set,url,transitive,urls,new,hash,map,for,plugins,service,bundle,bundle,sorted,bundles,plugins,service,check,bundle,jar,hell,classpath,bundle,transitive,urls
InstallPluginCommand -> void jarHellCheck(PluginInfo candidateInfo, Path candidateDir, Path pluginsDir, Path modulesDir) throws Exception;1536314350;check a candidate plugin for jar hell before installing it;void jarHellCheck(PluginInfo candidateInfo, Path candidateDir, Path pluginsDir, Path modulesDir) throws Exception {_        _        final Set<URL> classpath =_                JarHell.parseClassPath()_                        .stream()_                        .filter(url -> {_                            try {_                                return url.toURI().getPath().matches(LIB_TOOLS_PLUGIN_CLI_CLASSPATH_JAR) == false__                            } catch (final URISyntaxException e) {_                                throw new AssertionError(e)__                            }_                        })_                        .collect(Collectors.toSet())___        _        Set<PluginsService.Bundle> bundles = new HashSet<>(PluginsService.getPluginBundles(pluginsDir))__        bundles.addAll(PluginsService.getModuleBundles(modulesDir))__        bundles.add(new PluginsService.Bundle(candidateInfo, candidateDir))__        List<PluginsService.Bundle> sortedBundles = PluginsService.sortBundles(bundles)___        _        _        Map<String, Set<URL>> transitiveUrls = new HashMap<>()__        for (PluginsService.Bundle bundle : sortedBundles) {_            PluginsService.checkBundleJarHell(classpath, bundle, transitiveUrls)__        }__        _        _    };check,a,candidate,plugin,for,jar,hell,before,installing,it;void,jar,hell,check,plugin,info,candidate,info,path,candidate,dir,path,plugins,dir,path,modules,dir,throws,exception,final,set,url,classpath,jar,hell,parse,class,path,stream,filter,url,try,return,url,to,uri,get,path,matches,false,catch,final,urisyntax,exception,e,throw,new,assertion,error,e,collect,collectors,to,set,set,plugins,service,bundle,bundles,new,hash,set,plugins,service,get,plugin,bundles,plugins,dir,bundles,add,all,plugins,service,get,module,bundles,modules,dir,bundles,add,new,plugins,service,bundle,candidate,info,candidate,dir,list,plugins,service,bundle,sorted,bundles,plugins,service,sort,bundles,bundles,map,string,set,url,transitive,urls,new,hash,map,for,plugins,service,bundle,bundle,sorted,bundles,plugins,service,check,bundle,jar,hell,classpath,bundle,transitive,urls
InstallPluginCommand -> void jarHellCheck(PluginInfo candidateInfo, Path candidateDir, Path pluginsDir, Path modulesDir) throws Exception;1541592065;check a candidate plugin for jar hell before installing it;void jarHellCheck(PluginInfo candidateInfo, Path candidateDir, Path pluginsDir, Path modulesDir) throws Exception {_        _        final Set<URL> classpath =_                JarHell.parseClassPath()_                        .stream()_                        .filter(url -> {_                            try {_                                return url.toURI().getPath().matches(LIB_TOOLS_PLUGIN_CLI_CLASSPATH_JAR) == false__                            } catch (final URISyntaxException e) {_                                throw new AssertionError(e)__                            }_                        })_                        .collect(Collectors.toSet())___        _        Set<PluginsService.Bundle> bundles = new HashSet<>(PluginsService.getPluginBundles(pluginsDir))__        bundles.addAll(PluginsService.getModuleBundles(modulesDir))__        bundles.add(new PluginsService.Bundle(candidateInfo, candidateDir))__        List<PluginsService.Bundle> sortedBundles = PluginsService.sortBundles(bundles)___        _        _        Map<String, Set<URL>> transitiveUrls = new HashMap<>()__        for (PluginsService.Bundle bundle : sortedBundles) {_            PluginsService.checkBundleJarHell(classpath, bundle, transitiveUrls)__        }__        _        _    };check,a,candidate,plugin,for,jar,hell,before,installing,it;void,jar,hell,check,plugin,info,candidate,info,path,candidate,dir,path,plugins,dir,path,modules,dir,throws,exception,final,set,url,classpath,jar,hell,parse,class,path,stream,filter,url,try,return,url,to,uri,get,path,matches,false,catch,final,urisyntax,exception,e,throw,new,assertion,error,e,collect,collectors,to,set,set,plugins,service,bundle,bundles,new,hash,set,plugins,service,get,plugin,bundles,plugins,dir,bundles,add,all,plugins,service,get,module,bundles,modules,dir,bundles,add,new,plugins,service,bundle,candidate,info,candidate,dir,list,plugins,service,bundle,sorted,bundles,plugins,service,sort,bundles,bundles,map,string,set,url,transitive,urls,new,hash,map,for,plugins,service,bundle,bundle,sorted,bundles,plugins,service,check,bundle,jar,hell,classpath,bundle,transitive,urls
InstallPluginCommand -> void jarHellCheck(PluginInfo candidateInfo, Path candidateDir, Path pluginsDir, Path modulesDir) throws Exception;1544610279;check a candidate plugin for jar hell before installing it;void jarHellCheck(PluginInfo candidateInfo, Path candidateDir, Path pluginsDir, Path modulesDir) throws Exception {_        _        final Set<URL> classpath =_                JarHell.parseClassPath()_                        .stream()_                        .filter(url -> {_                            try {_                                return url.toURI().getPath().matches(LIB_TOOLS_PLUGIN_CLI_CLASSPATH_JAR) == false__                            } catch (final URISyntaxException e) {_                                throw new AssertionError(e)__                            }_                        })_                        .collect(Collectors.toSet())___        _        Set<PluginsService.Bundle> bundles = new HashSet<>(PluginsService.getPluginBundles(pluginsDir))__        bundles.addAll(PluginsService.getModuleBundles(modulesDir))__        bundles.add(new PluginsService.Bundle(candidateInfo, candidateDir))__        List<PluginsService.Bundle> sortedBundles = PluginsService.sortBundles(bundles)___        _        _        Map<String, Set<URL>> transitiveUrls = new HashMap<>()__        for (PluginsService.Bundle bundle : sortedBundles) {_            PluginsService.checkBundleJarHell(classpath, bundle, transitiveUrls)__        }__        _        _    };check,a,candidate,plugin,for,jar,hell,before,installing,it;void,jar,hell,check,plugin,info,candidate,info,path,candidate,dir,path,plugins,dir,path,modules,dir,throws,exception,final,set,url,classpath,jar,hell,parse,class,path,stream,filter,url,try,return,url,to,uri,get,path,matches,false,catch,final,urisyntax,exception,e,throw,new,assertion,error,e,collect,collectors,to,set,set,plugins,service,bundle,bundles,new,hash,set,plugins,service,get,plugin,bundles,plugins,dir,bundles,add,all,plugins,service,get,module,bundles,modules,dir,bundles,add,new,plugins,service,bundle,candidate,info,candidate,dir,list,plugins,service,bundle,sorted,bundles,plugins,service,sort,bundles,bundles,map,string,set,url,transitive,urls,new,hash,map,for,plugins,service,bundle,bundle,sorted,bundles,plugins,service,check,bundle,jar,hell,classpath,bundle,transitive,urls
InstallPluginCommand -> void jarHellCheck(PluginInfo candidateInfo, Path candidateDir, Path pluginsDir, Path modulesDir) throws Exception;1545481309;check a candidate plugin for jar hell before installing it;void jarHellCheck(PluginInfo candidateInfo, Path candidateDir, Path pluginsDir, Path modulesDir) throws Exception {_        _        final Set<URL> classpath =_                JarHell.parseClassPath()_                        .stream()_                        .filter(url -> {_                            try {_                                return url.toURI().getPath().matches(LIB_TOOLS_PLUGIN_CLI_CLASSPATH_JAR) == false__                            } catch (final URISyntaxException e) {_                                throw new AssertionError(e)__                            }_                        })_                        .collect(Collectors.toSet())___        _        Set<PluginsService.Bundle> bundles = new HashSet<>(PluginsService.getPluginBundles(pluginsDir))__        bundles.addAll(PluginsService.getModuleBundles(modulesDir))__        bundles.add(new PluginsService.Bundle(candidateInfo, candidateDir))__        List<PluginsService.Bundle> sortedBundles = PluginsService.sortBundles(bundles)___        _        _        Map<String, Set<URL>> transitiveUrls = new HashMap<>()__        for (PluginsService.Bundle bundle : sortedBundles) {_            PluginsService.checkBundleJarHell(classpath, bundle, transitiveUrls)__        }__        _        _    };check,a,candidate,plugin,for,jar,hell,before,installing,it;void,jar,hell,check,plugin,info,candidate,info,path,candidate,dir,path,plugins,dir,path,modules,dir,throws,exception,final,set,url,classpath,jar,hell,parse,class,path,stream,filter,url,try,return,url,to,uri,get,path,matches,false,catch,final,urisyntax,exception,e,throw,new,assertion,error,e,collect,collectors,to,set,set,plugins,service,bundle,bundles,new,hash,set,plugins,service,get,plugin,bundles,plugins,dir,bundles,add,all,plugins,service,get,module,bundles,modules,dir,bundles,add,new,plugins,service,bundle,candidate,info,candidate,dir,list,plugins,service,bundle,sorted,bundles,plugins,service,sort,bundles,bundles,map,string,set,url,transitive,urls,new,hash,map,for,plugins,service,bundle,bundle,sorted,bundles,plugins,service,check,bundle,jar,hell,classpath,bundle,transitive,urls
InstallPluginCommand -> void jarHellCheck(PluginInfo candidateInfo, Path candidateDir, Path pluginsDir, Path modulesDir) throws Exception;1545528053;check a candidate plugin for jar hell before installing it;void jarHellCheck(PluginInfo candidateInfo, Path candidateDir, Path pluginsDir, Path modulesDir) throws Exception {_        _        final Set<URL> classpath =_                JarHell.parseClassPath()_                        .stream()_                        .filter(url -> {_                            try {_                                return url.toURI().getPath().matches(LIB_TOOLS_PLUGIN_CLI_CLASSPATH_JAR) == false__                            } catch (final URISyntaxException e) {_                                throw new AssertionError(e)__                            }_                        })_                        .collect(Collectors.toSet())___        _        Set<PluginsService.Bundle> bundles = new HashSet<>(PluginsService.getPluginBundles(pluginsDir))__        bundles.addAll(PluginsService.getModuleBundles(modulesDir))__        bundles.add(new PluginsService.Bundle(candidateInfo, candidateDir))__        List<PluginsService.Bundle> sortedBundles = PluginsService.sortBundles(bundles)___        _        _        Map<String, Set<URL>> transitiveUrls = new HashMap<>()__        for (PluginsService.Bundle bundle : sortedBundles) {_            PluginsService.checkBundleJarHell(classpath, bundle, transitiveUrls)__        }__        _        _    };check,a,candidate,plugin,for,jar,hell,before,installing,it;void,jar,hell,check,plugin,info,candidate,info,path,candidate,dir,path,plugins,dir,path,modules,dir,throws,exception,final,set,url,classpath,jar,hell,parse,class,path,stream,filter,url,try,return,url,to,uri,get,path,matches,false,catch,final,urisyntax,exception,e,throw,new,assertion,error,e,collect,collectors,to,set,set,plugins,service,bundle,bundles,new,hash,set,plugins,service,get,plugin,bundles,plugins,dir,bundles,add,all,plugins,service,get,module,bundles,modules,dir,bundles,add,new,plugins,service,bundle,candidate,info,candidate,dir,list,plugins,service,bundle,sorted,bundles,plugins,service,sort,bundles,bundles,map,string,set,url,transitive,urls,new,hash,map,for,plugins,service,bundle,bundle,sorted,bundles,plugins,service,check,bundle,jar,hell,classpath,bundle,transitive,urls
InstallPluginCommand -> void jarHellCheck(PluginInfo candidateInfo, Path candidateDir, Path pluginsDir, Path modulesDir) throws Exception;1545599625;check a candidate plugin for jar hell before installing it;void jarHellCheck(PluginInfo candidateInfo, Path candidateDir, Path pluginsDir, Path modulesDir) throws Exception {_        _        final Set<URL> classpath =_                JarHell.parseClassPath()_                        .stream()_                        .filter(url -> {_                            try {_                                return url.toURI().getPath().matches(LIB_TOOLS_PLUGIN_CLI_CLASSPATH_JAR) == false__                            } catch (final URISyntaxException e) {_                                throw new AssertionError(e)__                            }_                        })_                        .collect(Collectors.toSet())___        _        Set<PluginsService.Bundle> bundles = new HashSet<>(PluginsService.getPluginBundles(pluginsDir))__        bundles.addAll(PluginsService.getModuleBundles(modulesDir))__        bundles.add(new PluginsService.Bundle(candidateInfo, candidateDir))__        List<PluginsService.Bundle> sortedBundles = PluginsService.sortBundles(bundles)___        _        _        Map<String, Set<URL>> transitiveUrls = new HashMap<>()__        for (PluginsService.Bundle bundle : sortedBundles) {_            PluginsService.checkBundleJarHell(classpath, bundle, transitiveUrls)__        }__        _        _    };check,a,candidate,plugin,for,jar,hell,before,installing,it;void,jar,hell,check,plugin,info,candidate,info,path,candidate,dir,path,plugins,dir,path,modules,dir,throws,exception,final,set,url,classpath,jar,hell,parse,class,path,stream,filter,url,try,return,url,to,uri,get,path,matches,false,catch,final,urisyntax,exception,e,throw,new,assertion,error,e,collect,collectors,to,set,set,plugins,service,bundle,bundles,new,hash,set,plugins,service,get,plugin,bundles,plugins,dir,bundles,add,all,plugins,service,get,module,bundles,modules,dir,bundles,add,new,plugins,service,bundle,candidate,info,candidate,dir,list,plugins,service,bundle,sorted,bundles,plugins,service,sort,bundles,bundles,map,string,set,url,transitive,urls,new,hash,map,for,plugins,service,bundle,bundle,sorted,bundles,plugins,service,check,bundle,jar,hell,classpath,bundle,transitive,urls
InstallPluginCommand -> private void installConfig(PluginInfo info, Path tmpConfigDir, Path destConfigDir) throws Exception;1524684173;Copies the files from {@code tmpConfigDir} into {@code destConfigDir}._Any files existing in both the source and destination will be skipped.;private void installConfig(PluginInfo info, Path tmpConfigDir, Path destConfigDir) throws Exception {_        if (Files.isDirectory(tmpConfigDir) == false) {_            throw new UserException(PLUGIN_MALFORMED,_                "config in plugin " + info.getName() + " is not a directory")__        }__        Files.createDirectories(destConfigDir)__        setFileAttributes(destConfigDir, CONFIG_DIR_PERMS)__        final PosixFileAttributeView destConfigDirAttributesView =_            Files.getFileAttributeView(destConfigDir.getParent(), PosixFileAttributeView.class)__        final PosixFileAttributes destConfigDirAttributes =_            destConfigDirAttributesView != null ? destConfigDirAttributesView.readAttributes() : null__        if (destConfigDirAttributes != null) {_            setOwnerGroup(destConfigDir, destConfigDirAttributes)__        }__        try (DirectoryStream<Path> stream = Files.newDirectoryStream(tmpConfigDir)) {_            for (Path srcFile : stream) {_                if (Files.isDirectory(srcFile)) {_                    throw new UserException(PLUGIN_MALFORMED,_                        "Directories not allowed in config dir for plugin " + info.getName())__                }__                Path destFile = destConfigDir.resolve(tmpConfigDir.relativize(srcFile))__                if (Files.exists(destFile) == false) {_                    Files.copy(srcFile, destFile)__                    setFileAttributes(destFile, CONFIG_FILES_PERMS)__                    if (destConfigDirAttributes != null) {_                        setOwnerGroup(destFile, destConfigDirAttributes)__                    }_                }_            }_        }_        IOUtils.rm(tmpConfigDir)_ _    };copies,the,files,from,code,tmp,config,dir,into,code,dest,config,dir,any,files,existing,in,both,the,source,and,destination,will,be,skipped;private,void,install,config,plugin,info,info,path,tmp,config,dir,path,dest,config,dir,throws,exception,if,files,is,directory,tmp,config,dir,false,throw,new,user,exception,config,in,plugin,info,get,name,is,not,a,directory,files,create,directories,dest,config,dir,set,file,attributes,dest,config,dir,final,posix,file,attribute,view,dest,config,dir,attributes,view,files,get,file,attribute,view,dest,config,dir,get,parent,posix,file,attribute,view,class,final,posix,file,attributes,dest,config,dir,attributes,dest,config,dir,attributes,view,null,dest,config,dir,attributes,view,read,attributes,null,if,dest,config,dir,attributes,null,set,owner,group,dest,config,dir,dest,config,dir,attributes,try,directory,stream,path,stream,files,new,directory,stream,tmp,config,dir,for,path,src,file,stream,if,files,is,directory,src,file,throw,new,user,exception,directories,not,allowed,in,config,dir,for,plugin,info,get,name,path,dest,file,dest,config,dir,resolve,tmp,config,dir,relativize,src,file,if,files,exists,dest,file,false,files,copy,src,file,dest,file,set,file,attributes,dest,file,if,dest,config,dir,attributes,null,set,owner,group,dest,file,dest,config,dir,attributes,ioutils,rm,tmp,config,dir
InstallPluginCommand -> private void installConfig(PluginInfo info, Path tmpConfigDir, Path destConfigDir) throws Exception;1526900724;Copies the files from {@code tmpConfigDir} into {@code destConfigDir}._Any files existing in both the source and destination will be skipped.;private void installConfig(PluginInfo info, Path tmpConfigDir, Path destConfigDir) throws Exception {_        if (Files.isDirectory(tmpConfigDir) == false) {_            throw new UserException(PLUGIN_MALFORMED,_                "config in plugin " + info.getName() + " is not a directory")__        }__        Files.createDirectories(destConfigDir)__        setFileAttributes(destConfigDir, CONFIG_DIR_PERMS)__        final PosixFileAttributeView destConfigDirAttributesView =_            Files.getFileAttributeView(destConfigDir.getParent(), PosixFileAttributeView.class)__        final PosixFileAttributes destConfigDirAttributes =_            destConfigDirAttributesView != null ? destConfigDirAttributesView.readAttributes() : null__        if (destConfigDirAttributes != null) {_            setOwnerGroup(destConfigDir, destConfigDirAttributes)__        }__        try (DirectoryStream<Path> stream = Files.newDirectoryStream(tmpConfigDir)) {_            for (Path srcFile : stream) {_                if (Files.isDirectory(srcFile)) {_                    throw new UserException(PLUGIN_MALFORMED,_                        "Directories not allowed in config dir for plugin " + info.getName())__                }__                Path destFile = destConfigDir.resolve(tmpConfigDir.relativize(srcFile))__                if (Files.exists(destFile) == false) {_                    Files.copy(srcFile, destFile)__                    setFileAttributes(destFile, CONFIG_FILES_PERMS)__                    if (destConfigDirAttributes != null) {_                        setOwnerGroup(destFile, destConfigDirAttributes)__                    }_                }_            }_        }_        IOUtils.rm(tmpConfigDir)_ _    };copies,the,files,from,code,tmp,config,dir,into,code,dest,config,dir,any,files,existing,in,both,the,source,and,destination,will,be,skipped;private,void,install,config,plugin,info,info,path,tmp,config,dir,path,dest,config,dir,throws,exception,if,files,is,directory,tmp,config,dir,false,throw,new,user,exception,config,in,plugin,info,get,name,is,not,a,directory,files,create,directories,dest,config,dir,set,file,attributes,dest,config,dir,final,posix,file,attribute,view,dest,config,dir,attributes,view,files,get,file,attribute,view,dest,config,dir,get,parent,posix,file,attribute,view,class,final,posix,file,attributes,dest,config,dir,attributes,dest,config,dir,attributes,view,null,dest,config,dir,attributes,view,read,attributes,null,if,dest,config,dir,attributes,null,set,owner,group,dest,config,dir,dest,config,dir,attributes,try,directory,stream,path,stream,files,new,directory,stream,tmp,config,dir,for,path,src,file,stream,if,files,is,directory,src,file,throw,new,user,exception,directories,not,allowed,in,config,dir,for,plugin,info,get,name,path,dest,file,dest,config,dir,resolve,tmp,config,dir,relativize,src,file,if,files,exists,dest,file,false,files,copy,src,file,dest,file,set,file,attributes,dest,file,if,dest,config,dir,attributes,null,set,owner,group,dest,file,dest,config,dir,attributes,ioutils,rm,tmp,config,dir
InstallPluginCommand -> private void installConfig(PluginInfo info, Path tmpConfigDir, Path destConfigDir) throws Exception;1526981569;Copies the files from {@code tmpConfigDir} into {@code destConfigDir}._Any files existing in both the source and destination will be skipped.;private void installConfig(PluginInfo info, Path tmpConfigDir, Path destConfigDir) throws Exception {_        if (Files.isDirectory(tmpConfigDir) == false) {_            throw new UserException(PLUGIN_MALFORMED,_                "config in plugin " + info.getName() + " is not a directory")__        }__        Files.createDirectories(destConfigDir)__        setFileAttributes(destConfigDir, CONFIG_DIR_PERMS)__        final PosixFileAttributeView destConfigDirAttributesView =_            Files.getFileAttributeView(destConfigDir.getParent(), PosixFileAttributeView.class)__        final PosixFileAttributes destConfigDirAttributes =_            destConfigDirAttributesView != null ? destConfigDirAttributesView.readAttributes() : null__        if (destConfigDirAttributes != null) {_            setOwnerGroup(destConfigDir, destConfigDirAttributes)__        }__        try (DirectoryStream<Path> stream = Files.newDirectoryStream(tmpConfigDir)) {_            for (Path srcFile : stream) {_                if (Files.isDirectory(srcFile)) {_                    throw new UserException(PLUGIN_MALFORMED,_                        "Directories not allowed in config dir for plugin " + info.getName())__                }__                Path destFile = destConfigDir.resolve(tmpConfigDir.relativize(srcFile))__                if (Files.exists(destFile) == false) {_                    Files.copy(srcFile, destFile)__                    setFileAttributes(destFile, CONFIG_FILES_PERMS)__                    if (destConfigDirAttributes != null) {_                        setOwnerGroup(destFile, destConfigDirAttributes)__                    }_                }_            }_        }_        IOUtils.rm(tmpConfigDir)_ _    };copies,the,files,from,code,tmp,config,dir,into,code,dest,config,dir,any,files,existing,in,both,the,source,and,destination,will,be,skipped;private,void,install,config,plugin,info,info,path,tmp,config,dir,path,dest,config,dir,throws,exception,if,files,is,directory,tmp,config,dir,false,throw,new,user,exception,config,in,plugin,info,get,name,is,not,a,directory,files,create,directories,dest,config,dir,set,file,attributes,dest,config,dir,final,posix,file,attribute,view,dest,config,dir,attributes,view,files,get,file,attribute,view,dest,config,dir,get,parent,posix,file,attribute,view,class,final,posix,file,attributes,dest,config,dir,attributes,dest,config,dir,attributes,view,null,dest,config,dir,attributes,view,read,attributes,null,if,dest,config,dir,attributes,null,set,owner,group,dest,config,dir,dest,config,dir,attributes,try,directory,stream,path,stream,files,new,directory,stream,tmp,config,dir,for,path,src,file,stream,if,files,is,directory,src,file,throw,new,user,exception,directories,not,allowed,in,config,dir,for,plugin,info,get,name,path,dest,file,dest,config,dir,resolve,tmp,config,dir,relativize,src,file,if,files,exists,dest,file,false,files,copy,src,file,dest,file,set,file,attributes,dest,file,if,dest,config,dir,attributes,null,set,owner,group,dest,file,dest,config,dir,attributes,ioutils,rm,tmp,config,dir
InstallPluginCommand -> private void installConfig(PluginInfo info, Path tmpConfigDir, Path destConfigDir) throws Exception;1527583663;Copies the files from {@code tmpConfigDir} into {@code destConfigDir}._Any files existing in both the source and destination will be skipped.;private void installConfig(PluginInfo info, Path tmpConfigDir, Path destConfigDir) throws Exception {_        if (Files.isDirectory(tmpConfigDir) == false) {_            throw new UserException(PLUGIN_MALFORMED,_                "config in plugin " + info.getName() + " is not a directory")__        }__        Files.createDirectories(destConfigDir)__        setFileAttributes(destConfigDir, CONFIG_DIR_PERMS)__        final PosixFileAttributeView destConfigDirAttributesView =_            Files.getFileAttributeView(destConfigDir.getParent(), PosixFileAttributeView.class)__        final PosixFileAttributes destConfigDirAttributes =_            destConfigDirAttributesView != null ? destConfigDirAttributesView.readAttributes() : null__        if (destConfigDirAttributes != null) {_            setOwnerGroup(destConfigDir, destConfigDirAttributes)__        }__        try (DirectoryStream<Path> stream = Files.newDirectoryStream(tmpConfigDir)) {_            for (Path srcFile : stream) {_                if (Files.isDirectory(srcFile)) {_                    throw new UserException(PLUGIN_MALFORMED,_                        "Directories not allowed in config dir for plugin " + info.getName())__                }__                Path destFile = destConfigDir.resolve(tmpConfigDir.relativize(srcFile))__                if (Files.exists(destFile) == false) {_                    Files.copy(srcFile, destFile)__                    setFileAttributes(destFile, CONFIG_FILES_PERMS)__                    if (destConfigDirAttributes != null) {_                        setOwnerGroup(destFile, destConfigDirAttributes)__                    }_                }_            }_        }_        IOUtils.rm(tmpConfigDir)_ _    };copies,the,files,from,code,tmp,config,dir,into,code,dest,config,dir,any,files,existing,in,both,the,source,and,destination,will,be,skipped;private,void,install,config,plugin,info,info,path,tmp,config,dir,path,dest,config,dir,throws,exception,if,files,is,directory,tmp,config,dir,false,throw,new,user,exception,config,in,plugin,info,get,name,is,not,a,directory,files,create,directories,dest,config,dir,set,file,attributes,dest,config,dir,final,posix,file,attribute,view,dest,config,dir,attributes,view,files,get,file,attribute,view,dest,config,dir,get,parent,posix,file,attribute,view,class,final,posix,file,attributes,dest,config,dir,attributes,dest,config,dir,attributes,view,null,dest,config,dir,attributes,view,read,attributes,null,if,dest,config,dir,attributes,null,set,owner,group,dest,config,dir,dest,config,dir,attributes,try,directory,stream,path,stream,files,new,directory,stream,tmp,config,dir,for,path,src,file,stream,if,files,is,directory,src,file,throw,new,user,exception,directories,not,allowed,in,config,dir,for,plugin,info,get,name,path,dest,file,dest,config,dir,resolve,tmp,config,dir,relativize,src,file,if,files,exists,dest,file,false,files,copy,src,file,dest,file,set,file,attributes,dest,file,if,dest,config,dir,attributes,null,set,owner,group,dest,file,dest,config,dir,attributes,ioutils,rm,tmp,config,dir
InstallPluginCommand -> private void installConfig(PluginInfo info, Path tmpConfigDir, Path destConfigDir) throws Exception;1528893677;Copies the files from {@code tmpConfigDir} into {@code destConfigDir}._Any files existing in both the source and destination will be skipped.;private void installConfig(PluginInfo info, Path tmpConfigDir, Path destConfigDir) throws Exception {_        if (Files.isDirectory(tmpConfigDir) == false) {_            throw new UserException(PLUGIN_MALFORMED,_                "config in plugin " + info.getName() + " is not a directory")__        }__        Files.createDirectories(destConfigDir)__        setFileAttributes(destConfigDir, CONFIG_DIR_PERMS)__        final PosixFileAttributeView destConfigDirAttributesView =_            Files.getFileAttributeView(destConfigDir.getParent(), PosixFileAttributeView.class)__        final PosixFileAttributes destConfigDirAttributes =_            destConfigDirAttributesView != null ? destConfigDirAttributesView.readAttributes() : null__        if (destConfigDirAttributes != null) {_            setOwnerGroup(destConfigDir, destConfigDirAttributes)__        }__        try (DirectoryStream<Path> stream = Files.newDirectoryStream(tmpConfigDir)) {_            for (Path srcFile : stream) {_                if (Files.isDirectory(srcFile)) {_                    throw new UserException(PLUGIN_MALFORMED,_                        "Directories not allowed in config dir for plugin " + info.getName())__                }__                Path destFile = destConfigDir.resolve(tmpConfigDir.relativize(srcFile))__                if (Files.exists(destFile) == false) {_                    Files.copy(srcFile, destFile)__                    setFileAttributes(destFile, CONFIG_FILES_PERMS)__                    if (destConfigDirAttributes != null) {_                        setOwnerGroup(destFile, destConfigDirAttributes)__                    }_                }_            }_        }_        IOUtils.rm(tmpConfigDir)_ _    };copies,the,files,from,code,tmp,config,dir,into,code,dest,config,dir,any,files,existing,in,both,the,source,and,destination,will,be,skipped;private,void,install,config,plugin,info,info,path,tmp,config,dir,path,dest,config,dir,throws,exception,if,files,is,directory,tmp,config,dir,false,throw,new,user,exception,config,in,plugin,info,get,name,is,not,a,directory,files,create,directories,dest,config,dir,set,file,attributes,dest,config,dir,final,posix,file,attribute,view,dest,config,dir,attributes,view,files,get,file,attribute,view,dest,config,dir,get,parent,posix,file,attribute,view,class,final,posix,file,attributes,dest,config,dir,attributes,dest,config,dir,attributes,view,null,dest,config,dir,attributes,view,read,attributes,null,if,dest,config,dir,attributes,null,set,owner,group,dest,config,dir,dest,config,dir,attributes,try,directory,stream,path,stream,files,new,directory,stream,tmp,config,dir,for,path,src,file,stream,if,files,is,directory,src,file,throw,new,user,exception,directories,not,allowed,in,config,dir,for,plugin,info,get,name,path,dest,file,dest,config,dir,resolve,tmp,config,dir,relativize,src,file,if,files,exists,dest,file,false,files,copy,src,file,dest,file,set,file,attributes,dest,file,if,dest,config,dir,attributes,null,set,owner,group,dest,file,dest,config,dir,attributes,ioutils,rm,tmp,config,dir
InstallPluginCommand -> private void installConfig(PluginInfo info, Path tmpConfigDir, Path destConfigDir) throws Exception;1536314350;Copies the files from {@code tmpConfigDir} into {@code destConfigDir}._Any files existing in both the source and destination will be skipped.;private void installConfig(PluginInfo info, Path tmpConfigDir, Path destConfigDir) throws Exception {_        if (Files.isDirectory(tmpConfigDir) == false) {_            throw new UserException(PLUGIN_MALFORMED,_                "config in plugin " + info.getName() + " is not a directory")__        }__        Files.createDirectories(destConfigDir)__        setFileAttributes(destConfigDir, CONFIG_DIR_PERMS)__        final PosixFileAttributeView destConfigDirAttributesView =_            Files.getFileAttributeView(destConfigDir.getParent(), PosixFileAttributeView.class)__        final PosixFileAttributes destConfigDirAttributes =_            destConfigDirAttributesView != null ? destConfigDirAttributesView.readAttributes() : null__        if (destConfigDirAttributes != null) {_            setOwnerGroup(destConfigDir, destConfigDirAttributes)__        }__        try (DirectoryStream<Path> stream = Files.newDirectoryStream(tmpConfigDir)) {_            for (Path srcFile : stream) {_                if (Files.isDirectory(srcFile)) {_                    throw new UserException(PLUGIN_MALFORMED,_                        "Directories not allowed in config dir for plugin " + info.getName())__                }__                Path destFile = destConfigDir.resolve(tmpConfigDir.relativize(srcFile))__                if (Files.exists(destFile) == false) {_                    Files.copy(srcFile, destFile)__                    setFileAttributes(destFile, CONFIG_FILES_PERMS)__                    if (destConfigDirAttributes != null) {_                        setOwnerGroup(destFile, destConfigDirAttributes)__                    }_                }_            }_        }_        IOUtils.rm(tmpConfigDir)_ _    };copies,the,files,from,code,tmp,config,dir,into,code,dest,config,dir,any,files,existing,in,both,the,source,and,destination,will,be,skipped;private,void,install,config,plugin,info,info,path,tmp,config,dir,path,dest,config,dir,throws,exception,if,files,is,directory,tmp,config,dir,false,throw,new,user,exception,config,in,plugin,info,get,name,is,not,a,directory,files,create,directories,dest,config,dir,set,file,attributes,dest,config,dir,final,posix,file,attribute,view,dest,config,dir,attributes,view,files,get,file,attribute,view,dest,config,dir,get,parent,posix,file,attribute,view,class,final,posix,file,attributes,dest,config,dir,attributes,dest,config,dir,attributes,view,null,dest,config,dir,attributes,view,read,attributes,null,if,dest,config,dir,attributes,null,set,owner,group,dest,config,dir,dest,config,dir,attributes,try,directory,stream,path,stream,files,new,directory,stream,tmp,config,dir,for,path,src,file,stream,if,files,is,directory,src,file,throw,new,user,exception,directories,not,allowed,in,config,dir,for,plugin,info,get,name,path,dest,file,dest,config,dir,resolve,tmp,config,dir,relativize,src,file,if,files,exists,dest,file,false,files,copy,src,file,dest,file,set,file,attributes,dest,file,if,dest,config,dir,attributes,null,set,owner,group,dest,file,dest,config,dir,attributes,ioutils,rm,tmp,config,dir
InstallPluginCommand -> private void installConfig(PluginInfo info, Path tmpConfigDir, Path destConfigDir) throws Exception;1541592065;Copies the files from {@code tmpConfigDir} into {@code destConfigDir}._Any files existing in both the source and destination will be skipped.;private void installConfig(PluginInfo info, Path tmpConfigDir, Path destConfigDir) throws Exception {_        if (Files.isDirectory(tmpConfigDir) == false) {_            throw new UserException(PLUGIN_MALFORMED,_                "config in plugin " + info.getName() + " is not a directory")__        }__        Files.createDirectories(destConfigDir)__        setFileAttributes(destConfigDir, CONFIG_DIR_PERMS)__        final PosixFileAttributeView destConfigDirAttributesView =_            Files.getFileAttributeView(destConfigDir.getParent(), PosixFileAttributeView.class)__        final PosixFileAttributes destConfigDirAttributes =_            destConfigDirAttributesView != null ? destConfigDirAttributesView.readAttributes() : null__        if (destConfigDirAttributes != null) {_            setOwnerGroup(destConfigDir, destConfigDirAttributes)__        }__        try (DirectoryStream<Path> stream = Files.newDirectoryStream(tmpConfigDir)) {_            for (Path srcFile : stream) {_                if (Files.isDirectory(srcFile)) {_                    throw new UserException(PLUGIN_MALFORMED,_                        "Directories not allowed in config dir for plugin " + info.getName())__                }__                Path destFile = destConfigDir.resolve(tmpConfigDir.relativize(srcFile))__                if (Files.exists(destFile) == false) {_                    Files.copy(srcFile, destFile)__                    setFileAttributes(destFile, CONFIG_FILES_PERMS)__                    if (destConfigDirAttributes != null) {_                        setOwnerGroup(destFile, destConfigDirAttributes)__                    }_                }_            }_        }_        IOUtils.rm(tmpConfigDir)_ _    };copies,the,files,from,code,tmp,config,dir,into,code,dest,config,dir,any,files,existing,in,both,the,source,and,destination,will,be,skipped;private,void,install,config,plugin,info,info,path,tmp,config,dir,path,dest,config,dir,throws,exception,if,files,is,directory,tmp,config,dir,false,throw,new,user,exception,config,in,plugin,info,get,name,is,not,a,directory,files,create,directories,dest,config,dir,set,file,attributes,dest,config,dir,final,posix,file,attribute,view,dest,config,dir,attributes,view,files,get,file,attribute,view,dest,config,dir,get,parent,posix,file,attribute,view,class,final,posix,file,attributes,dest,config,dir,attributes,dest,config,dir,attributes,view,null,dest,config,dir,attributes,view,read,attributes,null,if,dest,config,dir,attributes,null,set,owner,group,dest,config,dir,dest,config,dir,attributes,try,directory,stream,path,stream,files,new,directory,stream,tmp,config,dir,for,path,src,file,stream,if,files,is,directory,src,file,throw,new,user,exception,directories,not,allowed,in,config,dir,for,plugin,info,get,name,path,dest,file,dest,config,dir,resolve,tmp,config,dir,relativize,src,file,if,files,exists,dest,file,false,files,copy,src,file,dest,file,set,file,attributes,dest,file,if,dest,config,dir,attributes,null,set,owner,group,dest,file,dest,config,dir,attributes,ioutils,rm,tmp,config,dir
InstallPluginCommand -> private void installConfig(PluginInfo info, Path tmpConfigDir, Path destConfigDir) throws Exception;1544610279;Copies the files from {@code tmpConfigDir} into {@code destConfigDir}._Any files existing in both the source and destination will be skipped.;private void installConfig(PluginInfo info, Path tmpConfigDir, Path destConfigDir) throws Exception {_        if (Files.isDirectory(tmpConfigDir) == false) {_            throw new UserException(PLUGIN_MALFORMED,_                "config in plugin " + info.getName() + " is not a directory")__        }__        Files.createDirectories(destConfigDir)__        setFileAttributes(destConfigDir, CONFIG_DIR_PERMS)__        final PosixFileAttributeView destConfigDirAttributesView =_            Files.getFileAttributeView(destConfigDir.getParent(), PosixFileAttributeView.class)__        final PosixFileAttributes destConfigDirAttributes =_            destConfigDirAttributesView != null ? destConfigDirAttributesView.readAttributes() : null__        if (destConfigDirAttributes != null) {_            setOwnerGroup(destConfigDir, destConfigDirAttributes)__        }__        try (DirectoryStream<Path> stream = Files.newDirectoryStream(tmpConfigDir)) {_            for (Path srcFile : stream) {_                if (Files.isDirectory(srcFile)) {_                    throw new UserException(PLUGIN_MALFORMED,_                        "Directories not allowed in config dir for plugin " + info.getName())__                }__                Path destFile = destConfigDir.resolve(tmpConfigDir.relativize(srcFile))__                if (Files.exists(destFile) == false) {_                    Files.copy(srcFile, destFile)__                    setFileAttributes(destFile, CONFIG_FILES_PERMS)__                    if (destConfigDirAttributes != null) {_                        setOwnerGroup(destFile, destConfigDirAttributes)__                    }_                }_            }_        }_        IOUtils.rm(tmpConfigDir)_ _    };copies,the,files,from,code,tmp,config,dir,into,code,dest,config,dir,any,files,existing,in,both,the,source,and,destination,will,be,skipped;private,void,install,config,plugin,info,info,path,tmp,config,dir,path,dest,config,dir,throws,exception,if,files,is,directory,tmp,config,dir,false,throw,new,user,exception,config,in,plugin,info,get,name,is,not,a,directory,files,create,directories,dest,config,dir,set,file,attributes,dest,config,dir,final,posix,file,attribute,view,dest,config,dir,attributes,view,files,get,file,attribute,view,dest,config,dir,get,parent,posix,file,attribute,view,class,final,posix,file,attributes,dest,config,dir,attributes,dest,config,dir,attributes,view,null,dest,config,dir,attributes,view,read,attributes,null,if,dest,config,dir,attributes,null,set,owner,group,dest,config,dir,dest,config,dir,attributes,try,directory,stream,path,stream,files,new,directory,stream,tmp,config,dir,for,path,src,file,stream,if,files,is,directory,src,file,throw,new,user,exception,directories,not,allowed,in,config,dir,for,plugin,info,get,name,path,dest,file,dest,config,dir,resolve,tmp,config,dir,relativize,src,file,if,files,exists,dest,file,false,files,copy,src,file,dest,file,set,file,attributes,dest,file,if,dest,config,dir,attributes,null,set,owner,group,dest,file,dest,config,dir,attributes,ioutils,rm,tmp,config,dir
InstallPluginCommand -> private void installConfig(PluginInfo info, Path tmpConfigDir, Path destConfigDir) throws Exception;1545481309;Copies the files from {@code tmpConfigDir} into {@code destConfigDir}._Any files existing in both the source and destination will be skipped.;private void installConfig(PluginInfo info, Path tmpConfigDir, Path destConfigDir) throws Exception {_        if (Files.isDirectory(tmpConfigDir) == false) {_            throw new UserException(PLUGIN_MALFORMED,_                "config in plugin " + info.getName() + " is not a directory")__        }__        Files.createDirectories(destConfigDir)__        setFileAttributes(destConfigDir, CONFIG_DIR_PERMS)__        final PosixFileAttributeView destConfigDirAttributesView =_            Files.getFileAttributeView(destConfigDir.getParent(), PosixFileAttributeView.class)__        final PosixFileAttributes destConfigDirAttributes =_            destConfigDirAttributesView != null ? destConfigDirAttributesView.readAttributes() : null__        if (destConfigDirAttributes != null) {_            setOwnerGroup(destConfigDir, destConfigDirAttributes)__        }__        try (DirectoryStream<Path> stream = Files.newDirectoryStream(tmpConfigDir)) {_            for (Path srcFile : stream) {_                if (Files.isDirectory(srcFile)) {_                    throw new UserException(PLUGIN_MALFORMED,_                        "Directories not allowed in config dir for plugin " + info.getName())__                }__                Path destFile = destConfigDir.resolve(tmpConfigDir.relativize(srcFile))__                if (Files.exists(destFile) == false) {_                    Files.copy(srcFile, destFile)__                    setFileAttributes(destFile, CONFIG_FILES_PERMS)__                    if (destConfigDirAttributes != null) {_                        setOwnerGroup(destFile, destConfigDirAttributes)__                    }_                }_            }_        }_        IOUtils.rm(tmpConfigDir)_ _    };copies,the,files,from,code,tmp,config,dir,into,code,dest,config,dir,any,files,existing,in,both,the,source,and,destination,will,be,skipped;private,void,install,config,plugin,info,info,path,tmp,config,dir,path,dest,config,dir,throws,exception,if,files,is,directory,tmp,config,dir,false,throw,new,user,exception,config,in,plugin,info,get,name,is,not,a,directory,files,create,directories,dest,config,dir,set,file,attributes,dest,config,dir,final,posix,file,attribute,view,dest,config,dir,attributes,view,files,get,file,attribute,view,dest,config,dir,get,parent,posix,file,attribute,view,class,final,posix,file,attributes,dest,config,dir,attributes,dest,config,dir,attributes,view,null,dest,config,dir,attributes,view,read,attributes,null,if,dest,config,dir,attributes,null,set,owner,group,dest,config,dir,dest,config,dir,attributes,try,directory,stream,path,stream,files,new,directory,stream,tmp,config,dir,for,path,src,file,stream,if,files,is,directory,src,file,throw,new,user,exception,directories,not,allowed,in,config,dir,for,plugin,info,get,name,path,dest,file,dest,config,dir,resolve,tmp,config,dir,relativize,src,file,if,files,exists,dest,file,false,files,copy,src,file,dest,file,set,file,attributes,dest,file,if,dest,config,dir,attributes,null,set,owner,group,dest,file,dest,config,dir,attributes,ioutils,rm,tmp,config,dir
InstallPluginCommand -> private void installConfig(PluginInfo info, Path tmpConfigDir, Path destConfigDir) throws Exception;1545528053;Copies the files from {@code tmpConfigDir} into {@code destConfigDir}._Any files existing in both the source and destination will be skipped.;private void installConfig(PluginInfo info, Path tmpConfigDir, Path destConfigDir) throws Exception {_        if (Files.isDirectory(tmpConfigDir) == false) {_            throw new UserException(PLUGIN_MALFORMED,_                "config in plugin " + info.getName() + " is not a directory")__        }__        Files.createDirectories(destConfigDir)__        setFileAttributes(destConfigDir, CONFIG_DIR_PERMS)__        final PosixFileAttributeView destConfigDirAttributesView =_            Files.getFileAttributeView(destConfigDir.getParent(), PosixFileAttributeView.class)__        final PosixFileAttributes destConfigDirAttributes =_            destConfigDirAttributesView != null ? destConfigDirAttributesView.readAttributes() : null__        if (destConfigDirAttributes != null) {_            setOwnerGroup(destConfigDir, destConfigDirAttributes)__        }__        try (DirectoryStream<Path> stream = Files.newDirectoryStream(tmpConfigDir)) {_            for (Path srcFile : stream) {_                if (Files.isDirectory(srcFile)) {_                    throw new UserException(PLUGIN_MALFORMED,_                        "Directories not allowed in config dir for plugin " + info.getName())__                }__                Path destFile = destConfigDir.resolve(tmpConfigDir.relativize(srcFile))__                if (Files.exists(destFile) == false) {_                    Files.copy(srcFile, destFile)__                    setFileAttributes(destFile, CONFIG_FILES_PERMS)__                    if (destConfigDirAttributes != null) {_                        setOwnerGroup(destFile, destConfigDirAttributes)__                    }_                }_            }_        }_        IOUtils.rm(tmpConfigDir)_ _    };copies,the,files,from,code,tmp,config,dir,into,code,dest,config,dir,any,files,existing,in,both,the,source,and,destination,will,be,skipped;private,void,install,config,plugin,info,info,path,tmp,config,dir,path,dest,config,dir,throws,exception,if,files,is,directory,tmp,config,dir,false,throw,new,user,exception,config,in,plugin,info,get,name,is,not,a,directory,files,create,directories,dest,config,dir,set,file,attributes,dest,config,dir,final,posix,file,attribute,view,dest,config,dir,attributes,view,files,get,file,attribute,view,dest,config,dir,get,parent,posix,file,attribute,view,class,final,posix,file,attributes,dest,config,dir,attributes,dest,config,dir,attributes,view,null,dest,config,dir,attributes,view,read,attributes,null,if,dest,config,dir,attributes,null,set,owner,group,dest,config,dir,dest,config,dir,attributes,try,directory,stream,path,stream,files,new,directory,stream,tmp,config,dir,for,path,src,file,stream,if,files,is,directory,src,file,throw,new,user,exception,directories,not,allowed,in,config,dir,for,plugin,info,get,name,path,dest,file,dest,config,dir,resolve,tmp,config,dir,relativize,src,file,if,files,exists,dest,file,false,files,copy,src,file,dest,file,set,file,attributes,dest,file,if,dest,config,dir,attributes,null,set,owner,group,dest,file,dest,config,dir,attributes,ioutils,rm,tmp,config,dir
InstallPluginCommand -> private void installConfig(PluginInfo info, Path tmpConfigDir, Path destConfigDir) throws Exception;1545599625;Copies the files from {@code tmpConfigDir} into {@code destConfigDir}._Any files existing in both the source and destination will be skipped.;private void installConfig(PluginInfo info, Path tmpConfigDir, Path destConfigDir) throws Exception {_        if (Files.isDirectory(tmpConfigDir) == false) {_            throw new UserException(PLUGIN_MALFORMED,_                "config in plugin " + info.getName() + " is not a directory")__        }__        Files.createDirectories(destConfigDir)__        setFileAttributes(destConfigDir, CONFIG_DIR_PERMS)__        final PosixFileAttributeView destConfigDirAttributesView =_            Files.getFileAttributeView(destConfigDir.getParent(), PosixFileAttributeView.class)__        final PosixFileAttributes destConfigDirAttributes =_            destConfigDirAttributesView != null ? destConfigDirAttributesView.readAttributes() : null__        if (destConfigDirAttributes != null) {_            setOwnerGroup(destConfigDir, destConfigDirAttributes)__        }__        try (DirectoryStream<Path> stream = Files.newDirectoryStream(tmpConfigDir)) {_            for (Path srcFile : stream) {_                if (Files.isDirectory(srcFile)) {_                    throw new UserException(PLUGIN_MALFORMED,_                        "Directories not allowed in config dir for plugin " + info.getName())__                }__                Path destFile = destConfigDir.resolve(tmpConfigDir.relativize(srcFile))__                if (Files.exists(destFile) == false) {_                    Files.copy(srcFile, destFile)__                    setFileAttributes(destFile, CONFIG_FILES_PERMS)__                    if (destConfigDirAttributes != null) {_                        setOwnerGroup(destFile, destConfigDirAttributes)__                    }_                }_            }_        }_        IOUtils.rm(tmpConfigDir)_ _    };copies,the,files,from,code,tmp,config,dir,into,code,dest,config,dir,any,files,existing,in,both,the,source,and,destination,will,be,skipped;private,void,install,config,plugin,info,info,path,tmp,config,dir,path,dest,config,dir,throws,exception,if,files,is,directory,tmp,config,dir,false,throw,new,user,exception,config,in,plugin,info,get,name,is,not,a,directory,files,create,directories,dest,config,dir,set,file,attributes,dest,config,dir,final,posix,file,attribute,view,dest,config,dir,attributes,view,files,get,file,attribute,view,dest,config,dir,get,parent,posix,file,attribute,view,class,final,posix,file,attributes,dest,config,dir,attributes,dest,config,dir,attributes,view,null,dest,config,dir,attributes,view,read,attributes,null,if,dest,config,dir,attributes,null,set,owner,group,dest,config,dir,dest,config,dir,attributes,try,directory,stream,path,stream,files,new,directory,stream,tmp,config,dir,for,path,src,file,stream,if,files,is,directory,src,file,throw,new,user,exception,directories,not,allowed,in,config,dir,for,plugin,info,get,name,path,dest,file,dest,config,dir,resolve,tmp,config,dir,relativize,src,file,if,files,exists,dest,file,false,files,copy,src,file,dest,file,set,file,attributes,dest,file,if,dest,config,dir,attributes,null,set,owner,group,dest,file,dest,config,dir,attributes,ioutils,rm,tmp,config,dir
InstallPluginCommand -> @SuppressForbidden(reason = "Make HEAD request using URLConnection.connect()")     boolean urlExists(Terminal terminal, String urlString) throws IOException;1524684173;Returns {@code true} if the given url exists, and {@code false} otherwise.__The given url must be {@code https} and existing means a {@code HEAD} request returns 200.;@SuppressForbidden(reason = "Make HEAD request using URLConnection.connect()")_    boolean urlExists(Terminal terminal, String urlString) throws IOException {_        terminal.println(VERBOSE, "Checking if url exists: " + urlString)__        URL url = new URL(urlString)__        assert "https".equals(url.getProtocol()) : "Only http urls can be checked"__        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection()__        urlConnection.addRequestProperty("User-Agent", "elasticsearch-plugin-installer")__        urlConnection.setRequestMethod("HEAD")__        urlConnection.connect()__        return urlConnection.getResponseCode() == 200__    };returns,code,true,if,the,given,url,exists,and,code,false,otherwise,the,given,url,must,be,code,https,and,existing,means,a,code,head,request,returns,200;suppress,forbidden,reason,make,head,request,using,urlconnection,connect,boolean,url,exists,terminal,terminal,string,url,string,throws,ioexception,terminal,println,verbose,checking,if,url,exists,url,string,url,url,new,url,url,string,assert,https,equals,url,get,protocol,only,http,urls,can,be,checked,http,urlconnection,url,connection,http,urlconnection,url,open,connection,url,connection,add,request,property,user,agent,elasticsearch,plugin,installer,url,connection,set,request,method,head,url,connection,connect,return,url,connection,get,response,code,200
InstallPluginCommand -> @SuppressForbidden(reason = "Make HEAD request using URLConnection.connect()")     boolean urlExists(Terminal terminal, String urlString) throws IOException;1526900724;Returns {@code true} if the given url exists, and {@code false} otherwise.__The given url must be {@code https} and existing means a {@code HEAD} request returns 200.;@SuppressForbidden(reason = "Make HEAD request using URLConnection.connect()")_    boolean urlExists(Terminal terminal, String urlString) throws IOException {_        terminal.println(VERBOSE, "Checking if url exists: " + urlString)__        URL url = new URL(urlString)__        assert "https".equals(url.getProtocol()) : "Only http urls can be checked"__        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection()__        urlConnection.addRequestProperty("User-Agent", "elasticsearch-plugin-installer")__        urlConnection.setRequestMethod("HEAD")__        urlConnection.connect()__        return urlConnection.getResponseCode() == 200__    };returns,code,true,if,the,given,url,exists,and,code,false,otherwise,the,given,url,must,be,code,https,and,existing,means,a,code,head,request,returns,200;suppress,forbidden,reason,make,head,request,using,urlconnection,connect,boolean,url,exists,terminal,terminal,string,url,string,throws,ioexception,terminal,println,verbose,checking,if,url,exists,url,string,url,url,new,url,url,string,assert,https,equals,url,get,protocol,only,http,urls,can,be,checked,http,urlconnection,url,connection,http,urlconnection,url,open,connection,url,connection,add,request,property,user,agent,elasticsearch,plugin,installer,url,connection,set,request,method,head,url,connection,connect,return,url,connection,get,response,code,200
InstallPluginCommand -> @SuppressForbidden(reason = "Make HEAD request using URLConnection.connect()")     boolean urlExists(Terminal terminal, String urlString) throws IOException;1526981569;Returns {@code true} if the given url exists, and {@code false} otherwise.__The given url must be {@code https} and existing means a {@code HEAD} request returns 200.;@SuppressForbidden(reason = "Make HEAD request using URLConnection.connect()")_    boolean urlExists(Terminal terminal, String urlString) throws IOException {_        terminal.println(VERBOSE, "Checking if url exists: " + urlString)__        URL url = new URL(urlString)__        assert "https".equals(url.getProtocol()) : "Only http urls can be checked"__        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection()__        urlConnection.addRequestProperty("User-Agent", "elasticsearch-plugin-installer")__        urlConnection.setRequestMethod("HEAD")__        urlConnection.connect()__        return urlConnection.getResponseCode() == 200__    };returns,code,true,if,the,given,url,exists,and,code,false,otherwise,the,given,url,must,be,code,https,and,existing,means,a,code,head,request,returns,200;suppress,forbidden,reason,make,head,request,using,urlconnection,connect,boolean,url,exists,terminal,terminal,string,url,string,throws,ioexception,terminal,println,verbose,checking,if,url,exists,url,string,url,url,new,url,url,string,assert,https,equals,url,get,protocol,only,http,urls,can,be,checked,http,urlconnection,url,connection,http,urlconnection,url,open,connection,url,connection,add,request,property,user,agent,elasticsearch,plugin,installer,url,connection,set,request,method,head,url,connection,connect,return,url,connection,get,response,code,200
InstallPluginCommand -> @SuppressForbidden(reason = "Make HEAD request using URLConnection.connect()")     boolean urlExists(Terminal terminal, String urlString) throws IOException;1527583663;Returns {@code true} if the given url exists, and {@code false} otherwise.__The given url must be {@code https} and existing means a {@code HEAD} request returns 200.;@SuppressForbidden(reason = "Make HEAD request using URLConnection.connect()")_    boolean urlExists(Terminal terminal, String urlString) throws IOException {_        terminal.println(VERBOSE, "Checking if url exists: " + urlString)__        URL url = new URL(urlString)__        assert "https".equals(url.getProtocol()) : "Only http urls can be checked"__        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection()__        urlConnection.addRequestProperty("User-Agent", "elasticsearch-plugin-installer")__        urlConnection.setRequestMethod("HEAD")__        urlConnection.connect()__        return urlConnection.getResponseCode() == 200__    };returns,code,true,if,the,given,url,exists,and,code,false,otherwise,the,given,url,must,be,code,https,and,existing,means,a,code,head,request,returns,200;suppress,forbidden,reason,make,head,request,using,urlconnection,connect,boolean,url,exists,terminal,terminal,string,url,string,throws,ioexception,terminal,println,verbose,checking,if,url,exists,url,string,url,url,new,url,url,string,assert,https,equals,url,get,protocol,only,http,urls,can,be,checked,http,urlconnection,url,connection,http,urlconnection,url,open,connection,url,connection,add,request,property,user,agent,elasticsearch,plugin,installer,url,connection,set,request,method,head,url,connection,connect,return,url,connection,get,response,code,200
InstallPluginCommand -> @SuppressForbidden(reason = "Make HEAD request using URLConnection.connect()")     boolean urlExists(Terminal terminal, String urlString) throws IOException;1528893677;Returns {@code true} if the given url exists, and {@code false} otherwise.__The given url must be {@code https} and existing means a {@code HEAD} request returns 200.;@SuppressForbidden(reason = "Make HEAD request using URLConnection.connect()")_    boolean urlExists(Terminal terminal, String urlString) throws IOException {_        terminal.println(VERBOSE, "Checking if url exists: " + urlString)__        URL url = new URL(urlString)__        assert "https".equals(url.getProtocol()) : "Only http urls can be checked"__        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection()__        urlConnection.addRequestProperty("User-Agent", "elasticsearch-plugin-installer")__        urlConnection.setRequestMethod("HEAD")__        urlConnection.connect()__        return urlConnection.getResponseCode() == 200__    };returns,code,true,if,the,given,url,exists,and,code,false,otherwise,the,given,url,must,be,code,https,and,existing,means,a,code,head,request,returns,200;suppress,forbidden,reason,make,head,request,using,urlconnection,connect,boolean,url,exists,terminal,terminal,string,url,string,throws,ioexception,terminal,println,verbose,checking,if,url,exists,url,string,url,url,new,url,url,string,assert,https,equals,url,get,protocol,only,http,urls,can,be,checked,http,urlconnection,url,connection,http,urlconnection,url,open,connection,url,connection,add,request,property,user,agent,elasticsearch,plugin,installer,url,connection,set,request,method,head,url,connection,connect,return,url,connection,get,response,code,200
InstallPluginCommand -> @SuppressForbidden(reason = "Make HEAD request using URLConnection.connect()")     boolean urlExists(Terminal terminal, String urlString) throws IOException;1536314350;Returns {@code true} if the given url exists, and {@code false} otherwise.__The given url must be {@code https} and existing means a {@code HEAD} request returns 200.;@SuppressForbidden(reason = "Make HEAD request using URLConnection.connect()")_    boolean urlExists(Terminal terminal, String urlString) throws IOException {_        terminal.println(VERBOSE, "Checking if url exists: " + urlString)__        URL url = new URL(urlString)__        assert "https".equals(url.getProtocol()) : "Only http urls can be checked"__        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection()__        urlConnection.addRequestProperty("User-Agent", "elasticsearch-plugin-installer")__        urlConnection.setRequestMethod("HEAD")__        urlConnection.connect()__        return urlConnection.getResponseCode() == 200__    };returns,code,true,if,the,given,url,exists,and,code,false,otherwise,the,given,url,must,be,code,https,and,existing,means,a,code,head,request,returns,200;suppress,forbidden,reason,make,head,request,using,urlconnection,connect,boolean,url,exists,terminal,terminal,string,url,string,throws,ioexception,terminal,println,verbose,checking,if,url,exists,url,string,url,url,new,url,url,string,assert,https,equals,url,get,protocol,only,http,urls,can,be,checked,http,urlconnection,url,connection,http,urlconnection,url,open,connection,url,connection,add,request,property,user,agent,elasticsearch,plugin,installer,url,connection,set,request,method,head,url,connection,connect,return,url,connection,get,response,code,200
InstallPluginCommand -> @SuppressForbidden(reason = "Make HEAD request using URLConnection.connect()")     boolean urlExists(Terminal terminal, String urlString) throws IOException;1541592065;Returns {@code true} if the given url exists, and {@code false} otherwise.__The given url must be {@code https} and existing means a {@code HEAD} request returns 200.;@SuppressForbidden(reason = "Make HEAD request using URLConnection.connect()")_    boolean urlExists(Terminal terminal, String urlString) throws IOException {_        terminal.println(VERBOSE, "Checking if url exists: " + urlString)__        URL url = new URL(urlString)__        assert "https".equals(url.getProtocol()) : "Only http urls can be checked"__        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection()__        urlConnection.addRequestProperty("User-Agent", "elasticsearch-plugin-installer")__        urlConnection.setRequestMethod("HEAD")__        urlConnection.connect()__        return urlConnection.getResponseCode() == 200__    };returns,code,true,if,the,given,url,exists,and,code,false,otherwise,the,given,url,must,be,code,https,and,existing,means,a,code,head,request,returns,200;suppress,forbidden,reason,make,head,request,using,urlconnection,connect,boolean,url,exists,terminal,terminal,string,url,string,throws,ioexception,terminal,println,verbose,checking,if,url,exists,url,string,url,url,new,url,url,string,assert,https,equals,url,get,protocol,only,http,urls,can,be,checked,http,urlconnection,url,connection,http,urlconnection,url,open,connection,url,connection,add,request,property,user,agent,elasticsearch,plugin,installer,url,connection,set,request,method,head,url,connection,connect,return,url,connection,get,response,code,200
InstallPluginCommand -> @SuppressForbidden(reason = "Make HEAD request using URLConnection.connect()")     boolean urlExists(Terminal terminal, String urlString) throws IOException;1544610279;Returns {@code true} if the given url exists, and {@code false} otherwise.__The given url must be {@code https} and existing means a {@code HEAD} request returns 200.;@SuppressForbidden(reason = "Make HEAD request using URLConnection.connect()")_    boolean urlExists(Terminal terminal, String urlString) throws IOException {_        terminal.println(VERBOSE, "Checking if url exists: " + urlString)__        URL url = new URL(urlString)__        assert "https".equals(url.getProtocol()) : "Only http urls can be checked"__        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection()__        urlConnection.addRequestProperty("User-Agent", "elasticsearch-plugin-installer")__        urlConnection.setRequestMethod("HEAD")__        urlConnection.connect()__        return urlConnection.getResponseCode() == 200__    };returns,code,true,if,the,given,url,exists,and,code,false,otherwise,the,given,url,must,be,code,https,and,existing,means,a,code,head,request,returns,200;suppress,forbidden,reason,make,head,request,using,urlconnection,connect,boolean,url,exists,terminal,terminal,string,url,string,throws,ioexception,terminal,println,verbose,checking,if,url,exists,url,string,url,url,new,url,url,string,assert,https,equals,url,get,protocol,only,http,urls,can,be,checked,http,urlconnection,url,connection,http,urlconnection,url,open,connection,url,connection,add,request,property,user,agent,elasticsearch,plugin,installer,url,connection,set,request,method,head,url,connection,connect,return,url,connection,get,response,code,200
InstallPluginCommand -> @SuppressForbidden(reason = "Make HEAD request using URLConnection.connect()")     boolean urlExists(Terminal terminal, String urlString) throws IOException;1545481309;Returns {@code true} if the given url exists, and {@code false} otherwise.__The given url must be {@code https} and existing means a {@code HEAD} request returns 200.;@SuppressForbidden(reason = "Make HEAD request using URLConnection.connect()")_    boolean urlExists(Terminal terminal, String urlString) throws IOException {_        terminal.println(VERBOSE, "Checking if url exists: " + urlString)__        URL url = new URL(urlString)__        assert "https".equals(url.getProtocol()) : "Only http urls can be checked"__        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection()__        urlConnection.addRequestProperty("User-Agent", "elasticsearch-plugin-installer")__        urlConnection.setRequestMethod("HEAD")__        urlConnection.connect()__        return urlConnection.getResponseCode() == 200__    };returns,code,true,if,the,given,url,exists,and,code,false,otherwise,the,given,url,must,be,code,https,and,existing,means,a,code,head,request,returns,200;suppress,forbidden,reason,make,head,request,using,urlconnection,connect,boolean,url,exists,terminal,terminal,string,url,string,throws,ioexception,terminal,println,verbose,checking,if,url,exists,url,string,url,url,new,url,url,string,assert,https,equals,url,get,protocol,only,http,urls,can,be,checked,http,urlconnection,url,connection,http,urlconnection,url,open,connection,url,connection,add,request,property,user,agent,elasticsearch,plugin,installer,url,connection,set,request,method,head,url,connection,connect,return,url,connection,get,response,code,200
InstallPluginCommand -> @SuppressForbidden(reason = "Make HEAD request using URLConnection.connect()")     boolean urlExists(Terminal terminal, String urlString) throws IOException;1545528053;Returns {@code true} if the given url exists, and {@code false} otherwise.__The given url must be {@code https} and existing means a {@code HEAD} request returns 200.;@SuppressForbidden(reason = "Make HEAD request using URLConnection.connect()")_    boolean urlExists(Terminal terminal, String urlString) throws IOException {_        terminal.println(VERBOSE, "Checking if url exists: " + urlString)__        URL url = new URL(urlString)__        assert "https".equals(url.getProtocol()) : "Only http urls can be checked"__        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection()__        urlConnection.addRequestProperty("User-Agent", "elasticsearch-plugin-installer")__        urlConnection.setRequestMethod("HEAD")__        urlConnection.connect()__        return urlConnection.getResponseCode() == 200__    };returns,code,true,if,the,given,url,exists,and,code,false,otherwise,the,given,url,must,be,code,https,and,existing,means,a,code,head,request,returns,200;suppress,forbidden,reason,make,head,request,using,urlconnection,connect,boolean,url,exists,terminal,terminal,string,url,string,throws,ioexception,terminal,println,verbose,checking,if,url,exists,url,string,url,url,new,url,url,string,assert,https,equals,url,get,protocol,only,http,urls,can,be,checked,http,urlconnection,url,connection,http,urlconnection,url,open,connection,url,connection,add,request,property,user,agent,elasticsearch,plugin,installer,url,connection,set,request,method,head,url,connection,connect,return,url,connection,get,response,code,200
InstallPluginCommand -> @SuppressForbidden(reason = "Make HEAD request using URLConnection.connect()")     boolean urlExists(Terminal terminal, String urlString) throws IOException;1545599625;Returns {@code true} if the given url exists, and {@code false} otherwise.__The given url must be {@code https} and existing means a {@code HEAD} request returns 200.;@SuppressForbidden(reason = "Make HEAD request using URLConnection.connect()")_    boolean urlExists(Terminal terminal, String urlString) throws IOException {_        terminal.println(VERBOSE, "Checking if url exists: " + urlString)__        URL url = new URL(urlString)__        assert "https".equals(url.getProtocol()) : "Only http urls can be checked"__        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection()__        urlConnection.addRequestProperty("User-Agent", "elasticsearch-plugin-installer")__        urlConnection.setRequestMethod("HEAD")__        urlConnection.connect()__        return urlConnection.getResponseCode() == 200__    };returns,code,true,if,the,given,url,exists,and,code,false,otherwise,the,given,url,must,be,code,https,and,existing,means,a,code,head,request,returns,200;suppress,forbidden,reason,make,head,request,using,urlconnection,connect,boolean,url,exists,terminal,terminal,string,url,string,throws,ioexception,terminal,println,verbose,checking,if,url,exists,url,string,url,url,new,url,url,string,assert,https,equals,url,get,protocol,only,http,urls,can,be,checked,http,urlconnection,url,connection,http,urlconnection,url,open,connection,url,connection,add,request,property,user,agent,elasticsearch,plugin,installer,url,connection,set,request,method,head,url,connection,connect,return,url,connection,get,response,code,200
InstallPluginCommand -> private String getElasticUrl(Terminal terminal, String stagingHash, Version version,                                         String pluginId, String platform) throws IOException;1524684173;Returns the url for an official elasticsearch plugin.;private String getElasticUrl(Terminal terminal, String stagingHash, Version version,_                                        String pluginId, String platform) throws IOException {_        final String baseUrl__        if (stagingHash != null) {_            baseUrl = String.format(Locale.ROOT,_                "https://staging.elastic.co/%s-%s/downloads/elasticsearch-plugins/%s", version, stagingHash, pluginId)__        } else {_            baseUrl = String.format(Locale.ROOT,_                "https://artifacts.elastic.co/downloads/elasticsearch-plugins/%s", pluginId)__        }_        final String platformUrl = String.format(Locale.ROOT, "%s/%s-%s-%s.zip", baseUrl, pluginId, platform, version)__        if (urlExists(terminal, platformUrl)) {_            return platformUrl__        }_        return String.format(Locale.ROOT, "%s/%s-%s.zip", baseUrl, pluginId, version)__    };returns,the,url,for,an,official,elasticsearch,plugin;private,string,get,elastic,url,terminal,terminal,string,staging,hash,version,version,string,plugin,id,string,platform,throws,ioexception,final,string,base,url,if,staging,hash,null,base,url,string,format,locale,root,https,staging,elastic,co,s,s,downloads,elasticsearch,plugins,s,version,staging,hash,plugin,id,else,base,url,string,format,locale,root,https,artifacts,elastic,co,downloads,elasticsearch,plugins,s,plugin,id,final,string,platform,url,string,format,locale,root,s,s,s,s,zip,base,url,plugin,id,platform,version,if,url,exists,terminal,platform,url,return,platform,url,return,string,format,locale,root,s,s,s,zip,base,url,plugin,id,version
InstallPluginCommand -> private String getElasticUrl(Terminal terminal, String stagingHash, Version version,                                         String pluginId, String platform) throws IOException;1526900724;Returns the url for an official elasticsearch plugin.;private String getElasticUrl(Terminal terminal, String stagingHash, Version version,_                                        String pluginId, String platform) throws IOException {_        final String baseUrl__        if (stagingHash != null) {_            baseUrl = String.format(Locale.ROOT,_                "https://staging.elastic.co/%s-%s/downloads/elasticsearch-plugins/%s", version, stagingHash, pluginId)__        } else {_            baseUrl = String.format(Locale.ROOT,_                "https://artifacts.elastic.co/downloads/elasticsearch-plugins/%s", pluginId)__        }_        final String platformUrl = String.format(Locale.ROOT, "%s/%s-%s-%s.zip", baseUrl, pluginId, platform, version)__        if (urlExists(terminal, platformUrl)) {_            return platformUrl__        }_        return String.format(Locale.ROOT, "%s/%s-%s.zip", baseUrl, pluginId, version)__    };returns,the,url,for,an,official,elasticsearch,plugin;private,string,get,elastic,url,terminal,terminal,string,staging,hash,version,version,string,plugin,id,string,platform,throws,ioexception,final,string,base,url,if,staging,hash,null,base,url,string,format,locale,root,https,staging,elastic,co,s,s,downloads,elasticsearch,plugins,s,version,staging,hash,plugin,id,else,base,url,string,format,locale,root,https,artifacts,elastic,co,downloads,elasticsearch,plugins,s,plugin,id,final,string,platform,url,string,format,locale,root,s,s,s,s,zip,base,url,plugin,id,platform,version,if,url,exists,terminal,platform,url,return,platform,url,return,string,format,locale,root,s,s,s,zip,base,url,plugin,id,version
InstallPluginCommand -> private void movePlugin(Path tmpRoot, Path destination) throws IOException;1524684173;Moves the plugin directory into its final destination. *;private void movePlugin(Path tmpRoot, Path destination) throws IOException {_        Files.move(tmpRoot, destination, StandardCopyOption.ATOMIC_MOVE)__        Files.walkFileTree(destination, new SimpleFileVisitor<Path>() {_            @Override_            public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) throws IOException {_                if ("bin".equals(file.getParent().getFileName().toString())) {_                    setFileAttributes(file, BIN_FILES_PERMS)__                } else {_                    setFileAttributes(file, PLUGIN_FILES_PERMS)__                }_                return FileVisitResult.CONTINUE__            }__            @Override_            public FileVisitResult postVisitDirectory(final Path dir, final IOException exc) throws IOException {_                setFileAttributes(dir, PLUGIN_DIR_PERMS)__                return FileVisitResult.CONTINUE__            }_        })__    };moves,the,plugin,directory,into,its,final,destination;private,void,move,plugin,path,tmp,root,path,destination,throws,ioexception,files,move,tmp,root,destination,standard,copy,option,files,walk,file,tree,destination,new,simple,file,visitor,path,override,public,file,visit,result,visit,file,final,path,file,final,basic,file,attributes,attrs,throws,ioexception,if,bin,equals,file,get,parent,get,file,name,to,string,set,file,attributes,file,else,set,file,attributes,file,return,file,visit,result,continue,override,public,file,visit,result,post,visit,directory,final,path,dir,final,ioexception,exc,throws,ioexception,set,file,attributes,dir,return,file,visit,result,continue
InstallPluginCommand -> private void movePlugin(Path tmpRoot, Path destination) throws IOException;1526900724;Moves the plugin directory into its final destination. *;private void movePlugin(Path tmpRoot, Path destination) throws IOException {_        Files.move(tmpRoot, destination, StandardCopyOption.ATOMIC_MOVE)__        Files.walkFileTree(destination, new SimpleFileVisitor<Path>() {_            @Override_            public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) throws IOException {_                if ("bin".equals(file.getParent().getFileName().toString())) {_                    setFileAttributes(file, BIN_FILES_PERMS)__                } else {_                    setFileAttributes(file, PLUGIN_FILES_PERMS)__                }_                return FileVisitResult.CONTINUE__            }__            @Override_            public FileVisitResult postVisitDirectory(final Path dir, final IOException exc) throws IOException {_                setFileAttributes(dir, PLUGIN_DIR_PERMS)__                return FileVisitResult.CONTINUE__            }_        })__    };moves,the,plugin,directory,into,its,final,destination;private,void,move,plugin,path,tmp,root,path,destination,throws,ioexception,files,move,tmp,root,destination,standard,copy,option,files,walk,file,tree,destination,new,simple,file,visitor,path,override,public,file,visit,result,visit,file,final,path,file,final,basic,file,attributes,attrs,throws,ioexception,if,bin,equals,file,get,parent,get,file,name,to,string,set,file,attributes,file,else,set,file,attributes,file,return,file,visit,result,continue,override,public,file,visit,result,post,visit,directory,final,path,dir,final,ioexception,exc,throws,ioexception,set,file,attributes,dir,return,file,visit,result,continue
InstallPluginCommand -> private void movePlugin(Path tmpRoot, Path destination) throws IOException;1526981569;Moves the plugin directory into its final destination. *;private void movePlugin(Path tmpRoot, Path destination) throws IOException {_        Files.move(tmpRoot, destination, StandardCopyOption.ATOMIC_MOVE)__        Files.walkFileTree(destination, new SimpleFileVisitor<Path>() {_            @Override_            public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) throws IOException {_                if ("bin".equals(file.getParent().getFileName().toString())) {_                    setFileAttributes(file, BIN_FILES_PERMS)__                } else {_                    setFileAttributes(file, PLUGIN_FILES_PERMS)__                }_                return FileVisitResult.CONTINUE__            }__            @Override_            public FileVisitResult postVisitDirectory(final Path dir, final IOException exc) throws IOException {_                setFileAttributes(dir, PLUGIN_DIR_PERMS)__                return FileVisitResult.CONTINUE__            }_        })__    };moves,the,plugin,directory,into,its,final,destination;private,void,move,plugin,path,tmp,root,path,destination,throws,ioexception,files,move,tmp,root,destination,standard,copy,option,files,walk,file,tree,destination,new,simple,file,visitor,path,override,public,file,visit,result,visit,file,final,path,file,final,basic,file,attributes,attrs,throws,ioexception,if,bin,equals,file,get,parent,get,file,name,to,string,set,file,attributes,file,else,set,file,attributes,file,return,file,visit,result,continue,override,public,file,visit,result,post,visit,directory,final,path,dir,final,ioexception,exc,throws,ioexception,set,file,attributes,dir,return,file,visit,result,continue
InstallPluginCommand -> private void movePlugin(Path tmpRoot, Path destination) throws IOException;1527583663;Moves the plugin directory into its final destination. *;private void movePlugin(Path tmpRoot, Path destination) throws IOException {_        Files.move(tmpRoot, destination, StandardCopyOption.ATOMIC_MOVE)__        Files.walkFileTree(destination, new SimpleFileVisitor<Path>() {_            @Override_            public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) throws IOException {_                if ("bin".equals(file.getParent().getFileName().toString())) {_                    setFileAttributes(file, BIN_FILES_PERMS)__                } else {_                    setFileAttributes(file, PLUGIN_FILES_PERMS)__                }_                return FileVisitResult.CONTINUE__            }__            @Override_            public FileVisitResult postVisitDirectory(final Path dir, final IOException exc) throws IOException {_                setFileAttributes(dir, PLUGIN_DIR_PERMS)__                return FileVisitResult.CONTINUE__            }_        })__    };moves,the,plugin,directory,into,its,final,destination;private,void,move,plugin,path,tmp,root,path,destination,throws,ioexception,files,move,tmp,root,destination,standard,copy,option,files,walk,file,tree,destination,new,simple,file,visitor,path,override,public,file,visit,result,visit,file,final,path,file,final,basic,file,attributes,attrs,throws,ioexception,if,bin,equals,file,get,parent,get,file,name,to,string,set,file,attributes,file,else,set,file,attributes,file,return,file,visit,result,continue,override,public,file,visit,result,post,visit,directory,final,path,dir,final,ioexception,exc,throws,ioexception,set,file,attributes,dir,return,file,visit,result,continue
InstallPluginCommand -> private void movePlugin(Path tmpRoot, Path destination) throws IOException;1528893677;Moves the plugin directory into its final destination. *;private void movePlugin(Path tmpRoot, Path destination) throws IOException {_        Files.move(tmpRoot, destination, StandardCopyOption.ATOMIC_MOVE)__        Files.walkFileTree(destination, new SimpleFileVisitor<Path>() {_            @Override_            public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) throws IOException {_                if ("bin".equals(file.getParent().getFileName().toString())) {_                    setFileAttributes(file, BIN_FILES_PERMS)__                } else {_                    setFileAttributes(file, PLUGIN_FILES_PERMS)__                }_                return FileVisitResult.CONTINUE__            }__            @Override_            public FileVisitResult postVisitDirectory(final Path dir, final IOException exc) throws IOException {_                setFileAttributes(dir, PLUGIN_DIR_PERMS)__                return FileVisitResult.CONTINUE__            }_        })__    };moves,the,plugin,directory,into,its,final,destination;private,void,move,plugin,path,tmp,root,path,destination,throws,ioexception,files,move,tmp,root,destination,standard,copy,option,files,walk,file,tree,destination,new,simple,file,visitor,path,override,public,file,visit,result,visit,file,final,path,file,final,basic,file,attributes,attrs,throws,ioexception,if,bin,equals,file,get,parent,get,file,name,to,string,set,file,attributes,file,else,set,file,attributes,file,return,file,visit,result,continue,override,public,file,visit,result,post,visit,directory,final,path,dir,final,ioexception,exc,throws,ioexception,set,file,attributes,dir,return,file,visit,result,continue
InstallPluginCommand -> private void movePlugin(Path tmpRoot, Path destination) throws IOException;1536314350;Moves the plugin directory into its final destination. *;private void movePlugin(Path tmpRoot, Path destination) throws IOException {_        Files.move(tmpRoot, destination, StandardCopyOption.ATOMIC_MOVE)__        Files.walkFileTree(destination, new SimpleFileVisitor<Path>() {_            @Override_            public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) throws IOException {_                if ("bin".equals(file.getParent().getFileName().toString())) {_                    setFileAttributes(file, BIN_FILES_PERMS)__                } else {_                    setFileAttributes(file, PLUGIN_FILES_PERMS)__                }_                return FileVisitResult.CONTINUE__            }__            @Override_            public FileVisitResult postVisitDirectory(final Path dir, final IOException exc) throws IOException {_                setFileAttributes(dir, PLUGIN_DIR_PERMS)__                return FileVisitResult.CONTINUE__            }_        })__    };moves,the,plugin,directory,into,its,final,destination;private,void,move,plugin,path,tmp,root,path,destination,throws,ioexception,files,move,tmp,root,destination,standard,copy,option,files,walk,file,tree,destination,new,simple,file,visitor,path,override,public,file,visit,result,visit,file,final,path,file,final,basic,file,attributes,attrs,throws,ioexception,if,bin,equals,file,get,parent,get,file,name,to,string,set,file,attributes,file,else,set,file,attributes,file,return,file,visit,result,continue,override,public,file,visit,result,post,visit,directory,final,path,dir,final,ioexception,exc,throws,ioexception,set,file,attributes,dir,return,file,visit,result,continue
InstallPluginCommand -> private void movePlugin(Path tmpRoot, Path destination) throws IOException;1541592065;Moves the plugin directory into its final destination. *;private void movePlugin(Path tmpRoot, Path destination) throws IOException {_        Files.move(tmpRoot, destination, StandardCopyOption.ATOMIC_MOVE)__        Files.walkFileTree(destination, new SimpleFileVisitor<Path>() {_            @Override_            public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) throws IOException {_                if ("bin".equals(file.getParent().getFileName().toString())) {_                    setFileAttributes(file, BIN_FILES_PERMS)__                } else {_                    setFileAttributes(file, PLUGIN_FILES_PERMS)__                }_                return FileVisitResult.CONTINUE__            }__            @Override_            public FileVisitResult postVisitDirectory(final Path dir, final IOException exc) throws IOException {_                setFileAttributes(dir, PLUGIN_DIR_PERMS)__                return FileVisitResult.CONTINUE__            }_        })__    };moves,the,plugin,directory,into,its,final,destination;private,void,move,plugin,path,tmp,root,path,destination,throws,ioexception,files,move,tmp,root,destination,standard,copy,option,files,walk,file,tree,destination,new,simple,file,visitor,path,override,public,file,visit,result,visit,file,final,path,file,final,basic,file,attributes,attrs,throws,ioexception,if,bin,equals,file,get,parent,get,file,name,to,string,set,file,attributes,file,else,set,file,attributes,file,return,file,visit,result,continue,override,public,file,visit,result,post,visit,directory,final,path,dir,final,ioexception,exc,throws,ioexception,set,file,attributes,dir,return,file,visit,result,continue
InstallPluginCommand -> private void movePlugin(Path tmpRoot, Path destination) throws IOException;1544610279;Moves the plugin directory into its final destination. *;private void movePlugin(Path tmpRoot, Path destination) throws IOException {_        Files.move(tmpRoot, destination, StandardCopyOption.ATOMIC_MOVE)__        Files.walkFileTree(destination, new SimpleFileVisitor<Path>() {_            @Override_            public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) throws IOException {_                if ("bin".equals(file.getParent().getFileName().toString())) {_                    setFileAttributes(file, BIN_FILES_PERMS)__                } else {_                    setFileAttributes(file, PLUGIN_FILES_PERMS)__                }_                return FileVisitResult.CONTINUE__            }__            @Override_            public FileVisitResult postVisitDirectory(final Path dir, final IOException exc) throws IOException {_                setFileAttributes(dir, PLUGIN_DIR_PERMS)__                return FileVisitResult.CONTINUE__            }_        })__    };moves,the,plugin,directory,into,its,final,destination;private,void,move,plugin,path,tmp,root,path,destination,throws,ioexception,files,move,tmp,root,destination,standard,copy,option,files,walk,file,tree,destination,new,simple,file,visitor,path,override,public,file,visit,result,visit,file,final,path,file,final,basic,file,attributes,attrs,throws,ioexception,if,bin,equals,file,get,parent,get,file,name,to,string,set,file,attributes,file,else,set,file,attributes,file,return,file,visit,result,continue,override,public,file,visit,result,post,visit,directory,final,path,dir,final,ioexception,exc,throws,ioexception,set,file,attributes,dir,return,file,visit,result,continue
InstallPluginCommand -> private void movePlugin(Path tmpRoot, Path destination) throws IOException;1545481309;Moves the plugin directory into its final destination. *;private void movePlugin(Path tmpRoot, Path destination) throws IOException {_        Files.move(tmpRoot, destination, StandardCopyOption.ATOMIC_MOVE)__        Files.walkFileTree(destination, new SimpleFileVisitor<Path>() {_            @Override_            public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) throws IOException {_                if ("bin".equals(file.getParent().getFileName().toString())) {_                    setFileAttributes(file, BIN_FILES_PERMS)__                } else {_                    setFileAttributes(file, PLUGIN_FILES_PERMS)__                }_                return FileVisitResult.CONTINUE__            }__            @Override_            public FileVisitResult postVisitDirectory(final Path dir, final IOException exc) throws IOException {_                setFileAttributes(dir, PLUGIN_DIR_PERMS)__                return FileVisitResult.CONTINUE__            }_        })__    };moves,the,plugin,directory,into,its,final,destination;private,void,move,plugin,path,tmp,root,path,destination,throws,ioexception,files,move,tmp,root,destination,standard,copy,option,files,walk,file,tree,destination,new,simple,file,visitor,path,override,public,file,visit,result,visit,file,final,path,file,final,basic,file,attributes,attrs,throws,ioexception,if,bin,equals,file,get,parent,get,file,name,to,string,set,file,attributes,file,else,set,file,attributes,file,return,file,visit,result,continue,override,public,file,visit,result,post,visit,directory,final,path,dir,final,ioexception,exc,throws,ioexception,set,file,attributes,dir,return,file,visit,result,continue
InstallPluginCommand -> private void movePlugin(Path tmpRoot, Path destination) throws IOException;1545528053;Moves the plugin directory into its final destination. *;private void movePlugin(Path tmpRoot, Path destination) throws IOException {_        Files.move(tmpRoot, destination, StandardCopyOption.ATOMIC_MOVE)__        Files.walkFileTree(destination, new SimpleFileVisitor<Path>() {_            @Override_            public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) throws IOException {_                if ("bin".equals(file.getParent().getFileName().toString())) {_                    setFileAttributes(file, BIN_FILES_PERMS)__                } else {_                    setFileAttributes(file, PLUGIN_FILES_PERMS)__                }_                return FileVisitResult.CONTINUE__            }__            @Override_            public FileVisitResult postVisitDirectory(final Path dir, final IOException exc) throws IOException {_                setFileAttributes(dir, PLUGIN_DIR_PERMS)__                return FileVisitResult.CONTINUE__            }_        })__    };moves,the,plugin,directory,into,its,final,destination;private,void,move,plugin,path,tmp,root,path,destination,throws,ioexception,files,move,tmp,root,destination,standard,copy,option,files,walk,file,tree,destination,new,simple,file,visitor,path,override,public,file,visit,result,visit,file,final,path,file,final,basic,file,attributes,attrs,throws,ioexception,if,bin,equals,file,get,parent,get,file,name,to,string,set,file,attributes,file,else,set,file,attributes,file,return,file,visit,result,continue,override,public,file,visit,result,post,visit,directory,final,path,dir,final,ioexception,exc,throws,ioexception,set,file,attributes,dir,return,file,visit,result,continue
InstallPluginCommand -> private void movePlugin(Path tmpRoot, Path destination) throws IOException;1545599625;Moves the plugin directory into its final destination. *;private void movePlugin(Path tmpRoot, Path destination) throws IOException {_        Files.move(tmpRoot, destination, StandardCopyOption.ATOMIC_MOVE)__        Files.walkFileTree(destination, new SimpleFileVisitor<Path>() {_            @Override_            public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) throws IOException {_                if ("bin".equals(file.getParent().getFileName().toString())) {_                    setFileAttributes(file, BIN_FILES_PERMS)__                } else {_                    setFileAttributes(file, PLUGIN_FILES_PERMS)__                }_                return FileVisitResult.CONTINUE__            }__            @Override_            public FileVisitResult postVisitDirectory(final Path dir, final IOException exc) throws IOException {_                setFileAttributes(dir, PLUGIN_DIR_PERMS)__                return FileVisitResult.CONTINUE__            }_        })__    };moves,the,plugin,directory,into,its,final,destination;private,void,move,plugin,path,tmp,root,path,destination,throws,ioexception,files,move,tmp,root,destination,standard,copy,option,files,walk,file,tree,destination,new,simple,file,visitor,path,override,public,file,visit,result,visit,file,final,path,file,final,basic,file,attributes,attrs,throws,ioexception,if,bin,equals,file,get,parent,get,file,name,to,string,set,file,attributes,file,else,set,file,attributes,file,return,file,visit,result,continue,override,public,file,visit,result,post,visit,directory,final,path,dir,final,ioexception,exc,throws,ioexception,set,file,attributes,dir,return,file,visit,result,continue
InstallPluginCommand -> void verifySignature(final Path zip, final String urlString) throws IOException, PGPException;1527583663;Verify the signature of the downloaded plugin ZIP. The signature is obtained from the source of the downloaded plugin by appending_".asc" to the URL. It is expected that the plugin is signed with the Elastic signing key with ID D27D666CD88E42B4.__@param zip       the path to the downloaded plugin ZIP_@param urlString the URL source of the downloade plugin ZIP_@throws IOException  if an I/O exception occurs reading from various input streams_@throws PGPException if the PGP implementation throws an internal exception during verification;void verifySignature(final Path zip, final String urlString) throws IOException, PGPException {_        final String ascUrlString = urlString + ".asc"__        final URL ascUrl = openUrl(ascUrlString)__        try (_                _                InputStream fin = pluginZipInputStream(zip)__                _                InputStream sin = urlOpenStream(ascUrl)__                _                InputStream pin = getPublicKey()) {_            final JcaPGPObjectFactory factory = new JcaPGPObjectFactory(PGPUtil.getDecoderStream(sin))__            final PGPSignature signature = ((PGPSignatureList) factory.nextObject()).get(0)___            _            final String keyId = Long.toHexString(signature.getKeyID()).toUpperCase(Locale.ROOT)__            if (getPublicKeyId().equals(keyId) == false) {_                throw new IllegalStateException("key id [" + keyId + "] does not match expected key id [" + getPublicKeyId() + "]")__            }__            _            final List<String> lines =_                    new BufferedReader(new InputStreamReader(pin, StandardCharsets.UTF_8)).lines().collect(Collectors.toList())__            _            int index = 1__            for (_ index < lines.size()_ index++) {_                if (lines.get(index).matches(".*: .*") == false && lines.get(index).matches("\\s*") == false) {_                    break__                }_            }_            final byte[] armoredData =_                    lines.subList(index, lines.size() - 1).stream().collect(Collectors.joining("\n")).getBytes(StandardCharsets.UTF_8)__            final InputStream ain = Base64.getMimeDecoder().wrap(new ByteArrayInputStream(armoredData))__            final PGPPublicKeyRingCollection collection = new PGPPublicKeyRingCollection(ain, new JcaKeyFingerprintCalculator())__            final PGPPublicKey key = collection.getPublicKey(signature.getKeyID())__            signature.init(new JcaPGPContentVerifierBuilderProvider().setProvider(new BouncyCastleProvider()), key)__            final byte[] buffer = new byte[1024]__            int read__            while ((read = fin.read(buffer)) != -1) {_                signature.update(buffer, 0, read)__            }__            _            if (signature.verify() == false) {_                throw new IllegalStateException("signature verification for [" + urlString + "] failed")__            }_        }_    };verify,the,signature,of,the,downloaded,plugin,zip,the,signature,is,obtained,from,the,source,of,the,downloaded,plugin,by,appending,asc,to,the,url,it,is,expected,that,the,plugin,is,signed,with,the,elastic,signing,key,with,id,d27d666cd88e42b4,param,zip,the,path,to,the,downloaded,plugin,zip,param,url,string,the,url,source,of,the,downloade,plugin,zip,throws,ioexception,if,an,i,o,exception,occurs,reading,from,various,input,streams,throws,pgpexception,if,the,pgp,implementation,throws,an,internal,exception,during,verification;void,verify,signature,final,path,zip,final,string,url,string,throws,ioexception,pgpexception,final,string,asc,url,string,url,string,asc,final,url,asc,url,open,url,asc,url,string,try,input,stream,fin,plugin,zip,input,stream,zip,input,stream,sin,url,open,stream,asc,url,input,stream,pin,get,public,key,final,jca,pgpobject,factory,factory,new,jca,pgpobject,factory,pgputil,get,decoder,stream,sin,final,pgpsignature,signature,pgpsignature,list,factory,next,object,get,0,final,string,key,id,long,to,hex,string,signature,get,key,id,to,upper,case,locale,root,if,get,public,key,id,equals,key,id,false,throw,new,illegal,state,exception,key,id,key,id,does,not,match,expected,key,id,get,public,key,id,final,list,string,lines,new,buffered,reader,new,input,stream,reader,pin,standard,charsets,lines,collect,collectors,to,list,int,index,1,for,index,lines,size,index,if,lines,get,index,matches,false,lines,get,index,matches,s,false,break,final,byte,armored,data,lines,sub,list,index,lines,size,1,stream,collect,collectors,joining,n,get,bytes,standard,charsets,final,input,stream,ain,base64,get,mime,decoder,wrap,new,byte,array,input,stream,armored,data,final,pgppublic,key,ring,collection,collection,new,pgppublic,key,ring,collection,ain,new,jca,key,fingerprint,calculator,final,pgppublic,key,key,collection,get,public,key,signature,get,key,id,signature,init,new,jca,pgpcontent,verifier,builder,provider,set,provider,new,bouncy,castle,provider,key,final,byte,buffer,new,byte,1024,int,read,while,read,fin,read,buffer,1,signature,update,buffer,0,read,if,signature,verify,false,throw,new,illegal,state,exception,signature,verification,for,url,string,failed
InstallPluginCommand -> void verifySignature(final Path zip, final String urlString) throws IOException, PGPException;1528893677;Verify the signature of the downloaded plugin ZIP. The signature is obtained from the source of the downloaded plugin by appending_".asc" to the URL. It is expected that the plugin is signed with the Elastic signing key with ID D27D666CD88E42B4.__@param zip       the path to the downloaded plugin ZIP_@param urlString the URL source of the downloade plugin ZIP_@throws IOException  if an I/O exception occurs reading from various input streams_@throws PGPException if the PGP implementation throws an internal exception during verification;void verifySignature(final Path zip, final String urlString) throws IOException, PGPException {_        final String ascUrlString = urlString + ".asc"__        final URL ascUrl = openUrl(ascUrlString)__        try (_                _                InputStream fin = pluginZipInputStream(zip)__                _                InputStream sin = urlOpenStream(ascUrl)__                _                InputStream ain = new ArmoredInputStream(getPublicKey())) {_            final JcaPGPObjectFactory factory = new JcaPGPObjectFactory(PGPUtil.getDecoderStream(sin))__            final PGPSignature signature = ((PGPSignatureList) factory.nextObject()).get(0)___            _            final String keyId = Long.toHexString(signature.getKeyID()).toUpperCase(Locale.ROOT)__            if (getPublicKeyId().equals(keyId) == false) {_                throw new IllegalStateException("key id [" + keyId + "] does not match expected key id [" + getPublicKeyId() + "]")__            }__            _            final PGPPublicKeyRingCollection collection = new PGPPublicKeyRingCollection(ain, new JcaKeyFingerprintCalculator())__            final PGPPublicKey key = collection.getPublicKey(signature.getKeyID())__            signature.init(new JcaPGPContentVerifierBuilderProvider().setProvider(new BouncyCastleProvider()), key)__            final byte[] buffer = new byte[1024]__            int read__            while ((read = fin.read(buffer)) != -1) {_                signature.update(buffer, 0, read)__            }__            _            if (signature.verify() == false) {_                throw new IllegalStateException("signature verification for [" + urlString + "] failed")__            }_        }_    };verify,the,signature,of,the,downloaded,plugin,zip,the,signature,is,obtained,from,the,source,of,the,downloaded,plugin,by,appending,asc,to,the,url,it,is,expected,that,the,plugin,is,signed,with,the,elastic,signing,key,with,id,d27d666cd88e42b4,param,zip,the,path,to,the,downloaded,plugin,zip,param,url,string,the,url,source,of,the,downloade,plugin,zip,throws,ioexception,if,an,i,o,exception,occurs,reading,from,various,input,streams,throws,pgpexception,if,the,pgp,implementation,throws,an,internal,exception,during,verification;void,verify,signature,final,path,zip,final,string,url,string,throws,ioexception,pgpexception,final,string,asc,url,string,url,string,asc,final,url,asc,url,open,url,asc,url,string,try,input,stream,fin,plugin,zip,input,stream,zip,input,stream,sin,url,open,stream,asc,url,input,stream,ain,new,armored,input,stream,get,public,key,final,jca,pgpobject,factory,factory,new,jca,pgpobject,factory,pgputil,get,decoder,stream,sin,final,pgpsignature,signature,pgpsignature,list,factory,next,object,get,0,final,string,key,id,long,to,hex,string,signature,get,key,id,to,upper,case,locale,root,if,get,public,key,id,equals,key,id,false,throw,new,illegal,state,exception,key,id,key,id,does,not,match,expected,key,id,get,public,key,id,final,pgppublic,key,ring,collection,collection,new,pgppublic,key,ring,collection,ain,new,jca,key,fingerprint,calculator,final,pgppublic,key,key,collection,get,public,key,signature,get,key,id,signature,init,new,jca,pgpcontent,verifier,builder,provider,set,provider,new,bouncy,castle,provider,key,final,byte,buffer,new,byte,1024,int,read,while,read,fin,read,buffer,1,signature,update,buffer,0,read,if,signature,verify,false,throw,new,illegal,state,exception,signature,verification,for,url,string,failed
InstallPluginCommand -> void verifySignature(final Path zip, final String urlString) throws IOException, PGPException;1536314350;Verify the signature of the downloaded plugin ZIP. The signature is obtained from the source of the downloaded plugin by appending_".asc" to the URL. It is expected that the plugin is signed with the Elastic signing key with ID D27D666CD88E42B4.__@param zip       the path to the downloaded plugin ZIP_@param urlString the URL source of the downloade plugin ZIP_@throws IOException  if an I/O exception occurs reading from various input streams_@throws PGPException if the PGP implementation throws an internal exception during verification;void verifySignature(final Path zip, final String urlString) throws IOException, PGPException {_        final String ascUrlString = urlString + ".asc"__        final URL ascUrl = openUrl(ascUrlString)__        try (_                _                InputStream fin = pluginZipInputStream(zip)__                _                InputStream sin = urlOpenStream(ascUrl)__                _                InputStream ain = new ArmoredInputStream(getPublicKey())) {_            final JcaPGPObjectFactory factory = new JcaPGPObjectFactory(PGPUtil.getDecoderStream(sin))__            final PGPSignature signature = ((PGPSignatureList) factory.nextObject()).get(0)___            _            final String keyId = Long.toHexString(signature.getKeyID()).toUpperCase(Locale.ROOT)__            if (getPublicKeyId().equals(keyId) == false) {_                throw new IllegalStateException("key id [" + keyId + "] does not match expected key id [" + getPublicKeyId() + "]")__            }__            _            final PGPPublicKeyRingCollection collection = new PGPPublicKeyRingCollection(ain, new JcaKeyFingerprintCalculator())__            final PGPPublicKey key = collection.getPublicKey(signature.getKeyID())__            signature.init(new JcaPGPContentVerifierBuilderProvider().setProvider(new BouncyCastleProvider()), key)__            final byte[] buffer = new byte[1024]__            int read__            while ((read = fin.read(buffer)) != -1) {_                signature.update(buffer, 0, read)__            }__            _            if (signature.verify() == false) {_                throw new IllegalStateException("signature verification for [" + urlString + "] failed")__            }_        }_    };verify,the,signature,of,the,downloaded,plugin,zip,the,signature,is,obtained,from,the,source,of,the,downloaded,plugin,by,appending,asc,to,the,url,it,is,expected,that,the,plugin,is,signed,with,the,elastic,signing,key,with,id,d27d666cd88e42b4,param,zip,the,path,to,the,downloaded,plugin,zip,param,url,string,the,url,source,of,the,downloade,plugin,zip,throws,ioexception,if,an,i,o,exception,occurs,reading,from,various,input,streams,throws,pgpexception,if,the,pgp,implementation,throws,an,internal,exception,during,verification;void,verify,signature,final,path,zip,final,string,url,string,throws,ioexception,pgpexception,final,string,asc,url,string,url,string,asc,final,url,asc,url,open,url,asc,url,string,try,input,stream,fin,plugin,zip,input,stream,zip,input,stream,sin,url,open,stream,asc,url,input,stream,ain,new,armored,input,stream,get,public,key,final,jca,pgpobject,factory,factory,new,jca,pgpobject,factory,pgputil,get,decoder,stream,sin,final,pgpsignature,signature,pgpsignature,list,factory,next,object,get,0,final,string,key,id,long,to,hex,string,signature,get,key,id,to,upper,case,locale,root,if,get,public,key,id,equals,key,id,false,throw,new,illegal,state,exception,key,id,key,id,does,not,match,expected,key,id,get,public,key,id,final,pgppublic,key,ring,collection,collection,new,pgppublic,key,ring,collection,ain,new,jca,key,fingerprint,calculator,final,pgppublic,key,key,collection,get,public,key,signature,get,key,id,signature,init,new,jca,pgpcontent,verifier,builder,provider,set,provider,new,bouncy,castle,provider,key,final,byte,buffer,new,byte,1024,int,read,while,read,fin,read,buffer,1,signature,update,buffer,0,read,if,signature,verify,false,throw,new,illegal,state,exception,signature,verification,for,url,string,failed
InstallPluginCommand -> void verifySignature(final Path zip, final String urlString) throws IOException, PGPException;1541592065;Verify the signature of the downloaded plugin ZIP. The signature is obtained from the source of the downloaded plugin by appending_".asc" to the URL. It is expected that the plugin is signed with the Elastic signing key with ID D27D666CD88E42B4.__@param zip       the path to the downloaded plugin ZIP_@param urlString the URL source of the downloade plugin ZIP_@throws IOException  if an I/O exception occurs reading from various input streams_@throws PGPException if the PGP implementation throws an internal exception during verification;void verifySignature(final Path zip, final String urlString) throws IOException, PGPException {_        final String ascUrlString = urlString + ".asc"__        final URL ascUrl = openUrl(ascUrlString)__        try (_                _                InputStream fin = pluginZipInputStream(zip)__                _                InputStream sin = urlOpenStream(ascUrl)__                _                InputStream ain = new ArmoredInputStream(getPublicKey())) {_            final JcaPGPObjectFactory factory = new JcaPGPObjectFactory(PGPUtil.getDecoderStream(sin))__            final PGPSignature signature = ((PGPSignatureList) factory.nextObject()).get(0)___            _            final String keyId = Long.toHexString(signature.getKeyID()).toUpperCase(Locale.ROOT)__            if (getPublicKeyId().equals(keyId) == false) {_                throw new IllegalStateException("key id [" + keyId + "] does not match expected key id [" + getPublicKeyId() + "]")__            }__            _            final PGPPublicKeyRingCollection collection = new PGPPublicKeyRingCollection(ain, new JcaKeyFingerprintCalculator())__            final PGPPublicKey key = collection.getPublicKey(signature.getKeyID())__            signature.init(new JcaPGPContentVerifierBuilderProvider().setProvider(new BouncyCastleProvider()), key)__            final byte[] buffer = new byte[1024]__            int read__            while ((read = fin.read(buffer)) != -1) {_                signature.update(buffer, 0, read)__            }__            _            if (signature.verify() == false) {_                throw new IllegalStateException("signature verification for [" + urlString + "] failed")__            }_        }_    };verify,the,signature,of,the,downloaded,plugin,zip,the,signature,is,obtained,from,the,source,of,the,downloaded,plugin,by,appending,asc,to,the,url,it,is,expected,that,the,plugin,is,signed,with,the,elastic,signing,key,with,id,d27d666cd88e42b4,param,zip,the,path,to,the,downloaded,plugin,zip,param,url,string,the,url,source,of,the,downloade,plugin,zip,throws,ioexception,if,an,i,o,exception,occurs,reading,from,various,input,streams,throws,pgpexception,if,the,pgp,implementation,throws,an,internal,exception,during,verification;void,verify,signature,final,path,zip,final,string,url,string,throws,ioexception,pgpexception,final,string,asc,url,string,url,string,asc,final,url,asc,url,open,url,asc,url,string,try,input,stream,fin,plugin,zip,input,stream,zip,input,stream,sin,url,open,stream,asc,url,input,stream,ain,new,armored,input,stream,get,public,key,final,jca,pgpobject,factory,factory,new,jca,pgpobject,factory,pgputil,get,decoder,stream,sin,final,pgpsignature,signature,pgpsignature,list,factory,next,object,get,0,final,string,key,id,long,to,hex,string,signature,get,key,id,to,upper,case,locale,root,if,get,public,key,id,equals,key,id,false,throw,new,illegal,state,exception,key,id,key,id,does,not,match,expected,key,id,get,public,key,id,final,pgppublic,key,ring,collection,collection,new,pgppublic,key,ring,collection,ain,new,jca,key,fingerprint,calculator,final,pgppublic,key,key,collection,get,public,key,signature,get,key,id,signature,init,new,jca,pgpcontent,verifier,builder,provider,set,provider,new,bouncy,castle,provider,key,final,byte,buffer,new,byte,1024,int,read,while,read,fin,read,buffer,1,signature,update,buffer,0,read,if,signature,verify,false,throw,new,illegal,state,exception,signature,verification,for,url,string,failed
InstallPluginCommand -> void verifySignature(final Path zip, final String urlString) throws IOException, PGPException;1544610279;Verify the signature of the downloaded plugin ZIP. The signature is obtained from the source of the downloaded plugin by appending_".asc" to the URL. It is expected that the plugin is signed with the Elastic signing key with ID D27D666CD88E42B4.__@param zip       the path to the downloaded plugin ZIP_@param urlString the URL source of the downloade plugin ZIP_@throws IOException  if an I/O exception occurs reading from various input streams_@throws PGPException if the PGP implementation throws an internal exception during verification;void verifySignature(final Path zip, final String urlString) throws IOException, PGPException {_        final String ascUrlString = urlString + ".asc"__        final URL ascUrl = openUrl(ascUrlString)__        try (_                _                InputStream fin = pluginZipInputStream(zip)__                _                InputStream sin = urlOpenStream(ascUrl)__                _                InputStream ain = new ArmoredInputStream(getPublicKey())) {_            final JcaPGPObjectFactory factory = new JcaPGPObjectFactory(PGPUtil.getDecoderStream(sin))__            final PGPSignature signature = ((PGPSignatureList) factory.nextObject()).get(0)___            _            final String keyId = Long.toHexString(signature.getKeyID()).toUpperCase(Locale.ROOT)__            if (getPublicKeyId().equals(keyId) == false) {_                throw new IllegalStateException("key id [" + keyId + "] does not match expected key id [" + getPublicKeyId() + "]")__            }__            _            final PGPPublicKeyRingCollection collection = new PGPPublicKeyRingCollection(ain, new JcaKeyFingerprintCalculator())__            final PGPPublicKey key = collection.getPublicKey(signature.getKeyID())__            signature.init(new JcaPGPContentVerifierBuilderProvider().setProvider(new BouncyCastleProvider()), key)__            final byte[] buffer = new byte[1024]__            int read__            while ((read = fin.read(buffer)) != -1) {_                signature.update(buffer, 0, read)__            }__            _            if (signature.verify() == false) {_                throw new IllegalStateException("signature verification for [" + urlString + "] failed")__            }_        }_    };verify,the,signature,of,the,downloaded,plugin,zip,the,signature,is,obtained,from,the,source,of,the,downloaded,plugin,by,appending,asc,to,the,url,it,is,expected,that,the,plugin,is,signed,with,the,elastic,signing,key,with,id,d27d666cd88e42b4,param,zip,the,path,to,the,downloaded,plugin,zip,param,url,string,the,url,source,of,the,downloade,plugin,zip,throws,ioexception,if,an,i,o,exception,occurs,reading,from,various,input,streams,throws,pgpexception,if,the,pgp,implementation,throws,an,internal,exception,during,verification;void,verify,signature,final,path,zip,final,string,url,string,throws,ioexception,pgpexception,final,string,asc,url,string,url,string,asc,final,url,asc,url,open,url,asc,url,string,try,input,stream,fin,plugin,zip,input,stream,zip,input,stream,sin,url,open,stream,asc,url,input,stream,ain,new,armored,input,stream,get,public,key,final,jca,pgpobject,factory,factory,new,jca,pgpobject,factory,pgputil,get,decoder,stream,sin,final,pgpsignature,signature,pgpsignature,list,factory,next,object,get,0,final,string,key,id,long,to,hex,string,signature,get,key,id,to,upper,case,locale,root,if,get,public,key,id,equals,key,id,false,throw,new,illegal,state,exception,key,id,key,id,does,not,match,expected,key,id,get,public,key,id,final,pgppublic,key,ring,collection,collection,new,pgppublic,key,ring,collection,ain,new,jca,key,fingerprint,calculator,final,pgppublic,key,key,collection,get,public,key,signature,get,key,id,signature,init,new,jca,pgpcontent,verifier,builder,provider,set,provider,new,bouncy,castle,provider,key,final,byte,buffer,new,byte,1024,int,read,while,read,fin,read,buffer,1,signature,update,buffer,0,read,if,signature,verify,false,throw,new,illegal,state,exception,signature,verification,for,url,string,failed
InstallPluginCommand -> void verifySignature(final Path zip, final String urlString) throws IOException, PGPException;1545481309;Verify the signature of the downloaded plugin ZIP. The signature is obtained from the source of the downloaded plugin by appending_".asc" to the URL. It is expected that the plugin is signed with the Elastic signing key with ID D27D666CD88E42B4.__@param zip       the path to the downloaded plugin ZIP_@param urlString the URL source of the downloade plugin ZIP_@throws IOException  if an I/O exception occurs reading from various input streams_@throws PGPException if the PGP implementation throws an internal exception during verification;void verifySignature(final Path zip, final String urlString) throws IOException, PGPException {_        final String ascUrlString = urlString + ".asc"__        final URL ascUrl = openUrl(ascUrlString)__        try (_                _                InputStream fin = pluginZipInputStream(zip)__                _                InputStream sin = urlOpenStream(ascUrl)__                _                InputStream ain = new ArmoredInputStream(getPublicKey())) {_            final JcaPGPObjectFactory factory = new JcaPGPObjectFactory(PGPUtil.getDecoderStream(sin))__            final PGPSignature signature = ((PGPSignatureList) factory.nextObject()).get(0)___            _            final String keyId = Long.toHexString(signature.getKeyID()).toUpperCase(Locale.ROOT)__            if (getPublicKeyId().equals(keyId) == false) {_                throw new IllegalStateException("key id [" + keyId + "] does not match expected key id [" + getPublicKeyId() + "]")__            }__            _            final PGPPublicKeyRingCollection collection = new PGPPublicKeyRingCollection(ain, new JcaKeyFingerprintCalculator())__            final PGPPublicKey key = collection.getPublicKey(signature.getKeyID())__            signature.init(new JcaPGPContentVerifierBuilderProvider().setProvider(new BouncyCastleProvider()), key)__            final byte[] buffer = new byte[1024]__            int read__            while ((read = fin.read(buffer)) != -1) {_                signature.update(buffer, 0, read)__            }__            _            if (signature.verify() == false) {_                throw new IllegalStateException("signature verification for [" + urlString + "] failed")__            }_        }_    };verify,the,signature,of,the,downloaded,plugin,zip,the,signature,is,obtained,from,the,source,of,the,downloaded,plugin,by,appending,asc,to,the,url,it,is,expected,that,the,plugin,is,signed,with,the,elastic,signing,key,with,id,d27d666cd88e42b4,param,zip,the,path,to,the,downloaded,plugin,zip,param,url,string,the,url,source,of,the,downloade,plugin,zip,throws,ioexception,if,an,i,o,exception,occurs,reading,from,various,input,streams,throws,pgpexception,if,the,pgp,implementation,throws,an,internal,exception,during,verification;void,verify,signature,final,path,zip,final,string,url,string,throws,ioexception,pgpexception,final,string,asc,url,string,url,string,asc,final,url,asc,url,open,url,asc,url,string,try,input,stream,fin,plugin,zip,input,stream,zip,input,stream,sin,url,open,stream,asc,url,input,stream,ain,new,armored,input,stream,get,public,key,final,jca,pgpobject,factory,factory,new,jca,pgpobject,factory,pgputil,get,decoder,stream,sin,final,pgpsignature,signature,pgpsignature,list,factory,next,object,get,0,final,string,key,id,long,to,hex,string,signature,get,key,id,to,upper,case,locale,root,if,get,public,key,id,equals,key,id,false,throw,new,illegal,state,exception,key,id,key,id,does,not,match,expected,key,id,get,public,key,id,final,pgppublic,key,ring,collection,collection,new,pgppublic,key,ring,collection,ain,new,jca,key,fingerprint,calculator,final,pgppublic,key,key,collection,get,public,key,signature,get,key,id,signature,init,new,jca,pgpcontent,verifier,builder,provider,set,provider,new,bouncy,castle,provider,key,final,byte,buffer,new,byte,1024,int,read,while,read,fin,read,buffer,1,signature,update,buffer,0,read,if,signature,verify,false,throw,new,illegal,state,exception,signature,verification,for,url,string,failed
InstallPluginCommand -> void verifySignature(final Path zip, final String urlString) throws IOException, PGPException;1545528053;Verify the signature of the downloaded plugin ZIP. The signature is obtained from the source of the downloaded plugin by appending_".asc" to the URL. It is expected that the plugin is signed with the Elastic signing key with ID D27D666CD88E42B4.__@param zip       the path to the downloaded plugin ZIP_@param urlString the URL source of the downloade plugin ZIP_@throws IOException  if an I/O exception occurs reading from various input streams_@throws PGPException if the PGP implementation throws an internal exception during verification;void verifySignature(final Path zip, final String urlString) throws IOException, PGPException {_        final String ascUrlString = urlString + ".asc"__        final URL ascUrl = openUrl(ascUrlString)__        try (_                _                InputStream fin = pluginZipInputStream(zip)__                _                InputStream sin = urlOpenStream(ascUrl)__                _                InputStream ain = new ArmoredInputStream(getPublicKey())) {_            final JcaPGPObjectFactory factory = new JcaPGPObjectFactory(PGPUtil.getDecoderStream(sin))__            final PGPSignature signature = ((PGPSignatureList) factory.nextObject()).get(0)___            _            final String keyId = Long.toHexString(signature.getKeyID()).toUpperCase(Locale.ROOT)__            if (getPublicKeyId().equals(keyId) == false) {_                throw new IllegalStateException("key id [" + keyId + "] does not match expected key id [" + getPublicKeyId() + "]")__            }__            _            final PGPPublicKeyRingCollection collection = new PGPPublicKeyRingCollection(ain, new JcaKeyFingerprintCalculator())__            final PGPPublicKey key = collection.getPublicKey(signature.getKeyID())__            signature.init(new JcaPGPContentVerifierBuilderProvider().setProvider(new BouncyCastleProvider()), key)__            final byte[] buffer = new byte[1024]__            int read__            while ((read = fin.read(buffer)) != -1) {_                signature.update(buffer, 0, read)__            }__            _            if (signature.verify() == false) {_                throw new IllegalStateException("signature verification for [" + urlString + "] failed")__            }_        }_    };verify,the,signature,of,the,downloaded,plugin,zip,the,signature,is,obtained,from,the,source,of,the,downloaded,plugin,by,appending,asc,to,the,url,it,is,expected,that,the,plugin,is,signed,with,the,elastic,signing,key,with,id,d27d666cd88e42b4,param,zip,the,path,to,the,downloaded,plugin,zip,param,url,string,the,url,source,of,the,downloade,plugin,zip,throws,ioexception,if,an,i,o,exception,occurs,reading,from,various,input,streams,throws,pgpexception,if,the,pgp,implementation,throws,an,internal,exception,during,verification;void,verify,signature,final,path,zip,final,string,url,string,throws,ioexception,pgpexception,final,string,asc,url,string,url,string,asc,final,url,asc,url,open,url,asc,url,string,try,input,stream,fin,plugin,zip,input,stream,zip,input,stream,sin,url,open,stream,asc,url,input,stream,ain,new,armored,input,stream,get,public,key,final,jca,pgpobject,factory,factory,new,jca,pgpobject,factory,pgputil,get,decoder,stream,sin,final,pgpsignature,signature,pgpsignature,list,factory,next,object,get,0,final,string,key,id,long,to,hex,string,signature,get,key,id,to,upper,case,locale,root,if,get,public,key,id,equals,key,id,false,throw,new,illegal,state,exception,key,id,key,id,does,not,match,expected,key,id,get,public,key,id,final,pgppublic,key,ring,collection,collection,new,pgppublic,key,ring,collection,ain,new,jca,key,fingerprint,calculator,final,pgppublic,key,key,collection,get,public,key,signature,get,key,id,signature,init,new,jca,pgpcontent,verifier,builder,provider,set,provider,new,bouncy,castle,provider,key,final,byte,buffer,new,byte,1024,int,read,while,read,fin,read,buffer,1,signature,update,buffer,0,read,if,signature,verify,false,throw,new,illegal,state,exception,signature,verification,for,url,string,failed
InstallPluginCommand -> void verifySignature(final Path zip, final String urlString) throws IOException, PGPException;1545599625;Verify the signature of the downloaded plugin ZIP. The signature is obtained from the source of the downloaded plugin by appending_".asc" to the URL. It is expected that the plugin is signed with the Elastic signing key with ID D27D666CD88E42B4.__@param zip       the path to the downloaded plugin ZIP_@param urlString the URL source of the downloade plugin ZIP_@throws IOException  if an I/O exception occurs reading from various input streams_@throws PGPException if the PGP implementation throws an internal exception during verification;void verifySignature(final Path zip, final String urlString) throws IOException, PGPException {_        final String ascUrlString = urlString + ".asc"__        final URL ascUrl = openUrl(ascUrlString)__        try (_                _                InputStream fin = pluginZipInputStream(zip)__                _                InputStream sin = urlOpenStream(ascUrl)__                _                InputStream ain = new ArmoredInputStream(getPublicKey())) {_            final JcaPGPObjectFactory factory = new JcaPGPObjectFactory(PGPUtil.getDecoderStream(sin))__            final PGPSignature signature = ((PGPSignatureList) factory.nextObject()).get(0)___            _            final String keyId = Long.toHexString(signature.getKeyID()).toUpperCase(Locale.ROOT)__            if (getPublicKeyId().equals(keyId) == false) {_                throw new IllegalStateException("key id [" + keyId + "] does not match expected key id [" + getPublicKeyId() + "]")__            }__            _            final PGPPublicKeyRingCollection collection = new PGPPublicKeyRingCollection(ain, new JcaKeyFingerprintCalculator())__            final PGPPublicKey key = collection.getPublicKey(signature.getKeyID())__            signature.init(new JcaPGPContentVerifierBuilderProvider().setProvider(new BouncyCastleProvider()), key)__            final byte[] buffer = new byte[1024]__            int read__            while ((read = fin.read(buffer)) != -1) {_                signature.update(buffer, 0, read)__            }__            _            if (signature.verify() == false) {_                throw new IllegalStateException("signature verification for [" + urlString + "] failed")__            }_        }_    };verify,the,signature,of,the,downloaded,plugin,zip,the,signature,is,obtained,from,the,source,of,the,downloaded,plugin,by,appending,asc,to,the,url,it,is,expected,that,the,plugin,is,signed,with,the,elastic,signing,key,with,id,d27d666cd88e42b4,param,zip,the,path,to,the,downloaded,plugin,zip,param,url,string,the,url,source,of,the,downloade,plugin,zip,throws,ioexception,if,an,i,o,exception,occurs,reading,from,various,input,streams,throws,pgpexception,if,the,pgp,implementation,throws,an,internal,exception,during,verification;void,verify,signature,final,path,zip,final,string,url,string,throws,ioexception,pgpexception,final,string,asc,url,string,url,string,asc,final,url,asc,url,open,url,asc,url,string,try,input,stream,fin,plugin,zip,input,stream,zip,input,stream,sin,url,open,stream,asc,url,input,stream,ain,new,armored,input,stream,get,public,key,final,jca,pgpobject,factory,factory,new,jca,pgpobject,factory,pgputil,get,decoder,stream,sin,final,pgpsignature,signature,pgpsignature,list,factory,next,object,get,0,final,string,key,id,long,to,hex,string,signature,get,key,id,to,upper,case,locale,root,if,get,public,key,id,equals,key,id,false,throw,new,illegal,state,exception,key,id,key,id,does,not,match,expected,key,id,get,public,key,id,final,pgppublic,key,ring,collection,collection,new,pgppublic,key,ring,collection,ain,new,jca,key,fingerprint,calculator,final,pgppublic,key,key,collection,get,public,key,signature,get,key,id,signature,init,new,jca,pgpcontent,verifier,builder,provider,set,provider,new,bouncy,castle,provider,key,final,byte,buffer,new,byte,1024,int,read,while,read,fin,read,buffer,1,signature,update,buffer,0,read,if,signature,verify,false,throw,new,illegal,state,exception,signature,verification,for,url,string,failed
