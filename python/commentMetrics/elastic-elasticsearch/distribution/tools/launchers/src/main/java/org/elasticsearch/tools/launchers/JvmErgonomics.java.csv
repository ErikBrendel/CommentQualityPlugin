commented;modifiers;parameterAmount;loc;comment;code
true;static;1;15;/**  * Chooses additional JVM options for Elasticsearch.  *  * @param userDefinedJvmOptions A list of JVM options that have been defined by the user.  * @return A list of additional JVM options to set.  */ ;/**  * Chooses additional JVM options for Elasticsearch.  *  * @param userDefinedJvmOptions A list of JVM options that have been defined by the user.  * @return A list of additional JVM options to set.  */ static List<String> choose(List<String> userDefinedJvmOptions) {     List<String> ergonomicChoices = new ArrayList<>().     Long heapSize = extractHeapSize(userDefinedJvmOptions).     Map<String, String> systemProperties = extractSystemProperties(userDefinedJvmOptions).     if (heapSize != null) {         if (systemProperties.containsKey("io.netty.allocator.type") == false) {             if (heapSize <= 1 * GB) {                 ergonomicChoices.add("-Dio.netty.allocator.type=unpooled").             } else {                 ergonomicChoices.add("-Dio.netty.allocator.type=pooled").             }         }     }     return ergonomicChoices. }
true;static;1;24;// package private for testing ;// package private for testing static Long extractHeapSize(List<String> userDefinedJvmOptions) {     for (String jvmOption : userDefinedJvmOptions) {         final Matcher matcher = MAX_HEAP_SIZE.matcher(jvmOption).         if (matcher.matches()) {             final long size = Long.parseLong(matcher.group("size")).             final String unit = matcher.group("unit").             if (unit == null) {                 return size.             } else {                 switch(unit.toLowerCase(Locale.ROOT)) {                     case "k":                         return size * KB.                     case "m":                         return size * MB.                     case "g":                         return size * GB.                     default:                         throw new IllegalArgumentException("Unknown unit [" + unit + "] for max heap size in [" + jvmOption + "]").                 }             }         }     }     return null. }
true;static;1;10;// package private for testing ;// package private for testing static Map<String, String> extractSystemProperties(List<String> userDefinedJvmOptions) {     Map<String, String> systemProperties = new HashMap<>().     for (String jvmOption : userDefinedJvmOptions) {         final Matcher matcher = SYSTEM_PROPERTY.matcher(jvmOption).         if (matcher.matches()) {             systemProperties.put(matcher.group("key"), matcher.group("value")).         }     }     return systemProperties. }
