commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;public void testExtractValidHeapSize() {     assertEquals(Long.valueOf(1024), JvmErgonomics.extractHeapSize(Collections.singletonList("-Xmx1024"))).     assertEquals(Long.valueOf(2L * 1024 * 1024 * 1024), JvmErgonomics.extractHeapSize(Collections.singletonList("-Xmx2g"))).     assertEquals(Long.valueOf(32 * 1024 * 1024), JvmErgonomics.extractHeapSize(Collections.singletonList("-Xmx32M"))).     assertEquals(Long.valueOf(32 * 1024 * 1024), JvmErgonomics.extractHeapSize(Collections.singletonList("-XX:MaxHeapSize=32M"))). }
false;public;0;8;;public void testExtractInvalidHeapSize() {     try {         JvmErgonomics.extractHeapSize(Collections.singletonList("-Xmx2T")).         fail("Expected IllegalArgumentException to be raised").     } catch (IllegalArgumentException expected) {         assertEquals("Unknown unit [T] for max heap size in [-Xmx2T]", expected.getMessage()).     } }
false;public;0;5;;public void testExtractNoHeapSize() {     assertNull("No spaces allowed", JvmErgonomics.extractHeapSize(Collections.singletonList("-Xmx 1024"))).     assertNull("JVM option is not present", JvmErgonomics.extractHeapSize(Collections.singletonList(""))).     assertNull("Multiple JVM options per line", JvmErgonomics.extractHeapSize(Collections.singletonList("-Xms2g -Xmx2g"))). }
false;public;0;10;;public void testExtractSystemProperties() {     Map<String, String> expectedSystemProperties = new HashMap<>().     expectedSystemProperties.put("file.encoding", "UTF-8").     expectedSystemProperties.put("kv.setting", "ABC=DEF").     Map<String, String> parsedSystemProperties = JvmErgonomics.extractSystemProperties(Arrays.asList("-Dfile.encoding=UTF-8", "-Dkv.setting=ABC=DEF")).     assertEquals(expectedSystemProperties, parsedSystemProperties). }
false;public;0;4;;public void testExtractNoSystemProperties() {     Map<String, String> parsedSystemProperties = JvmErgonomics.extractSystemProperties(Arrays.asList("-Xms1024M", "-Xmx1024M")).     assertTrue(parsedSystemProperties.isEmpty()). }
false;public;0;5;;public void testLittleMemoryErgonomicChoices() {     String smallHeap = randomFrom(Arrays.asList("64M", "512M", "1024M", "1G")).     List<String> expectedChoices = Collections.singletonList("-Dio.netty.allocator.type=unpooled").     assertEquals(expectedChoices, JvmErgonomics.choose(Arrays.asList("-Xms" + smallHeap, "-Xmx" + smallHeap))). }
false;public;0;5;;public void testPlentyMemoryErgonomicChoices() {     String largeHeap = randomFrom(Arrays.asList("1025M", "2048M", "2G", "8G")).     List<String> expectedChoices = Collections.singletonList("-Dio.netty.allocator.type=pooled").     assertEquals(expectedChoices, JvmErgonomics.choose(Arrays.asList("-Xms" + largeHeap, "-Xmx" + largeHeap))). }
