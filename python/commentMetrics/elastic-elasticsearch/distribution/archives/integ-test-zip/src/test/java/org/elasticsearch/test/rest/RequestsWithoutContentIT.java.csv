commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;public void testIndexMissingBody() throws IOException {     ResponseException responseException = expectThrows(ResponseException.class, () -> client().performRequest(new Request(randomBoolean() ? "POST" : "PUT", "/idx/type/123"))).     assertResponseException(responseException, "request body is required"). }
false;public;0;5;;public void testBulkMissingBody() throws IOException {     ResponseException responseException = expectThrows(ResponseException.class, () -> client().performRequest(new Request(randomBoolean() ? "POST" : "PUT", "/_bulk"))).     assertResponseException(responseException, "request body is required"). }
false;public;0;5;;public void testPutSettingsMissingBody() throws IOException {     ResponseException responseException = expectThrows(ResponseException.class, () -> client().performRequest(new Request("PUT", "/_settings"))).     assertResponseException(responseException, "request body is required"). }
false;public;0;5;;public void testPutMappingsMissingBody() throws IOException {     ResponseException responseException = expectThrows(ResponseException.class, () -> client().performRequest(new Request(randomBoolean() ? "POST" : "PUT", "/test_index/_mapping"))).     assertResponseException(responseException, "request body is required"). }
false;public;0;5;;public void testPutIndexTemplateMissingBody() throws IOException {     ResponseException responseException = expectThrows(ResponseException.class, () -> client().performRequest(new Request(randomBoolean() ? "PUT" : "POST", "/_template/my_template"))).     assertResponseException(responseException, "request body is required"). }
false;public;0;5;;public void testMultiSearchMissingBody() throws IOException {     ResponseException responseException = expectThrows(ResponseException.class, () -> client().performRequest(new Request(randomBoolean() ? "POST" : "GET", "/_msearch"))).     assertResponseException(responseException, "request body or source parameter is required"). }
false;public;0;5;;public void testPutPipelineMissingBody() throws IOException {     ResponseException responseException = expectThrows(ResponseException.class, () -> client().performRequest(new Request("PUT", "/_ingest/pipeline/my_pipeline"))).     assertResponseException(responseException, "request body or source parameter is required"). }
false;public;0;5;;public void testSimulatePipelineMissingBody() throws IOException {     ResponseException responseException = expectThrows(ResponseException.class, () -> client().performRequest(new Request(randomBoolean() ? "POST" : "GET", "/_ingest/pipeline/my_pipeline/_simulate"))).     assertResponseException(responseException, "request body or source parameter is required"). }
false;public;0;5;;public void testPutScriptMissingBody() throws IOException {     ResponseException responseException = expectThrows(ResponseException.class, () -> client().performRequest(new Request(randomBoolean() ? "POST" : "PUT", "/_scripts/lang"))).     assertResponseException(responseException, "request body is required"). }
false;private,static;2;4;;private static void assertResponseException(ResponseException responseException, String message) {     assertEquals(400, responseException.getResponse().getStatusLine().getStatusCode()).     assertThat(responseException.getMessage(), containsString(message)). }
