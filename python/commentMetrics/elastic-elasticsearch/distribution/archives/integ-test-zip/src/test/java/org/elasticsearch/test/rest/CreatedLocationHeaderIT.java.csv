commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public void testCreate() throws IOException {     locationTestCase("PUT", "test/_doc/1"). }
false;public;0;3;;public void testIndexWithId() throws IOException {     locationTestCase("PUT", "test/_doc/1"). }
false;public;0;3;;public void testIndexWithoutId() throws IOException {     locationTestCase("POST", "test/_doc"). }
false;public;0;7;;public void testUpsert() throws IOException {     Request request = new Request("POST", "test/_update/1").     request.setJsonEntity("{" + "\"doc\": {\"test\": \"test\"}," + "\"doc_as_upsert\": true}").     locationTestCase(client().performRequest(request)). }
false;private;2;12;;private void locationTestCase(String method, String url) throws IOException {     final Request request = new Request(method, url).     request.setJsonEntity("{\"test\": \"test\"}").     locationTestCase(client().performRequest(request)).     // we have to delete the index otherwise the second indexing request will route to the single shard and not produce a 201     final Response response = client().performRequest(new Request("DELETE", "test")).     assertThat(response.getStatusLine().getStatusCode(), equalTo(200)).     final Request withRouting = new Request(method, url).     withRouting.addParameter("routing", "cat").     withRouting.setJsonEntity("{\"test\": \"test\"}").     locationTestCase(client().performRequest(withRouting)). }
false;private;1;7;;private void locationTestCase(Response response) throws IOException {     assertEquals(201, response.getStatusLine().getStatusCode()).     String location = response.getHeader("Location").     assertThat(location, startsWith("/test/_doc/")).     Response getResponse = client().performRequest(new Request("GET", location)).     assertEquals(singletonMap("test", "test"), entityAsMap(getResponse).get("_source")). }
