commented;modifiers;parameterAmount;loc;comment;code
true;public;0;22;/**  * Provides a channel on which clients can send Messages to a CM Endpoint  */ ;/**  * Provides a channel on which clients can send Messages to a CM Endpoint  */ @Override public CMProducer createProducer() throws Exception {     final CMConfiguration config = getConfiguration().     // This is the camel exchange processor. Allows to send messages to CM     // API.     // TODO: Should i provide a CMSender factory? Dynamically choose     // CMSender implementation? Sending strategy?     // Consider:     // 1. single - Single Message strategy.     // 2. Multi - CM Api supports to 1000 messages per call.     // 3. sliding - sliding window? 1000 messages or time thresold?     // 4. mocked - in order to fake cm responses     // CMConstants.DEFAULT_SCHEME + host is a valid URL. It was previously checked     String token = config.getProductToken().     StringHelper.notEmpty(token, "productToken").     UUID uuid = UUID.fromString(token).     return new CMProducer(this, new CMSenderOneMessageImpl(getCMUrl(), uuid)). }
false;public;1;4;;@Override public Consumer createConsumer(final Processor processor) throws Exception {     throw new UnsupportedOperationException("Consumer not supported"). }
false;public;0;3;;public CMConfiguration getConfiguration() {     return configuration. }
false;public;1;3;;public void setConfiguration(final CMConfiguration configuration) {     this.configuration = configuration. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;3;;public String getCMUrl() {     return CMConstants.DEFAULT_SCHEME + host. }
false;public;0;4;;@Override public CMComponent getComponent() {     return (CMComponent) super.getComponent(). }
false;public;0;3;;public String getHost() {     return host. }
true;public;1;3;/**  * SMS Provider HOST with scheme  */ ;/**  * SMS Provider HOST with scheme  */ public void setHost(final String host) {     this.host = host. }
