# id;timestamp;commentText;codeText;commentWords;codeWords
CMProducer -> @Override     public void process(final Exchange exchange) throws Exception;1458758478;Producer is a exchange processor. This process is built in several steps. 1. Validate message receive from client 2. Send validated message to CM endpoints. 3. Process response from CM_endpoints.;@Override_    public void process(final Exchange exchange) throws Exception {__        _        _        final SMSMessage smsMessage = exchange.getIn().getMandatoryBody(SMSMessage.class)___        _        log.trace("Validating SMSMessage instance provided: {}", smsMessage.toString())__        final Set<ConstraintViolation<SMSMessage>> constraintViolations = getValidator().validate(smsMessage)__        if (constraintViolations.size() > 0) {_            final StringBuffer msg = new StringBuffer()__            for (final ConstraintViolation<SMSMessage> cv : constraintViolations) {_                msg.append(String.format("- Invalid value for %s: %s", cv.getPropertyPath().toString(), cv.getMessage()))__            }_            log.debug(msg.toString())__            throw new InvalidPayloadRuntimeException(exchange, SMSMessage.class)__        }_        log.trace("SMSMessage instance is valid: {}", smsMessage.toString())___        _        _        _        _        final CMMessage cmMessage = new CMMessage(smsMessage.getPhoneNumber(), smsMessage.getMessage())__        log.debug("CMMessage instance build from valid SMSMessage instance")___        if (smsMessage.getFrom() == null || smsMessage.getFrom().isEmpty()) {_            String df = getConfiguration().getDefaultFrom()__            cmMessage.setSender(df)__            log.debug("Dynamic sender is set to default dynamic sender: {}", df)__        }__        _        cmMessage.setIdAsString(smsMessage.getId())___        _        cmMessage.setUnicodeAndMultipart(getConfiguration().getDefaultMaxNumberOfParts())___        _        _        sender.send(cmMessage)___        log.debug("Request accepted by CM Host: {}", cmMessage.toString())__    };producer,is,a,exchange,processor,this,process,is,built,in,several,steps,1,validate,message,receive,from,client,2,send,validated,message,to,cm,endpoints,3,process,response,from,cm,endpoints;override,public,void,process,final,exchange,exchange,throws,exception,final,smsmessage,sms,message,exchange,get,in,get,mandatory,body,smsmessage,class,log,trace,validating,smsmessage,instance,provided,sms,message,to,string,final,set,constraint,violation,smsmessage,constraint,violations,get,validator,validate,sms,message,if,constraint,violations,size,0,final,string,buffer,msg,new,string,buffer,for,final,constraint,violation,smsmessage,cv,constraint,violations,msg,append,string,format,invalid,value,for,s,s,cv,get,property,path,to,string,cv,get,message,log,debug,msg,to,string,throw,new,invalid,payload,runtime,exception,exchange,smsmessage,class,log,trace,smsmessage,instance,is,valid,sms,message,to,string,final,cmmessage,cm,message,new,cmmessage,sms,message,get,phone,number,sms,message,get,message,log,debug,cmmessage,instance,build,from,valid,smsmessage,instance,if,sms,message,get,from,null,sms,message,get,from,is,empty,string,df,get,configuration,get,default,from,cm,message,set,sender,df,log,debug,dynamic,sender,is,set,to,default,dynamic,sender,df,cm,message,set,id,as,string,sms,message,get,id,cm,message,set,unicode,and,multipart,get,configuration,get,default,max,number,of,parts,sender,send,cm,message,log,debug,request,accepted,by,cm,host,cm,message,to,string
CMProducer -> @Override     public void process(final Exchange exchange) throws Exception;1536605520;Producer is a exchange processor. This process is built in several steps. 1. Validate message receive from client 2. Send validated message to CM endpoints. 3. Process response from CM_endpoints.;@Override_    public void process(final Exchange exchange) throws Exception {__        _        _        final SMSMessage smsMessage = exchange.getIn().getMandatoryBody(SMSMessage.class)___        _        log.trace("Validating SMSMessage instance provided: {}", smsMessage)__        final Set<ConstraintViolation<SMSMessage>> constraintViolations = getValidator().validate(smsMessage)__        if (constraintViolations.size() > 0) {_            final StringBuffer msg = new StringBuffer()__            for (final ConstraintViolation<SMSMessage> cv : constraintViolations) {_                msg.append(String.format("- Invalid value for %s: %s", cv.getPropertyPath().toString(), cv.getMessage()))__            }_            log.debug(msg.toString())__            throw new InvalidPayloadRuntimeException(exchange, SMSMessage.class)__        }_        log.trace("SMSMessage instance is valid: {}", smsMessage)___        _        _        _        _        final CMMessage cmMessage = new CMMessage(smsMessage.getPhoneNumber(), smsMessage.getMessage())__        log.debug("CMMessage instance build from valid SMSMessage instance")___        if (smsMessage.getFrom() == null || smsMessage.getFrom().isEmpty()) {_            String df = getConfiguration().getDefaultFrom()__            cmMessage.setSender(df)__            log.debug("Dynamic sender is set to default dynamic sender: {}", df)__        }__        _        cmMessage.setIdAsString(smsMessage.getId())___        _        cmMessage.setUnicodeAndMultipart(getConfiguration().getDefaultMaxNumberOfParts())___        _        _        sender.send(cmMessage)___        log.debug("Request accepted by CM Host: {}", cmMessage)__    };producer,is,a,exchange,processor,this,process,is,built,in,several,steps,1,validate,message,receive,from,client,2,send,validated,message,to,cm,endpoints,3,process,response,from,cm,endpoints;override,public,void,process,final,exchange,exchange,throws,exception,final,smsmessage,sms,message,exchange,get,in,get,mandatory,body,smsmessage,class,log,trace,validating,smsmessage,instance,provided,sms,message,final,set,constraint,violation,smsmessage,constraint,violations,get,validator,validate,sms,message,if,constraint,violations,size,0,final,string,buffer,msg,new,string,buffer,for,final,constraint,violation,smsmessage,cv,constraint,violations,msg,append,string,format,invalid,value,for,s,s,cv,get,property,path,to,string,cv,get,message,log,debug,msg,to,string,throw,new,invalid,payload,runtime,exception,exchange,smsmessage,class,log,trace,smsmessage,instance,is,valid,sms,message,final,cmmessage,cm,message,new,cmmessage,sms,message,get,phone,number,sms,message,get,message,log,debug,cmmessage,instance,build,from,valid,smsmessage,instance,if,sms,message,get,from,null,sms,message,get,from,is,empty,string,df,get,configuration,get,default,from,cm,message,set,sender,df,log,debug,dynamic,sender,is,set,to,default,dynamic,sender,df,cm,message,set,id,as,string,sms,message,get,id,cm,message,set,unicode,and,multipart,get,configuration,get,default,max,number,of,parts,sender,send,cm,message,log,debug,request,accepted,by,cm,host,cm,message
CMProducer -> @Override     public void process(final Exchange exchange) throws Exception;1540108163;Producer is a exchange processor. This process is built in several steps. 1. Validate message receive from client 2. Send validated message to CM endpoints. 3. Process response from CM_endpoints.;@Override_    public void process(final Exchange exchange) throws Exception {__        _        _        final SMSMessage smsMessage = exchange.getIn().getMandatoryBody(SMSMessage.class)___        _        log.trace("Validating SMSMessage instance provided: {}", smsMessage)__        final Set<ConstraintViolation<SMSMessage>> constraintViolations = getValidator().validate(smsMessage)__        if (constraintViolations.size() > 0) {_            final StringBuffer msg = new StringBuffer()__            for (final ConstraintViolation<SMSMessage> cv : constraintViolations) {_                msg.append(String.format("- Invalid value for %s: %s", cv.getPropertyPath().toString(), cv.getMessage()))__            }_            log.debug(msg.toString())__            throw new InvalidPayloadRuntimeException(exchange, SMSMessage.class)__        }_        log.trace("SMSMessage instance is valid: {}", smsMessage)___        _        _        _        _        final CMMessage cmMessage = new CMMessage(smsMessage.getPhoneNumber(), smsMessage.getMessage())__        log.debug("CMMessage instance build from valid SMSMessage instance")___        if (smsMessage.getFrom() == null || smsMessage.getFrom().isEmpty()) {_            String df = getConfiguration().getDefaultFrom()__            cmMessage.setSender(df)__            log.debug("Dynamic sender is set to default dynamic sender: {}", df)__        }__        _        cmMessage.setIdAsString(smsMessage.getId())___        _        cmMessage.setUnicodeAndMultipart(getConfiguration().getDefaultMaxNumberOfParts())___        _        _        sender.send(cmMessage)___        log.debug("Request accepted by CM Host: {}", cmMessage)__    };producer,is,a,exchange,processor,this,process,is,built,in,several,steps,1,validate,message,receive,from,client,2,send,validated,message,to,cm,endpoints,3,process,response,from,cm,endpoints;override,public,void,process,final,exchange,exchange,throws,exception,final,smsmessage,sms,message,exchange,get,in,get,mandatory,body,smsmessage,class,log,trace,validating,smsmessage,instance,provided,sms,message,final,set,constraint,violation,smsmessage,constraint,violations,get,validator,validate,sms,message,if,constraint,violations,size,0,final,string,buffer,msg,new,string,buffer,for,final,constraint,violation,smsmessage,cv,constraint,violations,msg,append,string,format,invalid,value,for,s,s,cv,get,property,path,to,string,cv,get,message,log,debug,msg,to,string,throw,new,invalid,payload,runtime,exception,exchange,smsmessage,class,log,trace,smsmessage,instance,is,valid,sms,message,final,cmmessage,cm,message,new,cmmessage,sms,message,get,phone,number,sms,message,get,message,log,debug,cmmessage,instance,build,from,valid,smsmessage,instance,if,sms,message,get,from,null,sms,message,get,from,is,empty,string,df,get,configuration,get,default,from,cm,message,set,sender,df,log,debug,dynamic,sender,is,set,to,default,dynamic,sender,df,cm,message,set,id,as,string,sms,message,get,id,cm,message,set,unicode,and,multipart,get,configuration,get,default,max,number,of,parts,sender,send,cm,message,log,debug,request,accepted,by,cm,host,cm,message
