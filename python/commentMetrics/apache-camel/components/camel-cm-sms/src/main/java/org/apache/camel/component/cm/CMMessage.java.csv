commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getMessage() {     return message. }
false;public;1;3;;public void setMessage(final String message) {     this.message = message. }
false;public;0;3;;public String getPhoneNumber() {     return phoneNumber. }
false;public;1;3;;public void setPhoneNumber(final String phoneNumber) {     this.phoneNumber = phoneNumber. }
false;public;0;3;;public String getSender() {     return sender. }
false;public;1;3;;public void setSender(final String sender) {     this.sender = sender. }
false;public;0;3;;public String getIdAsString() {     return idAsString. }
false;public;1;3;;public void setIdAsString(final String idAsString) {     this.idAsString = idAsString. }
false;public;0;3;;public boolean isUnicode() {     return unicode. }
false;public;1;3;;public void setUnicode(final boolean unicode) {     this.unicode = unicode. }
false;public;0;3;;public boolean isMultipart() {     return multipart > 1. }
true;public;1;37;/**  * For a CMMessage instance  *  * @param defaultMaxNumberOfParts  */ ;/**  * For a CMMessage instance  *  * @param defaultMaxNumberOfParts  */ public void setUnicodeAndMultipart(int defaultMaxNumberOfParts) {     // Set UNICODE and MULTIPART     final String msg = getMessage().     if (CMUtils.isGsm0338Encodeable(msg)) {         // Not Unicode is Multipart?         if (msg.length() > CMConstants.MAX_GSM_MESSAGE_LENGTH) {             // Multiparts. 153 caracteres max per part             int parts = msg.length() / CMConstants.MAX_GSM_MESSAGE_LENGTH_PER_PART_IF_MULTIPART.             if (msg.length() % CMConstants.MAX_GSM_MESSAGE_LENGTH_PER_PART_IF_MULTIPART != 0) {                 parts++.             }             setMultiparts((parts > defaultMaxNumberOfParts) ? defaultMaxNumberOfParts : parts).         } else {             // Otherwise multipart = 1             setMultiparts(1).         }     } else {         // Unicode Message         setUnicode(true).         if (msg.length() > CMConstants.MAX_UNICODE_MESSAGE_LENGTH) {             // Multiparts. 67 caracteres max per part             int parts = msg.length() / CMConstants.MAX_UNICODE_MESSAGE_LENGTH_PER_PART_IF_MULTIPART.             if (msg.length() % CMConstants.MAX_UNICODE_MESSAGE_LENGTH_PER_PART_IF_MULTIPART != 0) {                 parts++.             }             setMultiparts((parts > defaultMaxNumberOfParts) ? defaultMaxNumberOfParts : parts).         } else {             // Otherwise multipart = 1             setMultiparts(1).         }     } }
false;public;1;3;;public void setMultiparts(final int multipart) {     this.multipart = multipart. }
false;public;0;3;;public int getMultiparts() {     return multipart. }
false;public;0;10;;@Override public String toString() {     StringBuffer sb = new StringBuffer(" {phoneNumber: " + phoneNumber + ", message: " + message + ", sender=" + sender + ", unicode: " + unicode + ", multipart: " + multipart).     if (idAsString != null && !idAsString.isEmpty()) {         sb.append(", idAsString=" + idAsString).     }     sb.append(" }").     return sb.toString(). }
