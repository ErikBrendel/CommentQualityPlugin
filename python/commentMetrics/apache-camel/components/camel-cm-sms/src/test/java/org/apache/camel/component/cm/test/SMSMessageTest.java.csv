commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void beforeTest() throws Exception {     validNumber = pnu.format(pnu.getExampleNumber("ES"), PhoneNumberFormat.E164). }
false;public;0;12;;// @After // public void afterTest() { @Test public void testSMSMessageConstructor() throws Throwable {     // Coverage .)     SMSMessage message = new SMSMessage(null, null).     Assert.isNull(message.getMessage()).     Assert.isNull(message.getPhoneNumber()).     message = new SMSMessage("idAsString", null, null, "MySelf").     Assert.isTrue(message.getId().equals("idAsString")).     Assert.isTrue(message.getFrom().equals("MySelf")). }
false;public;0;8;;@Test public void testNullMessageField() throws Exception {     final SMSMessage m = new SMSMessage(null, validNumber).     final Set<ConstraintViolation<SMSMessage>> constraintViolations = validator.validate(m).     Assert.isTrue(1 == constraintViolations.size()). }
false;public;0;8;;@Test public void testNullPhoneNumber() throws Exception {     final SMSMessage m = new SMSMessage("Hello world!", null).     final Set<ConstraintViolation<SMSMessage>> constraintViolations = validator.validate(m).     Assert.isTrue(1 == constraintViolations.size()). }
false;public;0;10;;@Test public void testDynamicFromFieldMaxLength() throws Exception {     String dynamicFrom = "messagelengthgreaterthan12".     final SMSMessage m = new SMSMessage("idAsString", "Hello World", validNumber, dynamicFrom).     final Set<ConstraintViolation<SMSMessage>> constraintViolations = validator.validate(m).     Assert.isTrue(1 == constraintViolations.size()). }
false;public;0;10;;@Test public void testDynamicFromFieldZeroLength() throws Exception {     String zeroLengthDynamicFrom = "".     final SMSMessage m = new SMSMessage("idAsString", "Hello World", validNumber, zeroLengthDynamicFrom).     final Set<ConstraintViolation<SMSMessage>> constraintViolations = validator.validate(m).     Assert.isTrue(1 == constraintViolations.size()). }
false;public;0;10;;@Test public void testIdAsStringMaxLength() throws Exception {     String idAsString = "thisistheidastringlengthgreaterthan32".     final SMSMessage m = new SMSMessage(idAsString, "Hello World", validNumber, "MySelf").     final Set<ConstraintViolation<SMSMessage>> constraintViolations = validator.validate(m).     Assert.isTrue(1 == constraintViolations.size()). }
false;public;0;10;;@Test public void testIdAsStringFieldZeroLength() throws Exception {     String zeroLengthIdAsString = "".     final SMSMessage m = new SMSMessage(zeroLengthIdAsString, "Hello World", validNumber, "MySelf").     final Set<ConstraintViolation<SMSMessage>> constraintViolations = validator.validate(m).     Assert.isTrue(1 == constraintViolations.size()). }
false;public;0;9;;@Test public void testE164NullNumberIsInValid() throws Exception {     final String phoneNumber = null.     final SMSMessage m = new SMSMessage("Hello world!", phoneNumber).     final Set<ConstraintViolation<SMSMessage>> constraintViolations = validator.validate(m).     Assert.isTrue(1 == constraintViolations.size()). }
false;public;0;8;;@Test public void testE164IsValid() throws Exception {     final SMSMessage m = new SMSMessage("Hello world!", validNumber).     final Set<ConstraintViolation<SMSMessage>> constraintViolations = validator.validate(m).     Assert.isTrue(0 == constraintViolations.size()). }
false;public;0;9;;@Test public void testE164NoPlusSignedNumberIsInvalid() throws Exception {     final String phoneNumber = "34600000000".     final SMSMessage m = new SMSMessage("Hello world!", phoneNumber).     final Set<ConstraintViolation<SMSMessage>> constraintViolations = validator.validate(m).     Assert.isTrue(1 == constraintViolations.size()). }
false;public;0;9;;@Test public void testE164NoPlusSignedNumberBut00IsInvalid() throws Exception {     final String phoneNumber = new PhoneNumber().setCountryCodeSource(CountryCodeSource.FROM_NUMBER_WITHOUT_PLUS_SIGN).setNationalNumber(0034600000000).toString().     final SMSMessage m = new SMSMessage("Hello world!", phoneNumber).     final Set<ConstraintViolation<SMSMessage>> constraintViolations = validator.validate(m).     Assert.isTrue(1 == constraintViolations.size()). }
false;public;0;9;;@Test public void testE164NumberWithPlusSignIsInvalid() throws Exception {     final String phoneNumber = "+34 600 00 00 00".     final SMSMessage m = new SMSMessage("Hello world!", phoneNumber).     final Set<ConstraintViolation<SMSMessage>> constraintViolations = validator.validate(m).     Assert.isTrue(1 == constraintViolations.size()). }
