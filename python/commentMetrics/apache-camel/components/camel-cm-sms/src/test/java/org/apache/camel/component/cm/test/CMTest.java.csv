commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;// private StopWatch stopWatch = new StopWatch(getClass().getSimpleName()). @Before public void beforeTest() throws Exception {     mock.reset().     camelContext.getRouteController().startRoute(CamelTestConfiguration.SIMPLE_ROUTE_ID).     validNumber = pnu.format(pnu.getExampleNumber("ES"), PhoneNumberFormat.E164). }
false;public;0;18;;@After public void afterTest() {     try {         camelContext.getRouteController().stopRoute(CamelTestConfiguration.SIMPLE_ROUTE_ID).     } catch (Exception e) {         logger.error("Exception trying to stop de routes", e).     } // Stop all routes // for (Route route : camelContext.getRoutes()) { // try { // camelContext.getRouteController().stopRoute(route.getId()). // } catch (Exception e) { // logger.error("Exception trying to stop de routes", e). // } // } }
false;public;0;10;;/*      * 1. Invalid URI      */ @Test(expected = ResolveEndpointFailedException.class) public void testNotRequiredProductToken() throws Throwable {     try {         String schemedUri = "cm-sms://sgw01.cm.nl/gateway.ashx?defaultFrom=MyBusiness&defaultMaxNumberOfParts=8&testConnectionOnStartup=true".         camelContext.getEndpoint(schemedUri).start().     } catch (Throwable t) {         throw t.getCause().     } }
false;public;0;10;;@Test(expected = ResolveEndpointFailedException.class) public void testNotRequiredDefaultFrom() throws Throwable {     try {         String schemedUri = "cm-sms://sgw01.cm.nl/gateway.ashx?defaultFrom=MyBusiness&defaultMaxNumberOfParts=8&testConnectionOnStartup=true".         camelContext.getEndpoint(schemedUri).start().     } catch (Throwable t) {         throw t.getCause().     } }
false;public;0;7;;@Test(expected = HostUnavailableException.class) public void testHostUnavailableException() throws Throwable {     // cm-sms://sgw01.cm.nl/gateway.ashx?defaultFrom=MyBusiness&defaultMaxNumberOfParts=8&productToken=ea723fd7-da81-4826-89bc-fa7144e71c40&testConnectionOnStartup=true     String schemedUri = "cm-sms://dummy.sgw01.cm.nl/gateway.ashx?defaultFrom=MyBusiness&defaultMaxNumberOfParts=8&productToken=ea723fd7-da81-4826-89bc-fa7144e71c40&testConnectionOnStartup=true".     Service service = camelContext.getEndpoint(schemedUri).createProducer().     service.start(). }
false;public;0;10;;@Test(expected = ResolveEndpointFailedException.class) public void testInvalidHostDuplicateScheme() throws Throwable {     // cm-sms://sgw01.cm.nl/gateway.ashx?defaultFrom=MyBusiness&defaultMaxNumberOfParts=8&productToken=ea723fd7-da81-4826-89bc-fa7144e71c40&testConnectionOnStartup=true     try {         String schemedUri = "cm-sms://https://demo.com".         camelContext.getEndpoint(schemedUri).     } catch (Throwable t) {         throw t.getCause().     } }
false;public;0;4;;/*      * 2. Invalid Payload      */ @Test(expected = RuntimeException.class) public void testNullPayload() throws Throwable {     cmProxy.send(null). }
true;public;0;7;// @DirtiesContext ;// @DirtiesContext @Test(expected = NoAccountFoundForProductTokenException.class) public void testAsPartOfARoute() throws Exception {     // Body     final SMSMessage smsMessage = new SMSMessage(generateIdAsString(), generateUnicodeMessage(), validNumber, null).     cmProxy.send(smsMessage). }
false;public;0;12;;@Test(expected = NoAccountFoundForProductTokenException.class) public void testNoAccountFoundForProductTokenException() throws Exception {     // Change sending strategy     CMEndpoint endpoint = (CMEndpoint) camelContext.getEndpoint(applicationContext.getBean(CamelTestConfiguration.class).getUri()).     CMProducer producer = endpoint.createProducer().     producer.setSender(new NoAccountFoundForProductTokenExceptionSender()).     // Body     final SMSMessage smsMessage = new SMSMessage(generateIdAsString(), generateGSM0338Message(), validNumber, null).     send(producer, smsMessage). }
false;public;0;12;;/*      * 3. CM Responses (Faking Exceptions)      */ @Test(expected = CMResponseException.class) public void testCMResponseException() throws Exception {     // Change sending strategy     CMEndpoint endpoint = (CMEndpoint) camelContext.getEndpoint(applicationContext.getBean(CamelTestConfiguration.class).getUri()).     CMProducer producer = endpoint.createProducer().     producer.setSender(new CMResponseExceptionSender()).     // Body     final SMSMessage smsMessage = new SMSMessage(generateIdAsString(), generateUnicodeMessage(), validNumber, null).     send(producer, smsMessage). }
false;public;0;12;;@Test(expected = InsufficientBalanceException.class) public void testInsufficientBalanceException() throws Exception {     // Change sending strategy     CMEndpoint endpoint = (CMEndpoint) camelContext.getEndpoint(applicationContext.getBean(CamelTestConfiguration.class).getUri()).     CMProducer producer = endpoint.createProducer().     producer.setSender(new InsufficientBalanceExceptionSender()).     // Body     final SMSMessage smsMessage = new SMSMessage(generateIdAsString(), generateGSM0338Message(), validNumber, null).     send(producer, smsMessage). }
false;public;0;12;;@Test(expected = InvalidMSISDNException.class) public void testInvalidMSISDNException() throws Exception {     // Change sending strategy     CMEndpoint endpoint = (CMEndpoint) camelContext.getEndpoint(applicationContext.getBean(CamelTestConfiguration.class).getUri()).     CMProducer producer = endpoint.createProducer().     producer.setSender(new InvalidMSISDNExceptionSender()).     // Body     final SMSMessage smsMessage = new SMSMessage(generateIdAsString(), generateUnicodeMessage(), validNumber, null).     send(producer, smsMessage). }
false;public;0;12;;@Test(expected = InvalidProductTokenException.class) public void testInvalidProductTokenException() throws Exception {     // Change sending strategy     CMEndpoint endpoint = (CMEndpoint) camelContext.getEndpoint(applicationContext.getBean(CamelTestConfiguration.class).getUri()).     CMProducer producer = endpoint.createProducer().     producer.setSender(new InvalidProductTokenExceptionSender()).     // Body     final SMSMessage smsMessage = new SMSMessage(generateIdAsString(), generateUnicodeMessage(), validNumber, null).     send(producer, smsMessage). }
false;public;0;12;;@Test(expected = NoMessageException.class) public void testNoMessageException() throws Exception {     // Change sending strategy     CMEndpoint endpoint = (CMEndpoint) camelContext.getEndpoint(applicationContext.getBean(CamelTestConfiguration.class).getUri()).     CMProducer producer = endpoint.createProducer().     producer.setSender(new NoMessageExceptionSender()).     // Body     final SMSMessage smsMessage = new SMSMessage(generateIdAsString(), generateGSM0338Message(), validNumber, null).     send(producer, smsMessage). }
false;public;0;12;;@Test(expected = NotPhoneNumberFoundException.class) public void testNotPhoneNumberFoundException() throws Exception {     // Change sending strategy     CMEndpoint endpoint = (CMEndpoint) camelContext.getEndpoint(applicationContext.getBean(CamelTestConfiguration.class).getUri()).     CMProducer producer = endpoint.createProducer().     producer.setSender(new NotPhoneNumberFoundExceptionSender()).     // Body     final SMSMessage smsMessage = new SMSMessage(generateIdAsString(), generateUnicodeMessage(), validNumber, null).     send(producer, smsMessage). }
false;public;0;12;;@Test(expected = UnknownErrorException.class) public void testUnknownErrorException() throws Exception {     // Change sending strategy     CMEndpoint endpoint = (CMEndpoint) camelContext.getEndpoint(applicationContext.getBean(CamelTestConfiguration.class).getUri()).     CMProducer producer = endpoint.createProducer().     producer.setSender(new UnknownErrorExceptionSender()).     // Body     final SMSMessage smsMessage = new SMSMessage(generateIdAsString(), generateGSM0338Message(), validNumber, null).     send(producer, smsMessage). }
false;public;0;12;;@Test(expected = UnroutableMessageException.class) public void testUnroutableMessageException() throws Exception {     // Change sending strategy     CMEndpoint endpoint = (CMEndpoint) camelContext.getEndpoint(applicationContext.getBean(CamelTestConfiguration.class).getUri()).     CMProducer producer = endpoint.createProducer().     producer.setSender(new UnroutableMessageExceptionSender()).     // Body     final SMSMessage smsMessage = new SMSMessage(generateIdAsString(), generateUnicodeMessage(), validNumber, null).     send(producer, smsMessage). }
false;public;0;7;;@Test(expected = UnsupportedOperationException.class) public void testCMEndpointIsForProducing() throws Exception {     // Change sending strategy     CMEndpoint endpoint = (CMEndpoint) camelContext.getEndpoint(applicationContext.getBean(CamelTestConfiguration.class).getUri()).     endpoint.createConsumer(null). }
false;public;0;7;;@Test public void testCMEndpointGetHost() throws Exception {     // Change sending strategy     CMEndpoint endpoint = (CMEndpoint) camelContext.getEndpoint(applicationContext.getBean(CamelTestConfiguration.class).getUri()).     Assert.isTrue(endpoint.getHost().equals(applicationContext.getEnvironment().getRequiredProperty("cm.url"))). }
false;public;0;7;;@Test(expected = InvalidPayloadRuntimeException.class) public void testSendInvalidPayload() throws Exception {     // Body     final SMSMessage smsMessage = new SMSMessage(generateIdAsString(), generateGSM0338Message(), null, null).     cmProxy.send(smsMessage). }
false;private;0;4;;/*      * CMMessages      */ // @Test(expected = RuntimeException.class) // public void testSkel() throws Exception { // mock.expectedMessageCount(1). //  // // Body // final SMSMessage smsMessage = new SMSMessage("Hello CM", validNumber). // cmProxy.send(smsMessage). //  // mock.assertIsSatisfied(). // } private String generateUnicodeMessage() {     String ch = "\uF400".     return generateRandomLengthMessageByChar(ch). }
false;private;0;4;;private String generateGSM0338Message() {     String ch = "a".     return generateRandomLengthMessageByChar(ch). }
false;private;1;9;;private String generateRandomLengthMessageByChar(String ch) {     // random Length     int msgLength = (int) (Math.random() * 2000).     StringBuffer message = new StringBuffer().     for (int index = 0. index < msgLength. index++) {         message.append(ch).     }     return message.toString(). }
true;private;0;3;//  ;//  private String generateIdAsString() {     return new BigInteger(130, random).toString(32). }
false;private,static;2;5;;private static void send(CMProducer producer, SMSMessage smsMessage) throws Exception {     Exchange exchange = producer.getEndpoint().createExchange().     exchange.getIn().setBody(smsMessage).     producer.process(exchange). }
