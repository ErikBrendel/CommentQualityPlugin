commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;40;;@Override protected int poll() throws Exception {     // Do this here, rather than at the class level.  We only care about it for setting the Exchange header, so     // there's no point growing memory over time.     Map<Long, PullRequest> commentIdToPullRequest = new HashMap<>().     List<PullRequest> pullRequests = pullRequestService.getPullRequests(getRepository(), "open").     // In the end, we want comments oldest to newest.     Stack<Comment> newComments = new Stack<>().     for (PullRequest pullRequest : pullRequests) {         List<CommitComment> commitComments = pullRequestService.getComments(getRepository(), pullRequest.getNumber()).         for (Comment comment : commitComments) {             if (!commentIds.contains(comment.getId())) {                 newComments.add(comment).                 commentIds.add(comment.getId()).                 commentIdToPullRequest.put(comment.getId(), pullRequest).             }         }         List<Comment> comments = issueService.getComments(getRepository(), pullRequest.getNumber()).         for (Comment comment : comments) {             if (!commentIds.contains(comment.getId())) {                 newComments.add(comment).                 commentIds.add(comment.getId()).                 commentIdToPullRequest.put(comment.getId(), pullRequest).             }         }     }     while (!newComments.empty()) {         Comment newComment = newComments.pop().         Exchange e = getEndpoint().createExchange().         e.getIn().setBody(newComment).         // Required by the producers.  Set it here for convenience.         e.getIn().setHeader(GitHubConstants.GITHUB_PULLREQUEST, commentIdToPullRequest.get(newComment.getId())).         getProcessor().process(e).     }     return newComments.size(). }
