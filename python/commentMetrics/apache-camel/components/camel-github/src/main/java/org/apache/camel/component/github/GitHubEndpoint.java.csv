commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;public Producer createProducer() throws Exception {     if (type == GitHubType.CLOSEPULLREQUEST) {         return new ClosePullRequestProducer(this).     } else if (type == GitHubType.PULLREQUESTCOMMENT) {         return new PullRequestCommentProducer(this).     } else if (type == GitHubType.PULLREQUESTSTATE) {         return new PullRequestStateProducer(this).     } else if (type == GitHubType.PULLREQUESTFILES) {         return new PullRequestFilesProducer(this).     } else if (type == GitHubType.GETCOMMITFILE) {         return new GetCommitFileProducer(this).     } else if (type == GitHubType.CREATEISSUE) {         return new CreateIssueProducer(this).     }     throw new IllegalArgumentException("Cannot create producer with type " + type). }
false;public;1;13;;public Consumer createConsumer(Processor processor) throws Exception {     if (type == GitHubType.COMMIT) {         StringHelper.notEmpty(branchName, "branchName", this).         return new CommitConsumer(this, processor, branchName).     } else if (type == GitHubType.PULLREQUEST) {         return new PullRequestConsumer(this, processor).     } else if (type == GitHubType.PULLREQUESTCOMMENT) {         return new PullRequestCommentConsumer(this, processor).     } else if (type == GitHubType.TAG) {         return new TagConsumer(this, processor).     }     throw new IllegalArgumentException("Cannot create consumer with type " + type). }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;0;3;;public GitHubType getType() {     return type. }
true;public;1;3;/**  * What git operation to execute  */ ;/**  * What git operation to execute  */ public void setType(GitHubType type) {     this.type = type. }
false;public;0;3;;public String getBranchName() {     return branchName. }
true;public;1;3;/**  * Name of branch  */ ;/**  * Name of branch  */ public void setBranchName(String branchName) {     this.branchName = branchName. }
false;public;0;3;;public String getUsername() {     return username. }
true;public;1;3;/**  * GitHub username, required unless oauthToken is provided  */ ;/**  * GitHub username, required unless oauthToken is provided  */ public void setUsername(String username) {     this.username = username. }
false;public;0;3;;public String getPassword() {     return password. }
true;public;1;3;/**  * GitHub password, required unless oauthToken is provided  */ ;/**  * GitHub password, required unless oauthToken is provided  */ public void setPassword(String password) {     this.password = password. }
false;public;0;3;;public String getOauthToken() {     return oauthToken. }
true;public;1;3;/**  * GitHub OAuth token, required unless username & password are provided  */ ;/**  * GitHub OAuth token, required unless username & password are provided  */ public void setOauthToken(String oauthToken) {     this.oauthToken = oauthToken. }
false;public;0;3;;public boolean hasOauth() {     return oauthToken != null && oauthToken.length() > 0. }
false;public;0;3;;public String getRepoOwner() {     return repoOwner. }
true;public;1;3;/**  * GitHub repository owner (organization)  */ ;/**  * GitHub repository owner (organization)  */ public void setRepoOwner(String repoOwner) {     this.repoOwner = repoOwner. }
false;public;0;3;;public String getRepoName() {     return repoName. }
true;public;1;3;/**  * GitHub repository name  */ ;/**  * GitHub repository name  */ public void setRepoName(String repoName) {     this.repoName = repoName. }
false;public;0;3;;public String getState() {     return state. }
true;public;1;3;/**  * To set git commit status state  */ ;/**  * To set git commit status state  */ public void setState(String state) {     this.state = state. }
false;public;0;3;;public String getTargetUrl() {     return targetUrl. }
true;public;1;3;/**  * To set git commit status target url  */ ;/**  * To set git commit status target url  */ public void setTargetUrl(String targetUrl) {     this.targetUrl = targetUrl. }
false;public;0;3;;public String getEncoding() {     return encoding. }
true;public;1;3;/**  * To use the given encoding when getting a git commit file  */ ;/**  * To use the given encoding when getting a git commit file  */ public void setEncoding(String encoding) {     this.encoding = encoding. }
