commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override public void configure() throws Exception {     context.addComponent("github", new GitHubComponent()).     from("github://commit/master?username=someguy&password=apassword&repoOwner=anotherguy&repoName=somerepo").process(new GitHubCommitProcessor()).to(mockResultEndpoint). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addComponent("github", new GitHubComponent()).             from("github://commit/master?username=someguy&password=apassword&repoOwner=anotherguy&repoName=somerepo").process(new GitHubCommitProcessor()).to(mockResultEndpoint).         }     }. }
false;public;0;11;;@Test public void commitConsumerTest() throws Exception {     mockResultEndpoint.expectedMessageCount(2).     RepositoryCommit commit1 = commitService.addRepositoryCommit().     RepositoryCommit commit2 = commitService.addRepositoryCommit().     mockResultEndpoint.expectedBodiesReceivedInAnyOrder(commit1, commit2).     Thread.sleep(1 * 1000).     mockResultEndpoint.assertIsSatisfied(). }
false;public;1;9;;@Override public void process(Exchange exchange) throws Exception {     Message in = exchange.getIn().     RepositoryCommit commit = (RepositoryCommit) in.getBody().     User author = commit.getAuthor().     if (log.isDebugEnabled()) {         log.debug("Got commit with author: " + author.getLogin() + ": " + author.getHtmlUrl() + " SHA " + commit.getSha()).     } }
