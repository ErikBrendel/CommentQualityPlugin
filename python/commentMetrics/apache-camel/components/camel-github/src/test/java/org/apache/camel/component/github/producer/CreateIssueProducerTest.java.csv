commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override public void configure() throws Exception {     context.addComponent("github", new GitHubComponent()).     from("direct:createIssue").process(new MockIssueCreateProducerProcessor()).to("github://createissue?state=success&username=someguy&password=apassword&repoOwner=anotherguy&repoName=somerepo"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addComponent("github", new GitHubComponent()).             from("direct:createIssue").process(new MockIssueCreateProducerProcessor()).to("github://createissue?state=success&username=someguy&password=apassword&repoOwner=anotherguy&repoName=somerepo").         }     }. }
false;public;0;17;;@Test public void testCreateIssue() throws Exception {     Repository repository = new Repository().     Endpoint issueProducerEndpoint = getMandatoryEndpoint("direct:createIssue").     Exchange exchange = issueProducerEndpoint.createExchange().     String issueBody = "There's an error".     exchange.getIn().setBody(issueBody).     template.send(issueProducerEndpoint, exchange).     Thread.sleep(1 * 1000).     // Verify that the mock pull request service received this comment.     Issue issue = issueService.getIssue(repository, 1).     assertEquals("Error", issue.getTitle()).     assertEquals("There's an error", issue.getBody()). }
false;public;1;6;;@Override public void process(Exchange exchange) throws Exception {     Message in = exchange.getIn().     Map<String, Object> headers = in.getHeaders().     headers.put(GitHubConstants.GITHUB_ISSUE_TITLE, "Error"). }
