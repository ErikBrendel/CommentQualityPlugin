commented;modifiers;parameterAmount;loc;comment;code
false;public;2;9;;public List<CommitComment> getComments(IRepositoryIdProvider repository, int pullRequestId) {     Long id = new Long(pullRequestId).     if (allComments.containsKey(id)) {         List<CommitComment> comments = allComments.get(id).         return comments.     } else {         return emptyComments.     } }
false;private;0;8;;private User createAuthor() {     User author = new User().     author.setEmail("someguy@gmail.com").     author.setHtmlUrl("http://github/someguy").     author.setLogin("someguy").     return author. }
false;public;2;21;;public CommitComment addComment(Long pullRequestId, String bodyText) {     CommitComment commitComment = new CommitComment().     User author = createAuthor().     commitComment.setUser(author).     commitComment.setCommitId("" + pullRequestId).     commitComment.setId(commentId.getAndIncrement()).     commitComment.setBody(bodyText).     commitComment.setBodyText(bodyText).     List<CommitComment> comments.     if (allComments.containsKey(pullRequestId)) {         comments = allComments.get(pullRequestId).     } else {         comments = new ArrayList<>().     }     comments.add(commitComment).     allComments.put(pullRequestId, comments).     return commitComment. }
false;public;1;15;;public PullRequest addPullRequest(String title) {     User author = createAuthor().     PullRequest pullRequest = new PullRequest().     pullRequest.setUser(author).     pullRequest.setHtmlUrl("https://github.com/someguy/somerepo/pull" + pullRequestNumber).     pullRequest.setTitle(title).     pullRequest.setNumber(pullRequestNumber.get()).     pullRequest.setId(pullRequestNumber.get()).     pullRequest.setState("open").     pullRequests.put(pullRequest.getId(), pullRequest).     pullRequestNumber.incrementAndGet().     return pullRequest. }
false;public;2;5;;@Override public PullRequest getPullRequest(IRepositoryIdProvider repository, int id) throws IOException {     PullRequest pullRequest = pullRequests.get((long) id).     return pullRequest. }
false;public;2;5;;@Override public PullRequest editPullRequest(IRepositoryIdProvider repository, PullRequest request) throws IOException {     pullRequests.put(request.getId(), request).     return request. }
false;public,synchronized;2;14;;@Override public synchronized List<PullRequest> getPullRequests(IRepositoryIdProvider repository, String state) {     List<PullRequest> result = new ArrayList<>().     for (Long id : pullRequests.keySet()) {         PullRequest pr = pullRequests.get(id).         if (pr.getState().equals(state)) {             result.add(pr).         }     }     LOG.debug("Returning list of " + result.size() + " pull requests with state " + state).     return result. }
false;public;2;3;;public void setFiles(int id, List<CommitFile> commitFiles) {     files.put(id, commitFiles). }
false;public;2;4;;@Override public List<CommitFile> getFiles(IRepositoryIdProvider repository, int id) throws IOException {     return files.get(id). }
