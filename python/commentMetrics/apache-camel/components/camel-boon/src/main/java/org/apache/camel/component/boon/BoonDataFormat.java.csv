commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getDataFormatName() {     return "boon". }
false;public;3;6;;@Override public void marshal(Exchange exchange, Object graph, OutputStream stream) throws Exception {     BufferedWriter writer = IOHelper.buffered(new OutputStreamWriter(stream, ExchangeHelper.getCharsetName(exchange))).     objectMapper.toJson(graph, writer).     writer.close(). }
false;public;2;15;;@Override public Object unmarshal(Exchange exchange, InputStream stream) throws Exception {     BufferedReader reader = IOHelper.buffered(new InputStreamReader(stream, ExchangeHelper.getCharsetName(exchange))).     Object result.     try {         if (unmarshalType != null) {             result = objectMapper.fromJson(reader, unmarshalType).         } else {             result = objectMapper.fromJson(reader).         }     } finally {         IOHelper.close(reader).     }     return result. }
false;protected;0;6;;@Override protected void doStart() throws Exception {     if (useList) {         useList().     } }
false;protected;0;4;;@Override protected void doStop() throws Exception { // noop }
false;public;0;3;;// Properties // ------------------------------------------------------------------------- public Class<?> getUnmarshalType() {     return this.unmarshalType. }
false;public;1;3;;public void setUnmarshalType(Class<?> unmarshalType) {     this.unmarshalType = unmarshalType. }
false;public;0;3;;public ObjectMapper getObjectMapper() {     return this.objectMapper. }
false;public;0;3;;public Boolean getUseList() {     return useList. }
false;public;1;3;;public void setUseList(Boolean useList) {     this.useList = useList. }
true;public;0;3;/**  * Uses {@link java.util.List} when unmarshalling.  */ ;/**  * Uses {@link java.util.List} when unmarshalling.  */ public void useList() {     setUnmarshalType(List.class). }
