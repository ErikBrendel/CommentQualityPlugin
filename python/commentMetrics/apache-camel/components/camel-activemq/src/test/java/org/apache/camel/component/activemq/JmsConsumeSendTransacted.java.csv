commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void testTransactedRoute() throws Exception {     sendJMSMessageToKickOffRoute().     // camel route will use a single transaction for send and and ack     consumeMessages(). }
false;private;0;17;;private void consumeMessages() throws Exception {     ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://testTran").     factory.setWatchTopicAdvisories(false).     Connection connection = factory.createConnection().     connection.start().     Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE).     MessageConsumer consumer = session.createConsumer(new ActiveMQQueue("to")).     int messagesToConsume = messageCount.     while (messagesToConsume > 0) {         Message message = consumer.receive(5000).         if (message != null) {             messagesToConsume--.         }     } }
false;private;0;12;;private void sendJMSMessageToKickOffRoute() throws Exception {     ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://testTran").     factory.setWatchTopicAdvisories(false).     Connection connection = factory.createConnection().     connection.start().     Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE).     MessageProducer producer = session.createProducer(new ActiveMQQueue("from")).     TextMessage message = session.createTextMessage("Some Text, messageCount:" + messageCount++).     message.setIntProperty("seq", messageCount).     producer.send(message).     connection.close(). }
false;private;1;10;;private BrokerService createBroker(boolean deleteAllMessages) throws Exception {     BrokerService brokerService = new BrokerService().     brokerService.setDeleteAllMessagesOnStartup(deleteAllMessages).     brokerService.setBrokerName("testTran").     brokerService.setAdvisorySupport(false).     brokerService.setUseJmx(false).     brokerService.setDataDirectory("target/data").     brokerService.addConnector("tcp://0.0.0.0:61616").     return brokerService. }
false;protected;0;12;;@SuppressWarnings("unchecked") @Override protected AbstractXmlApplicationContext createApplicationContext() {     try {         broker = createBroker(true).         broker.start().     } catch (Exception e) {         throw new RuntimeException("Failed to start broker", e).     }     return new ClassPathXmlApplicationContext("org/apache/activemq/camel/jmsConsumeSendTransacted.xml"). }
