commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Test public void testSendingViaJmsIsReceivedByCamel() throws Exception {     MockEndpoint result = resolveMandatoryEndpoint("mock:result", MockEndpoint.class).     result.expectedBodiesReceived(expectedBody).     result.message(0).header("foo").isEqualTo("bar").     // lets create a message     Destination destination = getMandatoryBean(Destination.class, "sendTo").     ConnectionFactory factory = getMandatoryBean(ConnectionFactory.class, "connectionFactory").     Connection connection = factory.createConnection().     connection.start().     Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE).     MessageProducer producer = session.createProducer(destination).     // now lets send a message     ObjectMessage message = session.createObjectMessage(expectedBody).     message.setStringProperty("foo", "bar").     producer.send(message).     result.assertIsSatisfied().     LOG.info("Received message: " + result.getReceivedExchanges()). }
false;public;0;26;;@Test public void testConsumingViaJMSReceivesMessageFromCamel() throws Exception {     // lets create a message     Destination destination = getMandatoryBean(Destination.class, "consumeFrom").     ConnectionFactory factory = getMandatoryBean(ConnectionFactory.class, "connectionFactory").     ProducerTemplate template = getMandatoryBean(ProducerTemplate.class, "camelTemplate").     assertNotNull("template is valid", template).     Connection connection = factory.createConnection().     connection.start().     Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE).     LOG.info("Consuming from: " + destination).     MessageConsumer consumer = session.createConsumer(destination).     // now lets send a message     template.sendBody("seda:consumer", expectedBody).     Message message = consumer.receive(5000).     assertNotNull("Should have received a message from destination: " + destination, message).     TextMessage textMessage = assertIsInstanceOf(TextMessage.class, message).     assertEquals("Message body", expectedBody, textMessage.getText()).     LOG.info("Received message: " + message). }
false;protected;0;3;;protected int getExpectedRouteCount() {     return 0. }
false;protected;0;3;;protected ClassPathXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/component/activemq/spring.xml"). }
