commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isSatisified() throws Exception {     return broker.getAdminView().getTotalDequeueCount() >= messageCount. }
false;public;0;14;;@Test public void testConsume() throws Exception {     LOG.info("Wait for dequeue message...").     assertTrue(Wait.waitFor(new Wait.Condition() {          @Override         public boolean isSatisified() throws Exception {             return broker.getAdminView().getTotalDequeueCount() >= messageCount.         }     }, 20 * 60 * 1000)).     long duration = System.currentTimeMillis() - firstConsumed.get().     LOG.info("Done message consumption in " + duration + "millis"). }
false;private;0;15;;private void sendJMSMessageToKickOffRoute() throws Exception {     ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://test").     factory.setWatchTopicAdvisories(false).     Connection connection = factory.createConnection().     connection.start().     Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE).     MessageProducer producer = session.createProducer(new ActiveMQQueue("scp_transacted")).     for (int i = 0. i < messageCount. i++) {         TextMessage message = session.createTextMessage("Some Text, messageCount:" + i).         message.setJMSCorrelationID("pleaseCorrelate").         producer.send(message).     }     LOG.info("Sent: " + messageCount).     connection.close(). }
false;private;1;20;;private BrokerService createBroker(boolean deleteAllMessages) throws Exception {     BrokerService brokerService = new BrokerService().     brokerService.setDeleteAllMessagesOnStartup(deleteAllMessages).     brokerService.setBrokerName("test").     PolicyMap policyMap = new PolicyMap().     PolicyEntry defaultPolicy = new PolicyEntry().     policyMap.setDefaultEntry(defaultPolicy).     brokerService.setDestinationPolicy(policyMap).     brokerService.setAdvisorySupport(false).     brokerService.setDataDirectory("target/data").     // AMQPersistenceAdapter amq = new AMQPersistenceAdapter().     // amq.setDirectory(new File("target/data")).     // brokerService.setPersistenceAdapter(amq).     KahaDBPersistenceAdapter kahaDBPersistenceAdapter = (KahaDBPersistenceAdapter) brokerService.getPersistenceAdapter().     kahaDBPersistenceAdapter.setEnableJournalDiskSyncs(false).     brokerService.addConnector("tcp://localhost:61616").     return brokerService. }
false;protected;0;21;;@Override protected AbstractXmlApplicationContext createApplicationContext() {     deleteDirectory("target/data").     // make broker available to recovery processing on app context start     try {         broker = createBroker(true).         broker.start().     } catch (Exception e) {         throw new RuntimeException("Failed to start broker", e).     }     try {         sendJMSMessageToKickOffRoute().     } catch (Exception e) {         throw new RuntimeException("Failed to fill q", e).     }     return new ClassPathXmlApplicationContext("org/apache/camel/component/activemq/transactedconsume.xml"). }
false;public;1;11;;@Override public void process(Exchange exchange) throws Exception {     if (consumed.getAndIncrement() == 0) {         firstConsumed.set(System.currentTimeMillis()).     }     ActiveMQTextMessage m = (ActiveMQTextMessage) ((JmsMessage) exchange.getIn()).getJmsMessage().     // Thread.currentThread().sleep(500).     if (consumed.get() % 500 == 0) {         LOG.info("received on " + m.getConnection().toString()).     } }
