commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;public void process(Exchange exchange) {     exchange.getIn().setBody("James").     Map<String, Object> headers = new HashMap<String, Object>().     headers.put("cheese", 123).     headers.put("JMSReplyTo", replyQueueName).     headers.put("JMSCorrelationID", correlationID).     headers.put("JMSXGroupID", groupID).     exchange.getIn().setHeaders(headers). }
false;public;0;38;;@Test public void testPerformRequestReplyOverJms() throws Exception {     Map<String, Object> headers = new HashMap<String, Object>().     headers.put("cheese", 123).     headers.put("JMSReplyTo", replyQueueName).     headers.put("JMSCorrelationID", correlationID).     headers.put("JMSXGroupID", groupID).     Exchange reply = template.request("activemq:test.server?replyTo=queue:test.reply", new Processor() {          public void process(Exchange exchange) {             exchange.getIn().setBody("James").             Map<String, Object> headers = new HashMap<String, Object>().             headers.put("cheese", 123).             headers.put("JMSReplyTo", replyQueueName).             headers.put("JMSCorrelationID", correlationID).             headers.put("JMSXGroupID", groupID).             exchange.getIn().setHeaders(headers).         }     }).     Message in = reply.getIn().     Object replyTo = in.getHeader("JMSReplyTo").     LOG.info("Reply to is: " + replyTo).     LOG.info("Received headers: " + in.getHeaders()).     LOG.info("Received body: " + in.getBody()).     assertMessageHeader(in, "JMSCorrelationID", correlationID).     Map<String, Object> receivedHeaders = myBean.getHeaders().     assertThat(receivedHeaders, hasKey("JMSReplyTo")).     assertThat(receivedHeaders, hasEntry("JMSXGroupID", groupID)).     assertThat(receivedHeaders, hasEntry("JMSCorrelationID", correlationID)).     replyTo = receivedHeaders.get("JMSReplyTo").     LOG.info("Reply to is: " + replyTo).     Destination destination = assertIsInstanceOf(Destination.class, replyTo).     assertEquals("ReplyTo", replyQueueName, destination.toString()). }
false;protected;0;9;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     // START SNIPPET: example     camelContext.addComponent("activemq", activeMQComponent("vm://localhost?broker.persistent=false")).     return camelContext. }
false;public;0;3;;public void configure() throws Exception {     from("activemq:test.server").bean(myBean). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("activemq:test.server").bean(myBean).         }     }. }
false;public;2;5;;public String process(@Headers Map<String, Object> headers, String body) {     this.headers = headers.     LOG.info("process() invoked with headers: " + headers).     return "Hello " + body. }
false;public;0;3;;public Map<String, Object> getHeaders() {     return headers. }
