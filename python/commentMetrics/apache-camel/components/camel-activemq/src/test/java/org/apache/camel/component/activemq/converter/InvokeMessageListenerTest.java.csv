commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testSendTextMessage() throws Exception {     String expectedBody = "Hello there!".     template.sendBodyAndHeader(startEndpointUri, expectedBody, "cheese", 123).     listener.assertMessagesArrived(1).     List<Message> list = listener.flushMessages().     assertTrue("Should have received some messages!", !list.isEmpty()).     Message message = list.get(0).     log.debug("Received: " + message).     TextMessage textMessage = assertIsInstanceOf(TextMessage.class, message).     assertEquals("Text mesage body: " + textMessage, expectedBody, textMessage.getText()). }
false;protected;0;5;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     camelContext.addComponent("activemq", activeMQComponent("vm://localhost?broker.persistent=false")).     return camelContext. }
false;public;0;3;;public void configure() throws Exception {     from(startEndpointUri).bean(listener). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(startEndpointUri).bean(listener).         }     }. }
