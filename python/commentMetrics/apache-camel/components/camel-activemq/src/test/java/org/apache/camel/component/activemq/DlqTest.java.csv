commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isSatisified() throws Exception {     return broker.getAdminView().getTotalEnqueueCount() == 2. }
false;public;0;13;;@Test public void testSendToDlq() throws Exception {     sendJMSMessageToKickOffRoute().     LOG.info("Wait for dlq message...").     assertTrue(Wait.waitFor(new Wait.Condition() {          @Override         public boolean isSatisified() throws Exception {             return broker.getAdminView().getTotalEnqueueCount() == 2.         }     })). }
false;private;0;12;;private void sendJMSMessageToKickOffRoute() throws Exception {     ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://testDlq").     factory.setWatchTopicAdvisories(false).     Connection connection = factory.createConnection().     connection.start().     Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE).     MessageProducer producer = session.createProducer(new ActiveMQQueue("fidEtpOrders")).     TextMessage message = session.createTextMessage("Some Text, messageCount:" + messageCount++).     message.setJMSCorrelationID("pleaseCorrelate").     producer.send(message).     connection.close(). }
false;private;1;8;;private BrokerService createBroker(boolean deleteAllMessages) throws Exception {     BrokerService brokerService = new BrokerService().     brokerService.setDeleteAllMessagesOnStartup(deleteAllMessages).     brokerService.setBrokerName("testDlq").     brokerService.setAdvisorySupport(false).     brokerService.setDataDirectory("target/data").     return brokerService. }
false;protected;0;15;;@Override protected AbstractXmlApplicationContext createApplicationContext() {     deleteDirectory("target/data").     // make broker available to recovery processing on app context start     try {         broker = createBroker(true).         broker.start().     } catch (Exception e) {         throw new RuntimeException("Failed to start broker", e).     }     return new ClassPathXmlApplicationContext("org/apache/camel/component/activemq/dlq.xml"). }
false;public;1;4;;public String enrich(String body) throws Exception {     LOG.info("Got body: " + body).     throw new RuntimeException("won't enrich today!"). }
