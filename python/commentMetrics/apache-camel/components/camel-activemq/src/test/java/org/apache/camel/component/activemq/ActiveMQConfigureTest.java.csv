commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testJmsTemplateUsesPoolingConnectionFactory() throws Exception {     JmsEndpoint endpoint = resolveMandatoryEndpoint("activemq:test.foo").     JmsProducer producer = (JmsProducer) endpoint.createProducer().     JmsTemplate template = assertIsInstanceOf(JmsTemplate.class, producer.getInOutTemplate()).     assertEquals("pubSubDomain", false, template.isPubSubDomain()).     assertIsInstanceOf(PooledConnectionFactory.class, template.getConnectionFactory()). }
false;public;0;10;;@Test public void testJmsTemplateUsesSingleConnectionFactory() throws Exception {     JmsEndpoint endpoint = resolveMandatoryEndpoint("activemq:test.foo?useSingleConnection=true").     JmsProducer producer = (JmsProducer) endpoint.createProducer().     JmsTemplate template = assertIsInstanceOf(JmsTemplate.class, producer.getInOutTemplate()).     assertEquals("pubSubDomain", false, template.isPubSubDomain()).     SingleConnectionFactory connectionFactory = assertIsInstanceOf(SingleConnectionFactory.class, template.getConnectionFactory()).     assertIsInstanceOf(ActiveMQConnectionFactory.class, connectionFactory.getTargetConnectionFactory()). }
false;public;0;13;;@Test public void testSessionTransactedWithoutTransactionManager() throws Exception {     JmsEndpoint endpoint = resolveMandatoryEndpoint("activemq:test.foo?transacted=true&lazyCreateTransactionManager=false").     JmsConfiguration configuration = endpoint.getConfiguration().     assertIsInstanceOf(ActiveMQConfiguration.class, configuration).     assertTrue("The JMS sessions are not transacted!", endpoint.isTransacted()).     assertTrue("The JMS sessions are not transacted!", configuration.isTransacted()).     assertNull("A transaction manager has been lazy-created!", endpoint.getTransactionManager()).     assertNull("A transaction manager has been lazy-created!", configuration.getTransactionManager()). }
false;public;0;9;;@Test public void testJmsTemplateDoesNotUsePoolingConnectionFactory() throws Exception {     JmsEndpoint endpoint = resolveMandatoryEndpoint("activemq:test.foo?usePooledConnection=false").     JmsProducer producer = (JmsProducer) endpoint.createProducer().     JmsTemplate template = assertIsInstanceOf(JmsTemplate.class, producer.getInOutTemplate()).     assertEquals("pubSubDomain", false, template.isPubSubDomain()).     assertIsInstanceOf(ActiveMQConnectionFactory.class, template.getConnectionFactory()). }
false;public;0;9;;@Test public void testListenerContainerUsesSpringConnectionFactory() throws Exception {     JmsEndpoint endpoint = resolveMandatoryEndpoint("activemq:topic:test.foo").     JmsConsumer consumer = endpoint.createConsumer(new CamelLogProcessor()).     AbstractMessageListenerContainer listenerContainer = consumer.getListenerContainer().     assertEquals("pubSubDomain", true, listenerContainer.isPubSubDomain()).     assertIsInstanceOf(PooledConnectionFactory.class, listenerContainer.getConnectionFactory()). }
false;protected;1;5;;@Override protected JmsEndpoint resolveMandatoryEndpoint(String uri) {     Endpoint endpoint = super.resolveMandatoryEndpoint(uri).     return assertIsInstanceOf(JmsEndpoint.class, endpoint). }
