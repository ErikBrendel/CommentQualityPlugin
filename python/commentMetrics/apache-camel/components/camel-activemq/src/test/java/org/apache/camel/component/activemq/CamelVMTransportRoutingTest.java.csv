commented;modifiers;parameterAmount;loc;comment;code
false;public;0;30;;@SuppressWarnings("unused") public void testSendReceiveWithCamelRouteIntercepting() throws Exception {     final int msgCount = 1000.     Session sendSession = senderConnection.createSession(false, Session.AUTO_ACKNOWLEDGE).     Session receiverSession1 = receiverConnection1.createSession(false, Session.AUTO_ACKNOWLEDGE).     Session receiverSession2 = receiverConnection2.createSession(false, Session.AUTO_ACKNOWLEDGE).     Destination sendTo = sendSession.createTopic(senderTopic).     Destination receiveFrom = receiverSession1.createTopic(receiverTopic).     TextMessage message = sendSession.createTextMessage(msgString).     MessageConsumer receiver1 = receiverSession1.createConsumer(receiveFrom).     MessageConsumer receiver2 = receiverSession2.createConsumer(receiveFrom).     MessageProducer sender = sendSession.createProducer(sendTo).     for (int i = 0. i < msgCount. ++i) {         sender.send(message).     }     for (int i = 0. i < msgCount. ++i) {         LOG.debug("Attempting Received for Message #" + i).         TextMessage received1 = (TextMessage) receiver1.receive(5000).         Assert.assertNotNull(received1).         Assert.assertEquals(msgString, received1.getText()).     } }
false;protected;0;9;;protected BrokerService createBroker() throws Exception {     BrokerService service = new BrokerService().     service.setPersistent(false).     service.setUseJmx(false).     connector = service.addConnector("tcp://localhost:0").     return service. }
false;public;0;19;;@Override public void setUp() throws Exception {     broker = createBroker().     broker.start().     broker.waitUntilStarted().     Thread.sleep(1000).     createCamelContext().     ActiveMQConnectionFactory connFactory = new ActiveMQConnectionFactory(connector.getConnectUri()).     senderConnection = connFactory.createConnection().     receiverConnection1 = connFactory.createConnection().     receiverConnection2 = connFactory.createConnection().     receiverConnection1.start().     receiverConnection2.start(). }
false;public;0;20;;@Override public void tearDown() throws Exception {     if (senderConnection != null) {         senderConnection.close().     }     if (receiverConnection1 != null) {         receiverConnection1.close().     }     if (receiverConnection2 != null) {         receiverConnection2.close().     }     camelContext.stop().     broker.stop().     ThreadTracker.result(). }
false;public;0;4;;@Override public void configure() throws Exception {     from(fromEndpoint).to(toEndpoint). }
false;private;0;16;;private void createCamelContext() throws Exception {     final String fromEndpoint = "activemq:topic:" + senderTopic.     final String toEndpoint = "activemq:topic:" + receiverTopic.     LOG.info("creating context and sending message").     camelContext = new DefaultCamelContext().     camelContext.addComponent("activemq", ActiveMQComponent.activeMQComponent("vm://localhost?create=false&waitForStart=10000")).     camelContext.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(fromEndpoint).to(toEndpoint).         }     }).     camelContext.start(). }
