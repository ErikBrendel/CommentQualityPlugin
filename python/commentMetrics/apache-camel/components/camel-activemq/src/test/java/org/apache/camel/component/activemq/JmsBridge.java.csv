commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testBridgeWorks() throws Exception {     sendJMSMessageToKickOffRoute().     consumeMessages().     LOG.info("ConnectionCount: " + connectionCount.get()).     assertEquals("x connections", 5 + errorLimit, connectionCount.get()). }
false;private;0;17;;private void consumeMessages() throws Exception {     ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://sub").     factory.setWatchTopicAdvisories(false).     Connection connection = factory.createConnection().     connection.start().     Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE).     MessageConsumer consumer = session.createConsumer(new ActiveMQQueue("to")).     int messagesToConsume = messageCount.     while (messagesToConsume > 0) {         Message message = consumer.receive(5000).         if (message != null) {             messagesToConsume--.         }     } }
false;private;0;15;;private void sendJMSMessageToKickOffRoute() throws Exception {     ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://pub").     factory.setWatchTopicAdvisories(false).     Connection connection = factory.createConnection().     connection.start().     Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE).     MessageProducer producer = session.createProducer(new ActiveMQQueue("from")).     for (int i = 0. i < backLog. i++) {         TextMessage message = session.createTextMessage("Some Text, messageCount:" + messageCount++).         message.setIntProperty("seq", messageCount).         producer.send(message).     }     connection.close(). }
false;private;3;12;;private BrokerService createBroker(String name, int port, boolean deleteAllMessages) throws Exception {     BrokerService brokerService = new BrokerService().     brokerService.setDeleteAllMessagesOnStartup(deleteAllMessages).     brokerService.setBrokerName(name).     brokerService.setAdvisorySupport(false).     brokerService.setUseJmx(false).     brokerService.setDataDirectory("target/data").     if (port > 0) {         brokerService.addConnector("tcp://0.0.0.0:" + port).     }     return brokerService. }
false;public;2;7;;@Override public void send(ProducerBrokerExchange producerExchange, org.apache.activemq.command.Message messageSend) throws Exception {     if (sendCount.incrementAndGet() <= errorLimit) {         throw new RuntimeException("You need to try send " + errorLimit + " times!").     }     super.send(producerExchange, messageSend). }
false;public;2;7;;@Override public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {     if (((TransportConnector) context.getConnector()).getConnectUri().getScheme().equals("tcp") && connectionCount.incrementAndGet() <= errorLimit) {         throw new SecurityException("You need to try connect " + errorLimit + " times!").     }     super.addConnection(context, info). }
false;protected;0;34;;@SuppressWarnings("unchecked") @Override protected AbstractXmlApplicationContext createApplicationContext() {     try {         brokerSub = createBroker("sub", 61617, true).         brokerSub.setPlugins(new BrokerPlugin[] { new BrokerPluginSupport() {              @Override             public void send(ProducerBrokerExchange producerExchange, org.apache.activemq.command.Message messageSend) throws Exception {                 if (sendCount.incrementAndGet() <= errorLimit) {                     throw new RuntimeException("You need to try send " + errorLimit + " times!").                 }                 super.send(producerExchange, messageSend).             }              @Override             public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {                 if (((TransportConnector) context.getConnector()).getConnectUri().getScheme().equals("tcp") && connectionCount.incrementAndGet() <= errorLimit) {                     throw new SecurityException("You need to try connect " + errorLimit + " times!").                 }                 super.addConnection(context, info).             }         } }).         brokerSub.start().         brokerPub = createBroker("pub", 61616, true).         brokerPub.start().     } catch (Exception e) {         throw new RuntimeException("Failed to start broker", e).     }     return new ClassPathXmlApplicationContext("org/apache/activemq/camel/jmsBridge.xml"). }
