commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@After public void destroyCamelContext() throws Exception {     if (camelContext != null) {         camelContext.stop().         camelContext = null.     } }
false;public;0;17;;@Test public void testBadVMTransportOptionsJMSPrefix() throws Exception {     try {         final String vmUri = "vm://localhost?" + "jms.redeliveryPolicy.maximumRedeliveries=0&" + "jms.redeliveryPolicy.initialRedeliveryDelay=500&" + "jms.useAsyncSend=false&jms.sendTimeout=ABC&" + "jms.maxXXXXReconnectAttempts=1&jms.timeout=3000".         LOG.info("creating context with bad URI: " + vmUri).         ActiveMQComponent amq = ActiveMQComponent.activeMQComponent(vmUri).         amq.getConfiguration().getConnectionFactory().         fail("Should have received an exception from the bad URI.").     } catch (Exception e) {     // Expected     } }
false;public;0;4;;@Override public void configure() throws Exception {     from(queueEndpointName).bean(Consumer.class, "consume"). }
false;public;0;28;;@Test public void testBadVMTransportOptionsBrokerPrefix() throws Exception {     try {         final String vmUri = "vm://localhost?" + "broker.XXX=foo&broker.persistent=XXX&broker.useJmx=false".         LOG.info("creating context with bad URI: " + vmUri).         ActiveMQComponent amq = ActiveMQComponent.activeMQComponent(vmUri).         camelContext = new DefaultCamelContext().         camelContext.addComponent("activemq", amq).         final String queueEndpointName = "activemq:queuetest.Queue".         camelContext.addRoutes(new RouteBuilder() {              @Override             public void configure() throws Exception {                 from(queueEndpointName).bean(Consumer.class, "consume").             }         }).         camelContext.start().         final ProducerTemplate producerTemplate = camelContext.createProducerTemplate().         producerTemplate.sendBody(queueEndpointName, "message").         fail("Should have received an exception from the bad URI.").     } catch (Exception e) {     // Expected     } }
