commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void process(final Exchange exchange) throws Exception {     messageReceived = true. }
false;public;0;4;;@Override public void configure() throws Exception {     from("testq:test.in").delay(200).process(processor). }
false;public;0;38;;@Test public void testShouldCleanlyShutdownCamelBeforeStoppingBroker() throws Exception {     final BrokerService broker = new BrokerService().     broker.setBrokerName("testBroker").     broker.setUseJmx(true).     broker.setPersistent(false).     broker.addConnector("vm://testBroker").     final DefaultCamelContext camel = new DefaultCamelContext().     camel.setName("test-camel").     final CamelShutdownHook hook = new CamelShutdownHook(broker).     hook.setCamelContext(camel).     broker.start().     camel.addComponent("testq", ActiveMQComponent.activeMQComponent("vm://testBroker?create=false")).     final TestProcessor processor = new TestProcessor().     camel.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("testq:test.in").delay(200).process(processor).         }     }).     camel.start().     final ProducerTemplate producer = camel.createProducerTemplate().     producer.sendBody("testq:test.in", "Hi!").     producer.stop().     broker.stop().     assertTrue("Message should be received", processor.messageReceived).     assertTrue("Camel context should be stopped", camel.isStopped()).     assertTrue("Broker should be stopped", broker.isStopped()). }
