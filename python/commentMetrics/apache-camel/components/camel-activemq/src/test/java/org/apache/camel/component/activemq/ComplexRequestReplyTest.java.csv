commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Before public void setUp() throws Exception {     createBrokerA().     brokerAUri = brokerA.getTransportConnectors().get(0).getPublishableConnectString().     createBrokerB().     brokerBUri = brokerB.getTransportConnectors().get(0).getPublishableConnectString().     connectionUri = "failover:(" + brokerAUri + "," + brokerBUri + ")?randomize=false".     senderContext = createSenderContext(). }
false;public;0;12;;@After public void tearDown() throws Exception {     try {         shutdownBrokerA().     } catch (Exception ex) {     }     try {         shutdownBrokerB().     } catch (Exception e) {     } }
false;public;0;32;;@Test public void testSendThenFailoverThenSend() throws Exception {     ProducerTemplate requester = senderContext.createProducerTemplate().     LOG.info("*** Sending Request 1").     String response = (String) requester.requestBody(fromEndpoint, "This is a request").     assertNotNull(response != null).     LOG.info("Got response: " + response).     /**      * You actually don't need to restart the broker, just wait long enough      * and the next next send will take out a closed connection and      * reconnect, and if you happen to hit the broker you weren't on last      * time, then you will see the failure.      */     TimeUnit.SECONDS.sleep(20).     /**      * I restart the broker after the wait that exceeds the idle timeout      * value of the PooledConnectionFactory to show that it doesn't matter      * now as the older connection has already been closed.      */     LOG.info("Restarting Broker A now.").     shutdownBrokerA().     createBrokerA().     LOG.info("*** Sending Request 2").     response = (String) requester.requestBody(fromEndpoint, "This is a request").     assertNotNull(response != null).     LOG.info("Got response: " + response). }
false;public;0;4;;@Override public void configure() throws Exception {     from(fromEndpoint).inOut(toEndpoint). }
false;private;0;26;;private CamelContext createSenderContext() throws Exception {     ActiveMQConnectionFactory amqFactory = new ActiveMQConnectionFactory(connectionUri).     amqFactory.setWatchTopicAdvisories(false).     PooledConnectionFactory pooled = new PooledConnectionFactory(amqFactory).     pooled.setMaxConnections(1).     pooled.setMaximumActiveSessionPerConnection(500).     // If this is not zero the connection could get closed and the request     // reply can fail.     pooled.setIdleTimeout(0).     CamelContext camelContext = new DefaultCamelContext().     ActiveMQComponent amqComponent = new ActiveMQComponent().     amqComponent.setConnectionFactory(pooled).     camelContext.addComponent("activemq", amqComponent).     camelContext.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(fromEndpoint).inOut(toEndpoint).         }     }).     camelContext.start().     return camelContext. }
false;private;0;6;;private void createBrokerA() throws Exception {     brokerA = createBroker("brokerA").     brokerAContext = createBrokerCamelContext("brokerA").     brokerA.start().     brokerA.waitUntilStarted(). }
false;private;0;9;;private void shutdownBrokerA() throws Exception {     try {         brokerAContext.stop().     } catch (Exception e) {         brokerA.stop().         brokerA.waitUntilStopped().         brokerA = null.     } }
false;private;0;6;;private void createBrokerB() throws Exception {     brokerB = createBroker("brokerB").     brokerBContext = createBrokerCamelContext("brokerB").     brokerB.start().     brokerB.waitUntilStarted(). }
false;private;0;9;;private void shutdownBrokerB() throws Exception {     try {         brokerBContext.stop().     } finally {         brokerB.stop().         brokerB.waitUntilStopped().         brokerB = null.     } }
false;private;1;9;;private BrokerService createBroker(String name) throws Exception {     BrokerService service = new BrokerService().     service.setPersistent(false).     service.setUseJmx(false).     service.setBrokerName(name).     service.addConnector("tcp://localhost:0").     return service. }
false;public;0;4;;@Override public void configure() throws Exception {     from(brokerEndpoint).setBody().simple("Returning ${body}").log("***Reply sent to ${header.JMSReplyTo} CoorId = ${header.JMSCorrelationID}"). }
false;private;1;13;;private CamelContext createBrokerCamelContext(String brokerName) throws Exception {     CamelContext camelContext = new DefaultCamelContext().     camelContext.addComponent("activemq", ActiveMQComponent.activeMQComponent("vm://" + brokerName + "?create=false&waitForStart=10000")).     camelContext.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(brokerEndpoint).setBody().simple("Returning ${body}").log("***Reply sent to ${header.JMSReplyTo} CoorId = ${header.JMSCorrelationID}").         }     }).     camelContext.start().     return camelContext. }
