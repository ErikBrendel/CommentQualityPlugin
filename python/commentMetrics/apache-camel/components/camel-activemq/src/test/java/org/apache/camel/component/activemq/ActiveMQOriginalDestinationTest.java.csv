commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Test public void testActiveMQOriginalDestination() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBody("activemq:queue:foo", "Hello World").     assertMockEndpointsSatisfied().     // consume from bar     Exchange out = consumer.receive("activemq:queue:bar", 5000).     assertNotNull(out).     // and we should have foo as the original destination     JmsMessage msg = out.getIn(JmsMessage.class).     Message jms = msg.getJmsMessage().     ActiveMQMessage amq = assertIsInstanceOf(ActiveMQMessage.class, jms).     ActiveMQDestination original = amq.getOriginalDestination().     assertNotNull(original).     assertEquals("foo", original.getPhysicalName()).     assertEquals("Queue", original.getDestinationTypeAsString()). }
false;protected;0;5;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     camelContext.addComponent("activemq", activeMQComponent("vm://localhost?broker.persistent=false")).     return camelContext. }
false;public;0;4;;@Override public void configure() throws Exception {     from("activemq:queue:foo").to("activemq:queue:bar").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:queue:foo").to("activemq:queue:bar").to("mock:result").         }     }. }
