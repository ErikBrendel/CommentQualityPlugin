commented;modifiers;parameterAmount;loc;comment;code
false;public;0;33;;@Test public void testRoundTrip() throws Exception {     Destination destination = getMandatoryBean(Destination.class, "consumeFrom").     // lets create a message     ConnectionFactory factoryCON = getMandatoryBean(ConnectionFactory.class, "CON").     Connection consumerConnection = factoryCON.createConnection().     consumerConnection.start().     Session consumerSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE).     LOG.info("Consuming from: " + destination).     MessageConsumer consumer = consumerSession.createConsumer(destination).     // lets create a message     ConnectionFactory factoryPRO = getMandatoryBean(ConnectionFactory.class, "PRO").     Connection producerConnection = factoryPRO.createConnection().     producerConnection.start().     Session producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE).     MessageProducer producer = producerSession.createProducer(producerSession.createQueue("incoming1")).     Message message = producerSession.createTextMessage("Where are you").     message.setStringProperty("foo", "bar").     producer.send(message).     message = consumer.receive(10000).     assertNotNull("Should have received a message from destination: " + destination, message).     TextMessage textMessage = assertIsInstanceOf(TextMessage.class, message).     assertEquals("Message body", "If you don't ask me my name, I'm not going to tell you!", textMessage.getText()). }
false;private;1;9;;private BrokerService createBroker(String name) throws Exception {     BrokerService brokerService = new BrokerService().     brokerService.setDeleteAllMessagesOnStartup(true).     brokerService.setBrokerName(name).     brokerService.setUseJmx(false).     brokerService.setPersistent(false).     brokerService.addConnector("tcp://0.0.0.0:0").     return brokerService. }
false;protected;0;21;;@SuppressWarnings("unchecked") @Override protected AbstractXmlApplicationContext createApplicationContext() {     try {         consumerBroker = createBroker("CON").         producerBroker = createBroker("PRO").         DiscoveryNetworkConnector discoveryNetworkConnector = new DiscoveryNetworkConnector().         discoveryNetworkConnector.setUri(new URI("static:" + consumerBroker.getTransportConnectorByScheme("tcp").getPublishableConnectString())).         discoveryNetworkConnector.setDuplex(true).         discoveryNetworkConnector.setNetworkTTL(2).         discoveryNetworkConnector.setDynamicallyIncludedDestinations(Arrays.asList(new ActiveMQDestination[] { new ActiveMQQueue("service1") })).         discoveryNetworkConnector.setDestinationFilter("ActiveMQ.Advisory.TempQueue,ActiveMQ.Advisory.TempTopic,ActiveMQ.Advisory.Consumer.Queue.>").         producerBroker.addNetworkConnector(discoveryNetworkConnector).         consumerBroker.start().         producerBroker.start().     } catch (Exception e) {         throw new RuntimeException("Failed to start broker", e).     }     return new ClassPathXmlApplicationContext("org/apache/camel/component/activemq/requestReply.xml"). }
