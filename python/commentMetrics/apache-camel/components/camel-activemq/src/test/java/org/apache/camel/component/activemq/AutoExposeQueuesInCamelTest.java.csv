commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;public void testWorks() throws Exception {     Thread.sleep(2000).     LOG.debug("Looking for endpoints...").     broker.getAdminView().addQueue("runtime").     Thread.sleep(1000).     // Changed from using CamelContextHelper.getSingletonEndpoints here     // because JMS Endpoints in Camel     // are always non-singleton     List<BrowsableEndpoint> endpoints = getEndpoints(camelContext, BrowsableEndpoint.class).     for (BrowsableEndpoint endpoint : endpoints) {         LOG.debug("Endpoint: " + endpoint).     }     assertEquals("Should have found an endpoint: " + endpoints, 2, endpoints.size()). }
false;public;2;11;;public <T> List<T> getEndpoints(CamelContext camelContext, Class<T> type) {     List<T> answer = new ArrayList<T>().     Collection<Endpoint> endpoints = camelContext.getEndpoints().     for (Endpoint endpoint : endpoints) {         if (type.isInstance(endpoint)) {             T value = type.cast(endpoint).             answer.add(value).         }     }     return answer. }
false;protected;0;12;;@Override protected void setUp() throws Exception {     super.setUp().     // lets configure the ActiveMQ component for Camel     component = new ActiveMQComponent().     component.setBrokerURL(bindAddress).     component.setExposeAllQueues(true).     camelContext.addComponent("activemq", component).     camelContext.start(). }
false;protected;0;5;;@Override protected void tearDown() throws Exception {     camelContext.stop().     super.tearDown(). }
false;protected;0;6;;@Override protected BrokerService createBroker() throws Exception {     BrokerService broker = super.createBroker().     broker.setDestinations(new ActiveMQDestination[] { sampleQueue, sampleTopic }).     return broker. }
