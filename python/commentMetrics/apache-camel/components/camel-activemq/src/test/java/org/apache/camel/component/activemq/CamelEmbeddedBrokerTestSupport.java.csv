commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;11;;@Override protected void setUp() throws Exception {     bindAddress = "tcp://localhost:61616".     super.setUp().     camelContext = createCamelContext().     addCamelRoutes(camelContext).     assertValidContext(camelContext).     camelContext.start().     template = camelContext.createProducerTemplate().     template.start(). }
false;protected;0;11;;@Override protected void tearDown() throws Exception {     super.tearDown().     if (template != null) {         template.stop().     }     if (camelContext != null) {         camelContext.stop().     } }
false;protected;0;3;;protected CamelContext createCamelContext() throws Exception {     return new DefaultCamelContext(). }
false;protected;1;2;;protected void addCamelRoutes(CamelContext camelContext) throws Exception { }
true;protected;1;3;/**  * Resolves a mandatory endpoint for the given URI or an exception is thrown  *  * @param uri the Camel <a href="">URI</a> to use to create or resolve an  *            endpoint  * @return the endpoint  */ ;/**  * Resolves a mandatory endpoint for the given URI or an exception is thrown  *  * @param uri the Camel <a href="">URI</a> to use to create or resolve an  *            endpoint  * @return the endpoint  */ protected Endpoint resolveMandatoryEndpoint(String uri) {     return resolveMandatoryEndpoint(camelContext, uri). }
true;protected;2;3;/**  * Resolves a mandatory endpoint for the given URI and expected type or an  * exception is thrown  *  * @param uri the Camel <a href="">URI</a> to use to create or resolve an  *            endpoint  * @return the endpoint  */ ;/**  * Resolves a mandatory endpoint for the given URI and expected type or an  * exception is thrown  *  * @param uri the Camel <a href="">URI</a> to use to create or resolve an  *            endpoint  * @return the endpoint  */ protected <T extends Endpoint> T resolveMandatoryEndpoint(String uri, Class<T> endpointType) {     return resolveMandatoryEndpoint(camelContext, uri, endpointType). }
true;protected;2;7;/**  * Resolves an endpoint and asserts that it is found  */ ;/**  * Resolves an endpoint and asserts that it is found  */ protected Endpoint resolveMandatoryEndpoint(CamelContext context, String uri) {     Endpoint endpoint = context.getEndpoint(uri).     assertNotNull("No endpoint found for URI: " + uri, endpoint).     return endpoint. }
true;protected;3;7;/**  * Resolves an endpoint and asserts that it is found  */ ;/**  * Resolves an endpoint and asserts that it is found  */ protected <T extends Endpoint> T resolveMandatoryEndpoint(CamelContext context, String uri, Class<T> endpointType) {     T endpoint = context.getEndpoint(uri, endpointType).     assertNotNull("No endpoint found for URI: " + uri, endpoint).     return endpoint. }
true;protected;1;3;/**  * Resolves the mandatory Mock endpoint using a URI of the form  * <code>mock:someName</code>  *  * @param uri the URI which typically starts with "mock:" and has some name  * @return the mandatory mock endpoint or an exception is thrown if it could  *         not be resolved  */ ;/**  * Resolves the mandatory Mock endpoint using a URI of the form  * <code>mock:someName</code>  *  * @param uri the URI which typically starts with "mock:" and has some name  * @return the mandatory mock endpoint or an exception is thrown if it could  *         not be resolved  */ protected MockEndpoint getMockEndpoint(String uri) {     return resolveMandatoryEndpoint(uri, MockEndpoint.class). }
true;protected;0;3;/**  * Asserts that all the expectations of the Mock endpoints are valid  */ ;/**  * Asserts that all the expectations of the Mock endpoints are valid  */ protected void assertMockEndpointsSatisifed() throws InterruptedException {     MockEndpoint.assertIsSatisfied(camelContext). }
false;protected;1;3;;protected void assertValidContext(CamelContext context) {     assertNotNull("No context found!", context). }
