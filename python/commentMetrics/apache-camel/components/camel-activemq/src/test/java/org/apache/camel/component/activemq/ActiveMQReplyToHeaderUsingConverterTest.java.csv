commented;modifiers;parameterAmount;loc;comment;code
false;public;0;41;;@Test public void testSendingAMessageFromCamelSetsCustomJmsHeaders() throws Exception {     MockEndpoint resultEndpoint = resolveMandatoryEndpoint("mock:result", MockEndpoint.class).     ActiveMQConverter conv = new ActiveMQConverter().     resultEndpoint.expectedBodiesReceived(expectedBody).     AssertionClause firstMessage = resultEndpoint.message(0).     firstMessage.header("cheese").isEqualTo(123).     firstMessage.header("JMSCorrelationID").isEqualTo(correlationID).     if (useReplyToHeader) {         firstMessage.header("JMSReplyTo").isEqualTo(conv.toDestination(replyQueueName)).     }     firstMessage.header("JMSType").isEqualTo(messageType).     firstMessage.header("JMSXGroupID").isEqualTo(groupID).     Map<String, Object> headers = new HashMap<String, Object>().     headers.put("cheese", 123).     if (useReplyToHeader) {         headers.put("JMSReplyTo", replyQueueName).     }     headers.put("JMSCorrelationID", correlationID).     headers.put("JMSType", messageType).     headers.put("JMSXGroupID", groupID).     template.sendBodyAndHeaders("activemq:test.a", expectedBody, headers).     resultEndpoint.assertIsSatisfied().     List<Exchange> list = resultEndpoint.getReceivedExchanges().     Exchange exchange = list.get(0).     Message in = exchange.getIn().     Object replyTo = in.getHeader("JMSReplyTo").     LOG.info("Reply to is: " + replyTo).     if (useReplyToHeader) {         Destination destination = assertIsInstanceOf(Destination.class, replyTo).         assertEquals("ReplyTo", replyQueueName, destination.toString()).     }     assertMessageHeader(in, "cheese", 123).     assertMessageHeader(in, "JMSCorrelationID", correlationID).     assertMessageHeader(in, "JMSType", messageType).     assertMessageHeader(in, "JMSXGroupID", groupID). }
false;protected;0;9;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     // START SNIPPET: example     camelContext.addComponent("activemq", activeMQComponent("vm://localhost?broker.persistent=false")).     return camelContext. }
false;public;0;5;;public void configure() throws Exception {     from("activemq:test.a").to("activemq:test.b?preserveMessageQos=true").     from("activemq:test.b").to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("activemq:test.a").to("activemq:test.b?preserveMessageQos=true").             from("activemq:test.b").to("mock:result").         }     }. }
