commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public CamelDestination getDestination() throws JMSException {     return destination. }
false;public;0;3;;public Endpoint getEndpoint() {     return endpoint. }
false;public;0;12;;public void close() throws JMSException {     if (!closed) {         closed = true.         try {             producer.stop().         } catch (JMSException e) {             throw e.         } catch (Exception e) {             throw JMSExceptionSupport.create(e).         }     } }
false;public;5;18;;public void send(Destination destination, Message message, int deliveryMode, int priority, long timeToLive) throws JMSException {     CamelDestination camelDestination = null.     if (ObjectHelper.equal(destination, this.destination)) {         camelDestination = this.destination.     } else {         // TODO support any CamelDestination?         throw new IllegalArgumentException("Invalid destination setting: " + destination + " when expected: " + this.destination).     }     try {         Exchange exchange = endpoint.createExchange(ExchangePattern.InOnly).         exchange.setIn(new JmsMessage(exchange, message, null, camelDestination.getBinding())).         producer.process(exchange).     } catch (JMSException e) {         throw e.     } catch (Exception e) {         throw JMSExceptionSupport.create(e).     } }
false;protected;0;5;;protected void checkClosed() throws IllegalStateException {     if (closed) {         throw new IllegalStateException("The producer is closed").     } }
