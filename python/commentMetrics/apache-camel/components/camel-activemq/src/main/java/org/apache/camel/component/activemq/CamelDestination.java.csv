commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String toString() {     return uri.toString(). }
true;public;2;3;// ----------------------------------------------------------------------- ;// CustomDestination interface // ----------------------------------------------------------------------- public MessageConsumer createConsumer(ActiveMQSession session, String messageSelector) {     return createConsumer(session, messageSelector, false). }
false;public;3;3;;public MessageConsumer createConsumer(ActiveMQSession session, String messageSelector, boolean noLocal) {     return new CamelMessageConsumer(this, resolveEndpoint(session), session, messageSelector, noLocal). }
false;public;3;3;;public TopicSubscriber createSubscriber(ActiveMQSession session, String messageSelector, boolean noLocal) {     return createDurableSubscriber(session, null, messageSelector, noLocal). }
false;public;4;3;;public TopicSubscriber createDurableSubscriber(ActiveMQSession session, String name, String messageSelector, boolean noLocal) {     throw new UnsupportedOperationException("This destination is not a Topic: " + this). }
false;public;2;3;;public QueueReceiver createReceiver(ActiveMQSession session, String messageSelector) {     throw new UnsupportedOperationException("This destination is not a Queue: " + this). }
true;public;1;3;// ----------------------------------------------------------------------- ;// Producers // ----------------------------------------------------------------------- public MessageProducer createProducer(ActiveMQSession session) throws JMSException {     return new CamelMessageProducer(this, resolveEndpoint(session), session). }
false;public;1;3;;public TopicPublisher createPublisher(ActiveMQSession session) throws JMSException {     throw new UnsupportedOperationException("This destination is not a Topic: " + this). }
false;public;1;3;;public QueueSender createSender(ActiveMQSession session) throws JMSException {     throw new UnsupportedOperationException("This destination is not a Queue: " + this). }
false;public;0;3;;// Properties // ----------------------------------------------------------------------- public String getUri() {     return uri. }
false;public;1;3;;public void setUri(String uri) {     this.uri = uri. }
false;public;0;3;;public Endpoint getEndpoint() {     return endpoint. }
false;public;1;3;;public void setEndpoint(Endpoint endpoint) {     this.endpoint = endpoint. }
false;public;0;3;;public CamelContext getCamelContext() {     return camelContext. }
false;public;1;3;;public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;0;3;;public JmsBinding getBinding() {     return binding. }
false;public;1;3;;public void setBinding(JmsBinding binding) {     this.binding = binding. }
true;protected;1;10;/**  * Resolves the Camel Endpoint for this destination  *  * @return  */ ;// Implementation methods // ----------------------------------------------------------------------- /**  * Resolves the Camel Endpoint for this destination  *  * @return  */ protected Endpoint resolveEndpoint(ActiveMQSession session) {     Endpoint answer = getEndpoint().     if (answer == null) {         answer = resolveCamelContext(session).getEndpoint(getUri()).         if (answer == null) {             throw new IllegalArgumentException("No endpoint could be found for URI: " + getUri()).         }     }     return answer. }
false;protected;1;14;;protected CamelContext resolveCamelContext(ActiveMQSession session) {     CamelContext answer = getCamelContext().     if (answer == null) {         ActiveMQConnection connection = session.getConnection().         if (connection instanceof CamelConnection) {             CamelConnection camelConnection = (CamelConnection) connection.             answer = camelConnection.getCamelContext().         }     }     if (answer == null) {         throw new IllegalArgumentException("No CamelContext has been configured").     }     return answer. }
