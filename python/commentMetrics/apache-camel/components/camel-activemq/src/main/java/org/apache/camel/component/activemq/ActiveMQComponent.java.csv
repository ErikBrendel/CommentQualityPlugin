commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Creates an <a href="http://camel.apache.org/activemq.html">ActiveMQ  * Component</a>  *  * @return the created component  */ ;/**  * Creates an <a href="http://camel.apache.org/activemq.html">ActiveMQ  * Component</a>  *  * @return the created component  */ public static ActiveMQComponent activeMQComponent() {     return new ActiveMQComponent(). }
true;public,static;1;8;/**  * Creates an <a href="http://camel.apache.org/activemq.html">ActiveMQ  * Component</a> connecting to the given  * <a href="http://activemq.apache.org/configuring-transports.html">broker  * URL</a>  *  * @param brokerURL the URL to connect to  * @return the created component  */ ;/**  * Creates an <a href="http://camel.apache.org/activemq.html">ActiveMQ  * Component</a> connecting to the given  * <a href="http://activemq.apache.org/configuring-transports.html">broker  * URL</a>  *  * @param brokerURL the URL to connect to  * @return the created component  */ public static ActiveMQComponent activeMQComponent(String brokerURL) {     ActiveMQComponent answer = new ActiveMQComponent().     if (answer.getConfiguration() instanceof ActiveMQConfiguration) {         ((ActiveMQConfiguration) answer.getConfiguration()).setBrokerURL(brokerURL).     }     return answer. }
true;public;1;5;/**  * Sets the broker URL to use to connect to ActiveMQ using the  * <a href="http://activemq.apache.org/configuring-transports.html">ActiveMQ  * URI format</a>  */ ;/**  * Sets the broker URL to use to connect to ActiveMQ using the  * <a href="http://activemq.apache.org/configuring-transports.html">ActiveMQ  * URI format</a>  */ public void setBrokerURL(String brokerURL) {     if (getConfiguration() instanceof ActiveMQConfiguration) {         ((ActiveMQConfiguration) getConfiguration()).setBrokerURL(brokerURL).     } }
true;public;1;5;/**  * Define if all packages are trusted or not  */ ;/**  * Define if all packages are trusted or not  */ public void setTrustAllPackages(boolean trustAllPackages) {     if (getConfiguration() instanceof ActiveMQConfiguration) {         ((ActiveMQConfiguration) getConfiguration()).setTrustAllPackages(trustAllPackages).     } }
false;public;0;3;;public boolean isExposeAllQueues() {     return exposeAllQueues. }
true;public;1;3;/**  * If enabled this will cause all Queues in the ActiveMQ broker to be  * eagerly populated into the CamelContext so that they can be easily  * browsed by any Camel tooling. This option is disabled by default.  */ ;/**  * If enabled this will cause all Queues in the ActiveMQ broker to be  * eagerly populated into the CamelContext so that they can be easily  * browsed by any Camel tooling. This option is disabled by default.  */ public void setExposeAllQueues(boolean exposeAllQueues) {     this.exposeAllQueues = exposeAllQueues. }
true;public;1;5;/**  * Enables or disables whether a PooledConnectionFactory will be used so  * that when messages are sent to ActiveMQ from outside of a message  * consuming thread, pooling will be used rather than the default with the  * Spring {@link JmsTemplate} which will create a new connection, session,  * producer for each message then close them all down again.  * <p/>  * The default value is true. Note that this requires an extra dependency on  * commons-pool2.  */ ;/**  * Enables or disables whether a PooledConnectionFactory will be used so  * that when messages are sent to ActiveMQ from outside of a message  * consuming thread, pooling will be used rather than the default with the  * Spring {@link JmsTemplate} which will create a new connection, session,  * producer for each message then close them all down again.  * <p/>  * The default value is true. Note that this requires an extra dependency on  * commons-pool2.  */ public void setUsePooledConnection(boolean usePooledConnection) {     if (getConfiguration() instanceof ActiveMQConfiguration) {         ((ActiveMQConfiguration) getConfiguration()).setUsePooledConnection(usePooledConnection).     } }
true;public;1;5;/**  * Enables or disables whether a Spring {@link SingleConnectionFactory} will  * be used so that when messages are sent to ActiveMQ from outside of a  * message consuming thread, pooling will be used rather than the default  * with the Spring {@link JmsTemplate} which will create a new connection,  * session, producer for each message then close them all down again.  * <p/>  * The default value is false and a pooled connection is used by default.  */ ;/**  * Enables or disables whether a Spring {@link SingleConnectionFactory} will  * be used so that when messages are sent to ActiveMQ from outside of a  * message consuming thread, pooling will be used rather than the default  * with the Spring {@link JmsTemplate} which will create a new connection,  * session, producer for each message then close them all down again.  * <p/>  * The default value is false and a pooled connection is used by default.  */ public void setUseSingleConnection(boolean useSingleConnection) {     if (getConfiguration() instanceof ActiveMQConfiguration) {         ((ActiveMQConfiguration) getConfiguration()).setUseSingleConnection(useSingleConnection).     } }
false;protected;1;3;;protected void addPooledConnectionFactoryService(Service pooledConnectionFactoryService) {     pooledConnectionFactoryServiceList.add(pooledConnectionFactoryService). }
false;protected;1;3;;protected void addSingleConnectionFactory(SingleConnectionFactory singleConnectionFactory) {     singleConnectionFactoryList.add(singleConnectionFactory). }
false;protected;2;22;;@Override @SuppressWarnings("unchecked") protected String convertPathToActualDestination(String path, Map<String, Object> parameters) {     // support ActiveMQ destination options using the destination. prefix     // http://activemq.apache.org/destination-options.html     Map options = IntrospectionSupport.extractProperties(parameters, "destination.").     String query.     try {         query = URISupport.createQueryString(options).     } catch (URISyntaxException e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     }     // name     if (ObjectHelper.isNotEmpty(query)) {         return path + "?" + query.     } else {         return path.     } }
false;protected;0;16;;@Override protected void doStart() throws Exception {     super.doStart().     if (isExposeAllQueues()) {         createDestinationSource().         endpointLoader = new CamelEndpointLoader(getCamelContext(), source).         endpointLoader.afterPropertiesSet().     }     // stategy has been set     if (getMessageCreatedStrategy() == null) {         setMessageCreatedStrategy(new OriginalDestinationPropagateStrategy()).     } }
false;protected;0;18;;protected void createDestinationSource() {     try {         if (source == null) {             if (connection == null) {                 Connection value = getConfiguration().getConnectionFactory().createConnection().                 if (value instanceof EnhancedConnection) {                     connection = (EnhancedConnection) value.                 } else {                     throw new IllegalArgumentException("Created JMS Connection is not an EnhancedConnection: " + value).                 }                 connection.start().             }             source = connection.getDestinationSource().         }     } catch (Throwable t) {         LOG.info("Can't get destination source, endpoint completer will not work", t).     } }
false;protected;0;20;;@Override protected void doStop() throws Exception {     if (source != null) {         source.stop().         source = null.     }     if (connection != null) {         connection.close().         connection = null.     }     for (Service s : pooledConnectionFactoryServiceList) {         s.stop().     }     pooledConnectionFactoryServiceList.clear().     for (SingleConnectionFactory s : singleConnectionFactoryList) {         s.destroy().     }     singleConnectionFactoryList.clear().     super.doStop(). }
true;public;1;7;/**  * Configuration of ActiveMQ  */ ;/**  * Configuration of ActiveMQ  */ @Override public void setConfiguration(JmsConfiguration configuration) {     if (configuration instanceof ActiveMQConfiguration) {         ((ActiveMQConfiguration) configuration).setActiveMQComponent(this).     }     super.setConfiguration(configuration). }
false;protected;0;6;;@Override protected JmsConfiguration createConfiguration() {     ActiveMQConfiguration answer = new ActiveMQConfiguration().     answer.setActiveMQComponent(this).     return answer. }
