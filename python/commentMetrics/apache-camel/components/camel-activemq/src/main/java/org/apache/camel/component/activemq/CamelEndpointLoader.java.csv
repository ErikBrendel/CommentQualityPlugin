commented;modifiers;parameterAmount;loc;comment;code
true;private;0;8;/**  * JSR-250 callback wrapper. converts checked exceptions to runtime  * exceptions delegates to afterPropertiesSet, done to prevent backwards  * incompatible signature change fix: AMQ-4676  */ ;/**  * JSR-250 callback wrapper. converts checked exceptions to runtime  * exceptions delegates to afterPropertiesSet, done to prevent backwards  * incompatible signature change fix: AMQ-4676  */ @PostConstruct private void postConstruct() {     try {         afterPropertiesSet().     } catch (Exception ex) {         throw new RuntimeException(ex).     } }
false;public;1;23;;@Override public void onDestinationEvent(DestinationEvent event) {     try {         ActiveMQDestination destination = event.getDestination().         if (destination instanceof ActiveMQQueue) {             ActiveMQQueue queue = (ActiveMQQueue) destination.             if (event.isAddOperation()) {                 addQueue(queue).             } else {                 removeQueue(queue).             }         } else if (destination instanceof ActiveMQTopic) {             ActiveMQTopic topic = (ActiveMQTopic) destination.             if (event.isAddOperation()) {                 addTopic(topic).             } else {                 removeTopic(topic).             }         }     } catch (Exception e) {         LOG.warn("Caught: " + e, e).     } }
true;public;0;39;/**  * @throws Exception  * @org.apache.xbean.InitMethod  */ ;/**  * @throws Exception  * @org.apache.xbean.InitMethod  */ public void afterPropertiesSet() throws Exception {     if (source != null) {         source.setDestinationListener(new DestinationListener() {              @Override             public void onDestinationEvent(DestinationEvent event) {                 try {                     ActiveMQDestination destination = event.getDestination().                     if (destination instanceof ActiveMQQueue) {                         ActiveMQQueue queue = (ActiveMQQueue) destination.                         if (event.isAddOperation()) {                             addQueue(queue).                         } else {                             removeQueue(queue).                         }                     } else if (destination instanceof ActiveMQTopic) {                         ActiveMQTopic topic = (ActiveMQTopic) destination.                         if (event.isAddOperation()) {                             addTopic(topic).                         } else {                             removeTopic(topic).                         }                     }                 } catch (Exception e) {                     LOG.warn("Caught: " + e, e).                 }             }         }).         Set<ActiveMQQueue> queues = source.getQueues().         for (ActiveMQQueue queue : queues) {             addQueue(queue).         }         Set<ActiveMQTopic> topics = source.getTopics().         for (ActiveMQTopic topic : topics) {             addTopic(topic).         }     } }
true;public;0;4;// ------------------------------------------------------------------------- ;// Properties // ------------------------------------------------------------------------- @Override public CamelContext getCamelContext() {     return camelContext. }
false;public;1;4;;@Override public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;0;6;;public ActiveMQComponent getComponent() {     if (component == null) {         component = camelContext.getComponent("activemq", ActiveMQComponent.class).     }     return component. }
false;public;1;3;;public void setComponent(ActiveMQComponent component) {     this.component = component. }
false;protected;1;6;;// Implementation methods // ------------------------------------------------------------------------- protected void addQueue(ActiveMQQueue queue) throws Exception {     String queueUri = getQueueUri(queue).     ActiveMQComponent jmsComponent = getComponent().     Endpoint endpoint = new JmsQueueEndpoint(queueUri, jmsComponent, queue.getPhysicalName(), jmsComponent.getConfiguration()).     camelContext.addEndpoint(queueUri, endpoint). }
false;protected;1;3;;protected String getQueueUri(ActiveMQQueue queue) {     return "activemq:" + queue.getPhysicalName(). }
false;protected;1;6;;protected void removeQueue(ActiveMQQueue queue) throws Exception {     String queueUri = getQueueUri(queue).     // lur cache of endpoints so they will disappear in time     // this feature needs a new component api - list available endpoints     camelContext.removeEndpoints(queueUri). }
false;protected;1;6;;protected void addTopic(ActiveMQTopic topic) throws Exception {     String topicUri = getTopicUri(topic).     ActiveMQComponent jmsComponent = getComponent().     Endpoint endpoint = new JmsEndpoint(topicUri, jmsComponent, topic.getPhysicalName(), true, jmsComponent.getConfiguration()).     camelContext.addEndpoint(topicUri, endpoint). }
false;protected;1;3;;protected String getTopicUri(ActiveMQTopic topic) {     return "activemq:topic:" + topic.getPhysicalName(). }
false;protected;1;6;;protected void removeTopic(ActiveMQTopic topic) throws Exception {     String topicUri = getTopicUri(topic).     // lur cache of endpoints so they will disappear in time     // this feature needs a new component api - list available endpoints     camelContext.removeEndpoints(topicUri). }
