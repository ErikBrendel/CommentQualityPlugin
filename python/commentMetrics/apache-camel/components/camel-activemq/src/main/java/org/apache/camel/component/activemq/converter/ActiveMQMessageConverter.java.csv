commented;modifiers;parameterAmount;loc;comment;code
true;public;1;6;/**  * Converts the inbound message exchange to an ActiveMQ JMS message  *  * @return the ActiveMQ message  */ ;/**  * Converts the inbound message exchange to an ActiveMQ JMS message  *  * @return the ActiveMQ message  */ @Converter public ActiveMQMessage toMessage(Exchange exchange) throws JMSException {     ActiveMQMessage message = createActiveMQMessage(exchange).     getBinding().appendJmsProperties(message, exchange).     return message. }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     Message message = toMessage(exchange).     listener.onMessage(message). }
false;public;0;4;;@Override public String toString() {     return "Processor of MessageListener: " + listener. }
true;public;1;14;/**  * Allows a JMS {@link MessageListener} to be converted to a Camel  * {@link Processor} so that we can provide better <a href="">Bean  * Integration</a> so that we can use any JMS MessageListener in in Camel as  * a bean  *  * @param listener the JMS message listener  * @return a newly created Camel Processor which when invoked will invoke  *         {@link MessageListener#onMessage(Message)}  */ ;/**  * Allows a JMS {@link MessageListener} to be converted to a Camel  * {@link Processor} so that we can provide better <a href="">Bean  * Integration</a> so that we can use any JMS MessageListener in in Camel as  * a bean  *  * @param listener the JMS message listener  * @return a newly created Camel Processor which when invoked will invoke  *         {@link MessageListener#onMessage(Message)}  */ @Converter public Processor toProcessor(final MessageListener listener) {     return new Processor() {          public void process(Exchange exchange) throws Exception {             Message message = toMessage(exchange).             listener.onMessage(message).         }          @Override         public String toString() {             return "Processor of MessageListener: " + listener.         }     }. }
false;private,static;1;15;;private static ActiveMQMessage createActiveMQMessage(Exchange exchange) throws JMSException {     Object body = exchange.getIn().getBody().     if (body instanceof String) {         ActiveMQTextMessage answer = new ActiveMQTextMessage().         answer.setText((String) body).         return answer.     } else if (body instanceof Serializable) {         ActiveMQObjectMessage answer = new ActiveMQObjectMessage().         answer.setObject((Serializable) body).         return answer.     } else {         return new ActiveMQMessage().     } }
true;public;0;3;// ------------------------------------------------------------------------- ;// Properties // ------------------------------------------------------------------------- public JmsBinding getBinding() {     return binding. }
false;public;1;3;;public void setBinding(JmsBinding binding) {     this.binding = binding. }
