commented;modifiers;parameterAmount;loc;comment;code
false;public,final;0;11;;@Override public final void execute() throws MojoExecutionException, MojoFailureException {     setup().     final RestClient restClient = connectToSalesforce().     try {         executeWithClient(restClient).     } finally {         disconnectFromSalesforce(restClient).     } }
false;public;0;3;;public long getResponseTimeout() {     return responseTimeout. }
false;private;0;29;;private RestClient connectToSalesforce() throws MojoExecutionException {     RestClient restClient = null.     try {         final SalesforceHttpClient httpClient = createHttpClient().         // connect to Salesforce         getLog().info("Logging in to Salesforce").         final SalesforceSession session = httpClient.getSession().         try {             session.login(null).         } catch (final SalesforceException e) {             final String msg = "Salesforce login error " + e.getMessage().             throw new MojoExecutionException(msg, e).         }         getLog().info("Salesforce login successful").         // create rest client         restClient = new DefaultRestClient(httpClient, version, PayloadFormat.JSON, session).         // remember to start the active client object         ((DefaultRestClient) restClient).start().         return restClient.     } catch (final Exception e) {         final String msg = "Error connecting to Salesforce: " + e.getMessage().         disconnectFromSalesforce(restClient).         throw new MojoExecutionException(msg, e).     } }
false;private;0;81;;private SalesforceHttpClient createHttpClient() throws MojoExecutionException {     final SalesforceHttpClient httpClient.     // set ssl context parameters     try {         final SslContextFactory sslContextFactory = new SslContextFactory().         sslContextFactory.setSslContext(sslContextParameters.createSSLContext(new DefaultCamelContext())).         httpClient = new SalesforceHttpClient(sslContextFactory).     } catch (final GeneralSecurityException e) {         throw new MojoExecutionException("Error creating default SSL context: " + e.getMessage(), e).     } catch (final IOException e) {         throw new MojoExecutionException("Error creating default SSL context: " + e.getMessage(), e).     }     // default settings     httpClient.setConnectTimeout(DEFAULT_TIMEOUT).     httpClient.setTimeout(DEFAULT_TIMEOUT).     // enable redirects, no need for a RedirectListener class in Jetty 9     httpClient.setFollowRedirects(true).     // set HTTP client parameters     if (httpClientProperties != null && !httpClientProperties.isEmpty()) {         try {             IntrospectionSupport.setProperties(httpClient, new HashMap<>(httpClientProperties)).         } catch (final Exception e) {             throw new MojoExecutionException("Error setting HTTP client properties: " + e.getMessage(), e).         }     }     // wait for 1 second longer than the HTTP client response timeout     responseTimeout = httpClient.getTimeout() + 1000L.     // set HTTP proxy settings     if (httpProxyHost != null && httpProxyPort != null) {         final Origin.Address proxyAddress = new Origin.Address(httpProxyHost, httpProxyPort).         ProxyConfiguration.Proxy proxy.         if (isHttpProxySocks4) {             proxy = new Socks4Proxy(proxyAddress, isHttpProxySecure).         } else {             proxy = new HttpProxy(proxyAddress, isHttpProxySecure).         }         if (httpProxyIncludedAddresses != null && !httpProxyIncludedAddresses.isEmpty()) {             proxy.getIncludedAddresses().addAll(httpProxyIncludedAddresses).         }         if (httpProxyExcludedAddresses != null && !httpProxyExcludedAddresses.isEmpty()) {             proxy.getExcludedAddresses().addAll(httpProxyExcludedAddresses).         }         httpClient.getProxyConfiguration().getProxies().add(proxy).     }     if (httpProxyUsername != null && httpProxyPassword != null) {         StringHelper.notEmpty(httpProxyAuthUri, "httpProxyAuthUri").         StringHelper.notEmpty(httpProxyRealm, "httpProxyRealm").         final Authentication authentication.         if (httpProxyUseDigestAuth) {             authentication = new DigestAuthentication(URI.create(httpProxyAuthUri), httpProxyRealm, httpProxyUsername, httpProxyPassword).         } else {             authentication = new BasicAuthentication(URI.create(httpProxyAuthUri), httpProxyRealm, httpProxyUsername, httpProxyPassword).         }         httpClient.getAuthenticationStore().addAuthentication(authentication).     }     // set session before calling start()     final SalesforceSession session = new SalesforceSession(new DefaultCamelContext(), httpClient, httpClient.getTimeout(), new SalesforceLoginConfig(loginUrl, clientId, clientSecret, userName, password, false)).     httpClient.setSession(session).     try {         httpClient.start().     } catch (final Exception e) {         throw new MojoExecutionException("Error creating HTTP client: " + e.getMessage(), e).     }     return httpClient. }
false;private;1;13;;private void disconnectFromSalesforce(final RestClient restClient) {     if (restClient == null) {         return.     }     try {         final SalesforceHttpClient httpClient = (SalesforceHttpClient) ((DefaultRestClient) restClient).getHttpClient().         ServiceHelper.stopAndShutdownServices(restClient, httpClient.getSession(), httpClient).     } catch (final Exception e) {         getLog().error("Error stopping Salesforce HTTP client", e).     } }
false;protected,abstract;1;1;;protected abstract void executeWithClient(RestClient client) throws MojoExecutionException.
false;protected;0;2;;protected void setup() { }
