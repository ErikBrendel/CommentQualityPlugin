commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Test public void testExecute() throws Exception {     final GenerateMojo mojo = createMojo().     // generate code     mojo.execute().     // validate generated code check that it was generated     final Path packagePath = temp.getRoot().toPath().resolve("test").resolve("dto").     assertThat(packagePath).as("Package directory was not created").exists().     // test that the generated sources can be compiled     final List<JavaFileObject> sources = Files.list(packagePath).map(p -> {         try {             return JavaFileObjects.forResource(p.toUri().toURL()).         } catch (final MalformedURLException e) {             throw new IllegalArgumentException(e).         }     }).collect(Collectors.toList()).     final Compilation compilation = Compiler.javac().compile(sources).     assertThat(compilation.status()).isEqualTo(Status.SUCCESS). }
false;;0;16;;GenerateMojo createMojo() throws IOException {     final GenerateMojo mojo = new GenerateMojo().     // set login properties     setup(mojo).     // set defaults     mojo.version = SalesforceEndpointConfig.DEFAULT_VERSION.     mojo.outputDirectory = temp.getRoot().     mojo.packageName = "test.dto".     // set code generation properties     mojo.includePattern = "(.*__c)|(PushTopic)|(Document)|(Account)".     return mojo. }
