commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getRealm() {     return HTTP_PROXY_REALM. }
false;public;2;4;;@Override public boolean authenticate(String userName, String password) {     return HTTP_PROXY_USER_NAME.equals(userName) && HTTP_PROXY_PASSWORD.equals(password). }
false;public;0;17;;@Before public void startProxy() {     httpProxyPort = AvailablePortFinder.getNextAvailable().     proxy = DefaultHttpProxyServer.bootstrap().withPort(httpProxyPort).withProxyAuthenticator(new ProxyAuthenticator() {          @Override         public String getRealm() {             return HTTP_PROXY_REALM.         }          @Override         public boolean authenticate(String userName, String password) {             return HTTP_PROXY_USER_NAME.equals(userName) && HTTP_PROXY_PASSWORD.equals(password).         }     }).start(). }
false;public;0;4;;@After public void stopProxy() {     proxy.stop(). }
false;protected;0;20;;@Override protected GenerateMojo createMojo() throws IOException {     final GenerateMojo mojo = super.createMojo().     // HTTP proxy properties     mojo.httpProxyHost = "localhost".     mojo.httpProxyPort = httpProxyPort.     mojo.httpProxyUsername = HTTP_PROXY_USER_NAME.     mojo.httpProxyPassword = HTTP_PROXY_PASSWORD.     mojo.httpProxyRealm = HTTP_PROXY_REALM.     mojo.isHttpProxySecure = false.     mojo.httpProxyAuthUri = String.format("http://localhost:%s", httpProxyPort).     // HTTP client properties     mojo.httpClientProperties = new HashMap<>().     mojo.httpClientProperties.put("timeout", "60000").     mojo.httpClientProperties.put("removeIdleDestinations", "true").     return mojo. }
