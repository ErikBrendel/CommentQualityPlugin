commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;16;;@DataPoints public static BatchTest[] getBatches() {     List<BatchTest> result = new ArrayList<>().     BatchTest test = new BatchTest().     test.contentType = ContentType.XML.     test.stream = BulkApiBatchIntegrationTest.class.getResourceAsStream(TEST_REQUEST_XML).     result.add(test).     test = new BatchTest().     test.contentType = ContentType.CSV.     test.stream = BulkApiBatchIntegrationTest.class.getResourceAsStream(TEST_REQUEST_CSV).     result.add(test).     // TODO test ZIP_XML and ZIP_CSV     return result.toArray(new BatchTest[result.size()]). }
false;public;1;54;;@Theory @Test public void testBatchLifecycle(BatchTest request) throws Exception {     log.info("Testing Batch lifecycle with {} content", request.contentType).     // create an UPSERT test Job for this batch request     JobInfo jobInfo = new JobInfo().     jobInfo.setOperation(OperationEnum.UPSERT).     jobInfo.setContentType(request.contentType).     jobInfo.setObject(Merchandise__c.class.getSimpleName()).     jobInfo.setExternalIdFieldName("Name").     jobInfo = createJob(jobInfo).     // test createBatch     Map<String, Object> headers = new HashMap<>().     headers.put(SalesforceEndpointConfig.JOB_ID, jobInfo.getId()).     headers.put(SalesforceEndpointConfig.CONTENT_TYPE, jobInfo.getContentType()).     BatchInfo batchInfo = template().requestBodyAndHeaders("direct:createBatch", request.stream, headers, BatchInfo.class).     assertNotNull("Null batch", batchInfo).     assertNotNull("Null batch id", batchInfo.getId()).     // test getAllBatches     @SuppressWarnings("unchecked")     List<BatchInfo> batches = template().requestBody("direct:getAllBatches", jobInfo, List.class).     assertNotNull("Null batches", batches).     assertFalse("Empty batch list", batches.isEmpty()).     // test getBatch     batchInfo = batches.get(0).     batchInfo = getBatchInfo(batchInfo).     // test getRequest     InputStream requestStream = template().requestBody("direct:getRequest", batchInfo, InputStream.class).     assertNotNull("Null batch request", requestStream).     // wait for batch to finish     log.info("Waiting for batch to finish...").     while (!batchProcessed(batchInfo)) {         // sleep 5 seconds         Thread.sleep(5000).         // check again         batchInfo = getBatchInfo(batchInfo).     }     log.info("Batch finished with state " + batchInfo.getState()).     assertEquals("Batch did not succeed", BatchStateEnum.COMPLETED, batchInfo.getState()).     // test getResults     InputStream results = template().requestBody("direct:getResults", batchInfo, InputStream.class).     assertNotNull("Null batch results", results).     // close the test job     template().requestBody("direct:closeJob", jobInfo, JobInfo.class). }
