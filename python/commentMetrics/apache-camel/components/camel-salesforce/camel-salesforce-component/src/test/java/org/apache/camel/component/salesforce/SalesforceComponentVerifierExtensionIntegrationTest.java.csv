commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;protected;0;11;;// ********************************* // Helpers // ********************************* protected Map<String, Object> getParameters() {     SalesforceLoginConfig loginConfig = LoginConfigHelper.getLoginConfig().     HashMap<String, Object> parameters = new HashMap<>().     parameters.put("clientId", loginConfig.getClientId()).     parameters.put("clientSecret", loginConfig.getClientSecret()).     parameters.put("userName", loginConfig.getUserName()).     parameters.put("password", loginConfig.getPassword()).     return parameters. }
false;public,static;1;9;;public static String getSystemPropertyOrEnvVar(String systemProperty) {     String answer = System.getProperty(systemProperty).     if (ObjectHelper.isEmpty(answer)) {         String envProperty = systemProperty.toUpperCase().replaceAll("[.-]", "_").         answer = System.getenv(envProperty).     }     return answer. }
false;protected;0;7;;protected ComponentVerifierExtension getExtension() {     Component component = context().getComponent("salesforce").     ComponentVerifierExtension verifier = component.getExtension(ComponentVerifierExtension.class).orElseThrow(IllegalStateException::new).     return verifier. }
false;public;0;8;;// ********************************* // Connectivity validation // ********************************* @Test public void testConnectivity() {     Map<String, Object> parameters = getParameters().     ComponentVerifierExtension.Result result = getExtension().verify(ComponentVerifierExtension.Scope.CONNECTIVITY, parameters).     Assert.assertEquals(ComponentVerifierExtension.Result.Status.OK, result.getStatus()). }
false;public;0;24;;@Test public void testConnectivityWithWrongUserName() {     Map<String, Object> parameters = getParameters().     parameters.put("userName", "not-a-salesforce-user").     ComponentVerifierExtension.Result result = getExtension().verify(ComponentVerifierExtension.Scope.CONNECTIVITY, parameters).     Assert.assertEquals(ComponentVerifierExtension.Result.Status.ERROR, result.getStatus()).     Assert.assertEquals(2, result.getErrors().size()).     // Exception     Assert.assertEquals(ComponentVerifierExtension.VerificationError.StandardCode.EXCEPTION, result.getErrors().get(0).getCode()).     Assert.assertNotNull(result.getErrors().get(0).getDetails().get(ComponentVerifierExtension.VerificationError.ExceptionAttribute.EXCEPTION_INSTANCE)).     Assert.assertTrue(result.getErrors().get(0).getDetails().get(ComponentVerifierExtension.VerificationError.ExceptionAttribute.EXCEPTION_INSTANCE) instanceof SalesforceException).     Assert.assertEquals(400, result.getErrors().get(0).getDetails().get(ComponentVerifierExtension.VerificationError.HttpAttribute.HTTP_CODE)).     // Salesforce Error     Assert.assertEquals("invalid_grant", result.getErrors().get(1).getDetail("salesforce_code")). }
false;public;0;27;;@Test public void testConnectivityWithWrongSecrets() {     Map<String, Object> parameters = getParameters().     parameters.put("clientId", "wrong-client-id").     parameters.put("clientSecret", "wrong-client-secret").     ComponentVerifierExtension.Result result = getExtension().verify(ComponentVerifierExtension.Scope.CONNECTIVITY, parameters).     Assert.assertEquals(ComponentVerifierExtension.Result.Status.ERROR, result.getStatus()).     Assert.assertEquals(ComponentVerifierExtension.Result.Status.ERROR, result.getStatus()).     Assert.assertEquals(2, result.getErrors().size()).     // Exception     Assert.assertEquals(ComponentVerifierExtension.VerificationError.StandardCode.EXCEPTION, result.getErrors().get(0).getCode()).     Assert.assertNotNull(result.getErrors().get(0).getDetails().get(ComponentVerifierExtension.VerificationError.ExceptionAttribute.EXCEPTION_INSTANCE)).     Assert.assertTrue(result.getErrors().get(0).getDetails().get(ComponentVerifierExtension.VerificationError.ExceptionAttribute.EXCEPTION_INSTANCE) instanceof SalesforceException).     Assert.assertEquals(400, result.getErrors().get(0).getDetails().get(ComponentVerifierExtension.VerificationError.HttpAttribute.HTTP_CODE)).     // Salesforce Error     Assert.assertEquals("invalid_client_id", result.getErrors().get(1).getDetail("salesforce_code")). }
