commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;4;;@Override protected SalesforceException createRestException(final Response response, final InputStream responseContent) {     return null. }
false;protected;1;3;;@Override protected void setAccessToken(final Request request) { }
false;public;0;4;;@Before public void startClient() throws Exception {     client.start(). }
false;public;0;23;;@Test public void shouldDetermineHeadersForRequest() {     final CamelContext context = new DefaultCamelContext().     final Exchange exchange = new DefaultExchange(context).     final Message in = new DefaultMessage(context).     in.setHeader("sforce-auto-assign", "TRUE").     in.setHeader("SFORCE-CALL-OPTIONS", new String[] { "client=SampleCaseSensitiveToken/100", "defaultNamespace=battle" }).     in.setHeader("Sforce-Limit-Info", singletonList("per-app-api-usage")).     in.setHeader("x-sfdc-packageversion-clientPackage", "1.0").     in.setHeader("Sforce-Query-Options", "batchSize=1000").     in.setHeader("Non-Related", "Header").     exchange.setIn(in).     final Map<String, List<String>> headers = AbstractClientBase.determineHeaders(exchange).     assertThat(headers).containsOnly(entry("sforce-auto-assign", singletonList("TRUE")), entry("SFORCE-CALL-OPTIONS", asList("client=SampleCaseSensitiveToken/100", "defaultNamespace=battle")), entry("Sforce-Limit-Info", singletonList("per-app-api-usage")), entry("x-sfdc-packageversion-clientPackage", singletonList("1.0")), entry("Sforce-Query-Options", singletonList("batchSize=1000"))). }
false;public;0;15;;@Test public void shouldDetermineHeadersFromResponse() {     final Response response = mock(Response.class).     final HttpFields httpHeaders = new HttpFields().     httpHeaders.add("Date", "Mon, 20 May 2013 22:21:46 GMT").     httpHeaders.add("Sforce-Limit-Info", "api-usage=18/5000").     httpHeaders.add("Last-Modified", "Mon, 20 May 2013 20:49:32 GMT").     httpHeaders.add("Content-Type", "application/json.charset=UTF-8").     httpHeaders.add("Transfer-Encoding", "chunked").     when(response.getHeaders()).thenReturn(httpHeaders).     final Map<String, String> headers = AbstractClientBase.determineHeadersFrom(response).     assertThat(headers).containsEntry("Sforce-Limit-Info", "api-usage=18/5000"). }
false;public;0;34;;@Test public void shouldNotHangIfRequestsHaveFinished() throws Exception {     final Request request = mock(Request.class).     final ArgumentCaptor<CompleteListener> listener = ArgumentCaptor.forClass(CompleteListener.class).     doNothing().when(request).send(listener.capture()).     client.doHttpRequest(request, (response, headers, exception) -> {     }).     final Result result = mock(Result.class).     final Response response = mock(Response.class).     when(result.getResponse()).thenReturn(response).     when(response.getHeaders()).thenReturn(new HttpFields()).     final SalesforceHttpRequest salesforceRequest = mock(SalesforceHttpRequest.class).     when(result.getRequest()).thenReturn(salesforceRequest).     final HttpConversation conversation = mock(HttpConversation.class).     when(salesforceRequest.getConversation()).thenReturn(conversation).     when(conversation.getAttribute(SalesforceSecurityHandler.AUTHENTICATION_REQUEST_ATTRIBUTE)).thenReturn(salesforceRequest).     // completes the request     listener.getValue().onComplete(result).     final long stopStartTime = System.currentTimeMillis().     // should not wait     client.stop().     final long elapsed = System.currentTimeMillis() - stopStartTime.     assertTrue(elapsed < 10). }
false;public;0;14;;@Test public void shouldTimeoutWhenRequestsAreStillOngoing() throws Exception {     client.doHttpRequest(mock(Request.class), (response, headers, exception) -> {     }).     // the request never completes     final long stopStartTime = System.currentTimeMillis().     // will wait for 1 second     client.stop().     final long elapsed = System.currentTimeMillis() - stopStartTime.     assertTrue(elapsed > 900 && elapsed < 1100). }
