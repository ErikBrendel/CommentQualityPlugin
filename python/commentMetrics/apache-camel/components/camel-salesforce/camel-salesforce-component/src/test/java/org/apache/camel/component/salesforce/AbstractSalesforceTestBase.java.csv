commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     // create the test component     createComponent().     return doCreateRouteBuilder(). }
false;public;0;3;;@Override public void configure() throws Exception { }
false;protected;0;7;;protected RouteBuilder doCreateRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {         }     }. }
false;protected;0;23;;protected void createComponent() throws Exception {     // create the component     SalesforceComponent component = new SalesforceComponent().     final SalesforceEndpointConfig config = new SalesforceEndpointConfig().     config.setApiVersion(System.getProperty("apiVersion", salesforceApiVersionToUse())).     component.setConfig(config).     component.setLoginConfig(LoginConfigHelper.getLoginConfig()).     HashMap<String, Object> clientProperties = new HashMap<>().     clientProperties.put("timeout", "60000").     clientProperties.put("maxRetreis", "3").     // 4MB for RestApiIntegrationTest.testGetBlobField()     clientProperties.put("maxContentLength", String.valueOf(4 * 1024 * 1024)).     component.setHttpClientProperties(clientProperties).     // set DTO package     component.setPackages(new String[] { Merchandise__c.class.getPackage().getName() }).     // add it to context     context().addComponent("salesforce", component). }
false;protected;0;3;;protected String salesforceApiVersionToUse() {     return SalesforceEndpointConfig.DEFAULT_VERSION. }
