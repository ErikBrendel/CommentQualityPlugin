commented;modifiers;parameterAmount;loc;comment;code
false;public;0;58;;@Test public void testSubscribeAndReceive() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:CamelTestTopic").     mock.expectedMessageCount(1).     // assert expected static headers     mock.expectedHeaderReceived("CamelSalesforceTopicName", "CamelTestTopic").     mock.expectedHeaderReceived("CamelSalesforceChannel", "/topic/CamelTestTopic").     MockEndpoint rawPayloadMock = getMockEndpoint("mock:RawPayloadCamelTestTopic").     rawPayloadMock.expectedMessageCount(1).     // assert expected static headers     rawPayloadMock.expectedHeaderReceived("CamelSalesforceTopicName", "CamelTestTopic").     rawPayloadMock.expectedHeaderReceived("CamelSalesforceChannel", "/topic/CamelTestTopic").     Merchandise__c merchandise = new Merchandise__c().     merchandise.setName("TestNotification").     merchandise.setDescription__c("Merchandise for testing Streaming API updated on " + ZonedDateTime.now().toString()).     merchandise.setPrice__c(9.99).     merchandise.setTotal_Inventory__c(1000.0).     CreateSObjectResult result = template().requestBody("direct:upsertSObject", merchandise, CreateSObjectResult.class).     assertTrue("Merchandise test record not created", result == null || result.getSuccess()).     try {         // wait for Salesforce notification         mock.assertIsSatisfied().         final Message in = mock.getExchanges().get(0).getIn().         merchandise = in.getMandatoryBody(Merchandise__c.class).         assertNotNull("Missing event body", merchandise).         log.info("Merchandise notification: {}", merchandise).         assertNotNull("Missing field Id", merchandise.getId()).         assertNotNull("Missing field Name", merchandise.getName()).         // validate dynamic message headers         assertNotNull("Missing header CamelSalesforceClientId", in.getHeader("CamelSalesforceClientId")).         assertNotNull("Missing header CamelSalesforceEventType", in.getHeader("CamelSalesforceEventType")).         assertNotNull("Missing header CamelSalesforceCreatedDate", in.getHeader("CamelSalesforceCreatedDate")).         // validate raw payload message         rawPayloadMock.assertIsSatisfied().         final Message inRaw = rawPayloadMock.getExchanges().get(0).getIn().         assertTrue("Expected String message body for Raw Payload", inRaw.getBody() instanceof String).     } finally {         // remove the test record         assertNull(template().requestBody("direct:deleteSObjectWithId", merchandise)).         // remove the test topic         // find it using SOQL first         QueryRecordsPushTopic records = template().requestBody("direct:query", null, QueryRecordsPushTopic.class).         assertEquals("Test topic not found", 1, records.getTotalSize()).         assertNull(template().requestBody("direct:deleteSObject", records.getRecords().get(0))).     } }
false;public;0;34;;@Override public void configure() throws Exception {     // test topic subscription     // from("salesforce:CamelTestTopic?notifyForFields=ALL&notifyForOperations=ALL&"     from("salesforce:CamelTestTopic?notifyForFields=ALL&" + "notifyForOperationCreate=true&notifyForOperationDelete=true&notifyForOperationUpdate=true&" + "sObjectName=Merchandise__c&" + "updateTopic=true&sObjectQuery=SELECT Id, Name FROM Merchandise__c").to("mock:CamelTestTopic").     from("salesforce:CamelTestTopic?rawPayload=true&notifyForFields=ALL&" + "notifyForOperationCreate=true&notifyForOperationDelete=true&notifyForOperationUpdate=true&" + "updateTopic=true&sObjectQuery=SELECT Id, Name FROM Merchandise__c").to("mock:RawPayloadCamelTestTopic").     // route for creating test record     from("direct:upsertSObject").to("salesforce:upsertSObject?SObjectIdName=Name").     // route for finding test topic     from("direct:query").to("salesforce:query?sObjectQuery=SELECT Id FROM PushTopic WHERE Name = 'CamelTestTopic'&" + "sObjectClass=" + QueryRecordsPushTopic.class.getName()).     // route for removing test record     from("direct:deleteSObjectWithId").to("salesforce:deleteSObjectWithId?sObjectIdName=Name").     // route for removing topic     from("direct:deleteSObject").to("salesforce:deleteSObject"). }
false;protected;0;39;;@Override protected RouteBuilder doCreateRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // test topic subscription             // from("salesforce:CamelTestTopic?notifyForFields=ALL&notifyForOperations=ALL&"             from("salesforce:CamelTestTopic?notifyForFields=ALL&" + "notifyForOperationCreate=true&notifyForOperationDelete=true&notifyForOperationUpdate=true&" + "sObjectName=Merchandise__c&" + "updateTopic=true&sObjectQuery=SELECT Id, Name FROM Merchandise__c").to("mock:CamelTestTopic").             from("salesforce:CamelTestTopic?rawPayload=true&notifyForFields=ALL&" + "notifyForOperationCreate=true&notifyForOperationDelete=true&notifyForOperationUpdate=true&" + "updateTopic=true&sObjectQuery=SELECT Id, Name FROM Merchandise__c").to("mock:RawPayloadCamelTestTopic").             // route for creating test record             from("direct:upsertSObject").to("salesforce:upsertSObject?SObjectIdName=Name").             // route for finding test topic             from("direct:query").to("salesforce:query?sObjectQuery=SELECT Id FROM PushTopic WHERE Name = 'CamelTestTopic'&" + "sObjectClass=" + QueryRecordsPushTopic.class.getName()).             // route for removing test record             from("direct:deleteSObjectWithId").to("salesforce:deleteSObjectWithId?sObjectIdName=Name").             // route for removing topic             from("direct:deleteSObject").to("salesforce:deleteSObject").         }     }. }
