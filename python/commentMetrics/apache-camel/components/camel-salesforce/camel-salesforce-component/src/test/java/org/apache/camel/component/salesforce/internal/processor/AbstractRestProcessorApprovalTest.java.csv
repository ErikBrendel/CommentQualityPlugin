commented;modifiers;parameterAmount;loc;comment;code
false;static;0;3;;static SalesforceComponent component() {     return new SalesforceComponent(). }
false;static;0;3;;static SalesforceEndpointConfig configuration() {     return new SalesforceEndpointConfig(). }
false;static;0;3;;static SalesforceEndpoint endpoint() {     return new SalesforceEndpoint(notUsed(), component(), configuration(), notUsed(), notUsed()). }
false;protected;1;4;;@Override protected InputStream getRequestStream(final Exchange exchange) throws SalesforceException {     return null. }
false;protected;2;4;;@Override protected InputStream getRequestStream(final Message in, final Object object) throws SalesforceException {     return null. }
false;protected;1;3;;@Override protected void processRequest(final Exchange exchange) throws SalesforceException { }
false;protected;5;4;;@Override protected void processResponse(final Exchange exchange, final InputStream responseEntity, final Map<String, String> headers, final SalesforceException ex, final AsyncCallback callback) { }
false;private,static;0;3;;private static <T> T notUsed() {     return null. }
false;static;1;6;;static ApprovalRequest requestWithComment(final String comment) {     final ApprovalRequest approvalRequest = new ApprovalRequest().     approvalRequest.setComments(comment).     return approvalRequest. }
false;public;0;12;;@Test public void shouldApplyTemplateToRequestFromBody() throws SalesforceException {     final ApprovalRequest template = new ApprovalRequest().     template.setActionType(Action.Submit).     final ApprovalRequest approvalRequest = new ApprovalRequest().     approvalRequest.setComments("it should be me").     final TestRestProcessor processor = sendBodyAndHeader(approvalRequest, template).     verify(processor).getRequestStream(any(Message.class), eq(new ApprovalRequests(approvalRequest.applyTemplate(template)))). }
false;public;0;17;;@Test public void shouldApplyTemplateToRequestsFromBody() throws SalesforceException {     final ApprovalRequest template = new ApprovalRequest().     template.setActionType(Action.Submit).     final ApprovalRequest approvalRequest1 = new ApprovalRequest().     approvalRequest1.setComments("it should be me first").     final ApprovalRequest approvalRequest2 = new ApprovalRequest().     approvalRequest2.setComments("it should be me second").     final TestRestProcessor processor = sendBodyAndHeader(Arrays.asList(approvalRequest1, approvalRequest2), template).     verify(processor).getRequestStream(any(Message.class), eq(new ApprovalRequests(Arrays.asList(approvalRequest1.applyTemplate(template), approvalRequest2.applyTemplate(template))))). }
false;public;0;11;;@Test public void shouldComplainIfNoHeaderGivenOrBodyIsEmptyIterable() {     try {         sendBodyAndHeader(Collections.EMPTY_LIST, null).         fail("SalesforceException should be thrown").     } catch (final SalesforceException e) {         assertEquals("Exception should be about not giving a body or a header", "Missing approval parameter in header or ApprovalRequest or List of ApprovalRequests body", e.getMessage()).     } }
false;public;0;11;;@Test public void shouldComplainIfNoHeaderOrBodyIsGiven() {     try {         sendBodyAndHeader(null, null).         fail("SalesforceException should be thrown").     } catch (final SalesforceException e) {         assertEquals("Exception should be about not giving a body or a header", "Missing approval parameter in header or ApprovalRequest or List of ApprovalRequests body", e.getMessage()).     } }
false;public;0;9;;@Test public void shouldFetchApprovalRequestFromBody() throws SalesforceException {     final ApprovalRequest approvalRequest = new ApprovalRequest().     approvalRequest.setComments("it should be me").     final TestRestProcessor processor = sendBody(approvalRequest).     verify(processor).getRequestStream(any(Message.class), eq(new ApprovalRequests(approvalRequest))). }
false;public;0;8;;@Test public void shouldFetchApprovalRequestFromHeader() throws SalesforceException {     final ApprovalRequest request = new ApprovalRequest().     request.setComments("hi there").     final TestRestProcessor processor = sendBodyAndHeader(null, request).     verify(processor).getRequestStream(any(Message.class), eq(new ApprovalRequests(request))). }
false;public;0;14;;@Test public void shouldFetchApprovalRequestFromHeaderEvenIfBodyIsDefinedButNotConvertable() throws SalesforceException {     final ApprovalRequest request = new ApprovalRequest().     request.setComments("hi there").     final TestRestProcessor processor = sendBodyAndHeaders("Nothing to see here", request, Collections.singletonMap("approval.ContextId", "context-id")).     final ApprovalRequest combined = new ApprovalRequest().     combined.setComments("hi there").     combined.setContextId("context-id").     verify(processor).getRequestStream(any(Message.class), eq(new ApprovalRequests(combined))). }
false;public;0;12;;@Test public void shouldFetchApprovalRequestsFromBody() throws SalesforceException {     final ApprovalRequest approvalRequest1 = new ApprovalRequest().     approvalRequest1.setComments("it should be me first").     final ApprovalRequest approvalRequest2 = new ApprovalRequest().     approvalRequest2.setComments("it should be me second").     final TestRestProcessor processor = sendBody(Arrays.asList(approvalRequest1, approvalRequest2)).     verify(processor).getRequestStream(any(Message.class), eq(new ApprovalRequests(Arrays.asList(approvalRequest1, approvalRequest2)))). }
false;public;0;12;;@Test public void shouldFetchApprovalRequestsFromMultiplePropertiesInMessageHeaders() throws SalesforceException {     final Map<String, Object> headers = new HashMap<>().     headers.put("approval.ContextId", "contextId").     final TestRestProcessor processor = sendBodyAndHeaders(notUsed(), notUsed(), headers).     final ApprovalRequest request = new ApprovalRequest().     request.setContextId("contextId").     verify(processor).getRequestStream(any(Message.class), eq(new ApprovalRequests(request))). }
false;public;0;20;;@Test public void shouldHonorPriorities() throws SalesforceException {     final ApprovalRequest template = new ApprovalRequest().     template.setComments("third priority").     final ApprovalRequest body = new ApprovalRequest().     body.setComments("first priority").     final Map<String, Object> headers = Collections.singletonMap("approval.Comments", "second priority").     final TestRestProcessor processor1 = sendBodyAndHeaders(null, template, null).     verify(processor1).getRequestStream(any(Message.class), eq(new ApprovalRequests(requestWithComment("third priority")))).     final TestRestProcessor processor2 = sendBodyAndHeaders(null, template, headers).     verify(processor2).getRequestStream(any(Message.class), eq(new ApprovalRequests(requestWithComment("second priority")))).     final TestRestProcessor processor3 = sendBodyAndHeaders(body, template, headers).     verify(processor3).getRequestStream(any(Message.class), eq(new ApprovalRequests(requestWithComment("first priority")))). }
false;;1;3;;TestRestProcessor sendBody(final Object body) throws SalesforceException {     return sendBodyAndHeader(body, null). }
false;;2;3;;TestRestProcessor sendBodyAndHeader(final Object body, final ApprovalRequest template) throws SalesforceException {     return sendBodyAndHeaders(body, template, Collections.emptyMap()). }
false;;3;21;;TestRestProcessor sendBodyAndHeaders(final Object body, final ApprovalRequest template, final Map<String, Object> headers) throws SalesforceException {     final TestRestProcessor processor = spy(new TestRestProcessor()).     final CamelContext context = new DefaultCamelContext().     final Exchange exchange = new DefaultExchange(context).     final Message message = new DefaultMessage(context).     if (headers != null) {         message.setHeaders(headers).     }     message.setHeader(SalesforceEndpointConfig.APPROVAL, template).     message.setBody(body).     exchange.setIn(message).     processor.processApproval(exchange, notUsed()).     return processor. }
