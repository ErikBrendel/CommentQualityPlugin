commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public List<Account> getRecords() {     return records. }
false;public;1;3;;public void setRecords(final List<Account> records) {     this.records = records. }
false;public;0;4;;@After public void deleteRecords() {     template.sendBody("direct:delete-recent", NOT_USED). }
false;public;0;7;;@Before public void setupTenRecentItems() {     final List<Account> accounts = IntStream.range(0, 10).mapToObj(RecentIntegrationTest::account).collect(Collectors.toList()).     template.sendBody("direct:create-recent", accounts). }
false;public;0;7;;@Test public void shouldFetchRecentItems() {     @SuppressWarnings("unchecked")     final List<RecentItem> items = template.requestBody("direct:test-recent", NOT_USED, List.class).     assertRecentItemsSize(items, 10). }
false;public;0;8;;@Test public void shouldFetchRecentItemsLimitingByHeaderParam() {     @SuppressWarnings("unchecked")     final List<RecentItem> items = template.requestBody("direct:test-recent-with-header-limit-param", NOT_USED, List.class).     assertRecentItemsSize(items, 5). }
false;public;0;8;;@Test public void shouldFetchRecentItemsLimitingByParamInBody() {     @SuppressWarnings("unchecked")     final List<RecentItem> items = template.requestBody("direct:test-recent-with-body-limit-param", NOT_USED, List.class).     assertRecentItemsSize(items, 5). }
false;public;0;8;;@Test public void shouldFetchRecentItemsLimitingByUriParam() {     @SuppressWarnings("unchecked")     final List<RecentItem> items = template.requestBody("direct:test-recent-with-limit-uri-param", NOT_USED, List.class).     assertRecentItemsSize(items, 5). }
false;public;0;21;;@Override public void configure() throws Exception {     from("direct:create-recent").split().body().to("salesforce:createSObject?sObjectName=Account").end().to("salesforce:query?sObjectClass=" + Accounts.class.getName() + "&sObjectQuery=SELECT Id FROM Account WHERE Name LIKE 'recent-%' FOR VIEW").     from("direct:delete-recent").to("salesforce:query?sObjectClass=" + Accounts.class.getName() + "&sObjectQuery=SELECT Id FROM Account WHERE Name LIKE 'recent-%'").transform(simple("${body.records}")).split().body().setHeader(SalesforceEndpointConfig.SOBJECT_ID).simple("${body.id}").to("salesforce:deleteSObject?sObjectName=Account").     from("direct:test-recent").to("salesforce:recent").     from("direct:test-recent-with-limit-uri-param").to("salesforce:recent?limit=5").     from("direct:test-recent-with-header-limit-param").setHeader(SalesforceEndpointConfig.LIMIT).constant(5).to("salesforce:recent").     from("direct:test-recent-with-body-limit-param").setBody(constant(5)).to("salesforce:recent"). }
false;protected;0;26;;@Override protected RouteBuilder doCreateRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:create-recent").split().body().to("salesforce:createSObject?sObjectName=Account").end().to("salesforce:query?sObjectClass=" + Accounts.class.getName() + "&sObjectQuery=SELECT Id FROM Account WHERE Name LIKE 'recent-%' FOR VIEW").             from("direct:delete-recent").to("salesforce:query?sObjectClass=" + Accounts.class.getName() + "&sObjectQuery=SELECT Id FROM Account WHERE Name LIKE 'recent-%'").transform(simple("${body.records}")).split().body().setHeader(SalesforceEndpointConfig.SOBJECT_ID).simple("${body.id}").to("salesforce:deleteSObject?sObjectName=Account").             from("direct:test-recent").to("salesforce:recent").             from("direct:test-recent-with-limit-uri-param").to("salesforce:recent?limit=5").             from("direct:test-recent-with-header-limit-param").setHeader(SalesforceEndpointConfig.LIMIT).constant(5).to("salesforce:recent").             from("direct:test-recent-with-body-limit-param").setBody(constant(5)).to("salesforce:recent").         }     }. }
false;static;1;6;;static Account account(final int ord) {     final Account account = new Account().     account.setName("recent-" + ord).     return account. }
false;static;2;6;;static void assertRecentItemsSize(final List<RecentItem> items, final int expected) {     final List<RecentItem> recentItems = items.stream().filter(i -> i.getName().startsWith("recent-")).collect(Collectors.toList()).     assertListSize("Expected " + expected + " items named `recent-N` in recent items", recentItems, expected). }
