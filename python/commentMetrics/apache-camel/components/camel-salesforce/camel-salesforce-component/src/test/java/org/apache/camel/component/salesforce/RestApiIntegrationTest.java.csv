commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Merchandise__c getMerchandise() {     return merchandise. }
false;public;1;3;;public void setMerchandise(final Merchandise__c merchandise) {     this.merchandise = merchandise. }
false;public;0;3;;public String getType() {     return type. }
false;public;1;3;;public void setType(final String type) {     this.type = type. }
false;public;0;9;;@After public void removeData() {     template.request("salesforce:deleteSObject?sObjectName=Merchandise__c&sObjectId=" + testId, (Processor) (e) -> {     }).     template.request("direct:deleteLineItems", (Processor) (e) -> {     }). }
false;public;0;12;;@Before public void setupData() {     final Merchandise__c merchandise = new Merchandise__c().     merchandise.setName("Test Merchandise").     merchandise.setPrice__c(10.0).     merchandise.setTotal_Inventory__c(100.0).     merchandise.setDescription__c("Test Merchandise!").     final CreateSObjectResult result = template().requestBody("salesforce:createSObject", merchandise, CreateSObjectResult.class).     testId = result.getId(). }
false;public;0;23;;@Test public void testApexCall() throws Exception {     // request merchandise with id in URI template     Merchandise__c merchandise = template().requestBodyAndHeader("direct:apexCallGet", null, "id", testId, Merchandise__c.class).     assertNotNull(merchandise).     // request merchandise with id as query param     merchandise = template().requestBodyAndHeader("direct:apexCallGetWithId", null, SalesforceEndpointConfig.APEX_QUERY_PARAM_PREFIX + "id", testId, Merchandise__c.class).     assertNotNull(merchandise).     // patch merchandise     // clear fields that won't be modified     merchandise.clearBaseFields().     merchandise.setId(testId).     merchandise.setPrice__c(null).     merchandise.setTotal_Inventory__c(null).     merchandise = template().requestBody("direct:apexCallPatch", new MerchandiseRequest(merchandise), Merchandise__c.class).     assertNotNull(merchandise). }
false;public;0;26;;@Test public void testCreateUpdateDelete() throws Exception {     final Merchandise__c merchandise = new Merchandise__c().     merchandise.setName("Wee Wee Wee Plane").     merchandise.setDescription__c("Microlite plane").     merchandise.setPrice__c(2000.0).     merchandise.setTotal_Inventory__c(50.0).     final CreateSObjectResult result = template().requestBody("direct:createSObject", merchandise, CreateSObjectResult.class).     assertNotNull(result).     assertTrue("Create success", result.getSuccess()).     // test JSON update     // make the plane cheaper     merchandise.setPrice__c(1500.0).     // change inventory to half     merchandise.setTotal_Inventory__c(25.0).     // also need to set the Id     merchandise.setId(result.getId()).     assertNull(template().requestBodyAndHeader("direct:updateSObject", merchandise, SalesforceEndpointConfig.SOBJECT_ID, result.getId())).     // delete the newly created SObject     assertNull(template().requestBody("direct:deleteSObject", result.getId())). }
false;public;0;21;;@Test public void testCreateUpdateDeleteTasks() throws Exception {     final Task taken = new Task().     taken.setDescription("Task1").     taken.setActivityDate(ZonedDateTime.of(1700, 1, 2, 3, 4, 5, 6, ZoneId.systemDefault())).     final CreateSObjectResult result = template().requestBody("direct:createSObject", taken, CreateSObjectResult.class).     assertNotNull(result).     assertTrue("Create success", result.getSuccess()).     // test JSON update     // make the plane cheaper     taken.setId(result.getId()).     taken.setActivityDate(ZonedDateTime.of(1991, 1, 2, 3, 4, 5, 6, ZoneId.systemDefault())).     assertNull(template().requestBodyAndHeader("direct:updateSObject", taken, SalesforceEndpointConfig.SOBJECT_ID, result.getId())).     // delete the newly created SObject     assertNull(template().requestBody("direct:deleteSObjectTaken", result.getId())). }
false;public;0;41;;@Test public void testCreateUpdateDeleteWithId() throws Exception {     Line_Item__c lineItem = new Line_Item__c().     final String lineItemId = String.valueOf(TEST_LINE_ITEM_ID.incrementAndGet()).     lineItem.setName(lineItemId).     CreateSObjectResult result = template().requestBody("direct:createLineItem", lineItem, CreateSObjectResult.class).     assertNotNull(result).     assertTrue(result.getSuccess()).     // get line item with Name 1     lineItem = template().requestBody("direct:getSObjectWithId", lineItemId, Line_Item__c.class).     assertNotNull(lineItem).     // test insert with id     // set the unit price and sold     lineItem.setUnit_Price__c(1000.0).     lineItem.setUnits_Sold__c(50.0).     // update line item with Name NEW_LINE_ITEM_ID     final String newLineItemId = String.valueOf(NEW_LINE_ITEM_ID.incrementAndGet()).     lineItem.setName(newLineItemId).     result = template().requestBodyAndHeader("direct:upsertSObject", lineItem, SalesforceEndpointConfig.SOBJECT_EXT_ID_VALUE, newLineItemId, CreateSObjectResult.class).     assertNotNull(result).     assertTrue(result.getSuccess()).     // clear read only parent type fields     lineItem.setInvoice_Statement__c(null).     lineItem.setMerchandise__c(null).     // change the units sold     lineItem.setUnits_Sold__c(25.0).     // update line item with Name NEW_LINE_ITEM_ID     result = template().requestBodyAndHeader("direct:upsertSObject", lineItem, SalesforceEndpointConfig.SOBJECT_EXT_ID_VALUE, newLineItemId, CreateSObjectResult.class).     assertNull(result).     // delete the SObject with Name NEW_LINE_ITEM_ID     assertNull(template().requestBody("direct:deleteSObjectWithId", newLineItemId)). }
false;public;0;10;;@Test public void testGetBasicInfo() throws Exception {     final SObjectBasicInfo objectBasicInfo = template().requestBody("direct:getBasicInfo", null, SObjectBasicInfo.class).     assertNotNull(objectBasicInfo).     // set test Id for testGetSObject     assertFalse("RecentItems is empty", objectBasicInfo.getRecentItems().isEmpty()).     testId = objectBasicInfo.getRecentItems().get(0).getId(). }
false;public;0;16;;@Test public void testGetBlobField() throws Exception {     // get document with Name "Test Document"     final HashMap<String, Object> headers = new HashMap<>().     headers.put(SalesforceEndpointConfig.SOBJECT_NAME, "Document").     headers.put(SalesforceEndpointConfig.SOBJECT_EXT_ID_NAME, "Name").     final Document document = template().requestBodyAndHeaders("direct:getSObjectWithId", TEST_DOCUMENT_ID, headers, Document.class).     assertNotNull(document).     // get Body field for this document     try (final InputStream body = template().requestBody("direct:getBlobField", document, InputStream.class)) {         assertNotNull(body).         assertTrue(body.available() > 0).     } }
false;public;0;7;;@Test public void testGetDescription() throws Exception {     final SObjectDescription sObjectDescription = template().requestBody("direct:getDescription", null, SObjectDescription.class).     assertNotNull(sObjectDescription). }
false;public;0;7;;@Test public void testGetGlobalObjects() throws Exception {     final GlobalObjects globalObjects = template().requestBody("direct:getGlobalObjects", null, GlobalObjects.class).     assertNotNull(globalObjects). }
false;public;0;6;;@Test public void testGetResources() throws Exception {     final RestResources resources = template().requestBody("direct:getResources", null, RestResources.class).     assertNotNull(resources). }
false;public;0;8;;@Test public void testGetSObject() throws Exception {     final Merchandise__c merchandise = template().requestBody("direct:getSObject", testId, Merchandise__c.class).     assertNotNull(merchandise).     assertNull(merchandise.getTotal_Inventory__c()).     assertNotNull(merchandise.getPrice__c()). }
false;public;0;15;;@Test public void testGetVersions() throws Exception {     // test getVersions doesn't need a body     // assert expected result     final Object o = template().requestBody("direct:getVersions", (Object) null).     List<Version> versions = null.     if (o instanceof Versions) {         versions = ((Versions) o).getVersions().     } else {         @SuppressWarnings("unchecked")         final List<Version> tmp = (List<Version>) o.         versions = tmp.     }     assertNotNull(versions). }
false;public;0;6;;@Test public void testQuery() throws Exception {     final QueryRecordsLine_Item__c queryRecords = template().requestBody("direct:query", null, QueryRecordsLine_Item__c.class).     assertNotNull(queryRecords). }
false;public;0;6;;@Test public void testQueryAll() throws Exception {     final QueryRecordsLine_Item__c queryRecords = template().requestBody("direct:queryAll", null, QueryRecordsLine_Item__c.class).     assertNotNull(queryRecords). }
false;public;0;19;;@Test public void testRetry() throws Exception {     final SalesforceComponent sf = context().getComponent("salesforce", SalesforceComponent.class).     final String accessToken = sf.getSession().getAccessToken().     final SslContextFactory sslContextFactory = new SslContextFactory().     sslContextFactory.setSslContext(new SSLContextParameters().createSSLContext(context)).     final HttpClient httpClient = new HttpClient(sslContextFactory).     httpClient.setConnectTimeout(60000).     httpClient.start().     final String uri = sf.getLoginConfig().getLoginUrl() + "/services/oauth2/revoke?token=" + accessToken.     final Request logoutGet = httpClient.newRequest(uri).method(HttpMethod.GET).timeout(1, TimeUnit.MINUTES).     final ContentResponse response = logoutGet.send().     assertEquals(HttpStatus.OK_200, response.getStatus()).     testGetGlobalObjects(). }
false;public;0;37;;@Test public void testRetryFailure() throws Exception {     final SalesforceComponent sf = context().getComponent("salesforce", SalesforceComponent.class).     final String accessToken = sf.getSession().getAccessToken().     final SslContextFactory sslContextFactory = new SslContextFactory().     sslContextFactory.setSslContext(new SSLContextParameters().createSSLContext(context)).     final HttpClient httpClient = new HttpClient(sslContextFactory).     httpClient.setConnectTimeout(60000).     httpClient.start().     final String uri = sf.getLoginConfig().getLoginUrl() + "/services/oauth2/revoke?token=" + accessToken.     final Request logoutGet = httpClient.newRequest(uri).method(HttpMethod.GET).timeout(1, TimeUnit.MINUTES).     final ContentResponse response = logoutGet.send().     assertEquals(HttpStatus.OK_200, response.getStatus()).     // set component config to bad password to cause relogin attempts to fail     final String password = sf.getLoginConfig().getPassword().     sf.getLoginConfig().setPassword("bad_password").     try {         testGetGlobalObjects().         fail("Expected CamelExecutionException!").     } catch (final CamelExecutionException e) {         if (e.getCause() instanceof SalesforceException) {             final SalesforceException cause = (SalesforceException) e.getCause().             assertEquals("Expected 400 on authentication retry failure", HttpStatus.BAD_REQUEST_400, cause.getStatusCode()).         } else {             fail("Expected SalesforceException!").         }     } finally {         // reset password and retries to allow other tests to pass         sf.getLoginConfig().setPassword(password).     } }
false;public;0;6;;@Test public void testSearch() throws Exception {     final Object obj = template().requestBody("direct:search", (Object) null).     assertNotNull(obj). }
false;public;0;39;;@Test public void testStatus300() throws Exception {     // get test merchandise     // note that the header value overrides sObjectFields in endpoint     final Merchandise__c merchandise = template().requestBodyAndHeader("direct:getSObject", testId, "sObjectFields", "Name,Description__c,Price__c,Total_Inventory__c", Merchandise__c.class).     assertNotNull(merchandise).     assertNotNull(merchandise.getName()).     assertNotNull(merchandise.getPrice__c()).     assertNotNull(merchandise.getTotal_Inventory__c()).     CreateSObjectResult result = null.     try {         merchandise.clearBaseFields().         result = template().requestBody("direct:createSObject", merchandise, CreateSObjectResult.class).         assertNotNull(result).         assertNotNull(result.getId()).         // note that the request SObject overrides settings on the endpoint for LineItem__c         try {             template().requestBody("direct:getSObjectWithId", merchandise, Merchandise__c.class).             fail("Expected SalesforceException with statusCode 300").         } catch (final CamelExecutionException e) {             final Throwable cause = e.getCause().             assertTrue(cause instanceof SalesforceMultipleChoicesException).             final SalesforceMultipleChoicesException multipleChoices = (SalesforceMultipleChoicesException) cause.             assertEquals(300, multipleChoices.getStatusCode()).             final List<String> choices = multipleChoices.getChoices().             assertNotNull(choices).             assertFalse(choices.isEmpty()).         }     } finally {         // delete the test clone         if (result != null) {             template().requestBody("direct:deleteSObject", result.getId()).         }     } }
false;public;0;30;;@Test public void testStatus400() throws Exception {     // get test merchandise     // note that the header value overrides sObjectFields in endpoint     final Merchandise__c merchandise = template().requestBodyAndHeader("direct:getSObject", testId, "sObjectFields", "Description__c,Price__c", Merchandise__c.class).     assertNotNull(merchandise).     assertNotNull(merchandise.getPrice__c()).     assertNull(merchandise.getTotal_Inventory__c()).     merchandise.clearBaseFields().     // required field Total_Inventory__c is missing     CreateSObjectResult result = null.     try {         result = template().requestBody("direct:createSObject", merchandise, CreateSObjectResult.class).         fail("Expected SalesforceException with statusCode 400").     } catch (final CamelExecutionException e) {         final Throwable cause = e.getCause().         assertTrue(cause instanceof SalesforceException).         final SalesforceException badRequest = (SalesforceException) cause.         assertEquals(400, badRequest.getStatusCode()).         assertEquals(1, badRequest.getErrors().size()).         assertEquals("[Total_Inventory__c]", badRequest.getErrors().get(0).getFields().toString()).     } finally {         // delete the clone if created         if (result != null) {             template().requestBody("direct:deleteSObject", result.getId()).         }     } }
false;public;0;14;;@Test public void testStatus404() {     // try to get a non existent SObject     try {         template().requestBody("direct:getSObject", "ILLEGAL_ID", Merchandise__c.class).         fail("Expected SalesforceException").     } catch (final CamelExecutionException e) {         final Throwable cause = e.getCause().         assertTrue(cause instanceof NoSuchSObjectException).         final NoSuchSObjectException noSuchObject = (NoSuchSObjectException) cause.         assertEquals(404, noSuchObject.getStatusCode()).         assertEquals(1, noSuchObject.getErrors().size()).     } }
false;public;0;7;;@Test public void testFetchingGlobalObjects() {     final GlobalObjects globalObjects = template().requestBody("salesforce:getGlobalObjects", null, GlobalObjects.class).     assertNotNull(globalObjects).     assertFalse(globalObjects.getSobjects().isEmpty()). }
false;public;0;82;;@Override public void configure() {     // testGetVersion     from("direct:getVersions").to("salesforce:getVersions?format=" + format).     // testGetResources     from("direct:getResources").to("salesforce:getResources?format=" + format).     // testGetGlobalObjects     from("direct:getGlobalObjects").to("salesforce:getGlobalObjects?format=" + format).     // testGetBasicInfo     from("direct:getBasicInfo").to("salesforce:getBasicInfo?sObjectName=Merchandise__c&format=" + format).     // testGetDescription     from("direct:getDescription").to("salesforce:getDescription?sObjectName=Merchandise__c&format=" + format).     // testGetSObject     from("direct:getSObject").to("salesforce:getSObject?sObjectName=Merchandise__c&sObjectFields=Description__c,Price__c&format=" + format).     // testCreateSObject     from("direct:createSObject").to("salesforce:createSObject?sObjectName=Merchandise__c&format=" + format).     // testUpdateSObject     from("direct:updateSObject").to("salesforce:updateSObject?sObjectName=Merchandise__c&format=" + format).     // testDeleteSObject     from("direct:deleteSObject").to("salesforce:deleteSObject?sObjectName=Merchandise__c&format=" + format).     from("direct:deleteSObjectTaken").to("salesforce:deleteSObject?sObjectName=Task&format=" + format).     // testGetSObjectWithId     from("direct:getSObjectWithId").to("salesforce:getSObjectWithId?sObjectName=Line_Item__c&sObjectIdName=Name&format=" + format).     // testUpsertSObject     from("direct:deleteLineItems").to("salesforce:query?sObjectQuery=SELECT Id FROM Line_Item__C&sObjectClass=" + QueryRecordsLine_Item__c.class.getName()).transform(simple("${body.records}")).split(body()).transform(simple("${body.id}")).to("salesforce:deleteSObject?sObjectName=Line_Item__c").     from("direct:createLineItem").to("salesforce:createSObject?sObjectName=Line_Item__c").     from("direct:upsertSObject").to("salesforce:upsertSObject?sObjectName=Line_Item__c&sObjectIdName=Name&format=" + format).     // testDeleteSObjectWithId     from("direct:deleteSObjectWithId").to("salesforce:deleteSObjectWithId?sObjectName=Line_Item__c&sObjectIdName=Name&format=" + format).     // testGetBlobField     from("direct:getBlobField").to("salesforce:getBlobField?sObjectName=Document&sObjectBlobFieldName=Body&format=" + format).     // testQuery     from("direct:query").to("salesforce:query?sObjectQuery=SELECT name from Line_Item__c&sObjectClass=" + QueryRecordsLine_Item__c.class.getName() + "&format=" + format).     // testQueryAll     from("direct:queryAll").to("salesforce:queryAll?sObjectQuery=SELECT name from Line_Item__c&sObjectClass=" + QueryRecordsLine_Item__c.class.getName() + "&format=" + format).     // testSearch     from("direct:search").to("salesforce:search?sObjectSearch=FIND {Wee}&format=" + format).     // testApexCall     from("direct:apexCallGet").to("salesforce:apexCall?apexMethod=GET&apexUrl=Merchandise/{id}&sObjectName=Merchandise__c&format=" + format).     from("direct:apexCallGetWithId").to("salesforce:apexCall/Merchandise/?apexMethod=GET&id=dummyId&format=" + format + "&sObjectClass=" + Merchandise__c.class.getName()).     from("direct:apexCallPatch").to("salesforce:apexCall/Merchandise/?format=" + format + "&apexMethod=PATCH&sObjectClass=" + MerchandiseResponse.class.getName()). }
false;protected;0;89;;@Override protected RouteBuilder doCreateRouteBuilder() throws Exception {     // create test route     return new RouteBuilder() {          @Override         public void configure() {             // testGetVersion             from("direct:getVersions").to("salesforce:getVersions?format=" + format).             // testGetResources             from("direct:getResources").to("salesforce:getResources?format=" + format).             // testGetGlobalObjects             from("direct:getGlobalObjects").to("salesforce:getGlobalObjects?format=" + format).             // testGetBasicInfo             from("direct:getBasicInfo").to("salesforce:getBasicInfo?sObjectName=Merchandise__c&format=" + format).             // testGetDescription             from("direct:getDescription").to("salesforce:getDescription?sObjectName=Merchandise__c&format=" + format).             // testGetSObject             from("direct:getSObject").to("salesforce:getSObject?sObjectName=Merchandise__c&sObjectFields=Description__c,Price__c&format=" + format).             // testCreateSObject             from("direct:createSObject").to("salesforce:createSObject?sObjectName=Merchandise__c&format=" + format).             // testUpdateSObject             from("direct:updateSObject").to("salesforce:updateSObject?sObjectName=Merchandise__c&format=" + format).             // testDeleteSObject             from("direct:deleteSObject").to("salesforce:deleteSObject?sObjectName=Merchandise__c&format=" + format).             from("direct:deleteSObjectTaken").to("salesforce:deleteSObject?sObjectName=Task&format=" + format).             // testGetSObjectWithId             from("direct:getSObjectWithId").to("salesforce:getSObjectWithId?sObjectName=Line_Item__c&sObjectIdName=Name&format=" + format).             // testUpsertSObject             from("direct:deleteLineItems").to("salesforce:query?sObjectQuery=SELECT Id FROM Line_Item__C&sObjectClass=" + QueryRecordsLine_Item__c.class.getName()).transform(simple("${body.records}")).split(body()).transform(simple("${body.id}")).to("salesforce:deleteSObject?sObjectName=Line_Item__c").             from("direct:createLineItem").to("salesforce:createSObject?sObjectName=Line_Item__c").             from("direct:upsertSObject").to("salesforce:upsertSObject?sObjectName=Line_Item__c&sObjectIdName=Name&format=" + format).             // testDeleteSObjectWithId             from("direct:deleteSObjectWithId").to("salesforce:deleteSObjectWithId?sObjectName=Line_Item__c&sObjectIdName=Name&format=" + format).             // testGetBlobField             from("direct:getBlobField").to("salesforce:getBlobField?sObjectName=Document&sObjectBlobFieldName=Body&format=" + format).             // testQuery             from("direct:query").to("salesforce:query?sObjectQuery=SELECT name from Line_Item__c&sObjectClass=" + QueryRecordsLine_Item__c.class.getName() + "&format=" + format).             // testQueryAll             from("direct:queryAll").to("salesforce:queryAll?sObjectQuery=SELECT name from Line_Item__c&sObjectClass=" + QueryRecordsLine_Item__c.class.getName() + "&format=" + format).             // testSearch             from("direct:search").to("salesforce:search?sObjectSearch=FIND {Wee}&format=" + format).             // testApexCall             from("direct:apexCallGet").to("salesforce:apexCall?apexMethod=GET&apexUrl=Merchandise/{id}&sObjectName=Merchandise__c&format=" + format).             from("direct:apexCallGetWithId").to("salesforce:apexCall/Merchandise/?apexMethod=GET&id=dummyId&format=" + format + "&sObjectClass=" + Merchandise__c.class.getName()).             from("direct:apexCallPatch").to("salesforce:apexCall/Merchandise/?format=" + format + "&apexMethod=PATCH&sObjectClass=" + MerchandiseResponse.class.getName()).         }     }. }
false;public,static;0;4;;@Parameters(name = "format = {0}") public static Iterable<String> parameters() {     return Arrays.asList("XML", "JSON"). }
