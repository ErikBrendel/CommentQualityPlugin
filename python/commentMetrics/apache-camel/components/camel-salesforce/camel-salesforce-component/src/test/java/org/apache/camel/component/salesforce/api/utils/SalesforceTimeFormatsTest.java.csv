commented;modifiers;parameterAmount;loc;comment;code
false;public;1;14;;@Override public boolean equals(final Object obj) {     if (obj == this) {         return true.     }     if (!(obj instanceof DateTransferObject)) {         return false.     }     final DateTransferObject<?> dto = (DateTransferObject<?>) obj.     return Objects.equals(value, dto.value). }
false;public;0;3;;public T getValue() {     return value. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(value, value). }
false;public;1;3;;public void setValue(final T value) {     this.value = value. }
false;public;0;4;;@Override public String toString() {     return String.valueOf(value). }
false;public;0;9;;@Test public void shouldDeserializeJson() throws IOException {     final JavaType javaType = TypeFactory.defaultInstance().constructParametricType(DateTransferObject.class, parameterType).     final DateTransferObject<?> deserialized = objectMapper.readerFor(javaType).readValue(json).     assertDeserializationResult(deserialized). }
false;public;0;8;;@Test public void shouldDeserializeXml() {     xStream.addDefaultImplementation(parameterType, Object.class).     final DateTransferObject<?> deserialized = (DateTransferObject<?>) xStream.fromXML(xml).     assertDeserializationResult(deserialized). }
false;public;0;4;;@Test public void shouldSerializeJson() throws JsonProcessingException {     assertThat(objectMapper.writeValueAsString(dto)).isEqualTo(json). }
false;public;0;4;;@Test public void shouldSerializeXml() {     assertThat(xStream.toXML(dto)).isEqualTo(xml). }
false;private;1;12;;private void assertDeserializationResult(final DateTransferObject<?> deserialized) {     if (dto.value instanceof ZonedDateTime) {         // Salesforce expresses time in UTC+offset (ISO-8601 , with this we         // loose time zone information         final ZonedDateTime dtoValue = (ZonedDateTime) dto.value.         final ZonedDateTime deserializedValue = (ZonedDateTime) deserialized.value.         assertThat(deserializedValue).isEqualTo(dtoValue.withFixedOffsetZone()).     } else {         assertThat(deserialized.value).isEqualTo(dto.value).     } }
false;public,static;0;29;;@Parameters public static Iterable<Object[]> cases() {     final LocalDate localDate = LocalDate.of(2007, 03, 19).     final ZonedDateTime zonedDateTime = ZonedDateTime.of(localDate.atTime(10, 54, 57), ZoneId.of("Z")).     final Instant instant = zonedDateTime.toInstant().     final String zone = DateTimeFormatter.ofPattern("XX").format(zonedDateTime.withZoneSameLocal(ZoneId.systemDefault())).     return //      Arrays.asList(// 0     dto(Date.from(instant), "2007-03-19T10:54:57.000+0000"), // 1     dto(Date.from(localDate.atStartOfDay().toInstant(ZoneOffset.UTC)), "2007-03-19T00:00:00.000+0000"), // 2     dto(localDate, "2007-03-19"), // 3     dto(zonedDateTime.toLocalDateTime(), "2007-03-19T10:54:57.000" + zone), // 4     dto(zonedDateTime.toOffsetDateTime(), "2007-03-19T10:54:57.000Z"), // 5     dto(zonedDateTime.toOffsetDateTime(), "2007-03-19T10:54:57.000Z"), dto(zonedDateTime.toOffsetDateTime().withOffsetSameInstant(ZoneOffset.of("-7")), // 6     "2007-03-19T03:54:57.000-0700"), // 7     dto(zonedDateTime, "2007-03-19T10:54:57.000Z"), // 8     dto(zonedDateTime.withZoneSameInstant(ZoneId.of("Asia/Kolkata")), "2007-03-19T16:24:57.000+0530"), // 9     dto(zonedDateTime.withZoneSameInstant(ZoneId.of("+3")), "2007-03-19T13:54:57.000+0300"), dto(instant, instant.atZone(ZoneId.systemDefault()).format(// 10     DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSSXX"))), // 11     dto(ZonedDateTime.of(2018, 03, 22, 9, 58, 8, 5000000, ZoneId.of("Z")), "2018-03-22T09:58:08.005Z"), // 12     dto(OffsetTime.of(LocalTime.MIDNIGHT, ZoneOffset.UTC), "00:00:00.000Z"), // 13     dto(OffsetTime.of(12, 13, 14, 7000000, ZoneOffset.UTC), "12:13:14.007Z")). }
false;private,static;2;9;;private static Object[] dto(final Object value, final String serialized) {     final DateTransferObject<?> dto = new DateTransferObject<>(value).     final String json = format(JSON_FMT, serialized).     final String xml = format(XML_FMT, serialized).     return new Object[] { dto, json, xml, value.getClass() }. }
