commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public List<Account> getRecords() {     return records. }
false;public;1;3;;public void setRecords(final List<Account> records) {     this.records = records. }
false;public;0;10;;@After public void removeRecords() {     try {         template.sendBody("salesforce:deleteSObject?sObjectName=Account&sObjectId=" + accountId, null).     } catch (final CamelExecutionException ignored) {     // other tests run in parallel could have deleted the Account     }     template.request("direct:deleteBatchAccounts", null). }
false;public;0;10;;@Before public void setupRecords() {     final Account account = new Account().     account.setName("Composite API Batch").     final CreateSObjectResult result = template.requestBody("salesforce:createSObject", account, CreateSObjectResult.class).     accountId = result.getId(). }
false;public;0;18;;@Test public void shouldSubmitBatchUsingCompositeApi() {     final SObjectComposite composite = new SObjectComposite(version, true).     final Account updates = new Account().     updates.setName("NewName").     composite.addUpdate("Account", accountId, updates, "UpdateExistingAccountReferenceId").     final Account newAccount = new Account().     newAccount.setName("Account created from Composite batch API").     composite.addCreate(newAccount, "CreateAccountReferenceId").     composite.addGet("Account", accountId, "GetAccountReferenceId", "Name", "BillingPostalCode").     composite.addDelete("Account", accountId, "DeleteAccountReferenceId").     testComposite(composite). }
false;public;0;8;;@Test public void shouldSupportGenericCompositeRequests() {     final SObjectComposite composite = new SObjectComposite(version, true).     composite.addGeneric(Method.GET, "/sobjects/Account/" + accountId, "GetExistingAccountReferenceId").     testComposite(composite). }
false;public;0;12;;@Test public void shouldSupportObjectCreation() {     final SObjectComposite compoiste = new SObjectComposite(version, true).     final Account newAccount = new Account().     newAccount.setName("Account created from Composite batch API").     compoiste.addCreate(newAccount, "CreateAccountReferenceId").     final SObjectCompositeResponse response = testComposite(compoiste).     assertResponseContains(response, "id"). }
false;public;0;7;;@Test public void shouldSupportObjectDeletion() {     final SObjectComposite composite = new SObjectComposite(version, true).     composite.addDelete("Account", accountId, "DeleteAccountReferenceId").     testComposite(composite). }
false;public;0;10;;@Test public void shouldSupportObjectRetrieval() {     final SObjectComposite composite = new SObjectComposite(version, true).     composite.addGet("Account", accountId, "GetExistingAccountReferenceId", "Name").     final SObjectCompositeResponse response = testComposite(composite).     assertResponseContains(response, "Name"). }
false;public;0;11;;@Test public void shouldSupportObjectUpdates() {     final SObjectComposite composite = new SObjectComposite(version, true).     final Account updates = new Account().     updates.setName("NewName").     updates.setAccountNumber("AC12345").     composite.addUpdate("Account", accountId, updates, "UpdateAccountReferenceId").     testComposite(composite). }
false;public;0;9;;@Test public void shouldSupportQuery() {     final SObjectComposite composite = new SObjectComposite(version, true).     composite.addQuery("SELECT Id, Name FROM Account", "SelectQueryReferenceId").     final SObjectCompositeResponse response = testComposite(composite).     assertResponseContains(response, "totalSize"). }
false;public;0;9;;@Test public void shouldSupportQueryAll() {     final SObjectComposite composite = new SObjectComposite(version, true).     composite.addQueryAll("SELECT Id, Name FROM Account", "SelectQueryReferenceId").     final SObjectCompositeResponse response = testComposite(composite).     assertResponseContains(response, "totalSize"). }
false;public;0;13;;@Test public void shouldSupportRelatedObjectRetrieval() {     if (Version.create(version).compareTo(Version.create("36.0")) < 0) {         return.     }     final SObjectComposite composite = new SObjectComposite("36.0", true).     composite.addGetRelated("Account", accountId, "CreatedBy", "GetRelatedAccountReferenceId").     final SObjectCompositeResponse response = testComposite(composite).     assertResponseContains(response, "Username"). }
false;;1;10;;SObjectCompositeResponse testComposite(final SObjectComposite batch) {     final SObjectCompositeResponse response = template.requestBody(compositeUri, batch, SObjectCompositeResponse.class).     Assertions.assertThat(response).as("Response should be provided").isNotNull().     Assertions.assertThat(response.getCompositeResponse()).as("Received errors in: " + response).allMatch(val -> val.getHttpStatusCode() >= 200 && val.getHttpStatusCode() <= 299).     return response. }
false;public;0;8;;@Override public void configure() throws Exception {     from("direct:deleteBatchAccounts").to("salesforce:query?sObjectClass=" + Accounts.class.getName() + "&sObjectQuery=SELECT Id FROM Account WHERE Name = 'Account created from Composite batch API'").split(simple("${body.records}")).setHeader("sObjectId", simple("${body.id}")).to("salesforce:deleteSObject?sObjectName=Account").end(). }
false;protected;0;13;;@Override protected RouteBuilder doCreateRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:deleteBatchAccounts").to("salesforce:query?sObjectClass=" + Accounts.class.getName() + "&sObjectQuery=SELECT Id FROM Account WHERE Name = 'Account created from Composite batch API'").split(simple("${body.records}")).setHeader("sObjectId", simple("${body.id}")).to("salesforce:deleteSObject?sObjectName=Account").end().         }     }. }
false;protected;0;4;;@Override protected String salesforceApiVersionToUse() {     return version. }
false;public,static;0;4;;@Parameters(name = "format = {0}, version = {1}") public static Iterable<Object[]> formats() {     return VERSIONS.stream().map(v -> new Object[] { "JSON", v }).collect(Collectors.toList()). }
false;static;2;17;;static void assertResponseContains(final SObjectCompositeResponse response, final String key) {     Assertions.assertThat(response).isNotNull().     final List<SObjectCompositeResult> compositeResponse = response.getCompositeResponse().     Assertions.assertThat(compositeResponse).hasSize(1).     final SObjectCompositeResult firstCompositeResponse = compositeResponse.get(0).     Assertions.assertThat(firstCompositeResponse).isNotNull().     final Object firstCompositeResponseBody = firstCompositeResponse.getBody().     Assertions.assertThat(firstCompositeResponseBody).isInstanceOf(Map.class).     @SuppressWarnings("unchecked")     final Map<String, ?> body = (Map<String, ?>) firstCompositeResponseBody.     Assertions.assertThat(body).containsKey(key).     Assertions.assertThat(body.get(key)).isNotNull(). }
