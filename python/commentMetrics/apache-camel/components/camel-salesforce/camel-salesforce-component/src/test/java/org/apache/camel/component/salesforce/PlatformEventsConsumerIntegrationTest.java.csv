commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void shouldConsumePlatformEvents() throws InterruptedException, ExecutionException {     final ExecutorService parallel = Executors.newSingleThreadExecutor().     final Future<PlatformEvent> futurePlatformEvent = parallel.submit(() -> consumer.receiveBody("salesforce:event/TestEvent__e", PlatformEvent.class)).     // it takes some time for the subscriber to subscribe, so we'll try to     // send repeated platform events and wait until the first one is     // received     Awaitility.await().atMost(10, TimeUnit.SECONDS).untilAsserted(() -> {         template.sendBody("direct:sendPlatformEvent", "{\"Test_Field__c\": \"data\"}").         Assertions.assertThat(futurePlatformEvent.isDone()).isTrue().     }).     final PlatformEvent platformEvent = futurePlatformEvent.get().     Assertions.assertThat(platformEvent).isNotNull().     Assertions.assertThat(platformEvent.getEventData()).containsOnly(entry("Test_Field__c", "data")). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:sendPlatformEvent").to("salesforce:createSObject?sObjectName=TestEvent__e"). }
false;protected;0;9;;@Override protected RouteBuilder doCreateRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:sendPlatformEvent").to("salesforce:createSObject?sObjectName=TestEvent__e").         }     }. }
false;protected;0;4;;@Override protected String salesforceApiVersionToUse() {     return "41.0". }
