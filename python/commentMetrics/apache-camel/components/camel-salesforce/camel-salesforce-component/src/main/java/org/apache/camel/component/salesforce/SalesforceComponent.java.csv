commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;55;;protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     // get Operation from remaining URI     OperationName operationName = null.     String topicName = null.     String apexUrl = null.     try {         log.debug("Creating endpoint for: {}", remaining).         if (remaining.startsWith(APEX_CALL_PREFIX)) {             // extract APEX URL             apexUrl = remaining.substring(APEX_CALL_PREFIX.length()).             remaining = OperationName.APEX_CALL.value().         }         operationName = OperationName.fromValue(remaining).     } catch (IllegalArgumentException ex) {         // if its not an operation name, treat is as topic name for consumer endpoints         topicName = remaining.     }     // create endpoint config     if (config == null) {         config = new SalesforceEndpointConfig().     }     if (config.getHttpClient() == null) {         // set the component's httpClient as default         config.setHttpClient(httpClient).     }     // create a deep copy and map parameters     final SalesforceEndpointConfig copy = config.copy().     setProperties(copy, parameters).     // set apexUrl in endpoint config     if (apexUrl != null) {         copy.setApexUrl(apexUrl).     }     final SalesforceEndpoint endpoint = new SalesforceEndpoint(uri, this, copy, operationName, topicName).     // map remaining parameters to endpoint (specifically, synchronous)     setProperties(endpoint, parameters).     // if operation is APEX call, map remaining parameters to query params     if (operationName == OperationName.APEX_CALL && !parameters.isEmpty()) {         Map<String, Object> queryParams = new HashMap<>(copy.getApexQueryParams()).         // override component params with endpoint params         queryParams.putAll(parameters).         parameters.clear().         copy.setApexQueryParams(queryParams).     }     return endpoint. }
false;private;0;13;;private Map<String, Class<?>> parsePackages() {     Map<String, Class<?>> result = new HashMap<>().     Set<Class<?>> classes = getCamelContext().getPackageScanClassResolver().findImplementations(AbstractSObjectBase.class, packages).     for (Class<?> aClass : classes) {         // findImplementations also returns AbstractSObjectBase for some reason!!!         if (AbstractSObjectBase.class != aClass) {             result.put(aClass.getSimpleName(), aClass).         }     }     return result. }
false;protected;0;70;;@Override protected void doStart() throws Exception {     super.doStart().     if (loginConfig == null) {         loginConfig = new SalesforceLoginConfig().         loginConfig.setInstanceUrl(instanceUrl).         loginConfig.setClientId(clientId).         loginConfig.setClientSecret(clientSecret).         loginConfig.setKeystore(keystore).         loginConfig.setLazyLogin(lazyLogin).         loginConfig.setLoginUrl(loginUrl).         loginConfig.setPassword(password).         loginConfig.setRefreshToken(refreshToken).         loginConfig.setType(authenticationType).         loginConfig.setUserName(userName).         log.debug("Created login configuration: {}", loginConfig).     } else {         log.debug("Using shared login configuration: {}", loginConfig).     }     // create a Jetty HttpClient if not already set     if (httpClient == null) {         final SSLContextParameters contextParameters = Optional.ofNullable(sslContextParameters).orElseGet(() -> Optional.ofNullable(retrieveGlobalSslContextParameters()).orElseGet(() -> new SSLContextParameters())).         final SslContextFactory sslContextFactory = new SslContextFactory().         sslContextFactory.setSslContext(contextParameters.createSSLContext(getCamelContext())).         httpClient = createHttpClient(sslContextFactory).     }     if (httpClientProperties == null) {         httpClientProperties = new HashMap<>().     }     defineComponentPropertiesIn(httpClientProperties, this).     setupHttpClient(httpClient, getCamelContext(), httpClientProperties).     // support restarts     if (session == null) {         session = new SalesforceSession(getCamelContext(), httpClient, httpClient.getTimeout(), loginConfig).     }     // set session before calling start()     httpClient.setSession(session).     // start the Jetty client to initialize thread pool, etc.     httpClient.start().     // login at startup if lazyLogin is disabled     if (!loginConfig.isLazyLogin()) {         ServiceHelper.startService(session).     }     if (packages != null && packages.length > 0) {         // parse the packages to create SObject name to class map         classMap = parsePackages().         log.info("Found {} generated classes in packages: {}", classMap.size(), Arrays.asList(packages)).     } else {         // use an empty map to avoid NPEs later         log.warn("Missing property packages, getSObject* operations will NOT work without property rawPayload=true").         classMap = new HashMap<>(0).     }     if (subscriptionHelper != null) {         ServiceHelper.startService(subscriptionHelper).     } }
false;protected;0;32;;@Override protected void doStop() throws Exception {     if (classMap != null) {         classMap.clear().     }     try {         if (subscriptionHelper != null) {             // shutdown all streaming connections             // note that this is done in the component, and not in consumer             ServiceHelper.stopService(subscriptionHelper).             subscriptionHelper = null.         }         if (session != null && session.getAccessToken() != null) {             try {                 // logout of Salesforce                 ServiceHelper.stopService(session).             } catch (SalesforceException ignored) {             }         }     } finally {         if (httpClient != null) {             // shutdown http client connections             httpClient.stop().             // destroy http client if it was created by the component             if (config != null && config.getHttpClient() == null) {                 httpClient.destroy().             }             httpClient = null.         }     } }
false;public;0;10;;public SubscriptionHelper getSubscriptionHelper() throws Exception {     if (subscriptionHelper == null) {         // lazily create subscription helper         subscriptionHelper = new SubscriptionHelper(this).         // also start the helper to connect to Salesforce         ServiceHelper.startService(subscriptionHelper).     }     return subscriptionHelper. }
false;public;0;3;;public AuthenticationType getAuthenticationType() {     return authenticationType. }
false;public;1;3;;public void setAuthenticationType(AuthenticationType authenticationType) {     this.authenticationType = authenticationType. }
false;public;0;3;;public SalesforceLoginConfig getLoginConfig() {     return loginConfig. }
false;public;1;3;;public void setLoginConfig(SalesforceLoginConfig loginConfig) {     this.loginConfig = loginConfig. }
false;public;1;3;;public void setInstanceUrl(String instanceUrl) {     this.instanceUrl = instanceUrl. }
false;public;0;3;;public String getLoginUrl() {     return loginUrl. }
false;public;1;3;;public void setLoginUrl(String loginUrl) {     this.loginUrl = loginUrl. }
false;public;0;3;;public String getClientId() {     return clientId. }
false;public;1;3;;public void setClientId(String clientId) {     this.clientId = clientId. }
false;public;0;4;;public String getClientSecret() {     return clientSecret. }
false;public;1;3;;public void setClientSecret(String clientSecret) {     this.clientSecret = clientSecret. }
false;public;1;3;;public void setKeystore(final KeyStoreParameters keystore) {     this.keystore = keystore. }
false;public;0;3;;public KeyStoreParameters getKeystore() {     return keystore. }
false;public;0;3;;public String getRefreshToken() {     return refreshToken. }
false;public;1;3;;public void setRefreshToken(String refreshToken) {     this.refreshToken = refreshToken. }
false;public;0;3;;public String getUserName() {     return userName. }
false;public;1;3;;public void setUserName(String userName) {     this.userName = userName. }
false;public;0;3;;public String getPassword() {     return password. }
false;public;1;3;;public void setPassword(String password) {     this.password = password. }
false;public;0;3;;public boolean isLazyLogin() {     return lazyLogin. }
false;public;1;3;;public void setLazyLogin(boolean lazyLogin) {     this.lazyLogin = lazyLogin. }
false;public;0;3;;public SalesforceEndpointConfig getConfig() {     return config. }
false;public;1;3;;public void setConfig(SalesforceEndpointConfig config) {     this.config = config. }
false;public;0;3;;public Map<String, Object> getHttpClientProperties() {     return httpClientProperties. }
false;public;1;3;;public void setHttpClientProperties(Map<String, Object> httpClientProperties) {     this.httpClientProperties = httpClientProperties. }
false;public;0;3;;public Map<String, Object> getLongPollingTransportProperties() {     return longPollingTransportProperties. }
false;public;1;3;;public void setLongPollingTransportProperties(Map<String, Object> longPollingTransportProperties) {     this.longPollingTransportProperties = longPollingTransportProperties. }
false;public;0;3;;public SSLContextParameters getSslContextParameters() {     return sslContextParameters. }
false;public;1;3;;public void setSslContextParameters(SSLContextParameters sslContextParameters) {     this.sslContextParameters = sslContextParameters. }
false;public;0;4;;@Override public boolean isUseGlobalSslContextParameters() {     return this.useGlobalSslContextParameters. }
false;public;1;4;;@Override public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {     this.useGlobalSslContextParameters = useGlobalSslContextParameters. }
false;public;0;3;;public String getHttpProxyHost() {     return httpProxyHost. }
false;public;1;3;;public void setHttpProxyHost(String httpProxyHost) {     this.httpProxyHost = httpProxyHost. }
false;public;0;3;;public Integer getHttpProxyPort() {     return httpProxyPort. }
false;public;1;3;;public void setHttpProxyPort(Integer httpProxyPort) {     this.httpProxyPort = httpProxyPort. }
false;public;0;3;;public String getHttpProxyUsername() {     return httpProxyUsername. }
false;public;1;3;;public void setHttpProxyUsername(String httpProxyUsername) {     this.httpProxyUsername = httpProxyUsername. }
false;public;0;3;;public String getHttpProxyPassword() {     return httpProxyPassword. }
false;public;1;3;;public void setHttpProxyPassword(String httpProxyPassword) {     this.httpProxyPassword = httpProxyPassword. }
false;public;0;3;;public boolean isHttpProxySocks4() {     return isHttpProxySocks4. }
false;public;1;3;;public void setIsHttpProxySocks4(boolean isHttpProxySocks4) {     this.isHttpProxySocks4 = isHttpProxySocks4. }
false;public;0;3;;public boolean isHttpProxySecure() {     return isHttpProxySecure. }
false;public;1;3;;public void setIsHttpProxySecure(boolean isHttpProxySecure) {     this.isHttpProxySecure = isHttpProxySecure. }
false;public;0;3;;public Set<String> getHttpProxyIncludedAddresses() {     return httpProxyIncludedAddresses. }
false;public;1;3;;public void setHttpProxyIncludedAddresses(Set<String> httpProxyIncludedAddresses) {     this.httpProxyIncludedAddresses = httpProxyIncludedAddresses. }
false;public;0;3;;public Set<String> getHttpProxyExcludedAddresses() {     return httpProxyExcludedAddresses. }
false;public;1;3;;public void setHttpProxyExcludedAddresses(Set<String> httpProxyExcludedAddresses) {     this.httpProxyExcludedAddresses = httpProxyExcludedAddresses. }
false;public;0;3;;public String getHttpProxyAuthUri() {     return httpProxyAuthUri. }
false;public;1;3;;public void setHttpProxyAuthUri(String httpProxyAuthUri) {     this.httpProxyAuthUri = httpProxyAuthUri. }
false;public;0;3;;public String getHttpProxyRealm() {     return httpProxyRealm. }
false;public;1;3;;public void setHttpProxyRealm(String httpProxyRealm) {     this.httpProxyRealm = httpProxyRealm. }
false;public;0;3;;public boolean isHttpProxyUseDigestAuth() {     return httpProxyUseDigestAuth. }
false;public;1;3;;public void setHttpProxyUseDigestAuth(boolean httpProxyUseDigestAuth) {     this.httpProxyUseDigestAuth = httpProxyUseDigestAuth. }
false;public;0;3;;public String[] getPackages() {     return packages. }
false;public;1;3;;public void setPackages(String[] packages) {     this.packages = packages. }
false;public;1;6;;public void setPackages(String packages) {     // split using comma     if (packages != null) {         setPackages(packages.split(",")).     } }
false;public;0;3;;public SalesforceSession getSession() {     return session. }
false;public;0;3;;public Map<String, Class<?>> getClassMap() {     return classMap. }
false;public;1;5;;public RestClient createRestClientFor(final SalesforceEndpoint endpoint) throws SalesforceException {     final SalesforceEndpointConfig endpointConfig = endpoint.getConfiguration().     return createRestClientFor(endpointConfig). }
false;;1;6;;RestClient createRestClientFor(SalesforceEndpointConfig endpointConfig) throws SalesforceException {     final String version = endpointConfig.getApiVersion().     final PayloadFormat format = endpointConfig.getFormat().     return new DefaultRestClient(httpClient, version, format, session). }
false;;1;10;;RestClient createRestClient(final Map<String, Object> properties) throws Exception {     final SalesforceEndpointConfig modifiedConfig = Optional.ofNullable(config).map(SalesforceEndpointConfig::copy).orElseGet(() -> new SalesforceEndpointConfig()).     final CamelContext camelContext = getCamelContext().     final TypeConverter typeConverter = camelContext.getTypeConverter().     IntrospectionSupport.setProperties(typeConverter, modifiedConfig, properties).     return createRestClientFor(modifiedConfig). }
false;static;2;29;;static RestClient createRestClient(final CamelContext camelContext, final Map<String, Object> properties) throws Exception {     final TypeConverter typeConverter = camelContext.getTypeConverter().     final SalesforceEndpointConfig config = new SalesforceEndpointConfig().     // let's work with a copy for IntrospectionSupport so original properties are intact     IntrospectionSupport.setProperties(typeConverter, config, new HashMap<>(properties)).     final SalesforceLoginConfig loginConfig = new SalesforceLoginConfig().     // let's work with a copy for IntrospectionSupport so original properties are intact     IntrospectionSupport.setProperties(typeConverter, loginConfig, new HashMap<>(properties)).     final SSLContextParameters sslContextParameters = Optional.ofNullable(camelContext.getSSLContextParameters()).orElseGet(() -> new SSLContextParameters()).     // let's work with a copy for IntrospectionSupport so original properties are intact     IntrospectionSupport.setProperties(typeConverter, sslContextParameters, new HashMap<>(properties)).     final SslContextFactory sslContextFactory = new SslContextFactory().     sslContextFactory.setSslContext(sslContextParameters.createSSLContext(camelContext)).     final SalesforceHttpClient httpClient = createHttpClient(sslContextFactory).     setupHttpClient(httpClient, camelContext, properties).     final SalesforceSession session = new SalesforceSession(camelContext, httpClient, httpClient.getTimeout(), loginConfig).     httpClient.setSession(session).     return new DefaultRestClient(httpClient, config.getApiVersion(), config.getFormat(), session). }
false;static;1;9;;static SalesforceHttpClient createHttpClient(final SslContextFactory sslContextFactory) throws Exception {     final SalesforceHttpClient httpClient = new SalesforceHttpClient(sslContextFactory).     // default settings, use httpClientProperties to set other     // properties     httpClient.setConnectTimeout(CONNECTION_TIMEOUT).     httpClient.setIdleTimeout(IDLE_TIMEOUT).     return httpClient. }
false;static;3;66;;static SalesforceHttpClient setupHttpClient(final SalesforceHttpClient httpClient, final CamelContext camelContext, final Map<String, Object> httpClientProperties) throws Exception {     if (httpClientProperties == null || httpClientProperties.isEmpty()) {         return httpClient.     }     // set HTTP client parameters     final TypeConverter typeConverter = camelContext.getTypeConverter().     IntrospectionSupport.setProperties(typeConverter, httpClient, new HashMap<>(httpClientProperties)).     final String httpProxyHost = typeConverter.convertTo(String.class, httpClientProperties.get(HTTP_PROXY_HOST)).     final Integer httpProxyPort = typeConverter.convertTo(Integer.class, httpClientProperties.get(HTTP_PROXY_PORT)).     final boolean isHttpProxySocks4 = typeConverter.convertTo(boolean.class, httpClientProperties.get(HTTP_PROXY_IS_SOCKS4)).     final boolean isHttpProxySecure = typeConverter.convertTo(boolean.class, httpClientProperties.get(HTTP_PROXY_IS_SECURE)).     @SuppressWarnings("unchecked")     final Set<String> httpProxyIncludedAddresses = (Set<String>) httpClientProperties.get(HTTP_PROXY_INCLUDE).     @SuppressWarnings("unchecked")     final Set<String> httpProxyExcludedAddresses = (Set<String>) httpClientProperties.get(HTTP_PROXY_EXCLUDE).     final String httpProxyUsername = typeConverter.convertTo(String.class, httpClientProperties.get(HTTP_PROXY_USERNAME)).     final String httpProxyPassword = typeConverter.convertTo(String.class, httpClientProperties.get(HTTP_PROXY_PASSWORD)).     final String httpProxyAuthUri = typeConverter.convertTo(String.class, httpClientProperties.get(HTTP_PROXY_AUTH_URI)).     final String httpProxyRealm = typeConverter.convertTo(String.class, httpClientProperties.get(HTTP_PROXY_REALM)).     final boolean httpProxyUseDigestAuth = typeConverter.convertTo(boolean.class, httpClientProperties.get(HTTP_PROXY_USE_DIGEST_AUTH)).     // set HTTP proxy settings     if (httpProxyHost != null && httpProxyPort != null) {         Origin.Address proxyAddress = new Origin.Address(httpProxyHost, httpProxyPort).         ProxyConfiguration.Proxy proxy.         if (isHttpProxySocks4) {             proxy = new Socks4Proxy(proxyAddress, isHttpProxySecure).         } else {             proxy = new HttpProxy(proxyAddress, isHttpProxySecure).         }         if (httpProxyIncludedAddresses != null && !httpProxyIncludedAddresses.isEmpty()) {             proxy.getIncludedAddresses().addAll(httpProxyIncludedAddresses).         }         if (httpProxyExcludedAddresses != null && !httpProxyExcludedAddresses.isEmpty()) {             proxy.getExcludedAddresses().addAll(httpProxyExcludedAddresses).         }         httpClient.getProxyConfiguration().getProxies().add(proxy).     }     if (httpProxyUsername != null && httpProxyPassword != null) {         StringHelper.notEmpty(httpProxyAuthUri, "httpProxyAuthUri").         StringHelper.notEmpty(httpProxyRealm, "httpProxyRealm").         final Authentication authentication.         if (httpProxyUseDigestAuth) {             authentication = new DigestAuthentication(new URI(httpProxyAuthUri), httpProxyRealm, httpProxyUsername, httpProxyPassword).         } else {             authentication = new BasicAuthentication(new URI(httpProxyAuthUri), httpProxyRealm, httpProxyUsername, httpProxyPassword).         }         httpClient.getAuthenticationStore().addAuthentication(authentication).     }     return httpClient. }
false;private,static;2;17;;private static void defineComponentPropertiesIn(final Map<String, Object> httpClientProperties, final SalesforceComponent salesforce) {     putValueIfGivenTo(httpClientProperties, HTTP_PROXY_HOST, salesforce::getHttpProxyHost).     putValueIfGivenTo(httpClientProperties, HTTP_PROXY_PORT, salesforce::getHttpProxyPort).     putValueIfGivenTo(httpClientProperties, HTTP_PROXY_INCLUDE, salesforce::getHttpProxyIncludedAddresses).     putValueIfGivenTo(httpClientProperties, HTTP_PROXY_EXCLUDE, salesforce::getHttpProxyExcludedAddresses).     putValueIfGivenTo(httpClientProperties, HTTP_PROXY_USERNAME, salesforce::getHttpProxyUsername).     putValueIfGivenTo(httpClientProperties, HTTP_PROXY_PASSWORD, salesforce::getHttpProxyPassword).     putValueIfGivenTo(httpClientProperties, HTTP_PROXY_REALM, salesforce::getHttpProxyRealm).     putValueIfGivenTo(httpClientProperties, HTTP_PROXY_AUTH_URI, salesforce::getHttpProxyAuthUri).     if (ObjectHelper.isNotEmpty(salesforce.getHttpProxyHost())) {         // let's not put `false` values in client properties if no proxy is used         putValueIfGivenTo(httpClientProperties, HTTP_PROXY_IS_SOCKS4, salesforce::isHttpProxySocks4).         putValueIfGivenTo(httpClientProperties, HTTP_PROXY_IS_SECURE, salesforce::isHttpProxySecure).         putValueIfGivenTo(httpClientProperties, HTTP_PROXY_USE_DIGEST_AUTH, salesforce::isHttpProxyUseDigestAuth).     } }
false;private,static;3;6;;private static void putValueIfGivenTo(final Map<String, Object> properties, final String key, final Supplier<Object> valueSupplier) {     final Object value = valueSupplier.get().     if (ObjectHelper.isNotEmpty(value)) {         properties.putIfAbsent(key, value).     } }
