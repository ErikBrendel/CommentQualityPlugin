commented;modifiers;parameterAmount;loc;comment;code
false;public,abstract;2;2;;@Override public abstract boolean process(Exchange exchange, AsyncCallback callback).
true;protected,final;4;4;/**  * Gets String value for a parameter from header, endpoint config, or  * exchange body (optional).  *  * @param exchange          exchange to inspect  * @param convertInBody     converts In body to String value if true  * @param propName          name of property  * @param optional          if {@code true} returns null, otherwise throws RestException  * @return value of property, or {@code null} for optional parameters if not found.  * @throws org.apache.camel.component.salesforce.api.SalesforceException  *          if the property can't be found or on conversion errors.  */ ;/**  * Gets String value for a parameter from header, endpoint config, or  * exchange body (optional).  *  * @param exchange          exchange to inspect  * @param convertInBody     converts In body to String value if true  * @param propName          name of property  * @param optional          if {@code true} returns null, otherwise throws RestException  * @return value of property, or {@code null} for optional parameters if not found.  * @throws org.apache.camel.component.salesforce.api.SalesforceException  *          if the property can't be found or on conversion errors.  */ protected final String getParameter(final String propName, final Exchange exchange, final boolean convertInBody, final boolean optional) throws SalesforceException {     return getParameter(propName, exchange, convertInBody, optional, String.class). }
true;protected,final;5;38;/**  * Gets value for a parameter from header, endpoint config, or exchange body (optional).  *  * @param exchange          exchange to inspect  * @param convertInBody     converts In body to parameterClass value if true  * @param propName          name of property  * @param optional          if {@code true} returns null, otherwise throws RestException  * @param parameterClass    parameter type  * @return value of property, or {@code null} for optional parameters if not found.  * @throws org.apache.camel.component.salesforce.api.SalesforceException  *          if the property can't be found or on conversion errors.  */ ;/**  * Gets value for a parameter from header, endpoint config, or exchange body (optional).  *  * @param exchange          exchange to inspect  * @param convertInBody     converts In body to parameterClass value if true  * @param propName          name of property  * @param optional          if {@code true} returns null, otherwise throws RestException  * @param parameterClass    parameter type  * @return value of property, or {@code null} for optional parameters if not found.  * @throws org.apache.camel.component.salesforce.api.SalesforceException  *          if the property can't be found or on conversion errors.  */ protected final <T> T getParameter(final String propName, final Exchange exchange, final boolean convertInBody, final boolean optional, final Class<T> parameterClass) throws SalesforceException {     final Message in = exchange.getIn().     T propValue = in.getHeader(propName, parameterClass).     if (propValue == null) {         // check if type conversion failed         if (in.getHeader(propName) != null) {             throw new IllegalArgumentException("Header " + propName + " could not be converted to type " + parameterClass.getName()).         }         final Object value = endpointConfigMap.get(propName).         if (value == null || parameterClass.isInstance(value)) {             propValue = parameterClass.cast(value).         } else {             try {                 propValue = exchange.getContext().getTypeConverter().mandatoryConvertTo(parameterClass, value).             } catch (final NoTypeConversionAvailableException e) {                 throw new SalesforceException(e).             }         }     }     propValue = propValue == null && convertInBody ? in.getBody(parameterClass) : propValue.     // error if property was not set     if (propValue == null && !optional) {         final String msg = "Missing property " + propName + (convertInBody ? ", message body could not be converted to type " + parameterClass.getName() : "").         throw new SalesforceException(msg, null).     }     return propValue. }
