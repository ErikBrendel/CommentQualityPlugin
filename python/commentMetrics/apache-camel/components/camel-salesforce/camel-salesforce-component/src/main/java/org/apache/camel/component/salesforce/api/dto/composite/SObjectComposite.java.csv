commented;modifiers;parameterAmount;loc;comment;code
true;public;2;6;/**  * Add create SObject to the composite request.  *  * @param data object to create  *  * @return this batch builder  */ ;/**  * Add create SObject to the composite request.  *  * @param data object to create  *  * @return this batch builder  */ public SObjectComposite addCreate(final AbstractDescribedSObjectBase data, final String referenceId) {     addCompositeRequest(new CompositeRequest(Method.POST, apiPrefix + "/sobjects/" + typeOf(data) + "/", data, referenceId)).     return this. }
true;public;3;5;/**  * Add delete SObject with identifier to the composite request.  *  * @param type type of SObject  * @param id identifier of the object  * @return this batch builder  */ ;/**  * Add delete SObject with identifier to the composite request.  *  * @param type type of SObject  * @param id identifier of the object  * @return this batch builder  */ public SObjectComposite addDelete(final String type, final String id, final String referenceId) {     addCompositeRequest(new CompositeRequest(Method.DELETE, rowBaseUrl(type, id), referenceId)).     return this. }
true;public;4;6;/**  * Generic way to add requests to composite with {@code richInput} payload.  * Given URL starts from the version, so in order to update SObject specify  * just {@code /sobjects/Account/identifier} which results in  * {@code /services/data/v37.0/sobjects/Account/identifier}. Note the  * leading slash.  *  * @param method HTTP method  * @param url URL starting from the version  * @param richInput body of the request, to be placed in richInput  * @return this batch builder  */ ;/**  * Generic way to add requests to composite with {@code richInput} payload.  * Given URL starts from the version, so in order to update SObject specify  * just {@code /sobjects/Account/identifier} which results in  * {@code /services/data/v37.0/sobjects/Account/identifier}. Note the  * leading slash.  *  * @param method HTTP method  * @param url URL starting from the version  * @param richInput body of the request, to be placed in richInput  * @return this batch builder  */ public SObjectComposite addGeneric(final Method method, final String url, final Object richInput, final String referenceId) {     addCompositeRequest(new CompositeRequest(method, apiPrefix + url, richInput, referenceId)).     return this. }
true;public;3;5;/**  * Generic way to add requests to composite. Given URL starts from the  * version, so in order to retrieve SObject specify just  * {@code /sobjects/Account/identifier} which results in  * {@code /services/data/v37.0/sobjects/Account/identifier}. Note the  * leading slash.  *  * @param method HTTP method  * @param url URL starting from the version  * @return this batch builder  */ ;/**  * Generic way to add requests to composite. Given URL starts from the  * version, so in order to retrieve SObject specify just  * {@code /sobjects/Account/identifier} which results in  * {@code /services/data/v37.0/sobjects/Account/identifier}. Note the  * leading slash.  *  * @param method HTTP method  * @param url URL starting from the version  * @return this batch builder  */ public SObjectComposite addGeneric(final Method method, final String url, final String referenceId) {     addGeneric(method, url, null, referenceId).     return this. }
true;public;4;8;/**  * Add field retrieval of an SObject by identifier to the composite request.  *  * @param type type of SObject  * @param id identifier of SObject  * @param fields to return  * @return this batch builder  */ ;/**  * Add field retrieval of an SObject by identifier to the composite request.  *  * @param type type of SObject  * @param id identifier of SObject  * @param fields to return  * @return this batch builder  */ public SObjectComposite addGet(final String type, final String id, final String referenceId, final String... fields) {     final String fieldsParameter = composeFieldsParameter(fields).     addCompositeRequest(new CompositeRequest(Method.GET, rowBaseUrl(type, id) + fieldsParameter, referenceId)).     return this. }
true;public;4;6;/**  * Add field retrieval of an SObject by external identifier to the composite  * request.  *  * @param type type of SObject  * @param fieldName external identifier field name  * @param fieldValue external identifier field value  * @param fields to return  * @return this batch builder  */ ;/**  * Add field retrieval of an SObject by external identifier to the composite  * request.  *  * @param type type of SObject  * @param fieldName external identifier field name  * @param fieldValue external identifier field value  * @param fields to return  * @return this batch builder  */ public SObjectComposite addGetByExternalId(final String type, final String fieldName, final String fieldValue, final String referenceId) {     addCompositeRequest(new CompositeRequest(Method.GET, rowBaseUrl(type, fieldName, fieldValue), referenceId)).     return this. }
true;public;5;11;/**  * Add retrieval of related SObject fields by identifier. For example  * {@code Account} has a relation to {@code CreatedBy}. To fetch fields from  * that related object ({@code User} SObject) use: <blockquote>  *  * <pre>  * {@code batch.addGetRelated("Account", identifier, "CreatedBy", "Name", "Id")}  * </pre>  *  * </blockquote>  *  * @param type type of SObject  * @param id identifier of SObject  * @param relation name of the related SObject field  * @param fields to return  * @return this batch builder  */ ;/**  * Add retrieval of related SObject fields by identifier. For example  * {@code Account} has a relation to {@code CreatedBy}. To fetch fields from  * that related object ({@code User} SObject) use: <blockquote>  *  * <pre>  * {@code batch.addGetRelated("Account", identifier, "CreatedBy", "Name", "Id")}  * </pre>  *  * </blockquote>  *  * @param type type of SObject  * @param id identifier of SObject  * @param relation name of the related SObject field  * @param fields to return  * @return this batch builder  */ public SObjectComposite addGetRelated(final String type, final String id, final String relation, final String referenceId, final String... fields) {     version.requireAtLeast(36, 0).     final String fieldsParameter = composeFieldsParameter(fields).     addCompositeRequest(new CompositeRequest(Method.GET, rowBaseUrl(type, id) + "/" + notEmpty(relation, "relation") + fieldsParameter, referenceId)).     return this. }
true;public;2;6;/**  * Add retrieval of SObject records by query to the composite.  *  * @param query SOQL query to execute  * @return this batch builder  */ ;/**  * Add retrieval of SObject records by query to the composite.  *  * @param query SOQL query to execute  * @return this batch builder  */ public SObjectComposite addQuery(final String query, final String referenceId) {     addCompositeRequest(new CompositeRequest(Method.GET, apiPrefix + "/query/?q=" + notEmpty(query, "query"), referenceId)).     return this. }
true;public;2;6;/**  * Add retrieval of all SObject records by query to the composite.  *  * @param query SOQL query to execute  * @return this batch builder  */ ;/**  * Add retrieval of all SObject records by query to the composite.  *  * @param query SOQL query to execute  * @return this batch builder  */ public SObjectComposite addQueryAll(final String query, final String referenceId) {     addCompositeRequest(new CompositeRequest(Method.GET, apiPrefix + "/queryAll/?q=" + notEmpty(query, "query"), referenceId)).     return this. }
true;public;4;7;/**  * Add update of SObject record to the composite. The given {@code data}  * parameter must contain only the fields that need updating and must not  * contain the {@code Id} field. So set any fields to {@code null} that you  * do not want changed along with {@code Id} field.  *  * @param type type of SObject  * @param id identifier of SObject  * @param data SObject with fields to change  * @return this batch builder  */ ;/**  * Add update of SObject record to the composite. The given {@code data}  * parameter must contain only the fields that need updating and must not  * contain the {@code Id} field. So set any fields to {@code null} that you  * do not want changed along with {@code Id} field.  *  * @param type type of SObject  * @param id identifier of SObject  * @param data SObject with fields to change  * @return this batch builder  */ public SObjectComposite addUpdate(final String type, final String id, final AbstractSObjectBase data, final String referenceId) {     addCompositeRequest(new CompositeRequest(Method.PATCH, rowBaseUrl(type, notEmpty(id, "data.Id")), data, referenceId)).     return this. }
true;public;5;8;/**  * Add update of SObject record by external identifier to the composite. The  * given {@code data} parameter must contain only the fields that need  * updating and must not contain the {@code Id} field. So set any fields to  * {@code null} that you do not want changed along with {@code Id} field.  *  * @param type type of SObject  * @param fieldName name of the field holding the external identifier  * @param id external identifier value  * @param data SObject with fields to change  * @return this batch builder  */ ;/**  * Add update of SObject record by external identifier to the composite. The  * given {@code data} parameter must contain only the fields that need  * updating and must not contain the {@code Id} field. So set any fields to  * {@code null} that you do not want changed along with {@code Id} field.  *  * @param type type of SObject  * @param fieldName name of the field holding the external identifier  * @param id external identifier value  * @param data SObject with fields to change  * @return this batch builder  */ public SObjectComposite addUpdateByExternalId(final String type, final String fieldName, final String fieldValue, final AbstractSObjectBase data, final String referenceId) {     addCompositeRequest(new CompositeRequest(Method.PATCH, rowBaseUrl(type, fieldName, fieldValue), data, referenceId)).     return this. }
true;public;5;5;/**  * Add insert or update of SObject record by external identifier to the  * composite. The given {@code data} parameter must contain only the fields  * that need updating and must not contain the {@code Id} field. So set any  * fields to {@code null} that you do not want changed along with {@code Id}  * field.  *  * @param type type of SObject  * @param fieldName name of the field holding the external identifier  * @param id external identifier value  * @param data SObject with fields to change  * @return this batch builder  */ ;/**  * Add insert or update of SObject record by external identifier to the  * composite. The given {@code data} parameter must contain only the fields  * that need updating and must not contain the {@code Id} field. So set any  * fields to {@code null} that you do not want changed along with {@code Id}  * field.  *  * @param type type of SObject  * @param fieldName name of the field holding the external identifier  * @param id external identifier value  * @param data SObject with fields to change  * @return this batch builder  */ public SObjectComposite addUpsertByExternalId(final String type, final String fieldName, final String fieldValue, final AbstractSObjectBase data, final String referenceId) {     return addUpdateByExternalId(type, fieldName, fieldValue, data, referenceId). }
false;public;0;3;;public boolean getAllOrNone() {     return allOrNone. }
true;public;0;4;/**  * Fetches compose requests contained in this compose request.  *  * @return all requests  */ ;/**  * Fetches compose requests contained in this compose request.  *  * @return all requests  */ @JsonProperty("compositeRequest") public List<CompositeRequest> getCompositeRequests() {     return Collections.unmodifiableList(compositeRequests). }
true;public;0;4;/**  * Version of Salesforce API for this batch request.  *  * @return the version  */ ;/**  * Version of Salesforce API for this batch request.  *  * @return the version  */ @JsonIgnore public Version getVersion() {     return version. }
true;public;0;9;/**  * Returns all object types nested within this composite request, needed for  * serialization.  *  * @return all object types in this composite request  */ ;/**  * Returns all object types nested within this composite request, needed for  * serialization.  *  * @return all object types in this composite request  */ @SuppressWarnings("rawtypes") public Class[] objectTypes() {     final Set<Class<?>> types = Stream.concat(Stream.of(SObjectComposite.class, BatchRequest.class), compositeRequests.stream().map(CompositeRequest::getBody).filter(Objects::nonNull).map(Object::getClass)).collect(Collectors.toSet()).     return types.toArray(new Class[types.size()]). }
false;;1;7;;void addCompositeRequest(final CompositeRequest compositeRequest) {     if (compositeRequests.size() >= MAX_COMPOSITE_OPERATIONS) {         throw new IllegalArgumentException("You can add up to " + MAX_COMPOSITE_OPERATIONS + " requests in a single composite request. Split your requests across multiple composite request.").     }     compositeRequests.add(compositeRequest). }
false;;2;3;;String rowBaseUrl(final String type, final String id) {     return apiPrefix + "/sobjects/" + notEmpty(type, SOBJECT_TYPE_PARAM) + "/" + notEmpty(id, "id"). }
false;;3;9;;String rowBaseUrl(final String type, final String fieldName, final String fieldValue) {     try {         return apiPrefix + "/sobjects/" + notEmpty(type, SOBJECT_TYPE_PARAM) + "/" + notEmpty(fieldName, "fieldName") + "/" + URLEncoder.encode(notEmpty(fieldValue, "fieldValue"), StandardCharsets.UTF_8.name()).     } catch (final UnsupportedEncodingException e) {         throw new IllegalStateException(e).     } }
false;static;1;3;;static String typeOf(final AbstractDescribedSObjectBase data) {     return notNull(data, "data").description().getName(). }
false;static;1;11;;static String composeFieldsParameter(final String... fields) {     if (fields != null && fields.length > 0) {         try {             return "?fields=" + URLEncoder.encode(String.join(",", fields), StandardCharsets.UTF_8.name()).         } catch (UnsupportedEncodingException e) {             throw new IllegalStateException(e).         }     }     return "". }
