commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static void addDefaultPermissions(final XStream xstream) {     addPermissions(xstream, System.getProperty(PERMISSIONS_PROPERTY_KEY, PERMISSIONS_PROPERTY_DEFAULT)). }
false;public,static;2;33;;public static void addPermissions(final XStream xstream, final String permissions) {     for (String pterm : permissions.split(",")) {         boolean aod.         pterm = pterm.trim().         if (pterm.startsWith("-")) {             aod = false.             pterm = pterm.substring(1).         } else {             aod = true.             if (pterm.startsWith("+")) {                 pterm = pterm.substring(1).             }         }         TypePermission typePermission = null.         if ("*".equals(pterm)) {             // accept or deny any             typePermission = AnyTypePermission.ANY.         } else if (pterm.indexOf('*') < 0) {             // exact type             typePermission = new ExplicitTypePermission(new String[] { pterm }).         } else if (pterm.length() > 0) {             // wildcard type             typePermission = new WildcardTypePermission(new String[] { pterm }).         }         if (typePermission != null) {             if (aod) {                 xstream.addPermission(typePermission).             } else {                 xstream.denyPermission(typePermission).             }         }     } }
false;public;1;4;;@Override public HierarchicalStreamWriter createWriter(final Writer out) {     return new CompactWriter(out, getNameCoder()). }
false;public,static;1;34;;public static XStream createXStream(final Class<?>... additionalTypes) {     final PureJavaReflectionProvider reflectionProvider = new PureJavaReflectionProvider(new FieldDictionary(new AnnotationFieldKeySorter())).     // use NoNameCoder to avoid escaping __ in custom field names     // and CompactWriter to avoid pretty printing     final XppDriver hierarchicalStreamDriver = new XppDriver(new NoNameCoder()) {          @Override         public HierarchicalStreamWriter createWriter(final Writer out) {             return new CompactWriter(out, getNameCoder()).         }     }.     final XStream result = new XStream(reflectionProvider, hierarchicalStreamDriver).     result.aliasSystemAttribute(null, "class").     result.ignoreUnknownElements().     XStreamUtils.addDefaultPermissions(result).     result.registerConverter(new DateConverter("yyyy-MM-dd'T'HH:mm:ss.SSSZ", null), XStream.PRIORITY_VERY_HIGH).     result.registerConverter(LocalDateTimeConverter.INSTANCE, XStream.PRIORITY_VERY_HIGH).     result.registerConverter(OffsetDateTimeConverter.INSTANCE, XStream.PRIORITY_VERY_HIGH).     result.registerConverter(ZonedDateTimeConverter.INSTANCE, XStream.PRIORITY_VERY_HIGH).     result.registerConverter(InstantConverter.INSTANCE, XStream.PRIORITY_VERY_HIGH).     result.registerConverter(OffsetTimeConverter.INSTANCE, XStream.PRIORITY_VERY_HIGH).     result.setMarshallingStrategy(new TreeMarshallingStrategy()).     result.processAnnotations(RestErrors.class).     result.processAnnotations(RestChoices.class).     result.processAnnotations(additionalTypes).     return result. }
