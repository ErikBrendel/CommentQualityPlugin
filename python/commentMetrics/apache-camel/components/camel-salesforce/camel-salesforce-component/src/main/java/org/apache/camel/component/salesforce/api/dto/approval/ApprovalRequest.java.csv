commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public void addNextApproverId(final String nextApproverId) {     nextApproverIds = Optional.ofNullable(nextApproverIds).orElse(new ArrayList<>()).     nextApproverIds.add(nextApproverId). }
true;public;1;29;/**  * Creates new {@link ApprovalRequest} by combining values from the given template with the values currently  * present. If the value is not present and the template has the corresponding value, then the template value is  * set. The net result is that all set values of an {@link ApprovalRequest} are preserved, while the values set on  * template are used for undefined ( <code>null</code>) values.  *  * @param template  *            template to apply  * @return newly created object with applied template  */ ;/**  * Creates new {@link ApprovalRequest} by combining values from the given template with the values currently  * present. If the value is not present and the template has the corresponding value, then the template value is  * set. The net result is that all set values of an {@link ApprovalRequest} are preserved, while the values set on  * template are used for undefined ( <code>null</code>) values.  *  * @param template  *            template to apply  * @return newly created object with applied template  */ public ApprovalRequest applyTemplate(final ApprovalRequest template) {     if (template == null) {         return this.     }     final ApprovalRequest withTemplateValues = new ApprovalRequest().     for (final Field field : FieldHolder.INSTANCE.fields) {         try {             final Object currentValue = field.get(this).             // the template value             if (currentValue == null) {                 final Object templateValue = field.get(template).                 if (templateValue != null) {                     field.set(withTemplateValues, templateValue).                 }             } else {                 field.set(withTemplateValues, currentValue).             }         } catch (IllegalArgumentException | IllegalAccessException e) {             throw new IllegalStateException("Unable to apply values from template", e).         }     }     return withTemplateValues. }
false;public;1;18;;@Override public boolean equals(final Object obj) {     if (obj == this) {         return true.     }     if (!(obj instanceof ApprovalRequest)) {         return false.     }     final ApprovalRequest other = (ApprovalRequest) obj.     return Objects.equals(actionType, other.actionType) && Objects.equals(contextActorId, other.contextActorId) && Objects.equals(contextId, other.contextId) && Objects.equals(comments, other.comments) && Objects.equals(nextApproverIds, other.nextApproverIds) && Objects.equals(processDefinitionNameOrId, other.processDefinitionNameOrId) && Objects.equals(skipEntryCriteria, other.skipEntryCriteria). }
false;public;0;3;;public Action getActionType() {     return actionType. }
false;public;0;3;;public String getComments() {     return comments. }
false;public;0;3;;public String getContextActorId() {     return contextActorId. }
false;public;0;3;;public String getContextId() {     return contextId. }
false;public;0;3;;public List<String> getNextApproverIds() {     return listFromNullable(nextApproverIds). }
false;public;0;3;;public String getProcessDefinitionNameOrId() {     return processDefinitionNameOrId. }
false;public;0;5;;@Override public int hashCode() {     return Arrays.hashCode(new Object[] { actionType, contextActorId, contextId, comments, nextApproverIds, processDefinitionNameOrId, skipEntryCriteria }). }
false;public;0;3;;public boolean isSkipEntryCriteria() {     return skipEntryCriteria. }
false;public;1;3;;public void setActionType(final Action actionType) {     this.actionType = actionType. }
false;public;1;3;;public void setComments(final String comments) {     this.comments = comments. }
false;public;1;3;;public void setContextActorId(final String contextActorId) {     this.contextActorId = contextActorId. }
false;public;1;3;;public void setContextId(final String contextId) {     this.contextId = contextId. }
false;public;1;3;;public void setNextApproverIds(final List<String> nextApproverIds) {     this.nextApproverIds = new ArrayList<>(listFromNullable(nextApproverIds)). }
false;public;1;4;;public void setNextApproverIds(final String nextApproverId) {     // set single approver id     this.nextApproverIds = Collections.singletonList(nextApproverId). }
false;public;1;3;;public void setProcessDefinitionNameOrId(final String processDefinitionNameOrId) {     this.processDefinitionNameOrId = processDefinitionNameOrId. }
false;public;1;3;;public void setSkipEntryCriteria(final boolean skipEntryCriteria) {     this.skipEntryCriteria = skipEntryCriteria. }
false;public;0;13;;@Override public String toString() {     final StringBuilder buildy = new StringBuilder("ApprovalRequest: ").     buildy.append("actionType: ").append(actionType).     buildy.append(", contextActorId: ").append(contextActorId).     buildy.append(", contextId: ").append(contextId).     buildy.append(", comments: ").append(comments).     buildy.append(", nextApproverIds: ").append(nextApproverIds).     buildy.append(", processDefinitionNameOrId: ").append(processDefinitionNameOrId).     buildy.append(", skipEntryCriteria: ").append(skipEntryCriteria).     return buildy.toString(). }
false;private;1;3;;private List<String> listFromNullable(final List<String> nullable) {     return Optional.ofNullable(nullable).orElse(Collections.emptyList()). }
