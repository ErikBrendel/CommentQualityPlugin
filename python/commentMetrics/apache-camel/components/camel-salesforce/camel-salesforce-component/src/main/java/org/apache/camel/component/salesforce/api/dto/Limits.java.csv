commented;modifiers;parameterAmount;loc;comment;code
false;public;2;8;;@Override public Object deserialize(final JsonParser parser, final DeserializationContext context) throws IOException, JsonProcessingException {     final Map<String, Usage> usages = parser.readValueAs(TypeReferences.USAGES_TYPE).     return new Limits(usages). }
true;public;1;3;/**  * Returns {@link Usage} for application  */ ;/**  * Returns {@link Usage} for application  */ public Optional<Usage> forApplication(final String application) {     return Optional.ofNullable(perApplication.get(application)). }
true;public;0;3;/**  * Further per application usage.  */ ;/**  * Further per application usage.  */ public Set<String> getApplications() {     return perApplication.keySet(). }
true;public;0;3;/**  * Maximum allowed by the limit  */ ;/**  * Maximum allowed by the limit  */ public int getMax() {     return max. }
true;public;0;3;/**  * Returns usages per application  */ ;/**  * Returns usages per application  */ public Map<String, Usage> getPerApplicationUsage() {     return Collections.unmodifiableMap(perApplication). }
true;public;0;3;/**  * Remaining invocations allowed  */ ;/**  * Remaining invocations allowed  */ public int getRemaining() {     return remaining. }
false;public;0;3;;public boolean isUnknown() {     return max == UNKNOWN_VAL && remaining == UNKNOWN_VAL. }
false;public;0;8;;@Override public String toString() {     if (max == UNKNOWN_VAL && remaining == UNKNOWN_VAL) {         return "Undefined".     }     return "Max: " + max + ", Remaining: " + remaining + ", per application: " + perApplication. }
false;;2;4;;@JsonAnySetter void addApplicationUsage(final String application, final Usage usage) {     perApplication.put(application, usage). }
false;public;1;3;;public Usage forOperation(final Operation operation) {     return usages.getOrDefault(operation, UNDEFINED). }
false;public;1;3;;public Usage forOperation(final String name) {     return usages.getOrDefault(name, UNDEFINED). }
true;public;0;3;/**  * Concurrent REST API requests for results of asynchronous report runs  */ ;/**  * Concurrent REST API requests for results of asynchronous report runs  */ public Usage getConcurrentAsyncGetReportInstances() {     return forOperation(Operation.ConcurrentAsyncGetReportInstances.name()). }
true;public;0;3;/**  * Concurrent synchronous report runs via REST API  */ ;/**  * Concurrent synchronous report runs via REST API  */ public Usage getConcurrentSyncReportRuns() {     return forOperation(Operation.ConcurrentSyncReportRuns.name()). }
true;public;0;3;/**  * Daily API calls  */ ;/**  * Daily API calls  */ public Usage getDailyApiRequests() {     return forOperation(Operation.DailyApiRequests.name()). }
true;public;0;3;/**  * Daily Batch Apex and future method executions  */ ;/**  * Daily Batch Apex and future method executions  */ public Usage getDailyAsyncApexExecutions() {     return forOperation(Operation.DailyAsyncApexExecutions.name()). }
true;public;0;3;/**  * Daily Bulk API calls  */ ;/**  * Daily Bulk API calls  */ public Usage getDailyBulkApiRequests() {     return forOperation(Operation.DailyBulkApiRequests.name()). }
true;public;0;3;/**  * Daily durable generic streaming events (if generic streaming is enabled for your organization)  */ ;/**  * Daily durable generic streaming events (if generic streaming is enabled for your organization)  */ public Usage getDailyDurableGenericStreamingApiEvents() {     return forOperation(Operation.DailyDurableGenericStreamingApiEvents.name()). }
true;public;0;3;/**  * Daily durable streaming events (if generic streaming is enabled for your organization)  */ ;/**  * Daily durable streaming events (if generic streaming is enabled for your organization)  */ public Usage getDailyDurableStreamingApiEvents() {     return forOperation(Operation.DailyDurableStreamingApiEvents.name()). }
true;public;0;3;/**  * Daily generic streaming events (if generic streaming is enabled for your organization)  */ ;/**  * Daily generic streaming events (if generic streaming is enabled for your organization)  */ public Usage getDailyGenericStreamingApiEvents() {     return forOperation(Operation.DailyGenericStreamingApiEvents.name()). }
true;public;0;3;/**  * Daily Streaming API events  */ ;/**  * Daily Streaming API events  */ public Usage getDailyStreamingApiEvents() {     return forOperation(Operation.DailyStreamingApiEvents.name()). }
true;public;0;3;/**  * Daily workflow emails  */ ;/**  * Daily workflow emails  */ public Usage getDailyWorkflowEmails() {     return forOperation(Operation.DailyWorkflowEmails.name()). }
true;public;0;3;/**  * Data storage (MB)  */ ;/**  * Data storage (MB)  */ public Usage getDataStorageMB() {     return forOperation(Operation.DataStorageMB.name()). }
true;public;0;3;/**  * Streaming API concurrent clients  */ ;/**  * Streaming API concurrent clients  */ public Usage getDurableStreamingApiConcurrentClients() {     return forOperation(Operation.DurableStreamingApiConcurrentClients.name()). }
true;public;0;3;/**  * File storage (MB)  */ ;/**  * File storage (MB)  */ public Usage getFileStorageMB() {     return forOperation(Operation.FileStorageMB.name()). }
true;public;0;3;/**  * Hourly asynchronous report runs via REST API  */ ;/**  * Hourly asynchronous report runs via REST API  */ public Usage getHourlyAsyncReportRuns() {     return forOperation(Operation.HourlyAsyncReportRuns.name()). }
true;public;0;3;/**  * Hourly dashboard refreshes via REST API  */ ;/**  * Hourly dashboard refreshes via REST API  */ public Usage getHourlyDashboardRefreshes() {     return forOperation(Operation.HourlyDashboardRefreshes.name()). }
true;public;0;3;/**  * Hourly REST API requests for dashboard results  */ ;/**  * Hourly REST API requests for dashboard results  */ public Usage getHourlyDashboardResults() {     return forOperation(Operation.HourlyDashboardResults.name()). }
true;public;0;3;/**  * Hourly dashboard status requests via REST API  */ ;/**  * Hourly dashboard status requests via REST API  */ public Usage getHourlyDashboardStatuses() {     return forOperation(Operation.HourlyDashboardStatuses.name()). }
true;public;0;3;/**  * Hourly OData callouts  */ ;/**  * Hourly OData callouts  */ public Usage getHourlyODataCallout() {     return forOperation(Operation.HourlyODataCallout.name()). }
true;public;0;3;/**  * Hourly synchronous report runs via REST API  */ ;/**  * Hourly synchronous report runs via REST API  */ public Usage getHourlySyncReportRuns() {     return forOperation(Operation.HourlySyncReportRuns.name()). }
true;public;0;3;/**  * Hourly workflow time triggers  */ ;/**  * Hourly workflow time triggers  */ public Usage getHourlyTimeBasedWorkflow() {     return forOperation(Operation.HourlyTimeBasedWorkflow.name()). }
true;public;0;3;/**  * Daily number of mass emails that are sent to external email addresses by using Apex or Force.com APIs  */ ;/**  * Daily number of mass emails that are sent to external email addresses by using Apex or Force.com APIs  */ public Usage getMassEmail() {     return forOperation(Operation.MassEmail.name()). }
true;public;0;3;/**  * Usage of permission sets.  */ ;/**  * Usage of permission sets.  */ public Usage getPermissionSets() {     return forOperation(Operation.PermissionSets.name()). }
true;public;0;3;/**  * Daily number of single emails that are sent to external email addresses by using Apex or Force.com APIs  */ ;/**  * Daily number of single emails that are sent to external email addresses by using Apex or Force.com APIs  */ public Usage getSingleEmail() {     return forOperation(Operation.SingleEmail.name()). }
true;public;0;3;/**  * Durable streaming API concurrent clients  */ ;/**  * Durable streaming API concurrent clients  */ public Usage getStreamingApiConcurrentClients() {     return forOperation(Operation.StreamingApiConcurrentClients.name()). }
true;public;0;5;/**  * {@inheritDoc}  */ ;/**  * {@inheritDoc}  */ @Override public String toString() {     return "Limits: " + usages.entrySet().stream().map(e -> e.getKey() + ": " + e.getValue()).collect(Collectors.joining(", ")). }
