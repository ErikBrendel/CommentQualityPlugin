commented;modifiers;parameterAmount;loc;comment;code
false;;2;1;;RestClient restClientWith(CamelContext camelContext, Map<String, Object> parameters) throws Exception.
false;;1;1;;T invoke(RestClient client).
false;static;3;7;;static <T> T invoke(final CamelContext camelContext, final Map<String, Object> parameters, final WithClient<T> performer) throws Exception {     final RestClient client = restClientSupplier.restClientWith(camelContext, parameters).     return invokeInternal(client, performer). }
false;static;3;7;;static <T> T invoke(final SalesforceComponent component, final Map<String, Object> parameters, final WithClient<T> performer) throws Exception {     final RestClient client = component.createRestClient(parameters).     return invokeInternal(client, performer). }
false;private,static;2;22;;private static <T> T invokeInternal(final RestClient client, final WithClient<T> performer) throws Exception {     // we'll handle HTTP client lifecycle so we'll start here and stop at     // the end. we won't handle SalesforceSession lifecycle as stoping a     // SalesforceSession that we borrowed from a configured     // SalesforceComponent could mean logging out any running endpoints also     final boolean isHttpClientHolder = client instanceof HttpClientHolder.     if (isHttpClientHolder) {         ((HttpClientHolder) client).getHttpClient().start().     }     ServiceHelper.startService(client).     try {         return performer.invoke(client).     } finally {         ServiceHelper.stopService(client).         if (isHttpClientHolder) {             ((HttpClientHolder) client).getHttpClient().stop().         }     } }
