commented;modifiers;parameterAmount;loc;comment;code
false;public;0;82;;public void createOrUpdateTopic() throws CamelException {     final String query = config.getSObjectQuery().     final SyncResponseCallback callback = new SyncResponseCallback().     // lookup Topic first     try {         // use SOQL to lookup Topic, since Name is not an external ID!!!         restClient.query("SELECT Id, Name, Query, ApiVersion, IsActive, " + "NotifyForFields, NotifyForOperations, NotifyForOperationCreate, " + "NotifyForOperationDelete, NotifyForOperationUndelete, " + "NotifyForOperationUpdate, Description " + "FROM PushTopic WHERE Name = '" + topicName + "'", Collections.emptyMap(), callback).         if (!callback.await(API_TIMEOUT, TimeUnit.SECONDS)) {             throw new SalesforceException("API call timeout!", null).         }         final SalesforceException callbackException = callback.getException().         if (callbackException != null) {             throw callbackException.         }         QueryRecordsPushTopic records = OBJECT_MAPPER.readValue(callback.getResponse(), QueryRecordsPushTopic.class).         if (records.getTotalSize() == 1) {             PushTopic topic = records.getRecords().get(0).             LOG.info("Found existing topic {}: {}", topicName, topic).             // check if we need to update topic             final boolean notifyOperationsChanged.             if (preApi29) {                 notifyOperationsChanged = notEquals(config.getNotifyForOperations(), topic.getNotifyForOperations()).             } else {                 notifyOperationsChanged = notEquals(config.getNotifyForOperationCreate(), topic.getNotifyForOperationCreate()) || notEquals(config.getNotifyForOperationDelete(), topic.getNotifyForOperationDelete()) || notEquals(config.getNotifyForOperationUndelete(), topic.getNotifyForOperationUndelete()) || notEquals(config.getNotifyForOperationUpdate(), topic.getNotifyForOperationUpdate()).             }             if (!query.equals(topic.getQuery()) || notEquals(config.getNotifyForFields(), topic.getNotifyForFields()) || notifyOperationsChanged) {                 if (!config.isUpdateTopic()) {                     String msg = "Query doesn't match existing Topic and updateTopic is set to false".                     throw new CamelException(msg).                 }                 // otherwise update the topic                 updateTopic(topic.getId()).             }         } else {             createTopic().         }     } catch (SalesforceException e) {         throw new CamelException(String.format("Error retrieving Topic %s: %s", topicName, e.getMessage()), e).     } catch (IOException e) {         throw new CamelException(String.format("Un-marshaling error retrieving Topic %s: %s", topicName, e.getMessage()), e).     } catch (InterruptedException e) {         Thread.currentThread().interrupt().         throw new CamelException(String.format("Un-marshaling error retrieving Topic %s: %s", topicName, e.getMessage()), e).     } finally {         // close stream to close HttpConnection         if (callback.getResponse() != null) {             try {                 callback.getResponse().close().             } catch (IOException e) {             // ignore             }         }     } }
false;private;0;60;;private void createTopic() throws CamelException {     final PushTopic topic = new PushTopic().     topic.setName(topicName).     topic.setApiVersion(Double.valueOf(config.getApiVersion())).     topic.setQuery(config.getSObjectQuery()).     topic.setDescription("Topic created by Camel Salesforce component").     topic.setNotifyForFields(config.getNotifyForFields()).     if (preApi29) {         topic.setNotifyForOperations(config.getNotifyForOperations()).     } else {         topic.setNotifyForOperationCreate(config.getNotifyForOperationCreate()).         topic.setNotifyForOperationDelete(config.getNotifyForOperationDelete()).         topic.setNotifyForOperationUndelete(config.getNotifyForOperationUndelete()).         topic.setNotifyForOperationUpdate(config.getNotifyForOperationUpdate()).     }     LOG.info("Creating Topic {}: {}", topicName, topic).     final SyncResponseCallback callback = new SyncResponseCallback().     try {         restClient.createSObject(PUSH_TOPIC_OBJECT_NAME, new ByteArrayInputStream(OBJECT_MAPPER.writeValueAsBytes(topic)), Collections.emptyMap(), callback).         if (!callback.await(API_TIMEOUT, TimeUnit.SECONDS)) {             throw new SalesforceException("API call timeout!", null).         }         final SalesforceException callbackException = callback.getException().         if (callbackException != null) {             throw callbackException.         }         CreateSObjectResult result = OBJECT_MAPPER.readValue(callback.getResponse(), CreateSObjectResult.class).         if (!result.getSuccess()) {             final SalesforceException salesforceException = new SalesforceException(result.getErrors(), HttpStatus.BAD_REQUEST_400).             throw new CamelException(String.format("Error creating Topic %s: %s", topicName, result.getErrors()), salesforceException).         }     } catch (SalesforceException e) {         throw new CamelException(String.format("Error creating Topic %s: %s", topicName, e.getMessage()), e).     } catch (IOException e) {         throw new CamelException(String.format("Un-marshaling error creating Topic %s: %s", topicName, e.getMessage()), e).     } catch (InterruptedException e) {         throw new CamelException(String.format("Un-marshaling error creating Topic %s: %s", topicName, e.getMessage()), e).     } finally {         if (callback.getResponse() != null) {             try {                 callback.getResponse().close().             } catch (IOException e) {             // ignore             }         }     } }
false;private;1;55;;private void updateTopic(String topicId) throws CamelException {     final String query = config.getSObjectQuery().     LOG.info("Updating Topic {} with Query [{}]", topicName, query).     final SyncResponseCallback callback = new SyncResponseCallback().     try {         // update the query, notifyForFields and notifyForOperations fields         final PushTopic topic = new PushTopic().         topic.setQuery(query).         topic.setNotifyForFields(config.getNotifyForFields()).         if (preApi29) {             topic.setNotifyForOperations(config.getNotifyForOperations()).         } else {             topic.setNotifyForOperationCreate(config.getNotifyForOperationCreate()).             topic.setNotifyForOperationDelete(config.getNotifyForOperationDelete()).             topic.setNotifyForOperationUndelete(config.getNotifyForOperationUndelete()).             topic.setNotifyForOperationUpdate(config.getNotifyForOperationUpdate()).         }         restClient.updateSObject("PushTopic", topicId, new ByteArrayInputStream(OBJECT_MAPPER.writeValueAsBytes(topic)), Collections.emptyMap(), callback).         if (!callback.await(API_TIMEOUT, TimeUnit.SECONDS)) {             throw new SalesforceException("API call timeout!", null).         }         final SalesforceException callbackException = callback.getException().         if (callbackException != null) {             throw callbackException.         }     } catch (SalesforceException e) {         throw new CamelException(String.format("Error updating topic %s with query [%s] : %s", topicName, query, e.getMessage()), e).     } catch (InterruptedException e) {         // reset interrupt status         Thread.currentThread().interrupt().         throw new CamelException(String.format("Error updating topic %s with query [%s] : %s", topicName, query, e.getMessage()), e).     } catch (IOException e) {         throw new CamelException(String.format("Error updating topic %s with query [%s] : %s", topicName, query, e.getMessage()), e).     } finally {         if (callback.getResponse() != null) {             try {                 callback.getResponse().close().             } catch (IOException ignore) {             }         }     } }
false;private,static;2;3;;private static <T> boolean notEquals(T o1, T o2) {     return o1 != null && !o1.equals(o2). }
