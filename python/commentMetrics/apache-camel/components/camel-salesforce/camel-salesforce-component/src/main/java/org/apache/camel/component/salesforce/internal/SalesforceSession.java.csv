# id;timestamp;commentText;codeText;commentWords;codeWords
SalesforceSession -> public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent) throws SalesforceException;1461898025;Parses login response, allows SalesforceSecurityHandler to parse a login request for a failed authentication conversation._@param loginResponse_@param responseContent_@throws SalesforceException;public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent) throws SalesforceException {_        final int responseStatus = loginResponse.getStatus()___        try {_            switch (responseStatus) {_            case HttpStatus.OK_200:_                _                LoginToken token = objectMapper.readValue(responseContent, LoginToken.class)___                _                LOG.info("Login successful")__                accessToken = token.getAccessToken()__                instanceUrl = token.getInstanceUrl()___                _                for (SalesforceSessionListener listener : listeners) {_                    try {_                        listener.onLogin(accessToken, instanceUrl)__                    } catch (Throwable t) {_                        LOG.warn("Unexpected error from listener {}: {}", listener, t.getMessage())__                    }_                }__                break___            case HttpStatus.BAD_REQUEST_400:_                _                final LoginError error = objectMapper.readValue(responseContent, LoginError.class)__                final String msg = String.format("Login error code:[%s] description:[%s]",_                    error.getError(), error.getErrorDescription())__                final List<RestError> errors = new ArrayList<RestError>()__                errors.add(new RestError(msg, error.getErrorDescription()))__                throw new SalesforceException(errors, HttpStatus.BAD_REQUEST_400)___            default:_                throw new SalesforceException(String.format("Login error status:[%s] reason:[%s]",_                    responseStatus, loginResponse.getReason()), responseStatus)__            }_        } catch (IOException e) {_            String msg = "Login error: response parse exception " + e.getMessage()__            throw new SalesforceException(msg, e)__        }_    };parses,login,response,allows,salesforce,security,handler,to,parse,a,login,request,for,a,failed,authentication,conversation,param,login,response,param,response,content,throws,salesforce,exception;public,synchronized,void,parse,login,response,content,response,login,response,string,response,content,throws,salesforce,exception,final,int,response,status,login,response,get,status,try,switch,response,status,case,http,status,login,token,token,object,mapper,read,value,response,content,login,token,class,log,info,login,successful,access,token,token,get,access,token,instance,url,token,get,instance,url,for,salesforce,session,listener,listener,listeners,try,listener,on,login,access,token,instance,url,catch,throwable,t,log,warn,unexpected,error,from,listener,listener,t,get,message,break,case,http,status,final,login,error,error,object,mapper,read,value,response,content,login,error,class,final,string,msg,string,format,login,error,code,s,description,s,error,get,error,error,get,error,description,final,list,rest,error,errors,new,array,list,rest,error,errors,add,new,rest,error,msg,error,get,error,description,throw,new,salesforce,exception,errors,http,status,default,throw,new,salesforce,exception,string,format,login,error,status,s,reason,s,response,status,login,response,get,reason,response,status,catch,ioexception,e,string,msg,login,error,response,parse,exception,e,get,message,throw,new,salesforce,exception,msg,e
SalesforceSession -> public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent) throws SalesforceException;1466056544;Parses login response, allows SalesforceSecurityHandler to parse a login request for a failed authentication conversation._@param loginResponse_@param responseContent_@throws SalesforceException;public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent) throws SalesforceException {_        final int responseStatus = loginResponse.getStatus()___        try {_            switch (responseStatus) {_            case HttpStatus.OK_200:_                _                LoginToken token = objectMapper.readValue(responseContent, LoginToken.class)___                _                LOG.info("Login successful")__                accessToken = token.getAccessToken()__                instanceUrl = token.getInstanceUrl()___                _                for (SalesforceSessionListener listener : listeners) {_                    try {_                        listener.onLogin(accessToken, instanceUrl)__                    } catch (Throwable t) {_                        LOG.warn("Unexpected error from listener {}: {}", listener, t.getMessage())__                    }_                }__                break___            case HttpStatus.BAD_REQUEST_400:_                _                final LoginError error = objectMapper.readValue(responseContent, LoginError.class)__                final String msg = String.format("Login error code:[%s] description:[%s]",_                    error.getError(), error.getErrorDescription())__                final List<RestError> errors = new ArrayList<RestError>()__                errors.add(new RestError(msg, error.getErrorDescription()))__                throw new SalesforceException(errors, HttpStatus.BAD_REQUEST_400)___            default:_                throw new SalesforceException(String.format("Login error status:[%s] reason:[%s]",_                    responseStatus, loginResponse.getReason()), responseStatus)__            }_        } catch (IOException e) {_            String msg = "Login error: response parse exception " + e.getMessage()__            throw new SalesforceException(msg, e)__        }_    };parses,login,response,allows,salesforce,security,handler,to,parse,a,login,request,for,a,failed,authentication,conversation,param,login,response,param,response,content,throws,salesforce,exception;public,synchronized,void,parse,login,response,content,response,login,response,string,response,content,throws,salesforce,exception,final,int,response,status,login,response,get,status,try,switch,response,status,case,http,status,login,token,token,object,mapper,read,value,response,content,login,token,class,log,info,login,successful,access,token,token,get,access,token,instance,url,token,get,instance,url,for,salesforce,session,listener,listener,listeners,try,listener,on,login,access,token,instance,url,catch,throwable,t,log,warn,unexpected,error,from,listener,listener,t,get,message,break,case,http,status,final,login,error,error,object,mapper,read,value,response,content,login,error,class,final,string,msg,string,format,login,error,code,s,description,s,error,get,error,error,get,error,description,final,list,rest,error,errors,new,array,list,rest,error,errors,add,new,rest,error,msg,error,get,error,description,throw,new,salesforce,exception,errors,http,status,default,throw,new,salesforce,exception,string,format,login,error,status,s,reason,s,response,status,login,response,get,reason,response,status,catch,ioexception,e,string,msg,login,error,response,parse,exception,e,get,message,throw,new,salesforce,exception,msg,e
SalesforceSession -> public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent) throws SalesforceException;1466056544;Parses login response, allows SalesforceSecurityHandler to parse a login request for a failed authentication conversation._@param loginResponse_@param responseContent_@throws SalesforceException;public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent) throws SalesforceException {_        final int responseStatus = loginResponse.getStatus()___        try {_            switch (responseStatus) {_            case HttpStatus.OK_200:_                _                LoginToken token = objectMapper.readValue(responseContent, LoginToken.class)___                _                LOG.info("Login successful")__                accessToken = token.getAccessToken()__                instanceUrl = token.getInstanceUrl()___                _                for (SalesforceSessionListener listener : listeners) {_                    try {_                        listener.onLogin(accessToken, instanceUrl)__                    } catch (Throwable t) {_                        LOG.warn("Unexpected error from listener {}: {}", listener, t.getMessage())__                    }_                }__                break___            case HttpStatus.BAD_REQUEST_400:_                _                final LoginError error = objectMapper.readValue(responseContent, LoginError.class)__                final String msg = String.format("Login error code:[%s] description:[%s]",_                    error.getError(), error.getErrorDescription())__                final List<RestError> errors = new ArrayList<RestError>()__                errors.add(new RestError(msg, error.getErrorDescription()))__                throw new SalesforceException(errors, HttpStatus.BAD_REQUEST_400)___            default:_                throw new SalesforceException(String.format("Login error status:[%s] reason:[%s]",_                    responseStatus, loginResponse.getReason()), responseStatus)__            }_        } catch (IOException e) {_            String msg = "Login error: response parse exception " + e.getMessage()__            throw new SalesforceException(msg, e)__        }_    };parses,login,response,allows,salesforce,security,handler,to,parse,a,login,request,for,a,failed,authentication,conversation,param,login,response,param,response,content,throws,salesforce,exception;public,synchronized,void,parse,login,response,content,response,login,response,string,response,content,throws,salesforce,exception,final,int,response,status,login,response,get,status,try,switch,response,status,case,http,status,login,token,token,object,mapper,read,value,response,content,login,token,class,log,info,login,successful,access,token,token,get,access,token,instance,url,token,get,instance,url,for,salesforce,session,listener,listener,listeners,try,listener,on,login,access,token,instance,url,catch,throwable,t,log,warn,unexpected,error,from,listener,listener,t,get,message,break,case,http,status,final,login,error,error,object,mapper,read,value,response,content,login,error,class,final,string,msg,string,format,login,error,code,s,description,s,error,get,error,error,get,error,description,final,list,rest,error,errors,new,array,list,rest,error,errors,add,new,rest,error,msg,error,get,error,description,throw,new,salesforce,exception,errors,http,status,default,throw,new,salesforce,exception,string,format,login,error,status,s,reason,s,response,status,login,response,get,reason,response,status,catch,ioexception,e,string,msg,login,error,response,parse,exception,e,get,message,throw,new,salesforce,exception,msg,e
SalesforceSession -> public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent) throws SalesforceException;1468476697;Parses login response, allows SalesforceSecurityHandler to parse a login request for a failed authentication conversation._@param loginResponse_@param responseContent_@throws SalesforceException;public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent) throws SalesforceException {_        final int responseStatus = loginResponse.getStatus()___        try {_            switch (responseStatus) {_            case HttpStatus.OK_200:_                _                LoginToken token = objectMapper.readValue(responseContent, LoginToken.class)___                _                LOG.info("Login successful")__                accessToken = token.getAccessToken()__                instanceUrl = token.getInstanceUrl()___                _                for (SalesforceSessionListener listener : listeners) {_                    try {_                        listener.onLogin(accessToken, instanceUrl)__                    } catch (Throwable t) {_                        LOG.warn("Unexpected error from listener {}: {}", listener, t.getMessage())__                    }_                }__                break___            case HttpStatus.BAD_REQUEST_400:_                _                final LoginError error = objectMapper.readValue(responseContent, LoginError.class)__                final String msg = String.format("Login error code:[%s] description:[%s]",_                    error.getError(), error.getErrorDescription())__                final List<RestError> errors = new ArrayList<RestError>()__                errors.add(new RestError(msg, error.getErrorDescription()))__                throw new SalesforceException(errors, HttpStatus.BAD_REQUEST_400)___            default:_                throw new SalesforceException(String.format("Login error status:[%s] reason:[%s]",_                    responseStatus, loginResponse.getReason()), responseStatus)__            }_        } catch (IOException e) {_            String msg = "Login error: response parse exception " + e.getMessage()__            throw new SalesforceException(msg, e)__        }_    };parses,login,response,allows,salesforce,security,handler,to,parse,a,login,request,for,a,failed,authentication,conversation,param,login,response,param,response,content,throws,salesforce,exception;public,synchronized,void,parse,login,response,content,response,login,response,string,response,content,throws,salesforce,exception,final,int,response,status,login,response,get,status,try,switch,response,status,case,http,status,login,token,token,object,mapper,read,value,response,content,login,token,class,log,info,login,successful,access,token,token,get,access,token,instance,url,token,get,instance,url,for,salesforce,session,listener,listener,listeners,try,listener,on,login,access,token,instance,url,catch,throwable,t,log,warn,unexpected,error,from,listener,listener,t,get,message,break,case,http,status,final,login,error,error,object,mapper,read,value,response,content,login,error,class,final,string,msg,string,format,login,error,code,s,description,s,error,get,error,error,get,error,description,final,list,rest,error,errors,new,array,list,rest,error,errors,add,new,rest,error,msg,error,get,error,description,throw,new,salesforce,exception,errors,http,status,default,throw,new,salesforce,exception,string,format,login,error,status,s,reason,s,response,status,login,response,get,reason,response,status,catch,ioexception,e,string,msg,login,error,response,parse,exception,e,get,message,throw,new,salesforce,exception,msg,e
SalesforceSession -> public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent) throws SalesforceException;1469576360;Parses login response, allows SalesforceSecurityHandler to parse a login request for a failed authentication conversation._@param loginResponse_@param responseContent_@throws SalesforceException;public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent) throws SalesforceException {_        final int responseStatus = loginResponse.getStatus()___        try {_            switch (responseStatus) {_            case HttpStatus.OK_200:_                _                LoginToken token = objectMapper.readValue(responseContent, LoginToken.class)___                _                LOG.info("Login successful")__                accessToken = token.getAccessToken()__                instanceUrl = token.getInstanceUrl()___                _                for (SalesforceSessionListener listener : listeners) {_                    try {_                        listener.onLogin(accessToken, instanceUrl)__                    } catch (Throwable t) {_                        LOG.warn("Unexpected error from listener {}: {}", listener, t.getMessage())__                    }_                }__                break___            case HttpStatus.BAD_REQUEST_400:_                _                final LoginError error = objectMapper.readValue(responseContent, LoginError.class)__                final String msg = String.format("Login error code:[%s] description:[%s]",_                    error.getError(), error.getErrorDescription())__                final List<RestError> errors = new ArrayList<RestError>()__                errors.add(new RestError(msg, error.getErrorDescription()))__                throw new SalesforceException(errors, HttpStatus.BAD_REQUEST_400)___            default:_                throw new SalesforceException(String.format("Login error status:[%s] reason:[%s]",_                    responseStatus, loginResponse.getReason()), responseStatus)__            }_        } catch (IOException e) {_            String msg = "Login error: response parse exception " + e.getMessage()__            throw new SalesforceException(msg, e)__        }_    };parses,login,response,allows,salesforce,security,handler,to,parse,a,login,request,for,a,failed,authentication,conversation,param,login,response,param,response,content,throws,salesforce,exception;public,synchronized,void,parse,login,response,content,response,login,response,string,response,content,throws,salesforce,exception,final,int,response,status,login,response,get,status,try,switch,response,status,case,http,status,login,token,token,object,mapper,read,value,response,content,login,token,class,log,info,login,successful,access,token,token,get,access,token,instance,url,token,get,instance,url,for,salesforce,session,listener,listener,listeners,try,listener,on,login,access,token,instance,url,catch,throwable,t,log,warn,unexpected,error,from,listener,listener,t,get,message,break,case,http,status,final,login,error,error,object,mapper,read,value,response,content,login,error,class,final,string,msg,string,format,login,error,code,s,description,s,error,get,error,error,get,error,description,final,list,rest,error,errors,new,array,list,rest,error,errors,add,new,rest,error,msg,error,get,error,description,throw,new,salesforce,exception,errors,http,status,default,throw,new,salesforce,exception,string,format,login,error,status,s,reason,s,response,status,login,response,get,reason,response,status,catch,ioexception,e,string,msg,login,error,response,parse,exception,e,get,message,throw,new,salesforce,exception,msg,e
SalesforceSession -> public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent) throws SalesforceException;1479916286;Parses login response, allows SalesforceSecurityHandler to parse a login request for a failed authentication conversation._@param loginResponse_@param responseContent_@throws SalesforceException;public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent) throws SalesforceException {_        final int responseStatus = loginResponse.getStatus()___        try {_            switch (responseStatus) {_            case HttpStatus.OK_200:_                _                LoginToken token = objectMapper.readValue(responseContent, LoginToken.class)___                _                LOG.info("Login successful")__                accessToken = token.getAccessToken()__                instanceUrl = token.getInstanceUrl()___                _                for (SalesforceSessionListener listener : listeners) {_                    try {_                        listener.onLogin(accessToken, instanceUrl)__                    } catch (Throwable t) {_                        LOG.warn("Unexpected error from listener {}: {}", listener, t.getMessage())__                    }_                }__                break___            case HttpStatus.BAD_REQUEST_400:_                _                final LoginError error = objectMapper.readValue(responseContent, LoginError.class)__                final String msg = String.format("Login error code:[%s] description:[%s]",_                    error.getError(), error.getErrorDescription())__                final List<RestError> errors = new ArrayList<RestError>()__                errors.add(new RestError(msg, error.getErrorDescription()))__                throw new SalesforceException(errors, HttpStatus.BAD_REQUEST_400)___            default:_                throw new SalesforceException(String.format("Login error status:[%s] reason:[%s]",_                    responseStatus, loginResponse.getReason()), responseStatus)__            }_        } catch (IOException e) {_            String msg = "Login error: response parse exception " + e.getMessage()__            throw new SalesforceException(msg, e)__        }_    };parses,login,response,allows,salesforce,security,handler,to,parse,a,login,request,for,a,failed,authentication,conversation,param,login,response,param,response,content,throws,salesforce,exception;public,synchronized,void,parse,login,response,content,response,login,response,string,response,content,throws,salesforce,exception,final,int,response,status,login,response,get,status,try,switch,response,status,case,http,status,login,token,token,object,mapper,read,value,response,content,login,token,class,log,info,login,successful,access,token,token,get,access,token,instance,url,token,get,instance,url,for,salesforce,session,listener,listener,listeners,try,listener,on,login,access,token,instance,url,catch,throwable,t,log,warn,unexpected,error,from,listener,listener,t,get,message,break,case,http,status,final,login,error,error,object,mapper,read,value,response,content,login,error,class,final,string,msg,string,format,login,error,code,s,description,s,error,get,error,error,get,error,description,final,list,rest,error,errors,new,array,list,rest,error,errors,add,new,rest,error,msg,error,get,error,description,throw,new,salesforce,exception,errors,http,status,default,throw,new,salesforce,exception,string,format,login,error,status,s,reason,s,response,status,login,response,get,reason,response,status,catch,ioexception,e,string,msg,login,error,response,parse,exception,e,get,message,throw,new,salesforce,exception,msg,e
SalesforceSession -> public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent) throws SalesforceException;1486488499;Parses login response, allows SalesforceSecurityHandler to parse a login request for a failed authentication conversation._@param loginResponse_@param responseContent_@throws SalesforceException;public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent) throws SalesforceException {_        final int responseStatus = loginResponse.getStatus()___        try {_            switch (responseStatus) {_            case HttpStatus.OK_200:_                _                LoginToken token = objectMapper.readValue(responseContent, LoginToken.class)___                _                LOG.info("Login successful")__                accessToken = token.getAccessToken()__                instanceUrl = token.getInstanceUrl()___                _                for (SalesforceSessionListener listener : listeners) {_                    try {_                        listener.onLogin(accessToken, instanceUrl)__                    } catch (Throwable t) {_                        LOG.warn("Unexpected error from listener {}: {}", listener, t.getMessage())__                    }_                }__                break___            case HttpStatus.BAD_REQUEST_400:_                _                final LoginError error = objectMapper.readValue(responseContent, LoginError.class)__                final String msg = String.format("Login error code:[%s] description:[%s]",_                    error.getError(), error.getErrorDescription())__                final List<RestError> errors = new ArrayList<RestError>()__                errors.add(new RestError(msg, error.getErrorDescription()))__                throw new SalesforceException(errors, HttpStatus.BAD_REQUEST_400)___            default:_                throw new SalesforceException(String.format("Login error status:[%s] reason:[%s]",_                    responseStatus, loginResponse.getReason()), responseStatus)__            }_        } catch (IOException e) {_            String msg = "Login error: response parse exception " + e.getMessage()__            throw new SalesforceException(msg, e)__        }_    };parses,login,response,allows,salesforce,security,handler,to,parse,a,login,request,for,a,failed,authentication,conversation,param,login,response,param,response,content,throws,salesforce,exception;public,synchronized,void,parse,login,response,content,response,login,response,string,response,content,throws,salesforce,exception,final,int,response,status,login,response,get,status,try,switch,response,status,case,http,status,login,token,token,object,mapper,read,value,response,content,login,token,class,log,info,login,successful,access,token,token,get,access,token,instance,url,token,get,instance,url,for,salesforce,session,listener,listener,listeners,try,listener,on,login,access,token,instance,url,catch,throwable,t,log,warn,unexpected,error,from,listener,listener,t,get,message,break,case,http,status,final,login,error,error,object,mapper,read,value,response,content,login,error,class,final,string,msg,string,format,login,error,code,s,description,s,error,get,error,error,get,error,description,final,list,rest,error,errors,new,array,list,rest,error,errors,add,new,rest,error,msg,error,get,error,description,throw,new,salesforce,exception,errors,http,status,default,throw,new,salesforce,exception,string,format,login,error,status,s,reason,s,response,status,login,response,get,reason,response,status,catch,ioexception,e,string,msg,login,error,response,parse,exception,e,get,message,throw,new,salesforce,exception,msg,e
SalesforceSession -> public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent) throws SalesforceException;1486488499;Parses login response, allows SalesforceSecurityHandler to parse a login request for a failed authentication conversation._@param loginResponse_@param responseContent_@throws SalesforceException;public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent) throws SalesforceException {_        final int responseStatus = loginResponse.getStatus()___        try {_            switch (responseStatus) {_            case HttpStatus.OK_200:_                _                LoginToken token = objectMapper.readValue(responseContent, LoginToken.class)___                _                LOG.info("Login successful")__                accessToken = token.getAccessToken()__                instanceUrl = token.getInstanceUrl()___                _                for (SalesforceSessionListener listener : listeners) {_                    try {_                        listener.onLogin(accessToken, instanceUrl)__                    } catch (Throwable t) {_                        LOG.warn("Unexpected error from listener {}: {}", listener, t.getMessage())__                    }_                }__                break___            case HttpStatus.BAD_REQUEST_400:_                _                final LoginError error = objectMapper.readValue(responseContent, LoginError.class)__                final String msg = String.format("Login error code:[%s] description:[%s]",_                    error.getError(), error.getErrorDescription())__                final List<RestError> errors = new ArrayList<RestError>()__                errors.add(new RestError(msg, error.getErrorDescription()))__                throw new SalesforceException(errors, HttpStatus.BAD_REQUEST_400)___            default:_                throw new SalesforceException(String.format("Login error status:[%s] reason:[%s]",_                    responseStatus, loginResponse.getReason()), responseStatus)__            }_        } catch (IOException e) {_            String msg = "Login error: response parse exception " + e.getMessage()__            throw new SalesforceException(msg, e)__        }_    };parses,login,response,allows,salesforce,security,handler,to,parse,a,login,request,for,a,failed,authentication,conversation,param,login,response,param,response,content,throws,salesforce,exception;public,synchronized,void,parse,login,response,content,response,login,response,string,response,content,throws,salesforce,exception,final,int,response,status,login,response,get,status,try,switch,response,status,case,http,status,login,token,token,object,mapper,read,value,response,content,login,token,class,log,info,login,successful,access,token,token,get,access,token,instance,url,token,get,instance,url,for,salesforce,session,listener,listener,listeners,try,listener,on,login,access,token,instance,url,catch,throwable,t,log,warn,unexpected,error,from,listener,listener,t,get,message,break,case,http,status,final,login,error,error,object,mapper,read,value,response,content,login,error,class,final,string,msg,string,format,login,error,code,s,description,s,error,get,error,error,get,error,description,final,list,rest,error,errors,new,array,list,rest,error,errors,add,new,rest,error,msg,error,get,error,description,throw,new,salesforce,exception,errors,http,status,default,throw,new,salesforce,exception,string,format,login,error,status,s,reason,s,response,status,login,response,get,reason,response,status,catch,ioexception,e,string,msg,login,error,response,parse,exception,e,get,message,throw,new,salesforce,exception,msg,e
SalesforceSession -> public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent) throws SalesforceException;1487190316;Parses login response, allows SalesforceSecurityHandler to parse a login request for a failed authentication conversation.;public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent) throws SalesforceException {_        final int responseStatus = loginResponse.getStatus()___        try {_            switch (responseStatus) {_            case HttpStatus.OK_200:_                _                LoginToken token = objectMapper.readValue(responseContent, LoginToken.class)___                _                LOG.info("Login successful")__                accessToken = token.getAccessToken()__                instanceUrl = token.getInstanceUrl()___                _                for (SalesforceSessionListener listener : listeners) {_                    try {_                        listener.onLogin(accessToken, instanceUrl)__                    } catch (Throwable t) {_                        LOG.warn("Unexpected error from listener {}: {}", listener, t.getMessage())__                    }_                }__                break___            case HttpStatus.BAD_REQUEST_400:_                _                final LoginError error = objectMapper.readValue(responseContent, LoginError.class)__                final String msg = String.format("Login error code:[%s] description:[%s]",_                    error.getError(), error.getErrorDescription())__                final List<RestError> errors = new ArrayList<RestError>()__                errors.add(new RestError(msg, error.getErrorDescription()))__                throw new SalesforceException(errors, HttpStatus.BAD_REQUEST_400)___            default:_                throw new SalesforceException(String.format("Login error status:[%s] reason:[%s]",_                    responseStatus, loginResponse.getReason()), responseStatus)__            }_        } catch (IOException e) {_            String msg = "Login error: response parse exception " + e.getMessage()__            throw new SalesforceException(msg, e)__        }_    };parses,login,response,allows,salesforce,security,handler,to,parse,a,login,request,for,a,failed,authentication,conversation;public,synchronized,void,parse,login,response,content,response,login,response,string,response,content,throws,salesforce,exception,final,int,response,status,login,response,get,status,try,switch,response,status,case,http,status,login,token,token,object,mapper,read,value,response,content,login,token,class,log,info,login,successful,access,token,token,get,access,token,instance,url,token,get,instance,url,for,salesforce,session,listener,listener,listeners,try,listener,on,login,access,token,instance,url,catch,throwable,t,log,warn,unexpected,error,from,listener,listener,t,get,message,break,case,http,status,final,login,error,error,object,mapper,read,value,response,content,login,error,class,final,string,msg,string,format,login,error,code,s,description,s,error,get,error,error,get,error,description,final,list,rest,error,errors,new,array,list,rest,error,errors,add,new,rest,error,msg,error,get,error,description,throw,new,salesforce,exception,errors,http,status,default,throw,new,salesforce,exception,string,format,login,error,status,s,reason,s,response,status,login,response,get,reason,response,status,catch,ioexception,e,string,msg,login,error,response,parse,exception,e,get,message,throw,new,salesforce,exception,msg,e
SalesforceSession -> public Request getLoginRequest(HttpConversation conversation);1461898025;Creates login request, allows SalesforceSecurityHandler to create a login request for a failed authentication conversation_@return login POST request.;public Request getLoginRequest(HttpConversation conversation) {_        final String loginUrl = (instanceUrl == null ? config.getLoginUrl() : instanceUrl) + OAUTH2_TOKEN_PATH__        LOG.info("Login user {} at Salesforce loginUrl: {}", config.getUserName(), loginUrl)__        final Fields fields = new Fields(true)___        fields.put("grant_type", "password")__        fields.put("client_id", config.getClientId())__        fields.put("client_secret", config.getClientSecret())__        fields.put("username", config.getUserName())__        fields.put("password", config.getPassword())__        fields.put("format", "json")___        final Request post__        if (conversation == null) {_            post = httpClient.POST(loginUrl)__        } else {_            post = httpClient.newHttpRequest(conversation, URI.create(loginUrl))_                .method(HttpMethod.POST)__        }__        return post.content(new FormContentProvider(fields))_            .timeout(timeout, TimeUnit.MILLISECONDS)__    };creates,login,request,allows,salesforce,security,handler,to,create,a,login,request,for,a,failed,authentication,conversation,return,login,post,request;public,request,get,login,request,http,conversation,conversation,final,string,login,url,instance,url,null,config,get,login,url,instance,url,log,info,login,user,at,salesforce,login,url,config,get,user,name,login,url,final,fields,fields,new,fields,true,fields,put,password,fields,put,config,get,client,id,fields,put,config,get,client,secret,fields,put,username,config,get,user,name,fields,put,password,config,get,password,fields,put,format,json,final,request,post,if,conversation,null,post,http,client,post,login,url,else,post,http,client,new,http,request,conversation,uri,create,login,url,method,http,method,post,return,post,content,new,form,content,provider,fields,timeout,timeout,time,unit,milliseconds
SalesforceSession -> public Request getLoginRequest(HttpConversation conversation);1466056544;Creates login request, allows SalesforceSecurityHandler to create a login request for a failed authentication conversation_@return login POST request.;public Request getLoginRequest(HttpConversation conversation) {_        final String loginUrl = (instanceUrl == null ? config.getLoginUrl() : instanceUrl) + OAUTH2_TOKEN_PATH__        LOG.info("Login user {} at Salesforce loginUrl: {}", config.getUserName(), loginUrl)__        final Fields fields = new Fields(true)___        fields.put("grant_type", "password")__        fields.put("client_id", config.getClientId())__        fields.put("client_secret", config.getClientSecret())__        fields.put("username", config.getUserName())__        fields.put("password", config.getPassword())__        fields.put("format", "json")___        final Request post__        if (conversation == null) {_            post = httpClient.POST(loginUrl)__        } else {_            post = httpClient.newHttpRequest(conversation, URI.create(loginUrl))_                .method(HttpMethod.POST)__        }__        return post.content(new FormContentProvider(fields))_            .timeout(timeout, TimeUnit.MILLISECONDS)__    };creates,login,request,allows,salesforce,security,handler,to,create,a,login,request,for,a,failed,authentication,conversation,return,login,post,request;public,request,get,login,request,http,conversation,conversation,final,string,login,url,instance,url,null,config,get,login,url,instance,url,log,info,login,user,at,salesforce,login,url,config,get,user,name,login,url,final,fields,fields,new,fields,true,fields,put,password,fields,put,config,get,client,id,fields,put,config,get,client,secret,fields,put,username,config,get,user,name,fields,put,password,config,get,password,fields,put,format,json,final,request,post,if,conversation,null,post,http,client,post,login,url,else,post,http,client,new,http,request,conversation,uri,create,login,url,method,http,method,post,return,post,content,new,form,content,provider,fields,timeout,timeout,time,unit,milliseconds
SalesforceSession -> public Request getLoginRequest(HttpConversation conversation);1466056544;Creates login request, allows SalesforceSecurityHandler to create a login request for a failed authentication conversation_@return login POST request.;public Request getLoginRequest(HttpConversation conversation) {_        final String loginUrl = (instanceUrl == null ? config.getLoginUrl() : instanceUrl) + OAUTH2_TOKEN_PATH__        LOG.info("Login user {} at Salesforce loginUrl: {}", config.getUserName(), loginUrl)__        final Fields fields = new Fields(true)___        fields.put("grant_type", "password")__        fields.put("client_id", config.getClientId())__        fields.put("client_secret", config.getClientSecret())__        fields.put("username", config.getUserName())__        fields.put("password", config.getPassword())__        fields.put("format", "json")___        final Request post__        if (conversation == null) {_            post = httpClient.POST(loginUrl)__        } else {_            post = httpClient.newHttpRequest(conversation, URI.create(loginUrl))_                .method(HttpMethod.POST)__        }__        return post.content(new FormContentProvider(fields))_            .timeout(timeout, TimeUnit.MILLISECONDS)__    };creates,login,request,allows,salesforce,security,handler,to,create,a,login,request,for,a,failed,authentication,conversation,return,login,post,request;public,request,get,login,request,http,conversation,conversation,final,string,login,url,instance,url,null,config,get,login,url,instance,url,log,info,login,user,at,salesforce,login,url,config,get,user,name,login,url,final,fields,fields,new,fields,true,fields,put,password,fields,put,config,get,client,id,fields,put,config,get,client,secret,fields,put,username,config,get,user,name,fields,put,password,config,get,password,fields,put,format,json,final,request,post,if,conversation,null,post,http,client,post,login,url,else,post,http,client,new,http,request,conversation,uri,create,login,url,method,http,method,post,return,post,content,new,form,content,provider,fields,timeout,timeout,time,unit,milliseconds
SalesforceSession -> public Request getLoginRequest(HttpConversation conversation);1468476697;Creates login request, allows SalesforceSecurityHandler to create a login request for a failed authentication conversation_@return login POST request.;public Request getLoginRequest(HttpConversation conversation) {_        final String loginUrl = (instanceUrl == null ? config.getLoginUrl() : instanceUrl) + OAUTH2_TOKEN_PATH__        LOG.info("Login user {} at Salesforce loginUrl: {}", config.getUserName(), loginUrl)__        final Fields fields = new Fields(true)___        fields.put("grant_type", "password")__        fields.put("client_id", config.getClientId())__        fields.put("client_secret", config.getClientSecret())__        fields.put("username", config.getUserName())__        fields.put("password", config.getPassword())__        fields.put("format", "json")___        final Request post__        if (conversation == null) {_            post = httpClient.POST(loginUrl)__        } else {_            post = httpClient.newHttpRequest(conversation, URI.create(loginUrl))_                .method(HttpMethod.POST)__        }__        return post.content(new FormContentProvider(fields))_            .timeout(timeout, TimeUnit.MILLISECONDS)__    };creates,login,request,allows,salesforce,security,handler,to,create,a,login,request,for,a,failed,authentication,conversation,return,login,post,request;public,request,get,login,request,http,conversation,conversation,final,string,login,url,instance,url,null,config,get,login,url,instance,url,log,info,login,user,at,salesforce,login,url,config,get,user,name,login,url,final,fields,fields,new,fields,true,fields,put,password,fields,put,config,get,client,id,fields,put,config,get,client,secret,fields,put,username,config,get,user,name,fields,put,password,config,get,password,fields,put,format,json,final,request,post,if,conversation,null,post,http,client,post,login,url,else,post,http,client,new,http,request,conversation,uri,create,login,url,method,http,method,post,return,post,content,new,form,content,provider,fields,timeout,timeout,time,unit,milliseconds
SalesforceSession -> public Request getLoginRequest(HttpConversation conversation);1469576360;Creates login request, allows SalesforceSecurityHandler to create a login request for a failed authentication conversation_@return login POST request.;public Request getLoginRequest(HttpConversation conversation) {_        final String loginUrl = (instanceUrl == null ? config.getLoginUrl() : instanceUrl) + OAUTH2_TOKEN_PATH__        LOG.info("Login user {} at Salesforce loginUrl: {}", config.getUserName(), loginUrl)__        final Fields fields = new Fields(true)___        fields.put("grant_type", "password")__        fields.put("client_id", config.getClientId())__        fields.put("client_secret", config.getClientSecret())__        fields.put("username", config.getUserName())__        fields.put("password", config.getPassword())__        fields.put("format", "json")___        final Request post__        if (conversation == null) {_            post = httpClient.POST(loginUrl)__        } else {_            post = httpClient.newHttpRequest(conversation, URI.create(loginUrl))_                .method(HttpMethod.POST)__        }__        return post.content(new FormContentProvider(fields))_            .timeout(timeout, TimeUnit.MILLISECONDS)__    };creates,login,request,allows,salesforce,security,handler,to,create,a,login,request,for,a,failed,authentication,conversation,return,login,post,request;public,request,get,login,request,http,conversation,conversation,final,string,login,url,instance,url,null,config,get,login,url,instance,url,log,info,login,user,at,salesforce,login,url,config,get,user,name,login,url,final,fields,fields,new,fields,true,fields,put,password,fields,put,config,get,client,id,fields,put,config,get,client,secret,fields,put,username,config,get,user,name,fields,put,password,config,get,password,fields,put,format,json,final,request,post,if,conversation,null,post,http,client,post,login,url,else,post,http,client,new,http,request,conversation,uri,create,login,url,method,http,method,post,return,post,content,new,form,content,provider,fields,timeout,timeout,time,unit,milliseconds
SalesforceSession -> public Request getLoginRequest(HttpConversation conversation);1479916286;Creates login request, allows SalesforceSecurityHandler to create a login request for a failed authentication conversation_@return login POST request.;public Request getLoginRequest(HttpConversation conversation) {_        final String loginUrl = (instanceUrl == null ? config.getLoginUrl() : instanceUrl) + OAUTH2_TOKEN_PATH__        LOG.info("Login user {} at Salesforce loginUrl: {}", config.getUserName(), loginUrl)__        final Fields fields = new Fields(true)___        fields.put("grant_type", "password")__        fields.put("client_id", config.getClientId())__        fields.put("client_secret", config.getClientSecret())__        fields.put("username", config.getUserName())__        fields.put("password", config.getPassword())__        fields.put("format", "json")___        final Request post__        if (conversation == null) {_            post = httpClient.POST(loginUrl)__        } else {_            post = httpClient.newHttpRequest(conversation, URI.create(loginUrl))_                .method(HttpMethod.POST)__        }__        return post.content(new FormContentProvider(fields))_            .timeout(timeout, TimeUnit.MILLISECONDS)__    };creates,login,request,allows,salesforce,security,handler,to,create,a,login,request,for,a,failed,authentication,conversation,return,login,post,request;public,request,get,login,request,http,conversation,conversation,final,string,login,url,instance,url,null,config,get,login,url,instance,url,log,info,login,user,at,salesforce,login,url,config,get,user,name,login,url,final,fields,fields,new,fields,true,fields,put,password,fields,put,config,get,client,id,fields,put,config,get,client,secret,fields,put,username,config,get,user,name,fields,put,password,config,get,password,fields,put,format,json,final,request,post,if,conversation,null,post,http,client,post,login,url,else,post,http,client,new,http,request,conversation,uri,create,login,url,method,http,method,post,return,post,content,new,form,content,provider,fields,timeout,timeout,time,unit,milliseconds
SalesforceSession -> public Request getLoginRequest(HttpConversation conversation);1486488499;Creates login request, allows SalesforceSecurityHandler to create a login request for a failed authentication conversation_@return login POST request.;public Request getLoginRequest(HttpConversation conversation) {_        final String loginUrl = (instanceUrl == null ? config.getLoginUrl() : instanceUrl) + OAUTH2_TOKEN_PATH__        LOG.info("Login user {} at Salesforce loginUrl: {}", config.getUserName(), loginUrl)__        final Fields fields = new Fields(true)___        fields.put("client_id", config.getClientId())__        fields.put("client_secret", config.getClientSecret())__        fields.put("format", "json")___        if (config.getRefreshToken() == null) {_            fields.put("grant_type", "password")__            fields.put("username", config.getUserName())__            fields.put("password", config.getPassword())__        } else {_            fields.put("grant_type", "refresh_token")__            fields.put("refresh_token", config.getRefreshToken())__        }__        final Request post__        if (conversation == null) {_            post = httpClient.POST(loginUrl)__        } else {_            post = httpClient.newHttpRequest(conversation, URI.create(loginUrl))_                .method(HttpMethod.POST)__        }__        return post.content(new FormContentProvider(fields))_            .timeout(timeout, TimeUnit.MILLISECONDS)__    };creates,login,request,allows,salesforce,security,handler,to,create,a,login,request,for,a,failed,authentication,conversation,return,login,post,request;public,request,get,login,request,http,conversation,conversation,final,string,login,url,instance,url,null,config,get,login,url,instance,url,log,info,login,user,at,salesforce,login,url,config,get,user,name,login,url,final,fields,fields,new,fields,true,fields,put,config,get,client,id,fields,put,config,get,client,secret,fields,put,format,json,if,config,get,refresh,token,null,fields,put,password,fields,put,username,config,get,user,name,fields,put,password,config,get,password,else,fields,put,fields,put,config,get,refresh,token,final,request,post,if,conversation,null,post,http,client,post,login,url,else,post,http,client,new,http,request,conversation,uri,create,login,url,method,http,method,post,return,post,content,new,form,content,provider,fields,timeout,timeout,time,unit,milliseconds
SalesforceSession -> public Request getLoginRequest(HttpConversation conversation);1486488499;Creates login request, allows SalesforceSecurityHandler to create a login request for a failed authentication conversation_@return login POST request.;public Request getLoginRequest(HttpConversation conversation) {_        final String loginUrl = (instanceUrl == null ? config.getLoginUrl() : instanceUrl) + OAUTH2_TOKEN_PATH__        LOG.info("Login user {} at Salesforce loginUrl: {}", config.getUserName(), loginUrl)__        final Fields fields = new Fields(true)___        fields.put("client_id", config.getClientId())__        fields.put("client_secret", config.getClientSecret())__        fields.put("format", "json")___        if (ObjectHelper.isEmpty(config.getRefreshToken())) {_            fields.put("grant_type", "password")__            fields.put("username", config.getUserName())__            fields.put("password", config.getPassword())__        } else {_            fields.put("grant_type", "refresh_token")__            fields.put("refresh_token", config.getRefreshToken())__        }__        final Request post__        if (conversation == null) {_            post = httpClient.POST(loginUrl)__        } else {_            post = httpClient.newHttpRequest(conversation, URI.create(loginUrl))_                .method(HttpMethod.POST)__        }__        return post.content(new FormContentProvider(fields))_            .timeout(timeout, TimeUnit.MILLISECONDS)__    };creates,login,request,allows,salesforce,security,handler,to,create,a,login,request,for,a,failed,authentication,conversation,return,login,post,request;public,request,get,login,request,http,conversation,conversation,final,string,login,url,instance,url,null,config,get,login,url,instance,url,log,info,login,user,at,salesforce,login,url,config,get,user,name,login,url,final,fields,fields,new,fields,true,fields,put,config,get,client,id,fields,put,config,get,client,secret,fields,put,format,json,if,object,helper,is,empty,config,get,refresh,token,fields,put,password,fields,put,username,config,get,user,name,fields,put,password,config,get,password,else,fields,put,fields,put,config,get,refresh,token,final,request,post,if,conversation,null,post,http,client,post,login,url,else,post,http,client,new,http,request,conversation,uri,create,login,url,method,http,method,post,return,post,content,new,form,content,provider,fields,timeout,timeout,time,unit,milliseconds
SalesforceSession -> public Request getLoginRequest(HttpConversation conversation);1487190316;Creates login request, allows SalesforceSecurityHandler to create a login request for a failed authentication conversation_@return login POST request.;public Request getLoginRequest(HttpConversation conversation) {_        final String loginUrl = (instanceUrl == null ? config.getLoginUrl() : instanceUrl) + OAUTH2_TOKEN_PATH__        LOG.info("Login at Salesforce loginUrl: {}", loginUrl)__        final Fields fields = new Fields(true)___        fields.put("client_id", config.getClientId())__        fields.put("client_secret", config.getClientSecret())__        fields.put("format", "json")___        if (ObjectHelper.isEmpty(config.getRefreshToken())) {_            fields.put("grant_type", "password")__            fields.put("username", config.getUserName())__            fields.put("password", config.getPassword())__        } else {_            fields.put("grant_type", "refresh_token")__            fields.put("refresh_token", config.getRefreshToken())__        }__        final Request post__        if (conversation == null) {_            post = httpClient.POST(loginUrl)__        } else {_            post = httpClient.newHttpRequest(conversation, URI.create(loginUrl))_                .method(HttpMethod.POST)__        }__        return post.content(new FormContentProvider(fields))_            .timeout(timeout, TimeUnit.MILLISECONDS)__    };creates,login,request,allows,salesforce,security,handler,to,create,a,login,request,for,a,failed,authentication,conversation,return,login,post,request;public,request,get,login,request,http,conversation,conversation,final,string,login,url,instance,url,null,config,get,login,url,instance,url,log,info,login,at,salesforce,login,url,login,url,final,fields,fields,new,fields,true,fields,put,config,get,client,id,fields,put,config,get,client,secret,fields,put,format,json,if,object,helper,is,empty,config,get,refresh,token,fields,put,password,fields,put,username,config,get,user,name,fields,put,password,config,get,password,else,fields,put,fields,put,config,get,refresh,token,final,request,post,if,conversation,null,post,http,client,post,login,url,else,post,http,client,new,http,request,conversation,uri,create,login,url,method,http,method,post,return,post,content,new,form,content,provider,fields,timeout,timeout,time,unit,milliseconds
SalesforceSession -> public Request getLoginRequest(HttpConversation conversation);1489579328;Creates login request, allows SalesforceSecurityHandler to create a login request for a failed authentication_conversation__@return login POST request.;public Request getLoginRequest(HttpConversation conversation) {_        final String loginUrl = (instanceUrl == null ? config.getLoginUrl() : instanceUrl) + OAUTH2_TOKEN_PATH__        LOG.info("Login at Salesforce loginUrl: {}", loginUrl)__        final Fields fields = new Fields(true)___        fields.put("client_id", config.getClientId())__        fields.put("format", "json")___        final Type type = config.getType()__        switch (type) {_        case USERNAME_PASSWORD:_            fields.put("client_secret", config.getClientSecret())__            fields.put("grant_type", "password")__            fields.put("username", config.getUserName())__            fields.put("password", config.getPassword())__            break__        case REFRESH_TOKEN:_            fields.put("client_secret", config.getClientSecret())__            fields.put("grant_type", "refresh_token")__            fields.put("refresh_token", config.getRefreshToken())__            break__        case JWT:_            fields.put("grant_type", "urn:ietf:params:oauth:grant-type:jwt-bearer")__            fields.put("assertion", generateJwtAssertion())__            break__        default:_            throw new IllegalArgumentException("Unsupported login configuration type: " + type)__        }__        final Request post__        if (conversation == null) {_            post = httpClient.POST(loginUrl)__        } else {_            post = httpClient.newHttpRequest(conversation, URI.create(loginUrl)).method(HttpMethod.POST)__        }__        return post.content(new FormContentProvider(fields)).timeout(timeout, TimeUnit.MILLISECONDS)__    };creates,login,request,allows,salesforce,security,handler,to,create,a,login,request,for,a,failed,authentication,conversation,return,login,post,request;public,request,get,login,request,http,conversation,conversation,final,string,login,url,instance,url,null,config,get,login,url,instance,url,log,info,login,at,salesforce,login,url,login,url,final,fields,fields,new,fields,true,fields,put,config,get,client,id,fields,put,format,json,final,type,type,config,get,type,switch,type,case,fields,put,config,get,client,secret,fields,put,password,fields,put,username,config,get,user,name,fields,put,password,config,get,password,break,case,fields,put,config,get,client,secret,fields,put,fields,put,config,get,refresh,token,break,case,jwt,fields,put,urn,ietf,params,oauth,grant,type,jwt,bearer,fields,put,assertion,generate,jwt,assertion,break,default,throw,new,illegal,argument,exception,unsupported,login,configuration,type,type,final,request,post,if,conversation,null,post,http,client,post,login,url,else,post,http,client,new,http,request,conversation,uri,create,login,url,method,http,method,post,return,post,content,new,form,content,provider,fields,timeout,timeout,time,unit,milliseconds
SalesforceSession -> public Request getLoginRequest(HttpConversation conversation);1490367492;Creates login request, allows SalesforceSecurityHandler to create a login request for a failed authentication_conversation__@return login POST request.;public Request getLoginRequest(HttpConversation conversation) {_        final String loginUrl = (instanceUrl == null ? config.getLoginUrl() : instanceUrl) + OAUTH2_TOKEN_PATH__        LOG.info("Login at Salesforce loginUrl: {}", loginUrl)__        final Fields fields = new Fields(true)___        fields.put("client_id", config.getClientId())__        fields.put("format", "json")___        final Type type = config.getType()__        switch (type) {_        case USERNAME_PASSWORD:_            fields.put("client_secret", config.getClientSecret())__            fields.put("grant_type", "password")__            fields.put("username", config.getUserName())__            fields.put("password", config.getPassword())__            break__        case REFRESH_TOKEN:_            fields.put("client_secret", config.getClientSecret())__            fields.put("grant_type", "refresh_token")__            fields.put("refresh_token", config.getRefreshToken())__            break__        case JWT:_            fields.put("grant_type", "urn:ietf:params:oauth:grant-type:jwt-bearer")__            fields.put("assertion", generateJwtAssertion())__            break__        default:_            throw new IllegalArgumentException("Unsupported login configuration type: " + type)__        }__        final Request post__        if (conversation == null) {_            post = httpClient.POST(loginUrl)__        } else {_            post = httpClient.newHttpRequest(conversation, URI.create(loginUrl)).method(HttpMethod.POST)__        }__        return post.content(new FormContentProvider(fields)).timeout(timeout, TimeUnit.MILLISECONDS)__    };creates,login,request,allows,salesforce,security,handler,to,create,a,login,request,for,a,failed,authentication,conversation,return,login,post,request;public,request,get,login,request,http,conversation,conversation,final,string,login,url,instance,url,null,config,get,login,url,instance,url,log,info,login,at,salesforce,login,url,login,url,final,fields,fields,new,fields,true,fields,put,config,get,client,id,fields,put,format,json,final,type,type,config,get,type,switch,type,case,fields,put,config,get,client,secret,fields,put,password,fields,put,username,config,get,user,name,fields,put,password,config,get,password,break,case,fields,put,config,get,client,secret,fields,put,fields,put,config,get,refresh,token,break,case,jwt,fields,put,urn,ietf,params,oauth,grant,type,jwt,bearer,fields,put,assertion,generate,jwt,assertion,break,default,throw,new,illegal,argument,exception,unsupported,login,configuration,type,type,final,request,post,if,conversation,null,post,http,client,post,login,url,else,post,http,client,new,http,request,conversation,uri,create,login,url,method,http,method,post,return,post,content,new,form,content,provider,fields,timeout,timeout,time,unit,milliseconds
SalesforceSession -> public Request getLoginRequest(HttpConversation conversation);1490367492;Creates login request, allows SalesforceSecurityHandler to create a login request for a failed authentication_conversation__@return login POST request.;public Request getLoginRequest(HttpConversation conversation) {_        final String loginUrl = (instanceUrl == null ? config.getLoginUrl() : instanceUrl) + OAUTH2_TOKEN_PATH__        LOG.info("Login at Salesforce loginUrl: {}", loginUrl)__        final Fields fields = new Fields(true)___        fields.put("client_id", config.getClientId())__        fields.put("format", "json")___        final AuthenticationType type = config.getType()__        switch (type) {_        case USERNAME_PASSWORD:_            fields.put("client_secret", config.getClientSecret())__            fields.put("grant_type", "password")__            fields.put("username", config.getUserName())__            fields.put("password", config.getPassword())__            break__        case REFRESH_TOKEN:_            fields.put("client_secret", config.getClientSecret())__            fields.put("grant_type", "refresh_token")__            fields.put("refresh_token", config.getRefreshToken())__            break__        case JWT:_            fields.put("grant_type", "urn:ietf:params:oauth:grant-type:jwt-bearer")__            fields.put("assertion", generateJwtAssertion())__            break__        default:_            throw new IllegalArgumentException("Unsupported login configuration type: " + type)__        }__        final Request post__        if (conversation == null) {_            post = httpClient.POST(loginUrl)__        } else {_            post = httpClient.newHttpRequest(conversation, URI.create(loginUrl)).method(HttpMethod.POST)__        }__        return post.content(new FormContentProvider(fields)).timeout(timeout, TimeUnit.MILLISECONDS)__    };creates,login,request,allows,salesforce,security,handler,to,create,a,login,request,for,a,failed,authentication,conversation,return,login,post,request;public,request,get,login,request,http,conversation,conversation,final,string,login,url,instance,url,null,config,get,login,url,instance,url,log,info,login,at,salesforce,login,url,login,url,final,fields,fields,new,fields,true,fields,put,config,get,client,id,fields,put,format,json,final,authentication,type,type,config,get,type,switch,type,case,fields,put,config,get,client,secret,fields,put,password,fields,put,username,config,get,user,name,fields,put,password,config,get,password,break,case,fields,put,config,get,client,secret,fields,put,fields,put,config,get,refresh,token,break,case,jwt,fields,put,urn,ietf,params,oauth,grant,type,jwt,bearer,fields,put,assertion,generate,jwt,assertion,break,default,throw,new,illegal,argument,exception,unsupported,login,configuration,type,type,final,request,post,if,conversation,null,post,http,client,post,login,url,else,post,http,client,new,http,request,conversation,uri,create,login,url,method,http,method,post,return,post,content,new,form,content,provider,fields,timeout,timeout,time,unit,milliseconds
SalesforceSession -> public Request getLoginRequest(HttpConversation conversation);1493991617;Creates login request, allows SalesforceSecurityHandler to create a login request for a failed authentication_conversation__@return login POST request.;public Request getLoginRequest(HttpConversation conversation) {_        final String loginUrl = (instanceUrl == null ? config.getLoginUrl() : instanceUrl) + OAUTH2_TOKEN_PATH__        LOG.info("Login at Salesforce loginUrl: {}", loginUrl)__        final Fields fields = new Fields(true)___        fields.put("client_id", config.getClientId())__        fields.put("format", "json")___        final AuthenticationType type = config.getType()__        switch (type) {_        case USERNAME_PASSWORD:_            fields.put("client_secret", config.getClientSecret())__            fields.put("grant_type", "password")__            fields.put("username", config.getUserName())__            fields.put("password", config.getPassword())__            break__        case REFRESH_TOKEN:_            fields.put("client_secret", config.getClientSecret())__            fields.put("grant_type", "refresh_token")__            fields.put("refresh_token", config.getRefreshToken())__            break__        case JWT:_            fields.put("grant_type", "urn:ietf:params:oauth:grant-type:jwt-bearer")__            fields.put("assertion", generateJwtAssertion())__            break__        default:_            throw new IllegalArgumentException("Unsupported login configuration type: " + type)__        }__        final Request post__        if (conversation == null) {_            post = httpClient.POST(loginUrl)__        } else {_            post = httpClient.newHttpRequest(conversation, URI.create(loginUrl)).method(HttpMethod.POST)__        }__        return post.content(new FormContentProvider(fields)).timeout(timeout, TimeUnit.MILLISECONDS)__    };creates,login,request,allows,salesforce,security,handler,to,create,a,login,request,for,a,failed,authentication,conversation,return,login,post,request;public,request,get,login,request,http,conversation,conversation,final,string,login,url,instance,url,null,config,get,login,url,instance,url,log,info,login,at,salesforce,login,url,login,url,final,fields,fields,new,fields,true,fields,put,config,get,client,id,fields,put,format,json,final,authentication,type,type,config,get,type,switch,type,case,fields,put,config,get,client,secret,fields,put,password,fields,put,username,config,get,user,name,fields,put,password,config,get,password,break,case,fields,put,config,get,client,secret,fields,put,fields,put,config,get,refresh,token,break,case,jwt,fields,put,urn,ietf,params,oauth,grant,type,jwt,bearer,fields,put,assertion,generate,jwt,assertion,break,default,throw,new,illegal,argument,exception,unsupported,login,configuration,type,type,final,request,post,if,conversation,null,post,http,client,post,login,url,else,post,http,client,new,http,request,conversation,uri,create,login,url,method,http,method,post,return,post,content,new,form,content,provider,fields,timeout,timeout,time,unit,milliseconds
SalesforceSession -> public Request getLoginRequest(HttpConversation conversation);1501746232;Creates login request, allows SalesforceSecurityHandler to create a login request for a failed authentication_conversation__@return login POST request.;public Request getLoginRequest(HttpConversation conversation) {_        final String loginUrl = (instanceUrl == null ? config.getLoginUrl() : instanceUrl) + OAUTH2_TOKEN_PATH__        LOG.info("Login at Salesforce loginUrl: {}", loginUrl)__        final Fields fields = new Fields(true)___        fields.put("client_id", config.getClientId())__        fields.put("format", "json")___        final AuthenticationType type = config.getType()__        switch (type) {_        case USERNAME_PASSWORD:_            fields.put("client_secret", config.getClientSecret())__            fields.put("grant_type", "password")__            fields.put("username", config.getUserName())__            fields.put("password", config.getPassword())__            break__        case REFRESH_TOKEN:_            fields.put("client_secret", config.getClientSecret())__            fields.put("grant_type", "refresh_token")__            fields.put("refresh_token", config.getRefreshToken())__            break__        case JWT:_            fields.put("grant_type", "urn:ietf:params:oauth:grant-type:jwt-bearer")__            fields.put("assertion", generateJwtAssertion())__            break__        default:_            throw new IllegalArgumentException("Unsupported login configuration type: " + type)__        }__        final Request post__        if (conversation == null) {_            post = httpClient.POST(loginUrl)__        } else {_            post = httpClient.newHttpRequest(conversation, URI.create(loginUrl)).method(HttpMethod.POST)__        }__        return post.content(new FormContentProvider(fields)).timeout(timeout, TimeUnit.MILLISECONDS)__    };creates,login,request,allows,salesforce,security,handler,to,create,a,login,request,for,a,failed,authentication,conversation,return,login,post,request;public,request,get,login,request,http,conversation,conversation,final,string,login,url,instance,url,null,config,get,login,url,instance,url,log,info,login,at,salesforce,login,url,login,url,final,fields,fields,new,fields,true,fields,put,config,get,client,id,fields,put,format,json,final,authentication,type,type,config,get,type,switch,type,case,fields,put,config,get,client,secret,fields,put,password,fields,put,username,config,get,user,name,fields,put,password,config,get,password,break,case,fields,put,config,get,client,secret,fields,put,fields,put,config,get,refresh,token,break,case,jwt,fields,put,urn,ietf,params,oauth,grant,type,jwt,bearer,fields,put,assertion,generate,jwt,assertion,break,default,throw,new,illegal,argument,exception,unsupported,login,configuration,type,type,final,request,post,if,conversation,null,post,http,client,post,login,url,else,post,http,client,new,http,request,conversation,uri,create,login,url,method,http,method,post,return,post,content,new,form,content,provider,fields,timeout,timeout,time,unit,milliseconds
SalesforceSession -> public Request getLoginRequest(HttpConversation conversation);1524063178;Creates login request, allows SalesforceSecurityHandler to create a login request for a failed authentication_conversation__@return login POST request.;public Request getLoginRequest(HttpConversation conversation) {_        final String loginUrl = (instanceUrl == null ? config.getLoginUrl() : instanceUrl) + OAUTH2_TOKEN_PATH__        LOG.info("Login at Salesforce loginUrl: {}", loginUrl)__        final Fields fields = new Fields(true)___        fields.put("client_id", config.getClientId())__        fields.put("format", "json")___        final AuthenticationType type = config.getType()__        switch (type) {_        case USERNAME_PASSWORD:_            fields.put("client_secret", config.getClientSecret())__            fields.put("grant_type", "password")__            fields.put("username", config.getUserName())__            fields.put("password", config.getPassword())__            break__        case REFRESH_TOKEN:_            fields.put("client_secret", config.getClientSecret())__            fields.put("grant_type", "refresh_token")__            fields.put("refresh_token", config.getRefreshToken())__            break__        case JWT:_            fields.put("grant_type", "urn:ietf:params:oauth:grant-type:jwt-bearer")__            fields.put("assertion", generateJwtAssertion())__            break__        default:_            throw new IllegalArgumentException("Unsupported login configuration type: " + type)__        }__        final Request post__        if (conversation == null) {_            post = httpClient.POST(loginUrl)__        } else {_            post = httpClient.newHttpRequest(conversation, URI.create(loginUrl)).method(HttpMethod.POST)__        }__        return post.content(new FormContentProvider(fields)).timeout(timeout, TimeUnit.MILLISECONDS)__    };creates,login,request,allows,salesforce,security,handler,to,create,a,login,request,for,a,failed,authentication,conversation,return,login,post,request;public,request,get,login,request,http,conversation,conversation,final,string,login,url,instance,url,null,config,get,login,url,instance,url,log,info,login,at,salesforce,login,url,login,url,final,fields,fields,new,fields,true,fields,put,config,get,client,id,fields,put,format,json,final,authentication,type,type,config,get,type,switch,type,case,fields,put,config,get,client,secret,fields,put,password,fields,put,username,config,get,user,name,fields,put,password,config,get,password,break,case,fields,put,config,get,client,secret,fields,put,fields,put,config,get,refresh,token,break,case,jwt,fields,put,urn,ietf,params,oauth,grant,type,jwt,bearer,fields,put,assertion,generate,jwt,assertion,break,default,throw,new,illegal,argument,exception,unsupported,login,configuration,type,type,final,request,post,if,conversation,null,post,http,client,post,login,url,else,post,http,client,new,http,request,conversation,uri,create,login,url,method,http,method,post,return,post,content,new,form,content,provider,fields,timeout,timeout,time,unit,milliseconds
SalesforceSession -> public Request getLoginRequest(HttpConversation conversation);1540108163;Creates login request, allows SalesforceSecurityHandler to create a login request for a failed authentication_conversation__@return login POST request.;public Request getLoginRequest(HttpConversation conversation) {_        final String loginUrl = (instanceUrl == null ? config.getLoginUrl() : instanceUrl) + OAUTH2_TOKEN_PATH__        LOG.info("Login at Salesforce loginUrl: {}", loginUrl)__        final Fields fields = new Fields(true)___        fields.put("client_id", config.getClientId())__        fields.put("format", "json")___        final AuthenticationType type = config.getType()__        switch (type) {_        case USERNAME_PASSWORD:_            fields.put("client_secret", config.getClientSecret())__            fields.put("grant_type", "password")__            fields.put("username", config.getUserName())__            fields.put("password", config.getPassword())__            break__        case REFRESH_TOKEN:_            fields.put("client_secret", config.getClientSecret())__            fields.put("grant_type", "refresh_token")__            fields.put("refresh_token", config.getRefreshToken())__            break__        case JWT:_            fields.put("grant_type", "urn:ietf:params:oauth:grant-type:jwt-bearer")__            fields.put("assertion", generateJwtAssertion())__            break__        default:_            throw new IllegalArgumentException("Unsupported login configuration type: " + type)__        }__        final Request post__        if (conversation == null) {_            post = httpClient.POST(loginUrl)__        } else {_            post = httpClient.newHttpRequest(conversation, URI.create(loginUrl)).method(HttpMethod.POST)__        }__        return post.content(new FormContentProvider(fields)).timeout(timeout, TimeUnit.MILLISECONDS)__    };creates,login,request,allows,salesforce,security,handler,to,create,a,login,request,for,a,failed,authentication,conversation,return,login,post,request;public,request,get,login,request,http,conversation,conversation,final,string,login,url,instance,url,null,config,get,login,url,instance,url,log,info,login,at,salesforce,login,url,login,url,final,fields,fields,new,fields,true,fields,put,config,get,client,id,fields,put,format,json,final,authentication,type,type,config,get,type,switch,type,case,fields,put,config,get,client,secret,fields,put,password,fields,put,username,config,get,user,name,fields,put,password,config,get,password,break,case,fields,put,config,get,client,secret,fields,put,fields,put,config,get,refresh,token,break,case,jwt,fields,put,urn,ietf,params,oauth,grant,type,jwt,bearer,fields,put,assertion,generate,jwt,assertion,break,default,throw,new,illegal,argument,exception,unsupported,login,configuration,type,type,final,request,post,if,conversation,null,post,http,client,post,login,url,else,post,http,client,new,http,request,conversation,uri,create,login,url,method,http,method,post,return,post,content,new,form,content,provider,fields,timeout,timeout,time,unit,milliseconds
SalesforceSession -> public Request getLoginRequest(HttpConversation conversation);1545056693;Creates login request, allows SalesforceSecurityHandler to create a login request for a failed authentication_conversation__@return login POST request.;public Request getLoginRequest(HttpConversation conversation) {_        final String loginUrl = (instanceUrl == null ? config.getLoginUrl() : instanceUrl) + OAUTH2_TOKEN_PATH__        LOG.info("Login at Salesforce loginUrl: {}", loginUrl)__        final Fields fields = new Fields(true)___        fields.put("client_id", config.getClientId())__        fields.put("format", "json")___        final AuthenticationType type = config.getType()__        switch (type) {_        case USERNAME_PASSWORD:_            fields.put("client_secret", config.getClientSecret())__            fields.put("grant_type", "password")__            fields.put("username", config.getUserName())__            fields.put("password", config.getPassword())__            break__        case REFRESH_TOKEN:_            fields.put("client_secret", config.getClientSecret())__            fields.put("grant_type", "refresh_token")__            fields.put("refresh_token", config.getRefreshToken())__            break__        case JWT:_            fields.put("grant_type", "urn:ietf:params:oauth:grant-type:jwt-bearer")__            fields.put("assertion", generateJwtAssertion())__            break__        default:_            throw new IllegalArgumentException("Unsupported login configuration type: " + type)__        }__        final Request post__        if (conversation == null) {_            post = httpClient.POST(loginUrl)__        } else {_            post = httpClient.newHttpRequest(conversation, URI.create(loginUrl)).method(HttpMethod.POST)__        }__        return post.content(new FormContentProvider(fields)).timeout(timeout, TimeUnit.MILLISECONDS)__    };creates,login,request,allows,salesforce,security,handler,to,create,a,login,request,for,a,failed,authentication,conversation,return,login,post,request;public,request,get,login,request,http,conversation,conversation,final,string,login,url,instance,url,null,config,get,login,url,instance,url,log,info,login,at,salesforce,login,url,login,url,final,fields,fields,new,fields,true,fields,put,config,get,client,id,fields,put,format,json,final,authentication,type,type,config,get,type,switch,type,case,fields,put,config,get,client,secret,fields,put,password,fields,put,username,config,get,user,name,fields,put,password,config,get,password,break,case,fields,put,config,get,client,secret,fields,put,fields,put,config,get,refresh,token,break,case,jwt,fields,put,urn,ietf,params,oauth,grant,type,jwt,bearer,fields,put,assertion,generate,jwt,assertion,break,default,throw,new,illegal,argument,exception,unsupported,login,configuration,type,type,final,request,post,if,conversation,null,post,http,client,post,login,url,else,post,http,client,new,http,request,conversation,uri,create,login,url,method,http,method,post,return,post,content,new,form,content,provider,fields,timeout,timeout,time,unit,milliseconds
SalesforceSession -> public Request getLoginRequest(HttpConversation conversation);1548319336;Creates login request, allows SalesforceSecurityHandler to create a login request for a failed authentication_conversation__@return login POST request.;public Request getLoginRequest(HttpConversation conversation) {_        final String loginUrl = (instanceUrl == null ? config.getLoginUrl() : instanceUrl) + OAUTH2_TOKEN_PATH__        LOG.info("Login at Salesforce loginUrl: {}", loginUrl)__        final Fields fields = new Fields(true)___        fields.put("client_id", config.getClientId())__        fields.put("format", "json")___        final AuthenticationType type = config.getType()__        switch (type) {_        case USERNAME_PASSWORD:_            fields.put("client_secret", config.getClientSecret())__            fields.put("grant_type", "password")__            fields.put("username", config.getUserName())__            fields.put("password", config.getPassword())__            break__        case REFRESH_TOKEN:_            fields.put("client_secret", config.getClientSecret())__            fields.put("grant_type", "refresh_token")__            fields.put("refresh_token", config.getRefreshToken())__            break__        case JWT:_            fields.put("grant_type", "urn:ietf:params:oauth:grant-type:jwt-bearer")__            fields.put("assertion", generateJwtAssertion())__            break__        default:_            throw new IllegalArgumentException("Unsupported login configuration type: " + type)__        }__        final Request post__        if (conversation == null) {_            post = httpClient.POST(loginUrl)__        } else {_            post = httpClient.newHttpRequest(conversation, URI.create(loginUrl)).method(HttpMethod.POST)__        }__        return post.content(new FormContentProvider(fields)).timeout(timeout, TimeUnit.MILLISECONDS)__    };creates,login,request,allows,salesforce,security,handler,to,create,a,login,request,for,a,failed,authentication,conversation,return,login,post,request;public,request,get,login,request,http,conversation,conversation,final,string,login,url,instance,url,null,config,get,login,url,instance,url,log,info,login,at,salesforce,login,url,login,url,final,fields,fields,new,fields,true,fields,put,config,get,client,id,fields,put,format,json,final,authentication,type,type,config,get,type,switch,type,case,fields,put,config,get,client,secret,fields,put,password,fields,put,username,config,get,user,name,fields,put,password,config,get,password,break,case,fields,put,config,get,client,secret,fields,put,fields,put,config,get,refresh,token,break,case,jwt,fields,put,urn,ietf,params,oauth,grant,type,jwt,bearer,fields,put,assertion,generate,jwt,assertion,break,default,throw,new,illegal,argument,exception,unsupported,login,configuration,type,type,final,request,post,if,conversation,null,post,http,client,post,login,url,else,post,http,client,new,http,request,conversation,uri,create,login,url,method,http,method,post,return,post,content,new,form,content,provider,fields,timeout,timeout,time,unit,milliseconds
SalesforceSession -> public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent)         throws SalesforceException;1489579328;Parses login response, allows SalesforceSecurityHandler to parse a login request for a failed authentication_conversation.;public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent)_        throws SalesforceException {_        final int responseStatus = loginResponse.getStatus()___        try {_            switch (responseStatus) {_            case HttpStatus.OK_200:_                _                LoginToken token = objectMapper.readValue(responseContent, LoginToken.class)___                _                LOG.info("Login successful")__                accessToken = token.getAccessToken()__                instanceUrl = token.getInstanceUrl()___                _                for (SalesforceSessionListener listener : listeners) {_                    try {_                        listener.onLogin(accessToken, instanceUrl)__                    } catch (Throwable t) {_                        LOG.warn("Unexpected error from listener {}: {}", listener, t.getMessage())__                    }_                }__                break___            case HttpStatus.BAD_REQUEST_400:_                _                final LoginError error = objectMapper.readValue(responseContent, LoginError.class)__                final String msg = String.format("Login error code:[%s] description:[%s]", error.getError(),_                    error.getErrorDescription())__                final List<RestError> errors = new ArrayList<RestError>()__                errors.add(new RestError(msg, error.getErrorDescription()))__                throw new SalesforceException(errors, HttpStatus.BAD_REQUEST_400)___            default:_                throw new SalesforceException(_                    String.format("Login error status:[%s] reason:[%s]", responseStatus, loginResponse.getReason()),_                    responseStatus)__            }_        } catch (IOException e) {_            String msg = "Login error: response parse exception " + e.getMessage()__            throw new SalesforceException(msg, e)__        }_    };parses,login,response,allows,salesforce,security,handler,to,parse,a,login,request,for,a,failed,authentication,conversation;public,synchronized,void,parse,login,response,content,response,login,response,string,response,content,throws,salesforce,exception,final,int,response,status,login,response,get,status,try,switch,response,status,case,http,status,login,token,token,object,mapper,read,value,response,content,login,token,class,log,info,login,successful,access,token,token,get,access,token,instance,url,token,get,instance,url,for,salesforce,session,listener,listener,listeners,try,listener,on,login,access,token,instance,url,catch,throwable,t,log,warn,unexpected,error,from,listener,listener,t,get,message,break,case,http,status,final,login,error,error,object,mapper,read,value,response,content,login,error,class,final,string,msg,string,format,login,error,code,s,description,s,error,get,error,error,get,error,description,final,list,rest,error,errors,new,array,list,rest,error,errors,add,new,rest,error,msg,error,get,error,description,throw,new,salesforce,exception,errors,http,status,default,throw,new,salesforce,exception,string,format,login,error,status,s,reason,s,response,status,login,response,get,reason,response,status,catch,ioexception,e,string,msg,login,error,response,parse,exception,e,get,message,throw,new,salesforce,exception,msg,e
SalesforceSession -> public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent)         throws SalesforceException;1490367492;Parses login response, allows SalesforceSecurityHandler to parse a login request for a failed authentication_conversation.;public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent)_        throws SalesforceException {_        final int responseStatus = loginResponse.getStatus()___        try {_            switch (responseStatus) {_            case HttpStatus.OK_200:_                _                LoginToken token = objectMapper.readValue(responseContent, LoginToken.class)___                _                LOG.info("Login successful")__                accessToken = token.getAccessToken()__                instanceUrl = token.getInstanceUrl()___                _                for (SalesforceSessionListener listener : listeners) {_                    try {_                        listener.onLogin(accessToken, instanceUrl)__                    } catch (Throwable t) {_                        LOG.warn("Unexpected error from listener {}: {}", listener, t.getMessage())__                    }_                }__                break___            case HttpStatus.BAD_REQUEST_400:_                _                final LoginError error = objectMapper.readValue(responseContent, LoginError.class)__                final String errorCode = error.getError()__                final String msg = String.format("Login error code:[%s] description:[%s]", error.getError(),_                    error.getErrorDescription())__                final List<RestError> errors = new ArrayList<RestError>()__                errors.add(new RestError(errorCode, msg))__                throw new SalesforceException(errors, HttpStatus.BAD_REQUEST_400)___            default:_                throw new SalesforceException(_                    String.format("Login error status:[%s] reason:[%s]", responseStatus, loginResponse.getReason()),_                    responseStatus)__            }_        } catch (IOException e) {_            String msg = "Login error: response parse exception " + e.getMessage()__            throw new SalesforceException(msg, e)__        }_    };parses,login,response,allows,salesforce,security,handler,to,parse,a,login,request,for,a,failed,authentication,conversation;public,synchronized,void,parse,login,response,content,response,login,response,string,response,content,throws,salesforce,exception,final,int,response,status,login,response,get,status,try,switch,response,status,case,http,status,login,token,token,object,mapper,read,value,response,content,login,token,class,log,info,login,successful,access,token,token,get,access,token,instance,url,token,get,instance,url,for,salesforce,session,listener,listener,listeners,try,listener,on,login,access,token,instance,url,catch,throwable,t,log,warn,unexpected,error,from,listener,listener,t,get,message,break,case,http,status,final,login,error,error,object,mapper,read,value,response,content,login,error,class,final,string,error,code,error,get,error,final,string,msg,string,format,login,error,code,s,description,s,error,get,error,error,get,error,description,final,list,rest,error,errors,new,array,list,rest,error,errors,add,new,rest,error,error,code,msg,throw,new,salesforce,exception,errors,http,status,default,throw,new,salesforce,exception,string,format,login,error,status,s,reason,s,response,status,login,response,get,reason,response,status,catch,ioexception,e,string,msg,login,error,response,parse,exception,e,get,message,throw,new,salesforce,exception,msg,e
SalesforceSession -> public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent)         throws SalesforceException;1490367492;Parses login response, allows SalesforceSecurityHandler to parse a login request for a failed authentication_conversation.;public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent)_        throws SalesforceException {_        final int responseStatus = loginResponse.getStatus()___        try {_            switch (responseStatus) {_            case HttpStatus.OK_200:_                _                LoginToken token = objectMapper.readValue(responseContent, LoginToken.class)___                _                LOG.info("Login successful")__                accessToken = token.getAccessToken()__                instanceUrl = token.getInstanceUrl()___                _                for (SalesforceSessionListener listener : listeners) {_                    try {_                        listener.onLogin(accessToken, instanceUrl)__                    } catch (Throwable t) {_                        LOG.warn("Unexpected error from listener {}: {}", listener, t.getMessage())__                    }_                }__                break___            case HttpStatus.BAD_REQUEST_400:_                _                final LoginError error = objectMapper.readValue(responseContent, LoginError.class)__                final String errorCode = error.getError()__                final String msg = String.format("Login error code:[%s] description:[%s]", error.getError(),_                    error.getErrorDescription())__                final List<RestError> errors = new ArrayList<RestError>()__                errors.add(new RestError(errorCode, msg))__                throw new SalesforceException(errors, HttpStatus.BAD_REQUEST_400)___            default:_                throw new SalesforceException(_                    String.format("Login error status:[%s] reason:[%s]", responseStatus, loginResponse.getReason()),_                    responseStatus)__            }_        } catch (IOException e) {_            String msg = "Login error: response parse exception " + e.getMessage()__            throw new SalesforceException(msg, e)__        }_    };parses,login,response,allows,salesforce,security,handler,to,parse,a,login,request,for,a,failed,authentication,conversation;public,synchronized,void,parse,login,response,content,response,login,response,string,response,content,throws,salesforce,exception,final,int,response,status,login,response,get,status,try,switch,response,status,case,http,status,login,token,token,object,mapper,read,value,response,content,login,token,class,log,info,login,successful,access,token,token,get,access,token,instance,url,token,get,instance,url,for,salesforce,session,listener,listener,listeners,try,listener,on,login,access,token,instance,url,catch,throwable,t,log,warn,unexpected,error,from,listener,listener,t,get,message,break,case,http,status,final,login,error,error,object,mapper,read,value,response,content,login,error,class,final,string,error,code,error,get,error,final,string,msg,string,format,login,error,code,s,description,s,error,get,error,error,get,error,description,final,list,rest,error,errors,new,array,list,rest,error,errors,add,new,rest,error,error,code,msg,throw,new,salesforce,exception,errors,http,status,default,throw,new,salesforce,exception,string,format,login,error,status,s,reason,s,response,status,login,response,get,reason,response,status,catch,ioexception,e,string,msg,login,error,response,parse,exception,e,get,message,throw,new,salesforce,exception,msg,e
SalesforceSession -> public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent)         throws SalesforceException;1493991617;Parses login response, allows SalesforceSecurityHandler to parse a login request for a failed authentication_conversation.;public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent)_        throws SalesforceException {_        final int responseStatus = loginResponse.getStatus()___        try {_            switch (responseStatus) {_            case HttpStatus.OK_200:_                _                LoginToken token = objectMapper.readValue(responseContent, LoginToken.class)___                _                LOG.info("Login successful")__                accessToken = token.getAccessToken()__                instanceUrl = Optional.ofNullable(config.getInstanceUrl()).orElse(token.getInstanceUrl())___                _                for (SalesforceSessionListener listener : listeners) {_                    try {_                        listener.onLogin(accessToken, instanceUrl)__                    } catch (Throwable t) {_                        LOG.warn("Unexpected error from listener {}: {}", listener, t.getMessage())__                    }_                }__                break___            case HttpStatus.BAD_REQUEST_400:_                _                final LoginError error = objectMapper.readValue(responseContent, LoginError.class)__                final String errorCode = error.getError()__                final String msg = String.format("Login error code:[%s] description:[%s]", error.getError(),_                    error.getErrorDescription())__                final List<RestError> errors = new ArrayList<RestError>()__                errors.add(new RestError(errorCode, msg))__                throw new SalesforceException(errors, HttpStatus.BAD_REQUEST_400)___            default:_                throw new SalesforceException(_                    String.format("Login error status:[%s] reason:[%s]", responseStatus, loginResponse.getReason()),_                    responseStatus)__            }_        } catch (IOException e) {_            String msg = "Login error: response parse exception " + e.getMessage()__            throw new SalesforceException(msg, e)__        }_    };parses,login,response,allows,salesforce,security,handler,to,parse,a,login,request,for,a,failed,authentication,conversation;public,synchronized,void,parse,login,response,content,response,login,response,string,response,content,throws,salesforce,exception,final,int,response,status,login,response,get,status,try,switch,response,status,case,http,status,login,token,token,object,mapper,read,value,response,content,login,token,class,log,info,login,successful,access,token,token,get,access,token,instance,url,optional,of,nullable,config,get,instance,url,or,else,token,get,instance,url,for,salesforce,session,listener,listener,listeners,try,listener,on,login,access,token,instance,url,catch,throwable,t,log,warn,unexpected,error,from,listener,listener,t,get,message,break,case,http,status,final,login,error,error,object,mapper,read,value,response,content,login,error,class,final,string,error,code,error,get,error,final,string,msg,string,format,login,error,code,s,description,s,error,get,error,error,get,error,description,final,list,rest,error,errors,new,array,list,rest,error,errors,add,new,rest,error,error,code,msg,throw,new,salesforce,exception,errors,http,status,default,throw,new,salesforce,exception,string,format,login,error,status,s,reason,s,response,status,login,response,get,reason,response,status,catch,ioexception,e,string,msg,login,error,response,parse,exception,e,get,message,throw,new,salesforce,exception,msg,e
SalesforceSession -> public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent)         throws SalesforceException;1501746232;Parses login response, allows SalesforceSecurityHandler to parse a login request for a failed authentication_conversation.;public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent)_        throws SalesforceException {_        final int responseStatus = loginResponse.getStatus()___        try {_            switch (responseStatus) {_            case HttpStatus.OK_200:_                _                LoginToken token = objectMapper.readValue(responseContent, LoginToken.class)___                _                LOG.info("Login successful")__                accessToken = token.getAccessToken()__                instanceUrl = Optional.ofNullable(config.getInstanceUrl()).orElse(token.getInstanceUrl())__                _                int lastChar = instanceUrl.length() - 1__                if (instanceUrl.charAt(lastChar) == '/') {_                    instanceUrl = instanceUrl.substring(0, lastChar)__                }__                _                for (SalesforceSessionListener listener : listeners) {_                    try {_                        listener.onLogin(accessToken, instanceUrl)__                    } catch (Throwable t) {_                        LOG.warn("Unexpected error from listener {}: {}", listener, t.getMessage())__                    }_                }__                break___            case HttpStatus.BAD_REQUEST_400:_                _                final LoginError error = objectMapper.readValue(responseContent, LoginError.class)__                final String errorCode = error.getError()__                final String msg = String.format("Login error code:[%s] description:[%s]", error.getError(),_                    error.getErrorDescription())__                final List<RestError> errors = new ArrayList<RestError>()__                errors.add(new RestError(errorCode, msg))__                throw new SalesforceException(errors, HttpStatus.BAD_REQUEST_400)___            default:_                throw new SalesforceException(_                    String.format("Login error status:[%s] reason:[%s]", responseStatus, loginResponse.getReason()),_                    responseStatus)__            }_        } catch (IOException e) {_            String msg = "Login error: response parse exception " + e.getMessage()__            throw new SalesforceException(msg, e)__        }_    };parses,login,response,allows,salesforce,security,handler,to,parse,a,login,request,for,a,failed,authentication,conversation;public,synchronized,void,parse,login,response,content,response,login,response,string,response,content,throws,salesforce,exception,final,int,response,status,login,response,get,status,try,switch,response,status,case,http,status,login,token,token,object,mapper,read,value,response,content,login,token,class,log,info,login,successful,access,token,token,get,access,token,instance,url,optional,of,nullable,config,get,instance,url,or,else,token,get,instance,url,int,last,char,instance,url,length,1,if,instance,url,char,at,last,char,instance,url,instance,url,substring,0,last,char,for,salesforce,session,listener,listener,listeners,try,listener,on,login,access,token,instance,url,catch,throwable,t,log,warn,unexpected,error,from,listener,listener,t,get,message,break,case,http,status,final,login,error,error,object,mapper,read,value,response,content,login,error,class,final,string,error,code,error,get,error,final,string,msg,string,format,login,error,code,s,description,s,error,get,error,error,get,error,description,final,list,rest,error,errors,new,array,list,rest,error,errors,add,new,rest,error,error,code,msg,throw,new,salesforce,exception,errors,http,status,default,throw,new,salesforce,exception,string,format,login,error,status,s,reason,s,response,status,login,response,get,reason,response,status,catch,ioexception,e,string,msg,login,error,response,parse,exception,e,get,message,throw,new,salesforce,exception,msg,e
SalesforceSession -> public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent)         throws SalesforceException;1524063178;Parses login response, allows SalesforceSecurityHandler to parse a login request for a failed authentication_conversation.;public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent)_        throws SalesforceException {_        final int responseStatus = loginResponse.getStatus()___        try {_            switch (responseStatus) {_            case HttpStatus.OK_200:_                _                LoginToken token = objectMapper.readValue(responseContent, LoginToken.class)___                _                LOG.info("Login successful")__                accessToken = token.getAccessToken()__                instanceUrl = Optional.ofNullable(config.getInstanceUrl()).orElse(token.getInstanceUrl())__                _                int lastChar = instanceUrl.length() - 1__                if (instanceUrl.charAt(lastChar) == '/') {_                    instanceUrl = instanceUrl.substring(0, lastChar)__                }__                _                for (SalesforceSessionListener listener : listeners) {_                    try {_                        listener.onLogin(accessToken, instanceUrl)__                    } catch (Throwable t) {_                        LOG.warn("Unexpected error from listener {}: {}", listener, t.getMessage())__                    }_                }__                break___            case HttpStatus.BAD_REQUEST_400:_                _                final LoginError error = objectMapper.readValue(responseContent, LoginError.class)__                final String errorCode = error.getError()__                final String msg = String.format("Login error code:[%s] description:[%s]", error.getError(),_                    error.getErrorDescription())__                final List<RestError> errors = new ArrayList<>()__                errors.add(new RestError(errorCode, msg))__                throw new SalesforceException(errors, HttpStatus.BAD_REQUEST_400)___            default:_                throw new SalesforceException(_                    String.format("Login error status:[%s] reason:[%s]", responseStatus, loginResponse.getReason()),_                    responseStatus)__            }_        } catch (IOException e) {_            String msg = "Login error: response parse exception " + e.getMessage()__            throw new SalesforceException(msg, e)__        }_    };parses,login,response,allows,salesforce,security,handler,to,parse,a,login,request,for,a,failed,authentication,conversation;public,synchronized,void,parse,login,response,content,response,login,response,string,response,content,throws,salesforce,exception,final,int,response,status,login,response,get,status,try,switch,response,status,case,http,status,login,token,token,object,mapper,read,value,response,content,login,token,class,log,info,login,successful,access,token,token,get,access,token,instance,url,optional,of,nullable,config,get,instance,url,or,else,token,get,instance,url,int,last,char,instance,url,length,1,if,instance,url,char,at,last,char,instance,url,instance,url,substring,0,last,char,for,salesforce,session,listener,listener,listeners,try,listener,on,login,access,token,instance,url,catch,throwable,t,log,warn,unexpected,error,from,listener,listener,t,get,message,break,case,http,status,final,login,error,error,object,mapper,read,value,response,content,login,error,class,final,string,error,code,error,get,error,final,string,msg,string,format,login,error,code,s,description,s,error,get,error,error,get,error,description,final,list,rest,error,errors,new,array,list,errors,add,new,rest,error,error,code,msg,throw,new,salesforce,exception,errors,http,status,default,throw,new,salesforce,exception,string,format,login,error,status,s,reason,s,response,status,login,response,get,reason,response,status,catch,ioexception,e,string,msg,login,error,response,parse,exception,e,get,message,throw,new,salesforce,exception,msg,e
SalesforceSession -> public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent)         throws SalesforceException;1540108163;Parses login response, allows SalesforceSecurityHandler to parse a login request for a failed authentication_conversation.;public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent)_        throws SalesforceException {_        final int responseStatus = loginResponse.getStatus()___        try {_            switch (responseStatus) {_            case HttpStatus.OK_200:_                _                LoginToken token = objectMapper.readValue(responseContent, LoginToken.class)___                _                LOG.info("Login successful")__                accessToken = token.getAccessToken()__                instanceUrl = Optional.ofNullable(config.getInstanceUrl()).orElse(token.getInstanceUrl())__                _                int lastChar = instanceUrl.length() - 1__                if (instanceUrl.charAt(lastChar) == '/') {_                    instanceUrl = instanceUrl.substring(0, lastChar)__                }__                _                for (SalesforceSessionListener listener : listeners) {_                    try {_                        listener.onLogin(accessToken, instanceUrl)__                    } catch (Throwable t) {_                        LOG.warn("Unexpected error from listener {}: {}", listener, t.getMessage())__                    }_                }__                break___            case HttpStatus.BAD_REQUEST_400:_                _                final LoginError error = objectMapper.readValue(responseContent, LoginError.class)__                final String errorCode = error.getError()__                final String msg = String.format("Login error code:[%s] description:[%s]", error.getError(),_                    error.getErrorDescription())__                final List<RestError> errors = new ArrayList<>()__                errors.add(new RestError(errorCode, msg))__                throw new SalesforceException(errors, HttpStatus.BAD_REQUEST_400)___            default:_                throw new SalesforceException(_                    String.format("Login error status:[%s] reason:[%s]", responseStatus, loginResponse.getReason()),_                    responseStatus)__            }_        } catch (IOException e) {_            String msg = "Login error: response parse exception " + e.getMessage()__            throw new SalesforceException(msg, e)__        }_    };parses,login,response,allows,salesforce,security,handler,to,parse,a,login,request,for,a,failed,authentication,conversation;public,synchronized,void,parse,login,response,content,response,login,response,string,response,content,throws,salesforce,exception,final,int,response,status,login,response,get,status,try,switch,response,status,case,http,status,login,token,token,object,mapper,read,value,response,content,login,token,class,log,info,login,successful,access,token,token,get,access,token,instance,url,optional,of,nullable,config,get,instance,url,or,else,token,get,instance,url,int,last,char,instance,url,length,1,if,instance,url,char,at,last,char,instance,url,instance,url,substring,0,last,char,for,salesforce,session,listener,listener,listeners,try,listener,on,login,access,token,instance,url,catch,throwable,t,log,warn,unexpected,error,from,listener,listener,t,get,message,break,case,http,status,final,login,error,error,object,mapper,read,value,response,content,login,error,class,final,string,error,code,error,get,error,final,string,msg,string,format,login,error,code,s,description,s,error,get,error,error,get,error,description,final,list,rest,error,errors,new,array,list,errors,add,new,rest,error,error,code,msg,throw,new,salesforce,exception,errors,http,status,default,throw,new,salesforce,exception,string,format,login,error,status,s,reason,s,response,status,login,response,get,reason,response,status,catch,ioexception,e,string,msg,login,error,response,parse,exception,e,get,message,throw,new,salesforce,exception,msg,e
SalesforceSession -> public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent)         throws SalesforceException;1545056693;Parses login response, allows SalesforceSecurityHandler to parse a login request for a failed authentication_conversation.;public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent)_        throws SalesforceException {_        final int responseStatus = loginResponse.getStatus()___        try {_            switch (responseStatus) {_            case HttpStatus.OK_200:_                _                LoginToken token = objectMapper.readValue(responseContent, LoginToken.class)___                _                LOG.info("Login successful")__                accessToken = token.getAccessToken()__                instanceUrl = Optional.ofNullable(config.getInstanceUrl()).orElse(token.getInstanceUrl())__                _                int lastChar = instanceUrl.length() - 1__                if (instanceUrl.charAt(lastChar) == '/') {_                    instanceUrl = instanceUrl.substring(0, lastChar)__                }__                _                for (SalesforceSessionListener listener : listeners) {_                    try {_                        listener.onLogin(accessToken, instanceUrl)__                    } catch (Throwable t) {_                        LOG.warn("Unexpected error from listener {}: {}", listener, t.getMessage())__                    }_                }__                break___            case HttpStatus.BAD_REQUEST_400:_                _                final LoginError error = objectMapper.readValue(responseContent, LoginError.class)__                final String errorCode = error.getError()__                final String msg = String.format("Login error code:[%s] description:[%s]", error.getError(),_                    error.getErrorDescription())__                final List<RestError> errors = new ArrayList<>()__                errors.add(new RestError(errorCode, msg))__                throw new SalesforceException(errors, HttpStatus.BAD_REQUEST_400)___            default:_                throw new SalesforceException(_                    String.format("Login error status:[%s] reason:[%s]", responseStatus, loginResponse.getReason()),_                    responseStatus)__            }_        } catch (IOException e) {_            String msg = "Login error: response parse exception " + e.getMessage()__            throw new SalesforceException(msg, e)__        }_    };parses,login,response,allows,salesforce,security,handler,to,parse,a,login,request,for,a,failed,authentication,conversation;public,synchronized,void,parse,login,response,content,response,login,response,string,response,content,throws,salesforce,exception,final,int,response,status,login,response,get,status,try,switch,response,status,case,http,status,login,token,token,object,mapper,read,value,response,content,login,token,class,log,info,login,successful,access,token,token,get,access,token,instance,url,optional,of,nullable,config,get,instance,url,or,else,token,get,instance,url,int,last,char,instance,url,length,1,if,instance,url,char,at,last,char,instance,url,instance,url,substring,0,last,char,for,salesforce,session,listener,listener,listeners,try,listener,on,login,access,token,instance,url,catch,throwable,t,log,warn,unexpected,error,from,listener,listener,t,get,message,break,case,http,status,final,login,error,error,object,mapper,read,value,response,content,login,error,class,final,string,error,code,error,get,error,final,string,msg,string,format,login,error,code,s,description,s,error,get,error,error,get,error,description,final,list,rest,error,errors,new,array,list,errors,add,new,rest,error,error,code,msg,throw,new,salesforce,exception,errors,http,status,default,throw,new,salesforce,exception,string,format,login,error,status,s,reason,s,response,status,login,response,get,reason,response,status,catch,ioexception,e,string,msg,login,error,response,parse,exception,e,get,message,throw,new,salesforce,exception,msg,e
SalesforceSession -> public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent)         throws SalesforceException;1548319336;Parses login response, allows SalesforceSecurityHandler to parse a login request for a failed authentication_conversation.;public synchronized void parseLoginResponse(ContentResponse loginResponse, String responseContent)_        throws SalesforceException {_        final int responseStatus = loginResponse.getStatus()___        try {_            switch (responseStatus) {_            case HttpStatus.OK_200:_                _                LoginToken token = objectMapper.readValue(responseContent, LoginToken.class)___                _                LOG.info("Login successful")__                accessToken = token.getAccessToken()__                instanceUrl = Optional.ofNullable(config.getInstanceUrl()).orElse(token.getInstanceUrl())__                _                int lastChar = instanceUrl.length() - 1__                if (instanceUrl.charAt(lastChar) == '/') {_                    instanceUrl = instanceUrl.substring(0, lastChar)__                }__                _                for (SalesforceSessionListener listener : listeners) {_                    try {_                        listener.onLogin(accessToken, instanceUrl)__                    } catch (Throwable t) {_                        LOG.warn("Unexpected error from listener {}: {}", listener, t.getMessage())__                    }_                }__                break___            case HttpStatus.BAD_REQUEST_400:_                _                final LoginError error = objectMapper.readValue(responseContent, LoginError.class)__                final String errorCode = error.getError()__                final String msg = String.format("Login error code:[%s] description:[%s]", error.getError(),_                    error.getErrorDescription())__                final List<RestError> errors = new ArrayList<>()__                errors.add(new RestError(errorCode, msg))__                throw new SalesforceException(errors, HttpStatus.BAD_REQUEST_400)___            default:_                throw new SalesforceException(_                    String.format("Login error status:[%s] reason:[%s]", responseStatus, loginResponse.getReason()),_                    responseStatus)__            }_        } catch (IOException e) {_            String msg = "Login error: response parse exception " + e.getMessage()__            throw new SalesforceException(msg, e)__        }_    };parses,login,response,allows,salesforce,security,handler,to,parse,a,login,request,for,a,failed,authentication,conversation;public,synchronized,void,parse,login,response,content,response,login,response,string,response,content,throws,salesforce,exception,final,int,response,status,login,response,get,status,try,switch,response,status,case,http,status,login,token,token,object,mapper,read,value,response,content,login,token,class,log,info,login,successful,access,token,token,get,access,token,instance,url,optional,of,nullable,config,get,instance,url,or,else,token,get,instance,url,int,last,char,instance,url,length,1,if,instance,url,char,at,last,char,instance,url,instance,url,substring,0,last,char,for,salesforce,session,listener,listener,listeners,try,listener,on,login,access,token,instance,url,catch,throwable,t,log,warn,unexpected,error,from,listener,listener,t,get,message,break,case,http,status,final,login,error,error,object,mapper,read,value,response,content,login,error,class,final,string,error,code,error,get,error,final,string,msg,string,format,login,error,code,s,description,s,error,get,error,error,get,error,description,final,list,rest,error,errors,new,array,list,errors,add,new,rest,error,error,code,msg,throw,new,salesforce,exception,errors,http,status,default,throw,new,salesforce,exception,string,format,login,error,status,s,reason,s,response,status,login,response,get,reason,response,status,catch,ioexception,e,string,msg,login,error,response,parse,exception,e,get,message,throw,new,salesforce,exception,msg,e
