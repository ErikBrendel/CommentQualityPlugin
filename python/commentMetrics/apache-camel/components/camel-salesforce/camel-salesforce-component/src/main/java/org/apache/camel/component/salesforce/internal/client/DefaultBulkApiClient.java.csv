commented;modifiers;parameterAmount;loc;comment;code
false;public;3;12;;@Override public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {     JobInfo value = null.     if (response != null) {         try {             value = unmarshalResponse(response, post, JobInfo.class).         } catch (SalesforceException e) {             ex = e.         }     }     callback.onResponse(value, headers, ex). }
false;public;3;30;;@Override public void createJob(JobInfo request, Map<String, List<String>> headers, final JobInfoResponseCallback callback) {     // clear system fields if set     sanitizeJobRequest(request).     final Request post = getRequest(HttpMethod.POST, jobUrl(null), headers).     try {         marshalRequest(objectFactory.createJobInfo(request), post, APPLICATION_XML_UTF8).     } catch (SalesforceException e) {         callback.onResponse(null, Collections.emptyMap(), e).         return.     }     // make the call and parse the result in callback     doHttpRequest(post, new ClientResponseCallback() {          @Override         public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {             JobInfo value = null.             if (response != null) {                 try {                     value = unmarshalResponse(response, post, JobInfo.class).                 } catch (SalesforceException e) {                     ex = e.                 }             }             callback.onResponse(value, headers, ex).         }     }). }
true;private;1;19;// reset read only fields ;// reset read only fields private void sanitizeJobRequest(JobInfo request) {     request.setApexProcessingTime(null).     request.setApiActiveProcessingTime(null).     request.setApiVersion(null).     request.setCreatedById(null).     request.setCreatedDate(null).     request.setId(null).     request.setNumberBatchesCompleted(null).     request.setNumberBatchesFailed(null).     request.setNumberBatchesInProgress(null).     request.setNumberBatchesQueued(null).     request.setNumberBatchesTotal(null).     request.setNumberRecordsFailed(null).     request.setNumberRecordsProcessed(null).     request.setNumberRetries(null).     request.setState(null).     request.setSystemModstamp(null).     request.setSystemModstamp(null). }
false;public;3;10;;@Override public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {     JobInfo value = null.     try {         value = unmarshalResponse(response, get, JobInfo.class).     } catch (SalesforceException e) {         ex = e.     }     callback.onResponse(value, headers, ex). }
false;public;3;18;;@Override public void getJob(String jobId, Map<String, List<String>> headers, final JobInfoResponseCallback callback) {     final Request get = getRequest(HttpMethod.GET, jobUrl(jobId), headers).     // make the call and parse the result     doHttpRequest(get, new ClientResponseCallback() {          @Override         public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {             JobInfo value = null.             try {                 value = unmarshalResponse(response, get, JobInfo.class).             } catch (SalesforceException e) {                 ex = e.             }             callback.onResponse(value, headers, ex).         }     }). }
false;public;3;10;;@Override public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {     JobInfo value = null.     try {         value = unmarshalResponse(response, post, JobInfo.class).     } catch (SalesforceException e) {         ex = e.     }     callback.onResponse(value, headers, ex). }
false;public;3;27;;@Override public void closeJob(String jobId, Map<String, List<String>> headers, final JobInfoResponseCallback callback) {     final JobInfo request = new JobInfo().     request.setState(JobStateEnum.CLOSED).     final Request post = getRequest(HttpMethod.POST, jobUrl(jobId), headers).     try {         marshalRequest(objectFactory.createJobInfo(request), post, APPLICATION_XML_UTF8).     } catch (SalesforceException e) {         callback.onResponse(null, Collections.emptyMap(), e).         return.     }     // make the call and parse the result     doHttpRequest(post, new ClientResponseCallback() {          @Override         public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {             JobInfo value = null.             try {                 value = unmarshalResponse(response, post, JobInfo.class).             } catch (SalesforceException e) {                 ex = e.             }             callback.onResponse(value, headers, ex).         }     }). }
false;public;3;10;;@Override public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {     JobInfo value = null.     try {         value = unmarshalResponse(response, post, JobInfo.class).     } catch (SalesforceException e) {         ex = e.     }     callback.onResponse(value, headers, ex). }
false;public;3;27;;@Override public void abortJob(String jobId, Map<String, List<String>> headers, final JobInfoResponseCallback callback) {     final JobInfo request = new JobInfo().     request.setState(JobStateEnum.ABORTED).     final Request post = getRequest(HttpMethod.POST, jobUrl(jobId), headers).     try {         marshalRequest(objectFactory.createJobInfo(request), post, APPLICATION_XML_UTF8).     } catch (SalesforceException e) {         callback.onResponse(null, Collections.emptyMap(), e).         return.     }     // make the call and parse the result     doHttpRequest(post, new ClientResponseCallback() {          @Override         public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {             JobInfo value = null.             try {                 value = unmarshalResponse(response, post, JobInfo.class).             } catch (SalesforceException e) {                 ex = e.             }             callback.onResponse(value, headers, ex).         }     }). }
false;public;3;10;;@Override public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {     BatchInfo value = null.     try {         value = unmarshalResponse(response, post, BatchInfo.class).     } catch (SalesforceException e) {         ex = e.     }     callback.onResponse(value, headers, ex). }
false;public;5;21;;@Override public void createBatch(InputStream batchStream, String jobId, ContentType contentTypeEnum, Map<String, List<String>> headers, final BatchInfoResponseCallback callback) {     final Request post = getRequest(HttpMethod.POST, batchUrl(jobId, null), headers).     post.content(new InputStreamContentProvider(batchStream)).     post.header(HttpHeader.CONTENT_TYPE, getContentType(contentTypeEnum) + ".charset=" + StringUtil.__UTF8).     // make the call and parse the result     doHttpRequest(post, new ClientResponseCallback() {          @Override         public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {             BatchInfo value = null.             try {                 value = unmarshalResponse(response, post, BatchInfo.class).             } catch (SalesforceException e) {                 ex = e.             }             callback.onResponse(value, headers, ex).         }     }). }
false;public;3;10;;@Override public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {     BatchInfo value = null.     try {         value = unmarshalResponse(response, get, BatchInfo.class).     } catch (SalesforceException e) {         ex = e.     }     callback.onResponse(value, headers, ex). }
false;public;4;18;;@Override public void getBatch(String jobId, String batchId, Map<String, List<String>> headers, final BatchInfoResponseCallback callback) {     final Request get = getRequest(HttpMethod.GET, batchUrl(jobId, batchId), headers).     // make the call and parse the result     doHttpRequest(get, new ClientResponseCallback() {          @Override         public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {             BatchInfo value = null.             try {                 value = unmarshalResponse(response, get, BatchInfo.class).             } catch (SalesforceException e) {                 ex = e.             }             callback.onResponse(value, headers, ex).         }     }). }
false;public;3;10;;@Override public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {     BatchInfoList value = null.     try {         value = unmarshalResponse(response, get, BatchInfoList.class).     } catch (SalesforceException e) {         ex = e.     }     callback.onResponse(value != null ? value.getBatchInfo() : null, headers, ex). }
false;public;3;18;;@Override public void getAllBatches(String jobId, Map<String, List<String>> headers, final BatchInfoListResponseCallback callback) {     final Request get = getRequest(HttpMethod.GET, batchUrl(jobId, null), headers).     // make the call and parse the result     doHttpRequest(get, new ClientResponseCallback() {          @Override         public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {             BatchInfoList value = null.             try {                 value = unmarshalResponse(response, get, BatchInfoList.class).             } catch (SalesforceException e) {                 ex = e.             }             callback.onResponse(value != null ? value.getBatchInfo() : null, headers, ex).         }     }). }
false;public;3;4;;@Override public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {     callback.onResponse(response, headers, ex). }
false;public;4;12;;@Override public void getRequest(String jobId, String batchId, Map<String, List<String>> headers, final StreamResponseCallback callback) {     final Request get = getRequest(HttpMethod.GET, batchRequestUrl(jobId, batchId, null), headers).     // make the call and parse the result     doHttpRequest(get, new ClientResponseCallback() {          @Override         public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {             callback.onResponse(response, headers, ex).         }     }). }
false;public;3;4;;@Override public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {     callback.onResponse(response, headers, ex). }
false;public;4;12;;@Override public void getResults(String jobId, String batchId, Map<String, List<String>> headers, final StreamResponseCallback callback) {     final Request get = getRequest(HttpMethod.GET, batchResultUrl(jobId, batchId, null), headers).     // make the call and return the result     doHttpRequest(get, new ClientResponseCallback() {          @Override         public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {             callback.onResponse(response, headers, ex).         }     }). }
false;public;3;10;;@Override public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {     BatchInfo value = null.     try {         value = unmarshalResponse(response, post, BatchInfo.class).     } catch (SalesforceException e) {         ex = e.     }     callback.onResponse(value, headers, ex). }
false;public;5;28;;@Override public void createBatchQuery(String jobId, String soqlQuery, ContentType jobContentType, Map<String, List<String>> headers, final BatchInfoResponseCallback callback) {     final Request post = getRequest(HttpMethod.POST, batchUrl(jobId, null), headers).     final byte[] queryBytes.     try {         queryBytes = soqlQuery.getBytes(StringUtil.__UTF8).     } catch (UnsupportedEncodingException e) {         callback.onResponse(null, Collections.emptyMap(), new SalesforceException("Unexpected exception: " + e.getMessage(), e)).         return.     }     post.content(new BytesContentProvider(queryBytes)).     post.header(HttpHeader.CONTENT_TYPE, getContentType(jobContentType) + ".charset=" + StringUtil.__UTF8).     // make the call and parse the result     doHttpRequest(post, new ClientResponseCallback() {          @Override         public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {             BatchInfo value = null.             try {                 value = unmarshalResponse(response, post, BatchInfo.class).             } catch (SalesforceException e) {                 ex = e.             }             callback.onResponse(value, headers, ex).         }     }). }
false;public;3;10;;@Override public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {     QueryResultList value = null.     try {         value = unmarshalResponse(response, get, QueryResultList.class).     } catch (SalesforceException e) {         ex = e.     }     callback.onResponse(value != null ? Collections.unmodifiableList(value.getResult()) : null, headers, ex). }
false;public;4;19;;@Override public void getQueryResultIds(String jobId, String batchId, Map<String, List<String>> headers, final QueryResultIdsCallback callback) {     final Request get = getRequest(HttpMethod.GET, batchResultUrl(jobId, batchId, null), headers).     // make the call and parse the result     doHttpRequest(get, new ClientResponseCallback() {          @Override         public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {             QueryResultList value = null.             try {                 value = unmarshalResponse(response, get, QueryResultList.class).             } catch (SalesforceException e) {                 ex = e.             }             callback.onResponse(value != null ? Collections.unmodifiableList(value.getResult()) : null, headers, ex).         }     }). }
false;public;3;4;;@Override public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {     callback.onResponse(response, headers, ex). }
false;public;5;13;;@Override public void getQueryResult(String jobId, String batchId, String resultId, Map<String, List<String>> headers, final StreamResponseCallback callback) {     final Request get = getRequest(HttpMethod.GET, batchResultUrl(jobId, batchId, resultId), headers).     // make the call and parse the result     doHttpRequest(get, new ClientResponseCallback() {          @Override         public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {             callback.onResponse(response, headers, ex).         }     }). }
false;protected;1;5;;@Override protected void setAccessToken(Request request) {     // replace old token     request.getHeaders().put(TOKEN_HEADER, accessToken). }
false;protected;2;18;;@Override protected void doHttpRequest(Request request, ClientResponseCallback callback) {     // set access token for all requests     setAccessToken(request).     // set default charset     request.header(HttpHeader.ACCEPT_CHARSET, StringUtil.__UTF8).     // check if the default accept content type must be used     if (!request.getHeaders().contains(HttpHeader.ACCEPT)) {         final String contentType = getContentType(DEFAULT_ACCEPT_TYPE).         request.header(HttpHeader.ACCEPT, contentType).     // request content type and charset is set by the request entity     }     super.doHttpRequest(request, callback). }
false;private,static;1;23;;private static String getContentType(ContentType type) {     String result = null.     switch(type) {         case CSV:             result = "text/csv".             break.         case XML:             result = "application/xml".             break.         case ZIP_CSV:         case ZIP_XML:             result = type.toString().toLowerCase().replace('_', '/').             break.         default:             break.     }     return result. }
false;protected;2;16;;@Override protected SalesforceException createRestException(Response response, InputStream responseContent) {     // this must be of type Error     try {         final Error error = unmarshalResponse(responseContent, response.getRequest(), Error.class).         final RestError restError = new RestError().         restError.setErrorCode(error.getExceptionCode()).         restError.setMessage(error.getExceptionMessage()).         return new SalesforceException(Arrays.asList(restError), response.getStatus()).     } catch (SalesforceException e) {         String msg = "Error un-marshaling Salesforce Error: " + e.getMessage().         return new SalesforceException(msg, e).     } }
false;private;3;18;;private <T> T unmarshalResponse(InputStream response, Request request, Class<T> resultClass) throws SalesforceException {     try {         Unmarshaller unmarshaller = context.createUnmarshaller().         JAXBElement<T> result = unmarshaller.unmarshal(new StreamSource(response), resultClass).         return result.getValue().     } catch (JAXBException e) {         throw new SalesforceException(String.format("Error unmarshaling response {%s:%s} : %s", request.getMethod(), request.getURI(), e.getMessage()), e).     } catch (IllegalArgumentException e) {         throw new SalesforceException(String.format("Error unmarshaling response for {%s:%s} : %s", request.getMethod(), request.getURI(), e.getMessage()), e).     } }
false;private;3;19;;private void marshalRequest(Object input, Request request, String contentType) throws SalesforceException {     try {         Marshaller marshaller = context.createMarshaller().         ByteArrayOutputStream byteStream = new ByteArrayOutputStream().         marshaller.marshal(input, byteStream).         request.content(new BytesContentProvider(contentType, byteStream.toByteArray())).     } catch (JAXBException e) {         throw new SalesforceException(String.format("Error marshaling request for {%s:%s} : %s", request.getMethod(), request.getURI(), e.getMessage()), e).     } catch (IllegalArgumentException e) {         throw new SalesforceException(String.format("Error marshaling request for {%s:%s} : %s", request.getMethod(), request.getURI(), e.getMessage()), e).     } }
false;private;1;7;;private String jobUrl(String jobId) {     if (jobId != null) {         return super.instanceUrl + "/services/async/" + version + "/job/" + jobId.     } else {         return super.instanceUrl + "/services/async/" + version + "/job".     } }
false;private;2;7;;private String batchUrl(String jobId, String batchId) {     if (batchId != null) {         return jobUrl(jobId) + "/batch/" + batchId.     } else {         return jobUrl(jobId) + "/batch".     } }
false;private;3;7;;private String batchResultUrl(String jobId, String batchId, String resultId) {     if (resultId != null) {         return batchUrl(jobId, batchId) + "/result/" + resultId.     } else {         return batchUrl(jobId, batchId) + "/result".     } }
false;private;3;7;;private String batchRequestUrl(String jobId, String batchId, String requestId) {     if (requestId != null) {         return batchUrl(jobId, batchId) + "/request/" + requestId.     } else {         return batchUrl(jobId, batchId) + "/request".     } }
