commented;modifiers;parameterAmount;loc;comment;code
false;public;3;12;;@Override public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {     List<RecentReport> recentReports = null.     if (response != null) {         try {             recentReports = unmarshalResponse(response, request, TypeReferences.RECENT_REPORT_LIST_TYPE).         } catch (SalesforceException e) {             ex = e.         }     }     callback.onResponse(recentReports, headers, ex). }
false;public;2;20;;@Override public void getRecentReports(final Map<String, List<String>> headers, final RecentReportsResponseCallback callback) {     final Request request = getRequest(HttpMethod.GET, reportsUrl(), headers).     doHttpRequest(request, new ClientResponseCallback() {          @Override         public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {             List<RecentReport> recentReports = null.             if (response != null) {                 try {                     recentReports = unmarshalResponse(response, request, TypeReferences.RECENT_REPORT_LIST_TYPE).                 } catch (SalesforceException e) {                     ex = e.                 }             }             callback.onResponse(recentReports, headers, ex).         }     }). }
false;public;3;10;;@Override public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {     ReportDescription reportDescription = null.     try {         reportDescription = unmarshalResponse(response, request, ReportDescription.class).     } catch (SalesforceException e) {         ex = e.     }     callback.onResponse(reportDescription, headers, ex). }
false;public;3;18;;@Override public void getReportDescription(String reportId, final Map<String, List<String>> headers, final ReportDescriptionResponseCallback callback) {     final Request request = getRequest(HttpMethod.GET, reportsDescribeUrl(reportId), headers).     doHttpRequest(request, new ClientResponseCallback() {          @Override         public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {             ReportDescription reportDescription = null.             try {                 reportDescription = unmarshalResponse(response, request, ReportDescription.class).             } catch (SalesforceException e) {                 ex = e.             }             callback.onResponse(reportDescription, headers, ex).         }     }). }
false;public;3;10;;@Override public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {     SyncReportResults reportResults = null.     try {         reportResults = unmarshalResponse(response, request, SyncReportResults.class).     } catch (SalesforceException e) {         ex = e.     }     callback.onResponse(reportResults, headers, ex). }
false;public;5;34;;@Override public void executeSyncReport(String reportId, Boolean includeDetails, ReportMetadata reportMetadata, final Map<String, List<String>> headers, final ReportResultsResponseCallback callback) {     final boolean useGet = reportMetadata == null.     final Request request = getRequest(useGet ? HttpMethod.GET : HttpMethod.POST, reportsUrl(reportId, includeDetails), headers).     // set POST data     if (!useGet) {         try {             // wrap reportMetadata in a map             final HashMap<String, Object> input = new HashMap<>().             input.put("reportMetadata", reportMetadata).             marshalRequest(input, request).         } catch (SalesforceException e) {             callback.onResponse(null, Collections.emptyMap(), e).             return.         }     }     doHttpRequest(request, new ClientResponseCallback() {          @Override         public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {             SyncReportResults reportResults = null.             try {                 reportResults = unmarshalResponse(response, request, SyncReportResults.class).             } catch (SalesforceException e) {                 ex = e.             }             callback.onResponse(reportResults, headers, ex).         }     }). }
false;public;3;10;;@Override public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {     ReportInstance reportInstance = null.     try {         reportInstance = unmarshalResponse(response, request, ReportInstance.class).     } catch (SalesforceException e) {         ex = e.     }     callback.onResponse(reportInstance, headers, ex). }
false;public;5;33;;@Override public void executeAsyncReport(String reportId, Boolean includeDetails, ReportMetadata reportMetadata, final Map<String, List<String>> headers, final ReportInstanceResponseCallback callback) {     final Request request = getRequest(HttpMethod.POST, reportInstancesUrl(reportId, includeDetails), headers).     // set POST data     if (reportMetadata != null) {         try {             // wrap reportMetadata in a map             final HashMap<String, Object> input = new HashMap<>().             input.put("reportMetadata", reportMetadata).             marshalRequest(input, request).         } catch (SalesforceException e) {             callback.onResponse(null, Collections.emptyMap(), e).             return.         }     }     doHttpRequest(request, new ClientResponseCallback() {          @Override         public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {             ReportInstance reportInstance = null.             try {                 reportInstance = unmarshalResponse(response, request, ReportInstance.class).             } catch (SalesforceException e) {                 ex = e.             }             callback.onResponse(reportInstance, headers, ex).         }     }). }
false;public;3;12;;@Override public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {     List<ReportInstance> reportInstances = null.     if (response != null) {         try {             reportInstances = unmarshalResponse(response, request, TypeReferences.REPORT_INSTANCE_LIST_TYPE).         } catch (SalesforceException e) {             ex = e.         }     }     callback.onResponse(reportInstances, headers, ex). }
false;public;3;20;;@Override public void getReportInstances(String reportId, final Map<String, List<String>> headers, final ReportInstanceListResponseCallback callback) {     final Request request = getRequest(HttpMethod.GET, reportInstancesUrl(reportId), headers).     doHttpRequest(request, new ClientResponseCallback() {          @Override         public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {             List<ReportInstance> reportInstances = null.             if (response != null) {                 try {                     reportInstances = unmarshalResponse(response, request, TypeReferences.REPORT_INSTANCE_LIST_TYPE).                 } catch (SalesforceException e) {                     ex = e.                 }             }             callback.onResponse(reportInstances, headers, ex).         }     }). }
false;public;3;10;;@Override public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {     AsyncReportResults reportResults = null.     try {         reportResults = unmarshalResponse(response, request, AsyncReportResults.class).     } catch (SalesforceException e) {         ex = e.     }     callback.onResponse(reportResults, headers, ex). }
false;public;4;20;;@Override public void getReportResults(String reportId, String instanceId, final Map<String, List<String>> headers, final ReportResultsResponseCallback callback) {     final Request request = getRequest(HttpMethod.GET, reportInstancesUrl(reportId, instanceId), headers).     doHttpRequest(request, new ClientResponseCallback() {          @Override         public void onResponse(InputStream response, Map<String, String> headers, SalesforceException ex) {             AsyncReportResults reportResults = null.             try {                 reportResults = unmarshalResponse(response, request, AsyncReportResults.class).             } catch (SalesforceException e) {                 ex = e.             }             callback.onResponse(reportResults, headers, ex).         }     }). }
false;private;0;4;;private String reportsUrl() {     // NOTE the prefix 'v' for the version number     return instanceUrl + "/services/data/v" + version + "/analytics/reports". }
false;private;1;3;;private String reportsDescribeUrl(String reportId) {     return reportsUrl(reportId) + "/describe". }
false;private;1;3;;private String reportsUrl(String reportId) {     return reportsUrl() + "/" + reportId. }
false;private;2;4;;private String reportsUrl(String reportId, Boolean includeDetails) {     return includeDetails == null ? reportsUrl(reportId) : reportsUrl(reportId) + INCLUDE_DETAILS_QUERY_PARAM + includeDetails. }
false;private;1;3;;private String reportInstancesUrl(String reportId) {     return reportsUrl(reportId) + "/instances". }
false;private;2;4;;private String reportInstancesUrl(String reportId, Boolean includeDetails) {     return includeDetails == null ? reportInstancesUrl(reportId) : reportInstancesUrl(reportId) + INCLUDE_DETAILS_QUERY_PARAM + includeDetails. }
false;private;2;3;;private String reportInstancesUrl(String reportId, String instanceId) {     return reportInstancesUrl(reportId) + "/" + instanceId. }
false;protected;1;5;;@Override protected void setAccessToken(Request request) {     // replace old token     request.getHeaders().put(HttpHeader.AUTHORIZATION, TOKEN_PREFIX + accessToken). }
false;protected;2;31;;@Override protected SalesforceException createRestException(Response response, InputStream responseContent) {     final int statusCode = response.getStatus().     try {         if (responseContent != null) {             // unmarshal RestError             final List<RestError> errors = readErrorsFrom(responseContent, PayloadFormat.JSON, objectMapper, null).             if (statusCode == HttpStatus.NOT_FOUND_404) {                 return new NoSuchSObjectException(errors).             }             return new SalesforceException(errors, statusCode).         }     } catch (UnsupportedEncodingException e) {         // log and ignore         String msg = "Unexpected Error parsing JSON error response body + [" + responseContent + "] : " + e.getMessage().         log.warn(msg, e).     } catch (IOException e) {         // log and ignore         String msg = "Unexpected Error parsing JSON error response body + [" + responseContent + "] : " + e.getMessage().         log.warn(msg, e).     }     // just report HTTP status info     String message = String.format("Unexpected error: %s, with content: %s", response.getReason(), responseContent).     return new SalesforceException(message, statusCode). }
false;protected;2;13;;@Override protected void doHttpRequest(Request request, ClientResponseCallback callback) {     // set access token for all requests     setAccessToken(request).     // set request and response content type and charset, which is always JSON for analytics API     request.header(HttpHeader.CONTENT_TYPE, APPLICATION_JSON_UTF8).     request.header(HttpHeader.ACCEPT, APPLICATION_JSON_UTF8).     request.header(HttpHeader.ACCEPT_CHARSET, StringUtil.__UTF8).     super.doHttpRequest(request, callback). }
false;private;2;10;;private void marshalRequest(Object input, Request request) throws SalesforceException {     try {         request.content(new BytesContentProvider(objectMapper.writeValueAsBytes(input))).     } catch (IOException e) {         throw new SalesforceException(String.format("Error marshaling request for {%s:%s} : %s", request.getMethod(), request.getURI(), e.getMessage()), e).     } }
false;private;3;13;;private <T> T unmarshalResponse(InputStream response, Request request, TypeReference<T> responseTypeReference) throws SalesforceException {     try {         return objectMapper.readValue(response, responseTypeReference).     } catch (IOException e) {         throw new SalesforceException(String.format("Error unmarshaling response {%s:%s} : %s", request.getMethod(), request.getURI(), e.getMessage()), e).     } }
false;private;3;16;;private <T> T unmarshalResponse(InputStream response, Request request, Class<T> responseClass) throws SalesforceException {     if (response == null) {         return null.     }     try {         return objectMapper.readValue(response, responseClass).     } catch (IOException e) {         throw new SalesforceException(String.format("Error unmarshaling response {%s:%s} : %s", request.getMethod(), request.getURI(), e.getMessage()), e).     } }
