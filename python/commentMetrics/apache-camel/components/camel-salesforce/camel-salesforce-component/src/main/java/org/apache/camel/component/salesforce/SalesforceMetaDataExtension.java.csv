commented;modifiers;parameterAmount;loc;comment;code
false;;1;1;;JsonSchema map(InputStream stream) throws IOException.
false;public;1;11;;@Override public Optional<MetaData> meta(final Map<String, Object> parameters) {     final JsonSchema schema = schemaFor(parameters).     final MetaData metaData = //      MetaDataBuilder.on(getCamelContext()).withAttribute(MetaData.CONTENT_TYPE, //      "application/schema+json").withAttribute(MetaData.JAVA_TYPE, //      JsonNode.class).withPayload(schema).build().     return Optional.ofNullable(metaData). }
false;;1;3;;JsonSchema allObjectsSchema(final Map<String, Object> parameters) throws Exception {     return SalesforceClientTemplate.invoke(getCamelContext(), parameters, client -> fetchAllObjectsSchema(client)). }
false;;1;12;;JsonSchema schemaFor(final Map<String, Object> parameters) {     try {         if (parameters.containsKey(SalesforceEndpointConfig.SOBJECT_NAME)) {             return singleObjectSchema(parameters).         }         return allObjectsSchema(parameters).     } catch (final Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
false;;1;4;;JsonSchema singleObjectSchema(final Map<String, Object> parameters) throws Exception {     return SalesforceClientTemplate.invoke(getCamelContext(), parameters, client -> fetchSingleObjectSchema(client, (String) parameters.get(SalesforceEndpointConfig.SOBJECT_NAME))). }
false;static;2;21;;static JsonSchema fetch(final Consumer<ResponseCallback> restMethod, final SchemaMapper callback) {     final CompletableFuture<JsonSchema> ret = new CompletableFuture<>().     restMethod.accept((response, headers, exception) -> {         if (exception != null) {             ret.completeExceptionally(exception).         } else {             try (final InputStream is = response) {                 ret.complete(callback.map(is)).             } catch (final IOException e) {                 ret.completeExceptionally(e).             }         }     }).     try {         return ret.get().     } catch (InterruptedException | ExecutionException e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
false;static;1;3;;static JsonSchema fetchAllObjectsSchema(final RestClient client) {     return fetch(callback -> client.getGlobalObjects(Collections.emptyMap(), callback), SalesforceMetaDataExtension::mapAllObjectsSchema). }
false;static;2;4;;static JsonSchema fetchSingleObjectSchema(final RestClient client, final String objectName) {     return fetch(callback -> client.getDescription(objectName, Collections.emptyMap(), callback), SalesforceMetaDataExtension::mapSingleObjectSchema). }
false;static;1;5;;static JsonSchema mapAllObjectsSchema(final InputStream stream) throws IOException {     final GlobalObjects globalObjects = MAPPER.readerFor(GlobalObjects.class).readValue(stream).     return JsonUtils.getGlobalObjectsJsonSchemaAsSchema(globalObjects). }
false;static;1;5;;static JsonSchema mapSingleObjectSchema(final InputStream stream) throws IOException {     final SObjectDescription description = MAPPER.readerFor(SObjectDescription.class).readValue(stream).     return JsonUtils.getSObjectJsonSchemaAsSchema(description, true). }
