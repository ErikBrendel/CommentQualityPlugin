commented;modifiers;parameterAmount;loc;comment;code
false;static;1;7;;static String composeFieldsParameter(final String... fields) {     if (fields != null && fields.length > 0) {         return "?fields=" + Arrays.stream(fields).collect(Collectors.joining(",")).     } else {         return "".     } }
true;public;1;5;/**  * Add create SObject to the batch request.  *  * @param data  *            object to create  *  * @return this batch builder  */ ;/**  * Add create SObject to the batch request.  *  * @param data  *            object to create  *  * @return this batch builder  */ public SObjectBatch addCreate(final AbstractDescribedSObjectBase data) {     addBatchRequest(new BatchRequest(Method.POST, apiPrefix + "/sobjects/" + typeOf(data) + "/", data)).     return this. }
true;public;2;5;/**  * Add delete SObject with identifier to the batch request.  *  * @param type  *            type of SObject  * @param id  *            identifier of the object  * @return this batch builder  */ ;/**  * Add delete SObject with identifier to the batch request.  *  * @param type  *            type of SObject  * @param id  *            identifier of the object  * @return this batch builder  */ public SObjectBatch addDelete(final String type, final String id) {     addBatchRequest(new BatchRequest(Method.DELETE, rowBaseUrl(type, id))).     return this. }
true;public;2;5;/**  * Generic way to add requests to batch. Given URL starts from the version, so in order to retrieve SObject specify  * just {@code /sobjects/Account/identifier} which results in  * {@code /services/data/v37.0/sobjects/Account/identifier}. Note the leading slash.  *  * @param method  *            HTTP method  * @param url  *            URL starting from the version  * @return this batch builder  */ ;/**  * Generic way to add requests to batch. Given URL starts from the version, so in order to retrieve SObject specify  * just {@code /sobjects/Account/identifier} which results in  * {@code /services/data/v37.0/sobjects/Account/identifier}. Note the leading slash.  *  * @param method  *            HTTP method  * @param url  *            URL starting from the version  * @return this batch builder  */ public SObjectBatch addGeneric(final Method method, final String url) {     addGeneric(method, url, null).     return this. }
true;public;3;5;/**  * Generic way to add requests to batch with {@code richInput} payload. Given URL starts from the version, so in  * order to update SObject specify just {@code /sobjects/Account/identifier} which results in  * {@code /services/data/v37.0/sobjects/Account/identifier}. Note the leading slash.  *  * @param method  *            HTTP method  * @param url  *            URL starting from the version  * @param richInput  *            body of the request, to be placed in richInput  * @return this batch builder  */ ;/**  * Generic way to add requests to batch with {@code richInput} payload. Given URL starts from the version, so in  * order to update SObject specify just {@code /sobjects/Account/identifier} which results in  * {@code /services/data/v37.0/sobjects/Account/identifier}. Note the leading slash.  *  * @param method  *            HTTP method  * @param url  *            URL starting from the version  * @param richInput  *            body of the request, to be placed in richInput  * @return this batch builder  */ public SObjectBatch addGeneric(final Method method, final String url, final Object richInput) {     addBatchRequest(new BatchRequest(method, apiPrefix + url, richInput)).     return this. }
true;public;3;7;/**  * Add field retrieval of an SObject by identifier to the batch request.  *  * @param type  *            type of SObject  * @param id  *            identifier of SObject  * @param fields  *            to return  * @return this batch builder  */ ;/**  * Add field retrieval of an SObject by identifier to the batch request.  *  * @param type  *            type of SObject  * @param id  *            identifier of SObject  * @param fields  *            to return  * @return this batch builder  */ public SObjectBatch addGet(final String type, final String id, final String... fields) {     final String fieldsParameter = composeFieldsParameter(fields).     addBatchRequest(new BatchRequest(Method.GET, rowBaseUrl(type, id) + fieldsParameter)).     return this. }
true;public;3;5;/**  * Add field retrieval of an SObject by external identifier to the batch request.  *  * @param type  *            type of SObject  * @param fieldName  *            external identifier field name  * @param fieldValue  *            external identifier field value  * @param fields  *            to return  * @return this batch builder  */ ;/**  * Add field retrieval of an SObject by external identifier to the batch request.  *  * @param type  *            type of SObject  * @param fieldName  *            external identifier field name  * @param fieldValue  *            external identifier field value  * @param fields  *            to return  * @return this batch builder  */ public SObjectBatch addGetByExternalId(final String type, final String fieldName, final String fieldValue) {     addBatchRequest(new BatchRequest(Method.GET, rowBaseUrl(type, fieldName, fieldValue))).     return this. }
true;public;4;11;/**  * Add retrieval of related SObject fields by identifier. For example {@code Account} has a relation to  * {@code CreatedBy}. To fetch fields from that related object ({@code User} SObject) use: <blockquote>  *  * <pre>  * {@code batch.addGetRelated("Account", identifier, "CreatedBy", "Name", "Id")}  * </pre>  *  * </blockquote>  *  * @param type  *            type of SObject  * @param id  *            identifier of SObject  * @param relation  *            name of the related SObject field  * @param fields  *            to return  * @return this batch builder  */ ;/**  * Add retrieval of related SObject fields by identifier. For example {@code Account} has a relation to  * {@code CreatedBy}. To fetch fields from that related object ({@code User} SObject) use: <blockquote>  *  * <pre>  * {@code batch.addGetRelated("Account", identifier, "CreatedBy", "Name", "Id")}  * </pre>  *  * </blockquote>  *  * @param type  *            type of SObject  * @param id  *            identifier of SObject  * @param relation  *            name of the related SObject field  * @param fields  *            to return  * @return this batch builder  */ public SObjectBatch addGetRelated(final String type, final String id, final String relation, final String... fields) {     version.requireAtLeast(36, 0).     final String fieldsParameter = composeFieldsParameter(fields).     addBatchRequest(new BatchRequest(Method.GET, rowBaseUrl(type, id) + "/" + notEmpty(relation, "relation") + fieldsParameter)).     return this. }
true;public;0;5;/**  * Add retrieval of limits to the batch.  *  * @return this batch builder  */ ;/**  * Add retrieval of limits to the batch.  *  * @return this batch builder  */ public SObjectBatch addLimits() {     addBatchRequest(new BatchRequest(Method.GET, apiPrefix + "/limits/")).     return this. }
true;public;1;5;/**  * Add retrieval of SObject records by query to the batch.  *  * @param query  *            SOQL query to execute  * @return this batch builder  */ ;/**  * Add retrieval of SObject records by query to the batch.  *  * @param query  *            SOQL query to execute  * @return this batch builder  */ public SObjectBatch addQuery(final String query) {     addBatchRequest(new BatchRequest(Method.GET, apiPrefix + "/query/?q=" + notEmpty(query, "query"))).     return this. }
true;public;1;5;/**  * Add retrieval of all SObject records by query to the batch.  *  * @param query  *            SOQL query to execute  * @return this batch builder  */ ;/**  * Add retrieval of all SObject records by query to the batch.  *  * @param query  *            SOQL query to execute  * @return this batch builder  */ public SObjectBatch addQueryAll(final String query) {     addBatchRequest(new BatchRequest(Method.GET, apiPrefix + "/queryAll/?q=" + notEmpty(query, "query"))).     return this. }
true;public;1;6;/**  * Add retrieval of SObject records by search to the batch.  *  * @param query  *            SOSL search to execute  * @return this batch builder  */ ;/**  * Add retrieval of SObject records by search to the batch.  *  * @param query  *            SOSL search to execute  * @return this batch builder  */ public SObjectBatch addSearch(final String searchString) {     addBatchRequest(new BatchRequest(Method.GET, apiPrefix + "/search/?q=" + notEmpty(searchString, "searchString"))).     return this. }
true;public;3;5;/**  * Add update of SObject record to the batch. The given {@code data} parameter must contain only the fields that  * need updating and must not contain the {@code Id} field. So set any fields to {@code null} that you do not want  * changed along with {@code Id} field.  *  * @param type  *            type of SObject  * @param id  *            identifier of SObject  * @param data  *            SObject with fields to change  * @return this batch builder  */ ;/**  * Add update of SObject record to the batch. The given {@code data} parameter must contain only the fields that  * need updating and must not contain the {@code Id} field. So set any fields to {@code null} that you do not want  * changed along with {@code Id} field.  *  * @param type  *            type of SObject  * @param id  *            identifier of SObject  * @param data  *            SObject with fields to change  * @return this batch builder  */ public SObjectBatch addUpdate(final String type, final String id, final AbstractSObjectBase data) {     addBatchRequest(new BatchRequest(Method.PATCH, rowBaseUrl(type, notEmpty(id, "data.Id")), data)).     return this. }
true;public;4;7;/**  * Add update of SObject record by external identifier to the batch. The given {@code data} parameter must contain  * only the fields that need updating and must not contain the {@code Id} field. So set any fields to {@code null}  * that you do not want changed along with {@code Id} field.  *  * @param type  *            type of SObject  * @param fieldName  *            name of the field holding the external identifier  * @param id  *            external identifier value  * @param data  *            SObject with fields to change  * @return this batch builder  */ ;/**  * Add update of SObject record by external identifier to the batch. The given {@code data} parameter must contain  * only the fields that need updating and must not contain the {@code Id} field. So set any fields to {@code null}  * that you do not want changed along with {@code Id} field.  *  * @param type  *            type of SObject  * @param fieldName  *            name of the field holding the external identifier  * @param id  *            external identifier value  * @param data  *            SObject with fields to change  * @return this batch builder  */ public SObjectBatch addUpdateByExternalId(final String type, final String fieldName, final String fieldValue, final AbstractSObjectBase data) {     addBatchRequest(new BatchRequest(Method.PATCH, rowBaseUrl(type, fieldName, fieldValue), data)).     return this. }
true;public;4;5;/**  * Add insert or update of SObject record by external identifier to the batch. The given {@code data} parameter must  * contain only the fields that need updating and must not contain the {@code Id} field. So set any fields to  * {@code null} that you do not want changed along with {@code Id} field.  *  * @param type  *            type of SObject  * @param fieldName  *            name of the field holding the external identifier  * @param id  *            external identifier value  * @param data  *            SObject with fields to change  * @return this batch builder  */ ;/**  * Add insert or update of SObject record by external identifier to the batch. The given {@code data} parameter must  * contain only the fields that need updating and must not contain the {@code Id} field. So set any fields to  * {@code null} that you do not want changed along with {@code Id} field.  *  * @param type  *            type of SObject  * @param fieldName  *            name of the field holding the external identifier  * @param id  *            external identifier value  * @param data  *            SObject with fields to change  * @return this batch builder  */ public SObjectBatch addUpsertByExternalId(final String type, final String fieldName, final String fieldValue, final AbstractSObjectBase data) {     return addUpdateByExternalId(type, fieldName, fieldValue, data). }
true;public;0;3;/**  * Fetches batch requests contained in this batch.  *  * @return all requests  */ ;/**  * Fetches batch requests contained in this batch.  *  * @return all requests  */ public List<BatchRequest> getBatchRequests() {     return Collections.unmodifiableList(batchRequests). }
true;public;0;4;/**  * Version of Salesforce API for this batch request.  *  * @return the version  */ ;/**  * Version of Salesforce API for this batch request.  *  * @return the version  */ @JsonIgnore public Version getVersion() {     return version. }
true;public;0;8;/**  * Returns all object types nested within this batch, needed for serialization.  *  * @return all object types in this batch  */ ;/**  * Returns all object types nested within this batch, needed for serialization.  *  * @return all object types in this batch  */ public Class[] objectTypes() {     final Set<Class<?>> types = Stream.concat(Stream.of(SObjectBatch.class, BatchRequest.class), batchRequests.stream().map(BatchRequest::getRichInput).filter(Objects::nonNull).map(Object::getClass)).collect(Collectors.toSet()).     return types.toArray(new Class[types.size()]). }
false;;1;7;;void addBatchRequest(final BatchRequest batchRequest) {     if (batchRequests.size() >= MAX_BATCH) {         throw new IllegalArgumentException("You can add up to " + MAX_BATCH + " requests in a single batch. Split your requests across multiple batches.").     }     batchRequests.add(batchRequest). }
false;;2;3;;String rowBaseUrl(final String type, final String id) {     return apiPrefix + "/sobjects/" + notEmpty(type, SOBJECT_TYPE_PARAM) + "/" + notEmpty(id, "id"). }
false;;3;8;;String rowBaseUrl(final String type, final String fieldName, final String fieldValue) {     try {         return apiPrefix + "/sobjects/" + notEmpty(type, SOBJECT_TYPE_PARAM) + "/" + notEmpty(fieldName, "fieldName") + "/" + URLEncoder.encode(notEmpty(fieldValue, "fieldValue"), StandardCharsets.UTF_8.name()).     } catch (final UnsupportedEncodingException e) {         throw new IllegalStateException(e).     } }
false;;1;3;;String typeOf(final AbstractDescribedSObjectBase data) {     return notNull(data, "data").description().getName(). }
