commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;19;;private static boolean isBulkOperation(OperationName operationName) {     switch(operationName) {         case CREATE_JOB:         case GET_JOB:         case CLOSE_JOB:         case ABORT_JOB:         case CREATE_BATCH:         case GET_BATCH:         case GET_ALL_BATCHES:         case GET_REQUEST:         case GET_RESULTS:         case CREATE_BATCH_QUERY:         case GET_QUERY_RESULT_IDS:         case GET_QUERY_RESULT:             return true.         default:             return false.     } }
false;private,static;1;13;;private static boolean isAnalyticsOperation(OperationName operationName) {     switch(operationName) {         case GET_RECENT_REPORTS:         case GET_REPORT_DESCRIPTION:         case EXECUTE_SYNCREPORT:         case EXECUTE_ASYNCREPORT:         case GET_REPORT_INSTANCES:         case GET_REPORT_RESULTS:             return true.         default:             return false.     } }
false;private,static;1;10;;private static boolean isCompositeOperation(OperationName operationName) {     switch(operationName) {         case COMPOSITE_TREE:         case COMPOSITE_BATCH:         case COMPOSITE:             return true.         default:             return false.     } }
false;public;2;6;;@Override public boolean process(Exchange exchange, AsyncCallback callback) {     log.debug("Processing {}", ((SalesforceEndpoint) getEndpoint()).getOperationName()).     return processor.process(exchange, callback). }
false;protected;0;7;;@Override protected void doStart() throws Exception {     super.doStart().     // start Salesforce processor     ServiceHelper.startService(processor). }
false;protected;0;7;;@Override protected void doStop() throws Exception {     // stop Salesforce processor     ServiceHelper.stopService(processor).     super.doStop(). }
