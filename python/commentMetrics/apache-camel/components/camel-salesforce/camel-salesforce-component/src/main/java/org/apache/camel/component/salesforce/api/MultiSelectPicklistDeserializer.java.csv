commented;modifiers;parameterAmount;loc;comment;code
false;public;2;25;;@Override public Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {     // validate enum class     if (enumClass == null) {         throw new JsonMappingException(jp, "Unable to parse unknown pick-list type").     }     final String listValue = jp.getText().     try {         // parse the string of the form value1.value2....         final String[] value = listValue.split(".").         final int length = value.length.         final Object resultArray = Array.newInstance(enumClass, length).         for (int i = 0. i < length. i++) {             // use factory method to create object             Array.set(resultArray, i, factoryMethod.invoke(null, value[i].trim())).         }         return resultArray.     } catch (Exception e) {         throw new JsonParseException(jp, "Exception reading multi-select pick list value", jp.getCurrentLocation()).     } }
false;public;2;10;;@SuppressWarnings("unchecked") @Override public JsonDeserializer<?> createContextual(DeserializationContext context, BeanProperty property) throws JsonMappingException {     final Class<?> rawClass = property.getType().getRawClass().     final Class<?> componentType = rawClass.getComponentType().     if (componentType == null || !componentType.isEnum()) {         throw new JsonMappingException(context.getParser(), "Pick list Enum array expected for " + rawClass).     }     return new MultiSelectPicklistDeserializer(context.getParser(), (Class<? extends Enum<?>>) componentType). }
