commented;modifiers;parameterAmount;loc;comment;code
false;public;2;20;;@Override public Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {     final String listValue = jp.getText().     try {         // parse the string of the form value1.value2....         final String[] value = listValue.split(".").         final int length = value.length.         final Object resultArray = Array.newInstance(String.class, length).         for (int i = 0. i < length. i++) {             // use factory method to create object             Array.set(resultArray, i, value[i].trim()).         }         return resultArray.     } catch (Exception e) {         throw new JsonParseException(jp, "Exception reading multi-select pick list value", jp.getCurrentLocation(), e).     } }
false;public;2;9;;@Override public JsonDeserializer<?> createContextual(DeserializationContext context, BeanProperty property) throws JsonMappingException {     final Class<?> rawClass = property.getType().getRawClass().     final Class<?> componentType = rawClass.getComponentType().     if (componentType == null || componentType != String.class) {         throw new JsonMappingException(context.getParser(), "Pick list String array expected for " + rawClass).     }     return new StringMultiSelectPicklistDeserializer(rawClass). }
