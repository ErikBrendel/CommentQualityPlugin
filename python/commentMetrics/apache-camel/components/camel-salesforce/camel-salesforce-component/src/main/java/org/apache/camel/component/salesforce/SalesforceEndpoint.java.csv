commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;public Producer createProducer() throws Exception {     // producer requires an operation, topicName must be the invalid operation name     if (operationName == null) {         throw new IllegalArgumentException(String.format("Invalid Operation %s", topicName)).     }     SalesforceProducer producer = new SalesforceProducer(this).     if (isSynchronous()) {         return new SynchronousDelegateProducer(producer).     } else {         return producer.     } }
false;public;1;12;;public Consumer createConsumer(Processor processor) throws Exception {     // consumer requires a topicName, operation name must be the invalid topic name     if (topicName == null) {         throw new IllegalArgumentException(String.format("Invalid topic name %s, matches a producer operation name", operationName.value())).     }     final SubscriptionHelper subscriptionHelper = getComponent().getSubscriptionHelper().     final SalesforceConsumer consumer = new SalesforceConsumer(this, processor, subscriptionHelper).     configureConsumer(consumer).     return consumer. }
false;public;0;4;;@Override public SalesforceComponent getComponent() {     return (SalesforceComponent) super.getComponent(). }
false;public;0;5;;public boolean isSingleton() {     // the description of this method is a little confusing     return true. }
false;public;0;3;;public SalesforceEndpointConfig getConfiguration() {     return config. }
false;public;0;3;;public OperationName getOperationName() {     return operationName. }
false;public;0;3;;public String getTopicName() {     return topicName. }
false;public;1;3;;public void setReplayId(final Long replayId) {     this.replayId = replayId. }
false;public;0;3;;public Long getReplayId() {     return replayId. }
false;protected;0;15;;@Override protected void doStart() throws Exception {     try {         super.doStart().     } finally {         // check if this endpoint has its own http client that needs to be started         final HttpClient httpClient = getConfiguration().getHttpClient().         if (httpClient != null && getComponent().getConfig().getHttpClient() != httpClient) {             final String endpointUri = getEndpointUri().             log.debug("Starting http client for {} ...", endpointUri).             httpClient.start().             log.debug("Started http client for {}", endpointUri).         }     } }
false;protected;0;15;;@Override protected void doStop() throws Exception {     try {         super.doStop().     } finally {         // check if this endpoint has its own http client that needs to be stopped         final HttpClient httpClient = getConfiguration().getHttpClient().         if (httpClient != null && getComponent().getConfig().getHttpClient() != httpClient) {             final String endpointUri = getEndpointUri().             log.debug("Stopping http client for {} ...", endpointUri).             httpClient.stop().             log.debug("Stopped http client for {}", endpointUri).         }     } }
