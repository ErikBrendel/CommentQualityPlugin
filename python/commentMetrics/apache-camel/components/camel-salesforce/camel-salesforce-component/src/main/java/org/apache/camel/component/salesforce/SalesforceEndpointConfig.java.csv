commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;public SalesforceEndpointConfig copy() {     try {         final SalesforceEndpointConfig copy = (SalesforceEndpointConfig) super.clone().         // nothing to deep copy, getApexQueryParams() is readonly, so no need to deep copy         return copy.     } catch (CloneNotSupportedException ex) {         throw new RuntimeCamelException(ex).     } }
false;public;0;3;;public PayloadFormat getFormat() {     return format. }
true;public;1;3;/**  * Payload format to use for Salesforce API calls, either JSON or XML, defaults to JSON  */ ;/**  * Payload format to use for Salesforce API calls, either JSON or XML, defaults to JSON  */ public void setFormat(PayloadFormat format) {     this.format = format. }
false;public;0;3;;public boolean getRawPayload() {     return rawPayload. }
true;public;1;3;/**  * Use raw payload {@link String} for request and response (either JSON or XML depending on {@code format}),  * instead of DTOs, false by default  */ ;/**  * Use raw payload {@link String} for request and response (either JSON or XML depending on {@code format}),  * instead of DTOs, false by default  */ public void setRawPayload(boolean rawPayload) {     this.rawPayload = rawPayload. }
false;public;0;3;;public String getApiVersion() {     return apiVersion. }
true;public;1;3;/**  * Salesforce API version, defaults to SalesforceEndpointConfig.DEFAULT_VERSION  */ ;/**  * Salesforce API version, defaults to SalesforceEndpointConfig.DEFAULT_VERSION  */ public void setApiVersion(String apiVersion) {     this.apiVersion = apiVersion. }
false;public;0;3;;public String getSObjectName() {     return sObjectName. }
true;public;1;3;/**  * SObject name if required or supported by API  */ ;/**  * SObject name if required or supported by API  */ public void setSObjectName(String sObjectName) {     this.sObjectName = sObjectName. }
false;public;0;3;;public String getSObjectId() {     return sObjectId. }
true;public;1;3;/**  * SObject ID if required by API  */ ;/**  * SObject ID if required by API  */ public void setSObjectId(String sObjectId) {     this.sObjectId = sObjectId. }
false;public;0;3;;public String getSObjectFields() {     return sObjectFields. }
true;public;1;3;/**  * SObject fields to retrieve  */ ;/**  * SObject fields to retrieve  */ public void setSObjectFields(String sObjectFields) {     this.sObjectFields = sObjectFields. }
false;public;0;3;;public String getSObjectIdName() {     return sObjectIdName. }
true;public;1;3;/**  * SObject external ID field name  */ ;/**  * SObject external ID field name  */ public void setSObjectIdName(String sObjectIdName) {     this.sObjectIdName = sObjectIdName. }
false;public;0;3;;public String getSObjectIdValue() {     return sObjectIdValue. }
true;public;1;3;/**  * SObject external ID field value  */ ;/**  * SObject external ID field value  */ public void setSObjectIdValue(String sObjectIdValue) {     this.sObjectIdValue = sObjectIdValue. }
false;public;0;3;;public String getSObjectBlobFieldName() {     return sObjectBlobFieldName. }
true;public;1;3;/**  * SObject blob field name  */ ;/**  * SObject blob field name  */ public void setSObjectBlobFieldName(String sObjectBlobFieldName) {     this.sObjectBlobFieldName = sObjectBlobFieldName. }
false;public;0;3;;public String getSObjectClass() {     return sObjectClass. }
true;public;1;3;/**  * Fully qualified SObject class name, usually generated using camel-salesforce-maven-plugin  */ ;/**  * Fully qualified SObject class name, usually generated using camel-salesforce-maven-plugin  */ public void setSObjectClass(String sObjectClass) {     this.sObjectClass = sObjectClass. }
false;public;0;3;;public String getSObjectQuery() {     return sObjectQuery. }
true;public;1;3;/**  * Salesforce SOQL query string  */ ;/**  * Salesforce SOQL query string  */ public void setSObjectQuery(String sObjectQuery) {     this.sObjectQuery = sObjectQuery. }
false;public;0;3;;public String getSObjectSearch() {     return sObjectSearch. }
true;public;1;3;/**  * Salesforce SOSL search string  */ ;/**  * Salesforce SOSL search string  */ public void setSObjectSearch(String sObjectSearch) {     this.sObjectSearch = sObjectSearch. }
true;public;1;3;/**  * Should the NULL values of given DTO be serialized with  * empty (NULL) values. This affects only JSON data format.  */ ;/**  * Should the NULL values of given DTO be serialized with  * empty (NULL) values. This affects only JSON data format.  */ public void setSerializeNulls(boolean serializeNulls) {     this.serializeNulls = serializeNulls. }
false;public;0;3;;public boolean isSerializeNulls() {     return serializeNulls. }
false;public;0;3;;public String getApexMethod() {     return apexMethod. }
true;public;1;3;/**  * APEX method name  */ ;/**  * APEX method name  */ public void setApexMethod(String apexMethod) {     this.apexMethod = apexMethod. }
false;public;0;3;;public String getApexUrl() {     return apexUrl. }
true;public;1;3;/**  * APEX method URL  */ ;/**  * APEX method URL  */ public void setApexUrl(String apexUrl) {     this.apexUrl = apexUrl. }
false;public;0;5;;public Map<String, Object> getApexQueryParams() {     final Map<String, Object> value = Optional.ofNullable(apexQueryParams).orElse(Collections.emptyMap()).     return Collections.unmodifiableMap(value). }
true;public;1;3;/**  * Query params for APEX method  */ ;/**  * Query params for APEX method  */ public void setApexQueryParams(Map<String, Object> apexQueryParams) {     this.apexQueryParams = apexQueryParams. }
false;public;0;3;;public ApprovalRequest getApproval() {     return approval. }
true;public;1;3;/**  * The approval request for Approval API.  *  * @param approval  */ ;/**  * The approval request for Approval API.  *  * @param approval  */ public void setApproval(final ApprovalRequest approval) {     this.approval = approval. }
false;public;0;3;;public ContentType getContentType() {     return contentType. }
true;public;1;3;/**  * Bulk API content type, one of XML, CSV, ZIP_XML, ZIP_CSV  */ ;/**  * Bulk API content type, one of XML, CSV, ZIP_XML, ZIP_CSV  */ public void setContentType(ContentType contentType) {     this.contentType = contentType. }
false;public;0;3;;public String getJobId() {     return jobId. }
true;public;1;3;/**  * Bulk API Job ID  */ ;/**  * Bulk API Job ID  */ public void setJobId(String jobId) {     this.jobId = jobId. }
false;public;0;3;;public String getBatchId() {     return batchId. }
true;public;1;3;/**  * Bulk API Batch ID  */ ;/**  * Bulk API Batch ID  */ public void setBatchId(String batchId) {     this.batchId = batchId. }
false;public;0;3;;public String getResultId() {     return resultId. }
true;public;1;3;/**  * Bulk API Result ID  */ ;/**  * Bulk API Result ID  */ public void setResultId(String resultId) {     this.resultId = resultId. }
false;public;0;3;;public boolean isUpdateTopic() {     return updateTopic. }
true;public;1;3;/**  * Whether to update an existing Push Topic when using the Streaming API, defaults to false  */ ;/**  * Whether to update an existing Push Topic when using the Streaming API, defaults to false  */ public void setUpdateTopic(boolean updateTopic) {     this.updateTopic = updateTopic. }
false;public;0;3;;public NotifyForFieldsEnum getNotifyForFields() {     return notifyForFields. }
true;public;1;3;/**  * Notify for fields, options are ALL, REFERENCED, SELECT, WHERE  */ ;/**  * Notify for fields, options are ALL, REFERENCED, SELECT, WHERE  */ public void setNotifyForFields(NotifyForFieldsEnum notifyForFields) {     this.notifyForFields = notifyForFields. }
false;public;0;3;;public NotifyForOperationsEnum getNotifyForOperations() {     return notifyForOperations. }
true;public;1;3;/**  * Notify for operations, options are ALL, CREATE, EXTENDED, UPDATE (API version < 29.0)  */ ;/**  * Notify for operations, options are ALL, CREATE, EXTENDED, UPDATE (API version < 29.0)  */ public void setNotifyForOperations(NotifyForOperationsEnum notifyForOperations) {     this.notifyForOperations = notifyForOperations. }
false;public;0;3;;public Boolean getNotifyForOperationCreate() {     return notifyForOperationCreate. }
true;public;1;3;/**  * Notify for create operation, defaults to false (API version >= 29.0)  */ ;/**  * Notify for create operation, defaults to false (API version >= 29.0)  */ public void setNotifyForOperationCreate(Boolean notifyForOperationCreate) {     this.notifyForOperationCreate = notifyForOperationCreate. }
false;public;0;3;;public Boolean getNotifyForOperationUpdate() {     return notifyForOperationUpdate. }
true;public;1;3;/**  * Notify for update operation, defaults to false (API version >= 29.0)  */ ;/**  * Notify for update operation, defaults to false (API version >= 29.0)  */ public void setNotifyForOperationUpdate(Boolean notifyForOperationUpdate) {     this.notifyForOperationUpdate = notifyForOperationUpdate. }
false;public;0;3;;public Boolean getNotifyForOperationDelete() {     return notifyForOperationDelete. }
true;public;1;3;/**  * Notify for delete operation, defaults to false (API version >= 29.0)  */ ;/**  * Notify for delete operation, defaults to false (API version >= 29.0)  */ public void setNotifyForOperationDelete(Boolean notifyForOperationDelete) {     this.notifyForOperationDelete = notifyForOperationDelete. }
false;public;0;3;;public Boolean getNotifyForOperationUndelete() {     return notifyForOperationUndelete. }
true;public;1;3;/**  * Notify for un-delete operation, defaults to false (API version >= 29.0)  */ ;/**  * Notify for un-delete operation, defaults to false (API version >= 29.0)  */ public void setNotifyForOperationUndelete(Boolean notifyForOperationUndelete) {     this.notifyForOperationUndelete = notifyForOperationUndelete. }
false;public;0;3;;public String getReportId() {     return reportId. }
true;public;1;3;/**  * Salesforce1 Analytics report Id  */ ;/**  * Salesforce1 Analytics report Id  */ public void setReportId(String reportId) {     this.reportId = reportId. }
false;public;0;3;;public Boolean getIncludeDetails() {     return includeDetails. }
true;public;1;3;/**  * Include details in Salesforce1 Analytics report, defaults to false.  */ ;/**  * Include details in Salesforce1 Analytics report, defaults to false.  */ public void setIncludeDetails(Boolean includeDetails) {     this.includeDetails = includeDetails. }
false;public;0;3;;public ReportMetadata getReportMetadata() {     return reportMetadata. }
true;public;1;3;/**  * Salesforce1 Analytics report metadata for filtering  */ ;/**  * Salesforce1 Analytics report metadata for filtering  */ public void setReportMetadata(ReportMetadata reportMetadata) {     this.reportMetadata = reportMetadata. }
false;public;0;3;;public String getInstanceId() {     return instanceId. }
true;public;1;3;/**  * Salesforce1 Analytics report execution instance ID  */ ;/**  * Salesforce1 Analytics report execution instance ID  */ public void setInstanceId(String instanceId) {     this.instanceId = instanceId. }
true;public;1;3;/**  * Custom Jetty Http Client to use to connect to Salesforce.  */ ;/**  * Custom Jetty Http Client to use to connect to Salesforce.  */ public void setHttpClient(SalesforceHttpClient httpClient) {     this.httpClient = httpClient. }
false;public;0;3;;public SalesforceHttpClient getHttpClient() {     return httpClient. }
false;public;0;3;;public ObjectMapper getObjectMapper() {     return objectMapper. }
false;public;0;3;;public long getBackoffIncrement() {     return backoffIncrement. }
true;public;1;3;/**  * Backoff interval increment for Streaming connection restart attempts for failures beyond CometD auto-reconnect.  */ ;/**  * Backoff interval increment for Streaming connection restart attempts for failures beyond CometD auto-reconnect.  */ public void setBackoffIncrement(long backoffIncrement) {     this.backoffIncrement = backoffIncrement. }
false;public;0;3;;public long getMaxBackoff() {     return maxBackoff. }
true;public;1;3;/**  * Maximum backoff interval for Streaming connection restart attempts for failures beyond CometD auto-reconnect.  */ ;/**  * Maximum backoff interval for Streaming connection restart attempts for failures beyond CometD auto-reconnect.  */ public void setMaxBackoff(long maxBackoff) {     this.maxBackoff = maxBackoff. }
true;public;1;3;/**  * Custom Jackson ObjectMapper to use when serializing/deserializing Salesforce objects.  */ ;/**  * Custom Jackson ObjectMapper to use when serializing/deserializing Salesforce objects.  */ public void setObjectMapper(ObjectMapper objectMapper) {     this.objectMapper = objectMapper. }
false;public;0;44;;public Map<String, Object> toValueMap() {     final Map<String, Object> valueMap = new HashMap<>().     valueMap.put(FORMAT, format.toString().toLowerCase()).     valueMap.put(API_VERSION, apiVersion).     valueMap.put(SOBJECT_NAME, sObjectName).     valueMap.put(SOBJECT_ID, sObjectId).     valueMap.put(SOBJECT_FIELDS, sObjectFields).     valueMap.put(SOBJECT_EXT_ID_NAME, sObjectIdName).     valueMap.put(SOBJECT_BLOB_FIELD_NAME, sObjectBlobFieldName).     valueMap.put(SOBJECT_EXT_ID_VALUE, sObjectIdValue).     valueMap.put(SOBJECT_CLASS, sObjectClass).     valueMap.put(SOBJECT_QUERY, sObjectQuery).     valueMap.put(SOBJECT_SEARCH, sObjectSearch).     valueMap.put(SERIALIZE_NULLS, serializeNulls).     valueMap.put(APEX_METHOD, apexMethod).     valueMap.put(APEX_URL, apexUrl).     valueMap.put(LIMIT, limit).     valueMap.put(APPROVAL, approval).     // add bulk API properties     if (contentType != null) {         valueMap.put(CONTENT_TYPE, contentType.value()).     }     valueMap.put(JOB_ID, jobId).     valueMap.put(BATCH_ID, batchId).     valueMap.put(RESULT_ID, resultId).     // add analytics API properties     valueMap.put(REPORT_ID, reportId).     valueMap.put(INCLUDE_DETAILS, includeDetails).     valueMap.put(REPORT_METADATA, reportMetadata).     valueMap.put(INSTANCE_ID, instanceId).     // add streaming API properties     valueMap.put(DEFAULT_REPLAY_ID, defaultReplayId).     valueMap.put(INITIAL_REPLAY_ID_MAP, initialReplayIdMap).     valueMap.put(NOT_FOUND_BEHAVIOUR, notFoundBehaviour).     return Collections.unmodifiableMap(valueMap). }
false;public;0;3;;public Long getDefaultReplayId() {     return defaultReplayId. }
true;public;1;3;/**  * Default replayId setting if no value is found in {@link #initialReplayIdMap}  *  * @param defaultReplayId  */ ;/**  * Default replayId setting if no value is found in {@link #initialReplayIdMap}  *  * @param defaultReplayId  */ public void setDefaultReplayId(Long defaultReplayId) {     this.defaultReplayId = defaultReplayId. }
false;public;0;3;;public Map<String, Long> getInitialReplayIdMap() {     return Optional.ofNullable(initialReplayIdMap).orElse(Collections.emptyMap()). }
true;public;1;3;/**  * Replay IDs to start from per channel name.  */ ;/**  * Replay IDs to start from per channel name.  */ public void setInitialReplayIdMap(Map<String, Long> initialReplayIdMap) {     this.initialReplayIdMap = initialReplayIdMap. }
false;public;0;3;;public Integer getLimit() {     return limit. }
true;public;1;3;/**  * Limit on number of returned records. Applicable to some of the API, check the Salesforce documentation.  *  * @param limit  */ ;/**  * Limit on number of returned records. Applicable to some of the API, check the Salesforce documentation.  *  * @param limit  */ public void setLimit(final Integer limit) {     this.limit = limit. }
false;public;0;7;;public Action getApprovalActionType() {     if (approval == null) {         return null.     }     return approval.getActionType(). }
false;public;0;7;;public String getApprovalComments() {     if (approval == null) {         return null.     }     return approval.getComments(). }
false;public;0;7;;public String getApprovalContextActorId() {     if (approval == null) {         return null.     }     return approval.getContextActorId(). }
false;public;0;7;;public String getApprovalContextId() {     if (approval == null) {         return null.     }     return approval.getContextId(). }
false;public;0;7;;public List<String> getApprovalNextApproverIds() {     if (approval == null) {         return null.     }     return approval.getNextApproverIds(). }
false;public;0;7;;public String getApprovalProcessDefinitionNameOrId() {     if (approval == null) {         return null.     }     return approval.getProcessDefinitionNameOrId(). }
false;public;0;7;;public boolean isApprovalSkipEntryCriteria() {     if (approval == null) {         return false.     }     return approval.isSkipEntryCriteria(). }
true;public;1;7;/**  * Represents the kind of action to take: Submit, Approve, or Reject.  *  * @param actionType  */ ;/**  * Represents the kind of action to take: Submit, Approve, or Reject.  *  * @param actionType  */ public void setApprovalActionType(final Action actionType) {     if (approval == null) {         approval = new ApprovalRequest().     }     approval.setActionType(actionType). }
true;public;1;7;/**  * The comment to add to the history step associated with this request.  *  * @param comments  */ ;/**  * The comment to add to the history step associated with this request.  *  * @param comments  */ public void setApprovalComments(final String comments) {     if (approval == null) {         approval = new ApprovalRequest().     }     approval.setComments(comments). }
true;public;1;7;/**  * The ID of the submitter who’s requesting the approval record.  *  * @param contextActorId  */ ;/**  * The ID of the submitter who’s requesting the approval record.  *  * @param contextActorId  */ public void setApprovalContextActorId(final String contextActorId) {     if (approval == null) {         approval = new ApprovalRequest().     }     approval.setContextActorId(contextActorId). }
true;public;1;7;/**  * The ID of the item that is being acted upon.  *  * @param contextId  */ ;/**  * The ID of the item that is being acted upon.  *  * @param contextId  */ public void setApprovalContextId(final String contextId) {     if (approval == null) {         approval = new ApprovalRequest().     }     approval.setContextId(contextId). }
true;public;1;7;/**  * If the process requires specification of the next approval, the ID of the user to be assigned the next request.  *  * @param nextApproverIds  */ ;/**  * If the process requires specification of the next approval, the ID of the user to be assigned the next request.  *  * @param nextApproverIds  */ public void setApprovalNextApproverIds(final List<String> nextApproverIds) {     if (approval == null) {         approval = new ApprovalRequest().     }     approval.setNextApproverIds(nextApproverIds). }
true;public;1;7;/**  * If the process requires specification of the next approval, the ID of the user to be assigned the next request.  *  * @param nextApproverIds  */ ;/**  * If the process requires specification of the next approval, the ID of the user to be assigned the next request.  *  * @param nextApproverIds  */ public void setApprovalNextApproverIds(String nextApproverId) {     if (approval == null) {         approval = new ApprovalRequest().     }     approval.setNextApproverIds(nextApproverId). }
true;public;1;7;/**  * The developer name or ID of the process definition.  *  * @param processDefinitionNameOrId  */ ;/**  * The developer name or ID of the process definition.  *  * @param processDefinitionNameOrId  */ public void setApprovalProcessDefinitionNameOrId(final String processDefinitionNameOrId) {     if (approval == null) {         approval = new ApprovalRequest().     }     approval.setProcessDefinitionNameOrId(processDefinitionNameOrId). }
true;public;1;7;/**  * Determines whether to evaluate the entry criteria for the process (true) or not (false) if the process definition  * name or ID isn’t null. If the process definition name or ID isn’t specified, this argument is ignored, and  * standard evaluation is followed based on process order. By default, the entry criteria isn’t skipped if it’s not  * set by this request.  *  * @param skipEntryCriteria  */ ;/**  * Determines whether to evaluate the entry criteria for the process (true) or not (false) if the process definition  * name or ID isn’t null. If the process definition name or ID isn’t specified, this argument is ignored, and  * standard evaluation is followed based on process order. By default, the entry criteria isn’t skipped if it’s not  * set by this request.  *  * @param skipEntryCriteria  */ public void setApprovalSkipEntryCriteria(final boolean skipEntryCriteria) {     if (approval == null) {         approval = new ApprovalRequest().     }     approval.setSkipEntryCriteria(skipEntryCriteria). }
false;public;0;3;;public NotFoundBehaviour getNotFoundBehaviour() {     return notFoundBehaviour. }
true;public;1;3;/**  * Sets the behaviour of 404 not found status received from Salesforce API.  * Should the body be set to NULL {@link NotFoundBehaviour#NULL} or should a  * exception be signaled on the exchange {@link NotFoundBehaviour#EXCEPTION}  * - the default.  */ ;/**  * Sets the behaviour of 404 not found status received from Salesforce API.  * Should the body be set to NULL {@link NotFoundBehaviour#NULL} or should a  * exception be signaled on the exchange {@link NotFoundBehaviour#EXCEPTION}  * - the default.  */ public void setNotFoundBehaviour(final NotFoundBehaviour notFoundBehaviour) {     this.notFoundBehaviour = notFoundBehaviour. }
