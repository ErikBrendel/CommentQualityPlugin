commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;10;;public static String[] fieldNamesOf(final AbstractDescribedSObjectBase object) {     if (object == null) {         return NONE.     }     final SObjectDescription description = object.description().     final List<SObjectField> fields = description.getFields().     return fields.stream().map(SObjectField::getName).toArray(String[]::new). }
false;public,static;2;15;;public static String[] filteredFieldNamesOf(final AbstractDescribedSObjectBase object, final Predicate<SObjectField> filter) {     if (object == null) {         return NONE.     }     if (filter == null) {         return fieldNamesOf(object).     }     final SObjectDescription description = object.description().     final List<SObjectField> fields = description.getFields().     return fields.stream().filter(filter).map(SObjectField::getName).toArray(String[]::new). }
false;public,static;1;11;;public static String queryToFetchAllFieldsOf(final AbstractDescribedSObjectBase object) {     if (object == null) {         return null.     }     final SObjectDescription description = object.description().     final List<SObjectField> fields = description.getFields().     return fields.stream().map(SObjectField::getName).collect(Collectors.joining(", ", "SELECT ", " FROM " + description.getName())). }
false;public,static;2;16;;public static String queryToFetchFilteredFieldsOf(final AbstractDescribedSObjectBase object, final Predicate<SObjectField> filter) {     if (object == null) {         return null.     }     if (filter == null) {         return queryToFetchAllFieldsOf(object).     }     final SObjectDescription description = object.description().     final List<SObjectField> fields = description.getFields().     return fields.stream().filter(filter).map(SObjectField::getName).collect(Collectors.joining(", ", "SELECT ", " FROM " + description.getName())). }
