commented;modifiers;parameterAmount;loc;comment;code
false;public;3;20;;@Override public void marshal(Object o, HierarchicalStreamWriter writer, MarshallingContext context) {     try {         final int length = Array.getLength(o).         // construct a string of form value1.value2....         final StringBuilder buffer = new StringBuilder().         for (int i = 0. i < length. i++) {             buffer.append((String) o).             if (i < (length - 1)) {                 buffer.append('.').             }         }         writer.setValue(buffer.toString()).     } catch (Exception e) {         throw new ConversionException(String.format("Exception writing pick list value %s of type %s: %s", o, o.getClass().getName(), e.getMessage()), e).     } }
false;public;2;22;;@Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {     final String listValue = reader.getValue().     final Class<?> requiredArrayType = context.getRequiredType().     try {         // parse the string of the form value1.value2....         final String[] value = listValue.split(".").         final int length = value.length.         final String[] resultArray = new String[length].         for (int i = 0. i < length. i++) {             // use factory method to create object             resultArray[i] = value[i].trim().             Array.set(resultArray, i, value[i].trim()).         }         return resultArray.     } catch (Exception e) {         throw new ConversionException(String.format("Exception reading pick list value %s of type %s: %s", listValue, requiredArrayType.getName(), e.getMessage()), e).     } }
false;public;1;6;;@Override public boolean canConvert(Class aClass) {     // check whether the Class is an array, and whether the array element is a String     final Class<?> componentType = aClass.getComponentType().     return componentType != null && String.class == componentType. }
