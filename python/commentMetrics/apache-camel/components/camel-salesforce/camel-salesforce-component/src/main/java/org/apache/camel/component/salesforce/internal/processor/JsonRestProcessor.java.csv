commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;68;;@Override protected void processRequest(Exchange exchange) throws SalesforceException {     switch(operationName) {         case GET_VERSIONS:             // handle in built response types             exchange.setProperty(RESPONSE_TYPE, TypeReferences.VERSION_LIST_TYPE).             break.         case GET_RESOURCES:             // handle in built response types             exchange.setProperty(RESPONSE_CLASS, RestResources.class).             break.         case GET_GLOBAL_OBJECTS:             // handle in built response types             exchange.setProperty(RESPONSE_CLASS, GlobalObjects.class).             break.         case GET_BASIC_INFO:             // handle in built response types             exchange.setProperty(RESPONSE_CLASS, SObjectBasicInfo.class).             break.         case GET_DESCRIPTION:             // handle in built response types             exchange.setProperty(RESPONSE_CLASS, SObjectDescription.class).             break.         case CREATE_SOBJECT:             // handle known response type             exchange.setProperty(RESPONSE_CLASS, CreateSObjectResult.class).             break.         case UPSERT_SOBJECT:             // handle known response type             exchange.setProperty(RESPONSE_CLASS, CreateSObjectResult.class).             break.         case SEARCH:             // handle known response type             exchange.setProperty(RESPONSE_TYPE, TypeReferences.SEARCH_RESULT_TYPE).             break.         case RECENT:             // handle known response type             exchange.setProperty(RESPONSE_TYPE, TypeReferences.RECENT_ITEM_LIST_TYPE).             break.         case LIMITS:             // handle known response type             exchange.setProperty(RESPONSE_CLASS, Limits.class).             break.         case APPROVAL:             // handle known response type             exchange.setProperty(RESPONSE_CLASS, ApprovalResult.class).             break.         case APPROVALS:             // handle known response type             exchange.setProperty(RESPONSE_CLASS, Approvals.class).             break.         default:     } }
false;protected;1;25;;@Override protected InputStream getRequestStream(Exchange exchange) throws SalesforceException {     InputStream request.     Message in = exchange.getIn().     request = in.getBody(InputStream.class).     if (request == null) {         AbstractDTOBase dto = in.getBody(AbstractDTOBase.class).         if (dto != null) {             // marshall the DTO             request = getRequestStream(in, dto).         } else {             // if all else fails, get body as String             final String body = in.getBody(String.class).             if (null == body) {                 String msg = "Unsupported request message body " + (in.getBody() == null ? null : in.getBody().getClass()).                 throw new SalesforceException(msg, null).             } else {                 request = new ByteArrayInputStream(body.getBytes(StandardCharsets.UTF_8)).             }         }     }     return request. }
false;protected;2;12;;@Override protected InputStream getRequestStream(final Message in, final Object object) throws SalesforceException {     final ByteArrayOutputStream out = new ByteArrayOutputStream().     try {         prepareMapper(in).writeValue(out, object).     } catch (IOException e) {         final String msg = "Error marshaling request: " + e.getMessage().         throw new SalesforceException(msg, e).     }     return new ByteArrayInputStream(out.toByteArray()). }
false;protected;5;54;;@Override protected void processResponse(Exchange exchange, InputStream responseEntity, Map<String, String> headers, SalesforceException ex, AsyncCallback callback) {     // process JSON response for TypeReference     try {         final Message out = exchange.getOut().         final Message in = exchange.getIn().         out.copyFromWithNewBody(in, null).         out.getHeaders().putAll(headers).         if (ex != null) {             // if an exception is reported we should not loose it             if (shouldReport(ex)) {                 exchange.setException(ex).             }         } else if (responseEntity != null) {             // do we need to un-marshal a response             final Object response.             Class<?> responseClass = exchange.getProperty(RESPONSE_CLASS, Class.class).             if (!rawPayload && responseClass != null) {                 response = prepareMapper(in).readValue(responseEntity, responseClass).             } else {                 TypeReference<?> responseType = exchange.getProperty(RESPONSE_TYPE, TypeReference.class).                 if (!rawPayload && responseType != null) {                     response = prepareMapper(in).readValue(responseEntity, responseType).                 } else {                     // return the response as a stream, for getBlobField                     response = responseEntity.                 }             }             out.setBody(response).         }     } catch (IOException e) {         String msg = "Error parsing JSON response: " + e.getMessage().         exchange.setException(new SalesforceException(msg, e)).     } finally {         // cleanup temporary exchange headers         exchange.removeProperty(RESPONSE_CLASS).         exchange.removeProperty(RESPONSE_TYPE).         // consume response entity         try {             if (responseEntity != null) {                 responseEntity.close().             }         } catch (IOException ignored) {         }         // notify callback that exchange is done         callback.done(false).     } }
false;private;1;8;;private ObjectMapper prepareMapper(final Message in) {     final Object serializeNulls = in.getHeader(SalesforceEndpointConfig.SERIALIZE_NULLS).     if (Boolean.TRUE.equals(serializeNulls)) {         return JsonUtils.withNullSerialization(objectMapper).     }     return objectMapper. }
