commented;modifiers;parameterAmount;loc;comment;code
false;;2;1;;boolean process(Exchange exchange, AsyncCallback callback).
false;default;1;26;;default Map<String, List<String>> determineHeaders(final Exchange exchange) {     final Message inboundMessage = exchange.getIn().     final Map<String, Object> headers = inboundMessage.getHeaders().     final Map<String, List<String>> answer = new HashMap<>().     for (final String headerName : headers.keySet()) {         final String headerNameLowercase = headerName.toLowerCase(Locale.US).         if (headerNameLowercase.startsWith("sforce") || headerNameLowercase.startsWith("x-sfdc")) {             final Object headerValue = inboundMessage.getHeader(headerName).             if (headerValue instanceof String) {                 answer.put(headerName, Collections.singletonList((String) headerValue)).             } else if (headerValue instanceof String[]) {                 answer.put(headerName, Arrays.asList((String[]) headerValue)).             } else if (headerValue instanceof Collection) {                 Collection<?> collection = (Collection<?>) headerValue.                 answer.put(headerName, collection.stream().map(String.class::cast).collect(Collectors.toList())).             } else {                 answer.put(headerName, Collections.singletonList(String.valueOf(headerValue))).             }         }     }     return answer. }
