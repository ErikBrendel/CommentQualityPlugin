commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;7;;public static MessageKind fromTopicName(final String topicName) {     if (topicName.startsWith("event/") || topicName.startsWith("/event/")) {         return MessageKind.PLATFORM_EVENT.     }     return PUSH_TOPIC. }
false;public;0;3;;public String getTopicName() {     return topicName. }
false;public;2;4;;@Override public void handleException(String message, Throwable t) {     super.handleException(message, t). }
false;public;1;8;;@Override public void done(boolean doneSync) {     // noop     if (log.isTraceEnabled()) {         log.trace("Done processing event: {} {}", channel.getId(), doneSync ? "synchronously" : "asynchronously").     } }
false;public;2;41;;public void processMessage(final ClientSessionChannel channel, final Message message) {     if (log.isDebugEnabled()) {         log.debug("Received event {} on channel {}", channel.getId(), channel.getChannelId()).     }     final Exchange exchange = endpoint.createExchange().     final org.apache.camel.Message in = exchange.getIn().     switch(messageKind) {         case PUSH_TOPIC:             createPushTopicMessage(message, in).             break.         case PLATFORM_EVENT:             createPlatformEventMessage(message, in).             break.         default:             throw new IllegalStateException("Unknown message kind: " + messageKind).     }     try {         getAsyncProcessor().process(exchange, new AsyncCallback() {              @Override             public void done(boolean doneSync) {                 // noop                 if (log.isTraceEnabled()) {                     log.trace("Done processing event: {} {}", channel.getId(), doneSync ? "synchronously" : "asynchronously").                 }             }         }).     } catch (final Exception e) {         final String msg = String.format("Error processing %s: %s", exchange, e).         handleException(msg, new SalesforceException(msg, e)).     } finally {         final Exception ex = exchange.getException().         if (ex != null) {             final String msg = String.format("Unhandled exception: %s", ex.getMessage()).             handleException(msg, new SalesforceException(msg, ex)).         }     } }
false;;2;28;;void createPlatformEventMessage(final Message message, final org.apache.camel.Message in) {     setHeaders(in, message).     final Map<String, Object> data = message.getDataAsMap().     @SuppressWarnings("unchecked")     final Map<String, Object> event = (Map<String, Object>) data.get("event").     final Object replayId = event.get(REPLAY_ID_PROPERTY).     if (replayId != null) {         in.setHeader("CamelSalesforceReplayId", replayId).     }     in.setHeader("CamelSalesforcePlatformEventSchema", data.get("schema")).     in.setHeader("CamelSalesforceEventType", topicName.substring(topicName.lastIndexOf('/') + 1)).     final Object payload = data.get("payload").     final PlatformEvent platformEvent = objectMapper.convertValue(payload, PlatformEvent.class).     in.setHeader("CamelSalesforceCreatedDate", platformEvent.getCreated()).     if (rawPayload) {         in.setBody(message).     } else {         in.setBody(platformEvent).     } }
false;;2;41;;void createPushTopicMessage(final Message message, final org.apache.camel.Message in) {     setHeaders(in, message).     final Map<String, Object> data = message.getDataAsMap().     @SuppressWarnings("unchecked")     final Map<String, Object> event = (Map<String, Object>) data.get(EVENT_PROPERTY).     final Object eventType = event.get(TYPE_PROPERTY).     final Object createdDate = event.get(CREATED_DATE_PROPERTY).     final Object replayId = event.get(REPLAY_ID_PROPERTY).     in.setHeader("CamelSalesforceTopicName", topicName).     in.setHeader("CamelSalesforceEventType", eventType).     in.setHeader("CamelSalesforceCreatedDate", createdDate).     if (replayId != null) {         in.setHeader("CamelSalesforceReplayId", replayId).     }     // get SObject     @SuppressWarnings("unchecked")     final Map<String, Object> sObject = (Map<String, Object>) data.get(SOBJECT_PROPERTY).     try {         final String sObjectString = objectMapper.writeValueAsString(sObject).         log.debug("Received SObject: {}", sObjectString).         if (rawPayload) {             // return sobject string as exchange body             in.setBody(sObjectString).         } else if (sObjectClass == null) {             // return sobject map as exchange body             in.setBody(sObject).         } else {             // create the expected SObject             in.setBody(objectMapper.readValue(new StringReader(sObjectString), sObjectClass)).         }     } catch (final IOException e) {         final String msg = String.format("Error parsing message [%s] from Topic %s: %s", message, topicName, e.getMessage()).         handleException(msg, new SalesforceException(msg, e)).     } }
false;;2;7;;void setHeaders(final org.apache.camel.Message in, final Message message) {     in.setHeader("CamelSalesforceChannel", message.getChannel()).     final String clientId = message.getClientId().     if (ObjectHelper.isNotEmpty(clientId)) {         in.setHeader("CamelSalesforceClientId", clientId).     } }
false;protected;0;29;;@Override protected void doStart() throws Exception {     super.doStart().     final SalesforceEndpointConfig config = endpoint.getConfiguration().     // is a query configured in the endpoint?     if (messageKind == MessageKind.PUSH_TOPIC && ObjectHelper.isNotEmpty(config.getSObjectQuery())) {         // Note that we don't lookup topic if the query is not specified         // create REST client for PushTopic operations         final SalesforceComponent salesforceComponent = endpoint.getComponent().         final RestClient restClient = salesforceComponent.createRestClientFor(endpoint).         // don't forget to start the client         ServiceHelper.startService(restClient).         try {             final PushTopicHelper helper = new PushTopicHelper(config, topicName, restClient).             helper.createOrUpdateTopic().         } finally {             // don't forget to stop the client             ServiceHelper.stopService(restClient).         }     }     // subscribe to topic     subscriptionHelper.subscribe(topicName, this).     subscribed = true. }
false;protected;0;10;;@Override protected void doStop() throws Exception {     super.doStop().     if (subscribed) {         subscribed = false.         // unsubscribe from topic         subscriptionHelper.unsubscribe(topicName, this).     } }
