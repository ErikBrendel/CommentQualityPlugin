commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;26;;// ********************************* // Parameters validation // ********************************* @Override protected Result verifyParameters(Map<String, Object> parameters) {     // Validate mandatory component options, needed to be done here as these     // options are not properly marked as mandatory in the catalog.     //      // Validation rules are borrowed from SalesforceLoginConfig's validate     // method, which support 3 workflow:     //      // - OAuth Username/Password Flow     // - OAuth Refresh Token Flow:     // - OAuth JWT Flow     //      ResultBuilder builder = ResultBuilder.withStatusAndScope(Result.Status.OK, Scope.PARAMETERS).errors(ResultErrorHelper.requiresAny(parameters, OptionsGroup.withName(AuthenticationType.USERNAME_PASSWORD).options("clientId", "clientSecret", "userName", "password", "!refreshToken", "!keystore"), OptionsGroup.withName(AuthenticationType.REFRESH_TOKEN).options("clientId", "clientSecret", "refreshToken", "!password", "!keystore"), OptionsGroup.withName(AuthenticationType.JWT).options("clientId", "userName", "keystore", "!password", "!refreshToken"))).     // Validate using the catalog     super.verifyParametersAgainstCatalog(builder, parameters).     return builder.build(). }
false;protected;1;25;;// ********************************* // Connectivity validation // ********************************* @Override protected Result verifyConnectivity(Map<String, Object> parameters) {     // Default is success     ResultBuilder builder = ResultBuilder.withStatusAndScope(Result.Status.OK, Scope.CONNECTIVITY).     try {         SalesforceClientTemplate.invoke(getCamelContext(), parameters, client -> {             client.getVersions(Collections.emptyMap(), (response, headers, exception) -> processSalesforceException(builder, Optional.ofNullable(exception))).             return null.         }).     } catch (NoSuchOptionException e) {         builder.error(ResultErrorBuilder.withMissingOption(e.getOptionName()).build()).     } catch (SalesforceException e) {         processSalesforceException(builder, Optional.of(e)).     } catch (Exception e) {         builder.error(ResultErrorBuilder.withException(e).build()).     }     return builder.build(). }
false;private,static;2;19;;// ********************************* // Helpers // ********************************* private static void processSalesforceException(ResultBuilder builder, Optional<SalesforceException> exception) {     exception.ifPresent(e -> {         builder.error(ResultErrorBuilder.withException(e).detail(VerificationError.HttpAttribute.HTTP_CODE, e.getStatusCode()).build()).         for (RestError error : e.getErrors()) {             builder.error(ResultErrorBuilder.withCode(VerificationError.StandardCode.GENERIC).description(error.getMessage()).parameterKeys(error.getFields()).detail("salesforce_code", error.getErrorCode()).build()).         }     }). }
