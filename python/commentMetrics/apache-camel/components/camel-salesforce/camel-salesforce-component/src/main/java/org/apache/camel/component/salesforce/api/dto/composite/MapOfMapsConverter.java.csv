commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean canConvert(final Class type) {     return true. }
false;public;3;4;;@Override public void marshal(final Object source, final HierarchicalStreamWriter writer, final MarshallingContext context) {     context.convertAnother(source). }
false;public;2;10;;@Override public Object unmarshal(final HierarchicalStreamReader reader, final UnmarshallingContext context) {     final Map<String, Object> ret = new HashMap<>().     while (reader.hasMoreChildren()) {         readMap(reader, ret).     }     return ret. }
false;;2;36;;Object readMap(final HierarchicalStreamReader reader, final Map<String, Object> map) {     if (reader.hasMoreChildren()) {         reader.moveDown().         final String key = reader.getNodeName().         final Map<String, String> attributes = new HashMap<>().         final Iterator attributeNames = reader.getAttributeNames().         while (attributeNames.hasNext()) {             final String attributeName = (String) attributeNames.next().             attributes.put(attributeName, reader.getAttribute(attributeName)).         }         Object nested = readMap(reader, new HashMap<>()).         if (!attributes.isEmpty()) {             if (nested instanceof String) {                 final Map<Object, Object> newNested = new HashMap<>().                 newNested.put(key, nested).                 newNested.put(ATTRIBUTES_PROPERTY, attributes).                 nested = newNested.             } else {                 @SuppressWarnings("unchecked")                 final Map<String, Object> nestedMap = (Map<String, Object>) nested.                 nestedMap.put(ATTRIBUTES_PROPERTY, attributes).             }         }         map.put(key, nested).         reader.moveUp().         readMap(reader, map).     } else {         return reader.getValue().     }     return map. }
