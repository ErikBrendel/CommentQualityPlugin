commented;modifiers;parameterAmount;loc;comment;code
false;private;1;21;;private Message createThreadedTestEmail(String previousThreadId) throws MessagingException, IOException {     com.google.api.services.gmail.model.Profile profile = requestBody("google-mail://users/getProfile?inBody=userId", CURRENT_USERID).     Properties props = new Properties().     Session session = Session.getDefaultInstance(props, null).     MimeMessage mm = new MimeMessage(session).     mm.addRecipients(javax.mail.Message.RecipientType.TO, profile.getEmailAddress()).     mm.setSubject("Hello from camel-google-mail").     mm.setContent("Camel rocks!", "text/plain").     Message createMessageWithEmail = createMessageWithEmail(mm).     if (previousThreadId != null) {         createMessageWithEmail.setThreadId(previousThreadId).     }     Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelGoogleMail.userId", CURRENT_USERID).     // parameter type is com.google.api.services.gmail.model.Message     headers.put("CamelGoogleMail.content", createMessageWithEmail).     return requestBodyAndHeaders("google-mail://messages/send", null, headers). }
false;private;1;8;;private Message createMessageWithEmail(MimeMessage email) throws MessagingException, IOException {     ByteArrayOutputStream baos = new ByteArrayOutputStream().     email.writeTo(baos).     String encodedEmail = Base64.encodeBase64URLSafeString(baos.toByteArray()).     Message message = new Message().     message.setRaw(encodedEmail).     return message. }
false;public;0;23;;@Test public void testList() throws Exception {     Message m1 = createThreadedTestEmail(null).     Message m2 = createThreadedTestEmail(m1.getThreadId()).     Map<String, Object> headers = new HashMap<>().     headers.put("CamelGoogleMail.q", "subject:\"Hello from camel-google-mail\"").     // using String message body for single parameter "userId"     com.google.api.services.gmail.model.ListThreadsResponse result = requestBodyAndHeaders("direct://LIST", CURRENT_USERID, headers).     assertNotNull("list result", result).     assertTrue(result.getThreads().size() > 0).     LOG.debug("list: " + result).     headers = new HashMap<>().     // parameter type is String     headers.put("CamelGoogleMail.userId", CURRENT_USERID).     // parameter type is String     headers.put("CamelGoogleMail.id", m1.getThreadId()).     requestBodyAndHeaders("direct://DELETE", null, headers). }
false;public;0;21;;@Override public void configure() {     // test route for delete     from("direct://DELETE").to("google-mail://" + PATH_PREFIX + "/delete").     // test route for get     from("direct://GET").to("google-mail://" + PATH_PREFIX + "/get").     // test route for list     from("direct://LIST").to("google-mail://" + PATH_PREFIX + "/list?inBody=userId").     // test route for modify     from("direct://MODIFY").to("google-mail://" + PATH_PREFIX + "/modify").     // test route for trash     from("direct://TRASH").to("google-mail://" + PATH_PREFIX + "/trash").     // test route for untrash     from("direct://UNTRASH").to("google-mail://" + PATH_PREFIX + "/untrash"). }
false;protected;0;26;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             // test route for delete             from("direct://DELETE").to("google-mail://" + PATH_PREFIX + "/delete").             // test route for get             from("direct://GET").to("google-mail://" + PATH_PREFIX + "/get").             // test route for list             from("direct://LIST").to("google-mail://" + PATH_PREFIX + "/list?inBody=userId").             // test route for modify             from("direct://MODIFY").to("google-mail://" + PATH_PREFIX + "/modify").             // test route for trash             from("direct://TRASH").to("google-mail://" + PATH_PREFIX + "/trash").             // test route for untrash             from("direct://UNTRASH").to("google-mail://" + PATH_PREFIX + "/untrash").         }     }. }
