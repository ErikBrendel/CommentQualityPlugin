commented;modifiers;parameterAmount;loc;comment;code
false;public;0;38;;@Test public void testLabels() throws Exception {     // using String message body for single parameter "userId"     com.google.api.services.gmail.model.ListLabelsResponse labels = requestBody("direct://LIST", CURRENT_USERID).     String labelId = null.     if (getTestLabel(labels) == null) {         Map<String, Object> headers = new HashMap<>().         // parameter type is String         headers.put("CamelGoogleMail.userId", CURRENT_USERID).         Label label = new Label().setName(CAMEL_TEST_LABEL).setMessageListVisibility("show").setLabelListVisibility("labelShow").         // parameter type is com.google.api.services.gmail.model.Label         headers.put("CamelGoogleMail.content", label).         com.google.api.services.gmail.model.Label result = requestBodyAndHeaders("direct://CREATE", null, headers).         assertNotNull("create result", result).         labelId = result.getId().     } else {         labelId = getTestLabel(labels).getId().     }     // using String message body for single parameter "userId"     labels = requestBody("direct://LIST", CURRENT_USERID).     assertTrue(getTestLabel(labels) != null).     Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelGoogleMail.userId", CURRENT_USERID).     // parameter type is String     headers.put("CamelGoogleMail.id", labelId).     requestBodyAndHeaders("direct://DELETE", null, headers).     // using String message body for single parameter "userId"     labels = requestBody("direct://LIST", CURRENT_USERID).     assertTrue(getTestLabel(labels) == null). }
false;private;1;8;;private Label getTestLabel(com.google.api.services.gmail.model.ListLabelsResponse labels) {     for (Label label : labels.getLabels()) {         if (CAMEL_TEST_LABEL.equals(label.getName())) {             return label.         }     }     return null. }
false;public;0;21;;@Override public void configure() {     // test route for create     from("direct://CREATE").to("google-mail://" + PATH_PREFIX + "/create").     // test route for delete     from("direct://DELETE").to("google-mail://" + PATH_PREFIX + "/delete").     // test route for get     from("direct://GET").to("google-mail://" + PATH_PREFIX + "/get").     // test route for list     from("direct://LIST").to("google-mail://" + PATH_PREFIX + "/list?inBody=userId").     // test route for patch     from("direct://PATCH").to("google-mail://" + PATH_PREFIX + "/patch").     // test route for update     from("direct://UPDATE").to("google-mail://" + PATH_PREFIX + "/update"). }
false;protected;0;26;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             // test route for create             from("direct://CREATE").to("google-mail://" + PATH_PREFIX + "/create").             // test route for delete             from("direct://DELETE").to("google-mail://" + PATH_PREFIX + "/delete").             // test route for get             from("direct://GET").to("google-mail://" + PATH_PREFIX + "/get").             // test route for list             from("direct://LIST").to("google-mail://" + PATH_PREFIX + "/list?inBody=userId").             // test route for patch             from("direct://PATCH").to("google-mail://" + PATH_PREFIX + "/patch").             // test route for update             from("direct://UPDATE").to("google-mail://" + PATH_PREFIX + "/update").         }     }. }
