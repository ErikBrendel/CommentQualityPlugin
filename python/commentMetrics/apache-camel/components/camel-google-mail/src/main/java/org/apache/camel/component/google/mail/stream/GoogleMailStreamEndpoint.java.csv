commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Producer createProducer() throws Exception {     throw new UnsupportedOperationException("The camel google mail stream component doesn't support producer"). }
false;public;1;26;;@Override public Consumer createConsumer(Processor processor) throws Exception {     String unreadLabelId = null.     List labelsIds = new ArrayList<>().     ListLabelsResponse listResponse = getClient().users().labels().list("me").execute().     for (Label label : listResponse.getLabels()) {         Label countLabel = getClient().users().labels().get("me", label.getId()).execute().         if (countLabel.getName().equalsIgnoreCase("UNREAD")) {             unreadLabelId = countLabel.getId().         }     }     if (ObjectHelper.isNotEmpty(getConfiguration().getLabels())) {         List<String> plainLabels = splitLabels(getConfiguration().getLabels()).         for (Label label : listResponse.getLabels()) {             Label countLabel = getClient().users().labels().get("me", label.getId()).execute().             for (String plainLabel : plainLabels) {                 if (countLabel.getName().equalsIgnoreCase(plainLabel)) {                     labelsIds.add(countLabel.getId()).                 }             }         }     }     final GoogleMailStreamConsumer consumer = new GoogleMailStreamConsumer(this, processor, unreadLabelId, labelsIds).     configureConsumer(consumer).     return consumer. }
false;public;0;3;;public Gmail getClient() {     return ((GoogleMailStreamComponent) getComponent()).getClient(configuration). }
false;public;0;3;;public GoogleMailClientFactory getClientFactory() {     return ((GoogleMailStreamComponent) getComponent()).getClientFactory(). }
false;public;1;3;;public void setClientFactory(GoogleMailClientFactory clientFactory) {     ((GoogleMailStreamComponent) getComponent()).setClientFactory(clientFactory). }
false;public;0;3;;public GoogleMailStreamConfiguration getConfiguration() {     return configuration. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;2;14;;public Exchange createExchange(ExchangePattern pattern, com.google.api.services.gmail.model.Message mail) {     Exchange exchange = super.createExchange(pattern).     Message message = exchange.getIn().     exchange.getIn().setHeader(GoogleMailStreamConstants.MAIL_ID, mail.getId()).     List<MessagePart> parts = mail.getPayload().getParts().     if (parts != null && parts.get(0).getBody().getData() != null) {         byte[] bodyBytes = Base64.decodeBase64(parts.get(0).getBody().getData().trim()).         String body = new String(bodyBytes, StandardCharsets.UTF_8).         message.setBody(body).     }     setHeaders(message, mail.getPayload().getHeaders()).     return exchange. }
false;private;2;20;;private void setHeaders(Message message, List<MessagePartHeader> headers) {     for (MessagePartHeader header : headers) {         String headerName = header.getName().         if ("SUBJECT".equalsIgnoreCase(headerName)) {             message.setHeader(GoogleMailStreamConstants.MAIL_SUBJECT, header.getValue()).         }         if ("TO".equalsIgnoreCase(headerName)) {             message.setHeader(GoogleMailStreamConstants.MAIL_TO, header.getValue()).         }         if ("FROM".equalsIgnoreCase(headerName)) {             message.setHeader(GoogleMailStreamConstants.MAIL_FROM, header.getValue()).         }         if ("CC".equalsIgnoreCase(headerName)) {             message.setHeader(GoogleMailStreamConstants.MAIL_CC, header.getValue()).         }         if ("BCC".equalsIgnoreCase(headerName)) {             message.setHeader(GoogleMailStreamConstants.MAIL_BCC, header.getValue()).         }     } }
false;private;1;3;;private List<String> splitLabels(String labels) {     return Splitter.on(',').splitToList(labels). }
