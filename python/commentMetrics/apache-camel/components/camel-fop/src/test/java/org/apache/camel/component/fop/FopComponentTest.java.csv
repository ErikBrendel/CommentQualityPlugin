commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data").     try {         super.setUp().     } catch (Throwable e) {         canTest = false.     } }
false;public;0;22;;@Test public void createPdfUsingXmlDataAndXsltTransformation() throws Exception {     if (!canTest) {         // cannot run on CI         return.     }     resultEndpoint.expectedMessageCount(1).     FileInputStream inputStream = new FileInputStream("src/test/data/xml/data.xml").     template.sendBody(inputStream).     resultEndpoint.assertIsSatisfied().     PDDocument document = PDDocument.load(new File("target/data/result.pdf")).     String pdfText = FopHelper.extractTextFrom(document).     // from xsl template     assertTrue(pdfText.contains("Project")).     // from data xml     assertTrue(pdfText.contains("John Doe")).     // assert on the header "foo" being populated     Exchange exchange = resultEndpoint.getReceivedExchanges().get(0).     assertEquals("Header value is lost!", "bar", exchange.getIn().getHeader("foo")). }
false;public;0;9;;public void configure() {     from("direct:start").to("xslt:xslt/template.xsl").setHeader("foo", constant("bar")).to("fop:pdf").setHeader(Exchange.FILE_NAME, constant("result.pdf")).to("file:target/data").to("mock:result"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").to("xslt:xslt/template.xsl").setHeader("foo", constant("bar")).to("fop:pdf").setHeader(Exchange.FILE_NAME, constant("result.pdf")).to("file:target/data").to("mock:result").         }     }. }
