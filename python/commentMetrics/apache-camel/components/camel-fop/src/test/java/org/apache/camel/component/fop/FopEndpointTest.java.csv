commented;modifiers;parameterAmount;loc;comment;code
false;private;0;9;;private boolean canTest() {     try {         context().getEndpoint("fop:pdf").     } catch (Throwable e) {         return false.     }     return true. }
false;public;0;17;;@Test public void generatePdfFromXslfoWithSpecificText() throws Exception {     if (!canTest()) {         // cannot run on CI         return.     }     Endpoint endpoint = context().getEndpoint("fop:pdf").     Producer producer = endpoint.createProducer().     Exchange exchange = new DefaultExchange(context).     exchange.getIn().setBody(FopHelper.decorateTextWithXSLFO("Test Content")).     producer.process(exchange).     PDDocument document = getDocumentFrom(exchange).     String content = FopHelper.extractTextFrom(document).     assertEquals("Test Content", content). }
false;public;0;13;;@Test public void specifyCustomUserConfigurationFile() throws Exception {     if (!canTest()) {         // cannot run on CI         return.     }     FopEndpoint customConfiguredEndpoint = context().getEndpoint("fop:pdf?userConfigURL=file:src/test/data/conf/testcfg.xml", FopEndpoint.class).     float customSourceResolution = customConfiguredEndpoint.getFopFactory().getSourceResolution().     assertEquals(96.0, customSourceResolution, 0.1). }
false;public;0;13;;@Test public void specifyCustomUserConfigurationFileClasspath() throws Exception {     if (!canTest()) {         // cannot run on CI         return.     }     FopEndpoint customConfiguredEndpoint = context().getEndpoint("fop:pdf?userConfigURL=myconf/testcfg.xml", FopEndpoint.class).     float customSourceResolution = customConfiguredEndpoint.getFopFactory().getSourceResolution().     assertEquals(96.0, customSourceResolution, 0.1). }
false;public;0;18;;@Test public void setPDFRenderingMetadataPerDocument() throws Exception {     if (!canTest()) {         // cannot run on CI         return.     }     Endpoint endpoint = context().getEndpoint("fop:pdf").     Producer producer = endpoint.createProducer().     Exchange exchange = new DefaultExchange(context).     exchange.getIn().setHeader("CamelFop.Render.Creator", "Test User").     exchange.getIn().setBody(FopHelper.decorateTextWithXSLFO("Test Content")).     producer.process(exchange).     PDDocument document = getDocumentFrom(exchange).     String creator = FopHelper.getDocumentMetadataValue(document, COSName.CREATOR).     assertEquals("Test User", creator). }
false;public;0;20;;@Test public void encryptPdfWithUserPassword() throws Exception {     if (!canTest()) {         // cannot run on CI         return.     }     Endpoint endpoint = context().getEndpoint("fop:pdf").     Producer producer = endpoint.createProducer().     Exchange exchange = new DefaultExchange(context).     final String password = "secret".     exchange.getIn().setHeader("CamelFop.Encrypt.userPassword", password).     exchange.getIn().setBody(FopHelper.decorateTextWithXSLFO("Test Content")).     producer.process(exchange).     try (InputStream inputStream = exchange.getOut().getBody(InputStream.class)) {         PDDocument document = PDDocument.load(inputStream, password).         assertTrue(document.isEncrypted()).     } }
false;public;0;18;;@Test public void overridePdfOutputFormatToPlainText() throws Exception {     if (!canTest()) {         // cannot run on CI         return.     }     String defaultOutputFormat = "pdf".     Endpoint endpoint = context().getEndpoint("fop:" + defaultOutputFormat).     Producer producer = endpoint.createProducer().     Exchange exchange = new DefaultExchange(context).     exchange.getIn().setHeader(FopConstants.CAMEL_FOP_OUTPUT_FORMAT, "txt").     exchange.getIn().setBody(FopHelper.decorateTextWithXSLFO("Test Content")).     producer.process(exchange).     String plainText = exchange.getOut().getBody(String.class).trim().     assertEquals("Test Content", plainText). }
false;private;1;4;;private PDDocument getDocumentFrom(Exchange exchange) throws IOException {     InputStream inputStream = exchange.getOut().getBody(InputStream.class).     return PDDocument.load(inputStream). }
