commented;modifiers;parameterAmount;loc;comment;code
false;public;1;16;;public void process(Exchange exchange) throws Exception {     FOUserAgent userAgent = fopFactory.newFOUserAgent().     Map<String, Object> headers = exchange.getIn().getHeaders().     setRenderParameters(userAgent, headers).     setEncryptionParameters(userAgent, headers).     setUserAgentRendererOptions(userAgent, headers).     String outputFormat = getOutputFormat(exchange).     Source src = exchange.getIn().getBody(StreamSource.class).     OutputStream out = transform(userAgent, outputFormat, src).     exchange.getOut().setBody(out).     // propagate headers     exchange.getOut().setHeaders(headers). }
false;private;1;14;;private String getOutputFormat(Exchange exchange) {     String headerOutputFormat = exchange.getIn().getHeader(FopConstants.CAMEL_FOP_OUTPUT_FORMAT, String.class).     if (headerOutputFormat != null) {         // it may be a short hand         FopOutputType type = exchange.getContext().getTypeConverter().tryConvertTo(FopOutputType.class, exchange, headerOutputFormat).         if (type != null) {             return type.getFormatExtended().         } else {             return headerOutputFormat.         }     } else {         return outputFormat.     } }
false;private;3;12;;private OutputStream transform(FOUserAgent userAgent, String outputFormat, Source src) throws FOPException, TransformerException {     OutputStream out = new ByteArrayOutputStream().     Fop fop = fopFactory.newFop(outputFormat, userAgent, out).     TransformerFactory transformerFactory = TransformerFactory.newInstance().     transformerFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, Boolean.TRUE).     Transformer transformer = transformerFactory.newTransformer().     Result res = new SAXResult(fop.getDefaultHandler()).     transformer.transform(src, res).     return out. }
false;private;2;11;;@SuppressWarnings("unchecked") private void setEncryptionParameters(FOUserAgent userAgent, Map<String, Object> headers) throws Exception {     Map<String, Object> encryptionParameters = IntrospectionSupport.extractProperties(headers, FopConstants.CAMEL_FOP_ENCRYPT).     if (!encryptionParameters.isEmpty()) {         PDFEncryptionParams encryptionParams = new PDFEncryptionParams().         IntrospectionSupport.setProperties(encryptionParams, encryptionParameters).         userAgent.getRendererOptions().put("encryption-params", encryptionParams).     } }
false;private;2;6;;private void setUserAgentRendererOptions(FOUserAgent userAgent, Map<String, Object> headers) {     Map<String, Object> parameters = IntrospectionSupport.extractProperties(headers, FopConstants.CAMEL_FOP_RENDERER_OPTIONS).     if (!parameters.isEmpty()) {         userAgent.getRendererOptions().putAll(parameters).     } }
false;private;2;6;;private void setRenderParameters(FOUserAgent userAgent, Map<String, Object> headers) throws Exception {     Map<String, Object> parameters = IntrospectionSupport.extractProperties(headers, FopConstants.CAMEL_FOP_RENDER).     if (!parameters.isEmpty()) {         IntrospectionSupport.setProperties(userAgent, parameters).     } }
