# id;timestamp;commentText;codeText;commentWords;codeWords
TemplatesFactory -> public Templates newTemplates(final InputStream rules);1415211488;Returns an instance of compiled schematron templates.__@return;public Templates newTemplates(final InputStream rules) {__        TransformerFactory fac = TransformerFactory.newInstance()__        fac.setURIResolver(new ClassPathURIResolver(Constants.SCHEMATRON_TEMPLATES_ROOT_DIR))__        fac.setAttribute(LINE_NUMBERING, true)__        return getTemplates(rules, fac)__    };returns,an,instance,of,compiled,schematron,templates,return;public,templates,new,templates,final,input,stream,rules,transformer,factory,fac,transformer,factory,new,instance,fac,set,uriresolver,new,class,path,uriresolver,constants,fac,set,attribute,true,return,get,templates,rules,fac
TemplatesFactory -> public Templates newTemplates(final InputStream rules);1426745398;Returns an instance of compiled schematron templates.__@return;public Templates newTemplates(final InputStream rules) {__        TransformerFactory fac = TransformerFactory.newInstance()__        fac.setURIResolver(new ClassPathURIResolver(Constants.SCHEMATRON_TEMPLATES_ROOT_DIR))__        fac.setAttribute(LINE_NUMBERING, true)__        return getTemplates(rules, fac)__    };returns,an,instance,of,compiled,schematron,templates,return;public,templates,new,templates,final,input,stream,rules,transformer,factory,fac,transformer,factory,new,instance,fac,set,uriresolver,new,class,path,uriresolver,constants,fac,set,attribute,true,return,get,templates,rules,fac
TemplatesFactory -> private Templates getTemplates(InputStream rules, TransformerFactory fac);1415211488;Generate the schematron template for given rule.__@param rules the schematron rules_@param fac   the transformer factory._@return schematron template.;private Templates getTemplates(InputStream rules, TransformerFactory fac) {__        Node node = null__        Source source = new StreamSource(rules)__        try {_            for (String template : PIPELINE) {_                Source xsl = new StreamSource(ClassLoader.getSystemResourceAsStream(Constants.SCHEMATRON_TEMPLATES_ROOT_DIR_                        .concat(File.separator).concat(template)))__                Transformer t = fac.newTransformer(xsl)__                DOMResult result = new DOMResult()__                t.transform(source, result)__                source = new DOMSource(node = result.getNode())__            }_            return fac.newTemplates(new DOMSource(node))__        } catch (Exception e) {_            logger.error(e.getMessage(), e)__            throw new SchematronConfigException(e)__        }_    };generate,the,schematron,template,for,given,rule,param,rules,the,schematron,rules,param,fac,the,transformer,factory,return,schematron,template;private,templates,get,templates,input,stream,rules,transformer,factory,fac,node,node,null,source,source,new,stream,source,rules,try,for,string,template,pipeline,source,xsl,new,stream,source,class,loader,get,system,resource,as,stream,constants,concat,file,separator,concat,template,transformer,t,fac,new,transformer,xsl,domresult,result,new,domresult,t,transform,source,result,source,new,domsource,node,result,get,node,return,fac,new,templates,new,domsource,node,catch,exception,e,logger,error,e,get,message,e,throw,new,schematron,config,exception,e
TemplatesFactory -> private Templates getTemplates(InputStream rules, TransformerFactory fac);1426745398;Generate the schematron template for given rule.__@param rules the schematron rules_@param fac   the transformer factory._@return schematron template.;private Templates getTemplates(InputStream rules, TransformerFactory fac) {__        Node node = null__        Source source = new StreamSource(rules)__        try {_            for (String template : PIPELINE) {_                Source xsl = new StreamSource(ClassLoader.getSystemResourceAsStream(Constants.SCHEMATRON_TEMPLATES_ROOT_DIR_                        .concat("/").concat(template)))__                Transformer t = fac.newTransformer(xsl)__                DOMResult result = new DOMResult()__                t.transform(source, result)__                source = new DOMSource(node = result.getNode())__            }_            return fac.newTemplates(new DOMSource(node))__        } catch (Exception e) {_            logger.error(e.getMessage(), e)__            throw new SchematronConfigException(e)__        }_    };generate,the,schematron,template,for,given,rule,param,rules,the,schematron,rules,param,fac,the,transformer,factory,return,schematron,template;private,templates,get,templates,input,stream,rules,transformer,factory,fac,node,node,null,source,source,new,stream,source,rules,try,for,string,template,pipeline,source,xsl,new,stream,source,class,loader,get,system,resource,as,stream,constants,concat,concat,template,transformer,t,fac,new,transformer,xsl,domresult,result,new,domresult,t,transform,source,result,source,new,domsource,node,result,get,node,return,fac,new,templates,new,domsource,node,catch,exception,e,logger,error,e,get,message,e,throw,new,schematron,config,exception,e
TemplatesFactory -> public static TemplatesFactory newInstance();1415211488;Singleton constructor___@return;public static TemplatesFactory newInstance() {__        return INSTANCE__    };singleton,constructor,return;public,static,templates,factory,new,instance,return,instance
TemplatesFactory -> public static TemplatesFactory newInstance();1426745398;Singleton constructor___@return;public static TemplatesFactory newInstance() {__        return INSTANCE__    };singleton,constructor,return;public,static,templates,factory,new,instance,return,instance
TemplatesFactory -> public static TemplatesFactory newInstance();1433485017;Singleton constructor___@return;public static TemplatesFactory newInstance() {__        return INSTANCE__    };singleton,constructor,return;public,static,templates,factory,new,instance,return,instance
