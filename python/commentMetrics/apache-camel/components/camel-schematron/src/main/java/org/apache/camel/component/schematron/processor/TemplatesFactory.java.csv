commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;4;/**  * Singleton constructor.  *  * @return  */ ;/**  * Singleton constructor.  *  * @return  */ public static TemplatesFactory newInstance() {     return INSTANCE. }
true;public;2;20;/**  * Generate the schematron template for given rule.  *  * @param rules the schematron rules  * @param fac   the transformer factory.  * @return schematron template.  */ ;/**  * Generate the schematron template for given rule.  *  * @param rules the schematron rules  * @param fac   the transformer factory.  * @return schematron template.  */ public Templates getTemplates(final InputStream rules, final TransformerFactory fac) {     Node node = null.     Source source = new StreamSource(rules).     try {         for (String template : PIPELINE) {             String path = Constants.SCHEMATRON_TEMPLATES_ROOT_DIR.concat("/").concat(template).             InputStream xsl = this.getClass().getClassLoader().getResourceAsStream(path).             Transformer t = fac.newTransformer(new StreamSource(xsl)).             DOMResult result = new DOMResult().             t.transform(source, result).             source = new DOMSource(node = result.getNode()).         }         return fac.newTemplates(new DOMSource(node)).     } catch (Exception e) {         logger.error(e.getMessage(), e).         throw new SchematronConfigException(e).     } }
