commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Producer createProducer() throws Exception {     return new SchematronProducer(this). }
false;public;1;3;;public Consumer createConsumer(Processor processor) throws Exception {     throw new UnsupportedOperationException("Consumer is not implemented for this component"). }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;0;3;;public String getPath() {     return path. }
true;public;1;3;/**  * The path to the schematron rules file. Can either be in class path or location in the file system.  */ ;/**  * The path to the schematron rules file. Can either be in class path or location in the file system.  */ public void setPath(String path) {     this.path = path. }
true;public;1;3;/**  * Flag to abort the route and throw a schematron validation exception.  */ ;/**  * Flag to abort the route and throw a schematron validation exception.  */ public void setAbort(boolean abort) {     this.abort = abort. }
false;public;0;3;;public boolean isAbort() {     return abort. }
false;public;0;3;;public Templates getRules() {     return rules. }
true;public;1;3;/**  * To use the given schematron rules instead of loading from the path  */ ;/**  * To use the given schematron rules instead of loading from the path  */ public void setRules(Templates rules) {     this.rules = rules. }
true;public;1;3;/**  * Set the {@link URIResolver} to be used for resolving schematron includes in the rules file.  */ ;/**  * Set the {@link URIResolver} to be used for resolving schematron includes in the rules file.  */ public void setUriResolver(URIResolver uriResolver) {     this.uriResolver = uriResolver. }
false;public;0;3;;public URIResolver getUriResolver() {     return uriResolver. }
false;protected;0;33;;@Override protected void doStart() throws Exception {     super.doStart().     if (transformerFactory == null) {         createTransformerFactory().     }     if (rules == null) {         try {             // Attempt to read the schematron rules from the class path first.             log.debug("Reading schematron rules from class path {}", path).             InputStream schRules = ResourceHelper.resolveMandatoryResourceAsInputStream(getCamelContext(), path).             rules = TemplatesFactory.newInstance().getTemplates(schRules, transformerFactory).         } catch (Exception classPathException) {             // Attempts from the file system.             log.debug("Error loading schematron rules from class path, attempting file system {}", path).             try {                 InputStream schRules = FileUtils.openInputStream(new File(path)).                 rules = TemplatesFactory.newInstance().getTemplates(schRules, transformerFactory).             } catch (FileNotFoundException e) {                 log.debug("Schematron rules not found in the file system {}", path).                 // Can be more meaningful, for example, xslt compilation error.                 throw classPathException.             }         }         // rules not found in class path nor in file system.         if (rules == null) {             log.error("Failed to load schematron rules {}", path).             throw new SchematronConfigException("Failed to load schematron rules: " + path).         }     } }
false;private;0;10;;private void createTransformerFactory() throws ClassNotFoundException {     // provide the class loader of this component to work in OSGi environments     Class<TransformerFactory> factoryClass = getCamelContext().getClassResolver().resolveMandatoryClass(SAXON_TRANSFORMER_FACTORY_CLASS_NAME, TransformerFactory.class, SchematronComponent.class.getClassLoader()).     log.debug("Using TransformerFactoryClass {}", factoryClass).     transformerFactory = getCamelContext().getInjector().newInstance(factoryClass).     transformerFactory.setURIResolver(new ClassPathURIResolver(Constants.SCHEMATRON_TEMPLATES_ROOT_DIR, this.uriResolver)).     transformerFactory.setAttribute(LINE_NUMBERING, true). }
