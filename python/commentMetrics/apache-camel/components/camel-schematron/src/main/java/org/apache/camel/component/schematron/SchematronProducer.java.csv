commented;modifiers;parameterAmount;loc;comment;code
true;public;1;22;/**  * Processes the payload. Validates the XML using the SchematronEngine  *  * @param exchange  * @throws Exception  */ ;/**  * Processes the payload. Validates the XML using the SchematronEngine  *  * @param exchange  * @throws Exception  */ public void process(Exchange exchange) throws Exception {     final SchematronProcessor schematronProcessor = SchematronProcessorFactory.newSchematronEngine(endpoint.getRules()).     final Object payload = exchange.getIn().getBody().     final String report.     if (payload instanceof Source) {         logger.debug("Applying schematron validation on payload: {}", payload).         report = schematronProcessor.validate((Source) payload).     } else if (payload instanceof String) {         logger.debug("Applying schematron validation on payload: {}", payload).         report = schematronProcessor.validate((String) payload).     } else {         String stringPayload = exchange.getIn().getBody(String.class).         logger.debug("Applying schematron validation on payload: {}", stringPayload).         report = schematronProcessor.validate(stringPayload).     }     logger.debug("Schematron validation report \n {}", report).     String status = getValidationStatus(report).     logger.info("Schematron validation status : {}", status).     setValidationReport(exchange, report, status). }
true;private;3;12;/**  * Sets validation report and status  *  * @param exchange  * @param report  * @param status  */ ;/**  * Sets validation report and status  *  * @param exchange  * @param report  * @param status  */ private void setValidationReport(Exchange exchange, String report, String status) {     // if exchange pattern is In and Out set details on the Out message.     Map<String, Object> headers = new HashMap<>().     headers.put(Constants.VALIDATION_STATUS, status).     headers.put(Constants.VALIDATION_REPORT, report).     if (exchange.getPattern().isOutCapable()) {         exchange.getOut().setHeaders(exchange.getIn().getHeaders()).         exchange.getOut().getHeaders().putAll(headers).     } else {         exchange.getIn().getHeaders().putAll(headers).     } }
true;private;1;7;/**  * Get validation status, SUCCESS or FAILURE  *  * @param report  * @return  */ ;/**  * Get validation status, SUCCESS or FAILURE  *  * @param report  * @return  */ private String getValidationStatus(final String report) {     String status = report.contains(Constants.FAILED_ASSERT) ? Constants.FAILED : Constants.SUCCESS.     if (this.endpoint.isAbort() && Constants.FAILED.equals(status)) {         throw new SchematronValidationException("Schematron validation failure \n" + report).     }     return status. }
