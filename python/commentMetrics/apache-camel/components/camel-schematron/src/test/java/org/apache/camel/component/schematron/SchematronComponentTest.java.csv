commented;modifiers;parameterAmount;loc;comment;code
true;public;0;12;/**  * @throws Exception  */ ;/**  * @throws Exception  */ @Test public void testSendBodyAsString() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     String payload = IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-1.xml")).     template.sendBody("direct:start", payload).     assertMockEndpointsSatisfied().     String result = mock.getExchanges().get(0).getIn().getHeader(Constants.VALIDATION_REPORT, String.class).     assertEquals(0, Integer.valueOf(Utils.evaluate("count(//svrl:failed-assert)", result)).intValue()).     assertEquals(0, Integer.valueOf(Utils.evaluate("count(//svrl:successful-report)", result)).intValue()). }
true;public;0;16;/**  * @throws Exception  */ ;/**  * @throws Exception  */ @Test public void testSendBodyAsInputStreamInvalidXML() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     String payload = IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-2.xml")).     template.sendBody("direct:start", payload).     assertMockEndpointsSatisfied().     String result = mock.getExchanges().get(0).getIn().getHeader(Constants.VALIDATION_REPORT, String.class).     // should throw two assertions because of the missing chapters in the XML.     assertEquals("A chapter should have a title", Utils.evaluate("//svrl:failed-assert[1]/svrl:text", result)).     assertEquals("A chapter should have a title", Utils.evaluate("//svrl:failed-assert[2]/svrl:text", result)). }
false;public;0;5;;public void configure() {     from("direct:start").to("schematron://sch/schematron-1.sch").to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:start").to("schematron://sch/schematron-1.sch").to("mock:result").         }     }. }
