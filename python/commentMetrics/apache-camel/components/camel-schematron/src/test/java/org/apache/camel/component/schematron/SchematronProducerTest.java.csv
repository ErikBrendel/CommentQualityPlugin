commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;9;;@BeforeClass public static void setUP() {     SchematronEndpoint endpoint = new SchematronEndpoint().     TransformerFactory fac = new TransformerFactoryImpl().     fac.setURIResolver(new ClassPathURIResolver(Constants.SCHEMATRON_TEMPLATES_ROOT_DIR, endpoint.getUriResolver())).     Templates templates = TemplatesFactory.newInstance().getTemplates(ClassLoader.getSystemResourceAsStream("sch/schematron-1.sch"), fac).     endpoint.setRules(templates).     producer = new SchematronProducer(endpoint). }
false;public;0;11;;@Test public void testProcessValidXML() throws Exception {     Exchange exc = new DefaultExchange(context, ExchangePattern.InOut).     exc.getIn().setBody(ClassLoader.getSystemResourceAsStream("xml/article-1.xml")).     // process xml payload     producer.process(exc).     // assert     assertTrue(exc.getOut().getHeader(Constants.VALIDATION_STATUS).equals(Constants.SUCCESS)). }
false;public;0;12;;@Test public void testProcessInValidXML() throws Exception {     Exchange exc = new DefaultExchange(context, ExchangePattern.InOut).     exc.getIn().setBody(ClassLoader.getSystemResourceAsStream("xml/article-2.xml")).     // process xml payload     producer.process(exc).     // assert     assertTrue(exc.getOut().getHeader(Constants.VALIDATION_STATUS).equals(Constants.FAILED)). }
false;public;0;11;;@Test public void testProcessValidXMLAsSource() throws Exception {     Exchange exc = new DefaultExchange(context, ExchangePattern.InOut).     exc.getIn().setBody(new SAXSource(getXMLReader(), new InputSource(ClassLoader.getSystemResourceAsStream("xml/article-1.xml")))).     // process xml payload     producer.process(exc).     // assert     assertTrue(exc.getOut().getHeader(Constants.VALIDATION_STATUS).equals(Constants.SUCCESS)). }
false;public;0;12;;@Test public void testProcessInValidXMLAsSource() throws Exception {     Exchange exc = new DefaultExchange(context, ExchangePattern.InOut).     exc.getIn().setBody(new SAXSource(getXMLReader(), new InputSource(ClassLoader.getSystemResourceAsStream("xml/article-2.xml")))).     // process xml payload     producer.process(exc).     // assert     assertTrue(exc.getOut().getHeader(Constants.VALIDATION_STATUS).equals(Constants.FAILED)). }
false;private,static;0;7;;private static XMLReader getXMLReader() throws ParserConfigurationException, SAXException {     final SAXParserFactory fac = SAXParserFactory.newInstance().     fac.setValidating(false).     final SAXParser parser = fac.newSAXParser().     XMLReader reader = parser.getXMLReader().     return reader. }
