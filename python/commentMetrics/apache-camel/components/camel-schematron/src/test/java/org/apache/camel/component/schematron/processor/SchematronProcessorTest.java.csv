commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testValidXML() throws Exception {     String payload = IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-1.xml")).     logger.info("Validating payload: {}", payload).     // validate     String result = getProcessor("sch/schematron-1.sch", null).validate(payload).     logger.info("Schematron Report: {}", result).     assertEquals(0, Integer.valueOf(Utils.evaluate("count(//svrl:failed-assert)", result)).intValue()).     assertEquals(0, Integer.valueOf(Utils.evaluate("count(//svrl:successful-report)", result)).intValue()). }
false;public;0;11;;@Test public void testInvalidXMLWithClientResolver() throws Exception {     String payload = IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-3.xml")).     logger.info("Validating payload: {}", payload).     // validate     String result = getProcessor("sch/schematron-3.sch", new ClientUriResolver()).validate(payload).     logger.info("Schematron Report: {}", result).     assertEquals("A title should be at least two characters", Utils.evaluate("//svrl:failed-assert/svrl:text", result)).     assertEquals(0, Integer.valueOf(Utils.evaluate("count(//svrl:successful-report)", result)).intValue()). }
false;public;0;13;;@Test public void testInValidXML() throws Exception {     String payload = IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-2.xml")).     logger.info("Validating payload: {}", payload).     // validate     String result = getProcessor("sch/schematron-2.sch", null).validate(payload).     logger.info("Schematron Report: {}", result).     // should throw two assertions because of the missing chapters in the XML.     assertEquals("A chapter should have a title", Utils.evaluate("//svrl:failed-assert/svrl:text", result)).     assertEquals("'chapter' element has more than one title present", Utils.evaluate("//svrl:successful-report/svrl:text", result).trim()). }
true;private;2;6;/**  * Returns schematron processor  *  * @param schematron  * @param clientResolver  * @return  */ ;/**  * Returns schematron processor  *  * @param schematron  * @param clientResolver  * @return  */ private SchematronProcessor getProcessor(final String schematron, final URIResolver clientResolver) {     TransformerFactory factory = new TransformerFactoryImpl().     factory.setURIResolver(new ClassPathURIResolver(Constants.SCHEMATRON_TEMPLATES_ROOT_DIR, clientResolver)).     Templates rules = TemplatesFactory.newInstance().getTemplates(ClassLoader.getSystemResourceAsStream(schematron), factory).     return SchematronProcessorFactory.newSchematronEngine(rules). }
false;public;2;4;;@Override public Source resolve(String href, String base) throws TransformerException {     return new StreamSource(ClientUriResolver.class.getClassLoader().getResourceAsStream("custom-resolver/".concat(href))). }
