commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testHBaseConfigurationClassLoaderSetToAppContextClassLoader() throws Exception {     ClassLoader expectedClassLoader = HBaseComponentTest.class.getClassLoader().     CamelContext camelContext = new DefaultCamelContext().     camelContext.setApplicationContextClassLoader(expectedClassLoader).     HBaseComponent component = new HBaseComponent(new DefaultCamelContext()).     component.doStart().     component.doStop().     ClassLoader actualClassLoader = component.getConfiguration().getClassLoader().     Assert.assertSame(expectedClassLoader, actualClassLoader). }
false;public;0;19;;@Test public void testHBaseConfigurationClassLoaderNotOverridden() throws Exception {     ClassLoader expectedClassLoader = HBaseComponentTest.class.getClassLoader().getParent().     Configuration configuration = HBaseConfiguration.create().     configuration.setClassLoader(expectedClassLoader).     HBaseComponent component = new HBaseComponent(new DefaultCamelContext()).     component.setConfiguration(configuration).     try {         component.doStart().     } catch (IOException e) {     // Expected because the ClassLoader we set is not the correct one, but it's safe to ignore here     }     component.doStop().     ClassLoader actualClassLoader = component.getConfiguration().getClassLoader().     Assert.assertSame(expectedClassLoader, actualClassLoader). }
false;public;0;11;;@Test public void testHBaseConfigurationClassLoaderSetToDefault() throws Exception {     ClassLoader expectedClassLoader = HBaseConfiguration.class.getClassLoader().     HBaseComponent component = new HBaseComponent(new DefaultCamelContext()).     component.doStart().     component.doStop().     ClassLoader actualClassLoader = component.getConfiguration().getClassLoader().     Assert.assertSame(expectedClassLoader, actualClassLoader). }
