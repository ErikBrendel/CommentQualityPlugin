commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Before public void setUp() throws Exception {     if (systemReady) {         try {             hbaseUtil.createTable(HBaseHelper.getHBaseFieldAsBytes(PERSON_TABLE), HBaseHelper.getHBaseFieldAsBytes(INFO_FAMILY)).         } catch (TableExistsException ex) {         // Ignore if table exists         }         this.repository = new HBaseIdempotentRepository(hbaseUtil.getConfiguration(), PERSON_TABLE, INFO_FAMILY, "mycolumn").         super.setUp().     } }
false;public;0;7;;@After public void tearDown() throws Exception {     if (systemReady) {         hbaseUtil.deleteTable(HBaseHelper.getHBaseFieldAsBytes(PERSON_TABLE)).         super.setUp().     } }
false;public;0;15;;@Test public void testAdd() throws Exception {     if (systemReady) {         // add first key         assertTrue(repository.add(key01)).         assertTrue(repository.contains(key01)).         // try to add an other one         assertTrue(repository.add(key02)).         assertTrue(repository.contains(key02)).         // try to add the first key again         assertFalse(repository.add(key01)).     } }
false;public;0;10;;@Test public void testContains() throws Exception {     if (systemReady) {         assertFalse(repository.contains(key01)).         // add key and check again         assertTrue(repository.add(key01)).         assertTrue(repository.contains(key01)).     } }
false;public;0;16;;@Test public void testRemove() throws Exception {     if (systemReady) {         // add key to remove         assertTrue(repository.add(key01)).         assertTrue(repository.contains(key01)).         // assertEquals(1, dataSet.size()).         // remove key         assertTrue(repository.remove(key01)).         // assertEquals(0, dataSet.size()).         // try to remove a key that isn't there         assertFalse(repository.remove(key02)).     } }
false;public;0;16;;@Test public void testClear() throws Exception {     if (systemReady) {         // add key to remove         assertTrue(repository.add(key01)).         assertTrue(repository.add(key02)).         assertTrue(repository.contains(key01)).         assertTrue(repository.contains(key02)).         // remove key         repository.clear().         assertFalse(repository.contains(key01)).         assertFalse(repository.contains(key02)).     } }
false;public;0;7;;@Test public void testConfirm() throws Exception {     if (systemReady) {         // it always return true         assertTrue(repository.confirm(key01)).     } }
false;public;0;15;;@Test public void testRepositoryInRoute() throws Exception {     if (systemReady) {         MockEndpoint mock = (MockEndpoint) context.getEndpoint("mock:out").         mock.expectedBodiesReceived("a", "b").         // c is a duplicate         // send 3 message with one duplicated key (key01)         template.sendBodyAndHeader("direct:in", "a", "messageId", key01).         template.sendBodyAndHeader("direct:in", "b", "messageId", key02).         template.sendBodyAndHeader("direct:in", "c", "messageId", key01).         assertMockEndpointsSatisfied().     } }
false;public;0;4;;@Override public CamelContext createCamelContext() throws Exception {     return new DefaultCamelContext(createRegistry()). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:in").idempotentConsumer(header("messageId"), repository).to("mock:out"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:in").idempotentConsumer(header("messageId"), repository).to("mock:out").         }     }. }
