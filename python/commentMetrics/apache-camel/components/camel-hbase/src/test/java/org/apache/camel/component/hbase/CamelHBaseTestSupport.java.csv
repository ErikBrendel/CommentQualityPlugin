commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;9;;@BeforeClass public static void setUpClass() throws Exception {     try {         hbaseUtil.startMiniCluster(numServers).     } catch (Exception e) {         LOG.warn("couldn't start HBase cluster. Test is not started, but passed!", e).         systemReady = false.     } }
false;public,static;0;6;;@AfterClass public static void tearDownClass() throws Exception {     if (systemReady) {         hbaseUtil.shutdownMiniCluster().     } }
false;public;0;12;;@Before public void setUp() throws Exception {     if (systemReady) {         try {             hbaseUtil.createTable(HBaseHelper.getHBaseFieldAsBytes(PERSON_TABLE), families).         } catch (TableExistsException ex) {         // Ignore if table exists         }         super.setUp().     } }
false;public;0;7;;@After public void tearDown() throws Exception {     if (systemReady) {         hbaseUtil.deleteTable(PERSON_TABLE.getBytes()).         super.tearDown().     } }
false;public;0;8;;@Override public CamelContext createCamelContext() throws Exception {     CamelContext context = new DefaultCamelContext(createRegistry()).     // configure hbase component     HBaseComponent component = context.getComponent("hbase", HBaseComponent.class).     component.setConfiguration(hbaseUtil.getConfiguration()).     return context. }
false;protected;0;13;;protected void putMultipleRows() throws IOException {     Configuration configuration = hbaseUtil.getHBaseAdmin().getConfiguration().     Connection connection = ConnectionFactory.createConnection(configuration).     Table table = connection.getTable(TableName.valueOf(PERSON_TABLE.getBytes())).     for (int r = 0. r < key.length. r++) {         Put put = new Put(key[r].getBytes()).         put.addColumn(family[0].getBytes(), column[0][0].getBytes(), body[r][0][0].getBytes()).         table.put(put).     }     IOHelper.close(table). }
