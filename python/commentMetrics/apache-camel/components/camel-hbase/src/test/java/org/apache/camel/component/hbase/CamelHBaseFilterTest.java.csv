commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     // not used, filters need to be rethink     filters.add(new ModelAwareColumnMatchingFilter().getFilteredList()).     jndi.bind("myFilters", filters).     return jndi. }
false;public;0;19;;@Test public void testPutMultiRowsAndScanWithFilters() throws Exception {     if (systemReady) {         putMultipleRows().         ProducerTemplate template = context.createProducerTemplate().         Endpoint endpoint = context.getEndpoint("direct:scan").         Exchange exchange = endpoint.createExchange(ExchangePattern.InOut).         exchange.getIn().setHeader(HBaseAttribute.HBASE_FAMILY.asHeader(), family[0]).         exchange.getIn().setHeader(HBaseAttribute.HBASE_QUALIFIER.asHeader(), column[0][0]).         exchange.getIn().setHeader(HBaseAttribute.HBASE_VALUE.asHeader(), body[0][0][0]).         Exchange resp = template.send(endpoint, exchange).         Message out = resp.getOut().         assertTrue("two first keys returned", out.getHeaders().containsValue(body[0][0][0]) && out.getHeaders().containsValue(body[1][0][0]) && !out.getHeaders().containsValue(body[2][0][0])).     } }
false;public;0;7;;@Override public void configure() {     from("direct:start").to("hbase://" + PERSON_TABLE).     from("direct:scan").to("hbase://" + PERSON_TABLE + "?operation=" + HBaseConstants.SCAN + "&maxResults=2"). }
true;protected;0;12;/**  * Factory method which derived classes can use to create a {@link org.apache.camel.builder.RouteBuilder}  * to define the routes for testing  */ ;/**  * Factory method which derived classes can use to create a {@link org.apache.camel.builder.RouteBuilder}  * to define the routes for testing  */ @Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             from("direct:start").to("hbase://" + PERSON_TABLE).             from("direct:scan").to("hbase://" + PERSON_TABLE + "?operation=" + HBaseConstants.SCAN + "&maxResults=2").         }     }. }
