commented;modifiers;parameterAmount;loc;comment;code
false;public;1;18;;@Override public boolean add(String o) {     try {         synchronized (tableName.intern()) {             if (contains(o)) {                 return false.             }             byte[] b = HBaseHelper.toBytes(o).             Put put = new Put(b).             put.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(qualifier), b).             table.put(put).             return true.         }     } catch (Exception e) {         log.warn("Error adding object {} to HBase repository.", o).         return false.     } }
false;public;1;12;;@Override public boolean contains(String o) {     try {         byte[] b = HBaseHelper.toBytes(o).         Get get = new Get(b).         get.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(qualifier)).         return table.exists(get).     } catch (Exception e) {         log.warn("Error reading object {} from HBase repository.", o).         return false.     } }
false;public;1;16;;@Override public boolean remove(String o) {     try {         byte[] b = HBaseHelper.toBytes(o).         if (table.exists(new Get(b))) {             Delete delete = new Delete(b).             table.delete(delete).             return true.         } else {             return false.         }     } catch (Exception e) {         log.warn("Error removing object {} from HBase repository.", o).         return false.     } }
false;public;1;4;;@Override public boolean confirm(String o) {     return true. }
false;public;0;14;;@Override public void clear() {     Scan s = new Scan().     ResultScanner scanner.     try {         scanner = table.getScanner(s).         for (Result rr : scanner) {             Delete d = new Delete(rr.getRow()).             table.delete(d).         }     } catch (Exception e) {         log.warn("Error clear HBase repository {}", table).     } }
false;protected;0;5;;@Override protected void doStart() throws Exception {     this.connection = ConnectionFactory.createConnection(configuration).     this.table = this.connection.getTable(TableName.valueOf(tableName)). }
false;protected;0;10;;@Override protected void doStop() throws Exception {     if (table != null) {         table.close().     }     if (connection != null) {         connection.close().     } }
