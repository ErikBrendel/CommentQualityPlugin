commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;17;;@Override protected void doStart() throws Exception {     if (configuration == null) {         configuration = HBaseConfiguration.create().         ClassLoader applicationContextClassLoader = getCamelContext().getApplicationContextClassLoader().         if (applicationContextClassLoader != null) {             configuration.setClassLoader(applicationContextClassLoader).             HBaseConfiguration.addHbaseResources(configuration).         }     }     connection = ConnectionFactory.createConnection(configuration, Executors.newFixedThreadPool(poolMaxSize)). }
false;protected;0;6;;@Override protected void doStop() throws Exception {     if (connection != null) {         connection.close().     } }
false;protected;3;7;;protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     HBaseEndpoint endpoint = new HBaseEndpoint(uri, this, connection, remaining).     Map<String, Object> mapping = IntrospectionSupport.extractProperties(parameters, "row.").     endpoint.setRowMapping(mapping).     setProperties(endpoint, parameters).     return endpoint. }
false;public;0;3;;public Configuration getConfiguration() {     return configuration. }
true;public;1;3;/**  * To use the shared configuration  */ ;/**  * To use the shared configuration  */ public void setConfiguration(Configuration configuration) {     this.configuration = configuration. }
false;public;0;3;;public int getPoolMaxSize() {     return poolMaxSize. }
true;public;1;3;/**  * Maximum number of references to keep for each table in the HTable pool.  * The default value is 10.  */ ;/**  * Maximum number of references to keep for each table in the HTable pool.  * The default value is 10.  */ public void setPoolMaxSize(int poolMaxSize) {     this.poolMaxSize = poolMaxSize. }
