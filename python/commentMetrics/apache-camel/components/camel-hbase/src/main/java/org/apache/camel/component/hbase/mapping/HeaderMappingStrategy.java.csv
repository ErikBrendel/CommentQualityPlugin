commented;modifiers;parameterAmount;loc;comment;code
true;private;2;33;/**  * Resolves the cell that the {@link Exchange} refers to.  */ ;/**  * Resolves the cell that the {@link Exchange} refers to.  */ private HBaseRow resolveRow(Message message, int index) {     HBaseRow hRow = new HBaseRow().     HBaseCell hCell = new HBaseCell().     if (message != null) {         Object id = message.getHeader(HBaseAttribute.HBASE_ROW_ID.asHeader(index)).         String rowClassName = message.getHeader(HBaseAttribute.HBASE_ROW_TYPE.asHeader(index), String.class).         Class<?> rowClass = rowClassName == null || rowClassName.isEmpty() ? String.class : message.getExchange().getContext().getClassResolver().resolveClass(rowClassName).         String columnFamily = (String) message.getHeader(HBaseAttribute.HBASE_FAMILY.asHeader(index)).         String columnName = (String) message.getHeader(HBaseAttribute.HBASE_QUALIFIER.asHeader(index)).         Object value = message.getHeader(HBaseAttribute.HBASE_VALUE.asHeader(index)).         String valueClassName = message.getHeader(HBaseAttribute.HBASE_VALUE_TYPE.asHeader(index), String.class).         Class<?> valueClass = valueClassName == null || valueClassName.isEmpty() ? String.class : message.getExchange().getContext().getClassResolver().resolveClass(valueClassName).         // Id can be accepted as null when using get, scan etc.         if (id == null && columnFamily == null && columnName == null) {             return null.         }         hRow.setId(id).         hRow.setRowType(rowClass).         if (columnFamily != null && columnName != null) {             hCell.setQualifier(columnName).             hCell.setFamily(columnFamily).             hCell.setValue(value).             // String is the default value type             hCell.setValueType((valueClass != null) ? valueClass : String.class).             hRow.getCells().add(hCell).         }     }     return hRow. }
true;public;1;22;/**  * Resolves the cells that the {@link org.apache.camel.Exchange} refers to.  */ ;/**  * Resolves the cells that the {@link org.apache.camel.Exchange} refers to.  */ @Override public HBaseData resolveModel(Message message) {     int index = 1.     HBaseData data = new HBaseData().     // We use a LinkedHashMap to preserve the order.     Map<Object, HBaseRow> rows = new LinkedHashMap<>().     HBaseRow hRow = new HBaseRow().     while (hRow != null) {         hRow = resolveRow(message, index++).         if (hRow != null) {             if (rows.containsKey(hRow.getId())) {                 rows.get(hRow.getId()).getCells().addAll(hRow.getCells()).             } else {                 rows.put(hRow.getId(), hRow).             }         }     }     for (Map.Entry<Object, HBaseRow> rowEntry : rows.entrySet()) {         data.getRows().add(rowEntry.getValue()).     }     return data. }
true;public;2;16;/**  * Applies the cells to the {@link org.apache.camel.Exchange}.  */ ;/**  * Applies the cells to the {@link org.apache.camel.Exchange}.  */ public void applyGetResults(Message message, HBaseData data) {     message.setHeaders(message.getExchange().getIn().getHeaders()).     int index = 1.     if (data == null || data.getRows() == null) {         return.     }     for (HBaseRow hRow : data.getRows()) {         if (hRow.getId() != null) {             Set<HBaseCell> cells = hRow.getCells().             for (HBaseCell cell : cells) {                 message.setHeader(HBaseAttribute.HBASE_VALUE.asHeader(index++), getValueForColumn(cells, cell.getFamily(), cell.getQualifier())).             }         }     } }
true;public;2;18;/**  * Applies the cells to the {@link org.apache.camel.Exchange}.  */ ;/**  * Applies the cells to the {@link org.apache.camel.Exchange}.  */ public void applyScanResults(Message message, HBaseData data) {     message.setHeaders(message.getExchange().getIn().getHeaders()).     int index = 1.     if (data == null || data.getRows() == null) {         return.     }     for (HBaseRow hRow : data.getRows()) {         Set<HBaseCell> cells = hRow.getCells().         for (HBaseCell cell : cells) {             message.setHeader(HBaseAttribute.HBASE_ROW_ID.asHeader(index), hRow.getId()).             message.setHeader(HBaseAttribute.HBASE_FAMILY.asHeader(index), cell.getFamily()).             message.setHeader(HBaseAttribute.HBASE_QUALIFIER.asHeader(index), cell.getQualifier()).             message.setHeader(HBaseAttribute.HBASE_VALUE.asHeader(index), cell.getValue()).         }         index++.     } }
true;private;3;10;/**  * Searches a list of cells and returns the value, if family/column matches with the specified.  */ ;/**  * Searches a list of cells and returns the value, if family/column matches with the specified.  */ private Object getValueForColumn(Set<HBaseCell> cells, String family, String qualifier) {     if (cells != null) {         for (HBaseCell cell : cells) {             if (cell.getQualifier().equals(qualifier) && cell.getFamily().equals(family)) {                 return cell.getValue().             }         }     }     return null. }
