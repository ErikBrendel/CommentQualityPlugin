# id;timestamp;commentText;codeText;commentWords;codeWords
HeaderMappingStrategy -> @Override     public HBaseData resolveModel(Message message);1338219947;Resolves the cells that the {@link org.apache.camel.Exchange} refers to.__@param message_@return;@Override_    public HBaseData resolveModel(Message message) {_        int index = 1__        HBaseData data = new HBaseData()__        _        Map<Object, HBaseRow> rows = new LinkedHashMap<Object, HBaseRow>()__        HBaseRow hRow = new HBaseRow()__        while (hRow != null) {_            hRow = resolveRow(message, index++)__            if (hRow != null) {_                if (rows.containsKey(hRow.getId())) {_                    rows.get(hRow.getId()).getCells().addAll(hRow.getCells())__                } else {_                    rows.put(hRow.getId(), hRow)__                }_            }_        }_        for (Map.Entry<Object, HBaseRow> rowEntry : rows.entrySet()) {_            data.getRows().add(rowEntry.getValue())__        }_        return data__    };resolves,the,cells,that,the,link,org,apache,camel,exchange,refers,to,param,message,return;override,public,hbase,data,resolve,model,message,message,int,index,1,hbase,data,data,new,hbase,data,map,object,hbase,row,rows,new,linked,hash,map,object,hbase,row,hbase,row,h,row,new,hbase,row,while,h,row,null,h,row,resolve,row,message,index,if,h,row,null,if,rows,contains,key,h,row,get,id,rows,get,h,row,get,id,get,cells,add,all,h,row,get,cells,else,rows,put,h,row,get,id,h,row,for,map,entry,object,hbase,row,row,entry,rows,entry,set,data,get,rows,add,row,entry,get,value,return,data
HeaderMappingStrategy -> @Override     public HBaseData resolveModel(Message message);1338838061;Resolves the cells that the {@link org.apache.camel.Exchange} refers to.__@param message_@return;@Override_    public HBaseData resolveModel(Message message) {_        int index = 1__        HBaseData data = new HBaseData()__        _        Map<Object, HBaseRow> rows = new LinkedHashMap<Object, HBaseRow>()__        HBaseRow hRow = new HBaseRow()__        while (hRow != null) {_            hRow = resolveRow(message, index++)__            if (hRow != null) {_                if (rows.containsKey(hRow.getId())) {_                    rows.get(hRow.getId()).getCells().addAll(hRow.getCells())__                } else {_                    rows.put(hRow.getId(), hRow)__                }_            }_        }_        for (Map.Entry<Object, HBaseRow> rowEntry : rows.entrySet()) {_            data.getRows().add(rowEntry.getValue())__        }_        return data__    };resolves,the,cells,that,the,link,org,apache,camel,exchange,refers,to,param,message,return;override,public,hbase,data,resolve,model,message,message,int,index,1,hbase,data,data,new,hbase,data,map,object,hbase,row,rows,new,linked,hash,map,object,hbase,row,hbase,row,h,row,new,hbase,row,while,h,row,null,h,row,resolve,row,message,index,if,h,row,null,if,rows,contains,key,h,row,get,id,rows,get,h,row,get,id,get,cells,add,all,h,row,get,cells,else,rows,put,h,row,get,id,h,row,for,map,entry,object,hbase,row,row,entry,rows,entry,set,data,get,rows,add,row,entry,get,value,return,data
HeaderMappingStrategy -> @Override     public HBaseData resolveModel(Message message);1345042758;Resolves the cells that the {@link org.apache.camel.Exchange} refers to.;@Override_    public HBaseData resolveModel(Message message) {_        int index = 1__        HBaseData data = new HBaseData()__        _        Map<Object, HBaseRow> rows = new LinkedHashMap<Object, HBaseRow>()__        HBaseRow hRow = new HBaseRow()__        while (hRow != null) {_            hRow = resolveRow(message, index++)__            if (hRow != null) {_                if (rows.containsKey(hRow.getId())) {_                    rows.get(hRow.getId()).getCells().addAll(hRow.getCells())__                } else {_                    rows.put(hRow.getId(), hRow)__                }_            }_        }_        for (Map.Entry<Object, HBaseRow> rowEntry : rows.entrySet()) {_            data.getRows().add(rowEntry.getValue())__        }_        return data__    };resolves,the,cells,that,the,link,org,apache,camel,exchange,refers,to;override,public,hbase,data,resolve,model,message,message,int,index,1,hbase,data,data,new,hbase,data,map,object,hbase,row,rows,new,linked,hash,map,object,hbase,row,hbase,row,h,row,new,hbase,row,while,h,row,null,h,row,resolve,row,message,index,if,h,row,null,if,rows,contains,key,h,row,get,id,rows,get,h,row,get,id,get,cells,add,all,h,row,get,cells,else,rows,put,h,row,get,id,h,row,for,map,entry,object,hbase,row,row,entry,rows,entry,set,data,get,rows,add,row,entry,get,value,return,data
HeaderMappingStrategy -> @Override     public HBaseData resolveModel(Message message);1347180027;Resolves the cells that the {@link org.apache.camel.Exchange} refers to.;@Override_    public HBaseData resolveModel(Message message) {_        int index = 1__        HBaseData data = new HBaseData()__        _        Map<Object, HBaseRow> rows = new LinkedHashMap<Object, HBaseRow>()__        HBaseRow hRow = new HBaseRow()__        while (hRow != null) {_            hRow = resolveRow(message, index++)__            if (hRow != null) {_                if (rows.containsKey(hRow.getId())) {_                    rows.get(hRow.getId()).getCells().addAll(hRow.getCells())__                } else {_                    rows.put(hRow.getId(), hRow)__                }_            }_        }_        for (Map.Entry<Object, HBaseRow> rowEntry : rows.entrySet()) {_            data.getRows().add(rowEntry.getValue())__        }_        return data__    };resolves,the,cells,that,the,link,org,apache,camel,exchange,refers,to;override,public,hbase,data,resolve,model,message,message,int,index,1,hbase,data,data,new,hbase,data,map,object,hbase,row,rows,new,linked,hash,map,object,hbase,row,hbase,row,h,row,new,hbase,row,while,h,row,null,h,row,resolve,row,message,index,if,h,row,null,if,rows,contains,key,h,row,get,id,rows,get,h,row,get,id,get,cells,add,all,h,row,get,cells,else,rows,put,h,row,get,id,h,row,for,map,entry,object,hbase,row,row,entry,rows,entry,set,data,get,rows,add,row,entry,get,value,return,data
HeaderMappingStrategy -> @Override     public HBaseData resolveModel(Message message);1348740711;Resolves the cells that the {@link org.apache.camel.Exchange} refers to.;@Override_    public HBaseData resolveModel(Message message) {_        int index = 1__        HBaseData data = new HBaseData()__        _        Map<Object, HBaseRow> rows = new LinkedHashMap<Object, HBaseRow>()__        HBaseRow hRow = new HBaseRow()__        while (hRow != null) {_            hRow = resolveRow(message, index++)__            if (hRow != null) {_                if (rows.containsKey(hRow.getId())) {_                    rows.get(hRow.getId()).getCells().addAll(hRow.getCells())__                } else {_                    rows.put(hRow.getId(), hRow)__                }_            }_        }_        for (Map.Entry<Object, HBaseRow> rowEntry : rows.entrySet()) {_            data.getRows().add(rowEntry.getValue())__        }_        return data__    };resolves,the,cells,that,the,link,org,apache,camel,exchange,refers,to;override,public,hbase,data,resolve,model,message,message,int,index,1,hbase,data,data,new,hbase,data,map,object,hbase,row,rows,new,linked,hash,map,object,hbase,row,hbase,row,h,row,new,hbase,row,while,h,row,null,h,row,resolve,row,message,index,if,h,row,null,if,rows,contains,key,h,row,get,id,rows,get,h,row,get,id,get,cells,add,all,h,row,get,cells,else,rows,put,h,row,get,id,h,row,for,map,entry,object,hbase,row,row,entry,rows,entry,set,data,get,rows,add,row,entry,get,value,return,data
HeaderMappingStrategy -> @Override     public HBaseData resolveModel(Message message);1423721720;Resolves the cells that the {@link org.apache.camel.Exchange} refers to.;@Override_    public HBaseData resolveModel(Message message) {_        int index = 1__        HBaseData data = new HBaseData()__        _        Map<Object, HBaseRow> rows = new LinkedHashMap<Object, HBaseRow>()__        HBaseRow hRow = new HBaseRow()__        while (hRow != null) {_            hRow = resolveRow(message, index++)__            if (hRow != null) {_                if (rows.containsKey(hRow.getId())) {_                    rows.get(hRow.getId()).getCells().addAll(hRow.getCells())__                } else {_                    rows.put(hRow.getId(), hRow)__                }_            }_        }_        for (Map.Entry<Object, HBaseRow> rowEntry : rows.entrySet()) {_            data.getRows().add(rowEntry.getValue())__        }_        return data__    };resolves,the,cells,that,the,link,org,apache,camel,exchange,refers,to;override,public,hbase,data,resolve,model,message,message,int,index,1,hbase,data,data,new,hbase,data,map,object,hbase,row,rows,new,linked,hash,map,object,hbase,row,hbase,row,h,row,new,hbase,row,while,h,row,null,h,row,resolve,row,message,index,if,h,row,null,if,rows,contains,key,h,row,get,id,rows,get,h,row,get,id,get,cells,add,all,h,row,get,cells,else,rows,put,h,row,get,id,h,row,for,map,entry,object,hbase,row,row,entry,rows,entry,set,data,get,rows,add,row,entry,get,value,return,data
HeaderMappingStrategy -> @Override     public HBaseData resolveModel(Message message);1456416872;Resolves the cells that the {@link org.apache.camel.Exchange} refers to.;@Override_    public HBaseData resolveModel(Message message) {_        int index = 1__        HBaseData data = new HBaseData()__        _        Map<Object, HBaseRow> rows = new LinkedHashMap<>()__        HBaseRow hRow = new HBaseRow()__        while (hRow != null) {_            hRow = resolveRow(message, index++)__            if (hRow != null) {_                if (rows.containsKey(hRow.getId())) {_                    rows.get(hRow.getId()).getCells().addAll(hRow.getCells())__                } else {_                    rows.put(hRow.getId(), hRow)__                }_            }_        }_        for (Map.Entry<Object, HBaseRow> rowEntry : rows.entrySet()) {_            data.getRows().add(rowEntry.getValue())__        }_        return data__    };resolves,the,cells,that,the,link,org,apache,camel,exchange,refers,to;override,public,hbase,data,resolve,model,message,message,int,index,1,hbase,data,data,new,hbase,data,map,object,hbase,row,rows,new,linked,hash,map,hbase,row,h,row,new,hbase,row,while,h,row,null,h,row,resolve,row,message,index,if,h,row,null,if,rows,contains,key,h,row,get,id,rows,get,h,row,get,id,get,cells,add,all,h,row,get,cells,else,rows,put,h,row,get,id,h,row,for,map,entry,object,hbase,row,row,entry,rows,entry,set,data,get,rows,add,row,entry,get,value,return,data
HeaderMappingStrategy -> private Object getValueForColumn(Set<HBaseCell> cells, String family, String qualifier);1338219947;Searches a list of cells and returns the value, if family/column matches with the specified.__@param family_@param qualifier_@param cells_@return;private Object getValueForColumn(Set<HBaseCell> cells, String family, String qualifier) {_        if (cells != null) {_            for (HBaseCell cell : cells) {_                if (cell.getQualifier().equals(qualifier) && cell.getFamily().equals(family)) {_                    return cell.getValue()__                }_            }_        }_        return null__    };searches,a,list,of,cells,and,returns,the,value,if,family,column,matches,with,the,specified,param,family,param,qualifier,param,cells,return;private,object,get,value,for,column,set,hbase,cell,cells,string,family,string,qualifier,if,cells,null,for,hbase,cell,cell,cells,if,cell,get,qualifier,equals,qualifier,cell,get,family,equals,family,return,cell,get,value,return,null
HeaderMappingStrategy -> private Object getValueForColumn(Set<HBaseCell> cells, String family, String qualifier);1338838061;Searches a list of cells and returns the value, if family/column matches with the specified.__@param family_@param qualifier_@param cells_@return;private Object getValueForColumn(Set<HBaseCell> cells, String family, String qualifier) {_        if (cells != null) {_            for (HBaseCell cell : cells) {_                if (cell.getQualifier().equals(qualifier) && cell.getFamily().equals(family)) {_                    return cell.getValue()__                }_            }_        }_        return null__    };searches,a,list,of,cells,and,returns,the,value,if,family,column,matches,with,the,specified,param,family,param,qualifier,param,cells,return;private,object,get,value,for,column,set,hbase,cell,cells,string,family,string,qualifier,if,cells,null,for,hbase,cell,cell,cells,if,cell,get,qualifier,equals,qualifier,cell,get,family,equals,family,return,cell,get,value,return,null
HeaderMappingStrategy -> private Object getValueForColumn(Set<HBaseCell> cells, String family, String qualifier);1345042758;Searches a list of cells and returns the value, if family/column matches with the specified.;private Object getValueForColumn(Set<HBaseCell> cells, String family, String qualifier) {_        if (cells != null) {_            for (HBaseCell cell : cells) {_                if (cell.getQualifier().equals(qualifier) && cell.getFamily().equals(family)) {_                    return cell.getValue()__                }_            }_        }_        return null__    };searches,a,list,of,cells,and,returns,the,value,if,family,column,matches,with,the,specified;private,object,get,value,for,column,set,hbase,cell,cells,string,family,string,qualifier,if,cells,null,for,hbase,cell,cell,cells,if,cell,get,qualifier,equals,qualifier,cell,get,family,equals,family,return,cell,get,value,return,null
HeaderMappingStrategy -> private Object getValueForColumn(Set<HBaseCell> cells, String family, String qualifier);1347180027;Searches a list of cells and returns the value, if family/column matches with the specified.;private Object getValueForColumn(Set<HBaseCell> cells, String family, String qualifier) {_        if (cells != null) {_            for (HBaseCell cell : cells) {_                if (cell.getQualifier().equals(qualifier) && cell.getFamily().equals(family)) {_                    return cell.getValue()__                }_            }_        }_        return null__    };searches,a,list,of,cells,and,returns,the,value,if,family,column,matches,with,the,specified;private,object,get,value,for,column,set,hbase,cell,cells,string,family,string,qualifier,if,cells,null,for,hbase,cell,cell,cells,if,cell,get,qualifier,equals,qualifier,cell,get,family,equals,family,return,cell,get,value,return,null
HeaderMappingStrategy -> private Object getValueForColumn(Set<HBaseCell> cells, String family, String qualifier);1348740711;Searches a list of cells and returns the value, if family/column matches with the specified.;private Object getValueForColumn(Set<HBaseCell> cells, String family, String qualifier) {_        if (cells != null) {_            for (HBaseCell cell : cells) {_                if (cell.getQualifier().equals(qualifier) && cell.getFamily().equals(family)) {_                    return cell.getValue()__                }_            }_        }_        return null__    };searches,a,list,of,cells,and,returns,the,value,if,family,column,matches,with,the,specified;private,object,get,value,for,column,set,hbase,cell,cells,string,family,string,qualifier,if,cells,null,for,hbase,cell,cell,cells,if,cell,get,qualifier,equals,qualifier,cell,get,family,equals,family,return,cell,get,value,return,null
HeaderMappingStrategy -> private Object getValueForColumn(Set<HBaseCell> cells, String family, String qualifier);1423721720;Searches a list of cells and returns the value, if family/column matches with the specified.;private Object getValueForColumn(Set<HBaseCell> cells, String family, String qualifier) {_        if (cells != null) {_            for (HBaseCell cell : cells) {_                if (cell.getQualifier().equals(qualifier) && cell.getFamily().equals(family)) {_                    return cell.getValue()__                }_            }_        }_        return null__    };searches,a,list,of,cells,and,returns,the,value,if,family,column,matches,with,the,specified;private,object,get,value,for,column,set,hbase,cell,cells,string,family,string,qualifier,if,cells,null,for,hbase,cell,cell,cells,if,cell,get,qualifier,equals,qualifier,cell,get,family,equals,family,return,cell,get,value,return,null
HeaderMappingStrategy -> private Object getValueForColumn(Set<HBaseCell> cells, String family, String qualifier);1456416872;Searches a list of cells and returns the value, if family/column matches with the specified.;private Object getValueForColumn(Set<HBaseCell> cells, String family, String qualifier) {_        if (cells != null) {_            for (HBaseCell cell : cells) {_                if (cell.getQualifier().equals(qualifier) && cell.getFamily().equals(family)) {_                    return cell.getValue()__                }_            }_        }_        return null__    };searches,a,list,of,cells,and,returns,the,value,if,family,column,matches,with,the,specified;private,object,get,value,for,column,set,hbase,cell,cells,string,family,string,qualifier,if,cells,null,for,hbase,cell,cell,cells,if,cell,get,qualifier,equals,qualifier,cell,get,family,equals,family,return,cell,get,value,return,null
HeaderMappingStrategy -> private HBaseRow resolveRow(Message message, int index);1338219947;Resolves the cell that the {@link Exchange} refers to.__@param message_@param index_@return;private HBaseRow resolveRow(Message message, int index) {_        HBaseRow hRow = new HBaseRow()__        HBaseCell hCell = new HBaseCell()___        if (message != null) {_            Object id =  message.getHeader(HbaseAttribute.HBASE_ROW_ID.asHeader(index))__            String rowClassName = message.getHeader(HbaseAttribute.HBASE_ROW_TYPE.asHeader(index), String.class)__            Class rowClass = rowClassName == null || rowClassName.isEmpty() ? String.class : message.getExchange().getContext().getClassResolver().resolveClass(rowClassName)__            String columnFamily = (String) message.getHeader(HbaseAttribute.HBASE_FAMILY.asHeader(index))__            String columnName = (String) message.getHeader(HbaseAttribute.HBASE_QUALIFIER.asHeader(index))__            Object value =  message.getHeader(HbaseAttribute.HBASE_VALUE.asHeader(index))___            String valueClassName = message.getHeader(HbaseAttribute.HBASE_VALUE_TYPE.asHeader(index), String.class)__            Class valueClass = valueClassName == null || valueClassName.isEmpty() ? String.class : message.getExchange().getContext().getClassResolver().resolveClass(valueClassName)___            _            if (id == null && columnFamily == null && columnName == null) {_                return null__            }__            hRow.setId(id)__            hRow.setRowType(rowClass)__            hCell.setQualifier(columnName)__            hCell.setFamily(columnFamily)__            hCell.setValue(value)__            hCell.setValueType(valueClass)__            hRow.getCells().add(hCell)__        }_        return hRow__    };resolves,the,cell,that,the,link,exchange,refers,to,param,message,param,index,return;private,hbase,row,resolve,row,message,message,int,index,hbase,row,h,row,new,hbase,row,hbase,cell,h,cell,new,hbase,cell,if,message,null,object,id,message,get,header,hbase,attribute,as,header,index,string,row,class,name,message,get,header,hbase,attribute,as,header,index,string,class,class,row,class,row,class,name,null,row,class,name,is,empty,string,class,message,get,exchange,get,context,get,class,resolver,resolve,class,row,class,name,string,column,family,string,message,get,header,hbase,attribute,as,header,index,string,column,name,string,message,get,header,hbase,attribute,as,header,index,object,value,message,get,header,hbase,attribute,as,header,index,string,value,class,name,message,get,header,hbase,attribute,as,header,index,string,class,class,value,class,value,class,name,null,value,class,name,is,empty,string,class,message,get,exchange,get,context,get,class,resolver,resolve,class,value,class,name,if,id,null,column,family,null,column,name,null,return,null,h,row,set,id,id,h,row,set,row,type,row,class,h,cell,set,qualifier,column,name,h,cell,set,family,column,family,h,cell,set,value,value,h,cell,set,value,type,value,class,h,row,get,cells,add,h,cell,return,h,row
HeaderMappingStrategy -> private HBaseRow resolveRow(Message message, int index);1338838061;Resolves the cell that the {@link Exchange} refers to.__@param message_@param index_@return;private HBaseRow resolveRow(Message message, int index) {_        HBaseRow hRow = new HBaseRow()__        HBaseCell hCell = new HBaseCell()___        if (message != null) {_            Object id =  message.getHeader(HbaseAttribute.HBASE_ROW_ID.asHeader(index))__            String rowClassName = message.getHeader(HbaseAttribute.HBASE_ROW_TYPE.asHeader(index), String.class)__            Class<?> rowClass = rowClassName == null || rowClassName.isEmpty() ? String.class : message.getExchange().getContext().getClassResolver().resolveClass(rowClassName)__            String columnFamily = (String) message.getHeader(HbaseAttribute.HBASE_FAMILY.asHeader(index))__            String columnName = (String) message.getHeader(HbaseAttribute.HBASE_QUALIFIER.asHeader(index))__            Object value =  message.getHeader(HbaseAttribute.HBASE_VALUE.asHeader(index))___            String valueClassName = message.getHeader(HbaseAttribute.HBASE_VALUE_TYPE.asHeader(index), String.class)__            Class<?> valueClass = valueClassName == null || valueClassName.isEmpty() ? String.class : message.getExchange().getContext().getClassResolver().resolveClass(valueClassName)___            _            if (id == null && columnFamily == null && columnName == null) {_                return null__            }__            hRow.setId(id)__            hRow.setRowType(rowClass)__            hCell.setQualifier(columnName)__            hCell.setFamily(columnFamily)__            hCell.setValue(value)__            hCell.setValueType(valueClass)__            hRow.getCells().add(hCell)__        }_        return hRow__    };resolves,the,cell,that,the,link,exchange,refers,to,param,message,param,index,return;private,hbase,row,resolve,row,message,message,int,index,hbase,row,h,row,new,hbase,row,hbase,cell,h,cell,new,hbase,cell,if,message,null,object,id,message,get,header,hbase,attribute,as,header,index,string,row,class,name,message,get,header,hbase,attribute,as,header,index,string,class,class,row,class,row,class,name,null,row,class,name,is,empty,string,class,message,get,exchange,get,context,get,class,resolver,resolve,class,row,class,name,string,column,family,string,message,get,header,hbase,attribute,as,header,index,string,column,name,string,message,get,header,hbase,attribute,as,header,index,object,value,message,get,header,hbase,attribute,as,header,index,string,value,class,name,message,get,header,hbase,attribute,as,header,index,string,class,class,value,class,value,class,name,null,value,class,name,is,empty,string,class,message,get,exchange,get,context,get,class,resolver,resolve,class,value,class,name,if,id,null,column,family,null,column,name,null,return,null,h,row,set,id,id,h,row,set,row,type,row,class,h,cell,set,qualifier,column,name,h,cell,set,family,column,family,h,cell,set,value,value,h,cell,set,value,type,value,class,h,row,get,cells,add,h,cell,return,h,row
HeaderMappingStrategy -> private HBaseRow resolveRow(Message message, int index);1345042758;Resolves the cell that the {@link Exchange} refers to.;private HBaseRow resolveRow(Message message, int index) {_        HBaseRow hRow = new HBaseRow()__        HBaseCell hCell = new HBaseCell()___        if (message != null) {_            Object id =  message.getHeader(HbaseAttribute.HBASE_ROW_ID.asHeader(index))__            String rowClassName = message.getHeader(HbaseAttribute.HBASE_ROW_TYPE.asHeader(index), String.class)__            Class<?> rowClass = rowClassName == null || rowClassName.isEmpty() ? String.class : message.getExchange().getContext().getClassResolver().resolveClass(rowClassName)__            String columnFamily = (String) message.getHeader(HbaseAttribute.HBASE_FAMILY.asHeader(index))__            String columnName = (String) message.getHeader(HbaseAttribute.HBASE_QUALIFIER.asHeader(index))__            Object value =  message.getHeader(HbaseAttribute.HBASE_VALUE.asHeader(index))___            String valueClassName = message.getHeader(HbaseAttribute.HBASE_VALUE_TYPE.asHeader(index), String.class)__            Class<?> valueClass = valueClassName == null || valueClassName.isEmpty() ? String.class : message.getExchange().getContext().getClassResolver().resolveClass(valueClassName)___            _            if (id == null && columnFamily == null && columnName == null) {_                return null__            }__            hRow.setId(id)__            hRow.setRowType(rowClass)__            hCell.setQualifier(columnName)__            hCell.setFamily(columnFamily)__            hCell.setValue(value)__            hCell.setValueType(valueClass)__            hRow.getCells().add(hCell)__        }_        return hRow__    };resolves,the,cell,that,the,link,exchange,refers,to;private,hbase,row,resolve,row,message,message,int,index,hbase,row,h,row,new,hbase,row,hbase,cell,h,cell,new,hbase,cell,if,message,null,object,id,message,get,header,hbase,attribute,as,header,index,string,row,class,name,message,get,header,hbase,attribute,as,header,index,string,class,class,row,class,row,class,name,null,row,class,name,is,empty,string,class,message,get,exchange,get,context,get,class,resolver,resolve,class,row,class,name,string,column,family,string,message,get,header,hbase,attribute,as,header,index,string,column,name,string,message,get,header,hbase,attribute,as,header,index,object,value,message,get,header,hbase,attribute,as,header,index,string,value,class,name,message,get,header,hbase,attribute,as,header,index,string,class,class,value,class,value,class,name,null,value,class,name,is,empty,string,class,message,get,exchange,get,context,get,class,resolver,resolve,class,value,class,name,if,id,null,column,family,null,column,name,null,return,null,h,row,set,id,id,h,row,set,row,type,row,class,h,cell,set,qualifier,column,name,h,cell,set,family,column,family,h,cell,set,value,value,h,cell,set,value,type,value,class,h,row,get,cells,add,h,cell,return,h,row
HeaderMappingStrategy -> private HBaseRow resolveRow(Message message, int index);1347180027;Resolves the cell that the {@link Exchange} refers to.;private HBaseRow resolveRow(Message message, int index) {_        HBaseRow hRow = new HBaseRow()__        HBaseCell hCell = new HBaseCell()___        if (message != null) {_            Object id =  message.getHeader(HbaseAttribute.HBASE_ROW_ID.asHeader(index))__            String rowClassName = message.getHeader(HbaseAttribute.HBASE_ROW_TYPE.asHeader(index), String.class)__            Class<?> rowClass = rowClassName == null || rowClassName.isEmpty() ? String.class : message.getExchange().getContext().getClassResolver().resolveClass(rowClassName)__            String columnFamily = (String) message.getHeader(HbaseAttribute.HBASE_FAMILY.asHeader(index))__            String columnName = (String) message.getHeader(HbaseAttribute.HBASE_QUALIFIER.asHeader(index))__            Object value =  message.getHeader(HbaseAttribute.HBASE_VALUE.asHeader(index))___            String valueClassName = message.getHeader(HbaseAttribute.HBASE_VALUE_TYPE.asHeader(index), String.class)__            Class<?> valueClass = valueClassName == null || valueClassName.isEmpty() ? String.class : message.getExchange().getContext().getClassResolver().resolveClass(valueClassName)___            _            if (id == null && columnFamily == null && columnName == null) {_                return null__            }__            hRow.setId(id)__            hRow.setRowType(rowClass)__            hCell.setQualifier(columnName)__            hCell.setFamily(columnFamily)__            hCell.setValue(value)__            _            hCell.setValueType((valueClass != null) ? valueClass : String.class)__            hRow.getCells().add(hCell)__        }_        return hRow__    };resolves,the,cell,that,the,link,exchange,refers,to;private,hbase,row,resolve,row,message,message,int,index,hbase,row,h,row,new,hbase,row,hbase,cell,h,cell,new,hbase,cell,if,message,null,object,id,message,get,header,hbase,attribute,as,header,index,string,row,class,name,message,get,header,hbase,attribute,as,header,index,string,class,class,row,class,row,class,name,null,row,class,name,is,empty,string,class,message,get,exchange,get,context,get,class,resolver,resolve,class,row,class,name,string,column,family,string,message,get,header,hbase,attribute,as,header,index,string,column,name,string,message,get,header,hbase,attribute,as,header,index,object,value,message,get,header,hbase,attribute,as,header,index,string,value,class,name,message,get,header,hbase,attribute,as,header,index,string,class,class,value,class,value,class,name,null,value,class,name,is,empty,string,class,message,get,exchange,get,context,get,class,resolver,resolve,class,value,class,name,if,id,null,column,family,null,column,name,null,return,null,h,row,set,id,id,h,row,set,row,type,row,class,h,cell,set,qualifier,column,name,h,cell,set,family,column,family,h,cell,set,value,value,h,cell,set,value,type,value,class,null,value,class,string,class,h,row,get,cells,add,h,cell,return,h,row
HeaderMappingStrategy -> private HBaseRow resolveRow(Message message, int index);1348740711;Resolves the cell that the {@link Exchange} refers to.;private HBaseRow resolveRow(Message message, int index) {_        HBaseRow hRow = new HBaseRow()__        HBaseCell hCell = new HBaseCell()___        if (message != null) {_            Object id =  message.getHeader(HbaseAttribute.HBASE_ROW_ID.asHeader(index))__            String rowClassName = message.getHeader(HbaseAttribute.HBASE_ROW_TYPE.asHeader(index), String.class)__            Class<?> rowClass = rowClassName == null || rowClassName.isEmpty() ? String.class : message.getExchange().getContext().getClassResolver().resolveClass(rowClassName)__            String columnFamily = (String) message.getHeader(HbaseAttribute.HBASE_FAMILY.asHeader(index))__            String columnName = (String) message.getHeader(HbaseAttribute.HBASE_QUALIFIER.asHeader(index))__            Object value =  message.getHeader(HbaseAttribute.HBASE_VALUE.asHeader(index))___            String valueClassName = message.getHeader(HbaseAttribute.HBASE_VALUE_TYPE.asHeader(index), String.class)__            Class<?> valueClass = valueClassName == null || valueClassName.isEmpty() ? String.class : message.getExchange().getContext().getClassResolver().resolveClass(valueClassName)___            _            if (id == null && columnFamily == null && columnName == null) {_                return null__            }__            hRow.setId(id)__            hRow.setRowType(rowClass)__            if (columnFamily != null && columnName != null) {_                hCell.setQualifier(columnName)__                hCell.setFamily(columnFamily)__                hCell.setValue(value)__                _                hCell.setValueType((valueClass != null) ? valueClass : String.class)__                hRow.getCells().add(hCell)__            }_        }_        return hRow__    };resolves,the,cell,that,the,link,exchange,refers,to;private,hbase,row,resolve,row,message,message,int,index,hbase,row,h,row,new,hbase,row,hbase,cell,h,cell,new,hbase,cell,if,message,null,object,id,message,get,header,hbase,attribute,as,header,index,string,row,class,name,message,get,header,hbase,attribute,as,header,index,string,class,class,row,class,row,class,name,null,row,class,name,is,empty,string,class,message,get,exchange,get,context,get,class,resolver,resolve,class,row,class,name,string,column,family,string,message,get,header,hbase,attribute,as,header,index,string,column,name,string,message,get,header,hbase,attribute,as,header,index,object,value,message,get,header,hbase,attribute,as,header,index,string,value,class,name,message,get,header,hbase,attribute,as,header,index,string,class,class,value,class,value,class,name,null,value,class,name,is,empty,string,class,message,get,exchange,get,context,get,class,resolver,resolve,class,value,class,name,if,id,null,column,family,null,column,name,null,return,null,h,row,set,id,id,h,row,set,row,type,row,class,if,column,family,null,column,name,null,h,cell,set,qualifier,column,name,h,cell,set,family,column,family,h,cell,set,value,value,h,cell,set,value,type,value,class,null,value,class,string,class,h,row,get,cells,add,h,cell,return,h,row
HeaderMappingStrategy -> private HBaseRow resolveRow(Message message, int index);1423721720;Resolves the cell that the {@link Exchange} refers to.;private HBaseRow resolveRow(Message message, int index) {_        HBaseRow hRow = new HBaseRow()__        HBaseCell hCell = new HBaseCell()___        if (message != null) {_            Object id =  message.getHeader(HbaseAttribute.HBASE_ROW_ID.asHeader(index))__            String rowClassName = message.getHeader(HbaseAttribute.HBASE_ROW_TYPE.asHeader(index), String.class)__            Class<?> rowClass = rowClassName == null || rowClassName.isEmpty() ? String.class : message.getExchange().getContext().getClassResolver().resolveClass(rowClassName)__            String columnFamily = (String) message.getHeader(HbaseAttribute.HBASE_FAMILY.asHeader(index))__            String columnName = (String) message.getHeader(HbaseAttribute.HBASE_QUALIFIER.asHeader(index))__            Object value =  message.getHeader(HbaseAttribute.HBASE_VALUE.asHeader(index))___            String valueClassName = message.getHeader(HbaseAttribute.HBASE_VALUE_TYPE.asHeader(index), String.class)__            Class<?> valueClass = valueClassName == null || valueClassName.isEmpty() ? String.class : message.getExchange().getContext().getClassResolver().resolveClass(valueClassName)___            _            if (id == null && columnFamily == null && columnName == null) {_                return null__            }__            hRow.setId(id)__            hRow.setRowType(rowClass)__            if (columnFamily != null && columnName != null) {_                hCell.setQualifier(columnName)__                hCell.setFamily(columnFamily)__                hCell.setValue(value)__                _                hCell.setValueType((valueClass != null) ? valueClass : String.class)__                hRow.getCells().add(hCell)__            }_        }_        return hRow__    };resolves,the,cell,that,the,link,exchange,refers,to;private,hbase,row,resolve,row,message,message,int,index,hbase,row,h,row,new,hbase,row,hbase,cell,h,cell,new,hbase,cell,if,message,null,object,id,message,get,header,hbase,attribute,as,header,index,string,row,class,name,message,get,header,hbase,attribute,as,header,index,string,class,class,row,class,row,class,name,null,row,class,name,is,empty,string,class,message,get,exchange,get,context,get,class,resolver,resolve,class,row,class,name,string,column,family,string,message,get,header,hbase,attribute,as,header,index,string,column,name,string,message,get,header,hbase,attribute,as,header,index,object,value,message,get,header,hbase,attribute,as,header,index,string,value,class,name,message,get,header,hbase,attribute,as,header,index,string,class,class,value,class,value,class,name,null,value,class,name,is,empty,string,class,message,get,exchange,get,context,get,class,resolver,resolve,class,value,class,name,if,id,null,column,family,null,column,name,null,return,null,h,row,set,id,id,h,row,set,row,type,row,class,if,column,family,null,column,name,null,h,cell,set,qualifier,column,name,h,cell,set,family,column,family,h,cell,set,value,value,h,cell,set,value,type,value,class,null,value,class,string,class,h,row,get,cells,add,h,cell,return,h,row
HeaderMappingStrategy -> private HBaseRow resolveRow(Message message, int index);1456416872;Resolves the cell that the {@link Exchange} refers to.;private HBaseRow resolveRow(Message message, int index) {_        HBaseRow hRow = new HBaseRow()__        HBaseCell hCell = new HBaseCell()___        if (message != null) {_            Object id =  message.getHeader(HBaseAttribute.HBASE_ROW_ID.asHeader(index))__            String rowClassName = message.getHeader(HBaseAttribute.HBASE_ROW_TYPE.asHeader(index), String.class)__            Class<?> rowClass = rowClassName == null || rowClassName.isEmpty() ? String.class : message.getExchange().getContext().getClassResolver().resolveClass(rowClassName)__            String columnFamily = (String) message.getHeader(HBaseAttribute.HBASE_FAMILY.asHeader(index))__            String columnName = (String) message.getHeader(HBaseAttribute.HBASE_QUALIFIER.asHeader(index))__            Object value =  message.getHeader(HBaseAttribute.HBASE_VALUE.asHeader(index))___            String valueClassName = message.getHeader(HBaseAttribute.HBASE_VALUE_TYPE.asHeader(index), String.class)__            Class<?> valueClass = valueClassName == null || valueClassName.isEmpty() ? String.class : message.getExchange().getContext().getClassResolver().resolveClass(valueClassName)___            _            if (id == null && columnFamily == null && columnName == null) {_                return null__            }__            hRow.setId(id)__            hRow.setRowType(rowClass)__            if (columnFamily != null && columnName != null) {_                hCell.setQualifier(columnName)__                hCell.setFamily(columnFamily)__                hCell.setValue(value)__                _                hCell.setValueType((valueClass != null) ? valueClass : String.class)__                hRow.getCells().add(hCell)__            }_        }_        return hRow__    };resolves,the,cell,that,the,link,exchange,refers,to;private,hbase,row,resolve,row,message,message,int,index,hbase,row,h,row,new,hbase,row,hbase,cell,h,cell,new,hbase,cell,if,message,null,object,id,message,get,header,hbase,attribute,as,header,index,string,row,class,name,message,get,header,hbase,attribute,as,header,index,string,class,class,row,class,row,class,name,null,row,class,name,is,empty,string,class,message,get,exchange,get,context,get,class,resolver,resolve,class,row,class,name,string,column,family,string,message,get,header,hbase,attribute,as,header,index,string,column,name,string,message,get,header,hbase,attribute,as,header,index,object,value,message,get,header,hbase,attribute,as,header,index,string,value,class,name,message,get,header,hbase,attribute,as,header,index,string,class,class,value,class,value,class,name,null,value,class,name,is,empty,string,class,message,get,exchange,get,context,get,class,resolver,resolve,class,value,class,name,if,id,null,column,family,null,column,name,null,return,null,h,row,set,id,id,h,row,set,row,type,row,class,if,column,family,null,column,name,null,h,cell,set,qualifier,column,name,h,cell,set,family,column,family,h,cell,set,value,value,h,cell,set,value,type,value,class,null,value,class,string,class,h,row,get,cells,add,h,cell,return,h,row
HeaderMappingStrategy -> public void applyGetResults(Message message, HBaseData data);1338219947;Applies the cells to the {@link org.apache.camel.Exchange}.__@param message_@param hRows;public void applyGetResults(Message message, HBaseData data) {_        int index = 1__        if (data == null || data.getRows() == null) {_            return__        }__        for (HBaseRow hRow : data.getRows()) {_            if (hRow.getId() != null) {_                Set<HBaseCell> cells = hRow.getCells()__                for (HBaseCell cell : cells) {_                    message.setHeader(HbaseAttribute.HBASE_VALUE.asHeader(index++), getValueForColumn(cells, cell.getFamily(), cell.getQualifier()))__                }_            }_        }_    };applies,the,cells,to,the,link,org,apache,camel,exchange,param,message,param,h,rows;public,void,apply,get,results,message,message,hbase,data,data,int,index,1,if,data,null,data,get,rows,null,return,for,hbase,row,h,row,data,get,rows,if,h,row,get,id,null,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,message,set,header,hbase,attribute,as,header,index,get,value,for,column,cells,cell,get,family,cell,get,qualifier
HeaderMappingStrategy -> public void applyGetResults(Message message, HBaseData data);1338838061;Applies the cells to the {@link org.apache.camel.Exchange}.__@param message_@param hRows;public void applyGetResults(Message message, HBaseData data) {_        int index = 1__        if (data == null || data.getRows() == null) {_            return__        }__        for (HBaseRow hRow : data.getRows()) {_            if (hRow.getId() != null) {_                Set<HBaseCell> cells = hRow.getCells()__                for (HBaseCell cell : cells) {_                    message.setHeader(HbaseAttribute.HBASE_VALUE.asHeader(index++), getValueForColumn(cells, cell.getFamily(), cell.getQualifier()))__                }_            }_        }_    };applies,the,cells,to,the,link,org,apache,camel,exchange,param,message,param,h,rows;public,void,apply,get,results,message,message,hbase,data,data,int,index,1,if,data,null,data,get,rows,null,return,for,hbase,row,h,row,data,get,rows,if,h,row,get,id,null,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,message,set,header,hbase,attribute,as,header,index,get,value,for,column,cells,cell,get,family,cell,get,qualifier
HeaderMappingStrategy -> public void applyGetResults(Message message, HBaseData data);1345042758;Applies the cells to the {@link org.apache.camel.Exchange}.;public void applyGetResults(Message message, HBaseData data) {_        int index = 1__        if (data == null || data.getRows() == null) {_            return__        }__        for (HBaseRow hRow : data.getRows()) {_            if (hRow.getId() != null) {_                Set<HBaseCell> cells = hRow.getCells()__                for (HBaseCell cell : cells) {_                    message.setHeader(HbaseAttribute.HBASE_VALUE.asHeader(index++), getValueForColumn(cells, cell.getFamily(), cell.getQualifier()))__                }_            }_        }_    };applies,the,cells,to,the,link,org,apache,camel,exchange;public,void,apply,get,results,message,message,hbase,data,data,int,index,1,if,data,null,data,get,rows,null,return,for,hbase,row,h,row,data,get,rows,if,h,row,get,id,null,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,message,set,header,hbase,attribute,as,header,index,get,value,for,column,cells,cell,get,family,cell,get,qualifier
HeaderMappingStrategy -> public void applyGetResults(Message message, HBaseData data);1347180027;Applies the cells to the {@link org.apache.camel.Exchange}.;public void applyGetResults(Message message, HBaseData data) {_        int index = 1__        if (data == null || data.getRows() == null) {_            return__        }__        for (HBaseRow hRow : data.getRows()) {_            if (hRow.getId() != null) {_                Set<HBaseCell> cells = hRow.getCells()__                for (HBaseCell cell : cells) {_                    message.setHeader(HbaseAttribute.HBASE_VALUE.asHeader(index++), getValueForColumn(cells, cell.getFamily(), cell.getQualifier()))__                }_            }_        }_    };applies,the,cells,to,the,link,org,apache,camel,exchange;public,void,apply,get,results,message,message,hbase,data,data,int,index,1,if,data,null,data,get,rows,null,return,for,hbase,row,h,row,data,get,rows,if,h,row,get,id,null,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,message,set,header,hbase,attribute,as,header,index,get,value,for,column,cells,cell,get,family,cell,get,qualifier
HeaderMappingStrategy -> public void applyGetResults(Message message, HBaseData data);1348740711;Applies the cells to the {@link org.apache.camel.Exchange}.;public void applyGetResults(Message message, HBaseData data) {_        int index = 1__        if (data == null || data.getRows() == null) {_            return__        }__        for (HBaseRow hRow : data.getRows()) {_            if (hRow.getId() != null) {_                Set<HBaseCell> cells = hRow.getCells()__                for (HBaseCell cell : cells) {_                    message.setHeader(HbaseAttribute.HBASE_VALUE.asHeader(index++), getValueForColumn(cells, cell.getFamily(), cell.getQualifier()))__                }_            }_        }_    };applies,the,cells,to,the,link,org,apache,camel,exchange;public,void,apply,get,results,message,message,hbase,data,data,int,index,1,if,data,null,data,get,rows,null,return,for,hbase,row,h,row,data,get,rows,if,h,row,get,id,null,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,message,set,header,hbase,attribute,as,header,index,get,value,for,column,cells,cell,get,family,cell,get,qualifier
HeaderMappingStrategy -> public void applyGetResults(Message message, HBaseData data);1423721720;Applies the cells to the {@link org.apache.camel.Exchange}.;public void applyGetResults(Message message, HBaseData data) {_        message.setHeaders(message.getExchange().getIn().getHeaders())__        int index = 1__        if (data == null || data.getRows() == null) {_            return__        }__        for (HBaseRow hRow : data.getRows()) {_            if (hRow.getId() != null) {_                Set<HBaseCell> cells = hRow.getCells()__                for (HBaseCell cell : cells) {_                    message.setHeader(HbaseAttribute.HBASE_VALUE.asHeader(index++), getValueForColumn(cells, cell.getFamily(), cell.getQualifier()))__                }_            }_        }_    };applies,the,cells,to,the,link,org,apache,camel,exchange;public,void,apply,get,results,message,message,hbase,data,data,message,set,headers,message,get,exchange,get,in,get,headers,int,index,1,if,data,null,data,get,rows,null,return,for,hbase,row,h,row,data,get,rows,if,h,row,get,id,null,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,message,set,header,hbase,attribute,as,header,index,get,value,for,column,cells,cell,get,family,cell,get,qualifier
HeaderMappingStrategy -> public void applyGetResults(Message message, HBaseData data);1456416872;Applies the cells to the {@link org.apache.camel.Exchange}.;public void applyGetResults(Message message, HBaseData data) {_        message.setHeaders(message.getExchange().getIn().getHeaders())__        int index = 1__        if (data == null || data.getRows() == null) {_            return__        }__        for (HBaseRow hRow : data.getRows()) {_            if (hRow.getId() != null) {_                Set<HBaseCell> cells = hRow.getCells()__                for (HBaseCell cell : cells) {_                    message.setHeader(HBaseAttribute.HBASE_VALUE.asHeader(index++), getValueForColumn(cells, cell.getFamily(), cell.getQualifier()))__                }_            }_        }_    };applies,the,cells,to,the,link,org,apache,camel,exchange;public,void,apply,get,results,message,message,hbase,data,data,message,set,headers,message,get,exchange,get,in,get,headers,int,index,1,if,data,null,data,get,rows,null,return,for,hbase,row,h,row,data,get,rows,if,h,row,get,id,null,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,message,set,header,hbase,attribute,as,header,index,get,value,for,column,cells,cell,get,family,cell,get,qualifier
HeaderMappingStrategy -> public void applyScanResults(Message message, HBaseData data);1338219947;Applies the cells to the {@link org.apache.camel.Exchange}.__@param message;public void applyScanResults(Message message, HBaseData data) {_        int index = 1__        if (data == null || data.getRows() == null) {_            return__        }__        for (HBaseRow hRow : data.getRows()) {_            Set<HBaseCell> cells = hRow.getCells()__            for (HBaseCell cell : cells) {_                message.setHeader(HbaseAttribute.HBASE_ROW_ID.asHeader(index), hRow.getId())__                message.setHeader(HbaseAttribute.HBASE_FAMILY.asHeader(index), cell.getFamily())__                message.setHeader(HbaseAttribute.HBASE_QUALIFIER.asHeader(index), cell.getQualifier())__                message.setHeader(HbaseAttribute.HBASE_VALUE.asHeader(index), cell.getValue())___            }_            index++__        }_    };applies,the,cells,to,the,link,org,apache,camel,exchange,param,message;public,void,apply,scan,results,message,message,hbase,data,data,int,index,1,if,data,null,data,get,rows,null,return,for,hbase,row,h,row,data,get,rows,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,message,set,header,hbase,attribute,as,header,index,h,row,get,id,message,set,header,hbase,attribute,as,header,index,cell,get,family,message,set,header,hbase,attribute,as,header,index,cell,get,qualifier,message,set,header,hbase,attribute,as,header,index,cell,get,value,index
HeaderMappingStrategy -> public void applyScanResults(Message message, HBaseData data);1338838061;Applies the cells to the {@link org.apache.camel.Exchange}.__@param message;public void applyScanResults(Message message, HBaseData data) {_        int index = 1__        if (data == null || data.getRows() == null) {_            return__        }__        for (HBaseRow hRow : data.getRows()) {_            Set<HBaseCell> cells = hRow.getCells()__            for (HBaseCell cell : cells) {_                message.setHeader(HbaseAttribute.HBASE_ROW_ID.asHeader(index), hRow.getId())__                message.setHeader(HbaseAttribute.HBASE_FAMILY.asHeader(index), cell.getFamily())__                message.setHeader(HbaseAttribute.HBASE_QUALIFIER.asHeader(index), cell.getQualifier())__                message.setHeader(HbaseAttribute.HBASE_VALUE.asHeader(index), cell.getValue())___            }_            index++__        }_    };applies,the,cells,to,the,link,org,apache,camel,exchange,param,message;public,void,apply,scan,results,message,message,hbase,data,data,int,index,1,if,data,null,data,get,rows,null,return,for,hbase,row,h,row,data,get,rows,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,message,set,header,hbase,attribute,as,header,index,h,row,get,id,message,set,header,hbase,attribute,as,header,index,cell,get,family,message,set,header,hbase,attribute,as,header,index,cell,get,qualifier,message,set,header,hbase,attribute,as,header,index,cell,get,value,index
HeaderMappingStrategy -> public void applyScanResults(Message message, HBaseData data);1345042758;Applies the cells to the {@link org.apache.camel.Exchange}.;public void applyScanResults(Message message, HBaseData data) {_        int index = 1__        if (data == null || data.getRows() == null) {_            return__        }__        for (HBaseRow hRow : data.getRows()) {_            Set<HBaseCell> cells = hRow.getCells()__            for (HBaseCell cell : cells) {_                message.setHeader(HbaseAttribute.HBASE_ROW_ID.asHeader(index), hRow.getId())__                message.setHeader(HbaseAttribute.HBASE_FAMILY.asHeader(index), cell.getFamily())__                message.setHeader(HbaseAttribute.HBASE_QUALIFIER.asHeader(index), cell.getQualifier())__                message.setHeader(HbaseAttribute.HBASE_VALUE.asHeader(index), cell.getValue())__            }_            index++__        }_    };applies,the,cells,to,the,link,org,apache,camel,exchange;public,void,apply,scan,results,message,message,hbase,data,data,int,index,1,if,data,null,data,get,rows,null,return,for,hbase,row,h,row,data,get,rows,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,message,set,header,hbase,attribute,as,header,index,h,row,get,id,message,set,header,hbase,attribute,as,header,index,cell,get,family,message,set,header,hbase,attribute,as,header,index,cell,get,qualifier,message,set,header,hbase,attribute,as,header,index,cell,get,value,index
HeaderMappingStrategy -> public void applyScanResults(Message message, HBaseData data);1347180027;Applies the cells to the {@link org.apache.camel.Exchange}.;public void applyScanResults(Message message, HBaseData data) {_        int index = 1__        if (data == null || data.getRows() == null) {_            return__        }__        for (HBaseRow hRow : data.getRows()) {_            Set<HBaseCell> cells = hRow.getCells()__            for (HBaseCell cell : cells) {_                message.setHeader(HbaseAttribute.HBASE_ROW_ID.asHeader(index), hRow.getId())__                message.setHeader(HbaseAttribute.HBASE_FAMILY.asHeader(index), cell.getFamily())__                message.setHeader(HbaseAttribute.HBASE_QUALIFIER.asHeader(index), cell.getQualifier())__                message.setHeader(HbaseAttribute.HBASE_VALUE.asHeader(index), cell.getValue())__            }_            index++__        }_    };applies,the,cells,to,the,link,org,apache,camel,exchange;public,void,apply,scan,results,message,message,hbase,data,data,int,index,1,if,data,null,data,get,rows,null,return,for,hbase,row,h,row,data,get,rows,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,message,set,header,hbase,attribute,as,header,index,h,row,get,id,message,set,header,hbase,attribute,as,header,index,cell,get,family,message,set,header,hbase,attribute,as,header,index,cell,get,qualifier,message,set,header,hbase,attribute,as,header,index,cell,get,value,index
HeaderMappingStrategy -> public void applyScanResults(Message message, HBaseData data);1348740711;Applies the cells to the {@link org.apache.camel.Exchange}.;public void applyScanResults(Message message, HBaseData data) {_        int index = 1__        if (data == null || data.getRows() == null) {_            return__        }__        for (HBaseRow hRow : data.getRows()) {_            Set<HBaseCell> cells = hRow.getCells()__            for (HBaseCell cell : cells) {_                message.setHeader(HbaseAttribute.HBASE_ROW_ID.asHeader(index), hRow.getId())__                message.setHeader(HbaseAttribute.HBASE_FAMILY.asHeader(index), cell.getFamily())__                message.setHeader(HbaseAttribute.HBASE_QUALIFIER.asHeader(index), cell.getQualifier())__                message.setHeader(HbaseAttribute.HBASE_VALUE.asHeader(index), cell.getValue())__            }_            index++__        }_    };applies,the,cells,to,the,link,org,apache,camel,exchange;public,void,apply,scan,results,message,message,hbase,data,data,int,index,1,if,data,null,data,get,rows,null,return,for,hbase,row,h,row,data,get,rows,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,message,set,header,hbase,attribute,as,header,index,h,row,get,id,message,set,header,hbase,attribute,as,header,index,cell,get,family,message,set,header,hbase,attribute,as,header,index,cell,get,qualifier,message,set,header,hbase,attribute,as,header,index,cell,get,value,index
HeaderMappingStrategy -> public void applyScanResults(Message message, HBaseData data);1423721720;Applies the cells to the {@link org.apache.camel.Exchange}.;public void applyScanResults(Message message, HBaseData data) {_        message.setHeaders(message.getExchange().getIn().getHeaders())__        int index = 1__        if (data == null || data.getRows() == null) {_            return__        }__        for (HBaseRow hRow : data.getRows()) {_            Set<HBaseCell> cells = hRow.getCells()__            for (HBaseCell cell : cells) {_                message.setHeader(HbaseAttribute.HBASE_ROW_ID.asHeader(index), hRow.getId())__                message.setHeader(HbaseAttribute.HBASE_FAMILY.asHeader(index), cell.getFamily())__                message.setHeader(HbaseAttribute.HBASE_QUALIFIER.asHeader(index), cell.getQualifier())__                message.setHeader(HbaseAttribute.HBASE_VALUE.asHeader(index), cell.getValue())__            }_            index++__        }_    };applies,the,cells,to,the,link,org,apache,camel,exchange;public,void,apply,scan,results,message,message,hbase,data,data,message,set,headers,message,get,exchange,get,in,get,headers,int,index,1,if,data,null,data,get,rows,null,return,for,hbase,row,h,row,data,get,rows,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,message,set,header,hbase,attribute,as,header,index,h,row,get,id,message,set,header,hbase,attribute,as,header,index,cell,get,family,message,set,header,hbase,attribute,as,header,index,cell,get,qualifier,message,set,header,hbase,attribute,as,header,index,cell,get,value,index
HeaderMappingStrategy -> public void applyScanResults(Message message, HBaseData data);1456416872;Applies the cells to the {@link org.apache.camel.Exchange}.;public void applyScanResults(Message message, HBaseData data) {_        message.setHeaders(message.getExchange().getIn().getHeaders())__        int index = 1__        if (data == null || data.getRows() == null) {_            return__        }__        for (HBaseRow hRow : data.getRows()) {_            Set<HBaseCell> cells = hRow.getCells()__            for (HBaseCell cell : cells) {_                message.setHeader(HBaseAttribute.HBASE_ROW_ID.asHeader(index), hRow.getId())__                message.setHeader(HBaseAttribute.HBASE_FAMILY.asHeader(index), cell.getFamily())__                message.setHeader(HBaseAttribute.HBASE_QUALIFIER.asHeader(index), cell.getQualifier())__                message.setHeader(HBaseAttribute.HBASE_VALUE.asHeader(index), cell.getValue())__            }_            index++__        }_    };applies,the,cells,to,the,link,org,apache,camel,exchange;public,void,apply,scan,results,message,message,hbase,data,data,message,set,headers,message,get,exchange,get,in,get,headers,int,index,1,if,data,null,data,get,rows,null,return,for,hbase,row,h,row,data,get,rows,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,message,set,header,hbase,attribute,as,header,index,h,row,get,id,message,set,header,hbase,attribute,as,header,index,cell,get,family,message,set,header,hbase,attribute,as,header,index,cell,get,qualifier,message,set,header,hbase,attribute,as,header,index,cell,get,value,index
